[{"code": "numpy.ndarray.__eq__(self, value, /)", "item_id": "numpy.ndarray.__eq__", "summary": "Return self==value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__eq__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__eq__(self, other)", "item_id": "numpy.ma.MaskedArray.__eq__", "summary": "Check whether other equals self elementwise.\nWhen either of the elements is masked, the result is masked as well,\nbut the underlying boolean data are still set, with self and other\nconsidered equal if both are masked, and unequal otherwise.\nFor structured arrays, all fields are combined, with masked values\nignored", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__eq__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__getitem__(self, indx)", "item_id": "numpy.ma.MaskedArray.__getitem__", "summary": "x.__getitem__(y) &lt;==&gt; x[y]\nReturn the item described by i, as a masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__getitem__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " indx", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ge__(self, value, /)", "item_id": "numpy.ndarray.__ge__", "summary": "Return self&gt;=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ge__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ge__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__ge__", "summary": "Return self&gt;=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ge__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__floordiv__(self, other)", "item_id": "numpy.ma.MaskedArray.__floordiv__", "summary": "Divide other into self, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__floordiv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__float__(self)", "item_id": "numpy.ndarray.__float__", "summary": "", "description": "", "code-info": {"name": "numpy.ndarray.__float__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__float__(self)", "item_id": "numpy.ma.MaskedArray.__float__", "summary": "Convert to float.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__float__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__floordiv__(self, value, /)", "item_id": "numpy.ndarray.__floordiv__", "summary": "Return self//value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__floordiv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__divmod__(self, value, /)", "item_id": "numpy.ndarray.__divmod__", "summary": "Return divmod(self, value).\n", "description": "", "code-info": {"name": "numpy.ndarray.__divmod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__divmod__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__divmod__", "summary": "Return divmod(self, value).\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__divmod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__div__(self, other)", "item_id": "numpy.ma.MaskedArray.__div__", "summary": "Divide other into self, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__div__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__deepcopy__(self, memo=None)", "item_id": "numpy.ma.MaskedArray.__deepcopy__", "summary": "Used if copy.deepcopy is called on an array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__deepcopy__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " memo", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__delitem__(self, key, /)", "item_id": "numpy.ma.MaskedArray.__delitem__", "summary": "Delete self[key].\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__delitem__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " key", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rfloordiv__(self, other)", "item_id": "numpy.ma.MaskedArray.__rfloordiv__", "summary": "Divide self into other, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rfloordiv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__deepcopy__()", "item_id": "numpy.ndarray.__deepcopy__", "summary": "Used if copy.deepcopy is called on an array.\n", "description": "", "code-info": {"name": "numpy.ndarray.__deepcopy__", "parameters": []}},
{"code": "numpy.char.chararray.capitalize(self)", "item_id": "numpy.char.chararray.capitalize", "summary": "Return a copy of self with only the first character of each element\ncapitalized.\n\nSee also\nchar.capitalize\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.capitalize", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.dot(b, out=None)", "item_id": "numpy.chararray.dot", "summary": "Dot product of two arrays.\nRefer to numpy.dot for full documentation.\n\nSee also\n\nnumpy.dotequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; a = np.eye(2)\n&gt;&gt;&gt; b = np.ones((2, 2)) * 2\n&gt;&gt;&gt; a.dot(b)\narray([[2.,  2.],\n       [2.,  2.]])\n\n\nThis array method can be conveniently chained:\n&gt;&gt;&gt; a.dot(b).dot(b)\narray([[8.,  8.],\n       [8.,  8.]])\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.dumps()", "item_id": "numpy.memmap.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.dumps", "parameters": []}},
{"code": "numpy.ma.MaskType.dumps()", "item_id": "numpy.ma.MaskType.dumps", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.dumps", "parameters": []}},
{"code": "numpy.matrix.dumps()", "item_id": "numpy.matrix.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.dumps", "parameters": []}},
{"code": "numpy.ma.MaskedArray.dumps()", "item_id": "numpy.ma.MaskedArray.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.dumps", "parameters": []}},
{"code": "numpy.ma.masked_array.dumps()", "item_id": "numpy.ma.masked_array.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.dumps", "parameters": []}},
{"code": "numpy.generic.dumps()", "item_id": "numpy.generic.dumps", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.dumps", "parameters": []}},
{"code": "numpy.char.chararray.fill(value)", "item_id": "numpy.char.chararray.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.fromroots(roots, domain=[], window=None)", "item_id": "numpy.polynomial.legendre.Legendre.fromroots", "summary": "Return series instance that has the specified roots.\nReturns a series representing the product\n(x - r[0])*(x - r[1])*...*(x - r[n-1]), where r is a\nlist of roots.\n\nParameters\n\nrootsarray_likeList of roots.\n\ndomain{[], None, array_like}, optionalDomain for the resulting series", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.fromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.getfield(dtype, offset=0)", "item_id": "numpy.matrix.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.matrix.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.MaskType.getfield()", "item_id": "numpy.ma.MaskType.getfield", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.getfield", "parameters": []}},
{"code": "numpy.ma.masked_array.getfield(dtype, offset=0)", "item_id": "numpy.ma.masked_array.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.ma.masked_array.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.generic.getfield()", "item_id": "numpy.generic.getfield", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.getfield", "parameters": []}},
{"code": "numpy.chararray.getfield(dtype, offset=0)", "item_id": "numpy.chararray.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.chararray.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.has_samewindow(self, other)", "item_id": "numpy.polynomial.hermite_e.HermiteE.has_samewindow", "summary": "Check if windows match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the window attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the windows are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.has_samewindow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.has_samewindow(self, other)", "item_id": "numpy.polynomial.hermite.Hermite.has_samewindow", "summary": "Check if windows match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the window attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the windows are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.has_samewindow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermline(off, scl)", "item_id": "numpy.polynomial.hermite.hermline", "summary": "Hermite series whose graph is a straight line.\n\nParameters\n\noff, sclscalarsThe specified line is given by off + scl*x.\n\n\n\nReturns\n\nyndarrayThis module\u2019s representation of the Hermite series for\noff + scl*x.\n\n\n\n\n\nSee also\npolyline, chebline\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite import hermline, hermval\n&gt;&gt;&gt; hermval(0,hermline(3, 2))\n3.0\n&gt;&gt;&gt; hermval(1,hermline(3, 2))\n5.0\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermline", "parameters": [{"name": "off", "is_optional": false, "type": "others", "description": ""}, {"name": " scl", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.imag(val)", "item_id": "numpy.imag", "summary": "Return the imaginary part of the complex argument.\n\nParameters\n\nvalarray_likeInput array.\n\n\n\nReturns\n\noutndarray or scalarThe imaginary component of the complex argument", "description": "", "code-info": {"name": "numpy.imag", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.iscontiguous(self)", "item_id": "numpy.ma.MaskedArray.iscontiguous", "summary": "Return a boolean indicating whether the data is contiguous.\n\nParameters\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([1, 2, 3])\n&gt;&gt;&gt; x.iscontiguous()\nTrue\n\n\niscontiguous returns one of the flags of the masked array:\n&gt;&gt;&gt; x.flags\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : True\n  OWNDATA : False\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n  UPDATEIFCOPY : False\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.iscontiguous", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.iscontiguous(self)", "item_id": "numpy.ma.masked_array.iscontiguous", "summary": "Return a boolean indicating whether the data is contiguous.\n\nParameters\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([1, 2, 3])\n&gt;&gt;&gt; x.iscontiguous()\nTrue\n\n\niscontiguous returns one of the flags of the masked array:\n&gt;&gt;&gt; x.flags\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : True\n  OWNDATA : False\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n  UPDATEIFCOPY : False\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.iscontiguous", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isnumeric(self)", "item_id": "numpy.chararray.isnumeric", "summary": "For each element in self, return True if there are only\nnumeric characters in the element.\n\nSee also\nchar.isnumeric\n\n", "description": "", "code-info": {"name": "numpy.chararray.isnumeric", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isnumeric(a)", "item_id": "numpy.char.isnumeric", "summary": "For each element, return True if there are only numeric\ncharacters in the element.\nCalls unicode.isnumeric element-wise.\nNumeric characters include digit characters, and all characters\nthat have the Unicode numeric value property, e.g", "description": "", "code-info": {"name": "numpy.char.isnumeric", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.isnumeric(self)", "item_id": "numpy.char.chararray.isnumeric", "summary": "For each element in self, return True if there are only\nnumeric characters in the element.\n\nSee also\nchar.isnumeric\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isnumeric", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isneginf(x, out=None)", "item_id": "numpy.isneginf", "summary": "Test element-wise for negative infinity, return result as bool array.\n\nParameters\n\nxarray_likeThe input array.\n\noutarray_like, optionalA boolean array with the same shape and type as x to store the\nresult.\n\n\n\nReturns\n\noutndarrayA boolean array with the same dimensions as the input.\nIf second argument is not supplied then a numpy boolean array is\nreturned with values True where the corresponding element of the\ninput is negative infinity and values False where the element of\nthe input is not negative infinity.\nIf a second argument is supplied the result is stored there", "description": "", "code-info": {"name": "numpy.isneginf", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.isnat(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.isnat", "summary": "Test element-wise for NaT (not a time) and return result as a boolean array.\n\nNew in version 1.13.0.\n\n\nParameters\n\nxarray_likeInput array with datetime or timedelta data type.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.isnat", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.less", "summary": "Return the truth value of (x1 &lt; x2) element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.less", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legzero([0])", "item_id": "numpy.polynomial.legendre.legzero", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legzero", "parameters": [{"name": "[0]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.mask_rows(a, axis=&lt;no value&gt;)", "item_id": "numpy.ma.mask_rows", "summary": "Mask rows of a 2D array that contain masked values.\nThis function is a shortcut to mask_rowcols with axis equal to 0.\n\nSee also\n\nmask_rowcolsMask rows and/or columns of a 2D array.\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.zeros((3, 3), dtype=int)\n&gt;&gt;&gt; a[1, 1] = 1\n&gt;&gt;&gt; a\narray([[0, 0, 0],\n       [0, 1, 0],\n       [0, 0, 0]])\n&gt;&gt;&gt; a = ma.masked_equal(a, 1)\n&gt;&gt;&gt; a\nmasked_array(\n  data=[[0, 0, 0],\n        [0, --, 0],\n        [0, 0, 0]],\n  mask=[[False, False, False],\n        [False,  True, False],\n        [False, False, False]],\n  fill_value=1)\n\n\n&gt;&gt;&gt; ma.mask_rows(a)\nmasked_array(\n  data=[[0, 0, 0],\n        [--, --, --],\n        [0, 0, 0]],\n  mask=[[False, False, False],\n        [ True,  True,  True],\n        [False, False, False]],\n  fill_value=1)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.mask_rows", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.mask_rowcols(a, axis=None)", "item_id": "numpy.ma.mask_rowcols", "summary": "Mask rows and/or columns of a 2D array that contain masked values.\nMask whole rows and/or columns of a 2D array that contain\nmasked values", "description": "", "code-info": {"name": "numpy.ma.mask_rowcols", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.mask_indices(n, mask_func, k=0)", "item_id": "numpy.mask_indices", "summary": "Return the indices to access (n, n) arrays, given a masking function.\nAssume mask_func is a function that, for a square array a of size\n(n, n) with a possible offset argument k, when called as\nmask_func(a, k) returns a new array with zeros in certain locations\n(functions like triu or tril do precisely this)", "description": "", "code-info": {"name": "numpy.mask_indices", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " mask_func", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.mask_cols(a, axis=&lt;no value&gt;)", "item_id": "numpy.ma.mask_cols", "summary": "Mask columns of a 2D array that contain masked values.\nThis function is a shortcut to mask_rowcols with axis equal to 1.\n\nSee also\n\nmask_rowcolsMask rows and/or columns of a 2D array.\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.zeros((3, 3), dtype=int)\n&gt;&gt;&gt; a[1, 1] = 1\n&gt;&gt;&gt; a\narray([[0, 0, 0],\n       [0, 1, 0],\n       [0, 0, 0]])\n&gt;&gt;&gt; a = ma.masked_equal(a, 1)\n&gt;&gt;&gt; a\nmasked_array(\n  data=[[0, 0, 0],\n        [0, --, 0],\n        [0, 0, 0]],\n  mask=[[False, False, False],\n        [False,  True, False],\n        [False, False, False]],\n  fill_value=1)\n&gt;&gt;&gt; ma.mask_cols(a)\nmasked_array(\n  data=[[0, --, 0],\n        [0, --, 0],\n        [0, --, 0]],\n  mask=[[False,  True, False],\n        [False,  True, False],\n        [False,  True, False]],\n  fill_value=1)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.mask_cols", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.mask_or(m1, m2, copy=False, shrink=True)", "item_id": "numpy.ma.mask_or", "summary": "Combine two masks with the logical_or operator.\nThe result may be a view on m1 or m2 if the other is nomask\n(i.e", "description": "", "code-info": {"name": "numpy.ma.mask_or", "parameters": [{"name": "m1", "is_optional": false, "type": "others", "description": ""}, {"name": " m2", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " shrink", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.nested_iters()", "item_id": "numpy.nested_iters", "summary": "Create nditers for use in nested loops\nCreate a tuple of nditer objects which iterate in nested loops over\ndifferent axes of the op argument", "description": "", "code-info": {"name": "numpy.nested_iters", "parameters": []}},
{"code": "numpy.random.RandomState.negative_binomial(n, p, size=None)", "item_id": "numpy.random.RandomState.negative_binomial", "summary": "Draw samples from a negative binomial distribution.\nSamples are drawn from a negative binomial distribution with specified\nparameters, n successes and p probability of success where n\nis &gt; 0 and p is in the interval [0, 1].\n\nNote\nNew code should use the negative_binomial method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nnfloat or array_like of floatsParameter of the distribution, &gt; 0.\n\npfloat or array_like of floatsParameter of the distribution, &gt;= 0 and &lt;=1.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.negative_binomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nancumprod(a, axis=None, dtype=None, out=None)", "item_id": "numpy.nancumprod", "summary": "Return the cumulative product of array elements over a given axis treating Not a\nNumbers (NaNs) as one", "description": "", "code-info": {"name": "numpy.nancumprod", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nancumsum(a, axis=None, dtype=None, out=None)", "item_id": "numpy.nancumsum", "summary": "Return the cumulative sum of array elements over a given axis treating Not a\nNumbers (NaNs) as zero", "description": "", "code-info": {"name": "numpy.nancumsum", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.negative_binomial(n, p, size=None)", "item_id": "numpy.random.Generator.negative_binomial", "summary": "Draw samples from a negative binomial distribution.\nSamples are drawn from a negative binomial distribution with specified\nparameters, n successes and p probability of success where n\nis &gt; 0 and p is in the interval [0, 1].\n\nParameters\n\nnfloat or array_like of floatsParameter of the distribution, &gt; 0.\n\npfloat or array_like of floatsParameter of the distribution, &gt;= 0 and &lt;=1.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.negative_binomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.negative_binomial(n, p, size=None)", "item_id": "numpy.random.negative_binomial", "summary": "Draw samples from a negative binomial distribution.\nSamples are drawn from a negative binomial distribution with specified\nparameters, n successes and p probability of success where n\nis &gt; 0 and p is in the interval [0, 1].\n\nNote\nNew code should use the negative_binomial method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nnfloat or array_like of floatsParameter of the distribution, &gt; 0.\n\npfloat or array_like of floatsParameter of the distribution, &gt;= 0 and &lt;=1.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.negative_binomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.negative", "summary": "Numerical negative, element-wise.\n\nParameters\n\nxarray_like or scalarInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.negative", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.npv(rate, values)", "item_id": "numpy.npv", "summary": "Returns the NPV (Net Present Value) of a cash flow series.\n\nDeprecated since version 1.18: npv is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nParameters\n\nratescalarThe discount rate.\n\nvaluesarray_like, shape(M, )The values of the time series of cash flows", "description": "", "code-info": {"name": "numpy.npv", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.notmasked_edges(a, axis=None)", "item_id": "numpy.ma.notmasked_edges", "summary": "Find the indices of the first and last unmasked values along an axis.\nIf all values are masked, return None", "description": "", "code-info": {"name": "numpy.ma.notmasked_edges", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.notmasked_contiguous(a, axis=None)", "item_id": "numpy.ma.notmasked_contiguous", "summary": "Find contiguous unmasked data in a masked array along the given axis.\n\nParameters\n\naarray_likeThe input array.\n\naxisint, optionalAxis along which to perform the operation.\nIf None (default), applies to a flattened version of the array, and this\nis the same as flatnotmasked_contiguous.\n\n\n\nReturns\n\nendpointslistA list of slices (start and end indexes) of unmasked indexes\nin the array.\nIf the input is 2d and axis is specified, the result is a list of lists.\n\n\n\n\n\nSee also\nflatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges, clump_masked, clump_unmasked\n\nNotes\nOnly accepts 2-D arrays at most.\nExamples\n&gt;&gt;&gt; a = np.arange(12).reshape((3, 4))\n&gt;&gt;&gt; mask = np.zeros_like(a)\n&gt;&gt;&gt; mask[1:, :-1] = 1; mask[0, 1] = 1; mask[-1, 0] = 0\n&gt;&gt;&gt; ma = np.ma.array(a, mask=mask)\n&gt;&gt;&gt; ma\nmasked_array(\n  data=[[0, --, 2, 3],\n        [--, --, --, 7],\n        [8, --, --, 11]],\n  mask=[[False,  True, False, False],\n        [ True,  True,  True, False],\n        [False,  True,  True, False]],\n  fill_value=999999)\n&gt;&gt;&gt; np.array(ma[~ma.mask])\narray([ 0,  2,  3,  7, 8, 11])\n\n\n&gt;&gt;&gt; np.ma.notmasked_contiguous(ma)\n[slice(0, 1, None), slice(2, 4, None), slice(7, 9, None), slice(11, 12, None)]\n\n\n&gt;&gt;&gt; np.ma.notmasked_contiguous(ma, axis=0)\n[[slice(0, 1, None), slice(2, 3, None)], [], [slice(0, 1, None)], [slice(0, 3, None)]]\n\n\n&gt;&gt;&gt; np.ma.notmasked_contiguous(ma, axis=1)\n[[slice(0, 1, None), slice(2, 4, None)], [slice(3, 4, None)], [slice(0, 1, None), slice(3, 4, None)]]\n\n\n", "description": "", "code-info": {"name": "numpy.ma.notmasked_contiguous", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.not_equal(x1, x2)", "item_id": "numpy.char.not_equal", "summary": "Return (x1 != x2) element-wise.\nUnlike numpy.not_equal, this comparison is performed by first\nstripping whitespace characters from the end of the string", "description": "", "code-info": {"name": "numpy.char.not_equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.nper(rate, pmt, pv, fv=0, when='end')", "item_id": "numpy.nper", "summary": "Compute the number of periodic payments.\n\nDeprecated since version 1.18: nper is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\ndecimal.Decimal type is not supported.\n\nParameters\n\nratearray_likeRate of interest (per period)\n\npmtarray_likePayment\n\npvarray_likePresent value\n\nfvarray_like, optionalFuture value\n\nwhen{{\u2018begin\u2019, 1}, {\u2018end\u2019, 0}}, {string, int}, optionalWhen payments are due (\u2018begin\u2019 (1) or \u2018end\u2019 (0))\n\n\n\n\nNotes\nThe number of periods nper is computed by solving the equation:\nfv + pv*(1+rate)**nper + pmt*(1+rate*when)/rate*((1+rate)**nper-1) = 0\n\n\nbut if rate = 0 then:\nfv + pv + pmt*nper = 0\n\n\nReferences\n\n1\nNumPy Enhancement Proposal (NEP) 32,\nhttps://numpy.org/neps/nep-0032-remove-financial-functions.html\n\n\nExamples\nIf you only had $150/month to pay towards the loan, how long would it take\nto pay-off a loan of $8,000 at 7% annual interest?\n&gt;&gt;&gt; print(np.round(np.nper(0.07/12, -150, 8000), 5))\n64.07335\n\n\nSo, over 64 months would be required to pay off the loan.\nThe same analysis could be done with several different interest rates\nand/or payments and/or total amounts to produce an entire table.\n&gt;&gt;&gt; np.nper(*(np.ogrid[0.07/12: 0.08/12: 0.01/12,\n..", "description": "", "code-info": {"name": "numpy.nper", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " pmt", "is_optional": false, "type": "others", "description": ""}, {"name": " pv", "is_optional": false, "type": "others", "description": ""}, {"name": " fv", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}]}},
{"code": "numpy.random.RandomState.normal(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.RandomState.normal", "summary": "Draw random samples from a normal (Gaussian) distribution.\nThe probability density function of the normal distribution, first\nderived by De Moivre and 200 years later by both Gauss and Laplace\nindependently [2], is often called the bell curve because of\nits characteristic shape (see the example below).\nThe normal distributions occurs often in nature", "description": "", "code-info": {"name": "numpy.random.RandomState.normal", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.not_equal", "summary": "Return (x1 != x2) element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.not_equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.linalg.norm(x, ord=None, axis=None, keepdims=False)", "item_id": "numpy.linalg.norm", "summary": "Matrix or vector norm.\nThis function is able to return one of eight different matrix norms,\nor one of an infinite number of vector norms (described below), depending\non the value of the ord parameter.\n\nParameters\n\nxarray_likeInput array", "description": "", "code-info": {"name": "numpy.linalg.norm", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " ord", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.random.pareto(a, size=None)", "item_id": "numpy.random.pareto", "summary": "Draw samples from a Pareto II or Lomax distribution with\nspecified shape.\nThe Lomax or Pareto II distribution is a shifted Pareto\ndistribution", "description": "", "code-info": {"name": "numpy.random.pareto", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.pad(array, pad_width, mode='constant', **kwargs)", "item_id": "numpy.pad", "summary": "Pad an array.\n\nParameters\n\narrayarray_like of rank NThe array to pad.\n\npad_width{sequence, array_like, int}Number of values padded to the edges of each axis.\n((before_1, after_1), \u2026 (before_N, after_N)) unique pad widths\nfor each axis.\n((before, after),) yields same before and after pad for each axis.\n(pad,) or int is a shortcut for before = after = pad width for all\naxes.\n\nmodestr or function, optionalOne of the following string values or a user supplied function.\n\n\u2018constant\u2019 (default)Pads with a constant value.\n\n\u2018edge\u2019Pads with the edge values of array.\n\n\u2018linear_ramp\u2019Pads with the linear ramp between end_value and the\narray edge value.\n\n\u2018maximum\u2019Pads with the maximum value of all or part of the\nvector along each axis.\n\n\u2018mean\u2019Pads with the mean value of all or part of the\nvector along each axis.\n\n\u2018median\u2019Pads with the median value of all or part of the\nvector along each axis.\n\n\u2018minimum\u2019Pads with the minimum value of all or part of the\nvector along each axis.\n\n\u2018reflect\u2019Pads with the reflection of the vector mirrored on\nthe first and last values of the vector along each\naxis.\n\n\u2018symmetric\u2019Pads with the reflection of the vector mirrored\nalong the edge of the array.\n\n\u2018wrap\u2019Pads with the wrap of the vector along the axis.\nThe first values are used to pad the end and the\nend values are used to pad the beginning.\n\n\u2018empty\u2019Pads with undefined values.\n\nNew in version 1.17.\n\n\n&lt;function&gt;Padding function, see Notes.\n\n\n\nstat_lengthsequence or int, optionalUsed in \u2018maximum\u2019, \u2018mean\u2019, \u2018median\u2019, and \u2018minimum\u2019", "description": "", "code-info": {"name": "numpy.pad", "parameters": [{"name": "array", "is_optional": false, "type": "others", "description": ""}, {"name": " pad_width", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'constant'", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.outerproduct(a, b)", "item_id": "numpy.ma.outerproduct", "summary": "Compute the outer product of two vectors.\nGiven two vectors, a = [a0, a1, ..., aM] and\nb = [b0, b1, ..., bN],\nthe outer product [1] is:\n[[a0*b0  a0*b1 ..", "description": "", "code-info": {"name": "numpy.ma.outerproduct", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.normal(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.Generator.normal", "summary": "Draw random samples from a normal (Gaussian) distribution.\nThe probability density function of the normal distribution, first\nderived by De Moivre and 200 years later by both Gauss and Laplace\nindependently [2], is often called the bell curve because of\nits characteristic shape (see the example below).\nThe normal distributions occurs often in nature", "description": "", "code-info": {"name": "numpy.random.Generator.normal", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.normal(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.normal", "summary": "Draw random samples from a normal (Gaussian) distribution.\nThe probability density function of the normal distribution, first\nderived by De Moivre and 200 years later by both Gauss and Laplace\nindependently [2], is often called the bell curve because of\nits characteristic shape (see the example below).\nThe normal distributions occurs often in nature", "description": "", "code-info": {"name": "numpy.random.normal", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ufunc.outer(A, B, **kwargs)", "item_id": "numpy.ufunc.outer", "summary": "Apply the ufunc op to all pairs (a, b) with a in A and b in B.\nLet M = A.ndim, N = B.ndim", "description": "", "code-info": {"name": "numpy.ufunc.outer", "parameters": [{"name": "A", "is_optional": false, "type": "others", "description": ""}, {"name": " B", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.packbits(a, axis=None, bitorder='big')", "item_id": "numpy.packbits", "summary": "Packs the elements of a binary-valued array into bits in a uint8 array.\nThe result is padded to full bytes by inserting zero bits at the end.\n\nParameters\n\naarray_likeAn array of integers or booleans whose elements should be packed to\nbits.\n\naxisint, optionalThe dimension over which bit-packing is done.\nNone implies packing the flattened array.\n\nbitorder{\u2018big\u2019, \u2018little\u2019}, optionalThe order of the input bits", "description": "", "code-info": {"name": "numpy.packbits", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " bitorder", "is_optional": true, "type": "string", "default_value": "'big'", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0)", "item_id": "numpy.polynomial.polynomial.polyint", "summary": "Integrate a polynomial.\nReturns the polynomial coefficients c integrated m times from\nlbnd along axis", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyint", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polyint(p, m=1, k=None)", "item_id": "numpy.polyint", "summary": "Return an antiderivative (indefinite integral) of a polynomial.\nThe returned order m antiderivative P of polynomial p satisfies\n and is defined up to m - 1\nintegration constants k", "description": "", "code-info": {"name": "numpy.polyint", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.put(self, indices, values, mode='raise')", "item_id": "numpy.ma.masked_array.put", "summary": "Set storage-indexed locations to corresponding values.\nSets self._data.flat[n] = values[n] for each n in indices.\nIf values is shorter than indices then it will repeat.\nIf values has some masked values, the initial mask is updated\nin consequence, else the corresponding values are unmasked.\n\nParameters\n\nindices1-D array_likeTarget indices, interpreted as integers.\n\nvaluesarray_likeValues to place in self._data copy at target indices.\n\nmode{\u2018raise\u2019, \u2018wrap\u2019, \u2018clip\u2019}, optionalSpecifies how out-of-bounds indices will behave.\n\u2018raise\u2019 : raise an error.\n\u2018wrap\u2019 : wrap around.\n\u2018clip\u2019 : clip to the range.\n\n\n\n\nNotes\nvalues can be a scalar or length 1 array.\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[1, --, 3],\n        [--, 5, --],\n        [7, --, 9]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n&gt;&gt;&gt; x.put([0,4,8],[10,20,30])\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[10, --, 3],\n        [--, 20, --],\n        [7, --, 30]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n\n\n&gt;&gt;&gt; x.put(4,999)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[10, --, 3],\n        [--, 999, --],\n        [7, --, 30]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.put", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.generic.put()", "item_id": "numpy.generic.put", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.put", "parameters": []}},
{"code": "numpy.chararray.put(indices, values, mode='raise')", "item_id": "numpy.chararray.put", "summary": "Set a.flat[n] = values[n] for all n in indices.\nRefer to numpy.put for full documentation.\n\nSee also\n\nnumpy.putequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.put", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.put(a, ind, v, mode='raise')", "item_id": "numpy.put", "summary": "Replaces specified elements of an array with given values.\nThe indexing works on the flattened target array", "description": "", "code-info": {"name": "numpy.put", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " ind", "is_optional": false, "type": "others", "description": ""}, {"name": " v", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.char.chararray.put(indices, values, mode='raise')", "item_id": "numpy.char.chararray.put", "summary": "Set a.flat[n] = values[n] for all n in indices.\nRefer to numpy.put for full documentation.\n\nSee also\n\nnumpy.putequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.put", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.pv(rate, nper, pmt, fv=0, when='end')", "item_id": "numpy.pv", "summary": "Compute the present value.\n\nDeprecated since version 1.18: pv is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nGiven:\na future value, fv\nan interest rate compounded once per period, of which\nthere are\nnper total\na (fixed) payment, pmt, paid either\nat the beginning (when = {\u2018begin\u2019, 1}) or the end\n(when = {\u2018end\u2019, 0}) of each period\n\n\nReturn:the value now\n\n\n\nParameters\n\nratearray_likeRate of interest (per period)\n\nnperarray_likeNumber of compounding periods\n\npmtarray_likePayment\n\nfvarray_like, optionalFuture value\n\nwhen{{\u2018begin\u2019, 1}, {\u2018end\u2019, 0}}, {string, int}, optionalWhen payments are due (\u2018begin\u2019 (1) or \u2018end\u2019 (0))\n\n\n\nReturns\n\noutndarray, floatPresent value of a series of payments or investments.\n\n\n\n\nNotes\nThe present value is computed by solving the equation:\nfv +\npv*(1 + rate)**nper +\npmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) = 0\n\n\nor, when rate = 0:\nfv + pv + pmt * nper = 0\n\n\nfor pv, which is then returned.\nReferences\n\n1\nNumPy Enhancement Proposal (NEP) 32,\nhttps://numpy.org/neps/nep-0032-remove-financial-functions.html\n\n2\nWheeler, D", "description": "", "code-info": {"name": "numpy.pv", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " nper", "is_optional": false, "type": "others", "description": ""}, {"name": " pmt", "is_optional": false, "type": "others", "description": ""}, {"name": " fv", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}]}},
{"code": "numpy.putmask(a, mask, values)", "item_id": "numpy.putmask", "summary": "Changes elements of an array based on conditional and input values.\nSets a.flat[n] = values[n] for each n where mask.flat[n]==True.\nIf values is not the same size as a and mask then it will repeat.\nThis gives behavior different from a[mask] = values.\n\nParameters\n\naarray_likeTarget array.\n\nmaskarray_likeBoolean mask array", "description": "", "code-info": {"name": "numpy.putmask", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " mask", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.put_along_axis(arr, indices, values, axis)", "item_id": "numpy.put_along_axis", "summary": "Put values into the destination array by matching 1d index and data slices.\nThis iterates over matching 1d slices oriented along the specified axis in\nthe index and data arrays, and uses the former to place values into the\nlatter", "description": "", "code-info": {"name": "numpy.put_along_axis", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.ptp()", "item_id": "numpy.record.ptp", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.ptp", "parameters": []}},
{"code": "numpy.record.put()", "item_id": "numpy.record.put", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.put", "parameters": []}},
{"code": "numpy.ndarray.put(indices, values, mode='raise')", "item_id": "numpy.ndarray.put", "summary": "Set a.flat[n] = values[n] for all n in indices.\nRefer to numpy.put for full documentation.\n\nSee also\n\nnumpy.putequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.put", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.recarray.put(indices, values, mode='raise')", "item_id": "numpy.recarray.put", "summary": "Set a.flat[n] = values[n] for all n in indices.\nRefer to numpy.put for full documentation.\n\nSee also\n\nnumpy.putequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.put", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.memmap.put(indices, values, mode='raise')", "item_id": "numpy.memmap.put", "summary": "Set a.flat[n] = values[n] for all n in indices.\nRefer to numpy.put for full documentation.\n\nSee also\n\nnumpy.putequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.put", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.matrix.put(indices, values, mode='raise')", "item_id": "numpy.matrix.put", "summary": "Set a.flat[n] = values[n] for all n in indices.\nRefer to numpy.put for full documentation.\n\nSee also\n\nnumpy.putequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.put", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.ma.MaskType.put()", "item_id": "numpy.ma.MaskType.put", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.put", "parameters": []}},
{"code": "numpy.ma.MaskedArray.put(self, indices, values, mode='raise')", "item_id": "numpy.ma.MaskedArray.put", "summary": "Set storage-indexed locations to corresponding values.\nSets self._data.flat[n] = values[n] for each n in indices.\nIf values is shorter than indices then it will repeat.\nIf values has some masked values, the initial mask is updated\nin consequence, else the corresponding values are unmasked.\n\nParameters\n\nindices1-D array_likeTarget indices, interpreted as integers.\n\nvaluesarray_likeValues to place in self._data copy at target indices.\n\nmode{\u2018raise\u2019, \u2018wrap\u2019, \u2018clip\u2019}, optionalSpecifies how out-of-bounds indices will behave.\n\u2018raise\u2019 : raise an error.\n\u2018wrap\u2019 : wrap around.\n\u2018clip\u2019 : clip to the range.\n\n\n\n\nNotes\nvalues can be a scalar or length 1 array.\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[1, --, 3],\n        [--, 5, --],\n        [7, --, 9]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n&gt;&gt;&gt; x.put([0,4,8],[10,20,30])\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[10, --, 3],\n        [--, 20, --],\n        [7, --, 30]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n\n\n&gt;&gt;&gt; x.put(4,999)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[10, --, 3],\n        [--, 999, --],\n        [7, --, 30]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.put", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.recarray.ptp(axis=None, out=None, keepdims=False)", "item_id": "numpy.recarray.ptp", "summary": "Peak to peak (maximum - minimum) value along a given axis.\nRefer to numpy.ptp for full documentation.\n\nSee also\n\nnumpy.ptpequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.ptp", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.ptp(axis=None, out=None, keepdims=False)", "item_id": "numpy.ndarray.ptp", "summary": "Peak to peak (maximum - minimum) value along a given axis.\nRefer to numpy.ptp for full documentation.\n\nSee also\n\nnumpy.ptpequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.ptp", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.memmap.ptp(axis=None, out=None, keepdims=False)", "item_id": "numpy.memmap.ptp", "summary": "Peak to peak (maximum - minimum) value along a given axis.\nRefer to numpy.ptp for full documentation.\n\nSee also\n\nnumpy.ptpequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.ptp", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.matrix.ptp(self, axis=None, out=None)", "item_id": "numpy.matrix.ptp", "summary": "Peak-to-peak (maximum - minimum) value along the given axis.\nRefer to numpy.ptp for full documentation.\n\nSee also\nnumpy.ptp\n\nNotes\nSame as ndarray.ptp, except, where that would return an ndarray object,\nthis returns a matrix object.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.ptp()\n11\n&gt;&gt;&gt; x.ptp(0)\nmatrix([[8, 8, 8, 8]])\n&gt;&gt;&gt; x.ptp(1)\nmatrix([[3],\n        [3],\n        [3]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.ptp", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.ptp()", "item_id": "numpy.ma.MaskType.ptp", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.ptp", "parameters": []}},
{"code": "numpy.ma.MaskedArray.ptp(self, axis=None, out=None, fill_value=None, keepdims=False)", "item_id": "numpy.ma.MaskedArray.ptp", "summary": "Return (maximum - minimum) along the given dimension\n(i.e", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.ptp", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.masked_array.ptp(self, axis=None, out=None, fill_value=None, keepdims=False)", "item_id": "numpy.ma.masked_array.ptp", "summary": "Return (maximum - minimum) along the given dimension\n(i.e", "description": "", "code-info": {"name": "numpy.ma.masked_array.ptp", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.generic.ptp()", "item_id": "numpy.generic.ptp", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.ptp", "parameters": []}},
{"code": "numpy.chararray.ptp(axis=None, out=None, keepdims=False)", "item_id": "numpy.chararray.ptp", "summary": "Peak to peak (maximum - minimum) value along a given axis.\nRefer to numpy.ptp for full documentation.\n\nSee also\n\nnumpy.ptpequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.ptp", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.ptp(axis=None, out=None, keepdims=False)", "item_id": "numpy.char.chararray.ptp", "summary": "Peak to peak (maximum - minimum) value along a given axis.\nRefer to numpy.ptp for full documentation.\n\nSee also\n\nnumpy.ptpequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.ptp", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.ptp(obj, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.ptp", "summary": "Return (maximum - minimum) along the given dimension\n(i.e", "description": "", "code-info": {"name": "numpy.ma.ptp", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ptp(a, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ptp", "summary": "Range of values (maximum - minimum) along an axis.\nThe name of the function comes from the acronym for \u2018peak to peak\u2019.\n\nParameters\n\naarray_likeInput values.\n\naxisNone or int or tuple of ints, optionalAxis along which to find the peaks", "description": "", "code-info": {"name": "numpy.ptp", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.promote_types(type1, type2)", "item_id": "numpy.promote_types", "summary": "Returns the data type with the smallest size and smallest scalar\nkind to which both type1 and type2 may be safely cast.\nThe returned data type is always in native byte order.\nThis function is symmetric, but rarely associative.\n\nParameters\n\ntype1dtype or dtype specifierFirst data type.\n\ntype2dtype or dtype specifierSecond data type.\n\n\n\nReturns\n\noutdtypeThe promoted data type.\n\n\n\n\n\nSee also\nresult_type, dtype, can_cast\n\nNotes\n\nNew in version 1.6.0.\n\nStarting in NumPy 1.9, promote_types function now returns a valid string\nlength when given an integer or float dtype as one argument and a string\ndtype as another argument", "description": "", "code-info": {"name": "numpy.promote_types", "parameters": [{"name": "type1", "is_optional": false, "type": "others", "description": ""}, {"name": " type2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.randint(low, high=None, size=None, dtype=int)", "item_id": "numpy.random.RandomState.randint", "summary": "Return random integers from low (inclusive) to high (exclusive).\nReturn random integers from the \u201cdiscrete uniform\u201d distribution of\nthe specified dtype in the \u201chalf-open\u201d interval [low, high)", "description": "", "code-info": {"name": "numpy.random.RandomState.randint", "parameters": [{"name": "low", "is_optional": false, "type": "others", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "int", "description": ""}]}},
{"code": "numpy.random.RandomState.rand(d0, d1, ..., dn)", "item_id": "numpy.random.RandomState.rand", "summary": "Random values in a given shape.\n\nNote\nThis is a convenience function for users porting code from Matlab,\nand wraps random_sample", "description": "", "code-info": {"name": "numpy.random.RandomState.rand", "parameters": [{"name": "d0", "is_optional": false, "type": "others", "description": ""}, {"name": " d1", "is_optional": false, "type": "others", "description": ""}, {"name": " ...", "is_optional": false, "type": "others", "description": ""}, {"name": " dn", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.rand(d0, d1, ..., dn)", "item_id": "numpy.random.rand", "summary": "Random values in a given shape.\n\nNote\nThis is a convenience function for users porting code from Matlab,\nand wraps random_sample", "description": "", "code-info": {"name": "numpy.random.rand", "parameters": [{"name": "d0", "is_optional": false, "type": "others", "description": ""}, {"name": " d1", "is_optional": false, "type": "others", "description": ""}, {"name": " ...", "is_optional": false, "type": "others", "description": ""}, {"name": " dn", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matlib.randn(*args)", "item_id": "numpy.matlib.randn", "summary": "Return a random matrix with data from the \u201cstandard normal\u201d distribution.\nrandn generates a matrix filled with random floats sampled from a\nunivariate \u201cnormal\u201d (Gaussian) distribution of mean 0 and variance 1.\n\nParameters\n\n*argsArgumentsShape of the output.\nIf given as N integers, each integer specifies the size of one\ndimension", "description": "", "code-info": {"name": "numpy.matlib.randn", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.randint(low, high=None, size=None, dtype=int)", "item_id": "numpy.random.randint", "summary": "Return random integers from low (inclusive) to high (exclusive).\nReturn random integers from the \u201cdiscrete uniform\u201d distribution of\nthe specified dtype in the \u201chalf-open\u201d interval [low, high)", "description": "", "code-info": {"name": "numpy.random.randint", "parameters": [{"name": "low", "is_optional": false, "type": "others", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "int", "description": ""}]}},
{"code": "numpy.matlib.rand(*args)", "item_id": "numpy.matlib.rand", "summary": "Return a matrix of random values with given shape.\nCreate a matrix of the given shape and propagate it with\nrandom samples from a uniform distribution over [0, 1).\n\nParameters\n\n*argsArgumentsShape of the output.\nIf given as N integers, each integer specifies the size of one\ndimension.\nIf given as a tuple, this tuple gives the complete shape.\n\n\n\nReturns\n\noutndarrayThe matrix of random values with shape given by *args.\n\n\n\n\n\nSee also\nrandn, numpy.random.RandomState.rand\n\nExamples\n&gt;&gt;&gt; np.random.seed(123)\n&gt;&gt;&gt; import numpy.matlib\n&gt;&gt;&gt; np.matlib.rand(2, 3)\nmatrix([[0.69646919, 0.28613933, 0.22685145],\n        [0.55131477, 0.71946897, 0.42310646]])\n&gt;&gt;&gt; np.matlib.rand((2, 3))\nmatrix([[0.9807642 , 0.68482974, 0.4809319 ],\n        [0.39211752, 0.34317802, 0.72904971]])\n\n\nIf the first argument is a tuple, other arguments are ignored:\n&gt;&gt;&gt; np.matlib.rand((2, 3), 4)\nmatrix([[0.43857224, 0.0596779 , 0.39804426],\n        [0.73799541, 0.18249173, 0.17545176]])\n\n\n", "description": "", "code-info": {"name": "numpy.matlib.rand", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.radians(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.radians", "summary": "Convert angles from degrees to radians.\n\nParameters\n\nxarray_likeInput array in degrees.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.radians", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.rad2deg(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.rad2deg", "summary": "Convert angles from radians to degrees.\n\nParameters\n\nxarray_likeAngle in radians.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.rad2deg", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ufunc.reduceat(a, indices, axis=0, dtype=None, out=None)", "item_id": "numpy.ufunc.reduceat", "summary": "Performs a (local) reduce with specified slices over a single axis.\nFor i in range(len(indices)), reduceat computes\nufunc.reduce(a[indices[i]:indices[i+1]]), which becomes the i-th\ngeneralized \u201crow\u201d parallel to axis in the final result (i.e., in a\n2-D array, for example, if axis = 0, it becomes the i-th row, but if\naxis = 1, it becomes the i-th column)", "description": "", "code-info": {"name": "numpy.ufunc.reduceat", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ufunc.reduce(a, axis=0, dtype=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.ufunc.reduce", "summary": "Reduces a\u2019s dimension by one, by applying ufunc along one axis.\nLet ", "description": "", "code-info": {"name": "numpy.ufunc.reduce", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.suppress_warnings.record(self, category=&lt;class 'Warning'&gt;, message='', module=None)", "item_id": "numpy.testing.suppress_warnings.record", "summary": "Append a new recording filter or apply it if the state is entered.\nAll warnings matching will be appended to the log attribute.\n\nParameters\n\ncategoryclass, optionalWarning class to filter\n\nmessagestring, optionalRegular expression matching the warning message.\n\nmodulemodule, optionalModule to filter for", "description": "", "code-info": {"name": "numpy.testing.suppress_warnings.record", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " category", "is_optional": true, "type": "others", "default_value": "&lt;class 'Warning'&gt;", "description": ""}, {"name": " message", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " module", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.reciprocal(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.reciprocal", "summary": "Return the reciprocal of the argument, element-wise.\nCalculates 1/x.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.reciprocal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.rfind(self, sub, start=0, end=None)", "item_id": "numpy.char.chararray.rfind", "summary": "For each element in self, return the highest index in the string\nwhere substring sub is found, such that sub is contained\nwithin [start, end].\n\nSee also\nchar.rfind\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.rfind", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.shrink_mask(self)", "item_id": "numpy.ma.masked_array.shrink_mask", "summary": "Reduce a mask to nomask when possible.\n\nParameters\n\nNone\n\n\nReturns\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2 ], [3, 4]], mask=[0]*4)\n&gt;&gt;&gt; x.mask\narray([[False, False],\n       [False, False]])\n&gt;&gt;&gt; x.shrink_mask()\nmasked_array(\n  data=[[1, 2],\n        [3, 4]],\n  mask=False,\n  fill_value=999999)\n&gt;&gt;&gt; x.mask\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.shrink_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.searchsorted()", "item_id": "numpy.record.searchsorted", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.searchsorted", "parameters": []}},
{"code": "numpy.recarray.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.recarray.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.ndarray.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.shares_memory(a, b, max_work=None)", "item_id": "numpy.shares_memory", "summary": "Determine if two arrays share memory\n\nParameters\n\na, bndarrayInput arrays\n\nmax_workint, optionalEffort to spend on solving the overlap problem (maximum number\nof candidate solutions to consider)", "description": "", "code-info": {"name": "numpy.shares_memory", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " max_work", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.square", "summary": "Return the element-wise square of the input.\n\nParameters\n\nxarray_likeInput data.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.square", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.take(indices, axis=None, out=None, mode='raise')", "item_id": "numpy.ndarray.take", "summary": "Return an array formed from the elements of a at the given indices.\nRefer to numpy.take for full documentation.\n\nSee also\n\nnumpy.takeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.memmap.take(indices, axis=None, out=None, mode='raise')", "item_id": "numpy.memmap.take", "summary": "Return an array formed from the elements of a at the given indices.\nRefer to numpy.take for full documentation.\n\nSee also\n\nnumpy.takeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.matrix.take(indices, axis=None, out=None, mode='raise')", "item_id": "numpy.matrix.take", "summary": "Return an array formed from the elements of a at the given indices.\nRefer to numpy.take for full documentation.\n\nSee also\n\nnumpy.takeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.ma.MaskType.take()", "item_id": "numpy.ma.MaskType.take", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.take", "parameters": []}},
{"code": "numpy.generic.trace()", "item_id": "numpy.generic.trace", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.trace", "parameters": []}},
{"code": "numpy.typename(char)", "item_id": "numpy.typename", "summary": "Return a description for the given data type code.\n\nParameters\n\ncharstrData type code.\n\n\n\nReturns\n\noutstrDescription of the input data type code.\n\n\n\n\n\nSee also\ndtype, typecodes\n\nExamples\n&gt;&gt;&gt; typechars = ['S1', '?', 'B', 'D', 'G', 'F', 'I', 'H', 'L', 'O', 'Q',\n..", "description": "", "code-info": {"name": "numpy.typename", "parameters": [{"name": "char", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.truncate(self, size)", "item_id": "numpy.polynomial.polynomial.Polynomial.truncate", "summary": "Truncate series to length size.\nReduce the series to length size by discarding the high\ndegree terms", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.truncate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.truncate(self, size)", "item_id": "numpy.polynomial.legendre.Legendre.truncate", "summary": "Truncate series to length size.\nReduce the series to length size by discarding the high\ndegree terms", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.truncate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.weibull(a, size=None)", "item_id": "numpy.random.Generator.weibull", "summary": "Draw samples from a Weibull distribution.\nDraw samples from a 1-parameter Weibull distribution with the given\nshape parameter a.\n\n\nHere, U is drawn from the uniform distribution over (0,1].\nThe more common 2-parameter Weibull, including a scale parameter\n is just .\n\nParameters\n\nafloat or array_like of floatsShape parameter of the distribution", "description": "", "code-info": {"name": "numpy.random.Generator.weibull", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.zipf(a, size=None)", "item_id": "numpy.random.RandomState.zipf", "summary": "Draw samples from a Zipf distribution.\nSamples are drawn from a Zipf distribution with specified parameter\na &gt; 1.\nThe Zipf distribution (also known as the zeta distribution) is a\ncontinuous probability distribution that satisfies Zipf\u2019s law: the\nfrequency of an item is inversely proportional to its rank in a\nfrequency table.\n\nNote\nNew code should use the zipf method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nafloat or array_like of floatsDistribution parameter", "description": "", "code-info": {"name": "numpy.random.RandomState.zipf", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.zipf(a, size=None)", "item_id": "numpy.random.zipf", "summary": "Draw samples from a Zipf distribution.\nSamples are drawn from a Zipf distribution with specified parameter\na &gt; 1.\nThe Zipf distribution (also known as the zeta distribution) is a\ncontinuous probability distribution that satisfies Zipf\u2019s law: the\nfrequency of an item is inversely proportional to its rank in a\nfrequency table.\n\nNote\nNew code should use the zipf method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nafloat or array_like of floatsDistribution parameter", "description": "", "code-info": {"name": "numpy.random.zipf", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.zfill(self, width)", "item_id": "numpy.chararray.zfill", "summary": "Return the numeric string left-filled with zeros in a string of\nlength width.\n\nSee also\nchar.zfill\n\n", "description": "", "code-info": {"name": "numpy.chararray.zfill", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.weibull(a, size=None)", "item_id": "numpy.random.weibull", "summary": "Draw samples from a Weibull distribution.\nDraw samples from a 1-parameter Weibull distribution with the given\nshape parameter a.\n\n\nHere, U is drawn from the uniform distribution over (0,1].\nThe more common 2-parameter Weibull, including a scale parameter\n is just .\n\nNote\nNew code should use the weibull method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nafloat or array_like of floatsShape parameter of the distribution", "description": "", "code-info": {"name": "numpy.random.weibull", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.zfill(self, width)", "item_id": "numpy.char.chararray.zfill", "summary": "Return the numeric string left-filled with zeros in a string of\nlength width.\n\nSee also\nchar.zfill\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.zfill", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.zipf(a, size=None)", "item_id": "numpy.random.Generator.zipf", "summary": "Draw samples from a Zipf distribution.\nSamples are drawn from a Zipf distribution with specified parameter\na &gt; 1.\nThe Zipf distribution (also known as the zeta distribution) is a\ncontinuous probability distribution that satisfies Zipf\u2019s law: the\nfrequency of an item is inversely proportional to its rank in a\nfrequency table.\n\nParameters\n\nafloat or array_like of floatsDistribution parameter", "description": "", "code-info": {"name": "numpy.random.Generator.zipf", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.zeros_like(a, dtype=None, order='K', subok=True, shape=None)", "item_id": "numpy.zeros_like", "summary": "Return an array of zeros with the same shape and type as a given array.\n\nParameters\n\naarray_likeThe shape and data-type of a define these same attributes of\nthe returned array.\n\ndtypedata-type, optionalOverrides the data type of the result.\n\nNew in version 1.6.0.\n\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result", "description": "", "code-info": {"name": "numpy.zeros_like", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.zfill(a, width)", "item_id": "numpy.char.zfill", "summary": "Return the numeric string left-filled with zeros\nCalls str.zfill element-wise.\n\nParameters\n\naarray_like, {str, unicode}Input array.\n\nwidthintWidth of string to left-fill elements in a.\n\n\n\nReturns\n\noutndarray, {str, unicode}Output array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.zfill\n\n", "description": "", "code-info": {"name": "numpy.char.zfill", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matlib.zeros(shape, dtype=None, order='C')", "item_id": "numpy.matlib.zeros", "summary": "Return a matrix of given shape and type, filled with zeros.\n\nParameters\n\nshapeint or sequence of intsShape of the matrix\n\ndtypedata-type, optionalThe desired data-type for the matrix, default is float.\n\norder{\u2018C\u2019, \u2018F\u2019}, optionalWhether to store the result in C- or Fortran-contiguous order,\ndefault is \u2018C\u2019.\n\n\n\nReturns\n\noutmatrixZero matrix of given shape, dtype, and order.\n\n\n\n\n\nSee also\n\nnumpy.zerosEquivalent array function.\n\nmatlib.onesReturn a matrix of ones.\n\n\n\nNotes\nIf shape has length one i.e", "description": "", "code-info": {"name": "numpy.matlib.zeros", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.zeros(shape, dtype=float, order='C')", "item_id": "numpy.zeros", "summary": "Return a new array of given shape and type, filled with zeros.\n\nParameters\n\nshapeint or tuple of intsShape of the new array, e.g., (2, 3) or 2.\n\ndtypedata-type, optionalThe desired data-type for the array, e.g., numpy.int8", "description": "", "code-info": {"name": "numpy.zeros", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.zeros(shape, dtype=float, order='C')", "item_id": "numpy.ma.zeros", "summary": "Return a new array of given shape and type, filled with zeros.\n\nParameters\n\nshapeint or tuple of intsShape of the new array, e.g., (2, 3) or 2.\n\ndtypedata-type, optionalThe desired data-type for the array, e.g., numpy.int8", "description": "", "code-info": {"name": "numpy.ma.zeros", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.window([-1,  1])", "item_id": "numpy.polynomial.polynomial.Polynomial.window", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.window", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.window([-1,  1])", "item_id": "numpy.polynomial.legendre.Legendre.window", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.window", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.window([0, 1])", "item_id": "numpy.polynomial.laguerre.Laguerre.window", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.window", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.window([-1,  1])", "item_id": "numpy.polynomial.hermite_e.HermiteE.window", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.window", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.window([-1,  1])", "item_id": "numpy.polynomial.hermite.Hermite.window", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.window", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.window([-1,  1])", "item_id": "numpy.polynomial.chebyshev.Chebyshev.window", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.window", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.wald(mean, scale, size=None)", "item_id": "numpy.random.RandomState.wald", "summary": "Draw samples from a Wald, or inverse Gaussian, distribution.\nAs the scale approaches infinity, the distribution becomes more like a\nGaussian", "description": "", "code-info": {"name": "numpy.random.RandomState.wald", "parameters": [{"name": "mean", "is_optional": false, "type": "others", "description": ""}, {"name": " scale", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.who(vardict=None)", "item_id": "numpy.who", "summary": "Print the NumPy arrays in the given dictionary.\nIf there is no dictionary passed in or vardict is None then returns\nNumPy arrays in the globals() dictionary (all NumPy arrays in the\nnamespace).\n\nParameters\n\nvardictdict, optionalA dictionary possibly containing ndarrays", "description": "", "code-info": {"name": "numpy.who", "parameters": [{"name": "vardict", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.where(condition, x=&lt;no value&gt;, y=&lt;no value&gt;)", "item_id": "numpy.ma.where", "summary": "Return a masked array with elements from x or y, depending on condition.\n\nNote\nWhen only condition is provided, this function is identical to\nnonzero", "description": "", "code-info": {"name": "numpy.ma.where", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " x", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " y", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.where(condition[, x, y])", "item_id": "numpy.where", "summary": "Return elements chosen from x or y depending on condition.\n\nNote\nWhen only condition is provided, this function is a shorthand for\nnp.asarray(condition).nonzero()", "description": "", "code-info": {"name": "numpy.where", "parameters": [{"name": "condition[", "is_optional": false, "type": "others", "description": ""}, {"name": " x", "is_optional": false, "type": "others", "description": ""}, {"name": " y]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.wald(mean, scale, size=None)", "item_id": "numpy.random.Generator.wald", "summary": "Draw samples from a Wald, or inverse Gaussian, distribution.\nAs the scale approaches infinity, the distribution becomes more like a\nGaussian", "description": "", "code-info": {"name": "numpy.random.Generator.wald", "parameters": [{"name": "mean", "is_optional": false, "type": "others", "description": ""}, {"name": " scale", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.weibull(a, size=None)", "item_id": "numpy.random.RandomState.weibull", "summary": "Draw samples from a Weibull distribution.\nDraw samples from a 1-parameter Weibull distribution with the given\nshape parameter a.\n\n\nHere, U is drawn from the uniform distribution over (0,1].\nThe more common 2-parameter Weibull, including a scale parameter\n is just .\n\nNote\nNew code should use the weibull method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nafloat or array_like of floatsShape parameter of the distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.weibull", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.wald(mean, scale, size=None)", "item_id": "numpy.random.wald", "summary": "Draw samples from a Wald, or inverse Gaussian, distribution.\nAs the scale approaches infinity, the distribution becomes more like a\nGaussian", "description": "", "code-info": {"name": "numpy.random.wald", "parameters": [{"name": "mean", "is_optional": false, "type": "others", "description": ""}, {"name": " scale", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.vstack(tup)", "item_id": "numpy.vstack", "summary": "Stack arrays in sequence vertically (row wise).\nThis is equivalent to concatenation along the first axis after 1-D arrays\nof shape (N,) have been reshaped to (1,N)", "description": "", "code-info": {"name": "numpy.vstack", "parameters": [{"name": "tup", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.vstack(*args, **kwargs)", "item_id": "numpy.ma.vstack", "summary": "\nStack arrays in sequence vertically (row wise).\nThis is equivalent to concatenation along the first axis after 1-D arrays\nof shape (N,) have been reshaped to (1,N)", "description": "", "code-info": {"name": "numpy.ma.vstack", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.vsplit(ary, indices_or_sections)", "item_id": "numpy.vsplit", "summary": "Split an array into multiple sub-arrays vertically (row-wise).\nPlease refer to the split documentation", "description": "", "code-info": {"name": "numpy.vsplit", "parameters": [{"name": "ary", "is_optional": false, "type": "others", "description": ""}, {"name": " indices_or_sections", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.vonmises(mu, kappa, size=None)", "item_id": "numpy.random.RandomState.vonmises", "summary": "Draw samples from a von Mises distribution.\nSamples are drawn from a von Mises distribution with specified mode\n(mu) and dispersion (kappa), on the interval [-pi, pi].\nThe von Mises distribution (also known as the circular normal\ndistribution) is a continuous probability distribution on the unit\ncircle", "description": "", "code-info": {"name": "numpy.random.RandomState.vonmises", "parameters": [{"name": "mu", "is_optional": false, "type": "others", "description": ""}, {"name": " kappa", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.vonmises(mu, kappa, size=None)", "item_id": "numpy.random.Generator.vonmises", "summary": "Draw samples from a von Mises distribution.\nSamples are drawn from a von Mises distribution with specified mode\n(mu) and dispersion (kappa), on the interval [-pi, pi].\nThe von Mises distribution (also known as the circular normal\ndistribution) is a continuous probability distribution on the unit\ncircle", "description": "", "code-info": {"name": "numpy.random.Generator.vonmises", "parameters": [{"name": "mu", "is_optional": false, "type": "others", "description": ""}, {"name": " kappa", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.view()", "item_id": "numpy.record.view", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.view", "parameters": []}},
{"code": "numpy.random.vonmises(mu, kappa, size=None)", "item_id": "numpy.random.vonmises", "summary": "Draw samples from a von Mises distribution.\nSamples are drawn from a von Mises distribution with specified mode\n(mu) and dispersion (kappa), on the interval [-pi, pi].\nThe von Mises distribution (also known as the circular normal\ndistribution) is a continuous probability distribution on the unit\ncircle", "description": "", "code-info": {"name": "numpy.random.vonmises", "parameters": [{"name": "mu", "is_optional": false, "type": "others", "description": ""}, {"name": " kappa", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.view(dtype=None, type=None)", "item_id": "numpy.ndarray.view", "summary": "New view of array with the same data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16", "description": "", "code-info": {"name": "numpy.ndarray.view", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.view(dtype=None, type=None)", "item_id": "numpy.recarray.view", "summary": "New view of array with the same data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16", "description": "", "code-info": {"name": "numpy.recarray.view", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.view(dtype=None, type=None)", "item_id": "numpy.memmap.view", "summary": "New view of array with the same data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16", "description": "", "code-info": {"name": "numpy.memmap.view", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.view(dtype=None, type=None)", "item_id": "numpy.matrix.view", "summary": "New view of array with the same data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16", "description": "", "code-info": {"name": "numpy.matrix.view", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.view()", "item_id": "numpy.ma.MaskType.view", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.view", "parameters": []}},
{"code": "numpy.ma.masked_array.view(self, dtype=None, type=None, fill_value=None)", "item_id": "numpy.ma.masked_array.view", "summary": "Return a view of the MaskedArray data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16.\nThe default, None, results in the view having the same data-type\nas a", "description": "", "code-info": {"name": "numpy.ma.masked_array.view", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.view(self, dtype=None, type=None, fill_value=None)", "item_id": "numpy.ma.MaskedArray.view", "summary": "Return a view of the MaskedArray data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16.\nThe default, None, results in the view having the same data-type\nas a", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.view", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.view()", "item_id": "numpy.generic.view", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.view", "parameters": []}},
{"code": "numpy.char.chararray.view(dtype=None, type=None)", "item_id": "numpy.char.chararray.view", "summary": "New view of array with the same data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16", "description": "", "code-info": {"name": "numpy.char.chararray.view", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.view(dtype=None, type=None)", "item_id": "numpy.chararray.view", "summary": "New view of array with the same data.\n\nParameters\n\ndtypedata-type or ndarray sub-class, optionalData-type descriptor of the returned view, e.g., float32 or int16", "description": "", "code-info": {"name": "numpy.chararray.view", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.vdot(a, b)", "item_id": "numpy.vdot", "summary": "Return the dot product of two vectors.\nThe vdot(a, b) function handles complex numbers differently than\ndot(a, b)", "description": "", "code-info": {"name": "numpy.vdot", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)", "item_id": "numpy.vectorize", "summary": "Generalized function class.\nDefine a vectorized function which takes a nested sequence of objects or\nnumpy arrays as inputs and returns a single numpy array or a tuple of numpy\narrays", "description": "", "code-info": {"name": "numpy.vectorize", "parameters": [{"name": "pyfunc", "is_optional": false, "type": "others", "description": ""}, {"name": " otypes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " doc", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " excluded", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " cache", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " signature", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.var()", "item_id": "numpy.record.var", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.var", "parameters": []}},
{"code": "numpy.ndarray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.ndarray.var", "summary": "Returns the variance of the array elements, along given axis.\nRefer to numpy.var for full documentation.\n\nSee also\n\nnumpy.varequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.var", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.memmap.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.memmap.var", "summary": "Returns the variance of the array elements, along given axis.\nRefer to numpy.var for full documentation.\n\nSee also\n\nnumpy.varequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.var", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.matrix.var(self, axis=None, dtype=None, out=None, ddof=0)", "item_id": "numpy.matrix.var", "summary": "Returns the variance of the matrix elements, along the given axis.\nRefer to numpy.var for full documentation.\n\nSee also\nnumpy.var\n\nNotes\nThis is the same as ndarray.var, except that where an ndarray would\nbe returned, a matrix object is returned instead.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3, 4)))\n&gt;&gt;&gt; x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.var()\n11.916666666666666\n&gt;&gt;&gt; x.var(0)\nmatrix([[ 10.66666667,  10.66666667,  10.66666667,  10.66666667]]) # may vary\n&gt;&gt;&gt; x.var(1)\nmatrix([[1.25],\n        [1.25],\n        [1.25]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.var", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.MaskType.var()", "item_id": "numpy.ma.MaskType.var", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.var", "parameters": []}},
{"code": "numpy.ma.MaskedArray.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.var", "summary": "Compute the variance along the specified axis.\nReturns the variance of the array elements, a measure of the spread of a\ndistribution", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.var", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.recarray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.recarray.var", "summary": "Returns the variance of the array elements, along given axis.\nRefer to numpy.var for full documentation.\n\nSee also\n\nnumpy.varequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.var", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.masked_array.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.var", "summary": "Compute the variance along the specified axis.\nReturns the variance of the array elements, a measure of the spread of a\ndistribution", "description": "", "code-info": {"name": "numpy.ma.masked_array.var", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.var()", "item_id": "numpy.generic.var", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.var", "parameters": []}},
{"code": "numpy.chararray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.chararray.var", "summary": "Returns the variance of the array elements, along given axis.\nRefer to numpy.var for full documentation.\n\nSee also\n\nnumpy.varequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.var", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.char.chararray.var", "summary": "Returns the variance of the array elements, along given axis.\nRefer to numpy.var for full documentation.\n\nSee also\n\nnumpy.varequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.var", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.var", "summary": "Compute the variance along the specified axis.\nReturns the variance of the array elements, a measure of the spread of a\ndistribution", "description": "", "code-info": {"name": "numpy.var", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.var", "summary": "Compute the variance along the specified axis.\nReturns the variance of the array elements, a measure of the spread of a\ndistribution", "description": "", "code-info": {"name": "numpy.ma.var", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.vander(x, n=None)", "item_id": "numpy.ma.vander", "summary": "Generate a Vandermonde matrix.\nThe columns of the output matrix are powers of the input vector", "description": "", "code-info": {"name": "numpy.ma.vander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.vander(x, N=None, increasing=False)", "item_id": "numpy.vander", "summary": "Generate a Vandermonde matrix.\nThe columns of the output matrix are powers of the input vector", "description": "", "code-info": {"name": "numpy.vander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " N", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " increasing", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.chararray.upper(self)", "item_id": "numpy.chararray.upper", "summary": "Return an array with the elements of self converted to\nuppercase.\n\nSee also\nchar.upper\n\n", "description": "", "code-info": {"name": "numpy.chararray.upper", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.upper(self)", "item_id": "numpy.char.chararray.upper", "summary": "Return an array with the elements of self converted to\nuppercase.\n\nSee also\nchar.upper\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.upper", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.upper(a)", "item_id": "numpy.char.upper", "summary": "Return an array with the elements converted to uppercase.\nCalls str.upper element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like, {str, unicode}Input array.\n\n\n\nReturns\n\noutndarray, {str, unicode}Output array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.upper\n\nExamples\n&gt;&gt;&gt; c = np.array(['a1b c', '1bca', 'bca1']); c\narray(['a1b c', '1bca', 'bca1'], dtype='&lt;U5')\n&gt;&gt;&gt; np.char.upper(c)\narray(['A1B C', '1BCA', 'BCA1'], dtype='&lt;U5')\n\n\n", "description": "", "code-info": {"name": "numpy.char.upper", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.unwrap(p, discont=3.141592653589793, axis=-1)", "item_id": "numpy.unwrap", "summary": "Unwrap by changing deltas between values to 2*pi complement.\nUnwrap radian phase p by changing absolute jumps greater than\ndiscont to their 2*pi complement along the given axis.\n\nParameters\n\nparray_likeInput array.\n\ndiscontfloat, optionalMaximum discontinuity between values, default is pi.\n\naxisint, optionalAxis along which unwrap will operate, default is the last axis.\n\n\n\nReturns\n\noutndarrayOutput array.\n\n\n\n\n\nSee also\nrad2deg, deg2rad\n\nNotes\nIf the discontinuity in p is smaller than pi, but larger than\ndiscont, no unwrapping is done because taking the 2*pi complement\nwould only make the discontinuity larger.\nExamples\n&gt;&gt;&gt; phase = np.linspace(0, np.pi, num=5)\n&gt;&gt;&gt; phase[3:] += np.pi\n&gt;&gt;&gt; phase\narray([ 0", "description": "", "code-info": {"name": "numpy.unwrap", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " discont", "is_optional": true, "type": "others", "default_value": "3.141592653589793", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.unshare_mask(self)", "item_id": "numpy.ma.MaskedArray.unshare_mask", "summary": "Copy the mask and set the sharedmask flag to False.\nWhether the mask is shared between masked arrays can be seen from\nthe sharedmask property", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.unshare_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.unshare_mask(self)", "item_id": "numpy.ma.masked_array.unshare_mask", "summary": "Copy the mask and set the sharedmask flag to False.\nWhether the mask is shared between masked arrays can be seen from\nthe sharedmask property", "description": "", "code-info": {"name": "numpy.ma.masked_array.unshare_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.unravel_index(indices, shape, order='C')", "item_id": "numpy.unravel_index", "summary": "Converts a flat index or array of flat indices into a tuple\nof coordinate arrays.\n\nParameters\n\nindicesarray_likeAn integer array whose elements are indices into the flattened\nversion of an array of dimensions shape", "description": "", "code-info": {"name": "numpy.unravel_index", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.unpackbits(a, axis=None, count=None, bitorder='big')", "item_id": "numpy.unpackbits", "summary": "Unpacks elements of a uint8 array into a binary-valued output array.\nEach element of a represents a bit-field that should be unpacked\ninto a binary-valued output array", "description": "", "code-info": {"name": "numpy.unpackbits", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " bitorder", "is_optional": true, "type": "string", "default_value": "'big'", "description": ""}]}},
{"code": "numpy.union1d(ar1, ar2)", "item_id": "numpy.union1d", "summary": "Find the union of two arrays.\nReturn the unique, sorted array of values that are in either of the two\ninput arrays.\n\nParameters\n\nar1, ar2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.union1d", "parameters": [{"name": "ar1", "is_optional": false, "type": "others", "description": ""}, {"name": " ar2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.uniform(low=0.0, high=1.0, size=None)", "item_id": "numpy.random.RandomState.uniform", "summary": "Draw samples from a uniform distribution.\nSamples are uniformly distributed over the half-open interval\n[low, high) (includes low, but excludes high)", "description": "", "code-info": {"name": "numpy.random.RandomState.uniform", "parameters": [{"name": "low", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.uniform(low=0.0, high=1.0, size=None)", "item_id": "numpy.random.Generator.uniform", "summary": "Draw samples from a uniform distribution.\nSamples are uniformly distributed over the half-open interval\n[low, high) (includes low, but excludes high)", "description": "", "code-info": {"name": "numpy.random.Generator.uniform", "parameters": [{"name": "low", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.uniform(low=0.0, high=1.0, size=None)", "item_id": "numpy.random.uniform", "summary": "Draw samples from a uniform distribution.\nSamples are uniformly distributed over the half-open interval\n[low, high) (includes low, but excludes high)", "description": "", "code-info": {"name": "numpy.random.uniform", "parameters": [{"name": "low", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)", "item_id": "numpy.unique", "summary": "Find the unique elements of an array.\nReturns the sorted unique elements of an array", "description": "", "code-info": {"name": "numpy.unique", "parameters": [{"name": "ar", "is_optional": false, "type": "others", "description": ""}, {"name": " return_index", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " return_inverse", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " return_counts", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.truncate(self, size)", "item_id": "numpy.polynomial.laguerre.Laguerre.truncate", "summary": "Truncate series to length size.\nReduce the series to length size by discarding the high\ndegree terms", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.truncate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.truncate(self, size)", "item_id": "numpy.polynomial.hermite_e.HermiteE.truncate", "summary": "Truncate series to length size.\nReduce the series to length size by discarding the high\ndegree terms", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.truncate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.truncate(self, size)", "item_id": "numpy.polynomial.hermite.Hermite.truncate", "summary": "Truncate series to length size.\nReduce the series to length size by discarding the high\ndegree terms", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.truncate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.truncate(self, size)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.truncate", "summary": "Truncate series to length size.\nReduce the series to length size by discarding the high\ndegree terms", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.truncate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.trunc(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.trunc", "summary": "Return the truncated value of the input, element-wise.\nThe truncated value of the scalar x is the nearest integer i which\nis closer to zero than x is", "description": "", "code-info": {"name": "numpy.trunc", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.triu_indices_from(arr, k=0)", "item_id": "numpy.triu_indices_from", "summary": "Return the indices for the upper-triangle of arr.\nSee triu_indices for full details.\n\nParameters\n\narrndarray, shape(N, N)The indices will be valid for square arrays.\n\nkint, optionalDiagonal offset (see triu for details).\n\n\n\nReturns\n\ntriu_indices_fromtuple, shape(2) of ndarray, shape(N)Indices for the upper-triangle of arr.\n\n\n\n\n\nSee also\ntriu_indices, triu\n\nNotes\n\nNew in version 1.4.0.\n\n", "description": "", "code-info": {"name": "numpy.triu_indices_from", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.true_divide", "summary": "Returns a true division of the inputs, element-wise.\nInstead of the Python traditional \u2018floor division\u2019, this returns a true\ndivision", "description": "", "code-info": {"name": "numpy.true_divide", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.triu_indices(n, k=0, m=None)", "item_id": "numpy.triu_indices", "summary": "Return the indices for the upper-triangle of an (n, m) array.\n\nParameters\n\nnintThe size of the arrays for which the returned indices will\nbe valid.\n\nkint, optionalDiagonal offset (see triu for details).\n\nmint, optional\nNew in version 1.9.0.\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default m is taken equal to n.\n\n\n\nReturns\n\nindstuple, shape(2) of ndarrays, shape(n)The indices for the triangle", "description": "", "code-info": {"name": "numpy.triu_indices", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " m", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polyutils.trimcoef(c, tol=0)", "item_id": "numpy.polynomial.polyutils.trimcoef", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.polyutils.trimcoef", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.polyutils.trimseq(seq)", "item_id": "numpy.polynomial.polyutils.trimseq", "summary": "Remove small Poly series coefficients.\n\nParameters\n\nseqsequenceSequence of Poly series coefficients", "description": "", "code-info": {"name": "numpy.polynomial.polyutils.trimseq", "parameters": [{"name": "seq", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.triu(m, k=0)", "item_id": "numpy.triu", "summary": "Upper triangle of an array.\nReturn a copy of a matrix with the elements below the k-th diagonal\nzeroed.\nPlease refer to the documentation for tril for further details.\n\nSee also\n\ntrillower triangle of an array\n\n\n\nExamples\n&gt;&gt;&gt; np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)\narray([[ 1,  2,  3],\n       [ 4,  5,  6],\n       [ 0,  8,  9],\n       [ 0,  0, 12]])\n\n\n", "description": "", "code-info": {"name": "numpy.triu", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.trim_zeros(filt, trim='fb')", "item_id": "numpy.trim_zeros", "summary": "Trim the leading and/or trailing zeros from a 1-D array or sequence.\n\nParameters\n\nfilt1-D array or sequenceInput array.\n\ntrimstr, optionalA string with \u2018f\u2019 representing trim from front and \u2018b\u2019 to trim from\nback", "description": "", "code-info": {"name": "numpy.trim_zeros", "parameters": [{"name": "filt", "is_optional": false, "type": "others", "description": ""}, {"name": " trim", "is_optional": true, "type": "string", "default_value": "'fb'", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.trim(self, tol=0)", "item_id": "numpy.polynomial.polynomial.Polynomial.trim", "summary": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than tol or the beginning of the series is\nreached", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.trim", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.trim(self, tol=0)", "item_id": "numpy.polynomial.legendre.Legendre.trim", "summary": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than tol or the beginning of the series is\nreached", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.trim", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.trim(self, tol=0)", "item_id": "numpy.polynomial.laguerre.Laguerre.trim", "summary": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than tol or the beginning of the series is\nreached", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.trim", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.trim(self, tol=0)", "item_id": "numpy.polynomial.hermite_e.HermiteE.trim", "summary": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than tol or the beginning of the series is\nreached", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.trim", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.trim(self, tol=0)", "item_id": "numpy.polynomial.hermite.Hermite.trim", "summary": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than tol or the beginning of the series is\nreached", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.trim", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.trim(self, tol=0)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.trim", "summary": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than tol or the beginning of the series is\nreached", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.trim", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.tril_indices_from(arr, k=0)", "item_id": "numpy.tril_indices_from", "summary": "Return the indices for the lower-triangle of arr.\nSee tril_indices for full details.\n\nParameters\n\narrarray_likeThe indices will be valid for square arrays whose dimensions are\nthe same as arr.\n\nkint, optionalDiagonal offset (see tril for details).\n\n\n\n\n\nSee also\ntril_indices, tril\n\nNotes\n\nNew in version 1.4.0.\n\n", "description": "", "code-info": {"name": "numpy.tril_indices_from", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.tril_indices(n, k=0, m=None)", "item_id": "numpy.tril_indices", "summary": "Return the indices for the lower-triangle of an (n, m) array.\n\nParameters\n\nnintThe row dimension of the arrays for which the returned\nindices will be valid.\n\nkint, optionalDiagonal offset (see tril for details).\n\nmint, optional\nNew in version 1.9.0.\n\nThe column dimension of the arrays for which the returned\narrays will be valid.\nBy default m is taken equal to n.\n\n\n\nReturns\n\nindstuple of arraysThe indices for the triangle", "description": "", "code-info": {"name": "numpy.tril_indices", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " m", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.tril(m, k=0)", "item_id": "numpy.tril", "summary": "Lower triangle of an array.\nReturn a copy of an array with elements above the k-th diagonal zeroed.\n\nParameters\n\nmarray_like, shape (M, N)Input array.\n\nkint, optionalDiagonal above which to zero elements", "description": "", "code-info": {"name": "numpy.tril", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.random.RandomState.triangular(left, mode, right, size=None)", "item_id": "numpy.random.RandomState.triangular", "summary": "Draw samples from the triangular distribution over the\ninterval [left, right].\nThe triangular distribution is a continuous probability\ndistribution with lower limit left, peak at mode, and upper\nlimit right", "description": "", "code-info": {"name": "numpy.random.RandomState.triangular", "parameters": [{"name": "left", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": false, "type": "others", "description": ""}, {"name": " right", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.triangular(left, mode, right, size=None)", "item_id": "numpy.random.Generator.triangular", "summary": "Draw samples from the triangular distribution over the\ninterval [left, right].\nThe triangular distribution is a continuous probability\ndistribution with lower limit left, peak at mode, and upper\nlimit right", "description": "", "code-info": {"name": "numpy.random.Generator.triangular", "parameters": [{"name": "left", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": false, "type": "others", "description": ""}, {"name": " right", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.triangular(left, mode, right, size=None)", "item_id": "numpy.random.triangular", "summary": "Draw samples from the triangular distribution over the\ninterval [left, right].\nThe triangular distribution is a continuous probability\ndistribution with lower limit left, peak at mode, and upper\nlimit right", "description": "", "code-info": {"name": "numpy.random.triangular", "parameters": [{"name": "left", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": false, "type": "others", "description": ""}, {"name": " right", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.tri(N, M=None, k=0, dtype=&lt;class 'float'&gt;)", "item_id": "numpy.tri", "summary": "An array with ones at and below the given diagonal and zeros elsewhere.\n\nParameters\n\nNintNumber of rows in the array.\n\nMint, optionalNumber of columns in the array.\nBy default, M is taken equal to N.\n\nkint, optionalThe sub-diagonal at and below which the array is filled.\nk = 0 is the main diagonal, while k &lt; 0 is below it,\nand k &gt; 0 is above", "description": "", "code-info": {"name": "numpy.tri", "parameters": [{"name": "N", "is_optional": false, "type": "others", "description": ""}, {"name": " M", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}]}},
{"code": "numpy.trapz(y, x=None, dx=1.0, axis=-1)", "item_id": "numpy.trapz", "summary": "Integrate along the given axis using the composite trapezoidal rule.\nIntegrate y (x) along given axis.\n\nParameters\n\nyarray_likeInput array to integrate.\n\nxarray_like, optionalThe sample points corresponding to the y values", "description": "", "code-info": {"name": "numpy.trapz", "parameters": [{"name": "y", "is_optional": false, "type": "others", "description": ""}, {"name": " x", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dx", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}]}},
{"code": "numpy.record.transpose()", "item_id": "numpy.record.transpose", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.transpose", "parameters": []}},
{"code": "numpy.recarray.transpose(*axes)", "item_id": "numpy.recarray.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.recarray.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.transpose(*axes)", "item_id": "numpy.ndarray.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.ndarray.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.transpose(*axes)", "item_id": "numpy.memmap.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.memmap.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.transpose(*axes)", "item_id": "numpy.matrix.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.matrix.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskType.transpose()", "item_id": "numpy.ma.MaskType.transpose", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.transpose", "parameters": []}},
{"code": "numpy.ma.masked_array.transpose(*axes)", "item_id": "numpy.ma.masked_array.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.ma.masked_array.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.transpose()", "item_id": "numpy.generic.transpose", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.transpose", "parameters": []}},
{"code": "numpy.ma.MaskedArray.transpose(*axes)", "item_id": "numpy.ma.MaskedArray.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.transpose(*axes)", "item_id": "numpy.chararray.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.chararray.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.transpose(*axes)", "item_id": "numpy.char.chararray.transpose", "summary": "Returns a view of the array with axes transposed.\nFor a 1-D array this has no effect, as a transposed vector is simply the\nsame vector", "description": "", "code-info": {"name": "numpy.char.chararray.transpose", "parameters": [{"name": "*axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.transpose(a, axes=None)", "item_id": "numpy.transpose", "summary": "Permute the dimensions of an array.\n\nParameters\n\naarray_likeInput array.\n\naxeslist of ints, optionalBy default, reverse the dimensions, otherwise permute the axes\naccording to the values given.\n\n\n\nReturns\n\npndarraya with its axes permuted", "description": "", "code-info": {"name": "numpy.transpose", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.transpose(a, axes=None)", "item_id": "numpy.ma.transpose", "summary": "Permute the dimensions of an array.\nThis function is exactly equivalent to numpy.transpose.\n\nSee also\n\nnumpy.transposeEquivalent function in top-level NumPy module.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; x = ma.arange(4).reshape((2,2))\n&gt;&gt;&gt; x[1, 1] = ma.masked\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[0, 1],\n        [2, --]],\n  mask=[[False, False],\n        [False,  True]],\n  fill_value=999999)\n\n\n&gt;&gt;&gt; ma.transpose(x)\nmasked_array(\n  data=[[0, 2],\n        [1, --]],\n  mask=[[False, False],\n        [False,  True]],\n  fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.transpose", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.trace()", "item_id": "numpy.record.trace", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.trace", "parameters": []}},
{"code": "numpy.char.chararray.translate(self, table, deletechars=None)", "item_id": "numpy.char.chararray.translate", "summary": "For each element in self, return a copy of the string where\nall characters occurring in the optional argument\ndeletechars are removed, and the remaining characters have\nbeen mapped through the given translation table.\n\nSee also\nchar.translate\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.translate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " table", "is_optional": false, "type": "others", "description": ""}, {"name": " deletechars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.translate(a, table, deletechars=None)", "item_id": "numpy.char.translate", "summary": "For each element in a, return a copy of the string where all\ncharacters occurring in the optional argument deletechars are\nremoved, and the remaining characters have been mapped through the\ngiven translation table.\nCalls str.translate element-wise.\n\nParameters\n\naarray-like of str or unicode\ntablestr of length 256\ndeletecharsstr\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.translate\n\n", "description": "", "code-info": {"name": "numpy.char.translate", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " table", "is_optional": false, "type": "others", "description": ""}, {"name": " deletechars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.translate(self, table, deletechars=None)", "item_id": "numpy.chararray.translate", "summary": "For each element in self, return a copy of the string where\nall characters occurring in the optional argument\ndeletechars are removed, and the remaining characters have\nbeen mapped through the given translation table.\n\nSee also\nchar.translate\n\n", "description": "", "code-info": {"name": "numpy.chararray.translate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " table", "is_optional": false, "type": "others", "description": ""}, {"name": " deletechars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.recarray.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.ndarray.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.memmap.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.matrix.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.trace()", "item_id": "numpy.ma.MaskType.trace", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.trace", "parameters": []}},
{"code": "numpy.ma.MaskedArray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.ma.MaskedArray.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.ma.masked_array.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.chararray.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.trace", "summary": "Return the sum along diagonals of the array.\nIf a is 2-D, the sum along its diagonal with the given offset\nis returned, i.e., the sum of elements a[i,i+offset] for all i.\nIf a has more than two dimensions, then the axes specified by axis1 and\naxis2 are used to determine the 2-D sub-arrays whose traces are returned.\nThe shape of the resulting array is the same as that of a with axis1\nand axis2 removed.\n\nParameters\n\naarray_likeInput array, from which the diagonals are taken.\n\noffsetint, optionalOffset of the diagonal from the main diagonal", "description": "", "code-info": {"name": "numpy.trace", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.char.chararray.trace", "summary": "Return the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.trace", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None)", "item_id": "numpy.ma.trace", "summary": "\nReturn the sum along diagonals of the array.\nRefer to numpy.trace for full documentation.\n\n\nSee also\n\nnumpy.traceequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.trace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.tostring()", "item_id": "numpy.record.tostring", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.tostring", "parameters": []}},
{"code": "numpy.recarray.tostring(order='C')", "item_id": "numpy.recarray.tostring", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.recarray.tostring", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.matrix.tostring(order='C')", "item_id": "numpy.matrix.tostring", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.matrix.tostring", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.memmap.tostring(order='C')", "item_id": "numpy.memmap.tostring", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.memmap.tostring", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskType.tostring()", "item_id": "numpy.ma.MaskType.tostring", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.tostring", "parameters": []}},
{"code": "numpy.ma.MaskedArray.tostring(self, fill_value=None, order='C')", "item_id": "numpy.ma.MaskedArray.tostring", "summary": "This function is a compatibility alias for tobytes", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.tostring", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.lib.user_array.container.tostring(self)", "item_id": "numpy.lib.user_array.container.tostring", "summary": "", "description": "", "code-info": {"name": "numpy.lib.user_array.container.tostring", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.tostring()", "item_id": "numpy.generic.tostring", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.tostring", "parameters": []}},
{"code": "numpy.ma.masked_array.tostring(self, fill_value=None, order='C')", "item_id": "numpy.ma.masked_array.tostring", "summary": "This function is a compatibility alias for tobytes", "description": "", "code-info": {"name": "numpy.ma.masked_array.tostring", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ndarray.tostring(order='C')", "item_id": "numpy.ndarray.tostring", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.ndarray.tostring", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.chararray.tostring(order='C')", "item_id": "numpy.chararray.tostring", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.chararray.tostring", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.char.chararray.tostring(order='C')", "item_id": "numpy.char.chararray.tostring", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.char.chararray.tostring", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.torecords(self)", "item_id": "numpy.ma.MaskedArray.torecords", "summary": "Transforms a masked array into a flexible-type array.\nThe flexible type array that is returned will have two fields:\n\nthe _data field stores the _data part of the array.\nthe _mask field stores the _mask part of the array.\n\n\nParameters\n\nNone\n\n\nReturns\n\nrecordndarrayA new flexible-type ndarray with two fields: the first element\ncontaining a value, the second element containing the corresponding\nmask boolean", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.torecords", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.torecords(self)", "item_id": "numpy.ma.masked_array.torecords", "summary": "Transforms a masked array into a flexible-type array.\nThe flexible type array that is returned will have two fields:\n\nthe _data field stores the _data part of the array.\nthe _mask field stores the _mask part of the array.\n\n\nParameters\n\nNone\n\n\nReturns\n\nrecordndarrayA new flexible-type ndarray with two fields: the first element\ncontaining a value, the second element containing the corresponding\nmask boolean", "description": "", "code-info": {"name": "numpy.ma.masked_array.torecords", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.tolist()", "item_id": "numpy.record.tolist", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.tolist", "parameters": []}},
{"code": "numpy.recarray.tolist()", "item_id": "numpy.recarray.tolist", "summary": "Return the array as an a.ndim-levels deep nested list of Python scalars.\nReturn a copy of the array data as a (nested) Python list.\nData items are converted to the nearest compatible builtin Python type, via\nthe item function.\nIf a.ndim is 0, then since the depth of the nested list is 0, it will\nnot be a list at all, but a simple Python scalar.\n\nParameters\n\nnone\n\n\nReturns\n\nyobject, or list of object, or list of list of object, or \u2026The possibly nested list of array elements.\n\n\n\n\nNotes\nThe array may be recreated via a = np.array(a.tolist()), although this\nmay sometimes lose precision.\nExamples\nFor a 1D array, a.tolist() is almost the same as list(a), \nexcept that tolist changes numpy scalars to Python scalars:\n&gt;&gt;&gt; a = np.uint32([1, 2])\n&gt;&gt;&gt; a_list = list(a)\n&gt;&gt;&gt; a_list\n[1, 2]\n&gt;&gt;&gt; type(a_list[0])\n&lt;class 'numpy.uint32'&gt;\n&gt;&gt;&gt; a_tolist = a.tolist()\n&gt;&gt;&gt; a_tolist\n[1, 2]\n&gt;&gt;&gt; type(a_tolist[0])\n&lt;class 'int'&gt;\n\n\nAdditionally, for a 2D array, tolist applies recursively:\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; list(a)\n[array([1, 2]), array([3, 4])]\n&gt;&gt;&gt; a.tolist()\n[[1, 2], [3, 4]]\n\n\nThe base case for this recursion is a 0D array:\n&gt;&gt;&gt; a = np.array(1)\n&gt;&gt;&gt; list(a)\nTraceback (most recent call last):\n  ...\nTypeError: iteration over a 0-d array\n&gt;&gt;&gt; a.tolist()\n1\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.tolist", "parameters": []}},
{"code": "numpy.ndarray.tolist()", "item_id": "numpy.ndarray.tolist", "summary": "Return the array as an a.ndim-levels deep nested list of Python scalars.\nReturn a copy of the array data as a (nested) Python list.\nData items are converted to the nearest compatible builtin Python type, via\nthe item function.\nIf a.ndim is 0, then since the depth of the nested list is 0, it will\nnot be a list at all, but a simple Python scalar.\n\nParameters\n\nnone\n\n\nReturns\n\nyobject, or list of object, or list of list of object, or \u2026The possibly nested list of array elements.\n\n\n\n\nNotes\nThe array may be recreated via a = np.array(a.tolist()), although this\nmay sometimes lose precision.\nExamples\nFor a 1D array, a.tolist() is almost the same as list(a), \nexcept that tolist changes numpy scalars to Python scalars:\n&gt;&gt;&gt; a = np.uint32([1, 2])\n&gt;&gt;&gt; a_list = list(a)\n&gt;&gt;&gt; a_list\n[1, 2]\n&gt;&gt;&gt; type(a_list[0])\n&lt;class 'numpy.uint32'&gt;\n&gt;&gt;&gt; a_tolist = a.tolist()\n&gt;&gt;&gt; a_tolist\n[1, 2]\n&gt;&gt;&gt; type(a_tolist[0])\n&lt;class 'int'&gt;\n\n\nAdditionally, for a 2D array, tolist applies recursively:\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; list(a)\n[array([1, 2]), array([3, 4])]\n&gt;&gt;&gt; a.tolist()\n[[1, 2], [3, 4]]\n\n\nThe base case for this recursion is a 0D array:\n&gt;&gt;&gt; a = np.array(1)\n&gt;&gt;&gt; list(a)\nTraceback (most recent call last):\n  ...\nTypeError: iteration over a 0-d array\n&gt;&gt;&gt; a.tolist()\n1\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.tolist", "parameters": []}},
{"code": "numpy.memmap.tolist()", "item_id": "numpy.memmap.tolist", "summary": "Return the array as an a.ndim-levels deep nested list of Python scalars.\nReturn a copy of the array data as a (nested) Python list.\nData items are converted to the nearest compatible builtin Python type, via\nthe item function.\nIf a.ndim is 0, then since the depth of the nested list is 0, it will\nnot be a list at all, but a simple Python scalar.\n\nParameters\n\nnone\n\n\nReturns\n\nyobject, or list of object, or list of list of object, or \u2026The possibly nested list of array elements.\n\n\n\n\nNotes\nThe array may be recreated via a = np.array(a.tolist()), although this\nmay sometimes lose precision.\nExamples\nFor a 1D array, a.tolist() is almost the same as list(a), \nexcept that tolist changes numpy scalars to Python scalars:\n&gt;&gt;&gt; a = np.uint32([1, 2])\n&gt;&gt;&gt; a_list = list(a)\n&gt;&gt;&gt; a_list\n[1, 2]\n&gt;&gt;&gt; type(a_list[0])\n&lt;class 'numpy.uint32'&gt;\n&gt;&gt;&gt; a_tolist = a.tolist()\n&gt;&gt;&gt; a_tolist\n[1, 2]\n&gt;&gt;&gt; type(a_tolist[0])\n&lt;class 'int'&gt;\n\n\nAdditionally, for a 2D array, tolist applies recursively:\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; list(a)\n[array([1, 2]), array([3, 4])]\n&gt;&gt;&gt; a.tolist()\n[[1, 2], [3, 4]]\n\n\nThe base case for this recursion is a 0D array:\n&gt;&gt;&gt; a = np.array(1)\n&gt;&gt;&gt; list(a)\nTraceback (most recent call last):\n  ...\nTypeError: iteration over a 0-d array\n&gt;&gt;&gt; a.tolist()\n1\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.tolist", "parameters": []}},
{"code": "numpy.ma.MaskType.tolist()", "item_id": "numpy.ma.MaskType.tolist", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.tolist", "parameters": []}},
{"code": "numpy.matrix.tolist(self)", "item_id": "numpy.matrix.tolist", "summary": "Return the matrix as a (possibly nested) list.\nSee ndarray.tolist for full documentation.\n\nSee also\nndarray.tolist\n\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.tolist()\n[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.tolist", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.tolist(self, fill_value=None)", "item_id": "numpy.ma.masked_array.tolist", "summary": "Return the data portion of the masked array as a hierarchical Python list.\nData items are converted to the nearest compatible Python type.\nMasked values are converted to fill_value", "description": "", "code-info": {"name": "numpy.ma.masked_array.tolist", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.tolist(self, fill_value=None)", "item_id": "numpy.ma.MaskedArray.tolist", "summary": "Return the data portion of the masked array as a hierarchical Python list.\nData items are converted to the nearest compatible Python type.\nMasked values are converted to fill_value", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.tolist", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.tolist()", "item_id": "numpy.generic.tolist", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.tolist", "parameters": []}},
{"code": "numpy.chararray.tolist()", "item_id": "numpy.chararray.tolist", "summary": "Return the array as an a.ndim-levels deep nested list of Python scalars.\nReturn a copy of the array data as a (nested) Python list.\nData items are converted to the nearest compatible builtin Python type, via\nthe item function.\nIf a.ndim is 0, then since the depth of the nested list is 0, it will\nnot be a list at all, but a simple Python scalar.\n\nParameters\n\nnone\n\n\nReturns\n\nyobject, or list of object, or list of list of object, or \u2026The possibly nested list of array elements.\n\n\n\n\nNotes\nThe array may be recreated via a = np.array(a.tolist()), although this\nmay sometimes lose precision.\nExamples\nFor a 1D array, a.tolist() is almost the same as list(a), \nexcept that tolist changes numpy scalars to Python scalars:\n&gt;&gt;&gt; a = np.uint32([1, 2])\n&gt;&gt;&gt; a_list = list(a)\n&gt;&gt;&gt; a_list\n[1, 2]\n&gt;&gt;&gt; type(a_list[0])\n&lt;class 'numpy.uint32'&gt;\n&gt;&gt;&gt; a_tolist = a.tolist()\n&gt;&gt;&gt; a_tolist\n[1, 2]\n&gt;&gt;&gt; type(a_tolist[0])\n&lt;class 'int'&gt;\n\n\nAdditionally, for a 2D array, tolist applies recursively:\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; list(a)\n[array([1, 2]), array([3, 4])]\n&gt;&gt;&gt; a.tolist()\n[[1, 2], [3, 4]]\n\n\nThe base case for this recursion is a 0D array:\n&gt;&gt;&gt; a = np.array(1)\n&gt;&gt;&gt; list(a)\nTraceback (most recent call last):\n  ...\nTypeError: iteration over a 0-d array\n&gt;&gt;&gt; a.tolist()\n1\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.tolist", "parameters": []}},
{"code": "numpy.char.chararray.tolist()", "item_id": "numpy.char.chararray.tolist", "summary": "Return the array as an a.ndim-levels deep nested list of Python scalars.\nReturn a copy of the array data as a (nested) Python list.\nData items are converted to the nearest compatible builtin Python type, via\nthe item function.\nIf a.ndim is 0, then since the depth of the nested list is 0, it will\nnot be a list at all, but a simple Python scalar.\n\nParameters\n\nnone\n\n\nReturns\n\nyobject, or list of object, or list of list of object, or \u2026The possibly nested list of array elements.\n\n\n\n\nNotes\nThe array may be recreated via a = np.array(a.tolist()), although this\nmay sometimes lose precision.\nExamples\nFor a 1D array, a.tolist() is almost the same as list(a), \nexcept that tolist changes numpy scalars to Python scalars:\n&gt;&gt;&gt; a = np.uint32([1, 2])\n&gt;&gt;&gt; a_list = list(a)\n&gt;&gt;&gt; a_list\n[1, 2]\n&gt;&gt;&gt; type(a_list[0])\n&lt;class 'numpy.uint32'&gt;\n&gt;&gt;&gt; a_tolist = a.tolist()\n&gt;&gt;&gt; a_tolist\n[1, 2]\n&gt;&gt;&gt; type(a_tolist[0])\n&lt;class 'int'&gt;\n\n\nAdditionally, for a 2D array, tolist applies recursively:\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; list(a)\n[array([1, 2]), array([3, 4])]\n&gt;&gt;&gt; a.tolist()\n[[1, 2], [3, 4]]\n\n\nThe base case for this recursion is a 0D array:\n&gt;&gt;&gt; a = np.array(1)\n&gt;&gt;&gt; list(a)\nTraceback (most recent call last):\n  ...\nTypeError: iteration over a 0-d array\n&gt;&gt;&gt; a.tolist()\n1\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.tolist", "parameters": []}},
{"code": "numpy.ma.MaskedArray.toflex(self)", "item_id": "numpy.ma.MaskedArray.toflex", "summary": "Transforms a masked array into a flexible-type array.\nThe flexible type array that is returned will have two fields:\n\nthe _data field stores the _data part of the array.\nthe _mask field stores the _mask part of the array.\n\n\nParameters\n\nNone\n\n\nReturns\n\nrecordndarrayA new flexible-type ndarray with two fields: the first element\ncontaining a value, the second element containing the corresponding\nmask boolean", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.toflex", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.toflex(self)", "item_id": "numpy.ma.masked_array.toflex", "summary": "Transforms a masked array into a flexible-type array.\nThe flexible type array that is returned will have two fields:\n\nthe _data field stores the _data part of the array.\nthe _mask field stores the _mask part of the array.\n\n\nParameters\n\nNone\n\n\nReturns\n\nrecordndarrayA new flexible-type ndarray with two fields: the first element\ncontaining a value, the second element containing the corresponding\nmask boolean", "description": "", "code-info": {"name": "numpy.ma.masked_array.toflex", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.tofile()", "item_id": "numpy.record.tofile", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.tofile", "parameters": []}},
{"code": "numpy.recarray.tofile(fid, sep=\"\", format=\"%s\")", "item_id": "numpy.recarray.tofile", "summary": "Write array to a file as text or binary (default).\nData is always written in \u2018C\u2019 order, independent of the order of a.\nThe data produced by this method can be recovered using the function\nfromfile().\n\nParameters\n\nfidfile or str or PathAn open file object, or a string containing a filename.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\nsepstrSeparator between array items for text output.\nIf \u201c\u201d (empty), a binary file is written, equivalent to\nfile.write(a.tobytes()).\n\nformatstrFormat string for text file output.\nEach entry in the array is formatted to text by first converting\nit to the closest Python type, and then using \u201cformat\u201d % item.\n\n\n\n\nNotes\nThis is a convenience function for quick storage of array data.\nInformation on endianness and precision is lost, so this method is not a\ngood choice for files intended to archive data or transport data between\nmachines with different endianness", "description": "", "code-info": {"name": "numpy.recarray.tofile", "parameters": [{"name": "fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "\"\"", "description": ""}, {"name": " format", "is_optional": true, "type": "others", "default_value": "\"%s\"", "description": ""}]}},
{"code": "numpy.ndarray.tofile(fid, sep=\"\", format=\"%s\")", "item_id": "numpy.ndarray.tofile", "summary": "Write array to a file as text or binary (default).\nData is always written in \u2018C\u2019 order, independent of the order of a.\nThe data produced by this method can be recovered using the function\nfromfile().\n\nParameters\n\nfidfile or str or PathAn open file object, or a string containing a filename.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\nsepstrSeparator between array items for text output.\nIf \u201c\u201d (empty), a binary file is written, equivalent to\nfile.write(a.tobytes()).\n\nformatstrFormat string for text file output.\nEach entry in the array is formatted to text by first converting\nit to the closest Python type, and then using \u201cformat\u201d % item.\n\n\n\n\nNotes\nThis is a convenience function for quick storage of array data.\nInformation on endianness and precision is lost, so this method is not a\ngood choice for files intended to archive data or transport data between\nmachines with different endianness", "description": "", "code-info": {"name": "numpy.ndarray.tofile", "parameters": [{"name": "fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "\"\"", "description": ""}, {"name": " format", "is_optional": true, "type": "others", "default_value": "\"%s\"", "description": ""}]}},
{"code": "numpy.memmap.tofile(fid, sep=\"\", format=\"%s\")", "item_id": "numpy.memmap.tofile", "summary": "Write array to a file as text or binary (default).\nData is always written in \u2018C\u2019 order, independent of the order of a.\nThe data produced by this method can be recovered using the function\nfromfile().\n\nParameters\n\nfidfile or str or PathAn open file object, or a string containing a filename.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\nsepstrSeparator between array items for text output.\nIf \u201c\u201d (empty), a binary file is written, equivalent to\nfile.write(a.tobytes()).\n\nformatstrFormat string for text file output.\nEach entry in the array is formatted to text by first converting\nit to the closest Python type, and then using \u201cformat\u201d % item.\n\n\n\n\nNotes\nThis is a convenience function for quick storage of array data.\nInformation on endianness and precision is lost, so this method is not a\ngood choice for files intended to archive data or transport data between\nmachines with different endianness", "description": "", "code-info": {"name": "numpy.memmap.tofile", "parameters": [{"name": "fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "\"\"", "description": ""}, {"name": " format", "is_optional": true, "type": "others", "default_value": "\"%s\"", "description": ""}]}},
{"code": "numpy.matrix.tofile(fid, sep=\"\", format=\"%s\")", "item_id": "numpy.matrix.tofile", "summary": "Write array to a file as text or binary (default).\nData is always written in \u2018C\u2019 order, independent of the order of a.\nThe data produced by this method can be recovered using the function\nfromfile().\n\nParameters\n\nfidfile or str or PathAn open file object, or a string containing a filename.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\nsepstrSeparator between array items for text output.\nIf \u201c\u201d (empty), a binary file is written, equivalent to\nfile.write(a.tobytes()).\n\nformatstrFormat string for text file output.\nEach entry in the array is formatted to text by first converting\nit to the closest Python type, and then using \u201cformat\u201d % item.\n\n\n\n\nNotes\nThis is a convenience function for quick storage of array data.\nInformation on endianness and precision is lost, so this method is not a\ngood choice for files intended to archive data or transport data between\nmachines with different endianness", "description": "", "code-info": {"name": "numpy.matrix.tofile", "parameters": [{"name": "fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "\"\"", "description": ""}, {"name": " format", "is_optional": true, "type": "others", "default_value": "\"%s\"", "description": ""}]}},
{"code": "numpy.ma.MaskType.tofile()", "item_id": "numpy.ma.MaskType.tofile", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.tofile", "parameters": []}},
{"code": "numpy.ma.MaskedArray.tofile(self, fid, sep='', format='%s')", "item_id": "numpy.ma.MaskedArray.tofile", "summary": "Save a masked array to a file in binary format.\n\nWarning\nThis function is not implemented yet.\n\n\nRaises\n\nNotImplementedErrorWhen tofile is called.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.tofile", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " format", "is_optional": true, "type": "string", "default_value": "'%s'", "description": ""}]}},
{"code": "numpy.ma.masked_array.tofile(self, fid, sep='', format='%s')", "item_id": "numpy.ma.masked_array.tofile", "summary": "Save a masked array to a file in binary format.\n\nWarning\nThis function is not implemented yet.\n\n\nRaises\n\nNotImplementedErrorWhen tofile is called.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.tofile", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " format", "is_optional": true, "type": "string", "default_value": "'%s'", "description": ""}]}},
{"code": "numpy.generic.tofile()", "item_id": "numpy.generic.tofile", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.tofile", "parameters": []}},
{"code": "numpy.chararray.tofile(fid, sep=\"\", format=\"%s\")", "item_id": "numpy.chararray.tofile", "summary": "Write array to a file as text or binary (default).\nData is always written in \u2018C\u2019 order, independent of the order of a.\nThe data produced by this method can be recovered using the function\nfromfile().\n\nParameters\n\nfidfile or str or PathAn open file object, or a string containing a filename.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\nsepstrSeparator between array items for text output.\nIf \u201c\u201d (empty), a binary file is written, equivalent to\nfile.write(a.tobytes()).\n\nformatstrFormat string for text file output.\nEach entry in the array is formatted to text by first converting\nit to the closest Python type, and then using \u201cformat\u201d % item.\n\n\n\n\nNotes\nThis is a convenience function for quick storage of array data.\nInformation on endianness and precision is lost, so this method is not a\ngood choice for files intended to archive data or transport data between\nmachines with different endianness", "description": "", "code-info": {"name": "numpy.chararray.tofile", "parameters": [{"name": "fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "\"\"", "description": ""}, {"name": " format", "is_optional": true, "type": "others", "default_value": "\"%s\"", "description": ""}]}},
{"code": "numpy.char.chararray.tofile(fid, sep=\"\", format=\"%s\")", "item_id": "numpy.char.chararray.tofile", "summary": "Write array to a file as text or binary (default).\nData is always written in \u2018C\u2019 order, independent of the order of a.\nThe data produced by this method can be recovered using the function\nfromfile().\n\nParameters\n\nfidfile or str or PathAn open file object, or a string containing a filename.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\nsepstrSeparator between array items for text output.\nIf \u201c\u201d (empty), a binary file is written, equivalent to\nfile.write(a.tobytes()).\n\nformatstrFormat string for text file output.\nEach entry in the array is formatted to text by first converting\nit to the closest Python type, and then using \u201cformat\u201d % item.\n\n\n\n\nNotes\nThis is a convenience function for quick storage of array data.\nInformation on endianness and precision is lost, so this method is not a\ngood choice for files intended to archive data or transport data between\nmachines with different endianness", "description": "", "code-info": {"name": "numpy.char.chararray.tofile", "parameters": [{"name": "fid", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "\"\"", "description": ""}, {"name": " format", "is_optional": true, "type": "others", "default_value": "\"%s\"", "description": ""}]}},
{"code": "numpy.record.tobytes()", "item_id": "numpy.record.tobytes", "summary": "", "description": "", "code-info": {"name": "numpy.record.tobytes", "parameters": []}},
{"code": "numpy.recarray.tobytes(order='C')", "item_id": "numpy.recarray.tobytes", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.recarray.tobytes", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ndarray.tobytes(order='C')", "item_id": "numpy.ndarray.tobytes", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.ndarray.tobytes", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.memmap.tobytes(order='C')", "item_id": "numpy.memmap.tobytes", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.memmap.tobytes", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.matrix.tobytes(order='C')", "item_id": "numpy.matrix.tobytes", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.matrix.tobytes", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskType.tobytes()", "item_id": "numpy.ma.MaskType.tobytes", "summary": "", "description": "", "code-info": {"name": "numpy.ma.MaskType.tobytes", "parameters": []}},
{"code": "numpy.ma.MaskedArray.tobytes(self, fill_value=None, order='C')", "item_id": "numpy.ma.MaskedArray.tobytes", "summary": "Return the array data as a string containing the raw bytes in the array.\nThe array is filled with a fill value before the string conversion.\n\nNew in version 1.9.0.\n\n\nParameters\n\nfill_valuescalar, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.tobytes", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.masked_array.tobytes(self, fill_value=None, order='C')", "item_id": "numpy.ma.masked_array.tobytes", "summary": "Return the array data as a string containing the raw bytes in the array.\nThe array is filled with a fill value before the string conversion.\n\nNew in version 1.9.0.\n\n\nParameters\n\nfill_valuescalar, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.masked_array.tobytes", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.generic.tobytes()", "item_id": "numpy.generic.tobytes", "summary": "", "description": "", "code-info": {"name": "numpy.generic.tobytes", "parameters": []}},
{"code": "numpy.chararray.tobytes(order='C')", "item_id": "numpy.chararray.tobytes", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.chararray.tobytes", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.char.chararray.tobytes(order='C')", "item_id": "numpy.char.chararray.tobytes", "summary": "Construct Python bytes containing the raw data bytes in the array.\nConstructs Python bytes showing a copy of the raw contents of\ndata memory", "description": "", "code-info": {"name": "numpy.char.chararray.tobytes", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.chararray.title(self)", "item_id": "numpy.chararray.title", "summary": "For each element in self, return a titlecased version of the\nstring: words start with uppercase characters, all remaining cased\ncharacters are lowercase.\n\nSee also\nchar.title\n\n", "description": "", "code-info": {"name": "numpy.chararray.title", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.title(self)", "item_id": "numpy.char.chararray.title", "summary": "For each element in self, return a titlecased version of the\nstring: words start with uppercase characters, all remaining cased\ncharacters are lowercase.\n\nSee also\nchar.title\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.title", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.title(a)", "item_id": "numpy.char.title", "summary": "Return element-wise title cased version of string or unicode.\nTitle case words start with uppercase characters, all remaining cased\ncharacters are lowercase.\nCalls str.title element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like, {str, unicode}Input array.\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.title\n\nExamples\n&gt;&gt;&gt; c=np.array(['a1b c','1b ca','b ca1','ca1b'],'S5'); c\narray(['a1b c', '1b ca', 'b ca1', 'ca1b'],\n    dtype='|S5')\n&gt;&gt;&gt; np.char.title(c)\narray(['A1B C', '1B Ca', 'B Ca1', 'Ca1B'],\n    dtype='|S5')\n\n\n", "description": "", "code-info": {"name": "numpy.char.title", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.tile(A, reps)", "item_id": "numpy.tile", "summary": "Construct an array by repeating A the number of times given by reps.\nIf reps has length d, the result will have dimension of\nmax(d, A.ndim).\nIf A.ndim &lt; d, A is promoted to be d-dimensional by prepending new\naxes", "description": "", "code-info": {"name": "numpy.tile", "parameters": [{"name": "A", "is_optional": false, "type": "others", "description": ""}, {"name": " reps", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.Tester.test(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, raise_warnings=None, timer=False)", "item_id": "numpy.testing.Tester.test", "summary": "Run tests for module using nose.\n\nParameters\n\nlabel{\u2018fast\u2019, \u2018full\u2019, \u2018\u2019, attribute identifier}, optionalIdentifies the tests to run", "description": "", "code-info": {"name": "numpy.testing.Tester.test", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " label", "is_optional": true, "type": "string", "default_value": "'fast'", "description": ""}, {"name": " verbose", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " extra_argv", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " doctests", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " coverage", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " raise_warnings", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " timer", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.linalg.tensorsolve(a, b, axes=None)", "item_id": "numpy.linalg.tensorsolve", "summary": "Solve the tensor equation a x = b for x.\nIt is assumed that all indices of x are summed over in the product,\ntogether with the rightmost indices of a, as is done in, for example,\ntensordot(a, x, axes=b.ndim).\n\nParameters\n\naarray_likeCoefficient tensor, of shape b.shape + Q", "description": "", "code-info": {"name": "numpy.linalg.tensorsolve", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.linalg.tensorinv(a, ind=2)", "item_id": "numpy.linalg.tensorinv", "summary": "Compute the \u2018inverse\u2019 of an N-dimensional array.\nThe result is an inverse for a relative to the tensordot operation\ntensordot(a, b, ind), i", "description": "", "code-info": {"name": "numpy.linalg.tensorinv", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " ind", "is_optional": true, "type": "int", "default_value": "2", "description": ""}]}},
{"code": "numpy.tensordot(a, b, axes=2)", "item_id": "numpy.tensordot", "summary": "Compute tensor dot product along specified axes.\nGiven two tensors, a and b, and an array_like object containing\ntwo array_like objects, (a_axes, b_axes), sum the products of\na\u2019s and b\u2019s elements (components) over the axes specified by\na_axes and b_axes", "description": "", "code-info": {"name": "numpy.tensordot", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": true, "type": "int", "default_value": "2", "description": ""}]}},
{"code": "numpy.tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.tanh", "summary": "Compute hyperbolic tangent element-wise.\nEquivalent to np.sinh(x)/np.cosh(x) or -1j * np.tan(1j*x).\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.tanh", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.tan", "summary": "Compute tangent element-wise.\nEquivalent to np.sin(x)/np.cos(x) element-wise.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.tan", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.take_along_axis(arr, indices, axis)", "item_id": "numpy.take_along_axis", "summary": "Take values from the input array by matching 1d index and data slices.\nThis iterates over matching 1d slices oriented along the specified axis in\nthe index and data arrays, and uses the former to look up values in the\nlatter", "description": "", "code-info": {"name": "numpy.take_along_axis", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.take()", "item_id": "numpy.record.take", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.take", "parameters": []}},
{"code": "numpy.ma.MaskedArray.take(self, indices, axis=None, out=None, mode='raise')", "item_id": "numpy.ma.MaskedArray.take", "summary": "", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.take", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.recarray.take(indices, axis=None, out=None, mode='raise')", "item_id": "numpy.recarray.take", "summary": "Return an array formed from the elements of a at the given indices.\nRefer to numpy.take for full documentation.\n\nSee also\n\nnumpy.takeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.ma.masked_array.take(self, indices, axis=None, out=None, mode='raise')", "item_id": "numpy.ma.masked_array.take", "summary": "", "description": "", "code-info": {"name": "numpy.ma.masked_array.take", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.generic.take()", "item_id": "numpy.generic.take", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.take", "parameters": []}},
{"code": "numpy.char.chararray.take(indices, axis=None, out=None, mode='raise')", "item_id": "numpy.char.chararray.take", "summary": "Return an array formed from the elements of a at the given indices.\nRefer to numpy.take for full documentation.\n\nSee also\n\nnumpy.takeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.take(a, indices, axis=None, out=None, mode='raise')", "item_id": "numpy.take", "summary": "Take elements from an array along an axis.\nWhen axis is not None, this function does the same thing as \u201cfancy\u201d\nindexing (indexing arrays using arrays); however, it can be easier to use\nif you need elements along a given axis", "description": "", "code-info": {"name": "numpy.take", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.chararray.take(indices, axis=None, out=None, mode='raise')", "item_id": "numpy.chararray.take", "summary": "Return an array formed from the elements of a at the given indices.\nRefer to numpy.take for full documentation.\n\nSee also\n\nnumpy.takeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.chararray.swapcase(self)", "item_id": "numpy.chararray.swapcase", "summary": "For each element in self, return a copy of the string with\nuppercase characters converted to lowercase and vice versa.\n\nSee also\nchar.swapcase\n\n", "description": "", "code-info": {"name": "numpy.chararray.swapcase", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.swapcase(self)", "item_id": "numpy.char.chararray.swapcase", "summary": "For each element in self, return a copy of the string with\nuppercase characters converted to lowercase and vice versa.\n\nSee also\nchar.swapcase\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.swapcase", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.swapcase(a)", "item_id": "numpy.char.swapcase", "summary": "Return element-wise a copy of the string with\nuppercase characters converted to lowercase and vice versa.\nCalls str.swapcase element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like, {str, unicode}Input array.\n\n\n\nReturns\n\noutndarray, {str, unicode}Output array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.swapcase\n\nExamples\n&gt;&gt;&gt; c=np.array(['a1B c','1b Ca','b Ca1','cA1b'],'S5'); c\narray(['a1B c', '1b Ca', 'b Ca1', 'cA1b'],\n    dtype='|S5')\n&gt;&gt;&gt; np.char.swapcase(c)\narray(['A1b C', '1B cA', 'B cA1', 'Ca1B'],\n    dtype='|S5')\n\n\n", "description": "", "code-info": {"name": "numpy.char.swapcase", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.swapaxes()", "item_id": "numpy.record.swapaxes", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.swapaxes", "parameters": []}},
{"code": "numpy.recarray.swapaxes(axis1, axis2)", "item_id": "numpy.recarray.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.swapaxes(axis1, axis2)", "item_id": "numpy.ndarray.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.swapaxes(axis1, axis2)", "item_id": "numpy.memmap.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.swapaxes(axis1, axis2)", "item_id": "numpy.matrix.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskType.swapaxes()", "item_id": "numpy.ma.MaskType.swapaxes", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.swapaxes", "parameters": []}},
{"code": "numpy.generic.swapaxes()", "item_id": "numpy.generic.swapaxes", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.swapaxes", "parameters": []}},
{"code": "numpy.chararray.swapaxes(axis1, axis2)", "item_id": "numpy.chararray.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.swapaxes(axis1, axis2)", "item_id": "numpy.ma.masked_array.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.swapaxes(axis1, axis2)", "item_id": "numpy.char.chararray.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.swapaxes(a, axis1, axis2)", "item_id": "numpy.swapaxes", "summary": "Interchange two axes of an array.\n\nParameters\n\naarray_likeInput array.\n\naxis1intFirst axis.\n\naxis2intSecond axis.\n\n\n\nReturns\n\na_swappedndarrayFor NumPy &gt;= 1.10.0, if a is an ndarray, then a view of a is\nreturned; otherwise a new array is created", "description": "", "code-info": {"name": "numpy.swapaxes", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.swapaxes(self, *args, **params)", "item_id": "numpy.ma.swapaxes", "summary": "\nReturn a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.swapaxes", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **params", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.swapaxes(axis1, axis2)", "item_id": "numpy.ma.MaskedArray.swapaxes", "summary": "Return a view of the array with axis1 and axis2 interchanged.\nRefer to numpy.swapaxes for full documentation.\n\nSee also\n\nnumpy.swapaxesequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.swapaxes", "parameters": [{"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": " axis2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.linalg.svd(a, full_matrices=True, compute_uv=True, hermitian=False)", "item_id": "numpy.linalg.svd", "summary": "Singular Value Decomposition.\nWhen a is a 2D array, it is factorized as u @ np.diag(s) @ vh\n= (u * s) @ vh, where u and vh are 2D unitary arrays and s is a 1D\narray of a\u2019s singular values", "description": "", "code-info": {"name": "numpy.linalg.svd", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " full_matrices", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " compute_uv", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " hermitian", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)", "item_id": "numpy.ndarray.sum", "summary": "Return the sum of the array elements over the given axis.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.sumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.sum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.suppress_warnings(forwarding_rule='always')", "item_id": "numpy.testing.suppress_warnings", "summary": "Context manager and decorator doing much the same as\nwarnings.catch_warnings.\nHowever, it also provides a filter mechanism to work around\nhttps://bugs.python.org/issue4180.\nThis bug causes Python before 3.4 to not reliably show warnings again\nafter they have been ignored once (even within catch_warnings)", "description": "", "code-info": {"name": "numpy.testing.suppress_warnings", "parameters": [{"name": "forwarding_rule", "is_optional": true, "type": "string", "default_value": "'always'", "description": ""}]}},
{"code": "numpy.record.sum()", "item_id": "numpy.record.sum", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.sum", "parameters": []}},
{"code": "numpy.memmap.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)", "item_id": "numpy.memmap.sum", "summary": "Return the sum of the array elements over the given axis.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.sumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.sum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.MaskType.sum()", "item_id": "numpy.ma.MaskType.sum", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.sum", "parameters": []}},
{"code": "numpy.matrix.sum(self, axis=None, dtype=None, out=None)", "item_id": "numpy.matrix.sum", "summary": "Returns the sum of the matrix elements, along the given axis.\nRefer to numpy.sum for full documentation.\n\nSee also\nnumpy.sum\n\nNotes\nThis is the same as ndarray.sum, except that where an ndarray would\nbe returned, a matrix object is returned instead.\nExamples\n&gt;&gt;&gt; x = np.matrix([[1, 2], [4, 3]])\n&gt;&gt;&gt; x.sum()\n10\n&gt;&gt;&gt; x.sum(axis=1)\nmatrix([[3],\n        [7]])\n&gt;&gt;&gt; x.sum(axis=1, dtype='float')\nmatrix([[3.],\n        [7.]])\n&gt;&gt;&gt; out = np.zeros((2, 1), dtype='float')\n&gt;&gt;&gt; x.sum(axis=1, dtype='float', out=np.asmatrix(out))\nmatrix([[3.],\n        [7.]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.sum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.sum(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.sum", "summary": "Return the sum of the array elements over the given axis.\nMasked elements are set to 0 internally.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.ndarray.sumcorresponding function for ndarrays\n\nnumpy.sumequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[1, --, 3],\n        [--, 5, --],\n        [7, --, 9]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n&gt;&gt;&gt; x.sum()\n25\n&gt;&gt;&gt; x.sum(axis=1)\nmasked_array(data=[4, 5, 16],\n             mask=[False, False, False],\n       fill_value=999999)\n&gt;&gt;&gt; x.sum(axis=0)\nmasked_array(data=[8, 5, 12],\n             mask=[False, False, False],\n       fill_value=999999)\n&gt;&gt;&gt; print(type(x.sum(axis=0, dtype=np.int64)[0]))\n&lt;class 'numpy.int64'&gt;\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.sum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.recarray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)", "item_id": "numpy.recarray.sum", "summary": "Return the sum of the array elements over the given axis.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.sumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.sum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_array.sum(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.sum", "summary": "Return the sum of the array elements over the given axis.\nMasked elements are set to 0 internally.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.ndarray.sumcorresponding function for ndarrays\n\nnumpy.sumequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[1, --, 3],\n        [--, 5, --],\n        [7, --, 9]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n&gt;&gt;&gt; x.sum()\n25\n&gt;&gt;&gt; x.sum(axis=1)\nmasked_array(data=[4, 5, 16],\n             mask=[False, False, False],\n       fill_value=999999)\n&gt;&gt;&gt; x.sum(axis=0)\nmasked_array(data=[8, 5, 12],\n             mask=[False, False, False],\n       fill_value=999999)\n&gt;&gt;&gt; print(type(x.sum(axis=0, dtype=np.int64)[0]))\n&lt;class 'numpy.int64'&gt;\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.sum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.sum()", "item_id": "numpy.generic.sum", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.sum", "parameters": []}},
{"code": "numpy.chararray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)", "item_id": "numpy.chararray.sum", "summary": "Return the sum of the array elements over the given axis.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.sumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.sum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.char.chararray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)", "item_id": "numpy.char.chararray.sum", "summary": "Return the sum of the array elements over the given axis.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.sumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.sum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.sum(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.sum", "summary": "Return the sum of the array elements over the given axis.\nMasked elements are set to 0 internally.\nRefer to numpy.sum for full documentation.\n\nSee also\n\nnumpy.ndarray.sumcorresponding function for ndarrays\n\nnumpy.sumequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n&gt;&gt;&gt; x\nmasked_array(\n  data=[[1, --, 3],\n        [--, 5, --],\n        [7, --, 9]],\n  mask=[[False,  True, False],\n        [ True, False,  True],\n        [False,  True, False]],\n  fill_value=999999)\n&gt;&gt;&gt; x.sum()\n25\n&gt;&gt;&gt; x.sum(axis=1)\nmasked_array(data=[4, 5, 16],\n             mask=[False, False, False],\n       fill_value=999999)\n&gt;&gt;&gt; x.sum(axis=0)\nmasked_array(data=[8, 5, 12],\n             mask=[False, False, False],\n       fill_value=999999)\n&gt;&gt;&gt; print(type(x.sum(axis=0, dtype=np.int64)[0]))\n&lt;class 'numpy.int64'&gt;\n\n\n", "description": "", "code-info": {"name": "numpy.ma.sum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.sum(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)", "item_id": "numpy.sum", "summary": "Sum of array elements over a given axis.\n\nParameters\n\naarray_likeElements to sum.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which a sum is performed", "description": "", "code-info": {"name": "numpy.sum", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.chararray.strip(self, chars=None)", "item_id": "numpy.chararray.strip", "summary": "For each element in self, return a copy with the leading and\ntrailing characters removed.\n\nSee also\nchar.strip\n\n", "description": "", "code-info": {"name": "numpy.chararray.strip", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.strip(self, chars=None)", "item_id": "numpy.char.chararray.strip", "summary": "For each element in self, return a copy with the leading and\ntrailing characters removed.\n\nSee also\nchar.strip\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.strip", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.strip(a, chars=None)", "item_id": "numpy.char.strip", "summary": "For each element in a, return a copy with the leading and\ntrailing characters removed.\nCalls str.strip element-wise.\n\nParameters\n\naarray-like of str or unicode\ncharsstr or unicode, optionalThe chars argument is a string specifying the set of\ncharacters to be removed", "description": "", "code-info": {"name": "numpy.char.strip", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.subtract", "summary": "Subtract arguments, element-wise.\n\nParameters\n\nx1, x2array_likeThe arrays to be subtracted from each other", "description": "", "code-info": {"name": "numpy.subtract", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.str_len(a)", "item_id": "numpy.char.str_len", "summary": "Return len(a) element-wise.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of integers\n\n\n\n\n\nSee also\n__builtin__.len\n\n", "description": "", "code-info": {"name": "numpy.char.str_len", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.std()", "item_id": "numpy.record.std", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.std", "parameters": []}},
{"code": "numpy.recarray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.recarray.std", "summary": "Returns the standard deviation of the array elements along given axis.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.stdequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.std", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.ndarray.std", "summary": "Returns the standard deviation of the array elements along given axis.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.stdequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.std", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.memmap.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.memmap.std", "summary": "Returns the standard deviation of the array elements along given axis.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.stdequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.std", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.MaskType.std()", "item_id": "numpy.ma.MaskType.std", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.std", "parameters": []}},
{"code": "numpy.ma.MaskedArray.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.std", "summary": "Returns the standard deviation of the array elements along given axis.\nMasked entries are ignored.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.ndarray.stdcorresponding function for ndarrays\n\nnumpy.stdEquivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.std", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.masked_array.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.std", "summary": "Returns the standard deviation of the array elements along given axis.\nMasked entries are ignored.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.ndarray.stdcorresponding function for ndarrays\n\nnumpy.stdEquivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.std", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.std()", "item_id": "numpy.generic.std", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.std", "parameters": []}},
{"code": "numpy.chararray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.chararray.std", "summary": "Returns the standard deviation of the array elements along given axis.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.stdequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.std", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)", "item_id": "numpy.char.chararray.std", "summary": "Returns the standard deviation of the array elements along given axis.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.stdequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.std", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.matrix.std(self, axis=None, dtype=None, out=None, ddof=0)", "item_id": "numpy.matrix.std", "summary": "Return the standard deviation of the array elements along the given axis.\nRefer to numpy.std for full documentation.\n\nSee also\nnumpy.std\n\nNotes\nThis is the same as ndarray.std, except that where an ndarray would\nbe returned, a matrix object is returned instead.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3, 4)))\n&gt;&gt;&gt; x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.std()\n3.4520525295346629 # may vary\n&gt;&gt;&gt; x.std(0)\nmatrix([[ 3.26598632,  3.26598632,  3.26598632,  3.26598632]]) # may vary\n&gt;&gt;&gt; x.std(1)\nmatrix([[ 1.11803399],\n        [ 1.11803399],\n        [ 1.11803399]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.std", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.std", "summary": "Returns the standard deviation of the array elements along given axis.\nMasked entries are ignored.\nRefer to numpy.std for full documentation.\n\nSee also\n\nnumpy.ndarray.stdcorresponding function for ndarrays\n\nnumpy.stdEquivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.std", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.std", "summary": "Compute the standard deviation along the specified axis.\nReturns the standard deviation, a measure of the spread of a distribution,\nof the array elements", "description": "", "code-info": {"name": "numpy.std", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.chararray.startswith(self, prefix, start=0, end=None)", "item_id": "numpy.chararray.startswith", "summary": "Returns a boolean array which is True where the string element\nin self starts with prefix, otherwise False.\n\nSee also\nchar.startswith\n\n", "description": "", "code-info": {"name": "numpy.chararray.startswith", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " prefix", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.standard_t(df, size=None)", "item_id": "numpy.random.Generator.standard_t", "summary": "Draw samples from a standard Student\u2019s t distribution with df degrees\nof freedom.\nA special case of the hyperbolic distribution", "description": "", "code-info": {"name": "numpy.random.Generator.standard_t", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.startswith(self, prefix, start=0, end=None)", "item_id": "numpy.char.chararray.startswith", "summary": "Returns a boolean array which is True where the string element\nin self starts with prefix, otherwise False.\n\nSee also\nchar.startswith\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.startswith", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " prefix", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.startswith(a, prefix, start=0, end=None)", "item_id": "numpy.char.startswith", "summary": "Returns a boolean array which is True where the string element\nin a starts with prefix, otherwise False.\nCalls str.startswith element-wise.\n\nParameters\n\naarray_like of str or unicode\nprefixstr\nstart, endint, optionalWith optional start, test beginning at that position", "description": "", "code-info": {"name": "numpy.char.startswith", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " prefix", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.standard_t(df, size=None)", "item_id": "numpy.random.RandomState.standard_t", "summary": "Draw samples from a standard Student\u2019s t distribution with df degrees\nof freedom.\nA special case of the hyperbolic distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.standard_t", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.standard_t(df, size=None)", "item_id": "numpy.random.standard_t", "summary": "Draw samples from a standard Student\u2019s t distribution with df degrees\nof freedom.\nA special case of the hyperbolic distribution", "description": "", "code-info": {"name": "numpy.random.standard_t", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.standard_normal(size=None)", "item_id": "numpy.random.RandomState.standard_normal", "summary": "Draw samples from a standard Normal distribution (mean=0, stdev=1).\n\nNote\nNew code should use the standard_normal method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.standard_normal", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.standard_normal(size=None, dtype=np.float64, out=None)", "item_id": "numpy.random.Generator.standard_normal", "summary": "Draw samples from a standard Normal distribution (mean=0, stdev=1).\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.standard_normal", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "np.float64", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.standard_normal(size=None)", "item_id": "numpy.random.standard_normal", "summary": "Draw samples from a standard Normal distribution (mean=0, stdev=1).\n\nNote\nNew code should use the standard_normal method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.standard_normal", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.standard_gamma(shape, size=None)", "item_id": "numpy.random.RandomState.standard_gamma", "summary": "Draw samples from a standard Gamma distribution.\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \u201ck\u201d) and scale=1.\n\nNote\nNew code should use the standard_gamma method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nshapefloat or array_like of floatsParameter, must be non-negative.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.standard_gamma", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.standard_gamma(shape, size=None, dtype=np.float64, out=None)", "item_id": "numpy.random.Generator.standard_gamma", "summary": "Draw samples from a standard Gamma distribution.\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \u201ck\u201d) and scale=1.\n\nParameters\n\nshapefloat or array_like of floatsParameter, must be non-negative.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.standard_gamma", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "np.float64", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.standard_exponential(size=None)", "item_id": "numpy.random.RandomState.standard_exponential", "summary": "Draw samples from the standard exponential distribution.\nstandard_exponential is identical to the exponential distribution\nwith a scale parameter of 1.\n\nNote\nNew code should use the standard_exponential method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.standard_exponential", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.standard_exponential(size=None, dtype=np.float64, method='zig', out=None)", "item_id": "numpy.random.Generator.standard_exponential", "summary": "Draw samples from the standard exponential distribution.\nstandard_exponential is identical to the exponential distribution\nwith a scale parameter of 1.\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.standard_exponential", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "np.float64", "description": ""}, {"name": " method", "is_optional": true, "type": "string", "default_value": "'zig'", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.standard_exponential(size=None)", "item_id": "numpy.random.standard_exponential", "summary": "Draw samples from the standard exponential distribution.\nstandard_exponential is identical to the exponential distribution\nwith a scale parameter of 1.\n\nNote\nNew code should use the standard_exponential method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.standard_exponential", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.standard_cauchy(size=None)", "item_id": "numpy.random.Generator.standard_cauchy", "summary": "Draw samples from a standard Cauchy distribution with mode = 0.\nAlso known as the Lorentz distribution.\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.standard_cauchy", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.standard_gamma(shape, size=None)", "item_id": "numpy.random.standard_gamma", "summary": "Draw samples from a standard Gamma distribution.\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \u201ck\u201d) and scale=1.\n\nNote\nNew code should use the standard_gamma method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nshapefloat or array_like of floatsParameter, must be non-negative.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.standard_gamma", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.standard_cauchy(size=None)", "item_id": "numpy.random.RandomState.standard_cauchy", "summary": "Draw samples from a standard Cauchy distribution with mode = 0.\nAlso known as the Lorentz distribution.\n\nNote\nNew code should use the standard_cauchy method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.standard_cauchy", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.stack(arrays, axis=0, out=None)", "item_id": "numpy.stack", "summary": "Join a sequence of arrays along a new axis.\nThe axis parameter specifies the index of the new axis in the\ndimensions of the result", "description": "", "code-info": {"name": "numpy.stack", "parameters": [{"name": "arrays", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.standard_cauchy(size=None)", "item_id": "numpy.random.standard_cauchy", "summary": "Draw samples from a standard Cauchy distribution with mode = 0.\nAlso known as the Lorentz distribution.\n\nNote\nNew code should use the standard_cauchy method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.standard_cauchy", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.stack(*args, **kwargs)", "item_id": "numpy.ma.stack", "summary": "\nJoin a sequence of arrays along a new axis.\nThe axis parameter specifies the index of the new axis in the\ndimensions of the result", "description": "", "code-info": {"name": "numpy.ma.stack", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.squeeze()", "item_id": "numpy.record.squeeze", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.squeeze", "parameters": []}},
{"code": "numpy.recarray.squeeze(axis=None)", "item_id": "numpy.recarray.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.squeeze(axis=None)", "item_id": "numpy.ndarray.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.squeeze(self, axis=None)", "item_id": "numpy.matrix.squeeze", "summary": "Return a possibly reshaped matrix.\nRefer to numpy.squeeze for more documentation.\n\nParameters\n\naxisNone or int or tuple of ints, optionalSelects a subset of the single-dimensional entries in the shape.\nIf an axis is selected with shape entry greater than one,\nan error is raised.\n\n\n\nReturns\n\nsqueezedmatrixThe matrix, but as a (1, N) matrix if it had shape (N, 1).\n\n\n\n\n\nSee also\n\nnumpy.squeezerelated function\n\n\n\nNotes\nIf m has a single column then that column is returned\nas the single row of a matrix", "description": "", "code-info": {"name": "numpy.matrix.squeeze", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.squeeze(axis=None)", "item_id": "numpy.memmap.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.squeeze()", "item_id": "numpy.ma.MaskType.squeeze", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.squeeze", "parameters": []}},
{"code": "numpy.ma.MaskedArray.squeeze(axis=None)", "item_id": "numpy.ma.MaskedArray.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.squeeze(axis=None)", "item_id": "numpy.ma.masked_array.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.sqrt", "summary": "Return the non-negative square-root of an array, element-wise.\n\nParameters\n\nxarray_likeThe values whose square-roots are required.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.sqrt", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.squeeze()", "item_id": "numpy.generic.squeeze", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.squeeze", "parameters": []}},
{"code": "numpy.chararray.squeeze(axis=None)", "item_id": "numpy.chararray.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.squeeze(axis=None)", "item_id": "numpy.char.chararray.squeeze", "summary": "Remove single-dimensional entries from the shape of a.\nRefer to numpy.squeeze for full documentation.\n\nSee also\n\nnumpy.squeezeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.squeeze", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.splitlines(self, keepends=None)", "item_id": "numpy.chararray.splitlines", "summary": "For each element in self, return a list of the lines in the\nelement, breaking at line boundaries.\n\nSee also\nchar.splitlines\n\n", "description": "", "code-info": {"name": "numpy.chararray.splitlines", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " keepends", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.squeeze(a, axis=None)", "item_id": "numpy.ma.squeeze", "summary": "Remove single-dimensional entries from the shape of an array.\n\nParameters\n\naarray_likeInput data.\n\naxisNone or int or tuple of ints, optional\nNew in version 1.7.0.\n\nSelects a subset of the single-dimensional entries in the\nshape", "description": "", "code-info": {"name": "numpy.ma.squeeze", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.squeeze(a, axis=None)", "item_id": "numpy.squeeze", "summary": "Remove single-dimensional entries from the shape of an array.\n\nParameters\n\naarray_likeInput data.\n\naxisNone or int or tuple of ints, optional\nNew in version 1.7.0.\n\nSelects a subset of the single-dimensional entries in the\nshape", "description": "", "code-info": {"name": "numpy.squeeze", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.splitlines(self, keepends=None)", "item_id": "numpy.char.chararray.splitlines", "summary": "For each element in self, return a list of the lines in the\nelement, breaking at line boundaries.\n\nSee also\nchar.splitlines\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.splitlines", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " keepends", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.split(self, sep=None, maxsplit=None)", "item_id": "numpy.chararray.split", "summary": "For each element in self, return a list of the words in the\nstring, using sep as the delimiter string.\n\nSee also\nchar.split\n\n", "description": "", "code-info": {"name": "numpy.chararray.split", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxsplit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.split(self, sep=None, maxsplit=None)", "item_id": "numpy.char.chararray.split", "summary": "For each element in self, return a list of the words in the\nstring, using sep as the delimiter string.\n\nSee also\nchar.split\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.split", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxsplit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.split(ary, indices_or_sections, axis=0)", "item_id": "numpy.split", "summary": "Split an array into multiple sub-arrays as views into ary.\n\nParameters\n\naryndarrayArray to be divided into sub-arrays.\n\nindices_or_sectionsint or 1-D arrayIf indices_or_sections is an integer, N, the array will be divided\ninto N equal arrays along axis", "description": "", "code-info": {"name": "numpy.split", "parameters": [{"name": "ary", "is_optional": false, "type": "others", "description": ""}, {"name": " indices_or_sections", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.char.splitlines(a, keepends=None)", "item_id": "numpy.char.splitlines", "summary": "For each element in a, return a list of the lines in the\nelement, breaking at line boundaries.\nCalls str.splitlines element-wise.\n\nParameters\n\naarray_like of str or unicode\nkeependsbool, optionalLine breaks are not included in the resulting list unless\nkeepends is given and true.\n\n\n\nReturns\n\noutndarrayArray of list objects\n\n\n\n\n\nSee also\nstr.splitlines\n\n", "description": "", "code-info": {"name": "numpy.char.splitlines", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " keepends", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.split(a, sep=None, maxsplit=None)", "item_id": "numpy.char.split", "summary": "For each element in a, return a list of the words in the\nstring, using sep as the delimiter string.\nCalls str.split element-wise.\n\nParameters\n\naarray_like of str or unicode\nsepstr or unicode, optionalIf sep is not specified or None, any whitespace string is a\nseparator.\n\nmaxsplitint, optionalIf maxsplit is given, at most maxsplit splits are done.\n\n\n\nReturns\n\noutndarrayArray of list objects\n\n\n\n\n\nSee also\nstr.split, rsplit\n\n", "description": "", "code-info": {"name": "numpy.char.split", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxsplit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.SeedSequence.spawn(n_children)", "item_id": "numpy.random.SeedSequence.spawn", "summary": "Spawn a number of child SeedSequence s by extending the\nspawn_key.\n\nParameters\n\nn_childrenint\n\n\nReturns\n\nseqslist of SeedSequence s\n\n\n\n", "description": "", "code-info": {"name": "numpy.random.SeedSequence.spawn", "parameters": [{"name": "n_children", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.spacing(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.spacing", "summary": "Return the distance between x and the nearest adjacent number.\n\nParameters\n\nxarray_likeValues to find the spacing of.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.spacing", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.source(object, output=&lt;_io.TextIOWrapper name='&lt;stdout&gt;' mode='w' encoding='utf-8'&gt;)", "item_id": "numpy.source", "summary": "Print or write to a file the source code for a NumPy object.\nThe source code is only returned for objects written in Python", "description": "", "code-info": {"name": "numpy.source", "parameters": [{"name": "object", "is_optional": false, "type": "others", "description": ""}, {"name": " output", "is_optional": true, "type": "others", "default_value": "&lt;_io.TextIOWrapper name", "description": ""}]}},
{"code": "numpy.sort_complex(a)", "item_id": "numpy.sort_complex", "summary": "Sort a complex array using the real part first, then the imaginary part.\n\nParameters\n\naarray_likeInput array\n\n\n\nReturns\n\noutcomplex ndarrayAlways returns a sorted complex array.\n\n\n\n\nExamples\n&gt;&gt;&gt; np.sort_complex([5, 3, 6, 2, 1])\narray([1.+0.j, 2.+0.j, 3.+0.j, 5.+0.j, 6.+0.j])\n\n\n&gt;&gt;&gt; np.sort_complex([1 + 2j, 2 - 1j, 3 - 2j, 3 - 3j, 3 + 5j])\narray([1.+2.j,  2.-1.j,  3.-3.j,  3.-2.j,  3.+5.j])\n\n\n", "description": "", "code-info": {"name": "numpy.sort_complex", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.sort()", "item_id": "numpy.record.sort", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.sort", "parameters": []}},
{"code": "numpy.recarray.sort(axis=-1, kind=None, order=None)", "item_id": "numpy.recarray.sort", "summary": "Sort an array in-place", "description": "", "code-info": {"name": "numpy.recarray.sort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.sort(axis=-1, kind=None, order=None)", "item_id": "numpy.ndarray.sort", "summary": "Sort an array in-place", "description": "", "code-info": {"name": "numpy.ndarray.sort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.sort()", "item_id": "numpy.ma.MaskType.sort", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.sort", "parameters": []}},
{"code": "numpy.memmap.sort(axis=-1, kind=None, order=None)", "item_id": "numpy.memmap.sort", "summary": "Sort an array in-place", "description": "", "code-info": {"name": "numpy.memmap.sort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.sort(axis=-1, kind=None, order=None)", "item_id": "numpy.matrix.sort", "summary": "Sort an array in-place", "description": "", "code-info": {"name": "numpy.matrix.sort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.sort(self, axis=-1, kind=None, order=None, endwith=True, fill_value=None)", "item_id": "numpy.ma.MaskedArray.sort", "summary": "Sort the array, in-place\n\nParameters\n\naarray_likeArray to be sorted.\n\naxisint, optionalAxis along which to sort", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.sort", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " endwith", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.sort(self, axis=-1, kind=None, order=None, endwith=True, fill_value=None)", "item_id": "numpy.ma.masked_array.sort", "summary": "Sort the array, in-place\n\nParameters\n\naarray_likeArray to be sorted.\n\naxisint, optionalAxis along which to sort", "description": "", "code-info": {"name": "numpy.ma.masked_array.sort", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " endwith", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.sort()", "item_id": "numpy.generic.sort", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.sort", "parameters": []}},
{"code": "numpy.chararray.sort(axis=-1, kind=None, order=None)", "item_id": "numpy.chararray.sort", "summary": "Sort an array in-place", "description": "", "code-info": {"name": "numpy.chararray.sort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.sort(axis=-1, kind=None, order=None)", "item_id": "numpy.char.chararray.sort", "summary": "Sort an array in-place", "description": "", "code-info": {"name": "numpy.char.chararray.sort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.sort(a, axis=-1, kind=None, order=None)", "item_id": "numpy.sort", "summary": "Return a sorted copy of an array.\n\nParameters\n\naarray_likeArray to be sorted.\n\naxisint or None, optionalAxis along which to sort", "description": "", "code-info": {"name": "numpy.sort", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None)", "item_id": "numpy.ma.sort", "summary": "Sort the array, in-place\n\nParameters\n\naarray_likeArray to be sorted.\n\naxisint, optionalAxis along which to sort", "description": "", "code-info": {"name": "numpy.ma.sort", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " endwith", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.linalg.solve(a, b)", "item_id": "numpy.linalg.solve", "summary": "Solve a linear matrix equation, or system of linear scalar equations.\nComputes the \u201cexact\u201d solution, x, of the well-determined, i.e., full\nrank, linear matrix equation ax = b.\n\nParameters\n\na(\u2026, M, M) array_likeCoefficient matrix.\n\nb{(\u2026, M,), (\u2026, M, K)}, array_likeOrdinate or \u201cdependent variable\u201d values.\n\n\n\nReturns\n\nx{(\u2026, M,), (\u2026, M, K)} ndarraySolution to the system a x = b", "description": "", "code-info": {"name": "numpy.linalg.solve", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.soften_mask(self)", "item_id": "numpy.ma.MaskedArray.soften_mask", "summary": "Force the mask to soft.\nWhether the mask of a masked array is hard or soft is determined by\nits hardmask property", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.soften_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.soften_mask(self)", "item_id": "numpy.ma.masked_array.soften_mask", "summary": "Force the mask to soft.\nWhether the mask of a masked array is hard or soft is determined by\nits hardmask property", "description": "", "code-info": {"name": "numpy.ma.masked_array.soften_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.soften_mask(self)", "item_id": "numpy.ma.soften_mask", "summary": "Force the mask to soft.\nWhether the mask of a masked array is hard or soft is determined by\nits hardmask property", "description": "", "code-info": {"name": "numpy.ma.soften_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.dec.slow(t)", "item_id": "numpy.testing.dec.slow", "summary": "Label a test as \u2018slow\u2019.\nThe exact definition of a slow test is obviously both subjective and\nhardware-dependent, but in general any individual test that requires more\nthan a second or two should be labeled as slow (the whole suite consists of\nthousands of tests, so even a second is significant).\n\nParameters\n\ntcallableThe test to label as slow.\n\n\n\nReturns\n\ntcallableThe decorated test t.\n\n\n\n\nExamples\nThe numpy.testing module includes import decorators as dec.\nA test can be decorated as slow like this:\nfrom numpy.testing import *\n\n@dec.slow\ndef test_big(self):\n    print('Big, slow test')\n\n\n", "description": "", "code-info": {"name": "numpy.testing.dec.slow", "parameters": [{"name": "t", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.linalg.slogdet(a)", "item_id": "numpy.linalg.slogdet", "summary": "Compute the sign and (natural) logarithm of the determinant of an array.\nIf an array has a very small or very large determinant, then a call to\ndet may overflow or underflow", "description": "", "code-info": {"name": "numpy.linalg.slogdet", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.dec.skipif(skip_condition, msg=None)", "item_id": "numpy.testing.dec.skipif", "summary": "Make function raise SkipTest exception if a given condition is true.\nIf the condition is a callable, it is used at runtime to dynamically\nmake the decision", "description": "", "code-info": {"name": "numpy.testing.dec.skipif", "parameters": [{"name": "skip_condition", "is_optional": false, "type": "others", "description": ""}, {"name": " msg", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.size(obj, axis=None)", "item_id": "numpy.ma.size", "summary": "Return the number of elements along a given axis.\n\nParameters\n\naarray_likeInput data.\n\naxisint, optionalAxis along which the elements are counted", "description": "", "code-info": {"name": "numpy.ma.size", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.sinc(x)", "item_id": "numpy.sinc", "summary": "Return the sinc function.\nThe sinc function is .\n\nParameters\n\nxndarrayArray (possibly multi-dimensional) of values for which to to\ncalculate sinc(x).\n\n\n\nReturns\n\noutndarraysinc(x), which has the same shape as the input.\n\n\n\n\nNotes\nsinc(0) is the limit value 1.\nThe name sinc is short for \u201csine cardinal\u201d or \u201csinus cardinalis\u201d.\nThe sinc function is used in various signal processing applications,\nincluding in anti-aliasing, in the construction of a Lanczos resampling\nfilter, and in interpolation.\nFor bandlimited interpolation of discrete-time signals, the ideal\ninterpolation kernel is proportional to the sinc function.\nReferences\n\n1\nWeisstein, Eric W", "description": "", "code-info": {"name": "numpy.sinc", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.sin", "summary": "Trigonometric sine, element-wise.\n\nParameters\n\nxarray_likeAngle, in radians ( rad equals 360 degrees).\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.sin", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.signbit(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.signbit", "summary": "Returns element-wise True where signbit is set (less than zero).\n\nParameters\n\nxarray_likeThe input value(s).\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.signbit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.sinh", "summary": "Hyperbolic sine, element-wise.\nEquivalent to 1/2 * (np.exp(x) - np.exp(-x)) or\n-1j * np.sin(1j*x).\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.sinh", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.sign", "summary": "Returns an element-wise indication of the sign of a number.\nThe sign function returns -1 if x &lt; 0, 0 if x==0, 1 if x &gt; 0", "description": "", "code-info": {"name": "numpy.sign", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.shuffle(x)", "item_id": "numpy.random.RandomState.shuffle", "summary": "Modify a sequence in-place by shuffling its contents.\nThis function only shuffles the array along the first axis of a\nmulti-dimensional array", "description": "", "code-info": {"name": "numpy.random.RandomState.shuffle", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.shuffle(x)", "item_id": "numpy.random.shuffle", "summary": "Modify a sequence in-place by shuffling its contents.\nThis function only shuffles the array along the first axis of a\nmulti-dimensional array", "description": "", "code-info": {"name": "numpy.random.shuffle", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.shrink_mask(self)", "item_id": "numpy.ma.MaskedArray.shrink_mask", "summary": "Reduce a mask to nomask when possible.\n\nParameters\n\nNone\n\n\nReturns\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([[1,2 ], [3, 4]], mask=[0]*4)\n&gt;&gt;&gt; x.mask\narray([[False, False],\n       [False, False]])\n&gt;&gt;&gt; x.shrink_mask()\nmasked_array(\n  data=[[1, 2],\n        [3, 4]],\n  mask=False,\n  fill_value=999999)\n&gt;&gt;&gt; x.mask\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.shrink_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.shuffle(x, axis=0)", "item_id": "numpy.random.Generator.shuffle", "summary": "Modify a sequence in-place by shuffling its contents.\nThe order of sub-arrays is changed but their contents remains the same.\n\nParameters\n\nxarray_likeThe array or list to be shuffled.\n\naxisint, optionalThe axis which x is shuffled along", "description": "", "code-info": {"name": "numpy.random.Generator.shuffle", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.shape(obj)", "item_id": "numpy.ma.shape", "summary": "Return the shape of an array.\n\nParameters\n\naarray_likeInput array.\n\n\n\nReturns\n\nshapetuple of intsThe elements of the shape tuple give the lengths of the\ncorresponding array dimensions.\n\n\n\n\n\nSee also\nalen\n\nndarray.shapeEquivalent array method.\n\n\n\nExamples\n&gt;&gt;&gt; np.shape(np.eye(3))\n(3, 3)\n&gt;&gt;&gt; np.shape([[1, 2]])\n(1, 2)\n&gt;&gt;&gt; np.shape([0])\n(1,)\n&gt;&gt;&gt; np.shape(0)\n()\n\n\n&gt;&gt;&gt; a = np.array([(1, 2), (3, 4)], dtype=[('x', 'i4'), ('y', 'i4')])\n&gt;&gt;&gt; np.shape(a)\n(2,)\n&gt;&gt;&gt; a.shape\n(2,)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.shape", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.shape(a)", "item_id": "numpy.shape", "summary": "Return the shape of an array.\n\nParameters\n\naarray_likeInput array.\n\n\n\nReturns\n\nshapetuple of intsThe elements of the shape tuple give the lengths of the\ncorresponding array dimensions.\n\n\n\n\n\nSee also\nalen\n\nndarray.shapeEquivalent array method.\n\n\n\nExamples\n&gt;&gt;&gt; np.shape(np.eye(3))\n(3, 3)\n&gt;&gt;&gt; np.shape([[1, 2]])\n(1, 2)\n&gt;&gt;&gt; np.shape([0])\n(1,)\n&gt;&gt;&gt; np.shape(0)\n()\n\n\n&gt;&gt;&gt; a = np.array([(1, 2), (3, 4)], dtype=[('x', 'i4'), ('y', 'i4')])\n&gt;&gt;&gt; np.shape(a)\n(2,)\n&gt;&gt;&gt; a.shape\n(2,)\n\n\n", "description": "", "code-info": {"name": "numpy.shape", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.SFC64(seed=None)", "item_id": "numpy.random.SFC64", "summary": "BitGenerator for Chris Doty-Humphrey\u2019s Small Fast Chaotic PRNG.\n\nParameters\n\nseed{None, int, array_like[ints], SeedSequence}, optionalA seed to initialize the BitGenerator", "description": "", "code-info": {"name": "numpy.random.SFC64", "parameters": [{"name": "seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.setxor1d(ar1, ar2, assume_unique=False)", "item_id": "numpy.setxor1d", "summary": "Find the set exclusive-or of two arrays.\nReturn the sorted, unique values that are in only one (not both) of the\ninput arrays.\n\nParameters\n\nar1, ar2array_likeInput arrays.\n\nassume_uniqueboolIf True, the input arrays are both assumed to be unique, which\ncan speed up the calculation", "description": "", "code-info": {"name": "numpy.setxor1d", "parameters": [{"name": "ar1", "is_optional": false, "type": "others", "description": ""}, {"name": " ar2", "is_optional": false, "type": "others", "description": ""}, {"name": " assume_unique", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.record.setflags()", "item_id": "numpy.record.setflags", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class so as to\nprovide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.setflags", "parameters": []}},
{"code": "numpy.recarray.setflags(write=None, align=None, uic=None)", "item_id": "numpy.recarray.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.recarray.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.setflags(write=None, align=None, uic=None)", "item_id": "numpy.ndarray.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.ndarray.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.setflags(write=None, align=None, uic=None)", "item_id": "numpy.ma.masked_array.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.ma.masked_array.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.setflags(write=None, align=None, uic=None)", "item_id": "numpy.memmap.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.memmap.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.setflags(write=None, align=None, uic=None)", "item_id": "numpy.matrix.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.matrix.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.setflags()", "item_id": "numpy.ma.MaskType.setflags", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class so as to\nprovide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.setflags", "parameters": []}},
{"code": "numpy.generic.setflags()", "item_id": "numpy.generic.setflags", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class so as to\nprovide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.setflags", "parameters": []}},
{"code": "numpy.chararray.setflags(write=None, align=None, uic=None)", "item_id": "numpy.chararray.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.chararray.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.setflags(write=None, align=None, uic=None)", "item_id": "numpy.char.chararray.setflags", "summary": "Set array flags WRITEABLE, ALIGNED, (WRITEBACKIFCOPY and UPDATEIFCOPY),\nrespectively.\nThese Boolean-valued flags affect how numpy interprets the memory\narea used by a (see Notes below)", "description": "", "code-info": {"name": "numpy.char.chararray.setflags", "parameters": [{"name": "write", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " align", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " uic", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.setfield()", "item_id": "numpy.record.setfield", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.setfield", "parameters": []}},
{"code": "numpy.recarray.setfield(val, dtype, offset=0)", "item_id": "numpy.recarray.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.matrix.setfield(val, dtype, offset=0)", "item_id": "numpy.matrix.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ndarray.setfield(val, dtype, offset=0)", "item_id": "numpy.ndarray.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.memmap.setfield(val, dtype, offset=0)", "item_id": "numpy.memmap.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.MaskType.setfield()", "item_id": "numpy.ma.MaskType.setfield", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.setfield", "parameters": []}},
{"code": "numpy.ma.masked_array.setfield(val, dtype, offset=0)", "item_id": "numpy.ma.masked_array.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.generic.setfield()", "item_id": "numpy.generic.setfield", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.setfield", "parameters": []}},
{"code": "numpy.chararray.setfield(val, dtype, offset=0)", "item_id": "numpy.chararray.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.char.chararray.setfield(val, dtype, offset=0)", "item_id": "numpy.char.chararray.setfield", "summary": "Put a value into a specified place in a field defined by a data-type.\nPlace val into a\u2019s field defined by dtype and beginning offset\nbytes into the field.\n\nParameters\n\nvalobjectValue to be placed in field.\n\ndtypedtype objectData-type of the field in which to place val.\n\noffsetint, optionalThe number of bytes into the field at which to place val.\n\n\n\nReturns\n\nNone\n\n\n\n\nSee also\ngetfield\n\nExamples\n&gt;&gt;&gt; x = np.eye(3)\n&gt;&gt;&gt; x.getfield(np.float64)\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n&gt;&gt;&gt; x.setfield(3, np.int32)\n&gt;&gt;&gt; x.getfield(np.int32)\narray([[3, 3, 3],\n       [3, 3, 3],\n       [3, 3, 3]], dtype=int32)\n&gt;&gt;&gt; x\narray([[1.0e+000, 1.5e-323, 1.5e-323],\n       [1.5e-323, 1.0e+000, 1.5e-323],\n       [1.5e-323, 1.5e-323, 1.0e+000]])\n&gt;&gt;&gt; x.setfield(np.eye(3), np.int32)\n&gt;&gt;&gt; x\narray([[1.,  0.,  0.],\n       [0.,  1.,  0.],\n       [0.,  0.,  1.]])\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.setfield", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.seterrobj(errobj)", "item_id": "numpy.seterrobj", "summary": "Set the object that defines floating-point error handling.\nThe error object contains all information that defines the error handling\nbehavior in NumPy", "description": "", "code-info": {"name": "numpy.seterrobj", "parameters": [{"name": "errobj", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.seterrcall(func)", "item_id": "numpy.seterrcall", "summary": "Set the floating-point error callback function or log object.\nThere are two ways to capture floating-point error messages", "description": "", "code-info": {"name": "numpy.seterrcall", "parameters": [{"name": "func", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.seterr(all=None, divide=None, over=None, under=None, invalid=None)", "item_id": "numpy.seterr", "summary": "Set how floating-point errors are handled.\nNote that operations on integer scalar types (such as int16) are\nhandled like floating point, and are affected by these settings.\n\nParameters\n\nall{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optionalSet treatment for all types of floating-point errors at once:\n\nignore: Take no action when the exception occurs.\nwarn: Print a RuntimeWarning (via the Python warnings module).\nraise: Raise a FloatingPointError.\ncall: Call a function specified using the seterrcall function.\nprint: Print a warning directly to stdout.\nlog: Record error in a Log object specified by seterrcall.\n\nThe default is not to change the current behavior.\n\ndivide{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optionalTreatment for division by zero.\n\nover{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optionalTreatment for floating-point overflow.\n\nunder{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optionalTreatment for floating-point underflow.\n\ninvalid{\u2018ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019}, optionalTreatment for invalid floating-point operation.\n\n\n\nReturns\n\nold_settingsdictDictionary containing the old settings.\n\n\n\n\n\nSee also\n\nseterrcallSet a callback function for the \u2018call\u2019 mode.\n\n\ngeterr, geterrcall, errstate\n\nNotes\nThe floating-point exceptions are defined in the IEEE 754 standard [1]:\n\nDivision by zero: infinite result obtained from finite numbers.\nOverflow: result too large to be expressed.\nUnderflow: result so close to zero that some precision\nwas lost.\nInvalid operation: result is not an expressible number, typically\nindicates that a NaN was produced.\n\n\n1\nhttps://en.wikipedia.org/wiki/IEEE_754\n\n\nExamples\n&gt;&gt;&gt; old_settings = np.seterr(all='ignore')  #seterr to known value\n&gt;&gt;&gt; np.seterr(over='raise')\n{'divide': 'ignore', 'over': 'ignore', 'under': 'ignore', 'invalid': 'ignore'}\n&gt;&gt;&gt; np.seterr(**old_settings)  # reset to default\n{'divide': 'ignore', 'over': 'raise', 'under': 'ignore', 'invalid': 'ignore'}\n\n\n&gt;&gt;&gt; np.int16(32000) * np.int16(3)\n30464\n&gt;&gt;&gt; old_settings = np.seterr(all='warn', over='raise')\n&gt;&gt;&gt; np.int16(32000) * np.int16(3)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFloatingPointError: overflow encountered in short_scalars\n\n\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; old_settings = np.seterr(all='print')\n&gt;&gt;&gt; OrderedDict(np.geterr())\nOrderedDict([('divide', 'print'), ('over', 'print'), ('under', 'print'), ('invalid', 'print')])\n&gt;&gt;&gt; np.int16(32000) * np.int16(3)\n30464\n\n\n", "description": "", "code-info": {"name": "numpy.seterr", "parameters": [{"name": "all", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " divide", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " over", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " under", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " invalid", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.setbufsize(size)", "item_id": "numpy.setbufsize", "summary": "Set the size of the buffer used in ufuncs.\n\nParameters\n\nsizeintSize of buffer.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.setbufsize", "parameters": [{"name": "size", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.dec.setastest(tf=True)", "item_id": "numpy.testing.dec.setastest", "summary": "Signals to nose that this function is or is not a test.\n\nParameters\n\ntfboolIf True, specifies that the decorated callable is a test.\nIf False, specifies that the decorated callable is not a test.\nDefault is True.\n\n\n\n\nNotes\nThis decorator can\u2019t use the nose namespace, because it can be\ncalled from a non-test module", "description": "", "code-info": {"name": "numpy.testing.dec.setastest", "parameters": [{"name": "tf", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.distutils.log.set_verbosity(v, force=False)", "item_id": "numpy.distutils.log.set_verbosity", "summary": "", "description": "", "code-info": {"name": "numpy.distutils.log.set_verbosity", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " force", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.setdiff1d(ar1, ar2, assume_unique=False)", "item_id": "numpy.setdiff1d", "summary": "Find the set difference of two arrays.\nReturn the unique values in ar1 that are not in ar2.\n\nParameters\n\nar1array_likeInput array.\n\nar2array_likeInput comparison array.\n\nassume_uniqueboolIf True, the input arrays are both assumed to be unique, which\ncan speed up the calculation", "description": "", "code-info": {"name": "numpy.setdiff1d", "parameters": [{"name": "ar1", "is_optional": false, "type": "others", "description": ""}, {"name": " ar2", "is_optional": false, "type": "others", "description": ""}, {"name": " assume_unique", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.random.RandomState.set_state(state)", "item_id": "numpy.random.RandomState.set_state", "summary": "Set the internal state of the generator from a tuple.\nFor use if one has reason to manually (re-)set the internal state of\nthe bit generator used by the RandomState instance", "description": "", "code-info": {"name": "numpy.random.RandomState.set_state", "parameters": [{"name": "state", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.set_string_function(f, repr=True)", "item_id": "numpy.set_string_function", "summary": "Set a Python function to be used when pretty printing arrays.\n\nParameters\n\nffunction or NoneFunction to be used to pretty print arrays", "description": "", "code-info": {"name": "numpy.set_string_function", "parameters": [{"name": "f", "is_optional": false, "type": "others", "description": ""}, {"name": " repr", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.random.set_state(state)", "item_id": "numpy.random.set_state", "summary": "Set the internal state of the generator from a tuple.\nFor use if one has reason to manually (re-)set the internal state of\nthe bit generator used by the RandomState instance", "description": "", "code-info": {"name": "numpy.random.set_state", "parameters": [{"name": "state", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, **kwarg)", "item_id": "numpy.set_printoptions", "summary": "Set printing options.\nThese options determine the way floating point numbers, arrays and\nother NumPy objects are displayed.\n\nParameters\n\nprecisionint or None, optionalNumber of digits of precision for floating point output (default 8).\nMay be None if floatmode is not fixed, to print as many digits as\nnecessary to uniquely specify the value.\n\nthresholdint, optionalTotal number of array elements which trigger summarization\nrather than full repr (default 1000).\nTo always use the full repr without summarization, pass sys.maxsize.\n\nedgeitemsint, optionalNumber of array items in summary at beginning and end of\neach dimension (default 3).\n\nlinewidthint, optionalThe number of characters per line for the purpose of inserting\nline breaks (default 75).\n\nsuppressbool, optionalIf True, always print floating point numbers using fixed point\nnotation, in which case numbers equal to zero in the current precision\nwill print as zero", "description": "", "code-info": {"name": "numpy.set_printoptions", "parameters": [{"name": "precision", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " threshold", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " edgeitems", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " linewidth", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " suppress", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " nanstr", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " infstr", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " formatter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " sign", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " floatmode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwarg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.set_fill_value(self, value=None)", "item_id": "numpy.ma.MaskedArray.set_fill_value", "summary": "", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.set_fill_value", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.set_fill_value(self, value=None)", "item_id": "numpy.ma.masked_array.set_fill_value", "summary": "", "description": "", "code-info": {"name": "numpy.ma.masked_array.set_fill_value", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.set_fill_value(a, fill_value)", "item_id": "numpy.ma.set_fill_value", "summary": "Set the filling value of a, if a is a masked array.\nThis function changes the fill value of the masked array a in place.\nIf a is not a masked array, the function returns silently, without\ndoing anything.\n\nParameters\n\naarray_likeInput array.\n\nfill_valuedtypeFilling value", "description": "", "code-info": {"name": "numpy.ma.set_fill_value", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.select(condlist, choicelist, default=0)", "item_id": "numpy.select", "summary": "Return an array drawn from elements in choicelist, depending on conditions.\n\nParameters\n\ncondlistlist of bool ndarraysThe list of conditions which determine from which array in choicelist\nthe output elements are taken", "description": "", "code-info": {"name": "numpy.select", "parameters": [{"name": "condlist", "is_optional": false, "type": "others", "description": ""}, {"name": " choicelist", "is_optional": false, "type": "others", "description": ""}, {"name": " default", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.random.SeedSequence(entropy=None, *, spawn_key=()", "item_id": "numpy.random.SeedSequence", "summary": "SeedSequence mixes sources of entropy in a reproducible way to set the\ninitial state for independent and very probably non-overlapping\nBitGenerators.\nOnce the SeedSequence is instantiated, you can call the generate_state\nmethod to get an appropriately sized seed", "description": "", "code-info": {"name": "numpy.random.SeedSequence", "parameters": [{"name": "entropy", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " spawn_key", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.seed(self, seed=None)", "item_id": "numpy.random.RandomState.seed", "summary": "Reseed a legacy MT19937 BitGenerator\nNotes\nThis is a convenience, legacy function.\nThe best practice is to not reseed a BitGenerator, rather to\nrecreate a new one", "description": "", "code-info": {"name": "numpy.random.RandomState.seed", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.seed(self, seed=None)", "item_id": "numpy.random.seed", "summary": "Reseed a legacy MT19937 BitGenerator\nNotes\nThis is a convenience, legacy function.\nThe best practice is to not reseed a BitGenerator, rather to\nrecreate a new one", "description": "", "code-info": {"name": "numpy.random.seed", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.memmap.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.matrix.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.searchsorted()", "item_id": "numpy.ma.MaskType.searchsorted", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.searchsorted", "parameters": []}},
{"code": "numpy.ma.MaskedArray.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.ma.MaskedArray.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.ma.masked_array.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.searchsorted()", "item_id": "numpy.generic.searchsorted", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.searchsorted", "parameters": []}},
{"code": "numpy.chararray.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.chararray.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.searchsorted(v, side='left', sorter=None)", "item_id": "numpy.char.chararray.searchsorted", "summary": "Find indices where elements of v should be inserted in a to maintain order.\nFor full documentation, see numpy.searchsorted\n\nSee also\n\nnumpy.searchsortedequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.searchsorted", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.searchsorted(a, v, side='left', sorter=None)", "item_id": "numpy.searchsorted", "summary": "Find indices where elements should be inserted to maintain order.\nFind the indices into a sorted array a such that, if the\ncorresponding elements in v were inserted before the indices, the\norder of a would be preserved.\nAssuming that a is sorted:\n\n\n\n\n\n\nside\nreturned index i satisfies\n\n\n\nleft\na[i-1] &lt; v &lt;= a[i]\n\nright\na[i-1] &lt;= v &lt; a[i]\n\n\n\n\nParameters\n\na1-D array_likeInput array", "description": "", "code-info": {"name": "numpy.searchsorted", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " v", "is_optional": false, "type": "others", "description": ""}, {"name": " side", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": " sorter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.sctype2char(sctype)", "item_id": "numpy.sctype2char", "summary": "Return the string representation of a scalar dtype.\n\nParameters\n\nsctypescalar dtype or objectIf a scalar dtype, the corresponding string character is\nreturned", "description": "", "code-info": {"name": "numpy.sctype2char", "parameters": [{"name": "sctype", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.savez_compressed(file, *args, **kwds)", "item_id": "numpy.savez_compressed", "summary": "Save several arrays into a single file in compressed .npz format.\nIf keyword arguments are given, then filenames are taken from the keywords.\nIf arguments are passed in with no keywords, then stored filenames are\narr_0, arr_1, etc.\n\nParameters\n\nfilestr or fileEither the filename (string) or an open file (file-like object)\nwhere the data will be saved", "description": "", "code-info": {"name": "numpy.savez_compressed", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwds", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.savez(file, *args, **kwds)", "item_id": "numpy.savez", "summary": "Save several arrays into a single file in uncompressed .npz format.\nIf arguments are passed in with no keywords, the corresponding variable\nnames, in the .npz file, are \u2018arr_0\u2019, \u2018arr_1\u2019, etc", "description": "", "code-info": {"name": "numpy.savez", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwds", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='n', header='', footer='', comments='# ', encoding=None)", "item_id": "numpy.savetxt", "summary": "Save an array to a text file.\n\nParameters\n\nfnamefilename or file handleIf the filename ends in .gz, the file is automatically saved in\ncompressed gzip format", "description": "", "code-info": {"name": "numpy.savetxt", "parameters": [{"name": "fname", "is_optional": false, "type": "others", "description": ""}, {"name": " X", "is_optional": false, "type": "others", "description": ""}, {"name": " fmt", "is_optional": true, "type": "string", "default_value": "'%.18e'", "description": ""}, {"name": " delimiter", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}, {"name": " newline", "is_optional": true, "type": "string", "default_value": "'n'", "description": ""}, {"name": " header", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " footer", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " comments", "is_optional": true, "type": "string", "default_value": "'# '", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.sample()", "item_id": "numpy.random.sample", "summary": "This is an alias of random_sample", "description": "", "code-info": {"name": "numpy.random.sample", "parameters": []}},
{"code": "numpy.save(file, arr, allow_pickle=True, fix_imports=True)", "item_id": "numpy.save", "summary": "Save an array to a binary file in NumPy .npy format.\n\nParameters\n\nfilefile, str, or pathlib.PathFile or filename to which the data is saved", "description": "", "code-info": {"name": "numpy.save", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}, {"name": " arr", "is_optional": false, "type": "others", "description": ""}, {"name": " allow_pickle", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fix_imports", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.rundocs(filename=None, raise_on_error=True)", "item_id": "numpy.testing.rundocs", "summary": "Run doctests found in the given file.\nBy default rundocs raises an AssertionError on failure.\n\nParameters\n\nfilenamestrThe path to the file for which the doctests are run.\n\nraise_on_errorboolWhether to raise an AssertionError when a doctest fails", "description": "", "code-info": {"name": "numpy.testing.rundocs", "parameters": [{"name": "filename", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " raise_on_error", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.run_module_suite(file_to_run=None, argv=None)", "item_id": "numpy.testing.run_module_suite", "summary": "Run a test module.\nEquivalent to calling $ nosetests &lt;argv&gt; &lt;file_to_run&gt; from\nthe command line\n\nParameters\n\nfile_to_runstr, optionalPath to test module, or None.\nBy default, run the module from which this function is called.\n\nargvlist of stringsArguments to be passed to the nose test runner", "description": "", "code-info": {"name": "numpy.testing.run_module_suite", "parameters": [{"name": "file_to_run", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " argv", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.rstrip(self, chars=None)", "item_id": "numpy.char.chararray.rstrip", "summary": "For each element in self, return a copy with the trailing\ncharacters removed.\n\nSee also\nchar.rstrip\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.rstrip", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.rstrip(a, chars=None)", "item_id": "numpy.char.rstrip", "summary": "For each element in a, return a copy with the trailing\ncharacters removed.\nCalls str.rstrip element-wise.\n\nParameters\n\naarray-like of str or unicode\ncharsstr or unicode, optionalThe chars argument is a string specifying the set of\ncharacters to be removed", "description": "", "code-info": {"name": "numpy.char.rstrip", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.rstrip(self, chars=None)", "item_id": "numpy.chararray.rstrip", "summary": "For each element in self, return a copy with the trailing\ncharacters removed.\n\nSee also\nchar.rstrip\n\n", "description": "", "code-info": {"name": "numpy.chararray.rstrip", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.rsplit(self, sep=None, maxsplit=None)", "item_id": "numpy.char.chararray.rsplit", "summary": "For each element in self, return a list of the words in\nthe string, using sep as the delimiter string.\n\nSee also\nchar.rsplit\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.rsplit", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxsplit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.rsplit(self, sep=None, maxsplit=None)", "item_id": "numpy.chararray.rsplit", "summary": "For each element in self, return a list of the words in\nthe string, using sep as the delimiter string.\n\nSee also\nchar.rsplit\n\n", "description": "", "code-info": {"name": "numpy.chararray.rsplit", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxsplit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.rsplit(a, sep=None, maxsplit=None)", "item_id": "numpy.char.rsplit", "summary": "For each element in a, return a list of the words in the\nstring, using sep as the delimiter string.\nCalls str.rsplit element-wise.\nExcept for splitting from the right, rsplit\nbehaves like split.\n\nParameters\n\naarray_like of str or unicode\nsepstr or unicode, optionalIf sep is not specified or None, any whitespace string\nis a separator.\n\nmaxsplitint, optionalIf maxsplit is given, at most maxsplit splits are done,\nthe rightmost ones.\n\n\n\nReturns\n\noutndarrayArray of list objects\n\n\n\n\n\nSee also\nstr.rsplit, split\n\n", "description": "", "code-info": {"name": "numpy.char.rsplit", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxsplit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.rpartition(self, sep)", "item_id": "numpy.chararray.rpartition", "summary": "Partition each element in self around sep.\n\nSee also\nrpartition\n\n", "description": "", "code-info": {"name": "numpy.chararray.rpartition", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.rpartition(self, sep)", "item_id": "numpy.char.chararray.rpartition", "summary": "Partition each element in self around sep.\n\nSee also\nrpartition\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.rpartition", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.round()", "item_id": "numpy.record.round", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.round", "parameters": []}},
{"code": "numpy.char.rpartition(a, sep)", "item_id": "numpy.char.rpartition", "summary": "Partition (split) each element around the right-most separator.\nCalls str.rpartition element-wise.\nFor each element in a, split the element as the last\noccurrence of sep, and return 3 strings containing the part\nbefore the separator, the separator itself, and the part after\nthe separator", "description": "", "code-info": {"name": "numpy.char.rpartition", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.row_stack(*args, **kwargs)", "item_id": "numpy.ma.row_stack", "summary": "\nStack arrays in sequence vertically (row wise).\nThis is equivalent to concatenation along the first axis after 1-D arrays\nof shape (N,) have been reshaped to (1,N)", "description": "", "code-info": {"name": "numpy.ma.row_stack", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.round(decimals=0, out=None)", "item_id": "numpy.ndarray.round", "summary": "Return a with each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.round", "parameters": [{"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.round_(a, decimals=0, out=None)", "item_id": "numpy.round_", "summary": "Round an array to the given number of decimals.\n\nSee also\n\naroundequivalent function; see for details.\n\n\n\n", "description": "", "code-info": {"name": "numpy.round_", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.round(decimals=0, out=None)", "item_id": "numpy.recarray.round", "summary": "Return a with each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.round", "parameters": [{"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.round(decimals=0, out=None)", "item_id": "numpy.memmap.round", "summary": "Return a with each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.round", "parameters": [{"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.round()", "item_id": "numpy.ma.MaskType.round", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.round", "parameters": []}},
{"code": "numpy.ma.MaskedArray.round(self, decimals=0, out=None)", "item_id": "numpy.ma.MaskedArray.round", "summary": "Return each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.ndarray.aroundcorresponding function for ndarrays\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.round", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.round(self, decimals=0, out=None)", "item_id": "numpy.ma.masked_array.round", "summary": "Return each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.ndarray.aroundcorresponding function for ndarrays\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.round", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.round(decimals=0, out=None)", "item_id": "numpy.matrix.round", "summary": "Return a with each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.round", "parameters": [{"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.round()", "item_id": "numpy.generic.round", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.round", "parameters": []}},
{"code": "numpy.chararray.round(decimals=0, out=None)", "item_id": "numpy.chararray.round", "summary": "Return a with each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.round", "parameters": [{"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.round(decimals=0, out=None)", "item_id": "numpy.char.chararray.round", "summary": "Return a with each element rounded to the given number of decimals.\nRefer to numpy.around for full documentation.\n\nSee also\n\nnumpy.aroundequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.round", "parameters": [{"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.round(a, decimals=0, out=None)", "item_id": "numpy.ma.round", "summary": "Return a copy of a, rounded to \u2018decimals\u2019 places.\nWhen \u2018decimals\u2019 is negative, it specifies the number of positions\nto the left of the decimal point", "description": "", "code-info": {"name": "numpy.ma.round", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.rot90(m, k=1, axes=(0, 1)", "item_id": "numpy.rot90", "summary": "Rotate an array by 90 degrees in the plane specified by axes.\nRotation direction is from the first towards the second axis.\n\nParameters\n\nmarray_likeArray of two or more dimensions.\n\nkintegerNumber of times the array is rotated by 90 degrees.\n\naxes: (2,) array_likeThe array is rotated in the plane defined by the axes.\nAxes must be different.\n\nNew in version 1.12.0.\n\n\n\n\nReturns\n\nyndarrayA rotated view of m.\n\n\n\n\n\nSee also\n\nflipReverse the order of elements in an array along the given axis.\n\nfliplrFlip an array horizontally.\n\nflipudFlip an array vertically.\n\n\n\nNotes\nrot90(m, k=1, axes=(1,0)) is the reverse of rot90(m, k=1, axes=(0,1))\nrot90(m, k=1, axes=(1,0)) is equivalent to rot90(m, k=-1, axes=(0,1))\nExamples\n&gt;&gt;&gt; m = np.array([[1,2],[3,4]], int)\n&gt;&gt;&gt; m\narray([[1, 2],\n       [3, 4]])\n&gt;&gt;&gt; np.rot90(m)\narray([[2, 4],\n       [1, 3]])\n&gt;&gt;&gt; np.rot90(m, 2)\narray([[4, 3],\n       [2, 1]])\n&gt;&gt;&gt; m = np.arange(8).reshape((2,2,2))\n&gt;&gt;&gt; np.rot90(m, 1, (1,2))\narray([[[1, 3],\n        [0, 2]],\n       [[5, 7],\n        [4, 6]]])\n\n\n", "description": "", "code-info": {"name": "numpy.rot90", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.roots(self)", "item_id": "numpy.polynomial.polynomial.Polynomial.roots", "summary": "Return the roots of the series polynomial.\nCompute the roots for the series", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.roots", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.roots(self)", "item_id": "numpy.polynomial.legendre.Legendre.roots", "summary": "Return the roots of the series polynomial.\nCompute the roots for the series", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.roots", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.roots(self)", "item_id": "numpy.polynomial.laguerre.Laguerre.roots", "summary": "Return the roots of the series polynomial.\nCompute the roots for the series", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.roots", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.roots(self)", "item_id": "numpy.polynomial.hermite_e.HermiteE.roots", "summary": "Return the roots of the series polynomial.\nCompute the roots for the series", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.roots", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.roots(self)", "item_id": "numpy.polynomial.hermite.Hermite.roots", "summary": "Return the roots of the series polynomial.\nCompute the roots for the series", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.roots", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.rollaxis(a, axis, start=0)", "item_id": "numpy.rollaxis", "summary": "Roll the specified axis backwards, until it lies in a given position.\nThis function continues to be supported for backward compatibility, but you\nshould prefer moveaxis", "description": "", "code-info": {"name": "numpy.rollaxis", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.chararray.rjust(self, width, fillchar=' ')", "item_id": "numpy.chararray.rjust", "summary": "Return an array with the elements of self\nright-justified in a string of length width.\n\nSee also\nchar.rjust\n\n", "description": "", "code-info": {"name": "numpy.chararray.rjust", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.roots(p)", "item_id": "numpy.roots", "summary": "Return the roots of a polynomial with coefficients given in p.\nThe values in the rank-1 array p are coefficients of a polynomial.\nIf the length of p is n+1 then the polynomial is described by:\np[0] * x**n + p[1] * x**(n-1) + ..", "description": "", "code-info": {"name": "numpy.roots", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.roots(self)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.roots", "summary": "Return the roots of the series polynomial.\nCompute the roots for the series", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.roots", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.roll(a, shift, axis=None)", "item_id": "numpy.roll", "summary": "Roll array elements along a given axis.\nElements that roll beyond the last position are re-introduced at\nthe first.\n\nParameters\n\naarray_likeInput array.\n\nshiftint or tuple of intsThe number of places by which elements are shifted", "description": "", "code-info": {"name": "numpy.roll", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " shift", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.rjust(self, width, fillchar=' ')", "item_id": "numpy.char.chararray.rjust", "summary": "Return an array with the elements of self\nright-justified in a string of length width.\n\nSee also\nchar.rjust\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.rjust", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.rint(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.rint", "summary": "Round elements of the array to the nearest integer.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.rint", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.rjust(a, width, fillchar=' ')", "item_id": "numpy.char.rjust", "summary": "Return an array with the elements of a right-justified in a\nstring of length width.\nCalls str.rjust element-wise.\n\nParameters\n\naarray_like of str or unicode\nwidthintThe length of the resulting strings\n\nfillcharstr or unicode, optionalThe character to use for padding\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.rjust\n\n", "description": "", "code-info": {"name": "numpy.char.rjust", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.char.rindex(a, sub, start=0, end=None)", "item_id": "numpy.char.rindex", "summary": "Like rfind, but raises ValueError when the substring sub is\nnot found.\nCalls str.rindex element-wise.\n\nParameters\n\naarray-like of str or unicode\nsubstr or unicode\nstart, endint, optional\n\n\nReturns\n\noutndarrayOutput array of ints.\n\n\n\n\n\nSee also\nrfind, str.rindex\n\n", "description": "", "code-info": {"name": "numpy.char.rindex", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.right_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.right_shift", "summary": "Shift the bits of an integer to the right.\nBits are shifted to the right x2", "description": "", "code-info": {"name": "numpy.right_shift", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.rindex(self, sub, start=0, end=None)", "item_id": "numpy.chararray.rindex", "summary": "Like rfind, but raises ValueError when the substring sub is\nnot found.\n\nSee also\nchar.rindex\n\n", "description": "", "code-info": {"name": "numpy.chararray.rindex", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.rfind(a, sub, start=0, end=None)", "item_id": "numpy.char.rfind", "summary": "For each element in a, return the highest index in the string\nwhere substring sub is found, such that sub is contained\nwithin [start, end].\nCalls str.rfind element-wise.\n\nParameters\n\naarray-like of str or unicode\nsubstr or unicode\nstart, endint, optionalOptional arguments start and end are interpreted as in\nslice notation.\n\n\n\nReturns\n\noutndarrayOutput array of ints", "description": "", "code-info": {"name": "numpy.char.rfind", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.rindex(self, sub, start=0, end=None)", "item_id": "numpy.char.chararray.rindex", "summary": "Like rfind, but raises ValueError when the substring sub is\nnot found.\n\nSee also\nchar.rindex\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.rindex", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.rfind(self, sub, start=0, end=None)", "item_id": "numpy.chararray.rfind", "summary": "For each element in self, return the highest index in the string\nwhere substring sub is found, such that sub is contained\nwithin [start, end].\n\nSee also\nchar.rfind\n\n", "description": "", "code-info": {"name": "numpy.chararray.rfind", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.rfftn(a, s=None, axes=None, norm=None)", "item_id": "numpy.fft.rfftn", "summary": "Compute the N-dimensional discrete Fourier Transform for real input.\nThis function computes the N-dimensional discrete Fourier Transform over\nany number of axes in an M-dimensional real array by means of the Fast\nFourier Transform (FFT)", "description": "", "code-info": {"name": "numpy.fft.rfftn", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.resize()", "item_id": "numpy.record.resize", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.resize", "parameters": []}},
{"code": "numpy.fft.rfftfreq(n, d=1.0)", "item_id": "numpy.fft.rfftfreq", "summary": "Return the Discrete Fourier Transform sample frequencies\n(for usage with rfft, irfft).\nThe returned float array f contains the frequency bin centers in cycles\nper unit of the sample spacing (with zero at the start)", "description": "", "code-info": {"name": "numpy.fft.rfftfreq", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " d", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}]}},
{"code": "numpy.fft.rfft2(a, s=None, axes=(-2, -1)", "item_id": "numpy.fft.rfft2", "summary": "Compute the 2-dimensional FFT of a real array.\n\nParameters\n\naarrayInput array, taken to be real.\n\nssequence of ints, optionalShape of the FFT.\n\naxessequence of ints, optionalAxes over which to compute the FFT.\n\nnorm{None, \u201cortho\u201d}, optional\nNew in version 1.10.0.\n\nNormalization mode (see numpy.fft)", "description": "", "code-info": {"name": "numpy.fft.rfft2", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.resize(new_shape, refcheck=True)", "item_id": "numpy.recarray.resize", "summary": "Change shape and size of array in-place.\n\nParameters\n\nnew_shapetuple of ints, or n intsShape of resized array.\n\nrefcheckbool, optionalIf False, reference count will not be checked", "description": "", "code-info": {"name": "numpy.recarray.resize", "parameters": [{"name": "new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.fft.rfft(a, n=None, axis=-1, norm=None)", "item_id": "numpy.fft.rfft", "summary": "Compute the one-dimensional discrete Fourier Transform for real input.\nThis function computes the one-dimensional n-point discrete Fourier\nTransform (DFT) of a real-valued array by means of an efficient algorithm\ncalled the Fast Fourier Transform (FFT).\n\nParameters\n\naarray_likeInput array\n\nnint, optionalNumber of points along transformation axis in the input to use.\nIf n is smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros", "description": "", "code-info": {"name": "numpy.fft.rfft", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.resize(new_shape, refcheck=True)", "item_id": "numpy.ndarray.resize", "summary": "Change shape and size of array in-place.\n\nParameters\n\nnew_shapetuple of ints, or n intsShape of resized array.\n\nrefcheckbool, optionalIf False, reference count will not be checked", "description": "", "code-info": {"name": "numpy.ndarray.resize", "parameters": [{"name": "new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.result_type(*arrays_and_dtypes)", "item_id": "numpy.result_type", "summary": "Returns the type that results from applying the NumPy\ntype promotion rules to the arguments.\nType promotion in NumPy works similarly to the rules in languages\nlike C++, with some slight differences", "description": "", "code-info": {"name": "numpy.result_type", "parameters": [{"name": "*arrays_and_dtypes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.resize(new_shape, refcheck=True)", "item_id": "numpy.memmap.resize", "summary": "Change shape and size of array in-place.\n\nParameters\n\nnew_shapetuple of ints, or n intsShape of resized array.\n\nrefcheckbool, optionalIf False, reference count will not be checked", "description": "", "code-info": {"name": "numpy.memmap.resize", "parameters": [{"name": "new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.matrix.resize(new_shape, refcheck=True)", "item_id": "numpy.matrix.resize", "summary": "Change shape and size of array in-place.\n\nParameters\n\nnew_shapetuple of ints, or n intsShape of resized array.\n\nrefcheckbool, optionalIf False, reference count will not be checked", "description": "", "code-info": {"name": "numpy.matrix.resize", "parameters": [{"name": "new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.MaskType.resize()", "item_id": "numpy.ma.MaskType.resize", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.resize", "parameters": []}},
{"code": "numpy.ma.MaskedArray.resize(self, newshape, refcheck=True, order=False)", "item_id": "numpy.ma.MaskedArray.resize", "summary": "\nWarning\nThis method does nothing, except raise a ValueError exception", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.resize", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " newshape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " order", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.masked_array.resize(self, newshape, refcheck=True, order=False)", "item_id": "numpy.ma.masked_array.resize", "summary": "\nWarning\nThis method does nothing, except raise a ValueError exception", "description": "", "code-info": {"name": "numpy.ma.masked_array.resize", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " newshape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " order", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.generic.resize()", "item_id": "numpy.generic.resize", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.resize", "parameters": []}},
{"code": "numpy.chararray.resize(new_shape, refcheck=True)", "item_id": "numpy.chararray.resize", "summary": "Change shape and size of array in-place.\n\nParameters\n\nnew_shapetuple of ints, or n intsShape of resized array.\n\nrefcheckbool, optionalIf False, reference count will not be checked", "description": "", "code-info": {"name": "numpy.chararray.resize", "parameters": [{"name": "new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.char.chararray.resize(new_shape, refcheck=True)", "item_id": "numpy.char.chararray.resize", "summary": "Change shape and size of array in-place.\n\nParameters\n\nnew_shapetuple of ints, or n intsShape of resized array.\n\nrefcheckbool, optionalIf False, reference count will not be checked", "description": "", "code-info": {"name": "numpy.char.chararray.resize", "parameters": [{"name": "new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " refcheck", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.resize(x, new_shape)", "item_id": "numpy.ma.resize", "summary": "Return a new masked array with the specified size and shape.\nThis is the masked equivalent of the numpy.resize function", "description": "", "code-info": {"name": "numpy.ma.resize", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " new_shape", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.resize(a, new_shape)", "item_id": "numpy.resize", "summary": "Return a new array with the specified shape.\nIf the new array is larger than the original array, then the new\narray is filled with repeated copies of a", "description": "", "code-info": {"name": "numpy.resize", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " new_shape", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.reshape()", "item_id": "numpy.record.reshape", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.reshape", "parameters": []}},
{"code": "numpy.recarray.reshape(shape, order='C')", "item_id": "numpy.recarray.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to numpy.reshape for full documentation.\n\nSee also\n\nnumpy.reshapeequivalent function\n\n\n\nNotes\nUnlike the free function numpy.reshape, this method on ndarray allows\nthe elements of the shape parameter to be passed in as separate arguments.\nFor example, a.reshape(10, 11) is equivalent to\na.reshape((10, 11)).\n", "description": "", "code-info": {"name": "numpy.recarray.reshape", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ndarray.reshape(shape, order='C')", "item_id": "numpy.ndarray.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to numpy.reshape for full documentation.\n\nSee also\n\nnumpy.reshapeequivalent function\n\n\n\nNotes\nUnlike the free function numpy.reshape, this method on ndarray allows\nthe elements of the shape parameter to be passed in as separate arguments.\nFor example, a.reshape(10, 11) is equivalent to\na.reshape((10, 11)).\n", "description": "", "code-info": {"name": "numpy.ndarray.reshape", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.memmap.reshape(shape, order='C')", "item_id": "numpy.memmap.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to numpy.reshape for full documentation.\n\nSee also\n\nnumpy.reshapeequivalent function\n\n\n\nNotes\nUnlike the free function numpy.reshape, this method on ndarray allows\nthe elements of the shape parameter to be passed in as separate arguments.\nFor example, a.reshape(10, 11) is equivalent to\na.reshape((10, 11)).\n", "description": "", "code-info": {"name": "numpy.memmap.reshape", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.matrix.reshape(shape, order='C')", "item_id": "numpy.matrix.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to numpy.reshape for full documentation.\n\nSee also\n\nnumpy.reshapeequivalent function\n\n\n\nNotes\nUnlike the free function numpy.reshape, this method on ndarray allows\nthe elements of the shape parameter to be passed in as separate arguments.\nFor example, a.reshape(10, 11) is equivalent to\na.reshape((10, 11)).\n", "description": "", "code-info": {"name": "numpy.matrix.reshape", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskType.reshape()", "item_id": "numpy.ma.MaskType.reshape", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.reshape", "parameters": []}},
{"code": "numpy.ma.MaskedArray.reshape(self, *s, **kwargs)", "item_id": "numpy.ma.MaskedArray.reshape", "summary": "Give a new shape to the array without changing its data.\nReturns a masked array containing the same data, but with a new shape.\nThe result is a view on the original array; if this is not possible, a\nValueError is raised.\n\nParameters\n\nshapeint or tuple of intsThe new shape should be compatible with the original shape", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.reshape", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " *s", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.reshape(self, *s, **kwargs)", "item_id": "numpy.ma.masked_array.reshape", "summary": "Give a new shape to the array without changing its data.\nReturns a masked array containing the same data, but with a new shape.\nThe result is a view on the original array; if this is not possible, a\nValueError is raised.\n\nParameters\n\nshapeint or tuple of intsThe new shape should be compatible with the original shape", "description": "", "code-info": {"name": "numpy.ma.masked_array.reshape", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " *s", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.reshape()", "item_id": "numpy.generic.reshape", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.reshape", "parameters": []}},
{"code": "numpy.chararray.reshape(shape, order='C')", "item_id": "numpy.chararray.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to numpy.reshape for full documentation.\n\nSee also\n\nnumpy.reshapeequivalent function\n\n\n\nNotes\nUnlike the free function numpy.reshape, this method on ndarray allows\nthe elements of the shape parameter to be passed in as separate arguments.\nFor example, a.reshape(10, 11) is equivalent to\na.reshape((10, 11)).\n", "description": "", "code-info": {"name": "numpy.chararray.reshape", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.char.chararray.reshape(shape, order='C')", "item_id": "numpy.char.chararray.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to numpy.reshape for full documentation.\n\nSee also\n\nnumpy.reshapeequivalent function\n\n\n\nNotes\nUnlike the free function numpy.reshape, this method on ndarray allows\nthe elements of the shape parameter to be passed in as separate arguments.\nFor example, a.reshape(10, 11) is equivalent to\na.reshape((10, 11)).\n", "description": "", "code-info": {"name": "numpy.char.chararray.reshape", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.nditer.reset()", "item_id": "numpy.nditer.reset", "summary": "Reset the iterator to its initial state.\n", "description": "", "code-info": {"name": "numpy.nditer.reset", "parameters": []}},
{"code": "numpy.broadcast.reset()", "item_id": "numpy.broadcast.reset", "summary": "Reset the broadcasted result\u2019s iterator(s).\n\nParameters\n\nNone\n\n\nReturns\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.array([1, 2, 3])\n&gt;&gt;&gt; y = np.array([[4], [5], [6]])\n&gt;&gt;&gt; b = np.broadcast(x, y)\n&gt;&gt;&gt; b.index\n0\n&gt;&gt;&gt; next(b), next(b), next(b)\n((1, 4), (2, 4), (3, 4))\n&gt;&gt;&gt; b.index\n3\n&gt;&gt;&gt; b.reset()\n&gt;&gt;&gt; b.index\n0\n\n\n", "description": "", "code-info": {"name": "numpy.broadcast.reset", "parameters": []}},
{"code": "numpy.ma.reshape(a, new_shape, order='C')", "item_id": "numpy.ma.reshape", "summary": "Returns an array containing the same data with a new shape.\nRefer to MaskedArray.reshape for full documentation.\n\nSee also\n\nMaskedArray.reshapeequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.reshape", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " new_shape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.reshape(a, newshape, order='C')", "item_id": "numpy.reshape", "summary": "Gives a new shape to an array without changing its data.\n\nParameters\n\naarray_likeArray to be reshaped.\n\nnewshapeint or tuple of intsThe new shape should be compatible with the original shape", "description": "", "code-info": {"name": "numpy.reshape", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " newshape", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.require(a, dtype=None, requirements=None)", "item_id": "numpy.require", "summary": "Return an ndarray of the provided type that satisfies requirements.\nThis function is useful to be sure that an array with the correct flags\nis returned for passing to compiled code (perhaps through ctypes).\n\nParameters\n\naarray_likeThe object to be converted to a type-and-requirement-satisfying array.\n\ndtypedata-typeThe required data-type", "description": "", "code-info": {"name": "numpy.require", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " requirements", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.replace(self, old, new, count=None)", "item_id": "numpy.chararray.replace", "summary": "For each element in self, return a copy of the string with all\noccurrences of substring old replaced by new.\n\nSee also\nchar.replace\n\n", "description": "", "code-info": {"name": "numpy.chararray.replace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " old", "is_optional": false, "type": "others", "description": ""}, {"name": " new", "is_optional": false, "type": "others", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.replace(self, old, new, count=None)", "item_id": "numpy.char.chararray.replace", "summary": "For each element in self, return a copy of the string with all\noccurrences of substring old replaced by new.\n\nSee also\nchar.replace\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.replace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " old", "is_optional": false, "type": "others", "description": ""}, {"name": " new", "is_optional": false, "type": "others", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.replace(a, old, new, count=None)", "item_id": "numpy.char.replace", "summary": "For each element in a, return a copy of the string with all\noccurrences of substring old replaced by new.\nCalls str.replace element-wise.\n\nParameters\n\naarray-like of str or unicode\nold, newstr or unicode\ncountint, optionalIf the optional argument count is given, only the first\ncount occurrences are replaced.\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.replace\n\n", "description": "", "code-info": {"name": "numpy.char.replace", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " old", "is_optional": false, "type": "others", "description": ""}, {"name": " new", "is_optional": false, "type": "others", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matlib.repmat(a, m, n)", "item_id": "numpy.matlib.repmat", "summary": "Repeat a 0-D to 2-D array or matrix MxN times.\n\nParameters\n\naarray_likeThe array or matrix to be repeated.\n\nm, nintThe number of times a is repeated along the first and second axes.\n\n\n\nReturns\n\noutndarrayThe result of repeating a.\n\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.matlib\n&gt;&gt;&gt; a0 = np.array(1)\n&gt;&gt;&gt; np.matlib.repmat(a0, 2, 3)\narray([[1, 1, 1],\n       [1, 1, 1]])\n\n\n&gt;&gt;&gt; a1 = np.arange(4)\n&gt;&gt;&gt; np.matlib.repmat(a1, 2, 2)\narray([[0, 1, 2, 3, 0, 1, 2, 3],\n       [0, 1, 2, 3, 0, 1, 2, 3]])\n\n\n&gt;&gt;&gt; a2 = np.asmatrix(np.arange(6).reshape(2, 3))\n&gt;&gt;&gt; np.matlib.repmat(a2, 2, 3)\nmatrix([[0, 1, 2, 0, 1, 2, 0, 1, 2],\n        [3, 4, 5, 3, 4, 5, 3, 4, 5],\n        [0, 1, 2, 0, 1, 2, 0, 1, 2],\n        [3, 4, 5, 3, 4, 5, 3, 4, 5]])\n\n\n", "description": "", "code-info": {"name": "numpy.matlib.repmat", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.repeat()", "item_id": "numpy.record.repeat", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.repeat", "parameters": []}},
{"code": "numpy.recarray.repeat(repeats, axis=None)", "item_id": "numpy.recarray.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.repeat(repeats, axis=None)", "item_id": "numpy.ndarray.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.repeat()", "item_id": "numpy.ma.MaskType.repeat", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.repeat", "parameters": []}},
{"code": "numpy.memmap.repeat(repeats, axis=None)", "item_id": "numpy.memmap.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.repeat(repeats, axis=None)", "item_id": "numpy.matrix.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.repeat(repeats, axis=None)", "item_id": "numpy.ma.masked_array.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.repeat()", "item_id": "numpy.generic.repeat", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.repeat", "parameters": []}},
{"code": "numpy.chararray.repeat(repeats, axis=None)", "item_id": "numpy.chararray.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.repeat(repeats, axis=None)", "item_id": "numpy.char.chararray.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.repeat(repeats, axis=None)", "item_id": "numpy.ma.MaskedArray.repeat", "summary": "Repeat elements of an array.\nRefer to numpy.repeat for full documentation.\n\nSee also\n\nnumpy.repeatequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.repeat", "parameters": [{"name": "repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.repeat(a, repeats, axis=None)", "item_id": "numpy.repeat", "summary": "Repeat elements of an array.\n\nParameters\n\naarray_likeInput array.\n\nrepeatsint or array of intsThe number of repetitions for each element", "description": "", "code-info": {"name": "numpy.repeat", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " repeats", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nditer.remove_multi_index()", "item_id": "numpy.nditer.remove_multi_index", "summary": "When the \u201cmulti_index\u201d flag was specified, this removes it, allowing\nthe internal iteration structure to be optimized further.\n", "description": "", "code-info": {"name": "numpy.nditer.remove_multi_index", "parameters": []}},
{"code": "numpy.remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.remainder", "summary": "Return element-wise remainder of division.\nComputes the remainder complementary to the floor_divide function", "description": "", "code-info": {"name": "numpy.remainder", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.nditer.remove_axis(i)", "item_id": "numpy.nditer.remove_axis", "summary": "Removes axis i from the iterator", "description": "", "code-info": {"name": "numpy.nditer.remove_axis", "parameters": [{"name": "i", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.real_if_close(a, tol=100)", "item_id": "numpy.real_if_close", "summary": "If complex input returns a real array if complex parts are close to zero.\n\u201cClose to zero\u201d is defined as tol * (machine epsilon of the type for\na).\n\nParameters\n\naarray_likeInput array.\n\ntolfloatTolerance in machine epsilons for the complex part of the elements\nin the array.\n\n\n\nReturns\n\noutndarrayIf a is real, the type of a is used for the output", "description": "", "code-info": {"name": "numpy.real_if_close", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "100", "description": ""}]}},
{"code": "numpy.real(val)", "item_id": "numpy.real", "summary": "Return the real part of the complex argument.\n\nParameters\n\nvalarray_likeInput array.\n\n\n\nReturns\n\noutndarray or scalarThe real component of the complex argument", "description": "", "code-info": {"name": "numpy.real", "parameters": [{"name": "val", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.rayleigh(scale=1.0, size=None)", "item_id": "numpy.random.RandomState.rayleigh", "summary": "Draw samples from a Rayleigh distribution.\nThe  and Weibull distributions are generalizations of the\nRayleigh.\n\nNote\nNew code should use the rayleigh method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nscalefloat or array_like of floats, optionalScale, also equals the mode", "description": "", "code-info": {"name": "numpy.random.RandomState.rayleigh", "parameters": [{"name": "scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ravel_multi_index(multi_index, dims, mode='raise', order='C')", "item_id": "numpy.ravel_multi_index", "summary": "Converts a tuple of index arrays into an array of flat\nindices, applying boundary modes to the multi-index.\n\nParameters\n\nmulti_indextuple of array_likeA tuple of integer arrays, one array for each dimension.\n\ndimstuple of intsThe shape of array into which the indices from multi_index apply.\n\nmode{\u2018raise\u2019, \u2018wrap\u2019, \u2018clip\u2019}, optionalSpecifies how out-of-bounds indices are handled", "description": "", "code-info": {"name": "numpy.ravel_multi_index", "parameters": [{"name": "multi_index", "is_optional": false, "type": "others", "description": ""}, {"name": " dims", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.random.Generator.rayleigh(scale=1.0, size=None)", "item_id": "numpy.random.Generator.rayleigh", "summary": "Draw samples from a Rayleigh distribution.\nThe  and Weibull distributions are generalizations of the\nRayleigh.\n\nParameters\n\nscalefloat or array_like of floats, optionalScale, also equals the mode", "description": "", "code-info": {"name": "numpy.random.Generator.rayleigh", "parameters": [{"name": "scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.ravel()", "item_id": "numpy.record.ravel", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.ravel", "parameters": []}},
{"code": "numpy.recarray.ravel([order])", "item_id": "numpy.recarray.ravel", "summary": "Return a flattened array.\nRefer to numpy.ravel for full documentation.\n\nSee also\n\nnumpy.ravelequivalent function\n\nndarray.flata flat iterator on the array.\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.ravel", "parameters": [{"name": "[order]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.rayleigh(scale=1.0, size=None)", "item_id": "numpy.random.rayleigh", "summary": "Draw samples from a Rayleigh distribution.\nThe  and Weibull distributions are generalizations of the\nRayleigh.\n\nNote\nNew code should use the rayleigh method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nscalefloat or array_like of floats, optionalScale, also equals the mode", "description": "", "code-info": {"name": "numpy.random.rayleigh", "parameters": [{"name": "scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.ravel([order])", "item_id": "numpy.ndarray.ravel", "summary": "Return a flattened array.\nRefer to numpy.ravel for full documentation.\n\nSee also\n\nnumpy.ravelequivalent function\n\nndarray.flata flat iterator on the array.\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.ravel", "parameters": [{"name": "[order]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.ravel([order])", "item_id": "numpy.memmap.ravel", "summary": "Return a flattened array.\nRefer to numpy.ravel for full documentation.\n\nSee also\n\nnumpy.ravelequivalent function\n\nndarray.flata flat iterator on the array.\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.ravel", "parameters": [{"name": "[order]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.ravel(self, order='C')", "item_id": "numpy.matrix.ravel", "summary": "Return a flattened matrix.\nRefer to numpy.ravel for more documentation.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalThe elements of m are read using this index order", "description": "", "code-info": {"name": "numpy.matrix.ravel", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskType.ravel()", "item_id": "numpy.ma.MaskType.ravel", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.ravel", "parameters": []}},
{"code": "numpy.ma.MaskedArray.ravel(self, order='C')", "item_id": "numpy.ma.MaskedArray.ravel", "summary": "Returns a 1D version of self, as a view.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalThe elements of a are read using this index order", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.ravel", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.masked_array.ravel(self, order='C')", "item_id": "numpy.ma.masked_array.ravel", "summary": "Returns a 1D version of self, as a view.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalThe elements of a are read using this index order", "description": "", "code-info": {"name": "numpy.ma.masked_array.ravel", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.generic.ravel()", "item_id": "numpy.generic.ravel", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.ravel", "parameters": []}},
{"code": "numpy.chararray.ravel([order])", "item_id": "numpy.chararray.ravel", "summary": "Return a flattened array.\nRefer to numpy.ravel for full documentation.\n\nSee also\n\nnumpy.ravelequivalent function\n\nndarray.flata flat iterator on the array.\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.ravel", "parameters": [{"name": "[order]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ravel(a, order='C')", "item_id": "numpy.ravel", "summary": "Return a contiguous flattened array.\nA 1-D array, containing the elements of the input, is returned", "description": "", "code-info": {"name": "numpy.ravel", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100)", "item_id": "numpy.rate", "summary": "Compute the rate of interest per period.\n\nDeprecated since version 1.18: rate is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nParameters\n\nnperarray_likeNumber of compounding periods\n\npmtarray_likePayment\n\npvarray_likePresent value\n\nfvarray_likeFuture value\n\nwhen{{\u2018begin\u2019, 1}, {\u2018end\u2019, 0}}, {string, int}, optionalWhen payments are due (\u2018begin\u2019 (1) or \u2018end\u2019 (0))\n\nguessNumber, optionalStarting guess for solving the rate of interest, default 0.1\n\ntolNumber, optionalRequired tolerance for the solution, default 1e-6\n\nmaxiterint, optionalMaximum iterations in finding the solution\n\n\n\n\nNotes\nThe rate of interest is computed by iteratively solving the\n(non-linear) equation:\nfv + pv*(1+rate)**nper + pmt*(1+rate*when)/rate * ((1+rate)**nper - 1) = 0\n\n\nfor rate.\nReferences\n\n1\nNumPy Enhancement Proposal (NEP) 32,\nhttps://numpy.org/neps/nep-0032-remove-financial-functions.html\n\n2\nWheeler, D", "description": "", "code-info": {"name": "numpy.rate", "parameters": [{"name": "nper", "is_optional": false, "type": "others", "description": ""}, {"name": " pmt", "is_optional": false, "type": "others", "description": ""}, {"name": " pv", "is_optional": false, "type": "others", "description": ""}, {"name": " fv", "is_optional": false, "type": "others", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}, {"name": " guess", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " tol", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxiter", "is_optional": true, "type": "int", "default_value": "100", "description": ""}]}},
{"code": "numpy.ma.ravel(self, order='C')", "item_id": "numpy.ma.ravel", "summary": "Returns a 1D version of self, as a view.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalThe elements of a are read using this index order", "description": "", "code-info": {"name": "numpy.ma.ravel", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.char.chararray.ravel([order])", "item_id": "numpy.char.chararray.ravel", "summary": "Return a flattened array.\nRefer to numpy.ravel for full documentation.\n\nSee also\n\nnumpy.ravelequivalent function\n\nndarray.flata flat iterator on the array.\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.ravel", "parameters": [{"name": "[order]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.ranf()", "item_id": "numpy.random.ranf", "summary": "This is an alias of random_sample", "description": "", "code-info": {"name": "numpy.random.ranf", "parameters": []}},
{"code": "numpy.random.RandomState(seed=None)", "item_id": "numpy.random.RandomState", "summary": "Container for the slow Mersenne Twister pseudo-random number generator.\nConsider using a different BitGenerator with the Generator container\ninstead.\nRandomState and Generator expose a number of methods for generating\nrandom numbers drawn from a variety of probability distributions", "description": "", "code-info": {"name": "numpy.random.RandomState", "parameters": [{"name": "seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.random_sample(size=None)", "item_id": "numpy.random.RandomState.random_sample", "summary": "Return random floats in the half-open interval [0.0, 1.0).\nResults are from the \u201ccontinuous uniform\u201d distribution over the\nstated interval", "description": "", "code-info": {"name": "numpy.random.RandomState.random_sample", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.random_sample(size=None)", "item_id": "numpy.random.random_sample", "summary": "Return random floats in the half-open interval [0.0, 1.0).\nResults are from the \u201ccontinuous uniform\u201d distribution over the\nstated interval", "description": "", "code-info": {"name": "numpy.random.random_sample", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.BitGenerator.random_raw(self, size=None)", "item_id": "numpy.random.BitGenerator.random_raw", "summary": "Return randoms as generated by the underlying BitGenerator\n\nParameters\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.BitGenerator.random_raw", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.random_integers(low, high=None, size=None)", "item_id": "numpy.random.RandomState.random_integers", "summary": "Random integers of type np.int_ between low and high, inclusive.\nReturn random integers of type np.int_ from the \u201cdiscrete uniform\u201d\ndistribution in the closed interval [low, high]", "description": "", "code-info": {"name": "numpy.random.RandomState.random_integers", "parameters": [{"name": "low", "is_optional": false, "type": "others", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.random_integers(low, high=None, size=None)", "item_id": "numpy.random.random_integers", "summary": "Random integers of type np.int_ between low and high, inclusive.\nReturn random integers of type np.int_ from the \u201cdiscrete uniform\u201d\ndistribution in the closed interval [low, high]", "description": "", "code-info": {"name": "numpy.random.random_integers", "parameters": [{"name": "low", "is_optional": false, "type": "others", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.randn(d0, d1, ..., dn)", "item_id": "numpy.random.RandomState.randn", "summary": "Return a sample (or samples) from the \u201cstandard normal\u201d distribution.\n\nNote\nThis is a convenience function for users porting code from Matlab,\nand wraps standard_normal", "description": "", "code-info": {"name": "numpy.random.RandomState.randn", "parameters": [{"name": "d0", "is_optional": false, "type": "others", "description": ""}, {"name": " d1", "is_optional": false, "type": "others", "description": ""}, {"name": " ...", "is_optional": false, "type": "others", "description": ""}, {"name": " dn", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.random(size=None, dtype=np.float64, out=None)", "item_id": "numpy.random.Generator.random", "summary": "Return random floats in the half-open interval [0.0, 1.0).\nResults are from the \u201ccontinuous uniform\u201d distribution over the\nstated interval", "description": "", "code-info": {"name": "numpy.random.Generator.random", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "np.float64", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.randn(d0, d1, ..., dn)", "item_id": "numpy.random.randn", "summary": "Return a sample (or samples) from the \u201cstandard normal\u201d distribution.\n\nNote\nThis is a convenience function for users porting code from Matlab,\nand wraps standard_normal", "description": "", "code-info": {"name": "numpy.random.randn", "parameters": [{"name": "d0", "is_optional": false, "type": "others", "description": ""}, {"name": " d1", "is_optional": false, "type": "others", "description": ""}, {"name": " ...", "is_optional": false, "type": "others", "description": ""}, {"name": " dn", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.random(size=None)", "item_id": "numpy.random.random", "summary": "Return random floats in the half-open interval [0.0, 1.0)", "description": "", "code-info": {"name": "numpy.random.random", "parameters": [{"name": "size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.linalg.qr(a, mode='reduced')", "item_id": "numpy.linalg.qr", "summary": "Compute the qr factorization of a matrix.\nFactor the matrix a as qr, where q is orthonormal and r is\nupper-triangular.\n\nParameters\n\naarray_like, shape (M, N)Matrix to be factored.\n\nmode{\u2018reduced\u2019, \u2018complete\u2019, \u2018r\u2019, \u2018raw\u2019}, optionalIf K = min(M, N), then\n\n\u2018reduced\u2019  : returns q, r with dimensions (M, K), (K, N) (default)\n\u2018complete\u2019 : returns q, r with dimensions (M, M), (M, N)\n\u2018r\u2019        : returns r only with dimensions (K, N)\n\u2018raw\u2019      : returns h, tau with dimensions (N, M), (K,)\n\nThe options \u2018reduced\u2019, \u2018complete, and \u2018raw\u2019 are new in numpy 1.8,\nsee the notes for more information", "description": "", "code-info": {"name": "numpy.linalg.qr", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'reduced'", "description": ""}]}},
{"code": "numpy.quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)", "item_id": "numpy.quantile", "summary": "Compute the q-th quantile of the data along the specified axis.\n\nNew in version 1.15.0.\n\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\nqarray_like of floatQuantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.\n\naxis{int, tuple of int, None}, optionalAxis or axes along which the quantiles are computed", "description": "", "code-info": {"name": "numpy.quantile", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " q", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " interpolation", "is_optional": true, "type": "string", "default_value": "'linear'", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.product(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.product", "summary": "Return the product of the array elements over the given axis.\nMasked elements are set to 1 internally for computation.\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.ndarray.prodcorresponding function for ndarrays\n\nnumpy.prodequivalent function\n\n\n\nNotes\nArithmetic is modular when using integer types, and no error is raised\non overflow.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.product", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.masked_array.product(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.product", "summary": "Return the product of the array elements over the given axis.\nMasked elements are set to 1 internally for computation.\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.ndarray.prodcorresponding function for ndarrays\n\nnumpy.prodequivalent function\n\n\n\nNotes\nArithmetic is modular when using integer types, and no error is raised\non overflow.\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.product", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.record.prod()", "item_id": "numpy.record.prod", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.prod", "parameters": []}},
{"code": "numpy.recarray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)", "item_id": "numpy.recarray.prod", "summary": "Return the product of the array elements over the given axis\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.prodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.prod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ndarray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)", "item_id": "numpy.ndarray.prod", "summary": "Return the product of the array elements over the given axis\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.prodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.prod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.memmap.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)", "item_id": "numpy.memmap.prod", "summary": "Return the product of the array elements over the given axis\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.prodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.prod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.matrix.prod(self, axis=None, dtype=None, out=None)", "item_id": "numpy.matrix.prod", "summary": "Return the product of the array elements over the given axis.\nRefer to prod for full documentation.\n\nSee also\nprod, ndarray.prod\n\nNotes\nSame as ndarray.prod, except, where that returns an ndarray, this\nreturns a matrix object instead.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.prod()\n0\n&gt;&gt;&gt; x.prod(0)\nmatrix([[  0,  45, 120, 231]])\n&gt;&gt;&gt; x.prod(1)\nmatrix([[   0],\n        [ 840],\n        [7920]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.prod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.prod()", "item_id": "numpy.ma.MaskType.prod", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.prod", "parameters": []}},
{"code": "numpy.ma.MaskedArray.prod(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.prod", "summary": "Return the product of the array elements over the given axis.\nMasked elements are set to 1 internally for computation.\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.ndarray.prodcorresponding function for ndarrays\n\nnumpy.prodequivalent function\n\n\n\nNotes\nArithmetic is modular when using integer types, and no error is raised\non overflow.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.prod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.masked_array.prod(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.prod", "summary": "Return the product of the array elements over the given axis.\nMasked elements are set to 1 internally for computation.\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.ndarray.prodcorresponding function for ndarrays\n\nnumpy.prodequivalent function\n\n\n\nNotes\nArithmetic is modular when using integer types, and no error is raised\non overflow.\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.prod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.prod()", "item_id": "numpy.generic.prod", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.prod", "parameters": []}},
{"code": "numpy.chararray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)", "item_id": "numpy.chararray.prod", "summary": "Return the product of the array elements over the given axis\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.prodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.prod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.char.chararray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)", "item_id": "numpy.char.chararray.prod", "summary": "Return the product of the array elements over the given axis\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.prodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.prod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.prod(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)", "item_id": "numpy.prod", "summary": "Return the product of array elements over a given axis.\n\nParameters\n\naarray_likeInput data.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which a product is performed", "description": "", "code-info": {"name": "numpy.prod", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.prod(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.prod", "summary": "Return the product of the array elements over the given axis.\nMasked elements are set to 1 internally for computation.\nRefer to numpy.prod for full documentation.\n\nSee also\n\nnumpy.ndarray.prodcorresponding function for ndarrays\n\nnumpy.prodequivalent function\n\n\n\nNotes\nArithmetic is modular when using integer types, and no error is raised\non overflow.\n", "description": "", "code-info": {"name": "numpy.ma.prod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.printoptions(*args, **kwargs)", "item_id": "numpy.printoptions", "summary": "Context manager for setting print options.\nSet print options for the scope of the with block, and restore the old\noptions at the end", "description": "", "code-info": {"name": "numpy.printoptions", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.Tester.prepare_test_args(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, timer=False)", "item_id": "numpy.testing.Tester.prepare_test_args", "summary": "Run tests for module using nose.\nThis method does the heavy lifting for the test method", "description": "", "code-info": {"name": "numpy.testing.Tester.prepare_test_args", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " label", "is_optional": true, "type": "string", "default_value": "'fast'", "description": ""}, {"name": " verbose", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " extra_argv", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " doctests", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " coverage", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " timer", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ppmt(rate, per, nper, pv, fv=0, when='end')", "item_id": "numpy.ppmt", "summary": "Compute the payment against loan principal.\n\nDeprecated since version 1.18: ppmt is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nParameters\n\nratearray_likeRate of interest (per period)\n\nperarray_like, intAmount paid against the loan changes", "description": "", "code-info": {"name": "numpy.ppmt", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " per", "is_optional": false, "type": "others", "description": ""}, {"name": " nper", "is_optional": false, "type": "others", "description": ""}, {"name": " pv", "is_optional": false, "type": "others", "description": ""}, {"name": " fv", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}]}},
{"code": "numpy.record.pprint(self)", "item_id": "numpy.record.pprint", "summary": "Pretty-print all fields.\n", "description": "", "code-info": {"name": "numpy.record.pprint", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.power(a, size=None)", "item_id": "numpy.random.power", "summary": "Draws samples in [0, 1] from a power distribution with positive\nexponent a - 1.\nAlso known as the power function distribution.\n\nNote\nNew code should use the power method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nafloat or array_like of floatsParameter of the distribution", "description": "", "code-info": {"name": "numpy.random.power", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.power(a, size=None)", "item_id": "numpy.random.Generator.power", "summary": "Draws samples in [0, 1] from a power distribution with positive\nexponent a - 1.\nAlso known as the power function distribution.\n\nParameters\n\nafloat or array_like of floatsParameter of the distribution", "description": "", "code-info": {"name": "numpy.random.Generator.power", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.power(a, b, third=None)", "item_id": "numpy.ma.power", "summary": "Returns element-wise base array raised to power from second array.\nThis is the masked array version of numpy.power", "description": "", "code-info": {"name": "numpy.ma.power", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " third", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.power", "summary": "First array elements raised to powers from second array, element-wise.\nRaise each base in x1 to the positionally-corresponding power in\nx2", "description": "", "code-info": {"name": "numpy.power", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.positive(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.positive", "summary": "Numerical positive, element-wise.\n\nNew in version 1.13.0.\n\n\nParameters\n\nxarray_like or scalarInput array.\n\n\n\nReturns\n\nyndarray or scalarReturned array or scalar: y = +x.\nThis is a scalar if x is a scalar.\n\n\n\n\nNotes\nEquivalent to x.copy(), but only defined for types that support\narithmetic.\n", "description": "", "code-info": {"name": "numpy.positive", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyzero([0])", "item_id": "numpy.polynomial.polynomial.polyzero", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyzero", "parameters": [{"name": "[0]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.power(a, size=None)", "item_id": "numpy.random.RandomState.power", "summary": "Draws samples in [0, 1] from a power distribution with positive\nexponent a - 1.\nAlso known as the power function distribution.\n\nNote\nNew code should use the power method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nafloat or array_like of floatsParameter of the distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.power", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyvander2d(x, y, deg)", "item_id": "numpy.polynomial.polynomial.polyvander2d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y)", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyvander2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyx([0, 1])", "item_id": "numpy.polynomial.polynomial.polyx", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyx", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyvander3d(x, y, z, deg)", "item_id": "numpy.polynomial.polynomial.polyvander3d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y, z)", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyvander3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyvander(x, deg)", "item_id": "numpy.polynomial.polynomial.polyvander", "summary": "Vandermonde matrix of given degree.\nReturns the Vandermonde matrix of degree deg and sample points\nx", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyvander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyval2d(x, y, c)", "item_id": "numpy.polynomial.polynomial.polyval2d", "summary": "Evaluate a 2-D polynomial at points (x, y).\nThis function returns the value\n\n\nThe parameters x and y are converted to arrays only if they are\ntuples or a lists, otherwise they are treated as a scalars and they\nmust have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyval2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyval(x, c, tensor=True)", "item_id": "numpy.polynomial.polynomial.polyval", "summary": "Evaluate a polynomial at points x.\nIf c is of length n + 1, this function returns the value\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyval", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polysub(a1, a2)", "item_id": "numpy.polysub", "summary": "Difference (subtraction) of two polynomials.\nGiven two polynomials a1 and a2, returns a1 - a2.\na1 and a2 can be either array_like sequences of the polynomials\u2019\ncoefficients (including coefficients equal to zero), or poly1d objects.\n\nParameters\n\na1, a2array_like or poly1dMinuend and subtrahend polynomials, respectively.\n\n\n\nReturns\n\noutndarray or poly1dArray or poly1d object of the difference polynomial\u2019s coefficients.\n\n\n\n\n\nSee also\npolyval, polydiv, polymul, polyadd\n\nExamples\n\n\n&gt;&gt;&gt; np.polysub([2, 10, -2], [3, 10, -4])\narray([-1,  0,  2])\n\n\n", "description": "", "code-info": {"name": "numpy.polysub", "parameters": [{"name": "a1", "is_optional": false, "type": "others", "description": ""}, {"name": " a2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polyval(p, x)", "item_id": "numpy.polyval", "summary": "Evaluate a polynomial at specific values.\nIf p is of length N, this function returns the value:\n\np[0]*x**(N-1) + p[1]*x**(N-2) + ..", "description": "", "code-info": {"name": "numpy.polyval", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyvalfromroots(x, r, tensor=True)", "item_id": "numpy.polynomial.polynomial.polyvalfromroots", "summary": "Evaluate a polynomial specified by its roots at points x.\nIf r is of length N, this function returns the value\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyvalfromroots", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " r", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyval3d(x, y, z, c)", "item_id": "numpy.polynomial.polynomial.polyval3d", "summary": "Evaluate a 3-D polynomial at points (x, y, z).\nThis function returns the values:\n\n\nThe parameters x, y, and z are converted to arrays only if\nthey are tuples or a lists, otherwise they are treated as a scalars and\nthey must have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyval3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polytrim(c, tol=0)", "item_id": "numpy.polynomial.polynomial.polytrim", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polytrim", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polysub(c1, c2)", "item_id": "numpy.polynomial.polynomial.polysub", "summary": "Subtract one polynomial from another.\nReturns the difference of two polynomials c1 - c2", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polysub", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyone([1])", "item_id": "numpy.polynomial.polynomial.polyone", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyone", "parameters": [{"name": "[1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial(coef, domain=None, window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial", "summary": "A power series class.\nThe Polynomial class provides the standard Python numerical methods\n\u2018+\u2019, \u2018-\u2018, \u2018*\u2019, \u2018//\u2019, \u2018%\u2019, \u2018divmod\u2019, \u2018**\u2019, and \u2018()\u2019 as well as the\nattributes and methods listed in the ABCPolyBase documentation.\n\nParameters\n\ncoefarray_likePolynomial coefficients in order of increasing degree, i.e.,\n(1, 2, 3) give 1 + 2*x + 3*x**2.\n\ndomain(2,) array_like, optionalDomain to use", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial", "parameters": [{"name": "coef", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polymulx(c)", "item_id": "numpy.polynomial.polynomial.polymulx", "summary": "Multiply a polynomial by x.\nMultiply the polynomial c by x, where x is the independent\nvariable.\n\nParameters\n\ncarray_like1-D array of polynomial coefficients ordered from low to\nhigh.\n\n\n\nReturns\n\noutndarrayArray representing the result of the multiplication.\n\n\n\n\n\nSee also\npolyadd, polysub, polymul, polydiv, polypow\n\nNotes\n\nNew in version 1.5.0.\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polymulx", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyroots(c)", "item_id": "numpy.polynomial.polynomial.polyroots", "summary": "Compute the roots of a polynomial.\nReturn the roots (a.k.a", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyroots", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polymul(a1, a2)", "item_id": "numpy.polymul", "summary": "Find the product of two polynomials.\nFinds the polynomial resulting from the multiplication of the two input\npolynomials", "description": "", "code-info": {"name": "numpy.polymul", "parameters": [{"name": "a1", "is_optional": false, "type": "others", "description": ""}, {"name": " a2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polypow(c, pow, maxpower=None)", "item_id": "numpy.polynomial.polynomial.polypow", "summary": "Raise a polynomial to a power.\nReturns the polynomial c raised to the power pow", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polypow", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " pow", "is_optional": false, "type": "others", "description": ""}, {"name": " maxpower", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polymul(c1, c2)", "item_id": "numpy.polynomial.polynomial.polymul", "summary": "Multiply one polynomial by another.\nReturns the product of two polynomials c1 * c2", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polymul", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyline(off, scl)", "item_id": "numpy.polynomial.polynomial.polyline", "summary": "Returns an array representing a linear polynomial.\n\nParameters\n\noff, sclscalarsThe \u201cy-intercept\u201d and \u201cslope\u201d of the line, respectively.\n\n\n\nReturns\n\nyndarrayThis module\u2019s representation of the linear polynomial off +\nscl*x.\n\n\n\n\n\nSee also\nchebline\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial import polynomial as P\n&gt;&gt;&gt; P.polyline(1,-1)\narray([ 1, -1])\n&gt;&gt;&gt; P.polyval(1, P.polyline(1,-1)) # should be 0\n0.0\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyline", "parameters": [{"name": "off", "is_optional": false, "type": "others", "description": ""}, {"name": " scl", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polygrid3d(x, y, z, c)", "item_id": "numpy.polynomial.polynomial.polygrid3d", "summary": "Evaluate a 3-D polynomial on the Cartesian product of x, y and z.\nThis function returns the values:\n\n\nwhere the points (a, b, c) consist of all triples formed by taking\na from x, b from y, and c from z", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polygrid3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polygrid2d(x, y, c)", "item_id": "numpy.polynomial.polynomial.polygrid2d", "summary": "Evaluate a 2-D polynomial on the Cartesian product of x and y.\nThis function returns the values:\n\n\nwhere the points (a, b) consist of all pairs formed by taking\na from x and b from y", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polygrid2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyfromroots(roots)", "item_id": "numpy.polynomial.polynomial.polyfromroots", "summary": "Generate a monic polynomial with given roots.\nReturn the coefficients of the polynomial\n\n\nwhere the r_n are the roots specified in roots", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyfromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyfit(x, y, deg, rcond=None, full=False, w=None)", "item_id": "numpy.polynomial.polynomial.polyfit", "summary": "Least-squares fit of a polynomial to data.\nReturn the coefficients of a polynomial of degree deg that is the\nleast squares fit to the data values y given at points x", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)", "item_id": "numpy.ma.polyfit", "summary": "Least squares polynomial fit.\nFit a polynomial p(x) = p[0] * x**deg + ..", "description": "", "code-info": {"name": "numpy.ma.polyfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " cov", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)", "item_id": "numpy.polyfit", "summary": "Least squares polynomial fit.\nFit a polynomial p(x) = p[0] * x**deg + ..", "description": "", "code-info": {"name": "numpy.polyfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " cov", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polydomain([-1,  1])", "item_id": "numpy.polynomial.polynomial.polydomain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polydomain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polydiv(c1, c2)", "item_id": "numpy.polynomial.polynomial.polydiv", "summary": "Divide one polynomial by another.\nReturns the quotient-with-remainder of two polynomials c1 / c2.\nThe arguments are sequences of coefficients, from lowest order term\nto highest, e.g., [1,2,3] represents 1 + 2*x + 3*x**2.\n\nParameters\n\nc1, c2array_like1-D arrays of polynomial coefficients ordered from low to high.\n\n\n\nReturns\n\n[quo, rem]ndarraysOf coefficient series representing the quotient and remainder.\n\n\n\n\n\nSee also\npolyadd, polysub, polymulx, polymul, polypow\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial import polynomial as P\n&gt;&gt;&gt; c1 = (1,2,3)\n&gt;&gt;&gt; c2 = (3,2,1)\n&gt;&gt;&gt; P.polydiv(c1,c2)\n(array([3.]), array([-8., -4.]))\n&gt;&gt;&gt; P.polydiv(c2,c1)\n(array([ 0.33333333]), array([ 2.66666667,  1.33333333])) # may vary\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polydiv", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polydiv(u, v)", "item_id": "numpy.polydiv", "summary": "Returns the quotient and remainder of polynomial division.\nThe input arrays are the coefficients (including any coefficients\nequal to zero) of the \u201cnumerator\u201d (dividend) and \u201cdenominator\u201d\n(divisor) polynomials, respectively.\n\nParameters\n\nuarray_like or poly1dDividend polynomial\u2019s coefficients.\n\nvarray_like or poly1dDivisor polynomial\u2019s coefficients.\n\n\n\nReturns\n\nqndarrayCoefficients, including those equal to zero, of the quotient.\n\nrndarrayCoefficients, including those equal to zero, of the remainder.\n\n\n\n\n\nSee also\npoly, polyadd, polyder, polydiv, polyfit, polyint, polymul, polysub, polyval\n\nNotes\nBoth u and v must be 0-d or 1-d (ndim = 0 or 1), but u.ndim need\nnot equal v.ndim", "description": "", "code-info": {"name": "numpy.polydiv", "parameters": [{"name": "u", "is_optional": false, "type": "others", "description": ""}, {"name": " v", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyder(c, m=1, scl=1, axis=0)", "item_id": "numpy.polynomial.polynomial.polyder", "summary": "Differentiate a polynomial.\nReturns the polynomial coefficients c differentiated m times along\naxis", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyder", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polyder(p, m=1)", "item_id": "numpy.polyder", "summary": "Return the derivative of the specified order of a polynomial.\n\nParameters\n\nppoly1d or sequencePolynomial to differentiate.\nA sequence is interpreted as polynomial coefficients, see poly1d.\n\nmint, optionalOrder of differentiation (default: 1)\n\n\n\nReturns\n\nderpoly1dA new polynomial representing the derivative.\n\n\n\n\n\nSee also\n\npolyintAnti-derivative of a polynomial.\n\npoly1dClass for one-dimensional polynomials.\n\n\n\nExamples\nThe derivative of the polynomial  is:\n&gt;&gt;&gt; p = np.poly1d([1,1,1,1])\n&gt;&gt;&gt; p2 = np.polyder(p)\n&gt;&gt;&gt; p2\npoly1d([3, 2, 1])\n\n\nwhich evaluates to:\n&gt;&gt;&gt; p2(2.)\n17.0\n\n\nWe can verify this, approximating the derivative with\n(f(x + h) - f(x))/h:\n&gt;&gt;&gt; (p(2", "description": "", "code-info": {"name": "numpy.polyder", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polycompanion(c)", "item_id": "numpy.polynomial.polynomial.polycompanion", "summary": "Return the companion matrix of c.\nThe companion matrix for power series cannot be made symmetric by\nscaling the basis, so this function differs from those for the\northogonal polynomials.\n\nParameters\n\ncarray_like1-D array of polynomial coefficients ordered from low to high\ndegree.\n\n\n\nReturns\n\nmatndarrayCompanion matrix of dimensions (deg, deg).\n\n\n\n\nNotes\n\nNew in version 1.7.0.\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polycompanion", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polyadd(a1, a2)", "item_id": "numpy.polyadd", "summary": "Find the sum of two polynomials.\nReturns the polynomial resulting from the sum of two input polynomials.\nEach input must be either a poly1d object or a 1D sequence of polynomial\ncoefficients, from highest to lowest degree.\n\nParameters\n\na1, a2array_like or poly1d objectInput polynomials.\n\n\n\nReturns\n\noutndarray or poly1d objectThe sum of the inputs", "description": "", "code-info": {"name": "numpy.polyadd", "parameters": [{"name": "a1", "is_optional": false, "type": "others", "description": ""}, {"name": " a2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.polyadd(c1, c2)", "item_id": "numpy.polynomial.polynomial.polyadd", "summary": "Add one polynomial to another.\nReturns the sum of two polynomials c1 + c2", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.polyadd", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.poly2leg(pol)", "item_id": "numpy.polynomial.legendre.poly2leg", "summary": "Convert a polynomial to a Legendre series.\nConvert an array representing the coefficients of a polynomial (relative\nto the \u201cstandard\u201d basis) ordered from lowest degree to highest, to an\narray of the coefficients of the equivalent Legendre series, ordered\nfrom lowest to highest degree.\n\nParameters\n\npolarray_like1-D array containing the polynomial coefficients\n\n\n\nReturns\n\ncndarray1-D array containing the coefficients of the equivalent Legendre\nseries.\n\n\n\n\n\nSee also\nleg2poly\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy import polynomial as P\n&gt;&gt;&gt; p = P.Polynomial(np.arange(4))\n&gt;&gt;&gt; p\nPolynomial([0.,  1.,  2.,  3.], domain=[-1,  1], window=[-1,  1])\n&gt;&gt;&gt; c = P.Legendre(P.legendre.poly2leg(p.coef))\n&gt;&gt;&gt; c\nLegendre([ 1", "description": "", "code-info": {"name": "numpy.polynomial.legendre.poly2leg", "parameters": [{"name": "pol", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.poly2cheb(pol)", "item_id": "numpy.polynomial.chebyshev.poly2cheb", "summary": "Convert a polynomial to a Chebyshev series.\nConvert an array representing the coefficients of a polynomial (relative\nto the \u201cstandard\u201d basis) ordered from lowest degree to highest, to an\narray of the coefficients of the equivalent Chebyshev series, ordered\nfrom lowest to highest degree.\n\nParameters\n\npolarray_like1-D array containing the polynomial coefficients\n\n\n\nReturns\n\ncndarray1-D array containing the coefficients of the equivalent Chebyshev\nseries.\n\n\n\n\n\nSee also\ncheb2poly\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy import polynomial as P\n&gt;&gt;&gt; p = P.Polynomial(range(4))\n&gt;&gt;&gt; p\nPolynomial([0., 1., 2., 3.], domain=[-1,  1], window=[-1,  1])\n&gt;&gt;&gt; c = p.convert(kind=P.Chebyshev)\n&gt;&gt;&gt; c\nChebyshev([1", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.poly2cheb", "parameters": [{"name": "pol", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.poly1d(c_or_r, r=False, variable=None)", "item_id": "numpy.poly1d", "summary": "A one-dimensional polynomial class.\nA convenience class, used to encapsulate \u201cnatural\u201d operations on\npolynomials so that said operations may take on their customary\nform in code (see Examples).\n\nParameters\n\nc_or_rarray_likeThe polynomial\u2019s coefficients, in decreasing powers, or if\nthe value of the second parameter is True, the polynomial\u2019s\nroots (values where the polynomial evaluates to 0)", "description": "", "code-info": {"name": "numpy.poly1d", "parameters": [{"name": "c_or_r", "is_optional": false, "type": "others", "description": ""}, {"name": " r", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " variable", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.poly2lag(pol)", "item_id": "numpy.polynomial.laguerre.poly2lag", "summary": "Convert a polynomial to a Laguerre series.\nConvert an array representing the coefficients of a polynomial (relative\nto the \u201cstandard\u201d basis) ordered from lowest degree to highest, to an\narray of the coefficients of the equivalent Laguerre series, ordered\nfrom lowest to highest degree.\n\nParameters\n\npolarray_like1-D array containing the polynomial coefficients\n\n\n\nReturns\n\ncndarray1-D array containing the coefficients of the equivalent Laguerre\nseries.\n\n\n\n\n\nSee also\nlag2poly\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy.polynomial.laguerre import poly2lag\n&gt;&gt;&gt; poly2lag(np.arange(4))\narray([ 23., -63.,  58., -18.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.poly2lag", "parameters": [{"name": "pol", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.poly(seq_of_zeros)", "item_id": "numpy.poly", "summary": "Find the coefficients of a polynomial with the given sequence of roots.\nReturns the coefficients of the polynomial whose leading coefficient\nis one for the given sequence of zeros (multiple roots must be included\nin the sequence as many times as their multiplicity; see Examples).\nA square matrix (or array, which will be treated as a matrix) can also\nbe given, in which case the coefficients of the characteristic polynomial\nof the matrix are returned.\n\nParameters\n\nseq_of_zerosarray_like, shape (N,) or (N, N)A sequence of polynomial roots, or a square array or matrix object.\n\n\n\nReturns\n\ncndarray1D array of polynomial coefficients from highest to lowest degree:\nc[0] * x**(N) + c[1] * x**(N-1) + ..", "description": "", "code-info": {"name": "numpy.poly", "parameters": [{"name": "seq_of_zeros", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.poly2herme(pol)", "item_id": "numpy.polynomial.hermite_e.poly2herme", "summary": "Convert a polynomial to a Hermite series.\nConvert an array representing the coefficients of a polynomial (relative\nto the \u201cstandard\u201d basis) ordered from lowest degree to highest, to an\narray of the coefficients of the equivalent Hermite series, ordered\nfrom lowest to highest degree.\n\nParameters\n\npolarray_like1-D array containing the polynomial coefficients\n\n\n\nReturns\n\ncndarray1-D array containing the coefficients of the equivalent Hermite\nseries.\n\n\n\n\n\nSee also\nherme2poly\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite_e import poly2herme\n&gt;&gt;&gt; poly2herme(np.arange(4))\narray([  2.,  10.,   2.,   3.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.poly2herme", "parameters": [{"name": "pol", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.poly2herm(pol)", "item_id": "numpy.polynomial.hermite.poly2herm", "summary": "Convert a polynomial to a Hermite series.\nConvert an array representing the coefficients of a polynomial (relative\nto the \u201cstandard\u201d basis) ordered from lowest degree to highest, to an\narray of the coefficients of the equivalent Hermite series, ordered\nfrom lowest to highest degree.\n\nParameters\n\npolarray_like1-D array containing the polynomial coefficients\n\n\n\nReturns\n\ncndarray1-D array containing the coefficients of the equivalent Hermite\nseries.\n\n\n\n\n\nSee also\nherm2poly\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite import poly2herm\n&gt;&gt;&gt; poly2herm(np.arange(4))\narray([1", "description": "", "code-info": {"name": "numpy.polynomial.hermite.poly2herm", "parameters": [{"name": "pol", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.poisson(lam=1.0, size=None)", "item_id": "numpy.random.RandomState.poisson", "summary": "Draw samples from a Poisson distribution.\nThe Poisson distribution is the limit of the binomial distribution\nfor large N.\n\nNote\nNew code should use the poisson method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nlamfloat or array_like of floatsExpectation of interval, must be &gt;= 0", "description": "", "code-info": {"name": "numpy.random.RandomState.poisson", "parameters": [{"name": "lam", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.poisson(lam=1.0, size=None)", "item_id": "numpy.random.Generator.poisson", "summary": "Draw samples from a Poisson distribution.\nThe Poisson distribution is the limit of the binomial distribution\nfor large N.\n\nParameters\n\nlamfloat or array_like of floatsExpectation of interval, must be &gt;= 0", "description": "", "code-info": {"name": "numpy.random.Generator.poisson", "parameters": [{"name": "lam", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.poisson(lam=1.0, size=None)", "item_id": "numpy.random.poisson", "summary": "Draw samples from a Poisson distribution.\nThe Poisson distribution is the limit of the binomial distribution\nfor large N.\n\nNote\nNew code should use the poisson method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nlamfloat or array_like of floatsExpectation of interval, must be &gt;= 0", "description": "", "code-info": {"name": "numpy.random.poisson", "parameters": [{"name": "lam", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.pmt(rate, nper, pv, fv=0, when='end')", "item_id": "numpy.pmt", "summary": "Compute the payment against loan principal plus interest.\n\nDeprecated since version 1.18: pmt is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nGiven:\na present value, pv (e.g., an amount borrowed)\na future value, fv (e.g., 0)\nan interest rate compounded once per period, of which\nthere are\nnper total\nand (optional) specification of whether payment is made\nat the beginning (when = {\u2018begin\u2019, 1}) or the end\n(when = {\u2018end\u2019, 0}) of each period\n\n\nReturn:the (fixed) periodic payment.\n\n\n\nParameters\n\nratearray_likeRate of interest (per period)\n\nnperarray_likeNumber of compounding periods\n\npvarray_likePresent value\n\nfvarray_like,  optionalFuture value (default = 0)\n\nwhen{{\u2018begin\u2019, 1}, {\u2018end\u2019, 0}}, {string, int}When payments are due (\u2018begin\u2019 (1) or \u2018end\u2019 (0))\n\n\n\nReturns\n\noutndarrayPayment against loan plus interest", "description": "", "code-info": {"name": "numpy.pmt", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " nper", "is_optional": false, "type": "others", "description": ""}, {"name": " pv", "is_optional": false, "type": "others", "description": ""}, {"name": " fv", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}]}},
{"code": "numpy.place(arr, mask, vals)", "item_id": "numpy.place", "summary": "Change elements of an array based on conditional and input values.\nSimilar to np.copyto(arr, vals, where=mask), the difference is that\nplace uses the first N elements of vals, where N is the number of\nTrue values in mask, while copyto uses the elements where mask\nis True.\nNote that extract does the exact opposite of place.\n\nParameters\n\narrndarrayArray to put data into.\n\nmaskarray_likeBoolean mask array", "description": "", "code-info": {"name": "numpy.place", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " mask", "is_optional": false, "type": "others", "description": ""}, {"name": " vals", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.linalg.pinv(a, rcond=1e-15, hermitian=False)", "item_id": "numpy.linalg.pinv", "summary": "Compute the (Moore-Penrose) pseudo-inverse of a matrix.\nCalculate the generalized inverse of a matrix using its\nsingular-value decomposition (SVD) and including all\nlarge singular values.\n\nChanged in version 1.14: Can now operate on stacks of matrices\n\n\nParameters\n\na(\u2026, M, N) array_likeMatrix or stack of matrices to be pseudo-inverted.\n\nrcond(\u2026) array_like of floatCutoff for small singular values.\nSingular values less than or equal to\nrcond * largest_singular_value are set to zero.\nBroadcasts against the stack of matrices.\n\nhermitianbool, optionalIf True, a is assumed to be Hermitian (symmetric if real-valued),\nenabling a more efficient method for finding singular values.\nDefaults to False.\n\nNew in version 1.17.0.\n\n\n\n\nReturns\n\nB(\u2026, N, M) ndarrayThe pseudo-inverse of a", "description": "", "code-info": {"name": "numpy.linalg.pinv", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "1e-15", "description": ""}, {"name": " hermitian", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.piecewise(x, condlist, funclist, *args, **kw)", "item_id": "numpy.piecewise", "summary": "Evaluate a piecewise-defined function.\nGiven a set of conditions and corresponding functions, evaluate each\nfunction on the input data wherever its condition is true.\n\nParameters\n\nxndarray or scalarThe input domain.\n\ncondlistlist of bool arrays or bool scalarsEach boolean array corresponds to a function in funclist", "description": "", "code-info": {"name": "numpy.piecewise", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " condlist", "is_optional": false, "type": "others", "description": ""}, {"name": " funclist", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kw", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Philox(seed=None, counter=None, key=None)", "item_id": "numpy.random.Philox", "summary": "Container for the Philox (4x64) pseudo-random number generator.\n\nParameters\n\nseed{None, int, array_like[ints], SeedSequence}, optionalA seed to initialize the BitGenerator", "description": "", "code-info": {"name": "numpy.random.Philox", "parameters": [{"name": "seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " counter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " key", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.permutation(x)", "item_id": "numpy.random.RandomState.permutation", "summary": "Randomly permute a sequence, or return a permuted range.\nIf x is a multi-dimensional array, it is only shuffled along its\nfirst index.\n\nNote\nNew code should use the permutation method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nxint or array_likeIf x is an integer, randomly permute np.arange(x).\nIf x is an array, make a copy and shuffle the elements\nrandomly.\n\n\n\nReturns\n\noutndarrayPermuted sequence or array range.\n\n\n\n\n\nSee also\n\nGenerator.permutationwhich should be used for new code.\n\n\n\nExamples\n&gt;&gt;&gt; np.random.permutation(10)\narray([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n\n\n&gt;&gt;&gt; np.random.permutation([1, 4, 9, 12, 15])\narray([15,  1,  9,  4, 12]) # random\n\n\n&gt;&gt;&gt; arr = np.arange(9).reshape((3, 3))\n&gt;&gt;&gt; np.random.permutation(arr)\narray([[6, 7, 8], # random\n       [0, 1, 2],\n       [3, 4, 5]])\n\n\n", "description": "", "code-info": {"name": "numpy.random.RandomState.permutation", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.permutation(x, axis=0)", "item_id": "numpy.random.Generator.permutation", "summary": "Randomly permute a sequence, or return a permuted range.\n\nParameters\n\nxint or array_likeIf x is an integer, randomly permute np.arange(x).\nIf x is an array, make a copy and shuffle the elements\nrandomly.\n\naxisint, optionalThe axis which x is shuffled along", "description": "", "code-info": {"name": "numpy.random.Generator.permutation", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.random.permutation(x)", "item_id": "numpy.random.permutation", "summary": "Randomly permute a sequence, or return a permuted range.\nIf x is a multi-dimensional array, it is only shuffled along its\nfirst index.\n\nNote\nNew code should use the permutation method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nxint or array_likeIf x is an integer, randomly permute np.arange(x).\nIf x is an array, make a copy and shuffle the elements\nrandomly.\n\n\n\nReturns\n\noutndarrayPermuted sequence or array range.\n\n\n\n\n\nSee also\n\nGenerator.permutationwhich should be used for new code.\n\n\n\nExamples\n&gt;&gt;&gt; np.random.permutation(10)\narray([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n\n\n&gt;&gt;&gt; np.random.permutation([1, 4, 9, 12, 15])\narray([15,  1,  9,  4, 12]) # random\n\n\n&gt;&gt;&gt; arr = np.arange(9).reshape((3, 3))\n&gt;&gt;&gt; np.random.permutation(arr)\narray([[6, 7, 8], # random\n       [0, 1, 2],\n       [3, 4, 5]])\n\n\n", "description": "", "code-info": {"name": "numpy.random.permutation", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.PCG64(seed_seq=None)", "item_id": "numpy.random.PCG64", "summary": "BitGenerator for the PCG-64 pseudo-random number generator.\n\nParameters\n\nseed{None, int, array_like[ints], SeedSequence}, optionalA seed to initialize the BitGenerator", "description": "", "code-info": {"name": "numpy.random.PCG64", "parameters": [{"name": "seed_seq", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.partition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.recarray.partition", "summary": "Rearranges the elements in the array in such a way that the value of the\nelement in kth position is in the position it would be in a sorted array.\nAll elements smaller than the kth element are moved before this element and\nall equal or greater are moved behind it", "description": "", "code-info": {"name": "numpy.recarray.partition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.partition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.memmap.partition", "summary": "Rearranges the elements in the array in such a way that the value of the\nelement in kth position is in the position it would be in a sorted array.\nAll elements smaller than the kth element are moved before this element and\nall equal or greater are moved behind it", "description": "", "code-info": {"name": "numpy.memmap.partition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.partition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.matrix.partition", "summary": "Rearranges the elements in the array in such a way that the value of the\nelement in kth position is in the position it would be in a sorted array.\nAll elements smaller than the kth element are moved before this element and\nall equal or greater are moved behind it", "description": "", "code-info": {"name": "numpy.matrix.partition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)", "item_id": "numpy.percentile", "summary": "Compute the q-th percentile of the data along the specified axis.\nReturns the q-th percentile(s) of the array elements.\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\nqarray_like of floatPercentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.\n\naxis{int, tuple of int, None}, optionalAxis or axes along which the percentiles are computed", "description": "", "code-info": {"name": "numpy.percentile", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " q", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " interpolation", "is_optional": true, "type": "string", "default_value": "'linear'", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.partition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.ndarray.partition", "summary": "Rearranges the elements in the array in such a way that the value of the\nelement in kth position is in the position it would be in a sorted array.\nAll elements smaller than the kth element are moved before this element and\nall equal or greater are moved behind it", "description": "", "code-info": {"name": "numpy.ndarray.partition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.partition(self, sep)", "item_id": "numpy.chararray.partition", "summary": "Partition each element in self around sep.\n\nSee also\npartition\n\n", "description": "", "code-info": {"name": "numpy.chararray.partition", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.partition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.ma.masked_array.partition", "summary": "Rearranges the elements in the array in such a way that the value of the\nelement in kth position is in the position it would be in a sorted array.\nAll elements smaller than the kth element are moved before this element and\nall equal or greater are moved behind it", "description": "", "code-info": {"name": "numpy.ma.masked_array.partition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.partition(self, sep)", "item_id": "numpy.char.chararray.partition", "summary": "Partition each element in self around sep.\n\nSee also\npartition\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.partition", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.partition(a, sep)", "item_id": "numpy.char.partition", "summary": "Partition each element in a around sep.\nCalls str.partition element-wise.\nFor each element in a, split the element as the first\noccurrence of sep, and return 3 strings containing the part\nbefore the separator, the separator itself, and the part after\nthe separator", "description": "", "code-info": {"name": "numpy.char.partition", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.partition(a, kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.partition", "summary": "Return a partitioned copy of an array.\nCreates a copy of the array with its elements rearranged in such a\nway that the value of the element in k-th position is in the\nposition it would be in a sorted array", "description": "", "code-info": {"name": "numpy.partition", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.pareto(a, size=None)", "item_id": "numpy.random.RandomState.pareto", "summary": "Draw samples from a Pareto II or Lomax distribution with\nspecified shape.\nThe Lomax or Pareto II distribution is a shifted Pareto\ndistribution", "description": "", "code-info": {"name": "numpy.random.RandomState.pareto", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.pareto(a, size=None)", "item_id": "numpy.random.Generator.pareto", "summary": "Draw samples from a Pareto II or Lomax distribution with\nspecified shape.\nThe Lomax or Pareto II distribution is a shifted Pareto\ndistribution", "description": "", "code-info": {"name": "numpy.random.Generator.pareto", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.outer(a, b)", "item_id": "numpy.ma.outer", "summary": "Compute the outer product of two vectors.\nGiven two vectors, a = [a0, a1, ..., aM] and\nb = [b0, b1, ..., bN],\nthe outer product [1] is:\n[[a0*b0  a0*b1 ..", "description": "", "code-info": {"name": "numpy.ma.outer", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.outer(a, b, out=None)", "item_id": "numpy.outer", "summary": "Compute the outer product of two vectors.\nGiven two vectors, a = [a0, a1, ..., aM] and\nb = [b0, b1, ..., bN],\nthe outer product [1] is:\n[[a0*b0  a0*b1 ..", "description": "", "code-info": {"name": "numpy.outer", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.DataSource.open(self, path, mode='r', encoding=None, newline=None)", "item_id": "numpy.DataSource.open", "summary": "Open and return file-like object.\nIf path is an URL, it will be downloaded, stored in the\nDataSource directory and opened from there.\n\nParameters\n\npathstrLocal file path or URL to open.\n\nmode{\u2018r\u2019, \u2018w\u2019, \u2018a\u2019}, optionalMode to open path", "description": "", "code-info": {"name": "numpy.DataSource.open", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " path", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'r'", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " newline", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matlib.ones(shape, dtype=None, order='C')", "item_id": "numpy.matlib.ones", "summary": "Matrix of ones.\nReturn a matrix of given shape and type, filled with ones.\n\nParameters\n\nshape{sequence of ints, int}Shape of the matrix\n\ndtypedata-type, optionalThe desired data-type for the matrix, default is np.float64.\n\norder{\u2018C\u2019, \u2018F\u2019}, optionalWhether to store matrix in C- or Fortran-contiguous order,\ndefault is \u2018C\u2019.\n\n\n\nReturns\n\noutmatrixMatrix of ones of given shape, dtype, and order.\n\n\n\n\n\nSee also\n\nonesArray of ones.\n\nmatlib.zerosZero matrix.\n\n\n\nNotes\nIf shape has length one i.e", "description": "", "code-info": {"name": "numpy.matlib.ones", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ones_like(a, dtype=None, order='K', subok=True, shape=None)", "item_id": "numpy.ones_like", "summary": "Return an array of ones with the same shape and type as a given array.\n\nParameters\n\naarray_likeThe shape and data-type of a define these same attributes of\nthe returned array.\n\ndtypedata-type, optionalOverrides the data type of the result.\n\nNew in version 1.6.0.\n\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result", "description": "", "code-info": {"name": "numpy.ones_like", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ones(shape, dtype=None, order='C')", "item_id": "numpy.ones", "summary": "Return a new array of given shape and type, filled with ones.\n\nParameters\n\nshapeint or sequence of intsShape of the new array, e.g., (2, 3) or 2.\n\ndtypedata-type, optionalThe desired data-type for the array, e.g., numpy.int8", "description": "", "code-info": {"name": "numpy.ones", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.ones(shape, dtype=None, order='C')", "item_id": "numpy.ma.ones", "summary": "Return a new array of given shape and type, filled with ones.\n\nParameters\n\nshapeint or sequence of intsShape of the new array, e.g., (2, 3) or 2.\n\ndtypedata-type, optionalThe desired data-type for the array, e.g., numpy.int8", "description": "", "code-info": {"name": "numpy.ma.ones", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.obj2sctype(rep, default=None)", "item_id": "numpy.obj2sctype", "summary": "Return the scalar dtype or NumPy equivalent of Python type of an object.\n\nParameters\n\nrepanyThe object of which the type is returned.\n\ndefaultany, optionalIf given, this is returned for objects whose types can not be\ndetermined", "description": "", "code-info": {"name": "numpy.obj2sctype", "parameters": [{"name": "rep", "is_optional": false, "type": "others", "description": ""}, {"name": " default", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.lib.NumpyVersion(vstring)", "item_id": "numpy.lib.NumpyVersion", "summary": "Parse and compare numpy version strings.\nNumPy has the following versioning scheme (numbers given are examples; they\ncan be &gt; 9) in principle):\n\nReleased version: \u20181.8.0\u2019, \u20181.8.1\u2019, etc.\nAlpha: \u20181.8.0a1\u2019, \u20181.8.0a2\u2019, etc.\nBeta: \u20181.8.0b1\u2019, \u20181.8.0b2\u2019, etc.\nRelease candidates: \u20181.8.0rc1\u2019, \u20181.8.0rc2\u2019, etc.\nDevelopment versions: \u20181.8.0.dev-f1234afa\u2019 (git commit hash appended)\n\nDevelopment versions after a1: \u20181.8.0a1.dev-f1234afa\u2019,\u20181.8.0b2.dev-f1234afa\u2019,\n\u20181.8.1rc1.dev-f1234afa\u2019, etc.\n\n\n\nDevelopment versions (no git hash available): \u20181.8.0.dev-Unknown\u2019\n\nComparing needs to be done against a valid version string or other\nNumpyVersion instance", "description": "", "code-info": {"name": "numpy.lib.NumpyVersion", "parameters": [{"name": "vstring", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.nonzero()", "item_id": "numpy.record.nonzero", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.nonzero", "parameters": []}},
{"code": "numpy.recarray.nonzero()", "item_id": "numpy.recarray.nonzero", "summary": "Return the indices of the elements that are non-zero.\nRefer to numpy.nonzero for full documentation.\n\nSee also\n\nnumpy.nonzeroequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.nonzero", "parameters": []}},
{"code": "numpy.memmap.nonzero()", "item_id": "numpy.memmap.nonzero", "summary": "Return the indices of the elements that are non-zero.\nRefer to numpy.nonzero for full documentation.\n\nSee also\n\nnumpy.nonzeroequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.nonzero", "parameters": []}},
{"code": "numpy.matrix.nonzero()", "item_id": "numpy.matrix.nonzero", "summary": "Return the indices of the elements that are non-zero.\nRefer to numpy.nonzero for full documentation.\n\nSee also\n\nnumpy.nonzeroequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.nonzero", "parameters": []}},
{"code": "numpy.ndarray.nonzero()", "item_id": "numpy.ndarray.nonzero", "summary": "Return the indices of the elements that are non-zero.\nRefer to numpy.nonzero for full documentation.\n\nSee also\n\nnumpy.nonzeroequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.nonzero", "parameters": []}},
{"code": "numpy.generic.nonzero()", "item_id": "numpy.generic.nonzero", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.nonzero", "parameters": []}},
{"code": "numpy.ma.MaskType.nonzero()", "item_id": "numpy.ma.MaskType.nonzero", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.nonzero", "parameters": []}},
{"code": "numpy.ma.MaskedArray.nonzero(self)", "item_id": "numpy.ma.MaskedArray.nonzero", "summary": "Return the indices of unmasked elements that are not zero.\nReturns a tuple of arrays, one for each dimension, containing the\nindices of the non-zero elements in that dimension", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.nonzero", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.nonzero(self)", "item_id": "numpy.ma.masked_array.nonzero", "summary": "Return the indices of unmasked elements that are not zero.\nReturns a tuple of arrays, one for each dimension, containing the\nindices of the non-zero elements in that dimension", "description": "", "code-info": {"name": "numpy.ma.masked_array.nonzero", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.nonzero()", "item_id": "numpy.chararray.nonzero", "summary": "Return the indices of the elements that are non-zero.\nRefer to numpy.nonzero for full documentation.\n\nSee also\n\nnumpy.nonzeroequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.nonzero", "parameters": []}},
{"code": "numpy.char.chararray.nonzero()", "item_id": "numpy.char.chararray.nonzero", "summary": "Return the indices of the elements that are non-zero.\nRefer to numpy.nonzero for full documentation.\n\nSee also\n\nnumpy.nonzeroequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.nonzero", "parameters": []}},
{"code": "numpy.nonzero(a)", "item_id": "numpy.nonzero", "summary": "Return the indices of the elements that are non-zero.\nReturns a tuple of arrays, one for each dimension of a,\ncontaining the indices of the non-zero elements in that\ndimension", "description": "", "code-info": {"name": "numpy.nonzero", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.nonzero(self)", "item_id": "numpy.ma.nonzero", "summary": "Return the indices of unmasked elements that are not zero.\nReturns a tuple of arrays, one for each dimension, containing the\nindices of the non-zero elements in that dimension", "description": "", "code-info": {"name": "numpy.ma.nonzero", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.noncentral_f(dfnum, dfden, nonc, size=None)", "item_id": "numpy.random.noncentral_f", "summary": "Draw samples from the noncentral F distribution.\nSamples are drawn from an F distribution with specified parameters,\ndfnum (degrees of freedom in numerator) and dfden (degrees of\nfreedom in denominator), where both parameters &gt; 1.\nnonc is the non-centrality parameter.\n\nNote\nNew code should use the noncentral_f method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\ndfnumfloat or array_like of floatsNumerator degrees of freedom, must be &gt; 0.\n\nChanged in version 1.14.0: Earlier NumPy versions required dfnum &gt; 1.\n\n\ndfdenfloat or array_like of floatsDenominator degrees of freedom, must be &gt; 0.\n\nnoncfloat or array_like of floatsNon-centrality parameter, the sum of the squares of the numerator\nmeans, must be &gt;= 0.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.noncentral_f", "parameters": [{"name": "dfnum", "is_optional": false, "type": "others", "description": ""}, {"name": " dfden", "is_optional": false, "type": "others", "description": ""}, {"name": " nonc", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.noncentral_chisquare(df, nonc, size=None)", "item_id": "numpy.random.RandomState.noncentral_chisquare", "summary": "Draw samples from a noncentral chi-square distribution.\nThe noncentral  distribution is a generalization of\nthe  distribution.\n\nNote\nNew code should use the noncentral_chisquare method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\ndffloat or array_like of floatsDegrees of freedom, must be &gt; 0.\n\nChanged in version 1.10.0: Earlier NumPy versions required dfnum &gt; 1.\n\n\nnoncfloat or array_like of floatsNon-centrality, must be non-negative.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.noncentral_chisquare", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " nonc", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.noncentral_chisquare(df, nonc, size=None)", "item_id": "numpy.random.noncentral_chisquare", "summary": "Draw samples from a noncentral chi-square distribution.\nThe noncentral  distribution is a generalization of\nthe  distribution.\n\nNote\nNew code should use the noncentral_chisquare method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\ndffloat or array_like of floatsDegrees of freedom, must be &gt; 0.\n\nChanged in version 1.10.0: Earlier NumPy versions required dfnum &gt; 1.\n\n\nnoncfloat or array_like of floatsNon-centrality, must be non-negative.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.noncentral_chisquare", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " nonc", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.noncentral_f(dfnum, dfden, nonc, size=None)", "item_id": "numpy.random.RandomState.noncentral_f", "summary": "Draw samples from the noncentral F distribution.\nSamples are drawn from an F distribution with specified parameters,\ndfnum (degrees of freedom in numerator) and dfden (degrees of\nfreedom in denominator), where both parameters &gt; 1.\nnonc is the non-centrality parameter.\n\nNote\nNew code should use the noncentral_f method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\ndfnumfloat or array_like of floatsNumerator degrees of freedom, must be &gt; 0.\n\nChanged in version 1.14.0: Earlier NumPy versions required dfnum &gt; 1.\n\n\ndfdenfloat or array_like of floatsDenominator degrees of freedom, must be &gt; 0.\n\nnoncfloat or array_like of floatsNon-centrality parameter, the sum of the squares of the numerator\nmeans, must be &gt;= 0.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.noncentral_f", "parameters": [{"name": "dfnum", "is_optional": false, "type": "others", "description": ""}, {"name": " dfden", "is_optional": false, "type": "others", "description": ""}, {"name": " nonc", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.noncentral_f(dfnum, dfden, nonc, size=None)", "item_id": "numpy.random.Generator.noncentral_f", "summary": "Draw samples from the noncentral F distribution.\nSamples are drawn from an F distribution with specified parameters,\ndfnum (degrees of freedom in numerator) and dfden (degrees of\nfreedom in denominator), where both parameters &gt; 1.\nnonc is the non-centrality parameter.\n\nParameters\n\ndfnumfloat or array_like of floatsNumerator degrees of freedom, must be &gt; 0.\n\nChanged in version 1.14.0: Earlier NumPy versions required dfnum &gt; 1.\n\n\ndfdenfloat or array_like of floatsDenominator degrees of freedom, must be &gt; 0.\n\nnoncfloat or array_like of floatsNon-centrality parameter, the sum of the squares of the numerator\nmeans, must be &gt;= 0.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.noncentral_f", "parameters": [{"name": "dfnum", "is_optional": false, "type": "others", "description": ""}, {"name": " dfden", "is_optional": false, "type": "others", "description": ""}, {"name": " nonc", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.noncentral_chisquare(df, nonc, size=None)", "item_id": "numpy.random.Generator.noncentral_chisquare", "summary": "Draw samples from a noncentral chi-square distribution.\nThe noncentral  distribution is a generalization of\nthe  distribution.\n\nParameters\n\ndffloat or array_like of floatsDegrees of freedom, must be &gt; 0.\n\nChanged in version 1.10.0: Earlier NumPy versions required dfnum &gt; 1.\n\n\nnoncfloat or array_like of floatsNon-centrality, must be non-negative.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.noncentral_chisquare", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " nonc", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nextafter(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.nextafter", "summary": "Return the next floating-point value after x1 towards x2, element-wise.\n\nParameters\n\nx1array_likeValues to find the next representable value of.\n\nx2array_likeThe direction where to look for the next representable value of x1.\nIf x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.nextafter", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndindex.next(self)", "item_id": "numpy.ndindex.next", "summary": "Standard iterator method, updates the index and returns the index\ntuple.\n\nReturns\n\nvaltuple of intsReturns a tuple containing the indices of the current\niteration.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndindex.next", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndenumerate.next(self)", "item_id": "numpy.ndenumerate.next", "summary": "Standard iterator method, returns the index tuple and array value.\n\nReturns\n\ncoordstuple of intsThe indices of the current iteration.\n\nvalscalarThe array element of the current iteration.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndenumerate.next", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.newbyteorder(new_order='S')", "item_id": "numpy.record.newbyteorder", "summary": "Return a new dtype with a different byte order.\nChanges are also made in all fields and sub-arrays of the data type.\nThe new_order code can be any from the following:\n\n\u2018S\u2019 - swap dtype from current to opposite endian\n{\u2018&lt;\u2019, \u2018L\u2019} - little endian\n{\u2018&gt;\u2019, \u2018B\u2019} - big endian\n{\u2018=\u2019, \u2018N\u2019} - native order\n{\u2018|\u2019, \u2018I\u2019} - ignore (no change to byte order)\n\n\nParameters\n\nnew_orderstr, optionalByte order to force; a value from the byte order specifications\nabove", "description": "", "code-info": {"name": "numpy.record.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.recarray.newbyteorder(new_order='S')", "item_id": "numpy.recarray.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.recarray.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.ndarray.newbyteorder(new_order='S')", "item_id": "numpy.ndarray.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.ndarray.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.memmap.newbyteorder(new_order='S')", "item_id": "numpy.memmap.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.memmap.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.matrix.newbyteorder(new_order='S')", "item_id": "numpy.matrix.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.matrix.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.ma.MaskType.newbyteorder(new_order='S')", "item_id": "numpy.ma.MaskType.newbyteorder", "summary": "Return a new dtype with a different byte order.\nChanges are also made in all fields and sub-arrays of the data type.\nThe new_order code can be any from the following:\n\n\u2018S\u2019 - swap dtype from current to opposite endian\n{\u2018&lt;\u2019, \u2018L\u2019} - little endian\n{\u2018&gt;\u2019, \u2018B\u2019} - big endian\n{\u2018=\u2019, \u2018N\u2019} - native order\n{\u2018|\u2019, \u2018I\u2019} - ignore (no change to byte order)\n\n\nParameters\n\nnew_orderstr, optionalByte order to force; a value from the byte order specifications\nabove", "description": "", "code-info": {"name": "numpy.ma.MaskType.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.ma.masked_array.newbyteorder(new_order='S')", "item_id": "numpy.ma.masked_array.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.ma.masked_array.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.chararray.newbyteorder(new_order='S')", "item_id": "numpy.chararray.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.chararray.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.char.chararray.newbyteorder(new_order='S')", "item_id": "numpy.char.chararray.newbyteorder", "summary": "Return the array with the same data viewed with a different byte order.\nEquivalent to:\narr.view(arr.dtype.newbytorder(new_order))\n\n\nChanges are also made in all fields and sub-arrays of the array data\ntype.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.char.chararray.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.generic.newbyteorder(new_order='S')", "item_id": "numpy.generic.newbyteorder", "summary": "Return a new dtype with a different byte order.\nChanges are also made in all fields and sub-arrays of the data type.\nThe new_order code can be any from the following:\n\n\u2018S\u2019 - swap dtype from current to opposite endian\n{\u2018&lt;\u2019, \u2018L\u2019} - little endian\n{\u2018&gt;\u2019, \u2018B\u2019} - big endian\n{\u2018=\u2019, \u2018N\u2019} - native order\n{\u2018|\u2019, \u2018I\u2019} - ignore (no change to byte order)\n\n\nParameters\n\nnew_orderstr, optionalByte order to force; a value from the byte order specifications\nabove", "description": "", "code-info": {"name": "numpy.generic.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.ndindex.ndincr(self)", "item_id": "numpy.ndindex.ndincr", "summary": "Increment the multi-dimensional index by one.\nThis method is for backward compatibility only: do not use.\n", "description": "", "code-info": {"name": "numpy.ndindex.ndincr", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.dtype.newbyteorder(new_order='S')", "item_id": "numpy.dtype.newbyteorder", "summary": "Return a new dtype with a different byte order.\nChanges are also made in all fields and sub-arrays of the data type.\n\nParameters\n\nnew_orderstring, optionalByte order to force; a value from the byte order specifications\nbelow", "description": "", "code-info": {"name": "numpy.dtype.newbyteorder", "parameters": [{"name": "new_order", "is_optional": true, "type": "string", "default_value": "'S'", "description": ""}]}},
{"code": "numpy.ndindex(*shape)", "item_id": "numpy.ndindex", "summary": "An N-dimensional iterator object to index arrays.\nGiven the shape of an array, an ndindex instance iterates over\nthe N-dimensional index of the array", "description": "", "code-info": {"name": "numpy.ndindex", "parameters": [{"name": "*shape", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndenumerate(arr)", "item_id": "numpy.ndenumerate", "summary": "Multidimensional index iterator.\nReturn an iterator yielding pairs of array coordinates and values.\n\nParameters\n\narrndarrayInput array.\n\n\n\n\n\nSee also\nndindex, flatiter\n\nExamples\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; for index, x in np.ndenumerate(a):\n..", "description": "", "code-info": {"name": "numpy.ndenumerate", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)", "item_id": "numpy.ndarray", "summary": "An array object represents a multidimensional, homogeneous array\nof fixed-size items", "description": "", "code-info": {"name": "numpy.ndarray", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " buffer", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " strides", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanvar", "summary": "Compute the variance along the specified axis, while ignoring NaNs.\nReturns the variance of the array elements, a measure of the spread of\na distribution", "description": "", "code-info": {"name": "numpy.nanvar", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanstd", "summary": "Compute the standard deviation along the specified axis, while\nignoring NaNs.\nReturns the standard deviation, a measure of the spread of a\ndistribution, of the non-NaN array elements", "description": "", "code-info": {"name": "numpy.nanstd", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ddof", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=&lt;no value&gt;)", "item_id": "numpy.nanquantile", "summary": "Compute the qth quantile of the data along the specified axis,\nwhile ignoring nan values.\nReturns the qth quantile(s) of the array elements.\n\nNew in version 1.15.0.\n\n\nParameters\n\naarray_likeInput array or object that can be converted to an array, containing\nnan values to be ignored\n\nqarray_like of floatQuantile or sequence of quantiles to compute, which must be between\n0 and 1 inclusive.\n\naxis{int, tuple of int, None}, optionalAxis or axes along which the quantiles are computed", "description": "", "code-info": {"name": "numpy.nanquantile", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " q", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " interpolation", "is_optional": true, "type": "string", "default_value": "'linear'", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanprod(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanprod", "summary": "Return the product of array elements over a given axis treating Not a\nNumbers (NaNs) as ones.\nOne is returned for slices that are all-NaN or empty.\n\nNew in version 1.10.0.\n\n\nParameters\n\naarray_likeArray containing numbers whose product is desired", "description": "", "code-info": {"name": "numpy.nanprod", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=&lt;no value&gt;)", "item_id": "numpy.nanpercentile", "summary": "Compute the qth percentile of the data along the specified axis,\nwhile ignoring nan values.\nReturns the qth percentile(s) of the array elements.\n\nNew in version 1.9.0.\n\n\nParameters\n\naarray_likeInput array or object that can be converted to an array, containing\nnan values to be ignored.\n\nqarray_like of floatPercentile or sequence of percentiles to compute, which must be between\n0 and 100 inclusive.\n\naxis{int, tuple of int, None}, optionalAxis or axes along which the percentiles are computed", "description": "", "code-info": {"name": "numpy.nanpercentile", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " q", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " interpolation", "is_optional": true, "type": "string", "default_value": "'linear'", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanmin(a, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanmin", "summary": "Return minimum of an array or minimum along an axis, ignoring any NaNs.\nWhen all-NaN slices are encountered a RuntimeWarning is raised and\nNan is returned for that slice.\n\nParameters\n\naarray_likeArray containing numbers whose minimum is desired", "description": "", "code-info": {"name": "numpy.nanmin", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanmedian", "summary": "Compute the median along the specified axis, while ignoring NaNs.\nReturns the median of the array elements.\n\nNew in version 1.9.0.\n\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\naxis{int, sequence of int, None}, optionalAxis or axes along which the medians are computed", "description": "", "code-info": {"name": "numpy.nanmedian", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanmean(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanmean", "summary": "Compute the arithmetic mean along the specified axis, ignoring NaNs.\nReturns the average of the array elements", "description": "", "code-info": {"name": "numpy.nanmean", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanmax(a, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.nanmax", "summary": "Return the maximum of an array or maximum along an axis, ignoring any\nNaNs", "description": "", "code-info": {"name": "numpy.nanmax", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nansum(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.nansum", "summary": "Return the sum of array elements over a given axis treating Not a\nNumbers (NaNs) as zero.\nIn NumPy versions &lt;= 1.9.0 Nan is returned for slices that are all-NaN or\nempty", "description": "", "code-info": {"name": "numpy.nansum", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.nanargmax(a, axis=None)", "item_id": "numpy.nanargmax", "summary": "Return the indices of the maximum values in the specified axis ignoring\nNaNs", "description": "", "code-info": {"name": "numpy.nanargmax", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nanargmin(a, axis=None)", "item_id": "numpy.nanargmin", "summary": "Return the indices of the minimum values in the specified axis ignoring\nNaNs", "description": "", "code-info": {"name": "numpy.nanargmin", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None)", "item_id": "numpy.nan_to_num", "summary": "Replace NaN with zero and infinity with large finite numbers (default\nbehaviour) or with the numbers defined by the user using the nan, \nposinf and/or neginf keywords.\nIf x is inexact, NaN is replaced by zero or by the user defined value in\nnan keyword, infinity is replaced by the largest finite floating point \nvalues representable by x.dtype or by the user defined value in \nposinf keyword and -infinity is replaced by the most negative finite \nfloating point values representable by x.dtype or by the user defined \nvalue in neginf keyword.\nFor complex dtypes, the above is applied to each of the real and\nimaginary components of x separately.\nIf x is not inexact, then no replacements are made.\n\nParameters\n\nxscalar or array_likeInput data.\n\ncopybool, optionalWhether to create a copy of x (True) or to replace values\nin-place (False)", "description": "", "code-info": {"name": "numpy.nan_to_num", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " nan", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " posinf", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " neginf", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)", "item_id": "numpy.random.Generator.multivariate_normal", "summary": "Draw random samples from a multivariate normal distribution.\nThe multivariate normal, multinormal or Gaussian distribution is a\ngeneralization of the one-dimensional normal distribution to higher\ndimensions", "description": "", "code-info": {"name": "numpy.random.Generator.multivariate_normal", "parameters": [{"name": "mean", "is_optional": false, "type": "others", "description": ""}, {"name": " cov", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " check_valid", "is_optional": true, "type": "string", "default_value": "'warn'", "description": ""}, {"name": " tol", "is_optional": true, "type": "others", "default_value": "1e-8", "description": ""}]}},
{"code": "numpy.char.multiply(a, i)", "item_id": "numpy.char.multiply", "summary": "Return (a * i), that is string multiple concatenation,\nelement-wise.\nValues in i of less than 0 are treated as 0 (which yields an\nempty string).\n\nParameters\n\naarray_like of str or unicode\niarray_like of ints\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input types\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.multiply", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " i", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)", "item_id": "numpy.random.multivariate_normal", "summary": "Draw random samples from a multivariate normal distribution.\nThe multivariate normal, multinormal or Gaussian distribution is a\ngeneralization of the one-dimensional normal distribution to higher\ndimensions", "description": "", "code-info": {"name": "numpy.random.multivariate_normal", "parameters": [{"name": "mean", "is_optional": false, "type": "others", "description": ""}, {"name": " cov", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " check_valid", "is_optional": true, "type": "string", "default_value": "'warn'", "description": ""}, {"name": " tol", "is_optional": true, "type": "others", "default_value": "1e-8", "description": ""}]}},
{"code": "numpy.multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.multiply", "summary": "Multiply arguments element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays to be multiplied", "description": "", "code-info": {"name": "numpy.multiply", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.multivariate_hypergeometric(colors, nsample, size=None, method='marginals')", "item_id": "numpy.random.Generator.multivariate_hypergeometric", "summary": "Generate variates from a multivariate hypergeometric distribution.\nThe multivariate hypergeometric distribution is a generalization\nof the hypergeometric distribution.\nChoose nsample items at random without replacement from a\ncollection with N distinct types", "description": "", "code-info": {"name": "numpy.random.Generator.multivariate_hypergeometric", "parameters": [{"name": "colors", "is_optional": false, "type": "others", "description": ""}, {"name": " nsample", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " method", "is_optional": true, "type": "string", "default_value": "'marginals'", "description": ""}]}},
{"code": "numpy.random.RandomState.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)", "item_id": "numpy.random.RandomState.multivariate_normal", "summary": "Draw random samples from a multivariate normal distribution.\nThe multivariate normal, multinormal or Gaussian distribution is a\ngeneralization of the one-dimensional normal distribution to higher\ndimensions", "description": "", "code-info": {"name": "numpy.random.RandomState.multivariate_normal", "parameters": [{"name": "mean", "is_optional": false, "type": "others", "description": ""}, {"name": " cov", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " check_valid", "is_optional": true, "type": "string", "default_value": "'warn'", "description": ""}, {"name": " tol", "is_optional": true, "type": "others", "default_value": "1e-8", "description": ""}]}},
{"code": "numpy.random.RandomState.multinomial(n, pvals, size=None)", "item_id": "numpy.random.RandomState.multinomial", "summary": "Draw samples from a multinomial distribution.\nThe multinomial distribution is a multivariate generalization of the\nbinomial distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.multinomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " pvals", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.multinomial(n, pvals, size=None)", "item_id": "numpy.random.Generator.multinomial", "summary": "Draw samples from a multinomial distribution.\nThe multinomial distribution is a multivariate generalization of the\nbinomial distribution", "description": "", "code-info": {"name": "numpy.random.Generator.multinomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " pvals", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.multinomial(n, pvals, size=None)", "item_id": "numpy.random.multinomial", "summary": "Draw samples from a multinomial distribution.\nThe multinomial distribution is a multivariate generalization of the\nbinomial distribution", "description": "", "code-info": {"name": "numpy.random.multinomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " pvals", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.linalg.multi_dot(arrays)", "item_id": "numpy.linalg.multi_dot", "summary": "Compute the dot product of two or more arrays in a single function call,\nwhile automatically selecting the fastest evaluation order.\nmulti_dot chains numpy.dot and uses optimal parenthesization\nof the matrices [1] [2]", "description": "", "code-info": {"name": "numpy.linalg.multi_dot", "parameters": [{"name": "arrays", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.MT19937(seed=None)", "item_id": "numpy.random.MT19937", "summary": "Container for the Mersenne Twister pseudo-random number generator.\n\nParameters\n\nseed{None, int, array_like[ints], SeedSequence}, optionalA seed to initialize the BitGenerator", "description": "", "code-info": {"name": "numpy.random.MT19937", "parameters": [{"name": "seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.msort(a)", "item_id": "numpy.msort", "summary": "Return a copy of an array sorted along the first axis.\n\nParameters\n\naarray_likeArray to be sorted.\n\n\n\nReturns\n\nsorted_arrayndarrayArray of the same type and shape as a.\n\n\n\n\n\nSee also\nsort\n\nNotes\nnp.msort(a) is equivalent to  np.sort(a, axis=0).\n", "description": "", "code-info": {"name": "numpy.msort", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.moveaxis(a, source, destination)", "item_id": "numpy.moveaxis", "summary": "Move axes of an array to new positions.\nOther axes remain in their original order.\n\nNew in version 1.11.0.\n\n\nParameters\n\nanp.ndarrayThe array whose axes should be reordered.\n\nsourceint or sequence of intOriginal positions of the axes to move", "description": "", "code-info": {"name": "numpy.moveaxis", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " source", "is_optional": false, "type": "others", "description": ""}, {"name": " destination", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.modf(x, [out1, out2, ]/, [out=(None, None)", "item_id": "numpy.modf", "summary": "Return the fractional and integral parts of an array, element-wise.\nThe fractional and integral parts are negative if the given number is\nnegative.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.modf", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " [out1", "is_optional": false, "type": "others", "description": ""}, {"name": " out2", "is_optional": false, "type": "others", "description": ""}, {"name": " ]/", "is_optional": false, "type": "others", "description": ""}, {"name": " [out", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.mod(a, values)", "item_id": "numpy.char.mod", "summary": "Return (a % i), that is pre-Python 2.6 string formatting\n(iterpolation), element-wise for a pair of array_likes of str\nor unicode.\n\nParameters\n\naarray_like of str or unicode\nvaluesarray_like of valuesThese values will be element-wise interpolated into the string.\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input types\n\n\n\n\n\nSee also\nstr.__mod__\n\n", "description": "", "code-info": {"name": "numpy.char.mod", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.mod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.mod", "summary": "Return element-wise remainder of division.\nComputes the remainder complementary to the floor_divide function", "description": "", "code-info": {"name": "numpy.mod", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.mirr(values, finance_rate, reinvest_rate)", "item_id": "numpy.mirr", "summary": "Modified internal rate of return.\n\nDeprecated since version 1.18: mirr is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nParameters\n\nvaluesarray_likeCash flows (must contain at least one positive and one negative\nvalue) or nan is returned", "description": "", "code-info": {"name": "numpy.mirr", "parameters": [{"name": "values", "is_optional": false, "type": "others", "description": ""}, {"name": " finance_rate", "is_optional": false, "type": "others", "description": ""}, {"name": " reinvest_rate", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.mintypecode(typechars, typeset='GDFgdf', default='d')", "item_id": "numpy.mintypecode", "summary": "Return the character for the minimum-size type to which given types can\nbe safely cast.\nThe returned type character must represent the smallest size dtype such\nthat an array of the returned type can handle the data from an array of\nall types in typechars (or if typechars is an array, then its\ndtype.char).\n\nParameters\n\ntypecharslist of str or array_likeIf a list of strings, each string should represent a dtype.\nIf array_like, the character representation of the array dtype is used.\n\ntypesetstr or list of str, optionalThe set of characters that the returned character is chosen from.\nThe default set is \u2018GDFgdf\u2019.\n\ndefaultstr, optionalThe default character, this is returned if none of the characters in\ntypechars matches a character in typeset.\n\n\n\nReturns\n\ntypecharstrThe character representing the minimum-size type that was found.\n\n\n\n\n\nSee also\ndtype, sctype2char, maximum_sctype\n\nExamples\n&gt;&gt;&gt; np.mintypecode(['d', 'f', 'S'])\n'd'\n&gt;&gt;&gt; x = np.array([1.1, 2-3.j])\n&gt;&gt;&gt; np.mintypecode(x)\n'D'\n\n\n&gt;&gt;&gt; np.mintypecode('abceh', default='G')\n'G'\n\n\n", "description": "", "code-info": {"name": "numpy.mintypecode", "parameters": [{"name": "typechars", "is_optional": false, "type": "others", "description": ""}, {"name": " typeset", "is_optional": true, "type": "string", "default_value": "'GDFgdf'", "description": ""}, {"name": " default", "is_optional": true, "type": "string", "default_value": "'d'", "description": ""}]}},
{"code": "numpy.minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.minimum", "summary": "Element-wise minimum of array elements.\nCompare two arrays and returns a new array containing the element-wise\nminima", "description": "", "code-info": {"name": "numpy.minimum", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.mini(self, axis=None)", "item_id": "numpy.ma.masked_array.mini", "summary": "Return the array minimum along the specified axis.\n\nDeprecated since version 1.13.0: This function is identical to both:\n\n\nself.min(keepdims=True, axis=axis).squeeze(axis=axis)\nnp.ma.minimum.reduce(self, axis=axis)\n\n\nTypically though, self.min(axis=axis) is sufficient.\n\n\nParameters\n\naxisint, optionalThe axis along which to find the minima", "description": "", "code-info": {"name": "numpy.ma.masked_array.mini", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.min_scalar_type(a)", "item_id": "numpy.min_scalar_type", "summary": "For scalar a, returns the data type with the smallest size\nand smallest scalar kind which can hold its value", "description": "", "code-info": {"name": "numpy.min_scalar_type", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.min()", "item_id": "numpy.record.min", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.min", "parameters": []}},
{"code": "numpy.recarray.min(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.recarray.min", "summary": "Return the minimum along a given axis.\nRefer to numpy.amin for full documentation.\n\nSee also\n\nnumpy.aminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.min", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ndarray.min(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.ndarray.min", "summary": "Return the minimum along a given axis.\nRefer to numpy.amin for full documentation.\n\nSee also\n\nnumpy.aminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.min", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.memmap.min(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.memmap.min", "summary": "Return the minimum along a given axis.\nRefer to numpy.amin for full documentation.\n\nSee also\n\nnumpy.aminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.min", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.matrix.min(self, axis=None, out=None)", "item_id": "numpy.matrix.min", "summary": "Return the minimum value along an axis.\n\nParameters\n\nSee `amin` for complete descriptions.\n\n\n\n\nSee also\namin, ndarray.min\n\nNotes\nThis is the same as ndarray.min, but returns a matrix object\nwhere ndarray.min would return an ndarray.\nExamples\n&gt;&gt;&gt; x = -np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]])\n&gt;&gt;&gt; x.min()\n-11\n&gt;&gt;&gt; x.min(0)\nmatrix([[ -8,  -9, -10, -11]])\n&gt;&gt;&gt; x.min(1)\nmatrix([[ -3],\n        [ -7],\n        [-11]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.min", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.min()", "item_id": "numpy.ma.MaskType.min", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.min", "parameters": []}},
{"code": "numpy.ma.MaskedArray.min(self, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.min", "summary": "Return the minimum along a given axis.\n\nParameters\n\naxis{None, int}, optionalAxis along which to operate", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.min", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.masked_array.min(self, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.min", "summary": "Return the minimum along a given axis.\n\nParameters\n\naxis{None, int}, optionalAxis along which to operate", "description": "", "code-info": {"name": "numpy.ma.masked_array.min", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.min()", "item_id": "numpy.generic.min", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.min", "parameters": []}},
{"code": "numpy.chararray.min(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.chararray.min", "summary": "Return the minimum along a given axis.\nRefer to numpy.amin for full documentation.\n\nSee also\n\nnumpy.aminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.min", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.meshgrid(*xi, **kwargs)", "item_id": "numpy.meshgrid", "summary": "Return coordinate matrices from coordinate vectors.\nMake N-D coordinate arrays for vectorized evaluations of\nN-D scalar/vector fields over N-D grids, given\none-dimensional coordinate arrays x1, x2,\u2026, xn.\n\nChanged in version 1.9: 1-D and 0-D cases are allowed.\n\n\nParameters\n\nx1, x2,\u2026, xnarray_like1-D arrays representing the coordinates of a grid.\n\nindexing{\u2018xy\u2019, \u2018ij\u2019}, optionalCartesian (\u2018xy\u2019, default) or matrix (\u2018ij\u2019) indexing of output.\nSee Notes for more details.\n\nNew in version 1.7.0.\n\n\nsparsebool, optionalIf True a sparse grid is returned in order to conserve memory.\nDefault is False.\n\nNew in version 1.7.0.\n\n\ncopybool, optionalIf False, a view into the original arrays are returned in order to\nconserve memory", "description": "", "code-info": {"name": "numpy.meshgrid", "parameters": [{"name": "*xi", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.min(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.char.chararray.min", "summary": "Return the minimum along a given axis.\nRefer to numpy.amin for full documentation.\n\nSee also\n\nnumpy.aminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.min", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.min(obj, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.min", "summary": "Return the minimum along a given axis.\n\nParameters\n\naxis{None, int}, optionalAxis along which to operate", "description": "", "code-info": {"name": "numpy.ma.min", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)", "item_id": "numpy.ma.median", "summary": "Compute the median along the specified axis.\nReturns the median of the array elements.\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\naxisint, optionalAxis along which the medians are computed", "description": "", "code-info": {"name": "numpy.ma.median", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)", "item_id": "numpy.median", "summary": "Compute the median along the specified axis.\nReturns the median of the array elements.\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\naxis{int, sequence of int, None}, optionalAxis or axes along which the medians are computed", "description": "", "code-info": {"name": "numpy.median", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " overwrite_input", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.mean(axis=None, dtype=None, out=None, keepdims=False)", "item_id": "numpy.ndarray.mean", "summary": "Returns the average of the array elements along given axis.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.meanequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.mean", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.record.mean()", "item_id": "numpy.record.mean", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.mean", "parameters": []}},
{"code": "numpy.recarray.mean(axis=None, dtype=None, out=None, keepdims=False)", "item_id": "numpy.recarray.mean", "summary": "Returns the average of the array elements along given axis.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.meanequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.mean", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.matrix.mean(self, axis=None, dtype=None, out=None)", "item_id": "numpy.matrix.mean", "summary": "Returns the average of the matrix elements along the given axis.\nRefer to numpy.mean for full documentation.\n\nSee also\nnumpy.mean\n\nNotes\nSame as ndarray.mean except that, where that returns an ndarray,\nthis returns a matrix object.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3, 4)))\n&gt;&gt;&gt; x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.mean()\n5.5\n&gt;&gt;&gt; x.mean(0)\nmatrix([[4., 5., 6., 7.]])\n&gt;&gt;&gt; x.mean(1)\nmatrix([[ 1.5],\n        [ 5.5],\n        [ 9.5]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.mean", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.mean()", "item_id": "numpy.ma.MaskType.mean", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.mean", "parameters": []}},
{"code": "numpy.memmap.mean(axis=None, dtype=None, out=None, keepdims=False)", "item_id": "numpy.memmap.mean", "summary": "Returns the average of the array elements along given axis.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.meanequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.mean", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.masked_array.mean(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.mean", "summary": "Returns the average of the array elements along given axis.\nMasked entries are ignored, and result elements which are not\nfinite will be masked.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.ndarray.meancorresponding function for ndarrays\n\nnumpy.meanEquivalent function\n\nnumpy.ma.averageWeighted average.\n\n\n\nExamples\n&gt;&gt;&gt; a = np.ma.array([1,2,3], mask=[False, False, True])\n&gt;&gt;&gt; a\nmasked_array(data=[1, 2, --],\n             mask=[False, False,  True],\n       fill_value=999999)\n&gt;&gt;&gt; a.mean()\n1.5\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.mean", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.mean(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.mean", "summary": "Returns the average of the array elements along given axis.\nMasked entries are ignored, and result elements which are not\nfinite will be masked.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.ndarray.meancorresponding function for ndarrays\n\nnumpy.meanEquivalent function\n\nnumpy.ma.averageWeighted average.\n\n\n\nExamples\n&gt;&gt;&gt; a = np.ma.array([1,2,3], mask=[False, False, True])\n&gt;&gt;&gt; a\nmasked_array(data=[1, 2, --],\n             mask=[False, False,  True],\n       fill_value=999999)\n&gt;&gt;&gt; a.mean()\n1.5\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.mean", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.mean()", "item_id": "numpy.generic.mean", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.mean", "parameters": []}},
{"code": "numpy.ma.mean(self, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.mean", "summary": "Returns the average of the array elements along given axis.\nMasked entries are ignored, and result elements which are not\nfinite will be masked.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.ndarray.meancorresponding function for ndarrays\n\nnumpy.meanEquivalent function\n\nnumpy.ma.averageWeighted average.\n\n\n\nExamples\n&gt;&gt;&gt; a = np.ma.array([1,2,3], mask=[False, False, True])\n&gt;&gt;&gt; a\nmasked_array(data=[1, 2, --],\n             mask=[False, False,  True],\n       fill_value=999999)\n&gt;&gt;&gt; a.mean()\n1.5\n\n\n", "description": "", "code-info": {"name": "numpy.ma.mean", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.char.chararray.mean(axis=None, dtype=None, out=None, keepdims=False)", "item_id": "numpy.char.chararray.mean", "summary": "Returns the average of the array elements along given axis.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.meanequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.mean", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.mean(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.mean", "summary": "Compute the arithmetic mean along the specified axis.\nReturns the average of the array elements", "description": "", "code-info": {"name": "numpy.mean", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.chararray.mean(axis=None, dtype=None, out=None, keepdims=False)", "item_id": "numpy.chararray.mean", "summary": "Returns the average of the array elements along given axis.\nRefer to numpy.mean for full documentation.\n\nSee also\n\nnumpy.meanequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.mean", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.may_share_memory(a, b, max_work=None)", "item_id": "numpy.may_share_memory", "summary": "Determine if two arrays might share memory\nA return of True does not necessarily mean that the two arrays\nshare any element", "description": "", "code-info": {"name": "numpy.may_share_memory", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " max_work", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.maximum_sctype(t)", "item_id": "numpy.maximum_sctype", "summary": "Return the scalar type of highest precision of the same kind as the input.\n\nParameters\n\ntdtype or dtype specifierThe input data type", "description": "", "code-info": {"name": "numpy.maximum_sctype", "parameters": [{"name": "t", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.maximum_fill_value(obj)", "item_id": "numpy.ma.maximum_fill_value", "summary": "Return the minimum value that can be represented by the dtype of an object.\nThis function is useful for calculating a fill value suitable for\ntaking the maximum of an array with a given dtype.\n\nParameters\n\nobjndarray, dtype or scalarAn object that can be queried for it\u2019s numeric type.\n\n\n\nReturns\n\nvalscalarThe minimum representable value.\n\n\n\nRaises\n\nTypeErrorIf obj isn\u2019t a suitable numeric type.\n\n\n\n\n\nSee also\n\nminimum_fill_valueThe inverse function.\n\nset_fill_valueSet the filling value of a masked array.\n\nMaskedArray.fill_valueReturn current fill value.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.int8()\n&gt;&gt;&gt; ma.maximum_fill_value(a)\n-128\n&gt;&gt;&gt; a = np.int32()\n&gt;&gt;&gt; ma.maximum_fill_value(a)\n-2147483648\n\n\nAn array of numeric data can also be passed.\n&gt;&gt;&gt; a = np.array([1, 2, 3], dtype=np.int8)\n&gt;&gt;&gt; ma.maximum_fill_value(a)\n-128\n&gt;&gt;&gt; a = np.array([1, 2, 3], dtype=np.float32)\n&gt;&gt;&gt; ma.maximum_fill_value(a)\n-inf\n\n\n", "description": "", "code-info": {"name": "numpy.ma.maximum_fill_value", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.maximum", "summary": "Element-wise maximum of array elements.\nCompare two arrays and returns a new array containing the element-wise\nmaxima", "description": "", "code-info": {"name": "numpy.maximum", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.max()", "item_id": "numpy.record.max", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.max", "parameters": []}},
{"code": "numpy.recarray.max(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.recarray.max", "summary": "Return the maximum along a given axis.\nRefer to numpy.amax for full documentation.\n\nSee also\n\nnumpy.amaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.max", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ndarray.max(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.ndarray.max", "summary": "Return the maximum along a given axis.\nRefer to numpy.amax for full documentation.\n\nSee also\n\nnumpy.amaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.max", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.memmap.max(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.memmap.max", "summary": "Return the maximum along a given axis.\nRefer to numpy.amax for full documentation.\n\nSee also\n\nnumpy.amaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.max", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.matrix.max(self, axis=None, out=None)", "item_id": "numpy.matrix.max", "summary": "Return the maximum value along an axis.\n\nParameters\n\nSee `amax` for complete descriptions\n\n\n\n\nSee also\namax, ndarray.max\n\nNotes\nThis is the same as ndarray.max, but returns a matrix object\nwhere ndarray.max would return an ndarray.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.max()\n11\n&gt;&gt;&gt; x.max(0)\nmatrix([[ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.max(1)\nmatrix([[ 3],\n        [ 7],\n        [11]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.max", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.max()", "item_id": "numpy.ma.MaskType.max", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.max", "parameters": []}},
{"code": "numpy.ma.MaskedArray.max(self, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.max", "summary": "Return the maximum along a given axis.\n\nParameters\n\naxis{None, int}, optionalAxis along which to operate", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.max", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.masked_array.max(self, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.max", "summary": "Return the maximum along a given axis.\n\nParameters\n\naxis{None, int}, optionalAxis along which to operate", "description": "", "code-info": {"name": "numpy.ma.masked_array.max", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.max()", "item_id": "numpy.generic.max", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.max", "parameters": []}},
{"code": "numpy.char.chararray.max(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.char.chararray.max", "summary": "Return the maximum along a given axis.\nRefer to numpy.amax for full documentation.\n\nSee also\n\nnumpy.amaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.max", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.max(obj, axis=None, out=None, fill_value=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.max", "summary": "Return the maximum along a given axis.\n\nParameters\n\naxis{None, int}, optionalAxis along which to operate", "description": "", "code-info": {"name": "numpy.ma.max", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.linalg.matrix_rank(M, tol=None, hermitian=False)", "item_id": "numpy.linalg.matrix_rank", "summary": "Return matrix rank of array using SVD method\nRank of the array is the number of singular values of the array that are\ngreater than tol.\n\nChanged in version 1.14: Can now operate on stacks of matrices\n\n\nParameters\n\nM{(M,), (\u2026, M, N)} array_likeInput vector or stack of matrices.\n\ntol(\u2026) array_like, float, optionalThreshold below which SVD values are considered zero", "description": "", "code-info": {"name": "numpy.linalg.matrix_rank", "parameters": [{"name": "M", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " hermitian", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.chararray.max(axis=None, out=None, keepdims=False, initial=&lt;no value&gt;, where=True)", "item_id": "numpy.chararray.max", "summary": "Return the maximum along a given axis.\nRefer to numpy.amax for full documentation.\n\nSee also\n\nnumpy.amaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.max", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.linalg.matrix_power(a, n)", "item_id": "numpy.linalg.matrix_power", "summary": "Raise a square matrix to the (integer) power n.\nFor positive integers n, the power is computed by repeated matrix\nsquarings and matrix multiplications", "description": "", "code-info": {"name": "numpy.linalg.matrix_power", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix(data, dtype=None, copy=True)", "item_id": "numpy.matrix", "summary": "\nNote\nIt is no longer recommended to use this class, even for linear\nalgebra", "description": "", "code-info": {"name": "numpy.matrix", "parameters": [{"name": "data", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.matmul(x1, x2, /, out=None, *, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.matmul", "summary": "Matrix product of two arrays.\n\nParameters\n\nx1, x2array_likeInput arrays, scalars not allowed.\n\noutndarray, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.matmul", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.mat(data, dtype=None)", "item_id": "numpy.mat", "summary": "Interpret the input as a matrix.\nUnlike matrix, asmatrix does not make a copy if the input is already\na matrix or an ndarray", "description": "", "code-info": {"name": "numpy.mat", "parameters": [{"name": "data", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_where(condition, a, copy=True)", "item_id": "numpy.ma.masked_where", "summary": "Mask an array where a condition is met.\nReturn a as an array masked where condition is True.\nAny masked values of a or condition are also masked in the output.\n\nParameters\n\nconditionarray_likeMasking condition", "description": "", "code-info": {"name": "numpy.ma.masked_where", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " a", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True)", "item_id": "numpy.ma.masked_values", "summary": "Mask using floating point equality.\nReturn a MaskedArray, masked where the data in array x are approximately\nequal to value, determined using isclose", "description": "", "code-info": {"name": "numpy.ma.masked_values", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " rtol", "is_optional": true, "type": "others", "default_value": "1e-05", "description": ""}, {"name": " atol", "is_optional": true, "type": "others", "default_value": "1e-08", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shrink", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_object(x, value, copy=True, shrink=True)", "item_id": "numpy.ma.masked_object", "summary": "Mask the array x where the data are exactly equal to value.\nThis function is similar to masked_values, but only suitable\nfor object arrays: for floating point, use masked_values instead.\n\nParameters\n\nxarray_likeArray to mask\n\nvalueobjectComparison value\n\ncopy{True, False}, optionalWhether to return a copy of x.\n\nshrink{True, False}, optionalWhether to collapse a mask full of False to nomask\n\n\n\nReturns\n\nresultMaskedArrayThe result of masking x where equal to value.\n\n\n\n\n\nSee also\n\nmasked_whereMask where a condition is met.\n\nmasked_equalMask where equal to a given value (integers).\n\nmasked_valuesMask using floating point equality.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; food = np.array(['green_eggs', 'ham'], dtype=object)\n&gt;&gt;&gt; # don't eat spoiled food\n&gt;&gt;&gt; eat = ma.masked_object(food, 'green_eggs')\n&gt;&gt;&gt; eat\nmasked_array(data=[--, 'ham'],\n             mask=[ True, False],\n       fill_value='green_eggs',\n            dtype=object)\n&gt;&gt;&gt; # plain ol` ham is boring\n&gt;&gt;&gt; fresh_food = np.array(['cheese', 'ham', 'pineapple'], dtype=object)\n&gt;&gt;&gt; eat = ma.masked_object(fresh_food, 'green_eggs')\n&gt;&gt;&gt; eat\nmasked_array(data=['cheese', 'ham', 'pineapple'],\n             mask=False,\n       fill_value='green_eggs',\n            dtype=object)\n\n\nNote that mask is set to nomask if possible.\n&gt;&gt;&gt; eat\nmasked_array(data=['cheese', 'ham', 'pineapple'],\n             mask=False,\n       fill_value='green_eggs',\n            dtype=object)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_object", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shrink", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_outside(x, v1, v2, copy=True)", "item_id": "numpy.ma.masked_outside", "summary": "Mask an array outside a given interval.\nShortcut to masked_where, where condition is True for x outside\nthe interval [v1,v2] (x &lt; v1)|(x &gt; v2).\nThe boundaries v1 and v2 can be given in either order.\n\nSee also\n\nmasked_whereMask where a condition is met.\n\n\n\nNotes\nThe array x is prefilled with its filling value.\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n&gt;&gt;&gt; ma.masked_outside(x, -0.3, 0.3)\nmasked_array(data=[--, --, 0.01, 0.2, --, --],\n             mask=[ True,  True, False, False,  True,  True],\n       fill_value=1e+20)\n\n\nThe order of v1 and v2 doesn\u2019t matter.\n&gt;&gt;&gt; ma.masked_outside(x, 0.3, -0.3)\nmasked_array(data=[--, --, 0.01, 0.2, --, --],\n             mask=[ True,  True, False, False,  True,  True],\n       fill_value=1e+20)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_outside", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " v1", "is_optional": false, "type": "others", "description": ""}, {"name": " v2", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_not_equal(x, value, copy=True)", "item_id": "numpy.ma.masked_not_equal", "summary": "Mask an array where not equal to a given value.\nThis function is a shortcut to masked_where, with\ncondition = (x != value).\n\nSee also\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.arange(4)\n&gt;&gt;&gt; a\narray([0, 1, 2, 3])\n&gt;&gt;&gt; ma.masked_not_equal(a, 2)\nmasked_array(data=[--, --, 2, --],\n             mask=[ True,  True, False,  True],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_not_equal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_less(x, value, copy=True)", "item_id": "numpy.ma.masked_less", "summary": "Mask an array where less than a given value.\nThis function is a shortcut to masked_where, with\ncondition = (x &lt; value).\n\nSee also\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.arange(4)\n&gt;&gt;&gt; a\narray([0, 1, 2, 3])\n&gt;&gt;&gt; ma.masked_less(a, 2)\nmasked_array(data=[--, --, 2, 3],\n             mask=[ True,  True, False, False],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_less", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_less_equal(x, value, copy=True)", "item_id": "numpy.ma.masked_less_equal", "summary": "Mask an array where less than or equal to a given value.\nThis function is a shortcut to masked_where, with\ncondition = (x &lt;= value).\n\nSee also\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.arange(4)\n&gt;&gt;&gt; a\narray([0, 1, 2, 3])\n&gt;&gt;&gt; ma.masked_less_equal(a, 2)\nmasked_array(data=[--, --, --, 3],\n             mask=[ True,  True,  True, False],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_less_equal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_invalid(a, copy=True)", "item_id": "numpy.ma.masked_invalid", "summary": "Mask an array where invalid values occur (NaNs or infs).\nThis function is a shortcut to masked_where, with\ncondition = ~(np.isfinite(a))", "description": "", "code-info": {"name": "numpy.ma.masked_invalid", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_inside(x, v1, v2, copy=True)", "item_id": "numpy.ma.masked_inside", "summary": "Mask an array inside a given interval.\nShortcut to masked_where, where condition is True for x inside\nthe interval [v1,v2] (v1 &lt;= x &lt;= v2)", "description": "", "code-info": {"name": "numpy.ma.masked_inside", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " v1", "is_optional": false, "type": "others", "description": ""}, {"name": " v2", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_greater_equal(x, value, copy=True)", "item_id": "numpy.ma.masked_greater_equal", "summary": "Mask an array where greater than or equal to a given value.\nThis function is a shortcut to masked_where, with\ncondition = (x &gt;= value).\n\nSee also\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.arange(4)\n&gt;&gt;&gt; a\narray([0, 1, 2, 3])\n&gt;&gt;&gt; ma.masked_greater_equal(a, 2)\nmasked_array(data=[0, 1, --, --],\n             mask=[False, False,  True,  True],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_greater_equal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_greater(x, value, copy=True)", "item_id": "numpy.ma.masked_greater", "summary": "Mask an array where greater than a given value.\nThis function is a shortcut to masked_where, with\ncondition = (x &gt; value).\n\nSee also\n\nmasked_whereMask where a condition is met.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = np.arange(4)\n&gt;&gt;&gt; a\narray([0, 1, 2, 3])\n&gt;&gt;&gt; ma.masked_greater(a, 2)\nmasked_array(data=[0, 1, 2, --],\n             mask=[False, False, False,  True],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_greater", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_equal(x, value, copy=True)", "item_id": "numpy.ma.masked_equal", "summary": "Mask an array where equal to a given value.\nThis function is a shortcut to masked_where, with\ncondition = (x == value)", "description": "", "code-info": {"name": "numpy.ma.masked_equal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_all_like(arr)", "item_id": "numpy.ma.masked_all_like", "summary": "Empty masked array with the properties of an existing array.\nReturn an empty masked array of the same shape and dtype as\nthe array arr, where all the data are masked.\n\nParameters\n\narrndarrayAn array describing the shape and dtype of the required MaskedArray.\n\n\n\nReturns\n\naMaskedArrayA masked array with all data masked.\n\n\n\nRaises\n\nAttributeErrorIf arr doesn\u2019t have a shape attribute (i.e", "description": "", "code-info": {"name": "numpy.ma.masked_all_like", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_all(shape, dtype=&lt;class 'float'&gt;)", "item_id": "numpy.ma.masked_all", "summary": "Empty masked array with all elements masked.\nReturn an empty masked array of the given shape and dtype, where all the\ndata are masked.\n\nParameters\n\nshapetupleShape of the required MaskedArray.\n\ndtypedtype, optionalData type of the output.\n\n\n\nReturns\n\naMaskedArrayA masked array with all data masked.\n\n\n\n\n\nSee also\n\nmasked_all_likeEmpty masked array modelled on an existing array.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; ma.masked_all((3, 3))\nmasked_array(\n  data=[[--, --, --],\n        [--, --, --],\n        [--, --, --]],\n  mask=[[ True,  True,  True],\n        [ True,  True,  True],\n        [ True,  True,  True]],\n  fill_value=1e+20,\n  dtype=float64)\n\n\nThe dtype parameter defines the underlying data type.\n&gt;&gt;&gt; a = ma.masked_all((3, 3))\n&gt;&gt;&gt; a.dtype\ndtype('float64')\n&gt;&gt;&gt; a = ma.masked_all((3, 3), dtype=np.int32)\n&gt;&gt;&gt; a.dtype\ndtype('int32')\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_all", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.mapparms(self)", "item_id": "numpy.polynomial.polynomial.Polynomial.mapparms", "summary": "Return the mapping parameters.\nThe returned values define a linear map off + scl*x that is\napplied to the input arguments before the series is evaluated", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.mapparms", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.mapparms(self)", "item_id": "numpy.polynomial.legendre.Legendre.mapparms", "summary": "Return the mapping parameters.\nThe returned values define a linear map off + scl*x that is\napplied to the input arguments before the series is evaluated", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.mapparms", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.mapparms(self)", "item_id": "numpy.polynomial.laguerre.Laguerre.mapparms", "summary": "Return the mapping parameters.\nThe returned values define a linear map off + scl*x that is\napplied to the input arguments before the series is evaluated", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.mapparms", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.mapparms(self)", "item_id": "numpy.polynomial.hermite_e.HermiteE.mapparms", "summary": "Return the mapping parameters.\nThe returned values define a linear map off + scl*x that is\napplied to the input arguments before the series is evaluated", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.mapparms", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.mapparms(self)", "item_id": "numpy.polynomial.hermite.Hermite.mapparms", "summary": "Return the mapping parameters.\nThe returned values define a linear map off + scl*x that is\napplied to the input arguments before the series is evaluated", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.mapparms", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.mapparms(self)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.mapparms", "summary": "Return the mapping parameters.\nThe returned values define a linear map off + scl*x that is\napplied to the input arguments before the series is evaluated", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.mapparms", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polyutils.mapparms(old, new)", "item_id": "numpy.polynomial.polyutils.mapparms", "summary": "Linear map parameters between domains.\nReturn the parameters of the linear map offset + scale*x that maps\nold to new such that old[i] -&gt; new[i], i = 0, 1.\n\nParameters\n\nold, newarray_likeDomains", "description": "", "code-info": {"name": "numpy.polynomial.polyutils.mapparms", "parameters": [{"name": "old", "is_optional": false, "type": "others", "description": ""}, {"name": " new", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polyutils.mapdomain(x, old, new)", "item_id": "numpy.polynomial.polyutils.mapdomain", "summary": "Apply linear map to input points.\nThe linear map offset + scale*x that maps the domain old to\nthe domain new is applied to the points x.\n\nParameters\n\nxarray_likePoints to be mapped", "description": "", "code-info": {"name": "numpy.polynomial.polyutils.mapdomain", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " old", "is_optional": false, "type": "others", "description": ""}, {"name": " new", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.make_mask_none(newshape, dtype=None)", "item_id": "numpy.ma.make_mask_none", "summary": "Return a boolean mask of the given shape, filled with False.\nThis function returns a boolean ndarray with all entries False, that can\nbe used in common mask manipulations", "description": "", "code-info": {"name": "numpy.ma.make_mask_none", "parameters": [{"name": "newshape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.make_mask_descr(ndtype)", "item_id": "numpy.ma.make_mask_descr", "summary": "Construct a dtype description list from a given dtype.\nReturns a new dtype object, with the type of all fields in ndtype to a\nboolean type", "description": "", "code-info": {"name": "numpy.ma.make_mask_descr", "parameters": [{"name": "ndtype", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.MachAr(float_conv=&lt;class 'float'&gt;, int_conv=&lt;class 'int'&gt;, float_to_float=&lt;class 'float'&gt;, float_to_str=&lt;function MachAr.&lt;lambda&gt;&gt;, title='Python floating point number')", "item_id": "numpy.MachAr", "summary": "Diagnosing machine parameters.\n\nParameters\n\nfloat_convfunction, optionalFunction that converts an integer or integer array to a float\nor float array", "description": "", "code-info": {"name": "numpy.MachAr", "parameters": [{"name": "float_conv", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}, {"name": " int_conv", "is_optional": true, "type": "others", "default_value": "&lt;class 'int'&gt;", "description": ""}, {"name": " float_to_float", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}, {"name": " float_to_str", "is_optional": true, "type": "others", "default_value": "&lt;function MachAr.&lt;lambda&gt;&gt;", "description": ""}, {"name": " title", "is_optional": true, "type": "string", "default_value": "'Python floating point number'", "description": ""}]}},
{"code": "numpy.linalg.lstsq(a, b, rcond='warn')", "item_id": "numpy.linalg.lstsq", "summary": "Return the least-squares solution to a linear matrix equation.\nSolves the equation  by computing a vector x that\nminimizes the squared Euclidean 2-norm .\nThe equation may be under-, well-, or over-determined (i.e., the\nnumber of linearly independent rows of a can be less than, equal\nto, or greater than its number of linearly independent columns).\nIf a is square and of full rank, then x (but for round-off error)\nis the \u201cexact\u201d solution of the equation.\n\nParameters\n\na(M, N) array_like\u201cCoefficient\u201d matrix.\n\nb{(M,), (M, K)} array_likeOrdinate or \u201cdependent variable\u201d values", "description": "", "code-info": {"name": "numpy.linalg.lstsq", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "string", "default_value": "'warn'", "description": ""}]}},
{"code": "numpy.chararray.lstrip(self, chars=None)", "item_id": "numpy.chararray.lstrip", "summary": "For each element in self, return a copy with the leading characters\nremoved.\n\nSee also\nchar.lstrip\n\n", "description": "", "code-info": {"name": "numpy.chararray.lstrip", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.make_mask(m, copy=False, shrink=True, dtype=&lt;class 'numpy.bool_'&gt;)", "item_id": "numpy.ma.make_mask", "summary": "Create a boolean mask from an array.\nReturn m as a boolean mask, creating a copy if necessary or requested.\nThe function can accept any sequence that is convertible to integers,\nor nomask", "description": "", "code-info": {"name": "numpy.ma.make_mask", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " shrink", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'numpy.bool_'&gt;", "description": ""}]}},
{"code": "numpy.char.lstrip(a, chars=None)", "item_id": "numpy.char.lstrip", "summary": "For each element in a, return a copy with the leading characters\nremoved.\nCalls str.lstrip element-wise.\n\nParameters\n\naarray-like, {str, unicode}Input array.\n\nchars{str, unicode}, optionalThe chars argument is a string specifying the set of\ncharacters to be removed", "description": "", "code-info": {"name": "numpy.char.lstrip", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.lstrip(self, chars=None)", "item_id": "numpy.char.chararray.lstrip", "summary": "For each element in self, return a copy with the leading characters\nremoved.\n\nSee also\nchar.lstrip\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.lstrip", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " chars", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.lower(self)", "item_id": "numpy.chararray.lower", "summary": "Return an array with the elements of self converted to\nlowercase.\n\nSee also\nchar.lower\n\n", "description": "", "code-info": {"name": "numpy.chararray.lower", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.lookfor(what, module=None, import_modules=True, regenerate=False, output=None)", "item_id": "numpy.lookfor", "summary": "Do a keyword search on docstrings.\nA list of objects that matched the search is displayed,\nsorted by relevance", "description": "", "code-info": {"name": "numpy.lookfor", "parameters": [{"name": "what", "is_optional": false, "type": "others", "description": ""}, {"name": " module", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " import_modules", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " regenerate", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " output", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.lower(self)", "item_id": "numpy.char.chararray.lower", "summary": "Return an array with the elements of self converted to\nlowercase.\n\nSee also\nchar.lower\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.lower", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.lower(a)", "item_id": "numpy.char.lower", "summary": "Return an array with the elements converted to lowercase.\nCall str.lower element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like, {str, unicode}Input array.\n\n\n\nReturns\n\noutndarray, {str, unicode}Output array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.lower\n\nExamples\n&gt;&gt;&gt; c = np.array(['A1B C', '1BCA', 'BCA1']); c\narray(['A1B C', '1BCA', 'BCA1'], dtype='&lt;U5')\n&gt;&gt;&gt; np.char.lower(c)\narray(['a1b c', '1bca', 'bca1'], dtype='&lt;U5')\n\n\n", "description": "", "code-info": {"name": "numpy.char.lower", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)", "item_id": "numpy.logspace", "summary": "Return numbers spaced evenly on a log scale.\nIn linear space, the sequence starts at base ** start\n(base to the power of start) and ends with base ** stop\n(see endpoint below).\n\nChanged in version 1.16.0: Non-scalar start and stop are now supported.\n\n\nParameters\n\nstartarray_likebase ** start is the starting value of the sequence.\n\nstoparray_likebase ** stop is the final value of the sequence, unless endpoint\nis False", "description": "", "code-info": {"name": "numpy.logspace", "parameters": [{"name": "start", "is_optional": false, "type": "others", "description": ""}, {"name": " stop", "is_optional": false, "type": "others", "description": ""}, {"name": " num", "is_optional": true, "type": "int", "default_value": "50", "description": ""}, {"name": " endpoint", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " base", "is_optional": true, "type": "others", "default_value": "10.0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.random.RandomState.logseries(p, size=None)", "item_id": "numpy.random.RandomState.logseries", "summary": "Draw samples from a logarithmic series distribution.\nSamples are drawn from a log series distribution with specified\nshape parameter, 0 &lt; p &lt; 1.\n\nNote\nNew code should use the logseries method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\npfloat or array_like of floatsShape parameter for the distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.logseries", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.logseries(p, size=None)", "item_id": "numpy.random.Generator.logseries", "summary": "Draw samples from a logarithmic series distribution.\nSamples are drawn from a log series distribution with specified\nshape parameter, 0 &lt; p &lt; 1.\n\nParameters\n\npfloat or array_like of floatsShape parameter for the distribution", "description": "", "code-info": {"name": "numpy.random.Generator.logseries", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.logseries(p, size=None)", "item_id": "numpy.random.logseries", "summary": "Draw samples from a logarithmic series distribution.\nSamples are drawn from a log series distribution with specified\nshape parameter, 0 &lt; p &lt; 1.\n\nNote\nNew code should use the logseries method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\npfloat or array_like of floatsShape parameter for the distribution", "description": "", "code-info": {"name": "numpy.random.logseries", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.lognormal(mean=0.0, sigma=1.0, size=None)", "item_id": "numpy.random.RandomState.lognormal", "summary": "Draw samples from a log-normal distribution.\nDraw samples from a log-normal distribution with specified mean,\nstandard deviation, and array shape", "description": "", "code-info": {"name": "numpy.random.RandomState.lognormal", "parameters": [{"name": "mean", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " sigma", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.lognormal(mean=0.0, sigma=1.0, size=None)", "item_id": "numpy.random.Generator.lognormal", "summary": "Draw samples from a log-normal distribution.\nDraw samples from a log-normal distribution with specified mean,\nstandard deviation, and array shape", "description": "", "code-info": {"name": "numpy.random.Generator.lognormal", "parameters": [{"name": "mean", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " sigma", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.logistic(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.RandomState.logistic", "summary": "Draw samples from a logistic distribution.\nSamples are drawn from a logistic distribution with specified\nparameters, loc (location or mean, also median), and scale (&gt;0).\n\nNote\nNew code should use the logistic method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nlocfloat or array_like of floats, optionalParameter of the distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.logistic", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.lognormal(mean=0.0, sigma=1.0, size=None)", "item_id": "numpy.random.lognormal", "summary": "Draw samples from a log-normal distribution.\nDraw samples from a log-normal distribution with specified mean,\nstandard deviation, and array shape", "description": "", "code-info": {"name": "numpy.random.lognormal", "parameters": [{"name": "mean", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " sigma", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.logical_not", "summary": "Compute the truth value of NOT x element-wise.\n\nParameters\n\nxarray_likeLogical NOT is applied to the elements of x.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.logical_not", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.logistic(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.Generator.logistic", "summary": "Draw samples from a logistic distribution.\nSamples are drawn from a logistic distribution with specified\nparameters, loc (location or mean, also median), and scale (&gt;0).\n\nParameters\n\nlocfloat or array_like of floats, optionalParameter of the distribution", "description": "", "code-info": {"name": "numpy.random.Generator.logistic", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.logistic(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.logistic", "summary": "Draw samples from a logistic distribution.\nSamples are drawn from a logistic distribution with specified\nparameters, loc (location or mean, also median), and scale (&gt;0).\n\nNote\nNew code should use the logistic method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nlocfloat or array_like of floats, optionalParameter of the distribution", "description": "", "code-info": {"name": "numpy.random.logistic", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.logical_xor", "summary": "Compute the truth value of x1 XOR x2, element-wise.\n\nParameters\n\nx1, x2array_likeLogical XOR is applied to the elements of x1 and x2", "description": "", "code-info": {"name": "numpy.logical_xor", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.logical_or", "summary": "Compute the truth value of x1 OR x2 element-wise.\n\nParameters\n\nx1, x2array_likeLogical OR is applied to the elements of x1 and x2.\nIf x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.logical_or", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.logical_and", "summary": "Compute the truth value of x1 AND x2 element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.logical_and", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.logaddexp2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.logaddexp2", "summary": "Logarithm of the sum of exponentiations of the inputs in base-2.\nCalculates log2(2**x1 + 2**x2)", "description": "", "code-info": {"name": "numpy.logaddexp2", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.log10", "summary": "Return the base 10 logarithm of the input array, element-wise.\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.log10", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.log", "summary": "Natural logarithm, element-wise.\nThe natural logarithm log is the inverse of the exponential function,\nso that log(exp(x)) = x", "description": "", "code-info": {"name": "numpy.log", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.log2", "summary": "Base-2 logarithm of x.\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.log2", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.logaddexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.logaddexp", "summary": "Logarithm of the sum of exponentiations of the inputs.\nCalculates log(exp(x1) + exp(x2))", "description": "", "code-info": {"name": "numpy.logaddexp", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.log1p(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.log1p", "summary": "Return the natural logarithm of one plus the input array, element-wise.\nCalculates log(1 + x).\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.log1p", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')", "item_id": "numpy.load", "summary": "Load arrays or pickled objects from .npy, .npz or pickled files.\n\nWarning\nLoading files that contain object arrays uses the pickle\nmodule, which is not secure against erroneous or maliciously\nconstructed data", "description": "", "code-info": {"name": "numpy.load", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}, {"name": " mmap_mode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " allow_pickle", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " fix_imports", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " encoding", "is_optional": true, "type": "string", "default_value": "'ASCII'", "description": ""}]}},
{"code": "numpy.chararray.ljust(self, width, fillchar=' ')", "item_id": "numpy.chararray.ljust", "summary": "Return an array with the elements of self left-justified in a\nstring of length width.\n\nSee also\nchar.ljust\n\n", "description": "", "code-info": {"name": "numpy.chararray.ljust", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.char.chararray.ljust(self, width, fillchar=' ')", "item_id": "numpy.char.chararray.ljust", "summary": "Return an array with the elements of self left-justified in a\nstring of length width.\n\nSee also\nchar.ljust\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.ljust", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.loadtxt(fname, dtype=&lt;class 'float'&gt;, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None)", "item_id": "numpy.loadtxt", "summary": "Load data from a text file.\nEach row in the text file must have the same number of values.\n\nParameters\n\nfnamefile, str, or pathlib.PathFile, filename, or generator to read", "description": "", "code-info": {"name": "numpy.loadtxt", "parameters": [{"name": "fname", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}, {"name": " comments", "is_optional": true, "type": "string", "default_value": "'#'", "description": ""}, {"name": " delimiter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " converters", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " skiprows", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " usecols", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " unpack", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " ndmin", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " encoding", "is_optional": true, "type": "string", "default_value": "'bytes'", "description": ""}, {"name": " max_rows", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.linspace(self, n=100, domain=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.linspace", "summary": "Return x, y values at equally spaced points in domain.\nReturns the x, y values at n linearly spaced points across the\ndomain", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.linspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "100", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.linspace(self, n=100, domain=None)", "item_id": "numpy.polynomial.legendre.Legendre.linspace", "summary": "Return x, y values at equally spaced points in domain.\nReturns the x, y values at n linearly spaced points across the\ndomain", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.linspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "100", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.ljust(a, width, fillchar=' ')", "item_id": "numpy.char.ljust", "summary": "Return an array with the elements of a left-justified in a\nstring of length width.\nCalls str.ljust element-wise.\n\nParameters\n\naarray_like of str or unicode\nwidthintThe length of the resulting strings\n\nfillcharstr or unicode, optionalThe character to use for padding\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.ljust\n\n", "description": "", "code-info": {"name": "numpy.char.ljust", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.linspace(self, n=100, domain=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.linspace", "summary": "Return x, y values at equally spaced points in domain.\nReturns the x, y values at n linearly spaced points across the\ndomain", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.linspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "100", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.linspace(self, n=100, domain=None)", "item_id": "numpy.polynomial.hermite.Hermite.linspace", "summary": "Return x, y values at equally spaced points in domain.\nReturns the x, y values at n linearly spaced points across the\ndomain", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.linspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "100", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)", "item_id": "numpy.linspace", "summary": "Return evenly spaced numbers over a specified interval.\nReturns num evenly spaced samples, calculated over the\ninterval [start, stop].\nThe endpoint of the interval can optionally be excluded.\n\nChanged in version 1.16.0: Non-scalar start and stop are now supported.\n\n\nParameters\n\nstartarray_likeThe starting value of the sequence.\n\nstoparray_likeThe end value of the sequence, unless endpoint is set to False.\nIn that case, the sequence consists of all but the last of num + 1\nevenly spaced samples, so that stop is excluded", "description": "", "code-info": {"name": "numpy.linspace", "parameters": [{"name": "start", "is_optional": false, "type": "others", "description": ""}, {"name": " stop", "is_optional": false, "type": "others", "description": ""}, {"name": " num", "is_optional": true, "type": "int", "default_value": "50", "description": ""}, {"name": " endpoint", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " retstep", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.linspace(self, n=100, domain=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.linspace", "summary": "Return x, y values at equally spaced points in domain.\nReturns the x, y values at n linearly spaced points across the\ndomain", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.linspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "100", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.linspace(self, n=100, domain=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.linspace", "summary": "Return x, y values at equally spaced points in domain.\nReturns the x, y values at n linearly spaced points across the\ndomain", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.linspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "100", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.lexsort(keys, axis=-1)", "item_id": "numpy.lexsort", "summary": "Perform an indirect stable sort using a sequence of keys.\nGiven multiple sorting keys, which can be interpreted as columns in a\nspreadsheet, lexsort returns an array of integer indices that describes\nthe sort order by multiple columns", "description": "", "code-info": {"name": "numpy.lexsort", "parameters": [{"name": "keys", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}]}},
{"code": "numpy.char.less_equal(x1, x2)", "item_id": "numpy.char.less_equal", "summary": "Return (x1 &lt;= x2) element-wise.\nUnlike numpy.less_equal, this comparison is performed by first\nstripping whitespace characters from the end of the string", "description": "", "code-info": {"name": "numpy.char.less_equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.less(x1, x2)", "item_id": "numpy.char.less", "summary": "Return (x1 &lt; x2) element-wise.\nUnlike numpy.greater, this comparison is performed by first\nstripping whitespace characters from the end of the string", "description": "", "code-info": {"name": "numpy.char.less", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legx([0, 1])", "item_id": "numpy.polynomial.legendre.legx", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legx", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legweight(x)", "item_id": "numpy.polynomial.legendre.legweight", "summary": "Weight function of the Legendre polynomials.\nThe weight function is  and the interval of integration is\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legweight", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legvander3d(x, y, z, deg)", "item_id": "numpy.polynomial.legendre.legvander3d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y, z)", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legvander3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.less_equal", "summary": "Return the truth value of (x1 =&lt; x2) element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.less_equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legvander(x, deg)", "item_id": "numpy.polynomial.legendre.legvander", "summary": "Pseudo-Vandermonde matrix of given degree.\nReturns the pseudo-Vandermonde matrix of degree deg and sample points\nx", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legvander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legvander2d(x, y, deg)", "item_id": "numpy.polynomial.legendre.legvander2d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y)", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legvander2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legval3d(x, y, z, c)", "item_id": "numpy.polynomial.legendre.legval3d", "summary": "Evaluate a 3-D Legendre series at points (x, y, z).\nThis function returns the values:\n\n\nThe parameters x, y, and z are converted to arrays only if\nthey are tuples or a lists, otherwise they are treated as a scalars and\nthey must have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legval3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legroots(c)", "item_id": "numpy.polynomial.legendre.legroots", "summary": "Compute the roots of a Legendre series.\nReturn the roots (a.k.a", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legroots", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legval2d(x, y, c)", "item_id": "numpy.polynomial.legendre.legval2d", "summary": "Evaluate a 2-D Legendre series at points (x, y).\nThis function returns the values:\n\n\nThe parameters x and y are converted to arrays only if they are\ntuples or a lists, otherwise they are treated as a scalars and they\nmust have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legval2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legpow(c, pow, maxpower=16)", "item_id": "numpy.polynomial.legendre.legpow", "summary": "Raise a Legendre series to a power.\nReturns the Legendre series c raised to the power pow", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legpow", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " pow", "is_optional": false, "type": "others", "description": ""}, {"name": " maxpower", "is_optional": true, "type": "int", "default_value": "16", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legval(x, c, tensor=True)", "item_id": "numpy.polynomial.legendre.legval", "summary": "Evaluate a Legendre series at points x.\nIf c is of length n + 1, this function returns the value:\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legval", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legtrim(c, tol=0)", "item_id": "numpy.polynomial.legendre.legtrim", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legtrim", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legmulx(c)", "item_id": "numpy.polynomial.legendre.legmulx", "summary": "Multiply a Legendre series by x.\nMultiply the Legendre series c by x, where x is the independent\nvariable.\n\nParameters\n\ncarray_like1-D array of Legendre series coefficients ordered from low to\nhigh.\n\n\n\nReturns\n\noutndarrayArray representing the result of the multiplication.\n\n\n\n\n\nSee also\nlegadd, legmul, legmul, legdiv, legpow\n\nNotes\nThe multiplication uses the recursion relationship for Legendre\npolynomials in the form\n\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial import legendre as L\n&gt;&gt;&gt; L.legmulx([1,2,3])\narray([ 0.66666667, 2.2, 1.33333333, 1.8]) # may vary\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legmulx", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legsub(c1, c2)", "item_id": "numpy.polynomial.legendre.legsub", "summary": "Subtract one Legendre series from another.\nReturns the difference of two Legendre series c1 - c2", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legsub", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legone([1])", "item_id": "numpy.polynomial.legendre.legone", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legone", "parameters": [{"name": "[1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legmul(c1, c2)", "item_id": "numpy.polynomial.legendre.legmul", "summary": "Multiply one Legendre series by another.\nReturns the product of two Legendre series c1 * c2", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legmul", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legline(off, scl)", "item_id": "numpy.polynomial.legendre.legline", "summary": "Legendre series whose graph is a straight line.\n\nParameters\n\noff, sclscalarsThe specified line is given by off + scl*x.\n\n\n\nReturns\n\nyndarrayThis module\u2019s representation of the Legendre series for\noff + scl*x.\n\n\n\n\n\nSee also\npolyline, chebline\n\nExamples\n&gt;&gt;&gt; import numpy.polynomial.legendre as L\n&gt;&gt;&gt; L.legline(3,2)\narray([3, 2])\n&gt;&gt;&gt; L.legval(-3, L.legline(3,2)) # should be -3\n-3.0\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legline", "parameters": [{"name": "off", "is_optional": false, "type": "others", "description": ""}, {"name": " scl", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legint(c, m=1, k=[], lbnd=0, scl=1, axis=0)", "item_id": "numpy.polynomial.legendre.legint", "summary": "Integrate a Legendre series.\nReturns the Legendre series coefficients c integrated m times from\nlbnd along axis", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legint", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.legendre.leggrid3d(x, y, z, c)", "item_id": "numpy.polynomial.legendre.leggrid3d", "summary": "Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.\nThis function returns the values:\n\n\nwhere the points (a, b, c) consist of all triples formed by taking\na from x, b from y, and c from z", "description": "", "code-info": {"name": "numpy.polynomial.legendre.leggrid3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.leggauss(deg)", "item_id": "numpy.polynomial.legendre.leggauss", "summary": "Gauss-Legendre quadrature.\nComputes the sample points and weights for Gauss-Legendre quadrature.\nThese sample points and weights will correctly integrate polynomials of\ndegree  or less over the interval  with\nthe weight function .\n\nParameters\n\ndegintNumber of sample points and weights", "description": "", "code-info": {"name": "numpy.polynomial.legendre.leggauss", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.leggrid2d(x, y, c)", "item_id": "numpy.polynomial.legendre.leggrid2d", "summary": "Evaluate a 2-D Legendre series on the Cartesian product of x and y.\nThis function returns the values:\n\n\nwhere the points (a, b) consist of all pairs formed by taking\na from x and b from y", "description": "", "code-info": {"name": "numpy.polynomial.legendre.leggrid2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legfromroots(roots)", "item_id": "numpy.polynomial.legendre.legfromroots", "summary": "Generate a Legendre series with given roots.\nThe function returns the coefficients of the polynomial\n\n\nin Legendre form, where the r_n are the roots specified in roots.\nIf a zero has multiplicity n, then it must appear in roots n times.\nFor instance, if 2 is a root of multiplicity three and 3 is a root of\nmultiplicity 2, then roots looks something like [2, 2, 2, 3, 3]", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legfromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legfit(x, y, deg, rcond=None, full=False, w=None)", "item_id": "numpy.polynomial.legendre.legfit", "summary": "Least squares fit of Legendre series to data.\nReturn the coefficients of a Legendre series of degree deg that is the\nleast squares fit to the data values y given at points x", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legdomain([-1,  1])", "item_id": "numpy.polynomial.legendre.legdomain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legdomain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre(coef, domain=None, window=None)", "item_id": "numpy.polynomial.legendre.Legendre", "summary": "A Legendre series class.\nThe Legendre class provides the standard Python numerical methods\n\u2018+\u2019, \u2018-\u2018, \u2018*\u2019, \u2018//\u2019, \u2018%\u2019, \u2018divmod\u2019, \u2018**\u2019, and \u2018()\u2019 as well as the\nattributes and methods listed in the ABCPolyBase documentation.\n\nParameters\n\ncoefarray_likeLegendre coefficients in order of increasing degree, i.e.,\n(1, 2, 3) gives 1*P_0(x) + 2*P_1(x) + 3*P_2(x).\n\ndomain(2,) array_like, optionalDomain to use", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre", "parameters": [{"name": "coef", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legdiv(c1, c2)", "item_id": "numpy.polynomial.legendre.legdiv", "summary": "Divide one Legendre series by another.\nReturns the quotient-with-remainder of two Legendre series\nc1 / c2", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legdiv", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legder(c, m=1, scl=1, axis=0)", "item_id": "numpy.polynomial.legendre.legder", "summary": "Differentiate a Legendre series.\nReturns the Legendre series coefficients c differentiated m times\nalong axis", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legder", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legcompanion(c)", "item_id": "numpy.polynomial.legendre.legcompanion", "summary": "Return the scaled companion matrix of c.\nThe basis polynomials are scaled so that the companion matrix is\nsymmetric when c is an Legendre basis polynomial", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legcompanion", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.legadd(c1, c2)", "item_id": "numpy.polynomial.legendre.legadd", "summary": "Add one Legendre series to another.\nReturns the sum of two Legendre series c1 + c2", "description": "", "code-info": {"name": "numpy.polynomial.legendre.legadd", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.left_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.left_shift", "summary": "Shift the bits of an integer to the left.\nBits are shifted to the left by appending x2 0s at the right of x1.\nSince the internal representation of numbers is in binary format, this\noperation is equivalent to multiplying x1 by 2**x2.\n\nParameters\n\nx1array_like of integer typeInput values.\n\nx2array_like of integer typeNumber of zeros to append to x1", "description": "", "code-info": {"name": "numpy.left_shift", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.leg2poly(c)", "item_id": "numpy.polynomial.legendre.leg2poly", "summary": "Convert a Legendre series to a polynomial.\nConvert an array representing the coefficients of a Legendre series,\nordered from lowest degree to highest, to an array of the coefficients\nof the equivalent polynomial (relative to the \u201cstandard\u201d basis) ordered\nfrom lowest to highest degree.\n\nParameters\n\ncarray_like1-D array containing the Legendre series coefficients, ordered\nfrom lowest order term to highest.\n\n\n\nReturns\n\npolndarray1-D array containing the coefficients of the equivalent polynomial\n(relative to the \u201cstandard\u201d basis) ordered from lowest order term\nto highest.\n\n\n\n\n\nSee also\npoly2leg\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy import polynomial as P\n&gt;&gt;&gt; c = P.Legendre(range(4))\n&gt;&gt;&gt; c\nLegendre([0., 1., 2., 3.], domain=[-1,  1], window=[-1,  1])\n&gt;&gt;&gt; p = c.convert(kind=P.Polynomial)\n&gt;&gt;&gt; p\nPolynomial([-1", "description": "", "code-info": {"name": "numpy.polynomial.legendre.leg2poly", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ldexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.ldexp", "summary": "Returns x1 * 2**x2, element-wise.\nThe mantissas x1 and twos exponents x2 are used to construct\nfloating point numbers x1 * 2**x2.\n\nParameters\n\nx1array_likeArray of multipliers.\n\nx2array_like, intArray of twos exponents", "description": "", "code-info": {"name": "numpy.ldexp", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.lcm(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.lcm", "summary": "Returns the lowest common multiple of |x1| and |x2|\n\nParameters\n\nx1, x2array_like, intArrays of values", "description": "", "code-info": {"name": "numpy.lcm", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.laplace(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.RandomState.laplace", "summary": "Draw samples from the Laplace or double exponential distribution with\nspecified location (or mean) and scale (decay).\nThe Laplace distribution is similar to the Gaussian/normal distribution,\nbut is sharper at the peak and has fatter tails", "description": "", "code-info": {"name": "numpy.random.RandomState.laplace", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.laplace(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.Generator.laplace", "summary": "Draw samples from the Laplace or double exponential distribution with\nspecified location (or mean) and scale (decay).\nThe Laplace distribution is similar to the Gaussian/normal distribution,\nbut is sharper at the peak and has fatter tails", "description": "", "code-info": {"name": "numpy.random.Generator.laplace", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagx([ 1, -1])", "item_id": "numpy.polynomial.laguerre.lagx", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagx", "parameters": [{"name": "[ 1", "is_optional": false, "type": "others", "description": ""}, {"name": " -1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagvander3d(x, y, z, deg)", "item_id": "numpy.polynomial.laguerre.lagvander3d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y, z)", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagvander3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagzero([0])", "item_id": "numpy.polynomial.laguerre.lagzero", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagzero", "parameters": [{"name": "[0]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.laplace(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.laplace", "summary": "Draw samples from the Laplace or double exponential distribution with\nspecified location (or mean) and scale (decay).\nThe Laplace distribution is similar to the Gaussian/normal distribution,\nbut is sharper at the peak and has fatter tails", "description": "", "code-info": {"name": "numpy.random.laplace", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagweight(x)", "item_id": "numpy.polynomial.laguerre.lagweight", "summary": "Weight function of the Laguerre polynomials.\nThe weight function is  and the interval of integration\nis ", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagweight", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagval3d(x, y, z, c)", "item_id": "numpy.polynomial.laguerre.lagval3d", "summary": "Evaluate a 3-D Laguerre series at points (x, y, z).\nThis function returns the values:\n\n\nThe parameters x, y, and z are converted to arrays only if\nthey are tuples or a lists, otherwise they are treated as a scalars and\nthey must have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagval3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagval2d(x, y, c)", "item_id": "numpy.polynomial.laguerre.lagval2d", "summary": "Evaluate a 2-D Laguerre series at points (x, y).\nThis function returns the values:\n\n\nThe parameters x and y are converted to arrays only if they are\ntuples or a lists, otherwise they are treated as a scalars and they\nmust have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagval2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagvander(x, deg)", "item_id": "numpy.polynomial.laguerre.lagvander", "summary": "Pseudo-Vandermonde matrix of given degree.\nReturns the pseudo-Vandermonde matrix of degree deg and sample points\nx", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagvander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagvander2d(x, y, deg)", "item_id": "numpy.polynomial.laguerre.lagvander2d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y)", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagvander2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagval(x, c, tensor=True)", "item_id": "numpy.polynomial.laguerre.lagval", "summary": "Evaluate a Laguerre series at points x.\nIf c is of length n + 1, this function returns the value:\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagval", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre(coef, domain=None, window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre", "summary": "A Laguerre series class.\nThe Laguerre class provides the standard Python numerical methods\n\u2018+\u2019, \u2018-\u2018, \u2018*\u2019, \u2018//\u2019, \u2018%\u2019, \u2018divmod\u2019, \u2018**\u2019, and \u2018()\u2019 as well as the\nattributes and methods listed in the ABCPolyBase documentation.\n\nParameters\n\ncoefarray_likeLaguerre coefficients in order of increasing degree, i.e,\n(1, 2, 3) gives 1*L_0(x) + 2*L_1(X) + 3*L_2(x).\n\ndomain(2,) array_like, optionalDomain to use", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre", "parameters": [{"name": "coef", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagtrim(c, tol=0)", "item_id": "numpy.polynomial.laguerre.lagtrim", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagtrim", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagsub(c1, c2)", "item_id": "numpy.polynomial.laguerre.lagsub", "summary": "Subtract one Laguerre series from another.\nReturns the difference of two Laguerre series c1 - c2", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagsub", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagone([1])", "item_id": "numpy.polynomial.laguerre.lagone", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagone", "parameters": [{"name": "[1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagmul(c1, c2)", "item_id": "numpy.polynomial.laguerre.lagmul", "summary": "Multiply one Laguerre series by another.\nReturns the product of two Laguerre series c1 * c2", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagmul", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagroots(c)", "item_id": "numpy.polynomial.laguerre.lagroots", "summary": "Compute the roots of a Laguerre series.\nReturn the roots (a.k.a", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagroots", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagline(off, scl)", "item_id": "numpy.polynomial.laguerre.lagline", "summary": "Laguerre series whose graph is a straight line.\n\nParameters\n\noff, sclscalarsThe specified line is given by off + scl*x.\n\n\n\nReturns\n\nyndarrayThis module\u2019s representation of the Laguerre series for\noff + scl*x.\n\n\n\n\n\nSee also\npolyline, chebline\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial.laguerre import lagline, lagval\n&gt;&gt;&gt; lagval(0,lagline(3, 2))\n3.0\n&gt;&gt;&gt; lagval(1,lagline(3, 2))\n5.0\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagline", "parameters": [{"name": "off", "is_optional": false, "type": "others", "description": ""}, {"name": " scl", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0)", "item_id": "numpy.polynomial.laguerre.lagint", "summary": "Integrate a Laguerre series.\nReturns the Laguerre series coefficients c integrated m times from\nlbnd along axis", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagint", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.laggrid3d(x, y, z, c)", "item_id": "numpy.polynomial.laguerre.laggrid3d", "summary": "Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.\nThis function returns the values:\n\n\nwhere the points (a, b, c) consist of all triples formed by taking\na from x, b from y, and c from z", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.laggrid3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagpow(c, pow, maxpower=16)", "item_id": "numpy.polynomial.laguerre.lagpow", "summary": "Raise a Laguerre series to a power.\nReturns the Laguerre series c raised to the power pow", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagpow", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " pow", "is_optional": false, "type": "others", "description": ""}, {"name": " maxpower", "is_optional": true, "type": "int", "default_value": "16", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagmulx(c)", "item_id": "numpy.polynomial.laguerre.lagmulx", "summary": "Multiply a Laguerre series by x.\nMultiply the Laguerre series c by x, where x is the independent\nvariable.\n\nParameters\n\ncarray_like1-D array of Laguerre series coefficients ordered from low to\nhigh.\n\n\n\nReturns\n\noutndarrayArray representing the result of the multiplication.\n\n\n\n\n\nSee also\nlagadd, lagsub, lagmul, lagdiv, lagpow\n\nNotes\nThe multiplication uses the recursion relationship for Laguerre\npolynomials in the form\n\n\nxP_i(x) = (-(i + 1)*P_{i + 1}(x) + (2i + 1)P_{i}(x) - iP_{i - 1}(x))\nExamples\n&gt;&gt;&gt; from numpy.polynomial.laguerre import lagmulx\n&gt;&gt;&gt; lagmulx([1, 2, 3])\narray([-1.,  -1.,  11.,  -9.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagmulx", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagfromroots(roots)", "item_id": "numpy.polynomial.laguerre.lagfromroots", "summary": "Generate a Laguerre series with given roots.\nThe function returns the coefficients of the polynomial\n\n\nin Laguerre form, where the r_n are the roots specified in roots.\nIf a zero has multiplicity n, then it must appear in roots n times.\nFor instance, if 2 is a root of multiplicity three and 3 is a root of\nmultiplicity 2, then roots looks something like [2, 2, 2, 3, 3]", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagfromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.laggrid2d(x, y, c)", "item_id": "numpy.polynomial.laguerre.laggrid2d", "summary": "Evaluate a 2-D Laguerre series on the Cartesian product of x and y.\nThis function returns the values:\n\n\nwhere the points (a, b) consist of all pairs formed by taking\na from x and b from y", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.laggrid2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.laggauss(deg)", "item_id": "numpy.polynomial.laguerre.laggauss", "summary": "Gauss-Laguerre quadrature.\nComputes the sample points and weights for Gauss-Laguerre quadrature.\nThese sample points and weights will correctly integrate polynomials of\ndegree  or less over the interval \nwith the weight function .\n\nParameters\n\ndegintNumber of sample points and weights", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.laggauss", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagfit(x, y, deg, rcond=None, full=False, w=None)", "item_id": "numpy.polynomial.laguerre.lagfit", "summary": "Least squares fit of Laguerre series to data.\nReturn the coefficients of a Laguerre series of degree deg that is the\nleast squares fit to the data values y given at points x", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagdomain([0, 1])", "item_id": "numpy.polynomial.laguerre.lagdomain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagdomain", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagdiv(c1, c2)", "item_id": "numpy.polynomial.laguerre.lagdiv", "summary": "Divide one Laguerre series by another.\nReturns the quotient-with-remainder of two Laguerre series\nc1 / c2", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagdiv", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagder(c, m=1, scl=1, axis=0)", "item_id": "numpy.polynomial.laguerre.lagder", "summary": "Differentiate a Laguerre series.\nReturns the Laguerre series coefficients c differentiated m times\nalong axis", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagder", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagcompanion(c)", "item_id": "numpy.polynomial.laguerre.lagcompanion", "summary": "Return the companion matrix of c.\nThe usual companion matrix of the Laguerre polynomials is already\nsymmetric when c is a basis Laguerre polynomial, so no scaling is\napplied.\n\nParameters\n\ncarray_like1-D array of Laguerre series coefficients ordered from low to high\ndegree.\n\n\n\nReturns\n\nmatndarrayCompanion matrix of dimensions (deg, deg).\n\n\n\n\nNotes\n\nNew in version 1.7.0.\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagcompanion", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lagadd(c1, c2)", "item_id": "numpy.polynomial.laguerre.lagadd", "summary": "Add one Laguerre series to another.\nReturns the sum of two Laguerre series c1 + c2", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lagadd", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.lag2poly(c)", "item_id": "numpy.polynomial.laguerre.lag2poly", "summary": "Convert a Laguerre series to a polynomial.\nConvert an array representing the coefficients of a Laguerre series,\nordered from lowest degree to highest, to an array of the coefficients\nof the equivalent polynomial (relative to the \u201cstandard\u201d basis) ordered\nfrom lowest to highest degree.\n\nParameters\n\ncarray_like1-D array containing the Laguerre series coefficients, ordered\nfrom lowest order term to highest.\n\n\n\nReturns\n\npolndarray1-D array containing the coefficients of the equivalent polynomial\n(relative to the \u201cstandard\u201d basis) ordered from lowest order term\nto highest.\n\n\n\n\n\nSee also\npoly2lag\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy.polynomial.laguerre import lag2poly\n&gt;&gt;&gt; lag2poly([ 23., -63.,  58., -18.])\narray([0., 1., 2., 3.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.lag2poly", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.kron(a, b)", "item_id": "numpy.kron", "summary": "Kronecker product of two arrays.\nComputes the Kronecker product, a composite array made of blocks of the\nsecond array scaled by the first.\n\nParameters\n\na, barray_like\n\n\nReturns\n\noutndarray\n\n\n\n\nSee also\n\nouterThe outer product\n\n\n\nNotes\nThe function assumes that the number of dimensions of a and b\nare the same, if necessary prepending the smallest with ones.\nIf a.shape = (r0,r1,..,rN) and b.shape = (s0,s1,\u2026,sN),\nthe Kronecker product has shape (r0*s0, r1*s1, \u2026, rN*SN).\nThe elements are products of elements from a and b, organized\nexplicitly by:\nkron(a,b)[k0,k1,...,kN] = a[i0,i1,...,iN] * b[j0,j1,...,jN]\n\n\nwhere:\nkt = it * st + jt,  t = 0,...,N\n\n\nIn the common 2-D case (N=1), the block structure can be visualized:\n[[ a[0,0]*b,   a[0,1]*b,  ..", "description": "", "code-info": {"name": "numpy.kron", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.dec.knownfailureif(fail_condition, msg=None)", "item_id": "numpy.testing.dec.knownfailureif", "summary": "Make function raise KnownFailureException exception if given condition is true.\nIf the condition is a callable, it is used at runtime to dynamically\nmake the decision", "description": "", "code-info": {"name": "numpy.testing.dec.knownfailureif", "parameters": [{"name": "fail_condition", "is_optional": false, "type": "others", "description": ""}, {"name": " msg", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.kaiser(M, beta)", "item_id": "numpy.kaiser", "summary": "Return the Kaiser window.\nThe Kaiser window is a taper formed by using a Bessel function.\n\nParameters\n\nMintNumber of points in the output window", "description": "", "code-info": {"name": "numpy.kaiser", "parameters": [{"name": "M", "is_optional": false, "type": "others", "description": ""}, {"name": " beta", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Philox.jumped(jumps=1)", "item_id": "numpy.random.Philox.jumped", "summary": "Returns a new bit generator with the state jumped\nThe state of the returned big generator is jumped as-if\n2**(128 * jumps) random numbers have been generated.\n\nParameters\n\njumpsinteger, positiveNumber of times to jump the state of the bit generator returned\n\n\n\nReturns\n\nbit_generatorPhiloxNew instance of generator jumped iter times\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.random.Philox.jumped", "parameters": [{"name": "jumps", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.random.PCG64.jumped(jumps=1)", "item_id": "numpy.random.PCG64.jumped", "summary": "Returns a new bit generator with the state jumped.\nJumps the state as-if jumps * 210306068529402873165736369884012333109\nrandom numbers have been generated.\n\nParameters\n\njumpsinteger, positiveNumber of times to jump the state of the bit generator returned\n\n\n\nReturns\n\nbit_generatorPCG64New instance of generator jumped iter times\n\n\n\n\nNotes\nThe step size is phi-1 when multiplied by 2**128 where phi is the\ngolden ratio.\n", "description": "", "code-info": {"name": "numpy.random.PCG64.jumped", "parameters": [{"name": "jumps", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.chararray.join(self, seq)", "item_id": "numpy.chararray.join", "summary": "Return a string which is the concatenation of the strings in the\nsequence seq.\n\nSee also\nchar.join\n\n", "description": "", "code-info": {"name": "numpy.chararray.join", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " seq", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.MT19937.jumped(jumps=1)", "item_id": "numpy.random.MT19937.jumped", "summary": "Returns a new bit generator with the state jumped\nThe state of the returned big generator is jumped as-if\n2**(128 * jumps) random numbers have been generated.\n\nParameters\n\njumpsinteger, positiveNumber of times to jump the state of the bit generator returned\n\n\n\nReturns\n\nbit_generatorMT19937New instance of generator jumped iter times\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.random.MT19937.jumped", "parameters": [{"name": "jumps", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.char.chararray.join(self, seq)", "item_id": "numpy.char.chararray.join", "summary": "Return a string which is the concatenation of the strings in the\nsequence seq.\n\nSee also\nchar.join\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.join", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " seq", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.join(sep, seq)", "item_id": "numpy.char.join", "summary": "Return a string which is the concatenation of the strings in the\nsequence seq.\nCalls str.join element-wise.\n\nParameters\n\nseparray_like of str or unicode\nseqarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input types\n\n\n\n\n\nSee also\nstr.join\n\n", "description": "", "code-info": {"name": "numpy.char.join", "parameters": [{"name": "sep", "is_optional": false, "type": "others", "description": ""}, {"name": " seq", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ix_(*args)", "item_id": "numpy.ix_", "summary": "Construct an open mesh from multiple sequences.\nThis function takes N 1-D sequences and returns N outputs with N\ndimensions each, such that the shape is 1 in all but one dimension\nand the dimension with the non-unit shape value cycles through all\nN dimensions.\nUsing ix_ one can quickly construct index arrays that will index\nthe cross product", "description": "", "code-info": {"name": "numpy.ix_", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.nditer.iternext()", "item_id": "numpy.nditer.iternext", "summary": "Check whether iterations are left, and perform a single internal iteration\nwithout returning the result", "description": "", "code-info": {"name": "numpy.nditer.iternext", "parameters": []}},
{"code": "numpy.record.itemset()", "item_id": "numpy.record.itemset", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.itemset", "parameters": []}},
{"code": "numpy.recarray.itemset(*args)", "item_id": "numpy.recarray.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.recarray.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.itemset(*args)", "item_id": "numpy.ndarray.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.ndarray.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.itemset(*args)", "item_id": "numpy.matrix.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.matrix.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.itemset(*args)", "item_id": "numpy.memmap.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.memmap.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.itemset()", "item_id": "numpy.generic.itemset", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.itemset", "parameters": []}},
{"code": "numpy.ma.MaskType.itemset()", "item_id": "numpy.ma.MaskType.itemset", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.itemset", "parameters": []}},
{"code": "numpy.chararray.itemset(*args)", "item_id": "numpy.chararray.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.chararray.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.itemset(*args)", "item_id": "numpy.ma.masked_array.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.ma.masked_array.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.itemset(*args)", "item_id": "numpy.char.chararray.itemset", "summary": "Insert scalar into an array (scalar is cast to array\u2019s dtype, if possible)\nThere must be at least 1 argument, and define the last argument\nas item", "description": "", "code-info": {"name": "numpy.char.chararray.itemset", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.item()", "item_id": "numpy.record.item", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.item", "parameters": []}},
{"code": "numpy.recarray.item(*args)", "item_id": "numpy.recarray.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.recarray.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.item(*args)", "item_id": "numpy.ndarray.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.ndarray.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskType.item()", "item_id": "numpy.ma.MaskType.item", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.item", "parameters": []}},
{"code": "numpy.memmap.item(*args)", "item_id": "numpy.memmap.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.memmap.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.item()", "item_id": "numpy.generic.item", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.item", "parameters": []}},
{"code": "numpy.matrix.item(*args)", "item_id": "numpy.matrix.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.matrix.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.item(*args)", "item_id": "numpy.chararray.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.chararray.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.item(*args)", "item_id": "numpy.ma.MaskedArray.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.item(*args)", "item_id": "numpy.ma.masked_array.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.ma.masked_array.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.item(*args)", "item_id": "numpy.char.chararray.item", "summary": "Copy an element of an array to a standard Python scalar and return it.\n\nParameters\n\n*argsArguments (variable number and type)\nnone: in this case, the method only works for arrays\nwith one element (a.size == 1), which element is\ncopied into a standard Python scalar object and returned.\nint_type: this argument is interpreted as a flat index into\nthe array, specifying which element to copy and return.\ntuple of int_types: functions as does a single int_type argument,\nexcept that the argument is interpreted as an nd-index into the\narray.\n\n\n\n\nReturns\n\nzStandard Python scalar objectA copy of the specified element of the array as a suitable\nPython scalar\n\n\n\n\nNotes\nWhen the data type of a is longdouble or clongdouble, item() returns\na scalar array object because there is no available Python scalar that\nwould not lose information", "description": "", "code-info": {"name": "numpy.char.chararray.item", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isupper(self)", "item_id": "numpy.chararray.isupper", "summary": "Returns true for each element if all cased characters in the\nstring are uppercase and there is at least one character, false\notherwise.\n\nSee also\nchar.isupper\n\n", "description": "", "code-info": {"name": "numpy.chararray.isupper", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.isupper(self)", "item_id": "numpy.char.chararray.isupper", "summary": "Returns true for each element if all cased characters in the\nstring are uppercase and there is at least one character, false\notherwise.\n\nSee also\nchar.isupper\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isupper", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isupper(a)", "item_id": "numpy.char.isupper", "summary": "Returns true for each element if all cased characters in the\nstring are uppercase and there is at least one character, false\notherwise.\nCall str.isupper element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of bools\n\n\n\n\n\nSee also\nstr.isupper\n\n", "description": "", "code-info": {"name": "numpy.char.isupper", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.istitle(self)", "item_id": "numpy.char.chararray.istitle", "summary": "Returns true for each element if the element is a titlecased\nstring and there is at least one character, false otherwise.\n\nSee also\nchar.istitle\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.istitle", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.istitle(a)", "item_id": "numpy.char.istitle", "summary": "Returns true for each element if the element is a titlecased\nstring and there is at least one character, false otherwise.\nCall str.istitle element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of bools\n\n\n\n\n\nSee also\nstr.istitle\n\n", "description": "", "code-info": {"name": "numpy.char.istitle", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.istitle(self)", "item_id": "numpy.chararray.istitle", "summary": "Returns true for each element if the element is a titlecased\nstring and there is at least one character, false otherwise.\n\nSee also\nchar.istitle\n\n", "description": "", "code-info": {"name": "numpy.chararray.istitle", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.issubsctype(arg1, arg2)", "item_id": "numpy.issubsctype", "summary": "Determine if the first argument is a subclass of the second argument.\n\nParameters\n\narg1, arg2dtype or dtype specifierData-types.\n\n\n\nReturns\n\noutboolThe result.\n\n\n\n\n\nSee also\nissctype, issubdtype, obj2sctype\n\nExamples\n&gt;&gt;&gt; np.issubsctype('S8', str)\nFalse\n&gt;&gt;&gt; np.issubsctype(np.array([1]), int)\nTrue\n&gt;&gt;&gt; np.issubsctype(np.array([1]), float)\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.issubsctype", "parameters": [{"name": "arg1", "is_optional": false, "type": "others", "description": ""}, {"name": " arg2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.issubdtype(arg1, arg2)", "item_id": "numpy.issubdtype", "summary": "Returns True if first argument is a typecode lower/equal in type hierarchy.\n\nParameters\n\narg1, arg2dtype_likedtype or string representing a typecode.\n\n\n\nReturns\n\noutbool\n\n\n\n\nSee also\nissubsctype, issubclass_\n\nnumpy.core.numerictypesOverview of numpy type hierarchy.\n\n\n\nExamples\n&gt;&gt;&gt; np.issubdtype('S1', np.string_)\nTrue\n&gt;&gt;&gt; np.issubdtype(np.float64, np.float32)\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.issubdtype", "parameters": [{"name": "arg1", "is_optional": false, "type": "others", "description": ""}, {"name": " arg2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.issubclass_(arg1, arg2)", "item_id": "numpy.issubclass_", "summary": "Determine if a class is a subclass of a second class.\nissubclass_ is equivalent to the Python built-in issubclass,\nexcept that it returns False instead of raising a TypeError if one\nof the arguments is not a class.\n\nParameters\n\narg1classInput class", "description": "", "code-info": {"name": "numpy.issubclass_", "parameters": [{"name": "arg1", "is_optional": false, "type": "others", "description": ""}, {"name": " arg2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isspace(self)", "item_id": "numpy.chararray.isspace", "summary": "Returns true for each element if there are only whitespace\ncharacters in the string and there is at least one character,\nfalse otherwise.\n\nSee also\nchar.isspace\n\n", "description": "", "code-info": {"name": "numpy.chararray.isspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.isspace(self)", "item_id": "numpy.char.chararray.isspace", "summary": "Returns true for each element if there are only whitespace\ncharacters in the string and there is at least one character,\nfalse otherwise.\n\nSee also\nchar.isspace\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isspace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isscalar(element)", "item_id": "numpy.isscalar", "summary": "Returns True if the type of element is a scalar type.\n\nParameters\n\nelementanyInput argument, can be of any type and shape.\n\n\n\nReturns\n\nvalboolTrue if element is a scalar type, False if it is not.\n\n\n\n\n\nSee also\n\nndimGet the number of dimensions of an array\n\n\n\nNotes\nIf you need a stricter way to identify a numerical scalar, use\nisinstance(x, numbers.Number), as that returns False for most\nnon-numerical elements such as strings.\nIn most cases np.ndim(x) == 0 should be used instead of this function,\nas that will also return true for 0d arrays", "description": "", "code-info": {"name": "numpy.isscalar", "parameters": [{"name": "element", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isspace(a)", "item_id": "numpy.char.isspace", "summary": "Returns true for each element if there are only whitespace\ncharacters in the string and there is at least one character,\nfalse otherwise.\nCalls str.isspace element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of bools\n\n\n\n\n\nSee also\nstr.isspace\n\n", "description": "", "code-info": {"name": "numpy.char.isspace", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.issctype(rep)", "item_id": "numpy.issctype", "summary": "Determines whether the given object represents a scalar data-type.\n\nParameters\n\nrepanyIf rep is an instance of a scalar dtype, True is returned", "description": "", "code-info": {"name": "numpy.issctype", "parameters": [{"name": "rep", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isreal(x)", "item_id": "numpy.isreal", "summary": "Returns a bool array, where True if input element is real.\nIf element has complex type with zero complex part, the return value\nfor that element is True.\n\nParameters\n\nxarray_likeInput array.\n\n\n\nReturns\n\noutndarray, boolBoolean array of same shape as x.\n\n\n\n\n\nSee also\niscomplex\n\nisrealobjReturn True if x is not a complex type.\n\n\n\nExamples\n&gt;&gt;&gt; np.isreal([1+1j, 1+0j, 4.5, 3, 2, 2j])\narray([False,  True,  True,  True,  True, False])\n\n\n", "description": "", "code-info": {"name": "numpy.isreal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isrealobj(x)", "item_id": "numpy.isrealobj", "summary": "Return True if x is a not complex type or an array of complex numbers.\nThe type of the input is checked, not the value", "description": "", "code-info": {"name": "numpy.isrealobj", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isposinf(x, out=None)", "item_id": "numpy.isposinf", "summary": "Test element-wise for positive infinity, return result as bool array.\n\nParameters\n\nxarray_likeThe input array.\n\nyarray_like, optionalA boolean array with the same shape as x to store the result.\n\n\n\nReturns\n\noutndarrayA boolean array with the same dimensions as the input.\nIf second argument is not supplied then a boolean array is returned\nwith values True where the corresponding element of the input is\npositive infinity and values False where the element of the input is\nnot positive infinity.\nIf a second argument is supplied the result is stored there", "description": "", "code-info": {"name": "numpy.isposinf", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.islower(a)", "item_id": "numpy.char.islower", "summary": "Returns true for each element if all cased characters in the\nstring are lowercase and there is at least one cased character,\nfalse otherwise.\nCalls str.islower element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of bools\n\n\n\n\n\nSee also\nstr.islower\n\n", "description": "", "code-info": {"name": "numpy.char.islower", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isnan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.isnan", "summary": "Test element-wise for NaN and return result as a boolean array.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.isnan", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.islower(self)", "item_id": "numpy.chararray.islower", "summary": "Returns true for each element if all cased characters in the\nstring are lowercase and there is at least one cased character,\nfalse otherwise.\n\nSee also\nchar.islower\n\n", "description": "", "code-info": {"name": "numpy.chararray.islower", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.islower(self)", "item_id": "numpy.char.chararray.islower", "summary": "Returns true for each element if all cased characters in the\nstring are lowercase and there is at least one cased character,\nfalse otherwise.\n\nSee also\nchar.islower\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.islower", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isinf(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.isinf", "summary": "Test element-wise for positive or negative infinity.\nReturns a boolean array of the same shape as x, True where x ==\n+/-inf, otherwise False.\n\nParameters\n\nxarray_likeInput values\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.isinf", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isfinite(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.isfinite", "summary": "Test element-wise for finiteness (not infinity or not Not a Number).\nThe result is returned as a boolean array.\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.isfinite", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isin(element, test_elements, assume_unique=False, invert=False)", "item_id": "numpy.isin", "summary": "Calculates element in test_elements, broadcasting over element only.\nReturns a boolean array of the same shape as element that is True\nwhere an element of element is in test_elements and False otherwise.\n\nParameters\n\nelementarray_likeInput array.\n\ntest_elementsarray_likeThe values against which to test each value of element.\nThis argument is flattened if it is an array or array_like.\nSee notes for behavior with non-array-like parameters.\n\nassume_uniquebool, optionalIf True, the input arrays are both assumed to be unique, which\ncan speed up the calculation", "description": "", "code-info": {"name": "numpy.isin", "parameters": [{"name": "element", "is_optional": false, "type": "others", "description": ""}, {"name": " test_elements", "is_optional": false, "type": "others", "description": ""}, {"name": " assume_unique", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " invert", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.isfortran(a)", "item_id": "numpy.isfortran", "summary": "Check if the array is Fortran contiguous but not C contiguous.\nThis function is obsolete and, because of changes due to relaxed stride\nchecking, its return value for the same array may differ for versions\nof NumPy &gt;= 1.10.0 and previous versions", "description": "", "code-info": {"name": "numpy.isfortran", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isdigit(self)", "item_id": "numpy.chararray.isdigit", "summary": "Returns true for each element if all characters in the string are\ndigits and there is at least one character, false otherwise.\n\nSee also\nchar.isdigit\n\n", "description": "", "code-info": {"name": "numpy.chararray.isdigit", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.isdigit(self)", "item_id": "numpy.char.chararray.isdigit", "summary": "Returns true for each element if all characters in the string are\ndigits and there is at least one character, false otherwise.\n\nSee also\nchar.isdigit\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isdigit", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isdecimal(self)", "item_id": "numpy.chararray.isdecimal", "summary": "For each element in self, return True if there are only\ndecimal characters in the element.\n\nSee also\nchar.isdecimal\n\n", "description": "", "code-info": {"name": "numpy.chararray.isdecimal", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.isdecimal(self)", "item_id": "numpy.char.chararray.isdecimal", "summary": "For each element in self, return True if there are only\ndecimal characters in the element.\n\nSee also\nchar.isdecimal\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isdecimal", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isdigit(a)", "item_id": "numpy.char.isdigit", "summary": "Returns true for each element if all characters in the string are\ndigits and there is at least one character, false otherwise.\nCalls str.isdigit element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of bools\n\n\n\n\n\nSee also\nstr.isdigit\n\n", "description": "", "code-info": {"name": "numpy.char.isdigit", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isdecimal(a)", "item_id": "numpy.char.isdecimal", "summary": "For each element, return True if there are only decimal\ncharacters in the element.\nCalls unicode.isdecimal element-wise.\nDecimal characters include digit characters, and all characters\nthat that can be used to form decimal-radix numbers,\ne.g", "description": "", "code-info": {"name": "numpy.char.isdecimal", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.iscomplexobj(x)", "item_id": "numpy.iscomplexobj", "summary": "Check for a complex type or an array of complex numbers.\nThe type of the input is checked, not the value", "description": "", "code-info": {"name": "numpy.iscomplexobj", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.iscomplex(x)", "item_id": "numpy.iscomplex", "summary": "Returns a bool array, where True if input element is complex.\nWhat is tested is whether the input has a non-zero imaginary part, not if\nthe input type is complex.\n\nParameters\n\nxarray_likeInput array.\n\n\n\nReturns\n\noutndarray of boolsOutput array.\n\n\n\n\n\nSee also\nisreal\n\niscomplexobjReturn True if x is a complex type or an array of complex numbers.\n\n\n\nExamples\n&gt;&gt;&gt; np.iscomplex([1+1j, 1+0j, 4.5, 3, 2, 2j])\narray([ True, False, False, False, False,  True])\n\n\n", "description": "", "code-info": {"name": "numpy.iscomplex", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isalpha(self)", "item_id": "numpy.chararray.isalpha", "summary": "Returns true for each element if all characters in the string\nare alphabetic and there is at least one character, false\notherwise.\n\nSee also\nchar.isalpha\n\n", "description": "", "code-info": {"name": "numpy.chararray.isalpha", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)", "item_id": "numpy.isclose", "summary": "Returns a boolean array where two arrays are element-wise equal within a\ntolerance.\nThe tolerance values are positive, typically very small numbers", "description": "", "code-info": {"name": "numpy.isclose", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " rtol", "is_optional": true, "type": "others", "default_value": "1e-05", "description": ""}, {"name": " atol", "is_optional": true, "type": "others", "default_value": "1e-08", "description": ""}, {"name": " equal_nan", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.isalpha(self)", "item_id": "numpy.char.chararray.isalpha", "summary": "Returns true for each element if all characters in the string\nare alphabetic and there is at least one character, false\notherwise.\n\nSee also\nchar.isalpha\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isalpha", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isalpha(a)", "item_id": "numpy.char.isalpha", "summary": "Returns true for each element if all characters in the string are\nalphabetic and there is at least one character, false otherwise.\nCalls str.isalpha element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of bools\n\n\n\n\n\nSee also\nstr.isalpha\n\n", "description": "", "code-info": {"name": "numpy.char.isalpha", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.is_masked(x)", "item_id": "numpy.ma.is_masked", "summary": "Determine whether input has masked values.\nAccepts any object as input, but always returns False unless the\ninput is a MaskedArray containing masked values.\n\nParameters\n\nxarray_likeArray to check for masked values.\n\n\n\nReturns\n\nresultboolTrue if x is a MaskedArray with masked values, False otherwise.\n\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; x = ma.masked_equal([0, 1, 0, 2, 3], 0)\n&gt;&gt;&gt; x\nmasked_array(data=[--, 1, --, 2, 3],\n             mask=[ True, False,  True, False, False],\n       fill_value=0)\n&gt;&gt;&gt; ma.is_masked(x)\nTrue\n&gt;&gt;&gt; x = ma.masked_equal([0, 1, 0, 2, 3], 42)\n&gt;&gt;&gt; x\nmasked_array(data=[0, 1, 0, 2, 3],\n             mask=False,\n       fill_value=42)\n&gt;&gt;&gt; ma.is_masked(x)\nFalse\n\n\nAlways returns False if x isn\u2019t a MaskedArray.\n&gt;&gt;&gt; x = [False, True, False]\n&gt;&gt;&gt; ma.is_masked(x)\nFalse\n&gt;&gt;&gt; x = 'a string'\n&gt;&gt;&gt; ma.is_masked(x)\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.ma.is_masked", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.is_mask(m)", "item_id": "numpy.ma.is_mask", "summary": "Return True if m is a valid, standard mask.\nThis function does not check the contents of the input, only that the\ntype is MaskType", "description": "", "code-info": {"name": "numpy.ma.is_mask", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.isalnum(self)", "item_id": "numpy.chararray.isalnum", "summary": "Returns true for each element if all characters in the string\nare alphanumeric and there is at least one character, false\notherwise.\n\nSee also\nchar.isalnum\n\n", "description": "", "code-info": {"name": "numpy.chararray.isalnum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None)", "item_id": "numpy.is_busday", "summary": "Calculates which of the given dates are valid days, and which are not.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndatesarray_like of datetime64[D]The array of dates to process.\n\nweekmaskstr or array_like of bool, optionalA seven-element array indicating which of Monday through Sunday are\nvalid days", "description": "", "code-info": {"name": "numpy.is_busday", "parameters": [{"name": "dates", "is_optional": false, "type": "others", "description": ""}, {"name": " weekmask", "is_optional": true, "type": "string", "default_value": "'1111100'", "description": ""}, {"name": " holidays", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " busdaycal", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.isalnum(self)", "item_id": "numpy.char.chararray.isalnum", "summary": "Returns true for each element if all characters in the string\nare alphanumeric and there is at least one character, false\notherwise.\n\nSee also\nchar.isalnum\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.isalnum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.isalnum(a)", "item_id": "numpy.char.isalnum", "summary": "Returns true for each element if all characters in the string are\nalphanumeric and there is at least one character, false otherwise.\nCalls str.isalnum element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicode\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input type\n\n\n\n\n\nSee also\nstr.isalnum\n\n", "description": "", "code-info": {"name": "numpy.char.isalnum", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fft.irfft2(a, s=None, axes=(-2, -1)", "item_id": "numpy.fft.irfft2", "summary": "Compute the 2-dimensional inverse FFT of a real array.\n\nParameters\n\naarray_likeThe input array\n\nssequence of ints, optionalShape of the real output to the inverse FFT.\n\naxessequence of ints, optionalThe axes over which to compute the inverse fft.\nDefault is the last two axes.\n\nnorm{None, \u201cortho\u201d}, optional\nNew in version 1.10.0.\n\nNormalization mode (see numpy.fft)", "description": "", "code-info": {"name": "numpy.fft.irfft2", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fft.irfftn(a, s=None, axes=None, norm=None)", "item_id": "numpy.fft.irfftn", "summary": "Compute the inverse of the N-dimensional FFT of real input.\nThis function computes the inverse of the N-dimensional discrete\nFourier Transform for real input over any number of axes in an\nM-dimensional array by means of the Fast Fourier Transform (FFT)", "description": "", "code-info": {"name": "numpy.fft.irfftn", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.irfft(a, n=None, axis=-1, norm=None)", "item_id": "numpy.fft.irfft", "summary": "Compute the inverse of the n-point DFT for real input.\nThis function computes the inverse of the one-dimensional n-point\ndiscrete Fourier Transform of real input computed by rfft.\nIn other words, irfft(rfft(a), len(a)) == a to within numerical\naccuracy", "description": "", "code-info": {"name": "numpy.fft.irfft", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.invert(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.invert", "summary": "Compute bit-wise inversion, or bit-wise NOT, element-wise.\nComputes the bit-wise NOT of the underlying binary representation of\nthe integers in the input arrays", "description": "", "code-info": {"name": "numpy.invert", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.linalg.inv(a)", "item_id": "numpy.linalg.inv", "summary": "Compute the (multiplicative) inverse of a matrix.\nGiven a square matrix a, return the matrix ainv satisfying\ndot(a, ainv) = dot(ainv, a) = eye(a.shape[0]).\n\nParameters\n\na(\u2026, M, M) array_likeMatrix to be inverted.\n\n\n\nReturns\n\nainv(\u2026, M, M) ndarray or matrix(Multiplicative) inverse of the matrix a.\n\n\n\nRaises\n\nLinAlgErrorIf a is not square or inversion fails.\n\n\n\n\nNotes\n\nNew in version 1.8.0.\n\nBroadcasting rules apply, see the numpy.linalg documentation for\ndetails.\nExamples\n&gt;&gt;&gt; from numpy.linalg import inv\n&gt;&gt;&gt; a = np.array([[1., 2.], [3., 4.]])\n&gt;&gt;&gt; ainv = inv(a)\n&gt;&gt;&gt; np.allclose(np.dot(a, ainv), np.eye(2))\nTrue\n&gt;&gt;&gt; np.allclose(np.dot(ainv, a), np.eye(2))\nTrue\n\n\nIf a is a matrix object, then the return value is a matrix as well:\n&gt;&gt;&gt; ainv = inv(np.matrix(a))\n&gt;&gt;&gt; ainv\nmatrix([[-2", "description": "", "code-info": {"name": "numpy.linalg.inv", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.intersect1d(ar1, ar2, assume_unique=False, return_indices=False)", "item_id": "numpy.intersect1d", "summary": "Find the intersection of two arrays.\nReturn the sorted, unique values that are in both of the input arrays.\n\nParameters\n\nar1, ar2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.intersect1d", "parameters": [{"name": "ar1", "is_optional": false, "type": "others", "description": ""}, {"name": " ar2", "is_optional": false, "type": "others", "description": ""}, {"name": " assume_unique", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " return_indices", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.irr(values)", "item_id": "numpy.irr", "summary": "Return the Internal Rate of Return (IRR).\n\nDeprecated since version 1.18: irr is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\nThis is the \u201caverage\u201d periodically compounded rate of return\nthat gives a net present value of 0.0; for a more complete explanation,\nsee Notes below.\ndecimal.Decimal type is not supported.\n\nParameters\n\nvaluesarray_like, shape(N,)Input cash flows per time period", "description": "", "code-info": {"name": "numpy.irr", "parameters": [{"name": "values", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ipmt(rate, per, nper, pv, fv=0, when='end')", "item_id": "numpy.ipmt", "summary": "Compute the interest portion of a payment.\n\nDeprecated since version 1.18: ipmt is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nParameters\n\nratescalar or array_like of shape(M, )Rate of interest as decimal (not per cent) per period\n\nperscalar or array_like of shape(M, )Interest paid against the loan changes during the life or the loan.\nThe per is the payment period to calculate the interest amount.\n\nnperscalar or array_like of shape(M, )Number of compounding periods\n\npvscalar or array_like of shape(M, )Present value\n\nfvscalar or array_like of shape(M, ), optionalFuture value\n\nwhen{{\u2018begin\u2019, 1}, {\u2018end\u2019, 0}}, {string, int}, optionalWhen payments are due (\u2018begin\u2019 (1) or \u2018end\u2019 (0)).\nDefaults to {\u2018end\u2019, 0}.\n\n\n\nReturns\n\noutndarrayInterest portion of payment", "description": "", "code-info": {"name": "numpy.ipmt", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " per", "is_optional": false, "type": "others", "description": ""}, {"name": " nper", "is_optional": false, "type": "others", "description": ""}, {"name": " pv", "is_optional": false, "type": "others", "description": ""}, {"name": " fv", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}]}},
{"code": "numpy.interp(x, xp, fp, left=None, right=None, period=None)", "item_id": "numpy.interp", "summary": "One-dimensional linear interpolation.\nReturns the one-dimensional piecewise linear interpolant to a function\nwith given discrete data points (xp, fp), evaluated at x.\n\nParameters\n\nxarray_likeThe x-coordinates at which to evaluate the interpolated values.\n\nxp1-D sequence of floatsThe x-coordinates of the data points, must be increasing if argument\nperiod is not specified", "description": "", "code-info": {"name": "numpy.interp", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " xp", "is_optional": false, "type": "others", "description": ""}, {"name": " fp", "is_optional": false, "type": "others", "description": ""}, {"name": " left", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " right", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " period", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.interpolate(func, deg, domain=None, args=()", "item_id": "numpy.polynomial.chebyshev.Chebyshev.interpolate", "summary": "Interpolate a function at the Chebyshev points of the first kind.\nReturns the series that interpolates func at the Chebyshev points of\nthe first kind scaled and shifted to the domain", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.interpolate", "parameters": [{"name": "func", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " args", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.integ(self, m=1, k=[], lbnd=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.integ", "summary": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.\n\nParameters\n\nmnon-negative intThe number of integrations to perform.\n\nkarray_likeIntegration constants", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.integ(self, m=1, k=[], lbnd=None)", "item_id": "numpy.polynomial.hermite.Hermite.integ", "summary": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.\n\nParameters\n\nmnon-negative intThe number of integrations to perform.\n\nkarray_likeIntegration constants", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.integers(low, high=None, size=None, dtype=np.int64, endpoint=False)", "item_id": "numpy.random.Generator.integers", "summary": "Return random integers from low (inclusive) to high (exclusive), or\nif endpoint=True, low (inclusive) to high (inclusive)", "description": "", "code-info": {"name": "numpy.random.Generator.integers", "parameters": [{"name": "low", "is_optional": false, "type": "others", "description": ""}, {"name": " high", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "np.int64", "description": ""}, {"name": " endpoint", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.integ(self, m=1, k=[], lbnd=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.integ", "summary": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.\n\nParameters\n\nmnon-negative intThe number of integrations to perform.\n\nkarray_likeIntegration constants", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.integ(self, m=1, k=[], lbnd=None)", "item_id": "numpy.polynomial.legendre.Legendre.integ", "summary": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.\n\nParameters\n\nmnon-negative intThe number of integrations to perform.\n\nkarray_likeIntegration constants", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.integ(self, m=1, k=[], lbnd=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.integ", "summary": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.\n\nParameters\n\nmnon-negative intThe number of integrations to perform.\n\nkarray_likeIntegration constants", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.integ(self, m=1, k=[], lbnd=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.integ", "summary": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.\n\nParameters\n\nmnon-negative intThe number of integrations to perform.\n\nkarray_likeIntegration constants", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.poly1d.integ(self, m=1, k=0)", "item_id": "numpy.poly1d.integ", "summary": "Return an antiderivative (indefinite integral) of this polynomial.\nRefer to polyint for full documentation.\n\nSee also\n\npolyintequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.poly1d.integ", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.indices(dimensions, dtype=&lt;class 'int'&gt;, sparse=False)", "item_id": "numpy.ma.indices", "summary": "Return an array representing the indices of a grid.\nCompute an array where the subarrays contain index values 0, 1, \u2026\nvarying only along the corresponding axis.\n\nParameters\n\ndimensionssequence of intsThe shape of the grid.\n\ndtypedtype, optionalData type of the result.\n\nsparseboolean, optionalReturn a sparse representation of the grid instead of a dense\nrepresentation", "description": "", "code-info": {"name": "numpy.ma.indices", "parameters": [{"name": "dimensions", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'int'&gt;", "description": ""}, {"name": " sparse", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.insert(arr, obj, values, axis=None)", "item_id": "numpy.insert", "summary": "Insert values along the given axis before the given indices.\n\nParameters\n\narrarray_likeInput array.\n\nobjint, slice or sequence of intsObject that defines the index or indices before which values is\ninserted.\n\nNew in version 1.8.0.\n\nSupport for multiple insertions when obj is a single scalar or a\nsequence with one element (similar to calling insert multiple\ntimes).\n\nvaluesarray_likeValues to insert into arr", "description": "", "code-info": {"name": "numpy.insert", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " obj", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.innerproduct(a, b)", "item_id": "numpy.ma.innerproduct", "summary": "Inner product of two arrays.\nOrdinary inner product of vectors for 1-D arrays (without complex\nconjugation), in higher dimensions a sum product over the last axes.\n\nParameters\n\na, barray_likeIf a and b are nonscalar, their last dimensions must match.\n\n\n\nReturns\n\noutndarrayout.shape = a.shape[:-1] + b.shape[:-1]\n\n\n\nRaises\n\nValueErrorIf the last dimension of a and b has different size.\n\n\n\n\n\nSee also\n\ntensordotSum products over arbitrary axes.\n\ndotGeneralised matrix product, using second last dimension of b.\n\neinsumEinstein summation convention.\n\n\n\nNotes\nMasked values are replaced by 0.\nFor vectors (1-D arrays) it computes the ordinary inner-product:\nnp.inner(a, b) = sum(a[:]*b[:])\n\n\nMore generally, if ndim(a) = r &gt; 0 and ndim(b) = s &gt; 0:\nnp.inner(a, b) = np.tensordot(a, b, axes=(-1,-1))\n\n\nor explicitly:\nnp.inner(a, b)[i0,...,ir-1,j0,...,js-1]\n     = sum(a[i0,...,ir-1,:]*b[j0,...,js-1,:])\n\n\nIn addition a or b may be scalars, in which case:\nnp.inner(a,b) = a*b\n\n\nExamples\nOrdinary inner product for vectors:\n&gt;&gt;&gt; a = np.array([1,2,3])\n&gt;&gt;&gt; b = np.array([0,1,0])\n&gt;&gt;&gt; np.inner(a, b)\n2\n\n\nA multidimensional example:\n&gt;&gt;&gt; a = np.arange(24).reshape((2,3,4))\n&gt;&gt;&gt; b = np.arange(4)\n&gt;&gt;&gt; np.inner(a, b)\narray([[ 14,  38,  62],\n       [ 86, 110, 134]])\n\n\nAn example where b is a scalar:\n&gt;&gt;&gt; np.inner(np.eye(2), 7)\narray([[7., 0.],\n       [0., 7.]])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.innerproduct", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.inner(a, b)", "item_id": "numpy.ma.inner", "summary": "Inner product of two arrays.\nOrdinary inner product of vectors for 1-D arrays (without complex\nconjugation), in higher dimensions a sum product over the last axes.\n\nParameters\n\na, barray_likeIf a and b are nonscalar, their last dimensions must match.\n\n\n\nReturns\n\noutndarrayout.shape = a.shape[:-1] + b.shape[:-1]\n\n\n\nRaises\n\nValueErrorIf the last dimension of a and b has different size.\n\n\n\n\n\nSee also\n\ntensordotSum products over arbitrary axes.\n\ndotGeneralised matrix product, using second last dimension of b.\n\neinsumEinstein summation convention.\n\n\n\nNotes\nMasked values are replaced by 0.\nFor vectors (1-D arrays) it computes the ordinary inner-product:\nnp.inner(a, b) = sum(a[:]*b[:])\n\n\nMore generally, if ndim(a) = r &gt; 0 and ndim(b) = s &gt; 0:\nnp.inner(a, b) = np.tensordot(a, b, axes=(-1,-1))\n\n\nor explicitly:\nnp.inner(a, b)[i0,...,ir-1,j0,...,js-1]\n     = sum(a[i0,...,ir-1,:]*b[j0,...,js-1,:])\n\n\nIn addition a or b may be scalars, in which case:\nnp.inner(a,b) = a*b\n\n\nExamples\nOrdinary inner product for vectors:\n&gt;&gt;&gt; a = np.array([1,2,3])\n&gt;&gt;&gt; b = np.array([0,1,0])\n&gt;&gt;&gt; np.inner(a, b)\n2\n\n\nA multidimensional example:\n&gt;&gt;&gt; a = np.arange(24).reshape((2,3,4))\n&gt;&gt;&gt; b = np.arange(4)\n&gt;&gt;&gt; np.inner(a, b)\narray([[ 14,  38,  62],\n       [ 86, 110, 134]])\n\n\nAn example where b is a scalar:\n&gt;&gt;&gt; np.inner(np.eye(2), 7)\narray([[7., 0.],\n       [0., 7.]])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.inner", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.inner(a, b)", "item_id": "numpy.inner", "summary": "Inner product of two arrays.\nOrdinary inner product of vectors for 1-D arrays (without complex\nconjugation), in higher dimensions a sum product over the last axes.\n\nParameters\n\na, barray_likeIf a and b are nonscalar, their last dimensions must match.\n\n\n\nReturns\n\noutndarrayout.shape = a.shape[:-1] + b.shape[:-1]\n\n\n\nRaises\n\nValueErrorIf the last dimension of a and b has different size.\n\n\n\n\n\nSee also\n\ntensordotSum products over arbitrary axes.\n\ndotGeneralised matrix product, using second last dimension of b.\n\neinsumEinstein summation convention.\n\n\n\nNotes\nFor vectors (1-D arrays) it computes the ordinary inner-product:\nnp.inner(a, b) = sum(a[:]*b[:])\n\n\nMore generally, if ndim(a) = r &gt; 0 and ndim(b) = s &gt; 0:\nnp.inner(a, b) = np.tensordot(a, b, axes=(-1,-1))\n\n\nor explicitly:\nnp.inner(a, b)[i0,...,ir-1,j0,...,js-1]\n     = sum(a[i0,...,ir-1,:]*b[j0,...,js-1,:])\n\n\nIn addition a or b may be scalars, in which case:\nnp.inner(a,b) = a*b\n\n\nExamples\nOrdinary inner product for vectors:\n&gt;&gt;&gt; a = np.array([1,2,3])\n&gt;&gt;&gt; b = np.array([0,1,0])\n&gt;&gt;&gt; np.inner(a, b)\n2\n\n\nA multidimensional example:\n&gt;&gt;&gt; a = np.arange(24).reshape((2,3,4))\n&gt;&gt;&gt; b = np.arange(4)\n&gt;&gt;&gt; np.inner(a, b)\narray([[ 14,  38,  62],\n       [ 86, 110, 134]])\n\n\nAn example where b is a scalar:\n&gt;&gt;&gt; np.inner(np.eye(2), 7)\narray([[7., 0.],\n       [0., 7.]])\n\n\n", "description": "", "code-info": {"name": "numpy.inner", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.info(object=None, maxwidth=76, output=&lt;_io.TextIOWrapper name='&lt;stdout&gt;' mode='w' encoding='utf-8'&gt;, toplevel='numpy')", "item_id": "numpy.info", "summary": "Get help information for a function, class, or module.\n\nParameters\n\nobjectobject or str, optionalInput object or name to get information about", "description": "", "code-info": {"name": "numpy.info", "parameters": [{"name": "object", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " maxwidth", "is_optional": true, "type": "int", "default_value": "76", "description": ""}, {"name": " output", "is_optional": true, "type": "others", "default_value": "&lt;_io.TextIOWrapper name", "description": ""}, {"name": " toplevel", "is_optional": true, "type": "string", "default_value": "'numpy'", "description": ""}]}},
{"code": "numpy.char.index(a, sub, start=0, end=None)", "item_id": "numpy.char.index", "summary": "Like find, but raises ValueError when the substring is not found.\nCalls str.index element-wise.\n\nParameters\n\naarray_like of str or unicode\nsubstr or unicode\nstart, endint, optional\n\n\nReturns\n\noutndarrayOutput array of ints", "description": "", "code-info": {"name": "numpy.char.index", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.indices(dimensions, dtype=&lt;class 'int'&gt;, sparse=False)", "item_id": "numpy.indices", "summary": "Return an array representing the indices of a grid.\nCompute an array where the subarrays contain index values 0, 1, \u2026\nvarying only along the corresponding axis.\n\nParameters\n\ndimensionssequence of intsThe shape of the grid.\n\ndtypedtype, optionalData type of the result.\n\nsparseboolean, optionalReturn a sparse representation of the grid instead of a dense\nrepresentation", "description": "", "code-info": {"name": "numpy.indices", "parameters": [{"name": "dimensions", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'int'&gt;", "description": ""}, {"name": " sparse", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.chararray.index(self, sub, start=0, end=None)", "item_id": "numpy.chararray.index", "summary": "Like find, but raises ValueError when the substring is not found.\n\nSee also\nchar.index\n\n", "description": "", "code-info": {"name": "numpy.chararray.index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.index(self, sub, start=0, end=None)", "item_id": "numpy.char.chararray.index", "summary": "Like find, but raises ValueError when the substring is not found.\n\nSee also\nchar.index\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.in1d(ar1, ar2, assume_unique=False, invert=False)", "item_id": "numpy.in1d", "summary": "Test whether each element of a 1-D array is also present in a second array.\nReturns a boolean array the same length as ar1 that is True\nwhere an element of ar1 is in ar2 and False otherwise.\nWe recommend using isin instead of in1d for new code.\n\nParameters\n\nar1(M,) array_likeInput array.\n\nar2array_likeThe values against which to test each value of ar1.\n\nassume_uniquebool, optionalIf True, the input arrays are both assumed to be unique, which\ncan speed up the calculation", "description": "", "code-info": {"name": "numpy.in1d", "parameters": [{"name": "ar1", "is_optional": false, "type": "others", "description": ""}, {"name": " ar2", "is_optional": false, "type": "others", "description": ""}, {"name": " assume_unique", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " invert", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.iinfo(type)", "item_id": "numpy.iinfo", "summary": "Machine limits for integer types.\n\nParameters\n\nint_typeinteger type, dtype, or instanceThe kind of integer data type to get information about.\n\n\n\n\n\nSee also\n\nfinfoThe equivalent for floating point data types.\n\n\n\nExamples\nWith types:\n&gt;&gt;&gt; ii16 = np.iinfo(np.int16)\n&gt;&gt;&gt; ii16.min\n-32768\n&gt;&gt;&gt; ii16.max\n32767\n&gt;&gt;&gt; ii32 = np.iinfo(np.int32)\n&gt;&gt;&gt; ii32.min\n-2147483648\n&gt;&gt;&gt; ii32.max\n2147483647\n\n\nWith instances:\n&gt;&gt;&gt; ii32 = np.iinfo(np.int32(10))\n&gt;&gt;&gt; ii32.min\n-2147483648\n&gt;&gt;&gt; ii32.max\n2147483647\n\n\n\nAttributes\n\nbitsintThe number of bits occupied by the type.\n\nminintMinimum value of given dtype.\n\nmaxintMaximum value of given dtype.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.iinfo", "parameters": [{"name": "type", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fft.ihfft(a, n=None, axis=-1, norm=None)", "item_id": "numpy.fft.ihfft", "summary": "Compute the inverse FFT of a signal that has Hermitian symmetry.\n\nParameters\n\naarray_likeInput array.\n\nnint, optionalLength of the inverse FFT, the number of points along\ntransformation axis in the input to use", "description": "", "code-info": {"name": "numpy.fft.ihfft", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.ifftshift(x, axes=None)", "item_id": "numpy.fft.ifftshift", "summary": "The inverse of fftshift", "description": "", "code-info": {"name": "numpy.fft.ifftshift", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.ifft2(a, s=None, axes=(-2, -1)", "item_id": "numpy.fft.ifft2", "summary": "Compute the 2-dimensional inverse discrete Fourier Transform.\nThis function computes the inverse of the 2-dimensional discrete Fourier\nTransform over any number of axes in an M-dimensional array by means of\nthe Fast Fourier Transform (FFT)", "description": "", "code-info": {"name": "numpy.fft.ifft2", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fft.ifft(a, n=None, axis=-1, norm=None)", "item_id": "numpy.fft.ifft", "summary": "Compute the one-dimensional inverse discrete Fourier Transform.\nThis function computes the inverse of the one-dimensional n-point\ndiscrete Fourier transform computed by fft", "description": "", "code-info": {"name": "numpy.fft.ifft", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.ifftn(a, s=None, axes=None, norm=None)", "item_id": "numpy.fft.ifftn", "summary": "Compute the N-dimensional inverse discrete Fourier Transform.\nThis function computes the inverse of the N-dimensional discrete\nFourier Transform over any number of axes in an M-dimensional array by\nmeans of the Fast Fourier Transform (FFT)", "description": "", "code-info": {"name": "numpy.fft.ifftn", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.ids(self)", "item_id": "numpy.ma.MaskedArray.ids", "summary": "Return the addresses of the data and mask areas.\n\nParameters\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([1, 2, 3], mask=[0, 1, 1])\n&gt;&gt;&gt; x.ids()\n(166670640, 166659832) # may vary\n\n\nIf the array has no mask, the address of nomask is returned", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.ids", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.identity(domain=None, window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.identity", "summary": "Identity function.\nIf p is the returned series, then p(x) == x for all\nvalues of x.\n\nParameters\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.identity", "parameters": [{"name": "domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.ids(self)", "item_id": "numpy.ma.masked_array.ids", "summary": "Return the addresses of the data and mask areas.\n\nParameters\n\nNone\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([1, 2, 3], mask=[0, 1, 1])\n&gt;&gt;&gt; x.ids()\n(166670640, 166659832) # may vary\n\n\nIf the array has no mask, the address of nomask is returned", "description": "", "code-info": {"name": "numpy.ma.masked_array.ids", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.identity(domain=None, window=None)", "item_id": "numpy.polynomial.legendre.Legendre.identity", "summary": "Identity function.\nIf p is the returned series, then p(x) == x for all\nvalues of x.\n\nParameters\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.identity", "parameters": [{"name": "domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.identity(domain=None, window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.identity", "summary": "Identity function.\nIf p is the returned series, then p(x) == x for all\nvalues of x.\n\nParameters\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.identity", "parameters": [{"name": "domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.identity(domain=None, window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.identity", "summary": "Identity function.\nIf p is the returned series, then p(x) == x for all\nvalues of x.\n\nParameters\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.identity", "parameters": [{"name": "domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.identity(domain=None, window=None)", "item_id": "numpy.polynomial.hermite.Hermite.identity", "summary": "Identity function.\nIf p is the returned series, then p(x) == x for all\nvalues of x.\n\nParameters\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.identity", "parameters": [{"name": "domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.identity(domain=None, window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.identity", "summary": "Identity function.\nIf p is the returned series, then p(x) == x for all\nvalues of x.\n\nParameters\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.identity", "parameters": [{"name": "domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.identity(n, dtype=None)", "item_id": "numpy.ma.identity", "summary": "Return the identity array.\nThe identity array is a square array with ones on\nthe main diagonal.\n\nParameters\n\nnintNumber of rows (and columns) in n x n output.\n\ndtypedata-type, optionalData-type of the output", "description": "", "code-info": {"name": "numpy.ma.identity", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.i0(x)", "item_id": "numpy.i0", "summary": "Modified Bessel function of the first kind, order 0.\nUsually denoted ", "description": "", "code-info": {"name": "numpy.i0", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matlib.identity(n, dtype=None)", "item_id": "numpy.matlib.identity", "summary": "Returns the square identity matrix of given size.\n\nParameters\n\nnintSize of the returned identity matrix.\n\ndtypedata-type, optionalData-type of the output", "description": "", "code-info": {"name": "numpy.matlib.identity", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.identity(n, dtype=None)", "item_id": "numpy.identity", "summary": "Return the identity array.\nThe identity array is a square array with ones on\nthe main diagonal.\n\nParameters\n\nnintNumber of rows (and columns) in n x n output.\n\ndtypedata-type, optionalData-type of the output", "description": "", "code-info": {"name": "numpy.identity", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.hypot", "summary": "Given the \u201clegs\u201d of a right triangle, return its hypotenuse.\nEquivalent to sqrt(x1**2 + x2**2), element-wise", "description": "", "code-info": {"name": "numpy.hypot", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.hypergeometric(ngood, nbad, nsample, size=None)", "item_id": "numpy.random.RandomState.hypergeometric", "summary": "Draw samples from a Hypergeometric distribution.\nSamples are drawn from a hypergeometric distribution with specified\nparameters, ngood (ways to make a good selection), nbad (ways to make\na bad selection), and nsample (number of items sampled, which is less\nthan or equal to the sum ngood + nbad).\n\nNote\nNew code should use the hypergeometric method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nngoodint or array_like of intsNumber of ways to make a good selection", "description": "", "code-info": {"name": "numpy.random.RandomState.hypergeometric", "parameters": [{"name": "ngood", "is_optional": false, "type": "others", "description": ""}, {"name": " nbad", "is_optional": false, "type": "others", "description": ""}, {"name": " nsample", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.hypergeometric(ngood, nbad, nsample, size=None)", "item_id": "numpy.random.Generator.hypergeometric", "summary": "Draw samples from a Hypergeometric distribution.\nSamples are drawn from a hypergeometric distribution with specified\nparameters, ngood (ways to make a good selection), nbad (ways to make\na bad selection), and nsample (number of items sampled, which is less\nthan or equal to the sum ngood + nbad).\n\nParameters\n\nngoodint or array_like of intsNumber of ways to make a good selection", "description": "", "code-info": {"name": "numpy.random.Generator.hypergeometric", "parameters": [{"name": "ngood", "is_optional": false, "type": "others", "description": ""}, {"name": " nbad", "is_optional": false, "type": "others", "description": ""}, {"name": " nsample", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.hstack(tup)", "item_id": "numpy.hstack", "summary": "Stack arrays in sequence horizontally (column wise).\nThis is equivalent to concatenation along the second axis, except for 1-D\narrays where it concatenates along the first axis", "description": "", "code-info": {"name": "numpy.hstack", "parameters": [{"name": "tup", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.hstack(*args, **kwargs)", "item_id": "numpy.ma.hstack", "summary": "\nStack arrays in sequence horizontally (column wise).\nThis is equivalent to concatenation along the second axis, except for 1-D\narrays where it concatenates along the first axis", "description": "", "code-info": {"name": "numpy.ma.hstack", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.hsplit(ary, indices_or_sections)", "item_id": "numpy.hsplit", "summary": "Split an array into multiple sub-arrays horizontally (column-wise).\nPlease refer to the split documentation", "description": "", "code-info": {"name": "numpy.hsplit", "parameters": [{"name": "ary", "is_optional": false, "type": "others", "description": ""}, {"name": " indices_or_sections", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.hsplit(*args, **kwargs)", "item_id": "numpy.ma.hsplit", "summary": "\nSplit an array into multiple sub-arrays horizontally (column-wise).\nPlease refer to the split documentation", "description": "", "code-info": {"name": "numpy.ma.hsplit", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.hypergeometric(ngood, nbad, nsample, size=None)", "item_id": "numpy.random.hypergeometric", "summary": "Draw samples from a Hypergeometric distribution.\nSamples are drawn from a hypergeometric distribution with specified\nparameters, ngood (ways to make a good selection), nbad (ways to make\na bad selection), and nsample (number of items sampled, which is less\nthan or equal to the sum ngood + nbad).\n\nNote\nNew code should use the hypergeometric method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nngoodint or array_like of intsNumber of ways to make a good selection", "description": "", "code-info": {"name": "numpy.random.hypergeometric", "parameters": [{"name": "ngood", "is_optional": false, "type": "others", "description": ""}, {"name": " nbad", "is_optional": false, "type": "others", "description": ""}, {"name": " nsample", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None)", "item_id": "numpy.histogramdd", "summary": "Compute the multidimensional histogram of some data.\n\nParameters\n\nsample(N, D) array, or (D, N) array_likeThe data to be histogrammed.\nNote the unusual interpretation of sample when an array_like:\n\nWhen an array, each row is a coordinate in a D-dimensional space -\nsuch as histogramgramdd(np.array([p1, p2, p3])).\nWhen an array_like, each element is the list of values for single\ncoordinate - such as histogramgramdd((X, Y, Z)).\n\nThe first form should be preferred.\n\nbinssequence or int, optionalThe bin specification:\n\nA sequence of arrays describing the monotonically increasing bin\nedges along each dimension.\nThe number of bins for each dimension (nx, ny, \u2026 =bins)\nThe number of bins for all dimensions (nx=ny=\u2026=bins).\n\n\nrangesequence, optionalA sequence of length D, each an optional (lower, upper) tuple giving\nthe outer bin edges to be used if the edges are not given explicitly in\nbins.\nAn entry of None in the sequence results in the minimum and maximum\nvalues being used for the corresponding dimension.\nThe default, None, is equivalent to passing a tuple of D None values.\n\ndensitybool, optionalIf False, the default, returns the number of samples in each bin.\nIf True, returns the probability density function at the bin,\nbin_count / sample_count / bin_volume.\n\nnormedbool, optionalAn alias for the density argument that behaves identically", "description": "", "code-info": {"name": "numpy.histogramdd", "parameters": [{"name": "sample", "is_optional": false, "type": "others", "description": ""}, {"name": " bins", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": " range", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " normed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " density", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermx([0. , 0.5])", "item_id": "numpy.polynomial.hermite.hermx", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermx", "parameters": [{"name": "[0. ", "is_optional": false, "type": "others", "description": ""}, {"name": " 0.5]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.histogram_bin_edges(a, bins=10, range=None, weights=None)", "item_id": "numpy.histogram_bin_edges", "summary": "Function to calculate only the edges of the bins used by the histogram\nfunction.\n\nParameters\n\naarray_likeInput data", "description": "", "code-info": {"name": "numpy.histogram_bin_edges", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " bins", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": " range", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None)", "item_id": "numpy.histogram2d", "summary": "Compute the bi-dimensional histogram of two data samples.\n\nParameters\n\nxarray_like, shape (N,)An array containing the x coordinates of the points to be\nhistogrammed.\n\nyarray_like, shape (N,)An array containing the y coordinates of the points to be\nhistogrammed.\n\nbinsint or array_like or [int, int] or [array, array], optionalThe bin specification:\n\n\nIf int, the number of bins for the two dimensions (nx=ny=bins).\nIf array_like, the bin edges for the two dimensions\n(x_edges=y_edges=bins).\nIf [int, int], the number of bins in each dimension\n(nx, ny = bins).\nIf [array, array], the bin edges in each dimension\n(x_edges, y_edges = bins).\nA combination [int, array] or [array, int], where int\nis the number of bins and array is the bin edges.\n\n\n\nrangearray_like, shape(2,2), optionalThe leftmost and rightmost edges of the bins along each dimension\n(if not specified explicitly in the bins parameters):\n[[xmin, xmax], [ymin, ymax]]", "description": "", "code-info": {"name": "numpy.histogram2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " bins", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": " range", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " normed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " density", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.hfft(a, n=None, axis=-1, norm=None)", "item_id": "numpy.fft.hfft", "summary": "Compute the FFT of a signal that has Hermitian symmetry, i.e., a real\nspectrum.\n\nParameters\n\naarray_likeThe input array.\n\nnint, optionalLength of the transformed axis of the output", "description": "", "code-info": {"name": "numpy.fft.hfft", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.histogram(a, bins=10, range=None, normed=None, weights=None, density=None)", "item_id": "numpy.histogram", "summary": "Compute the histogram of a set of data.\n\nParameters\n\naarray_likeInput data", "description": "", "code-info": {"name": "numpy.histogram", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " bins", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": " range", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " normed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " density", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermzero([0])", "item_id": "numpy.polynomial.hermite.hermzero", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermzero", "parameters": [{"name": "[0]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermweight(x)", "item_id": "numpy.polynomial.hermite.hermweight", "summary": "Weight function of the Hermite polynomials.\nThe weight function is  and the interval of\nintegration is ", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermweight", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermvander3d(x, y, z, deg)", "item_id": "numpy.polynomial.hermite.hermvander3d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y, z)", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermvander3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermvander2d(x, y, deg)", "item_id": "numpy.polynomial.hermite.hermvander2d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y)", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermvander2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermvander(x, deg)", "item_id": "numpy.polynomial.hermite.hermvander", "summary": "Pseudo-Vandermonde matrix of given degree.\nReturns the pseudo-Vandermonde matrix of degree deg and sample points\nx", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermvander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermval3d(x, y, z, c)", "item_id": "numpy.polynomial.hermite.hermval3d", "summary": "Evaluate a 3-D Hermite series at points (x, y, z).\nThis function returns the values:\n\n\nThe parameters x, y, and z are converted to arrays only if\nthey are tuples or a lists, otherwise they are treated as a scalars and\nthey must have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermval3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermval2d(x, y, c)", "item_id": "numpy.polynomial.hermite.hermval2d", "summary": "Evaluate a 2-D Hermite series at points (x, y).\nThis function returns the values:\n\n\nThe parameters x and y are converted to arrays only if they are\ntuples or a lists, otherwise they are treated as a scalars and they\nmust have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermval2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermval(x, c, tensor=True)", "item_id": "numpy.polynomial.hermite.hermval", "summary": "Evaluate an Hermite series at points x.\nIf c is of length n + 1, this function returns the value:\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermval", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermtrim(c, tol=0)", "item_id": "numpy.polynomial.hermite.hermtrim", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermtrim", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermsub(c1, c2)", "item_id": "numpy.polynomial.hermite.hermsub", "summary": "Subtract one Hermite series from another.\nReturns the difference of two Hermite series c1 - c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermsub", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermroots(c)", "item_id": "numpy.polynomial.hermite.hermroots", "summary": "Compute the roots of a Hermite series.\nReturn the roots (a.k.a", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermroots", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermone([1])", "item_id": "numpy.polynomial.hermite.hermone", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermone", "parameters": [{"name": "[1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermmulx(c)", "item_id": "numpy.polynomial.hermite.hermmulx", "summary": "Multiply a Hermite series by x.\nMultiply the Hermite series c by x, where x is the independent\nvariable.\n\nParameters\n\ncarray_like1-D array of Hermite series coefficients ordered from low to\nhigh.\n\n\n\nReturns\n\noutndarrayArray representing the result of the multiplication.\n\n\n\n\n\nSee also\nhermadd, hermsub, hermmul, hermdiv, hermpow\n\nNotes\nThe multiplication uses the recursion relationship for Hermite\npolynomials in the form\n\n\nxP_i(x) = (P_{i + 1}(x)/2 + i*P_{i - 1}(x))\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite import hermmulx\n&gt;&gt;&gt; hermmulx([1, 2, 3])\narray([2", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermmulx", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermpow(c, pow, maxpower=16)", "item_id": "numpy.polynomial.hermite.hermpow", "summary": "Raise a Hermite series to a power.\nReturns the Hermite series c raised to the power pow", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermpow", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " pow", "is_optional": false, "type": "others", "description": ""}, {"name": " maxpower", "is_optional": true, "type": "int", "default_value": "16", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermmul(c1, c2)", "item_id": "numpy.polynomial.hermite.hermmul", "summary": "Multiply one Hermite series by another.\nReturns the product of two Hermite series c1 * c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermmul", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE(coef, domain=None, window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE", "summary": "An HermiteE series class.\nThe HermiteE class provides the standard Python numerical methods\n\u2018+\u2019, \u2018-\u2018, \u2018*\u2019, \u2018//\u2019, \u2018%\u2019, \u2018divmod\u2019, \u2018**\u2019, and \u2018()\u2019 as well as the\nattributes and methods listed in the ABCPolyBase documentation.\n\nParameters\n\ncoefarray_likeHermiteE coefficients in order of increasing degree, i.e,\n(1, 2, 3) gives 1*He_0(x) + 2*He_1(X) + 3*He_2(x).\n\ndomain(2,) array_like, optionalDomain to use", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE", "parameters": [{"name": "coef", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite(coef, domain=None, window=None)", "item_id": "numpy.polynomial.hermite.Hermite", "summary": "An Hermite series class.\nThe Hermite class provides the standard Python numerical methods\n\u2018+\u2019, \u2018-\u2018, \u2018*\u2019, \u2018//\u2019, \u2018%\u2019, \u2018divmod\u2019, \u2018**\u2019, and \u2018()\u2019 as well as the\nattributes and methods listed in the ABCPolyBase documentation.\n\nParameters\n\ncoefarray_likeHermite coefficients in order of increasing degree, i.e,\n(1, 2, 3) gives 1*H_0(x) + 2*H_1(X) + 3*H_2(x).\n\ndomain(2,) array_like, optionalDomain to use", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite", "parameters": [{"name": "coef", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0)", "item_id": "numpy.polynomial.hermite.hermint", "summary": "Integrate a Hermite series.\nReturns the Hermite series coefficients c integrated m times from\nlbnd along axis", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermint", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermgrid3d(x, y, z, c)", "item_id": "numpy.polynomial.hermite.hermgrid3d", "summary": "Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.\nThis function returns the values:\n\n\nwhere the points (a, b, c) consist of all triples formed by taking\na from x, b from y, and c from z", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermgrid3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermgrid2d(x, y, c)", "item_id": "numpy.polynomial.hermite.hermgrid2d", "summary": "Evaluate a 2-D Hermite series on the Cartesian product of x and y.\nThis function returns the values:\n\n\nwhere the points (a, b) consist of all pairs formed by taking\na from x and b from y", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermgrid2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermgauss(deg)", "item_id": "numpy.polynomial.hermite.hermgauss", "summary": "Gauss-Hermite quadrature.\nComputes the sample points and weights for Gauss-Hermite quadrature.\nThese sample points and weights will correctly integrate polynomials of\ndegree  or less over the interval \nwith the weight function .\n\nParameters\n\ndegintNumber of sample points and weights", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermgauss", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermfromroots(roots)", "item_id": "numpy.polynomial.hermite.hermfromroots", "summary": "Generate a Hermite series with given roots.\nThe function returns the coefficients of the polynomial\n\n\nin Hermite form, where the r_n are the roots specified in roots.\nIf a zero has multiplicity n, then it must appear in roots n times.\nFor instance, if 2 is a root of multiplicity three and 3 is a root of\nmultiplicity 2, then roots looks something like [2, 2, 2, 3, 3]", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermfromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermfit(x, y, deg, rcond=None, full=False, w=None)", "item_id": "numpy.polynomial.hermite.hermfit", "summary": "Least squares fit of Hermite series to data.\nReturn the coefficients of a Hermite series of degree deg that is the\nleast squares fit to the data values y given at points x", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermezero([0])", "item_id": "numpy.polynomial.hermite_e.hermezero", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermezero", "parameters": [{"name": "[0]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermex([0, 1])", "item_id": "numpy.polynomial.hermite_e.hermex", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermex", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeweight(x)", "item_id": "numpy.polynomial.hermite_e.hermeweight", "summary": "Weight function of the Hermite_e polynomials.\nThe weight function is  and the interval of\nintegration is ", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeweight", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermevander3d(x, y, z, deg)", "item_id": "numpy.polynomial.hermite_e.hermevander3d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y, z)", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermevander3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermevander2d(x, y, deg)", "item_id": "numpy.polynomial.hermite_e.hermevander2d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y)", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermevander2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermevander(x, deg)", "item_id": "numpy.polynomial.hermite_e.hermevander", "summary": "Pseudo-Vandermonde matrix of given degree.\nReturns the pseudo-Vandermonde matrix of degree deg and sample points\nx", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermevander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeval3d(x, y, z, c)", "item_id": "numpy.polynomial.hermite_e.hermeval3d", "summary": "Evaluate a 3-D Hermite_e series at points (x, y, z).\nThis function returns the values:\n\n\nThe parameters x, y, and z are converted to arrays only if\nthey are tuples or a lists, otherwise they are treated as a scalars and\nthey must have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeval3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermesub(c1, c2)", "item_id": "numpy.polynomial.hermite_e.hermesub", "summary": "Subtract one Hermite series from another.\nReturns the difference of two Hermite series c1 - c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermesub", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeroots(c)", "item_id": "numpy.polynomial.hermite_e.hermeroots", "summary": "Compute the roots of a HermiteE series.\nReturn the roots (a.k.a", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeroots", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeval2d(x, y, c)", "item_id": "numpy.polynomial.hermite_e.hermeval2d", "summary": "Evaluate a 2-D HermiteE series at points (x, y).\nThis function returns the values:\n\n\nThe parameters x and y are converted to arrays only if they are\ntuples or a lists, otherwise they are treated as a scalars and they\nmust have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeval2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeval(x, c, tensor=True)", "item_id": "numpy.polynomial.hermite_e.hermeval", "summary": "Evaluate an HermiteE series at points x.\nIf c is of length n + 1, this function returns the value:\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeval", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermetrim(c, tol=0)", "item_id": "numpy.polynomial.hermite_e.hermetrim", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermetrim", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermepow(c, pow, maxpower=16)", "item_id": "numpy.polynomial.hermite_e.hermepow", "summary": "Raise a Hermite series to a power.\nReturns the Hermite series c raised to the power pow", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermepow", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " pow", "is_optional": false, "type": "others", "description": ""}, {"name": " maxpower", "is_optional": true, "type": "int", "default_value": "16", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeone([1])", "item_id": "numpy.polynomial.hermite_e.hermeone", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeone", "parameters": [{"name": "[1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermemul(c1, c2)", "item_id": "numpy.polynomial.hermite_e.hermemul", "summary": "Multiply one Hermite series by another.\nReturns the product of two Hermite series c1 * c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermemul", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeline(off, scl)", "item_id": "numpy.polynomial.hermite_e.hermeline", "summary": "Hermite series whose graph is a straight line.\n\nParameters\n\noff, sclscalarsThe specified line is given by off + scl*x.\n\n\n\nReturns\n\nyndarrayThis module\u2019s representation of the Hermite series for\noff + scl*x.\n\n\n\n\n\nSee also\npolyline, chebline\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite_e import hermeline\n&gt;&gt;&gt; from numpy.polynomial.hermite_e import hermeline, hermeval\n&gt;&gt;&gt; hermeval(0,hermeline(3, 2))\n3.0\n&gt;&gt;&gt; hermeval(1,hermeline(3, 2))\n5.0\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeline", "parameters": [{"name": "off", "is_optional": false, "type": "others", "description": ""}, {"name": " scl", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0)", "item_id": "numpy.polynomial.hermite_e.hermeint", "summary": "Integrate a Hermite_e series.\nReturns the Hermite_e series coefficients c integrated m times from\nlbnd along axis", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeint", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermegrid3d(x, y, z, c)", "item_id": "numpy.polynomial.hermite_e.hermegrid3d", "summary": "Evaluate a 3-D HermiteE series on the Cartesian product of x, y, and z.\nThis function returns the values:\n\n\nwhere the points (a, b, c) consist of all triples formed by taking\na from x, b from y, and c from z", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermegrid3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermegrid2d(x, y, c)", "item_id": "numpy.polynomial.hermite_e.hermegrid2d", "summary": "Evaluate a 2-D HermiteE series on the Cartesian product of x and y.\nThis function returns the values:\n\n\nwhere the points (a, b) consist of all pairs formed by taking\na from x and b from y", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermegrid2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermemulx(c)", "item_id": "numpy.polynomial.hermite_e.hermemulx", "summary": "Multiply a Hermite series by x.\nMultiply the Hermite series c by x, where x is the independent\nvariable.\n\nParameters\n\ncarray_like1-D array of Hermite series coefficients ordered from low to\nhigh.\n\n\n\nReturns\n\noutndarrayArray representing the result of the multiplication.\n\n\n\n\nNotes\nThe multiplication uses the recursion relationship for Hermite\npolynomials in the form\n\n\nxP_i(x) = (P_{i + 1}(x) + iP_{i - 1}(x)))\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite_e import hermemulx\n&gt;&gt;&gt; hermemulx([1, 2, 3])\narray([2.,  7.,  2.,  3.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermemulx", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermegauss(deg)", "item_id": "numpy.polynomial.hermite_e.hermegauss", "summary": "Gauss-HermiteE quadrature.\nComputes the sample points and weights for Gauss-HermiteE quadrature.\nThese sample points and weights will correctly integrate polynomials of\ndegree  or less over the interval \nwith the weight function .\n\nParameters\n\ndegintNumber of sample points and weights", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermegauss", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermefit(x, y, deg, rcond=None, full=False, w=None)", "item_id": "numpy.polynomial.hermite_e.hermefit", "summary": "Least squares fit of Hermite series to data.\nReturn the coefficients of a HermiteE series of degree deg that is\nthe least squares fit to the data values y given at points x", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermefit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermedomain([-1,  1])", "item_id": "numpy.polynomial.hermite_e.hermedomain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermedomain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermefromroots(roots)", "item_id": "numpy.polynomial.hermite_e.hermefromroots", "summary": "Generate a HermiteE series with given roots.\nThe function returns the coefficients of the polynomial\n\n\nin HermiteE form, where the r_n are the roots specified in roots.\nIf a zero has multiplicity n, then it must appear in roots n times.\nFor instance, if 2 is a root of multiplicity three and 3 is a root of\nmultiplicity 2, then roots looks something like [2, 2, 2, 3, 3]", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermefromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermediv(c1, c2)", "item_id": "numpy.polynomial.hermite_e.hermediv", "summary": "Divide one Hermite series by another.\nReturns the quotient-with-remainder of two Hermite series\nc1 / c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermediv", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeder(c, m=1, scl=1, axis=0)", "item_id": "numpy.polynomial.hermite_e.hermeder", "summary": "Differentiate a Hermite_e series.\nReturns the series coefficients c differentiated m times along\naxis", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeder", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermeadd(c1, c2)", "item_id": "numpy.polynomial.hermite_e.hermeadd", "summary": "Add one Hermite series to another.\nReturns the sum of two Hermite series c1 + c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermeadd", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.hermecompanion(c)", "item_id": "numpy.polynomial.hermite_e.hermecompanion", "summary": "Return the scaled companion matrix of c.\nThe basis polynomials are scaled so that the companion matrix is\nsymmetric when c is an HermiteE basis polynomial", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.hermecompanion", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.herme2poly(c)", "item_id": "numpy.polynomial.hermite_e.herme2poly", "summary": "Convert a Hermite series to a polynomial.\nConvert an array representing the coefficients of a Hermite series,\nordered from lowest degree to highest, to an array of the coefficients\nof the equivalent polynomial (relative to the \u201cstandard\u201d basis) ordered\nfrom lowest to highest degree.\n\nParameters\n\ncarray_like1-D array containing the Hermite series coefficients, ordered\nfrom lowest order term to highest.\n\n\n\nReturns\n\npolndarray1-D array containing the coefficients of the equivalent polynomial\n(relative to the \u201cstandard\u201d basis) ordered from lowest order term\nto highest.\n\n\n\n\n\nSee also\npoly2herme\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite_e import herme2poly\n&gt;&gt;&gt; herme2poly([  2.,  10.,   2.,   3.])\narray([0.,  1.,  2.,  3.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.herme2poly", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermdomain([-1,  1])", "item_id": "numpy.polynomial.hermite.hermdomain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermdomain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermdiv(c1, c2)", "item_id": "numpy.polynomial.hermite.hermdiv", "summary": "Divide one Hermite series by another.\nReturns the quotient-with-remainder of two Hermite series\nc1 / c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermdiv", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermcompanion(c)", "item_id": "numpy.polynomial.hermite.hermcompanion", "summary": "Return the scaled companion matrix of c.\nThe basis polynomials are scaled so that the companion matrix is\nsymmetric when c is an Hermite basis polynomial", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermcompanion", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermadd(c1, c2)", "item_id": "numpy.polynomial.hermite.hermadd", "summary": "Add one Hermite series to another.\nReturns the sum of two Hermite series c1 + c2", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermadd", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.herm2poly(c)", "item_id": "numpy.polynomial.hermite.herm2poly", "summary": "Convert a Hermite series to a polynomial.\nConvert an array representing the coefficients of a Hermite series,\nordered from lowest degree to highest, to an array of the coefficients\nof the equivalent polynomial (relative to the \u201cstandard\u201d basis) ordered\nfrom lowest to highest degree.\n\nParameters\n\ncarray_like1-D array containing the Hermite series coefficients, ordered\nfrom lowest order term to highest.\n\n\n\nReturns\n\npolndarray1-D array containing the coefficients of the equivalent polynomial\n(relative to the \u201cstandard\u201d basis) ordered from lowest order term\nto highest.\n\n\n\n\n\nSee also\npoly2herm\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy.polynomial.hermite import herm2poly\n&gt;&gt;&gt; herm2poly([ 1", "description": "", "code-info": {"name": "numpy.polynomial.hermite.herm2poly", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.hermder(c, m=1, scl=1, axis=0)", "item_id": "numpy.polynomial.hermite.hermder", "summary": "Differentiate a Hermite series.\nReturns the Hermite series coefficients c differentiated m times\nalong axis", "description": "", "code-info": {"name": "numpy.polynomial.hermite.hermder", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.heaviside(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.heaviside", "summary": "Compute the Heaviside step function.\nThe Heaviside step function is defined as:\n                      0   if x1 &lt; 0\nheaviside(x1, x2) =  x2   if x1 == 0\n                      1   if x1 &gt; 0\n\n\nwhere x2 is often taken to be 0.5, but 0 and 1 are also sometimes used.\n\nParameters\n\nx1array_likeInput values.\n\nx2array_likeThe value of the function when x1 is 0", "description": "", "code-info": {"name": "numpy.heaviside", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.has_samewindow(self, other)", "item_id": "numpy.polynomial.legendre.Legendre.has_samewindow", "summary": "Check if windows match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the window attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the windows are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.has_samewindow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.has_samewindow(self, other)", "item_id": "numpy.polynomial.laguerre.Laguerre.has_samewindow", "summary": "Check if windows match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the window attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the windows are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.has_samewindow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.has_samewindow(self, other)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.has_samewindow", "summary": "Check if windows match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the window attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the windows are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.has_samewindow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.has_sametype(self, other)", "item_id": "numpy.polynomial.polynomial.Polynomial.has_sametype", "summary": "Check if types match.\n\nNew in version 1.7.0.\n\n\nParameters\n\notherobjectClass instance.\n\n\n\nReturns\n\nboolbooleanTrue if other is same class as self\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.has_sametype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.has_samewindow(self, other)", "item_id": "numpy.polynomial.polynomial.Polynomial.has_samewindow", "summary": "Check if windows match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the window attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the windows are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.has_samewindow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.has_sametype(self, other)", "item_id": "numpy.polynomial.legendre.Legendre.has_sametype", "summary": "Check if types match.\n\nNew in version 1.7.0.\n\n\nParameters\n\notherobjectClass instance.\n\n\n\nReturns\n\nboolbooleanTrue if other is same class as self\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.has_sametype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.has_sametype(self, other)", "item_id": "numpy.polynomial.laguerre.Laguerre.has_sametype", "summary": "Check if types match.\n\nNew in version 1.7.0.\n\n\nParameters\n\notherobjectClass instance.\n\n\n\nReturns\n\nboolbooleanTrue if other is same class as self\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.has_sametype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.has_sametype(self, other)", "item_id": "numpy.polynomial.hermite_e.HermiteE.has_sametype", "summary": "Check if types match.\n\nNew in version 1.7.0.\n\n\nParameters\n\notherobjectClass instance.\n\n\n\nReturns\n\nboolbooleanTrue if other is same class as self\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.has_sametype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.has_sametype(self, other)", "item_id": "numpy.polynomial.hermite.Hermite.has_sametype", "summary": "Check if types match.\n\nNew in version 1.7.0.\n\n\nParameters\n\notherobjectClass instance.\n\n\n\nReturns\n\nboolbooleanTrue if other is same class as self\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.has_sametype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.has_samedomain(self, other)", "item_id": "numpy.polynomial.polynomial.Polynomial.has_samedomain", "summary": "Check if domains match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the domain attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the domains are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.has_samedomain", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.has_samedomain(self, other)", "item_id": "numpy.polynomial.legendre.Legendre.has_samedomain", "summary": "Check if domains match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the domain attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the domains are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.has_samedomain", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.has_samedomain(self, other)", "item_id": "numpy.polynomial.laguerre.Laguerre.has_samedomain", "summary": "Check if domains match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the domain attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the domains are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.has_samedomain", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.has_samedomain(self, other)", "item_id": "numpy.polynomial.hermite_e.HermiteE.has_samedomain", "summary": "Check if domains match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the domain attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the domains are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.has_samedomain", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.has_sametype(self, other)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.has_sametype", "summary": "Check if types match.\n\nNew in version 1.7.0.\n\n\nParameters\n\notherobjectClass instance.\n\n\n\nReturns\n\nboolbooleanTrue if other is same class as self\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.has_sametype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.has_samedomain(self, other)", "item_id": "numpy.polynomial.hermite.Hermite.has_samedomain", "summary": "Check if domains match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the domain attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the domains are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.has_samedomain", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.has_samedomain(self, other)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.has_samedomain", "summary": "Check if domains match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the domain attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the domains are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.has_samedomain", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.has_samecoef(self, other)", "item_id": "numpy.polynomial.polynomial.Polynomial.has_samecoef", "summary": "Check if coefficients match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the coef attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the coefficients are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.has_samecoef", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.has_samecoef(self, other)", "item_id": "numpy.polynomial.laguerre.Laguerre.has_samecoef", "summary": "Check if coefficients match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the coef attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the coefficients are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.has_samecoef", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.has_samecoef(self, other)", "item_id": "numpy.polynomial.hermite_e.HermiteE.has_samecoef", "summary": "Check if coefficients match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the coef attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the coefficients are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.has_samecoef", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.has_samecoef(self, other)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.has_samecoef", "summary": "Check if coefficients match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the coef attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the coefficients are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.has_samecoef", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.has_samecoef(self, other)", "item_id": "numpy.polynomial.legendre.Legendre.has_samecoef", "summary": "Check if coefficients match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the coef attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the coefficients are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.has_samecoef", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.has_samecoef(self, other)", "item_id": "numpy.polynomial.hermite.Hermite.has_samecoef", "summary": "Check if coefficients match.\n\nNew in version 1.6.0.\n\n\nParameters\n\notherclass instanceThe other class must have the coef attribute.\n\n\n\nReturns\n\nboolbooleanTrue if the coefficients are the same, False otherwise.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.has_samecoef", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.distutils.core.Extension.has_f2py_sources(self)", "item_id": "numpy.distutils.core.Extension.has_f2py_sources", "summary": "", "description": "", "code-info": {"name": "numpy.distutils.core.Extension.has_f2py_sources", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.distutils.core.Extension.has_cxx_sources(self)", "item_id": "numpy.distutils.core.Extension.has_cxx_sources", "summary": "", "description": "", "code-info": {"name": "numpy.distutils.core.Extension.has_cxx_sources", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.harden_mask(self)", "item_id": "numpy.ma.MaskedArray.harden_mask", "summary": "Force the mask to hard.\nWhether the mask of a masked array is hard or soft is determined by\nits hardmask property", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.harden_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.harden_mask(self)", "item_id": "numpy.ma.masked_array.harden_mask", "summary": "Force the mask to hard.\nWhether the mask of a masked array is hard or soft is determined by\nits hardmask property", "description": "", "code-info": {"name": "numpy.ma.masked_array.harden_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.harden_mask(self)", "item_id": "numpy.ma.harden_mask", "summary": "Force the mask to hard.\nWhether the mask of a masked array is hard or soft is determined by\nits hardmask property", "description": "", "code-info": {"name": "numpy.ma.harden_mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.hamming(M)", "item_id": "numpy.hamming", "summary": "Return the Hamming window.\nThe Hamming window is a taper formed by using a weighted cosine.\n\nParameters\n\nMintNumber of points in the output window", "description": "", "code-info": {"name": "numpy.hamming", "parameters": [{"name": "M", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.hanning(M)", "item_id": "numpy.hanning", "summary": "Return the Hanning window.\nThe Hanning window is a taper formed by using a weighted cosine.\n\nParameters\n\nMintNumber of points in the output window", "description": "", "code-info": {"name": "numpy.hanning", "parameters": [{"name": "M", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.gumbel(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.RandomState.gumbel", "summary": "Draw samples from a Gumbel distribution.\nDraw samples from a Gumbel distribution with specified location and\nscale", "description": "", "code-info": {"name": "numpy.random.RandomState.gumbel", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.gumbel(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.gumbel", "summary": "Draw samples from a Gumbel distribution.\nDraw samples from a Gumbel distribution with specified location and\nscale", "description": "", "code-info": {"name": "numpy.random.gumbel", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.gumbel(loc=0.0, scale=1.0, size=None)", "item_id": "numpy.random.Generator.gumbel", "summary": "Draw samples from a Gumbel distribution.\nDraw samples from a Gumbel distribution with specified location and\nscale", "description": "", "code-info": {"name": "numpy.random.Generator.gumbel", "parameters": [{"name": "loc", "is_optional": true, "type": "others", "default_value": "0.0", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.greater_equal(x1, x2)", "item_id": "numpy.char.greater_equal", "summary": "Return (x1 &gt;= x2) element-wise.\nUnlike numpy.greater_equal, this comparison is performed by\nfirst stripping whitespace characters from the end of the string.\nThis behavior is provided for backward-compatibility with\nnumarray.\n\nParameters\n\nx1, x2array_like of str or unicodeInput arrays of the same shape.\n\n\n\nReturns\n\noutndarray or boolOutput array of bools, or a single bool if x1 and x2 are scalars.\n\n\n\n\n\nSee also\nequal, not_equal, less_equal, greater, less\n\n", "description": "", "code-info": {"name": "numpy.char.greater_equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.greater_equal", "summary": "Return the truth value of (x1 &gt;= x2) element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.greater_equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.greater(x1, x2)", "item_id": "numpy.char.greater", "summary": "Return (x1 &gt; x2) element-wise.\nUnlike numpy.greater, this comparison is performed by first\nstripping whitespace characters from the end of the string", "description": "", "code-info": {"name": "numpy.char.greater", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.greater", "summary": "Return the truth value of (x1 &gt; x2) element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.greater", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.gradient(f, *varargs, **kwargs)", "item_id": "numpy.gradient", "summary": "Return the gradient of an N-dimensional array.\nThe gradient is computed using second order accurate central differences\nin the interior points and either first or second order accurate one-sides\n(forward or backwards) differences at the boundaries.\nThe returned gradient hence has the same shape as the input array.\n\nParameters\n\nfarray_likeAn N-dimensional array containing samples of a scalar function.\n\nvarargslist of scalar or array, optionalSpacing between f values", "description": "", "code-info": {"name": "numpy.gradient", "parameters": [{"name": "f", "is_optional": false, "type": "others", "description": ""}, {"name": " *varargs", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.getT(self)", "item_id": "numpy.matrix.getT", "summary": "Returns the transpose of the matrix.\nDoes not conjugate!  For the complex conjugate transpose, use .H.\n\nParameters\n\nNone\n\n\nReturns\n\nretmatrix objectThe (non-conjugated) transpose of the matrix.\n\n\n\n\n\nSee also\ntranspose, getH\n\nExamples\n&gt;&gt;&gt; m = np.matrix('[1, 2; 3, 4]')\n&gt;&gt;&gt; m\nmatrix([[1, 2],\n        [3, 4]])\n&gt;&gt;&gt; m.getT()\nmatrix([[1, 3],\n        [2, 4]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.getT", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.getmaskarray(arr)", "item_id": "numpy.ma.getmaskarray", "summary": "Return the mask of a masked array, or full boolean array of False.\nReturn the mask of arr as an ndarray if arr is a MaskedArray and\nthe mask is not nomask, else return a full boolean array of False of\nthe same shape as arr.\n\nParameters\n\narrarray_likeInput MaskedArray for which the mask is required.\n\n\n\n\n\nSee also\n\ngetmaskReturn the mask of a masked array, or nomask.\n\ngetdataReturn the data of a masked array as an ndarray.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = ma.masked_equal([[1,2],[3,4]], 2)\n&gt;&gt;&gt; a\nmasked_array(\n  data=[[1, --],\n        [3, 4]],\n  mask=[[False,  True],\n        [False, False]],\n  fill_value=2)\n&gt;&gt;&gt; ma.getmaskarray(a)\narray([[False,  True],\n       [False, False]])\n\n\nResult when mask == nomask\n&gt;&gt;&gt; b = ma.masked_array([[1,2],[3,4]])\n&gt;&gt;&gt; b\nmasked_array(\n  data=[[1, 2],\n        [3, 4]],\n  mask=False,\n  fill_value=999999)\n&gt;&gt;&gt; ma.getmaskarray(b)\narray([[False, False],\n       [False, False]])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.getmaskarray", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.getI(self)", "item_id": "numpy.matrix.getI", "summary": "Returns the (multiplicative) inverse of invertible self.\n\nParameters\n\nNone\n\n\nReturns\n\nretmatrix objectIf self is non-singular, ret is such that ret * self ==\nself * ret == np.matrix(np.eye(self[0,:].size) all return\nTrue.\n\n\n\nRaises\n\nnumpy.linalg.LinAlgError: Singular matrixIf self is singular.\n\n\n\n\n\nSee also\nlinalg.inv\n\nExamples\n&gt;&gt;&gt; m = np.matrix('[1, 2; 3, 4]'); m\nmatrix([[1, 2],\n        [3, 4]])\n&gt;&gt;&gt; m.getI()\nmatrix([[-2", "description": "", "code-info": {"name": "numpy.matrix.getI", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.getH(self)", "item_id": "numpy.matrix.getH", "summary": "Returns the (complex) conjugate transpose of self.\nEquivalent to np.transpose(self) if self is real-valued.\n\nParameters\n\nNone\n\n\nReturns\n\nretmatrix objectcomplex conjugate transpose of self\n\n\n\n\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4)))\n&gt;&gt;&gt; z = x - 1j*x; z\nmatrix([[  0", "description": "", "code-info": {"name": "numpy.matrix.getH", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.getmask(a)", "item_id": "numpy.ma.getmask", "summary": "Return the mask of a masked array, or nomask.\nReturn the mask of a as an ndarray if a is a MaskedArray and the\nmask is not nomask, else return nomask", "description": "", "code-info": {"name": "numpy.ma.getmask", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.getfield(dtype, offset=0)", "item_id": "numpy.ndarray.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.ndarray.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.recarray.getfield(dtype, offset=0)", "item_id": "numpy.recarray.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.recarray.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.record.getfield()", "item_id": "numpy.record.getfield", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.getfield", "parameters": []}},
{"code": "numpy.memmap.getfield(dtype, offset=0)", "item_id": "numpy.memmap.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.memmap.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.geterrcall()", "item_id": "numpy.geterrcall", "summary": "Return the current callback function used on floating-point errors.\nWhen the error handling for a floating-point error (one of \u201cdivide\u201d,\n\u201cover\u201d, \u201cunder\u201d, or \u201cinvalid\u201d) is set to \u2018call\u2019 or \u2018log\u2019, the function\nthat is called or the log instance that is written to is returned by\ngeterrcall", "description": "", "code-info": {"name": "numpy.geterrcall", "parameters": []}},
{"code": "numpy.geterr()", "item_id": "numpy.geterr", "summary": "Get the current way of handling floating-point errors.\n\nReturns\n\nresdictA dictionary with keys \u201cdivide\u201d, \u201cover\u201d, \u201cunder\u201d, and \u201cinvalid\u201d,\nwhose values are from the strings \u201cignore\u201d, \u201cprint\u201d, \u201clog\u201d, \u201cwarn\u201d,\n\u201craise\u201d, and \u201ccall\u201d", "description": "", "code-info": {"name": "numpy.geterr", "parameters": []}},
{"code": "numpy.char.chararray.getfield(dtype, offset=0)", "item_id": "numpy.char.chararray.getfield", "summary": "Returns a field of the given array as a certain type.\nA field is a view of the array data with a given data-type", "description": "", "code-info": {"name": "numpy.char.chararray.getfield", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.getdata(a, subok=True)", "item_id": "numpy.ma.getdata", "summary": "Return the data of a masked array as an ndarray.\nReturn the data of a (if any) as an ndarray if a is a MaskedArray,\nelse return a as a ndarray or subclass (depending on subok) if not.\n\nParameters\n\naarray_likeInput MaskedArray, alternatively a ndarray or a subclass thereof.\n\nsubokboolWhether to force the output to be a pure ndarray (False) or to\nreturn a subclass of ndarray if appropriate (True, default).\n\n\n\n\n\nSee also\n\ngetmaskReturn the mask of a masked array, or nomask.\n\ngetmaskarrayReturn the mask of a masked array, or full array of False.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.ma as ma\n&gt;&gt;&gt; a = ma.masked_equal([[1,2],[3,4]], 2)\n&gt;&gt;&gt; a\nmasked_array(\n  data=[[1, --],\n        [3, 4]],\n  mask=[[False,  True],\n        [False, False]],\n  fill_value=2)\n&gt;&gt;&gt; ma.getdata(a)\narray([[1, 2],\n       [3, 4]])\n\n\nEquivalently use the MaskedArray data attribute.\n&gt;&gt;&gt; a.data\narray([[1, 2],\n       [3, 4]])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.getdata", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.polyutils.getdomain(x)", "item_id": "numpy.polynomial.polyutils.getdomain", "summary": "Return a domain suitable for given abscissae.\nFind a domain suitable for a polynomial or Chebyshev series\ndefined at the values supplied.\n\nParameters\n\nxarray_like1-d array of abscissae whose domain will be determined.\n\n\n\nReturns\n\ndomainndarray1-d array containing two values", "description": "", "code-info": {"name": "numpy.polynomial.polyutils.getdomain", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.geterrobj()", "item_id": "numpy.geterrobj", "summary": "Return the current object that defines floating-point error handling.\nThe error object contains all information that defines the error handling\nbehavior in NumPy", "description": "", "code-info": {"name": "numpy.geterrobj", "parameters": []}},
{"code": "numpy.getbufsize()", "item_id": "numpy.getbufsize", "summary": "Return the size of the buffer used in ufuncs.\n\nReturns\n\ngetbufsizeintSize of ufunc buffer in bytes.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.getbufsize", "parameters": []}},
{"code": "numpy.matrix.getA1(self)", "item_id": "numpy.matrix.getA1", "summary": "Return self as a flattened ndarray.\nEquivalent to np.asarray(x).ravel()\n\nParameters\n\nNone\n\n\nReturns\n\nretndarrayself, 1-D, as an ndarray\n\n\n\n\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.getA1()\narray([ 0,  1,  2, ...,  9, 10, 11])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.getA1", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.getA(self)", "item_id": "numpy.matrix.getA", "summary": "Return self as an ndarray object.\nEquivalent to np.asarray(self).\n\nParameters\n\nNone\n\n\nReturns\n\nretndarrayself as an ndarray\n\n\n\n\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; x.getA()\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.getA", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.RandomState.get_state()", "item_id": "numpy.random.RandomState.get_state", "summary": "Return a tuple representing the internal state of the generator.\nFor more details, see set_state.\n\nReturns\n\nout{tuple(str, ndarray of 624 uints, int, int, float), dict}The returned tuple has the following items:\n\nthe string \u2018MT19937\u2019.\na 1-D array of 624 unsigned integer keys.\nan integer pos.\nan integer has_gauss.\na float cached_gaussian.\n\nIf legacy is False, or the BitGenerator is not NT19937, then\nstate is returned as a dictionary.\n\nlegacyboolFlag indicating the return a legacy tuple state when the BitGenerator\nis MT19937.\n\n\n\n\n\nSee also\nset_state\n\nNotes\nset_state and get_state are not needed to work with any of the\nrandom distributions in NumPy", "description": "", "code-info": {"name": "numpy.random.RandomState.get_state", "parameters": []}},
{"code": "numpy.random.get_state()", "item_id": "numpy.random.get_state", "summary": "Return a tuple representing the internal state of the generator.\nFor more details, see set_state.\n\nReturns\n\nout{tuple(str, ndarray of 624 uints, int, int, float), dict}The returned tuple has the following items:\n\nthe string \u2018MT19937\u2019.\na 1-D array of 624 unsigned integer keys.\nan integer pos.\nan integer has_gauss.\na float cached_gaussian.\n\nIf legacy is False, or the BitGenerator is not NT19937, then\nstate is returned as a dictionary.\n\nlegacyboolFlag indicating the return a legacy tuple state when the BitGenerator\nis MT19937.\n\n\n\n\n\nSee also\nset_state\n\nNotes\nset_state and get_state are not needed to work with any of the\nrandom distributions in NumPy", "description": "", "code-info": {"name": "numpy.random.get_state", "parameters": []}},
{"code": "numpy.distutils.system_info.get_standard_file(fname)", "item_id": "numpy.distutils.system_info.get_standard_file", "summary": "Returns a list of files named \u2018fname\u2019 from\n1) System-wide directory (directory-location of this module)\n2) Users HOME directory (os.environ[\u2018HOME\u2019])\n3) Local directory\n", "description": "", "code-info": {"name": "numpy.distutils.system_info.get_standard_file", "parameters": [{"name": "fname", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.get_printoptions()", "item_id": "numpy.get_printoptions", "summary": "Return the current print options.\n\nReturns\n\nprint_optsdictDictionary of current print options with keys\n\n\nprecision : int\nthreshold : int\nedgeitems : int\nlinewidth : int\nsuppress : bool\nnanstr : str\ninfstr : str\nformatter : dict of callables\nsign : str\n\n\nFor a full description of these options, see set_printoptions.\n\n\n\n\n\nSee also\nset_printoptions, printoptions, set_string_function\n\n", "description": "", "code-info": {"name": "numpy.get_printoptions", "parameters": []}},
{"code": "numpy.ma.masked_array.get_real(self)", "item_id": "numpy.ma.masked_array.get_real", "summary": "The real part of the masked array.\nThis property is a view on the real part of this MaskedArray.\n\nSee also\nimag\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])\n&gt;&gt;&gt; x.real\nmasked_array(data=[1.0, --, 3.45],\n             mask=[False,  True, False],\n       fill_value=1e+20)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.get_real", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.distutils.system_info.get_info(name, notfound_action=0)", "item_id": "numpy.distutils.system_info.get_info", "summary": "\nnotfound_action:0 - do nothing\n1 - display warning message\n2 - raise error\n\n\n", "description": "", "code-info": {"name": "numpy.distutils.system_info.get_info", "parameters": [{"name": "name", "is_optional": false, "type": "others", "description": ""}, {"name": " notfound_action", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.masked_array.get_imag(self)", "item_id": "numpy.ma.masked_array.get_imag", "summary": "The imaginary part of the masked array.\nThis property is a view on the imaginary part of this MaskedArray.\n\nSee also\nreal\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])\n&gt;&gt;&gt; x.imag\nmasked_array(data=[1.0, --, 1.6],\n             mask=[False,  True, False],\n       fill_value=1e+20)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.get_imag", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.get_fill_value(self)", "item_id": "numpy.ma.MaskedArray.get_fill_value", "summary": "The filling value of the masked array is a scalar", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.get_fill_value", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.get_include()", "item_id": "numpy.get_include", "summary": "Return the directory that contains the NumPy *.h header files.\nExtension modules that need to compile against NumPy should use this\nfunction to locate the appropriate include directory.\nNotes\nWhen using distutils, for example in setup.py.\nimport numpy as np\n...\nExtension('extension_name', ...\n        include_dirs=[np.get_include()])\n...\n\n\n", "description": "", "code-info": {"name": "numpy.get_include", "parameters": []}},
{"code": "numpy.random.RandomState.geometric(p, size=None)", "item_id": "numpy.random.RandomState.geometric", "summary": "Draw samples from the geometric distribution.\nBernoulli trials are experiments with one of two outcomes:\nsuccess or failure (an example of such an experiment is flipping\na coin)", "description": "", "code-info": {"name": "numpy.random.RandomState.geometric", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0)", "item_id": "numpy.geomspace", "summary": "Return numbers spaced evenly on a log scale (a geometric progression).\nThis is similar to logspace, but with endpoints specified directly.\nEach output sample is a constant multiple of the previous.\n\nChanged in version 1.16.0: Non-scalar start and stop are now supported.\n\n\nParameters\n\nstartarray_likeThe starting value of the sequence.\n\nstoparray_likeThe final value of the sequence, unless endpoint is False.\nIn that case, num + 1 values are spaced over the\ninterval in log-space, of which all but the last (a sequence of\nlength num) are returned.\n\nnuminteger, optionalNumber of samples to generate", "description": "", "code-info": {"name": "numpy.geomspace", "parameters": [{"name": "start", "is_optional": false, "type": "others", "description": ""}, {"name": " stop", "is_optional": false, "type": "others", "description": ""}, {"name": " num", "is_optional": true, "type": "int", "default_value": "50", "description": ""}, {"name": " endpoint", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.random.Generator.geometric(p, size=None)", "item_id": "numpy.random.Generator.geometric", "summary": "Draw samples from the geometric distribution.\nBernoulli trials are experiments with one of two outcomes:\nsuccess or failure (an example of such an experiment is flipping\na coin)", "description": "", "code-info": {"name": "numpy.random.Generator.geometric", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.get_fill_value(self)", "item_id": "numpy.ma.masked_array.get_fill_value", "summary": "The filling value of the masked array is a scalar", "description": "", "code-info": {"name": "numpy.ma.masked_array.get_fill_value", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.geometric(p, size=None)", "item_id": "numpy.random.geometric", "summary": "Draw samples from the geometric distribution.\nBernoulli trials are experiments with one of two outcomes:\nsuccess or failure (an example of such an experiment is flipping\na coin)", "description": "", "code-info": {"name": "numpy.random.geometric", "parameters": [{"name": "p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.genfromtxt(fname, dtype=&lt;class 'float'&gt;, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&amp;'()", "item_id": "numpy.genfromtxt", "summary": "Load data from a text file, with missing values handled as specified.\nEach line past the first skip_header lines is split at the delimiter\ncharacter, and characters following the comments character are discarded.\n\nParameters\n\nfnamefile, str, pathlib.Path, list of str, generatorFile, filename, list, or generator to read", "description": "", "code-info": {"name": "numpy.genfromtxt", "parameters": [{"name": "fname", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}, {"name": " comments", "is_optional": true, "type": "string", "default_value": "'#'", "description": ""}, {"name": " delimiter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " skip_header", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " skip_footer", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " converters", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " missing_values", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " filling_values", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " usecols", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " names", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " excludelist", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " deletechars", "is_optional": true, "type": "others", "default_value": "\" !#$%&amp;", "description": ""}]}},
{"code": "numpy.random.SeedSequence.generate_state(n_words, dtype=np.uint32)", "item_id": "numpy.random.SeedSequence.generate_state", "summary": "Return the requested number of words for PRNG seeding.\nA BitGenerator should call this method in its constructor with\nan appropriate n_words parameter to properly seed itself.\n\nParameters\n\nn_wordsint\ndtypenp.uint32 or np.uint64, optionalThe size of each word", "description": "", "code-info": {"name": "numpy.random.SeedSequence.generate_state", "parameters": [{"name": "n_words", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "np.uint32", "description": ""}]}},
{"code": "numpy.random.RandomState.gamma(shape, scale=1.0, size=None)", "item_id": "numpy.random.RandomState.gamma", "summary": "Draw samples from a Gamma distribution.\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \u201ck\u201d) and scale (sometimes designated\n\u201ctheta\u201d), where both parameters are &gt; 0.\n\nNote\nNew code should use the gamma method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nshapefloat or array_like of floatsThe shape of the gamma distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.gamma", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.gcd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.gcd", "summary": "Returns the greatest common divisor of |x1| and |x2|\n\nParameters\n\nx1, x2array_like, intArrays of values", "description": "", "code-info": {"name": "numpy.gcd", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.gamma(shape, scale=1.0, size=None)", "item_id": "numpy.random.Generator.gamma", "summary": "Draw samples from a Gamma distribution.\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \u201ck\u201d) and scale (sometimes designated\n\u201ctheta\u201d), where both parameters are &gt; 0.\n\nParameters\n\nshapefloat or array_like of floatsThe shape of the gamma distribution", "description": "", "code-info": {"name": "numpy.random.Generator.gamma", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.gamma(shape, scale=1.0, size=None)", "item_id": "numpy.random.gamma", "summary": "Draw samples from a Gamma distribution.\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \u201ck\u201d) and scale (sometimes designated\n\u201ctheta\u201d), where both parameters are &gt; 0.\n\nNote\nNew code should use the gamma method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nshapefloat or array_like of floatsThe shape of the gamma distribution", "description": "", "code-info": {"name": "numpy.random.gamma", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fv(rate, nper, pmt, pv, when='end')", "item_id": "numpy.fv", "summary": "Compute the future value.\n\nDeprecated since version 1.18: fv is deprecated; for details, see NEP 32 [1].\nUse the corresponding function in the numpy-financial library,\nhttps://pypi.org/project/numpy-financial.\n\n\nGiven:\na present value, pv\nan interest rate compounded once per period, of which\nthere are\nnper total\na (fixed) payment, pmt, paid either\nat the beginning (when = {\u2018begin\u2019, 1}) or the end\n(when = {\u2018end\u2019, 0}) of each period\n\n\nReturn:the value at the end of the nper periods\n\n\n\nParameters\n\nratescalar or array_like of shape(M, )Rate of interest as decimal (not per cent) per period\n\nnperscalar or array_like of shape(M, )Number of compounding periods\n\npmtscalar or array_like of shape(M, )Payment\n\npvscalar or array_like of shape(M, )Present value\n\nwhen{{\u2018begin\u2019, 1}, {\u2018end\u2019, 0}}, {string, int}, optionalWhen payments are due (\u2018begin\u2019 (1) or \u2018end\u2019 (0)).\nDefaults to {\u2018end\u2019, 0}.\n\n\n\nReturns\n\noutndarrayFuture values", "description": "", "code-info": {"name": "numpy.fv", "parameters": [{"name": "rate", "is_optional": false, "type": "others", "description": ""}, {"name": " nper", "is_optional": false, "type": "others", "description": ""}, {"name": " pmt", "is_optional": false, "type": "others", "description": ""}, {"name": " pv", "is_optional": false, "type": "others", "description": ""}, {"name": " when", "is_optional": true, "type": "string", "default_value": "'end'", "description": ""}]}},
{"code": "numpy.full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None)", "item_id": "numpy.full_like", "summary": "Return a full array with the same shape and type as a given array.\n\nParameters\n\naarray_likeThe shape and data-type of a define these same attributes of\nthe returned array.\n\nfill_valuescalarFill value.\n\ndtypedata-type, optionalOverrides the data type of the result.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result", "description": "", "code-info": {"name": "numpy.full_like", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.full(shape, fill_value, dtype=None, order='C')", "item_id": "numpy.full", "summary": "Return a new array of given shape and type, filled with fill_value.\n\nParameters\n\nshapeint or sequence of intsShape of the new array, e.g., (2, 3) or 2.\n\nfill_valuescalarFill value.\n\ndtypedata-type, optional\nThe desired data-type for the array  The default, None, meansnp.array(fill_value).dtype.\n\n\n\norder{\u2018C\u2019, \u2018F\u2019}, optionalWhether to store multidimensional data in C- or Fortran-contiguous\n(row- or column-wise) order in memory.\n\n\n\nReturns\n\noutndarrayArray of fill_value with the given shape, dtype, and order.\n\n\n\n\n\nSee also\n\nfull_likeReturn a new array with shape of input filled with value.\n\nemptyReturn a new uninitialized array.\n\nonesReturn a new array setting values to one.\n\nzerosReturn a new array setting values to zero.\n\n\n\nExamples\n&gt;&gt;&gt; np.full((2, 2), np.inf)\narray([[inf, inf],\n       [inf, inf]])\n&gt;&gt;&gt; np.full((2, 2), 10)\narray([[10, 10],\n       [10, 10]])\n\n\n", "description": "", "code-info": {"name": "numpy.full", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.core.records.fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)", "item_id": "numpy.core.records.fromstring", "summary": "create a (read-only) record array from binary data contained in\na string\n", "description": "", "code-info": {"name": "numpy.core.records.fromstring", "parameters": [{"name": "datastring", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " formats", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " names", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " titles", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " aligned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.fromroots(roots, domain=[], window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.fromroots", "summary": "Return series instance that has the specified roots.\nReturns a series representing the product\n(x - r[0])*(x - r[1])*...*(x - r[n-1]), where r is a\nlist of roots.\n\nParameters\n\nrootsarray_likeList of roots.\n\ndomain{[], None, array_like}, optionalDomain for the resulting series", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.fromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fromstring(string, dtype=float, count=-1, sep='')", "item_id": "numpy.fromstring", "summary": "A new 1-D array initialized from text data in a string.\n\nParameters\n\nstringstrA string containing the data.\n\ndtypedata-type, optionalThe data type of the array; default: float", "description": "", "code-info": {"name": "numpy.fromstring", "parameters": [{"name": "string", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " sep", "is_optional": true, "type": "string", "default_value": "''", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.fromroots(roots, domain=[], window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.fromroots", "summary": "Return series instance that has the specified roots.\nReturns a series representing the product\n(x - r[0])*(x - r[1])*...*(x - r[n-1]), where r is a\nlist of roots.\n\nParameters\n\nrootsarray_likeList of roots.\n\ndomain{[], None, array_like}, optionalDomain for the resulting series", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.fromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.fromroots(roots, domain=[], window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.fromroots", "summary": "Return series instance that has the specified roots.\nReturns a series representing the product\n(x - r[0])*(x - r[1])*...*(x - r[n-1]), where r is a\nlist of roots.\n\nParameters\n\nrootsarray_likeList of roots.\n\ndomain{[], None, array_like}, optionalDomain for the resulting series", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.fromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.core.records.fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)", "item_id": "numpy.core.records.fromrecords", "summary": "create a recarray from a list of records in text form\n\nThe data in the same field can be heterogeneous, they will be promoted\nto the highest data type", "description": "", "code-info": {"name": "numpy.core.records.fromrecords", "parameters": [{"name": "recList", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " formats", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " names", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " titles", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " aligned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.fromroots(roots, domain=[], window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.fromroots", "summary": "Return series instance that has the specified roots.\nReturns a series representing the product\n(x - r[0])*(x - r[1])*...*(x - r[n-1]), where r is a\nlist of roots.\n\nParameters\n\nrootsarray_likeList of roots.\n\ndomain{[], None, array_like}, optionalDomain for the resulting series", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.fromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fromiter(iterable, dtype, count=-1)", "item_id": "numpy.fromiter", "summary": "Create a new 1-dimensional array from an iterable object.\n\nParameters\n\niterableiterable objectAn iterable object providing data for the array.\n\ndtypedata-typeThe data-type of the returned array.\n\ncountint, optionalThe number of items to read from iterable", "description": "", "code-info": {"name": "numpy.fromiter", "parameters": [{"name": "iterable", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.fromroots(roots, domain=[], window=None)", "item_id": "numpy.polynomial.hermite.Hermite.fromroots", "summary": "Return series instance that has the specified roots.\nReturns a series representing the product\n(x - r[0])*(x - r[1])*...*(x - r[n-1]), where r is a\nlist of roots.\n\nParameters\n\nrootsarray_likeList of roots.\n\ndomain{[], None, array_like}, optionalDomain for the resulting series", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.fromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fromregex(file, regexp, dtype, encoding=None)", "item_id": "numpy.fromregex", "summary": "Construct an array from a text file, using regular expression parsing.\nThe returned array is always a structured array, and is constructed from\nall matches of the regular expression in the file", "description": "", "code-info": {"name": "numpy.fromregex", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}, {"name": " regexp", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.frompyfunc(func, nin, nout)", "item_id": "numpy.frompyfunc", "summary": "Takes an arbitrary Python function and returns a NumPy ufunc.\nCan be used, for example, to add broadcasting to a built-in Python\nfunction (see Examples section).\n\nParameters\n\nfuncPython function objectAn arbitrary Python function.\n\nninintThe number of input arguments.\n\nnoutintThe number of objects returned by func.\n\n\n\nReturns\n\noutufuncReturns a NumPy universal function (ufunc) object.\n\n\n\n\n\nSee also\n\nvectorizeEvaluates pyfunc over input arrays using broadcasting rules of numpy.\n\n\n\nNotes\nThe returned ufunc always returns PyObject arrays.\nExamples\nUse frompyfunc to add broadcasting to the Python function oct:\n&gt;&gt;&gt; oct_array = np.frompyfunc(oct, 1, 1)\n&gt;&gt;&gt; oct_array(np.array((10, 30, 100)))\narray(['0o12', '0o36', '0o144'], dtype=object)\n&gt;&gt;&gt; np.array((oct(10), oct(30), oct(100))) # for comparison\narray(['0o12', '0o36', '0o144'], dtype='&lt;U5')\n\n\n", "description": "", "code-info": {"name": "numpy.frompyfunc", "parameters": [{"name": "func", "is_optional": false, "type": "others", "description": ""}, {"name": " nin", "is_optional": false, "type": "others", "description": ""}, {"name": " nout", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fromfunction(function, shape, **kwargs)", "item_id": "numpy.fromfunction", "summary": "Construct an array by executing a function over each coordinate.\nThe resulting array therefore has a value fn(x, y, z) at\ncoordinate (x, y, z).\n\nParameters\n\nfunctioncallableThe function is called with N parameters, where N is the rank of\nshape", "description": "", "code-info": {"name": "numpy.fromfunction", "parameters": [{"name": "function", "is_optional": false, "type": "others", "description": ""}, {"name": " shape", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.fromfunction(function, shape, **kwargs)", "item_id": "numpy.ma.fromfunction", "summary": "Construct an array by executing a function over each coordinate.\nThe resulting array therefore has a value fn(x, y, z) at\ncoordinate (x, y, z).\n\nParameters\n\nfunctioncallableThe function is called with N parameters, where N is the rank of\nshape", "description": "", "code-info": {"name": "numpy.ma.fromfunction", "parameters": [{"name": "function", "is_optional": false, "type": "others", "description": ""}, {"name": " shape", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.core.records.fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)", "item_id": "numpy.core.records.fromfile", "summary": "Create an array from binary file data\nIf file is a string or a path-like object then that file is opened,\nelse it is assumed to be a file object", "description": "", "code-info": {"name": "numpy.core.records.fromfile", "parameters": [{"name": "fd", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " formats", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " names", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " titles", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " aligned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fromfile(file, dtype=float, count=-1, sep='', offset=0)", "item_id": "numpy.fromfile", "summary": "Construct an array from data in a text or binary file.\nA highly efficient way of reading binary data with a known data-type,\nas well as parsing simply formatted text files", "description": "", "code-info": {"name": "numpy.fromfile", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " sep", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.frombuffer(buffer, dtype=float, count=-1, offset=0)", "item_id": "numpy.ma.frombuffer", "summary": "Interpret a buffer as a 1-dimensional array.\n\nParameters\n\nbufferbuffer_likeAn object that exposes the buffer interface.\n\ndtypedata-type, optionalData-type of the returned array; default: float.\n\ncountint, optionalNumber of items to read", "description": "", "code-info": {"name": "numpy.ma.frombuffer", "parameters": [{"name": "buffer", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.frombuffer(buffer, dtype=float, count=-1, offset=0)", "item_id": "numpy.frombuffer", "summary": "Interpret a buffer as a 1-dimensional array.\n\nParameters\n\nbufferbuffer_likeAn object that exposes the buffer interface.\n\ndtypedata-type, optionalData-type of the returned array; default: float.\n\ncountint, optionalNumber of items to read", "description": "", "code-info": {"name": "numpy.frombuffer", "parameters": [{"name": "buffer", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " count", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.core.records.fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)", "item_id": "numpy.core.records.fromarrays", "summary": "create a record array from a (flat) list of arrays\n&gt;&gt;&gt; x1=np.array([1,2,3,4])\n&gt;&gt;&gt; x2=np.array(['a','dd','xyz','12'])\n&gt;&gt;&gt; x3=np.array([1.1,2,3,4])\n&gt;&gt;&gt; r = np.core.records.fromarrays([x1,x2,x3],names='a,b,c')\n&gt;&gt;&gt; print(r[1])\n(2, 'dd', 2.0) # may vary\n&gt;&gt;&gt; x1[1]=34\n&gt;&gt;&gt; r.a\narray([1, 2, 3, 4])\n\n\n", "description": "", "code-info": {"name": "numpy.core.records.fromarrays", "parameters": [{"name": "arrayList", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " formats", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " names", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " titles", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " aligned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.frexp(x, [out1, out2, ]/, [out=(None, None)", "item_id": "numpy.frexp", "summary": "Decompose the elements of x into mantissa and twos exponent.\nReturns (mantissa, exponent), where x = mantissa * 2**exponent`.\nThe mantissa is lies in the open interval(-1, 1), while the twos\nexponent is a signed integer.\n\nParameters\n\nxarray_likeArray of numbers to be decomposed.\n\nout1ndarray, optionalOutput array for the mantissa", "description": "", "code-info": {"name": "numpy.frexp", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " [out1", "is_optional": false, "type": "others", "description": ""}, {"name": " out2", "is_optional": false, "type": "others", "description": ""}, {"name": " ]/", "is_optional": false, "type": "others", "description": ""}, {"name": " [out", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.format_parser(formats, names, titles, aligned=False, byteorder=None)", "item_id": "numpy.format_parser", "summary": "Class to convert formats, names, titles description to a dtype.\nAfter constructing the format_parser object, the dtype attribute is\nthe converted data-type:\ndtype = format_parser(formats, names, titles).dtype\n\nParameters\n\nformatsstr or list of strThe format description, either specified as a string with\ncomma-separated format descriptions in the form 'f8, i4, a5', or\na list of format description strings  in the form\n['f8', 'i4', 'a5'].\n\nnamesstr or list/tuple of strThe field names, either specified as a comma-separated string in the\nform 'col1, col2, col3', or as a list or tuple of strings in the\nform ['col1', 'col2', 'col3'].\nAn empty list can be used, in that case default field names\n(\u2018f0\u2019, \u2018f1\u2019, \u2026) are used.\n\ntitlessequenceSequence of title strings", "description": "", "code-info": {"name": "numpy.format_parser", "parameters": [{"name": "formats", "is_optional": false, "type": "others", "description": ""}, {"name": " names", "is_optional": false, "type": "others", "description": ""}, {"name": " titles", "is_optional": false, "type": "others", "description": ""}, {"name": " aligned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)", "item_id": "numpy.format_float_scientific", "summary": "Format a floating-point scalar as a decimal string in scientific notation.\nProvides control over rounding, trimming and padding", "description": "", "code-info": {"name": "numpy.format_float_scientific", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " precision", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " unique", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " trim", "is_optional": true, "type": "string", "default_value": "'k'", "description": ""}, {"name": " sign", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " pad_left", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " exp_digits", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fmin(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.fmin", "summary": "Element-wise minimum of array elements.\nCompare two arrays and returns a new array containing the element-wise\nminima", "description": "", "code-info": {"name": "numpy.fmin", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)", "item_id": "numpy.format_float_positional", "summary": "Format a floating-point scalar as a decimal string in positional notation.\nProvides control over rounding, trimming and padding", "description": "", "code-info": {"name": "numpy.format_float_positional", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " precision", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " unique", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fractional", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " trim", "is_optional": true, "type": "string", "default_value": "'k'", "description": ""}, {"name": " sign", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " pad_left", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " pad_right", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.fmod", "summary": "Return the element-wise remainder of division.\nThis is the NumPy implementation of the C library function fmod, the\nremainder has the same sign as the dividend x1", "description": "", "code-info": {"name": "numpy.fmod", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.floor", "summary": "Return the floor of the input, element-wise.\nThe floor of the scalar x is the largest integer i, such that\ni &lt;= x", "description": "", "code-info": {"name": "numpy.floor", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fmax(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.fmax", "summary": "Element-wise maximum of array elements.\nCompare two arrays and returns a new array containing the element-wise\nmaxima", "description": "", "code-info": {"name": "numpy.fmax", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.float_power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.float_power", "summary": "First array elements raised to powers from second array, element-wise.\nRaise each base in x1 to the positionally-corresponding power in x2.\nx1 and x2 must be broadcastable to the same shape", "description": "", "code-info": {"name": "numpy.float_power", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.flush(self)", "item_id": "numpy.memmap.flush", "summary": "Write any changes in the array to the file on disk.\nFor further information, see memmap.\n\nParameters\n\nNone\n\n\n\n\nSee also\nmemmap\n\n", "description": "", "code-info": {"name": "numpy.memmap.flush", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.floor_divide", "summary": "Return the largest integer smaller or equal to the division of the inputs.\nIt is equivalent to the Python // operator and pairs with the\nPython % (remainder), function so that a = a % b + b * (a // b)\nup to roundoff.\n\nParameters\n\nx1array_likeNumerator.\n\nx2array_likeDenominator", "description": "", "code-info": {"name": "numpy.floor_divide", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.flipud(m)", "item_id": "numpy.flipud", "summary": "Flip array in the up/down direction.\nFlip the entries in each column in the up/down direction.\nRows are preserved, but appear in a different order than before.\n\nParameters\n\nmarray_likeInput array.\n\n\n\nReturns\n\noutarray_likeA view of m with the rows reversed", "description": "", "code-info": {"name": "numpy.flipud", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.flatten()", "item_id": "numpy.record.flatten", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.flatten", "parameters": []}},
{"code": "numpy.fliplr(m)", "item_id": "numpy.fliplr", "summary": "Flip array in the left/right direction.\nFlip the entries in each row in the left/right direction.\nColumns are preserved, but appear in a different order than before.\n\nParameters\n\nmarray_likeInput array, must be at least 2-D.\n\n\n\nReturns\n\nfndarrayA view of m with the columns reversed", "description": "", "code-info": {"name": "numpy.fliplr", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.flip(m, axis=None)", "item_id": "numpy.flip", "summary": "Reverse the order of elements in an array along the given axis.\nThe shape of the array is preserved, but the elements are reordered.\n\nNew in version 1.12.0.\n\n\nParameters\n\nmarray_likeInput array.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which to flip over", "description": "", "code-info": {"name": "numpy.flip", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.flatten(order='C')", "item_id": "numpy.recarray.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.recarray.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ndarray.flatten(order='C')", "item_id": "numpy.ndarray.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.ndarray.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.memmap.flatten(order='C')", "item_id": "numpy.memmap.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.memmap.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.matrix.flatten(self, order='C')", "item_id": "numpy.matrix.flatten", "summary": "Return a flattened copy of the matrix.\nAll N elements of the matrix are placed into a single row.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order", "description": "", "code-info": {"name": "numpy.matrix.flatten", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskType.flatten()", "item_id": "numpy.ma.MaskType.flatten", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.flatten", "parameters": []}},
{"code": "numpy.ma.MaskedArray.flatten(order='C')", "item_id": "numpy.ma.MaskedArray.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.masked_array.flatten(order='C')", "item_id": "numpy.ma.masked_array.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.ma.masked_array.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.generic.flatten()", "item_id": "numpy.generic.flatten", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.flatten", "parameters": []}},
{"code": "numpy.chararray.flatten(order='C')", "item_id": "numpy.chararray.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.chararray.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.char.chararray.flatten(order='C')", "item_id": "numpy.char.chararray.flatten", "summary": "Return a copy of the array collapsed into one dimension.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optional\u2018C\u2019 means to flatten in row-major (C-style) order.\n\u2018F\u2019 means to flatten in column-major (Fortran-\nstyle) order", "description": "", "code-info": {"name": "numpy.char.chararray.flatten", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.flatnotmasked_edges(a)", "item_id": "numpy.ma.flatnotmasked_edges", "summary": "Find the indices of the first and last unmasked values.\nExpects a 1-D MaskedArray, returns None if all values are masked.\n\nParameters\n\naarray_likeInput 1-D MaskedArray\n\n\n\nReturns\n\nedgesndarray or NoneThe indices of first and last non-masked value in the array.\nReturns None if all values are masked.\n\n\n\n\n\nSee also\nflatnotmasked_contiguous, notmasked_contiguous, notmasked_edges, clump_masked, clump_unmasked\n\nNotes\nOnly accepts 1-D arrays.\nExamples\n&gt;&gt;&gt; a = np.ma.arange(10)\n&gt;&gt;&gt; np.ma.flatnotmasked_edges(a)\narray([0, 9])\n\n\n&gt;&gt;&gt; mask = (a &lt; 3) | (a &gt; 8) | (a == 5)\n&gt;&gt;&gt; a[mask] = np.ma.masked\n&gt;&gt;&gt; np.array(a[~a.mask])\narray([3, 4, 6, 7, 8])\n\n\n&gt;&gt;&gt; np.ma.flatnotmasked_edges(a)\narray([3, 8])\n\n\n&gt;&gt;&gt; a[:] = np.ma.masked\n&gt;&gt;&gt; print(np.ma.flatnotmasked_edges(a))\nNone\n\n\n", "description": "", "code-info": {"name": "numpy.ma.flatnotmasked_edges", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.flatnotmasked_contiguous(a)", "item_id": "numpy.ma.flatnotmasked_contiguous", "summary": "Find contiguous unmasked data in a masked array along the given axis.\n\nParameters\n\nanarrayThe input array.\n\n\n\nReturns\n\nslice_listlistA sorted sequence of slice objects (start index, end index).\n\n..versionchanged:: 1.15.0Now returns an empty list instead of None for a fully masked array\n\n\n\n\n\n\n\nSee also\nflatnotmasked_edges, notmasked_contiguous, notmasked_edges, clump_masked, clump_unmasked\n\nNotes\nOnly accepts 2-D arrays at most.\nExamples\n&gt;&gt;&gt; a = np.ma.arange(10)\n&gt;&gt;&gt; np.ma.flatnotmasked_contiguous(a)\n[slice(0, 10, None)]\n\n\n&gt;&gt;&gt; mask = (a &lt; 3) | (a &gt; 8) | (a == 5)\n&gt;&gt;&gt; a[mask] = np.ma.masked\n&gt;&gt;&gt; np.array(a[~a.mask])\narray([3, 4, 6, 7, 8])\n\n\n&gt;&gt;&gt; np.ma.flatnotmasked_contiguous(a)\n[slice(3, 5, None), slice(6, 9, None)]\n&gt;&gt;&gt; a[:] = np.ma.masked\n&gt;&gt;&gt; np.ma.flatnotmasked_contiguous(a)\n[]\n\n\n", "description": "", "code-info": {"name": "numpy.ma.flatnotmasked_contiguous", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.flatnonzero(a)", "item_id": "numpy.flatnonzero", "summary": "Return indices that are non-zero in the flattened version of a.\nThis is equivalent to np.nonzero(np.ravel(a))[0].\n\nParameters\n\naarray_likeInput data.\n\n\n\nReturns\n\nresndarrayOutput array, containing the indices of the elements of a.ravel()\nthat are non-zero.\n\n\n\n\n\nSee also\n\nnonzeroReturn the indices of the non-zero elements of the input array.\n\nravelReturn a 1-D array containing the elements of the input array.\n\n\n\nExamples\n&gt;&gt;&gt; x = np.arange(-2, 3)\n&gt;&gt;&gt; x\narray([-2, -1,  0,  1,  2])\n&gt;&gt;&gt; np.flatnonzero(x)\narray([0, 1, 3, 4])\n\n\nUse the indices of the non-zero elements as an index array to extract\nthese elements:\n&gt;&gt;&gt; x.ravel()[np.flatnonzero(x)]\narray([-2, -1,  1,  2])\n\n\n", "description": "", "code-info": {"name": "numpy.flatnonzero", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fix(x, out=None)", "item_id": "numpy.fix", "summary": "Round to nearest integer towards zero.\nRound an array of floats element-wise to nearest integer towards zero.\nThe rounded values are returned as floats.\n\nParameters\n\nxarray_likeAn array of floats to be rounded\n\nyndarray, optionalOutput array\n\n\n\nReturns\n\noutndarray of floatsThe array of rounded numbers\n\n\n\n\n\nSee also\ntrunc, floor, ceil\n\naroundRound to given number of decimals\n\n\n\nExamples\n&gt;&gt;&gt; np.fix(3.14)\n3.0\n&gt;&gt;&gt; np.fix(3)\n3.0\n&gt;&gt;&gt; np.fix([2.1, 2.9, -2.1, -2.9])\narray([ 2.,  2., -2., -2.])\n\n\n", "description": "", "code-info": {"name": "numpy.fix", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.fix_invalid(a, mask=False, copy=True, fill_value=None)", "item_id": "numpy.ma.fix_invalid", "summary": "Return input with invalid data masked and replaced by a fill value.\nInvalid data means values of nan, inf, etc.\n\nParameters\n\naarray_likeInput array, a (subclass of) ndarray.\n\nmasksequence, optionalMask", "description": "", "code-info": {"name": "numpy.ma.fix_invalid", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " mask", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.fit", "summary": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\ny sampled at x", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.fit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)", "item_id": "numpy.polynomial.legendre.Legendre.fit", "summary": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\ny sampled at x", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.fit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.fit", "summary": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\ny sampled at x", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.fit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.fit", "summary": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\ny sampled at x", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.fit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)", "item_id": "numpy.polynomial.hermite.Hermite.fit", "summary": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\ny sampled at x", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.fit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.fit", "summary": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\ny sampled at x", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.fit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.finfo(dtype)", "item_id": "numpy.finfo", "summary": "Machine limits for floating point types.\n\nParameters\n\ndtypefloat, dtype, or instanceKind of floating point data-type about which to get information.\n\n\n\n\n\nSee also\n\nMachArThe implementation of the tests that produce this information.\n\niinfoThe equivalent for integer data types.\n\n\n\nNotes\nFor developers of NumPy: do not instantiate this at the module level.\nThe initial calculation of these parameters is expensive and negatively\nimpacts import times", "description": "", "code-info": {"name": "numpy.finfo", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.find(self, sub, start=0, end=None)", "item_id": "numpy.chararray.find", "summary": "For each element, return the lowest index in the string where\nsubstring sub is found.\n\nSee also\nchar.find\n\n", "description": "", "code-info": {"name": "numpy.chararray.find", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.find_common_type(array_types, scalar_types)", "item_id": "numpy.find_common_type", "summary": "Determine common type following standard coercion rules.\n\nParameters\n\narray_typessequenceA list of dtypes or dtype convertible objects representing arrays.\n\nscalar_typessequenceA list of dtypes or dtype convertible objects representing scalars.\n\n\n\nReturns\n\ndatatypedtypeThe common data type, which is the maximum of array_types ignoring\nscalar_types, unless the maximum of scalar_types is of a\ndifferent kind (dtype.kind)", "description": "", "code-info": {"name": "numpy.find_common_type", "parameters": [{"name": "array_types", "is_optional": false, "type": "others", "description": ""}, {"name": " scalar_types", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.find(self, sub, start=0, end=None)", "item_id": "numpy.char.chararray.find", "summary": "For each element, return the lowest index in the string where\nsubstring sub is found.\n\nSee also\nchar.find\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.find", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.find(a, sub, start=0, end=None)", "item_id": "numpy.char.find", "summary": "For each element, return the lowest index in the string where\nsubstring sub is found.\nCalls str.find element-wise.\nFor each element, return the lowest index in the string where\nsubstring sub is found, such that sub is contained in the\nrange [start, end].\n\nParameters\n\naarray_like of str or unicode\nsubstr or unicode\nstart, endint, optionalOptional arguments start and end are interpreted as in\nslice notation.\n\n\n\nReturns\n\noutndarray or intOutput array of ints", "description": "", "code-info": {"name": "numpy.char.find", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.testing.suppress_warnings.filter(self, category=&lt;class 'Warning'&gt;, message='', module=None)", "item_id": "numpy.testing.suppress_warnings.filter", "summary": "Add a new suppressing filter or apply it if the state is entered.\n\nParameters\n\ncategoryclass, optionalWarning class to filter\n\nmessagestring, optionalRegular expression matching the warning message.\n\nmodulemodule, optionalModule to filter for", "description": "", "code-info": {"name": "numpy.testing.suppress_warnings.filter", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " category", "is_optional": true, "type": "others", "default_value": "&lt;class 'Warning'&gt;", "description": ""}, {"name": " message", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " module", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.filled(self, fill_value=None)", "item_id": "numpy.ma.MaskedArray.filled", "summary": "Return a copy of self, with masked values filled with a given value.\nHowever, if there are no masked values to fill, self will be\nreturned instead as an ndarray.\n\nParameters\n\nfill_valuearray_like, optionalThe value to use for invalid entries", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.filled", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.filled(self, fill_value=None)", "item_id": "numpy.ma.masked_array.filled", "summary": "Return a copy of self, with masked values filled with a given value.\nHowever, if there are no masked values to fill, self will be\nreturned instead as an ndarray.\n\nParameters\n\nfill_valuearray_like, optionalThe value to use for invalid entries", "description": "", "code-info": {"name": "numpy.ma.masked_array.filled", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.fill()", "item_id": "numpy.record.fill", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.fill", "parameters": []}},
{"code": "numpy.ma.filled(a, fill_value=None)", "item_id": "numpy.ma.filled", "summary": "Return input as an array with masked data replaced by a fill value.\nIf a is not a MaskedArray, a itself is returned.\nIf a is a MaskedArray and fill_value is None, fill_value is set to\na.fill_value.\n\nParameters\n\naMaskedArray or array_likeAn input object.\n\nfill_valuearray_like, optional.Can be scalar or non-scalar", "description": "", "code-info": {"name": "numpy.ma.filled", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fill_diagonal(a, val, wrap=False)", "item_id": "numpy.fill_diagonal", "summary": "Fill the main diagonal of the given array of any dimensionality.\nFor an array a with a.ndim &gt;= 2, the diagonal is the list of\nlocations with indices a[i, ..., i] all identical", "description": "", "code-info": {"name": "numpy.fill_diagonal", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " val", "is_optional": false, "type": "others", "description": ""}, {"name": " wrap", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.recarray.fill(value)", "item_id": "numpy.recarray.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.fill(value)", "item_id": "numpy.ndarray.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.fill(value)", "item_id": "numpy.ma.MaskedArray.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.fill(value)", "item_id": "numpy.memmap.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.fill(value)", "item_id": "numpy.matrix.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskType.fill()", "item_id": "numpy.ma.MaskType.fill", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.fill", "parameters": []}},
{"code": "numpy.ma.masked_array.fill(value)", "item_id": "numpy.ma.masked_array.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.fill()", "item_id": "numpy.generic.fill", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.fill", "parameters": []}},
{"code": "numpy.recarray.field(self, attr, val=None)", "item_id": "numpy.recarray.field", "summary": "", "description": "", "code-info": {"name": "numpy.recarray.field", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " attr", "is_optional": false, "type": "others", "description": ""}, {"name": " val", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.fftshift(x, axes=None)", "item_id": "numpy.fft.fftshift", "summary": "Shift the zero-frequency component to the center of the spectrum.\nThis function swaps half-spaces for all axes listed (defaults to all).\nNote that y[0] is the Nyquist component only if len(x) is even.\n\nParameters\n\nxarray_likeInput array.\n\naxesint or shape tuple, optionalAxes over which to shift", "description": "", "code-info": {"name": "numpy.fft.fftshift", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.fill(value)", "item_id": "numpy.chararray.fill", "summary": "Fill the array with a scalar value.\n\nParameters\n\nvaluescalarAll elements of a will be assigned this value.\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.fill(0)\n&gt;&gt;&gt; a\narray([0, 0])\n&gt;&gt;&gt; a = np.empty(2)\n&gt;&gt;&gt; a.fill(1)\n&gt;&gt;&gt; a\narray([1.,  1.])\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.fill", "parameters": [{"name": "value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fft.fftfreq(n, d=1.0)", "item_id": "numpy.fft.fftfreq", "summary": "Return the Discrete Fourier Transform sample frequencies.\nThe returned float array f contains the frequency bin centers in cycles\nper unit of the sample spacing (with zero at the start)", "description": "", "code-info": {"name": "numpy.fft.fftfreq", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " d", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}]}},
{"code": "numpy.fft.fftn(a, s=None, axes=None, norm=None)", "item_id": "numpy.fft.fftn", "summary": "Compute the N-dimensional discrete Fourier Transform.\nThis function computes the N-dimensional discrete Fourier Transform over\nany number of axes in an M-dimensional array by means of the Fast Fourier\nTransform (FFT).\n\nParameters\n\naarray_likeInput array, can be complex.\n\nssequence of ints, optionalShape (length of each transformed axis) of the output\n(s[0] refers to axis 0, s[1] to axis 1, etc.).\nThis corresponds to n for fft(x, n).\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped", "description": "", "code-info": {"name": "numpy.fft.fftn", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fft.fft2(a, s=None, axes=(-2, -1)", "item_id": "numpy.fft.fft2", "summary": "Compute the 2-dimensional discrete Fourier Transform\nThis function computes the n-dimensional discrete Fourier Transform\nover any axes in an M-dimensional array by means of the\nFast Fourier Transform (FFT)", "description": "", "code-info": {"name": "numpy.fft.fft2", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " s", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.fft.fft(a, n=None, axis=-1, norm=None)", "item_id": "numpy.fft.fft", "summary": "Compute the one-dimensional discrete Fourier Transform.\nThis function computes the one-dimensional n-point discrete Fourier\nTransform (DFT) with the efficient Fast Fourier Transform (FFT)\nalgorithm [CT].\n\nParameters\n\naarray_likeInput array, can be complex.\n\nnint, optionalLength of the transformed axis of the output.\nIf n is smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros", "description": "", "code-info": {"name": "numpy.fft.fft", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " norm", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.f(dfnum, dfden, size=None)", "item_id": "numpy.random.Generator.f", "summary": "Draw samples from an F distribution.\nSamples are drawn from an F distribution with specified parameters,\ndfnum (degrees of freedom in numerator) and dfden (degrees of\nfreedom in denominator), where both parameters must be greater than\nzero.\nThe random variate of the F distribution (also known as the\nFisher distribution) is a continuous probability distribution\nthat arises in ANOVA tests, and is the ratio of two chi-square\nvariates.\n\nParameters\n\ndfnumfloat or array_like of floatsDegrees of freedom in numerator, must be &gt; 0.\n\ndfdenfloat or array_like of floatDegrees of freedom in denominator, must be &gt; 0.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.f", "parameters": [{"name": "dfnum", "is_optional": false, "type": "others", "description": ""}, {"name": " dfden", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.f(dfnum, dfden, size=None)", "item_id": "numpy.random.f", "summary": "Draw samples from an F distribution.\nSamples are drawn from an F distribution with specified parameters,\ndfnum (degrees of freedom in numerator) and dfden (degrees of\nfreedom in denominator), where both parameters must be greater than\nzero.\nThe random variate of the F distribution (also known as the\nFisher distribution) is a continuous probability distribution\nthat arises in ANOVA tests, and is the ratio of two chi-square\nvariates.\n\nNote\nNew code should use the f method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\ndfnumfloat or array_like of floatsDegrees of freedom in numerator, must be &gt; 0.\n\ndfdenfloat or array_like of floatDegrees of freedom in denominator, must be &gt; 0.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.f", "parameters": [{"name": "dfnum", "is_optional": false, "type": "others", "description": ""}, {"name": " dfden", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.fabs", "summary": "Compute the absolute values element-wise.\nThis function returns the absolute values (positive magnitude) of the\ndata in x", "description": "", "code-info": {"name": "numpy.fabs", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matlib.eye(n, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')", "item_id": "numpy.matlib.eye", "summary": "Return a matrix with ones on the diagonal and zeros elsewhere.\n\nParameters\n\nnintNumber of rows in the output.\n\nMint, optionalNumber of columns in the output, defaults to n.\n\nkint, optionalIndex of the diagonal: 0 refers to the main diagonal,\na positive value refers to an upper diagonal,\nand a negative value to a lower diagonal.\n\ndtypedtype, optionalData-type of the returned matrix.\n\norder{\u2018C\u2019, \u2018F\u2019}, optionalWhether the output should be stored in row-major (C-style) or\ncolumn-major (Fortran-style) order in memory.\n\nNew in version 1.14.0.\n\n\n\n\nReturns\n\nImatrixA n x M matrix where all elements are equal to zero,\nexcept for the k-th diagonal, whose values are equal to one.\n\n\n\n\n\nSee also\n\nnumpy.eyeEquivalent array function.\n\nidentitySquare identity matrix.\n\n\n\nExamples\n&gt;&gt;&gt; import numpy.matlib\n&gt;&gt;&gt; np.matlib.eye(3, k=1, dtype=float)\nmatrix([[0.,  1.,  0.],\n        [0.,  0.,  1.],\n        [0.,  0.,  0.]])\n\n\n", "description": "", "code-info": {"name": "numpy.matlib.eye", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " M", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.random.RandomState.f(dfnum, dfden, size=None)", "item_id": "numpy.random.RandomState.f", "summary": "Draw samples from an F distribution.\nSamples are drawn from an F distribution with specified parameters,\ndfnum (degrees of freedom in numerator) and dfden (degrees of\nfreedom in denominator), where both parameters must be greater than\nzero.\nThe random variate of the F distribution (also known as the\nFisher distribution) is a continuous probability distribution\nthat arises in ANOVA tests, and is the ratio of two chi-square\nvariates.\n\nNote\nNew code should use the f method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\ndfnumfloat or array_like of floatsDegrees of freedom in numerator, must be &gt; 0.\n\ndfdenfloat or array_like of floatDegrees of freedom in denominator, must be &gt; 0.\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.f", "parameters": [{"name": "dfnum", "is_optional": false, "type": "others", "description": ""}, {"name": " dfden", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')", "item_id": "numpy.eye", "summary": "Return a 2-D array with ones on the diagonal and zeros elsewhere.\n\nParameters\n\nNintNumber of rows in the output.\n\nMint, optionalNumber of columns in the output", "description": "", "code-info": {"name": "numpy.eye", "parameters": [{"name": "N", "is_optional": false, "type": "others", "description": ""}, {"name": " M", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'float'&gt;", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.extract(condition, arr)", "item_id": "numpy.extract", "summary": "Return the elements of an array that satisfy some condition.\nThis is equivalent to np.compress(ravel(condition), ravel(arr))", "description": "", "code-info": {"name": "numpy.extract", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " arr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "c.PyModule_AddObject(PyObject*\u00a0module, char*\u00a0name, PyObject*\u00a0value)", "item_id": "c.PyModule_AddObject", "summary": "", "description": "", "code-info": {"name": "c.PyModule_AddObject", "parameters": [{"name": "PyObject*\u00a0module", "is_optional": false, "type": "others", "description": ""}, {"name": " char*\u00a0name", "is_optional": false, "type": "others", "description": ""}, {"name": " PyObject*\u00a0value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.distutils.core.Extension(name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, f2py_options=None, module_dirs=None, extra_f77_compile_args=None, extra_f90_compile_args=None)", "item_id": "numpy.distutils.core.Extension", "summary": "\nParameters\n\nnamestrExtension name.\n\nsourceslist of strList of source file locations relative to the top directory of\nthe package.\n\nextra_compile_argslist of strExtra command line arguments to pass to the compiler.\n\nextra_f77_compile_argslist of strExtra command line arguments to pass to the fortran77 compiler.\n\nextra_f90_compile_argslist of strExtra command line arguments to pass to the fortran90 compiler.\n\n\n\n\nMethods\n\n\n\n\n\n\nhas_cxx_sources\n\n\nhas_f2py_sources\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.distutils.core.Extension", "parameters": [{"name": "name", "is_optional": false, "type": "others", "description": ""}, {"name": " sources", "is_optional": false, "type": "others", "description": ""}, {"name": " include_dirs", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " define_macros", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " undef_macros", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " library_dirs", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " libraries", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " runtime_library_dirs", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " extra_objects", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " extra_compile_args", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " extra_link_args", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " export_symbols", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " swig_opts", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " depends", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " language", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " f2py_options", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " module_dirs", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " extra_f77_compile_args", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " extra_f90_compile_args", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.exponential(scale=1.0, size=None)", "item_id": "numpy.random.RandomState.exponential", "summary": "Draw samples from an exponential distribution.\nIts probability density function is\n\n\nfor x &gt; 0 and 0 elsewhere", "description": "", "code-info": {"name": "numpy.random.RandomState.exponential", "parameters": [{"name": "scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.exponential(scale=1.0, size=None)", "item_id": "numpy.random.Generator.exponential", "summary": "Draw samples from an exponential distribution.\nIts probability density function is\n\n\nfor x &gt; 0 and 0 elsewhere", "description": "", "code-info": {"name": "numpy.random.Generator.exponential", "parameters": [{"name": "scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.exponential(scale=1.0, size=None)", "item_id": "numpy.random.exponential", "summary": "Draw samples from an exponential distribution.\nIts probability density function is\n\n\nfor x &gt; 0 and 0 elsewhere", "description": "", "code-info": {"name": "numpy.random.exponential", "parameters": [{"name": "scale", "is_optional": true, "type": "others", "default_value": "1.0", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.expm1(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.expm1", "summary": "Calculate exp(x) - 1 for all elements in the array.\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.expm1", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.chararray.expandtabs(self, tabsize=8)", "item_id": "numpy.chararray.expandtabs", "summary": "Return a copy of each string element where all tab characters are\nreplaced by one or more spaces.\n\nSee also\nchar.expandtabs\n\n", "description": "", "code-info": {"name": "numpy.chararray.expandtabs", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tabsize", "is_optional": true, "type": "int", "default_value": "8", "description": ""}]}},
{"code": "numpy.char.chararray.expandtabs(self, tabsize=8)", "item_id": "numpy.char.chararray.expandtabs", "summary": "Return a copy of each string element where all tab characters are\nreplaced by one or more spaces.\n\nSee also\nchar.expandtabs\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.expandtabs", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " tabsize", "is_optional": true, "type": "int", "default_value": "8", "description": ""}]}},
{"code": "numpy.char.expandtabs(a, tabsize=8)", "item_id": "numpy.char.expandtabs", "summary": "Return a copy of each string element where all tab characters are\nreplaced by one or more spaces.\nCalls str.expandtabs element-wise.\nReturn a copy of each string element where all tab characters are\nreplaced by one or more spaces, depending on the current column\nand the given tabsize", "description": "", "code-info": {"name": "numpy.char.expandtabs", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " tabsize", "is_optional": true, "type": "int", "default_value": "8", "description": ""}]}},
{"code": "numpy.ma.expand_dims(a, axis)", "item_id": "numpy.ma.expand_dims", "summary": "Expand the shape of an array.\nInsert a new axis that will appear at the axis position in the expanded\narray shape.\n\nParameters\n\naarray_likeInput array.\n\naxisint or tuple of intsPosition in the expanded axes where the new axis (or axes) is placed.\n\nDeprecated since version 1.13.0: Passing an axis where axis &gt; a.ndim will be treated as\naxis == a.ndim, and passing axis &lt; -a.ndim - 1 will\nbe treated as axis == 0", "description": "", "code-info": {"name": "numpy.ma.expand_dims", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.expand_dims(a, axis)", "item_id": "numpy.expand_dims", "summary": "Expand the shape of an array.\nInsert a new axis that will appear at the axis position in the expanded\narray shape.\n\nParameters\n\naarray_likeInput array.\n\naxisint or tuple of intsPosition in the expanded axes where the new axis (or axes) is placed.\n\nDeprecated since version 1.13.0: Passing an axis where axis &gt; a.ndim will be treated as\naxis == a.ndim, and passing axis &lt; -a.ndim - 1 will\nbe treated as axis == 0", "description": "", "code-info": {"name": "numpy.expand_dims", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.exp2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.exp2", "summary": "Calculate 2**p for all p in the input array.\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.exp2", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.exp", "summary": "Calculate the exponential of all elements in the input array.\n\nParameters\n\nxarray_likeInput values.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.exp", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.DataSource.exists(self, path)", "item_id": "numpy.DataSource.exists", "summary": "Test if path exists.\nTest if path exists as (and in this order):\n\na local file.\na remote URL that has been downloaded and stored locally in the\nDataSource directory.\na remote URL that has not been downloaded, but is valid and\naccessible.\n\n\nParameters\n\npathstrCan be a local file or a remote URL.\n\n\n\nReturns\n\noutboolTrue if path exists.\n\n\n\n\nNotes\nWhen path is an URL, exists will return True if it\u2019s either\nstored locally in the DataSource directory, or is a valid remote\nURL", "description": "", "code-info": {"name": "numpy.DataSource.exists", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " path", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.errstate(**kwargs)", "item_id": "numpy.errstate", "summary": "Context manager for floating-point error handling.\nUsing an instance of errstate as a context manager allows statements in\nthat context to execute with a known error handling behavior", "description": "", "code-info": {"name": "numpy.errstate", "parameters": [{"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.equal(x1, x2)", "item_id": "numpy.char.equal", "summary": "Return (x1 == x2) element-wise.\nUnlike numpy.equal, this comparison is performed by first\nstripping whitespace characters from the end of the string", "description": "", "code-info": {"name": "numpy.char.equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.equal", "summary": "Return (x1 == x2) element-wise.\n\nParameters\n\nx1, x2array_likeInput arrays", "description": "", "code-info": {"name": "numpy.equal", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.endswith(self, suffix, start=0, end=None)", "item_id": "numpy.char.chararray.endswith", "summary": "Returns a boolean array which is True where the string element\nin self ends with suffix, otherwise False.\n\nSee also\nchar.endswith\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.endswith", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " suffix", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.encode(self, encoding=None, errors=None)", "item_id": "numpy.chararray.encode", "summary": "Calls str.encode element-wise.\n\nSee also\nchar.encode\n\n", "description": "", "code-info": {"name": "numpy.chararray.encode", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " errors", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.encode(self, encoding=None, errors=None)", "item_id": "numpy.char.chararray.encode", "summary": "Calls str.encode element-wise.\n\nSee also\nchar.encode\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.encode", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " errors", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.endswith(self, suffix, start=0, end=None)", "item_id": "numpy.chararray.endswith", "summary": "Returns a boolean array which is True where the string element\nin self ends with suffix, otherwise False.\n\nSee also\nchar.endswith\n\n", "description": "", "code-info": {"name": "numpy.chararray.endswith", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " suffix", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.endswith(a, suffix, start=0, end=None)", "item_id": "numpy.char.endswith", "summary": "Returns a boolean array which is True where the string element\nin a ends with suffix, otherwise False.\nCalls str.endswith element-wise.\n\nParameters\n\naarray_like of str or unicode\nsuffixstr\nstart, endint, optionalWith optional start, test beginning at that position", "description": "", "code-info": {"name": "numpy.char.endswith", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " suffix", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.encode(a, encoding=None, errors=None)", "item_id": "numpy.char.encode", "summary": "Calls str.encode element-wise.\nThe set of available codecs comes from the Python standard library,\nand may be extended at runtime", "description": "", "code-info": {"name": "numpy.char.encode", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " errors", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nditer.enable_external_loop()", "item_id": "numpy.nditer.enable_external_loop", "summary": "When the \u201cexternal_loop\u201d was not used during construction, but\nis desired, this modifies the iterator to behave as if the flag\nwas specified.\n", "description": "", "code-info": {"name": "numpy.nditer.enable_external_loop", "parameters": []}},
{"code": "numpy.empty_like(prototype, dtype=None, order='K', subok=True, shape=None)", "item_id": "numpy.empty_like", "summary": "Return a new array with the same shape and type as a given array.\n\nParameters\n\nprototypearray_likeThe shape and data-type of prototype define these same attributes\nof the returned array.\n\ndtypedata-type, optionalOverrides the data type of the result.\n\nNew in version 1.6.0.\n\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result", "description": "", "code-info": {"name": "numpy.empty_like", "parameters": [{"name": "prototype", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.empty_like(prototype, dtype=None, order='K', subok=True, shape=None)", "item_id": "numpy.ma.empty_like", "summary": "Return a new array with the same shape and type as a given array.\n\nParameters\n\nprototypearray_likeThe shape and data-type of prototype define these same attributes\nof the returned array.\n\ndtypedata-type, optionalOverrides the data type of the result.\n\nNew in version 1.6.0.\n\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, or \u2018K\u2019}, optionalOverrides the memory layout of the result", "description": "", "code-info": {"name": "numpy.ma.empty_like", "parameters": [{"name": "prototype", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matlib.empty(shape, dtype=None, order='C')", "item_id": "numpy.matlib.empty", "summary": "Return a new matrix of given shape and type, without initializing entries.\n\nParameters\n\nshapeint or tuple of intShape of the empty matrix.\n\ndtypedata-type, optionalDesired output data-type.\n\norder{\u2018C\u2019, \u2018F\u2019}, optionalWhether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.\n\n\n\n\n\nSee also\nempty_like, zeros\n\nNotes\nempty, unlike zeros, does not set the matrix values to zero,\nand may therefore be marginally faster", "description": "", "code-info": {"name": "numpy.matlib.empty", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.empty(shape, dtype=float, order='C')", "item_id": "numpy.empty", "summary": "Return a new array of given shape and type, without initializing entries.\n\nParameters\n\nshapeint or tuple of intShape of the empty array, e.g., (2, 3) or 2.\n\ndtypedata-type, optionalDesired output data-type for the array, e.g, numpy.int8", "description": "", "code-info": {"name": "numpy.empty", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.empty(shape, dtype=float, order='C')", "item_id": "numpy.ma.empty", "summary": "Return a new array of given shape and type, without initializing entries.\n\nParameters\n\nshapeint or tuple of intShape of the empty array, e.g., (2, 3) or 2.\n\ndtypedata-type, optionalDesired output data-type for the array, e.g, numpy.int8", "description": "", "code-info": {"name": "numpy.ma.empty", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "float", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.einsum_path(subscripts, *operands, optimize='greedy')", "item_id": "numpy.einsum_path", "summary": "Evaluates the lowest cost contraction order for an einsum expression by\nconsidering the creation of intermediate arrays.\n\nParameters\n\nsubscriptsstrSpecifies the subscripts for summation.\n\n*operandslist of array_likeThese are the arrays for the operation.\n\noptimize{bool, list, tuple, \u2018greedy\u2019, \u2018optimal\u2019}Choose the type of path", "description": "", "code-info": {"name": "numpy.einsum_path", "parameters": [{"name": "subscripts", "is_optional": false, "type": "others", "description": ""}, {"name": " *operands", "is_optional": false, "type": "others", "description": ""}, {"name": " optimize", "is_optional": true, "type": "string", "default_value": "'greedy'", "description": ""}]}},
{"code": "numpy.einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False)", "item_id": "numpy.einsum", "summary": "Evaluates the Einstein summation convention on the operands.\nUsing the Einstein summation convention, many common multi-dimensional,\nlinear algebraic array operations can be represented in a simple fashion.\nIn implicit mode einsum computes these values.\nIn explicit mode, einsum provides further flexibility to compute\nother array operations that might not be considered classical Einstein\nsummation operations, by disabling, or forcing summation over specified\nsubscript labels.\nSee the notes and examples for clarification.\n\nParameters\n\nsubscriptsstrSpecifies the subscripts for summation as comma separated list of\nsubscript labels", "description": "", "code-info": {"name": "numpy.einsum", "parameters": [{"name": "subscripts", "is_optional": false, "type": "others", "description": ""}, {"name": " *operands", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'safe'", "description": ""}, {"name": " optimize", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.linalg.eigvalsh(a, UPLO='L')", "item_id": "numpy.linalg.eigvalsh", "summary": "Compute the eigenvalues of a complex Hermitian or real symmetric matrix.\nMain difference from eigh: the eigenvectors are not computed.\n\nParameters\n\na(\u2026, M, M) array_likeA complex- or real-valued matrix whose eigenvalues are to be\ncomputed.\n\nUPLO{\u2018L\u2019, \u2018U\u2019}, optionalSpecifies whether the calculation is done with the lower triangular\npart of a (\u2018L\u2019, default) or the upper triangular part (\u2018U\u2019).\nIrrespective of this value only the real parts of the diagonal will\nbe considered in the computation to preserve the notion of a Hermitian\nmatrix", "description": "", "code-info": {"name": "numpy.linalg.eigvalsh", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " UPLO", "is_optional": true, "type": "string", "default_value": "'L'", "description": ""}]}},
{"code": "numpy.linalg.eigvals(a)", "item_id": "numpy.linalg.eigvals", "summary": "Compute the eigenvalues of a general matrix.\nMain difference between eigvals and eig: the eigenvectors aren\u2019t\nreturned.\n\nParameters\n\na(\u2026, M, M) array_likeA complex- or real-valued matrix whose eigenvalues will be computed.\n\n\n\nReturns\n\nw(\u2026, M,) ndarrayThe eigenvalues, each repeated according to its multiplicity.\nThey are not necessarily ordered, nor are they necessarily\nreal for real matrices.\n\n\n\nRaises\n\nLinAlgErrorIf the eigenvalue computation does not converge.\n\n\n\n\n\nSee also\n\neigeigenvalues and right eigenvectors of general arrays\n\neigvalsheigenvalues of real symmetric or complex Hermitian (conjugate symmetric) arrays.\n\neigheigenvalues and eigenvectors of real symmetric or complex Hermitian (conjugate symmetric) arrays.\n\n\n\nNotes\n\nNew in version 1.8.0.\n\nBroadcasting rules apply, see the numpy.linalg documentation for\ndetails.\nThis is implemented using the _geev LAPACK routines which compute\nthe eigenvalues and eigenvectors of general square arrays.\nExamples\nIllustration, using the fact that the eigenvalues of a diagonal matrix\nare its diagonal elements, that multiplying a matrix on the left\nby an orthogonal matrix, Q, and on the right by Q.T (the transpose\nof Q), preserves the eigenvalues of the \u201cmiddle\u201d matrix", "description": "", "code-info": {"name": "numpy.linalg.eigvals", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.linalg.eigh(a, UPLO='L')", "item_id": "numpy.linalg.eigh", "summary": "Return the eigenvalues and eigenvectors of a complex Hermitian\n(conjugate symmetric) or a real symmetric matrix.\nReturns two objects, a 1-D array containing the eigenvalues of a, and\na 2-D square array or matrix (depending on the input type) of the\ncorresponding eigenvectors (in columns).\n\nParameters\n\na(\u2026, M, M) arrayHermitian or real symmetric matrices whose eigenvalues and\neigenvectors are to be computed.\n\nUPLO{\u2018L\u2019, \u2018U\u2019}, optionalSpecifies whether the calculation is done with the lower triangular\npart of a (\u2018L\u2019, default) or the upper triangular part (\u2018U\u2019).\nIrrespective of this value only the real parts of the diagonal will\nbe considered in the computation to preserve the notion of a Hermitian\nmatrix", "description": "", "code-info": {"name": "numpy.linalg.eigh", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " UPLO", "is_optional": true, "type": "string", "default_value": "'L'", "description": ""}]}},
{"code": "numpy.linalg.eig(a)", "item_id": "numpy.linalg.eig", "summary": "Compute the eigenvalues and right eigenvectors of a square array.\n\nParameters\n\na(\u2026, M, M) arrayMatrices for which the eigenvalues and right eigenvectors will\nbe computed\n\n\n\nReturns\n\nw(\u2026, M) arrayThe eigenvalues, each repeated according to its multiplicity.\nThe eigenvalues are not necessarily ordered", "description": "", "code-info": {"name": "numpy.linalg.eig", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.dumps()", "item_id": "numpy.record.dumps", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.dumps", "parameters": []}},
{"code": "numpy.ma.ediff1d(arr, to_end=None, to_begin=None)", "item_id": "numpy.ma.ediff1d", "summary": "Compute the differences between consecutive elements of an array.\nThis function is the equivalent of numpy.ediff1d that takes masked\nvalues into account, see numpy.ediff1d for details.\n\nSee also\n\nnumpy.ediff1dEquivalent function for ndarrays.\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.ediff1d", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " to_end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " to_begin", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ediff1d(ary, to_end=None, to_begin=None)", "item_id": "numpy.ediff1d", "summary": "The differences between consecutive elements of an array.\n\nParameters\n\naryarray_likeIf necessary, will be flattened before the differences are taken.\n\nto_endarray_like, optionalNumber(s) to append at the end of the returned differences.\n\nto_beginarray_like, optionalNumber(s) to prepend at the beginning of the returned differences.\n\n\n\nReturns\n\nediff1dndarrayThe differences", "description": "", "code-info": {"name": "numpy.ediff1d", "parameters": [{"name": "ary", "is_optional": false, "type": "others", "description": ""}, {"name": " to_end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " to_begin", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.dumps()", "item_id": "numpy.ndarray.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.dumps", "parameters": []}},
{"code": "numpy.chararray.dumps()", "item_id": "numpy.chararray.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.dumps", "parameters": []}},
{"code": "numpy.recarray.dumps()", "item_id": "numpy.recarray.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.dumps", "parameters": []}},
{"code": "numpy.ndarray.dump(file)", "item_id": "numpy.ndarray.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.dump(file)", "item_id": "numpy.memmap.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.dump(file)", "item_id": "numpy.matrix.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskType.dump()", "item_id": "numpy.ma.MaskType.dump", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.dump", "parameters": []}},
{"code": "numpy.char.chararray.dumps()", "item_id": "numpy.char.chararray.dumps", "summary": "Returns the pickle of the array as a string.\npickle.loads or numpy.loads will convert the string back to an array.\n\nParameters\n\nNone\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.dumps", "parameters": []}},
{"code": "numpy.record.dump()", "item_id": "numpy.record.dump", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.dump", "parameters": []}},
{"code": "numpy.ma.MaskedArray.dump(file)", "item_id": "numpy.ma.MaskedArray.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.dump(file)", "item_id": "numpy.recarray.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.dump(file)", "item_id": "numpy.ma.masked_array.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.dump()", "item_id": "numpy.generic.dump", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.dump", "parameters": []}},
{"code": "numpy.chararray.dump(file)", "item_id": "numpy.chararray.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.dump(file)", "item_id": "numpy.char.chararray.dump", "summary": "Dump a pickle of the array to the specified file.\nThe array can be read back with pickle.load or numpy.load.\n\nParameters\n\nfilestr or PathA string naming the dump file.\n\nChanged in version 1.17.0: pathlib.Path objects are now accepted.\n\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.dump", "parameters": [{"name": "file", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.dtype(obj, align=False, copy=False)", "item_id": "numpy.dtype", "summary": "Create a data type object.\nA numpy array is homogeneous, and contains elements described by a\ndtype object", "description": "", "code-info": {"name": "numpy.dtype", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " align", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.dstack(*args, **kwargs)", "item_id": "numpy.ma.dstack", "summary": "\nStack arrays in sequence depth wise (along third axis).\nThis is equivalent to concatenation along the third axis after 2-D arrays\nof shape (M,N) have been reshaped to (M,N,1) and 1-D arrays of shape\n(N,) have been reshaped to (1,N,1)", "description": "", "code-info": {"name": "numpy.ma.dstack", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.dsplit(ary, indices_or_sections)", "item_id": "numpy.dsplit", "summary": "Split array into multiple sub-arrays along the 3rd axis (depth).\nPlease refer to the split documentation", "description": "", "code-info": {"name": "numpy.dsplit", "parameters": [{"name": "ary", "is_optional": false, "type": "others", "description": ""}, {"name": " indices_or_sections", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.dot(b, out=None)", "item_id": "numpy.recarray.dot", "summary": "Dot product of two arrays.\nRefer to numpy.dot for full documentation.\n\nSee also\n\nnumpy.dotequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; a = np.eye(2)\n&gt;&gt;&gt; b = np.ones((2, 2)) * 2\n&gt;&gt;&gt; a.dot(b)\narray([[2.,  2.],\n       [2.,  2.]])\n\n\nThis array method can be conveniently chained:\n&gt;&gt;&gt; a.dot(b).dot(b)\narray([[8.,  8.],\n       [8.,  8.]])\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.dot(b, out=None)", "item_id": "numpy.matrix.dot", "summary": "Dot product of two arrays.\nRefer to numpy.dot for full documentation.\n\nSee also\n\nnumpy.dotequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; a = np.eye(2)\n&gt;&gt;&gt; b = np.ones((2, 2)) * 2\n&gt;&gt;&gt; a.dot(b)\narray([[2.,  2.],\n       [2.,  2.]])\n\n\nThis array method can be conveniently chained:\n&gt;&gt;&gt; a.dot(b).dot(b)\narray([[8.,  8.],\n       [8.,  8.]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.dstack(tup)", "item_id": "numpy.dstack", "summary": "Stack arrays in sequence depth wise (along third axis).\nThis is equivalent to concatenation along the third axis after 2-D arrays\nof shape (M,N) have been reshaped to (M,N,1) and 1-D arrays of shape\n(N,) have been reshaped to (1,N,1)", "description": "", "code-info": {"name": "numpy.dstack", "parameters": [{"name": "tup", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.dot(b, out=None)", "item_id": "numpy.ndarray.dot", "summary": "Dot product of two arrays.\nRefer to numpy.dot for full documentation.\n\nSee also\n\nnumpy.dotequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; a = np.eye(2)\n&gt;&gt;&gt; b = np.ones((2, 2)) * 2\n&gt;&gt;&gt; a.dot(b)\narray([[2.,  2.],\n       [2.,  2.]])\n\n\nThis array method can be conveniently chained:\n&gt;&gt;&gt; a.dot(b).dot(b)\narray([[8.,  8.],\n       [8.,  8.]])\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.dot(b, out=None)", "item_id": "numpy.memmap.dot", "summary": "Dot product of two arrays.\nRefer to numpy.dot for full documentation.\n\nSee also\n\nnumpy.dotequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; a = np.eye(2)\n&gt;&gt;&gt; b = np.ones((2, 2)) * 2\n&gt;&gt;&gt; a.dot(b)\narray([[2.,  2.],\n       [2.,  2.]])\n\n\nThis array method can be conveniently chained:\n&gt;&gt;&gt; a.dot(b).dot(b)\narray([[8.,  8.],\n       [8.,  8.]])\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.dot(b, out=None)", "item_id": "numpy.ma.masked_array.dot", "summary": "Masked dot product of two arrays", "description": "", "code-info": {"name": "numpy.ma.masked_array.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.dot(b, out=None)", "item_id": "numpy.char.chararray.dot", "summary": "Dot product of two arrays.\nRefer to numpy.dot for full documentation.\n\nSee also\n\nnumpy.dotequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; a = np.eye(2)\n&gt;&gt;&gt; b = np.ones((2, 2)) * 2\n&gt;&gt;&gt; a.dot(b)\narray([[2.,  2.],\n       [2.,  2.]])\n\n\nThis array method can be conveniently chained:\n&gt;&gt;&gt; a.dot(b).dot(b)\narray([[8.,  8.],\n       [8.,  8.]])\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.dot", "parameters": [{"name": "b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.dot(a, b, out=None)", "item_id": "numpy.dot", "summary": "Dot product of two arrays", "description": "", "code-info": {"name": "numpy.dot", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.domain([-1,  1])", "item_id": "numpy.polynomial.polynomial.Polynomial.domain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.domain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.domain([-1,  1])", "item_id": "numpy.polynomial.legendre.Legendre.domain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.domain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.dot(a, b, strict=False, out=None)", "item_id": "numpy.ma.dot", "summary": "Return the dot product of two arrays.\nThis function is the equivalent of numpy.dot that takes masked values\ninto account", "description": "", "code-info": {"name": "numpy.ma.dot", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " strict", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.domain([0, 1])", "item_id": "numpy.polynomial.laguerre.Laguerre.domain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.domain", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.domain([-1,  1])", "item_id": "numpy.polynomial.hermite_e.HermiteE.domain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.domain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.domain([-1,  1])", "item_id": "numpy.polynomial.hermite.Hermite.domain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.domain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.domain([-1,  1])", "item_id": "numpy.polynomial.chebyshev.Chebyshev.domain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.domain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.divmod(x1, x2, [out1, out2, ]/, [out=(None, None)", "item_id": "numpy.divmod", "summary": "Return element-wise quotient and remainder simultaneously.\n\nNew in version 1.13.0.\n\nnp.divmod(x, y) is equivalent to (x // y, x % y), but faster\nbecause it avoids redundant work", "description": "", "code-info": {"name": "numpy.divmod", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " [out1", "is_optional": false, "type": "others", "description": ""}, {"name": " out2", "is_optional": false, "type": "others", "description": ""}, {"name": " ]/", "is_optional": false, "type": "others", "description": ""}, {"name": " [out", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.divide", "summary": "Returns a true division of the inputs, element-wise.\nInstead of the Python traditional \u2018floor division\u2019, this returns a true\ndivision", "description": "", "code-info": {"name": "numpy.divide", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.disp(mesg, device=None, linefeed=True)", "item_id": "numpy.disp", "summary": "Display a message on a device.\n\nParameters\n\nmesgstrMessage to display.\n\ndeviceobjectDevice to write message", "description": "", "code-info": {"name": "numpy.disp", "parameters": [{"name": "mesg", "is_optional": false, "type": "others", "description": ""}, {"name": " device", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " linefeed", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.random.RandomState.dirichlet(alpha, size=None)", "item_id": "numpy.random.RandomState.dirichlet", "summary": "Draw samples from the Dirichlet distribution.\nDraw size samples of dimension k from a Dirichlet distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.dirichlet", "parameters": [{"name": "alpha", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.dirichlet(alpha, size=None)", "item_id": "numpy.random.Generator.dirichlet", "summary": "Draw samples from the Dirichlet distribution.\nDraw size samples of dimension k from a Dirichlet distribution", "description": "", "code-info": {"name": "numpy.random.Generator.dirichlet", "parameters": [{"name": "alpha", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.dirichlet(alpha, size=None)", "item_id": "numpy.random.dirichlet", "summary": "Draw samples from the Dirichlet distribution.\nDraw size samples of dimension k from a Dirichlet distribution", "description": "", "code-info": {"name": "numpy.random.dirichlet", "parameters": [{"name": "alpha", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.diff(a, n=1, axis=-1, prepend=&lt;no value&gt;, append=&lt;no value&gt;)", "item_id": "numpy.diff", "summary": "Calculate the n-th discrete difference along the given axis.\nThe first difference is given by out[i] = a[i+1] - a[i] along\nthe given axis, higher differences are calculated by using diff\nrecursively.\n\nParameters\n\naarray_likeInput array\n\nnint, optionalThe number of times values are differenced", "description": "", "code-info": {"name": "numpy.diff", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " n", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " prepend", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " append", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.digitize(x, bins, right=False)", "item_id": "numpy.digitize", "summary": "Return the indices of the bins to which each value in input array belongs.\n\n\n\n\n\n\n\nright\norder of bins\nreturned index i satisfies\n\n\n\nFalse\nincreasing\nbins[i-1] &lt;= x &lt; bins[i]\n\nTrue\nincreasing\nbins[i-1] &lt; x &lt;= bins[i]\n\nFalse\ndecreasing\nbins[i-1] &gt; x &gt;= bins[i]\n\nTrue\ndecreasing\nbins[i-1] &gt;= x &gt; bins[i]\n\n\n\nIf values in x are beyond the bounds of bins, 0 or len(bins) is\nreturned as appropriate.\n\nParameters\n\nxarray_likeInput array to be binned", "description": "", "code-info": {"name": "numpy.digitize", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " bins", "is_optional": false, "type": "others", "description": ""}, {"name": " right", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.recarray.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.recarray.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.recarray.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.ndarray.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.ndarray.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.ndarray.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.memmap.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.memmap.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.memmap.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.matrix.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.matrix.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.matrix.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.record.diagonal()", "item_id": "numpy.record.diagonal", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.diagonal", "parameters": []}},
{"code": "numpy.ma.MaskedArray.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.ma.MaskedArray.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.ma.MaskType.diagonal()", "item_id": "numpy.ma.MaskType.diagonal", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.diagonal", "parameters": []}},
{"code": "numpy.ma.masked_array.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.ma.masked_array.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.ma.masked_array.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.generic.diagonal()", "item_id": "numpy.generic.diagonal", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.diagonal", "parameters": []}},
{"code": "numpy.chararray.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.chararray.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.chararray.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.char.chararray.diagonal(offset=0, axis1=0, axis2=1)", "item_id": "numpy.char.chararray.diagonal", "summary": "Return specified diagonals", "description": "", "code-info": {"name": "numpy.char.chararray.diagonal", "parameters": [{"name": "offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.diagonal(a, offset=0, axis1=0, axis2=1)", "item_id": "numpy.diagonal", "summary": "Return specified diagonals.\nIf a is 2-D, returns the diagonal of a with the given offset,\ni.e., the collection of elements of the form a[i, i+offset]", "description": "", "code-info": {"name": "numpy.diagonal", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis1", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " axis2", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.diagflat(v, k=0)", "item_id": "numpy.diagflat", "summary": "Create a two-dimensional array with the flattened input as a diagonal.\n\nParameters\n\nvarray_likeInput data, which is flattened and set as the k-th\ndiagonal of the output.\n\nkint, optionalDiagonal to set; 0, the default, corresponds to the \u201cmain\u201d diagonal,\na positive (negative) k giving the number of the diagonal above\n(below) the main.\n\n\n\nReturns\n\noutndarrayThe 2-D output array.\n\n\n\n\n\nSee also\n\ndiagMATLAB work-alike for 1-D and 2-D arrays.\n\ndiagonalReturn specified diagonals.\n\ntraceSum along diagonals.\n\n\n\nExamples\n&gt;&gt;&gt; np.diagflat([[1,2], [3,4]])\narray([[1, 0, 0, 0],\n       [0, 2, 0, 0],\n       [0, 0, 3, 0],\n       [0, 0, 0, 4]])\n\n\n&gt;&gt;&gt; np.diagflat([1,2], 1)\narray([[0, 1, 0],\n       [0, 0, 2],\n       [0, 0, 0]])\n\n\n", "description": "", "code-info": {"name": "numpy.diagflat", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.diag_indices_from(arr)", "item_id": "numpy.diag_indices_from", "summary": "Return the indices to access the main diagonal of an n-dimensional array.\nSee diag_indices for full details.\n\nParameters\n\narrarray, at least 2-D\n\n\n\n\nSee also\ndiag_indices\n\nNotes\n\nNew in version 1.4.0.\n\n", "description": "", "code-info": {"name": "numpy.diag_indices_from", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.diag_indices(n, ndim=2)", "item_id": "numpy.diag_indices", "summary": "Return the indices to access the main diagonal of an array.\nThis returns a tuple of indices that can be used to access the main\ndiagonal of an array a with a.ndim &gt;= 2 dimensions and shape\n(n, n, \u2026, n)", "description": "", "code-info": {"name": "numpy.diag_indices", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " ndim", "is_optional": true, "type": "int", "default_value": "2", "description": ""}]}},
{"code": "numpy.ma.diag(v, k=0)", "item_id": "numpy.ma.diag", "summary": "Extract a diagonal or construct a diagonal array.\nThis function is the equivalent of numpy.diag that takes masked\nvalues into account, see numpy.diag for details.\n\nSee also\n\nnumpy.diagEquivalent function for ndarrays.\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.diag", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.diag(v, k=0)", "item_id": "numpy.diag", "summary": "Extract a diagonal or construct a diagonal array.\nSee the more detailed documentation for numpy.diagonal if you use this\nfunction to extract a diagonal and wish to write to the resulting array;\nwhether it returns a copy or a view depends on what version of numpy you\nare using.\n\nParameters\n\nvarray_likeIf v is a 2-D array, return a copy of its k-th diagonal.\nIf v is a 1-D array, return a 2-D array with v on the k-th\ndiagonal.\n\nkint, optionalDiagonal in question", "description": "", "code-info": {"name": "numpy.diag", "parameters": [{"name": "v", "is_optional": false, "type": "others", "description": ""}, {"name": " k", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.linalg.det(a)", "item_id": "numpy.linalg.det", "summary": "Compute the determinant of an array.\n\nParameters\n\na(\u2026, M, M) array_likeInput array to compute determinants for.\n\n\n\nReturns\n\ndet(\u2026) array_likeDeterminant of a.\n\n\n\n\n\nSee also\n\nslogdetAnother way to represent the determinant, more suitable for large matrices where underflow/overflow may occur.\n\n\n\nNotes\n\nNew in version 1.8.0.\n\nBroadcasting rules apply, see the numpy.linalg documentation for\ndetails.\nThe determinant is computed via LU factorization using the LAPACK\nroutine z/dgetrf.\nExamples\nThe determinant of a 2-D array [[a, b], [c, d]] is ad - bc:\n&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])\n&gt;&gt;&gt; np.linalg.det(a)\n-2.0 # may vary\n\n\nComputing determinants for a stack of matrices:\n&gt;&gt;&gt; a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])\n&gt;&gt;&gt; a.shape\n(3, 2, 2)\n&gt;&gt;&gt; np.linalg.det(a)\narray([-2., -3., -8.])\n\n\n", "description": "", "code-info": {"name": "numpy.linalg.det", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.deriv(self, m=1)", "item_id": "numpy.polynomial.legendre.Legendre.deriv", "summary": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.\n\nParameters\n\nmnon-negative intFind the derivative of order m.\n\n\n\nReturns\n\nnew_seriesseriesA new series representing the derivative", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.deriv(self, m=1)", "item_id": "numpy.polynomial.laguerre.Laguerre.deriv", "summary": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.\n\nParameters\n\nmnon-negative intFind the derivative of order m.\n\n\n\nReturns\n\nnew_seriesseriesA new series representing the derivative", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.deriv(self, m=1)", "item_id": "numpy.polynomial.hermite_e.HermiteE.deriv", "summary": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.\n\nParameters\n\nmnon-negative intFind the derivative of order m.\n\n\n\nReturns\n\nnew_seriesseriesA new series representing the derivative", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.deriv(self, m=1)", "item_id": "numpy.polynomial.polynomial.Polynomial.deriv", "summary": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.\n\nParameters\n\nmnon-negative intFind the derivative of order m.\n\n\n\nReturns\n\nnew_seriesseriesA new series representing the derivative", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.deriv(self, m=1)", "item_id": "numpy.polynomial.hermite.Hermite.deriv", "summary": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.\n\nParameters\n\nmnon-negative intFind the derivative of order m.\n\n\n\nReturns\n\nnew_seriesseriesA new series representing the derivative", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.deriv(self, m=1)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.deriv", "summary": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.\n\nParameters\n\nmnon-negative intFind the derivative of order m.\n\n\n\nReturns\n\nnew_seriesseriesA new series representing the derivative", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.poly1d.deriv(self, m=1)", "item_id": "numpy.poly1d.deriv", "summary": "Return a derivative of this polynomial.\nRefer to polyder for full documentation.\n\nSee also\n\npolyderequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.poly1d.deriv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.testing.dec.deprecated(conditional=True)", "item_id": "numpy.testing.dec.deprecated", "summary": "Filter deprecation warnings while running the test suite.\nThis decorator can be used to filter DeprecationWarning\u2019s, to avoid\nprinting them during the test suite run, while checking that the test\nactually raises a DeprecationWarning.\n\nParameters\n\nconditionalbool or callable, optionalFlag to determine whether to mark test as deprecated or not", "description": "", "code-info": {"name": "numpy.testing.dec.deprecated", "parameters": [{"name": "conditional", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.deprecate(*args, **kwargs)", "item_id": "numpy.deprecate", "summary": "Issues a DeprecationWarning, adds warning to old_name\u2019s\ndocstring, rebinds old_name.__name__ and returns the new\nfunction object.\nThis function may also be used as a decorator.\n\nParameters\n\nfuncfunctionThe function to be deprecated.\n\nold_namestr, optionalThe name of the function to be deprecated", "description": "", "code-info": {"name": "numpy.deprecate", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.delete(arr, obj, axis=None)", "item_id": "numpy.delete", "summary": "Return a new array with sub-arrays along an axis deleted", "description": "", "code-info": {"name": "numpy.delete", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " obj", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.degrees(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.degrees", "summary": "Convert angles from radians to degrees.\n\nParameters\n\nxarray_likeInput array in radians.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.degrees", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.deprecate_with_doc(msg)", "item_id": "numpy.deprecate_with_doc", "summary": "", "description": "", "code-info": {"name": "numpy.deprecate_with_doc", "parameters": [{"name": "msg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.degree(self)", "item_id": "numpy.polynomial.legendre.Legendre.degree", "summary": "The degree of the series.\n\nNew in version 1.5.0.\n\n\nReturns\n\ndegreeintDegree of the series, one less than the number of coefficients.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.degree", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.degree(self)", "item_id": "numpy.polynomial.polynomial.Polynomial.degree", "summary": "The degree of the series.\n\nNew in version 1.5.0.\n\n\nReturns\n\ndegreeintDegree of the series, one less than the number of coefficients.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.degree", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.degree(self)", "item_id": "numpy.polynomial.laguerre.Laguerre.degree", "summary": "The degree of the series.\n\nNew in version 1.5.0.\n\n\nReturns\n\ndegreeintDegree of the series, one less than the number of coefficients.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.degree", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.degree(self)", "item_id": "numpy.polynomial.hermite_e.HermiteE.degree", "summary": "The degree of the series.\n\nNew in version 1.5.0.\n\n\nReturns\n\ndegreeintDegree of the series, one less than the number of coefficients.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.degree", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.degree(self)", "item_id": "numpy.polynomial.hermite.Hermite.degree", "summary": "The degree of the series.\n\nNew in version 1.5.0.\n\n\nReturns\n\ndegreeintDegree of the series, one less than the number of coefficients.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.degree", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.deg2rad(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.deg2rad", "summary": "Convert angles from degrees to radians.\n\nParameters\n\nxarray_likeAngles in degrees.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.deg2rad", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.default_rng()", "item_id": "numpy.random.default_rng", "summary": "Construct a new Generator with the default BitGenerator (PCG64).\n\nParameters\n\nseed{None, int, array_like[ints], SeedSequence, BitGenerator, Generator}, optionalA seed to initialize the BitGenerator", "description": "", "code-info": {"name": "numpy.random.default_rng", "parameters": []}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.degree(self)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.degree", "summary": "The degree of the series.\n\nNew in version 1.5.0.\n\n\nReturns\n\ndegreeintDegree of the series, one less than the number of coefficients.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.degree", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.default_fill_value(obj)", "item_id": "numpy.ma.default_fill_value", "summary": "Return the default fill value for the argument object.\nThe default filling value depends on the datatype of the input\narray or the type of the input scalar:\n\n\n\n\n\n\n\ndatatype\ndefault\n\n\n\nbool\nTrue\n\nint\n999999\n\nfloat\n1.e20\n\ncomplex\n1.e20+0j\n\nobject\n\u2018?\u2019\n\nstring\n\u2018N/A\u2019\n\n\n\n\nFor structured types, a structured scalar is returned, with each field the\ndefault fill value for its type.\nFor subarray types, the fill value is an array of the same size containing\nthe default scalar fill value.\n\nParameters\n\nobjndarray, dtype or scalarThe array data-type or scalar for which the default fill value\nis returned.\n\n\n\nReturns\n\nfill_valuescalarThe default fill value.\n\n\n\n\nExamples\n&gt;&gt;&gt; np.ma.default_fill_value(1)\n999999\n&gt;&gt;&gt; np.ma.default_fill_value(np.array([1.1, 2., np.pi]))\n1e+20\n&gt;&gt;&gt; np.ma.default_fill_value(np.dtype(complex))\n(1e+20+0j)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.default_fill_value", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.decorate_methods(cls, decorator, testmatch=None)", "item_id": "numpy.testing.decorate_methods", "summary": "Apply a decorator to all methods in a class matching a regular expression.\nThe given decorator is applied to all public methods of cls that are\nmatched by the regular expression testmatch\n(testmatch.search(methodname))", "description": "", "code-info": {"name": "numpy.testing.decorate_methods", "parameters": [{"name": "cls", "is_optional": false, "type": "others", "description": ""}, {"name": " decorator", "is_optional": false, "type": "others", "description": ""}, {"name": " testmatch", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.decode(self, encoding=None, errors=None)", "item_id": "numpy.chararray.decode", "summary": "Calls str.decode element-wise.\n\nSee also\nchar.decode\n\n", "description": "", "code-info": {"name": "numpy.chararray.decode", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " errors", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.decode(self, encoding=None, errors=None)", "item_id": "numpy.char.chararray.decode", "summary": "Calls str.decode element-wise.\n\nSee also\nchar.decode\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.decode", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " errors", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.decode(a, encoding=None, errors=None)", "item_id": "numpy.char.decode", "summary": "Calls str.decode element-wise.\nThe set of available codecs comes from the Python standard library,\nand may be extended at runtime", "description": "", "code-info": {"name": "numpy.char.decode", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " errors", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.nditer.debug_print()", "item_id": "numpy.nditer.debug_print", "summary": "Print the current state of the nditer instance and debug info to stdout.\n", "description": "", "code-info": {"name": "numpy.nditer.debug_print", "parameters": []}},
{"code": "numpy.datetime_data(dtype, /)", "item_id": "numpy.datetime_data", "summary": "Get information about the step size of a date or time type.\nThe returned tuple can be passed as the second argument of numpy.datetime64 and\nnumpy.timedelta64.\n\nParameters\n\ndtypedtypeThe dtype object, which must be a datetime64 or timedelta64 type.\n\n\n\nReturns\n\nunitstrThe datetime unit on which this dtype\nis based.\n\ncountintThe number of base units in a step.\n\n\n\n\nExamples\n&gt;&gt;&gt; dt_25s = np.dtype('timedelta64[25s]')\n&gt;&gt;&gt; np.datetime_data(dt_25s)\n('s', 25)\n&gt;&gt;&gt; np.array(10, dt_25s).astype('timedelta64[s]')\narray(250, dtype='timedelta64[s]')\n\n\nThe result can be used to construct a datetime that uses the same units\nas a timedelta\n&gt;&gt;&gt; np.datetime64('2010', np.datetime_data(dt_25s))\nnumpy.datetime64('2010-01-01T00:00:00','25s')\n\n\n", "description": "", "code-info": {"name": "numpy.datetime_data", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind')", "item_id": "numpy.datetime_as_string", "summary": "Convert an array of datetimes into an array of strings.\n\nParameters\n\narrarray_like of datetime64The array of UTC timestamps to format.\n\nunitstrOne of None, \u2018auto\u2019, or a datetime unit.\n\ntimezone{\u2018naive\u2019, \u2018UTC\u2019, \u2018local\u2019} or tzinfoTimezone information to use when displaying the datetime", "description": "", "code-info": {"name": "numpy.datetime_as_string", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " unit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " timezone", "is_optional": true, "type": "string", "default_value": "'naive'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}]}},
{"code": "numpy.DataSource(destpath='.')", "item_id": "numpy.DataSource", "summary": "A generic data source file (file, http, ftp, \u2026).\nDataSources can be local files or remote files/URLs", "description": "", "code-info": {"name": "numpy.DataSource", "parameters": [{"name": "destpath", "is_optional": true, "type": "string", "default_value": "'.'", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.cutdeg(self, deg)", "item_id": "numpy.polynomial.polynomial.Polynomial.cutdeg", "summary": "Truncate series to the given degree.\nReduce the degree of the series to deg by discarding the\nhigh order terms", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.cutdeg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.cutdeg(self, deg)", "item_id": "numpy.polynomial.legendre.Legendre.cutdeg", "summary": "Truncate series to the given degree.\nReduce the degree of the series to deg by discarding the\nhigh order terms", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.cutdeg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.cutdeg(self, deg)", "item_id": "numpy.polynomial.laguerre.Laguerre.cutdeg", "summary": "Truncate series to the given degree.\nReduce the degree of the series to deg by discarding the\nhigh order terms", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.cutdeg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.cutdeg(self, deg)", "item_id": "numpy.polynomial.hermite_e.HermiteE.cutdeg", "summary": "Truncate series to the given degree.\nReduce the degree of the series to deg by discarding the\nhigh order terms", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.cutdeg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.cumsum(axis=None, dtype=None, out=None)", "item_id": "numpy.ndarray.cumsum", "summary": "Return the cumulative sum of the elements along the given axis.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.cumsumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.cumsum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.cutdeg(self, deg)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.cutdeg", "summary": "Truncate series to the given degree.\nReduce the degree of the series to deg by discarding the\nhigh order terms", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.cutdeg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.cutdeg(self, deg)", "item_id": "numpy.polynomial.hermite.Hermite.cutdeg", "summary": "Truncate series to the given degree.\nReduce the degree of the series to deg by discarding the\nhigh order terms", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.cutdeg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.cumsum()", "item_id": "numpy.record.cumsum", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.cumsum", "parameters": []}},
{"code": "numpy.recarray.cumsum(axis=None, dtype=None, out=None)", "item_id": "numpy.recarray.cumsum", "summary": "Return the cumulative sum of the elements along the given axis.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.cumsumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.cumsum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.cumsum(axis=None, dtype=None, out=None)", "item_id": "numpy.matrix.cumsum", "summary": "Return the cumulative sum of the elements along the given axis.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.cumsumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.cumsum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.cumsum(axis=None, dtype=None, out=None)", "item_id": "numpy.memmap.cumsum", "summary": "Return the cumulative sum of the elements along the given axis.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.cumsumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.cumsum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.cumsum()", "item_id": "numpy.generic.cumsum", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.cumsum", "parameters": []}},
{"code": "numpy.ma.MaskType.cumsum()", "item_id": "numpy.ma.MaskType.cumsum", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.cumsum", "parameters": []}},
{"code": "numpy.ma.MaskedArray.cumsum(self, axis=None, dtype=None, out=None)", "item_id": "numpy.ma.MaskedArray.cumsum", "summary": "Return the cumulative sum of the array elements over the given axis.\nMasked values are set to 0 internally during the computation.\nHowever, their position is saved, and the result will be masked at\nthe same locations.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.ndarray.cumsumcorresponding function for ndarrays\n\nnumpy.cumsumequivalent function\n\n\n\nNotes\nThe mask is lost if out is not a valid MaskedArray !\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\nExamples\n&gt;&gt;&gt; marr = np.ma.array(np.arange(10), mask=[0,0,0,1,1,1,0,0,0,0])\n&gt;&gt;&gt; marr.cumsum()\nmasked_array(data=[0, 1, 3, --, --, --, 9, 16, 24, 33],\n             mask=[False, False, False,  True,  True,  True, False, False,\n                   False, False],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.cumsum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.cumsum(axis=None, dtype=None, out=None)", "item_id": "numpy.chararray.cumsum", "summary": "Return the cumulative sum of the elements along the given axis.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.cumsumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.cumsum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.cumsum(axis=None, dtype=None, out=None)", "item_id": "numpy.char.chararray.cumsum", "summary": "Return the cumulative sum of the elements along the given axis.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.cumsumequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.cumsum", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.cumsum(a, axis=None, dtype=None, out=None)", "item_id": "numpy.cumsum", "summary": "Return the cumulative sum of the elements along a given axis.\n\nParameters\n\naarray_likeInput array.\n\naxisint, optionalAxis along which the cumulative sum is computed", "description": "", "code-info": {"name": "numpy.cumsum", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.cumprod(axis=None, dtype=None, out=None)", "item_id": "numpy.recarray.cumprod", "summary": "Return the cumulative product of the elements along the given axis.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.cumprodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.cumprod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.cumprod(axis=None, dtype=None, out=None)", "item_id": "numpy.ndarray.cumprod", "summary": "Return the cumulative product of the elements along the given axis.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.cumprodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.cumprod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.cumsum(self, axis=None, dtype=None, out=None)", "item_id": "numpy.ma.cumsum", "summary": "Return the cumulative sum of the array elements over the given axis.\nMasked values are set to 0 internally during the computation.\nHowever, their position is saved, and the result will be masked at\nthe same locations.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.ndarray.cumsumcorresponding function for ndarrays\n\nnumpy.cumsumequivalent function\n\n\n\nNotes\nThe mask is lost if out is not a valid MaskedArray !\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\nExamples\n&gt;&gt;&gt; marr = np.ma.array(np.arange(10), mask=[0,0,0,1,1,1,0,0,0,0])\n&gt;&gt;&gt; marr.cumsum()\nmasked_array(data=[0, 1, 3, --, --, --, 9, 16, 24, 33],\n             mask=[False, False, False,  True,  True,  True, False, False,\n                   False, False],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.cumsum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.cumprod()", "item_id": "numpy.record.cumprod", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.cumprod", "parameters": []}},
{"code": "numpy.ma.masked_array.cumsum(self, axis=None, dtype=None, out=None)", "item_id": "numpy.ma.masked_array.cumsum", "summary": "Return the cumulative sum of the array elements over the given axis.\nMasked values are set to 0 internally during the computation.\nHowever, their position is saved, and the result will be masked at\nthe same locations.\nRefer to numpy.cumsum for full documentation.\n\nSee also\n\nnumpy.ndarray.cumsumcorresponding function for ndarrays\n\nnumpy.cumsumequivalent function\n\n\n\nNotes\nThe mask is lost if out is not a valid MaskedArray !\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\nExamples\n&gt;&gt;&gt; marr = np.ma.array(np.arange(10), mask=[0,0,0,1,1,1,0,0,0,0])\n&gt;&gt;&gt; marr.cumsum()\nmasked_array(data=[0, 1, 3, --, --, --, 9, 16, 24, 33],\n             mask=[False, False, False,  True,  True,  True, False, False,\n                   False, False],\n       fill_value=999999)\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.cumsum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.cumprod(axis=None, dtype=None, out=None)", "item_id": "numpy.memmap.cumprod", "summary": "Return the cumulative product of the elements along the given axis.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.cumprodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.cumprod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.cumprod()", "item_id": "numpy.ma.MaskType.cumprod", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.cumprod", "parameters": []}},
{"code": "numpy.ma.MaskedArray.cumprod(self, axis=None, dtype=None, out=None)", "item_id": "numpy.ma.MaskedArray.cumprod", "summary": "Return the cumulative product of the array elements over the given axis.\nMasked values are set to 1 internally during the computation.\nHowever, their position is saved, and the result will be masked at\nthe same locations.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.ndarray.cumprodcorresponding function for ndarrays\n\nnumpy.cumprodequivalent function\n\n\n\nNotes\nThe mask is lost if out is not a valid MaskedArray !\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.cumprod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.cumprod(self, axis=None, dtype=None, out=None)", "item_id": "numpy.ma.masked_array.cumprod", "summary": "Return the cumulative product of the array elements over the given axis.\nMasked values are set to 1 internally during the computation.\nHowever, their position is saved, and the result will be masked at\nthe same locations.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.ndarray.cumprodcorresponding function for ndarrays\n\nnumpy.cumprodequivalent function\n\n\n\nNotes\nThe mask is lost if out is not a valid MaskedArray !\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.cumprod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.cumprod(axis=None, dtype=None, out=None)", "item_id": "numpy.matrix.cumprod", "summary": "Return the cumulative product of the elements along the given axis.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.cumprodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.cumprod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.cumprod(axis=None, dtype=None, out=None)", "item_id": "numpy.char.chararray.cumprod", "summary": "Return the cumulative product of the elements along the given axis.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.cumprodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.cumprod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.cumprod()", "item_id": "numpy.generic.cumprod", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.cumprod", "parameters": []}},
{"code": "numpy.chararray.cumprod(axis=None, dtype=None, out=None)", "item_id": "numpy.chararray.cumprod", "summary": "Return the cumulative product of the elements along the given axis.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.cumprodequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.cumprod", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.cumprod(a, axis=None, dtype=None, out=None)", "item_id": "numpy.cumprod", "summary": "Return the cumulative product of elements along a given axis.\n\nParameters\n\naarray_likeInput array.\n\naxisint, optionalAxis along which the cumulative product is computed", "description": "", "code-info": {"name": "numpy.cumprod", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.cumprod(self, axis=None, dtype=None, out=None)", "item_id": "numpy.ma.cumprod", "summary": "Return the cumulative product of the array elements over the given axis.\nMasked values are set to 1 internally during the computation.\nHowever, their position is saved, and the result will be masked at\nthe same locations.\nRefer to numpy.cumprod for full documentation.\n\nSee also\n\nnumpy.ndarray.cumprodcorresponding function for ndarrays\n\nnumpy.cumprodequivalent function\n\n\n\nNotes\nThe mask is lost if out is not a valid MaskedArray !\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\n", "description": "", "code-info": {"name": "numpy.ma.cumprod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)", "item_id": "numpy.cross", "summary": "Return the cross product of two (arrays of) vectors.\nThe cross product of a and b in  is a vector perpendicular\nto both a and b", "description": "", "code-info": {"name": "numpy.cross", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " axisa", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " axisb", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " axisc", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None)", "item_id": "numpy.ma.cov", "summary": "Estimate the covariance matrix.\nExcept for the handling of missing data this function does the same as\nnumpy.cov", "description": "", "code-info": {"name": "numpy.ma.cov", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rowvar", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " bias", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " allow_masked", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " ddof", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None)", "item_id": "numpy.cov", "summary": "Estimate a covariance matrix, given data and weights.\nCovariance indicates the level to which two variables vary together.\nIf we examine N-dimensional samples, ,\nthen the covariance matrix element  is the covariance of\n and ", "description": "", "code-info": {"name": "numpy.cov", "parameters": [{"name": "m", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rowvar", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " bias", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " ddof", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fweights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " aweights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.count_nonzero(a, axis=None)", "item_id": "numpy.count_nonzero", "summary": "Counts the number of non-zero values in the array a.\nThe word \u201cnon-zero\u201d is in reference to the Python 2.x\nbuilt-in method __nonzero__() (renamed __bool__()\nin Python 3.x) of Python objects that tests an object\u2019s\n\u201ctruthfulness\u201d", "description": "", "code-info": {"name": "numpy.count_nonzero", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.count_masked(arr, axis=None)", "item_id": "numpy.ma.count_masked", "summary": "Count the number of masked elements along the given axis.\n\nParameters\n\narrarray_likeAn array with (possibly) masked elements.\n\naxisint, optionalAxis along which to count", "description": "", "code-info": {"name": "numpy.ma.count_masked", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.count(self, axis=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.count", "summary": "Count the non-masked elements of the array along the given axis.\n\nParameters\n\naxisNone or int or tuple of ints, optionalAxis or axes along which the count is performed.\nThe default, None, performs the count over all\nthe dimensions of the input array", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.count", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.masked_array.count(self, axis=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.count", "summary": "Count the non-masked elements of the array along the given axis.\n\nParameters\n\naxisNone or int or tuple of ints, optionalAxis or axes along which the count is performed.\nThe default, None, performs the count over all\nthe dimensions of the input array", "description": "", "code-info": {"name": "numpy.ma.masked_array.count", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.chararray.count(self, sub, start=0, end=None)", "item_id": "numpy.chararray.count", "summary": "Returns an array with the number of non-overlapping occurrences of\nsubstring sub in the range [start, end].\n\nSee also\nchar.count\n\n", "description": "", "code-info": {"name": "numpy.chararray.count", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.count(self, sub, start=0, end=None)", "item_id": "numpy.char.chararray.count", "summary": "Returns an array with the number of non-overlapping occurrences of\nsubstring sub in the range [start, end].\n\nSee also\nchar.count\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.count", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.count(a, sub, start=0, end=None)", "item_id": "numpy.char.count", "summary": "Returns an array with the number of non-overlapping occurrences of\nsubstring sub in the range [start, end].\nCalls str.count element-wise.\n\nParameters\n\naarray_like of str or unicode\nsubstr or unicodeThe substring to search for.\n\nstart, endint, optionalOptional arguments start and end are interpreted as slice\nnotation to specify the range in which to count.\n\n\n\nReturns\n\noutndarrayOutput array of ints.\n\n\n\n\n\nSee also\nstr.count\n\nExamples\n&gt;&gt;&gt; c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n&gt;&gt;&gt; c\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='&lt;U7')\n&gt;&gt;&gt; np.char.count(c, 'A')\narray([3, 1, 1])\n&gt;&gt;&gt; np.char.count(c, 'aA')\narray([3, 1, 0])\n&gt;&gt;&gt; np.char.count(c, 'A', start=1, end=4)\narray([2, 1, 1])\n&gt;&gt;&gt; np.char.count(c, 'A', start=1, end=3)\narray([1, 0, 0])\n\n\n", "description": "", "code-info": {"name": "numpy.char.count", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " sub", "is_optional": false, "type": "others", "description": ""}, {"name": " start", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " end", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.cosh", "summary": "Hyperbolic cosine, element-wise.\nEquivalent to 1/2 * (np.exp(x) + np.exp(-x)) and np.cos(1j*x).\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.cosh", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.count(self, axis=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.count", "summary": "Count the non-masked elements of the array along the given axis.\n\nParameters\n\naxisNone or int or tuple of ints, optionalAxis or axes along which the count is performed.\nThe default, None, performs the count over all\nthe dimensions of the input array", "description": "", "code-info": {"name": "numpy.ma.count", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.correlate(a, v, mode='valid')", "item_id": "numpy.correlate", "summary": "Cross-correlation of two 1-dimensional sequences.\nThis function computes the correlation as generally defined in signal\nprocessing texts:\nc_{av}[k] = sum_n a[n+k] * conj(v[n])\n\n\nwith a and v sequences being zero-padded where necessary and conj being\nthe conjugate.\n\nParameters\n\na, varray_likeInput sequences.\n\nmode{\u2018valid\u2019, \u2018same\u2019, \u2018full\u2019}, optionalRefer to the convolve docstring", "description": "", "code-info": {"name": "numpy.correlate", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " v", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'valid'", "description": ""}]}},
{"code": "numpy.corrcoef(x, y=None, rowvar=True, bias=&lt;no value&gt;, ddof=&lt;no value&gt;)", "item_id": "numpy.corrcoef", "summary": "Return Pearson product-moment correlation coefficients.\nPlease refer to the documentation for cov for more detail", "description": "", "code-info": {"name": "numpy.corrcoef", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rowvar", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " bias", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " ddof", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.copyto(dst, src, casting='same_kind', where=True)", "item_id": "numpy.copyto", "summary": "Copies values from one array to another, broadcasting as necessary.\nRaises a TypeError if the casting rule is violated, and if\nwhere is provided, it selects which elements to copy.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndstndarrayThe array into which values are copied.\n\nsrcarray_likeThe array from which values are copied.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur when copying.\n\n\n\u2018no\u2019 means the data types should not be cast at all.\n\u2018equiv\u2019 means only byte-order changes are allowed.\n\u2018safe\u2019 means only casts which can preserve values are allowed.\n\u2018same_kind\u2019 means only safe casts or casts within a kind,\nlike float64 to float32, are allowed.\n\u2018unsafe\u2019 means any data conversions may be done.\n\n\n\nwherearray_like of bool, optionalA boolean array which is broadcasted to match the dimensions\nof dst, and selects elements to copy from src to dst\nwherever it contains the value True.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.copyto", "parameters": [{"name": "dst", "is_optional": false, "type": "others", "description": ""}, {"name": " src", "is_optional": false, "type": "others", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.cos", "summary": "Cosine element-wise.\n\nParameters\n\nxarray_likeInput array in radians.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.cos", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.corrcoef(x, y=None, rowvar=True, bias=&lt;no value&gt;, allow_masked=True, ddof=&lt;no value&gt;)", "item_id": "numpy.ma.corrcoef", "summary": "Return Pearson product-moment correlation coefficients.\nExcept for the handling of missing data this function does the same as\nnumpy.corrcoef", "description": "", "code-info": {"name": "numpy.ma.corrcoef", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " rowvar", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " bias", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " allow_masked", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " ddof", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.record.copy()", "item_id": "numpy.record.copy", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.copy", "parameters": []}},
{"code": "numpy.copysign(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.copysign", "summary": "Change the sign of x1 to that of x2, element-wise.\nIf x2 is a scalar, its sign will be copied to all elements of x1.\n\nParameters\n\nx1array_likeValues to change the sign of.\n\nx2array_likeThe sign of x2 is copied to x1", "description": "", "code-info": {"name": "numpy.copysign", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.copy(order='C')", "item_id": "numpy.recarray.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.recarray.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.copy(self)", "item_id": "numpy.polynomial.polynomial.Polynomial.copy", "summary": "Return a copy.\n\nReturns\n\nnew_seriesseriesCopy of self.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.copy(self)", "item_id": "numpy.polynomial.legendre.Legendre.copy", "summary": "Return a copy.\n\nReturns\n\nnew_seriesseriesCopy of self.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.copy(self)", "item_id": "numpy.polynomial.laguerre.Laguerre.copy", "summary": "Return a copy.\n\nReturns\n\nnew_seriesseriesCopy of self.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.copy(self)", "item_id": "numpy.polynomial.hermite_e.HermiteE.copy", "summary": "Return a copy.\n\nReturns\n\nnew_seriesseriesCopy of self.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.copy(self)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.copy", "summary": "Return a copy.\n\nReturns\n\nnew_seriesseriesCopy of self.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.nditer.copy()", "item_id": "numpy.nditer.copy", "summary": "Get a copy of the iterator in its current state.\nExamples\n&gt;&gt;&gt; x = np.arange(10)\n&gt;&gt;&gt; y = x + 1\n&gt;&gt;&gt; it = np.nditer([x, y])\n&gt;&gt;&gt; next(it)\n(array(0), array(1))\n&gt;&gt;&gt; it2 = it.copy()\n&gt;&gt;&gt; next(it2)\n(array(1), array(2))\n\n\n", "description": "", "code-info": {"name": "numpy.nditer.copy", "parameters": []}},
{"code": "numpy.polynomial.hermite.Hermite.copy(self)", "item_id": "numpy.polynomial.hermite.Hermite.copy", "summary": "Return a copy.\n\nReturns\n\nnew_seriesseriesCopy of self.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.copy(order='C')", "item_id": "numpy.ndarray.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.ndarray.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.memmap.copy(order='C')", "item_id": "numpy.memmap.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.memmap.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.matrix.copy(order='C')", "item_id": "numpy.matrix.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.matrix.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.ma.MaskType.copy()", "item_id": "numpy.ma.MaskType.copy", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.copy", "parameters": []}},
{"code": "numpy.ma.MaskedArray.copy(order='C')", "item_id": "numpy.ma.MaskedArray.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.lib.user_array.container.copy(self)", "item_id": "numpy.lib.user_array.container.copy", "summary": "", "description": "", "code-info": {"name": "numpy.lib.user_array.container.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.copy(order='C')", "item_id": "numpy.ma.masked_array.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.ma.masked_array.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.generic.copy()", "item_id": "numpy.generic.copy", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.copy", "parameters": []}},
{"code": "numpy.flatiter.copy()", "item_id": "numpy.flatiter.copy", "summary": "Get a copy of the iterator as a 1-D array.\nExamples\n&gt;&gt;&gt; x = np.arange(6).reshape(2, 3)\n&gt;&gt;&gt; x\narray([[0, 1, 2],\n       [3, 4, 5]])\n&gt;&gt;&gt; fl = x.flat\n&gt;&gt;&gt; fl.copy()\narray([0, 1, 2, 3, 4, 5])\n\n\n", "description": "", "code-info": {"name": "numpy.flatiter.copy", "parameters": []}},
{"code": "numpy.chararray.copy(order='C')", "item_id": "numpy.chararray.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.chararray.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.char.chararray.copy(order='C')", "item_id": "numpy.char.chararray.copy", "summary": "Return a copy of the array.\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.char.chararray.copy", "parameters": [{"name": "order", "is_optional": true, "type": "string", "default_value": "'C'", "description": ""}]}},
{"code": "numpy.copy(a, order='K')", "item_id": "numpy.copy", "summary": "Return an array copy of the given object.\n\nParameters\n\naarray_likeInput data.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.copy", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}]}},
{"code": "numpy.convolve(a, v, mode='full')", "item_id": "numpy.convolve", "summary": "Returns the discrete, linear convolution of two one-dimensional sequences.\nThe convolution operator is often seen in signal processing, where it\nmodels the effect of a linear time-invariant system on a signal [1]", "description": "", "code-info": {"name": "numpy.convolve", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " v", "is_optional": false, "type": "others", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'full'", "description": ""}]}},
{"code": "numpy.ma.copy(self, *args, **params)", "item_id": "numpy.ma.copy", "summary": "\nReturn a copy of the array.\n\n\nParameters\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout of the copy", "description": "", "code-info": {"name": "numpy.ma.copy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **params", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.convert(self, domain=None, kind=None, window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.convert", "summary": "Convert series to a different kind and/or domain and/or window.\n\nParameters\n\ndomainarray_like, optionalThe domain of the converted series", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.convert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.convert(self, domain=None, kind=None, window=None)", "item_id": "numpy.polynomial.legendre.Legendre.convert", "summary": "Convert series to a different kind and/or domain and/or window.\n\nParameters\n\ndomainarray_like, optionalThe domain of the converted series", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.convert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.convert(self, domain=None, kind=None, window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.convert", "summary": "Convert series to a different kind and/or domain and/or window.\n\nParameters\n\ndomainarray_like, optionalThe domain of the converted series", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.convert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.convert(self, domain=None, kind=None, window=None)", "item_id": "numpy.polynomial.hermite.Hermite.convert", "summary": "Convert series to a different kind and/or domain and/or window.\n\nParameters\n\ndomainarray_like, optionalThe domain of the converted series", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.convert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.convert(self, domain=None, kind=None, window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.convert", "summary": "Convert series to a different kind and/or domain and/or window.\n\nParameters\n\ndomainarray_like, optionalThe domain of the converted series", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.convert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.convert(self, domain=None, kind=None, window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.convert", "summary": "Convert series to a different kind and/or domain and/or window.\n\nParameters\n\ndomainarray_like, optionalThe domain of the converted series", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.convert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.lib.user_array.container(data, dtype=None, copy=True)", "item_id": "numpy.lib.user_array.container", "summary": "Standard container-class for easy multiple-inheritance.\nMethods\n\n\n\n\n\n\ncopy\n\n\ntostring\n\n\nbyteswap\n\n\nastype\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.lib.user_array.container", "parameters": [{"name": "data", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.record.conjugate()", "item_id": "numpy.record.conjugate", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.conjugate", "parameters": []}},
{"code": "numpy.recarray.conjugate()", "item_id": "numpy.recarray.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.conjugate", "parameters": []}},
{"code": "numpy.ndarray.conjugate()", "item_id": "numpy.ndarray.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.conjugate", "parameters": []}},
{"code": "numpy.memmap.conjugate()", "item_id": "numpy.memmap.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.conjugate", "parameters": []}},
{"code": "numpy.matrix.conjugate()", "item_id": "numpy.matrix.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.conjugate", "parameters": []}},
{"code": "numpy.ma.MaskType.conjugate()", "item_id": "numpy.ma.MaskType.conjugate", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.conjugate", "parameters": []}},
{"code": "numpy.ma.MaskedArray.conjugate()", "item_id": "numpy.ma.MaskedArray.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.conjugate", "parameters": []}},
{"code": "numpy.ma.masked_array.conjugate()", "item_id": "numpy.ma.masked_array.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.conjugate", "parameters": []}},
{"code": "numpy.generic.conjugate()", "item_id": "numpy.generic.conjugate", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.conjugate", "parameters": []}},
{"code": "numpy.chararray.conjugate()", "item_id": "numpy.chararray.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.conjugate", "parameters": []}},
{"code": "numpy.char.chararray.conjugate()", "item_id": "numpy.char.chararray.conjugate", "summary": "Return the complex conjugate, element-wise.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.conjugate", "parameters": []}},
{"code": "numpy.ma.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.ma.conjugate", "summary": "Return the complex conjugate, element-wise.\nThe complex conjugate of a complex number is obtained by changing the\nsign of its imaginary part.\n\nParameters\n\nxarray_likeInput value.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.ma.conjugate", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.conjugate", "summary": "Return the complex conjugate, element-wise.\nThe complex conjugate of a complex number is obtained by changing the\nsign of its imaginary part.\n\nParameters\n\nxarray_likeInput value.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.conjugate", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.conj()", "item_id": "numpy.record.conj", "summary": "", "description": "", "code-info": {"name": "numpy.record.conj", "parameters": []}},
{"code": "numpy.recarray.conj()", "item_id": "numpy.recarray.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.conj", "parameters": []}},
{"code": "numpy.ndarray.conj()", "item_id": "numpy.ndarray.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.conj", "parameters": []}},
{"code": "numpy.memmap.conj()", "item_id": "numpy.memmap.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.conj", "parameters": []}},
{"code": "numpy.matrix.conj()", "item_id": "numpy.matrix.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.conj", "parameters": []}},
{"code": "numpy.ma.MaskType.conj()", "item_id": "numpy.ma.MaskType.conj", "summary": "", "description": "", "code-info": {"name": "numpy.ma.MaskType.conj", "parameters": []}},
{"code": "numpy.ma.MaskedArray.conj()", "item_id": "numpy.ma.MaskedArray.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.conj", "parameters": []}},
{"code": "numpy.ma.masked_array.conj()", "item_id": "numpy.ma.masked_array.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.conj", "parameters": []}},
{"code": "numpy.generic.conj()", "item_id": "numpy.generic.conj", "summary": "", "description": "", "code-info": {"name": "numpy.generic.conj", "parameters": []}},
{"code": "numpy.chararray.conj()", "item_id": "numpy.chararray.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.conj", "parameters": []}},
{"code": "numpy.char.chararray.conj()", "item_id": "numpy.char.chararray.conj", "summary": "Complex-conjugate all elements.\nRefer to numpy.conjugate for full documentation.\n\nSee also\n\nnumpy.conjugateequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.conj", "parameters": []}},
{"code": "numpy.linalg.cond(x, p=None)", "item_id": "numpy.linalg.cond", "summary": "Compute the condition number of a matrix.\nThis function is capable of returning the condition number using\none of seven different norms, depending on the value of p (see\nParameters below).\n\nParameters\n\nx(\u2026, M, N) array_likeThe matrix whose condition number is sought.\n\np{None, 1, -1, 2, -2, inf, -inf, \u2018fro\u2019}, optionalOrder of the norm:\n\n\n\n\n\n\np\nnorm for matrices\n\n\n\nNone\n2-norm, computed directly using the SVD\n\n\u2018fro\u2019\nFrobenius norm\n\ninf\nmax(sum(abs(x), axis=1))\n\n-inf\nmin(sum(abs(x), axis=1))\n\n1\nmax(sum(abs(x), axis=0))\n\n-1\nmin(sum(abs(x), axis=0))\n\n2\n2-norm (largest sing", "description": "", "code-info": {"name": "numpy.linalg.cond", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.conj(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.conj", "summary": "Return the complex conjugate, element-wise.\nThe complex conjugate of a complex number is obtained by changing the\nsign of its imaginary part.\n\nParameters\n\nxarray_likeInput value.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.conj", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.concatenate(arrays, axis=0)", "item_id": "numpy.ma.concatenate", "summary": "Concatenate a sequence of arrays along the given axis.\n\nParameters\n\narrayssequence of array_likeThe arrays must have the same shape, except in the dimension\ncorresponding to axis (the first, by default).\n\naxisint, optionalThe axis along which the arrays will be joined", "description": "", "code-info": {"name": "numpy.ma.concatenate", "parameters": [{"name": "arrays", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.concatenate((a1, a2, ...)", "item_id": "numpy.concatenate", "summary": "Join a sequence of arrays along an existing axis.\n\nParameters\n\na1, a2, \u2026sequence of array_likeThe arrays must have the same shape, except in the dimension\ncorresponding to axis (the first, by default).\n\naxisint, optionalThe axis along which the arrays will be joined", "description": "", "code-info": {"name": "numpy.concatenate", "parameters": []}},
{"code": "numpy.ma.MaskedArray.compressed(self)", "item_id": "numpy.ma.MaskedArray.compressed", "summary": "Return all the non-masked data as a 1-D array.\n\nReturns\n\ndatandarrayA new ndarray holding the non-masked data is returned.\n\n\n\n\nNotes\nThe result is not a MaskedArray!\nExamples\n&gt;&gt;&gt; x = np.ma.array(np.arange(5), mask=[0]*2 + [1]*3)\n&gt;&gt;&gt; x.compressed()\narray([0, 1])\n&gt;&gt;&gt; type(x.compressed())\n&lt;class 'numpy.ndarray'&gt;\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.compressed", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.compressed(self)", "item_id": "numpy.ma.masked_array.compressed", "summary": "Return all the non-masked data as a 1-D array.\n\nReturns\n\ndatandarrayA new ndarray holding the non-masked data is returned.\n\n\n\n\nNotes\nThe result is not a MaskedArray!\nExamples\n&gt;&gt;&gt; x = np.ma.array(np.arange(5), mask=[0]*2 + [1]*3)\n&gt;&gt;&gt; x.compressed()\narray([0, 1])\n&gt;&gt;&gt; type(x.compressed())\n&lt;class 'numpy.ndarray'&gt;\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.compressed", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.compress_rows(a)", "item_id": "numpy.ma.compress_rows", "summary": "Suppress whole rows of a 2-D array that contain masked values.\nThis is equivalent to np.ma.compress_rowcols(a, 0), see\nextras.compress_rowcols for details.\n\nSee also\nextras.compress_rowcols\n\n", "description": "", "code-info": {"name": "numpy.ma.compress_rows", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.compressed(x)", "item_id": "numpy.ma.compressed", "summary": "Return all the non-masked data as a 1-D array.\nThis function is equivalent to calling the \u201ccompressed\u201d method of a\nMaskedArray, see MaskedArray.compressed for details.\n\nSee also\n\nMaskedArray.compressedEquivalent method.\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.compressed", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.compress(condition, axis=None, out=None)", "item_id": "numpy.recarray.compress", "summary": "Return selected slices of this array along given axis.\nRefer to numpy.compress for full documentation.\n\nSee also\n\nnumpy.compressequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.compress_rowcols(x, axis=None)", "item_id": "numpy.ma.compress_rowcols", "summary": "Suppress the rows and/or columns of a 2-D array that contain\nmasked values.\nThe suppression behavior is selected with the axis parameter.\n\nIf axis is None, both rows and columns are suppressed.\nIf axis is 0, only rows are suppressed.\nIf axis is 1 or -1, only columns are suppressed.\n\n\nParameters\n\nxarray_like, MaskedArrayThe array to operate on", "description": "", "code-info": {"name": "numpy.ma.compress_rowcols", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.compress_cols(a)", "item_id": "numpy.ma.compress_cols", "summary": "Suppress whole columns of a 2-D array that contain masked values.\nThis is equivalent to np.ma.compress_rowcols(a, 1), see\nextras.compress_rowcols for details.\n\nSee also\nextras.compress_rowcols\n\n", "description": "", "code-info": {"name": "numpy.ma.compress_cols", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.compress()", "item_id": "numpy.record.compress", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.compress", "parameters": []}},
{"code": "numpy.memmap.compress(condition, axis=None, out=None)", "item_id": "numpy.memmap.compress", "summary": "Return selected slices of this array along given axis.\nRefer to numpy.compress for full documentation.\n\nSee also\n\nnumpy.compressequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.compress(condition, axis=None, out=None)", "item_id": "numpy.matrix.compress", "summary": "Return selected slices of this array along given axis.\nRefer to numpy.compress for full documentation.\n\nSee also\n\nnumpy.compressequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.compress(condition, axis=None, out=None)", "item_id": "numpy.ndarray.compress", "summary": "Return selected slices of this array along given axis.\nRefer to numpy.compress for full documentation.\n\nSee also\n\nnumpy.compressequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.compress()", "item_id": "numpy.ma.MaskType.compress", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.compress", "parameters": []}},
{"code": "numpy.ma.MaskedArray.compress(self, condition, axis=None, out=None)", "item_id": "numpy.ma.MaskedArray.compress", "summary": "Return a where condition is True.\nIf condition is a MaskedArray, missing values are considered\nas False.\n\nParameters\n\nconditionvarBoolean 1-d array selecting which entries to return", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.compress", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.compress(self, condition, axis=None, out=None)", "item_id": "numpy.ma.masked_array.compress", "summary": "Return a where condition is True.\nIf condition is a MaskedArray, missing values are considered\nas False.\n\nParameters\n\nconditionvarBoolean 1-d array selecting which entries to return", "description": "", "code-info": {"name": "numpy.ma.masked_array.compress", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.compress(condition, axis=None, out=None)", "item_id": "numpy.chararray.compress", "summary": "Return selected slices of this array along given axis.\nRefer to numpy.compress for full documentation.\n\nSee also\n\nnumpy.compressequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.compress(condition, axis=None, out=None)", "item_id": "numpy.char.chararray.compress", "summary": "Return selected slices of this array along given axis.\nRefer to numpy.compress for full documentation.\n\nSee also\n\nnumpy.compressequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.compress()", "item_id": "numpy.generic.compress", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.compress", "parameters": []}},
{"code": "numpy.compress(condition, a, axis=None, out=None)", "item_id": "numpy.compress", "summary": "Return selected slices of an array along given axis.\nWhen working along a given axis, a slice along that axis is returned in\noutput for each index where condition evaluates to True", "description": "", "code-info": {"name": "numpy.compress", "parameters": [{"name": "condition", "is_optional": false, "type": "others", "description": ""}, {"name": " a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.compare_chararrays(a, b, cmp_op, rstrip)", "item_id": "numpy.char.compare_chararrays", "summary": "Performs element-wise comparison of two string arrays using the\ncomparison operator specified by cmp_op.\n\nParameters\n\na, barray_likeArrays to be compared.\n\ncmp_op{\u201c&lt;\u201d, \u201c&lt;=\u201d, \u201c==\u201d, \u201c&gt;=\u201d, \u201c&gt;\u201d, \u201c!=\u201d}Type of comparison.\n\nrstripBooleanIf True, the spaces at the end of Strings are removed before the comparison.\n\n\n\nReturns\n\noutndarrayThe output array of type Boolean with the same shape as a and b.\n\n\n\nRaises\n\nValueErrorIf cmp_op is not valid.\n\nTypeErrorIf at least one of a or b is a non-string array\n\n\n\n\nExamples\n&gt;&gt;&gt; a = np.array([\"a\", \"b\", \"cde\"])\n&gt;&gt;&gt; b = np.array([\"a\", \"a\", \"dec\"])\n&gt;&gt;&gt; np.compare_chararrays(a, b, \"&gt;\", True)\narray([False,  True, False])\n\n\n", "description": "", "code-info": {"name": "numpy.char.compare_chararrays", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " cmp_op", "is_optional": false, "type": "others", "description": ""}, {"name": " rstrip", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.common_type(*arrays)", "item_id": "numpy.common_type", "summary": "Return a scalar type which is common to the input arrays.\nThe return type will always be an inexact (i.e", "description": "", "code-info": {"name": "numpy.common_type", "parameters": [{"name": "*arrays", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.column_stack(tup)", "item_id": "numpy.column_stack", "summary": "Stack 1-D arrays as columns into a 2-D array.\nTake a sequence of 1-D arrays and stack them as columns\nto make a single 2-D array", "description": "", "code-info": {"name": "numpy.column_stack", "parameters": [{"name": "tup", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.column_stack(*args, **kwargs)", "item_id": "numpy.ma.column_stack", "summary": "\nStack 1-D arrays as columns into a 2-D array.\nTake a sequence of 1-D arrays and stack them as columns\nto make a single 2-D array", "description": "", "code-info": {"name": "numpy.ma.column_stack", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.common_fill_value(a, b)", "item_id": "numpy.ma.common_fill_value", "summary": "Return the common filling value of two masked arrays, if any.\nIf a.fill_value == b.fill_value, return the fill value,\notherwise return None.\n\nParameters\n\na, bMaskedArrayThe masked arrays for which to compare fill values.\n\n\n\nReturns\n\nfill_valuescalar or NoneThe common fill value, or None.\n\n\n\n\nExamples\n&gt;&gt;&gt; x = np.ma.array([0, 1.], fill_value=3)\n&gt;&gt;&gt; y = np.ma.array([0, 1.], fill_value=3)\n&gt;&gt;&gt; np.ma.common_fill_value(x, y)\n3.0\n\n\n", "description": "", "code-info": {"name": "numpy.ma.common_fill_value", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.clump_unmasked(a)", "item_id": "numpy.ma.clump_unmasked", "summary": "Return list of slices corresponding to the unmasked clumps of a 1-D array.\n(A \u201cclump\u201d is defined as a contiguous region of the array).\n\nParameters\n\nandarrayA one-dimensional masked array.\n\n\n\nReturns\n\nsliceslist of sliceThe list of slices, one for each continuous region of unmasked\nelements in a.\n\n\n\n\n\nSee also\nflatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges, notmasked_contiguous, clump_masked\n\nNotes\n\nNew in version 1.4.0.\n\nExamples\n&gt;&gt;&gt; a = np.ma.masked_array(np.arange(10))\n&gt;&gt;&gt; a[[0, 1, 2, 6, 8, 9]] = np.ma.masked\n&gt;&gt;&gt; np.ma.clump_unmasked(a)\n[slice(3, 6, None), slice(7, 8, None)]\n\n\n", "description": "", "code-info": {"name": "numpy.ma.clump_unmasked", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.clip()", "item_id": "numpy.record.clip", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.clip", "parameters": []}},
{"code": "numpy.ndarray.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.ndarray.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.clump_masked(a)", "item_id": "numpy.ma.clump_masked", "summary": "Returns a list of slices corresponding to the masked clumps of a 1-D array.\n(A \u201cclump\u201d is defined as a contiguous region of the array).\n\nParameters\n\nandarrayA one-dimensional masked array.\n\n\n\nReturns\n\nsliceslist of sliceThe list of slices, one for each continuous region of masked elements\nin a.\n\n\n\n\n\nSee also\nflatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges, notmasked_contiguous, clump_unmasked\n\nNotes\n\nNew in version 1.4.0.\n\nExamples\n&gt;&gt;&gt; a = np.ma.masked_array(np.arange(10))\n&gt;&gt;&gt; a[[0, 1, 2, 6, 8, 9]] = np.ma.masked\n&gt;&gt;&gt; np.ma.clump_masked(a)\n[slice(0, 3, None), slice(6, 7, None), slice(8, 10, None)]\n\n\n", "description": "", "code-info": {"name": "numpy.ma.clump_masked", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.recarray.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.memmap.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.memmap.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.matrix.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskType.clip()", "item_id": "numpy.ma.MaskType.clip", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.clip", "parameters": []}},
{"code": "numpy.ma.MaskedArray.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.ma.MaskedArray.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.ma.masked_array.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.clip()", "item_id": "numpy.generic.clip", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.clip", "parameters": []}},
{"code": "numpy.nditer.close()", "item_id": "numpy.nditer.close", "summary": "Resolve all writeback semantics in writeable operands.\n\nNew in version 1.15.0.\n\n\nSee also\nModifying Array Values\n\n", "description": "", "code-info": {"name": "numpy.nditer.close", "parameters": []}},
{"code": "numpy.chararray.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.chararray.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray.clip(min=None, max=None, out=None, **kwargs)", "item_id": "numpy.char.chararray.clip", "summary": "Return an array whose values are limited to [min, max].\nOne of max or min must be given.\nRefer to numpy.clip for full documentation.\n\nSee also\n\nnumpy.clipequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.clip", "parameters": [{"name": "min", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " max", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.clip(a, a_min, a_max, out=None, **kwargs)", "item_id": "numpy.ma.clip", "summary": "Clip (limit) the values in an array.\nGiven an interval, values outside the interval are clipped to\nthe interval edges", "description": "", "code-info": {"name": "numpy.ma.clip", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " a_min", "is_optional": false, "type": "others", "description": ""}, {"name": " a_max", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.clip(a, a_min, a_max, out=None, **kwargs)", "item_id": "numpy.clip", "summary": "Clip (limit) the values in an array.\nGiven an interval, values outside the interval are clipped to\nthe interval edges", "description": "", "code-info": {"name": "numpy.clip", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " a_min", "is_optional": false, "type": "others", "description": ""}, {"name": " a_max", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.choose(choices, out=None, mode='raise')", "item_id": "numpy.matrix.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.record.choose()", "item_id": "numpy.record.choose", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.choose", "parameters": []}},
{"code": "numpy.ma.MaskType.choose()", "item_id": "numpy.ma.MaskType.choose", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.choose", "parameters": []}},
{"code": "numpy.ndarray.choose(choices, out=None, mode='raise')", "item_id": "numpy.ndarray.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.choose(choices, out=None, mode='raise')", "item_id": "numpy.ma.MaskedArray.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.memmap.choose(choices, out=None, mode='raise')", "item_id": "numpy.memmap.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.recarray.choose(choices, out=None, mode='raise')", "item_id": "numpy.recarray.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.chararray.choose(choices, out=None, mode='raise')", "item_id": "numpy.chararray.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.linalg.cholesky(a)", "item_id": "numpy.linalg.cholesky", "summary": "Cholesky decomposition.\nReturn the Cholesky decomposition, L * L.H, of the square matrix a,\nwhere L is lower-triangular and .H is the conjugate transpose operator\n(which is the ordinary transpose if a is real-valued)", "description": "", "code-info": {"name": "numpy.linalg.cholesky", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.masked_array.choose(choices, out=None, mode='raise')", "item_id": "numpy.ma.masked_array.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.generic.choose()", "item_id": "numpy.generic.choose", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.choose", "parameters": []}},
{"code": "numpy.char.chararray.choose(choices, out=None, mode='raise')", "item_id": "numpy.char.chararray.choose", "summary": "Use an index array to construct a new array from a set of choices.\nRefer to numpy.choose for full documentation.\n\nSee also\n\nnumpy.chooseequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.choose", "parameters": [{"name": "choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.ma.choose(indices, choices, out=None, mode='raise')", "item_id": "numpy.ma.choose", "summary": "Use an index array to construct a new array from a set of choices.\nGiven an array of integers and a set of n choice arrays, this method\nwill create a new array that merges each of the choice arrays", "description": "", "code-info": {"name": "numpy.ma.choose", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": " choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.choose(a, choices, out=None, mode='raise')", "item_id": "numpy.choose", "summary": "Construct an array from an index array and a set of arrays to choose from.\nFirst of all, if confused or uncertain, definitely look at the Examples -\nin its full generality, this function is less simple than it might\nseem from the following code description (below ndi =\nnumpy.lib.index_tricks):\nnp.choose(a,c) == np.array([c[a[I]][I] for I in ndi.ndindex(a.shape)]).\nBut this omits some subtleties", "description": "", "code-info": {"name": "numpy.choose", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " choices", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mode", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"code": "numpy.random.RandomState.choice(a, size=None, replace=True, p=None)", "item_id": "numpy.random.RandomState.choice", "summary": "Generates a random sample from a given 1-D array\n\n\nNew in version 1.7.0.\n\n\n\nNote\nNew code should use the choice method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\na1-D array-like or intIf an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated as if a were np.arange(a)\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.RandomState.choice", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " replace", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " p", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.choice()", "item_id": "numpy.random.Generator.choice", "summary": "choice(a, size=None, replace=True, p=None, axis=0):\nGenerates a random sample from a given 1-D array\n\nParameters\n\na1-D array-like or intIf an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated as if a were np.arange(a)\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.Generator.choice", "parameters": []}},
{"code": "numpy.random.choice(a, size=None, replace=True, p=None)", "item_id": "numpy.random.choice", "summary": "Generates a random sample from a given 1-D array\n\n\nNew in version 1.7.0.\n\n\n\nNote\nNew code should use the choice method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\na1-D array-like or intIf an ndarray, a random sample is generated from its elements.\nIf an int, the random sample is generated as if a were np.arange(a)\n\nsizeint or tuple of ints, optionalOutput shape", "description": "", "code-info": {"name": "numpy.random.choice", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " replace", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " p", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.chisquare(df, size=None)", "item_id": "numpy.random.RandomState.chisquare", "summary": "Draw samples from a chi-square distribution.\nWhen df independent random variables, each with standard normal\ndistributions (mean 0, variance 1), are squared and summed, the\nresulting distribution is chi-square (see Notes)", "description": "", "code-info": {"name": "numpy.random.RandomState.chisquare", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebzero([0])", "item_id": "numpy.polynomial.chebyshev.chebzero", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebzero", "parameters": [{"name": "[0]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev(coef, domain=None, window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev", "summary": "A Chebyshev series class.\nThe Chebyshev class provides the standard Python numerical methods\n\u2018+\u2019, \u2018-\u2018, \u2018*\u2019, \u2018//\u2019, \u2018%\u2019, \u2018divmod\u2019, \u2018**\u2019, and \u2018()\u2019 as well as the\nmethods listed below.\n\nParameters\n\ncoefarray_likeChebyshev coefficients in order of increasing degree, i.e.,\n(1, 2, 3) gives 1*T_0(x) + 2*T_1(x) + 3*T_2(x).\n\ndomain(2,) array_like, optionalDomain to use", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev", "parameters": [{"name": "coef", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.chisquare(df, size=None)", "item_id": "numpy.random.Generator.chisquare", "summary": "Draw samples from a chi-square distribution.\nWhen df independent random variables, each with standard normal\ndistributions (mean 0, variance 1), are squared and summed, the\nresulting distribution is chi-square (see Notes)", "description": "", "code-info": {"name": "numpy.random.Generator.chisquare", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebx([0, 1])", "item_id": "numpy.polynomial.chebyshev.chebx", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebx", "parameters": [{"name": "[0", "is_optional": false, "type": "others", "description": ""}, {"name": " 1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.chisquare(df, size=None)", "item_id": "numpy.random.chisquare", "summary": "Draw samples from a chi-square distribution.\nWhen df independent random variables, each with standard normal\ndistributions (mean 0, variance 1), are squared and summed, the\nresulting distribution is chi-square (see Notes)", "description": "", "code-info": {"name": "numpy.random.chisquare", "parameters": [{"name": "df", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebweight(x)", "item_id": "numpy.polynomial.chebyshev.chebweight", "summary": "The weight function of the Chebyshev polynomials.\nThe weight function is  and the interval of\nintegration is ", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebweight", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebvander3d(x, y, z, deg)", "item_id": "numpy.polynomial.chebyshev.chebvander3d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y, z)", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebvander3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebvander2d(x, y, deg)", "item_id": "numpy.polynomial.chebyshev.chebvander2d", "summary": "Pseudo-Vandermonde matrix of given degrees.\nReturns the pseudo-Vandermonde matrix of degrees deg and sample\npoints (x, y)", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebvander2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebvander(x, deg)", "item_id": "numpy.polynomial.chebyshev.chebvander", "summary": "Pseudo-Vandermonde matrix of given degree.\nReturns the pseudo-Vandermonde matrix of degree deg and sample points\nx", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebvander", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebval3d(x, y, z, c)", "item_id": "numpy.polynomial.chebyshev.chebval3d", "summary": "Evaluate a 3-D Chebyshev series at points (x, y, z).\nThis function returns the values:\n\n\nThe parameters x, y, and z are converted to arrays only if\nthey are tuples or a lists, otherwise they are treated as a scalars and\nthey must have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebval3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebval2d(x, y, c)", "item_id": "numpy.polynomial.chebyshev.chebval2d", "summary": "Evaluate a 2-D Chebyshev series at points (x, y).\nThis function returns the values:\n\n\nThe parameters x and y are converted to arrays only if they are\ntuples or a lists, otherwise they are treated as a scalars and they\nmust have the same shape after conversion", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebval2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebval(x, c, tensor=True)", "item_id": "numpy.polynomial.chebyshev.chebval", "summary": "Evaluate a Chebyshev series at points x.\nIf c is of length n + 1, this function returns the value:\n\n\nThe parameter x is converted to an array only if it is a tuple or a\nlist, otherwise it is treated as a scalar", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebval", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}, {"name": " tensor", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebtrim(c, tol=0)", "item_id": "numpy.polynomial.chebyshev.chebtrim", "summary": "Remove \u201csmall\u201d \u201ctrailing\u201d coefficients from a polynomial.\n\u201cSmall\u201d means \u201csmall in absolute value\u201d and is controlled by the\nparameter tol; \u201ctrailing\u201d means highest order coefficient(s), e.g., in\n[0, 1, 1, 0, 0] (which represents 0 + x + x**2 + 0*x**3 + 0*x**4)\nboth the 3-rd and 4-th order coefficients would be \u201ctrimmed.\u201d\n\nParameters\n\ncarray_like1-d array of coefficients, ordered from lowest order to highest.\n\ntolnumber, optionalTrailing (i.e., highest order) elements with absolute value less\nthan or equal to tol (default value is zero) are removed.\n\n\n\nReturns\n\ntrimmedndarray1-d array with trailing zeros removed", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebtrim", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " tol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebsub(c1, c2)", "item_id": "numpy.polynomial.chebyshev.chebsub", "summary": "Subtract one Chebyshev series from another.\nReturns the difference of two Chebyshev series c1 - c2", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebsub", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebroots(c)", "item_id": "numpy.polynomial.chebyshev.chebroots", "summary": "Compute the roots of a Chebyshev series.\nReturn the roots (a.k.a", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebroots", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebone([1])", "item_id": "numpy.polynomial.chebyshev.chebone", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebone", "parameters": [{"name": "[1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebmulx(c)", "item_id": "numpy.polynomial.chebyshev.chebmulx", "summary": "Multiply a Chebyshev series by x.\nMultiply the polynomial c by x, where x is the independent\nvariable.\n\nParameters\n\ncarray_like1-D array of Chebyshev series coefficients ordered from low to\nhigh.\n\n\n\nReturns\n\noutndarrayArray representing the result of the multiplication.\n\n\n\n\nNotes\n\nNew in version 1.5.0.\n\nExamples\n&gt;&gt;&gt; from numpy.polynomial import chebyshev as C\n&gt;&gt;&gt; C.chebmulx([1,2,3])\narray([1", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebmulx", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebpow(c, pow, maxpower=16)", "item_id": "numpy.polynomial.chebyshev.chebpow", "summary": "Raise a Chebyshev series to a power.\nReturns the Chebyshev series c raised to the power pow", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebpow", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " pow", "is_optional": false, "type": "others", "description": ""}, {"name": " maxpower", "is_optional": true, "type": "int", "default_value": "16", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebmul(c1, c2)", "item_id": "numpy.polynomial.chebyshev.chebmul", "summary": "Multiply one Chebyshev series by another.\nReturns the product of two Chebyshev series c1 * c2", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebmul", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0)", "item_id": "numpy.polynomial.chebyshev.chebint", "summary": "Integrate a Chebyshev series.\nReturns the Chebyshev series coefficients c integrated m times from\nlbnd along axis", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebint", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " k", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " lbnd", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebline(off, scl)", "item_id": "numpy.polynomial.chebyshev.chebline", "summary": "Chebyshev series whose graph is a straight line.\n\nParameters\n\noff, sclscalarsThe specified line is given by off + scl*x.\n\n\n\nReturns\n\nyndarrayThis module\u2019s representation of the Chebyshev series for\noff + scl*x.\n\n\n\n\n\nSee also\npolyline\n\nExamples\n&gt;&gt;&gt; import numpy.polynomial.chebyshev as C\n&gt;&gt;&gt; C.chebline(3,2)\narray([3, 2])\n&gt;&gt;&gt; C.chebval(-3, C.chebline(3,2)) # should be -3\n-3.0\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebline", "parameters": [{"name": "off", "is_optional": false, "type": "others", "description": ""}, {"name": " scl", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebgrid3d(x, y, z, c)", "item_id": "numpy.polynomial.chebyshev.chebgrid3d", "summary": "Evaluate a 3-D Chebyshev series on the Cartesian product of x, y, and z.\nThis function returns the values:\n\n\nwhere the points (a, b, c) consist of all triples formed by taking\na from x, b from y, and c from z", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebgrid3d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " z", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebgrid2d(x, y, c)", "item_id": "numpy.polynomial.chebyshev.chebgrid2d", "summary": "Evaluate a 2-D Chebyshev series on the Cartesian product of x and y.\nThis function returns the values:\n\n\nwhere the points (a, b) consist of all pairs formed by taking\na from x and b from y", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebgrid2d", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebfromroots(roots)", "item_id": "numpy.polynomial.chebyshev.chebfromroots", "summary": "Generate a Chebyshev series with given roots.\nThe function returns the coefficients of the polynomial\n\n\nin Chebyshev form, where the r_n are the roots specified in roots.\nIf a zero has multiplicity n, then it must appear in roots n times.\nFor instance, if 2 is a root of multiplicity three and 3 is a root of\nmultiplicity 2, then roots looks something like [2, 2, 2, 3, 3]", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebfromroots", "parameters": [{"name": "roots", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebfit(x, y, deg, rcond=None, full=False, w=None)", "item_id": "numpy.polynomial.chebyshev.chebfit", "summary": "Least squares fit of Chebyshev series to data.\nReturn the coefficients of a Chebyshev series of degree deg that is the\nleast squares fit to the data values y given at points x", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebfit", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": false, "type": "others", "description": ""}, {"name": " rcond", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " full", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " w", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebdomain([-1,  1])", "item_id": "numpy.polynomial.chebyshev.chebdomain", "summary": "", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebdomain", "parameters": [{"name": "[-1", "is_optional": false, "type": "others", "description": ""}, {"name": "  1]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebcompanion(c)", "item_id": "numpy.polynomial.chebyshev.chebcompanion", "summary": "Return the scaled companion matrix of c.\nThe basis polynomials are scaled so that the companion matrix is\nsymmetric when c is a Chebyshev basis polynomial", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebcompanion", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebdiv(c1, c2)", "item_id": "numpy.polynomial.chebyshev.chebdiv", "summary": "Divide one Chebyshev series by another.\nReturns the quotient-with-remainder of two Chebyshev series\nc1 / c2", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebdiv", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebder(c, m=1, scl=1, axis=0)", "item_id": "numpy.polynomial.chebyshev.chebder", "summary": "Differentiate a Chebyshev series.\nReturns the Chebyshev series coefficients c differentiated m times\nalong axis", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebder", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}, {"name": " m", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " scl", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebgauss(deg)", "item_id": "numpy.polynomial.chebyshev.chebgauss", "summary": "Gauss-Chebyshev quadrature.\nComputes the sample points and weights for Gauss-Chebyshev quadrature.\nThese sample points and weights will correctly integrate polynomials of\ndegree  or less over the interval  with\nthe weight function .\n\nParameters\n\ndegintNumber of sample points and weights", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebgauss", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.chebadd(c1, c2)", "item_id": "numpy.polynomial.chebyshev.chebadd", "summary": "Add one Chebyshev series to another.\nReturns the sum of two Chebyshev series c1 + c2", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.chebadd", "parameters": [{"name": "c1", "is_optional": false, "type": "others", "description": ""}, {"name": " c2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.cheb2poly(c)", "item_id": "numpy.polynomial.chebyshev.cheb2poly", "summary": "Convert a Chebyshev series to a polynomial.\nConvert an array representing the coefficients of a Chebyshev series,\nordered from lowest degree to highest, to an array of the coefficients\nof the equivalent polynomial (relative to the \u201cstandard\u201d basis) ordered\nfrom lowest to highest degree.\n\nParameters\n\ncarray_like1-D array containing the Chebyshev series coefficients, ordered\nfrom lowest order term to highest.\n\n\n\nReturns\n\npolndarray1-D array containing the coefficients of the equivalent polynomial\n(relative to the \u201cstandard\u201d basis) ordered from lowest order term\nto highest.\n\n\n\n\n\nSee also\npoly2cheb\n\nNotes\nThe easy way to do conversions between polynomial basis sets\nis to use the convert method of a class instance.\nExamples\n&gt;&gt;&gt; from numpy import polynomial as P\n&gt;&gt;&gt; c = P.Chebyshev(range(4))\n&gt;&gt;&gt; c\nChebyshev([0., 1., 2., 3.], domain=[-1,  1], window=[-1,  1])\n&gt;&gt;&gt; p = c.convert(kind=P.Polynomial)\n&gt;&gt;&gt; p\nPolynomial([-2., -8.,  4., 12.], domain=[-1.,  1.], window=[-1.,  1.])\n&gt;&gt;&gt; P.chebyshev.cheb2poly(range(4))\narray([-2.,  -8.,   4.,  12.])\n\n\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.cheb2poly", "parameters": [{"name": "c", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)", "item_id": "numpy.char.chararray", "summary": "Provides a convenient view on arrays of string and unicode values.\n\nNote\nThe chararray class exists for backwards compatibility with\nNumarray, it is not recommended for new development", "description": "", "code-info": {"name": "numpy.char.chararray", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " itemsize", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " unicode", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " buffer", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " strides", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)", "item_id": "numpy.chararray", "summary": "Provides a convenient view on arrays of string and unicode values.\n\nNote\nThe chararray class exists for backwards compatibility with\nNumarray, it is not recommended for new development", "description": "", "code-info": {"name": "numpy.chararray", "parameters": [{"name": "shape", "is_optional": false, "type": "others", "description": ""}, {"name": " itemsize", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " unicode", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " buffer", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " strides", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.center(self, width, fillchar=' ')", "item_id": "numpy.char.chararray.center", "summary": "Return a copy of self with its elements centered in a\nstring of length width.\n\nSee also\ncenter\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.center", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.char.center(a, width, fillchar=' ')", "item_id": "numpy.char.center", "summary": "Return a copy of a with its elements centered in a string of\nlength width.\nCalls str.center element-wise.\n\nParameters\n\naarray_like of str or unicode\nwidthintThe length of the resulting strings\n\nfillcharstr or unicode, optionalThe padding character to use (default is space).\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input\ntypes\n\n\n\n\n\nSee also\nstr.center\n\n", "description": "", "code-info": {"name": "numpy.char.center", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.chararray.center(self, width, fillchar=' ')", "item_id": "numpy.chararray.center", "summary": "Return a copy of self with its elements centered in a\nstring of length width.\n\nSee also\ncenter\n\n", "description": "", "code-info": {"name": "numpy.chararray.center", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": false, "type": "others", "description": ""}, {"name": " fillchar", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.cast(series, domain=None, window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.cast", "summary": "Convert series to series of this class.\nThe series is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n\nNew in version 1.7.0.\n\n\nParameters\n\nseriesseriesThe series instance to be converted.\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.cast", "parameters": [{"name": "series", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.ceil", "summary": "Return the ceiling of the input, element-wise.\nThe ceil of the scalar x is the smallest integer i, such that\ni &gt;= x", "description": "", "code-info": {"name": "numpy.ceil", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.cbrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.cbrt", "summary": "Return the cube-root of an array, element-wise.\n\nNew in version 1.10.0.\n\n\nParameters\n\nxarray_likeThe values whose cube-roots are required.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.cbrt", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.cast(series, domain=None, window=None)", "item_id": "numpy.polynomial.legendre.Legendre.cast", "summary": "Convert series to series of this class.\nThe series is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n\nNew in version 1.7.0.\n\n\nParameters\n\nseriesseriesThe series instance to be converted.\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.cast", "parameters": [{"name": "series", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.cast(series, domain=None, window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.cast", "summary": "Convert series to series of this class.\nThe series is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n\nNew in version 1.7.0.\n\n\nParameters\n\nseriesseriesThe series instance to be converted.\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.cast", "parameters": [{"name": "series", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.cast(series, domain=None, window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.cast", "summary": "Convert series to series of this class.\nThe series is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n\nNew in version 1.7.0.\n\n\nParameters\n\nseriesseriesThe series instance to be converted.\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.cast", "parameters": [{"name": "series", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.cast(series, domain=None, window=None)", "item_id": "numpy.polynomial.hermite.Hermite.cast", "summary": "Convert series to series of this class.\nThe series is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n\nNew in version 1.7.0.\n\n\nParameters\n\nseriesseriesThe series instance to be converted.\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.cast", "parameters": [{"name": "series", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.cast(series, domain=None, window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.cast", "summary": "Convert series to series of this class.\nThe series is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n\nNew in version 1.7.0.\n\n\nParameters\n\nseriesseriesThe series instance to be converted.\n\ndomain{None, array_like}, optionalIf given, the array must be of the form [beg, end], where\nbeg and end are the endpoints of the domain", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.cast", "parameters": [{"name": "series", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.capitalize(self)", "item_id": "numpy.chararray.capitalize", "summary": "Return a copy of self with only the first character of each element\ncapitalized.\n\nSee also\nchar.capitalize\n\n", "description": "", "code-info": {"name": "numpy.chararray.capitalize", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.capitalize(a)", "item_id": "numpy.char.capitalize", "summary": "Return a copy of a with only the first character of each element\ncapitalized.\nCalls str.capitalize element-wise.\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n\naarray_like of str or unicodeInput array of strings to capitalize.\n\n\n\nReturns\n\noutndarrayOutput array of str or unicode, depending on input\ntypes\n\n\n\n\n\nSee also\nstr.capitalize\n\nExamples\n&gt;&gt;&gt; c = np.array(['a1b2','1b2a','b2a1','2a1b'],'S4'); c\narray(['a1b2', '1b2a', 'b2a1', '2a1b'],\n    dtype='|S4')\n&gt;&gt;&gt; np.char.capitalize(c)\narray(['A1b2', '1b2a', 'B2a1', '2a1b'],\n    dtype='|S4')\n\n\n", "description": "", "code-info": {"name": "numpy.char.capitalize", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.can_cast(from_, to, casting='safe')", "item_id": "numpy.can_cast", "summary": "Returns True if cast between data types can occur according to the\ncasting rule", "description": "", "code-info": {"name": "numpy.can_cast", "parameters": [{"name": "from_", "is_optional": false, "type": "others", "description": ""}, {"name": " to", "is_optional": false, "type": "others", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'safe'", "description": ""}]}},
{"code": "numpy.record.byteswap()", "item_id": "numpy.record.byteswap", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class so as to\nprovide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.byteswap", "parameters": []}},
{"code": "numpy.recarray.byteswap(inplace=False)", "item_id": "numpy.recarray.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.recarray.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.byteswap(inplace=False)", "item_id": "numpy.ndarray.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.ndarray.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.memmap.byteswap(inplace=False)", "item_id": "numpy.memmap.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.memmap.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.matrix.byteswap(inplace=False)", "item_id": "numpy.matrix.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.matrix.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.MaskType.byteswap()", "item_id": "numpy.ma.MaskType.byteswap", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class so as to\nprovide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.byteswap", "parameters": []}},
{"code": "numpy.ma.masked_array.byteswap(inplace=False)", "item_id": "numpy.ma.masked_array.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.ma.masked_array.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.lib.user_array.container.byteswap(self)", "item_id": "numpy.lib.user_array.container.byteswap", "summary": "", "description": "", "code-info": {"name": "numpy.lib.user_array.container.byteswap", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.byteswap()", "item_id": "numpy.generic.byteswap", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class so as to\nprovide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.byteswap", "parameters": []}},
{"code": "numpy.chararray.byteswap(inplace=False)", "item_id": "numpy.chararray.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.chararray.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.byteswap(inplace=False)", "item_id": "numpy.ma.MaskedArray.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.byteswap(inplace=False)", "item_id": "numpy.char.chararray.byteswap", "summary": "Swap the bytes of the array elements\nToggle between low-endian and big-endian data representation by\nreturning a byteswapped array, optionally swapped in-place.\nArrays of byte-strings are not swapped", "description": "", "code-info": {"name": "numpy.char.chararray.byteswap", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.random.RandomState.bytes(length)", "item_id": "numpy.random.RandomState.bytes", "summary": "Return random bytes.\n\nNote\nNew code should use the bytes method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nlengthintNumber of random bytes.\n\n\n\nReturns\n\noutstrString of length length.\n\n\n\n\n\nSee also\n\nGenerator.byteswhich should be used for new code.\n\n\n\nExamples\n&gt;&gt;&gt; np.random.bytes(10)\n' eh\\x85\\x022SZ\\xbf\\xa4' #random\n\n\n", "description": "", "code-info": {"name": "numpy.random.RandomState.bytes", "parameters": [{"name": "length", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Generator.bytes(length)", "item_id": "numpy.random.Generator.bytes", "summary": "Return random bytes.\n\nParameters\n\nlengthintNumber of random bytes.\n\n\n\nReturns\n\noutstrString of length length.\n\n\n\n\nExamples\n&gt;&gt;&gt; np.random.default_rng().bytes(10)\n' eh\\x85\\x022SZ\\xbf\\xa4' #random\n\n\n", "description": "", "code-info": {"name": "numpy.random.Generator.bytes", "parameters": [{"name": "length", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.bytes(length)", "item_id": "numpy.random.bytes", "summary": "Return random bytes.\n\nNote\nNew code should use the bytes method of a default_rng()\ninstance instead; see random-quick-start.\n\n\nParameters\n\nlengthintNumber of random bytes.\n\n\n\nReturns\n\noutstrString of length length.\n\n\n\n\n\nSee also\n\nGenerator.byteswhich should be used for new code.\n\n\n\nExamples\n&gt;&gt;&gt; np.random.bytes(10)\n' eh\\x85\\x022SZ\\xbf\\xa4' #random\n\n\n", "description": "", "code-info": {"name": "numpy.random.bytes", "parameters": [{"name": "length", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.byte_bounds(a)", "item_id": "numpy.byte_bounds", "summary": "Returns pointers to the end-points of an array.\n\nParameters\n\nandarrayInput array", "description": "", "code-info": {"name": "numpy.byte_bounds", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.busdaycalendar(weekmask='1111100', holidays=None)", "item_id": "numpy.busdaycalendar", "summary": "A business day calendar object that efficiently stores information\ndefining valid days for the busday family of functions.\nThe default valid days are Monday through Friday (\u201cbusiness days\u201d).\nA busdaycalendar object can be specified with any set of weekly\nvalid days, plus an optional \u201choliday\u201d dates that always will be invalid.\nOnce a busdaycalendar object is created, the weekmask and holidays\ncannot be modified.\n\nNew in version 1.7.0.\n\n\nParameters\n\nweekmaskstr or array_like of bool, optionalA seven-element array indicating which of Monday through Sunday are\nvalid days", "description": "", "code-info": {"name": "numpy.busdaycalendar", "parameters": [{"name": "weekmask", "is_optional": true, "type": "string", "default_value": "'1111100'", "description": ""}, {"name": " holidays", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None)", "item_id": "numpy.busday_offset", "summary": "First adjusts the date to fall on a valid day according to\nthe roll rule, then applies offsets to the given dates\ncounted in valid days.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndatesarray_like of datetime64[D]The array of dates to process.\n\noffsetsarray_like of intThe array of offsets, which is broadcast with dates.\n\nroll{\u2018raise\u2019, \u2018nat\u2019, \u2018forward\u2019, \u2018following\u2019, \u2018backward\u2019, \u2018preceding\u2019, \u2018modifiedfollowing\u2019, \u2018modifiedpreceding\u2019}, optionalHow to treat dates that do not fall on a valid day", "description": "", "code-info": {"name": "numpy.busday_offset", "parameters": [{"name": "dates", "is_optional": false, "type": "others", "description": ""}, {"name": " offsets", "is_optional": false, "type": "others", "description": ""}, {"name": " roll", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}, {"name": " weekmask", "is_optional": true, "type": "string", "default_value": "'1111100'", "description": ""}, {"name": " holidays", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " busdaycal", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None)", "item_id": "numpy.busday_count", "summary": "Counts the number of valid days between begindates and\nenddates, not including the day of enddates.\nIf enddates specifies a date value that is earlier than the\ncorresponding begindates date value, the count will be negative.\n\nNew in version 1.7.0.\n\n\nParameters\n\nbegindatesarray_like of datetime64[D]The array of the first dates for counting.\n\nenddatesarray_like of datetime64[D]The array of the end dates for counting, which are excluded\nfrom the count themselves.\n\nweekmaskstr or array_like of bool, optionalA seven-element array indicating which of Monday through Sunday are\nvalid days", "description": "", "code-info": {"name": "numpy.busday_count", "parameters": [{"name": "begindates", "is_optional": false, "type": "others", "description": ""}, {"name": " enddates", "is_optional": false, "type": "others", "description": ""}, {"name": " weekmask", "is_optional": true, "type": "string", "default_value": "'1111100'", "description": ""}, {"name": " holidays", "is_optional": true, "type": "others", "default_value": "[]", "description": ""}, {"name": " busdaycal", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.broadcast_to(array, shape, subok=False)", "item_id": "numpy.broadcast_to", "summary": "Broadcast an array to a new shape.\n\nParameters\n\narrayarray_likeThe array to broadcast.\n\nshapetupleThe shape of the desired array.\n\nsubokbool, optionalIf True, then sub-classes will be passed-through, otherwise\nthe returned array will be forced to be a base-class array (default).\n\n\n\nReturns\n\nbroadcastarrayA readonly view on the original array with the given shape", "description": "", "code-info": {"name": "numpy.broadcast_to", "parameters": [{"name": "array", "is_optional": false, "type": "others", "description": ""}, {"name": " shape", "is_optional": false, "type": "others", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.broadcast_arrays(*args, **kwargs)", "item_id": "numpy.broadcast_arrays", "summary": "Broadcast any number of arrays against each other.\n\nParameters\n\n`*args`array_likesThe arrays to broadcast.\n\nsubokbool, optionalIf True, then sub-classes will be passed-through, otherwise\nthe returned arrays will be forced to be a base-class array (default).\n\n\n\nReturns\n\nbroadcastedlist of arraysThese arrays are views on the original arrays", "description": "", "code-info": {"name": "numpy.broadcast_arrays", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "ndpointer(dtype=None, ndim=None, shape=None, flags=None)", "item_id": "ndpointer", "summary": "Keyword arguments with the value None are not checked.\nSpecifying a keyword enforces checking of that aspect of the\nndarray on conversion to a ctypes-compatible object", "description": "", "code-info": {"name": "ndpointer", "parameters": [{"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " ndim", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " flags", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.bmat(obj, ldict=None, gdict=None)", "item_id": "numpy.bmat", "summary": "Build a matrix object from a string, nested sequence, or array.\n\nParameters\n\nobjstr or array_likeInput data", "description": "", "code-info": {"name": "numpy.bmat", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " ldict", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " gdict", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.block(arrays)", "item_id": "numpy.block", "summary": "Assemble an nd-array from nested lists of blocks.\nBlocks in the innermost lists are concatenated (see concatenate) along\nthe last dimension (-1), then these are concatenated along the\nsecond-last dimension (-2), and so on until the outermost list is reached.\nBlocks can be of any dimension, but will not be broadcasted using the normal\nrules", "description": "", "code-info": {"name": "numpy.block", "parameters": [{"name": "arrays", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.blackman(M)", "item_id": "numpy.blackman", "summary": "Return the Blackman window.\nThe Blackman window is a taper formed by using the first three\nterms of a summation of cosines", "description": "", "code-info": {"name": "numpy.blackman", "parameters": [{"name": "M", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.bitwise_xor", "summary": "Compute the bit-wise XOR of two arrays element-wise.\nComputes the bit-wise XOR of the underlying binary representation of\nthe integers in the input arrays", "description": "", "code-info": {"name": "numpy.bitwise_xor", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.bitwise_or", "summary": "Compute the bit-wise OR of two arrays element-wise.\nComputes the bit-wise OR of the underlying binary representation of\nthe integers in the input arrays", "description": "", "code-info": {"name": "numpy.bitwise_or", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.bitwise_and", "summary": "Compute the bit-wise AND of two arrays element-wise.\nComputes the bit-wise AND of the underlying binary representation of\nthe integers in the input arrays", "description": "", "code-info": {"name": "numpy.bitwise_and", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.BitGenerator(seed=None)", "item_id": "numpy.random.BitGenerator", "summary": "Base Class for generic BitGenerators, which provide a stream\nof random bits based on different algorithms", "description": "", "code-info": {"name": "numpy.random.BitGenerator", "parameters": [{"name": "seed", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.binomial(n, p, size=None)", "item_id": "numpy.random.RandomState.binomial", "summary": "Draw samples from a binomial distribution.\nSamples are drawn from a binomial distribution with specified\nparameters, n trials and p probability of success where\nn an integer &gt;= 0 and p is in the interval [0,1]", "description": "", "code-info": {"name": "numpy.random.RandomState.binomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.binomial(n, p, size=None)", "item_id": "numpy.random.Generator.binomial", "summary": "Draw samples from a binomial distribution.\nSamples are drawn from a binomial distribution with specified\nparameters, n trials and p probability of success where\nn an integer &gt;= 0 and p is in the interval [0,1]", "description": "", "code-info": {"name": "numpy.random.Generator.binomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.bincount(x, weights=None, minlength=0)", "item_id": "numpy.bincount", "summary": "Count number of occurrences of each value in array of non-negative ints.\nThe number of bins (of size 1) is one larger than the largest value in\nx", "description": "", "code-info": {"name": "numpy.bincount", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " minlength", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.random.binomial(n, p, size=None)", "item_id": "numpy.random.binomial", "summary": "Draw samples from a binomial distribution.\nSamples are drawn from a binomial distribution with specified\nparameters, n trials and p probability of success where\nn an integer &gt;= 0 and p is in the interval [0,1]", "description": "", "code-info": {"name": "numpy.random.binomial", "parameters": [{"name": "n", "is_optional": false, "type": "others", "description": ""}, {"name": " p", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.binary_repr(num, width=None)", "item_id": "numpy.binary_repr", "summary": "Return the binary representation of the input number as a string.\nFor negative numbers, if width is not given, a minus sign is added to the\nfront", "description": "", "code-info": {"name": "numpy.binary_repr", "parameters": [{"name": "num", "is_optional": false, "type": "others", "description": ""}, {"name": " width", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.RandomState.beta(a, b, size=None)", "item_id": "numpy.random.RandomState.beta", "summary": "Draw samples from a Beta distribution.\nThe Beta distribution is a special case of the Dirichlet distribution,\nand is related to the Gamma distribution", "description": "", "code-info": {"name": "numpy.random.RandomState.beta", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.Generator.beta(a, b, size=None)", "item_id": "numpy.random.Generator.beta", "summary": "Draw samples from a Beta distribution.\nThe Beta distribution is a special case of the Dirichlet distribution,\nand is related to the Gamma distribution", "description": "", "code-info": {"name": "numpy.random.Generator.beta", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.random.beta(a, b, size=None)", "item_id": "numpy.random.beta", "summary": "Draw samples from a Beta distribution.\nThe Beta distribution is a special case of the Dirichlet distribution,\nand is related to the Gamma distribution", "description": "", "code-info": {"name": "numpy.random.beta", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.testing.Tester.bench(self, label='fast', verbose=1, extra_argv=None)", "item_id": "numpy.testing.Tester.bench", "summary": "Run benchmarks for module using nose.\n\nParameters\n\nlabel{\u2018fast\u2019, \u2018full\u2019, \u2018\u2019, attribute identifier}, optionalIdentifies the benchmarks to run", "description": "", "code-info": {"name": "numpy.testing.Tester.bench", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " label", "is_optional": true, "type": "string", "default_value": "'fast'", "description": ""}, {"name": " verbose", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " extra_argv", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.basis(deg, domain=None, window=None)", "item_id": "numpy.polynomial.hermite_e.HermiteE.basis", "summary": "Series basis polynomial of degree deg.\nReturns the series representing the basis polynomial of degree deg.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndegintDegree of the basis polynomial for the series", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.basis", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.basis(deg, domain=None, window=None)", "item_id": "numpy.polynomial.polynomial.Polynomial.basis", "summary": "Series basis polynomial of degree deg.\nReturns the series representing the basis polynomial of degree deg.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndegintDegree of the basis polynomial for the series", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.basis", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.basis(deg, domain=None, window=None)", "item_id": "numpy.polynomial.legendre.Legendre.basis", "summary": "Series basis polynomial of degree deg.\nReturns the series representing the basis polynomial of degree deg.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndegintDegree of the basis polynomial for the series", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.basis", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.basis(deg, domain=None, window=None)", "item_id": "numpy.polynomial.hermite.Hermite.basis", "summary": "Series basis polynomial of degree deg.\nReturns the series representing the basis polynomial of degree deg.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndegintDegree of the basis polynomial for the series", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.basis", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.basis(deg, domain=None, window=None)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.basis", "summary": "Series basis polynomial of degree deg.\nReturns the series representing the basis polynomial of degree deg.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndegintDegree of the basis polynomial for the series", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.basis", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.basis(deg, domain=None, window=None)", "item_id": "numpy.polynomial.laguerre.Laguerre.basis", "summary": "Series basis polynomial of degree deg.\nReturns the series representing the basis polynomial of degree deg.\n\nNew in version 1.7.0.\n\n\nParameters\n\ndegintDegree of the basis polynomial for the series", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.basis", "parameters": [{"name": "deg", "is_optional": false, "type": "others", "description": ""}, {"name": " domain", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " window", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.base_repr(number, base=2, padding=0)", "item_id": "numpy.base_repr", "summary": "Return a string representation of a number in the given base system.\n\nParameters\n\nnumberintThe value to convert", "description": "", "code-info": {"name": "numpy.base_repr", "parameters": [{"name": "number", "is_optional": false, "type": "others", "description": ""}, {"name": " base", "is_optional": true, "type": "int", "default_value": "2", "description": ""}, {"name": " padding", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.ma.average(a, axis=None, weights=None, returned=False)", "item_id": "numpy.ma.average", "summary": "Return the weighted average of array over the given axis.\n\nParameters\n\naarray_likeData to be averaged.\nMasked entries are not taken into account in the computation.\n\naxisint, optionalAxis along which to average a", "description": "", "code-info": {"name": "numpy.ma.average", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " returned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.average(a, axis=None, weights=None, returned=False)", "item_id": "numpy.average", "summary": "Compute the weighted average along the specified axis.\n\nParameters\n\naarray_likeArray containing data to be averaged", "description": "", "code-info": {"name": "numpy.average", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " returned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.bartlett(M)", "item_id": "numpy.bartlett", "summary": "Return the Bartlett window.\nThe Bartlett window is very similar to a triangular window, except\nthat the end points are at zero", "description": "", "code-info": {"name": "numpy.bartlett", "parameters": [{"name": "M", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.atleast_3d(*arys)", "item_id": "numpy.atleast_3d", "summary": "View inputs as arrays with at least three dimensions.\n\nParameters\n\narys1, arys2, \u2026array_likeOne or more array-like sequences", "description": "", "code-info": {"name": "numpy.atleast_3d", "parameters": [{"name": "*arys", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.atleast_3d(*args, **kwargs)", "item_id": "numpy.ma.atleast_3d", "summary": "\nView inputs as arrays with at least three dimensions.\n\n\nParameters\n\narys1, arys2, \u2026array_likeOne or more array-like sequences", "description": "", "code-info": {"name": "numpy.ma.atleast_3d", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.atleast_2d(*args, **kwargs)", "item_id": "numpy.ma.atleast_2d", "summary": "\nView inputs as arrays with at least two dimensions.\n\n\nParameters\n\narys1, arys2, \u2026array_likeOne or more array-like sequences", "description": "", "code-info": {"name": "numpy.ma.atleast_2d", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.atleast_1d(*args, **kwargs)", "item_id": "numpy.ma.atleast_1d", "summary": "\nConvert inputs to arrays with at least one dimension.\nScalar inputs are converted to 1-dimensional arrays, whilst\nhigher-dimensional inputs are preserved.\n\n\nParameters\n\narys1, arys2, \u2026array_likeOne or more input arrays.\n\n\n\nReturns\n\nretndarrayAn array, or list of arrays, each with a.ndim &gt;= 1.\nCopies are made only if necessary.\n\n\n\n\nNotes\nThe function is applied to both the _data and the _mask, if any.\nExamples\n&gt;&gt;&gt; np.atleast_1d(1.0)\narray([1.])\n\n\n&gt;&gt;&gt; x = np.arange(9.0).reshape(3,3)\n&gt;&gt;&gt; np.atleast_1d(x)\narray([[0., 1., 2.],\n       [3., 4., 5.],\n       [6., 7., 8.]])\n&gt;&gt;&gt; np.atleast_1d(x) is x\nTrue\n\n\n&gt;&gt;&gt; np.atleast_1d(1, [3, 4])\n[array([1]), array([3, 4])]\n\n\n", "description": "", "code-info": {"name": "numpy.ma.atleast_1d", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ufunc.at(a, indices, b=None)", "item_id": "numpy.ufunc.at", "summary": "Performs unbuffered in place operation on operand \u2018a\u2019 for elements\nspecified by \u2018indices\u2019", "description": "", "code-info": {"name": "numpy.ufunc.at", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " indices", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.atleast_1d(*arys)", "item_id": "numpy.atleast_1d", "summary": "Convert inputs to arrays with at least one dimension.\nScalar inputs are converted to 1-dimensional arrays, whilst\nhigher-dimensional inputs are preserved.\n\nParameters\n\narys1, arys2, \u2026array_likeOne or more input arrays.\n\n\n\nReturns\n\nretndarrayAn array, or list of arrays, each with a.ndim &gt;= 1.\nCopies are made only if necessary.\n\n\n\n\n\nSee also\natleast_2d, atleast_3d\n\nExamples\n&gt;&gt;&gt; np.atleast_1d(1.0)\narray([1.])\n\n\n&gt;&gt;&gt; x = np.arange(9.0).reshape(3,3)\n&gt;&gt;&gt; np.atleast_1d(x)\narray([[0., 1., 2.],\n       [3., 4., 5.],\n       [6., 7., 8.]])\n&gt;&gt;&gt; np.atleast_1d(x) is x\nTrue\n\n\n&gt;&gt;&gt; np.atleast_1d(1, [3, 4])\n[array([1]), array([3, 4])]\n\n\n", "description": "", "code-info": {"name": "numpy.atleast_1d", "parameters": [{"name": "*arys", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.record.astype()", "item_id": "numpy.record.astype", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.astype", "parameters": []}},
{"code": "numpy.atleast_2d(*arys)", "item_id": "numpy.atleast_2d", "summary": "View inputs as arrays with at least two dimensions.\n\nParameters\n\narys1, arys2, \u2026array_likeOne or more array-like sequences", "description": "", "code-info": {"name": "numpy.atleast_2d", "parameters": [{"name": "*arys", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.recarray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.recarray.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.recarray.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ndarray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.ndarray.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.ndarray.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.MaskType.astype()", "item_id": "numpy.ma.MaskType.astype", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.astype", "parameters": []}},
{"code": "numpy.ma.MaskedArray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.ma.MaskedArray.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.memmap.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.memmap.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.memmap.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.masked_array.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.ma.masked_array.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.ma.masked_array.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.lib.user_array.container.astype(self, typecode)", "item_id": "numpy.lib.user_array.container.astype", "summary": "", "description": "", "code-info": {"name": "numpy.lib.user_array.container.astype", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " typecode", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.matrix.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.matrix.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.matrix.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.generic.astype()", "item_id": "numpy.generic.astype", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.astype", "parameters": []}},
{"code": "numpy.chararray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.chararray.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.chararray.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.char.chararray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)", "item_id": "numpy.char.chararray.astype", "summary": "Copy of the array, cast to a specified type.\n\nParameters\n\ndtypestr or dtypeTypecode or data-type to which the array is cast.\n\norder{\u2018C\u2019, \u2018F\u2019, \u2018A\u2019, \u2018K\u2019}, optionalControls the memory layout order of the result.\n\u2018C\u2019 means C order, \u2018F\u2019 means Fortran order, \u2018A\u2019\nmeans \u2018F\u2019 order if all the arrays are Fortran contiguous,\n\u2018C\u2019 order otherwise, and \u2018K\u2019 means as close to the\norder the array elements appear in memory as possible.\nDefault is \u2018K\u2019.\n\ncasting{\u2018no\u2019, \u2018equiv\u2019, \u2018safe\u2019, \u2018same_kind\u2019, \u2018unsafe\u2019}, optionalControls what kind of data casting may occur", "description": "", "code-info": {"name": "numpy.char.chararray.astype", "parameters": [{"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'unsafe'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_warns(warning_class, *args, **kwargs)", "item_id": "numpy.testing.assert_warns", "summary": "Fail unless the given callable throws the specified warning.\nA warning of class warning_class should be thrown by the callable when\ninvoked with arguments args and keyword arguments kwargs.\nIf a different type of warning is thrown, it will not be caught.\nIf called with all arguments other than the warning class omitted, may be\nused as a context manager:\n\n\nwith assert_warns(SomeWarning):do_something()\n\n\n\nThe ability to be used as a context manager is new in NumPy v1.11.0.\n\nNew in version 1.4.0.\n\n\nParameters\n\nwarning_classclassThe class defining the warning that func is expected to throw.\n\nfunccallableThe callable to test.\n\n*argsArgumentsArguments passed to func.\n\n**kwargsKwargsKeyword arguments passed to func.\n\n\n\nReturns\n\nThe value returned by `func`.\n\n\n\n", "description": "", "code-info": {"name": "numpy.testing.assert_warns", "parameters": [{"name": "warning_class", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.assert_string_equal(actual, desired)", "item_id": "numpy.testing.assert_string_equal", "summary": "Test if two strings are equal.\nIf the given strings are equal, assert_string_equal does nothing.\nIf they are not equal, an AssertionError is raised, and the diff\nbetween the strings is shown.\n\nParameters\n\nactualstrThe string to test for equality against the expected string.\n\ndesiredstrThe expected string.\n\n\n\n\nExamples\n&gt;&gt;&gt; np.testing.assert_string_equal('abc', 'abc')\n&gt;&gt;&gt; np.testing.assert_string_equal('abc', 'abcd')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n...\nAssertionError: Differences in strings:\n- abc+ abcd?    +\n\n\n", "description": "", "code-info": {"name": "numpy.testing.assert_string_equal", "parameters": [{"name": "actual", "is_optional": false, "type": "others", "description": ""}, {"name": " desired", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs)", "item_id": "numpy.testing.assert_raises_regex", "summary": "Fail unless an exception of class exception_class and with message that\nmatches expected_regexp is thrown by callable when invoked with arguments\nargs and keyword arguments kwargs.\nAlternatively, can be used as a context manager like assert_raises.\nName of this function adheres to Python 3.2+ reference, but should work in\nall versions down to 2.6.\nNotes\n\nNew in version 1.9.0.\n\n", "description": "", "code-info": {"name": "numpy.testing.assert_raises_regex", "parameters": [{"name": "exception_class", "is_optional": false, "type": "others", "description": ""}, {"name": " expected_regexp", "is_optional": false, "type": "others", "description": ""}, {"name": " callable", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.assert_raises(exception_class, callable, *args, **kwargs)", "item_id": "numpy.testing.assert_raises", "summary": "Fail unless an exception of class exception_class is thrown\nby callable when invoked with arguments args and keyword\narguments kwargs", "description": "", "code-info": {"name": "numpy.testing.assert_raises", "parameters": [{"name": "exception_class", "is_optional": false, "type": "others", "description": ""}, {"name": " callable", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.assert_equal(actual, desired, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_equal", "summary": "Raises an AssertionError if two objects are not equal.\nGiven two objects (scalars, lists, tuples, dictionaries or numpy arrays),\ncheck that all elements of these objects are equal", "description": "", "code-info": {"name": "numpy.testing.assert_equal", "parameters": [{"name": "actual", "is_optional": false, "type": "others", "description": ""}, {"name": " desired", "is_optional": false, "type": "others", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)", "item_id": "numpy.testing.assert_array_max_ulp", "summary": "Check that all items of arrays differ in at most N Units in the Last Place.\n\nParameters\n\na, barray_likeInput arrays to be compared.\n\nmaxulpint, optionalThe maximum number of units in the last place that elements of a and\nb can differ", "description": "", "code-info": {"name": "numpy.testing.assert_array_max_ulp", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " maxulp", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.testing.assert_array_less(x, y, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_array_less", "summary": "Raises an AssertionError if two array_like objects are not ordered by less\nthan.\nGiven two array_like objects, check that the shape is equal and all\nelements of the first object are strictly smaller than those of the\nsecond object", "description": "", "code-info": {"name": "numpy.testing.assert_array_less", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_array_equal(x, y, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_array_equal", "summary": "Raises an AssertionError if two array_like objects are not equal.\nGiven two array_like objects, check that the shape is equal and all\nelements of these objects are equal (but see the Notes for the special\nhandling of a scalar)", "description": "", "code-info": {"name": "numpy.testing.assert_array_equal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_array_almost_equal_nulp(x, y, nulp=1)", "item_id": "numpy.testing.assert_array_almost_equal_nulp", "summary": "Compare two arrays relatively to their spacing.\nThis is a relatively robust method to compare two arrays whose amplitude\nis variable.\n\nParameters\n\nx, yarray_likeInput arrays.\n\nnulpint, optionalThe maximum number of unit in the last place for tolerance (see Notes).\nDefault is 1.\n\n\n\nReturns\n\nNone\n\n\nRaises\n\nAssertionErrorIf the spacing between x and y for one or more elements is larger\nthan nulp.\n\n\n\n\n\nSee also\n\nassert_array_max_ulpCheck that all items of arrays differ in at most N Units in the Last Place.\n\nspacingReturn the distance between x and the nearest adjacent number.\n\n\n\nNotes\nAn assertion is raised if the following condition is not met:\nabs(x - y) &lt;= nulps * spacing(maximum(abs(x), abs(y)))\n\n\nExamples\n&gt;&gt;&gt; x = np.array([1., 1e-10, 1e-20])\n&gt;&gt;&gt; eps = np.finfo(x.dtype).eps\n&gt;&gt;&gt; np.testing.assert_array_almost_equal_nulp(x, x*eps/2 + x)\n\n\n&gt;&gt;&gt; np.testing.assert_array_almost_equal_nulp(x, x*eps + x)\nTraceback (most recent call last):\n  ...\nAssertionError: X and Y are not equal to 1 ULP (max is 2)\n\n\n", "description": "", "code-info": {"name": "numpy.testing.assert_array_almost_equal_nulp", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " nulp", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"code": "numpy.testing.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_array_almost_equal", "summary": "Raises an AssertionError if two objects are not equal up to desired\nprecision.\n\nNote\nIt is recommended to use one of assert_allclose,\nassert_array_almost_equal_nulp or assert_array_max_ulp\ninstead of this function for more consistent floating point\ncomparisons.\n\nThe test verifies identical shapes and that the elements of actual and\ndesired satisfy.\n\nabs(desired-actual) &lt; 1.5 * 10**(-decimal)\n\nThat is a looser test than originally documented, but agrees with what the\nactual implementation did up to rounding vagaries", "description": "", "code-info": {"name": "numpy.testing.assert_array_almost_equal", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " y", "is_optional": false, "type": "others", "description": ""}, {"name": " decimal", "is_optional": true, "type": "int", "default_value": "6", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_approx_equal", "summary": "Raises an AssertionError if two items are not equal up to significant\ndigits.\n\nNote\nIt is recommended to use one of assert_allclose,\nassert_array_almost_equal_nulp or assert_array_max_ulp\ninstead of this function for more consistent floating point\ncomparisons.\n\nGiven two numbers, check that they are approximately equal.\nApproximately equal is defined as the number of significant digits\nthat agree.\n\nParameters\n\nactualscalarThe object to check.\n\ndesiredscalarThe expected object.\n\nsignificantint, optionalDesired precision, default is 7.\n\nerr_msgstr, optionalThe error message to be printed in case of failure.\n\nverbosebool, optionalIf True, the conflicting values are appended to the error message.\n\n\n\nRaises\n\nAssertionErrorIf actual and desired are not equal up to specified precision.\n\n\n\n\n\nSee also\n\nassert_allcloseCompare two array_like objects for equality with desired relative and/or absolute precision.\n\n\nassert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\nExamples\n&gt;&gt;&gt; np.testing.assert_approx_equal(0.12345677777777e-20, 0.1234567e-20)\n&gt;&gt;&gt; np.testing.assert_approx_equal(0.12345670e-20, 0.12345671e-20,\n..", "description": "", "code-info": {"name": "numpy.testing.assert_approx_equal", "parameters": [{"name": "actual", "is_optional": false, "type": "others", "description": ""}, {"name": " desired", "is_optional": false, "type": "others", "description": ""}, {"name": " significant", "is_optional": true, "type": "int", "default_value": "7", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_almost_equal", "summary": "Raises an AssertionError if two items are not equal up to desired\nprecision.\n\nNote\nIt is recommended to use one of assert_allclose,\nassert_array_almost_equal_nulp or assert_array_max_ulp\ninstead of this function for more consistent floating point\ncomparisons.\n\nThe test verifies that the elements of actual and desired satisfy.\n\nabs(desired-actual) &lt; 1.5 * 10**(-decimal)\n\nThat is a looser test than originally documented, but agrees with what the\nactual implementation in assert_array_almost_equal did up to rounding\nvagaries", "description": "", "code-info": {"name": "numpy.testing.assert_almost_equal", "parameters": [{"name": "actual", "is_optional": false, "type": "others", "description": ""}, {"name": " desired", "is_optional": false, "type": "others", "description": ""}, {"name": " decimal", "is_optional": true, "type": "int", "default_value": "7", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.testing.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)", "item_id": "numpy.testing.assert_allclose", "summary": "Raises an AssertionError if two objects are not equal up to desired\ntolerance.\nThe test is equivalent to allclose(actual, desired, rtol, atol) (note\nthat allclose has different default values)", "description": "", "code-info": {"name": "numpy.testing.assert_allclose", "parameters": [{"name": "actual", "is_optional": false, "type": "others", "description": ""}, {"name": " desired", "is_optional": false, "type": "others", "description": ""}, {"name": " rtol", "is_optional": true, "type": "others", "default_value": "1e-07", "description": ""}, {"name": " atol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " equal_nan", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " err_msg", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.asscalar(a)", "item_id": "numpy.asscalar", "summary": "Convert an array of size 1 to its scalar equivalent.\n\nDeprecated since version 1.16: Deprecated, use numpy.ndarray.item() instead.\n\n\nParameters\n\nandarrayInput array of size 1.\n\n\n\nReturns\n\noutscalarScalar representation of a", "description": "", "code-info": {"name": "numpy.asscalar", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.asmatrix(data, dtype=None)", "item_id": "numpy.asmatrix", "summary": "Interpret the input as a matrix.\nUnlike matrix, asmatrix does not make a copy if the input is already\na matrix or an ndarray", "description": "", "code-info": {"name": "numpy.asmatrix", "parameters": [{"name": "data", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.asfortranarray(a, dtype=None)", "item_id": "numpy.asfortranarray", "summary": "Return an array (ndim &gt;= 1) laid out in Fortran order in memory.\n\nParameters\n\naarray_likeInput array.\n\ndtypestr or dtype object, optionalBy default, the data-type is inferred from the input data.\n\n\n\nReturns\n\noutndarrayThe input a in Fortran, or column-major, order.\n\n\n\n\n\nSee also\n\nascontiguousarrayConvert input to a contiguous (C order) array.\n\nasanyarrayConvert input to an ndarray with either row or column-major memory order.\n\nrequireReturn an ndarray that satisfies requirements.\n\nndarray.flagsInformation about the memory layout of the array.\n\n\n\nExamples\n&gt;&gt;&gt; x = np.arange(6).reshape(2,3)\n&gt;&gt;&gt; y = np.asfortranarray(x)\n&gt;&gt;&gt; x.flags['F_CONTIGUOUS']\nFalse\n&gt;&gt;&gt; y.flags['F_CONTIGUOUS']\nTrue\n\n\nNote: This function returns an array with at least one-dimension (1-d) \nso it will not preserve 0-d arrays.\n", "description": "", "code-info": {"name": "numpy.asfortranarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.asfarray(a, dtype=&lt;class 'numpy.float64'&gt;)", "item_id": "numpy.asfarray", "summary": "Return an array converted to a float type.\n\nParameters\n\naarray_likeThe input array.\n\ndtypestr or dtype object, optionalFloat type code to coerce input array a", "description": "", "code-info": {"name": "numpy.asfarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "&lt;class 'numpy.float64'&gt;", "description": ""}]}},
{"code": "numpy.asarray_chkfinite(a, dtype=None, order=None)", "item_id": "numpy.asarray_chkfinite", "summary": "Convert the input to an array, checking for NaNs or Infs.\n\nParameters\n\naarray_likeInput data, in any form that can be converted to an array", "description": "", "code-info": {"name": "numpy.asarray_chkfinite", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.asarray(a, dtype=None, order=None)", "item_id": "numpy.ma.asarray", "summary": "Convert the input to a masked array of the given data-type.\nNo copy is performed if the input is already an ndarray", "description": "", "code-info": {"name": "numpy.ma.asarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.core.defchararray.asarray(obj, itemsize=None, unicode=None, order=None)", "item_id": "numpy.core.defchararray.asarray", "summary": "Convert the input to a chararray, copying the data only if\nnecessary.\nVersus a regular NumPy array of type str or unicode, this\nclass adds the following functionality:\n\n\nvalues automatically have whitespace removed from the end\nwhen indexed\ncomparison operators automatically remove whitespace from the\nend when comparing values\nvectorized string operations are provided as methods\n(e.g", "description": "", "code-info": {"name": "numpy.core.defchararray.asarray", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " itemsize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " unicode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ascontiguousarray(a, dtype=None)", "item_id": "numpy.ascontiguousarray", "summary": "Return a contiguous array (ndim &gt;= 1) in memory (C order).\n\nParameters\n\naarray_likeInput array.\n\ndtypestr or dtype object, optionalData-type of returned array.\n\n\n\nReturns\n\noutndarrayContiguous array of same shape and content as a, with type dtype\nif specified.\n\n\n\n\n\nSee also\n\nasfortranarrayConvert input to an ndarray with column-major memory order.\n\nrequireReturn an ndarray that satisfies requirements.\n\nndarray.flagsInformation about the memory layout of the array.\n\n\n\nExamples\n&gt;&gt;&gt; x = np.arange(6).reshape(2,3)\n&gt;&gt;&gt; np.ascontiguousarray(x, dtype=np.float32)\narray([[0., 1., 2.],\n       [3., 4., 5.]], dtype=float32)\n&gt;&gt;&gt; x.flags['C_CONTIGUOUS']\nTrue\n\n\nNote: This function returns an array with at least one-dimension (1-d) \nso it will not preserve 0-d arrays.\n", "description": "", "code-info": {"name": "numpy.ascontiguousarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.asarray(obj, itemsize=None, unicode=None, order=None)", "item_id": "numpy.char.asarray", "summary": "Convert the input to a chararray, copying the data only if\nnecessary.\nVersus a regular NumPy array of type str or unicode, this\nclass adds the following functionality:\n\n\nvalues automatically have whitespace removed from the end\nwhen indexed\ncomparison operators automatically remove whitespace from the\nend when comparing values\nvectorized string operations are provided as methods\n(e.g", "description": "", "code-info": {"name": "numpy.char.asarray", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " itemsize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " unicode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.asanyarray(a, dtype=None)", "item_id": "numpy.ma.asanyarray", "summary": "Convert the input to a masked array, conserving subclasses.\nIf a is a subclass of MaskedArray, its class is conserved.\nNo copy is performed if the input is already an ndarray.\n\nParameters\n\naarray_likeInput data, in any form that can be converted to an array.\n\ndtypedtype, optionalBy default, the data-type is inferred from the input data.\n\norder{\u2018C\u2019, \u2018F\u2019}, optionalWhether to use row-major (\u2018C\u2019) or column-major (\u2018FORTRAN\u2019) memory\nrepresentation", "description": "", "code-info": {"name": "numpy.ma.asanyarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.asanyarray(a, dtype=None, order=None)", "item_id": "numpy.asanyarray", "summary": "Convert the input to an ndarray, but pass ndarray subclasses through.\n\nParameters\n\naarray_likeInput data, in any form that can be converted to an array", "description": "", "code-info": {"name": "numpy.asanyarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.asarray(a, dtype=None, order=None)", "item_id": "numpy.asarray", "summary": "Convert the input to an array.\n\nParameters\n\naarray_likeInput data, in any form that can be converted to an array", "description": "", "code-info": {"name": "numpy.asarray", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.lib.Arrayterator(var, buf_size=None)", "item_id": "numpy.lib.Arrayterator", "summary": "Buffered iterator for big arrays.\nArrayterator creates a buffered iterator for reading big arrays in small\ncontiguous blocks", "description": "", "code-info": {"name": "numpy.lib.Arrayterator", "parameters": [{"name": "var", "is_optional": false, "type": "others", "description": ""}, {"name": " buf_size", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.lib.stride_tricks.as_strided(x, shape=None, strides=None, subok=False, writeable=True)", "item_id": "numpy.lib.stride_tricks.as_strided", "summary": "Create a view into the array with the given shape and strides.\n\nWarning\nThis function has to be used with extreme care, see notes.\n\n\nParameters\n\nxndarrayArray to create a new.\n\nshapesequence of int, optionalThe shape of the new array", "description": "", "code-info": {"name": "numpy.lib.stride_tricks.as_strided", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " strides", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " writeable", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.array_str(a, max_line_width=None, precision=None, suppress_small=None)", "item_id": "numpy.array_str", "summary": "Return a string representation of the data in an array.\nThe data in the array is returned as a single string", "description": "", "code-info": {"name": "numpy.array_str", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " max_line_width", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " precision", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " suppress_small", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.polynomial.polyutils.as_series(alist, trim=True)", "item_id": "numpy.polynomial.polyutils.as_series", "summary": "Return argument as a list of 1-d arrays.\nThe returned list contains array(s) of dtype double, complex double, or\nobject", "description": "", "code-info": {"name": "numpy.polynomial.polyutils.as_series", "parameters": [{"name": "alist", "is_optional": false, "type": "others", "description": ""}, {"name": " trim", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ctypeslib.as_array(obj, shape=None)", "item_id": "numpy.ctypeslib.as_array", "summary": "Create a numpy array from a ctypes array or POINTER.\nThe numpy array shares the memory with the ctypes object.\nThe shape parameter must be given if converting from a ctypes POINTER.\nThe shape parameter is ignored if converting from a ctypes array\n", "description": "", "code-info": {"name": "numpy.ctypeslib.as_array", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.array_split(ary, indices_or_sections, axis=0)", "item_id": "numpy.array_split", "summary": "Split an array into multiple sub-arrays.\nPlease refer to the split documentation", "description": "", "code-info": {"name": "numpy.array_split", "parameters": [{"name": "ary", "is_optional": false, "type": "others", "description": ""}, {"name": " indices_or_sections", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)", "item_id": "numpy.array_repr", "summary": "Return the string representation of an array.\n\nParameters\n\narrndarrayInput array.\n\nmax_line_widthint, optionalInserts newlines if text is longer than max_line_width.\nDefaults to numpy.get_printoptions()['linewidth'].\n\nprecisionint, optionalFloating point precision.\nDefaults to numpy.get_printoptions()['precision'].\n\nsuppress_smallbool, optionalRepresent numbers \u201cvery close\u201d to zero as zero; default is False.\nVery close is defined by precision: if the precision is 8, e.g.,\nnumbers smaller (in absolute value) than 5e-9 are represented as\nzero.\nDefaults to numpy.get_printoptions()['suppress'].\n\n\n\nReturns\n\nstringstrThe string representation of an array.\n\n\n\n\n\nSee also\narray_str, array2string, set_printoptions\n\nExamples\n&gt;&gt;&gt; np.array_repr(np.array([1,2]))\n'array([1, 2])'\n&gt;&gt;&gt; np.array_repr(np.ma.array([0.]))\n'MaskedArray([0.])'\n&gt;&gt;&gt; np.array_repr(np.array([], np.int32))\n'array([], dtype=int32)'\n\n\n&gt;&gt;&gt; x = np.array([1e-6, 4e-7, 2, 3])\n&gt;&gt;&gt; np.array_repr(x, precision=6, suppress_small=True)\n'array([0.000001,  0", "description": "", "code-info": {"name": "numpy.array_repr", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " max_line_width", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " precision", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " suppress_small", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.array_equiv(a1, a2)", "item_id": "numpy.array_equiv", "summary": "Returns True if input arrays are shape consistent and all elements equal.\nShape consistent means they are either the same shape, or one input array\ncan be broadcasted to create the same shape as the other one.\n\nParameters\n\na1, a2array_likeInput arrays.\n\n\n\nReturns\n\noutboolTrue if equivalent, False otherwise.\n\n\n\n\nExamples\n&gt;&gt;&gt; np.array_equiv([1, 2], [1, 2])\nTrue\n&gt;&gt;&gt; np.array_equiv([1, 2], [1, 3])\nFalse\n\n\nShowing the shape equivalence:\n&gt;&gt;&gt; np.array_equiv([1, 2], [[1, 2], [1, 2]])\nTrue\n&gt;&gt;&gt; np.array_equiv([1, 2], [[1, 2, 1, 2], [1, 2, 1, 2]])\nFalse\n\n\n&gt;&gt;&gt; np.array_equiv([1, 2], [[1, 2], [1, 3]])\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.array_equiv", "parameters": [{"name": "a1", "is_optional": false, "type": "others", "description": ""}, {"name": " a2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.array_equal(a1, a2)", "item_id": "numpy.array_equal", "summary": "True if two arrays have the same shape and elements, False otherwise.\n\nParameters\n\na1, a2array_likeInput arrays.\n\n\n\nReturns\n\nbboolReturns True if the arrays are equal.\n\n\n\n\n\nSee also\n\nallcloseReturns True if two arrays are element-wise equal within a tolerance.\n\narray_equivReturns True if input arrays are shape consistent and all elements equal.\n\n\n\nExamples\n&gt;&gt;&gt; np.array_equal([1, 2], [1, 2])\nTrue\n&gt;&gt;&gt; np.array_equal(np.array([1, 2]), np.array([1, 2]))\nTrue\n&gt;&gt;&gt; np.array_equal([1, 2], [1, 2, 3])\nFalse\n&gt;&gt;&gt; np.array_equal([1, 2], [1, 4])\nFalse\n\n\n", "description": "", "code-info": {"name": "numpy.array_equal", "parameters": [{"name": "a1", "is_optional": false, "type": "others", "description": ""}, {"name": " a2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=&lt;no value&gt;, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', **kwarg)", "item_id": "numpy.array2string", "summary": "Return a string representation of an array.\n\nParameters\n\naarray_likeInput array.\n\nmax_line_widthint, optionalInserts newlines if text is longer than max_line_width.\nDefaults to numpy.get_printoptions()['linewidth'].\n\nprecisionint or None, optionalFloating point precision.\nDefaults to numpy.get_printoptions()['precision'].\n\nsuppress_smallbool, optionalRepresent numbers \u201cvery close\u201d to zero as zero; default is False.\nVery close is defined by precision: if the precision is 8, e.g.,\nnumbers smaller (in absolute value) than 5e-9 are represented as\nzero.\nDefaults to numpy.get_printoptions()['suppress'].\n\nseparatorstr, optionalInserted between elements.\n\nprefixstr, optional\nsuffix: str, optionalThe length of the prefix and suffix strings are used to respectively\nalign and wrap the output", "description": "", "code-info": {"name": "numpy.array2string", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " max_line_width", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " precision", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " suppress_small", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " separator", "is_optional": true, "type": "string", "default_value": "' '", "description": ""}, {"name": " prefix", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " style", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " formatter", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " threshold", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " edgeitems", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " sign", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " floatmode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " suffix", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": " **kwarg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)", "item_id": "numpy.ma.array", "summary": "An array class with possibly masked values.\nMasked values of True exclude the corresponding element from any\ncomputation.\nConstruction:\nx = MaskedArray(data, mask=nomask, dtype=None, copy=False, subok=True,\n                ndmin=0, fill_value=None, keep_mask=True, hard_mask=None,\n                shrink=True, order=None)\n\n\n\nParameters\n\ndataarray_likeInput data.\n\nmasksequence, optionalMask", "description": "", "code-info": {"name": "numpy.ma.array", "parameters": [{"name": "data", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mask", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keep_mask", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " hard_mask", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " shrink", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " ndmin", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.core.records.array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True)", "item_id": "numpy.core.records.array", "summary": "Construct a record array from a wide-variety of objects.\n", "description": "", "code-info": {"name": "numpy.core.records.array", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shape", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " offset", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " strides", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " formats", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " names", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " titles", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " aligned", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.core.defchararray.array(obj, itemsize=None, copy=True, unicode=None, order=None)", "item_id": "numpy.core.defchararray.array", "summary": "Create a chararray.\n\nNote\nThis class is provided for numarray backward-compatibility.\nNew code (not concerned with numarray compatibility) should use\narrays of type string_ or unicode_ and use the free functions\nin numpy.char for fast\nvectorized string operations instead.\n\nVersus a regular NumPy array of type str or unicode, this\nclass adds the following functionality:\n\n\nvalues automatically have whitespace removed from the end\nwhen indexed\ncomparison operators automatically remove whitespace from the\nend when comparing values\nvectorized string operations are provided as methods\n(e.g", "description": "", "code-info": {"name": "numpy.core.defchararray.array", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " itemsize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " unicode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)", "item_id": "numpy.array", "summary": "Create an array.\n\nParameters\n\nobjectarray_likeAn array, any object exposing the array interface, an object whose\n__array__ method returns an array, or any (nested) sequence.\n\ndtypedata-type, optionalThe desired data-type for the array", "description": "", "code-info": {"name": "numpy.array", "parameters": [{"name": "object", "is_optional": false, "type": "others", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " ndmin", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"code": "numpy.char.array(obj, itemsize=None, copy=True, unicode=None, order=None)", "item_id": "numpy.char.array", "summary": "Create a chararray.\n\nNote\nThis class is provided for numarray backward-compatibility.\nNew code (not concerned with numarray compatibility) should use\narrays of type string_ or unicode_ and use the free functions\nin numpy.char for fast\nvectorized string operations instead.\n\nVersus a regular NumPy array of type str or unicode, this\nclass adds the following functionality:\n\n\nvalues automatically have whitespace removed from the end\nwhen indexed\ncomparison operators automatically remove whitespace from the\nend when comparing values\nvectorized string operations are provided as methods\n(e.g", "description": "", "code-info": {"name": "numpy.char.array", "parameters": [{"name": "obj", "is_optional": false, "type": "others", "description": ""}, {"name": " itemsize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " unicode", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.around(a, *args, **kwargs)", "item_id": "numpy.ma.around", "summary": "Round an array to the given number of decimals.\n\nSee also\n\naroundequivalent function; see for details.\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.around", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.argwhere(a)", "item_id": "numpy.argwhere", "summary": "Find the indices of array elements that are non-zero, grouped by element.\n\nParameters\n\naarray_likeInput data.\n\n\n\nReturns\n\nindex_array(N, a.ndim) ndarrayIndices of elements that are non-zero", "description": "", "code-info": {"name": "numpy.argwhere", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.around(a, decimals=0, out=None)", "item_id": "numpy.around", "summary": "Evenly round to the given number of decimals.\n\nParameters\n\naarray_likeInput data.\n\ndecimalsint, optionalNumber of decimal places to round to (default: 0)", "description": "", "code-info": {"name": "numpy.around", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.argsort(axis=-1, kind=None, order=None)", "item_id": "numpy.recarray.argsort", "summary": "Returns the indices that would sort this array.\nRefer to numpy.argsort for full documentation.\n\nSee also\n\nnumpy.argsortequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.argsort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.argsort()", "item_id": "numpy.record.argsort", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.argsort", "parameters": []}},
{"code": "numpy.memmap.argsort(axis=-1, kind=None, order=None)", "item_id": "numpy.memmap.argsort", "summary": "Returns the indices that would sort this array.\nRefer to numpy.argsort for full documentation.\n\nSee also\n\nnumpy.argsortequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.argsort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.argsort(axis=-1, kind=None, order=None)", "item_id": "numpy.ndarray.argsort", "summary": "Returns the indices that would sort this array.\nRefer to numpy.argsort for full documentation.\n\nSee also\n\nnumpy.argsortequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.argsort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.argsort(axis=-1, kind=None, order=None)", "item_id": "numpy.matrix.argsort", "summary": "Returns the indices that would sort this array.\nRefer to numpy.argsort for full documentation.\n\nSee also\n\nnumpy.argsortequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.argsort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.argsort()", "item_id": "numpy.ma.MaskType.argsort", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.argsort", "parameters": []}},
{"code": "numpy.ma.MaskedArray.argsort(self, axis=&lt;no value&gt;, kind=None, order=None, endwith=True, fill_value=None)", "item_id": "numpy.ma.MaskedArray.argsort", "summary": "Return an ndarray of indices that sort the array along the\nspecified axis", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.argsort", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " endwith", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.argsort(self, axis=&lt;no value&gt;, kind=None, order=None, endwith=True, fill_value=None)", "item_id": "numpy.ma.masked_array.argsort", "summary": "Return an ndarray of indices that sort the array along the\nspecified axis", "description": "", "code-info": {"name": "numpy.ma.masked_array.argsort", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " endwith", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.argsort()", "item_id": "numpy.generic.argsort", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.argsort", "parameters": []}},
{"code": "numpy.chararray.argsort(axis=-1, kind=None, order=None)", "item_id": "numpy.chararray.argsort", "summary": "Returns the indices that would sort this array.\nRefer to numpy.argsort for full documentation.\n\nSee also\n\nnumpy.argsortequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.argsort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.argsort(axis=-1, kind=None, order=None)", "item_id": "numpy.char.chararray.argsort", "summary": "Returns the indices that would sort this array.\nRefer to numpy.argsort for full documentation.\n\nSee also\n\nnumpy.argsortequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.argsort", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.argsort(a, axis=&lt;no value&gt;, kind=None, order=None, endwith=True, fill_value=None)", "item_id": "numpy.ma.argsort", "summary": "Return an ndarray of indices that sort the array along the\nspecified axis", "description": "", "code-info": {"name": "numpy.ma.argsort", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " endwith", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.argsort(a, axis=-1, kind=None, order=None)", "item_id": "numpy.argsort", "summary": "Returns the indices that would sort an array.\nPerform an indirect sort along the given axis using the algorithm specified\nby the kind keyword", "description": "", "code-info": {"name": "numpy.argsort", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.ndarray.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.recarray.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.memmap.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.matrix.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.ma.masked_array.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.char.chararray.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.argmin()", "item_id": "numpy.record.argmin", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.argmin", "parameters": []}},
{"code": "numpy.recarray.argmin(axis=None, out=None)", "item_id": "numpy.recarray.argmin", "summary": "Return indices of the minimum values along the given axis of a.\nRefer to numpy.argmin for detailed documentation.\n\nSee also\n\nnumpy.argminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.argmin", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.argpartition(kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.chararray.argpartition", "summary": "Returns the indices that would partition this array.\nRefer to numpy.argpartition for full documentation.\n\nNew in version 1.8.0.\n\n\nSee also\n\nnumpy.argpartitionequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.argpartition", "parameters": [{"name": "kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.argpartition(a, kth, axis=-1, kind='introselect', order=None)", "item_id": "numpy.argpartition", "summary": "Perform an indirect partition along the given axis using the\nalgorithm specified by the kind keyword", "description": "", "code-info": {"name": "numpy.argpartition", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " kth", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " kind", "is_optional": true, "type": "string", "default_value": "'introselect'", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ndarray.argmin(axis=None, out=None)", "item_id": "numpy.ndarray.argmin", "summary": "Return indices of the minimum values along the given axis of a.\nRefer to numpy.argmin for detailed documentation.\n\nSee also\n\nnumpy.argminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.argmin", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.argmin(self, axis=None, out=None)", "item_id": "numpy.matrix.argmin", "summary": "Indexes of the minimum values along an axis.\nReturn the indexes of the first occurrences of the minimum values\nalong the specified axis", "description": "", "code-info": {"name": "numpy.matrix.argmin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.argmin(axis=None, out=None)", "item_id": "numpy.memmap.argmin", "summary": "Return indices of the minimum values along the given axis of a.\nRefer to numpy.argmin for detailed documentation.\n\nSee also\n\nnumpy.argminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.argmin", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.argmin(self, axis=None, fill_value=None, out=None)", "item_id": "numpy.ma.MaskedArray.argmin", "summary": "Return array of indices to the minimum values along the given axis.\n\nParameters\n\naxis{None, integer}If None, the index is into the flattened array, otherwise along\nthe specified axis\n\nfill_value{var}, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.argmin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.argmin()", "item_id": "numpy.ma.MaskType.argmin", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.argmin", "parameters": []}},
{"code": "numpy.ma.masked_array.argmin(self, axis=None, fill_value=None, out=None)", "item_id": "numpy.ma.masked_array.argmin", "summary": "Return array of indices to the minimum values along the given axis.\n\nParameters\n\naxis{None, integer}If None, the index is into the flattened array, otherwise along\nthe specified axis\n\nfill_value{var}, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.masked_array.argmin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.argmin()", "item_id": "numpy.generic.argmin", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.argmin", "parameters": []}},
{"code": "numpy.chararray.argmin(axis=None, out=None)", "item_id": "numpy.chararray.argmin", "summary": "Return indices of the minimum values along the given axis of a.\nRefer to numpy.argmin for detailed documentation.\n\nSee also\n\nnumpy.argminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.argmin", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.argmin(axis=None, out=None)", "item_id": "numpy.char.chararray.argmin", "summary": "Return indices of the minimum values along the given axis of a.\nRefer to numpy.argmin for detailed documentation.\n\nSee also\n\nnumpy.argminequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.argmin", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.argmin(a, axis=None, out=None)", "item_id": "numpy.argmin", "summary": "Returns the indices of the minimum values along an axis.\n\nParameters\n\naarray_likeInput array.\n\naxisint, optionalBy default, the index is into the flattened array, otherwise\nalong the specified axis.\n\noutarray, optionalIf provided, the result will be inserted into this array", "description": "", "code-info": {"name": "numpy.argmin", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.recarray.argmax(axis=None, out=None)", "item_id": "numpy.recarray.argmax", "summary": "Return indices of the maximum values along the given axis.\nRefer to numpy.argmax for full documentation.\n\nSee also\n\nnumpy.argmaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.argmax", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.argmax()", "item_id": "numpy.record.argmax", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.argmax", "parameters": []}},
{"code": "numpy.ndarray.argmax(axis=None, out=None)", "item_id": "numpy.ndarray.argmax", "summary": "Return indices of the maximum values along the given axis.\nRefer to numpy.argmax for full documentation.\n\nSee also\n\nnumpy.argmaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.argmax", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.argmin(self, axis=None, fill_value=None, out=None)", "item_id": "numpy.ma.argmin", "summary": "Return array of indices to the minimum values along the given axis.\n\nParameters\n\naxis{None, integer}If None, the index is into the flattened array, otherwise along\nthe specified axis\n\nfill_value{var}, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.argmin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.argmax(axis=None, out=None)", "item_id": "numpy.memmap.argmax", "summary": "Return indices of the maximum values along the given axis.\nRefer to numpy.argmax for full documentation.\n\nSee also\n\nnumpy.argmaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.argmax", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.argmax(self, axis=None, fill_value=None, out=None)", "item_id": "numpy.ma.masked_array.argmax", "summary": "Returns array of indices of the maximum values along the given axis.\nMasked values are treated as if they had the value fill_value.\n\nParameters\n\naxis{None, integer}If None, the index is into the flattened array, otherwise along\nthe specified axis\n\nfill_value{var}, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.masked_array.argmax", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.matrix.argmax(self, axis=None, out=None)", "item_id": "numpy.matrix.argmax", "summary": "Indexes of the maximum values along an axis.\nReturn the indexes of the first occurrences of the maximum values\nalong the specified axis", "description": "", "code-info": {"name": "numpy.matrix.argmax", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.argmax()", "item_id": "numpy.ma.MaskType.argmax", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.argmax", "parameters": []}},
{"code": "numpy.generic.argmax()", "item_id": "numpy.generic.argmax", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.argmax", "parameters": []}},
{"code": "numpy.ma.MaskedArray.argmax(self, axis=None, fill_value=None, out=None)", "item_id": "numpy.ma.MaskedArray.argmax", "summary": "Returns array of indices of the maximum values along the given axis.\nMasked values are treated as if they had the value fill_value.\n\nParameters\n\naxis{None, integer}If None, the index is into the flattened array, otherwise along\nthe specified axis\n\nfill_value{var}, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.argmax", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.char.chararray.argmax(axis=None, out=None)", "item_id": "numpy.char.chararray.argmax", "summary": "Return indices of the maximum values along the given axis.\nRefer to numpy.argmax for full documentation.\n\nSee also\n\nnumpy.argmaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.argmax", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.argmax(a, axis=None, out=None)", "item_id": "numpy.argmax", "summary": "Returns the indices of the maximum values along an axis.\n\nParameters\n\naarray_likeInput array.\n\naxisint, optionalBy default, the index is into the flattened array, otherwise\nalong the specified axis.\n\noutarray, optionalIf provided, the result will be inserted into this array", "description": "", "code-info": {"name": "numpy.argmax", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.chararray.argmax(axis=None, out=None)", "item_id": "numpy.chararray.argmax", "summary": "Return indices of the maximum values along the given axis.\nRefer to numpy.argmax for full documentation.\n\nSee also\n\nnumpy.argmaxequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.argmax", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.argmax(self, axis=None, fill_value=None, out=None)", "item_id": "numpy.ma.argmax", "summary": "Returns array of indices of the maximum values along the given axis.\nMasked values are treated as if they had the value fill_value.\n\nParameters\n\naxis{None, integer}If None, the index is into the flattened array, otherwise along\nthe specified axis\n\nfill_value{var}, optionalValue used to fill in the masked values", "description": "", "code-info": {"name": "numpy.ma.argmax", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arctanh", "summary": "Inverse hyperbolic tangent element-wise.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.arctanh", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arctan2", "summary": "Element-wise arc tangent of x1/x2 choosing the quadrant correctly.\nThe quadrant (i.e., branch) is chosen so that arctan2(x1, x2) is\nthe signed angle in radians between the ray ending at the origin and\npassing through the point (1,0), and the ray ending at the origin and\npassing through the point (x2, x1)", "description": "", "code-info": {"name": "numpy.arctan2", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arcsinh", "summary": "Inverse hyperbolic sine element-wise.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.arcsinh", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arcsin", "summary": "Inverse sine, element-wise.\n\nParameters\n\nxarray_likey-coordinate on the unit circle.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.arcsin", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arccosh", "summary": "Inverse hyperbolic cosine, element-wise.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.arccosh", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arctan", "summary": "Trigonometric inverse tangent, element-wise.\nThe inverse of tan, so that if y = tan(x) then x = arctan(y).\n\nParameters\n\nxarray_like\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.arctan", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.arccos", "summary": "Trigonometric inverse cosine, element-wise.\nThe inverse of cos so that, if y = cos(x), then x = arccos(y).\n\nParameters\n\nxarray_likex-coordinate on the unit circle.\nFor real arguments, the domain is [-1, 1].\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.arccos", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.arange([start, ]stop, [step, ]dtype=None)", "item_id": "numpy.arange", "summary": "Return evenly spaced values within a given interval.\nValues are generated within the half-open interval [start, stop)\n(in other words, the interval including start but excluding stop).\nFor integer arguments the function is equivalent to the Python built-in\nrange function, but returns an ndarray rather than a list.\nWhen using a non-integer step, such as 0.1, the results will often not\nbe consistent", "description": "", "code-info": {"name": "numpy.arange", "parameters": [{"name": "[start", "is_optional": false, "type": "others", "description": ""}, {"name": " ]stop", "is_optional": false, "type": "others", "description": ""}, {"name": " [step", "is_optional": false, "type": "others", "description": ""}, {"name": " ]dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.arange([start, ]stop, [step, ]dtype=None)", "item_id": "numpy.ma.arange", "summary": "Return evenly spaced values within a given interval.\nValues are generated within the half-open interval [start, stop)\n(in other words, the interval including start but excluding stop).\nFor integer arguments the function is equivalent to the Python built-in\nrange function, but returns an ndarray rather than a list.\nWhen using a non-integer step, such as 0.1, the results will often not\nbe consistent", "description": "", "code-info": {"name": "numpy.ma.arange", "parameters": [{"name": "[start", "is_optional": false, "type": "others", "description": ""}, {"name": " ]stop", "is_optional": false, "type": "others", "description": ""}, {"name": " [step", "is_optional": false, "type": "others", "description": ""}, {"name": " ]dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.apply_along_axis(func1d, axis, arr, *args, **kwargs)", "item_id": "numpy.ma.apply_along_axis", "summary": "Apply a function to 1-D slices along the given axis.\nExecute func1d(a, *args) where func1d operates on 1-D arrays and a\nis a 1-D slice of arr along axis.\nThis is equivalent to (but faster than) the following use of ndindex and\ns_, which sets each of ii, jj, and kk to a tuple of indices:\nNi, Nk = a.shape[:axis], a.shape[axis+1:]\nfor ii in ndindex(Ni):\n    for kk in ndindex(Nk):\n        f = func1d(arr[ii + s_[:,] + kk])\n        Nj = f.shape\n        for jj in ndindex(Nj):\n            out[ii + jj + kk] = f[jj]\n\n\nEquivalently, eliminating the inner loop, this can be expressed as:\nNi, Nk = a.shape[:axis], a.shape[axis+1:]\nfor ii in ndindex(Ni):\n    for kk in ndindex(Nk):\n        out[ii + s_[...,] + kk] = func1d(arr[ii + s_[:,] + kk])\n\n\n\nParameters\n\nfunc1dfunction (M,) -&gt; (Nj\u2026)This function should accept 1-D arrays", "description": "", "code-info": {"name": "numpy.ma.apply_along_axis", "parameters": [{"name": "func1d", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}, {"name": " arr", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.apply_over_axes(func, a, axes)", "item_id": "numpy.apply_over_axes", "summary": "Apply a function repeatedly over multiple axes.\nfunc is called as res = func(a, axis), where axis is the first\nelement of axes", "description": "", "code-info": {"name": "numpy.apply_over_axes", "parameters": [{"name": "func", "is_optional": false, "type": "others", "description": ""}, {"name": " a", "is_optional": false, "type": "others", "description": ""}, {"name": " axes", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.lib.recfunctions.append_fields(base, names, data, dtypes=None, fill_value=-1, usemask=True, asrecarray=False)", "item_id": "numpy.lib.recfunctions.append_fields", "summary": "Add new fields to an existing array.\nThe names of the fields are given with the names arguments,\nthe corresponding values with the data arguments.\nIf a single field is appended, names, data and dtypes do not have\nto be lists but just values.\n\nParameters\n\nbasearrayInput array to extend.\n\nnamesstring, sequenceString or sequence of strings corresponding to the names\nof the new fields.\n\ndataarray or sequence of arraysArray or sequence of arrays storing the fields to add to the base.\n\ndtypessequence of datatypes, optionalDatatype or sequence of datatypes.\nIf None, the datatypes are estimated from the data.\n\nfill_value{float}, optionalFilling value used to pad missing data on the shorter arrays.\n\nusemask{False, True}, optionalWhether to return a masked array or not.\n\nasrecarray{False, True}, optionalWhether to return a recarray (MaskedRecords) or not.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.lib.recfunctions.append_fields", "parameters": [{"name": "base", "is_optional": false, "type": "others", "description": ""}, {"name": " names", "is_optional": false, "type": "others", "description": ""}, {"name": " data", "is_optional": false, "type": "others", "description": ""}, {"name": " dtypes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": " usemask", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " asrecarray", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.append(a, b, axis=None)", "item_id": "numpy.ma.append", "summary": "Append values to the end of an array.\n\nNew in version 1.9.0.\n\n\nParameters\n\naarray_likeValues are appended to a copy of this array.\n\nbarray_likeThese values are appended to a copy of a", "description": "", "code-info": {"name": "numpy.ma.append", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.apply_along_axis(func1d, axis, arr, *args, **kwargs)", "item_id": "numpy.apply_along_axis", "summary": "Apply a function to 1-D slices along the given axis.\nExecute func1d(a, *args) where func1d operates on 1-D arrays and a\nis a 1-D slice of arr along axis.\nThis is equivalent to (but faster than) the following use of ndindex and\ns_, which sets each of ii, jj, and kk to a tuple of indices:\nNi, Nk = a.shape[:axis], a.shape[axis+1:]\nfor ii in ndindex(Ni):\n    for kk in ndindex(Nk):\n        f = func1d(arr[ii + s_[:,] + kk])\n        Nj = f.shape\n        for jj in ndindex(Nj):\n            out[ii + jj + kk] = f[jj]\n\n\nEquivalently, eliminating the inner loop, this can be expressed as:\nNi, Nk = a.shape[:axis], a.shape[axis+1:]\nfor ii in ndindex(Ni):\n    for kk in ndindex(Nk):\n        out[ii + s_[...,] + kk] = func1d(arr[ii + s_[:,] + kk])\n\n\n\nParameters\n\nfunc1dfunction (M,) -&gt; (Nj\u2026)This function should accept 1-D arrays", "description": "", "code-info": {"name": "numpy.apply_along_axis", "parameters": [{"name": "func1d", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": false, "type": "others", "description": ""}, {"name": " arr", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.append(arr, values, axis=None)", "item_id": "numpy.append", "summary": "Append values to the end of an array.\n\nParameters\n\narrarray_likeValues are appended to a copy of this array.\n\nvaluesarray_likeThese values are appended to a copy of arr", "description": "", "code-info": {"name": "numpy.append", "parameters": [{"name": "arr", "is_optional": false, "type": "others", "description": ""}, {"name": " values", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.record.any()", "item_id": "numpy.record.any", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.any", "parameters": []}},
{"code": "numpy.ma.MaskType.any()", "item_id": "numpy.ma.MaskType.any", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.any", "parameters": []}},
{"code": "numpy.recarray.any(axis=None, out=None, keepdims=False)", "item_id": "numpy.recarray.any", "summary": "Returns True if any of the elements of a evaluate to True.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.any", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.any(axis=None, out=None, keepdims=False)", "item_id": "numpy.ndarray.any", "summary": "Returns True if any of the elements of a evaluate to True.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.any", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.any(self, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.any", "summary": "Returns True if any of the elements of a evaluate to True.\nMasked values are considered as False during computation.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.ndarray.anycorresponding function for ndarrays\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.any", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.generic.any()", "item_id": "numpy.generic.any", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.any", "parameters": []}},
{"code": "numpy.ma.masked_array.any(self, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.any", "summary": "Returns True if any of the elements of a evaluate to True.\nMasked values are considered as False during computation.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.ndarray.anycorresponding function for ndarrays\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.any", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.matrix.any(self, axis=None, out=None)", "item_id": "numpy.matrix.any", "summary": "Test whether any array element along a given axis evaluates to True.\nRefer to numpy.any for full documentation.\n\nParameters\n\naxisint, optionalAxis along which logical OR is performed\n\noutndarray, optionalOutput to existing array instead of creating new one, must have\nsame shape as expected output\n\n\n\nReturns\n\nanybool, ndarrayReturns a single bool if axis is None; otherwise,\nreturns ndarray\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.any", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.memmap.any(axis=None, out=None, keepdims=False)", "item_id": "numpy.memmap.any", "summary": "Returns True if any of the elements of a evaluate to True.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.any", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.chararray.any(axis=None, out=None, keepdims=False)", "item_id": "numpy.chararray.any", "summary": "Returns True if any of the elements of a evaluate to True.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.any", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.any(axis=None, out=None, keepdims=False)", "item_id": "numpy.char.chararray.any", "summary": "Returns True if any of the elements of a evaluate to True.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.any", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.any(a, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.any", "summary": "Test whether any array element along a given axis evaluates to True.\nReturns single boolean unless axis is not None\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which a logical OR reduction is performed.\nThe default (axis=None) is to perform a logical OR over all\nthe dimensions of the input array", "description": "", "code-info": {"name": "numpy.any", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.any(self, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.any", "summary": "Returns True if any of the elements of a evaluate to True.\nMasked values are considered as False during computation.\nRefer to numpy.any for full documentation.\n\nSee also\n\nnumpy.ndarray.anycorresponding function for ndarrays\n\nnumpy.anyequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ma.any", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.anomalies(self, axis=None, dtype=None)", "item_id": "numpy.ma.anomalies", "summary": "Compute the anomalies (deviations from the arithmetic mean)\nalong the given axis.\nReturns an array of anomalies, with the same shape as the input and\nwhere the arithmetic mean is computed along the given axis.\n\nParameters\n\naxisint, optionalAxis over which the anomalies are taken.\nThe default is to use the mean of the flattened array as reference.\n\ndtypedtype, optional\nType to use in computing the variance", "description": "", "code-info": {"name": "numpy.ma.anomalies", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.anom(self, axis=None, dtype=None)", "item_id": "numpy.ma.MaskedArray.anom", "summary": "Compute the anomalies (deviations from the arithmetic mean)\nalong the given axis.\nReturns an array of anomalies, with the same shape as the input and\nwhere the arithmetic mean is computed along the given axis.\n\nParameters\n\naxisint, optionalAxis over which the anomalies are taken.\nThe default is to use the mean of the flattened array as reference.\n\ndtypedtype, optional\nType to use in computing the variance", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.anom", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.masked_array.anom(self, axis=None, dtype=None)", "item_id": "numpy.ma.masked_array.anom", "summary": "Compute the anomalies (deviations from the arithmetic mean)\nalong the given axis.\nReturns an array of anomalies, with the same shape as the input and\nwhere the arithmetic mean is computed along the given axis.\n\nParameters\n\naxisint, optionalAxis over which the anomalies are taken.\nThe default is to use the mean of the flattened array as reference.\n\ndtypedtype, optional\nType to use in computing the variance", "description": "", "code-info": {"name": "numpy.ma.masked_array.anom", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.anom(self, axis=None, dtype=None)", "item_id": "numpy.ma.anom", "summary": "Compute the anomalies (deviations from the arithmetic mean)\nalong the given axis.\nReturns an array of anomalies, with the same shape as the input and\nwhere the arithmetic mean is computed along the given axis.\n\nParameters\n\naxisint, optionalAxis over which the anomalies are taken.\nThe default is to use the mean of the flattened array as reference.\n\ndtypedtype, optional\nType to use in computing the variance", "description": "", "code-info": {"name": "numpy.ma.anom", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.angle(z, deg=False)", "item_id": "numpy.angle", "summary": "Return the angle of the complex argument.\n\nParameters\n\nzarray_likeA complex number or sequence of complex numbers.\n\ndegbool, optionalReturn angle in degrees if True, radians if False (default).\n\n\n\nReturns\n\nanglendarray or scalarThe counterclockwise angle from the positive real axis on the complex\nplane in the range (-pi, pi], with dtype as numpy.float64.\n\n..versionchanged:: 1.16.0This function works on subclasses of ndarray like ma.array.\n\n\n\n\n\n\n\nSee also\narctan2, absolute\n\nExamples\n&gt;&gt;&gt; np.angle([1.0, 1.0j, 1+1j])               # in radians\narray([ 0", "description": "", "code-info": {"name": "numpy.angle", "parameters": [{"name": "z", "is_optional": false, "type": "others", "description": ""}, {"name": " deg", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.amin(a, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)", "item_id": "numpy.amin", "summary": "Return the minimum of an array or minimum along an axis.\n\nParameters\n\naarray_likeInput data.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which to operate", "description": "", "code-info": {"name": "numpy.amin", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.amax(a, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)", "item_id": "numpy.amax", "summary": "Return the maximum of an array or maximum along an axis.\n\nParameters\n\naarray_likeInput data.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which to operate", "description": "", "code-info": {"name": "numpy.amax", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " initial", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}, {"name": " where", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.allequal(a, b, fill_value=True)", "item_id": "numpy.ma.allequal", "summary": "Return True if all entries of a and b are equal, using\nfill_value as a truth value where either or both are masked.\n\nParameters\n\na, barray_likeInput arrays to compare.\n\nfill_valuebool, optionalWhether masked values in a or b are considered equal (True) or not\n(False).\n\n\n\nReturns\n\nyboolReturns True if the two arrays are equal within the given\ntolerance, False otherwise", "description": "", "code-info": {"name": "numpy.ma.allequal", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"code": "numpy.ma.allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08)", "item_id": "numpy.ma.allclose", "summary": "Returns True if two arrays are element-wise equal within a tolerance.\nThis function is equivalent to allclose except that masked values\nare treated as equal (default) or unequal, depending on the masked_equal\nargument.\n\nParameters\n\na, barray_likeInput arrays to compare.\n\nmasked_equalbool, optionalWhether masked values in a and b are considered equal (True) or not\n(False)", "description": "", "code-info": {"name": "numpy.ma.allclose", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " masked_equal", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " rtol", "is_optional": true, "type": "others", "default_value": "1e-05", "description": ""}, {"name": " atol", "is_optional": true, "type": "others", "default_value": "1e-08", "description": ""}]}},
{"code": "numpy.distutils.misc_util.get_numpy_include_dirs()", "item_id": "numpy.distutils.misc_util.get_numpy_include_dirs", "summary": "", "description": "", "code-info": {"name": "numpy.distutils.misc_util.get_numpy_include_dirs", "parameters": []}},
{"code": "numpy.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)", "item_id": "numpy.allclose", "summary": "Returns True if two arrays are element-wise equal within a tolerance.\nThe tolerance values are positive, typically very small numbers", "description": "", "code-info": {"name": "numpy.allclose", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " b", "is_optional": false, "type": "others", "description": ""}, {"name": " rtol", "is_optional": true, "type": "others", "default_value": "1e-05", "description": ""}, {"name": " atol", "is_optional": true, "type": "others", "default_value": "1e-08", "description": ""}, {"name": " equal_nan", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.record.all()", "item_id": "numpy.record.all", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.record.all", "parameters": []}},
{"code": "numpy.recarray.all(axis=None, out=None, keepdims=False)", "item_id": "numpy.recarray.all", "summary": "Returns True if all elements evaluate to True.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.allequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.recarray.all", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ndarray.all(axis=None, out=None, keepdims=False)", "item_id": "numpy.ndarray.all", "summary": "Returns True if all elements evaluate to True.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.allequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.ndarray.all", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.matrix.all(self, axis=None, out=None)", "item_id": "numpy.matrix.all", "summary": "Test whether all matrix elements along a given axis evaluate to True.\n\nParameters\n\nSee `numpy.all` for complete descriptions\n\n\n\n\nSee also\nnumpy.all\n\nNotes\nThis is the same as ndarray.all, but it returns a matrix object.\nExamples\n&gt;&gt;&gt; x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n&gt;&gt;&gt; y = x[0]; y\nmatrix([[0, 1, 2, 3]])\n&gt;&gt;&gt; (x == y)\nmatrix([[ True,  True,  True,  True],\n        [False, False, False, False],\n        [False, False, False, False]])\n&gt;&gt;&gt; (x == y).all()\nFalse\n&gt;&gt;&gt; (x == y).all(0)\nmatrix([[False, False, False, False]])\n&gt;&gt;&gt; (x == y).all(1)\nmatrix([[ True],\n        [False],\n        [False]])\n\n\n", "description": "", "code-info": {"name": "numpy.matrix.all", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.ma.MaskType.all()", "item_id": "numpy.ma.MaskType.all", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.ma.MaskType.all", "parameters": []}},
{"code": "numpy.generic.all()", "item_id": "numpy.generic.all", "summary": "Not implemented (virtual attribute)\nClass generic exists solely to derive numpy scalars from, and possesses,\nalbeit unimplemented, all the attributes of the ndarray class\nso as to provide a uniform API.\nSee also the corresponding attribute of the derived class of interest.\n", "description": "", "code-info": {"name": "numpy.generic.all", "parameters": []}},
{"code": "numpy.memmap.all(axis=None, out=None, keepdims=False)", "item_id": "numpy.memmap.all", "summary": "Returns True if all elements evaluate to True.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.allequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.memmap.all", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.masked_array.all(self, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.masked_array.all", "summary": "Returns True if all elements evaluate to True.\nThe output array is masked where all the values along the given axis\nare masked: if the output would have been a scalar and that all the\nvalues are masked, then the output is masked.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.ndarray.allcorresponding function for ndarrays\n\nnumpy.allequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; np.ma.array([1,2,3]).all()\nTrue\n&gt;&gt;&gt; a = np.ma.array([1,2,3], mask=True)\n&gt;&gt;&gt; (a.all() is np.ma.masked)\nTrue\n\n\n", "description": "", "code-info": {"name": "numpy.ma.masked_array.all", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.all(self, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.MaskedArray.all", "summary": "Returns True if all elements evaluate to True.\nThe output array is masked where all the values along the given axis\nare masked: if the output would have been a scalar and that all the\nvalues are masked, then the output is masked.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.ndarray.allcorresponding function for ndarrays\n\nnumpy.allequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; np.ma.array([1,2,3]).all()\nTrue\n&gt;&gt;&gt; a = np.ma.array([1,2,3], mask=True)\n&gt;&gt;&gt; (a.all() is np.ma.masked)\nTrue\n\n\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.all", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.chararray.all(axis=None, out=None, keepdims=False)", "item_id": "numpy.chararray.all", "summary": "Returns True if all elements evaluate to True.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.allequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.chararray.all", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.char.chararray.all(axis=None, out=None, keepdims=False)", "item_id": "numpy.char.chararray.all", "summary": "Returns True if all elements evaluate to True.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.allequivalent function\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.chararray.all", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.all(a, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.all", "summary": "Test whether all array elements along a given axis evaluate to True.\n\nParameters\n\naarray_likeInput array or object that can be converted to an array.\n\naxisNone or int or tuple of ints, optionalAxis or axes along which a logical AND reduction is performed.\nThe default (axis=None) is to perform a logical AND over all\nthe dimensions of the input array", "description": "", "code-info": {"name": "numpy.all", "parameters": [{"name": "a", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.ma.all(self, axis=None, out=None, keepdims=&lt;no value&gt;)", "item_id": "numpy.ma.all", "summary": "Returns True if all elements evaluate to True.\nThe output array is masked where all the values along the given axis\nare masked: if the output would have been a scalar and that all the\nvalues are masked, then the output is masked.\nRefer to numpy.all for full documentation.\n\nSee also\n\nnumpy.ndarray.allcorresponding function for ndarrays\n\nnumpy.allequivalent function\n\n\n\nExamples\n&gt;&gt;&gt; np.ma.array([1,2,3]).all()\nTrue\n&gt;&gt;&gt; a = np.ma.array([1,2,3], mask=True)\n&gt;&gt;&gt; (a.all() is np.ma.masked)\nTrue\n\n\n", "description": "", "code-info": {"name": "numpy.ma.all", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keepdims", "is_optional": true, "type": "others", "default_value": "&lt;no value&gt;", "description": ""}]}},
{"code": "numpy.random.PCG64.advance(delta)", "item_id": "numpy.random.PCG64.advance", "summary": "Advance the underlying RNG as-if delta draws have occurred.\n\nParameters\n\ndeltainteger, positiveNumber of draws to advance the RNG", "description": "", "code-info": {"name": "numpy.random.PCG64.advance", "parameters": [{"name": "delta", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.random.Philox.advance(delta)", "item_id": "numpy.random.Philox.advance", "summary": "Advance the underlying RNG as-if delta draws have occurred.\n\nParameters\n\ndeltainteger, positiveNumber of draws to advance the RNG", "description": "", "code-info": {"name": "numpy.random.Philox.advance", "parameters": [{"name": "delta", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.char.add(x1, x2)", "item_id": "numpy.char.add", "summary": "Return element-wise string concatenation for two arrays of str or unicode.\nArrays x1 and x2 must have the same shape.\n\nParameters\n\nx1array_like of str or unicodeInput array.\n\nx2array_like of str or unicodeInput array.\n\n\n\nReturns\n\naddndarrayOutput array of string_ or unicode_, depending on input types\nof the same shape as x1 and x2.\n\n\n\n\n", "description": "", "code-info": {"name": "numpy.char.add", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.add", "summary": "Add arguments element-wise.\n\nParameters\n\nx1, x2array_likeThe arrays to be added", "description": "", "code-info": {"name": "numpy.add", "parameters": [{"name": "x1", "is_optional": false, "type": "others", "description": ""}, {"name": " x2", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.DataSource.abspath(self, path)", "item_id": "numpy.DataSource.abspath", "summary": "Return absolute path of file in the DataSource directory.\nIf path is an URL, then abspath will return either the location\nthe file exists locally or the location it would exist when opened\nusing the open method.\n\nParameters\n\npathstrCan be a local file or a remote URL.\n\n\n\nReturns\n\noutstrComplete path, including the DataSource destination directory.\n\n\n\n\nNotes\nThe functionality is based on os.path.abspath.\n", "description": "", "code-info": {"name": "numpy.DataSource.abspath", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " path", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ufunc.accumulate(array, axis=0, dtype=None, out=None)", "item_id": "numpy.ufunc.accumulate", "summary": "Accumulate the result of applying the operator to all elements.\nFor a one-dimensional array, accumulate produces results equivalent to:\nr = np.empty(len(A))\nt = op.identity        # op = the ufunc being applied to A's  elements\nfor i in range(len(A)):\n    t = op(t, A[i])\n    r[i] = t\nreturn r\n\n\nFor example, add.accumulate() is equivalent to np.cumsum().\nFor a multi-dimensional array, accumulate is applied along only one\naxis (axis zero by default; see Examples below) so repeated use is\nnecessary if one wants to accumulate over multiple axes.\n\nParameters\n\narrayarray_likeThe array to act on.\n\naxisint, optionalThe axis along which to apply the accumulation; default is zero.\n\ndtypedata-type code, optionalThe data-type used to represent the intermediate results", "description": "", "code-info": {"name": "numpy.ufunc.accumulate", "parameters": [{"name": "array", "is_optional": false, "type": "others", "description": ""}, {"name": " axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])", "item_id": "numpy.absolute", "summary": "Calculate the absolute value element-wise.\nnp.abs is a shorthand for this function.\n\nParameters\n\nxarray_likeInput array.\n\noutndarray, None, or tuple of ndarray and None, optionalA location into which the result is stored", "description": "", "code-info": {"name": "numpy.absolute", "parameters": [{"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}, {"name": " out", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " *", "is_optional": false, "type": "others", "description": ""}, {"name": " where", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " casting", "is_optional": true, "type": "string", "default_value": "'same_kind'", "description": ""}, {"name": " order", "is_optional": true, "type": "string", "default_value": "'K'", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " subok", "is_optional": true, "type": "others", "default_value": "True[", "description": ""}, {"name": " signature", "is_optional": false, "type": "others", "description": ""}, {"name": " extobj]", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__xor__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__xor__", "summary": "Return self^value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__xor__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__xor__(self, value, /)", "item_id": "numpy.ndarray.__xor__", "summary": "Return self^value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__xor__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "c.PyArray_NDIM(PyArrayObject\u00a0*arr)", "item_id": "c.PyArray_NDIM", "summary": "The number of dimensions in the array.\n", "description": "", "code-info": {"name": "c.PyArray_NDIM", "parameters": [{"name": "PyArrayObject\u00a0*arr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__truediv__(self, value, /)", "item_id": "numpy.ndarray.__truediv__", "summary": "Return self/value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__truediv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__truediv__(self, other)", "item_id": "numpy.ma.MaskedArray.__truediv__", "summary": "Divide other into self, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__truediv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__sub__(self, value, /)", "item_id": "numpy.ndarray.__sub__", "summary": "Return self-value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__sub__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__sub__(self, other)", "item_id": "numpy.ma.MaskedArray.__sub__", "summary": "Subtract other from self, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__sub__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__str__(self, /)", "item_id": "numpy.ndarray.__str__", "summary": "Return str(self).\n", "description": "", "code-info": {"name": "numpy.ndarray.__str__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__str__(self)", "item_id": "numpy.ma.MaskedArray.__str__", "summary": "Return str(self).\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__str__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__setstate__(state, /)", "item_id": "numpy.ndarray.__setstate__", "summary": "For unpickling.\nThe state argument must be a sequence that contains the following\nelements:\n\nParameters\n\nversionintoptional pickle version", "description": "", "code-info": {"name": "numpy.ndarray.__setstate__", "parameters": [{"name": "state", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.__setstate__()", "item_id": "numpy.generic.__setstate__", "summary": "", "description": "", "code-info": {"name": "numpy.generic.__setstate__", "parameters": []}},
{"code": "numpy.dtype.__setstate__()", "item_id": "numpy.dtype.__setstate__", "summary": "", "description": "", "code-info": {"name": "numpy.dtype.__setstate__", "parameters": []}},
{"code": "numpy.ma.MaskedArray.__setmask__(self, mask, copy=False)", "item_id": "numpy.ma.MaskedArray.__setmask__", "summary": "Set the mask.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__setmask__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " mask", "is_optional": false, "type": "others", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__setstate__(self, state)", "item_id": "numpy.ma.MaskedArray.__setstate__", "summary": "Restore the internal state of the masked array, for\npickling purposes", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__setstate__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " state", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__setitem__(self, key, value, /)", "item_id": "numpy.ndarray.__setitem__", "summary": "Set self[key] to value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__setitem__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " key", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__setitem__(self, indx, value)", "item_id": "numpy.ma.MaskedArray.__setitem__", "summary": "x.__setitem__(i, y) &lt;==&gt; x[i]=y\nSet item described by index", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__setitem__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " indx", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rxor__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rxor__", "summary": "Return value^self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rxor__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__rshift__(self, value, /)", "item_id": "numpy.ndarray.__rshift__", "summary": "Return self&gt;&gt;value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__rshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rshift__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rshift__", "summary": "Return self&gt;&gt;value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rtruediv__(self, other)", "item_id": "numpy.ma.MaskedArray.__rtruediv__", "summary": "Divide self into other, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rtruediv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rrshift__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rrshift__", "summary": "Return value&gt;&gt;self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rrshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rpow__(self, other)", "item_id": "numpy.ma.MaskedArray.__rpow__", "summary": "Raise other to the power self, masking the potential NaNs/Infs\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rpow__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rsub__(self, other)", "item_id": "numpy.ma.MaskedArray.__rsub__", "summary": "Subtract self from other, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rsub__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ror__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__ror__", "summary": "Return value|self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ror__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rmul__(self, other)", "item_id": "numpy.ma.MaskedArray.__rmul__", "summary": "Multiply other by self, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rmul__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__repr__(self, /)", "item_id": "numpy.ndarray.__repr__", "summary": "Return repr(self).\n", "description": "", "code-info": {"name": "numpy.ndarray.__repr__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rlshift__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rlshift__", "summary": "Return value&lt;&lt;self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rlshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__repr__(self)", "item_id": "numpy.ma.MaskedArray.__repr__", "summary": "Literal string representation.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__repr__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__reduce__()", "item_id": "numpy.ndarray.__reduce__", "summary": "For pickling.\n", "description": "", "code-info": {"name": "numpy.ndarray.__reduce__", "parameters": []}},
{"code": "numpy.ma.MaskedArray.__reduce__(self)", "item_id": "numpy.ma.MaskedArray.__reduce__", "summary": "Return a 3-tuple for pickling a MaskedArray.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__reduce__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rmod__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rmod__", "summary": "Return value%self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rmod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.generic.__reduce__()", "item_id": "numpy.generic.__reduce__", "summary": "Helper for pickle.\n", "description": "", "code-info": {"name": "numpy.generic.__reduce__", "parameters": []}},
{"code": "numpy.dtype.__reduce__()", "item_id": "numpy.dtype.__reduce__", "summary": "Helper for pickle.\n", "description": "", "code-info": {"name": "numpy.dtype.__reduce__", "parameters": []}},
{"code": "numpy.ma.MaskedArray.__rdivmod__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rdivmod__", "summary": "Return divmod(value, self).\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rdivmod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__rand__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__rand__", "summary": "Return value&amp;self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__rand__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__pow__(self, value, mod=None, /)", "item_id": "numpy.ndarray.__pow__", "summary": "Return pow(self, value, mod).\n", "description": "", "code-info": {"name": "numpy.ndarray.__pow__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " mod", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__pow__(self, other)", "item_id": "numpy.ma.MaskedArray.__pow__", "summary": "Raise self to the power other, masking the potential NaNs/Infs\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__pow__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__pos__(self, /)", "item_id": "numpy.ndarray.__pos__", "summary": "+self\n", "description": "", "code-info": {"name": "numpy.ndarray.__pos__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__or__(self, value, /)", "item_id": "numpy.ndarray.__or__", "summary": "Return self|value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__or__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__radd__(self, other)", "item_id": "numpy.ma.MaskedArray.__radd__", "summary": "Add other to self, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__radd__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__or__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__or__", "summary": "Return self|value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__or__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__new__(*args, **kwargs)", "item_id": "numpy.ndarray.__new__", "summary": "Create and return a new object", "description": "", "code-info": {"name": "numpy.ndarray.__new__", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__new__(cls, data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None, **options)", "item_id": "numpy.ma.MaskedArray.__new__", "summary": "Create a new masked array from scratch.\nNotes\nA masked array can also be created by taking a .view(MaskedArray).\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__new__", "parameters": [{"name": "cls", "is_optional": false, "type": "others", "description": ""}, {"name": " data", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " mask", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": " subok", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " ndmin", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": " fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " keep_mask", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " hard_mask", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " shrink", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": " order", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": " **options", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ne__(self, value, /)", "item_id": "numpy.ndarray.__ne__", "summary": "Return self!=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ne__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ne__(self, other)", "item_id": "numpy.ma.MaskedArray.__ne__", "summary": "Check whether other does not equal self elementwise.\nWhen either of the elements is masked, the result is masked as well,\nbut the underlying boolean data are still set, with self and other\nconsidered equal if both are masked, and unequal otherwise.\nFor structured arrays, all fields are combined, with masked values\nignored", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ne__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__mod__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__mod__", "summary": "Return self%value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__mod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__neg__(self, /)", "item_id": "numpy.ndarray.__neg__", "summary": "-self\n", "description": "", "code-info": {"name": "numpy.ndarray.__neg__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__mul__(self, value, /)", "item_id": "numpy.ndarray.__mul__", "summary": "Return self*value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__mul__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__mul__(self, other)", "item_id": "numpy.ma.MaskedArray.__mul__", "summary": "Multiply self by other, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__mul__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__mod__(self, value, /)", "item_id": "numpy.ndarray.__mod__", "summary": "Return self%value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__mod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__matmul__(self, value, /)", "item_id": "numpy.ndarray.__matmul__", "summary": "Return self@value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__matmul__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__lt__(self, value, /)", "item_id": "numpy.ndarray.__lt__", "summary": "Return self&lt;value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__lt__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__lt__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__lt__", "summary": "Return self&lt;value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__lt__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__long__(self)", "item_id": "numpy.ma.MaskedArray.__long__", "summary": "Convert to long.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__long__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__len__(self, /)", "item_id": "numpy.ndarray.__len__", "summary": "Return len(self).\n", "description": "", "code-info": {"name": "numpy.ndarray.__len__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__lshift__(self, value, /)", "item_id": "numpy.ndarray.__lshift__", "summary": "Return self&lt;&lt;value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__lshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__le__(self, value, /)", "item_id": "numpy.ndarray.__le__", "summary": "Return self&lt;=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__le__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__lshift__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__lshift__", "summary": "Return self&lt;&lt;value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__lshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__len__(self, /)", "item_id": "numpy.ma.MaskedArray.__len__", "summary": "Return len(self).\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__len__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__le__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__le__", "summary": "Return self&lt;=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__le__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ixor__(self, value, /)", "item_id": "numpy.ndarray.__ixor__", "summary": "Return self^=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ixor__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__itruediv__(self, value, /)", "item_id": "numpy.ndarray.__itruediv__", "summary": "Return self/=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__itruediv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ixor__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__ixor__", "summary": "Return self^=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ixor__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__itruediv__(self, other)", "item_id": "numpy.ma.MaskedArray.__itruediv__", "summary": "True divide self by other in-place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__itruediv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ipow__(self, value, /)", "item_id": "numpy.ndarray.__ipow__", "summary": "Return self**=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ipow__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__isub__(self, value, /)", "item_id": "numpy.ndarray.__isub__", "summary": "Return self-=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__isub__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__isub__(self, other)", "item_id": "numpy.ma.MaskedArray.__isub__", "summary": "Subtract other from self in-place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__isub__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__irshift__(self, value, /)", "item_id": "numpy.ndarray.__irshift__", "summary": "Return self&gt;&gt;=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__irshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__irshift__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__irshift__", "summary": "Return self&gt;&gt;=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__irshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ipow__(self, other)", "item_id": "numpy.ma.MaskedArray.__ipow__", "summary": "Raise self to the power other, in place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ipow__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ior__(self, value, /)", "item_id": "numpy.ndarray.__ior__", "summary": "Return self|=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ior__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__int__(self)", "item_id": "numpy.ma.MaskedArray.__int__", "summary": "Convert to int.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__int__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__imul__(self, other)", "item_id": "numpy.ma.MaskedArray.__imul__", "summary": "Multiply self by other in-place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__imul__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__invert__(self, /)", "item_id": "numpy.ndarray.__invert__", "summary": "~self\n", "description": "", "code-info": {"name": "numpy.ndarray.__invert__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__int__(self)", "item_id": "numpy.ndarray.__int__", "summary": "", "description": "", "code-info": {"name": "numpy.ndarray.__int__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__imul__(self, value, /)", "item_id": "numpy.ndarray.__imul__", "summary": "Return self*=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__imul__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__imod__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__imod__", "summary": "Return self%=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__imod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__imod__(self, value, /)", "item_id": "numpy.ndarray.__imod__", "summary": "Return self%=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__imod__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ior__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__ior__", "summary": "Return self|=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ior__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ilshift__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__ilshift__", "summary": "Return self&lt;&lt;=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ilshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ilshift__(self, value, /)", "item_id": "numpy.ndarray.__ilshift__", "summary": "Return self&lt;&lt;=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ilshift__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__ifloordiv__(self, value, /)", "item_id": "numpy.ndarray.__ifloordiv__", "summary": "Return self//=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__ifloordiv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__ifloordiv__(self, other)", "item_id": "numpy.ma.MaskedArray.__ifloordiv__", "summary": "Floor divide self by other in-place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__ifloordiv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__idiv__(self, other)", "item_id": "numpy.ma.MaskedArray.__idiv__", "summary": "Divide self by other in-place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__idiv__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__iand__(self, value, /)", "item_id": "numpy.ndarray.__iand__", "summary": "Return self&amp;=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__iand__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__iand__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__iand__", "summary": "Return self&amp;=value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__iand__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__iadd__(self, other)", "item_id": "numpy.ma.MaskedArray.__iadd__", "summary": "Add other to self in-place.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__iadd__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__gt__(self, value, /)", "item_id": "numpy.ndarray.__gt__", "summary": "Return self&gt;value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__gt__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__iadd__(self, value, /)", "item_id": "numpy.ndarray.__iadd__", "summary": "Return self+=value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__iadd__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__gt__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__gt__", "summary": "Return self&gt;value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__gt__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__getstate__(self)", "item_id": "numpy.ma.MaskedArray.__getstate__", "summary": "Return the internal state of the masked array, for pickling\npurposes.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__getstate__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__getitem__(self, key, /)", "item_id": "numpy.ndarray.__getitem__", "summary": "Return self[key].\n", "description": "", "code-info": {"name": "numpy.ndarray.__getitem__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " key", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__copy__()", "item_id": "numpy.ndarray.__copy__", "summary": "Used if copy.copy is called on an array", "description": "", "code-info": {"name": "numpy.ndarray.__copy__", "parameters": []}},
{"code": "numpy.ma.MaskedArray.__copy__()", "item_id": "numpy.ma.MaskedArray.__copy__", "summary": "Used if copy.copy is called on an array", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__copy__", "parameters": []}},
{"code": "numpy.ndarray.__contains__(self, key, /)", "item_id": "numpy.ndarray.__contains__", "summary": "Return key in self.\n", "description": "", "code-info": {"name": "numpy.ndarray.__contains__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " key", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__contains__(self, key, /)", "item_id": "numpy.ma.MaskedArray.__contains__", "summary": "Return key in self.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__contains__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " key", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.testing.suppress_warnings.__call__(self, func)", "item_id": "numpy.testing.suppress_warnings.__call__", "summary": "Function decorator to apply certain suppressions to a whole\nfunction.\n", "description": "", "code-info": {"name": "numpy.testing.suppress_warnings.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " func", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.vectorize.__call__(self, *args, **kwargs)", "item_id": "numpy.vectorize.__call__", "summary": "Return arrays with the results of pyfunc broadcast (vectorized) over\nargs and kwargs not in excluded.\n", "description": "", "code-info": {"name": "numpy.vectorize.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " *args", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.polynomial.Polynomial.__call__(self, arg)", "item_id": "numpy.polynomial.polynomial.Polynomial.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.polynomial.polynomial.Polynomial.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " arg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite.Hermite.__call__(self, arg)", "item_id": "numpy.polynomial.hermite.Hermite.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite.Hermite.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " arg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.legendre.Legendre.__call__(self, arg)", "item_id": "numpy.polynomial.legendre.Legendre.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.polynomial.legendre.Legendre.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " arg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.laguerre.Laguerre.__call__(self, arg)", "item_id": "numpy.polynomial.laguerre.Laguerre.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.polynomial.laguerre.Laguerre.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " arg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.hermite_e.HermiteE.__call__(self, arg)", "item_id": "numpy.polynomial.hermite_e.HermiteE.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.polynomial.hermite_e.HermiteE.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " arg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.polynomial.chebyshev.Chebyshev.__call__(self, arg)", "item_id": "numpy.polynomial.chebyshev.Chebyshev.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.polynomial.chebyshev.Chebyshev.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " arg", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.errstate.__call__(self, func)", "item_id": "numpy.errstate.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.errstate.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " func", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.poly1d.__call__(self, val)", "item_id": "numpy.poly1d.__call__", "summary": "Call self as a function.\n", "description": "", "code-info": {"name": "numpy.poly1d.__call__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " val", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__complex__()", "item_id": "numpy.ndarray.__complex__", "summary": "", "description": "", "code-info": {"name": "numpy.ndarray.__complex__", "parameters": []}},
{"code": "numpy.ndarray.__bool__(self, /)", "item_id": "numpy.ndarray.__bool__", "summary": "self != 0\n", "description": "", "code-info": {"name": "numpy.ndarray.__bool__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__bool__(self, /)", "item_id": "numpy.ma.MaskedArray.__bool__", "summary": "self != 0\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__bool__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__array_wrap__()", "item_id": "numpy.ndarray.__array_wrap__", "summary": "", "description": "", "code-info": {"name": "numpy.ndarray.__array_wrap__", "parameters": []}},
{"code": "numpy.ma.MaskedArray.__array_wrap__(self, obj, context=None)", "item_id": "numpy.ma.MaskedArray.__array_wrap__", "summary": "Special hook for ufuncs.\nWraps the numpy array and sets the mask according to context.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__array_wrap__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " obj", "is_optional": false, "type": "others", "description": ""}, {"name": " context", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"code": "numpy.generic.__array_wrap__()", "item_id": "numpy.generic.__array_wrap__", "summary": "sc.__array_wrap__(obj) return scalar from array\n", "description": "", "code-info": {"name": "numpy.generic.__array_wrap__", "parameters": []}},
{"code": "numpy.ndarray.__array__()", "item_id": "numpy.ndarray.__array__", "summary": "Returns either a new reference to self if dtype is not given or a new array\nof provided data type if dtype is different from the current dtype of the\narray.\n", "description": "", "code-info": {"name": "numpy.ndarray.__array__", "parameters": []}},
{"code": "numpy.ma.MaskedArray.__array__()", "item_id": "numpy.ma.MaskedArray.__array__", "summary": "Returns either a new reference to self if dtype is not given or a new array\nof provided data type if dtype is different from the current dtype of the\narray.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__array__", "parameters": []}},
{"code": "numpy.generic.__array__()", "item_id": "numpy.generic.__array__", "summary": "sc.__array__(dtype) return 0-dim array from scalar with specified dtype\n", "description": "", "code-info": {"name": "numpy.generic.__array__", "parameters": []}},
{"code": "c.castfunc(void*\u00a0from, void*\u00a0to, npy_intp\u00a0n, void*\u00a0fromarr, void*\u00a0toarr)", "item_id": "c.castfunc", "summary": "Cast n elements from one type to another", "description": "", "code-info": {"name": "c.castfunc", "parameters": [{"name": "void*\u00a0from", "is_optional": false, "type": "others", "description": ""}, {"name": " void*\u00a0to", "is_optional": false, "type": "others", "description": ""}, {"name": " npy_intp\u00a0n", "is_optional": false, "type": "others", "description": ""}, {"name": " void*\u00a0fromarr", "is_optional": false, "type": "others", "description": ""}, {"name": " void*\u00a0toarr", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.class.__array_ufunc__(ufunc, method, *inputs, **kwargs)", "item_id": "numpy.class.__array_ufunc__", "summary": "\nNew in version 1.13.\n\nAny class, ndarray subclass or not, can define this method or set it to\nNone in order to override the behavior of NumPy\u2019s ufuncs", "description": "", "code-info": {"name": "numpy.class.__array_ufunc__", "parameters": [{"name": "ufunc", "is_optional": false, "type": "others", "description": ""}, {"name": " method", "is_optional": false, "type": "others", "description": ""}, {"name": " *inputs", "is_optional": false, "type": "others", "description": ""}, {"name": " **kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__and__(self, value, /)", "item_id": "numpy.ndarray.__and__", "summary": "Return self&amp;value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__and__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__and__(self, value, /)", "item_id": "numpy.ma.MaskedArray.__and__", "summary": "Return self&amp;value.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__and__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__add__(self, other)", "item_id": "numpy.ma.MaskedArray.__add__", "summary": "Add self to other, and return a new masked array.\n", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__add__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " other", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__abs__(self)", "item_id": "numpy.ndarray.__abs__", "summary": "", "description": "", "code-info": {"name": "numpy.ndarray.__abs__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ndarray.__add__(self, value, /)", "item_id": "numpy.ndarray.__add__", "summary": "Return self+value.\n", "description": "", "code-info": {"name": "numpy.ndarray.__add__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": " value", "is_optional": false, "type": "others", "description": ""}, {"name": " /", "is_optional": false, "type": "others", "description": ""}]}},
{"code": "numpy.ma.MaskedArray.__abs__(self)", "item_id": "numpy.ma.MaskedArray.__abs__", "summary": "", "description": "", "code-info": {"name": "numpy.ma.MaskedArray.__abs__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}}]
