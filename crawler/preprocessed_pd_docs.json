[{"id": "pandas.DataFrame.apply", "code": "pandas.DataFrame.apply(self,func,axis=0,raw=False,result_type=None,args=()", "example": "&gt;&gt;&gt; df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n&gt;&gt;&gt; df\n   A  B\n0  4  9\n1  4  9\n2  4  9\n\n", "summary": "Apply a function along an axis of the DataFrame", "code-info": {"name": "pandas.DataFrame.apply", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "0 or \u2018index\u2019: apply function to each column", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "raw", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "result_type", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "args", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.combine_first", "code": "pandas.DataFrame.combine_first(self,other:\u2018DataFrame\u2019)", "example": "&gt;&gt;&gt; df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n&gt;&gt;&gt; df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n&gt;&gt;&gt; df1.combine_first(df2)\n     A    B\n0  1.0  3.0\n1  0.0  4.0\n\n", "summary": "Update null elements with value in the same location in other", "code-info": {"name": "pandas.DataFrame.combine_first", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other:\u2018DataFrame\u2019", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.eq", "code": "pandas.DataFrame.eq(self,other,axis='columns',level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\n", "summary": "Get Equal to of dataframe and other, element-wise (binary operator eq)", "code-info": {"name": "pandas.DataFrame.eq", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.combine", "code": "pandas.DataFrame.combine(self,other:\u2018DataFrame\u2019,func,fill_value=None,overwrite=True)", "example": "&gt;&gt;&gt; df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n&gt;&gt;&gt; df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n&gt;&gt;&gt; df1.combine(df2, take_smaller)\n     A    B     C\n0  NaN  NaN   NaN\n1  NaN  3.0 -10.0\n2  NaN  3.0   1.0\n\n", "summary": "Perform column-wise combine with another DataFrame", "code-info": {"name": "pandas.DataFrame.combine", "parameters": [{"name": "self", "is_optional": false, "type": "otherDataFrameThe DataFrame to merge column-wise.funcfunctionFunction that takes two series as inputs and return a Series or ascalar. Used to merge the two dataframes column by columns.fill_valuescalar value, default NoneThe value to fill NaNs with prior to passing any column to themerge func.overwritebool, default TrueIf True, columns in self that do not exist in other will beoverwritten with NaNs", "description": ""}, {"name": "other:\u2018DataFrame\u2019", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "otherDataFrameThe DataFrame to merge column-wise.funcfunctionFunction that takes two series as inputs and return a Series or ascalar. Used to merge the two dataframes column by columns.fill_valuescalar value, default NoneThe value to fill NaNs with prior to passing any column to themerge func.overwritebool, default TrueIf True, columns in self that do not exist in other will beoverwritten with NaNs", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "otherDataFrameThe DataFrame to merge column-wise.funcfunctionFunction that takes two series as inputs and return a Series or ascalar. Used to merge the two dataframes column by columns.fill_valuescalar value, default NoneThe value to fill NaNs with prior to passing any column to themerge func.overwritebool, default TrueIf True, columns in self that do not exist in other will beoverwritten with NaNs", "default_value": "None", "description": ""}, {"name": "overwrite", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.assign", "code": "pandas.DataFrame.assign(self,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n...                   index=['Portland', 'Berkeley'])\n&gt;&gt;&gt; df\n          temp_c\nPortland    17.0\nBerkeley    25.0\n\n", "summary": "Assign new columns to a DataFrame", "code-info": {"name": "pandas.DataFrame.assign", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "", "is_optional": false, "type": "str", "description": ""}]}},
{"id": "pandas.DataFrame.transpose", "code": "pandas.DataFrame.transpose(self,*args,copy:bool=False)", "example": "&gt;&gt;&gt; d1 = {'col1': [1, 2], 'col2': [3, 4]}\n&gt;&gt;&gt; df1 = pd.DataFrame(data=d1)\n&gt;&gt;&gt; df1\n   col1  col2\n0     1     3\n1     2     4\n\n", "summary": "Transpose index and columns", "code-info": {"name": "pandas.DataFrame.transpose", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "*args", "is_optional": false, "type": "*argstuple, optionalAccepted for compatibility with NumPy.copybool, default FalseWhether to copy the data after transposing, even for DataFrameswith a single dtype.Note that a copy is always required for mixed dtype DataFrames,or for DataFrames with any extension types", "description": ""}, {"name": "copy:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.append", "code": "pandas.DataFrame.append(self,other,ignore_index=False,verify_integrity=False,sort=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n&gt;&gt;&gt; df\n   A  B\n0  1  2\n1  3  4\n&gt;&gt;&gt; df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n&gt;&gt;&gt; df.append(df2)\n   A  B\n0  1  2\n1  3  4\n0  5  6\n1  7  8\n\n", "summary": "Append rows of other to the end of caller, returning a new object", "code-info": {"name": "pandas.DataFrame.append", "parameters": [{"name": "self", "is_optional": false, "type": "otherDataFrame or Series/dict-like object, or list of theseThe data to append.ignore_indexbool, default FalseIf True, do not use the index labels.verify_integritybool, default FalseIf True, raise ValueError on creating index with duplicates.sortbool, default FalseSort columns if the columns of self and other are not aligned.New in version 0.23.0.Changed in version 1.0.0: Changed to not sort by default", "description": ""}, {"name": "other", "is_optional": false, "type": "otherDataFrame or Series/dict-like object, or list of theseThe data to append.ignore_indexbool, default FalseIf True, do not use the index labels.verify_integritybool, default FalseIf True, raise ValueError on creating index with duplicates.sortbool, default FalseSort columns if the columns of self and other are not aligned.New in version 0.23.0.Changed in version 1.0.0: Changed to not sort by default", "description": ""}, {"name": "ignore_index", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "verify_integrity", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "sort", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.T", "code": "pandas.DataFrame.T", "example": "&gt;&gt;&gt; d1 = {'col1': [1, 2], 'col2': [3, 4]}\n&gt;&gt;&gt; df1 = pd.DataFrame(data=d1)\n&gt;&gt;&gt; df1\n   col1  col2\n0     1     3\n1     2     4\n\n", "summary": "Transpose index and columns", "code-info": {"name": "pandas.DataFrame.T", "parameters": []}},
{"id": "pandas.DataFrame.style", "code": "pandas.DataFrame.style", "example": "NA", "summary": "Returns a Styler object", "code-info": {"name": "pandas.DataFrame.style", "parameters": []}},
{"id": "pandas.DataFrame.to_markdown", "code": "pandas.DataFrame.to_markdown(self,buf:Union[IO[str],NoneType]=None,mode:Union[str,NoneType]=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame(\n...     data={\"animal_1\": [\"elk\", \"pig\"], \"animal_2\": [\"dog\", \"quetzal\"]}\n... )\n&gt;&gt;&gt; print(df.to_markdown())\n|    | animal_1   | animal_2   |\n|---:|:-----------|:-----------|\n|  0 | elk        | dog        |\n|  1 | pig        | quetzal    |\n\n", "summary": "Print DataFrame in Markdown-friendly format", "code-info": {"name": "pandas.DataFrame.to_markdown", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "buf:Union[IO[str]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "mode:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "bufwritable buffer, defaults to sys.stdoutWhere to send the output. By default, the output is printed tosys.stdout. Pass a writable buffer if you need to further processthe output.modestr, optionalMode in which file is opened.**kwargsThese parameters will be passed to tabulate", "description": ""}]}},
{"id": "pandas.DataFrame.to_clipboard", "code": "pandas.DataFrame.to_clipboard(self,excel:bool=True,sep:Union[str,NoneType]=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n&gt;&gt;&gt; df.to_clipboard(sep=',')\n... # Wrote the following to the system clipboard:\n... # ,A,B,C\n... # 0,1,2,3\n... # 1,4,5,6\n\n", "summary": "Copy object to the system clipboard", "code-info": {"name": "pandas.DataFrame.to_clipboard", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "excel:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "sep:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_string", "code": "pandas.DataFrame.to_string(self,buf:Union[str,pathlib.Path,IO[str],NoneType]=None,columns:Union[Sequence[str],NoneType]=None,col_space:Union[int,NoneType]=None,header:Union[bool,Sequence[str]]=True,index:bool=True,na_rep:str='NaN',formatters:Union[List[Callable],Tuple[Callable,\u2026],Mapping[Union[str,int],Callable],NoneType]=None,float_format:Union[str,Callable,ForwardRef(\u2018EngFormatter\u2019)", "example": "&gt;&gt;&gt; d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n&gt;&gt;&gt; df = pd.DataFrame(d)\n&gt;&gt;&gt; print(df.to_string())\n   col1  col2\n0     1     4\n1     2     5\n2     3     6\n\n", "summary": "Render a DataFrame to a console-friendly tabular output", "code-info": {"name": "pandas.DataFrame.to_string", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "buf:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "pathlib.Path", "is_optional": false, "type": "others", "description": ""}, {"name": "IO[str]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "columns:Union[Sequence[str]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "col_space:Union[int", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "header:Union[bool", "is_optional": false, "type": "others", "description": ""}, {"name": "Sequence[str]]", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "na_rep:str", "is_optional": true, "type": "string", "default_value": "'NaN'", "description": ""}, {"name": "formatters:Union[List[Callable]", "is_optional": false, "type": "others", "description": ""}, {"name": "Tuple[Callable", "is_optional": false, "type": "others", "description": ""}, {"name": "\u2026]", "is_optional": false, "type": "others", "description": ""}, {"name": "Mapping[Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "int]", "is_optional": false, "type": "others", "description": ""}, {"name": "Callable]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "float_format:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "Callable", "is_optional": false, "type": "others", "description": ""}, {"name": "ForwardRe", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_numpy", "code": "pandas.DataFrame.to_numpy(self,dtype=None,copy=False)", "example": "&gt;&gt;&gt; pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\narray([[1, 3],\n       [2, 4]])\n\n", "summary": "Convert the DataFrame to a NumPy array", "code-info": {"name": "pandas.DataFrame.to_numpy", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "dtype", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.to_feather", "code": "pandas.DataFrame.to_feather(fname)", "example": "NA", "summary": "Write out the binary feather-format for DataFrames", "code-info": {"name": "pandas.DataFrame.to_feather", "parameters": [{"name": "fname", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_sql", "code": "pandas.DataFrame.to_sql(name,con,schema=None,if_exists='fail',index=True,index_label=None,chunksize=None,dtype=None,method=None)", "example": "&gt;&gt;&gt; from sqlalchemy import create_engine\n&gt;&gt;&gt; engine = create_engine('sqlite://', echo=False)\n\n", "summary": "Write records stored in a DataFrame to a SQL database", "code-info": {"name": "pandas.DataFrame.to_sql", "parameters": [{"name": "name", "is_optional": false, "type": "others", "description": ""}, {"name": "con", "is_optional": false, "type": "others", "description": ""}, {"name": "schema", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "if_exists", "is_optional": true, "type": "string", "default_value": "'fail'", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index_label", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "chunksize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "method", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.to_csv", "code": "pandas.DataFrame.to_csv(path_or_buf=None,sep=',',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,mode='w',encoding=None,compression='infer',quoting=None,quotechar='\"',line_terminator=None,chunksize=None,tupleize_cols=None,date_format=None,doublequote=True,escapechar=None,decimal='.')", "example": "&gt;&gt;&gt; df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n&gt;&gt;&gt; df.to_csv(index=False)\n'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n\n", "summary": "Write object to a comma-separated values (csv) file", "code-info": {"name": "pandas.DataFrame.to_csv", "parameters": [{"name": "path_or_buf", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "sep", "is_optional": true, "type": "string", "default_value": "'", "description": ""}, {"name": "'", "is_optional": false, "type": "others", "description": ""}, {"name": "na_rep", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": "float_format", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "header", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index_label", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "mode", "is_optional": true, "type": "string", "default_value": "'w'", "description": ""}, {"name": "encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "compression", "is_optional": true, "type": "string", "default_value": "'infer'", "description": ""}, {"name": "quoting", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "quotechar", "is_optional": true, "type": "string", "default_value": "'\"'", "description": ""}, {"name": "line_terminator", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "chunksize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "tupleize_cols", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "date_format", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "doublequote", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "escapechar", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "decimal", "is_optional": true, "type": "string", "default_value": "'.'", "description": ""}]}},
{"id": "pandas.DataFrame.to_parquet", "code": "pandas.DataFrame.to_parquet(fname,engine='auto',compression='snappy',index=None,partition_cols=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n&gt;&gt;&gt; df.to_parquet('df.parquet.gzip',\n...               compression='gzip')  # doctest: +SKIP\n&gt;&gt;&gt; pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n   col1  col2\n0     1     3\n1     2     4\n\n", "summary": "Write a DataFrame to the binary parquet format", "code-info": {"name": "pandas.DataFrame.to_parquet", "parameters": [{"name": "fname", "is_optional": false, "type": "others", "description": ""}, {"name": "engine", "is_optional": true, "type": "string", "default_value": "'auto'", "description": ""}, {"name": "compression", "is_optional": true, "type": "string", "default_value": "'snappy'", "description": ""}, {"name": "index", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "partition_cols", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_hdf", "code": "pandas.DataFrame.to_hdf(path_or_buf,key,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n...                   index=['a', 'b', 'c'])\n&gt;&gt;&gt; df.to_hdf('data.h5', key='df', mode='w')\n\n", "summary": "Write the contained data to an HDF5 file using HDFStore", "code-info": {"name": "pandas.DataFrame.to_hdf", "parameters": [{"name": "path_or_buf", "is_optional": false, "type": "others", "description": ""}, {"name": "key", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.update", "code": "pandas.DataFrame.update(other,join='left',overwrite=True,filter_func=None,errors='ignore')", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400, 500, 600]})\n&gt;&gt;&gt; new_df = pd.DataFrame({'B': [4, 5, 6],\n...                        'C': [7, 8, 9]})\n&gt;&gt;&gt; df.update(new_df)\n&gt;&gt;&gt; df\n   A  B\n0  1  4\n1  2  5\n2  3  6\n\n", "summary": "Modify in place using non-NA values from another DataFrame", "code-info": {"name": "pandas.DataFrame.update", "parameters": [{"name": "other", "is_optional": false, "type": "others", "description": ""}, {"name": "join", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": "overwrite", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "filter_func", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "errors", "is_optional": true, "type": "string", "default_value": "'ignore'", "description": ""}]}},
{"id": "pandas.DataFrame.to_panel", "code": "pandas.DataFrame.to_panel()", "example": "NA", "summary": "Transform long (stacked) format (DataFrame) into wide (3D, Panel) format", "code-info": {"name": "pandas.DataFrame.to_panel", "parameters": []}},
{"id": "pandas.DataFrame", "code": "pandas.DataFrame(data=None,index=None,columns=None,dtype=None,copy=False)", "example": "&gt;&gt;&gt; d = {'col1': [1, 2], 'col2': [3, 4]}\n&gt;&gt;&gt; df = pd.DataFrame(data=d)\n&gt;&gt;&gt; df\n   col1  col2\n0     1     3\n1     2     4\n\n", "summary": "Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns)", "code-info": {"name": "pandas.DataFrame", "parameters": [{"name": "data", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "index", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "dtype", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.to_excel", "code": "pandas.DataFrame.to_excel(excel_writer,sheet_name='Sheet1',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,startrow=0,startcol=0,engine=None,merge_cells=True,encoding=None,inf_rep='inf',verbose=True,freeze_panes=None)", "example": "&gt;&gt;&gt; df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                    index=['row 1', 'row 2'],\n...                    columns=['col 1', 'col 2'])\n&gt;&gt;&gt; df1.to_excel(\"output.xlsx\")  # doctest: +SKIP\n\n", "summary": "Write object to an Excel sheet", "code-info": {"name": "pandas.DataFrame.to_excel", "parameters": [{"name": "excel_writer", "is_optional": false, "type": "others", "description": ""}, {"name": "sheet_name", "is_optional": true, "type": "string", "default_value": "'Sheet1'", "description": ""}, {"name": "na_rep", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": "float_format", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "header", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index_label", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "startrow", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "startcol", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "engine", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "merge_cells", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inf_rep", "is_optional": true, "type": "string", "default_value": "'inf'", "description": ""}, {"name": "verbose", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "freeze_panes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.to_gbq", "code": "pandas.DataFrame.to_gbq(destination_table,project_id=None,chunksize=None,reauth=False,if_exists='fail',auth_local_webserver=False,table_schema=None,location=None,progress_bar=True,credentials=None,verbose=None,private_key=None)", "example": "NA", "summary": "Write a DataFrame to a Google BigQuery table", "code-info": {"name": "pandas.DataFrame.to_gbq", "parameters": [{"name": "destination_table", "is_optional": false, "type": "others", "description": ""}, {"name": "project_id", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "chunksize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "reauth", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "if_exists", "is_optional": true, "type": "string", "default_value": "'fail'", "description": ""}, {"name": "auth_local_webserver", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "table_schema", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "location", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "progress_bar", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "credentials", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "verbose", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "private_key", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.to_dense", "code": "pandas.DataFrame.to_dense()", "example": "NA", "summary": "Return dense representation of NDFrame (as opposed to sparse)", "code-info": {"name": "pandas.DataFrame.to_dense", "parameters": []}},
{"id": "pandas.DataFrame.iloc", "code": "pandas.DataFrame.iloc", "example": "&gt;&gt;&gt; mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n&gt;&gt;&gt; df = pd.DataFrame(mydict)\n&gt;&gt;&gt; df\n      a     b     c     d\n0     1     2     3     4\n1   100   200   300   400\n2  1000  2000  3000  4000\n\n", "summary": "Purely integer-location based indexing for selection by position", "code-info": {"name": "pandas.DataFrame.iloc", "parameters": []}},
{"id": "pandas.DataFrame.loc", "code": "pandas.DataFrame.loc", "example": "&gt;&gt;&gt; df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n...      index=['cobra', 'viper', 'sidewinder'],\n...      columns=['max_speed', 'shield'])\n&gt;&gt;&gt; df\n            max_speed  shield\ncobra               1       2\nviper               4       5\nsidewinder          7       8\n\n", "summary": "Access a group of rows and columns by label(s) or a boolean array", "code-info": {"name": "pandas.DataFrame.loc", "parameters": []}},
{"id": "pandas.DataFrame.to_html", "code": "pandas.DataFrame.to_html(buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,justify=None,max_rows=None,max_cols=None,show_dimensions=False,decimal='.',bold_rows=True,classes=None,escape=True,notebook=False,border=None,table_id=None,render_links=False)", "example": "NA", "summary": "Render a DataFrame as an HTML table", "code-info": {"name": "pandas.DataFrame.to_html", "parameters": [{"name": "buf", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "col_space", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "header", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "na_rep", "is_optional": true, "type": "string", "default_value": "'NaN'", "description": ""}, {"name": "formatters", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "float_format", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "sparsify", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "index_names", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "justify", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "max_rows", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "max_cols", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "show_dimensions", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "decimal", "is_optional": true, "type": "string", "default_value": "'.'", "description": ""}, {"name": "bold_rows", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "classes", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "escape", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "notebook", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "border", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "table_id", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "render_links", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.to_pickle", "code": "pandas.DataFrame.to_pickle(path,compression='infer',protocol=4)", "example": "&gt;&gt;&gt; original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n&gt;&gt;&gt; original_df\n   foo  bar\n0    0    5\n1    1    6\n2    2    7\n3    3    8\n4    4    9\n&gt;&gt;&gt; original_df.to_pickle(\"./dummy.pkl\")\n\n", "summary": "Pickle (serialize) object to file", "code-info": {"name": "pandas.DataFrame.to_pickle", "parameters": [{"name": "path", "is_optional": false, "type": "others", "description": ""}, {"name": "compression", "is_optional": true, "type": "string", "default_value": "'infer'", "description": ""}, {"name": "protocol", "is_optional": true, "type": "int", "default_value": "4", "description": ""}]}},
{"id": "pandas.DataFrame.unstack", "code": "pandas.DataFrame.unstack(level=-1,fill_value=None)", "example": "&gt;&gt;&gt; index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n...                                    ('two', 'a'), ('two', 'b')])\n&gt;&gt;&gt; s = pd.Series(np.arange(1.0, 5.0), index=index)\n&gt;&gt;&gt; s\none  a   1.0\n     b   2.0\ntwo  a   3.0\n     b   4.0\ndtype: float64\n\n", "summary": "Pivot a level of the (necessarily hierarchical) index labels, returning a DataFrame having a new level of column labels whose inner-most level consists of the pivoted index labels", "code-info": {"name": "pandas.DataFrame.unstack", "parameters": [{"name": "level", "is_optional": true, "type": "others", "default_value": "-1", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.var", "code": "pandas.DataFrame.var(axis=None,skipna=None,level=None,ddof=1,numeric_only=None,**kwargs)", "example": "NA", "summary": "Return unbiased variance over requested axis", "code-info": {"name": "pandas.DataFrame.var", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "ddof", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.values", "code": "pandas.DataFrame.values", "example": "&gt;&gt;&gt; df = pd.DataFrame({'age':    [ 3,  29],\n...                    'height': [94, 170],\n...                    'weight': [31, 115]})\n&gt;&gt;&gt; df\n   age  height  weight\n0    3      94      31\n1   29     170     115\n&gt;&gt;&gt; df.dtypes\nage       int64\nheight    int64\nweight    int64\ndtype: object\n&gt;&gt;&gt; df.values\narray([[  3,  94,  31],\n       [ 29, 170, 115]], dtype=int64)\n\n", "summary": "Return a Numpy representation of the DataFrame", "code-info": {"name": "pandas.DataFrame.values", "parameters": []}},
{"id": "pandas.DataFrame.merge", "code": "pandas.DataFrame.merge(right,how='inner',on=None,left_on=None,right_on=None,left_index=False,right_index=False,sort=False,suffixes=('_x','_y')", "example": "&gt;&gt;&gt; df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [1, 2, 3, 5]})\n&gt;&gt;&gt; df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n...                     'value': [5, 6, 7, 8]})\n&gt;&gt;&gt; df1\n    lkey value\n0   foo      1\n1   bar      2\n2   baz      3\n3   foo      5\n&gt;&gt;&gt; df2\n    rkey value\n0   foo      5\n1   bar      6\n2   baz      7\n3   foo      8\n\n", "summary": "Merge DataFrame or named Series objects with a database-style join", "code-info": {"name": "pandas.DataFrame.merge", "parameters": [{"name": "right", "is_optional": false, "type": "others", "description": ""}, {"name": "how", "is_optional": true, "type": "string", "default_value": "'inner'", "description": ""}, {"name": "on", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "left_on", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "right_on", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "left_index", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "right_index", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "sort", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "suffixes", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.take", "code": "pandas.DataFrame.take(indices,axis=0,convert=None,is_copy=True,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird',    389.0),\n...                    ('parrot', 'bird',     24.0),\n...                    ('lion',   'mammal',   80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                    columns=['name', 'class', 'max_speed'],\n...                    index=[0, 2, 3, 1])\n&gt;&gt;&gt; df\n     name   class  max_speed\n0  falcon    bird      389.0\n2  parrot    bird       24.0\n3    lion  mammal       80.5\n1  monkey  mammal        NaN\n\n", "summary": "Return the elements in the given positional indices along an axis", "code-info": {"name": "pandas.DataFrame.take", "parameters": [{"name": "indices", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "convert", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "is_copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.sample", "code": "pandas.DataFrame.sample(n=None,frac=None,replace=False,weights=None,random_state=None,axis=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n...                    'num_wings': [2, 0, 0, 0],\n...                    'num_specimen_seen': [10, 2, 1, 8]},\n...                   index=['falcon', 'dog', 'spider', 'fish'])\n&gt;&gt;&gt; df\n        num_legs  num_wings  num_specimen_seen\nfalcon         2          2                 10\ndog            4          0                  2\nspider         8          0                  1\nfish           0          0                  8\n\n", "summary": "Return a random sample of items from an axis of object", "code-info": {"name": "pandas.DataFrame.sample", "parameters": [{"name": "n", "is_optional": false, "type": "int", "description": ""}, {"name": "frac", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "replace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "weights", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "random_state", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.to_json", "code": "pandas.DataFrame.to_json(self,path_or_buf:Union[str,pathlib.Path,IO[~AnyStr],NoneType]=None,orient:Union[str,NoneType]=None,date_format:Union[str,NoneType]=None,double_precision:int=10,force_ascii:bool=True,date_unit:str='ms',default_handler:Union[Callable[[Any],Union[str,int,float,bool,List,Dict]],NoneType]=None,lines:bool=False,compression:Union[str,NoneType]='infer',index:bool=True,indent:Union[int,NoneType]=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n...                   index=['row 1', 'row 2'],\n...                   columns=['col 1', 'col 2'])\n&gt;&gt;&gt; df.to_json(orient='split')\n'{\"columns\":[\"col 1\",\"col 2\"],\n  \"index\":[\"row 1\",\"row 2\"],\n  \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n", "summary": "Convert the object to a JSON string", "code-info": {"name": "pandas.DataFrame.to_json", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "path_or_buf:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "pathlib.Path", "is_optional": false, "type": "others", "description": ""}, {"name": "IO[~AnyStr]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "orient:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "date_format:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "double_precision:int", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": "force_ascii:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "date_unit:str", "is_optional": true, "type": "string", "default_value": "'ms'", "description": ""}, {"name": "default_handler:Union[Callable[[Any]", "is_optional": false, "type": "others", "description": ""}, {"name": "Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "int", "is_optional": false, "type": "others", "description": ""}, {"name": "float", "is_optional": false, "type": "others", "description": ""}, {"name": "bool", "is_optional": false, "type": "others", "description": ""}, {"name": "List", "is_optional": false, "type": "others", "description": ""}, {"name": "Dict]]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "lines:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "compression:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "string", "default_value": "'infer'", "description": ""}, {"name": "index:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "indent:Union[int", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.to_stata", "code": "pandas.DataFrame.to_stata(self,path,convert_dates=None,write_index=True,byteorder=None,time_stamp=None,data_label=None,variable_labels=None,version=114,convert_strl=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n...                               'parrot'],\n...                    'speed': [350, 18, 361, 15]})\n&gt;&gt;&gt; df.to_stata('animals.dta')  \n\n", "summary": "Export DataFrame object to Stata dta format", "code-info": {"name": "pandas.DataFrame.to_stata", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "path", "is_optional": false, "type": "others", "description": ""}, {"name": "convert_dates", "is_optional": true, "type": "Columns listed in convert_dates are neither datetime64[ns]or datetime.datetim", "default_value": "None", "description": ""}, {"name": "write_index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "byteorder", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "time_stamp", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "data_label", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "variable_labels", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "version", "is_optional": true, "type": "int", "default_value": "114", "description": ""}, {"name": "convert_strl", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.round", "code": "pandas.DataFrame.round(self,decimals=0,*args,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n...                   columns=['dogs', 'cats'])\n&gt;&gt;&gt; df\n    dogs  cats\n0  0.21  0.32\n1  0.01  0.67\n2  0.66  0.03\n3  0.21  0.18\n\n", "summary": "Round a DataFrame to a variable number of decimal places", "code-info": {"name": "pandas.DataFrame.round", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "decimals", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "*args", "is_optional": false, "type": "decimalsint, dict, SeriesNumber of decimal places to round each column to. If an int isgiven, round each column to the same number of places.Otherwise dict and Series round to variable numbers of places.Column names should be in the keys if decimals is adict-like, or in the index if decimals is a Series. Anycolumns not included in decimals will be left as is. Elementsof decimals which are not columns of the input will beignored.*argsAdditional keywords have no effect but might be accepted forcompatibility with numpy.**kwargsAdditional keywords have no effect but might be accepted forcompatibility with numpy", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "decimalsint, dict, SeriesNumber of decimal places to round each column to. If an int isgiven, round each column to the same number of places.Otherwise dict and Series round to variable numbers of places.Column names should be in the keys if decimals is adict-like, or in the index if decimals is a Series. Anycolumns not included in decimals will be left as is. Elementsof decimals which are not columns of the input will beignored.*argsAdditional keywords have no effect but might be accepted forcompatibility with numpy.**kwargsAdditional keywords have no effect but might be accepted forcompatibility with numpy", "description": ""}]}},
{"id": "pandas.DataFrame.rank", "code": "pandas.DataFrame.rank(self:~FrameOrSeries,axis=0,method:str='average',numeric_only:Union[bool,NoneType]=None,na_option:str='keep',ascending:bool=True,pct:bool=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n...                                    'spider', 'snake'],\n...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n&gt;&gt;&gt; df\n    Animal  Number_legs\n0      cat          4.0\n1  penguin          2.0\n2      dog          4.0\n3   spider          8.0\n4    snake          NaN\n\n", "summary": "Compute numerical data ranks (1 through n) along axis", "code-info": {"name": "pandas.DataFrame.rank", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "method:str", "is_optional": true, "type": "string", "default_value": "'average'", "description": ""}, {"name": "numeric_only:Union[bool", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "na_option:str", "is_optional": true, "type": "string", "default_value": "'keep'", "description": ""}, {"name": "ascending:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "pct:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.to_latex", "code": "pandas.DataFrame.to_latex(self,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,bold_rows=False,column_format=None,longtable=None,escape=None,encoding=None,decimal='.',multicolumn=None,multicolumn_format=None,multirow=None,caption=None,label=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n...                    'mask': ['red', 'purple'],\n...                    'weapon': ['sai', 'bo staff']})\n&gt;&gt;&gt; print(df.to_latex(index=False))  \n\\begin{tabular}{lll}\n \\toprule\n       name &amp;    mask &amp;    weapon \\\\\n \\midrule\n    Raphael &amp;     red &amp;       sai \\\\\n  Donatello &amp;  purple &amp;  bo staff \\\\\n\\bottomrule\n\\end{tabular}\n\n", "summary": "Render object to a LaTeX tabular, longtable, or nested table/tabular", "code-info": {"name": "pandas.DataFrame.to_latex", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "buf", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "col_space", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "header", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "na_rep", "is_optional": true, "type": "string", "default_value": "'NaN'", "description": ""}, {"name": "formatters", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "float_format", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "sparsify", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "index_names", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "bold_rows", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "column_format", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "longtable", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "escape", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "encoding", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "decimal", "is_optional": true, "type": "string", "default_value": "'.'", "description": ""}, {"name": "multicolumn", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "multicolumn_format", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "multirow", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "caption", "is_optional": true, "type": "index", "default_value": "None", "description": ""}, {"name": "label", "is_optional": true, "type": "index", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.info", "code": "pandas.DataFrame.info(self,verbose=None,buf=None,max_cols=None,memory_usage=None,null_counts=None)", "example": "&gt;&gt;&gt; int_values = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n&gt;&gt;&gt; float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n&gt;&gt;&gt; df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n...                   \"float_col\": float_values})\n&gt;&gt;&gt; df\n   int_col text_col  float_col\n0        1    alpha       0.00\n1        2     beta       0.25\n2        3    gamma       0.50\n3        4    delta       0.75\n4        5  epsilon       1.00\n\n", "summary": "Print a concise summary of a DataFrame", "code-info": {"name": "pandas.DataFrame.info", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "verbose", "is_optional": true, "type": "including the index", "default_value": "None", "description": ""}, {"name": "buf", "is_optional": true, "type": "including the index", "default_value": "None", "description": ""}, {"name": "max_cols", "is_optional": true, "type": "including the index", "default_value": "None", "description": ""}, {"name": "memory_usage", "is_optional": true, "type": "including the index", "default_value": "None", "description": ""}, {"name": "null_counts", "is_optional": true, "type": "including the index", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.to_dict", "code": "pandas.DataFrame.to_dict(self,orient='dict',into=&lt;class'dict'&gt;)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2],\n...                    'col2': [0.5, 0.75]},\n...                   index=['row1', 'row2'])\n&gt;&gt;&gt; df\n      col1  col2\nrow1     1  0.50\nrow2     2  0.75\n&gt;&gt;&gt; df.to_dict()\n{'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n", "summary": "Convert the DataFrame to a dictionary", "code-info": {"name": "pandas.DataFrame.to_dict", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "orient", "is_optional": true, "type": "string", "default_value": "'dict'", "description": ""}, {"name": "into", "is_optional": true, "type": "others", "default_value": "&lt;class'dict'&gt;", "description": ""}]}},
{"id": "pandas.DataFrame.divide", "code": "pandas.DataFrame.divide(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Floating division of dataframe and other, element-wise (binary operator truediv)", "code-info": {"name": "pandas.DataFrame.divide", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.bfill", "code": "pandas.DataFrame.bfill(self:~FrameOrSeries,axis=None,inplace:bool=False,limit=None,downcast=None)", "example": "NA", "summary": "Synonym for DataFrame.fillna() with method='bfill'", "code-info": {"name": "pandas.DataFrame.bfill", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inplace:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "downcast", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.ffill", "code": "pandas.DataFrame.ffill(self:~FrameOrSeries,axis=None,inplace:bool=False,limit=None,downcast=None)", "example": "NA", "summary": "Synonym for DataFrame.fillna() with method='ffill'", "code-info": {"name": "pandas.DataFrame.ffill", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inplace:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "downcast", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.multiply", "code": "pandas.DataFrame.multiply(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Multiplication of dataframe and other, element-wise (binary operator mul)", "code-info": {"name": "pandas.DataFrame.multiply", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.isnull", "code": "pandas.DataFrame.isnull(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n&gt;&gt;&gt; df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n", "summary": "Detect missing values", "code-info": {"name": "pandas.DataFrame.isnull", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.notnull", "code": "pandas.DataFrame.notnull(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n&gt;&gt;&gt; df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n", "summary": "Detect existing (non-missing) values", "code-info": {"name": "pandas.DataFrame.notnull", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.subtract", "code": "pandas.DataFrame.subtract(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Subtraction of dataframe and other, element-wise (binary operator sub)", "code-info": {"name": "pandas.DataFrame.subtract", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.sparse", "code": "pandas.DataFrame.sparse()", "example": "NA", "summary": "DataFrame accessor for sparse data", "code-info": {"name": "pandas.DataFrame.sparse", "parameters": []}},
{"id": "pandas.DataFrame.to_records", "code": "pandas.DataFrame.to_records(self,index=True,column_dtypes=None,index_dtypes=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n...                   index=['a', 'b'])\n&gt;&gt;&gt; df\n   A     B\na  1  0.50\nb  2  0.75\n&gt;&gt;&gt; df.to_records()\nrec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n          dtype=[('index', 'O'), ('A', '&lt;i8'), ('B', '&lt;f8')])\n\n", "summary": "Convert DataFrame to a NumPy record array", "code-info": {"name": "pandas.DataFrame.to_records", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "column_dtypes", "is_optional": true, "type": "zero-indexed", "default_value": "None", "description": ""}, {"name": "index_dtypes", "is_optional": true, "type": "zero-indexed", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.from_records", "code": "pandas.DataFrame.from_records(data,index=None,exclude=None,columns=None,coerce_float=False,nrows=None)", "example": "NA", "summary": "Convert structured or record ndarray to DataFrame", "code-info": {"name": "pandas.DataFrame.from_records", "parameters": [{"name": "data", "is_optional": false, "type": "structured dtype", "description": ""}, {"name": "index", "is_optional": true, "type": "structured dtype", "default_value": "None", "description": ""}, {"name": "exclude", "is_optional": true, "type": "structured dtype", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "structured dtype", "default_value": "None", "description": ""}, {"name": "coerce_float", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "nrows", "is_optional": true, "type": "structured dtype", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.from_dict", "code": "pandas.DataFrame.from_dict(data,orient='columns',dtype=None,columns=None)", "example": "&gt;&gt;&gt; data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n&gt;&gt;&gt; pd.DataFrame.from_dict(data)\n   col_1 col_2\n0      3     a\n1      2     b\n2      1     c\n3      0     d\n\n", "summary": "Construct DataFrame from dict of array-like or dicts", "code-info": {"name": "pandas.DataFrame.from_dict", "parameters": [{"name": "data", "is_optional": false, "type": "default", "description": ""}, {"name": "orient", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "dtype", "is_optional": true, "type": "default", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "default", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.sparse.to_dense", "code": "pandas.DataFrame.sparse.to_dense(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 1, 0])})\n&gt;&gt;&gt; df.sparse.to_dense()\n   A\n0  0\n1  1\n2  0\n\n", "summary": "Convert a DataFrame with sparse values to dense", "code-info": {"name": "pandas.DataFrame.sparse.to_dense", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.sparse.to_coo", "code": "pandas.DataFrame.sparse.to_coo(self)", "example": "NA", "summary": "Return the contents of the frame as a sparse SciPy COO matrix", "code-info": {"name": "pandas.DataFrame.sparse.to_coo", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.sparse.from_spmatrix", "code": "pandas.DataFrame.sparse.from_spmatrix(data,index=None,columns=None)", "example": "&gt;&gt;&gt; import scipy.sparse\n&gt;&gt;&gt; mat = scipy.sparse.eye(3)\n&gt;&gt;&gt; pd.DataFrame.sparse.from_spmatrix(mat)\n     0    1    2\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0\n\n", "summary": "Create a new DataFrame from a scipy sparse matrix", "code-info": {"name": "pandas.DataFrame.sparse.from_spmatrix", "parameters": [{"name": "data", "is_optional": false, "type": "datascipy.sparse.spmatrixMust be convertible to csc format.index, columnsIndex, optionalRow and column labels to use for the resulting DataFrame.Defaults to a RangeIndex", "description": ""}, {"name": "index", "is_optional": true, "type": "datascipy.sparse.spmatrixMust be convertible to csc format.index, columnsIndex, optionalRow and column labels to use for the resulting DataFrame.Defaults to a RangeIndex", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "datascipy.sparse.spmatrixMust be convertible to csc format.index, columnsIndex, optionalRow and column labels to use for the resulting DataFrame.Defaults to a RangeIndex", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.sparse.density", "code": "pandas.DataFrame.sparse.density", "example": "NA", "summary": "Ratio of non-sparse points to total (dense) data points", "code-info": {"name": "pandas.DataFrame.sparse.density", "parameters": []}},
{"id": "pandas.DataFrame.hist", "code": "pandas.DataFrame.hist(data,column=None,by=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,ax=None,sharex=False,sharey=False,figsize=None,layout=None,bins=10,backend=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\n...     'length': [1.5, 0.5, 1.2, 0.9, 3],\n...     'width': [0.7, 0.2, 0.15, 0.2, 1.1]\n...     }, index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])\n&gt;&gt;&gt; hist = df.hist(bins=3)\n\n", "summary": "Make a histogram of the DataFrame\u2019s", "code-info": {"name": "pandas.DataFrame.hist", "parameters": [{"name": "data", "is_optional": false, "type": "rows, columns", "description": ""}, {"name": "column", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "by", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "grid", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "xlabelsize", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "xrot", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "ylabelsize", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "yrot", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "ax", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "sharex", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "sharey", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "figsize", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "layout", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "bins", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": "backend", "is_optional": true, "type": "rows, columns", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "rows, columns", "description": ""}]}},
{"id": "pandas.DataFrame.plot.scatter", "code": "pandas.DataFrame.plot.scatter(self,x,y,s=None,c=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],\n...                    [6.4, 3.2, 1], [5.9, 3.0, 2]],\n...                   columns=['length', 'width', 'species'])\n&gt;&gt;&gt; ax1 = df.plot.scatter(x='length',\n...                       y='width',\n...                       c='DarkBlue')\n\n", "summary": "Create a scatter plot with varying marker point size and color", "code-info": {"name": "pandas.DataFrame.plot.scatter", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "x", "is_optional": false, "type": "others", "description": ""}, {"name": "y", "is_optional": false, "type": "A sequence of scalars, which will be used for each point\u2019s sizerecursively. For instance, when passing [2,14] all points sizewill be either 2 or 14, alternatively", "description": ""}, {"name": "s", "is_optional": true, "type": "A single scalar so all points have the same size", "default_value": "None", "description": ""}, {"name": "c", "is_optional": true, "type": "A single scalar so all points have the same size", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.boxplot", "code": "pandas.DataFrame.boxplot(self,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,backend=None,**kwargs)", "example": "&gt;&gt;&gt; np.random.seed(1234)\n&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(10, 4),\n...                   columns=['Col1', 'Col2', 'Col3', 'Col4'])\n&gt;&gt;&gt; boxplot = df.boxplot(column=['Col1', 'Col2', 'Col3'])\n\n", "summary": "Make a box plot from DataFrame columns", "code-info": {"name": "pandas.DataFrame.boxplot", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "column", "is_optional": true, "type": "when grouping with by, a Series mapping columns toreturn_type is returned.If return_type is None, a NumPy arrayof axes with the same shape as layout is returned", "default_value": "None", "description": ""}, {"name": "by", "is_optional": true, "type": "when grouping with by, a Series mapping columns toreturn_type is returned.If return_type is None, a NumPy arrayof axes with the same shape as layout is returned", "default_value": "None", "description": ""}, {"name": "ax", "is_optional": true, "type": "\u2018axes\u2019 returns the matplotlib axes the boxplot is drawn on", "default_value": "None", "description": ""}, {"name": "fontsize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "rot", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "grid", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "figsize", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "layout", "is_optional": true, "type": "when grouping with by, a Series mapping columns toreturn_type is returned.If return_type is None, a NumPy arrayof axes with the same shape as layout is returned", "default_value": "None", "description": ""}, {"name": "return_type", "is_optional": true, "type": "when grouping with by, a Series mapping columns toreturn_type is returned.If return_type is None, a NumPy arrayof axes with the same shape as layout is returned", "default_value": "None", "description": ""}, {"name": "backend", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.plot.kde", "code": "pandas.DataFrame.plot.kde(bw_method=None,ind=None,**kwds)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\n...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],\n...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],\n... })\n&gt;&gt;&gt; ax = df.plot.kde()\n\n", "summary": "Generate Kernel Density Estimate plot using Gaussian kernels", "code-info": {"name": "pandas.DataFrame.plot.kde", "parameters": [{"name": "bw_method", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "ind", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwds", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.plot.pie", "code": "pandas.DataFrame.plot.pie(self,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],\n...                    'radius': [2439.7, 6051.8, 6378.1]},\n...                   index=['Mercury', 'Venus', 'Earth'])\n&gt;&gt;&gt; plot = df.plot.pie(y='mass', figsize=(5, 5))\n\n", "summary": "Generate a pie plot", "code-info": {"name": "pandas.DataFrame.plot.pie", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.plot.line", "code": "pandas.DataFrame.plot.line(self,x=None,y=None,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([1, 3, 2])\n&gt;&gt;&gt; s.plot.line()\n\n", "summary": "Plot Series or DataFrame as lines", "code-info": {"name": "pandas.DataFrame.plot.line", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "x", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "y", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.plot.hist", "code": "pandas.DataFrame.plot.hist(self,by=None,bins=10,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame(\n...     np.random.randint(1, 7, 6000),\n...     columns = ['one'])\n&gt;&gt;&gt; df['two'] = df['one'] + np.random.randint(1, 7, 6000)\n&gt;&gt;&gt; ax = df.plot.hist(bins=12, alpha=0.5)\n\n", "summary": "Draw one histogram of the DataFrame\u2019s columns", "code-info": {"name": "pandas.DataFrame.plot.hist", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "by", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "bins", "is_optional": true, "type": "int", "default_value": "10", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.plot.hexbin", "code": "pandas.DataFrame.plot.hexbin(self,x,y,C=None,reduce_C_function=None,gridsize=None,**kwargs)", "example": "&gt;&gt;&gt; n = 10000\n&gt;&gt;&gt; df = pd.DataFrame({'x': np.random.randn(n),\n...                    'y': np.random.randn(n)})\n&gt;&gt;&gt; ax = df.plot.hexbin(x='x', y='y', gridsize=20)\n\n", "summary": "Generate a hexagonal binning plot", "code-info": {"name": "pandas.DataFrame.plot.hexbin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "x", "is_optional": false, "type": "x, y", "description": ""}, {"name": "y", "is_optional": false, "type": "x, y", "description": ""}, {"name": "C", "is_optional": true, "type": "x, y", "default_value": "None", "description": ""}, {"name": "reduce_C_function", "is_optional": true, "type": "x, y", "default_value": "None", "description": ""}, {"name": "gridsize", "is_optional": true, "type": "x, y", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "x, y", "description": ""}]}},
{"id": "pandas.DataFrame.plot.barh", "code": "pandas.DataFrame.plot.barh(self,x=None,y=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'lab': ['A', 'B', 'C'], 'val': [10, 30, 20]})\n&gt;&gt;&gt; ax = df.plot.barh(x='lab', y='val')\n\n", "summary": "Make a horizontal bar plot", "code-info": {"name": "pandas.DataFrame.plot.barh", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "x", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "y", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.plot.box", "code": "pandas.DataFrame.plot.box(self,by=None,**kwargs)", "example": "&gt;&gt;&gt; data = np.random.randn(25, 4)\n&gt;&gt;&gt; df = pd.DataFrame(data, columns=list('ABCD'))\n&gt;&gt;&gt; ax = df.plot.box()\n\n", "summary": "Make a box plot of the DataFrame columns", "code-info": {"name": "pandas.DataFrame.plot.box", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "by", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.plot.density", "code": "pandas.DataFrame.plot.density(self,bw_method=None,ind=None,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\n&gt;&gt;&gt; ax = s.plot.kde()\n\n", "summary": "Generate Kernel Density Estimate plot using Gaussian kernels", "code-info": {"name": "pandas.DataFrame.plot.density", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "bw_method", "is_optional": true, "type": "default", "default_value": "None", "description": ""}, {"name": "ind", "is_optional": true, "type": "default", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "default", "description": ""}]}},
{"id": "pandas.DataFrame.plot.area", "code": "pandas.DataFrame.plot.area(self,x=None,y=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\n...     'sales': [3, 2, 3, 9, 10, 6],\n...     'signups': [5, 5, 6, 12, 14, 13],\n...     'visits': [20, 42, 28, 62, 81, 50],\n... }, index=pd.date_range(start='2018/01/01', end='2018/07/01',\n...                        freq='M'))\n&gt;&gt;&gt; ax = df.plot.area()\n\n", "summary": "Draw a stacked area plot", "code-info": {"name": "pandas.DataFrame.plot.area", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "x", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "y", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.attrs", "code": "pandas.DataFrame.attrs", "example": "NA", "summary": "Dictionary of global attributes on this object", "code-info": {"name": "pandas.DataFrame.attrs", "parameters": []}},
{"id": "pandas.DataFrame.plot", "code": "pandas.DataFrame.plot(self,*args,**kwargs)", "example": "NA", "summary": "Make plots of Series or DataFrame", "code-info": {"name": "pandas.DataFrame.plot", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.plot.bar", "code": "pandas.DataFrame.plot.bar(self,x=None,y=None,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'lab':['A', 'B', 'C'], 'val':[10, 30, 20]})\n&gt;&gt;&gt; ax = df.plot.bar(x='lab', y='val', rot=0)\n\n", "summary": "Vertical bar plot", "code-info": {"name": "pandas.DataFrame.plot.bar", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "x", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "y", "is_optional": true, "type": "", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.tz_localize", "code": "pandas.DataFrame.tz_localize(self:~FrameOrSeries,tz,axis=0,level=None,copy:bool=True,ambiguous='raise',nonexistent:str='raise')", "example": "&gt;&gt;&gt; s = pd.Series([1],\n...               index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n&gt;&gt;&gt; s.tz_localize('CET')\n2018-09-15 01:30:00+02:00    1\ndtype: int64\n\n", "summary": "Localize tz-naive index of a Series or DataFrame to target time zone", "code-info": {"name": "pandas.DataFrame.tz_localize", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "tz", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "copy:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "ambiguous", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}, {"name": "nonexistent:str", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"id": "pandas.DataFrame.tz_convert", "code": "pandas.DataFrame.tz_convert(self:~FrameOrSeries,tz,axis=0,level=None,copy:bool=True)", "example": "NA", "summary": "Convert tz-aware axis to target time zone", "code-info": {"name": "pandas.DataFrame.tz_convert", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "tz", "is_optional": false, "type": "tzstr or tzinfo objectaxisthe axis to convertlevelint, str, default NoneIf axis is a MultiIndex, convert a specific level. Otherwisemust be None.copybool, default TrueAlso make a copy of the underlying data", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "level", "is_optional": true, "type": "tzstr or tzinfo objectaxisthe axis to convertlevelint, str, default NoneIf axis is a MultiIndex, convert a specific level. Otherwisemust be None.copybool, default TrueAlso make a copy of the underlying data", "default_value": "None", "description": ""}, {"name": "copy:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.to_timestamp", "code": "pandas.DataFrame.to_timestamp(self,freq=None,how='start',axis=0,copy=True)", "example": "NA", "summary": "Cast to DatetimeIndex of timestamps, at beginning of period", "code-info": {"name": "pandas.DataFrame.to_timestamp", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "freq", "is_optional": true, "type": "the index by default", "default_value": "None", "description": ""}, {"name": "how", "is_optional": true, "type": "string", "default_value": "'start'", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.last_valid_index", "code": "pandas.DataFrame.last_valid_index(self)", "example": "NA", "summary": "Return index for last non-NA/null value", "code-info": {"name": "pandas.DataFrame.last_valid_index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_period", "code": "pandas.DataFrame.to_period(self,freq=None,axis=0,copy=True)", "example": "NA", "summary": "Convert DataFrame from DatetimeIndex to PeriodIndex", "code-info": {"name": "pandas.DataFrame.to_period", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "freq", "is_optional": true, "type": "the index by default", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.tshift", "code": "pandas.DataFrame.tshift(self:~FrameOrSeries,periods:int=1,freq=None,axis=0)", "example": "NA", "summary": "Shift the time index, using the index\u2019s frequency if available", "code-info": {"name": "pandas.DataFrame.tshift", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "periods:int", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "freq", "is_optional": true, "type": "e.g. \u2018EOM\u2019", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.resample", "code": "pandas.DataFrame.resample(self,rule,axis=0,closed:Union[str,NoneType]=None,label:Union[str,NoneType]=None,convention:str='start',kind:Union[str,NoneType]=None,loffset=None,base:int=0,on=None,level=None)", "example": "&gt;&gt;&gt; index = pd.date_range('1/1/2000', periods=9, freq='T')\n&gt;&gt;&gt; series = pd.Series(range(9), index=index)\n&gt;&gt;&gt; series\n2000-01-01 00:00:00    0\n2000-01-01 00:01:00    1\n2000-01-01 00:02:00    2\n2000-01-01 00:03:00    3\n2000-01-01 00:04:00    4\n2000-01-01 00:05:00    5\n2000-01-01 00:06:00    6\n2000-01-01 00:07:00    7\n2000-01-01 00:08:00    8\nFreq: T, dtype: int64\n\n", "summary": "Resample time-series data", "code-info": {"name": "pandas.DataFrame.resample", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "rule", "is_optional": false, "type": "name or number", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "closed:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "label:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "convention:str", "is_optional": true, "type": "string", "default_value": "'start'", "description": ""}, {"name": "kind:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "loffset", "is_optional": true, "type": "name or number", "default_value": "None", "description": ""}, {"name": "base:int", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "on", "is_optional": true, "type": "name or number", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "name or number", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.first_valid_index", "code": "pandas.DataFrame.first_valid_index(self)", "example": "NA", "summary": "Return index for first non-NA/null value", "code-info": {"name": "pandas.DataFrame.first_valid_index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.slice_shift", "code": "pandas.DataFrame.slice_shift(self:~FrameOrSeries,periods:int=1,axis=0)", "example": "NA", "summary": "Equivalent to shift without copying data", "code-info": {"name": "pandas.DataFrame.slice_shift", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "periods:int", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.asof", "code": "pandas.DataFrame.asof(self,where,subset=None)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n&gt;&gt;&gt; s\n10    1.0\n20    2.0\n30    NaN\n40    4.0\ndtype: float64\n\n", "summary": "Return the last row(s) without any NaNs before where", "code-info": {"name": "pandas.DataFrame.asof", "parameters": [{"name": "self", "is_optional": false, "type": "scalar : when self is a Series and where is a scala", "description": ""}, {"name": "where", "is_optional": false, "type": "scalar : when self is a Series and where is a scala", "description": ""}, {"name": "subset", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.shift", "code": "pandas.DataFrame.shift(self,periods=1,freq=None,axis=0,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'Col1': [10, 20, 15, 30, 45],\n...                    'Col2': [13, 23, 18, 33, 48],\n...                    'Col3': [17, 27, 22, 37, 52]})\n\n", "summary": "Shift index by desired number of periods with an optional time freq", "code-info": {"name": "pandas.DataFrame.shift", "parameters": [{"name": "self", "is_optional": false, "type": "e.g. \u2018EOM\u2019", "description": ""}, {"name": "periods", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "freq", "is_optional": true, "type": "e.g. \u2018EOM\u2019", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "e.g. \u2018EOM\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.asfreq", "code": "pandas.DataFrame.asfreq(self:~FrameOrSeries,freq,method=None,how:Union[str,NoneType]=None,normalize:bool=False,fill_value=None)", "example": "&gt;&gt;&gt; index = pd.date_range('1/1/2000', periods=4, freq='T')\n&gt;&gt;&gt; series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n&gt;&gt;&gt; df = pd.DataFrame({'s':series})\n&gt;&gt;&gt; df\n                       s\n2000-01-01 00:00:00    0.0\n2000-01-01 00:01:00    NaN\n2000-01-01 00:02:00    2.0\n2000-01-01 00:03:00    3.0\n\n", "summary": "Convert TimeSeries to specified frequency", "code-info": {"name": "pandas.DataFrame.asfreq", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "freq", "is_optional": false, "type": "others", "description": ""}, {"name": "method", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "how:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "normalize:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.join", "code": "pandas.DataFrame.join(self,other,on=None,how='left',lsuffix='',rsuffix='',sort=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n", "summary": "Join columns of another DataFrame", "code-info": {"name": "pandas.DataFrame.join", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "right: use other\u2019s index", "description": ""}, {"name": "on", "is_optional": true, "type": "or column if on is specified", "default_value": "None", "description": ""}, {"name": "how", "is_optional": true, "type": "string", "default_value": "'left'", "description": ""}, {"name": "lsuffix", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": "rsuffix", "is_optional": true, "type": "string", "default_value": "''", "description": ""}, {"name": "sort", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.to_xarray", "code": "pandas.DataFrame.to_xarray(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n...                    ('parrot', 'bird', 24.0, 2),\n...                    ('lion', 'mammal', 80.5, 4),\n...                    ('monkey', 'mammal', np.nan, 4)],\n...                   columns=['name', 'class', 'max_speed',\n...                            'num_legs'])\n&gt;&gt;&gt; df\n     name   class  max_speed  num_legs\n0  falcon    bird      389.0         2\n1  parrot    bird       24.0         2\n2    lion  mammal       80.5         4\n3  monkey  mammal        NaN         4\n\n", "summary": "Return an xarray object from the pandas object", "code-info": {"name": "pandas.DataFrame.to_xarray", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.explode", "code": "pandas.DataFrame.explode(self,column:Union[str,Tuple])", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n&gt;&gt;&gt; df\n           A  B\n0  [1, 2, 3]  1\n1        foo  1\n2         []  1\n3     [3, 4]  1\n\n", "summary": "Transform each element of a list-like to a row, replicating index values", "code-info": {"name": "pandas.DataFrame.explode", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "column:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "Tuple]", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.melt", "code": "pandas.DataFrame.melt(self,id_vars=None,value_vars=None,var_name=None,value_name='value',col_level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n...                    'B': {0: 1, 1: 3, 2: 5},\n...                    'C': {0: 2, 1: 4, 2: 6}})\n&gt;&gt;&gt; df\n   A  B  C\n0  a  1  2\n1  b  3  4\n2  c  5  6\n\n", "summary": "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set", "code-info": {"name": "pandas.DataFrame.melt", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "id_vars", "is_optional": true, "type": "s", "default_value": "None", "description": ""}, {"name": "value_vars", "is_optional": true, "type": "s", "default_value": "None", "description": ""}, {"name": "var_name", "is_optional": true, "type": "s", "default_value": "None", "description": ""}, {"name": "value_name", "is_optional": true, "type": "string", "default_value": "'value'", "description": ""}, {"name": "col_level", "is_optional": true, "type": "s", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.squeeze", "code": "pandas.DataFrame.squeeze(self,axis=None)", "example": "&gt;&gt;&gt; primes = pd.Series([2, 3, 5, 7])\n\n", "summary": "Squeeze 1 dimensional axis objects into scalars", "code-info": {"name": "pandas.DataFrame.squeeze", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default NoneA specific axis to squeeze. By default, all length-1 axes aresqueezed", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.swapaxes", "code": "pandas.DataFrame.swapaxes(self:~FrameOrSeries,axis1,axis2,copy=True)", "example": "NA", "summary": "Interchange axes and swap values axes appropriately", "code-info": {"name": "pandas.DataFrame.swapaxes", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "axis1", "is_optional": false, "type": "others", "description": ""}, {"name": "axis2", "is_optional": false, "type": "others", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.stack", "code": "pandas.DataFrame.stack(self,level=-1,dropna=True)", "example": "&gt;&gt;&gt; df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n...                                     index=['cat', 'dog'],\n...                                     columns=['weight', 'height'])\n\n", "summary": "Stack the prescribed level(s) from columns to index", "code-info": {"name": "pandas.DataFrame.stack", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "level", "is_optional": true, "type": "s", "default_value": "-1", "description": ""}, {"name": "dropna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.swaplevel", "code": "pandas.DataFrame.swaplevel(self,i=-2,j=-1,axis=0)", "example": "NA", "summary": "Swap levels i and j in a MultiIndex on a particular axis", "code-info": {"name": "pandas.DataFrame.swaplevel", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "i", "is_optional": true, "type": "i, jint or strLevels of the indices to be swapped. Can pass level name as string", "default_value": "-2", "description": ""}, {"name": "j", "is_optional": true, "type": "i, jint or strLevels of the indices to be swapped. Can pass level name as string", "default_value": "-1", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.nsmallest", "code": "pandas.DataFrame.nsmallest(self,n,columns,keep='first')", "example": "&gt;&gt;&gt; df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n...                                   434000, 434000, 337000, 11300,\n...                                   11300, 11300],\n...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n...                            17036, 182, 38, 311],\n...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n...                   index=[\"Italy\", \"France\", \"Malta\",\n...                          \"Maldives\", \"Brunei\", \"Iceland\",\n...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n&gt;&gt;&gt; df\n          population      GDP alpha-2\nItaly       59000000  1937894      IT\nFrance      65000000  2583560      FR\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\nIceland       337000    17036      IS\nNauru          11300      182      NR\nTuvalu         11300       38      TV\nAnguilla       11300      311      AI\n\n", "summary": "Return the first n rows ordered by columns in ascending order", "code-info": {"name": "pandas.DataFrame.nsmallest", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "n", "is_optional": false, "type": "first : take the first occurrence", "description": ""}, {"name": "columns", "is_optional": false, "type": "others", "description": ""}, {"name": "keep", "is_optional": true, "type": "string", "default_value": "'first'", "description": ""}]}},
{"id": "pandas.DataFrame.nlargest", "code": "pandas.DataFrame.nlargest(self,n,columns,keep='first')", "example": "&gt;&gt;&gt; df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n...                                   434000, 434000, 337000, 11300,\n...                                   11300, 11300],\n...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n...                            17036, 182, 38, 311],\n...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n...                   index=[\"Italy\", \"France\", \"Malta\",\n...                          \"Maldives\", \"Brunei\", \"Iceland\",\n...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n&gt;&gt;&gt; df\n          population      GDP alpha-2\nItaly       59000000  1937894      IT\nFrance      65000000  2583560      FR\nMalta         434000    12011      MT\nMaldives      434000     4520      MV\nBrunei        434000    12128      BN\nIceland       337000    17036      IS\nNauru          11300      182      NR\nTuvalu         11300       38      TV\nAnguilla       11300      311      AI\n\n", "summary": "Return the first n rows ordered by columns in descending order", "code-info": {"name": "pandas.DataFrame.nlargest", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "n", "is_optional": false, "type": "int", "description": ""}, {"name": "columns", "is_optional": false, "type": "List[str]", "description": ""}, {"name": "keep", "is_optional": true, "type": "string", "default_value": "'first'", "description": ""}]}},
{"id": "pandas.DataFrame.sort_index", "code": "pandas.DataFrame.sort_index(self,axis=0,level=None,ascending=True,inplace=False,kind='quicksort',na_position='last',sort_remaining=True,ignore_index:bool=False)", "example": "NA", "summary": "Sort object by labels (along an axis)", "code-info": {"name": "pandas.DataFrame.sort_index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "level", "is_optional": true, "type": "s", "default_value": "None", "description": ""}, {"name": "ascending", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "kind", "is_optional": true, "type": "string", "default_value": "'quicksort'", "description": ""}, {"name": "na_position", "is_optional": true, "type": "string", "default_value": "'last'", "description": ""}, {"name": "sort_remaining", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "ignore_index:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.sort_values", "code": "pandas.DataFrame.sort_values(self,by,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last',ignore_index=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\n...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n...     'col2': [2, 1, 9, 8, 7, 4],\n...     'col3': [0, 1, 9, 4, 2, 3],\n... })\n&gt;&gt;&gt; df\n    col1 col2 col3\n0   A    2    0\n1   A    1    1\n2   B    9    9\n3   NaN  8    4\n4   D    7    2\n5   C    4    3\n\n", "summary": "Sort by the values along either axis", "code-info": {"name": "pandas.DataFrame.sort_values", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "by", "is_optional": false, "type": "List[str]", "description": ""}, {"name": "axis", "is_optional": false, "type": "int", "description": ""}, {"name": "ascending", "is_optional": false, "type": "bool", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "kind", "is_optional": true, "type": "string", "default_value": "'quicksort'", "description": ""}, {"name": "na_position", "is_optional": true, "type": "string", "default_value": "'last'", "description": ""}, {"name": "ignore_index", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.reorder_levels", "code": "pandas.DataFrame.reorder_levels(self,order,axis=0)", "example": "NA", "summary": "Rearrange index levels using input order", "code-info": {"name": "pandas.DataFrame.reorder_levels", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "order", "is_optional": false, "type": "position", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.pivot_table", "code": "pandas.DataFrame.pivot_table(self,values=None,index=None,columns=None,aggfunc='mean',fill_value=None,margins=False,dropna=True,margins_name='All',observed=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n...                          \"one\", \"one\", \"two\", \"two\"],\n...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n...                          \"small\", \"large\", \"small\", \"small\",\n...                          \"large\"],\n...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n&gt;&gt;&gt; df\n     A    B      C  D  E\n0  foo  one  small  1  2\n1  foo  one  large  2  4\n2  foo  one  large  2  5\n3  foo  two  small  3  5\n4  foo  two  small  3  6\n5  bar  one  large  4  6\n6  bar  one  small  5  8\n7  bar  two  small  6  9\n8  bar  two  large  7  9\n\n", "summary": "Create a spreadsheet-style pivot table as a DataFrame", "code-info": {"name": "pandas.DataFrame.pivot_table", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "values", "is_optional": true, "type": "except list", "default_value": "None", "description": ""}, {"name": "index", "is_optional": true, "type": "except list", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "except list", "default_value": "None", "description": ""}, {"name": "aggfunc", "is_optional": true, "type": "string", "default_value": "'mean'", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "except list", "default_value": "None", "description": ""}, {"name": "margins", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "dropna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "margins_name", "is_optional": true, "type": "string", "default_value": "'All'", "description": ""}, {"name": "observed", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.pivot", "code": "pandas.DataFrame.pivot(self,index=None,columns=None,values=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n...                            'two'],\n...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n...                    'baz': [1, 2, 3, 4, 5, 6],\n...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n&gt;&gt;&gt; df\n    foo   bar  baz  zoo\n0   one   A    1    x\n1   one   B    2    y\n2   one   C    3    z\n3   two   A    4    q\n4   two   B    5    w\n5   two   C    6    t\n\n", "summary": "Return reshaped DataFrame organized by given index / column values", "code-info": {"name": "pandas.DataFrame.pivot", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "index", "is_optional": true, "type": "s", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "s", "default_value": "None", "description": ""}, {"name": "values", "is_optional": true, "type": "s", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.droplevel", "code": "pandas.DataFrame.droplevel(self:~FrameOrSeries,level,axis=0)", "example": "&gt;&gt;&gt; df = pd.DataFrame([\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12]\n... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n", "summary": "Return DataFrame with requested index / column level(s) removed", "code-info": {"name": "pandas.DataFrame.droplevel", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "level", "is_optional": false, "type": "levelint, str, or list-likeIf a string is given, must be the name of a levelIf list-like, elements must be names or positional indexesof levels.axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default ", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.interpolate", "code": "pandas.DataFrame.interpolate(self,method='linear',axis=0,limit=None,inplace=False,limit_direction='forward',limit_area=None,downcast=None,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([0, 1, np.nan, 3])\n&gt;&gt;&gt; s\n0    0.0\n1    1.0\n2    NaN\n3    3.0\ndtype: float64\n&gt;&gt;&gt; s.interpolate()\n0    0.0\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\n", "summary": "Interpolate values according to different methods", "code-info": {"name": "pandas.DataFrame.interpolate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "method", "is_optional": true, "type": "string", "default_value": "'linear'", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit_direction", "is_optional": true, "type": "string", "default_value": "'forward'", "description": ""}, {"name": "limit_area", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "downcast", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.replace", "code": "pandas.DataFrame.replace(self,to_replace=None,value=None,inplace=False,limit=None,regex=False,method='pad')", "example": "&gt;&gt;&gt; s = pd.Series([0, 1, 2, 3, 4])\n&gt;&gt;&gt; s.replace(0, 5)\n0    5\n1    1\n2    2\n3    3\n4    4\ndtype: int64\n\n", "summary": "Replace values given in to_replace with value", "code-info": {"name": "pandas.DataFrame.replace", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "to_replace", "is_optional": true, "type": "numeric, str or regex:numeric: numeric values equal to to_replace will bereplaced with valuestr: string exactly matching to_replace will be replacedwith valueregex: regexs matching to_replace will be replaced withvalu", "default_value": "None", "description": ""}, {"name": "value", "is_optional": true, "type": "numeric, str or regex:numeric: numeric values equal to to_replace will bereplaced with valuestr: string exactly matching to_replace will be replacedwith valueregex: regexs matching to_replace will be replaced withvalu", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "regex", "is_optional": true, "type": "bool", "default_value": "False", "description": " regexs matching to_replace will be replaced withvalue"}, {"name": "method", "is_optional": true, "type": "string", "default_value": "'pad'", "description": ""}]}},
{"id": "pandas.DataFrame.fillna", "code": "pandas.DataFrame.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n...                    [3, 4, np.nan, 1],\n...                    [np.nan, np.nan, np.nan, 5],\n...                    [np.nan, 3, np.nan, 4]],\n...                   columns=list('ABCD'))\n&gt;&gt;&gt; df\n     A    B   C  D\n0  NaN  2.0 NaN  0\n1  3.0  4.0 NaN  1\n2  NaN  NaN NaN  5\n3  NaN  3.0 NaN  4\n\n", "summary": "Fill NA/NaN values using the specified method", "code-info": {"name": "pandas.DataFrame.fillna", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "value", "is_optional": true, "type": "e.g. 0", "default_value": "None", "description": ""}, {"name": "method", "is_optional": true, "type": "e.g. 0", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "e.g. 0", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit", "is_optional": true, "type": "e.g. 0", "default_value": "None", "description": ""}, {"name": "downcast", "is_optional": true, "type": "e.g. 0", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.dropna", "code": "pandas.DataFrame.dropna(self,axis=0,how='any',thresh=None,subset=None,inplace=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n...                             pd.NaT]})\n&gt;&gt;&gt; df\n       name        toy       born\n0    Alfred        NaN        NaT\n1    Batman  Batmobile 1940-04-25\n2  Catwoman   Bullwhip        NaT\n\n", "summary": "Remove missing values", "code-info": {"name": "pandas.DataFrame.dropna", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "how", "is_optional": true, "type": "string", "default_value": "'any'", "description": ""}, {"name": "thresh", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "subset", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.truncate", "code": "pandas.DataFrame.truncate(self:~FrameOrSeries,before=None,after=None,axis=None,copy:bool=True)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n...                    'B': ['f', 'g', 'h', 'i', 'j'],\n...                    'C': ['k', 'l', 'm', 'n', 'o']},\n...                   index=[1, 2, 3, 4, 5])\n&gt;&gt;&gt; df\n   A  B  C\n1  a  f  k\n2  b  g  l\n3  c  h  m\n4  d  i  n\n5  e  j  o\n\n", "summary": "Truncate a Series or DataFrame before and after some index value", "code-info": {"name": "pandas.DataFrame.truncate", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "before", "is_optional": true, "type": "rows", "default_value": "None", "description": ""}, {"name": "after", "is_optional": true, "type": "rows", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "rows", "default_value": "None", "description": ""}, {"name": "copy:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.set_axis", "code": "pandas.DataFrame.set_axis(self,labels,axis=0,inplace=False)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2, 3])\n&gt;&gt;&gt; s\n0    1\n1    2\n2    3\ndtype: int64\n\n", "summary": "Assign desired index to given axis", "code-info": {"name": "pandas.DataFrame.set_axis", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "labels", "is_optional": false, "type": "klass", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.set_index", "code": "pandas.DataFrame.set_index(self,keys,drop=True,append=False,inplace=False,verify_integrity=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'month': [1, 4, 7, 10],\n...                    'year': [2012, 2014, 2013, 2014],\n...                    'sale': [55, 40, 84, 31]})\n&gt;&gt;&gt; df\n   month  year  sale\n0      1  2012    55\n1      4  2014    40\n2      7  2013    84\n3     10  2014    31\n\n", "summary": "Set the DataFrame index using existing columns", "code-info": {"name": "pandas.DataFrame.set_index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "keys", "is_optional": false, "type": "do not create a new object", "description": ""}, {"name": "drop", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "append", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "verify_integrity", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.reset_index", "code": "pandas.DataFrame.reset_index(self,level:Union[Hashable,Sequence[Hashable],NoneType]=None,drop:bool=False,inplace:bool=False,col_level:Hashable=0,col_fill:Union[Hashable,NoneType]='')", "example": "&gt;&gt;&gt; df = pd.DataFrame([('bird', 389.0),\n...                    ('bird', 24.0),\n...                    ('mammal', 80.5),\n...                    ('mammal', np.nan)],\n...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n...                   columns=('class', 'max_speed'))\n&gt;&gt;&gt; df\n         class  max_speed\nfalcon    bird      389.0\nparrot    bird       24.0\nlion    mammal       80.5\nmonkey  mammal        NaN\n\n", "summary": "Reset the index, or a level of it", "code-info": {"name": "pandas.DataFrame.reset_index", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "level:Union[Hashable", "is_optional": false, "type": "others", "description": ""}, {"name": "Sequence[Hashable]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "drop:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "inplace:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "col_level:Hashable", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "col_fill:Union[Hashable", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "string", "default_value": "''", "description": ""}]}},
{"id": "pandas.DataFrame.rename_axis", "code": "pandas.DataFrame.rename_axis(self,mapper=None,index=None,columns=None,axis=None,copy=True,inplace=False)", "example": "&gt;&gt;&gt; s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n&gt;&gt;&gt; s\n0       dog\n1       cat\n2    monkey\ndtype: object\n&gt;&gt;&gt; s.rename_axis(\"animal\")\nanimal\n0    dog\n1    cat\n2    monkey\ndtype: object\n\n", "summary": "Set the name of the axis for the index or columns", "code-info": {"name": "pandas.DataFrame.rename_axis", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "mapper", "is_optional": true, "type": "mapperscalar, list-like, optionalValue to set the axis name attribute.index, columnsscalar, list-like, dict-like or function, optionalA scalar, list-like, dict-like or functions transformations toapply to that axis\u2019 values.Use either mapper and axis tospecify the axis to target with mapper, or indexand/or columns.Changed in version 0.24.0.axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The axis to rename.copybool, default TrueAlso copy underlying data.inplacebool, default FalseModifies the object directly, instead of creating a new Seriesor DataFrame", "default_value": "None", "description": ""}, {"name": "index", "is_optional": true, "type": "mapperscalar, list-like, optionalValue to set the axis name attribute.index, columnsscalar, list-like, dict-like or function, optionalA scalar, list-like, dict-like or functions transformations toapply to that axis\u2019 values.Use either mapper and axis tospecify the axis to target with mapper, or indexand/or columns.Changed in version 0.24.0.axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The axis to rename.copybool, default TrueAlso copy underlying data.inplacebool, default FalseModifies the object directly, instead of creating a new Seriesor DataFrame", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "mapperscalar, list-like, optionalValue to set the axis name attribute.index, columnsscalar, list-like, dict-like or function, optionalA scalar, list-like, dict-like or functions transformations toapply to that axis\u2019 values.Use either mapper and axis tospecify the axis to target with mapper, or indexand/or columns.Changed in version 0.24.0.axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The axis to rename.copybool, default TrueAlso copy underlying data.inplacebool, default FalseModifies the object directly, instead of creating a new Seriesor DataFrame", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "mapperscalar, list-like, optionalValue to set the axis name attribute.index, columnsscalar, list-like, dict-like or function, optionalA scalar, list-like, dict-like or functions transformations toapply to that axis\u2019 values.Use either mapper and axis tospecify the axis to target with mapper, or indexand/or columns.Changed in version 0.24.0.axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The axis to rename.copybool, default TrueAlso copy underlying data.inplacebool, default FalseModifies the object directly, instead of creating a new Seriesor DataFrame", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.reindex_like", "code": "pandas.DataFrame.reindex_like(self:~FrameOrSeries,other,method:Union[str,NoneType]=None,copy:bool=True,limit=None,tolerance=None)", "example": "&gt;&gt;&gt; df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n...                     [31, 87.8, 'high'],\n...                     [22, 71.6, 'medium'],\n...                     [35, 95, 'medium']],\n...                    columns=['temp_celsius', 'temp_fahrenheit',\n...                             'windspeed'],\n...                    index=pd.date_range(start='2014-02-12',\n...                                        end='2014-02-15', freq='D'))\n\n", "summary": "Return an object with matching indices as other object", "code-info": {"name": "pandas.DataFrame.reindex_like", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "others", "description": ""}, {"name": "method:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "copy:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "tolerance", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rename", "code": "pandas.DataFrame.rename(self,mapper=None,index=None,columns=None,axis=None,copy=True,inplace=False,level=None,errors='ignore')", "example": "&gt;&gt;&gt; df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n&gt;&gt;&gt; df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n   a  c\n0  1  4\n1  2  5\n2  3  6\n\n", "summary": "Alter axes labels", "code-info": {"name": "pandas.DataFrame.rename", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "columns", "is_optional": false, "type": "Dict[str,str]", "description": ""}, {"name": "dict_idx", "is_optional": false, "type": "List[str]", "description": ""}, {"name": "index", "is_optional": true, "type": "mapper, axis=0is equivalent to index=mapper", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "mapper, axis=0is equivalent to index=mapper", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "level", "is_optional": true, "type": "mapper, axis=0is equivalent to index=mapper", "default_value": "None", "description": ""}, {"name": "errors", "is_optional": true, "type": "string", "default_value": "'ignore'", "description": ""}]}},
{"id": "pandas.DataFrame.idxmin", "code": "pandas.DataFrame.idxmin(self,axis=0,skipna=True)", "example": "NA", "summary": "Return index of first occurrence of minimum over requested axis", "code-info": {"name": "pandas.DataFrame.idxmin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.last", "code": "pandas.DataFrame.last(self:~FrameOrSeries,offset)", "example": "&gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='2D')\n&gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n&gt;&gt;&gt; ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\n", "summary": "Method to subset final periods of time series data based on a date offset", "code-info": {"name": "pandas.DataFrame.last", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "offset", "is_optional": false, "type": "offsetstr, DateOffset, dateutil.relativedelt", "description": ""}]}},
{"id": "pandas.DataFrame.reindex", "code": "pandas.DataFrame.reindex(self,labels=None,index=None,columns=None,axis=None,method=None,copy=True,level=None,fill_value=nan,limit=None,tolerance=None)", "example": "&gt;&gt;&gt; index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n&gt;&gt;&gt; df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n...                   index=index)\n&gt;&gt;&gt; df\n           http_status  response_time\nFirefox            200           0.04\nChrome             200           0.02\nSafari             404           0.07\nIE10               404           0.08\nKonqueror          301           1.00\n\n", "summary": "Conform DataFrame to new index with optional filling logic", "code-info": {"name": "pandas.DataFrame.reindex", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "labels", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "index", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "method", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "others", "default_value": "nan", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "tolerance", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.first", "code": "pandas.DataFrame.first(self:~FrameOrSeries,offset)", "example": "&gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='2D')\n&gt;&gt;&gt; ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n&gt;&gt;&gt; ts\n            A\n2018-04-09  1\n2018-04-11  2\n2018-04-13  3\n2018-04-15  4\n\n", "summary": "Method to subset initial periods of time series data based on a date offset", "code-info": {"name": "pandas.DataFrame.first", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "offset", "is_optional": false, "type": "offsetstr, DateOffset, dateutil.relativedelt", "description": ""}]}},
{"id": "pandas.DataFrame.idxmax", "code": "pandas.DataFrame.idxmax(self,axis=0,skipna=True)", "example": "NA", "summary": "Return index of first occurrence of maximum over requested axis", "code-info": {"name": "pandas.DataFrame.idxmax", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.filter", "code": "pandas.DataFrame.filter(self:~FrameOrSeries,items=None,like:Union[str,NoneType]=None,regex:Union[str,NoneType]=None,axis=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n...                   index=['mouse', 'rabbit'],\n...                   columns=['one', 'two', 'three'])\n\n", "summary": "Subset the dataframe rows or columns according to the specified index labels", "code-info": {"name": "pandas.DataFrame.filter", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "items", "is_optional": true, "type": "regular expression", "default_value": "None", "description": ""}, {"name": "like:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "regex:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "regular expression", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.duplicated", "code": "pandas.DataFrame.duplicated(self,subset:Union[Hashable,Sequence[Hashable],NoneType]=None,keep:Union[str,bool]='first')", "example": "NA", "summary": "Return boolean Series denoting duplicate rows", "code-info": {"name": "pandas.DataFrame.duplicated", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "subset:Union[Hashable", "is_optional": false, "type": "others", "description": ""}, {"name": "Sequence[Hashable]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "keep:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "bool]", "is_optional": true, "type": "string", "default_value": "'first'", "description": ""}]}},
{"id": "pandas.DataFrame.equals", "code": "pandas.DataFrame.equals(self,other)", "example": "&gt;&gt;&gt; df = pd.DataFrame({1: [10], 2: [20]})\n&gt;&gt;&gt; df\n    1   2\n0  10  20\n\n", "summary": "Test whether two objects contain the same elements", "code-info": {"name": "pandas.DataFrame.equals", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "otherSeries or DataFrameThe other Series or DataFrame to be compared with the first", "description": ""}]}},
{"id": "pandas.DataFrame.between_time", "code": "pandas.DataFrame.between_time(self:~FrameOrSeries,start_time,end_time,include_start:bool=True,include_end:bool=True,axis=None)", "example": "&gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n&gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n&gt;&gt;&gt; ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-10 00:20:00  2\n2018-04-11 00:40:00  3\n2018-04-12 01:00:00  4\n\n", "summary": "Select values between particular times of the day (e.g., 9:00-9:30 AM)", "code-info": {"name": "pandas.DataFrame.between_time", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "start_time", "is_optional": false, "type": "start_timedatetime.time or strend_timedatetime.time or strinclude_startbool, default Trueinclude_endbool, default Trueaxis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0New in version 0.24.0", "description": ""}, {"name": "end_time", "is_optional": false, "type": "start_timedatetime.time or strend_timedatetime.time or strinclude_startbool, default Trueinclude_endbool, default Trueaxis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0New in version 0.24.0", "description": ""}, {"name": "include_start:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "include_end:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "axis", "is_optional": true, "type": "start_timedatetime.time or strend_timedatetime.time or strinclude_startbool, default Trueinclude_endbool, default Trueaxis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0New in version 0.24.0", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.drop", "code": "pandas.DataFrame.drop(self,labels=None,axis=0,index=None,columns=None,level=None,inplace=False,errors='raise')", "example": "&gt;&gt;&gt; df = pd.DataFrame(np.arange(12).reshape(3, 4),\n...                   columns=['A', 'B', 'C', 'D'])\n&gt;&gt;&gt; df\n   A  B   C   D\n0  0  1   2   3\n1  4  5   6   7\n2  8  9  10  11\n\n", "summary": "Drop specified labels from rows or columns", "code-info": {"name": "pandas.DataFrame.drop", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "labels", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "index", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "columns", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "errors", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"id": "pandas.DataFrame.drop_duplicates", "code": "pandas.DataFrame.drop_duplicates(self,subset:Union[Hashable,Sequence[Hashable],NoneType]=None,keep:Union[str,bool]='first',inplace:bool=False,ignore_index:bool=False)", "example": "NA", "summary": "Return DataFrame with duplicate rows removed", "code-info": {"name": "pandas.DataFrame.drop_duplicates", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "subset:Union[Hashable", "is_optional": false, "type": "others", "description": ""}, {"name": "Sequence[Hashable]", "is_optional": false, "type": "others", "description": ""}, {"name": "NoneType]", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "keep:Union[str", "is_optional": false, "type": "others", "description": ""}, {"name": "bool]", "is_optional": true, "type": "string", "default_value": "'first'", "description": ""}, {"name": "inplace:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "ignore_index:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.at_time", "code": "pandas.DataFrame.at_time(self:~FrameOrSeries,time,asof:bool=False,axis=None)", "example": "&gt;&gt;&gt; i = pd.date_range('2018-04-09', periods=4, freq='12H')\n&gt;&gt;&gt; ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n&gt;&gt;&gt; ts\n                     A\n2018-04-09 00:00:00  1\n2018-04-09 12:00:00  2\n2018-04-10 00:00:00  3\n2018-04-10 12:00:00  4\n\n", "summary": "Select values at particular time of day (e.g", "code-info": {"name": "pandas.DataFrame.at_time", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "time", "is_optional": false, "type": "timedatetime.time or straxis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0New in version 0.24.0", "description": ""}, {"name": "asof:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "axis", "is_optional": true, "type": "timedatetime.time or straxis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0New in version 0.24.0", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.add_prefix", "code": "pandas.DataFrame.add_prefix(self:~FrameOrSeries,prefix:str)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n&gt;&gt;&gt; s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n", "summary": "Prefix labels with string prefix", "code-info": {"name": "pandas.DataFrame.add_prefix", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "prefix:str", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.add_suffix", "code": "pandas.DataFrame.add_suffix(self:~FrameOrSeries,suffix:str)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2, 3, 4])\n&gt;&gt;&gt; s\n0    1\n1    2\n2    3\n3    4\ndtype: int64\n\n", "summary": "Suffix labels with string suffix", "code-info": {"name": "pandas.DataFrame.add_suffix", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "suffix:str", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.align", "code": "pandas.DataFrame.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)", "example": "NA", "summary": "Align two objects on their axes with the specified join method", "code-info": {"name": "pandas.DataFrame.align", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "others", "description": ""}, {"name": "join", "is_optional": true, "type": "string", "default_value": "'outer'", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "method", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "fill_axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "broadcast_axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.nunique", "code": "pandas.DataFrame.nunique(self,axis=0,dropna=True)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n&gt;&gt;&gt; df.nunique()\nA    3\nB    1\ndtype: int64\n\n", "summary": "Count distinct observations over requested axis", "code-info": {"name": "pandas.DataFrame.nunique", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "dropna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.std", "code": "pandas.DataFrame.std(self,axis=None,skipna=None,level=None,ddof=1,numeric_only=None,**kwargs)", "example": "NA", "summary": "Return sample standard deviation over requested axis", "code-info": {"name": "pandas.DataFrame.std", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "ddof", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.sum", "code": "pandas.DataFrame.sum(self,axis=None,skipna=None,level=None,numeric_only=None,min_count=0,**kwargs)", "example": "&gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n&gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n&gt;&gt;&gt; s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n", "summary": "Return the sum of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.sum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "dict_idx", "is_optional": false, "type": "List[str]", "description": ""}]}},
{"id": "pandas.DataFrame.skew", "code": "pandas.DataFrame.skew(self,axis=None,skipna=None,level=None,numeric_only=None,**kwargs)", "example": "NA", "summary": "Return unbiased skew over requested axis", "code-info": {"name": "pandas.DataFrame.skew", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "0", "description": ""}]}},
{"id": "pandas.DataFrame.sem", "code": "pandas.DataFrame.sem(self,axis=None,skipna=None,level=None,ddof=1,numeric_only=None,**kwargs)", "example": "NA", "summary": "Return unbiased standard error of the mean over requested axis", "code-info": {"name": "pandas.DataFrame.sem", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "ddof", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.quantile", "code": "pandas.DataFrame.quantile(self,q=0.5,axis=0,numeric_only=True,interpolation='linear')", "example": "&gt;&gt;&gt; df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n...                   columns=['a', 'b'])\n&gt;&gt;&gt; df.quantile(.1)\na    1.3\nb    3.7\nName: 0.1, dtype: float64\n&gt;&gt;&gt; df.quantile([.1, .5])\n       a     b\n0.1  1.3   3.7\n0.5  2.5  55.0\n\n", "summary": "Return values at the given quantile over requested axis", "code-info": {"name": "pandas.DataFrame.quantile", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "q", "is_optional": true, "type": "others", "default_value": "0.5", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "interpolation", "is_optional": true, "type": "string", "default_value": "'linear'", "description": ""}]}},
{"id": "pandas.DataFrame.product", "code": "pandas.DataFrame.product(self,axis=None,skipna=None,level=None,numeric_only=None,min_count=0,**kwargs)", "example": "&gt;&gt;&gt; pd.Series([]).prod()\n1.0\n\n", "summary": "Return the product of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.product", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "min_count", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "0", "description": ""}]}},
{"id": "pandas.DataFrame.prod", "code": "pandas.DataFrame.prod(self,axis=None,skipna=None,level=None,numeric_only=None,min_count=0,**kwargs)", "example": "&gt;&gt;&gt; pd.Series([]).prod()\n1.0\n\n", "summary": "Return the product of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.prod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "min_count", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "0", "description": ""}]}},
{"id": "pandas.DataFrame.pct_change", "code": "pandas.DataFrame.pct_change(self:~FrameOrSeries,periods=1,fill_method='pad',limit=None,freq=None,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([90, 91, 85])\n&gt;&gt;&gt; s\n0    90\n1    91\n2    85\ndtype: int64\n\n", "summary": "Percentage change between the current and a prior element", "code-info": {"name": "pandas.DataFrame.pct_change", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "periods", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "fill_method", "is_optional": true, "type": "string", "default_value": "'pad'", "description": ""}, {"name": "limit", "is_optional": true, "type": "e.g. \u2018M\u2019 or BDay(", "default_value": "None", "description": ""}, {"name": "freq", "is_optional": true, "type": "e.g. \u2018M\u2019 or BDay(", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "e.g. \u2018M\u2019 or BDay(", "description": ""}]}},
{"id": "pandas.DataFrame.mode", "code": "pandas.DataFrame.mode(self,axis=0,numeric_only=False,dropna=True)", "example": "&gt;&gt;&gt; df = pd.DataFrame([('bird', 2, 2),\n...                    ('mammal', 4, np.nan),\n...                    ('arthropod', 8, 0),\n...                    ('bird', 2, np.nan)],\n...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n...                   columns=('species', 'legs', 'wings'))\n&gt;&gt;&gt; df\n           species  legs  wings\nfalcon        bird     2    2.0\nhorse       mammal     4    NaN\nspider   arthropod     8    0.0\nostrich       bird     2    NaN\n\n", "summary": "Get the mode(s) of each element along the selected axis", "code-info": {"name": "pandas.DataFrame.mode", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "dropna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.min", "code": "pandas.DataFrame.min(self,dict_idx)", "example": "&gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n&gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n&gt;&gt;&gt; s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n", "summary": "Return the minimum of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.min", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""},{"name": "dict_idx", "is_optional": false, "type": "List[str]", "description": ""}]}},
{"id": "pandas.DataFrame.max", "code": "pandas.DataFrame.max(self,dict_idx)", "example": "&gt;&gt;&gt; idx = pd.MultiIndex.from_arrays([\n...     ['warm', 'warm', 'cold', 'cold'],\n...     ['dog', 'falcon', 'fish', 'spider']],\n...     names=['blooded', 'animal'])\n&gt;&gt;&gt; s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\n&gt;&gt;&gt; s\nblooded  animal\nwarm     dog       4\n         falcon    2\ncold     fish      0\n         spider    8\nName: legs, dtype: int64\n\n", "summary": "Return the maximum of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.max", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "dict_idx", "is_optional": false, "type": "List[str]", "description": ""}]}}, {"id": "pandas.DataFrame.mean", "code": "pandas.DataFrame.mean(self,dict_idx)", "example": "NA", "summary": "Return the mean of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.mean", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "dict_idx", "is_optional": false, "type": "List[str]", "description": ""}]}},
{"id": "pandas.DataFrame.median", "code": "pandas.DataFrame.median(self,dict_idx)", "example": "NA", "summary": "Return the median of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.median", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""},  {"name": "dict_idx", "is_optional": false, "type": "List[str]", "description": ""}]}},
{"id": "pandas.DataFrame.mad", "code": "pandas.DataFrame.mad(self,axis=None,skipna=None,level=None)", "example": "NA", "summary": "Return the mean absolute deviation of the values for the requested axis", "code-info": {"name": "pandas.DataFrame.mad", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.kurtosis", "code": "pandas.DataFrame.kurtosis(self,axis=None,skipna=None,level=None,numeric_only=None,**kwargs)", "example": "NA", "summary": "Return unbiased kurtosis over requested axis", "code-info": {"name": "pandas.DataFrame.kurtosis", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "0", "description": ""}]}},
{"id": "pandas.DataFrame.describe", "code": "pandas.DataFrame.describe(self:~FrameOrSeries,percentiles=None,include=None,exclude=None)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2, 3])\n&gt;&gt;&gt; s.describe()\ncount    3.0\nmean     2.0\nstd      1.0\nmin      1.0\n25%      1.5\n50%      2.0\n75%      2.5\nmax      3.0\ndtype: float64\n\n", "summary": "Generate descriptive statistics", "code-info": {"name": "pandas.DataFrame.describe", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "percentiles", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "include", "is_optional": true, "type": "\u2018all\u2019 : All columns of the input will be included in the output", "default_value": "None", "description": ""}, {"name": "exclude", "is_optional": true, "type": "e.g. df.describe(include=['O']", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.kurt", "code": "pandas.DataFrame.kurt(self,axis=None,skipna=None,level=None,numeric_only=None,**kwargs)", "example": "NA", "summary": "Return unbiased kurtosis over requested axis", "code-info": {"name": "pandas.DataFrame.kurt", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "0", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "0", "description": ""}]}},
{"id": "pandas.DataFrame.diff", "code": "pandas.DataFrame.diff(self,periods=1,axis=0)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n...                    'b': [1, 1, 2, 3, 5, 8],\n...                    'c': [1, 4, 9, 16, 25, 36]})\n&gt;&gt;&gt; df\n   a  b   c\n0  1  1   1\n1  2  1   4\n2  3  2   9\n3  4  3  16\n4  5  5  25\n5  6  8  36\n\n", "summary": "First discrete difference of element", "code-info": {"name": "pandas.DataFrame.diff", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "periods", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.cumsum", "code": "pandas.DataFrame.cumsum(self,axis=None,skipna=True,*args,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n&gt;&gt;&gt; s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\n", "summary": "Return cumulative sum over a DataFrame or Series axis", "code-info": {"name": "pandas.DataFrame.cumsum", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "*args", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}]}},
{"id": "pandas.DataFrame.eval", "code": "pandas.DataFrame.eval(self,expr,inplace=False,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n&gt;&gt;&gt; df\n   A   B\n0  1  10\n1  2   8\n2  3   6\n3  4   4\n4  5   2\n&gt;&gt;&gt; df.eval('A + B')\n0    11\n1    10\n2     9\n3     8\n4     7\ndtype: int64\n\n", "summary": "Evaluate a string describing operations on DataFrame columns", "code-info": {"name": "pandas.DataFrame.eval", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "expr", "is_optional": false, "type": "", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.cumprod", "code": "pandas.DataFrame.cumprod(self,axis=None,skipna=True,*args,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n&gt;&gt;&gt; s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\n", "summary": "Return cumulative product over a DataFrame or Series axis", "code-info": {"name": "pandas.DataFrame.cumprod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "*args", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}]}},
{"id": "pandas.DataFrame.cummax", "code": "pandas.DataFrame.cummax(self,axis=None,skipna=True,*args,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n&gt;&gt;&gt; s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\n", "summary": "Return cumulative maximum over a DataFrame or Series axis", "code-info": {"name": "pandas.DataFrame.cummax", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "*args", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}]}},
{"id": "pandas.DataFrame.cummin", "code": "pandas.DataFrame.cummin(self,axis=None,skipna=True,*args,**kwargs)", "example": "&gt;&gt;&gt; s = pd.Series([2, np.nan, 5, -1, 0])\n&gt;&gt;&gt; s\n0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64\n\n", "summary": "Return cumulative minimum over a DataFrame or Series axis", "code-info": {"name": "pandas.DataFrame.cummin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "*args", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0The index or the name of the axis. 0 is equivalent to None or \u2018index\u2019.skipnabool, default TrueExclude NA/null values. If an entire row/column is NA, the resultwill be NA.*args, **kwargs :Additional keywords have no effect but might be accepted forcompatibility with NumPy", "description": ""}]}},
{"id": "pandas.DataFrame.cov", "code": "pandas.DataFrame.cov(self,min_periods=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n...                   columns=['dogs', 'cats'])\n&gt;&gt;&gt; df.cov()\n          dogs      cats\ndogs  0.666667 -1.000000\ncats -1.000000  1.666667\n\n", "summary": "Compute pairwise covariance of columns, excluding NA/null values", "code-info": {"name": "pandas.DataFrame.cov", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "min_periods", "is_optional": true, "type": "min_periodsint, optionalMinimum number of observations required per pair of columnsto have a valid result", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.corr", "code": "pandas.DataFrame.corr(self,method='pearson',min_periods=1)", "example": "&gt;&gt;&gt; def histogram_intersection(a, b):\n...     v = np.minimum(a, b).sum().round(decimals=1)\n...     return v\n&gt;&gt;&gt; df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n...                   columns=['dogs', 'cats'])\n&gt;&gt;&gt; df.corr(method=histogram_intersection)\n      dogs  cats\ndogs   1.0   0.3\ncats   0.3   1.0\n\n", "summary": "Compute pairwise correlation of columns, excluding NA/null values", "code-info": {"name": "pandas.DataFrame.corr", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "method", "is_optional": true, "type": "string", "default_value": "'pearson'", "description": ""}, {"name": "min_periods", "is_optional": true, "type": "int", "default_value": "1", "description": ""}]}},
{"id": "pandas.DataFrame.corrwith", "code": "pandas.DataFrame.corrwith(self,other,axis=0,drop=False,method='pearson')", "example": "NA", "summary": "Compute pairwise correlation", "code-info": {"name": "pandas.DataFrame.corrwith", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "drop", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "method", "is_optional": true, "type": "string", "default_value": "'pearson'", "description": ""}]}}, {"id": "pandas.DataFrame.count", "code": "pandas.DataFrame.count(self,axis=0,level=None,numeric_only=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\"Person\":\n...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n...                    \"Age\": [24., np.nan, 21., 33, 26],\n...                    \"Single\": [False, True, True, True, False]})\n&gt;&gt;&gt; df\n   Person   Age  Single\n0    John  24.0   False\n1    Myla   NaN    True\n2   Lewis  21.0    True\n3    John  33.0    True\n4    Myla  26.0   False\n\n", "summary": "Count non-NA cells for each column or row", "code-info": {"name": "pandas.DataFrame.count", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "dict_idx", "type": "List[str]", "is_optional": false, "description": ""}, {"name": "level", "is_optional": true, "type": "hierarchical", "default_value": "None", "description": ""}, {"name": "numeric_only", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.clip", "code": "pandas.DataFrame.clip(self:~FrameOrSeries,lower=None,upper=None,axis=None,inplace:bool=False,*args,**kwargs)", "example": "&gt;&gt;&gt; data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n&gt;&gt;&gt; df = pd.DataFrame(data)\n&gt;&gt;&gt; df\n   col_0  col_1\n0      9     -2\n1     -3     -7\n2      0      6\n3     -1      8\n4      5     -5\n\n", "summary": "Trim values at input threshold(s)", "code-info": {"name": "pandas.DataFrame.clip", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "lower", "is_optional": true, "type": "lowerfloat or array_like, default NoneMinimum threshold value. All values below thisthreshold will be set to it.upperfloat or array_like, default NoneMaximum threshold value. All values above thisthreshold will be set to it.axisint or str axis name, optionalAlign object with lower and upper along the given axis.inplacebool, default FalseWhether to perform the operation in place on the data.New in version 0.21.0.*args, **kwargsAdditional keywords have no effect but might be acceptedfor compatibility with numpy", "default_value": "None", "description": ""}, {"name": "upper", "is_optional": true, "type": "lowerfloat or array_like, default NoneMinimum threshold value. All values below thisthreshold will be set to it.upperfloat or array_like, default NoneMaximum threshold value. All values above thisthreshold will be set to it.axisint or str axis name, optionalAlign object with lower and upper along the given axis.inplacebool, default FalseWhether to perform the operation in place on the data.New in version 0.21.0.*args, **kwargsAdditional keywords have no effect but might be acceptedfor compatibility with numpy", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "lowerfloat or array_like, default NoneMinimum threshold value. All values below thisthreshold will be set to it.upperfloat or array_like, default NoneMaximum threshold value. All values above thisthreshold will be set to it.axisint or str axis name, optionalAlign object with lower and upper along the given axis.inplacebool, default FalseWhether to perform the operation in place on the data.New in version 0.21.0.*args, **kwargsAdditional keywords have no effect but might be acceptedfor compatibility with numpy", "default_value": "None", "description": ""}, {"name": "inplace:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "*args", "is_optional": false, "type": "lowerfloat or array_like, default NoneMinimum threshold value. All values below thisthreshold will be set to it.upperfloat or array_like, default NoneMaximum threshold value. All values above thisthreshold will be set to it.axisint or str axis name, optionalAlign object with lower and upper along the given axis.inplacebool, default FalseWhether to perform the operation in place on the data.New in version 0.21.0.*args, **kwargsAdditional keywords have no effect but might be acceptedfor compatibility with numpy", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "lowerfloat or array_like, default NoneMinimum threshold value. All values below thisthreshold will be set to it.upperfloat or array_like, default NoneMaximum threshold value. All values above thisthreshold will be set to it.axisint or str axis name, optionalAlign object with lower and upper along the given axis.inplacebool, default FalseWhether to perform the operation in place on the data.New in version 0.21.0.*args, **kwargsAdditional keywords have no effect but might be acceptedfor compatibility with numpy", "description": ""}]}},
{"id": "pandas.DataFrame.all", "code": "pandas.DataFrame.all(self,axis=0,bool_only=None,skipna=True,level=None,**kwargs)", "example": "&gt;&gt;&gt; pd.Series([True, True]).all()\nTrue\n&gt;&gt;&gt; pd.Series([True, False]).all()\nFalse\n&gt;&gt;&gt; pd.Series([]).all()\nTrue\n&gt;&gt;&gt; pd.Series([np.nan]).all()\nTrue\n&gt;&gt;&gt; pd.Series([np.nan]).all(skipna=False)\nTrue\n\n", "summary": "Return whether all elements are True, potentially over an axis", "code-info": {"name": "pandas.DataFrame.all", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "bool_only", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.any", "code": "pandas.DataFrame.any(self,axis=0,bool_only=None,skipna=True,level=None,**kwargs)", "example": "&gt;&gt;&gt; pd.Series([False, False]).any()\nFalse\n&gt;&gt;&gt; pd.Series([True, False]).any()\nTrue\n&gt;&gt;&gt; pd.Series([]).any()\nFalse\n&gt;&gt;&gt; pd.Series([np.nan]).any()\nFalse\n&gt;&gt;&gt; pd.Series([np.nan]).any(skipna=False)\nTrue\n\n", "summary": "Return whether any element is True, potentially over an axis", "code-info": {"name": "pandas.DataFrame.any", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "bool_only", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.abs", "code": "pandas.DataFrame.abs(self:~FrameOrSeries)", "example": "&gt;&gt;&gt; s = pd.Series([-1.10, 2, -3.33, 4])\n&gt;&gt;&gt; s.abs()\n0    1.10\n1    2.00\n2    3.33\n3    4.00\ndtype: float64\n\n", "summary": "Return a Series/DataFrame with absolute numeric value of each element", "code-info": {"name": "pandas.DataFrame.abs", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.expanding", "code": "pandas.DataFrame.expanding(self,min_periods=1,center=False,axis=0)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n", "summary": "Provide expanding transformations", "code-info": {"name": "pandas.DataFrame.expanding", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "min_periods", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "center", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.ewm", "code": "pandas.DataFrame.ewm(self,com=None,span=None,halflife=None,alpha=None,min_periods=0,adjust=True,ignore_na=False,axis=0)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n&gt;&gt;&gt; df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n", "summary": "Provide exponential weighted functions", "code-info": {"name": "pandas.DataFrame.ewm", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "com", "is_optional": true, "type": "\\alpha = 1 / (1 + com", "default_value": "None", "description": ""}, {"name": "span", "is_optional": true, "type": "\\alpha = 1 / (1 + com", "default_value": "None", "description": ""}, {"name": "halflife", "is_optional": true, "type": "\\alpha = 1 / (1 + com", "default_value": "None", "description": ""}, {"name": "alpha", "is_optional": true, "type": "\\alpha = 1 / (1 + com", "default_value": "None", "description": ""}, {"name": "min_periods", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "adjust", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "ignore_na", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}]}},
{"id": "pandas.DataFrame.rolling", "code": "pandas.DataFrame.rolling(self,window,min_periods=None,center=False,win_type=None,on=None,axis=0,closed=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})\n&gt;&gt;&gt; df\n     B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\n", "summary": "Provide rolling window calculations", "code-info": {"name": "pandas.DataFrame.rolling", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "window", "is_optional": false, "type": "otherwise result is NA", "description": ""}, {"name": "min_periods", "is_optional": true, "type": "otherwise result is NA", "default_value": "None", "description": ""}, {"name": "center", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "win_type", "is_optional": true, "type": "otherwise result is NA", "default_value": "None", "description": ""}, {"name": "on", "is_optional": true, "type": "otherwise result is NA", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "closed", "is_optional": true, "type": "otherwise result is NA", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.groupby", "code": "pandas.DataFrame.groupby(self, by: List[str])", "example": "&gt;&gt;&gt; df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n&gt;&gt;&gt; df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n&gt;&gt;&gt; df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n", "summary": "Group DataFrame using a mapper or by a Series of columns", "code-info": {"name": "pandas.DataFrame.groupby", "parameters": [{"name": "self", "is_optional": false, "type": "the Series\u2019 values are firstaligned; see .align(", "description": ""}, {"name": "by", "is_optional": false, "type": "List[str]", "default_value": "", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "level", "is_optional": true, "type": "the Series\u2019 values are firstaligned; see .align(", "default_value": "None", "description": ""}, {"name": "as_index:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "sort:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "group_keys:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "squeeze:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "observed:bool", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.transform", "code": "pandas.DataFrame.transform(self,func,axis=0,*args,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})\n&gt;&gt;&gt; df\n   A  B\n0  0  1\n1  1  2\n2  2  3\n&gt;&gt;&gt; df.transform(lambda x: x + 1)\n   A  B\n0  1  2\n1  2  3\n2  3  4\n\n", "summary": "Call func on self producing a DataFrame with transformed values", "code-info": {"name": "pandas.DataFrame.transform", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "functio", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.aggregate", "code": "pandas.DataFrame.aggregate(self,func,axis=0,*args,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n\n", "summary": "Aggregate using one or more operations over the specified axis", "code-info": {"name": "pandas.DataFrame.aggregate", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "functio", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.agg", "code": "pandas.DataFrame.agg(self,func,axis=0,*args,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3],\n...                    [4, 5, 6],\n...                    [7, 8, 9],\n...                    [np.nan, np.nan, np.nan]],\n...                   columns=['A', 'B', 'C'])\n\n", "summary": "Aggregate using one or more operations over the specified axis", "code-info": {"name": "pandas.DataFrame.agg", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "functio", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.pipe", "code": "pandas.DataFrame.pipe(self,func,*args,**kwargs)", "example": "NA", "summary": "Apply func(self, *args, **kwargs)", "code-info": {"name": "pandas.DataFrame.pipe", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "callable, data_keyword", "description": ""}, {"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.applymap", "code": "pandas.DataFrame.applymap(self,func)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n&gt;&gt;&gt; df\n       0      1\n0  1.000  2.120\n1  3.356  4.567\n\n", "summary": "Apply a function to a Dataframe elementwise", "code-info": {"name": "pandas.DataFrame.applymap", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "func", "is_optional": false, "type": "funccallablePython function, returns a single value from a single value", "description": ""}]}},
{"id": "pandas.DataFrame.ne", "code": "pandas.DataFrame.ne(self,other,axis='columns',level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\n", "summary": "Get Not equal to of dataframe and other, element-wise (binary operator ne)", "code-info": {"name": "pandas.DataFrame.ne", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.le", "code": "pandas.DataFrame.le(self,other,axis='columns',level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\n", "summary": "Get Less than or equal to of dataframe and other, element-wise (binary operator le)", "code-info": {"name": "pandas.DataFrame.le", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.ge", "code": "pandas.DataFrame.ge(self,other,axis='columns',level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\n", "summary": "Get Greater than or equal to of dataframe and other, element-wise (binary operator ge)", "code-info": {"name": "pandas.DataFrame.ge", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rmod", "code": "pandas.DataFrame.rmod(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Modulo of dataframe and other, element-wise (binary operator rmod)", "code-info": {"name": "pandas.DataFrame.rmod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.gt", "code": "pandas.DataFrame.gt(self,other,axis='columns',level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\n", "summary": "Get Greater than of dataframe and other, element-wise (binary operator gt)", "code-info": {"name": "pandas.DataFrame.gt", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rfloordiv", "code": "pandas.DataFrame.rfloordiv(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Integer division of dataframe and other, element-wise (binary operator rfloordiv)", "code-info": {"name": "pandas.DataFrame.rfloordiv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rpow", "code": "pandas.DataFrame.rpow(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Exponential power of dataframe and other, element-wise (binary operator rpow)", "code-info": {"name": "pandas.DataFrame.rpow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.lt", "code": "pandas.DataFrame.lt(self,other,axis='columns',level=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'cost': [250, 150, 100],\n...                    'revenue': [100, 250, 300]},\n...                   index=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n   cost  revenue\nA   250      100\nB   150      250\nC   100      300\n\n", "summary": "Get Less than of dataframe and other, element-wise (binary operator lt)", "code-info": {"name": "pandas.DataFrame.lt", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rmul", "code": "pandas.DataFrame.rmul(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Multiplication of dataframe and other, element-wise (binary operator rmul)", "code-info": {"name": "pandas.DataFrame.rmul", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rdiv", "code": "pandas.DataFrame.rdiv(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Floating division of dataframe and other, element-wise (binary operator rtruediv)", "code-info": {"name": "pandas.DataFrame.rdiv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rtruediv", "code": "pandas.DataFrame.rtruediv(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Floating division of dataframe and other, element-wise (binary operator rtruediv)", "code-info": {"name": "pandas.DataFrame.rtruediv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.radd", "code": "pandas.DataFrame.radd(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Addition of dataframe and other, element-wise (binary operator radd)", "code-info": {"name": "pandas.DataFrame.radd", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.pow", "code": "pandas.DataFrame.pow(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Exponential power of dataframe and other, element-wise (binary operator pow)", "code-info": {"name": "pandas.DataFrame.pow", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.mod", "code": "pandas.DataFrame.mod(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Modulo of dataframe and other, element-wise (binary operator mod)", "code-info": {"name": "pandas.DataFrame.mod", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.rsub", "code": "pandas.DataFrame.rsub(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Subtraction of dataframe and other, element-wise (binary operator rsub)", "code-info": {"name": "pandas.DataFrame.rsub", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.dot", "code": "pandas.DataFrame.dot(self,other)", "example": "&gt;&gt;&gt; df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n&gt;&gt;&gt; s = pd.Series([1, 1, 2, 1])\n&gt;&gt;&gt; df.dot(s)\n0    -4\n1     5\ndtype: int64\n\n", "summary": "Compute the matrix multiplication between the DataFrame and other", "code-info": {"name": "pandas.DataFrame.dot", "parameters": [{"name": "self", "is_optional": false, "type": "Series or DataFrameIf other is a Series, return the matrix product between self andother as a Serie. If other is a DataFrame or a numpy.array, returnthe matrix product of self and other in a DataFrame of a np.array", "description": ""}, {"name": "other", "is_optional": false, "type": "otherSeries, DataFrame or array-likeThe other object to compute the matrix product with", "description": ""}]}},
{"id": "pandas.DataFrame.floordiv", "code": "pandas.DataFrame.floordiv(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Integer division of dataframe and other, element-wise (binary operator floordiv)", "code-info": {"name": "pandas.DataFrame.floordiv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.truediv", "code": "pandas.DataFrame.truediv(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Floating division of dataframe and other, element-wise (binary operator truediv)", "code-info": {"name": "pandas.DataFrame.truediv", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.div", "code": "pandas.DataFrame.div(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Floating division of dataframe and other, element-wise (binary operator truediv)", "code-info": {"name": "pandas.DataFrame.div", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.mul", "code": "pandas.DataFrame.mul(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Multiplication of dataframe and other, element-wise (binary operator mul)", "code-info": {"name": "pandas.DataFrame.mul", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.sub", "code": "pandas.DataFrame.sub(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Subtraction of dataframe and other, element-wise (binary operator sub)", "code-info": {"name": "pandas.DataFrame.sub", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.query", "code": "pandas.DataFrame.query(self,expr,inplace=False,**kwargs)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'A': range(1, 6),\n...                    'B': range(10, 0, -2),\n...                    'C C': range(10, 5, -1)})\n&gt;&gt;&gt; df\n   A   B  C C\n0  1  10   10\n1  2   8    9\n2  3   6    8\n3  4   4    7\n4  5   2    6\n&gt;&gt;&gt; df.query('A &gt; B')\n   A  B  C C\n4  5  2    6\n\n", "summary": "Query the columns of a DataFrame with a boolean expression", "code-info": {"name": "pandas.DataFrame.query", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "expr", "is_optional": false, "type": "str", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "", "description": ""}]}},
{"id": "pandas.DataFrame.add", "code": "pandas.DataFrame.add(self,other,axis='columns',level=None,fill_value=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'angles': [0, 3, 4],\n...                    'degrees': [360, 180, 360]},\n...                   index=['circle', 'triangle', 'rectangle'])\n&gt;&gt;&gt; df\n           angles  degrees\ncircle          0      360\ntriangle        3      180\nrectangle       4      360\n\n", "summary": "Get Addition of dataframe and other, element-wise (binary operator add)", "code-info": {"name": "pandas.DataFrame.add", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": false, "type": "0 or \u2018index\u2019", "description": ""}, {"name": "axis", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}, {"name": "level", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "0 or \u2018index\u2019", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.mask", "code": "pandas.DataFrame.mask(self,cond,other=nan,inplace=False,axis=None,level=None,errors='raise',try_cast=False)", "example": "&gt;&gt;&gt; s = pd.Series(range(5))\n&gt;&gt;&gt; s.where(s &gt; 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n\n", "summary": "Replace values where the condition is True", "code-info": {"name": "pandas.DataFrame.mask", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "cond", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": true, "type": "others", "default_value": "nan", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "errors", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}, {"name": "try_cast", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.isin", "code": "pandas.DataFrame.isin(self,values)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n...                   index=['falcon', 'dog'])\n&gt;&gt;&gt; df\n        num_legs  num_wings\nfalcon         2          2\ndog            4          0\n\n", "summary": "Whether each element in the DataFrame is contained in values", "code-info": {"name": "pandas.DataFrame.isin", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "values", "is_optional": false, "type": "valuesiterable, Series, DataFrame or dictThe result will only be true at a location if all thelabels match. If values is a Series, that\u2019s the index. Ifvalues is a dict, the keys must be the column names,which must match. If values is a DataFrame,then both the index and column labels must match", "description": ""}]}},
{"id": "pandas.DataFrame.where", "code": "pandas.DataFrame.where(self,cond,other=nan,inplace=False,axis=None,level=None,errors='raise',try_cast=False)", "example": "&gt;&gt;&gt; s = pd.Series(range(5))\n&gt;&gt;&gt; s.where(s &gt; 0)\n0    NaN\n1    1.0\n2    2.0\n3    3.0\n4    4.0\ndtype: float64\n\n", "summary": "Replace values where the condition is False", "code-info": {"name": "pandas.DataFrame.where", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "cond", "is_optional": false, "type": "others", "description": ""}, {"name": "other", "is_optional": true, "type": "others", "default_value": "nan", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "errors", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}, {"name": "try_cast", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.get", "code": "pandas.DataFrame.get(self,key,default=None)", "example": "NA", "summary": "Get item from object for given key (ex: DataFrame column)", "code-info": {"name": "pandas.DataFrame.get", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "key", "is_optional": false, "type": "keyobjec", "description": ""}, {"name": "default", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.tail", "code": "pandas.DataFrame.tail(self:~FrameOrSeries,n:int=5)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n&gt;&gt;&gt; df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\n", "summary": "Return the last n rows", "code-info": {"name": "pandas.DataFrame.tail", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "n:int", "is_optional": true, "type": "int", "default_value": "5", "description": ""}]}},
{"id": "pandas.DataFrame.pop", "code": "pandas.DataFrame.pop(self:~FrameOrSeries,item)", "example": "&gt;&gt;&gt; df = pd.DataFrame([('falcon', 'bird', 389.0),\n...                    ('parrot', 'bird', 24.0),\n...                    ('lion', 'mammal', 80.5),\n...                    ('monkey', 'mammal', np.nan)],\n...                   columns=('name', 'class', 'max_speed'))\n&gt;&gt;&gt; df\n     name   class  max_speed\n0  falcon    bird      389.0\n1  parrot    bird       24.0\n2    lion  mammal       80.5\n3  monkey  mammal        NaN\n\n", "summary": "Return item and drop from frame", "code-info": {"name": "pandas.DataFrame.pop", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "item", "is_optional": false, "type": "itemstrLabel of column to be popped", "description": ""}]}},
{"id": "pandas.DataFrame.lookup", "code": "pandas.DataFrame.lookup(self,row_labels,col_labels)", "example": "NA", "summary": "Label-based \u201cfancy indexing\u201d function for DataFrame", "code-info": {"name": "pandas.DataFrame.lookup", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "row_labels", "is_optional": false, "type": "row_labelssequenceThe row labels to use for lookup.col_labelssequenceThe column labels to use for lookup", "description": ""}, {"name": "col_labels", "is_optional": false, "type": "row_labelssequenceThe row labels to use for lookup.col_labelssequenceThe column labels to use for lookup", "description": ""}]}},
{"id": "pandas.DataFrame.itertuples", "code": "pandas.DataFrame.itertuples(self,index=True,name='Pandas')", "example": "&gt;&gt;&gt; df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n...                   index=['dog', 'hawk'])\n&gt;&gt;&gt; df\n      num_legs  num_wings\ndog          4          0\nhawk         2          2\n&gt;&gt;&gt; for row in df.itertuples():\n...     print(row)\n...\nPandas(Index='dog', num_legs=4, num_wings=0)\nPandas(Index='hawk', num_legs=2, num_wings=2)\n\n", "summary": "Iterate over DataFrame rows as namedtuples", "code-info": {"name": "pandas.DataFrame.itertuples", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "name", "is_optional": true, "type": "string", "default_value": "'Pandas'", "description": ""}]}},
{"id": "pandas.DataFrame.iterrows", "code": "pandas.DataFrame.iterrows(self)", "example": "NA", "summary": "Iterate over DataFrame rows as (index, Series) pairs", "code-info": {"name": "pandas.DataFrame.iterrows", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.keys", "code": "pandas.DataFrame.keys(self)", "example": "NA", "summary": "Get the \u2018info axis\u2019 (see Indexing for more)", "code-info": {"name": "pandas.DataFrame.keys", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.items", "code": "pandas.DataFrame.items(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n...                   'population': [1864, 22000, 80000]},\n...                   index=['panda', 'polar', 'koala'])\n&gt;&gt;&gt; df\n        species   population\npanda   bear      1864\npolar   bear      22000\nkoala   marsupial 80000\n&gt;&gt;&gt; for label, content in df.items():\n...     print('label:', label)\n...     print('content:', content, sep='\\n')\n...\nlabel: species\ncontent:\npanda         bear\npolar         bear\nkoala    marsupial\nName: species, dtype: object\nlabel: population\ncontent:\npanda     1864\npolar    22000\nkoala    80000\nName: population, dtype: int64\n\n", "summary": "Iterate over (column name, Series) pairs", "code-info": {"name": "pandas.DataFrame.items", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.iteritems", "code": "pandas.DataFrame.iteritems(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n...                   'population': [1864, 22000, 80000]},\n...                   index=['panda', 'polar', 'koala'])\n&gt;&gt;&gt; df\n        species   population\npanda   bear      1864\npolar   bear      22000\nkoala   marsupial 80000\n&gt;&gt;&gt; for label, content in df.items():\n...     print('label:', label)\n...     print('content:', content, sep='\\n')\n...\nlabel: species\ncontent:\npanda         bear\npolar         bear\nkoala    marsupial\nName: species, dtype: object\nlabel: population\ncontent:\npanda     1864\npolar    22000\nkoala    80000\nName: population, dtype: int64\n\n", "summary": "Iterate over (column name, Series) pairs", "code-info": {"name": "pandas.DataFrame.iteritems", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.__iter__", "code": "pandas.DataFrame.__iter__(self)", "example": "NA", "summary": "Iterate over info axis", "code-info": {"name": "pandas.DataFrame.__iter__", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.insert", "code": "pandas.DataFrame.insert(self,loc,column,value,allow_duplicates=False)", "example": "NA", "summary": "Insert column into DataFrame at specified location", "code-info": {"name": "pandas.DataFrame.insert", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "loc", "is_optional": false, "type": "int", "description": ""}, {"name": "column", "is_optional": false, "type": "str", "description": ""}, {"name": "value", "is_optional": false, "type": "int", "description": ""}, {"name": "allow_duplicates", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.iat", "code": "pandas.DataFrame.iat", "example": "&gt;&gt;&gt; df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   columns=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n    A   B   C\n0   0   2   3\n1   0   4   1\n2  10  20  30\n\n", "summary": "Access a single value for a row/column pair by integer position", "code-info": {"name": "pandas.DataFrame.iat", "parameters": []}},
{"id": "pandas.DataFrame.at", "code": "pandas.DataFrame.at", "example": "&gt;&gt;&gt; df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n&gt;&gt;&gt; df\n    A   B   C\n4   0   2   3\n5   0   4   1\n6  10  20  30\n\n", "summary": "Access a single value for a row/column label pair", "code-info": {"name": "pandas.DataFrame.at", "parameters": []}},
{"id": "pandas.DataFrame.bool", "code": "pandas.DataFrame.bool(self)", "example": "NA", "summary": "Return the bool of a single element PandasObject", "code-info": {"name": "pandas.DataFrame.bool", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.head", "code": "pandas.DataFrame.head(self,n)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n&gt;&gt;&gt; df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\n\n", "summary": "Return the first n rows", "code-info": {"name": "pandas.DataFrame.head", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "n", "is_optional": false, "type": "int", "description": ""}]}},
{"id": "pandas.DataFrame.notna", "code": "pandas.DataFrame.notna(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n&gt;&gt;&gt; df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n", "summary": "Detect existing (non-missing) values", "code-info": {"name": "pandas.DataFrame.notna", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.isna", "code": "pandas.DataFrame.isna(self)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'age': [5, 6, np.NaN],\n...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n...                             pd.Timestamp('1940-04-25')],\n...                    'name': ['Alfred', 'Batman', ''],\n...                    'toy': [None, 'Batmobile', 'Joker']})\n&gt;&gt;&gt; df\n   age       born    name        toy\n0  5.0        NaT  Alfred       None\n1  6.0 1939-05-27  Batman  Batmobile\n2  NaN 1940-04-25              Joker\n\n", "summary": "Detect missing values", "code-info": {"name": "pandas.DataFrame.isna", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.copy", "code": "pandas.DataFrame.copy(self:~FrameOrSeries,deep:bool=True)", "example": "&gt;&gt;&gt; s = pd.Series([1, 2], index=[\"a\", \"b\"])\n&gt;&gt;&gt; s\na    1\nb    2\ndtype: int64\n\n", "summary": "Make a copy of this object\u2019s indices and data", "code-info": {"name": "pandas.DataFrame.copy", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "deep:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.infer_objects", "code": "pandas.DataFrame.infer_objects(self:~FrameOrSeries)", "example": "&gt;&gt;&gt; df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n&gt;&gt;&gt; df = df.iloc[1:]\n&gt;&gt;&gt; df\n   A\n1  1\n2  2\n3  3\n\n", "summary": "Attempt to infer better dtypes for object columns", "code-info": {"name": "pandas.DataFrame.infer_objects", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.convert_dtypes", "code": "pandas.DataFrame.convert_dtypes(self:~FrameOrSeries,infer_objects:bool=True,convert_string:bool=True,convert_integer:bool=True,convert_boolean:bool=True)", "example": "&gt;&gt;&gt; df = pd.DataFrame(\n...     {\n...         \"a\": pd.Series([1, 2, 3], dtype=np.dtype(\"int32\")),\n...         \"b\": pd.Series([\"x\", \"y\", \"z\"], dtype=np.dtype(\"O\")),\n...         \"c\": pd.Series([True, False, np.nan], dtype=np.dtype(\"O\")),\n...         \"d\": pd.Series([\"h\", \"i\", np.nan], dtype=np.dtype(\"O\")),\n...         \"e\": pd.Series([10, np.nan, 20], dtype=np.dtype(\"float\")),\n...         \"f\": pd.Series([np.nan, 100.5, 200], dtype=np.dtype(\"float\")),\n...     }\n... )\n\n", "summary": "Convert columns to best possible dtypes using dtypes supporting pd.NA", "code-info": {"name": "pandas.DataFrame.convert_dtypes", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "infer_objects:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "convert_string:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "convert_integer:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "convert_boolean:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.astype", "code": "pandas.DataFrame.astype(self:~FrameOrSeries,dtype,copy:bool=True,errors:str='raise')", "example": "&gt;&gt;&gt; d = {'col1': [1, 2], 'col2': [3, 4]}\n&gt;&gt;&gt; df = pd.DataFrame(data=d)\n&gt;&gt;&gt; df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\n", "summary": "Cast a pandas object to a specified dtype dtype", "code-info": {"name": "pandas.DataFrame.astype", "parameters": [{"name": "self:~FrameOrSeries", "is_optional": false, "type": "others", "description": ""}, {"name": "dtype", "is_optional": false, "type": "others", "description": ""}, {"name": "copy:bool", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "errors:str", "is_optional": true, "type": "string", "default_value": "'raise'", "description": ""}]}},
{"id": "pandas.DataFrame.empty", "code": "pandas.DataFrame.empty", "example": "&gt;&gt;&gt; df_empty = pd.DataFrame({'A' : []})\n&gt;&gt;&gt; df_empty\nEmpty DataFrame\nColumns: [A]\nIndex: []\n&gt;&gt;&gt; df_empty.empty\nTrue\n\n", "summary": "Indicator whether DataFrame is empty", "code-info": {"name": "pandas.DataFrame.empty", "parameters": []}},
{"id": "pandas.DataFrame.memory_usage", "code": "pandas.DataFrame.memory_usage(self,index=True,deep=False)", "example": "&gt;&gt;&gt; dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n&gt;&gt;&gt; data = dict([(t, np.ones(shape=5000).astype(t))\n...              for t in dtypes])\n&gt;&gt;&gt; df = pd.DataFrame(data)\n&gt;&gt;&gt; df.head()\n   int64  float64            complex128  object  bool\n0      1      1.0    1.000000+0.000000j       1  True\n1      1      1.0    1.000000+0.000000j       1  True\n2      1      1.0    1.000000+0.000000j       1  True\n3      1      1.0    1.000000+0.000000j       1  True\n4      1      1.0    1.000000+0.000000j       1  True\n\n", "summary": "Return the memory usage of each column in bytes", "code-info": {"name": "pandas.DataFrame.memory_usage", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "index", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "deep", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.size", "code": "pandas.DataFrame.size", "example": "&gt;&gt;&gt; s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n&gt;&gt;&gt; s.size\n3\n\n", "summary": "Return an int representing the number of elements in this object", "code-info": {"name": "pandas.DataFrame.size", "parameters": []}},
{"id": "pandas.DataFrame.shape", "code": "pandas.DataFrame.shape", "example": "&gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n&gt;&gt;&gt; df.shape\n(2, 2)\n\n", "summary": "Return a tuple representing the dimensionality of the DataFrame", "code-info": {"name": "pandas.DataFrame.shape", "parameters": []}},
{"id": "pandas.DataFrame.ndim", "code": "pandas.DataFrame.ndim", "example": "&gt;&gt;&gt; s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n&gt;&gt;&gt; s.ndim\n1\n\n", "summary": "Return an int representing the number of axes / array dimensions", "code-info": {"name": "pandas.DataFrame.ndim", "parameters": []}},
{"id": "pandas.DataFrame.select_dtypes", "code": "pandas.DataFrame.select_dtypes(self,include=None,exclude=None)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'a': [1, 2] * 3,\n...                    'b': [True, False] * 3,\n...                    'c': [1.0, 2.0] * 3})\n&gt;&gt;&gt; df\n        a      b  c\n0       1   True  1.0\n1       2  False  2.0\n2       1   True  1.0\n3       2  False  2.0\n4       1   True  1.0\n5       2  False  2.0\n\n", "summary": "Return a subset of the DataFrame\u2019s columns based on the column dtypes", "code-info": {"name": "pandas.DataFrame.select_dtypes", "parameters": [{"name": "self", "is_optional": false, "type": "others", "description": ""}, {"name": "include", "is_optional": true, "type": "If both of include and exclude are empt", "default_value": "None", "description": ""}, {"name": "exclude", "is_optional": true, "type": "If both of include and exclude are empt", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.axes", "code": "pandas.DataFrame.axes", "example": "&gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n&gt;&gt;&gt; df.axes\n[RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\ndtype='object')]\n\n", "summary": "Return a list representing the axes of the DataFrame", "code-info": {"name": "pandas.DataFrame.axes", "parameters": []}},
{"id": "pandas.DataFrame.columns", "code": "pandas.DataFrame.columns", "example": "NA", "summary": "The column labels of the DataFrame", "code-info": {"name": "pandas.DataFrame.columns", "parameters": []}},
{"id": "pandas.DataFrame.index", "code": "pandas.DataFrame.index", "example": "NA", "summary": "The index (row labels) of the DataFrame", "code-info": {"name": "pandas.DataFrame.index", "parameters": []}},
{"id": "pandas.DataFrame.dtypes", "code": "pandas.DataFrame.dtypes", "example": "&gt;&gt;&gt; df = pd.DataFrame({'float': [1.0],\n...                    'int': [1],\n...                    'datetime': [pd.Timestamp('20180310')],\n...                    'string': ['foo']})\n&gt;&gt;&gt; df.dtypes\nfloat              float64\nint                  int64\ndatetime    datetime64[ns]\nstring              object\ndtype: object\n\n", "summary": "Return the dtypes in the DataFrame", "code-info": {"name": "pandas.DataFrame.dtypes", "parameters": []}},
{"id": "pandas.DataFrame.clip_upper", "code": "pandas.DataFrame.clip_upper(threshold)", "example": "NA", "summary": "Return copy of input with values above given value truncated     Returns :clipped : same type as input     See also clip  ", "code-info": {"name": "pandas.DataFrame.clip_upper", "parameters": [{"name": "threshold", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_wide", "code": "pandas.DataFrame.to_wide(*args,**kwargs)", "example": "NA", "summary": "", "code-info": {"name": "pandas.DataFrame.to_wide", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.to_sparse", "code": "pandas.DataFrame.to_sparse(fill_value=None,kind='block')", "example": "NA", "summary": "Convert to SparseDataFrame     Parameters:fill_value : float, default NaN kind : {\u2018block\u2019, \u2018integer\u2019}   Returns:y : SparseDataFrame     ", "code-info": {"name": "pandas.DataFrame.to_sparse", "parameters": [{"name": "fill_value", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "kind", "is_optional": true, "type": "string", "default_value": "'block'", "description": ""}]}},
{"id": "pandas.DataFrame.to_msgpack", "code": "pandas.DataFrame.to_msgpack(path_or_buf=None,encoding='utf-8',**kwargs)", "example": "NA", "summary": "msgpack (serialize) object to input file path THIS IS AN EXPERIMENTAL LIBRARY and the storage format may not be stable until a future release", "code-info": {"name": "pandas.DataFrame.to_msgpack", "parameters": [{"name": "path_or_buf", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "encoding", "is_optional": true, "type": "string", "default_value": "'utf-8'", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.sortlevel", "code": "pandas.DataFrame.sortlevel(level=0,axis=0,ascending=True,inplace=False,sort_remaining=True)", "example": "NA", "summary": "Sort multilevel index by chosen axis and primary level", "code-info": {"name": "pandas.DataFrame.sortlevel", "parameters": [{"name": "level", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "ascending", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "sort_remaining", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.sort", "code": "pandas.DataFrame.sort(columns=None,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last',**kwargs)", "example": "&gt;&gt;&gt; result = df.sort(['A', 'B'], ascending=[1, 0])\n\n", "summary": "DEPRECATED: use DataFrame.sort_values() Sort DataFrame either by labels (along either axis) or by the values in column(s)     Parameters:columns : object  Column name(s) in frame", "code-info": {"name": "pandas.DataFrame.sort", "parameters": [{"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "ascending", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "kind", "is_optional": true, "type": "string", "default_value": "'quicksort'", "description": ""}, {"name": "na_position", "is_optional": true, "type": "string", "default_value": "'last'", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.is_copy", "code": "pandas.DataFrame.is_copy", "example": "NA", "summary": "", "code-info": {"name": "pandas.DataFrame.is_copy", "parameters": []}},
{"id": "pandas.DataFrame.set_value", "code": "pandas.DataFrame.set_value(index,col,value,takeable=False)", "example": "NA", "summary": "Put single value at passed column and index     Parameters:index : row label col : column label value : scalar value takeable : interpret the index/col as indexers, default False   Returns:frame : DataFrame  If label pair is contained, will be reference to calling DataFrame, otherwise a new object      ", "code-info": {"name": "pandas.DataFrame.set_value", "parameters": [{"name": "index", "is_optional": false, "type": "others", "description": ""}, {"name": "col", "is_optional": false, "type": "others", "description": ""}, {"name": "value", "is_optional": false, "type": "others", "description": ""}, {"name": "takeable", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.reindex_axis", "code": "pandas.DataFrame.reindex_axis(labels,axis=0,method=None,level=None,copy=True,limit=None,fill_value=nan)", "example": "&gt;&gt;&gt; df.reindex_axis(['A', 'B', 'C'], axis=1)\n\n", "summary": "Conform input object to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index", "code-info": {"name": "pandas.DataFrame.reindex_axis", "parameters": [{"name": "labels", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "method", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "fill_value", "is_optional": true, "type": "others", "default_value": "nan", "description": ""}]}},
{"id": "pandas.DataFrame.compare", "code": "pandas.DataFrame.compare(other,align_axis=1,keep_shape=False,keep_equal=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame(\n...     {\n...         \"col1\": [\"a\", \"a\", \"b\", \"b\", \"a\"],\n...         \"col2\": [1.0, 2.0, 3.0, np.nan, 5.0],\n...         \"col3\": [1.0, 2.0, 3.0, 4.0, 5.0]\n...     },\n...     columns=[\"col1\", \"col2\", \"col3\"],\n... )\n&gt;&gt;&gt; df\n  col1  col2  col3\n0    a   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   3.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\n", "summary": "Compare to another DataFrame and show the differences", "code-info": {"name": "pandas.DataFrame.compare", "parameters": [{"name": "other", "is_optional": false, "type": "0, or \u2018index\u2019Resulting differences are stacked verticallywith rows drawn alternately from self and other", "description": ""}, {"name": "align_axis", "is_optional": true, "type": "int", "default_value": "1", "description": ""}, {"name": "keep_shape", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "keep_equal", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.pad", "code": "pandas.DataFrame.pad(axis=None,inplace=False,limit=None,downcast=None)", "example": "NA", "summary": "Synonym for DataFrame.fillna() with method='ffill'", "code-info": {"name": "pandas.DataFrame.pad", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "downcast", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.backfill", "code": "pandas.DataFrame.backfill(axis=None,inplace=False,limit=None,downcast=None)", "example": "NA", "summary": "Synonym for DataFrame.fillna() with method='bfill'", "code-info": {"name": "pandas.DataFrame.backfill", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "limit", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "downcast", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.value_counts", "code": "pandas.DataFrame.value_counts(subset=None,normalize=False,sort=True,ascending=False)", "example": "&gt;&gt;&gt; df = pd.DataFrame({'num_legs': [2, 4, 4, 6],\n...                    'num_wings': [2, 0, 0, 0]},\n...                   index=['falcon', 'dog', 'cat', 'ant'])\n&gt;&gt;&gt; df\n        num_legs  num_wings\nfalcon         2          2\ndog            4          0\ncat            4          0\nant            6          0\n\n", "summary": "Return a Series containing counts of unique rows in the DataFrame", "code-info": {"name": "pandas.DataFrame.value_counts", "parameters": [{"name": "subset", "is_optional": true, "type": "subsetlist-like, optionalColumns to use when counting unique combinations.normalizebool, default FalseReturn proportions rather than frequencies.sortbool, default TrueSort by frequencies.ascendingbool, default FalseSort in ascending order", "default_value": "None", "description": ""}, {"name": "normalize", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "sort", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "ascending", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.ix", "code": "pandas.DataFrame.ix", "example": "NA", "summary": "A primarily label-location based indexer, with integer position fallback", "code-info": {"name": "pandas.DataFrame.ix", "parameters": []}},
{"id": "pandas.DataFrame.iterkv", "code": "pandas.DataFrame.iterkv(*args,**kwargs)", "example": "NA", "summary": "iteritems alias used to get around 2to3", "code-info": {"name": "pandas.DataFrame.iterkv", "parameters": [{"name": "*args", "is_optional": false, "type": "others", "description": ""}, {"name": "**kwargs", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.irow", "code": "pandas.DataFrame.irow(i,copy=False)", "example": "NA", "summary": "DEPRECATED", "code-info": {"name": "pandas.DataFrame.irow", "parameters": [{"name": "i", "is_optional": false, "type": "others", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.iget_value", "code": "pandas.DataFrame.iget_value(i,j)", "example": "NA", "summary": "DEPRECATED", "code-info": {"name": "pandas.DataFrame.iget_value", "parameters": [{"name": "i", "is_optional": false, "type": "others", "description": ""}, {"name": "j", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.icol", "code": "pandas.DataFrame.icol(i)", "example": "NA", "summary": "DEPRECATED", "code-info": {"name": "pandas.DataFrame.icol", "parameters": [{"name": "i", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.get_values", "code": "pandas.DataFrame.get_values()", "example": "NA", "summary": "same as values (but handles sparseness conversions) ", "code-info": {"name": "pandas.DataFrame.get_values", "parameters": []}},
{"id": "pandas.DataFrame.get_value", "code": "pandas.DataFrame.get_value(index,col,takeable=False)", "example": "NA", "summary": "Quickly retrieve single value at passed column and index     Parameters:index : row label col : column label takeable : interpret the index/col as indexers, default False   Returns:value : scalar value     ", "code-info": {"name": "pandas.DataFrame.get_value", "parameters": [{"name": "index", "is_optional": false, "type": "others", "description": ""}, {"name": "col", "is_optional": false, "type": "others", "description": ""}, {"name": "takeable", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.get_ftype_counts", "code": "pandas.DataFrame.get_ftype_counts()", "example": "NA", "summary": "Return the counts of ftypes in this object", "code-info": {"name": "pandas.DataFrame.get_ftype_counts", "parameters": []}},
{"id": "pandas.DataFrame.get_dtype_counts", "code": "pandas.DataFrame.get_dtype_counts()", "example": "NA", "summary": "Return the counts of dtypes in this object", "code-info": {"name": "pandas.DataFrame.get_dtype_counts", "parameters": []}},
{"id": "pandas.DataFrame.ftypes", "code": "pandas.DataFrame.ftypes", "example": "NA", "summary": "Return the ftypes (indication of sparse/dense and dtype) in this object", "code-info": {"name": "pandas.DataFrame.ftypes", "parameters": []}},
{"id": "pandas.DataFrame.from_items", "code": "pandas.DataFrame.from_items(items,columns=None,orient='columns')", "example": "NA", "summary": "Convert (key, value) pairs to DataFrame", "code-info": {"name": "pandas.DataFrame.from_items", "parameters": [{"name": "items", "is_optional": false, "type": "others", "description": ""}, {"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "orient", "is_optional": true, "type": "string", "default_value": "'columns'", "description": ""}]}},
{"id": "pandas.DataFrame.from_csv", "code": "pandas.DataFrame.from_csv(path,header=0,sep=',',index_col=0,parse_dates=True,encoding=None,tupleize_cols=False,infer_datetime_format=False)", "example": "NA", "summary": "Read CSV file (DISCOURAGED, please use pandas.read_csv() instead)", "code-info": {"name": "pandas.DataFrame.from_csv", "parameters": [{"name": "path", "is_optional": false, "type": "others", "description": ""}, {"name": "header", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "sep", "is_optional": true, "type": "string", "default_value": "'", "description": ""}, {"name": "'", "is_optional": false, "type": "others", "description": ""}, {"name": "index_col", "is_optional": true, "type": "int", "default_value": "0", "description": ""}, {"name": "parse_dates", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "encoding", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "tupleize_cols", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "infer_datetime_format", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.convert_objects", "code": "pandas.DataFrame.convert_objects(convert_dates=True,convert_numeric=False,convert_timedeltas=True,copy=True)", "example": "NA", "summary": "Deprecated", "code-info": {"name": "pandas.DataFrame.convert_objects", "parameters": [{"name": "convert_dates", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "convert_numeric", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}, {"name": "convert_timedeltas", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}, {"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.consolidate", "code": "pandas.DataFrame.consolidate(inplace=False)", "example": "NA", "summary": "Compute NDFrame with \u201cconsolidated\u201d internals (data of each dtype grouped together in a single ndarray)", "code-info": {"name": "pandas.DataFrame.consolidate", "parameters": [{"name": "inplace", "is_optional": true, "type": "bool", "default_value": "False", "description": ""}]}},
{"id": "pandas.DataFrame.compound", "code": "pandas.DataFrame.compound(axis=None,skipna=None,level=None)", "example": "NA", "summary": "Return the compound percentage of the values for the requested axis     Parameters:axis : {index (0), columns (1)} skipna : boolean, default True  Exclude NA/null values", "code-info": {"name": "pandas.DataFrame.compound", "parameters": [{"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "skipna", "is_optional": true, "type": "others", "default_value": "None", "description": ""}, {"name": "level", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.combineAdd", "code": "pandas.DataFrame.combineAdd(other)", "example": "NA", "summary": "DEPRECATED", "code-info": {"name": "pandas.DataFrame.combineAdd", "parameters": [{"name": "other", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.combineMult", "code": "pandas.DataFrame.combineMult(other)", "example": "NA", "summary": "DEPRECATED", "code-info": {"name": "pandas.DataFrame.combineMult", "parameters": [{"name": "other", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.clip_lower", "code": "pandas.DataFrame.clip_lower(threshold,axis=None)", "example": "NA", "summary": "Return copy of the input with values below given value(s) truncated", "code-info": {"name": "pandas.DataFrame.clip_lower", "parameters": [{"name": "threshold", "is_optional": false, "type": "others", "description": ""}, {"name": "axis", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.blocks", "code": "pandas.DataFrame.blocks", "example": "NA", "summary": "Internal property, property synonym for as_blocks() ", "code-info": {"name": "pandas.DataFrame.blocks", "parameters": []}},
{"id": "pandas.DataFrame.as_matrix", "code": "pandas.DataFrame.as_matrix(columns=None)", "example": "NA", "summary": "Convert the frame to its Numpy-array representation", "code-info": {"name": "pandas.DataFrame.as_matrix", "parameters": [{"name": "columns", "is_optional": true, "type": "others", "default_value": "None", "description": ""}]}},
{"id": "pandas.DataFrame.as_blocks", "code": "pandas.DataFrame.as_blocks(copy=True)", "example": "NA", "summary": "Convert the frame to a dict of dtype -&gt; Constructor Types that each has a homogeneous dtype", "code-info": {"name": "pandas.DataFrame.as_blocks", "parameters": [{"name": "copy", "is_optional": true, "type": "bool", "default_value": "True", "description": ""}]}},
{"id": "pandas.DataFrame.save", "code": "pandas.DataFrame.save(path)", "example": "NA", "summary": "Deprecated", "code-info": {"name": "pandas.DataFrame.save", "parameters": [{"name": "path", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.load", "code": "pandas.DataFrame.load(path)", "example": "NA", "summary": "Deprecated", "code-info": {"name": "pandas.DataFrame.load", "parameters": [{"name": "path", "is_optional": false, "type": "others", "description": ""}]}},
{"id": "pandas.DataFrame.timetuple", "code": "pandas.DataFrame.timetuple", "example": "NA", "summary": "", "code-info": {"name": "pandas.DataFrame.timetuple", "parameters": []}}]
