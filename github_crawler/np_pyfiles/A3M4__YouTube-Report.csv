file_path,api_count,code
parse.py,0,"b'#!/usr/bin/python3\nimport re\nimport os\nimport json\nimport datetime,pytz\nimport collections\nimport itertools\n\nmissing=[]\ndir = os.path.join(os.getcwd(),""Takeout/YouTube/"")\nif not os.path.exists(dir):\n\tmissing.append(dir)\nfound=False\nfor path in (""Verlauf/Wiedergabeverlauf.html"",""history/watch-history.html""):\t#translations\n\twatch_history = os.path.join(dir,path)\n\tif os.path.exists(watch_history):\n\t\tfound=True\n\t\tbreak\nif not found:\n\tmissing.append(watch_history)\nfound=False\nfor path in (""Verlauf/Suchverlauf.html"",""history/search-history.html""):\t#translations\n\tsearch_history = os.path.join(dir,path)\n\tif os.path.exists(search_history):\n\t\tfound=True\n\t\tbreak\nif not found:\n\tmissing.append(search_history)\nfound=False\nfor path in (""Meine Kommentare/Meine Kommentare.html"",""my-comments/my-comments.html""):\t#translations\n\tcomments_history = os.path.join(dir,path)\n\tif os.path.exists(comments_history):\n\t\tfound=True\n\t\tbreak\nif not found:\n\tmissing.append(comments_history)\nfound=False\nfor path in (""Playlists/Positive Bewertungen.json"",""playlists/likes.json""):\t#translations\n\tlike_history = os.path.join(dir,path)\n\tif os.path.exists(like_history):\n\t\tfound=True\n\t\tbreak\nif not found:\n\tmissing.append(like_history)\ndel found\n\nif len(missing)>0:\n\traise OSError(""Required directories do not exist: %s""%(missing))\ndel missing\n\n\nclass HTML:\n    with open(watch_history, ""r"", encoding=""utf-8"") as f:\n        html_watch = f.read()\n    with open(search_history, ""r"", encoding=""utf-8"") as f:\n        html_search = f.read()\n    try:\n        with open(comments_history, ""r"", encoding=""utf-8"") as f:\n            html_comment = f.read()\n    except Exception:\n       print(""Could not parse comments."")\n\n    def find_links(self):\n        # search all links based on your personal html file\n        links = []\n        #if you want to understand \xe2\x86\x93these\xe2\x86\x93, go to regex101.com.\n        #also, I just assumed that the previously written english regex was faulty too, but replace that one if needed. I\'ve only got the german one on hand.\n        for translation in (r""""""Watched\\xa0<a href=\\""([^\\""]*)\\"">[^<]*<\\/a>"""""",r""""""<a href=\\""([^\\""]*)\\"">[^<]*<\\/a>\\xa0angesehen""""""):\n            links+=self.raw_find_links(translation)\n        return links\n    def raw_find_links(self,translation):\n        pattern = re.compile(translation)\n        matchList = pattern.findall(str(self.html_watch))\n\n        # save links into list\n        return [match for match in matchList if type(match)==str]\t#just sorting out stuff that could f up the whole script\n\n\n    def find_times(self):\n        times = []\n        for translation in ((r""""""<\\/a><br><a href=\\""[^\\""]*\\"">[^<]*<\\/a><br>(\\D*) (\\d\\d?), (\\d\\d\\d\\d), (\\d\\d?):(\\d\\d?):(\\d\\d?) (AM|PM) ([^<]*)<\\/div>"""""",""%s %s, %s, %s:%s:%s %s"",""%b %d, %Y, %I:%M:%S %p""),(r""""""\\xa0angesehen<br><a href=\\""[^\\""]*\\"">[^<]*<\\/a><br>(\\d\\d?)\\.(\\d\\d?)\\.(\\d\\d\\d\\d), (\\d\\d?):(\\d\\d?):(\\d\\d?) ([^<]*)<\\/div>"""""",""%s.%s.%s %s:%s:%s"",""%d.%m.%Y %H:%M:%S"")):\n        \ttimes+=self.raw_find_times(*translation)\n        return times\n        \n    def raw_find_times(self,regex,timegex,timegex2):\n        pattern = re.compile(regex)\n        matchList = pattern.findall(str(self.html_watch))\n        times=[]\n        for time in matchList:\n            times.append(pytz.timezone(time[-1]).localize(datetime.datetime.strptime(timegex%(time[:-1]),timegex2)))\n        return times\n\n    def _find_times(self):\n        """"""\n        Find and format times within the HTML file.\n\n        Returns\n        -------\n        times : List[str]\n            e.g. ""19 Feb 2013, 11:56:19 UTC Tue""\n        """"""\n        # Format all matched dates\n        times = [\n            datetime_obj.strftime(""%d %b %Y, %H:%M:%S UTC %a"")\n            for datetime_obj in self._find_times_datetime()\n        ]\n        return times\n\n    def search_history(self):\n        search_raw = []\n        search_clean = []\n        pattern = re.compile(r""search_query=[^%].*?>"")\n        match_list = pattern.findall(str(HTML.html_search))\n\n        # save links into list\n        for match in match_list:\n            match = match[13:][:-2]\n            match = match.split(""+"")\n            search_raw.append(match)\n        for word in list(itertools.chain.from_iterable(search_raw)):\n            if ""%"" not in word:\n                search_clean.append(word)\n        return search_raw, search_clean\n\n    def comment_history(self):\n        try:\n            pattern = re.compile(r""""""<a href=[\'""].*?[\'""]>"""""")\n            match_list = pattern.findall(str(HTML.html_comment))\n            link = match_list[-1][9:][:-2]\n            return link, match_list\n        except Exception:\n            pass\n\n    def like_history(self):\n        with open(like_history, ""rb"") as f:\n            data = json.load(f)\n            pattern = re.compile(r""videoId.{15}"")\n            match_list = pattern.findall(str(data))\n            link = r""https://www.youtube.com/watch?v="" + match_list[-1][11:]\n            return link, match_list\n\n\n\n    def dataframe_heatmap(self, day):\n        times = self.find_times()\n        watchtimes=[0 for t in range(12)]\n        \n        for time in times:\n        \tif time.weekday()==day:\n        \t\twatchtimes[(time.hour//2)-time.hour%2]+=1\n\n        return watchtimes\n\n\n\n'"
report.py,2,"b'#!/usr/bin/python3\r\nimport math\r\nimport os\r\nimport re\r\nimport subprocess\r\nimport sys\r\nfrom io import BytesIO\r\nfrom shutil import which\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport seaborn as sns\r\nfrom matplotlib import pylab as pl\r\nfrom PIL import Image\r\nfrom PyPDF2 import PdfFileReader, PdfFileWriter\r\nfrom reportlab.lib.styles import ParagraphStyle\r\nfrom reportlab.lib.units import inch\r\nfrom reportlab.pdfgen import canvas\r\nfrom reportlab.platypus import Frame, Paragraph\r\nfrom wordcloud import WordCloud\r\n\r\nfrom parse import HTML\r\n\r\nimage_dir = os.path.join(os.getcwd(),""Images/"")\r\nlogo = os.path.join(image_dir,""LOGO.png"")\r\nurls = HTML().find_links()\r\nif(len(urls)==0):\r\n    raise ValueError(""Could not find any links. Please send the developer your takeout data, so the issue can be addressed"")\r\nsearch_raw, search_clean = HTML().search_history()\r\n\r\ntry:\r\n    link, all_links = HTML().comment_history()\r\nexcept TypeError:\r\n    link = all_links = """"\r\n\r\ntry:\r\n    like, all_likes = HTML().like_history()\r\nexcept FileNotFoundError:\r\n    like = all_likes = """"\r\n\r\n\r\nclass Visualization:\r\n    def heat_map(self):\r\n        print(""Generating Heat Map....."")\r\n        html = HTML()\r\n        Mon = html.dataframe_heatmap(0)\r\n        Tue = html.dataframe_heatmap(1)\r\n        Wed = html.dataframe_heatmap(2)\r\n        Thu = html.dataframe_heatmap(3)\r\n        Fri = html.dataframe_heatmap(4)\r\n        Sat = html.dataframe_heatmap(5)\r\n        Sun = html.dataframe_heatmap(6)\r\n        df = np.vstack((Mon, Tue, Wed, Thu, Fri, Sat, Sun))\r\n\r\n        print(df)\r\n        Index = [""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""]\r\n        Cols = [\r\n            ""0AM to 2AM"",\r\n            ""2AM to 4AM"",\r\n            ""4AM to 6AM"",\r\n            ""6AM to 8AM"",\r\n            ""8AM to 10AM"",\r\n            ""10AM to 12PM"",\r\n            ""12PM to 2PM"",\r\n            ""2PM to 4PM"",\r\n            ""4PM to 6PM"",\r\n            ""6PM to 8PM"",\r\n            ""8PM to 10PM"",\r\n            ""10PM to 12AM"",\r\n        ]\r\n        plt.figure(figsize=(20, 5))\r\n        sns.heatmap(df,\r\n                    cmap=""Blues"",\r\n                    linewidths=2,\r\n                    xticklabels=Cols,\r\n                    yticklabels=Index)\r\n\r\n        plt.title(""What Time Do You Usually Watch Youtube Videos? (Eastern Standard Time)"",\r\n                  fontsize=27,\r\n                  color=""steelblue"",\r\n                  fontweight=""bold"",\r\n                  fontname=""Arial"")\r\n\r\n        plt.annotate(""             The plot above is based on a total of %s videos you have watched""%(len(HTML().find_links())),\r\n                     (0, 0), (0, -20),\r\n                     fontsize=20,\r\n                     color=""steelblue"",\r\n                     fontweight=""bold"",\r\n                     fontname=""Arial"",\r\n                     xycoords=""axes fraction"",\r\n                     textcoords=""offset points"",\r\n                     va=""top"")\r\n\r\n        plt.savefig(os.path.join(image_dir,""week_heatmap.png""), dpi=400)\r\n        plt.clf()\r\n\r\n    def table(self):\r\n        plt.figure(figsize=(6, 6))\r\n        plt.title(\r\n            ""Do You Still Remember?"",\r\n            fontsize=27,\r\n            color=""steelblue"",\r\n            fontweight=""bold"",\r\n            fontname=""Arial"",\r\n        )\r\n\r\n        plt.annotate(\r\n            ""First Watched Video: \\n\\nMost Watched Video:\\n\\nFirst Like""\r\n            ""d Video:\\n\\nFirst Commented Video:\\n\\nFirst Searched Words:"",\r\n            (0, 0),\r\n            (-35, 298),\r\n            fontsize=34,\r\n            color=""k"",\r\n            fontweight=""bold"",\r\n            fontname=""Arial"",\r\n            xycoords=""axes fraction"",\r\n            textcoords=""offset points"",\r\n            va=""top"",\r\n        )\r\n        plt.axis(""off"")\r\n        plt.savefig(os.path.join(image_dir, ""memory.png""), dpi=400)\r\n        plt.clf()\r\n\r\n    def wordCloud(self):\r\n        print(""Generating Word Cloud....."")\r\n        unique_string = ("" "").join(search_clean)\r\n        bg = np.array(Image.open(logo))\r\n        # import nltk.stopwords\r\n        # stopwords.words(""english"")\r\n        english_stopwords = [\r\n            ""i"",\r\n            ""me"",\r\n            ""my"",\r\n            ""myself"",\r\n            ""we"",\r\n            ""our"",\r\n            ""ours"",\r\n            ""ourselves"",\r\n            ""you"",\r\n            ""you\'re"",\r\n            ""you\'ve"",\r\n            ""you\'ll"",\r\n            ""you\'d"",\r\n            ""your"",\r\n            ""yours"",\r\n            ""yourself"",\r\n            ""yourselves"",\r\n            ""he"",\r\n            ""him"",\r\n            ""his"",\r\n            ""himself"",\r\n            ""she"",\r\n            ""she\'s"",\r\n            ""her"",\r\n            ""hers"",\r\n            ""herself"",\r\n            ""it"",\r\n            ""it\'s"",\r\n            ""its"",\r\n            ""itself"",\r\n            ""they"",\r\n            ""them"",\r\n            ""their"",\r\n            ""theirs"",\r\n            ""themselves"",\r\n            ""what"",\r\n            ""which"",\r\n            ""who"",\r\n            ""whom"",\r\n            ""this"",\r\n            ""that"",\r\n            ""that\'ll"",\r\n            ""these"",\r\n            ""those"",\r\n            ""am"",\r\n            ""is"",\r\n            ""are"",\r\n            ""was"",\r\n            ""were"",\r\n            ""be"",\r\n            ""been"",\r\n            ""being"",\r\n            ""have"",\r\n            ""has"",\r\n            ""had"",\r\n            ""having"",\r\n            ""do"",\r\n            ""does"",\r\n            ""did"",\r\n            ""doing"",\r\n            ""a"",\r\n            ""an"",\r\n            ""the"",\r\n            ""and"",\r\n            ""but"",\r\n            ""if"",\r\n            ""or"",\r\n            ""because"",\r\n            ""as"",\r\n            ""until"",\r\n            ""while"",\r\n            ""of"",\r\n            ""at"",\r\n            ""by"",\r\n            ""for"",\r\n            ""with"",\r\n            ""about"",\r\n            ""against"",\r\n            ""between"",\r\n            ""into"",\r\n            ""through"",\r\n            ""during"",\r\n            ""before"",\r\n            ""after"",\r\n            ""above"",\r\n            ""below"",\r\n            ""to"",\r\n            ""from"",\r\n            ""up"",\r\n            ""down"",\r\n            ""in"",\r\n            ""out"",\r\n            ""on"",\r\n            ""off"",\r\n            ""over"",\r\n            ""under"",\r\n            ""again"",\r\n            ""further"",\r\n            ""then"",\r\n            ""once"",\r\n            ""here"",\r\n            ""there"",\r\n            ""when"",\r\n            ""where"",\r\n            ""why"",\r\n            ""how"",\r\n            ""all"",\r\n            ""any"",\r\n            ""both"",\r\n            ""each"",\r\n            ""few"",\r\n            ""more"",\r\n            ""most"",\r\n            ""other"",\r\n            ""some"",\r\n            ""such"",\r\n            ""no"",\r\n            ""nor"",\r\n            ""not"",\r\n            ""only"",\r\n            ""own"",\r\n            ""same"",\r\n            ""so"",\r\n            ""than"",\r\n            ""too"",\r\n            ""very"",\r\n            ""s"",\r\n            ""t"",\r\n            ""can"",\r\n            ""will"",\r\n            ""just"",\r\n            ""don"",\r\n            ""don\'t"",\r\n            ""should"",\r\n            ""should\'ve"",\r\n            ""now"",\r\n            ""d"",\r\n            ""ll"",\r\n            ""m"",\r\n            ""o"",\r\n            ""re"",\r\n            ""ve"",\r\n            ""y"",\r\n            ""ain"",\r\n            ""aren"",\r\n            ""aren\'t"",\r\n            ""couldn"",\r\n            ""couldn\'t"",\r\n            ""didn"",\r\n            ""didn\'t"",\r\n            ""doesn"",\r\n            ""doesn\'t"",\r\n            ""hadn"",\r\n            ""hadn\'t"",\r\n            ""hasn"",\r\n            ""hasn\'t"",\r\n            ""haven"",\r\n            ""haven\'t"",\r\n            ""isn"",\r\n            ""isn\'t"",\r\n            ""ma"",\r\n            ""mightn"",\r\n            ""mightn\'t"",\r\n            ""mustn"",\r\n            ""mustn\'t"",\r\n            ""needn"",\r\n            ""needn\'t"",\r\n            ""shan"",\r\n            ""shan\'t"",\r\n            ""shouldn"",\r\n            ""shouldn\'t"",\r\n            ""wasn"",\r\n            ""wasn\'t"",\r\n            ""weren"",\r\n            ""weren\'t"",\r\n            ""won"",\r\n            ""won\'t"",\r\n            ""wouldn"",\r\n            ""wouldn\'t"",\r\n        ]\r\n\r\n        stop_words = [""porn"", ""nigga"", ""pussy""] + english_stopwords\r\n        found=False\r\n        FONTS=(""LinBiolinum_R"",""Arial"",""arial"",""DejaVuSansMono"")\r\n        for font in FONTS:\t#this should fix an error where the font couldn\'t be found\r\n            try:\r\n                wordcloud = WordCloud(\r\n                    stopwords=stop_words,\r\n                    mask=bg,\r\n                    background_color=""white"",\r\n                    colormap=""Set2"",\r\n                    font_path=font,\r\n                    max_words=380,\r\n                    contour_width=2,\r\n                    prefer_horizontal=1,\r\n                ).generate(unique_string)\r\n            except OSError:\r\n                continue\r\n            else:\r\n                found=True\r\n                break\r\n        if not found:\r\n            raise OSError(""Could not find any of these fonts: %s""%(FONTS))\r\n        del FONTS\r\n        del found\r\n        \r\n        plt.figure()\r\n        plt.imshow(wordcloud)\r\n        plt.axis(""off"")\r\n        # plt.savefig(""your_file_name""+"".png"", bbox_inches=""tight"")\r\n        plt.title(""What Do You Usually Search on YouTube?"",\r\n                  fontsize=18,\r\n                  color=""steelblue"",\r\n                  fontweight=""bold"",\r\n                  fontname=""Comic Sans MS"")\r\n\r\n        plt.annotate(""   WordCloud is based on a total of %s search queries""%(str(len(search_clean))),\r\n                     (0, 0), (-10, 10),\r\n                     fontsize=13,\r\n                     color=""steelblue"",\r\n                     fontweight=""bold"",\r\n                     fontname=""Comic Sans MS"",\r\n                     xycoords=""axes fraction"",\r\n                     textcoords=""offset points"",\r\n                     va=""top"")\r\n\r\n        plt.savefig(os.path.join(image_dir,""word_cloud.png""), dpi=400)\r\n        plt.clf()\r\n\r\n    def bar(self):\r\n        print(""Generating Bar Plot....."")\r\n        plt.figure(figsize=(10, 5))\r\n        sns.set(style=""white"", font_scale=1.5)\r\n        splot = sns.barplot(\r\n            x=[\r\n                len(HTML().find_links()),\r\n                len(search_clean),\r\n                len(all_likes),\r\n                len(all_links),\r\n            ],\r\n            y=[""Watch"", ""Search"", ""Like"", ""Comment""],\r\n            palette=""Blues"",\r\n        )\r\n        for p in splot.patches:\r\n            width = p.get_width()\r\n            splot.text(\r\n                width,\r\n                p.get_y() + p.get_height() / 2 + 0.1,\r\n                ""{:1.0f}"".format(width),\r\n                ha=""left"",\r\n            )\r\n        splot.grid(False)\r\n        plt.title(""Breakdown of Your Activity on Youtube"",\r\n                  fontsize=24,\r\n                  color=""steelblue"",\r\n                  fontweight=""bold"",\r\n                  fontname=""Comic Sans MS"")\r\n        plt.savefig(os.path.join(image_dir,""bar.png""), dpi=400)\r\n        plt.clf()\r\n\r\n    def score(self):\r\n        print(""Calculating Your Activity Score....."")\r\n        colors = [""#ff3300"", ""#33cc33""]\r\n        score_value = round(\r\n            math.log(\r\n                (\r\n                    len(urls)\r\n                    + len(search_clean * 2)\r\n                    + len(all_likes * 3)\r\n                    + len(all_links * 4)\r\n                )\r\n                / 9,\r\n                1.12,\r\n            ),\r\n            1,\r\n        )\r\n        x_0 = [1, 0, 0, 0]\r\n        pl.pie([100 - score_value, score_value], autopct=""%1.1f%%"", startangle=90, colors=colors, pctdistance=10)\r\n        plt.pie(x_0, radius=0.7, colors=""w"")\r\n        plt.axis(""equal"")\r\n\r\n        plt.title(""Your YouTube Activity Score"",\r\n                  fontsize=21,\r\n                  color=""steelblue"",\r\n                  fontweight=""bold"",\r\n                  fontname=""Arial"")\r\n\r\n        plt.annotate(score_value,\r\n                     (0, 0), (123, 154),\r\n                     fontsize=54,\r\n                     color=""teal"",\r\n                     fontweight=""bold"",\r\n                     fontname=""Arial"",\r\n                     xycoords=""axes fraction"",\r\n                     textcoords=""offset points"",\r\n                     va=""top"")\r\n        plt.savefig(os.path.join(image_dir,""score.png""), dpi=400)\r\n        plt.clf()\r\n\r\n    def gen_pdf(self):\r\n        print(""Combining Images into PDF....."")\r\n        path1 = os.path.join(image_dir, ""week_heatmap.png"")\r\n        path2 = os.path.join(image_dir, ""memory.png"")\r\n        path3 = os.path.join(image_dir, ""word_cloud.png"")\r\n        path4 = os.path.join(image_dir, ""bar.png"")\r\n        path5 = os.path.join(image_dir, ""score.png"")\r\n        path6 = os.path.join(image_dir, ""red.png"")\r\n        pdf = PdfFileWriter()\r\n\r\n        # Using ReportLab Canvas to insert image into PDF\r\n        img_temp = BytesIO()\r\n        img_doc = canvas.Canvas(img_temp, pagesize=(2000, 2300))\r\n\r\n        # heat map x, y - start position\r\n        img_doc.drawImage(path1, -150, 1400, width=2600, height=650)\r\n        # memory\r\n        img_doc.drawImage(path2, 1070, 681, width=697, height=667)\r\n        # word_cloud\r\n        img_doc.drawImage(path3, -28, 585, width=1100, height=778)\r\n        # score\r\n        img_doc.drawImage(path5, 1128, -59, width=894, height=672)\r\n        # bar\r\n        img_doc.drawImage(path4, 0, -11, width=1286, height=620)\r\n        # logo\r\n        img_doc.drawImage(logo, 99, 2068, width=105, height=80)\r\n        # red square\r\n        img_doc.drawImage(path6, inch * 24.3, inch * 16.25, width=91, height=45)\r\n        img_doc.drawImage(path6, inch * 24.3, inch * 14.69, width=91, height=45)\r\n        img_doc.drawImage(path6, inch * 24.3, inch * 13.14, width=91, height=45)\r\n        img_doc.drawImage(path6, inch * 24.3, inch * 11.60, width=91, height=45)\r\n\r\n        # draw three lines, x,y,width,height\r\n        img_doc.rect(0.83 * inch, 28.5 * inch, 26.0 * inch, 0.04 * inch, fill=1)\r\n        img_doc.rect(0.83 * inch, 18.9 * inch, 26.0 * inch, 0.04 * inch, fill=1)\r\n        img_doc.rect(0.83 * inch, 8.5 * inch, 26.0 * inch, 0.04 * inch, fill=1)\r\n        # title\r\n        img_doc.setFont(""Helvetica-Bold"", 82)\r\n        img_doc.drawString(\r\n            212, 2078, ""Personal YouTube Usage Report"",\r\n        )\r\n\r\n        # first watch\r\n        print(""First watched video: "" + urls[-1])\r\n        body_style = ParagraphStyle(""Body"", fontSize=31)\r\n        items1 = []\r\n        link1 = ""<link href=%s>PLAY</link>""%(urls[-1])\r\n        items1.append(Paragraph(link1, body_style))\r\n        f1 = Frame(inch*24.1, inch*14.89, inch*12, inch*2)\r\n        f1.addFromList(items1, img_doc)\r\n\r\n        # most watch\r\n        most_watched_url = max(set(urls), key=urls.count)\r\n        print(\r\n            ""Most Watched Video ({}x watched): {}"".format(\r\n                urls.count(most_watched_url), most_watched_url\r\n            )\r\n        )\r\n        items2 = []\r\n        link2 = ""<link href=%s>PLAY</link>""%(max(set(urls), key=urls.count))\r\n        items2.append(Paragraph(link2, body_style))\r\n        f2 = Frame(inch * 24.1, inch * 13.37, inch * 12, inch * 2)\r\n        f2.addFromList(items2, img_doc)\r\n\r\n        # first like\r\n        print(""First like: "" + like)\r\n        items3 = []\r\n        link3 = ""<link href=%s>PLAY</link>""%(like)\r\n        items3.append(Paragraph(link3, body_style))\r\n        f3 = Frame(inch * 24.1, inch * 11.85, inch * 12, inch * 2)\r\n        f3.addFromList(items3, img_doc)\r\n\r\n        # first comment\r\n        print(""First Commented Video: "" + link)\r\n        items4 = []\r\n        link4 = ""<link href=%s>PLAY</link>""%(link)\r\n        items4.append(Paragraph(link4, body_style))\r\n        f4 = Frame(inch * 24.3, inch * 10.25, inch * 12, inch * 2)\r\n        f4.addFromList(items4, img_doc)\r\n\r\n        # first search\r\n        items5 = []\r\n        link5 = ""<link href=\'\'>%s</link>""%(re.sub(""[^\\w\\s]"", """", str(search_raw[-1])))\r\n        items5.append(Paragraph(link5, body_style))\r\n        f5 = Frame(inch * 23.7, inch * 8.73, inch * 12, inch * 2)\r\n        f5.addFromList(items5, img_doc)\r\n\r\n        img_doc.save()\r\n        pdf.addPage(PdfFileReader(BytesIO(img_temp.getvalue())).getPage(0))\r\n        with open(""YouTube_Report.pdf"",""wb"") as f:\r\n        \tpdf.write(f)\r\n        print(""Congratulations! You have successfully created your personal YouTube report!"")\r\n        if sys.platform == ""win32"":\r\n            os.startfile(""YouTube_Report.pdf"")\r\n        elif sys.platform == ""darwin"":\r\n            subprocess.call([""open"", ""YouTube_Report.pdf""])\r\n        elif which(""xdg-open"") is not None:\r\n            subprocess.call([""xdg-open"", ""YouTube_Report.pdf""])\r\n        else:\r\n            print(""No opener found for your platform. Just open YouTube_Report.pdf."")\r\n\r\nif __name__ == ""__main__"":\r\n    visual = Visualization()\r\n    visual.heat_map()\r\n    visual.table()\r\n    visual.wordCloud()\r\n    visual.score()\r\n    visual.bar()\r\n    visual.gen_pdf()\r\n'"
