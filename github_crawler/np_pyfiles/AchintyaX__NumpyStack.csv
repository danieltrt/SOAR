file_path,api_count,code
NumpyBasics/WordProblem.py,3,"b'# here we have word problem to be solved \n\n\n\n\n# the admission fee at a small fare is a $1.5  for children in $4 for\n# adults on a certain day.2200 people enter the fair and five thousand fifty dollars is collected.\n# How many children and how many adults attended.\n\n# lets solve the problem using matrices\n\nimport numpy as np\n\n# from the given data lets say we gave x1 as the num children\n# x2 as the number of adults \n\nfair = np.array([[1,1],[1.5, 4]])\n# the prices are in the fair variable\n\nmoneyCollected = np.array([[2200], [5050]])\n# the money collected is in the moneyCollected array\n# so lets find the number of children and adults\nX = np.linalg.solve(fair,moneyCollected)\n\nprint(""the number of children that were present were"", X[0,0])\nprint(""the number of adults that were present were"", X[1,0])'"
NumpyBasics/dot_for_py.py,2,"b'# this scripts helps us compare how fast is the dot function in numpy in comparision to writing the code for it using the for loop\n\n\nfrom __future__ import print_function, division\nfrom builtins import range\n# Note: you may need to update your version of future\n# sudo pip3 install -U future\n\n\nimport numpy as np\nfrom datetime import datetime\n\na = np.random.randn(100)\nb = np.random.randn(100)\nT = 100000\n\ndef slow_dot_product(a, b):\n  result = 0\n  for e, f in zip(a, b):\n    result += e*f\n  return result\n\nt0 = datetime.now()\nfor t in range(T):\n  slow_dot_product(a, b)\ndt1 = datetime.now() - t0\n\nt0 = datetime.now()\nfor t in range(T):\n  a.dot(b)\ndt2 = datetime.now() - t0\n\nprint(""dt1 / dt2:"", dt1.total_seconds() / dt2.total_seconds())'"
