file_path,api_count,code
setup.py,0,"b'from packaging.version import parse\nfrom configparser import ConfigParser\nimport setuptools\nassert parse(setuptools.__version__)>=parse(\'36.2\')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=[\'=\'])\nconfig.read(\'settings.ini\')\ncfg = config[\'DEFAULT\']\n\ncfg_keys = \'version description keywords author author_email\'.split()\nexpected = cfg_keys + ""lib_name user branch license status min_python audience language"".split()\nfor o in expected: assert o in cfg, ""missing expected setting: {}"".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nlicenses = {\n    \'apache2\': (\'Apache Software License 2.0\',\'OSI Approved :: Apache Software License\'),\n}\nstatuses = [ \'1 - Planning\', \'2 - Pre-Alpha\', \'3 - Alpha\',\n    \'4 - Beta\', \'5 - Production/Stable\', \'6 - Mature\', \'7 - Inactive\' ]\npy_versions = \'2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8\'.split()\n\nrequirements = cfg.get(\'requirements\',\'\').split()\nlic = licenses[cfg[\'license\']]\nmin_python = cfg[\'min_python\']\n\nsetuptools.setup(\n    name = cfg[\'lib_name\'],\n    license = lic[0],\n    classifiers = [\n        \'Development Status :: \' + statuses[int(cfg[\'status\'])],\n        \'Intended Audience :: \' + cfg[\'audience\'].title(),\n        \'License :: \' + lic[1],\n        \'Natural Language :: \' + cfg[\'language\'].title(),\n    ] + [\'Programming Language :: Python :: \'+o for o in py_versions[py_versions.index(min_python):]],\n    url = \'https://github.com/{}/{}\'.format(cfg[\'user\'],cfg[\'lib_name\']),\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    python_requires  = \'>=\' + cfg[\'min_python\'],\n    long_description = open(\'README.md\').read(),\n    long_description_content_type = \'text/markdown\',\n    zip_safe = False,\n    entry_points = { \'console_scripts\': cfg.get(\'console_scripts\',\'\').split() },\n    **setup_cfg)\n\n'"
grok/__init__.py,0,b''
grok/_nbdev.py,0,"b'#AUTOGENERATED BY NBDEV! DO NOT EDIT!\n\n__all__ = [""index"", ""modules"", ""custom_doc_links"", ""git_url""]\n\nindex = {}\n\nmodules = []\n\ngit_url = ""https://github.com/akramz/grokking-deep-learning-notebooks/tree/master/""\n\ndef custom_doc_links(name): return None'"
grok/back.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/06.Back_propagation.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/cnn.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/10.Intro_to_CNNs.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/forward.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/12.RNNs.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/framework.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/13.DL_framework.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/gd.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/04.gradient_descent.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/ggd.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/05.Generalizing_GD.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/lstm.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/14.LSTMs_LM.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/nlp.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/11.NNs_that_Understand_Language.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/nonlin.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/09.Probabilities_Non-Linearities.ipynb (unless otherwise specified).\n\n__all__ = []'
grok/reg.py,0,b'#AUTOGENERATED! DO NOT EDIT! File to edit: dev/08.Regularization_Batching.ipynb (unless otherwise specified).\n\n__all__ = []'
