file_path,api_count,code
setup.py,0,"b'""""""TapMap: A generator for keyboard heatmap images.""""""\n\nfrom codecs import open\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\n\nhere = path.abspath(path.dirname(__file__))\n\nwith open(path.join(here, \'README.md\'), encoding=\'utf-8\') as file:\n    long_description = file.read()\n\nsetup(\n    name=\'tapmap\',\n    version=\'1.4\',\n    description=\'A generator for keyboard heatmap images\',\n    long_description=long_description,\n    long_description_content_type=\'text/markdown\',\n    url=\'https://github.com/AnonGuy/TapMap\',\n    author=\'Jeremiah Boby\',\n    author_email=\'jeremiahboby@gmail.com\',\n    classifiers=[\n        \'Programming Language :: Python :: 3\'\n    ],\n    py_modules=[\'tapmap.char_map\', \'tapmap.processing\'],\n    keywords=\'matplotlib PIL numpy\',\n    packages=find_packages(exclude=[\'contrib\', \'docs\', \'tests\']),\n    install_requires=[\'Pillow\', \'numpy\', \'matplotlib\'],\n    entry_points={\n        \'console_scripts\': [\n            \'tapmap=tapmap:main\',\n        ],\n    },\n    include_package_data=True\n)\n'"
tapmap/__init__.py,0,"b'""""""TapMap: A generator for keyboard heatmap images.""""""\n\nimport argparse\n\nfrom tapmap.processing import blend_and_save, get_frequencies\n\n\nparser = argparse.ArgumentParser(\n    description=\'Generate a keyboard heatmap from a text file.\'\n)\nparser.add_argument(\n    \'input_filename\', metavar=\'input_file\', type=str,\n    help=\'the name of the file to process\'\n)\nparser.add_argument(\n    \'output_filename\', metavar=\'output_file\', type=str,\n    help=\'the name of the image file to output\'\n)\nparser.add_argument(\n    \'-d\', type=int, help=\'dpi of the output image (defaults to 600)\'\n)\nparser.add_argument(\n    \'-c\', type=str, help=\'matplotlib cmap argument: \'\n    \'https://matplotlib.org/users/colormaps.html (defaults to ""viridis"")\'\n)\nargs = parser.parse_args()\n\n\ndef main():\n    """"""Entry point of ""tapmap"" terminal command.""""""\n    filename = args.input_filename\n    if filename is None:\n        parser.error(\n            \'Please specify the filename of the text file to process.\'\n        )\n    output_file = args.output_filename\n    if output_file is None:\n        parser.error(\n            \'Please specify the name of the image to generate.\'\n        )\n    colormap = args.c\n    if colormap is None:\n        colormap = \'viridis\'\n    dpi = args.d\n    if dpi is None:\n        dpi = 600\n    heatmap_data = get_frequencies(filename)\n    blend_and_save(\n        heatmap_data, output_file, colormap, dpi\n    )\n    print(\'Image generated: {0}\'.format(output_file))\n\n\nif __name__ == \'__main__\':\n    main()\n'"
tapmap/char_map.py,0,"b'""""""Key coordinate map, and various pixel-related methods.""""""\n\nchar_map = {\n    \' \': ((18, 18), (19, 34)),\n    \'\\t\': ((8, 1), (9, 4)),\n    \'`\xc2\xac\': ((4, 1), (5, 2)),\n    \'1!\': ((4, 5), (5, 6)),\n    \'2@\': ((4, 9), (5, 10)),\n    \'3#\': ((4, 13), (5, 14)),\n    \'4$\': ((4, 17), (5, 18)),\n    \'5%\': ((4, 20), (5, 21)),\n    \'6^\': ((4, 24), (5, 25)),\n    \'7&\': ((4, 28), (5, 29)),\n    \'8*\': ((4, 32), (5, 33)),\n    \'9(\': ((4, 36), (5, 37)),\n    \'0)\': ((4, 40), (5, 41)),\n    \'-_\': ((4, 44), (5, 45)),\n    \'=+\': ((4, 48), (5, 49)),\n    \'qQ\': ((8, 7), (9, 8)),\n    \'wW\': ((8, 11), (9, 12)),\n    \'eE\': ((8, 15), (9, 16)),\n    \'rR\': ((8, 19), (9, 20)),\n    \'tT\': ((8, 22), (9, 23)),\n    \'yY\': ((8, 26), (9, 27)),\n    \'uU\': ((8, 30), (9, 31)),\n    \'iI\': ((8, 34), (9, 35)),\n    \'oO\': ((8, 38), (9, 39)),\n    \'pP\': ((8, 42), (9, 43)),\n    \'[{\': ((8, 46), (9, 47)),\n    \']}\': ((8, 50), (9, 51)),\n    \'\\\\|\': ((8, 54), (9, 55)),\n    \'aA\': ((11, 8), (12, 9)),\n    \'sS\': ((11, 12), (12, 13)),\n    \'dD\': ((11, 16), (12, 17)),\n    \'fF\': ((11, 20), (12, 21)),\n    \'gG\': ((11, 23), (12, 24)),\n    \'hH\': ((11, 27), (12, 28)),\n    \'jJ\': ((11, 31), (12, 32)),\n    \'kK\': ((11, 35), (12, 36)),\n    \'lL\': ((11, 39), (12, 40)),\n    \';:\': ((11, 43), (12, 44)),\n    \'zZ\': ((15, 10), (16, 11)),\n    \'xX\': ((15, 14), (16, 15)),\n    \'cC\': ((15, 18), (16, 19)),\n    \'vV\': ((15, 22), (16, 23)),\n    \'bB\': ((15, 25), (16, 26)),\n    \'nN\': ((15, 29), (16, 30)),\n    \'mM\': ((15, 33), (16, 34)),\n    \',<\': ((15, 37), (16, 38)),\n    \'.>\': ((15, 41), (16, 42)),\n    \'/?\': ((15, 45), (16, 46)),\n    \'\\n\': ((11, 51), (12, 55)),\n    \'\\\'""\': ((11, 47), (12, 48))\n}\n\nkeys = char_map.keys()\n\nleft_shift = [\n    (15, 1), (15, 2), (15, 3), (15, 4), (15, 5), (15, 6), (15, 7),\n    (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 7)\n]\n\n\ndef get_all_pixels(coordinates):\n    """"""Get all pixel coordinates, given the top left and bottom right.""""""\n    pixels = []\n    x1, y1 = coordinates[0]\n    x2, y2 = coordinates[1]\n    for ix in range(x1, x2 + 1):\n        for iy in range(y1, y2 + 1):\n            pixels.append((ix, iy))\n    return pixels\n\n\ndef get_coords(char):\n    """"""Get the coordinate of a key from the key map.""""""\n    for key in (item for item in keys if char in item):\n        pixels = get_all_pixels(char_map[key])\n        if key.index(char) == 1:\n            pixels += left_shift\n        return pixels\n'"
tapmap/processing.py,3,"b'""""""Main Image and Data Processing functions.""""""\n\nimport os\n\nfrom PIL import Image, ImageChops\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nfrom tapmap.char_map import get_all_pixels, get_coords\n\n\n# Get full path of module\'s directory\ndir_path = os.path.dirname(os.path.realpath(__file__))\n\n# Make entire array visible when printing data\nnp.set_printoptions(threshold=np.nan)\n\n# Open the keyboard image for later use\nkeyboard = Image.open(\n    \'{0}/images/keyboard.png\'.format(dir_path)\n)\n\n\ndef get_frequencies(filename):\n    """"""Get the frequencies of certain keypresses.""""""\n    print(\'Processing file {0}...\'.format(filename))\n    pixels = []\n    heatmap_data = np.asarray([[0] * 57] * 21)\n    # Open the given file and read the contents\n    with open(filename) as file:\n        contents = file.read()\n    # Get the pixels covered by each character, and append these to pixels\n    for char in contents:\n        coords = get_coords(char)\n        if coords:\n            for coord in coords:\n                pixels.append(coord)\n    # Increment the appropriate coordinate for each pixel covered\n    for coordinate in pixels:\n        x, y = coordinate\n        heatmap_data[x][y] += 1\n    # Get the sum of all data, and divide all values by that sum\n    total = np.sum(heatmap_data)\n    heatmap_data = heatmap_data / total\n    # Get the values for the shift key, and scale them down by 70%\n    for pixel in get_all_pixels(((18, 18), (19, 34))):\n        x, y = pixel\n        heatmap_data[x][y] *= 0.3\n    print(\'Finished processing file {0}.\'.format(filename))\n    # Return the final array\n    return heatmap_data\n\n\ndef blend_and_save(heatmap_data, filename, colormap, dots):\n    """"""Plot a heatmap, upscale it to the keyboard and save a blended image.""""""\n    print(\'Generating heatmap...\')\n    # Clear the heatmap plot and axes\n    plt.clf()\n    plt.xticks([])\n    plt.yticks([])\n    plt.axis(\'off\')\n    # Display the data on the heatmap\n    plt.imshow(\n        heatmap_data, interpolation=\'lanczos\', zorder=1, cmap=colormap\n    )\n    # Save the heatmap plot\n    plt.savefig(\n        \'{0}/images/heatmap.png\'.format(dir_path),\n        dpi=dots,\n        pad_inches=0,\n        transparent=True,\n        bbox_inches=\'tight\'\n    )\n    print(\'Blending and saving image...\')\n    # Open the heatmap image\n    heatmap = Image.open(\n        \'{0}/images/heatmap.png\'.format(dir_path)\n    )\n    # Resize the heatmap to the keyboard\'s size, with antialiasing\n    heatmap = heatmap.resize(keyboard.size, Image.ANTIALIAS)\n    heatmap.save(\n        \'{0}/images/heatmap.png\'.format(dir_path)\n    )\n    # Blend the images, and save\n    blended = ImageChops.darker(keyboard, heatmap)\n    blended.save(\n        \'{0}/{1}\'.format(os.getcwd(), filename)\n    )\n'"
