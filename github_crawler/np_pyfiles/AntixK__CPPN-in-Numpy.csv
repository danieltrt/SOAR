file_path,api_count,code
cppn.py,40,"b""'''\n\nCPPN - Generate Art using Neural Networks\n\nAuthor - AntixK\n\n\nHeavily Inspired by - https://github.com/hardmaru/cppn-tensorflow\n'''\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nclass Art_Gen(object):\n\n\tdef initialise_CPPN(self, batch_size = 1, net_size = 32, h_size = 32, x_res = 256, \n\t\t\t\t\t\t\ty_res= 256, scaling = 1.0, RGB = False):\n\n\t\t# Setting Parameters\n\t\tself.batch_size = batch_size\n\t\tself.net_size = net_size\n\t\tself.h_size = h_size\n\t\tself.x_res = x_res\n\t\tself.y_res = y_res\n\t\tself.scaling = scaling\n\n\t\tif RGB == True:\n\t\t\tself.c_dim = 3\n\t\telse:\n\t\t\tself.c_dim = 1\n\t\t\n\t\tself.num_points = x_res * y_res \n\n\t\t# Configuring Network\n\t\tself.img_batch = np.random.standard_normal(size = (batch_size, x_res, y_res, self.c_dim))\n\t\tself.hid_vec = np.random.standard_normal(size =  (batch_size, self.h_size))\n\n\t\tself.x_dat = np.random.standard_normal(size = (batch_size, self.x_res * self.y_res, 1))\n\t\tself.y_dat = np.random.standard_normal(size = (batch_size, self.x_res * self.y_res, 1))\n\t\tself.r_dat = np.random.standard_normal(size = (batch_size, self.x_res * self.y_res, 1))\n\n\t\t\n\tdef create_grid(self, x_res = 32, y_res = 32, scaling = 1.0):\n\n\t\tnum_points = x_res*y_res\n\t\tx_range = np.linspace(-1*scaling, scaling, num = x_res)\n\t\ty_range = np.linspace(-1*scaling, scaling, num = y_res)\n\t\tx_mat = np.matmul(np.ones((y_res, 1)), x_range.reshape((1, x_res)))\n\t\ty_mat = np.matmul(y_range.reshape((y_res, 1)), np.ones((1, x_res)))\n\t\tr_mat = np.sqrt(x_mat*x_mat + y_mat*y_mat)\n\t\tx_mat = np.tile(x_mat.flatten(), self.batch_size).reshape(self.batch_size, num_points, 1)\n\t\ty_mat = np.tile(y_mat.flatten(), self.batch_size).reshape(self.batch_size, num_points, 1)\n\t\tr_mat = np.tile(r_mat.flatten(), self.batch_size).reshape(self.batch_size, num_points, 1)\n\n\t\treturn x_mat, y_mat, r_mat\n\n\n\tdef build_CPPN(self, x_res, y_res, x_dat, y_dat, r_dat, hid_vec):\n\n\t\tnum_points = x_res * y_res\n\n\t\t# Scale the hidden vector\n\t\thid_vec_scaled = np.reshape(hid_vec, (self.batch_size, 1, self.h_size)) * \\\n\t\t\t\t\t\t\tnp.ones((num_points, 1), dtype = np.float32) * self.scaling\n\n\t\t# Unwrap the grid matrices\t\t\n\t\tx_dat_unwrapped = np.reshape(x_dat, (self.batch_size*num_points, 1))\n\t\ty_dat_unwrapped = np.reshape(y_dat, (self.batch_size*num_points, 1))\n\t\tr_dat_unwrapped = np.reshape(r_dat, (self.batch_size*num_points, 1))\n\t\th_vec_unwrapped = np.reshape(hid_vec_scaled, (self.batch_size*num_points, self.h_size))\n\n\n\t\t# Build the network\n\t\tself.art_net = self.fully_connected(h_vec_unwrapped, self.net_size) + \\\n\t\t          self.fully_connected(x_dat_unwrapped, self.net_size, with_bias = False) + \\\n\t\t          self.fully_connected(y_dat_unwrapped, self.net_size, with_bias = False) + \\\n\t\t          self.fully_connected(r_dat_unwrapped, self.net_size, with_bias = False)\n\n\t\t# Set Activation function\n\t\tout = self.tanh_sig()\t\n\n\t\tmodel = np.reshape(out, (self.batch_size, x_res, y_res, self.c_dim))\n\n\t\treturn model\n\n\n\tdef tanh_sig(self,num_layers = 3):\n\t\th = np.tanh(self.art_net)\n\t\tfor i in range(num_layers):\n\t\t\th = np.tanh(self.fully_connected(h,self.net_size))\n\t\tout = self.sigmoid(self.fully_connected(h, self.c_dim))\n\n\t\treturn out\n\n\tdef sin_tanh_sof(self):\n\t\th = np.tanh(self.art_net)\n\t\th = 0.95*np.sin(self.fully_connected(h,self.net_size))\n\t\th = np.tanh(self.fully_connected(h,self.net_size))\n\t\th = self.soft_plus(self.fully_connected(h,self.net_size))\n\t\th = np.tanh(self.fully_connected(h,self.net_size))\n\t\tout = self.soft_plus(self.fully_connected(h,self.c_dim))\n\n\t\treturn out\n\n\tdef tanh_sig_sin_sof(self):\n\t\th = np.tanh(self.art_net)\n\t\th = 0.8*np.sin(self.fully_connected(h,self.net_size))\n\t\th = np.tanh(self.fully_connected(h,self.net_size))\n\t\th = self.soft_plus(self.fully_connected(h,self.net_size))\n\t\tout = self.sigmoid(self.fully_connected(h, self.c_dim))\n\n\t\treturn out\n\t\n\tdef fully_connected(self, input, out_dim, with_bias = True):\n\t\tmat = np.random.standard_normal(size = (input.shape[1], out_dim)).astype(np.float32)\n\n\t\tresult = np.matmul(input, mat)\n\n\t\tif with_bias == True:\n\t\t\tbias = np.random.standard_normal(size =(1, out_dim)).astype(np.float32)\n\t\t\tresult += bias * np.ones((input.shape[0], 1), dtype = np.float32)\n\n\t\treturn result\n\n\t\n\tdef sigmoid(self, x):\n\n\t\treturn 1.0 / (1.0 + np.exp(-1* x))\t\n\n\tdef soft_plus(self, x):\n\n\t\treturn np.log(1.0 + np.exp(x))\t\n\n\tdef generate(self, x_res = 256, y_res = 256, scaling = 20.0,z = None):\n\n\t\t# Generate Random Key to generate image\n\t\tif z is None:\n\t\t\tz = np.random.uniform(low=-1.0, high=1.0, size=(self.batch_size, self.h_size)).astype(np.float32)\n\n\t\tx_dat, y_dat, r_dat = self.create_grid(x_res, y_res, scaling)\n\t\tart = self.build_CPPN(x_res, y_res, x_dat, y_dat, r_dat, z)\n\n\t\treturn art\n\n\ndef Generate_Art(batch_size = 1, net_size = 16, h_size = 8, x_res = 512, y_res= 512, scaling = 10.0, RGB = True, seed = None):\n\n\tif seed is not None:\n\t\tnp.random.seed(seed)\n\n\tart = Art_Gen()\n\tart.initialise_CPPN(batch_size, net_size, h_size,RGB = RGB)\n\n\tif RGB == True:\n\t\tc_dim = 3\n\telse:\n\t\tc_dim = 1\n\n\timage_data = art.generate(x_res, y_res, scaling)\n\n\tplt.subplot(1, 1, 1)\n\n\tif RGB == False:\n\t\tplt.imshow(image_data.reshape(y_res, x_res), cmap='Greys', interpolation='nearest')\n\telse:\n\t\tplt.imshow(image_data.reshape(y_res, x_res, c_dim), interpolation='nearest')\n\tplt.axis('off')\n\n\timg_data = np.array(1-image_data)\n\t\n\tif c_dim > 1:\n\t  img_data = np.array(img_data.reshape((y_res, x_res, c_dim))*255.0, dtype=np.uint8)\n\telse:\n\t  img_data = np.array(img_data.reshape((y_res, x_res))*255.0, dtype=np.uint8)\n\tim = Image.fromarray(img_data)\n\tim.save('art.png')\n\tplt.show()\n\nif __name__ == '__main__':\n\t#\n\tGenerate_Art(batch_size = 1, net_size = 16, h_size = 32, x_res = 512, y_res= 512, scaling = 10.0, RGB = True, seed = None)\n\t\n"""
