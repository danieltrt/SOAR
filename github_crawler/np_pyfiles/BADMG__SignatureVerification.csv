file_path,api_count,code
manage.py,0,"b'#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \'__main__\':\n    os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'SignatureVerification.settings\')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            ""Couldn\'t import Django. Are you sure it\'s installed and ""\n            ""available on your PYTHONPATH environment variable? Did you ""\n            ""forget to activate a virtual environment?""\n        ) from exc\n    execute_from_command_line(sys.argv)\n'"
Main/__init__.py,0,b''
Main/admin.py,0,b'from django.contrib import admin\n\n# Register your models here.\n'
Main/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass MainConfig(AppConfig):\n    name = 'Main'\n"""
Main/forms.py,0,"b'from django import forms\nfrom multiupload.fields import MultiFileField\nfrom Main.models import CustomerDetails, VerificationDetails, Attachment\n\n\nclass CustomerForm(forms.ModelForm):\n    c_id = forms.CharField(label="""", widget=forms.TextInput(attrs={\'placeholder\': \'Customer ID\', \'class\':\'form-control mb-4\',\'title\':\'Enter Only Numeric values\',\'pattern\':\'[0-9]+\'}))\n    c_name = forms.CharField(label="""", widget=forms.TextInput(attrs={\'placeholder\': \'Customer Name\', \'class\':\'form-control mb-4\',\'pattern\':\'[A-Za-z ]+\',\'title\':\'Enter Characters Only\'}))\n    #image = forms.FileField(label="""")\n\n    class Meta:\n        model = CustomerDetails\n        fields = (\'c_name\', \'c_id\') #\'image\', )\n\n    files = MultiFileField(min_num=1, max_num=5, max_file_size=1024 * 1024 * 5)\n\n    def save(self, commit=True):\n        instance = super(CustomerForm, self).save(commit)\n        for each in self.cleaned_data[\'files\']:\n            Attachment.objects.create(file=each, customerdetails=instance)\n        return instance\n\n    def clean(self):\n        cleaned_data = self.cleaned_data\n        uid = cleaned_data.get(\'c_id\')\n        matching_id = CustomerDetails.objects.filter(c_id = uid)\n        if self.instance:\n            matching_id = matching_id.exclude(pk=self.instance.pk)\n        if matching_id.exists():\n            msg = u""User ID: %s already exist."" % uid\n            raise forms.ValidationError(msg)\n        else:\n            return self.cleaned_data\n\nclass NumberOfForms(forms.Form):\n    number = forms.IntegerField(label="""", widget=forms.TextInput(attrs={\'placeholder\': \'Number of Forms\', \'class\':\'form-control mb-4\',\'title\':\'Enter Only Numeric values\',\'pattern\':\'[0-9]+\'}))\n\n\nclass VerificationForm(forms.ModelForm):\n    c_id = forms.CharField(label="""", widget=forms.TextInput(attrs={\'placeholder\': \'Customer ID\', \'class\':\'form-control mb-4\',\'title\':\'Enter Only Numeric values\',\'pattern\':\'[0-9]+\'}))\n    image = forms.FileField(label="""")\n\n    class Meta:\n        model = VerificationDetails\n        fields = (\'c_id\', \'image\')\n\n\n\n            \n\n\n'"
Main/models.py,0,"b'from django.db import models\nimport time\n\n\n# Create your models here.\n\ndef user_directory(instance, filename):\n\ttimestr = time.strftime(""%Y%m%d-%H%M%S"")\n\treturn str(instance.c_id) + ""/Verification/"" + str(timestr) + filename \n\n\n#Path for Registration Images\ndef img_directory(instance, filename):\n\ttimestr = time.strftime(""%Y%m%d-%H%M%S"")\n\treturn str(instance.customerdetails.c_id) + ""/Registration/"" + str(timestr) + filename\n\n\n\nclass CustomerDetails(models.Model):\n    c_id = models.CharField(max_length=250)\n    c_name = models.CharField(max_length=250)\n    #image = models.FileField(upload_to=user_directory)\n\n\nclass VerificationDetails(models.Model):\n    c_id = models.CharField(max_length=250)\n    image = models.FileField(upload_to=user_directory)\n\n\n#Model for Images\nclass Attachment(models.Model):\n    customerdetails = models.ForeignKey(CustomerDetails,on_delete=models.CASCADE)\n    file = models.FileField(upload_to=img_directory)\n'"
Main/tests.py,0,b'from django.test import TestCase\n\n# Create your tests here.\n'
Main/urls.py,0,"b""from django.urls import path\nfrom Main.views import MainView\nfrom . import views\n\nurlpatterns = [\n    path('', MainView.as_view(), name='index'),\n]"""
Main/views.py,2,"b'from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom django.views.generic import TemplateView\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponseRedirect\nfrom Main.forms import CustomerForm, VerificationForm, NumberOfForms\nfrom Main.models import CustomerDetails, VerificationDetails, Attachment\nimport numpy as np\nfrom keras import backend as K\nimport keras.models as models\nimport tensorflow as tf\nimport keras.layers as layers\nimport cv2\n\nclass MainView(TemplateView):\n    template_name = \'Main/index.html\'\n    img_width = 300\n    img_height = 150\n    batch = 128\n\n    \n    def modelCreator(self):\n        modelA = models.Sequential()\n        modelA.add(layers.Conv2D(16, (3, 3), input_shape=(self.img_width, self.img_height, 1)))\n        modelA.add(layers.BatchNormalization())\n        modelA.add(layers.Activation(""relu""))\n        modelA.add(layers.MaxPooling2D((2, 2)))\n        modelA.add(layers.Conv2D(32, (3, 3)))\n        modelA.add(layers.BatchNormalization())\n        modelA.add(layers.Activation(""relu""))\n        modelA.add(layers.MaxPooling2D((2, 2)))\n        modelA.add(layers.Conv2D(64, (3, 3)))\n        modelA.add(layers.BatchNormalization())\n        modelA.add(layers.Activation(""relu""))\n        modelA.add(layers.MaxPooling2D((2, 2)))\n        modelA.add(layers.Conv2D(128, (3, 3)))\n        modelA.add(layers.BatchNormalization())\n        modelA.add(layers.Activation(""relu""))\n        modelA.add(layers.MaxPooling2D((2, 2)))\n        modelA.add(layers.Conv2D(256, (3, 3)))\n        modelA.add(layers.BatchNormalization())\n        modelA.add(layers.Activation(""relu""))\n        modelA.add(layers.MaxPooling2D((2, 2)))\n        modelA.add(layers.Flatten())\n        modelA.add(layers.Dense(self.batch))\n        modelA.add(layers.Reshape((1, self.batch)))\n        return modelA\n    \n\n    def load_model(self):\n        K.clear_session()\n        loaded_model = self.modelCreator()\n        loaded_model.load_weights(""static/model_weights.h5"")\n        global graph\n        graph = tf.get_default_graph()\n        return loaded_model\n\n    def create_img(self, path):\n        img = cv2.imread(path)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        img = cv2.resize(img, (300, 150))\n        retval, img = cv2.threshold(img, 0, 255, type=cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n        img = img / 255.\n        img = img.reshape(1, 300, 150, 1)\n        return img\n\n    def predict(self, path):\n        model = self.load_model()\n        image = self.create_img(path)\n        with graph.as_default():\n            ans = model.predict(image)\n        return ans\n\n    def get(self, request):\n        form = CustomerForm()\n        form2 = VerificationForm()\n        form3 = NumberOfForms()\n        return render(request, self.template_name, {\'form\': form, \'ver_code\': False, \'form3\': form3})\n\n    def post(self, request):\n        answer = -1\n        reg_code = True\n        ver_code = False\n        global x\n        global nof\n        if request.method == \'POST\':\n            form = CustomerForm(request.POST, request.FILES)\n            form2 = VerificationForm(request.POST, request.FILES)\n            form3 = NumberOfForms(request.POST)\n            if \'register\' in request.POST:\n                print(""In registration"")\n                if form.is_valid():\n                    form.save()\n                    form = CustomerForm()\n                    return render(request, self.template_name, {\n                        \'reg_code\': reg_code,\n                        \'form\': form,\n                        \'form3\': form3,\n                        \'form2\': form2\n                    })\n            elif \'nof\' in request.POST:\n                print(""Number of Forms"")\n                verforms = []\n                if form3.is_valid():\n                    nof = form3.cleaned_data[\'number\']\n                for i in range(0, nof):\n                    new_form = VerificationForm(prefix=str(i))\n                    verforms.append(new_form)\n                print(verforms)\n                x = verforms\n                return render(request, ""Main/verification.html"", {\n                        \'reg_code\': reg_code,\n                        \'ver_code\': True,\n                        \'verforms\': verforms,\n                    })\n            elif \'verify\' in request.POST:\n                print(""Verify"")\n                answers = []\n                for i in range(0, nof):\n                    j = x[i]\n                    j = VerificationForm(request.POST, request.FILES, prefix=str(i))\n                    if j.is_valid():\n                        VerificationDetails.objects.all().delete()\n                        j.save()\n                        print(j.cleaned_data[\'image\'])\n                        l = str(i) + ""-""\n                        #----Changes Start Here----\n                        sum = 0\n                        avg = 0\n                        total = len(Attachment.objects.filter(customerdetails__c_id=j.cleaned_data[\'c_id\']))\n                        for image in Attachment.objects.filter(customerdetails__c_id=j.cleaned_data[\'c_id\']):\n                            print(\'Registration :\'+image.file.path)\n                            print(\'Verification :\'+VerificationDetails.objects.get(c_id=j.cleaned_data[\'c_id\']).image.path)\n                            vector_database = self.predict(image.file.path)\n                            vector_image = self.predict(VerificationDetails.objects.get(c_id=j.cleaned_data[\'c_id\']).image.path)\n                            answer = np.sum(np.square(vector_image - vector_database))\n                            sum += answer\n\n                        #vector_image = self.predict(VerificationDetails.objects.get(c_id=j.cleaned_data[\'c_id\']).image.path)\n                        #vector_database = self.predict(CustomerDetails.objects.get(c_id=j.cleaned_data[\'c_id\']).image.path)\n                        #answer = np.sum(np.square(vector_image - vector_database))\n\n                        avg = sum / total\n                        print(\'Total Sum :\' + str(sum))\n                        print(\'Average :\' + str(avg))\n\n                        if avg < 1015:\n                            answer = ""The signature is real.""\n                        else:\n                            answer = ""The signature is forged.""\n                        K.clear_session()\n                        answers.append(answer)\n                return render(request, ""Main/prediction.html"", {\n                    \'answers\': answers\n                })\n        else:\n            print(""ELSE"")\n            form = CustomerForm()\n            form2 = VerificationForm()\n            form3 = NumberOfForms()\n\n        return render(request, self.template_name, {\n            \'form\': form,\n            \'form2\': form2,\n            \'form3\': form3,\n            \'answer\': answer,\n            \'reg_code\': reg_code\n        })\n'"
SignatureVerification/__init__.py,0,b''
SignatureVerification/settings.py,0,"b'""""""\nDjango settings for SignatureVerification project.\nGenerated by \'django-admin startproject\' using Django 2.1.\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.1/topics/settings/\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/2.1/ref/settings/\n""""""\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \'_vxe1@q(n^(9i42n4m&pnd=6rh_o!y25p5a!!mqklks$8xi()8\'\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    \'Main.apps.MainConfig\',\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.messages\',\n    \'django.contrib.staticfiles\',\n]\n\nMIDDLEWARE = [\n    \'django.middleware.security.SecurityMiddleware\',\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.middleware.csrf.CsrfViewMiddleware\',\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n    \'django.contrib.messages.middleware.MessageMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n]\n\nROOT_URLCONF = \'SignatureVerification.urls\'\nSTATIC_URL = \'/static/\'\nPROJECT_PATH = os.path.abspath((os.path.dirname(__name__)))\nSTATICFILES_DIRS = [\n    os.path.join(PROJECT_PATH, \'static\')\n]\n\nMEDIA_URL = \'/media/\'\nMEDIA_ROOT = os.path.join(BASE_DIR, \'media\').replace(\'\\\\\', \'/\')\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [""Main/templates""],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.contrib.messages.context_processors.messages\',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'SignatureVerification.wsgi.application\'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\n\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.sqlite3\',\n        \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.1/topics/i18n/\n\nLANGUAGE_CODE = \'en-us\'\n\nTIME_ZONE = \'UTC\'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\n\nSTATIC_URL = \'/static/\''"
SignatureVerification/urls.py,0,"b'""""""SignatureVerification URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/2.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n""""""\nfrom django.contrib import admin\nfrom django.urls import include, path\nfrom django.conf.urls.static import static\nfrom django.conf import settings\n\nurlpatterns = [\n    path(\'admin/\', admin.site.urls),\n    path(\'Main\', include(\'Main.urls\')),\n\n\n]\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n'"
SignatureVerification/wsgi.py,0,"b'""""""\nWSGI config for SignatureVerification project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/\n""""""\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'SignatureVerification.settings\')\n\napplication = get_wsgi_application()\n'"
keras-model/model.py,20,"b'import os \nimport cv2\nimport keras.layers as layers\nimport keras.models as models\nimport numpy as np\nimport tensorflow as tf\nfrom keras.regularizers import l2\n\nimg_width = 300\nimg_height = 150\nbatch = 128\n\ndef modelCreator():\n    modelA = models.Sequential()\n    modelA.add(layers.Conv2D(16, (3,3), input_shape = (img_width, img_height, 1)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2,2)))\n    modelA.add(layers.Conv2D(32, (3,3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2,2)))  \n    modelA.add(layers.Conv2D(64, (3,3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2,2)))\n    modelA.add(layers.Conv2D(128, (3,3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2,2)))\n    modelA.add(layers.Conv2D(256, (3,3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2,2)))     \n    modelA.add(layers.Flatten())\n    modelA.add(layers.Dense(batch))\n    modelA.add(layers.Reshape((1, batch)))\n    return modelA\n\nmodelu = modelCreator()\n\n\nmodelu.summary()\nX1 = layers.Input((img_width,img_height,1))\nX2 = layers.Input((img_width,img_height,1))\nmy1 = modelu(X1)\nmy2 = modelu(X2)\nmyo = layers.Subtract()([my1, my2])\nm = layers.Dense(1, activation = ""sigmoid"")(myo)\nmodel = models.Model(inputs = [X1, X2], outputs = m)\n\n\nmodel.compile(loss = ""binary_crossentropy"", optimizer = \'adam\', metrics = [\'accuracy\'])\nmodel.summary()\n\npath_to_dataset = os.getcwd() + ""\\\\dataset""\n#For training\nanchor_main = []\nreal_forged_main = []\ny_list = []\nfor x in range(1, 5):\n    if(x != 2):\n        forge = []\n        forge.extend(os.listdir(path_to_dataset+str(x)+ ""\\\\forge""))\n        forge = np.array(forge)\n        \n        real = []\n        real.extend(os.listdir(path_to_dataset+str(x)+""\\\\real""))\n        real = np.array(real)\n        \n        forged_images = []\n        t = 60\n        z = 5\n        if (x == 3):\n            t = 150\n        if (x == 5):\n            t = 90\n            z = 24\n    \n        path = \'dataset\'+str(x)+\'/forge/\'\n        for i in range(0,t):\n            img = cv2.imread(path + str(forge[i]))\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            img = cv2.resize(img, (img_width,img_height))\n            cv2.imwrite(\'save1.png\', img)\n            retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n            cv2.imwrite(\'save2.png\', img)\n            forged_images.append(img)\n            print(""Encoded ""+str(i)+"" images."")\n        \n        forged_images = np.array(forged_images)\n        \n        real_images = []\n        path = \'dataset\'+str(x)+\'/real/\'\n        for i in range(0,t):\n            img = cv2.imread(path + str(real[i]))\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            img = cv2.resize(img, (img_width,img_height))\n            retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n            real_images.append(img)\n            print(""Encoded ""+str(i)+"" images."")\n        \n        real_images = np.array(real_images)\n        \n        anchor_images = []\n        path = \'dataset\'+str(x)+\'/real/\'\n        for i in range(0,t):\n            if i%z == 0:\n                for j in range(0,z):\n                    img = cv2.imread(path + str(real[i]))\n                    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n                    img = cv2.resize(img, (img_width,img_height))\n                    retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n                    anchor_images.append(img)\n            print(""Encoded ""+str(i)+"" images. Added 5 times"")\n        \n        anchor_images = np.array(anchor_images)\n        \n        real_images = real_images / 255.\n        forged_images = forged_images / 255.\n        anchor_images = anchor_images / 255.\n        real_images = real_images.reshape(real_images.shape[0], img_width, img_height, 1)\n        forged_images = forged_images.reshape(forged_images.shape[0], img_width, img_height, 1)\n        anchor_images = anchor_images.reshape(anchor_images.shape[0], img_width, img_height, 1)\n        anchor_images = np.concatenate([anchor_images, anchor_images], axis = 0)\n        real_forged_X = np.concatenate([real_images, forged_images], axis = 0)\n        \n        y = np.concatenate([np.ones((t, 1)), np.zeros((t,1))], axis = 0)\n        y = y.reshape(len(y), 1, 1)\n        y_list.append(y)\n        anchor_main.append(anchor_images)\n        real_forged_main.append(real_forged_X)\n        \nanchor_main = np.vstack(anchor_main)\nreal_forged_main = np.vstack(real_forged_main)\ny = np.vstack(y_list)\nmodel.fit([anchor_main,real_forged_main], y, epochs = 30, batch_size = 32, shuffle = True)\n\nanchor_main = []\nreal_forged_main = []\n#For Testing\nfor x in range(2, 3):\n    forge = []\n    forge.extend(os.listdir(path_to_dataset+str(x)+ ""\\\\forge""))\n    forge = np.array(forge)\n    \n    real = []\n    real.extend(os.listdir(path_to_dataset+str(x)+""\\\\real""))\n    real = np.array(real)\n    \n    forged_images = []\n    k = 0\n    t = 60\n    bottom = 5\n    if(x == 6):\n        k = 0\n        t = 288\n        bottom = 24\n    if(x == 5):\n        k = 0\n        t = 1032\n    \n    path = \'dataset\'+str(x)+\'/forge/\'\n    for i in range(k,t):\n        img = cv2.imread(path + str(forge[i]))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        img = cv2.resize(img, (img_width,img_height))\n        retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n        forged_images.append(img)\n        print(""Encoded ""+str(i)+"" images."")\n    \n    forged_images = np.array(forged_images)\n    \n    real_images = []\n    path = \'dataset\'+str(x)+\'/real/\'\n    for i in range(k,t):\n        img = cv2.imread(path + str(real[i]))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        img = cv2.resize(img, (img_width,img_height))\n        retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n        real_images.append(img)\n        print(""Encoded ""+str(i)+"" images."")\n    \n    real_images = np.array(real_images)\n    \n    anchor_images = []\n    path = \'dataset\'+str(x)+\'/real/\'\n    for i in range(k,t):\n        if i%bottom == 0:\n            for j in range(0,bottom):\n                img = cv2.imread(path + str(real[i]))\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n                img = cv2.resize(img, (img_width,img_height))\n                retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n                anchor_images.append(img)\n        print(""Encoded ""+str(i)+"" images. Added ""+str(bottom)+"" times"")\n    \n    anchor_images = np.array(anchor_images)\n    \n    real_images = real_images / 255.\n    forged_images = forged_images / 255.\n    anchor_images = anchor_images / 255.\n    real_images = real_images.reshape(real_images.shape[0], img_width, img_height, 1)\n    forged_images = forged_images.reshape(forged_images.shape[0], img_width, img_height, 1)\n    anchor_images = anchor_images.reshape(anchor_images.shape[0], img_width, img_height, 1)\n    \n\n##C1 image will be from our database\n##C2 is current image which is to be checked for real or fake\n\n#Finding appropriate threshold by searching\n\n\nt = 3\nx = 0\nl = []\nk1 = 60\nk2 = 5\nvalues = []\n\nfor t in np.arange(1, 3, 1):\n    x = 0\n    l = []\n    for i in range(0, k1):\n        if(i%k2 == 0):\n            print(str(int(i/k2)) + ""\\n"")\n            y0 = modelu.predict(real_images[i].reshape(1,img_width,img_height,1))\n        y1 = modelu.predict(forged_images[i].reshape(1,img_width,img_height,1))\n        y_pred = np.sum(np.square((y0 - y1)))\n        l.append(y_pred)\n        if(y_pred>t):\n            x += 1\n        print(y_pred)\n    print(x)\n    \n    z = 0\n    for n in l:\n        z += n\n        \n    a1 = z/len(l)\n    \n    ################################################\n    values.append(x)\n    x = 0\n    l2 = []\n    for i in range(0, k1):\n        if(i%k2 == 0):\n            print(str(int(i/k2)) + ""\\n"")\n            y0 = modelu.predict(real_images[i].reshape(1,img_width,img_height,1))\n        y1 = modelu.predict(real_images[i].reshape(1,img_width,img_height,1))\n        y_pred = np.sum(np.square((y0 - y1)))\n        l2.append(y_pred)\n        if(y_pred<t):\n            x += 1\n        print(y_pred)\n    print(x)\n    values[-1] = values[-1] + x\n    \n    print(values[-1])\n    z = 0\n    for t in l2:\n        z += t\n        \n    a2 = z/len(l2)\n    print(str((a1+a2)/2))\n\n\n## To find threshold\nvalues = []\nfor t in np.arange(650, 1000, 1):\n    x = 0\n    for i in l:\n        if(i>t):\n            x += 1\n        print(i)\n    print(x)\n    \n    z = 0\n    for a4 in l:\n        z += a4\n        \n    a1 = z/len(l)\n    \n    ################################################\n    values.append(x)\n    x = 0\n    for i in l2:\n        if(i<t):\n            x += 1\n        print(i)\n    print(x)\n    values[-1] = values[-1] + x\n    \n    print(values[-1])\n    z = 0\n    for a4 in l2:\n        z += a4\n        \n    a2 = z/len(l2)\n    print(str((a1+a2)/2))\n\nmodelu.save_weights(""model_weights.h5"")'"
keras-model/test.py,4,"b'import os\nimport cv2\nimport numpy as np\nfrom keras.models import load_model\nimport keras.layers as layers\nimport keras.models as models\n\nfiles = []\npath_to_dataset = os.getcwd()\nfiles.extend(os.listdir(path_to_dataset + ""/dataset5""))\npath = \'dataset5/\'\nimages = []\nfor i in files:\n    img = cv2.imread(path+i)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img = cv2.resize(img, (300,150))\n    retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n    images.append(img)\n    print(""Encoded ""+str(i)+"" images."")\n\nimages = np.array(images).reshape(90,300,150,1)\nimages = images / 255.\n\n\ntest_files = []\npath_to_dataset = os.getcwd()\ntest_files.extend(os.listdir(path_to_dataset + ""/dataset6""))\npath = \'dataset6/\'\ntest_images = []\nfor i in test_files:\n    img = cv2.imread(path+i)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img = cv2.resize(img, (300,150))\n    retval, img = cv2.threshold(img, 0, 255, type = cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\n    test_images.append(img)\n    print(""Encoded ""+str(i)+"" test images."")\n\n\ntest_images = np.array(test_images).reshape(390,300,150,1)\ntest_images = test_images / 255.\n\n\n\nimg_width = 300\nimg_height = 150\nbatch = 128\n\ndef modelCreator():\n    modelA = models.Sequential()\n    modelA.add(layers.Conv2D(16, (3, 3), input_shape=(img_width, img_height, 1)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2, 2)))\n    modelA.add(layers.Conv2D(32, (3, 3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2, 2)))\n    modelA.add(layers.Conv2D(64, (3, 3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2, 2)))\n    modelA.add(layers.Conv2D(128, (3, 3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2, 2)))\n    modelA.add(layers.Conv2D(256, (3, 3)))\n    modelA.add(layers.BatchNormalization())\n    modelA.add(layers.Activation(""relu""))\n    modelA.add(layers.MaxPooling2D((2, 2)))\n    modelA.add(layers.Flatten())\n    modelA.add(layers.Dense(batch))\n    modelA.add(layers.Reshape((1, batch)))\n    return modelA\n    \n\nmodelu = modelCreator()\n\nmodelu.load_weights(\'model_weights.h5\')\n\nvectorized_train = modelu.predict(images)\n\nfinal_dists = []\nfinale = []\n\nfor i in range(0, len(test_images)):\n    j = 0\n    if(i%13==0):\n        j = j + 3\n        x = vectorized_train[j:3+j]\n    vectorized_i = modelu.predict(test_images[i].reshape(1, 300, 150, 1))\n    vectorized_i = np.concatenate([vectorized_i, vectorized_i, vectorized_i])\n    v = np.sum(np.square(x - vectorized_i))\n    final_dists.append(v)\n    if(v < 1015):\n        finale.append(""YES"")\n    else:\n        finale.append(""NO"")\n    \nimport pandas as pd\ntest_files_pd = pd.DataFrame(test_files)\nyes_no_pd = pd.DataFrame(finale)'"
Main/migrations/0001_initial.py,0,"b""# Generated by Django 2.1 on 2018-11-30 13:58\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CustomerDetails',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('c_id', models.CharField(max_length=250)),\n                ('c_name', models.CharField(max_length=250)),\n            ],\n        ),\n    ]\n"""
Main/migrations/0002_customerdetails_image.py,0,"b""# Generated by Django 2.1 on 2018-11-30 17:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('Main', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='customerdetails',\n            name='image',\n            field=models.FileField(default='none', upload_to='image/'),\n            preserve_default=False,\n        ),\n    ]\n"""
Main/migrations/0003_auto_20181201_0038.py,0,"b""# Generated by Django 2.1 on 2018-11-30 19:08\n\nimport Main.models\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('Main', '0002_customerdetails_image'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='VerificationDetails',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('c_id', models.CharField(max_length=250)),\n                ('image', models.FileField(upload_to=Main.models.user_directory)),\n            ],\n        ),\n        migrations.AlterField(\n            model_name='customerdetails',\n            name='image',\n            field=models.FileField(upload_to=Main.models.user_directory),\n        ),\n    ]\n"""
Main/migrations/0004_auto_20181201_1424.py,0,"b""# Generated by Django 2.1 on 2018-12-01 08:54\n\nimport Main.models\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('Main', '0003_auto_20181201_0038'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Attachment',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('file', models.FileField(upload_to=Main.models.user_directory)),\n            ],\n        ),\n        migrations.RemoveField(\n            model_name='customerdetails',\n            name='image',\n        ),\n        migrations.AddField(\n            model_name='attachment',\n            name='customerdetails',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.CustomerDetails'),\n        ),\n    ]\n"""
Main/migrations/0005_auto_20181201_1439.py,0,"b""# Generated by Django 2.1 on 2018-12-01 09:09\n\nimport Main.models\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('Main', '0004_auto_20181201_1424'),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name='attachment',\n            name='customerdetails',\n        ),\n        migrations.AddField(\n            model_name='customerdetails',\n            name='image',\n            field=models.FileField(default='hi', upload_to=Main.models.user_directory),\n            preserve_default=False,\n        ),\n        migrations.DeleteModel(\n            name='Attachment',\n        ),\n    ]\n"""
Main/migrations/0006_auto_20181215_1141.py,0,"b""# Generated by Django 2.1 on 2018-12-15 06:11\n\nimport Main.models\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('Main', '0005_auto_20181201_1439'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Attachment',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('file', models.FileField(upload_to=Main.models.img_directory)),\n            ],\n        ),\n        migrations.RemoveField(\n            model_name='customerdetails',\n            name='image',\n        ),\n        migrations.AddField(\n            model_name='attachment',\n            name='customerdetails',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.CustomerDetails'),\n        ),\n    ]\n"""
Main/migrations/__init__.py,0,b''
