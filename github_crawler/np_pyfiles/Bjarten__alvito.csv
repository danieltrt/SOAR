file_path,api_count,code
algorithm_visualizer.py,3,"b'import imageio\nfrom matplotlib.patches import Rectangle\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nimport seaborn as sns\nsns.set()\nimport numpy as np\nfrom tqdm import trange\nimport os\n\nclass alvito:\n\n    def __init__(self):\n        self._ims = []\n        self.fps = 5\n        self.input_shape = (0,0)\n        self.title = """"\n        self.comparisons = 0\n        self.track_operations = True\n\n        self.show_title = True\n        self.title_fontsize = 15\n\n        self.show_xlable = True\n        self.xlable_fontsize = 15\n\n        self.rectangle_color_1 = \'black\'\n        self.rectangle_color_2 = \'gold\'\n        self.rectangle_linewidth = 4\n\n        self.colormap = \'cool\'\n        self.numbers_color = ""dynamic""\n        self.numbers_fontsize = 15\n        self.dpi = 100\n\n        self.save_dir = \'gifs/\'\n        self.custom_save_name = False\n        self.save_name = \'\'\n\n\n    def visulize_algorithm(self,array,i_1,i_2,i_3,ec1,ec2,ec3):\n\n        # reahsape array into its original shape\n        array = np.array(array).reshape(self.input_shape[0], self.input_shape[1])\n\n        # find coordinates for the rectangles\n        dx = 0.05\n        dy = dx\n        index=[(i_1%self.input_shape[1]+dx,i_1//self.input_shape[1]+dy),\n               (i_2%self.input_shape[1]+dx,i_2//self.input_shape[1]+dy),\n               (i_3%self.input_shape[1]+dx,i_3//self.input_shape[1]+dy)]\n\n        if self.numbers_color == \'dynamic\':\n            annot_kws = { \'fontsize\' : self.numbers_fontsize  }\n        else:\n            annot_kws = { \'fontsize\' : self.numbers_fontsize , \'color\' : self.numbers_color }\n\n        # set plot figsize\n        scale = 0.8\n        figsize = (self.input_shape[1]*scale, self.input_shape[0]*scale)\n        fig, ax = plt.subplots(figsize=figsize)\n\n        # create heatmap\n        ax = sns.heatmap(array,\n                         annot=True,\n                         annot_kws = annot_kws,\n                         fmt=""d"",\n                         linewidths=2,\n                         cbar=False,\n                         cmap=self.colormap,\n                         yticklabels=False,\n                         xticklabels=False,\n                         square=True)\n\n        # plot title\n        if self.show_title:\n            ax.set_title(self.title, fontsize=self.title_fontsize )\n\n        # plot number of comparisons\n        if self.show_xlable:\n            plt.xlabel(f\'Comparisons:\\n{self.comparisons}\',fontsize=self.xlable_fontsize)\n\n        if self.track_operations:\n            # draw rectangle around tracked cells\n            if i_1 != -1:\n                ax.add_patch(Rectangle(index[0], 0.9, 0.9, fill=False, edgecolor=ec1, lw=self.rectangle_linewidth))\n            if i_2 != -1:\n                ax.add_patch(Rectangle(index[1], 0.9, 0.9, fill=False, edgecolor=ec2, lw=self.rectangle_linewidth))\n            if i_3 != -1:\n                ax.add_patch(Rectangle(index[2], 0.9, 0.9, fill=False, edgecolor=ec3, lw=self.rectangle_linewidth))\n\n        # create and save gif\n\n        if not os.path.exists(\'temp/\'):\n                os.mkdir(\'temp/\')\n\n        img_loc = \'temp/\' + \'temp_image_{:d}\'.format(self.comparisons+1) + \'.png\'\n\n        plt.savefig(img_loc, bbox_inches=\'tight\', dpi=self.dpi)\n        self._ims.append(imageio.imread(img_loc))\n        os.remove(img_loc)\n\n        plt.close()\n\n    def bubbleSort(self, array, title=""Bubble Sort""):\n\n        self.title = title\n        array = self._array_transform(array)\n\n        self.comparisons = 0\n\n        for passnum in trange(len(array)-1,0,-1):\n            for i in range(passnum):\n                self.comparisons += 1\n                if array[i]>array[i+1]:\n                    temp = array[i]\n                    array[i] = array[i+1]\n                    array[i+1] = temp\n\n                    self.visulize_algorithm(array,i,i+1,-1,ec1=self.rectangle_color_2,ec2=self.rectangle_color_2,ec3=self.rectangle_color_2)\n                else:\n                    self.visulize_algorithm(array,i,i+1,-1,ec1=self.rectangle_color_1,ec2=self.rectangle_color_1,ec3=self.rectangle_color_1)\n\n        if self.custom_save_name:\n            imageio.mimsave(f\'{self.save_dir}{self.save_name}.gif\', self._ims, fps=self.fps)\n        else:\n            imageio.mimsave(f\'{self.save_dir}/bubble_sort_comparisons_{self.comparisons}.gif\', self._ims, fps=self.fps)\n\n        self._ims = []\n\n    def insertionSort(self, array, title=""Insertion Sort""):\n\n        self.title = title\n        array = self._array_transform(array)\n\n        self.comparisons = 0\n\n        for index in trange(1,len(array)):\n\n            currentvalue = array[index]\n            position = index\n\n            while position>0 and array[position-1]>currentvalue:\n\n                self.comparisons += 1\n\n                array[position]=array[position-1]\n                position = position-1\n                array[position]=currentvalue\n\n                self.visulize_algorithm(array,index,position,-1,ec1=self.rectangle_color_1,ec2=self.rectangle_color_1,ec3=self.rectangle_color_1)\n\n        if self.custom_save_name:\n            imageio.mimsave(f\'{self.save_dir}{self.save_name}.gif\', self._ims, fps=self.fps)\n        else:\n            imageio.mimsave(f\'{self.save_dir}insertion_sort_comparisons_{self.comparisons}.gif\', self._ims, fps=self.fps)\n\n        self._ims = []\n\n    def selectionSort(self, array, title=""Selection Sort""):\n\n        self.title = title\n        array = self._array_transform(array)\n\n        self.comparisons = 0\n\n        for fillslot in trange(len(array)-1,0,-1):\n            positionOfMax=0\n            for location in range(1,fillslot+1):\n                self.comparisons += 1\n\n                self.visulize_algorithm(array,fillslot,positionOfMax,location,ec1=self.rectangle_color_2,ec2=self.rectangle_color_2,ec3=self.rectangle_color_1)\n\n                if array[location]>array[positionOfMax]:\n                    positionOfMax = location\n\n            temp = array[fillslot]\n            array[fillslot] = array[positionOfMax]\n            array[positionOfMax] = temp\n\n        if self.custom_save_name:\n            imageio.mimsave(f\'{self.save_dir}{self.save_name}.gif\', self._ims, fps=self.fps)\n        else:\n            imageio.mimsave(f\'{self.save_dir}selection_sort_comparisons_{self.comparisons}.gif\', self._ims, fps=self.fps)\n\n        self._ims = []\n\n    def _array_transform(self, array):\n\n        if type(array) == list:\n            array = np.array(array)\n        if array.ndim == 1:\n            array = np.array([array])\n\n        self.input_shape = array.shape\n\n        # flatten the array so it can be used by the algorithm\n        array = array.flatten()\n\n        return array\n'"
utils.py,3,"b'import numpy as np\nfrom random import shuffle\n\ndef random_array(shape):\n    np.random.seed(42)\n    array_1 = np.arange(1,shape[0]*shape[1]+1)\n    np.random.shuffle(array_1)\n    array = array_1.reshape((shape[0], shape[1]))\n    return array'"
