file_path,api_count,code
Numpy/Numpy Tutorial.py,62,"b'\n# coding: utf-8\n\n# # 0. Import Numpy\n\n# In[1]:\n\n\nimport numpy as np\n\n\n# In[3]:\n\n\nnp.__version__\n\n\n# **Initialize using python list:**\n\n# In[4]:\n\n\na = np.array([1,2,3]) \n\n\n# In[5]:\n\n\nprint(a)\n\n\n# In[6]:\n\n\nb = np.array([[1,2],[3,4]])\nprint(b)\n\n\n# **Initialize using some NumPy functions:    **\n\n# In[7]:\n\n\nc = np.zeros((2,3))\nprint(c)\n\n\n# In[8]:\n\n\nd = np.ones((3,4))\nprint(d)\n\n\n# In[9]:\n\n\ne = np.arange(2,10,2)\nprint(e)\n\n\n# In[10]:\n\n\nf = np.linspace(0,100,6)\nprint(f)\n\n\n# In[11]:\n\n\ng = np.full((2,3), 6)\nprint(g)\n\n\n# In[12]:\n\n\nh = np.eye(3)\nprint(h)\n\n\n# In[13]:\n\n\ni = np.eye(3,4)\nprint(i)\n\n\n# **Random Initialization:**\n\n# In[14]:\n\n\nj = np.random.rand(4,5) # samples from a uniform distribution over [0, 1)\nprint(j)\n\n\n# In[15]:\n\n\nk = np.random.randint(2,5,size = (2,3))#samples from discrete uniform distribution in the specified half-open interval\nprint(k)\n\n\n# In[16]:\n\n\nmu, sigma = 0, 0.1 # mean and standard deviation\nl = np.random.normal(mu, sigma, (3, 4)) # samples from the ""standard normal"" distribution\nprint(l)\n\n\n# In[17]:\n\n\nm = np.random.randn(2, 4) # samples from the ""standard normal"" distribution\nprint(m)\n\n\n# See the list of other distributions in: https://docs.scipy.org/doc/numpy-1.10.1/reference/routines.random.html\n\n# # 2. Inspecting Properties:\n\n# In[18]:\n\n\na = np.random.randint(0,10, (2,3,4))\nprint(a)\n\n\n# In[19]:\n\n\na.size\n\n\n# In[20]:\n\n\na.shape\n\n\n# In[21]:\n\n\na.dtype\n\n\n# In[22]:\n\n\nb = np.array([1.0, 2.0])\nb.dtype\n\n\n# In[23]:\n\n\nb_int = b.astype(int)\nprint(b_int)\n\n\n# In[24]:\n\n\na_list = a.tolist()\nprint(a_list)\n\n\n# In[25]:\n\n\nprint(np.asarray(a_list))\n\n\n# In[26]:\n\n\nnp.info(np.random)\n\n\n# # 3. Indexing/Slicing/Subsetting\n\n# In[27]:\n\n\na = np.random.randint(0,10, (2,3,4))\nprint(a)\n\n\n# In[28]:\n\n\na[0,0,0]\n\n\n# In[29]:\n\n\na[0][0][0]\n\n\n# In[30]:\n\n\na[1,0,3]\n\n\n# In[31]:\n\n\na[1,1]\n\n\n# In[32]:\n\n\na[:,:,3]\n\n\n# In[33]:\n\n\na[:,0:2,3]\n\n\n# In[34]:\n\n\na[:,:2,3]\n\n\n# In[35]:\n\n\na[:,:2,-1]\n\n\n# In[36]:\n\n\na[:,:2,-2]\n\n\n# In[37]:\n\n\na\n\n\n# In[38]:\n\n\nprint(a<5)\n\n\n# In[43]:\n\n\nprint(a<5)\n\n\n# In[44]:\n\n\nprint(a[a<5])\n\n\n# In[46]:\n\n\na[:,:2,3] = np.zeros((2,2))\na\n\n\n# # 4. Copying/Sorting/Reshaping\n\n# In[47]:\n\n\na = np.array([1,2,3])\nb = a\nb[0] = 0\na[0] == b[0]\n\n\n# In[48]:\n\n\nc = np.copy(a)\nc[0] = 5\na[0] == c[0]\n\n\n# In[49]:\n\n\na = np.random.randint(0,10, (3,4))\nprint(a)\n\n\n# In[50]:\n\n\nb = np.sort(a) # sort along the last axis\nprint(b)\n\n\n# In[51]:\n\n\nnp.sort(a, axis=0)\n\n\n# In[52]:\n\n\nc = a.T\nprint(c)\n\n\n# In[53]:\n\n\nd = a.reshape(2,6)\nprint(d)\n\n\n# In[54]:\n\n\ne = a.flatten()\nprint(e)\n\n\n# In[55]:\n\n\nprint(a)\n\n\n# # 5. Adding/Removing/Combining/Spliting\n\n# In[56]:\n\n\na = np.arange(5)\nb = np.arange(5,10)\nprint(a,b)\n\n\n# In[57]:\n\n\nc = np.vstack([a,b])\nprint(c)\n\n\n# In[58]:\n\n\nprint(np.hstack([a,b]))\n\n\n# In[59]:\n\n\nnp.delete(c,1,1)\n\n\n# In[60]:\n\n\nnp.delete(c,1,0)\n\n\n# In[61]:\n\n\nprint(np.split(c,2))\n\n\n# See more in: https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.array-manipulation.html\n\n# # 6. Math\n\n# ## 6.1 Elementwise\n\n# In[62]:\n\n\na = np.arange(0,10).reshape(2,5)\nprint(a)\n\n\n# In[63]:\n\n\nb = np.random.randint(1,10,(2,5))\nprint(b)\n\n\n# In[64]:\n\n\nc = np.add(a, 1)\nprint(c)\n\n\n# In[65]:\n\n\nc = a + 1\nprint(c)\n\n\n# In[66]:\n\n\nd = a - b # np.subtract(a,b)\nprint(d)\n\n\n# In[67]:\n\n\ne = a * b #np.multiply(a,b)\nprint(e)\n\n\n# In[68]:\n\n\nf = a/b # np.divide(a,b)\nprint(f)\n\n\n# In[69]:\n\n\ng = a**b # np.power(a,b)\nprint(g)\n\n\n# In[70]:\n\n\nh = np.sqrt(a)\nprint(h)\n\n\n# In[71]:\n\n\ni = np.sin(a)\nprint(i)\n\n\n# For more mathematical functions of NumPy visit: https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.math.html\n\n# ## 6.2 Matrix operations\n\n# In[72]:\n\n\na = np.array([[1, 0],[1, 1], [0, 1]])\nprint(a)\n\n\n# In[73]:\n\n\nb = np.array([[0, -1], [1, 1]])\nprint(b)\n\n\n# Adding and subtracting is the same as prior section.\n\n# In[74]:\n\n\nnp.matmul(a,b)\n\n\n# In[75]:\n\n\nnp.linalg.inv(b)\n\n\n# In[76]:\n\n\nnp.linalg.det(b)\n\n\n# In[77]:\n\n\nnp.trace(b)\n\n\n# For more information about linear algebra in NumPy see: https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.linalg.html\n\n# ## 7. Statistics\n\n# In[79]:\n\n\nmu, sigma = 0, 0.1 # mean and standard deviation\na = np.random.normal(mu, sigma, 1000)\nb = 3*a+1\n\n\n# In[80]:\n\n\nnp.mean(a)\n\n\n# In[81]:\n\n\nnp.median(a)\n\n\n# In[82]:\n\n\nnp.std(a)\n\n\n# In[83]:\n\n\nnp.var(a)\n\n\n# In[84]:\n\n\nnp.cov(np.vstack([a,b])) # compute the covariance matrix of two random variable a and b \n\n\n# In[85]:\n\n\nc = np.array([[1,2],[3,4]])\nc\n\n\n# In[86]:\n\n\nnp.sum(c)\n\n\n# In[87]:\n\n\nnp.sum(c, axis=1)\n\n\n# For more statistics in NumPy see: https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.statistics.html\n\n# ## 8. Import/Export\n# save and load NumPy array in disk:\n\n# In[91]:\n\n\nnp.save(\'numpy_files/123\', np.array([[1, 2, 3], [4, 5, 6]]))\n\n\n# In[92]:\n\n\nnp.load(\'numpy_files/123.npy\')\n\n\n# In[93]:\n\n\na=np.array([[1, 2, 3], [4, 5, 6]])\nb=np.array([1, 2])\nnp.savez(\'numpy_files/123.npz\', a=a, b=b)\ndata = np.load(\'numpy_files/123.npz\')\nprint(data[\'a\'])\nprint(data[\'b\'])\ndata.close()\n\n\n# For more I/O routines: https://docs.scipy.org/doc/numpy/reference/routines.io.html\n\n# Learn more about NumPy: https://docs.scipy.org/doc/numpy/reference/routines.html\n'"
Python/Python Tutorial.py,1,"b'\n# coding: utf-8\n\n# # Hello World\n\n# In[1]:\n\n\nprint(""Hello world!"")\n\n\n# # Variables and Types\n# \n# **Python is completely object oriented, and not ""statically typed"". You do not need to declare variables before using them, or declare their type. Every variable in Python is an object.**\n\n# In[2]:\n\n\nmyint = 7\nprint(myint)\n\n\n# In[3]:\n\n\nmyfloat = 7.0\nprint(myfloat)\nmyfloat = float(7)\nprint(myfloat)\n\n\n# In[4]:\n\n\nmystring = \'hello\'\nprint(mystring)\nmystring = ""hello""\nprint(mystring)\n\n\n# In[5]:\n\n\none = 1\ntwo = 2\nthree = one + two\nprint(three)\n\nhello = ""hello""\nworld = ""world""\nhelloworld = hello + "" "" + world\nprint(helloworld)\n\n\n# **Python uses C-style string formatting to create new, formatted strings.<br>\n# %s - String (or any object with a string representation, like numbers)<br>\n# %d - Integers<br>\n# %f - Floating point numbers**\n\n# In[6]:\n\n\n# This prints out ""Nik is 21 years old.""\nname = ""Nik""\nage = 21\nprint(""%s is %d years old."" % (name, age))\nprint(""{} is {} years old."".format(name, age))\n\n\n# # Getting user input\n\n# In[7]:\n\n\na = input(""insert a number"")\nprint(a)\n\n\n# # Lists\n# \n# **Lists are very similar to arrays. They can contain any type of variable, and they can contain as many variables as you wish. Lists can also be iterated over in a very simple manner. Here is an example of how to build a list.**\n\n# In[8]:\n\n\nmylist = []\nmylist.append(1)\nmylist.append(2)\nmylist.append(3)\nprint(mylist[0]) # prints 1\nprint(mylist[1]) # prints 2\nprint(mylist[2]) # prints 3\n\n# prints out 1,2,3\nfor x in mylist:\n    print(x)\n\n\n# In[9]:\n\n\neven_numbers = [2,4,6,8]\nodd_numbers = [1,3,5,7]\nall_numbers = odd_numbers + even_numbers\nprint(all_numbers)\n\n\n# **what if we want to add the elements of this two list with each other?**\n\n# In[10]:\n\n\n[x + y for x, y in zip(even_numbers, odd_numbers)]\n\n\n# # tuple\n# **A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses**\n\n# In[11]:\n\n\ntup1 = (\'physics\', \'chemistry\', 1997, 2000);\ntup2 = (1, 2, 3, 4, 5 );\ntup3 = ""a"", ""b"", ""c"", ""d"";\n\n\n# # Dictionaries\n# **A dictionary is a data type similar to arrays, but works with keys and values instead of indexes. Each value stored in a dictionary can be accessed using a key, which is any type of object (a string, a number, a list, etc.) instead of using its index to address it.**\n\n# In[12]:\n\n\nphonebook = {}\nphonebook[""Nik""] = 938477566\nphonebook[""Hamed""] = 938377264\nphonebook[""Erfan""] = 947662781\nprint(phonebook)\n\n\n# In[13]:\n\n\nphonebook = {\n    ""Nik"" : 938477566,\n    ""Hamed"" : 938377264,\n    ""Erfan"" : 947662781\n}\n\n\n# In[14]:\n\n\nfor name, number in phonebook.items():\n    print(""Phone number of %s is %d"" % (name, number))\n\n\n# In[16]:\n\n\nphonebook = {\n   ""Nik"" : 938477566,\n   ""Hamed"" : 938377264,\n   ""Erfan"" : 947662781\n}\ndel phonebook[""Nik""]\n# print(phonebook)\nprint(phonebook[""Erfan""])\nprint(phonebook)\n\n\n# # Condition\n# ## Indentation and if statement\n# **Python uses indentation for blocks, instead of curly braces. Both tabs and spaces are supported**\n\n# In[17]:\n\n\nx = 1\nif x == 1:\n    # indented four spaces\n    print(""x is 1."")\nelse:\n    print(""x is not 1."")\n\n\n# In[18]:\n\n\nname = ""Nik""\nage = 21\nif name == ""Nik"" and age == 21:\n    print(""Your name is Nik, and you are also 21 years old."")\nif name == ""Nik"" or name == ""Erfan"":\n    print(""Your name is either Nik or Erfan."")\n\n\n# In[19]:\n\n\nname = ""Nik""\nif name in [""Nik"", ""Hamed""]:\n    print(""Your name is either Nik or Hamed."")\n\n\n# ## Not\n# **Using ""not"" before a boolean expression inverts it:**\n\n# In[20]:\n\n\nprint(not False) # Prints out True\nprint((not False) == (False)) # Prints out False\n\n\n# # Loops\n# ## The ""for"" loop\n# ** For loops iterate over a given sequence. Here is an example:**\n\n# In[21]:\n\n\nprimes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n\n\n# In[22]:\n\n\nprimes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime, end=\' \')\n\n\n# **For loops can iterate over a sequence of numbers using the ""range""**\n\n# In[23]:\n\n\n# Prints out the numbers 0,1,2,3,4\nfor x in range(5):\n    print(x,end=\' \')\nprint(""\\n"")\n\n# Prints out 3,4,5\nfor x in range(3, 6):\n    print(x,end=\' \')\nprint(""\\n"")\n\n# Prints out 3,5,7\nfor x in range(3, 8, 2):\n    print(x,end=\' \')\n\n\n# ## For loop with Enumerate\n# **It\'s helpful if you want to loop over an interator, and also want to have an index counter available**\n\n# In[24]:\n\n\nfor item in enumerate([""a"", ""b"", ""c""]):\n    print(item)\n\n\n# **Start index from some other value**\n\n# In[25]:\n\n\nfor item in enumerate([""a"", ""b"", ""c""],2):\n    print(item)\n\n\n# ## ""While"" loop\n# **While loops repeat as long as a certain boolean condition is met. For example:**\n\n# In[26]:\n\n\n# Prints out 0,1,2,3,4\n\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1  # This is the same as count = count + 1\n\n\n# ## ""break"" and ""continue"" statements\n# **break is used to exit a for loop or a while loop, whereas continue is used to skip the current block, and return to the ""for"" or ""while"" statement. A few examples**\n\n# In[27]:\n\n\n# Prints out 0,1,2,3,4\n\ncount = 0\nwhile True:\n    print(count)\n    count += 1\n    if count >= 5:\n        break\n\n# Prints out only odd numbers - 1,3,5,7,9\nfor x in range(10):\n    # Check if x is even\n    if x % 2 == 0:\n        continue\n    print(x)\n\n\n# # Functions\n# ## How do you write functions in Python?\n\n# In[28]:\n\n\n# Define our 3 functions\ndef my_function():\n    print(""Hello From My Function!"")\n\ndef my_function_with_args(username, greeting):\n    print(""Hello, %s , From My Function!, I wish you %s""%(username, greeting))\n\ndef sum_two_numbers(a, b):\n    return a + b\n\n# print(a simple greeting)\nmy_function()\n\n#prints - ""Hello, Nik, From My Function!, I wish you a great year!""\nmy_function_with_args(""Nik"", ""a great year!"")\n\n# after this line x will hold the value 3!\nx = sum_two_numbers(1,2)\n\n\n# # Classes and Objects\n# **Objects are an encapsulation of variables and functions into a single entity. Objects get their variables and functions from classes**\n\n# In[29]:\n\n\nclass MyClass:\n    variable = ""blah""\n\n    def function(self):\n        return(""This is a message inside the class."")\n\nmyobjectx = MyClass()\n\nprint(myobjectx.variable)\nprint(myobjectx.function())\n\n\n# ## init,private and public\n# **The init method gets called when memory for the object is allocated:**<br>\n# **with ._ and .__ we can change the public variable and func. to protected and private variable and func.**<br>\n# **private - only available to be accessed within the class that defines them.**<br>\n# **protected - accessible in the class that defines them and in other classes which inherit from that class.**<br>\n\n# In[30]:\n\n\nclass Car:\n    maxspeed = 0\n    name = """"\n\n    def __init__(self,a,b):\n        self.maxspeed = a\n        self.name = b\n\n    def drive(self):\n        print(\'driving. maxspeed \' + str(self.maxspeed))\n\n\nredcar = Car(120,""pride"")\nprint(""maxspeed is=>"",redcar.maxspeed)\nredcar.drive()\n\nredcar.maxspeed = 10  # will not change variable because its private\nredcar.drive()\n\n\n# ## setter and getter\n\n# In[31]:\n\n\nclass Car:\n    __maxspeed = 0\n    __name = """"\n\n    def __init__(self):\n        self.__maxspeed = 200\n        self.__name = ""Supercar""\n\n    def drive(self):\n        print(\'driving. maxspeed \',(self.__maxspeed))\n\n    def setMaxSpeed(self, speed):\n        self.__maxspeed = speed\n\n\nredcar = Car()\nredcar.drive()\nredcar.setMaxSpeed(320)\nredcar.drive()\n\n\n# # Modules and Packages\n\n# In[32]:\n\n\nimport numpy as np\n\n\n# In[33]:\n\n\nnumpy.nan\n\n\n# In[34]:\n\n\nnp.nan\n\n'"
