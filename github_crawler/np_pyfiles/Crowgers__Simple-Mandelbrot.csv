file_path,api_count,code
Mandelbrot_Main.py,3,"b'# Python code to compute, print and ave a png file of madnelbrot set at specified points\r\n# num_grid_pts defines how large array.  Sticking with uniform grid but if variable scaling is desired split into\r\n# num_grid_pts_x & num_grid_pts_y\r\n# The tolerance is the number of times a specific point will be interated on to determine if it is in the set.\r\n# x_min, x_max, y_min, y_max are boundary of calculation (-2,2,-2,2 encompass the set).\r\n# Worth noting that functions use local variables and global variables carry ""global tag""\r\n# Python version: 3.5.2\r\n# Numpy version: 1.11.2\r\n# matplotlib version: 1.5.3\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\n# Plotting function creates a heatmap - Relied on by main.\r\ndef fn_plotting(values, tolerance, x_min, x_max, y_min, y_max):\r\n\tplt.xlabel(""Real Axis"")\r\n\tplt.ylabel(""Imaginary Axis"")\r\n\tplt.title(""The Mandelbrot Set. Tolerance: %s"" % tolerance)\r\n\tplt.grid(True)\r\n\tplt.imshow(values, origin=""0,0"", interpolation=""none"", extent=[x_min, x_max, y_min, y_max])\r\n\tplt.savefig(""MandelBrot.png"", bbox_inches=""tight"")\r\n\tplt.show()\r\n\r\n\r\n# Algorithm to compute if point is within set - Relied on by main\r\ndef fn_mandel_calc(point, tolerance):\r\n\tz = 0\r\n\tfor i in range(1, tolerance):\r\n\t\tif abs(z) > 2:\r\n\t\t\treturn i\r\n\t\tz = z*z + point\r\n\treturn 0\r\n\r\n\r\n# Main function intialises & creates grid.  Dependent on _mandel_calc & _plotting.\r\ndef fn_mandelbrot_main(x_min, x_max, y_min, y_max, num_grid_pts, tolerance):\r\n\treal = np.linspace(x_min, x_max, num_grid_pts)\r\n\timag = np.linspace(y_min, y_max, num_grid_pts)\r\n\tvalues = np.empty((num_grid_pts, num_grid_pts))\r\n\tfor i in range(num_grid_pts):\r\n\t\tfor j in range(num_grid_pts):\r\n\t\t\tvalues[j, i] = fn_mandel_calc(real[i] + 1j*imag[j], tolerance)\r\n\tfn_plotting(values, tolerance, x_min, x_max, y_min, y_max)\r\n\treturn\r\n\r\nprint(""This code will compute the mandelbrot set for a user defined number of points between uer defined boundaries.\\n"")\r\nprint(""The tolerance is the number of times a specific point will be interated on to determine if it is in the set.\\n"")\r\nprint(""A plot is saved to file and then printed to screen.\\n"")\r\nprint(""Note that -2 -> x -> 2 & -2 -> y -> 2 encompass the set.\\n"")\r\n\r\n# Sample grids to run.\r\n# _mandelbrot_main(-2, 2, -2, 2, 1000, 100)\r\n# _mandelbrot_main(0, .5, .5, 1.0, 1000, 100)\r\n# _mandelbrot_main(.5, .6, .3, .4, 1000, 100)\r\n# _mandelbrot_main(.34, .36, .50, 5.2, 1000, 100\r\n# _mandelbrot_main(.30, .32, .56, .58, 1000, 100)\r\n# _mandelbrot_main(.36, .38, .58, .60, 1000, 50)\r\n\r\nG_x_min = float(input(""Input x_min:""))\r\nG_x_max = float(input(""Input x_max:""))\r\nG_y_min = float(input(""Input y_min:""))\r\nG_y_max = float(input(""Input y_max:""))\r\nG_num_grid_pts = int(input(""Input num_grid_pts:""))\r\nG_tolerance = int(input(""Input tolerance:""))\r\n\r\nprint(\'Computing set ...\')\r\nfn_mandelbrot_main(G_x_min, G_x_max, G_y_min, G_y_max, G_num_grid_pts, G_tolerance)\r\n'"
