file_path,api_count,code
Finger_Tracking.py,3,"b'## @Author: Dishant Varshney\n"""""" Finger Tracking: This pyhton program tracks the finger """"""\n\n## Importing Libraries\nimport numpy as np \nimport cv2 as cv \nimport math\n\n## Defining Constants\nlwr = np.array([0,50,70], np.uint8)\nupr = np.array([100,230,230], np.uint8)\nkernel = np.ones((5,5), np.uint8)\nfingerP = []\nfingerT = []\nst = False\np = False\n\n## HSV function to separate hand(skin color) from background(color)\ndef hsvF(focusF):\n    hsv = cv.cvtColor(focusF, cv.COLOR_BGR2HSV_FULL)\n    mask = cv.inRange(hsv, lwr, upr)\n    mask = cv.dilate(mask, kernel, iterations = 3)\n    mask = cv.GaussianBlur(mask, (5,5), 100)\n    return mask\n\n## Function to mark the centroid of contour\ndef centroidF(cnt):\n    M = cv.moments(cnt)\n    if M[\'m00\'] != 0:\n        cx = int(M[\'m10\']/M[\'m00\'])\n        cy = int(M[\'m01\']/M[\'m00\'])\n        return cx, cy\n    else:\n        pass\n\n## Function to display the topmost point of the contour\ndef points(focusF, finger):\n    for i in range(len(finger)):\n        cv.circle(focusF, finger[i], 5, [182,31,102], -1)\n\n## Function to pause/start the tracking of the finger\n# Press \'p\' to pause/start the tracking\n# Press \'c\' to clear the screen\ndef pauseT(focusF, fingerT, ftop):\n    if len(fingerT) < 20:\n        fingerT.append(ftop)\n    else:\n        fingerT.pop(0)\n        fingerT.append(ftop)\n    points(focusF, fingerT)\n\n## Main function\ncap = cv.VideoCapture(0)  # capture the frames from the web camera\n\nwhile cap.isOpened():\n    ret, frame = cap.read()\n    if ret == True:\n        frame = cv.flip(frame, 1)\n        focusF = frame[55:445, 305:595]\n\n        cv.putText(frame, \'DV\', (10,50), cv.FONT_HERSHEY_SIMPLEX, 1, (0,0,0), 2)\n        cv.rectangle(frame, (300, 50), (600, 450), (0,0,255), 0)\n\n        noise = hsvF(focusF)\n\n        r,thresh = cv.threshold(noise, 100, 255, cv.THRESH_BINARY)\n        img, cont, hie = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)\n\n        try:\n            cnt = max(cont, key = cv.contourArea)\n\n            epsilon = 0.001*cv.arcLength(cnt, True)\n            approx = cv.approxPolyDP(cnt, epsilon, True)\n\n            hull = cv.convexHull(approx, returnPoints=False)\n            area_cnt = cv.contourArea(approx)\n            defects = cv.convexityDefects(approx, hull)\n\n            centroid = centroidF(cnt)\n            \n            if defects is not None:\n                if st == True:\n                    if area_cnt > 6000:\n                        for i in range(defects.shape[0]):\n                            s,e,f,d = defects[i,0]\n                            start = tuple(approx[s][0])\n                            end = tuple(approx[e][0])\n                            far = tuple(approx[f][0])\n                            ftop = tuple(cnt[cnt[:,:,1].argmin()][0])\n\n                            cv.circle(focusF, ftop, 5, (0,0,255), -1)\n                            cv.line(focusF, start, end, (0,255,0), 2)\n                            cv.circle(focusF, centroid, 3, (0,255,255), -1)\n\n                            pauseT(focusF, fingerT, ftop)\n                            if p == True:\n                                fingerP.append(ftop)\n                                cv.putText(frame, ""Tracking ON"", (10, 90), cv.FONT_HERSHEY_SIMPLEX, 0.5, (182,31,102), 2)\n                            else:\n                                cv.putText(frame, ""Tracking OFF"", (10, 90), cv.FONT_HERSHEY_SIMPLEX, 0.5, (182,31,102), 2)\n                    else:\n                       cv.putText(frame, ""Can\'t detect anything"", (10, 70), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,150), 2) \n                else:\n                    cv.putText(frame, ""Press \'s\' to start"", (10, 70), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,150), 2)\n        except:\n            cv.putText(frame, ""Put your hand in the frame"", (10, 70), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,255), 2)\n        \n        points(focusF, fingerP)\n        cv.imshow(\'Finger Detection\', frame)\n\n        k = cv.waitKey(1) & 0xff\n        if k  == ord(\'s\'):\n            st = not st\n        elif k == ord(\'p\'):\n            p = not p\n        elif k == ord(\'c\'):\n            fingerP.clear()\n        elif k == ord(\'q\'):\n            break\n\ncap.release()\ncv.destroyAllWindows()\n'"
