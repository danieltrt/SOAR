file_path,api_count,code
NP-Demo.py,8,"b""import numpy as np \ninputs = np.array([[1, 0, 1], [0, 0, 1], [1, 1, 1], [0,0,0]])\noutputs = np.array([[1],[0],[1],[0]])\nnp.random.seed(1)\nweights = 2 * np.random.random((3, 1))\ndef sigmoid(x, deriv=False):\n\tif(deriv==True):\n\t\treturn x*(1-x)\n\treturn 1/(1+np.exp(-x))\nprint('training...')\nfor i in range(60000):\n\tpred = sigmoid(np.dot(inputs, weights))\n\terror = pred- outputs\n\tadjustments = np.dot(inputs.T, error* sigmoid(pred, deriv=True))\n\tweights -= adjustments\nprint('Your neural network has finished training!. Let us test this...')\nprint('Considering New situation ->> [1, 1, 0]')\noutput_for_test = sigmoid(np.dot(np.array([1,1,0]), weights))\nprint('predicting..')\nprint(output_for_test) \n"""
TF-Demo.py,2,"b'#Import dependencies\nimport tensorflow as tf \nimport numpy as np \n#Data\nx_data = np.array([[1., 0., 1.], [0., 0., 1.], [1., 1., 1.], [0.,0.,0.]])\ny_data = np.array([[1.],[0.],[1.],[0.]])\nweights = tf.Variable(tf.random_uniform([3, 1], -1, 1)) \nX = tf.placeholder(tf.float32, shape = (4,3))\ny = tf.nn.sigmoid(tf.matmul(X, weights))\ny_ = tf.placeholder(tf.float32, shape=(4, 1))\nloss = tf.reduce_mean(tf.square(y-y_)) #Error\n#Gradient descent to get the cost corrected!\noptimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)\nsess = tf.Session() #Launch the graph\nsess.run(tf.initialize_all_variables())\nfor i in range(2000):\n\tsess.run(optimizer, feed_dict={X:x_data, y_:y_data})\n\tprint(""Loss\\n"", sess.run(loss, feed_dict={X:x_data, y_:y_data}))\n\tprint(""Predictions\\n"", sess.run(y, feed_dict ={X:x_data}))\n'"
