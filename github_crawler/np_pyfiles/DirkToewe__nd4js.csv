file_path,api_count,code
src/io/npy_test_data.py,4,"b'\'\'\'\nThis file is part of ND.JS.\n\nND.JS is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nND.JS is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with ND.JS. If not, see <http://www.gnu.org/licenses/>.\n\'\'\'\n\nimport base64, io, numpy as np\n\n\ndef main():\n\n  def shapes():\n    yield tuple()\n    for l in range(1,4):\n      yield l,\n      for m in range(1,4):\n        yield l,m\n        for n in range(1,4):\n          yield l,m,n\n\n  def test_cases():\n\n    for shape in shapes():\n      for dtype in [\'<i4\',\'>i4\',\'<f4\',\'>f4\',\'<f8\',\'>f8\',\'<c16\',\'>c16\']:\n        jstype = {\n          \'i4\' :      \'int32\',\n          \'f4\' :    \'float32\',\n          \'f8\' :    \'float64\',\n          \'c16\': \'complex128\'\n        }[dtype[1:]]\n    \n        for f_order in [False, True]:\n          a = np.random.uniform(-1e3,+1e3,shape)\n          if dtype[1] == \'c\':\n            a = a + 1j * np.random.uniform(-1e3,+1e3,shape)\n    \n          a = a.astype(dtype)\n          if f_order and shape != ():\n            a = np.asfortranarray(a)\n    \n          with io.BytesIO() as bytes:\n            np.save(bytes, a)\n            bytes.seek(0)\n            bytes = bytes.read()\n            bytes = base64.encodebytes(bytes).decode(\'ASCII\').replace(\'\\n\',\'\')\n    \n          toStr = str\n          if dtype[1] == \'c\':\n            toStr = lambda x: \'new Complex(%s,%s)\' % (x.real,x.imag)\n    \n          string = \'\'\'\n            new NDArray( Int32Array.of({SHAPE}), ARRAY_TYPES[""{DTYPE}""].of({DATA}) )\n          \'\'\'.format(\n            SHAPE = \',\'.join(   str(s) for s in shape ),\n            DTYPE = jstype,\n            DATA  = \',\'.join( toStr(d) for d in a.flatten() )\n          ).strip()\n    \n          yield bytes,string\n\n  with open(\'./npy_test_data.js\', mode=\'w\') as out:\n    out.write(\'\'\'\n\'use strict\';\n\n/* This file is part of ND.JS.\n *\n * ND.JS is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ND.JS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ND.JS. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {NDArray} from \'../nd_array\'\nimport {ARRAY_TYPES, Complex} from \'../dt\'\n\n\nexport function* npy_test_data()\n{\n\'\'\')\n\n    for bytes,string in test_cases():\n      out.write(\'  yield [""%s"",\\n         %s]\\n\' % (bytes,string))\n\n    out.write(\'}\\n\')\n\n\nif \'__main__\' == __name__:\n  main()\n'"
src/la/pldlp_test_data.py,4,"b'\'\'\'\nThis file is part of ND.JS.\n\nND.JS is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nND.JS is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with ND.JS. If not, see <http://www.gnu.org/licenses/>.\n\'\'\'\n\nimport numpy as np, base64, io, scipy as sci, scipy.linalg as la\n\n\ndef to_b64( A ):\n  with io.BytesIO() as bytes:\n    assert A.dtype != \'<i8\'\n    np.save(bytes, A, allow_pickle=False)\n    bytes.seek(0)\n    bytes = bytes.read()\n    return base64.encodebytes(bytes).decode(\'ASCII\').replace(\'\\n\',\'\')\n\n\ndef main():\n  print(""import {b64_decode_gen}  from \'../io/b64\'"")\n  print(""import {npy_deserialize} from \'../io/npy\'"")\n  print()\n  print()\n  print(\'export function* pldlp_decomp_test_data()\')\n  print(\'{\')\n\n  for n in range(1,17):\n    for repeat in range(16):\n      A = np.random.rand(n,n)*4 - 2\n      A = (A + A.T) / 2\n\n      L,D,P = la.ldl(A)\n      L = L[P,:]\n      assert np.all( np.tril(L) == L ), L\n      P = P.astype( np.dtype(\'<i4\', align=False) ) \n\n      if 0 < repeat:\n        print()\n\n      print(\'  yield [\')\n      for a in [A,L,D,P]:\n        print(""    \'%s\',"" % (to_b64(a),))\n      print(\'  ].map(b64_decode_gen).map(npy_deserialize);\')\n\n  print(\'}\')\n\n\nif \'__main__\' == __name__:\n  main()\n\n'"
src/opt/_trust_region_solver_test_data.py,3,"b""'''\nThis file is part of ND4JS.\n\nND4JS is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nND4JS is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with ND4JS. If not, see <http://www.gnu.org/licenses/>.\n'''\n\n# This module generates test cases for `_trust_region_solver_test.js`.\n\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.linalg as tfla\n\n\ndef solve_test_case( J, f ):\n  assert J.ndim == 2\n  assert f.ndim == 2\n\n  assert J.shape[0] == f.shape[0]\n  assert         1  == f.shape[1]\n\n  with tf.Graph().as_default():\n    J = tf.constant(name='J', value=J)\n#     JT= tf.transpose(J, name='JT')\n    f = tf.constant(name='f', value=f)\n    d = tf.norm(J, name='d', axis=0)\n    D = tf.diag(d, name='D')\n\n    JD = J / d\n  \n    \xce\xbb = tf.placeholder(name='lambda', dtype=tf.float64, shape=[])\n\n    Dx = tfla.lstsq(JD, -f, l2_regularizer=\xce\xbb)\n  \n    r = tfla.norm(Dx)\n    dr, = tf.gradients(r, \xce\xbb)\n  \n    with tf.Session() as sess:\n      inputs = {\xce\xbb: 0.0}\n      return sess.run([r,dr], feed_dict=inputs)\n\n\ndef generate_test_data():\n  '''\n  Prints to console a JS generator function that yields a series of\n  test cases for TrustRegionSolverLSQ.prototype.computeMinGlobal(0).\n  '''\n  np.random.seed(1337)\n\n  overdet = []\n  underdet = []\n\n  for m in range(1,17):\n    for n in range(1,17):\n      J = np.random.rand(m,n)*4-2\n      f = np.random.rand(m,1)*4-2\n\n      r,dr = solve_test_case(J,f)\n\n      if m >= n:\n        overdet.append([J,f, r,dr])\n  \n      if m <= n:\n        underdet.append([J,f, r,dr])\n\n  print('\\n'*7)\n\n  print('''export function* computeMinGlobal_overdet_gen()\n{''')\n  for [J,f, r,dr] in overdet:\n    print('''  yield [\n    new NDArray( Int32Array.of({m}),   Float64Array.of({}) ),\n    new NDArray( Int32Array.of({m},{n}), Float64Array.of({}) ),\n    {},\n    {}\n  ];'''.format(\n      ','.join( str(x) for x in f.flatten() ),\n      ','.join( str(x) for x in J.flatten() ),\n      r, dr,\n      m=J.shape[0],\n      n=J.shape[1]\n    ))\n\n  print('''}\n\nexport function* computeMinGlobal_underdet_gen()\n{''')\n  for [J,f, r,dr] in underdet:\n    print('''  yield [\n    new NDArray( Int32Array.of({m}),   Float64Array.of({}) ),\n    new NDArray( Int32Array.of({m},{n}), Float64Array.of({}) ),\n    {},\n    {}\n  ];'''.format(\n      ','.join( str(x) for x in f.flatten() ),\n      ','.join( str(x) for x in J.flatten() ),\n      r, dr,\n      m=J.shape[0],\n      n=J.shape[1]\n    ))\n  print('}')\n\nif __name__ == '__main__':\n  generate_test_data()\n"""
