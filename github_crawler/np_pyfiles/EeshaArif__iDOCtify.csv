file_path,api_count,code
manage.py,0,"b'#!/usr/bin/env python\n""""""Django\'s command-line utility for administrative tasks.""""""\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'IDOCity.settings\')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            ""Couldn\'t import Django. Are you sure it\'s installed and ""\n            ""available on your PYTHONPATH environment variable? Did you ""\n            ""forget to activate a virtual environment?""\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
IDOCity/__init__.py,0,b''
IDOCity/settings.py,0,"b'""""""\nDjango settings for IDOCity project.\n\nGenerated by \'django-admin startproject\' using Django 2.2.5.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/2.2/ref/settings/\n""""""\n#username: EeshaArif\n#password: eesha\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \'1+48ms%4xzk*x-0n)y)8atbw4s_#bkbq9z=ki7ihi4h3^5g#rq\'\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.messages\',\n    \'django.contrib.staticfiles\',\n        # The following apps are required:\n    \'django.contrib.sites\',\n    \'allauth\',\n    \'allauth.account\',\n    \'allauth.socialaccount\',\n\n    \'myapp\',\n    \'crispy_forms\',\n]\nCRISPY_TEMPLATE_PACK = \'bootstrap4\'\n\nMIDDLEWARE = [\n    \'django.middleware.security.SecurityMiddleware\',\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.middleware.csrf.CsrfViewMiddleware\',\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n    \'django.contrib.messages.middleware.MessageMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n]\n\nROOT_URLCONF = \'IDOCity.urls\'\n\nAUTHENTICATION_BACKENDS = (\n    # Needed to login by username in Django admin, regardless of `allauth`\n    \'django.contrib.auth.backends.ModelBackend\',\n\n    # `allauth` specific authentication methods, such as login by e-mail\n    \'allauth.account.auth_backends.AuthenticationBackend\',\n)\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [os.path.join(BASE_DIR, \'templates\')],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.contrib.messages.context_processors.messages\',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'IDOCity.wsgi.application\'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.2/ref/settings/#databases\n\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.sqlite3\',\n        \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.2/topics/i18n/\n\nLANGUAGE_CODE = \'en-us\'\n\nTIME_ZONE = \'Asia/Karachi\'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.2/howto/static-files/\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, ""static""),\n]\nSTATIC_URL = \'/static/\'\nMEDIA_URL = \'/media/\'\nMEDIA_ROOT = os.path.join(BASE_DIR, \'media\')\nSITE_ID = 1\n'"
IDOCity/urls.py,0,"b'""""""IDOCity URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/2.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n""""""\n#username: EeshaArif\n#password: eesha\nfrom django.contrib import admin\nfrom django.urls import path,include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path(\'admin/\', admin.site.urls),\n    path(\'accounts/\', include(\'allauth.urls\')),\n    path(\'\', include(\'myapp.urls\')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n'"
IDOCity/wsgi.py,0,"b'""""""\nWSGI config for IDOCity project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/\n""""""\n#username: EeshaArif\n#password: eesha\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'IDOCity.settings\')\n\napplication = get_wsgi_application()\n'"
myapp/__init__.py,0,b''
myapp/admin.py,0,"b'from django.contrib import admin\nfrom .models import Patient\n# ,Presenting_Complaint_Detail\n# Register your models here.\nadmin.site.register(Patient)\n# admin.site.register(Presenting_Complaint_Detail)\n'"
myapp/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'\n"""
myapp/forms.py,0,"b""from django import forms\nfrom .models import Patient\n#username: EeshaArif\n#password: eesha\nCHOICES=[('male','Male'),\n         ('female','Female'),\n         ('other', 'Other')\n         ]\n\nclass PatientHistory(forms.ModelForm):\n    gender = forms.ChoiceField(choices=CHOICES, widget=forms.RadioSelect())\n    class Meta:\n        model = Patient\n        fields = ['first_name', 'last_name', 'address', 'phone', 'age', 'gender',\n        'email', 'image', 'occupation', 'presenting_complaint','symptom1','symptom2',\n        'symptom3','symptom4','symptom5','past_medical_history','past_surgical_history',\n        'past_drug_history', 'drug_allergy', 'vaccination_history','personal_history',\n        'economic_status']\n"""
myapp/models.py,0,"b""from django.db import models\nfrom django.conf import settings\nfrom django.core.validators import MinValueValidator\n\n\n#username: EeshaArif\n#password: eesha\nclass Patient(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    first_name = models.CharField(max_length = 150)\n    last_name = models.CharField(max_length = 150)\n    address = models.CharField(max_length = 200, default = '')\n    phone = models.CharField(max_length = 20)\n    age = models.IntegerField(default = 0)\n    gender = models.CharField(max_length = 6)\n    email = models.EmailField(default = '')\n    image = models.FileField(upload_to='images/', default = '')\n    occupation = models.CharField(max_length = 100, null = True, blank = True)\n    presenting_complaint = models.TextField(null = True, blank = True)\n\n    #Symptoms/\n    symptom1 = models.CharField(max_length = 50, null = True, blank = True)\n    symptom2 = models.CharField(max_length = 50, null = True, blank = True)\n    symptom3 = models.CharField(max_length = 50, null = True, blank = True)\n    symptom4 = models.CharField(max_length = 50, null = True, blank = True)\n    symptom5 = models.CharField(max_length = 50, null = True, blank = True)\n\n    past_medical_history = models.TextField(null = True, blank = True)\n    past_surgical_history =models.TextField(null = True, blank = True)\n    past_drug_history = models.TextField(null = True, blank = True)\n    drug_allergy = models.TextField(null = True, blank = True)\n    vaccination_history = models.TextField(null = True, blank = True)\n    personal_history = models.TextField(null = True, blank = True)\n    economic_status = models.TextField(null = True, blank = True)\n\n    def __str__(self):\n        return '%s %s' %(self.first_name, self.last_name)\n"""
myapp/tests.py,0,b'from django.test import TestCase\n\n# Create your tests here.\n'
myapp/urls.py,0,"b""from django.urls import path\nfrom django.conf.urls import url, include\nfrom . import views\n#username: EeshaArif\n#password: eesha\nurlpatterns = [\n    path('',views.home, name='home'),\n    url(r'^detect$', views.detect, name='detect'),\n    path('accounts/profile/',views.profile, name='profile'),\n    path('accounts/profile/history',views.patienthistory, name='history'),\n    path('accounts/profile/display', views.search, name = 'display'),\n    path('accounts/profile/display/delete/<int:patient_id>', views.delete_patienthistory, name='delete_history'),\n    path('accounts/profile/display/update/<int:patient_id>', views.update_patienthistory, name='update_history'),\n]\n"""
myapp/views.py,1,"b'from django.shortcuts import render,redirect\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404\nfrom django.urls import reverse\nfrom .models import Patient\nfrom .forms import PatientHistory\nfrom django.db.models import Q\nimport face_recognition\nimport cv2\nimport time\nimport numpy as np\n#username: EeshaArif\n#password: eesha\n#python manage.py runserver\ndef home(request):\n    return render(request,""home.html"")\n\ndef profile(request):\n    return render(request,""profile.html"")\n\n@login_required\ndef patienthistory(request):\n    form = PatientHistory(request.POST or None, request.FILES or None)\n    if form.is_valid():\n        form.instance.user = request.user\n        form.save()\n        return render(request, \'profile.html\')\n\n    context = {\'form\': form}\n    return render(request, \'newpatienthistory.html\', context )\n\n@login_required\ndef delete_patienthistory(request, patient_id):\n    item_to_delete = Patient.objects.filter(pk = patient_id)\n    if item_to_delete.exists():\n        if request.user == item_to_delete[0].user:\n            item_to_delete[0].delete()\n    return redirect(\'/accounts/profile/display\')\n\n@login_required\ndef update_patienthistory(request, patient_id):\n    unique_history = get_object_or_404(Patient, pk = patient_id)\n    form = PatientHistory(request.POST or None, request.FILES or None, instance = unique_history)\n    if form.is_valid():\n        form.instance.user = request.user\n        form.save()\n        return render(request, ""profile.html"")\n\n    context = {\'form\': form}\n    return render(request, \'newpatienthistory.html\', context )\n\n@login_required\n\ndef search(request):\n    if request.method == \'POST\':\n        srch1 = request.POST.get(\'srch1\',False)\n        if srch1:\n            match_patient = Patient.objects.filter(Q(first_name__icontains = srch1)| Q(last_name__icontains = srch1))\n            for x in match_patient:\n                list = [x.symptom1,x.symptom2,x.symptom3,x.symptom4,x.symptom5]\n                list.sort(key=lambda x: x or 0)\n                x.symptom1 = list[0]\n                x.symptom2 = list[1]\n                x.symptom3 = list[2]\n                x.symptom4 = list[3]\n                x.symptom5 = list[4]\n                x.save()\n            if match_patient:\n                return render(request,""display.html"",{\'srch1\': match_patient})\n            else:\n                message = ""No records Found""\n                return render(request, ""display.html"", {\'message\': message})\n        else:\n            return render(request, \'profile.html\')\n    return render(request, \'profile.html\')\n\ndef detect(request):\n        context =  { \'patients\': Patient.objects.all() }\n        Patients=Patient.objects.all()\n        #eesha_image=face_recognition.load_image_file(Eesha.image)\n        video_capture = cv2.VideoCapture(0)\n\n\n        known_face_encodings = []\n        known_face_names = []\n        for patient in Patients:\n            known_face_encodings.append(face_recognition.face_encodings(face_recognition.load_image_file(patient.image))[0])\n            known_face_names.append(patient.first_name)\n\n        face_locations = []\n        face_encodings = []\n        face_names = []\n        process_this_frame = True\n\n        while True:\n          \n            ret, frame = video_capture.read()\n\n            small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)\n            rgb_small_frame = small_frame[:, :, ::-1]\n            name_parts=[]\n            if process_this_frame:\n                face_locations = face_recognition.face_locations(rgb_small_frame)\n                face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)\n\n                face_names = []\n                for face_encoding in face_encodings:\n                    matches = face_recognition.compare_faces(known_face_encodings, face_encoding)\n                    name = ""Unknown""\n                    face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)\n                    best_match_index = np.argmin(face_distances)\n                    if matches[best_match_index]:\n                        name = known_face_names[best_match_index]\n\n\n                    face_names.append(name)\n                  \n\n            process_this_frame = not process_this_frame\n\n\n            # Display the results\n            for (top, right, bottom, left), name in zip(face_locations, face_names):\n                top *= 4\n                right *= 4\n                bottom *= 4\n                left *= 4\n                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)\n\n                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)\n                font = cv2.FONT_HERSHEY_DUPLEX\n                cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)\n                \n            cv2.imshow(\'video\', frame)\n\n\n            if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n                 break\n\n \n        video_capture.release()\n        cv2.destroyAllWindows()\n        if (face_names) and (face_names[0]!=""Unknown"") :\n\n            match_patient=Patient.objects.get(first_name=face_names[0])\n            return render(request,""display.html"",{\'srch\': match_patient})\n \n        \n\n        return redirect(\'/\')\n\n'"
myapp/migrations/0001_initial.py,0,"b""# Generated by Django 2.2.5 on 2019-12-07 12:10\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Patient',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('first_name', models.CharField(max_length=150)),\n                ('last_name', models.CharField(max_length=150)),\n                ('address', models.CharField(blank=True, max_length=200, null=True)),\n                ('phone', models.CharField(max_length=20)),\n                ('age', models.IntegerField()),\n                ('gender', models.CharField(max_length=15)),\n                ('email', models.EmailField(blank=True, max_length=254, null=True)),\n                ('image', models.ImageField(blank=True, null=True, upload_to='')),\n                ('occupation', models.CharField(blank=True, max_length=100, null=True)),\n                ('presenting_complaint', models.TextField(blank=True, null=True)),\n                ('past_medical_history', models.TextField(blank=True, null=True)),\n                ('past_surgical_history', models.TextField(blank=True, null=True)),\n                ('past_drug_history', models.TextField(blank=True, null=True)),\n                ('drug_allergy', models.TextField(blank=True, null=True)),\n                ('vaccination_history', models.TextField(blank=True, null=True)),\n                ('personal_history', models.TextField(blank=True, null=True)),\n                ('economic_status', models.TextField(blank=True, null=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Presenting_Complaint_Detail',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('symptom', models.CharField(max_length=50)),\n                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.Patient')),\n            ],\n        ),\n    ]\n"""
myapp/migrations/0002_delete_presenting_complaint_detail.py,0,"b""# Generated by Django 2.2.5 on 2019-12-07 13:24\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('myapp', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.DeleteModel(\n            name='Presenting_Complaint_Detail',\n        ),\n    ]\n"""
myapp/migrations/0003_auto_20191208_1414.py,0,"b""# Generated by Django 2.2.5 on 2019-12-08 09:14\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('myapp', '0002_delete_presenting_complaint_detail'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='image',\n            field=models.ImageField(blank=True, null=True, upload_to='static/upload_image/'),\n        ),\n    ]\n"""
myapp/migrations/0004_auto_20191208_1456.py,0,"b""# Generated by Django 2.2.5 on 2019-12-08 09:56\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('myapp', '0003_auto_20191208_1414'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='image',\n            field=models.FileField(blank=True, null=True, upload_to=''),\n        ),\n    ]\n"""
myapp/migrations/0005_auto_20191208_1516.py,0,"b""# Generated by Django 2.2.5 on 2019-12-08 10:16\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('myapp', '0004_auto_20191208_1456'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='image',\n            field=models.FileField(blank=True, null=True, upload_to='images/'),\n        ),\n    ]\n"""
myapp/migrations/0006_auto_20191216_2339.py,0,"b""# Generated by Django 2.2.5 on 2019-12-16 18:39\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('myapp', '0005_auto_20191208_1516'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='patient',\n            name='symptom1',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),\n        migrations.AddField(\n            model_name='patient',\n            name='symptom2',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),\n        migrations.AddField(\n            model_name='patient',\n            name='symptom3',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),\n        migrations.AddField(\n            model_name='patient',\n            name='symptom4',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),\n        migrations.AddField(\n            model_name='patient',\n            name='symptom5',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),\n        migrations.AlterField(\n            model_name='patient',\n            name='address',\n            field=models.CharField(default='', max_length=200),\n        ),\n        migrations.AlterField(\n            model_name='patient',\n            name='age',\n            field=models.IntegerField(default=0),\n        ),\n        migrations.AlterField(\n            model_name='patient',\n            name='email',\n            field=models.EmailField(default='', max_length=254),\n        ),\n        migrations.AlterField(\n            model_name='patient',\n            name='gender',\n            field=models.CharField(max_length=6),\n        ),\n        migrations.AlterField(\n            model_name='patient',\n            name='image',\n            field=models.FileField(default='', upload_to='images/'),\n        ),\n    ]\n"""
myapp/migrations/__init__.py,0,b''
static/ionicons-2.0.1/builder/generate.py,0,"b'from subprocess import call\nimport os\nimport json\n\n\nBUILDER_PATH = os.path.dirname(os.path.abspath(__file__))\nROOT_PATH = os.path.join(BUILDER_PATH, \'..\')\nFONTS_FOLDER_PATH = os.path.join(ROOT_PATH, \'fonts\')\nCSS_FOLDER_PATH = os.path.join(ROOT_PATH, \'css\')\nSCSS_FOLDER_PATH = os.path.join(ROOT_PATH, \'scss\')\nLESS_FOLDER_PATH = os.path.join(ROOT_PATH, \'less\')\n\n\ndef main():\n  generate_font_files()\n\n  data = get_build_data()\n\n  rename_svg_glyph_names(data)\n  generate_scss(data)\n  generate_less(data)\n  generate_cheatsheet(data)\n  generate_component_json(data)\n  generate_composer_json(data)\n  generate_bower_json(data)\n\n\ndef generate_font_files():\n  print ""Generate Fonts""\n  cmd = ""fontforge -script %s/scripts/generate_font.py"" % (BUILDER_PATH)\n  call(cmd, shell=True)\n\n\ndef rename_svg_glyph_names(data):\n  # hacky and slow (but safe) way to rename glyph-name attributes\n  svg_path = os.path.join(FONTS_FOLDER_PATH, \'ionicons.svg\')\n  svg_file = open(svg_path, \'r+\')\n  svg_text = svg_file.read()\n  svg_file.seek(0)\n\n  for ionicon in data[\'icons\']:\n    # uniF2CA\n    org_name = \'uni%s\' % (ionicon[\'code\'].replace(\'0x\', \'\').upper())\n    ion_name = \'ion-%s\' % (ionicon[\'name\'])\n    svg_text = svg_text.replace(org_name, ion_name)\n\n  svg_file.write(svg_text)\n  svg_file.close()\n\n\ndef generate_less(data):\n  print ""Generate LESS""\n  font_name = data[\'name\']\n  font_version = data[\'version\']\n  css_prefix = data[\'prefix\']\n  variables_file_path = os.path.join(LESS_FOLDER_PATH, \'_ionicons-variables.less\')\n  icons_file_path = os.path.join(LESS_FOLDER_PATH, \'_ionicons-icons.less\')\n\n  d = []\n  d.append(\'/*!\');\n  d.append(\'Ionicons, v%s\' % (font_version) );\n  d.append(\'Created by Ben Sperry for the Ionic Framework, http://ionicons.com/\');\n  d.append(\'https://twitter.com/benjsperry  https://twitter.com/ionicframework\');\n  d.append(\'MIT License: https://github.com/driftyco/ionicons\');\n  d.append(\'*/\');\n  d.append(\'// Ionicons Variables\')\n  d.append(\'// --------------------------\\n\')\n  d.append(\'@ionicons-font-path: ""../fonts"";\')\n  d.append(\'@ionicons-font-family: ""%s"";\' % (font_name) )\n  d.append(\'@ionicons-version: ""%s"";\' % (font_version) )\n  d.append(\'@ionicons-prefix: %s;\' % (css_prefix) )\n  d.append(\'\')\n  for ionicon in data[\'icons\']:\n    chr_code = ionicon[\'code\'].replace(\'0x\', \'\\\\\')\n    d.append(\'@ionicon-var-%s: ""%s"";\' % (ionicon[\'name\'], chr_code) )\n  f = open(variables_file_path, \'w\')\n  f.write( \'\\n\'.join(d) )\n  f.close()\n\n  d = []\n  d.append(\'// Ionicons Icons\')\n  d.append(\'// --------------------------\\n\')\n\n  group = [ \'.%s\' % (data[\'name\'].lower()) ]\n  for ionicon in data[\'icons\']:\n    group.append(\'.@{ionicons-prefix}%s:before\' % (ionicon[\'name\']) )\n\n  d.append( \',\\n\'.join(group) )\n\n  d.append(\'{\')\n  d.append(\'  &:extend(.ion);\')\n  d.append(\'}\')\n\n  for ionicon in data[\'icons\']:\n    chr_code = ionicon[\'code\'].replace(\'0x\', \'\\\\\')\n    d.append(\'.@{ionicons-prefix}%s:before { content: @ionicon-var-%s; }\' % (ionicon[\'name\'], ionicon[\'name\']) )\n\n  f = open(icons_file_path, \'w\')\n  f.write( \'\\n\'.join(d) )\n  f.close()\n\n\ndef generate_scss(data):\n  print ""Generate SCSS""\n  font_name = data[\'name\']\n  font_version = data[\'version\']\n  css_prefix = data[\'prefix\']\n  variables_file_path = os.path.join(SCSS_FOLDER_PATH, \'_ionicons-variables.scss\')\n  icons_file_path = os.path.join(SCSS_FOLDER_PATH, \'_ionicons-icons.scss\')\n\n  d = []\n  d.append(\'// Ionicons Variables\')\n  d.append(\'// --------------------------\\n\')\n  d.append(\'$ionicons-font-path: ""../fonts"" !default;\')\n  d.append(\'$ionicons-font-family: ""%s"" !default;\' % (font_name) )\n  d.append(\'$ionicons-version: ""%s"" !default;\' % (font_version) )\n  d.append(\'$ionicons-prefix: %s !default;\' % (css_prefix) )\n  d.append(\'\')\n  for ionicon in data[\'icons\']:\n    chr_code = ionicon[\'code\'].replace(\'0x\', \'\\\\\')\n    d.append(\'$ionicon-var-%s: ""%s"";\' % (ionicon[\'name\'], chr_code) )\n  f = open(variables_file_path, \'w\')\n  f.write( \'\\n\'.join(d) )\n  f.close()\n\n  d = []\n  d.append(\'// Ionicons Icons\')\n  d.append(\'// --------------------------\\n\')\n\n  group = [ \'.%s\' % (data[\'name\'].lower()) ]\n  for ionicon in data[\'icons\']:\n    group.append(\'.#{$ionicons-prefix}%s:before\' % (ionicon[\'name\']) )\n\n  d.append( \',\\n\'.join(group) )\n\n  d.append(\'{\')\n  d.append(\'  @extend .ion;\')\n  d.append(\'}\')\n\n  for ionicon in data[\'icons\']:\n    chr_code = ionicon[\'code\'].replace(\'0x\', \'\\\\\')\n    d.append(\'.#{$ionicons-prefix}%s:before { content: $ionicon-var-%s; }\' % (ionicon[\'name\'], ionicon[\'name\']) )\n\n  f = open(icons_file_path, \'w\')\n  f.write( \'\\n\'.join(d) )\n  f.close()\n\n  generate_css_from_scss(data)\n\n\ndef generate_css_from_scss(data):\n  print ""Generate CSS From SCSS""\n\n  scss_file_path = os.path.join(SCSS_FOLDER_PATH, \'ionicons.scss\')\n  css_file_path = os.path.join(CSS_FOLDER_PATH, \'ionicons.css\')\n  css_min_file_path = os.path.join(CSS_FOLDER_PATH, \'ionicons.min.css\')\n\n  cmd = ""sass %s %s --style compact"" % (scss_file_path, css_file_path)\n  call(cmd, shell=True)\n\n  print ""Generate Minified CSS From SCSS""\n  cmd = ""sass %s %s --style compressed"" % (scss_file_path, css_min_file_path)\n  call(cmd, shell=True)\n\n\ndef generate_cheatsheet(data):\n  print ""Generate Cheatsheet""\n\n  cheatsheet_file_path = os.path.join(ROOT_PATH, \'cheatsheet.html\')\n  template_path = os.path.join(BUILDER_PATH, \'cheatsheet\', \'template.html\')\n  icon_row_path = os.path.join(BUILDER_PATH, \'cheatsheet\', \'icon-row.html\')\n\n  f = open(template_path, \'r\')\n  template_html = f.read()\n  f.close()\n\n  f = open(icon_row_path, \'r\')\n  icon_row_template = f.read()\n  f.close()\n\n  content = []\n\n  for ionicon in data[\'icons\']:\n    css_code = ionicon[\'code\'].replace(\'0x\', \'\\\\\')\n    escaped_html_code = ionicon[\'code\'].replace(\'0x\', \'&amp;#x\') + \';\'\n    html_code = ionicon[\'code\'].replace(\'0x\', \'&#x\') + \';\'\n    item_row = icon_row_template\n\n    item_row = item_row.replace(\'{{name}}\', ionicon[\'name\'])\n    item_row = item_row.replace(\'{{prefix}}\', data[\'prefix\'])\n    item_row = item_row.replace(\'{{css_code}}\', css_code)\n    item_row = item_row.replace(\'{{escaped_html_code}}\', escaped_html_code)\n    item_row = item_row.replace(\'{{html_code}}\', html_code)\n\n    content.append(item_row)\n\n  template_html = template_html.replace(""{{font_name}}"", data[""name""])\n  template_html = template_html.replace(""{{font_version}}"", data[""version""])\n  template_html = template_html.replace(""{{icon_count}}"", str(len(data[""icons""])) )\n  template_html = template_html.replace(""{{content}}"", \'\\n\'.join(content) )\n\n  f = open(cheatsheet_file_path, \'w\')\n  f.write(template_html)\n  f.close()\n\n\ndef generate_component_json(data):\n  print ""Generate component.json""\n  d = {\n    ""name"": data[\'name\'],\n    ""repo"": ""driftyco/ionicons"",\n    ""description"": ""The premium icon font for Ionic Framework."",\n    ""version"": data[\'version\'],\n    ""keywords"": [],\n    ""dependencies"": {},\n    ""development"": {},\n    ""license"": ""MIT"",\n    ""styles"": [\n      ""css/%s.css"" % (data[\'name\'].lower())\n    ],\n    ""fonts"": [\n      ""fonts/%s.eot"" % (data[\'name\'].lower()),\n      ""fonts/%s.svg"" % (data[\'name\'].lower()),\n      ""fonts/%s.ttf"" % (data[\'name\'].lower()),\n      ""fonts/%s.woff"" % (data[\'name\'].lower())\n    ]\n  }\n  txt = json.dumps(d, indent=4, separators=(\',\', \': \'))\n\n  component_file_path = os.path.join(ROOT_PATH, \'component.json\')\n  f = open(component_file_path, \'w\')\n  f.write(txt)\n  f.close()\n\n\ndef generate_composer_json(data):\n  print ""Generate composer.json""\n  d = {\n    ""name"": ""driftyco/ionicons"",\n    ""description"": ""The premium icon font for Ionic Framework."",\n    ""keywords"": [ ""fonts"", ""icon font"", ""icons"", ""ionic"", ""web font""],\n    ""homepage"": ""http://ionicons.com/"",\n    ""authors"": [\n      {\n        ""name"": ""Ben Sperry"",\n        ""email"": ""ben@drifty.com"",\n        ""role"": ""Designer"",\n        ""homepage"": ""https://twitter.com/benjsperry""\n      },\n      {\n        ""name"": ""Adam Bradley"",\n        ""email"": ""adam@drifty.com"",\n        ""role"": ""Developer"",\n        ""homepage"": ""https://twitter.com/adamdbradley""\n      },\n      {\n        ""name"": ""Max Lynch"",\n        ""email"": ""max@drifty.com"",\n        ""role"": ""Developer"",\n        ""homepage"": ""https://twitter.com/maxlynch""\n      }\n    ],\n    ""extra"": {},\n    ""license"": [ ""MIT"" ]\n  }\n  txt = json.dumps(d, indent=4, separators=(\',\', \': \'))\n\n  composer_file_path = os.path.join(ROOT_PATH, \'composer.json\')\n  f = open(composer_file_path, \'w\')\n  f.write(txt)\n  f.close()\n\n\ndef generate_bower_json(data):\n  print ""Generate bower.json""\n  d = {\n    ""name"": data[\'name\'],\n    ""version"": data[\'version\'],\n    ""homepage"": ""https://github.com/driftyco/ionicons"",\n    ""authors"": [\n      ""Ben Sperry <ben@drifty.com>"",\n      ""Adam Bradley <adam@drifty.com>"",\n      ""Max Lynch <max@drifty.com>""\n    ],\n    ""description"": ""Ionicons - free and beautiful icons from the creators of Ionic Framework"",\n    ""main"": [\n      ""css/%s.css"" % (data[\'name\'].lower()),\n      ""fonts/*""\n    ],\n    ""keywords"": [ ""fonts"", ""icon font"", ""icons"", ""ionic"", ""web font""],\n    ""license"": ""MIT"",\n    ""ignore"": [\n      ""**/.*"",\n      ""builder"",\n      ""node_modules"",\n      ""bower_components"",\n      ""test"",\n      ""tests""\n    ]\n  }\n  txt = json.dumps(d, indent=4, separators=(\',\', \': \'))\n\n  bower_file_path = os.path.join(ROOT_PATH, \'bower.json\')\n  f = open(bower_file_path, \'w\')\n  f.write(txt)\n  f.close()\n\n\ndef get_build_data():\n  build_data_path = os.path.join(BUILDER_PATH, \'build_data.json\')\n  f = open(build_data_path, \'r\')\n  data = json.loads(f.read())\n  f.close()\n  return data\n\n\nif __name__ == ""__main__"":\n  main()\n'"
static/ionicons-2.0.1/builder/scripts/eotlitetool.py,0,"b'#!/usr/bin/env python\n# ***** BEGIN LICENSE BLOCK *****\n# Version: MPL 1.1/GPL 2.0/LGPL 2.1\n#\n# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the ""License""); you may not use this file except in compliance with\n# the License. You may obtain a copy of the License at\n# http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an ""AS IS"" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n# for the specific language governing rights and limitations under the\n# License.\n#\n# The Original Code is font utility code.\n#\n# The Initial Developer of the Original Code is Mozilla Corporation.\n# Portions created by the Initial Developer are Copyright (C) 2009\n# the Initial Developer. All Rights Reserved.\n#\n# Contributor(s):\n#   John Daggett <jdaggett@mozilla.com>\n#\n# Alternatively, the contents of this file may be used under the terms of\n# either the GNU General Public License Version 2 or later (the ""GPL""), or\n# the GNU Lesser General Public License Version 2.1 or later (the ""LGPL""),\n# in which case the provisions of the GPL or the LGPL are applicable instead\n# of those above. If you wish to allow use of your version of this file only\n# under the terms of either the GPL or the LGPL, and not to allow others to\n# use your version of this file under the terms of the MPL, indicate your\n# decision by deleting the provisions above and replace them with the notice\n# and other provisions required by the GPL or the LGPL. If you do not delete\n# the provisions above, a recipient may use your version of this file under\n# the terms of any one of the MPL, the GPL or the LGPL.\n#\n# ***** END LICENSE BLOCK ***** */\n\n# eotlitetool.py - create EOT version of OpenType font for use with IE\n#\n# Usage: eotlitetool.py [-o output-filename] font1 [font2 ...]\n#\n\n# OpenType file structure\n# http://www.microsoft.com/typography/otspec/otff.htm\n# \n# Types:\n# \n# BYTE            8-bit unsigned integer.\n# CHAR            8-bit signed integer.\n# USHORT          16-bit unsigned integer.\n# SHORT           16-bit signed integer.\n# ULONG           32-bit unsigned integer.\n# Fixed           32-bit signed fixed-point number (16.16)\n# LONGDATETIME    Date represented in number of seconds since 12:00 midnight, January 1, 1904. The value is represented as a signed 64-bit integer.\n# \n# SFNT Header\n# \n# Fixed   sfnt version         // 0x00010000 for version 1.0.\n# USHORT  numTables            // Number of tables.\n# USHORT  searchRange          // (Maximum power of 2 <= numTables) x 16.\n# USHORT  entrySelector        // Log2(maximum power of 2 <= numTables).\n# USHORT  rangeShift           // NumTables x 16-searchRange.\n# \n# Table Directory\n# \n# ULONG   tag                  // 4-byte identifier.\n# ULONG   checkSum             // CheckSum for this table.\n# ULONG   offset               // Offset from beginning of TrueType font file.\n# ULONG   length               // Length of this table.\n# \n# OS/2 Table (Version 4)\n# \n# USHORT  version              // 0x0004\n# SHORT   xAvgCharWidth \n# USHORT  usWeightClass    \n# USHORT  usWidthClass     \n# USHORT  fsType   \n# SHORT   ySubscriptXSize      \n# SHORT   ySubscriptYSize      \n# SHORT   ySubscriptXOffset    \n# SHORT   ySubscriptYOffset    \n# SHORT   ySuperscriptXSize    \n# SHORT   ySuperscriptYSize    \n# SHORT   ySuperscriptXOffset      \n# SHORT   ySuperscriptYOffset      \n# SHORT   yStrikeoutSize   \n# SHORT   yStrikeoutPosition   \n# SHORT   sFamilyClass     \n# BYTE    panose[10]   \n# ULONG   ulUnicodeRange1      // Bits 0-31\n# ULONG   ulUnicodeRange2      // Bits 32-63\n# ULONG   ulUnicodeRange3      // Bits 64-95\n# ULONG   ulUnicodeRange4      // Bits 96-127\n# CHAR    achVendID[4]     \n# USHORT  fsSelection      \n# USHORT  usFirstCharIndex     \n# USHORT  usLastCharIndex      \n# SHORT   sTypoAscender    \n# SHORT   sTypoDescender   \n# SHORT   sTypoLineGap     \n# USHORT  usWinAscent      \n# USHORT  usWinDescent     \n# ULONG   ulCodePageRange1      // Bits 0-31\n# ULONG   ulCodePageRange2      // Bits 32-63\n# SHORT   sxHeight     \n# SHORT   sCapHeight   \n# USHORT  usDefaultChar    \n# USHORT  usBreakChar      \n# USHORT  usMaxContext     \n# \n# \n# The Naming Table is organized as follows:\n# \n# [name table header]\n# [name records]\n# [string data]\n# \n# Name Table Header\n# \n# USHORT  format               // Format selector (=0).\n# USHORT  count                // Number of name records.\n# USHORT  stringOffset         // Offset to start of string storage (from start of table).\n# \n# Name Record\n# \n# USHORT  platformID           // Platform ID.\n# USHORT  encodingID           // Platform-specific encoding ID.\n# USHORT  languageID           // Language ID.\n# USHORT  nameID               // Name ID.\n# USHORT  length               // String length (in bytes).\n# USHORT  offset               // String offset from start of storage area (in bytes).\n# \n# head Table\n# \n# Fixed   tableVersion         // Table version number     0x00010000 for version 1.0.\n# Fixed   fontRevision         // Set by font manufacturer.\n# ULONG   checkSumAdjustment   // To compute: set it to 0, sum the entire font as ULONG, then store 0xB1B0AFBA - sum.\n# ULONG   magicNumber          // Set to 0x5F0F3CF5.\n# USHORT  flags   \n# USHORT  unitsPerEm           // Valid range is from 16 to 16384. This value should be a power of 2 for fonts that have TrueType outlines.\n# LONGDATETIME    created      // Number of seconds since 12:00 midnight, January 1, 1904. 64-bit integer\n# LONGDATETIME    modified     // Number of seconds since 12:00 midnight, January 1, 1904. 64-bit integer\n# SHORT   xMin                 // For all glyph bounding boxes.\n# SHORT   yMin    \n# SHORT   xMax    \n# SHORT   yMax    \n# USHORT  macStyle\n# USHORT  lowestRecPPEM        // Smallest readable size in pixels.\n# SHORT   fontDirectionHint\n# SHORT   indexToLocFormat     // 0 for short offsets, 1 for long.\n# SHORT   glyphDataFormat      // 0 for current format.\n# \n# \n# \n# Embedded OpenType (EOT) file format\n# http://www.w3.org/Submission/EOT/\n# \n# EOT version 0x00020001\n# \n# An EOT font consists of a header with the original OpenType font\n# appended at the end.  Most of the data in the EOT header is simply a\n# copy of data from specific tables within the font data.  The exceptions\n# are the \'Flags\' field and the root string name field.  The root string\n# is a set of names indicating domains for which the font data can be\n# used.  A null root string implies the font data can be used anywhere.\n# The EOT header is in little-endian byte order but the font data remains\n# in big-endian order as specified by the OpenType spec.\n# \n# Overall structure:\n# \n#   [EOT header]\n#   [EOT name records]\n#   [font data]\n# \n# EOT header\n# \n# ULONG   eotSize              // Total structure length in bytes (including string and font data)\n# ULONG   fontDataSize         // Length of the OpenType font (FontData) in bytes\n# ULONG   version              // Version number of this format - 0x00020001\n# ULONG   flags                // Processing Flags (0 == no special processing)\n# BYTE    fontPANOSE[10]       // OS/2 Table panose\n# BYTE    charset              // DEFAULT_CHARSET (0x01)\n# BYTE    italic               // 0x01 if ITALIC in OS/2 Table fsSelection is set, 0 otherwise\n# ULONG   weight               // OS/2 Table usWeightClass\n# USHORT  fsType               // OS/2 Table fsType (specifies embedding permission flags)\n# USHORT  magicNumber          // Magic number for EOT file - 0x504C.\n# ULONG   unicodeRange1        // OS/2 Table ulUnicodeRange1\n# ULONG   unicodeRange2        // OS/2 Table ulUnicodeRange2\n# ULONG   unicodeRange3        // OS/2 Table ulUnicodeRange3\n# ULONG   unicodeRange4        // OS/2 Table ulUnicodeRange4\n# ULONG   codePageRange1       // OS/2 Table ulCodePageRange1\n# ULONG   codePageRange2       // OS/2 Table ulCodePageRange2\n# ULONG   checkSumAdjustment   // head Table CheckSumAdjustment\n# ULONG   reserved[4]          // Reserved - must be 0\n# USHORT  padding1             // Padding - must be 0\n# \n# EOT name records\n# \n# USHORT  FamilyNameSize       // Font family name size in bytes\n# BYTE    FamilyName[FamilyNameSize] // Font family name (name ID = 1), little-endian UTF-16\n# USHORT  Padding2             // Padding - must be 0\n# \n# USHORT  StyleNameSize        // Style name size in bytes\n# BYTE    StyleName[StyleNameSize]  // Style name (name ID = 2), little-endian UTF-16\n# USHORT  Padding3             // Padding - must be 0\n# \n# USHORT  VersionNameSize      // Version name size in bytes\n# bytes   VersionName[VersionNameSize]  // Version name (name ID = 5), little-endian UTF-16\n# USHORT  Padding4             // Padding - must be 0\n# \n# USHORT  FullNameSize         // Full name size in bytes\n# BYTE    FullName[FullNameSize]  // Full name (name ID = 4), little-endian UTF-16\n# USHORT  Padding5             // Padding - must be 0\n# \n# USHORT  RootStringSize       // Root string size in bytes\n# BYTE    RootString[RootStringSize]  // Root string, little-endian UTF-16\n\n\n\nimport optparse\nimport struct\n\nclass FontError(Exception):\n    """"""Error related to font handling""""""\n    pass\n\ndef multichar(str):\n    vals = struct.unpack(\'4B\', str[:4])\n    return (vals[0] << 24) + (vals[1] << 16) + (vals[2] << 8) + vals[3]\n\ndef multicharval(v):\n    return struct.pack(\'4B\', (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF)\n\nclass EOT:\n    EOT_VERSION = 0x00020001\n    EOT_MAGIC_NUMBER = 0x504c\n    EOT_DEFAULT_CHARSET = 0x01\n    EOT_FAMILY_NAME_INDEX = 0    # order of names in variable portion of EOT header\n    EOT_STYLE_NAME_INDEX = 1\n    EOT_VERSION_NAME_INDEX = 2\n    EOT_FULL_NAME_INDEX = 3\n    EOT_NUM_NAMES = 4\n    \n    EOT_HEADER_PACK = \'<4L10B2BL2H7L18x\'\n\nclass OpenType:\n    SFNT_CFF = multichar(\'OTTO\')            # Postscript CFF SFNT version\n    SFNT_TRUE = 0x10000                     # Standard TrueType version\n    SFNT_APPLE = multichar(\'true\')          # Apple TrueType version\n    \n    SFNT_UNPACK = \'>I4H\'\n    TABLE_DIR_UNPACK = \'>4I\'\n    \n    TABLE_HEAD = multichar(\'head\')          # TrueType table tags\n    TABLE_NAME = multichar(\'name\')\n    TABLE_OS2 = multichar(\'OS/2\')\n    TABLE_GLYF = multichar(\'glyf\')\n    TABLE_CFF = multichar(\'CFF \')\n    \n    OS2_FSSELECTION_ITALIC = 0x1\n    OS2_UNPACK = \'>4xH2xH22x10B4L4xH14x2L\'\n    \n    HEAD_UNPACK = \'>8xL\'\n    \n    NAME_RECORD_UNPACK = \'>6H\'\n    NAME_ID_FAMILY = 1\n    NAME_ID_STYLE = 2\n    NAME_ID_UNIQUE = 3\n    NAME_ID_FULL = 4\n    NAME_ID_VERSION = 5\n    NAME_ID_POSTSCRIPT = 6\n    PLATFORM_ID_UNICODE = 0                 # Mac OS uses this typically\n    PLATFORM_ID_MICROSOFT = 3\n    ENCODING_ID_MICROSOFT_UNICODEBMP = 1    # with Microsoft platformID BMP-only Unicode encoding\n    LANG_ID_MICROSOFT_EN_US = 0x0409         # with Microsoft platformID EN US lang code\n\ndef eotname(ttf):\n    i = ttf.rfind(\'.\')\n    if i != -1:\n        ttf = ttf[:i]\n    return ttf + \'.eotlite\'\n\ndef readfont(f):\n    data = open(f, \'rb\').read()\n    return data\n\ndef get_table_directory(data):\n    """"""read the SFNT header and table directory""""""\n    datalen = len(data)\n    sfntsize = struct.calcsize(OpenType.SFNT_UNPACK)\n    if sfntsize > datalen:\n        raise FontError, \'truncated font data\'\n    sfntvers, numTables = struct.unpack(OpenType.SFNT_UNPACK, data[:sfntsize])[:2]\n    if sfntvers != OpenType.SFNT_CFF and sfntvers != OpenType.SFNT_TRUE:\n        raise FontError, \'invalid font type\';\n    \n    font = {}\n    font[\'version\'] = sfntvers\n    font[\'numTables\'] = numTables\n    \n    # create set of offsets, lengths for tables\n    table_dir_size = struct.calcsize(OpenType.TABLE_DIR_UNPACK)\n    if sfntsize + table_dir_size * numTables > datalen:\n        raise FontError, \'truncated font data, table directory extends past end of data\'\n    table_dir = {}\n    for i in range(0, numTables):\n        start = sfntsize + i * table_dir_size\n        end = start + table_dir_size\n        tag, check, bongo, dirlen = struct.unpack(OpenType.TABLE_DIR_UNPACK, data[start:end])\n        table_dir[tag] = {\'offset\': bongo, \'length\': dirlen, \'checksum\': check}\n    \n    font[\'tableDir\'] = table_dir\n    \n    return font\n\ndef get_name_records(nametable):\n    """"""reads through the name records within name table""""""\n    name = {}\n    # read the header\n    headersize = 6\n    count, strOffset = struct.unpack(\'>2H\', nametable[2:6])\n    namerecsize = struct.calcsize(OpenType.NAME_RECORD_UNPACK)\n    if count * namerecsize + headersize > len(nametable):\n        raise FontError, \'names exceed size of name table\'\n    name[\'count\'] = count\n    name[\'strOffset\'] = strOffset\n    \n    # read through the name records\n    namerecs = {}\n    for i in range(0, count):\n        start = headersize + i * namerecsize\n        end = start + namerecsize\n        platformID, encodingID, languageID, nameID, namelen, offset = struct.unpack(OpenType.NAME_RECORD_UNPACK, nametable[start:end])\n        if platformID != OpenType.PLATFORM_ID_MICROSOFT or \\\n           encodingID != OpenType.ENCODING_ID_MICROSOFT_UNICODEBMP or \\\n           languageID != OpenType.LANG_ID_MICROSOFT_EN_US:\n            continue\n        namerecs[nameID] = {\'offset\': offset, \'length\': namelen}\n        \n    name[\'namerecords\'] = namerecs\n    return name\n\ndef make_eot_name_headers(fontdata, nameTableDir):\n    """"""extracts names from the name table and generates the names header portion of the EOT header""""""\n    nameoffset = nameTableDir[\'offset\']\n    namelen = nameTableDir[\'length\']\n    name = get_name_records(fontdata[nameoffset : nameoffset + namelen])\n    namestroffset = name[\'strOffset\']\n    namerecs = name[\'namerecords\']\n    \n    eotnames = (OpenType.NAME_ID_FAMILY, OpenType.NAME_ID_STYLE, OpenType.NAME_ID_VERSION, OpenType.NAME_ID_FULL)\n    nameheaders = []\n    for nameid in eotnames:\n        if nameid in namerecs:\n            namerecord = namerecs[nameid]\n            noffset = namerecord[\'offset\']\n            nlen = namerecord[\'length\']\n            nformat = \'%dH\' % (nlen / 2)\t\t# length is in number of bytes\n            start = nameoffset + namestroffset + noffset\n            end = start + nlen\n            nstr = struct.unpack(\'>\' + nformat, fontdata[start:end])\n            nameheaders.append(struct.pack(\'<H\' + nformat + \'2x\', nlen, *nstr))\n        else:\n            nameheaders.append(struct.pack(\'4x\'))  # len = 0, padding = 0\n    \n    return \'\'.join(nameheaders)\n\n# just return a null-string (len = 0)\ndef make_root_string():\n    return struct.pack(\'2x\')\n\ndef make_eot_header(fontdata):\n    """"""given ttf font data produce an EOT header""""""\n    fontDataSize = len(fontdata)\n    font = get_table_directory(fontdata)\n    \n    # toss out .otf fonts, t2embed library doesn\'t support these\n    tableDir = font[\'tableDir\']\n    \n    # check for required tables\n    required = (OpenType.TABLE_HEAD, OpenType.TABLE_NAME, OpenType.TABLE_OS2)\n    for table in required:\n        if not (table in tableDir):\n            raise FontError, \'missing required table \' + multicharval(table)\n            \n    # read name strings\n    \n    # pull out data from individual tables to construct fixed header portion\n    # need to calculate eotSize before packing\n    version = EOT.EOT_VERSION\n    flags = 0\n    charset = EOT.EOT_DEFAULT_CHARSET\n    magicNumber = EOT.EOT_MAGIC_NUMBER\n    \n    # read values from OS/2 table\n    os2Dir = tableDir[OpenType.TABLE_OS2]\n    os2offset = os2Dir[\'offset\']\n    os2size = struct.calcsize(OpenType.OS2_UNPACK)\n    \n    if os2size > os2Dir[\'length\']:\n        raise FontError, \'OS/2 table invalid length\'\n    \n    os2fields = struct.unpack(OpenType.OS2_UNPACK, fontdata[os2offset : os2offset + os2size])\n    \n    panose = []\n    urange = []\n    codepage = []\n    \n    weight, fsType = os2fields[:2]\n    panose[:10] = os2fields[2:12]\n    urange[:4] = os2fields[12:16]\n    fsSelection = os2fields[16]\n    codepage[:2] = os2fields[17:19]\n    \n    italic = fsSelection & OpenType.OS2_FSSELECTION_ITALIC\n    \n    # read in values from head table\n    headDir = tableDir[OpenType.TABLE_HEAD]\n    headoffset = headDir[\'offset\']\n    headsize = struct.calcsize(OpenType.HEAD_UNPACK)\n    \n    if headsize > headDir[\'length\']:\n        raise FontError, \'head table invalid length\'\n        \n    headfields = struct.unpack(OpenType.HEAD_UNPACK, fontdata[headoffset : headoffset + headsize])\n    checkSumAdjustment = headfields[0]\n    \n    # make name headers\n    nameheaders = make_eot_name_headers(fontdata, tableDir[OpenType.TABLE_NAME])\n    rootstring = make_root_string()\n    \n    # calculate the total eot size\n    eotSize = struct.calcsize(EOT.EOT_HEADER_PACK) + len(nameheaders) + len(rootstring) + fontDataSize\n    fixed = struct.pack(EOT.EOT_HEADER_PACK,\n                        *([eotSize, fontDataSize, version, flags] + panose + [charset, italic] +\n                          [weight, fsType, magicNumber] + urange + codepage + [checkSumAdjustment]))\n    \n    return \'\'.join((fixed, nameheaders, rootstring))\n \n    \ndef write_eot_font(eot, header, data):\n    open(eot,\'wb\').write(\'\'.join((header, data)))\n    return\n\ndef main():\n\n    # deal with options\n    p = optparse.OptionParser()\n    p.add_option(\'--output\', \'-o\', default=""world"")\n    options, args = p.parse_args()\n    \n    # iterate over font files\n    for f in args:\n        data = readfont(f)\n        if len(data) == 0:\n            print \'Error reading %s\' % f\n        else:\n            eot = eotname(f)\n            header = make_eot_header(data)\n            write_eot_font(eot, header, data)\n        \n\nif __name__ == \'__main__\':\n    main()\n    \n    '"
static/ionicons-2.0.1/builder/scripts/generate_font.py,0,"b'# Font generation script from FontCustom\n# https://github.com/FontCustom/fontcustom/\n# http://fontcustom.com/\n\nimport fontforge\nimport os\nimport md5\nimport subprocess\nimport tempfile\nimport json\nimport copy\n\nSCRIPT_PATH = os.path.dirname(os.path.abspath(__file__))\nINPUT_SVG_DIR = os.path.join(SCRIPT_PATH, \'..\', \'..\', \'src\')\nOUTPUT_FONT_DIR = os.path.join(SCRIPT_PATH, \'..\', \'..\', \'fonts\')\nMANIFEST_PATH = os.path.join(SCRIPT_PATH, \'..\', \'manifest.json\')\nBUILD_DATA_PATH = os.path.join(SCRIPT_PATH, \'..\', \'build_data.json\')\nAUTO_WIDTH = True\nKERNING = 15\n\ncp = 0xf100\nm = md5.new()\n\nf = fontforge.font()\nf.encoding = \'UnicodeFull\'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\n\nmanifest_file = open(MANIFEST_PATH, \'r\')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint ""Load Manifest, Icons: %s"" % ( len(manifest_data[\'icons\']) )\n\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data[\'icons\'] = []\n\nfont_name = manifest_data[\'name\']\nm.update(font_name + \';\')\nm.update(manifest_data[\'prefix\'] + \';\')\n\nfor dirname, dirnames, filenames in os.walk(INPUT_SVG_DIR):\n  for filename in filenames:\n    name, ext = os.path.splitext(filename)\n    filePath = os.path.join(dirname, filename)\n    size = os.path.getsize(filePath)\n\n    if ext in [\'.svg\', \'.eps\']:\n\n      # see if this file is already in the manifest\n      chr_code = None\n      for ionicon in manifest_data[\'icons\']:\n        if ionicon[\'name\'] == name:\n          chr_code = ionicon[\'code\']\n          break\n\n      if chr_code is None:\n        # this is a new src icon\n        print \'New Icon: \\n - %s\' % (name)\n\n        while True:\n          chr_code = \'0x%x\' % (cp)\n          already_exists = False\n          for ionicon in manifest_data[\'icons\']:\n            if ionicon.get(\'code\') == chr_code:\n              already_exists = True\n              cp += 1\n              chr_code = \'0x%x\' % (cp)\n              continue\n          if not already_exists:\n            break\n\n        print \' - %s\' % chr_code\n        manifest_data[\'icons\'].append({\n          \'name\': name,\n          \'code\': chr_code\n        })\n\n      build_data[\'icons\'].append({\n        \'name\': name,\n        \'code\': chr_code\n      })\n\n      if ext in [\'.svg\']:\n        # hack removal of <switch> </switch> tags\n        svgfile = open(filePath, \'r+\')\n        tmpsvgfile = tempfile.NamedTemporaryFile(suffix=ext, delete=False)\n        svgtext = svgfile.read()\n        svgfile.seek(0)\n\n        # replace the <switch> </switch> tags with \'nothing\'\n        svgtext = svgtext.replace(\'<switch>\', \'\')\n        svgtext = svgtext.replace(\'</switch>\', \'\')\n\n        tmpsvgfile.file.write(svgtext)\n\n        svgfile.close()\n        tmpsvgfile.file.close()\n\n        filePath = tmpsvgfile.name\n        # end hack\n\n      m.update(name + str(size) + \';\')\n      glyph = f.createChar( int(chr_code, 16) )\n      glyph.importOutlines(filePath)\n\n      # if we created a temporary file, let\'s clean it up\n      if tmpsvgfile:\n        os.unlink(tmpsvgfile.name)\n\n      # set glyph size explicitly or automatically depending on autowidth\n      if AUTO_WIDTH:\n        glyph.left_side_bearing = glyph.right_side_bearing = 0\n        glyph.round()\n\n    # resize glyphs if autowidth is enabled\n    if AUTO_WIDTH:\n      f.autoWidth(0, 0, 512)\n\n  fontfile = \'%s/ionicons\' % (OUTPUT_FONT_DIR)\n\nbuild_hash = m.hexdigest()\n\nif build_hash == manifest_data.get(\'build_hash\'):\n  print ""Source files unchanged, did not rebuild fonts""\n\nelse:\n  manifest_data[\'build_hash\'] = build_hash\n\n  f.fontname = font_name\n  f.familyname = font_name\n  f.fullname = font_name\n  f.generate(fontfile + \'.ttf\')\n  f.generate(fontfile + \'.svg\')\n\n  # Fix SVG header for webkit\n  # from: https://github.com/fontello/font-builder/blob/master/bin/fontconvert.py\n  svgfile = open(fontfile + \'.svg\', \'r+\')\n  svgtext = svgfile.read()\n  svgfile.seek(0)\n  svgfile.write(svgtext.replace(\'\'\'<svg>\'\'\', \'\'\'<svg xmlns=""http://www.w3.org/2000/svg"">\'\'\'))\n  svgfile.close()\n\n  scriptPath = os.path.dirname(os.path.realpath(__file__))\n  try:\n    subprocess.Popen([scriptPath + \'/sfnt2woff\', fontfile + \'.ttf\'], stdout=subprocess.PIPE)\n  except OSError:\n    # If the local version of sfnt2woff fails (i.e., on Linux), try to use the\n    # global version. This allows us to avoid forcing OS X users to compile\n    # sfnt2woff from source, simplifying install.\n    subprocess.call([\'sfnt2woff\', fontfile + \'.ttf\'])\n\n  # eotlitetool.py script to generate IE7-compatible .eot fonts\n  subprocess.call(\'python \' + scriptPath + \'/eotlitetool.py \' + fontfile + \'.ttf -o \' + fontfile + \'.eot\', shell=True)\n  subprocess.call(\'mv \' + fontfile + \'.eotlite \' + fontfile + \'.eot\', shell=True)\n\n  # Hint the TTF file\n  subprocess.call(\'ttfautohint -s -f -n \' + fontfile + \'.ttf \' + fontfile + \'-hinted.ttf > /dev/null 2>&1 && mv \' + fontfile + \'-hinted.ttf \' + fontfile + \'.ttf\', shell=True)\n\n  manifest_data[\'icons\'] = sorted(manifest_data[\'icons\'], key=lambda k: k[\'name\'])\n  build_data[\'icons\'] = sorted(build_data[\'icons\'], key=lambda k: k[\'name\'])\n\n  print ""Save Manifest, Icons: %s"" % ( len(manifest_data[\'icons\']) )\n  f = open(MANIFEST_PATH, \'w\')\n  f.write( json.dumps(manifest_data, indent=2, separators=(\',\', \': \')) )\n  f.close()\n\n  print ""Save Build, Icons: %s"" % ( len(build_data[\'icons\']) )\n  f = open(BUILD_DATA_PATH, \'w\')\n  f.write( json.dumps(build_data, indent=2, separators=(\',\', \': \')) )\n  f.close()\n\n'"
