file_path,api_count,code
setup.py,0,"b'from setuptools import setup, Extension\nimport numpy.distutils.misc_util\n\n\nwith open(""README.md"", ""r"") as f:\n    long_description = f.read()\n\n\nsetup(\n    name = \'robustats\',\n    version = \'0.1.5\',\n    description = \'Robustats is a Python library for high-performance \'\n                  \'computation of robust statistical estimators.\',\n    long_description=long_description,\n    long_description_content_type=\'text/markdown\',\n    classifiers=[\n        \'Programming Language :: Python :: 3\',\n    ],\n    url=\'https://github.com/FilippoBovo/robustats\',\n    download_url=\'https://github.com/FilippoBovo/robustats/archive/v0.1.5.tar.gz\',\n    author = \'Filippo Bovo\',\n    author_email = \'bovo.filippo@gmail.com\',\n    license=\'MIT\',\n    packages=[\'robustats\'],\n    install_requires=[\'numpy\'],\n    ext_modules=[\n        Extension(\n            name=""_robustats"",\n            sources=[""c/_robustats.c"", ""c/robustats.c"", ""c/base.c""],\n            extra_compile_args=[""-std=c99""]\n        )\n    ],\n    include_dirs=numpy.distutils.misc_util.get_numpy_include_dirs(),\n)\n'"
robustats/__init__.py,0,b'from robustats.robustats import *\n'
robustats/robustats.py,7,"b'import sys\nfrom typing import List, Union\n\nimport numpy as np\n\nimport _robustats\n\n\ndef weighted_median(\n        x: Union[List[float], np.ndarray],\n        weights: Union[List[float], np.ndarray]\n) -> float:\n    """"""Calculate the weighted median of an array with related weights.\n\n    For arrays with an even number of elements, this function calculates the\n    lower weighted median.\n\n    Args:\n        x: List or Numpy array.\n        weights: List or Numpy of weights related to \'x\'.\n\n    Returns:\n        Weighted median.\n\n    Examples:\n        >>> weighted_median(x=[1., 2., 3.], weights=[1., 1., 1.])\n        2.0\n        >>> weighted_median(x=[1., 2., 3.], weights=[2., 1., 1.])\n        2.0\n        >>> weighted_median(x=[1., 2., 3.], weights=[3., 1., 1.])\n        1.0\n        >>> weighted_median(x=[1., 2.], weights=[1., 1.])\n        1.0\n    """"""\n    return _robustats.weighted_median(x, weights)\n\n\ndef medcouple(x: Union[List[float], np.ndarray]) -> float:\n    """"""Calculate the medcouple of a list of numbers.\n\n    Args:\n        x: List or Numpy array.\n\n    Returns:\n        Medcouple.\n\n    Examples:\n        >>> medcouple(x=[1., 2., 3.])\n        0.0\n        >>> medcouple(x=[1., 2., 3., 4., 5., 6.])\n        0.0\n        >>> medcouple(x=[1., 2., 2., 2., 3., 4., 5., 6.])\n        1.0\n        >>> medcouple(x=[0.2, 0.17, 0.08, 0.16, 0.88, 0.86, 0.09, 0.54, 0.27])\n        0.7\n    """"""\n    if type(x) == list:\n        epsilon1 = sys.float_info.epsilon\n        epsilon2 = sys.float_info.min\n    elif type(x) == np.ndarray:\n        epsilon1 = np.finfo(x.dtype).eps\n        epsilon2 = np.finfo(x.dtype).min\n    else:\n        raise ValueError(\n            ""Wrong function argument: array type not supported; please use a ""\n            ""Python list or a Numpy array.""\n        )\n\n    return _robustats.medcouple(x, epsilon1, epsilon2)\n\n\ndef mode(x: Union[List[float], np.ndarray]) -> float:\n    """"""Calculate the mode of a list of numbers.\n\n    Args:\n        x: List or Numpy array.\n\n    Returns:\n        Mode.\n\n    Examples:\n        >>> mode(x=[1., 2., 3., 4., 5.])\n        2.0\n        >>> mode(x=[1., 2., 3., 3., 4., 5.])\n        3.0\n        >>> mode(x=[1., 2., 2., 3., 3., 3., 4., 4., 5.])\n        3.0\n        >>> mode(x=[1., 2., 3., 3., 3., 4., 4., 4., 4., 5.])\n        3.0\n        >>> mode(x=[1., 2., 3., 3., 3., 4., 4., 4., 4., 4., 5., 6., 7.])\n        4.0\n    """"""\n    return _robustats.mode(x)\n'"
tests/__init__.py,0,b''
tests/test_robustats.py,0,"b'import unittest\n\nimport robustats\n\n\nclass TestWeightedMedian(unittest.TestCase):\n    def test_same_weights(self):\n        x = [1., 2., 3.]\n        weights = [1., 1., 1.]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 2.)\n\n    def test_edge_case(self):\n        x = [1., 2., 3.]\n        weights = [2., 1., 1.]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 2.)\n\n    def test_dominant_weight(self):\n        x = [1., 2., 3.]\n        weights = [3., 1., 1.]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 1.)\n\n    def test_even_list(self):\n        x = [1., 2.]\n        weights = [1., 1.]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 1.)\n\n    def test_generic_1(self):\n        x = [1.3, 5.1, 2.9, 1.9, 7.4]\n        weights = [1.4, 0.9, 0.6, 1.2, 1.7]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 2.9)\n\n    def test_generic_2(self):\n        x = [4.2, 1.3, 7.4, 0.2, 4.6, 9.8, 5.5, 3.7]\n        weights = [0.4, 2.1, 1.1, 1.6, 0.3, 0.9, 1.2, 1.7]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 3.7)\n\n    def test_generic_3(self):\n        x = [0.1, 0.35, 0.05, 0.1, 0.15, 0.05, 0.2]\n        weights = [0.1, 0.35, 0.05, 0.1, 0.15, 0.05, 0.2]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 0.2)\n\n    def test_generic_4(self):\n        x = [\n            0.49, 0.36, 0.36, 0.18, 0.75, 0.33, 0.68, 0.82, 0.38, 0.75, 0.61,\n            0.02, 0.57, 0.23, 0.56, 0.03, 0.45, 0.44, 0.36, 0.92\n        ]\n        weights = [\n            0.08, 0.22, 0.79, 0.84, 0.69, 0.84, 0.08, 0.87, 0.95, 0.27, 0.9,\n            0.34, 0.75, 0.65, 0.02, 0.83, 0.32, 0.68, 0.92, 0.37\n        ]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 0.38)\n\n    def test_generic_5(self):\n        x = [\n            0.64, 0.95, 0.05, 0.08, 0.32, 0.25, 0.58, 0.69, 0.88, 0.53, 0.48,\n            0.58, 0.32, 0.52, 0.42, 0.69, 0.43, 0.91, 0.15, 0.27, 0.31, 0.16,\n            0.56, 0.68, 0.58, 0.04, 0.51, 0.06, 0.18, 0.03\n        ]\n        weights = [\n            0.97, 0.2, 0.12, 0.01, 0.86, 0.29, 0.93, 0.96, 0.89, 0.03, 0.24,\n            0.56, 0.81, 0.97, 0.48, 0.32, 0.33, 0.22, 0.8, 0.17, 0.96, 0.75,\n            0.43, 0.24, 0.81, 0.4, 0.93, 0.43, 0.17, 0.13\n        ]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 0.51)\n\n    def test_generic_6(self):\n        x = [\n            0.19, 0.14, 0.15, 0.79, 0.36, 0.13, 0.44, 0.67, 0.44, 0.98, 0.2,\n            0.11, 0.78, 0.67, 0.28, 0.29, 0.99, 0.55, 0.34, 0.36, 0.09, 0.13,\n            0.56, 0.19, 0.08, 0.46, 0.62, 0.98, 0.46, 0.37, 0.09, 0.94, 0.84,\n            0.64, 0.18, 0.64, 0.78, 0.88, 0.17, 0.28\n        ]\n        weights = [\n            0.67, 0.39, 0.31, 0.06, 0.93, 0.21, 0.09, 0.29, 0.78, 0.42, 0.79,\n            0.27, 0.77, 0.35, 0.11, 0.99, 0.05, 0.39, 0.34, 0.97, 0.82, 0.4,\n            0.09, 0.77, 0.28, 0.03, 0.63, 0.67, 0.1, 0.3, 0.85, 0.44, 0.66,\n            0.52, 0.15, 0.4, 0.82, 0.66, 0.21, 0.72\n        ]\n        weighted_median = robustats.weighted_median(x, weights)\n        self.assertEqual(weighted_median, 0.36)\n\n\nclass TestMedcouple(unittest.TestCase):\n    def test_homogeneous_sample_1(self):\n        x = [1., 2., 3.]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, 0.)\n\n    def test_homogeneous_sample_2(self):\n        x = [-1., 0., 1.]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, 0.)\n\n    def test_homogeneous_sample_3(self):\n        x = [1., 2., 3., 4., 5., 6.]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, 0.)\n\n    def test_generic_1(self):\n        x = [1., 2., 2., 2., 3., 4., 5., 6.]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, 1.)\n\n    def test_generic_2(self):\n        x = [0.2, 0.17, 0.08, 0.16, 0.88, 0.86, 0.09, 0.54, 0.27, 0.14]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, 0.7692307692307692)\n\n    def test_generic_3(self):\n        x = [\n            0.61, 0.96, 0.76, 0.69, 0.18, 0.81, 0.32, 0.69, 0.91, 0.37, 0.0,\n            0.66, 0.99, 0.59, 0.73, 0.41, 0.28, 0.45, 0.63, 0.03\n        ]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, -0.3333333333333333)\n\n    def test_generic_4(self):\n        x = [\n            0.44, 0.66, 0.18, 0.51, 0.34, 0.7, 0.86, 0.97, 0.15, 0.53, 0.85,\n            0.28, 0.13, 0.74, 0.52, 0.21, 0.87, 0.7, 0.17, 0.84, 0.86, 0.01,\n            0.42, 0.27, 0.22, 0.88, 0.16, 0.57, 0.66, 0.88\n        ]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, -0.014925373134328474)\n\n    def test_generic_5(self):\n        x = [\n            0.7, 0.49, 0.07, 0.4, 0.44, 0.36, 0.02, 0.88, 0.94, 0.9, 0.46,\n            0.93, 0.81, 0.92, 0.32, 0.43, 0.64, 0.01, 0.37, 0.46, 0.47, 0.13,\n            0.29, 0.1, 0.04, 0.9, 0.55, 0.27, 0.28, 0.46, 0.46, 0.1, 0.81,\n            0.55, 0.95, 0.58, 0.12, 0.61, 0.92, 0.93\n        ]\n        weighted_median = robustats.medcouple(x)\n        self.assertEqual(weighted_median, 0.11363636363636356)\n\n    def test_generic_6(self):\n        x = [\n            0.0505706944449772, 0.0070789828326770, 0.0145334224599414,\n            -1280333333333327.25, 0.0178606365320585, 0.0159061520516996,\n            0.0495797121923138, 0.0372914134531425, 0.0086590507191233,\n            0.0342721535196032, 0.0288586130658244, 0.0891596218069022,\n            0.0202072309208743, 0.0027620383032866, 0.0233732669912843,\n            0.1865468871246087, 0.0173565462129963, 0.0104139554969637,\n            0.0266508563992725, 0.0373124895253732, 0.0131169704080612,\n            0.0031887476865323, 0.0143710595738763, 0.0322354668298504,\n            0.0294735839414661, 0.0122837537449381, 0.0267517280982628,\n            0.0068281122378599, 0.0151625523958615, 0.0061592749407757,\n            0.0107378571832244, 0.0119136370586005, 0.0146724196670181,\n            0.0038624468691959, 0.0235013060607214, 0.0113202059376254,\n            0.0091049718745908, 0.0168825805985806, 0.0108199342234192,\n            0.0027639654633587, 0.0030246192288427, 0.0047684659517705,\n            0.0224934868968038, 0.0029102614072389, 0.1400529170920381,\n            0.0140046511247422, 0.0226471234402149, 0.0450516454392481,\n            0.0344214786601053, 0.0225270115362316, 0.0203289474178167,\n            0.0642451700532145, 0.0023796045829170, 0.0096026178924646,\n            0.0018286968595304, 0.0173180024192163, 0.0029640154872383,\n            0.0090899315377448, -8999966666665.66796875, 0.0263888888888871,\n            0.0180397698451483, 0.0105417609596879, 0.0159701618017080,\n            0.0771666666663945, 0.0168133405020899, 0.0226498754810608,\n            0.0236652480161304, 0.0061248673460334, 0.0368908993258367,\n            0.0208802868517923, 0.0072598401999189, 0.0042511407087516,\n            0.0645612791740193, 0.0203739136165394, 0.0106441889697796,\n            0.0105007977826955, 0.0115078450670317, 0.0240690089899113,\n            0.0044714485577000, 0.0155542942172829, 0.0314208107418210,\n            0.0025445180401967, 0.0050600600600526, 0.0036932995864006,\n            0.0045972567155374, 0.0071503233340459, 0.0111110017202276,\n            0.0147312508876464, 0.0049586078617475, 0.0299679654662874,\n            0.0776109640212362, 0.0124735142808461, 0.0111227363869411,\n            0.0112458087419498, 0.0256286634017333, 0.0003825841058346,\n            0.0110058557347766, 0.0440566799681710, 0.0074811249204627,\n            0.0414998560716491, 0.0089136594500355, 0.0194342405150806,\n            0.0066161696126370, 0.0070430316605803, 0.0053435784935211,\n            -14333333333282.3203125, 0.0703412629445435, 0.0266451396069719,\n            0.0299716051514547, 0.0054772379837127, 0.0103300334945842,\n            -0.0386815247126384, -0.0421857517593541, 0.1043175682399068,\n            0.0211223238649025, 0.0038994709270129, 0.0264056259463899,\n            0.0107163107920092, 0.0126539201374586, 0.0087148594377257,\n            0.0158425909179287, -0.0187436197495519, 0.0090613841074562,\n            0.0199250656201976, 0.0995828927216849, 0.0150462444750902,\n            0.0305755001750538, 0.0384711785949878, 0.0350921954199814,\n            0.0120941733897791, 0.0036177856947875, 0.0399918414851022,\n            0.0103393067369495, 0.0091165102669316, 0.0118395957025749,\n            0.0137370249872021, 0.0082613339925921, 0.0098020148373935,\n            0.0032443060311902, 0.0471110949612384, 0.0129410058690843,\n            0.7146644630825235, 0.0093728785574007, 0.0159417490710798,\n            0.0252396566351271, 0.0080190899207273, 0.0097634430636786,\n            0.0117633667806713, 0.0103429657638357, 0.0097294778834895,\n            0.0370292809953746, 0.0183956513422159, 0.0104138982619521,\n            0.0300750093631585, 0.0354237913161790, 0.0079921856095884,\n            0.0202564278906056, -0.0113249557094176, 0.0342129475430319,\n            0.0294170386488116, 0.0174558742005798, 0.0127432816521509,\n            0.0057835665742338, 0.0046479004058365, 0.0423393689629025,\n            -0.0016952109258995, 0.0189301691347340, 0.0169483213811876,\n            0.0071468070029358, 0.0030424039097245, 0.0337794628703385,\n            0.0070741265460534, 0.0042172687399545, 0.0447718946351764,\n            0.0678458627788991, 0.0170138107548074, 0.0026032169419886,\n            0.0034858563640110, 0.0333165565026353, 0.0207584830340182,\n            -0.0022437448404433, 0.0074340697938767, 0.0055538696218188,\n            0.0078187132247658, 0.0095282514795251\n        ]\n        result = robustats.medcouple(x)\n        self.assertEqual(result, 0.4176470452896032)\n\nclass TestMode(unittest.TestCase):\n    def test_homogeneous_sample(self):\n        x = [1., 2., 3., 4., 5.]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 2.)\n\n    def test_generic_1(self):\n        x = [1., 2., 3., 3., 4., 5.]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 3.)\n\n    def test_generic_2(self):\n        x = [1., 2., 2., 3., 3., 3., 4., 4., 5.]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 3.)\n\n    def test_generic_3(self):\n        x = [1., 2., 3., 3., 3., 4., 4., 4., 4., 5.]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 3.)\n\n    def test_generic_4(self):\n        x = [1., 2., 3., 3., 3., 4., 4., 4., 4., 4., 5., 6., 7.]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 4.)\n\n    def test_gaussian_1(self):\n        # Gaussian distribution with mu = 1.0 and sigma = 0.2 --> mode = 1.0\n        x = [1.06, 1.25, 0.99, 1.07, 1.46, 1.02, 1.14, 1.04, 0.6, 1.0]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 0.995)\n\n    def test_gaussian_2(self):\n        # Gaussian distribution with mu = 3.0 and sigma = 0.5 --> mode = 3.0\n        x = [\n            2.89, 3.32, 3.19, 3.35, 3.84, 3.22, 3.46, 3.45, 3.06, 3.59, 2.44,\n            3.51, 3.73, 3.35, 2.26, 2.0, 2.15, 3.25, 3.21, 3.4\n        ]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 3.35)\n\n    def test_gaussian_3(self):\n        # Gaussian distribution with mu = 10.0 and sigma = 1.0 --> mode = 10.0\n        x = [\n            9.67, 10.43, 8.34, 8.47, 10.31, 11.01, 9.99, 10.72, 8.61, 11.33,\n            10.87, 9.38, 8.79, 9.07, 10.7, 11.14, 9.73, 9.72, 9.8, 12.06,\n            10.99, 10.12, 10.67, 9.71, 9.74, 9.85, 8.65, 8.71, 10.07, 8.54\n        ]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 9.715)\n\n    def test_gamma_1(self):\n        # Gamma distribution with alpha = 11.0 and beta = 10.0 --> mode = 1.0\n        x = [1.17, 0.82, 0.85, 2.1, 1.35, 1.21, 1.07, 0.81, 1.09, 1.27]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 1.08)\n\n    def test_gamma_2(self):\n        # Gamma distribution with alpha = 21.0 and beta = 10.0 --> mode = 2.0\n        x = [\n            2.04, 2.22, 2.27, 1.71, 2.45, 1.55, 2.38, 2.15, 1.95, 3.34, 2.74,\n            1.92, 1.68, 2.1, 2.13, 2.6, 1.36, 2.25, 2.85, 1.55\n        ]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 2.26)\n\n    def test_gamma_3(self):\n        # Gamma distribution with alpha = 61.0 and beta = 20.0 --> mode = 3.0\n        x = [\n            2.95, 2.29, 3.24, 3.57, 3.7, 3.0, 3.07, 3.73, 2.98, 2.96, 2.59,\n            3.61, 3.09, 2.65, 2.37, 2.66, 2.88, 2.92, 2.3, 3.9, 3.49, 3.67,\n            2.09, 2.98, 2.52, 3.37, 3.29, 3.18, 3.16, 2.68\n        ]\n        mode = robustats.mode(x)\n        self.assertEqual(mode, 2.98)\n'"
