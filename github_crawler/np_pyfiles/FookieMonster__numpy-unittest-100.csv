file_path,api_count,code
test_array_basic.py,7,"b""import unittest\nimport numpy as np\n\nclass TestArrayBasic(unittest.TestCase):\n\n    def test_ndim(self):\n        vector = np.array([0, 0, 0])\n        metrix = np.array([[0, 0, 0], [0, 0, 0]])\n        self.assertEqual(vector.ndim, x)\n        self.assertEqual(metrix.ndim, x)\n\n    def test_shape(self):\n        vector = np.array([0, 0, 0])\n        metrix = np.array([[0, 0, 0], [0, 0, 0]])\n        self.assertEqual(vector.shape, (x,))\n        self.assertEqual(metrix.shape, (x, x))\n\n    def test_size(self):\n        vector = np.array([0, 0, 0])\n        metrix = np.array([[0, 0, 0], [0, 0, 0]])\n        self.assertEqual(vector.size, x)\n        self.assertEqual(metrix.size, x)\n\n    def test_dtype(self):\n        metrix = np.array([[0, 0, 0], [0, 0, 0]])\n        self.assertEqual(type(metrix), x)\n        self.assertEqual(metrix.dtype, x)\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_broadcast.py,12,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayBroadcast(unittest.TestCase):\n\n    def test_plus(self):\n        vector = np.arange(6).reshape(2, 3)\n        assert_array_equal(vector, np.array([[0, 1, 2], [3, 4, 5]]))\n        assert_array_equal(vector + 1, np.array([[x, x, x], [x, x, x]]))\n\n    def test_minus(self):\n        vector = np.arange(6).reshape(2, 3)\n        assert_array_equal(vector, np.array([[0, 1, 2], [3, 4, 5]]))\n        assert_array_equal(vector - 1, np.array([[x, x, x], [x, x, x]]))\n\n    def test_multi(self):\n        vector = np.arange(6).reshape(2, 3)\n        assert_array_equal(vector, np.array([[0, 1, 2], [3, 4, 5]]))\n        assert_array_equal(vector * 2, np.array([[x, x, x], [x, x, x]]))\n\n    def test_square(self):\n        vector = np.arange(6).reshape(2, 3)\n        assert_array_equal(vector, np.array([[0, 1, 2], [3, 4, 5]]))\n        assert_array_equal(vector ** 2, np.array([[x, x, x], [x, x, x]]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_creation.py,23,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayCreation(unittest.TestCase):\n\n    def test_from_list(self):\n        metrix = np.array([[0, 0, 0], [0, 0, 0]])\n        self.assertEqual(metrix.shape, (x, x))\n\n    def test_from_tuple(self):\n        metrix = np.array(((0, 0, 0), (0, 0, 0)))\n        self.assertEqual(metrix.shape, (x, x))\n\n    def test_zeros_vector(self):\n        vector = np.zeros(5)\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_zeros_metrix(self):\n        metrix = np.zeros((2, 5))\n        assert_array_equal(metrix, np.array([[x, x, x, x, x], [x, x, x, x, x]]))\n\n    def test_ones_vector(self):\n        vector = np.ones(5)\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_ones_metrix(self):\n        metrix = np.ones((2, 5))\n        assert_array_equal(metrix, np.array([[x, x, x, x, x], [x, x, x, x, x]]))\n\n    def test_empty(self):\n        metrix = np.empty((2, 5))\n        self.assertEqual(metrix.shape, (x, x))\n\n    def test_arange_to(self):\n        vector = np.arange(5)\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_arange_from_to(self):\n        vector = np.arange(0, 5)\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_arange_with_step(self):\n        vector = np.arange(0, 10, 2)\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_linspace(self):\n        vector = np.linspace(0, 2, 5)\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_eye(self):\n        metrix = np.eye(3)\n        assert_array_equal(metrix, np.array([[x, x, x], [x, x, x], [x, x, x]]))\n\n    def test_identify(self):\n        metrix = np.identity(3)\n        assert_array_equal(metrix, np.array([[x, x, x], [x, x, x], [x, x, x]]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_eye.py,16,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayEye(unittest.TestCase):\n\n    def test_eye_NxN(self):\n        metrix = np.eye(3)\n        assert_array_equal(metrix, np.array([[x, x, x],\n                                             [x, x, x],\n                                             [x, x, x]]))\n\n    def test_eye_NxM(self):\n        metrix = np.eye(2, 3)\n        assert_array_equal(metrix, np.array([[x, x, x],\n                                             [x, x, x]]))\n\n    def test_eye_k0(self):\n        metrix = np.eye(3, k=0)\n        assert_array_equal(metrix, np.array([[x, x, x],\n                                             [x, x, x],\n                                             [x, x, x]]))\n\n    def test_eye_k1(self):\n        metrix = np.eye(3, k=1)\n        assert_array_equal(metrix, np.array([[x, x, x],\n                                             [x, x, x],\n                                             [x, x, x]]))\n\n    def test_eye_k1m(self):\n        metrix = np.eye(3, k=-1)\n        assert_array_equal(metrix, np.array([[x, x, x],\n                                             [x, x, x],\n                                             [x, x, x]]))\n\n    def test_eye_rot90(self):\n        metrix = np.array([[1, 0, 0],\n                           [0, 1, 0],\n                           [0, 0, 1]])\n        assert_array_equal(np.rot90(metrix, k=-1),\n                          np.array([[x, x, x],\n                                    [x, x, x],\n                                    [x, x, x]]))\n\n    def test_eye_rot90m(self):\n        metrix = np.array([[1, 0, 0],\n                           [0, 1, 0],\n                           [0, 0, 1]])\n        assert_array_equal(np.rot90(metrix, k=1),\n                          np.array([[x, x, x],\n                                    [x, x, x],\n                                    [x, x, x]]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_indexing.py,13,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayIndexing(unittest.TestCase):\n\n    def test_indexing_1d(self):\n        vector = np.arange(10)\n        self.assertEqual(vector[0], x)\n\n    def test_indexing_2d(self):\n        metrix = np.arange(9).reshape(3, 3)\n        self.assertEqual(metrix[0][0], 0)\n        self.assertEqual(metrix[0, 0], 0)\n        assert_array_equal(metrix[0], np.array([x, x, x]))\n        assert_array_equal(metrix[1], np.array([x, x, x]))\n        assert_array_equal(metrix[2], np.array([x, x, x]))\n\n    def test_fancy_indexing(self):\n        vector = np.array([7, 6, 5])\n        assert_array_equal(vector[[2, 0, 1]], np.array([x, x, x]))\n\n    def test_indexing_with_boolean_arrays(self):\n        metrix = np.arange(9).reshape(3, 3)\n        assert_array_equal(metrix > 4, np.array([[x, x, x],\n                                                 [x, x, x],\n                                                 [x, x, x]]))\n\n    def test_indexing_with_selected_elements(self):\n        metrix = np.arange(9).reshape(3, 3)\n        assert_array_equal(metrix[metrix > 4], np.array([x, x, x, x]))\n\n    def test_indexing_with_assignments(self):\n        metrix = np.arange(9).reshape(3, 3)\n        metrix[metrix > 4] = 0\n        assert_array_equal(metrix, np.array([[x, x, x],\n                                             [x, x, x],\n                                             [x, x, x]]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_operation.py,34,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayOperation(unittest.TestCase):\n\n    def test_plus(self):\n        vector = np.array([0, 0, 0, 0, 0])\n        vector = vector + 1\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_minus(self):\n        vector = np.array([1, 1, 1, 1, 1])\n        vector = vector - 1\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_multi(self):\n        vector = np.array([3, 3, 3, 3, 3])\n        vector = vector * 3\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_dot(self):\n        vector = np.array([[1, 2], [3, 4]])\n        vector = np.dot(vector, vector)\n        assert_array_equal(vector, np.array([[x, x], [x, x]]))\n\n    def test_expo(self):\n        vector = np.array([3, 3, 3, 3, 3])\n        vector = vector ** 2\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_bool(self):\n        vector = np.array([0, 1, 2, 3, 4])\n        vector = vector < 3\n        assert_array_equal(vector, np.array([x, x, x, x, x]))\n\n    def test_sum(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        self.assertEqual(metrix.sum(), x)\n\n    def test_max(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        self.assertEqual(metrix.max(), x)\n\n    def test_min(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        self.assertEqual(metrix.min(), x)\n\n    def test_sum_axis0(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(metrix.sum(axis=0), np.array([x, x, x, x, x]))\n\n    def test_sum_axis1(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(metrix.sum(axis=1), np.array([x, x]))\n\n    def test_max_axis0(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(metrix.max(axis=0), np.array([x, x, x, x, x]))\n\n    def test_max_axis1(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(metrix.max(axis=1), np.array([x, x]))\n\n    def test_min_axis0(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(metrix.min(axis=0), np.array([x, x, x, x, x]))\n\n    def test_min_axis1(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(metrix.min(axis=1), np.array([x, x]))\n\n    def test_transpose(self):\n        metrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n        assert_array_equal(metrix.transpose(), np.array([[x, x, x], [x, x, x], [x, x, x]]))\n\n    def test_T(self):\n        metrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n        assert_array_equal(metrix.T, np.array([[x, x, x], [x, x, x], [x, x, x]]))\n\n    def test_flatten(self):\n        metrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n        assert_array_equal(metrix.flatten(), np.array([x, x, x, x, x, x, x, x, x]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_reshape.py,9,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayReshape(unittest.TestCase):\n\n    def test_reshape2d(self):\n        metrix = np.arange(6).reshape(2, 3)\n        assert_array_equal(metrix, np.array([[x, x, x], [x, x, x]]))\n\n    def test_reshape3d(self):\n        metrix = np.arange(24).reshape(2, 3, 4)\n        np.set_printoptions(threshold=np.inf)\n        assert_array_equal(metrix, np.array([[[x, x, x, x], [x, x, x, x], [x, x, x, x]],\n                                            [[x, x, x, x], [x, x, x, x], [x, x, x, x]]]))\n\n    def test_reshape_auto(self):\n        metrix = np.arange(6).reshape(2, -1)\n        assert_array_equal(metrix, np.array([[x, x, x], [x, x, x]]))\n\n    def test_flatten(self):\n        metrix = np.array([[12,  6, 18],\n                           [ 2, 14, 14],\n                           [10, 19,  0]])\n        assert_array_equal(metrix.flatten(), np.array([x, x, x, x, x, x, x, x, x]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_select.py,6,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArraySelect(unittest.TestCase):\n\n    def test_select_cond1(self):\n        vector = np.arange(10)\n        vector = np.select([5 < vector], [vector ** 2])\n        assert_array_equal(vector, np.array([x, x, x, x, x, x, x, x, x, x]))\n\n    def test_select_cond2(self):\n        vector = np.arange(10)\n        vector = np.select([vector < 3, 5 < vector], [vector, vector ** 2])\n        assert_array_equal(vector, np.array([x, x, x, x, x, x, x, x, x, x]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_slicing.py,8,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArraySlicing(unittest.TestCase):\n\n    def test_slicing_1d(self):\n        vector = np.arange(10)\n        assert_array_equal(vector[2:5], np.array([x, x, x]))\n\n    def test_slicing_1d_with_step(self):\n        vector = np.arange(10)\n        assert_array_equal(vector[0:10:2], np.array([x, x, x, x, x]))\n\n    def test_slicing_1d_reverse(self):\n        vector = np.arange(10)\n        assert_array_equal(vector[::-1], np.array([x, x, x, x, x, x, x, x, x, x]))\n\n    def test_slicing_2d(self):\n        metrix = np.arange(9).reshape(3, 3)\n        assert_array_equal(metrix[0:2, 0:2], np.array([[x, x], [x, x]]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_stack.py,8,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayStack(unittest.TestCase):\n\n    def test_vstack(self):\n        metrixA = np.array([[1, 2], [3, 4]])\n        metrixB = np.array([[5, 6], [7, 8]])\n        metrixC = np.vstack((metrixA, metrixB))\n        assert_array_equal(metrixC,\n                          np.array([[x, x],\n                                    [x, x],\n                                    [x, x],\n                                    [x, x]]))\n\n    def test_hstack(self):\n        metrixA = np.array([[1, 2], [3, 4]])\n        metrixB = np.array([[5, 6], [7, 8]])\n        metrixC = np.hstack((metrixA, metrixB))\n        assert_array_equal(metrixC,\n                          np.array([[x, x, x, x],\n                                    [x, x, x, x]]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_stats.py,18,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayStats(unittest.TestCase):\n\n    def test_sum(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        self.assertEqual(np.sum(metrix), x)\n\n    def test_max(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        self.assertEqual(np.max(metrix), x)\n\n    def test_min(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        self.assertEqual(np.min(metrix), x)\n\n    def test_sum_axis0(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(np.sum(metrix, axis=0), np.array([x, x, x, x, x]))\n\n    def test_sum_axis1(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(np.sum(metrix, axis=1), np.array([x, x]))\n\n    def test_max_axis0(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(np.max(metrix, axis=0), np.array([x, x, x, x, x]))\n\n    def test_max_axis1(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(np.max(metrix, axis=1), np.array([x, x]))\n\n    def test_min_axis0(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(np.min(metrix, axis=0), np.array([x, x, x, x, x]))\n\n    def test_min_axis1(self):\n        metrix = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n        assert_array_equal(np.min(metrix, axis=1), np.array([x, x]))\n\nif __name__ == '__main__':\n    unittest.main()"""
test_array_ufunc.py,17,"b""import unittest\nimport numpy as np\nfrom numpy.testing import assert_array_equal\n\nclass TestArrayUfunc(unittest.TestCase):\n\n    def test_abs(self):\n        vector = np.array([-1, 1, -7])\n        assert_array_equal(np.abs(vector), np.array([x, x, x]))\n\n    def test_sqrt(self):\n        vector = np.array([9, 16, 25])\n        assert_array_equal(np.sqrt(vector), np.array([x, x, x]))\n\n    def test_sort(self):\n        vector = np.array([1, 6, 2, 3, 8, 1])\n        assert_array_equal(np.sort(vector), np.array([x, x, x, x, x, x]))\n\n    def test_argsort(self):\n        vector = np.array([2, 6, 1])\n        assert_array_equal(np.argsort(vector), np.array([x, x, x]))\n\n    def test_add(self):\n        A = np.array([0, 1, 2])\n        B = np.array([2, -1, 4])\n        assert_array_equal(np.add(A, B), np.array([x, x, x]))\n\n    def test_subtract(self):\n        A = np.array([0, 1, 2])\n        B = np.array([2, -1, 4])\n        assert_array_equal(np.subtract(A, B), np.array([x, x, x]))\n\n    def test_maximum(self):\n        A = np.array([0, 1, 2])\n        B = np.array([2, -1, 4])\n        assert_array_equal(np.maximum(A, B), np.array([x, x, x]))\n\nif __name__ == '__main__':\n    unittest.main()"""
