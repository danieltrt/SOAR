file_path,api_count,code
assets/reg.py,2,"b'# scientific computing library\nimport numpy as np\n\n# visualization tools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# prettify plots\nplt.rcParams[\'figure.figsize\'] = [16.0, 12.0]\nsns.set_palette(sns.color_palette(""muted""))\nsns.set_style(""ticks"")\n\nN = 50\n\nx = np.linspace(-1, 4, N)\n\ny = np.sin(x) + np.random.normal(0, 0.2, N)\n\nsns.regplot(x, y, order=2, ci=None)\n\nplt.xlabel(\'$x$\')\nplt.ylabel(\'$y$\')\n\nplt.savefig(\'assets/Regression.eps\', format=\'eps\',\n            dpi=1000, transparent=True)\n'"
notebooks/adapter.py,8,"b'# scientific computing library\nimport numpy as np\n\n\ndef make_spiral(N, dims, num_classes, one_hot=False):\n    """"""Generate toy spiral data for multiclass classification.""""""\n    X = np.zeros(shape=(N * num_classes, dims))\n    y = np.zeros(shape=(N * num_classes), dtype=int)\n    for j in range(num_classes):\n        radius = np.linspace(0.0, 1, N)\n        angle = np.linspace(j * 4, (j + 1) * 4, N)\n        ix = range(N * j, N * (j + 1))\n        X[ix] = np.c_[radius * np.sin(angle), radius * np.cos(angle)]\n        y[ix] = j\n\n    if one_hot:\n        return X, array_to_onehot(y, num_classes)\n    else:\n        return X, y\n\n\ndef int_to_onehot(x, num_classes):\n    """"""Convert an `int` to one hot (binary) format.""""""\n    tmp = np.zeros(num_classes, dtype=int)\n    tmp[-x - 1] = 1\n    return tmp\n\n\ndef array_to_onehot(arr, num_classes):\n    """"""Convert an `np.array(dtype=int)` to one hot (binary) format.""""""\n    tmp = np.zeros(shape=(arr.shape[0], num_classes), dtype=int)\n    for j in range(len(arr)):\n        tmp[j] = int_to_onehot(arr[j], num_classes)\n    return tmp\n'"
notebooks/visualize.py,8,"b'# scientific computing library\nimport numpy as np\n\n# visualization tools\nimport matplotlib.pyplot as plt\n\n\ndef linear(X, y, W, b, h=0.02, o=0.2):\n    """"""Visualize Separation Lines - Linear Model.\n\n    Parameters\n    ----------\n    X: numpy.ndarray\n        Features matrix\n    y: numpy.ndarray\n        Targets/Labels matrix\n    W: numpy.ndarray\n        Weights matrix\n    b: numpy.ndarray\n        Biases vector\n    h: float\n        Plot density\n    o: float\n        Plot axis offset\n    """"""\n\n    # Plot ranges\n    x_min, x_max = X[:, 0].min() - o, X[:, 0].max() + o  # x-range\n    y_min, y_max = X[:, 1].min() - o, X[:, 1].max() + o  # y-range\n\n    # 2D grid values of density `h`\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                         np.arange(y_min, y_max, h))\n    # Classify points\n    Z = np.argmax(np.dot(np.c_[xx.ravel(), yy.ravel()],\n                         W) + b, axis=1).reshape(xx.shape)\n\n    # Plot separation spaces\n    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral, alpha=0.8)\n    # Plot input datapoints\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.Spectral)\n    plt.title(\'Linear Model for Spiral Toy Data\\n\')\n    plt.xlabel(\'$x_{1}$\')\n    plt.ylabel(\'$x_{2}$\')\n\n\ndef nn(X, y, W1, b1, W2, b2, h=0.02, o=0.2):\n    """"""Visualize Separation Lines - Neural Network.\n\n    Parameters\n    ----------\n    X: numpy.ndarray\n        Features matrix\n    y: numpy.ndarray\n        Targets/Labels matrix\n    W1: numpy.ndarray\n        Weights matrix of first layer\n    b1: numpy.ndarray\n        Biases vector of first layer\n    W2: numpy.ndarray\n        Weights matrix of second layer\n    b2: numpy.ndarray\n        Biases vector of second layer\n    h: float\n        Plot density\n    o: float\n        Plot axis offset\n    """"""\n\n    # ReLU activation function\n    def relu(z): return np.maximum(0, z)\n\n    # Plot ranges\n    x_min, x_max = X[:, 0].min() - o, X[:, 0].max() + o  # x-range\n    y_min, y_max = X[:, 1].min() - o, X[:, 1].max() + o  # y-range\n\n    # 2D grid values of density `h`\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                         np.arange(y_min, y_max, h))\n    # Classify points\n    Z = np.argmax(np.dot(relu(np.dot(\n        np.c_[xx.ravel(), yy.ravel()], W1) + b1), W2) + b2, axis=1).reshape(xx.shape)\n\n    # Plot separation spaces\n    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral, alpha=0.8)\n    # Plot input datapoints\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.Spectral)\n    plt.title(\'Neural Network Model for Spiral Toy Data\\n\')\n    plt.xlabel(\'$x_{1}$\')\n    plt.ylabel(\'$x_{2}$\')\n'"
tests/test_setup.py,0,b'def test_setup():\n    assert True == True'
