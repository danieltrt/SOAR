file_path,api_count,code
VideoSubScanPlayer/CNN_new.py,10,"b'# coding=utf-8\nimport tensorflow as tf\nimport os\nimport numpy as np\nimport random\nfrom PIL import Image\nimport cv2 as cv\nimport time\n\n""""""\n\xe5\x90\x84\xe7\xb1\xbb\xe6\xa8\xa1\xe5\x9e\x8b\xe4\xbb\xa3\xe7\xa0\x81\xe4\xbb\xa5\xe5\x8f\x8a\xe8\xae\xad\xe7\xbb\x83\xe4\xbb\xa3\xe7\xa0\x81\n""""""\n\nimage_size = 64\n# all:33-127, 0-9:48-58\nstart = 48\nend = 58\ncategory = end - start\n\n# \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe5\xad\x97\xe5\x85\xb8\xe6\xa0\xbc\xe5\xbc\x8f \xe8\xb7\xaf\xe5\xbe\x84:ascii\xe5\x80\xbc\ntrain_list = []\ntest_list = []\ntrain_rate = 0.90 #13818\n# \xe6\x8f\x90\xe4\xbe\x9b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe8\xb7\xaf\xe5\xbe\x84\nfile_dir = ""G:\\\\Code\\\\Python\\\\digital_imgae_processing_design\\\\dataset\\\\""\nasciiList = [str(index) for index in range(start, end)]\n# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\xe5\xad\x98\xe5\x9c\xa8file_list\xe5\xad\x97\xe5\x85\xb8\nfor index, numStr in enumerate(asciiList):\n\tfile_name_list = os.listdir(file_dir + numStr + \'\\\\\')\n\tfile_list = []\n\tfor name in file_name_list:\n\t\tfile_list.append([name, index + start])\n\t# \xe6\x89\x93\xe4\xb9\xb1\n\trandom.shuffle(file_list)\n\t# \xe6\x8c\x89\xe5\x88\x86\xe9\x85\x8d\xe7\x8e\x87\xe6\x9d\xa5\xe5\x88\x86\xe9\x85\x8d\n\ttrain_length = int(len(file_list) * train_rate)\n\ttrain_list += file_list[0: train_length + 1]\n\ttest_list += file_list[train_length + 1:]\n\n\n\nX = tf.placeholder(tf.float32, [None, 64 * 64])\nY = tf.placeholder(tf.float32, [None, category])\nkeep_prob = tf.placeholder(tf.float32)\n\n\ndef getRandomData(sample_list,batch_num):\n\t# \xe4\xbc\xa0\xe5\x85\xa5batch_num\xe4\xb8\xba\xe4\xb8\x80\xe6\xac\xa1\xe6\x80\xa7\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xa0\xb7\xe6\x9c\xac\xe6\xa0\x87\xe7\xad\xbe\xe6\x95\xb0\xe9\x87\x8f\n\t# \xe9\x9a\x8f\xe6\x9c\xba\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8c\x87\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84image\xe5\x92\x8clabel\n\t# \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae  image\xe4\xb8\xbaone-hot np-array,\xe7\xbb\xb4\xe5\xba\xa6 \xe3\x80\x90batch_num, image\xe6\x80\xbb\xe5\x83\x8f\xe7\xb4\xa0\xe3\x80\x91\n\t#           label\xe4\xb8\xba01\xe7\x9f\xa9\xe9\x98\xb5,\xe7\xbb\xb4\xe5\xba\xa6[batch_num, classes] \xe5\x85\xb6\xe4\xb8\xad\xe6\xad\xa3\xe7\xa1\xae\xe6\xa0\x87\xe7\xad\xbe\xe4\xb8\xba1\xef\xbc\x8c\n\n\timage_batch = []\n\tlabel_batch = []\n\n\t# \xe4\xbb\x8e\xe8\xaf\xbb\xe5\x8f\x96\xe5\xa5\xbd\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe8\xaf\xbb\xe5\x8f\x96\xe6\x8c\x87\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n\telements = random.sample(sample_list, batch_num)\n\t# print(elements)\n\tfor item in elements:\n\t\tname = item[0]\n\t\tid = item[1]\n\t\t# \xe5\xb0\x86\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xband-array\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe5\xb0\x86\xe9\x95\xbf\xe5\xba\xa6reshape\xe6\x88\x90\xe4\xb8\x80\xe7\xbb\xb4\xe5\x90\x91\xe9\x87\x8f\n\t\t# \xe5\x9b\xbe\xe7\x89\x87\xe5\x85\x88\xe7\x94\xa8Image\xe5\xb7\xa5\xe5\x85\xb7\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe5\x86\x8d\xe7\x94\xa8numpy\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xef\xbc\x8c\xe5\x86\x8d\xe5\xae\x9a\xe4\xb8\xbaone-hot\n\t\timg = Image.open(file_dir + str(id) + ""\\\\"" + name)\n\t\timage_batch.append(Nomalize(np.array(img.convert(""L"")), 128).reshape([image_size ** 2]))\n\n\t\tlabel_array = [0] * (end - start)\n\t\tlabel_array[id - start] = 1\n\t\tlabel_batch.append(label_array)\n\n\t# \xe5\xb0\x86\xe8\xbd\xac\xe6\x8d\xa2\xe5\xa5\xbd\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xband-array\xe6\xa0\xbc\xe5\xbc\x8f\n\timage_batch = np.array(image_batch)\n\tlabel_batch = np.array(label_batch)\n\n\t# print(image_batch.shape)\n\t# print(label_batch.shape)\n\n\treturn image_batch, label_batch\n\ndef getDataBatch(sample_list, batch_num):\n\t# \xe4\xbc\xa0\xe5\x85\xa5batch_num\xe4\xb8\xba\xe4\xb8\x80\xe6\xac\xa1\xe6\x80\xa7\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xa0\xb7\xe6\x9c\xac\xe6\xa0\x87\xe7\xad\xbe\xe6\x95\xb0\xe9\x87\x8f\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8c\x87\xe5\xae\x9a\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t# \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae  image\xe4\xb8\xbaone-hot np-array,\xe7\xbb\xb4\xe5\xba\xa6 \xe3\x80\x90batch_num, image\xe6\x80\xbb\xe5\x83\x8f\xe7\xb4\xa0\xe3\x80\x91\n\t#           label\xe4\xb8\xba01\xe7\x9f\xa9\xe9\x98\xb5,\xe7\xbb\xb4\xe5\xba\xa6[batch_num, classes] \xe5\x85\xb6\xe4\xb8\xad\xe6\xad\xa3\xe7\xa1\xae\xe6\xa0\x87\xe7\xad\xbe\xe4\xb8\xba1\xef\xbc\x8c\n\t# \xe6\xb3\xa8\xef\xbc\x9a \xe4\xb8\x8d\xe6\x96\xad\xe5\x87\xba\xe9\x98\x9f\xe7\xa1\xae\xe4\xbf\x9d\xe4\xba\x86\xe6\xaf\x8f\xe6\xac\xa1\xe5\x8f\x96\xe6\xa0\xb7\xe6\x9c\xac\xe9\x83\xbd\xe4\xb8\x8d\xe4\xbc\x9a\xe9\x87\x8d\xe5\xa4\x8d\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\x88\xab\xe8\xb6\x8a\xe7\x95\x8c\xe4\xba\x86\xe3\x80\x82\n\t# \xe6\xb5\x8b\xe8\xaf\x95\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c94 * 21 = 1974\xe6\xa0\xb7\xe6\x9c\xac\xef\xbc\x8c\xe6\x80\xbb\xe6\xa0\xb7\xe6\x9c\xac\xe4\xb8\x8d\xe8\xa6\x81\xe8\xb6\x85\xe8\xbf\x87\xe8\xbf\x99\xe4\xb8\xaa\xe5\x80\xbc\n\n\timage_batch = []\n\tlabel_batch = []\n\n\t# \xe4\xbb\x8e\xe8\xaf\xbb\xe5\x8f\x96\xe5\xa5\xbd\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe6\x8c\x87\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae,\xe6\x8c\x89\xe9\xa1\xba\xe5\xba\x8f\n\telements = []\n\tfor i in range(batch_num):\n\t\telements.append(sample_list.pop(0))\n\n\tfor item in elements:\n\t\tname = item[0]\n\t\tid = item[1]\n\t\t# \xe5\xb0\x86\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xband-array\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe5\xb0\x86\xe9\x95\xbf\xe5\xba\xa6reshape\xe6\x88\x90\xe4\xb8\x80\xe7\xbb\xb4\xe5\x90\x91\xe9\x87\x8f\n\t\t# \xe5\x9b\xbe\xe7\x89\x87\xe5\x85\x88\xe7\x94\xa8Image\xe5\xb7\xa5\xe5\x85\xb7\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe5\x86\x8d\xe7\x94\xa8numpy\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xef\xbc\x8c\xe5\x86\x8d\xe5\xae\x9a\xe4\xb8\xbaone-hot\n\t\timg = Image.open(file_dir + str(id) + ""\\\\"" + name)\n\t\timage_batch.append(Nomalize(np.array(img.convert(""L"")), 128).reshape([image_size ** 2]))\n\n\t\tlabel_array = [0] * (end - start)\n\t\tlabel_array[id - start] = 1\n\t\tlabel_batch.append(label_array)\n\n\t# \xe5\xb0\x86\xe8\xbd\xac\xe6\x8d\xa2\xe5\xa5\xbd\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xband-array\xe6\xa0\xbc\xe5\xbc\x8f\n\timage_batch = np.array(image_batch)\n\tlabel_batch = np.array(label_batch)\n\n\t# print(image_batch.shape)\n\t# print(label_batch.shape)\n\n\treturn image_batch, label_batch\n\ndef getRealData():\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe7\x9c\x9f\xe5\xae\x9e\xe5\x88\x86\xe5\x89\xb2\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n\ttest_dir = ""chuli\\\\""\n\tfile_name_list = os.listdir(test_dir)\n\tdata = []\n\tfor id, name in enumerate(file_name_list):\n\t\timage_path = test_dir + name\n\t\timg = Image.open(image_path)\n\t\timg_np = Nomalize(np.array(img.convert(""L"")), 128).reshape([image_size ** 2])\n\t\tdata.append([img_np,id])\n\n\treturn data\n\n\ndef convert_pic(imgPath):\n\t# \xe6\x8a\x8a\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe4\xb8\xbanumpy \xe3\x80\x9064*64\xe3\x80\x91\n\timg = Image.open(imgPath)\n\tprint(img)\n\trow,col = img.size\n\timg = cv.imread(imgPath,0)\n\tcv.imshow(\'img\',img)\n\t# image = cv.cvtColor(np.asarray(img), cv.COLOR_RGB2GRAY)\n\t# rate = int((64*row)/col)\n\t# image = cv.resize(image,(0,0),fx = row*rate, fy = 64)\n\t# cv.imshow(\'img\',image)\n\tcv.waitKey(0)\n\ndef Nomalize(array, value):\n\trow, col = array.shape\n\tfor i in range(row):\n\t\tfor j in range(col):\n\t\t\tif array[i][j] > value:\n\t\t\t\tarray[i][j] = 1\n\t\t\telse:\n\t\t\t\tarray[i][j] = 0\n\treturn array\n\ndef ascii_cnn():\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# 2 conv layers\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 64], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([64]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([128]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 16*16*64\n\t# w_c3 = tf.Variable(tf.random_normal([3, 3, 128, 256], stddev = 0.01))\n\t# b_c3 = tf.Variable(tf.zeros([256]))\n\t# conv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c3))\n\t# conv3 = tf.nn.max_pool(conv3, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\t# conv3 = tf.nn.dropout(conv3, keep_prob)\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c8*8*128\n\tw_d = tf.Variable(tf.random_normal([16 * 16 * 128, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv2, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\n\tw_out = tf.Variable(tf.random_normal([1024, 94], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([94]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\n\ndef M4_sub():\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# 2 conv layers\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([32]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 32*32*64\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 32, 64], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([64]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c16*16*128\n\tw_d = tf.Variable(tf.random_normal([16 * 16 * 64, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv2, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\n\tw_out = tf.Variable(tf.random_normal([1024, category], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([category]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\ndef M4_plus():\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# \xe8\xbe\x93\xe5\x85\xa564 * 64 \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82 C1\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 64], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([64]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 32*32*64 \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82 C2\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([128]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c16*16*128\n\tw_d = tf.Variable(tf.random_normal([16 * 16 * 128, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv2, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c1024 -> 90\n\tw_out = tf.Variable(tf.random_normal([1024, category], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([category]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\ndef M5_plus():\n\t# M5+ 64-128-256-2fc\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# 3 conv layers\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 64], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([64]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 32*32*64\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([128]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 16*16*128\n\tw_c3 = tf.Variable(tf.random_normal([3, 3, 128, 256], stddev = 0.01))\n\tb_c3 = tf.Variable(tf.zeros([256]))\n\tconv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c3))\n\tconv3 = tf.nn.max_pool(conv3, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\tconv3 = tf.nn.dropout(conv3, keep_prob)\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c8*8*256\n\tw_d = tf.Variable(tf.random_normal([8 * 8 * 256, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv3, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\n\tw_out = tf.Variable(tf.random_normal([1024, category], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([category]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\ndef M5_sub():\n\t# M5- 32-64-128-2fc\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# 3 conv layers\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([32]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 32*32*32\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 32, 64], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([64]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 16*16*64\n\tw_c3 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev = 0.01))\n\tb_c3 = tf.Variable(tf.zeros([128]))\n\tconv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c3))\n\tconv3 = tf.nn.max_pool(conv3, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\tconv3 = tf.nn.dropout(conv3, keep_prob)\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c8*8*128\n\tw_d = tf.Variable(tf.random_normal([8 * 8 * 128, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv3, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\n\tw_out = tf.Variable(tf.random_normal([1024, category], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([category]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\ndef M6_sub():\n\t# M6- 32-64-128-256-2fc\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# 4 conv layers\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([32]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 32*32*32\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 32, 64], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([64]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 16*16*64\n\tw_c3 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev = 0.01))\n\tb_c3 = tf.Variable(tf.zeros([128]))\n\tconv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c3))\n\tconv3 = tf.nn.max_pool(conv3, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\tconv3 = tf.nn.dropout(conv3, keep_prob)\n\n\t# 8*8*128\n\tw_c4 = tf.Variable(tf.random_normal([3, 3, 128, 256], stddev = 0.01))\n\tb_c4 = tf.Variable(tf.zeros([256]))\n\tconv4 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv3, w_c4, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c4))\n\tconv4 = tf.nn.max_pool(conv4, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\tconv4 = tf.nn.dropout(conv4, keep_prob)\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c4*4*256\n\tw_d = tf.Variable(tf.random_normal([4 * 4 * 256, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv4, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\n\tw_out = tf.Variable(tf.random_normal([1024, category], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([category]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\ndef M6_plus():\n\t# M6+ 40-80-160-320-2fc\n\tx = tf.reshape(X, shape = [-1, 64, 64, 1])\n\t# 4 conv layers\n\tw_c1 = tf.Variable(tf.random_normal([3, 3, 1, 40], stddev = 0.01))\n\tb_c1 = tf.Variable(tf.zeros([40]))\n\tconv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c1))\n\tconv1 = tf.nn.max_pool(conv1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 32*32*40\n\tw_c2 = tf.Variable(tf.random_normal([3, 3, 40, 80], stddev = 0.01))\n\tb_c2 = tf.Variable(tf.zeros([80]))\n\tconv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c2))\n\tconv2 = tf.nn.max_pool(conv2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\n\t# 16*16*80\n\tw_c3 = tf.Variable(tf.random_normal([3, 3, 80, 160], stddev = 0.01))\n\tb_c3 = tf.Variable(tf.zeros([160]))\n\tconv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c3))\n\tconv3 = tf.nn.max_pool(conv3, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\tconv3 = tf.nn.dropout(conv3, keep_prob)\n\n\t# 8*8*160\n\tw_c4 = tf.Variable(tf.random_normal([3, 3, 160, 320], stddev = 0.01))\n\tb_c4 = tf.Variable(tf.zeros([320]))\n\tconv4 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv3, w_c4, strides = [1, 1, 1, 1], padding = \'SAME\'), b_c4))\n\tconv4 = tf.nn.max_pool(conv4, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = \'SAME\')\n\tconv4 = tf.nn.dropout(conv4, keep_prob)\n\n\t# \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c4*4*256\n\tw_d = tf.Variable(tf.random_normal([4 * 4 * 320, 1024], stddev = 0.01))\n\tb_d = tf.Variable(tf.zeros([1024]))\n\tdense = tf.reshape(conv4, [-1, w_d.get_shape().as_list()[0]])\n\tdense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n\tdense = tf.nn.dropout(dense, keep_prob)\n\n\tw_out = tf.Variable(tf.random_normal([1024, category], stddev = 0.01))\n\tb_out = tf.Variable(tf.zeros([category]))\n\tout = tf.add(tf.matmul(dense, w_out), b_out)\n\n\treturn out\n\n\ndef train_cnn(output):\n\t# output = ascii_cnn()\n\n\tloss = tf.reduce_sum(tf.nn.softmax_cross_entropy_with_logits(logits = output, labels = Y))\n\toptimizer = tf.train.AdamOptimizer(learning_rate = 0.001).minimize(loss)\n\n\taccuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(output, 1), tf.argmax(Y, 1)), tf.float32))\n\n\t# \xe5\x88\x9b\xe5\xbb\xbasaver\xe7\x94\xa8\xe4\xba\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\n\tsaver = tf.train.Saver()\n\n\twith tf.Session() as sess:\n\t\tsess.run(tf.global_variables_initializer())\n\t\tsaver.restore(sess, ""./model/"")\n\t\tacc = 0.0\n\t\tfor i in range(2000):\n\t\t\timage_batch, label_batch = getRandomData(train_list, 300)\n\n\t\t\tsess.run([optimizer, loss],feed_dict = {X: image_batch, Y: label_batch, keep_prob: 0.5})\n\t\t\tprint(""\\r\xe6\xad\xa3\xe5\x9c\xa8\xe8\xae\xad\xe7\xbb\x83\xe7\xac\xac %d \xe6\xad\xa5 \xef\xbc\x8c\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe6\xac\xa1\xe6\xb5\x8b\xe8\xaf\x95\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba%f, \xe6\xaf\x8f 5 \xe6\xad\xa5\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x80\xe6\xac\xa1\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87""%(i+1,acc), end="""")\n\n\t\t\tif (i+1)%5==0:\n\t\t\t\timage_batch, label_batch = getRandomData(test_list, 200)\n\n\t\t\t\tacc = accuracy.eval({X: image_batch, Y: label_batch, keep_prob: 1.})\n\n\t\t\t\t# print(""\xe8\xae\xad\xe7\xbb\x83\xe7\xac\xac%d\xe6\xad\xa5\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba\xef\xbc\x9a%f""%(i+1,acc))\n\n\t\t\t# if (i+1)%200==0:\n\t\t\t# \tsaver.save(sess, ""./model2/"")\n\t\t# saver.restore(sess, ""./model/"")\n\t\tprint(""\\n----\xe8\xae\xad\xe7\xbb\x83\xe5\xae\x8c\xe6\xaf\x95\xef\xbc\x8c\xe6\xad\xa3\xe5\x9c\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8d\x81\xe6\xac\xa1\xe6\xb5\x8b\xe8\xaf\x95----"")\n\t\tnums = []\n\t\tfor i in range(10):\n\t\t\timage_batch, label_batch = getRandomData(test_list, 249)\n\t\t\tacc = accuracy.eval({X: image_batch, Y: label_batch, keep_prob: 1.})\n\t\t\tnums.append(acc)\n\t\t\tprint(""\xe7\xac\xac%d\xe6\xac\xa1\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a%f""%(i+1,acc))\n\t\tprint(nums)\n\t\tac = (np.mean(nums))\n\t\tprint(""\xe6\xb5\x8b\xe8\xaf\x95\xe5\xae\x8c\xe6\xaf\x95\xef\xbc\x8c\xe5\xb9\xb3\xe5\x9d\x87\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba\xef\xbc\x9a%f"" % ac)\n\t\treturn ac\n\ndef test_cnn(output):\n\t# \xe5\x88\x9b\xe5\xbb\xbasaver\xe7\x94\xa8\xe4\xba\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\n\tsaver = tf.train.Saver()\n\taccuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(output, 1), tf.argmax(Y, 1)), tf.float32))\n\twith tf.Session() as sess:\n\t\tsess.run(tf.global_variables_initializer())\n\n\t\tsaver.restore(sess, ""./model/"")\n\n\t\tfor i in range(10):\n\t\t\timage_batch, label_batch = getRandomData(test_list, 249)\n\t\t\tacc = accuracy.eval({X: image_batch, Y: label_batch, keep_prob: 1.})\n\t\t\tprint(""\xe7\xac\xac%d\xe6\xac\xa1\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a%f""%(i+1,acc))\n\n\ndef tesify_model(output):\n\tac_list = []\n\tfor i in range(5):\n\t\tprint(""--------\xe7\xac\xac%d\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\xe6\xb5\x8b\xe8\xaf\x95---------"" % (i+1))\n\t\tt1 = time.time()\n\t\tac = train_cnn(output)\n\t\tac_list.append(ac)\n\t\tt2 = time.time()\n\t\tprint(""\xe7\xac\xac%d\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\xe6\xb5\x8b\xe8\xaf\x95 \xe6\xb6\x88\xe8\x80\x97\xe6\x97\xb6\xe9\x97\xb4: %f"" % (i+1, t2 - t1))\n\tprint(ac_list)\n\tprint(np.mean(ac_list))\n\nif __name__ == \'__main__\':\n\n\n\tModel5_plus = M5_plus()\n\ttrain_cnn(Model5_plus)\n\n\n\t# getRandomData(1)\n\t# getDataBatch(2)\n\t# convert_pic(""G:/Java\xe8\xb5\x84\xe6\x96\x99/Code/Python/digital_imgae_processing_design/data_test/test2/0.jpg"")\n'"
VideoSubScanPlayer/VideoPlayer.py,0,"b'# coding=utf-8\n\'\'\'\nVideoPlayer \xe4\xb8\xbb\xe7\xa8\x8b\xe5\xba\x8f\n\'\'\'\nimport sys\n\n# \xe6\x8a\x8a\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbd\x9c\xe4\xb8\xba\xe6\x90\x9c\xe7\xb4\xa2\xe8\xb7\xaf\xe5\xbe\x84\xe4\xbb\xa5\xe5\xaf\xbc\xe5\x8c\x85\nsys.path.append(\'image_process_tool\\\\\')\n\nfrom image_process_tool.readVideo import SubText_Detection\nfrom image_process_tool.cut import Image_Division\nfrom baidu_translator import Translation\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nimport tensorflow as tf\nimport traceback\nimport cv2 as cv\nimport vthread\nimport threading\n\n\ndef CNN_Model():\n    # M4+\xe6\xa8\xa1\xe5\x9e\x8b\xe6\xb5\x81\xe5\x9b\xbe\n    x = tf.reshape(X, shape=[-1, 64, 64, 1])\n    # print(x,x.graph)\n    # 3 conv layers\n    w_c1 = tf.Variable(tf.compat.v1.random_normal([3, 3, 1, 64], stddev=0.01))\n    b_c1 = tf.Variable(tf.compat.v1.zeros([64]))\n    conv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides=[1, 1, 1, 1], padding=\'SAME\'), b_c1))\n    conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\'SAME\')\n\n    # 32*32*64\n    w_c2 = tf.Variable(tf.compat.v1.random_normal([3, 3, 64, 128], stddev=0.01))\n    b_c2 = tf.Variable(tf.compat.v1.zeros([128]))\n    conv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides=[1, 1, 1, 1], padding=\'SAME\'), b_c2))\n    conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\'SAME\')\n\n    # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c16*16*128\n    w_d = tf.Variable(tf.compat.v1.random_normal([16 * 16 * 128, 1024], stddev=0.01))\n    b_d = tf.Variable(tf.compat.v1.zeros([1024]))\n    dense = tf.reshape(conv2, [-1, w_d.get_shape().as_list()[0]])\n    dense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))\n    dense = tf.nn.dropout(dense, keep_prob)\n\n    w_out = tf.compat.v1.Variable(tf.compat.v1.random_normal([1024, category], stddev=0.01))\n    b_out = tf.compat.v1.Variable(tf.compat.v1.zeros([category]))\n    out = tf.add(tf.matmul(dense, w_out), b_out)\n\n    return out\n\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe9\xbb\x98\xe8\xae\xa4\xe5\x9b\xbe\xef\xbc\x8c\xe5\x90\x8e\xe7\xbb\xad\xe6\x93\x8d\xe4\xbd\x9c\xe9\x83\xbd\xe5\x9c\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x9b\xbe\xe4\xb8\x8b\xe6\x93\x8d\xe4\xbd\x9c\ngraph = tf.compat.v1.get_default_graph()\nwith graph.as_default():\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x98\xe9\x87\x8f\n    X = tf.compat.v1.placeholder(tf.float32, [None, 64 * 64])\n    keep_prob = tf.compat.v1.placeholder(tf.float32)\n    category = 90\n    sess = tf.compat.v1.Session()\n    out = CNN_Model()\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\n    saver = tf.compat.v1.train.Saver()\n    saver.restore(sess, \'./model/\')\n\n\ndef Recognization(Division_Pic_npArray):\n    # \xe5\x9c\xa8\xe5\x88\x9b\xe5\xbb\xba\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\x9b\xbe\xe4\xb8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e\xe5\x90\x84\xe4\xb8\xaa\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84ascii\xe5\xad\x97\xe7\xac\xa6\n    with graph.as_default():\n        result = tf.argmax(sess.run(out, feed_dict={X: Division_Pic_npArray, keep_prob: 0.5}), 1).eval(session=sess)\n        return [chr(i + 33) for i in result]\n\n\nclass VideoPlayer(QMainWindow):\n    def __init__(self):\n        super(VideoPlayer, self).__init__()\n\n        # \xe7\xba\xbf\xe7\xa8\x8b\xe9\x98\x9f\xe5\x88\x97\n        self.ThreadList = []\n\n        # \xe5\xad\x97\xe5\xb9\x95\xe9\x98\x9f\xe5\x88\x97\n        self.subtext_Dict = {}\n\n        # \xe6\x92\xad\xe6\x94\xbe\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c0\xe8\xa1\xa8\xe7\xa4\xba\xe6\xb2\xa1\xe6\x9c\x89\xe8\xa7\x86\xe9\xa2\x91\xe5\x9c\xa8\xe6\x92\xad\xe6\x94\xbe\xef\xbc\x8c1\xe8\xa1\xa8\xe7\xa4\xba\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe6\x92\xad\xe6\x94\xbe\xe4\xbd\x86\xe6\x98\xaf\xe6\x9a\x82\xe5\x81\x9c\xe4\xba\x86\xef\xbc\x8c2\xe8\xa1\xa8\xe7\xa4\xba\xe6\xad\xa3\xe5\x9c\xa8\xe6\x92\xad\xe6\x94\xbe\n        self.STATUS = 0\n\n        # \xe8\xa7\x86\xe9\xa2\x91\xe6\x92\xad\xe6\x94\xbe\xe5\x9c\xb0\xe5\x9d\x80\n        self.videoUrl = None\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xae\x9a\xe6\x97\xb6\xe5\x99\xa8\n        self.timer = None\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x92\xad\xe6\x94\xbe\xe5\x99\xa8\n        self.video = None\n        # \xe6\x80\xbb\xe5\xb8\xa7\xe6\x95\xb0\n        self.totalFrameNum = None\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xb8\xa7\xe6\x95\xb0\n        self.fps = None\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\xaf\x8f\xe7\xa7\x92\xe7\xad\x89\xe5\xbe\x85\xe6\x97\xb6\xe9\x97\xb4\n        self.waitTime = None\n\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        self.initUI()\n        self.center()\n\n    def initUI(self):\n        # \xe8\xb7\x9fUI\xe6\x9c\x89\xe5\x85\xb3\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\n        self.setWindowTitle(""VideoPlayer"")\n        self.resize(1280, 720)\n        self.setWindowIcon(QIcon(\'icon/video.ico\'))\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe7\x95\x8c\xe9\x9d\xa2\xe5\xb8\x83\xe5\xb1\x80\n        Layout = QVBoxLayout()\n        layout_button = QHBoxLayout()\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe8\xa7\x86\xe9\xa2\x91\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe7\xbb\x84\xe4\xbb\xb6img_label\n        self.img_label = QLabel(""\xe8\xa7\x86\xe9\xa2\x91"")\n        self.img_label.setScaledContents(True)\n        self.img_label.setAlignment(Qt.AlignCenter)\n        Img = QImage(\'1.jpg\').scaled(1280, 720)\n        pixImg = QPixmap.fromImage(Img)\n        self.img_label.setPixmap(pixImg)\n        self.img_label.resize(1280, 720)\n        Layout.addWidget(self.img_label)\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x97\xe5\xb9\x95\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe7\xbb\x84\xe4\xbb\xb6subtext_label\n        self.subtext_label = QLineEdit(""\xe5\xad\x97\xe5\xb9\x95"")\n        self.subtext_label.setAlignment(Qt.AlignCenter)\n        self.subtext_label.setFont(QFont(\'Arial\', 18))\n        self.subtext_label.setStyleSheet(\'background - color: rgb(0, 0, 0)\')\n        self.subtext_label.adjustSize()\n        Layout.addWidget(self.subtext_label)\n\n        # \xe6\x8c\x89\xe9\x92\xae\xe5\xb8\x83\xe5\xb1\x80\n        self.btn_open = QPushButton(""\xe6\x89\x93\xe5\xbc\x80"")\n        self.btn_open.setIcon(QIcon(\'icon/open_button.ico\'))\n        self.btn_open.clicked.connect(self.open_button)\n        self.btn_open.clicked.connect(self.statusChange)\n\n        self.btn_play = QPushButton(""\xe6\x92\xad\xe6\x94\xbe"")\n        self.btn_play.setIcon(QIcon(\'icon/play_button.ico\'))\n        self.btn_play.clicked.connect(self.play_button)\n        self.btn_play.clicked.connect(self.statusChange)\n\n        self.btn_pause = QPushButton(""\xe6\x9a\x82\xe5\x81\x9c"")\n        self.btn_pause.setIcon(QIcon(\'icon/stop_button.ico\'))\n        self.btn_pause.clicked.connect(self.pause_button)\n        self.btn_pause.clicked.connect(self.statusChange)\n\n        self.btn_extractSubtitle = QPushButton(""\xe5\xaf\xbc\xe5\x87\xba\xe5\xad\x97\xe5\xb9\x95"")\n        self.btn_extractSubtitle.setIcon(QIcon(""icon/btn_extractSubtitle.ico""))\n        self.btn_extractSubtitle.clicked.connect(self.extractSubtitle)\n\n        self.statusBar().showMessage(""\xe6\x89\x93\xe5\xbc\x80\xe8\xa7\x86\xe9\xa2\x91\xe5\xbc\x80\xe5\xa7\x8b\xe6\x92\xad\xe6\x94\xbe"")\n\n        # \xe5\xb0\x86\xe5\x88\x9b\xe5\xbb\xba\xe5\xa5\xbd\xe7\x9a\x84\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xbf\x9b\xe6\x8c\x89\xe9\x92\xae\xe5\xb8\x83\xe5\xb1\x80\n        layout_button.addWidget(self.btn_open)\n        layout_button.addWidget(self.btn_play)\n        layout_button.addWidget(self.btn_pause)\n        layout_button.addWidget(self.btn_extractSubtitle)\n        Layout.addLayout(layout_button)\n\n        # \xe5\xb0\x86\xe5\x88\x9b\xe5\xbb\xba\xe5\xa5\xbd\xe7\x9a\x84\xe5\xb8\x83\xe5\xb1\x80\xe5\x8a\xa0\xe8\xbd\xbd\xe8\xbf\x9b\xe4\xb8\xbb\xe7\xa8\x8b\xe5\xba\x8f\n        mainFrame = QWidget()\n        mainFrame.setLayout(Layout)\n        self.setCentralWidget(mainFrame)\n\n    def statusChange(self):\n        # \xe5\xbd\x93\xe6\x8c\x89\xe4\xb8\x8b\xe6\x89\x93\xe5\xbc\x80\xef\xbc\x8c\xe6\x92\xad\xe6\x94\xbe\xef\xbc\x8c\xe6\x9a\x82\xe5\x81\x9c\xef\xbc\x8c\xe4\xb8\x89\xe4\xb8\xaa\xe6\x8c\x89\xe9\x92\xae\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe8\xa7\xa6\xe5\x8f\x91\n        # \xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\xba0\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb9\x8b\xe5\x89\x8d\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbb\xbb\xe4\xbd\x95\xe6\x96\x87\xe4\xbb\xb6\xe6\x89\x93\xe5\xbc\x80\n        if self.STATUS == 0:\n            # \xe8\x8b\xa5\xe5\xad\x97\xe5\xb9\x95\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\xaa\xe5\xb0\x91\xe5\xb0\xb1\xe5\x85\x88\xe7\xbc\x93\xe5\x86\xb2\n            if len(self.subtext_Dict) < 5:\n                self.statusBar().showMessage(""\xe7\xbc\x93\xe5\x86\xb2\xe4\xb8\xad....,\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x90\x8e\xe9\x87\x8d\xe8\xaf\x95"", 5000)\n                return None\n            self.statusBar().showMessage(""\xe6\x89\x93\xe5\xbc\x80\xe8\xa7\x86\xe9\xa2\x91\xe6\x88\x96\xe5\xbc\x80\xe5\xa7\x8b\xe6\x92\xad\xe6\x94\xbe"", 5000)\n        elif self.STATUS == 1:\n            self.statusBar().showMessage(""\xe8\xa7\x86\xe9\xa2\x91\xe5\xb7\xb2\xe6\x9a\x82\xe5\x81\x9c....."", 5000)\n        elif self.STATUS == 2:\n            self.statusBar().showMessage(""\xe8\xa7\x86\xe9\xa2\x91\xe5\xb7\xb2\xe6\x92\xad\xe6\x94\xbe....."", 5000)\n\n    def open_button(self):\n        # \xe6\x89\x93\xe5\xbc\x80\xe6\x8c\x89\xe9\x92\xae\xe7\x9a\x84\xe7\xbb\x91\xe5\xae\x9a\xe4\xba\x8b\xe4\xbb\xb6\n        image_file, _ = QFileDialog.getOpenFileName(self, \'\xe6\x89\x93\xe5\xbc\x80\xe8\xa7\x86\xe9\xa2\x91\', \'\', \'\xe8\xa7\x86\xe9\xa2\x91\xe6\x96\x87\xe4\xbb\xb6 (*.mp4 *.mov *.avi *.mkv)\')\n        if image_file == """":\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xa7\xa6\xe5\x8f\x91\xe5\x90\x8e\xe5\x8f\x88\xe6\xb2\xa1\xe9\x80\x89\xe6\x8b\xa9\xe6\x96\x87\xe4\xbb\xb6\xe5\xb0\xb1\xe8\xbf\x94\xe5\x9b\x9e\n            return None\n        else:\n            # \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe7\xac\xac\xe4\xba\x8c\xe6\xac\xa1\xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe6\x98\xaf\xe5\xb0\xb1\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe8\xae\xbereset\n            if self.STATUS > 0:\n                self.reset()\n            print(image_file)\n            # \xe6\xa0\xb9\xe6\x8d\xae\xe8\xaf\xbb\xe5\x85\xa5\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n            self.videoUrl = image_file\n            # \xe8\xae\xbe\xe7\xbd\xae\xe8\xae\xa1\xe6\x97\xb6\xe5\x99\xa8\n            self.timer = QTimer()\n            # \xe9\x80\x9a\xe8\xbf\x87opencv\xe8\xaf\xbb\xe5\x8f\x96\xe8\xa7\x86\xe9\xa2\x91\n            self.video = cv.VideoCapture(self.videoUrl)\n            # \xe8\xae\xbe\xe7\xbd\xae\xe6\x80\xbb\xe5\xb8\xa7\xe6\x95\xb0\xef\xbc\x8c\xe5\xb8\xa7\xe6\x95\xb0\xe7\x8e\x87\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe8\xae\xa1\xe6\x97\xb6\xe5\x99\xa8\xe6\xaf\x8f\xe6\xac\xa1\xe7\xad\x89\xe5\xbe\x85\xe6\x97\xb6\xe9\x97\xb4\xe5\x92\x8c\xe5\x90\xaf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\n            self.totalFrameNum = self.video.get(7)\n            self.fps = self.video.get(cv.CAP_PROP_FPS)\n            self.waitTime = int((1 / self.fps) * 1000)\n            self.timer.timeout.connect(self.show_image)\n            # \xe6\x9b\xb4\xe6\x96\xb0\xe5\xbd\x93\xe5\x89\x8d\xe7\x9a\x84\xe7\x8a\xb6\xe6\x80\x81\n            self.STATUS = 1\n            # \xe5\x88\x9b\xe5\xbb\xba\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\xbe\xe5\x83\x8f\xe5\xad\x97\xe5\xb9\x95\xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\x86\xe5\x89\xb2\xe8\xaf\x86\xe5\x88\xab\xe6\x93\x8d\xe4\xbd\x9c\n            ImgPro = Img_Process(self.videoUrl, self.subtext_Dict)\n            self.ThreadList.append(ImgPro)\n            ImgPro.start()\n\n    def show_image(self):\n        # \xe6\xad\xa4\xe5\x87\xbd\xe6\x95\xb0\xe7\x94\xb1timer\xe8\xae\xa1\xe6\x97\xb6\xe5\x99\xa8\xe8\xb0\x83\xe7\x94\xa8\n        # \xe4\xbb\x8e\xe8\xa7\x86\xe9\xa2\x91\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe5\xb8\xa7\xe5\x9b\xbe\xe5\x83\x8f\n        success, frame = self.video.read()\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbd\x8d\xe7\xbd\xae\xe7\xb4\xa2\xe5\xbc\x95\n        index = self.video.get(cv.CAP_PROP_POS_FRAMES)\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xaf\xbb\xe5\x8f\x96\xe6\x88\x90\xe5\x8a\x9f\n        if success:\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe9\x95\xbf\xe5\xae\xbd\n            height, width = frame.shape[:2]\n            # opencv\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe5\x9b\xbe\xe5\x83\x8f\xe9\x80\x9a\xe9\x81\x93\xe6\x98\xafBGR\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe4\xb8\xbaRGB\n            rgb = cv.cvtColor(frame, cv.COLOR_BGR2RGB)\n            # \xe5\xb0\x86\xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\xb0\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\x88\xb0\xe9\x9d\xa2\xe6\x9d\xbf\xe4\xb8\x8a\n            Image = QImage(rgb[:], width, height, QImage.Format_RGB888)\n            pixImg = QPixmap.fromImage(Image.scaled(1280, 720))\n            self.img_label.setPixmap(pixImg)\n\n            # \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe5\xad\x97\xe5\xb9\x95\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe5\xb8\xa7\xe5\xad\x98\xe5\x9c\xa8\xe5\xad\x97\xe5\xb9\x95\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x86\xe5\xad\x97\xe5\xb9\x95\xe6\x98\xbe\xe7\xa4\xba\xe5\x87\xba\xe6\x9d\xa5\n            if index in self.subtext_Dict:\n                self.subtext_label.setText(self.subtext_Dict[index])\n\n        else:\n            # \xe6\x92\xad\xe6\x94\xbe\xe5\xa4\xb1\xe8\xb4\xa5\xe6\x88\x96\xe6\x92\xad\xe6\x94\xbe\xe5\xae\x8c\xe6\xaf\x95\n            self.reset()\n\n    def play_button(self):\n        # \xe6\x92\xad\xe6\x94\xbe\xe6\x8c\x89\xe9\x92\xae\xe7\xbb\x91\xe5\xae\x9a\xe4\xba\x8b\xe4\xbb\xb6\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xa7\x86\xe9\xa2\x91\xe6\x8d\x95\xe6\x8d\x89\xe5\x99\xa8\xef\xbc\x8c\xe8\xae\xa1\xe6\x97\xb6\xe5\x99\xa8\xef\xbc\x8c\xe8\xa7\x86\xe9\xa2\x91\xe5\x9c\xb0\xe5\x9d\x80\xe6\x9c\x89\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe8\xbf\x98\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbb\xbb\xe4\xbd\x95\xe8\xa7\x86\xe9\xa2\x91\xe5\x8a\xa0\xe8\xbd\xbd\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xb0\x83\xe7\x94\xa8\xe4\xb8\x80\xe6\xac\xa1\xe6\x89\x93\xe5\xbc\x80\xe6\x8c\x89\xe9\x92\xae\xe7\x9a\x84\xe7\xbb\x91\xe5\xae\x9a\xe4\xba\x8b\xe4\xbb\xb6\n        if self.video == None or self.timer == None or self.videoUrl == None:\n            self.open_button()\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\xba0\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe5\xbd\x93\xe5\x89\x8d\xe6\xb2\xa1\xe6\x9c\x89\xe6\x92\xad\xe6\x94\xbe\xe4\xbb\xbb\xe4\xbd\x95\xe6\x96\x87\xe4\xbb\xb6\n        if self.STATUS == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x97\xe5\xb9\x95\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\x8d\xe5\xa4\x9f\xe5\xa4\x9a\xef\xbc\x8c\xe5\xb0\xb1\xe5\x85\x88\xe7\xad\x89\xe7\xad\x89\n            if len(self.subtext_Dict) < 5:\n                self.statusBar().showMessage(""\xe7\xbc\x93\xe5\x86\xb2\xe4\xb8\xad....,\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x90\x8e\xe9\x87\x8d\xe8\xaf\x95"", 5000)\n                return None\n\n            # \xe5\xad\x97\xe5\xb9\x95\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\x9f\xe5\xa4\x9a\xe4\xba\x86\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x92\xad\xe6\x94\xbe\xe4\xba\x86\n            self.timer.start(self.waitTime)\n            self.STATUS = 2\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\xba1 \xe8\xa1\xa8\xe7\xa4\xba\xe6\x98\xaf\xe6\x9a\x82\xe5\x81\x9c\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c\xe6\x8a\x8a\xe8\xae\xa1\xe6\x97\xb6\xe5\x99\xa8\xe5\xbc\x80\xe5\x90\xaf\xef\xbc\x8c\xe5\x86\x8d\xe6\x9b\xb4\xe6\x96\xb0\xe7\x8a\xb6\xe6\x80\x81\n        elif self.STATUS == 1:\n            self.timer.start(self.waitTime)\n            self.STATUS = 2\n\n        # \xe5\x85\xb6\xe4\xbb\x96\xe6\x83\x85\xe5\x86\xb5\xe6\xaf\x94\xe5\xa6\x82\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\xba2\xe7\x9a\x84\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c\xe4\xb8\x8d\xe4\xba\x88\xe7\x90\x86\xe4\xbc\x9a\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x9c\xac\xe6\x9d\xa5\xe5\xb0\xb1\xe5\x9c\xa8\xe6\x92\xad\xe6\x94\xbe\xe7\x8a\xb6\xe6\x80\x81\n        else:\n            return None\n\n    def pause_button(self):\n        # \xe6\x9a\x82\xe5\x81\x9c\xe6\x8c\x89\xe9\x92\xae\xe7\x9a\x84\xe7\xbb\x91\xe5\xae\x9a\xe5\x87\xbd\xe6\x95\xb0\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe5\x9c\xa8\xe6\x92\xad\xe6\x94\xbe\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x86\xe8\xae\xa1\xe6\x97\xb6\xe5\x99\xa8\xe5\x81\x9c\xe6\xad\xa2\xef\xbc\x8c\xe5\xb9\xb6\xe6\x9b\xb4\xe6\x96\xb0\xe7\x8a\xb6\xe6\x80\x81\xe3\x80\x82\n        if self.STATUS == 2:\n            self.timer.stop()\n            self.STATUS = 1\n\n        # \xe5\x85\xb6\xe4\xbb\x96\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8d\xe4\xba\x88\xe7\x90\x86\xe4\xbc\x9a\n        else:\n            return None\n\n    def extractSubtitle(self):\n\n        # \xe5\x88\xa4\xe6\x96\xad\xe5\xad\x97\xe5\xb9\x95\xe5\xa4\x84\xe7\x90\x86\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe5\x85\xa8\xe7\xbb\x93\xe6\x9d\x9f\n        for thread in self.ThreadList:\n            if not thread.isDone():\n                QMessageBox.about(self, \'\xe6\x8f\x90\xe7\xa4\xba\', \'\xe8\xaf\xb7\xe7\xad\x89\xe5\xbe\x85\xe5\xad\x97\xe5\xb9\x95\xe5\x85\xa8\xe9\x83\xa8\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xae\x8c\xe6\xaf\x95\')\n                return None\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe4\xbf\x9d\xe5\xad\x98\xe4\xbd\x8d\xe7\xbd\xae\n        filename, _ = QFileDialog.getSaveFileName(self, \'\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\', \'\')\n        if filename == """":\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xa7\xa6\xe5\x8f\x91\xe5\x90\x8e\xe5\x8f\x88\xe6\xb2\xa1\xe9\x80\x89\xe6\x8b\xa9\xe6\x96\x87\xe4\xbb\xb6\xe5\xb0\xb1\xe8\xbf\x94\xe5\x9b\x9e\n            return None\n        file_path = filename if (filename[-4:] == \'.srt\') else filename + \'.srt\'\n        # print(file_path)\n\n        # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\x99\xe5\x85\xa5\n        with open(file_path, \'w\') as f:\n            # \xe5\x85\x88\xe8\x8e\xb7\xe5\x8f\x96\xe5\xad\x97\xe5\xb9\x95\xe5\xad\x97\xe5\x85\xb8\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89key,sorted\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xaf\xe6\x89\x80\xe6\x9c\x89\xe6\x8e\x92\xe5\xa5\xbd\xe5\xba\x8f\xe7\x9a\x84key\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\n            sort_subtext_key = sorted(self.subtext_Dict)\n            # \xe8\xae\xb0\xe5\xbd\x95\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\n            time_start = None\n            time_start_key = None\n            time_end = None\n            index = -1\n\n            # \xe5\xaf\xb9\xe5\xad\x97\xe5\xb9\x95\xe5\xad\x97\xe5\x85\xb8\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x81\x8d\xe5\x8e\x86\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\xe5\xb9\x95\xe7\xa1\xae\xe5\xae\x9a\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\n            for key in sort_subtext_key:\n                index += 1\n                # print(key)\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x88\x9a\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb8\xbaNone\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\xb9\x95\n                if time_start == None or time_start_key == None:\n                    print(""if"")\n                    # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\xb9\x95\xe5\xb0\xb1\xe5\x85\x88\xe8\xb5\x8b\xe5\x80\xbc\xe7\xbb\x99time_start\n                    time_start = self.formatTime(key)\n                    time_start_key = key\n                    continue\n\n                # \xe6\x8c\x89srt\xe5\xad\x97\xe5\xb9\x95\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\x99\xe5\x85\xa5\n                time_end = self.formatTime(key)\n                f.write(""%d\\n"" % index)\n                f.write(""%s --> %s\\n"" % (time_start, time_end))\n                f.write(""%s\\n"" % self.subtext_Dict[time_start_key])\n                f.write(""\\n"")\n                # print(index)\n                time_start_key = key\n                time_start = time_end\n\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\xb9\x95\n            time_final = self.formatTime(self.totalFrameNum)\n            f.write(""%d\\n"" % (len(self.subtext_Dict) + 1))\n            f.write(""%s --> %s\\n"" % (time_end, time_final))\n            f.write(""%s\\n"" % self.subtext_Dict[sort_subtext_key[-1]])\n            f.write(""\\n"")\n        QMessageBox.about(self, \'\xe6\x93\x8d\xe4\xbd\x9c\xe6\x88\x90\xe5\x8a\x9f\', \'\xe6\x88\x90\xe5\x8a\x9f\xe5\xaf\xbc\xe5\x87\xbasrt\xe5\xad\x97\xe5\xb9\x95\')\n\n    def formatTime(self, frameNum):\n        # \xe8\xbe\x93\xe5\x85\xa5\xe5\xb8\xa7\xe6\x95\xb0\xef\xbc\x8c\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe4\xb8\xbaH:M:S\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x97\xe5\xb9\x95\xe5\x88\xb6\xe4\xbd\x9c\n        # \xe6\x97\xb6\xe9\x97\xb4= \xe5\xb8\xa7\xe6\x95\xb0/\xe5\xb8\xa7\xe6\x95\xb0\xe7\x8e\x87\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe6\x98\xafs\n        t = frameNum / self.fps\n        H, M, S, s = 0, 0, 0, 0\n        # \xe8\x8e\xb7\xe5\x8f\x96H\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n        while t >= 3600:\n            t -= 3600\n            H += 1\n\n        # \xe8\x8e\xb7\xe5\x8f\x96M\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n        while t >= 60:\n            t -= 60\n            M += 1\n\n        # \xe8\x8e\xb7\xe5\x8f\x96S\xe5\x92\x8cs\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n        S = int(t)\n        s = int((t - S) * 1000)\n\n        # \xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe8\xbf\x94\xe5\x9b\x9e\n        return ""%02d:%02d:%02d,%03d"" % (H, M, S, s)\n\n    def reset(self):\n        if self.timer is not None:\n            self.timer.stop()\n        if self.video is not None:\n            self.video.release()\n        self.timer = None\n        self.video = None\n        self.STATUS = 0\n        self.subtext_Dict = {}\n        for thread in self.ThreadList:\n            thread.close()\n\n    def center(self):\n        # \xe8\xae\xa9\xe7\xaa\x97\xe5\x8f\xa3\xe5\xb1\x85\xe4\xb8\xad\n        # (\xe5\xb1\x8f\xe5\xb9\x95\xe9\x95\xbf\xe5\xba\xa6-\xe7\xaa\x97\xe5\x8f\xa3\xe9\x95\xbf\xe5\xba\xa6)/2 \xe5\xbe\x97\xe5\x88\xb0\xe9\x95\xbf\xe5\xba\xa6\xe5\x9d\x90\xe6\xa0\x87\xef\xbc\x8c\xe9\xab\x98\xe5\xba\xa6\xe5\x90\x8c\xe7\x90\x86\n        screen = QDesktopWidget().screenGeometry()\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\x9d\x90\xe6\xa0\x87\xe7\xb3\xbb\n        size = self.geometry()\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb0\xe5\x9d\x90\xe6\xa0\x87\xe4\xbd\x8d\xe7\xbd\xae\n        newLeft = (screen.width() - size.width()) / 2\n        newTop = (screen.height() - size.height()) / 3\n\n        self.move(int(newLeft), int(newTop))\n\n\nclass Img_Process(threading.Thread):\n    # \xe7\x94\xa8\xe4\xba\x8e\xe5\xa4\x84\xe7\x90\x86\xe6\x8c\x87\xe5\xae\x9a\xe8\xa7\x86\xe9\xa2\x91\xe7\x9a\x84\xe5\xad\x97\xe5\xb9\x95\xe6\xa3\x80\xe6\xb5\x8b\xef\xbc\x8c\xe5\xad\x97\xe5\xb9\x95\xe5\x88\x86\xe5\x89\xb2\xef\xbc\x8c\xe5\xad\x97\xe5\xb9\x95\xe8\xaf\x86\xe5\x88\xab\xe5\x8a\x9f\xe8\x83\xbd\n    def __init__(self, videoUrl, Queue: dict):\n        # \xe4\xbc\xa0\xe5\x85\xa5videoUrl\xe4\xb8\xba\xe8\xa7\x86\xe9\xa2\x91\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x8cQueue\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xba\xe5\xad\x97\xe6\xaf\x8d\xe5\xad\x98\xe6\x94\xbe\xe5\xad\x97\xe5\x85\xb8\n        super().__init__()\n        # \xe4\xb8\xb4\xe7\x95\x8c\xe8\xb5\x84\xe6\xba\x90index\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe5\xbd\x93\xe5\x89\x8d\xe6\xa3\x80\xe6\xb5\x8b\xe5\xb8\xa7\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n        self.Index = 0\n        # \xe9\x80\x9a\xe8\xbf\x87opencv\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa7\x86\xe9\xa2\x91\xe6\xa3\x80\xe6\xb5\x8b\xe5\x99\xa8\n        self.video = cv.VideoCapture(videoUrl)\n        self.video.set(cv.CAP_PROP_POS_FRAMES, self.Index)\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x80\xbb\xe5\xb8\xa7\xe6\x95\xb0\n        self.totalFrameNum = self.video.get(7)\n        self.Queue_subtext = Queue\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xb8\xa7\xe4\xb9\x8b\xe9\x97\xb4\xe5\xad\x97\xe5\xb9\x95\xe6\xa3\x80\xe6\xb5\x8b\xe7\x9a\x84\xe5\xb8\xa7\xe6\xad\xa5\xe9\x95\xbf\n        self.step = 5\n        # \xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8cTrue\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x8cFalse\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe8\x83\xbd\xe8\xbf\x90\xe8\xa1\x8c\n        self.RunStatus = True\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xa4\x84\xe7\x90\x86\xe5\xae\x8c\n        self.isAllDone = False\n\n    @vthread.thread(5)\n    def run(self):\n        # \xe4\xb8\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa85\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8a\xa0\xe9\x80\x9f\xe5\xa4\x84\xe7\x90\x86\n        # \xe6\x97\xa0\xe9\x99\x90\xe5\xbe\xaa\xe7\x8e\xaf\xe7\x9b\xb4\xe5\x88\xb0\xe5\xa4\x84\xe7\x90\x86\xe5\xae\x8c\xe6\x89\x80\xe6\x9c\x89\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe9\x99\xa4\xe9\x9d\x9e\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\xba\xe4\xb8\x8d\xe5\x8f\xaf\xe8\xbf\x90\xe8\xa1\x8c\n        while True and self.RunStatus:\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe8\xa7\x86\xe9\xa2\x91\xe5\xb8\xa7\xe6\x95\xb0\n            success, frame_start, frame_end, index = self.getFrame()\n\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\xbaNone \xe8\xaf\xb4\xe6\x98\x8e\xe8\xa7\x86\xe9\xa2\x91\xe5\xb7\xb2\xe7\xbb\x8f\xe7\x9c\x8b\xe5\xae\x8c\xe4\xba\x86\n            if not success:\n                break\n\n            # \xe6\xa3\x80\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\x98\xe6\x8d\xa2\n            isChanged = SubText_Detection(frame_start, frame_end)\n            # print(index, "" "", index + 5, "" "", isChanged)\n\n            # \xe6\xb2\xa1\xe6\x9c\x89\xe6\x94\xb9\xe5\x8f\x98\xe7\x9a\x84\xe8\xaf\x9d\xe5\xb0\xb1\xe4\xb8\x8d\xe7\x94\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8b\xe4\xb8\x80\xe6\xad\xa5\xe6\x93\x8d\xe4\xbd\x9c\n            if not isChanged:\n                continue\n\n            # \xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\xbe\xe5\x83\x8f\xe5\x88\x86\xe5\x89\xb2\n            success, Division_Pic_npArray, blank_index_list = Image_Division(frame_end)\n\n            # \xe8\xaf\xb4\xe6\x98\x8e\xe8\xbf\x99\xe9\x87\x8c\xe6\xb2\xa1\xe5\xad\x97\xe5\xb9\x95\n            if not success:\n                self.Queue_subtext[index + 5] = ""   ""\n                continue\n\n            # \xe8\xaf\x86\xe5\x88\xab\n            Recognized_Str_list = Recognization(Division_Pic_npArray)\n\n            # \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x8a\xa0\xe7\xa9\xba\xe6\xa0\xbc\n            Final_Str = self.StrAddBlank(Recognized_Str_list, blank_index_list)\n\n            # \xe8\xb0\x83\xe7\x94\xa8\xe7\x99\xbe\xe5\xba\xa6\xe7\xbf\xbb\xe8\xaf\x91API\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbf\xbb\xe8\xaf\x91\n            # Translated_Str = Translation(Final_Str)\n\n            # \xe5\xb0\x86\xe7\xbf\xbb\xe8\xaf\x91\xe5\xa5\xbd\xe7\x9a\x84\xe5\xad\x97\xe5\xb9\x95\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xbf\x9b\xe5\xad\x97\xe5\xb9\x95\xe5\xad\x97\xe5\x85\xb8\xe9\x87\x8c\n            self.Queue_subtext[index + 5] = Final_Str\n\n            # print(blank_index_list)\n            print(Final_Str)\n            print(len(Final_Str))\n        # print(Translated_Str)\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe7\x8a\xb6\xe6\x80\x81\n        self.isAllDone = True\n        print(""-----Thread Quit-----"")\n\n    def close(self):\n        # \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8d\xe5\x8f\xaf\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x8c\xe4\xbd\xbf\xe5\xbe\x97run\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x80\xe5\x90\xaf\xe7\x9a\x84\xe7\xba\xbf\xe7\xa8\x8b\xe4\xb8\xbb\xe5\x8a\xa8\xe9\x80\x80\xe5\x87\xba\n        # \xe9\x81\xbf\xe5\x85\x8d\xe5\xbc\xba\xe5\x88\xb6\xe7\xbb\x93\xe6\x9d\x9f\xe8\xbf\x9b\xe7\xa8\x8b\xe8\x80\x8c\xe9\x80\xa0\xe6\x88\x90\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\n        self.RunStatus = False\n\n    def isDone(self):\n        return self.isAllDone\n\n    @vthread.atom\n    def getFrame(self):\n        # \xe5\xaf\xb9\xe4\xb8\xb4\xe7\x95\x8c\xe8\xb5\x84\xe6\xba\x90index\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\xb7\xb2\xe5\x8a\xa0\xe4\xb8\x8a\xe9\x94\x81\xef\xbc\x8c\xe5\x90\x8c\xe6\x97\xb6\xe5\x8f\xaa\xe5\x85\x81\xe8\xae\xb8\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xbf\xe7\xa8\x8b\xe8\xae\xbf\xe9\x97\xae\xe6\xad\xa4\xe5\x87\xbd\xe6\x95\xb0\n\n        # \xe8\xb6\x85\xe8\xbf\x87\xe8\xa7\x86\xe9\xa2\x91\xe5\xb8\xa7\xe6\x95\xb0\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe7\xbb\x93\xe6\x9d\x9f\n        if self.Index + 5 > self.totalFrameNum:\n            return False, None, None, None\n\n        # \xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\x8d\xe7\xbd\xae\xe5\xb8\xa7\xe4\xb8\xba\xe5\xb8\xa7\xe8\xb5\xb7\xe7\x82\xb9\n        self.video.set(cv.CAP_PROP_POS_FRAMES, self.Index)\n        success, frame_start = self.video.read()\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\x8d\xe7\xbd\xae\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xb8\x80\xe5\x80\x8d\xe6\xad\xa5\xe9\x95\xbf\n        self.Index += self.step\n        self.video.set(cv.CAP_PROP_POS_FRAMES, self.Index)\n\n        # \xe5\x8f\x96\xe5\xa2\x9e\xe5\x8a\xa0\xe6\xad\xa5\xe9\x95\xbf\xe5\x90\x8e\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\xb8\xa7\xe4\xb8\xba\xe5\xb8\xa7\xe7\xbb\x88\xe7\x82\xb9\n        success, frame_end = self.video.read()\n\n        return True, frame_start, frame_end, self.Index - self.step\n\n    def StrAddBlank(self, Recognized_Str_list: list, blank_index_list: list):\n        # \xe4\xb8\xba\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\x88\x97\xe8\xa1\xa8\xe5\xa1\xab\xe5\x85\x85\xe7\xa9\xba\xe6\xa0\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        for index in range(len(blank_index_list)):\n            Recognized_Str_list.insert(blank_index_list[index] + 1 + (index), "" "")\n        return ("""".join(Recognized_Str_list))\n\n\nif __name__ == \'__main__\':\n    try:\n        app = QApplication(sys.argv)\n        main = VideoPlayer()\n        main.show()\n        sys.exit(app.exec_())\n    except Exception:\n        traceback.print_exc()\n\n'"
VideoSubScanPlayer/__init__.py,0,b'# coding=utf-8\n'
VideoSubScanPlayer/baidu_translator.py,0,"b'# coding=utf-8\n\nimport requests\nimport hashlib\nimport random\nimport json\nfrom retrying import retry\n\n\n@retry(stop_max_attempt_number=5)\ndef Translation(Str):\n    """"""\n    \xe7\x99\xbe\xe5\xba\xa6\xe7\xbf\xbb\xe8\xaf\x91\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe6\xb3\xa8\xe5\x86\x8c\xe7\x99\xbe\xe5\xba\xa6\xe4\xba\x91\xe6\x8e\xa5\xe5\x8f\xa3\xe4\xbd\xbf\xe7\x94\xa8\n    \xe8\x8b\xb1\xe8\xaf\xad\xe8\xbd\xac\xe4\xb8\xad\xe6\x96\x87\n    """"""\n\n    appid = \'\'  # \xe5\xa1\xab\xe5\x86\x99\xe4\xbd\xa0\xe7\x9a\x84appid\n    secretKey = \'\'  # \xe5\xa1\xab\xe5\x86\x99\xe4\xbd\xa0\xe7\x9a\x84\xe5\xaf\x86\xe9\x92\xa5\n\n    httpClient = None\n    myurl = \'http://api.fanyi.baidu.com/api/trans/vip/translate\'\n    fromLang = \'en\'  # \xe5\x8e\x9f\xe6\x96\x87\xe8\xaf\xad\xe7\xa7\x8d\n    toLang = \'zh\'  # \xe8\xaf\x91\xe6\x96\x87\xe8\xaf\xad\xe7\xa7\x8d\n    salt = random.randint(32768, 65536)\n    q = Str\n    sign = appid + q + str(salt) + secretKey\n    sign = hashlib.md5(sign.encode()).hexdigest()\n    myurl = myurl + \'?appid=\' + appid + \'&q=\' + q + \'&from=\' + fromLang + \'&to=\' + toLang + \'&salt=\' + str(\n        salt) + \'&sign=\' + sign\n\n    response = requests.get(myurl)\n    result = json.loads(response.text)\n\n    return result[\'trans_result\'][0][\'dst\']\n\n\nif __name__ == \'__main__\':\n    ret = Translation(""   "")\n    print(ret)\n'"
VideoSubScanPlayer/expand_dataset.py,3,"b'# coding=utf-8\nimport cv2 as cv\nimport numpy as np\nimport random\nfrom PIL import Image\nimport os\n""""""\n\xe5\x9c\xa8\xe5\x8e\x9f\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe4\xb8\x8a\xe6\x89\xa9\xe5\x85\x85\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n\xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\xba\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xe5\x83\x8f\xef\xbc\x8c\xe5\x89\x8d\xe6\x99\xaf\xe4\xb8\xba\xe7\x99\xbd\xe8\x89\xb2\xef\xbc\x8c\xe8\x83\x8c\xe6\x99\xaf\xe4\xb8\xba\xe9\xbb\x91\xe8\x89\xb2\n""""""\n\n\ndef dilate(img, num):\n\t# \xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe5\x83\x8f\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe8\x86\xa8\xe8\x83\x80\xe6\x95\x88\xe6\x9e\x9c\n\t# \xe7\x9f\xa9\xe5\xbd\xa2\xe7\xbb\x93\xe6\x9e\x84\xe5\x85\x83\n\tsize = (num,num)\n\tkernel_rect = cv.getStructuringElement(cv.MORPH_RECT, size)\n\t# \xe6\xa4\xad\xe5\x9c\x86\xe7\xbb\x93\xe6\x9e\x84\xe5\x85\x83\n\tkernel_ellipse = cv.getStructuringElement(cv.MORPH_ELLIPSE, size)\n\t# \xe5\x8d\x81\xe5\xad\x97\xe5\xbd\xa2\xe7\xbb\x93\xe6\x9e\x84\xe5\x85\x83\n\tkernel_cross = cv.getStructuringElement(cv.MARKER_CROSS, size)\n\n\tkernels = [kernel_rect, kernel_ellipse, kernel_cross]\n\n\tret = cv.dilate(img, kernel = random.sample(kernels, 1)[0])\n\treturn ret\n\ndef erode(img, num):\n\t# \xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe5\x83\x8f\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe8\x85\x90\xe8\x9a\x80\xe6\x95\x88\xe6\x9e\x9c\n\t# \xe7\x9f\xa9\xe5\xbd\xa2\xe7\xbb\x93\xe6\x9e\x84\xe5\x85\x83\n\tsize = (num, num)\n\tkernel_rect = cv.getStructuringElement(cv.MORPH_RECT, size)\n\t# \xe6\xa4\xad\xe5\x9c\x86\xe7\xbb\x93\xe6\x9e\x84\xe5\x85\x83\n\tkernel_ellipse = cv.getStructuringElement(cv.MORPH_ELLIPSE, size)\n\t# \xe5\x8d\x81\xe5\xad\x97\xe5\xbd\xa2\xe7\xbb\x93\xe6\x9e\x84\xe5\x85\x83\n\tkernel_cross = cv.getStructuringElement(cv.MARKER_CROSS, size)\n\n\tkernels = [kernel_rect, kernel_ellipse, kernel_cross]\n\n\tret = cv.erode(img, kernel = random.sample(kernels, 1)[0])\n\treturn ret\n\ndef rotate(img):\n\t# \xe5\x9b\xbe\xe5\x83\x8f\xe6\x97\x8b\xe8\xbd\xac\n\timg_info = img.shape\n\theight = img_info[0]\n\twidth = img_info[1]\n\n\tangle = random.randint(-5,5)\n\t# \xe6\x97\x8b\xe8\xbd\xac\xe7\x9f\xa9\xe9\x98\xb5,\xe4\xb8\xad\xe5\xbf\x83\xe7\x82\xb9\xef\xbc\x8c\xe8\xa7\x92\xe5\xba\xa6\xef\xbc\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe7\xb3\xbb\xe6\x95\xb0\n\tmatRotate = cv.getRotationMatrix2D((height*0.5, width*0.5), angle, 1)\n\tret = cv.warpAffine(img, matRotate, (height, width))\n\t# print(angle)\n\treturn ret\n\ndef noise(img):\n\t# \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x99\xaa\xe7\x82\xb9\n\th, w= img.shape\n\tfor i in range(random.randint(5,10)):\n\t\tx = random.randint(0,h-1)\n\t\ty = random.randint(0,w-1)\n\t\timg[x, y] = 255\n\treturn img\n\ndef offset(img):\n\t# \xe5\xb9\xb3\xe7\xa7\xbb\n\th, w = img.shape\n\tx = random.randint(-15,15)\n\ty = random.randint(-10,10)\n\t# \xe7\xa7\xbb\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\n\tmatShift = np.float32([[1, 0, x], [0, 1, y]])\n\t# \xe7\xa7\xbb\xe4\xbd\x8dAPI\n\tdst = cv.warpAffine(img, matShift, (h, w))\n\treturn dst\n\ndef scale(img):\n\t# \xe5\x9b\xbe\xe5\x83\x8f\xe7\xbc\xa9\xe6\x94\xbe\n\timg_info = img.shape\n\theight = img_info[0]\n\twidth = img_info[1]\n\n\tscale_rate = random.uniform(0.8,1.5)\n\t# \xe6\x97\x8b\xe8\xbd\xac\xe7\x9f\xa9\xe9\x98\xb5,\xe4\xb8\xad\xe5\xbf\x83\xe7\x82\xb9\xef\xbc\x8c\xe8\xa7\x92\xe5\xba\xa6\xef\xbc\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe7\xb3\xbb\xe6\x95\xb0\n\tmatRotate = cv.getRotationMatrix2D((height * 0.5, width * 0.5), 0, scale_rate)\n\tret = cv.warpAffine(img, matRotate, (height, width))\n\t# print(scale_rate)\n\treturn ret\n\ndef expand():\n\t# \xe8\x85\x90\xe8\x9a\x801-2 \xe8\x86\xa8\xe8\x83\x801-4,\xe6\x97\x8b\xe8\xbd\xac\xe5\x92\x8c\xe5\x8a\xa0\xe5\x99\xaa\xe7\x82\xb9\xe9\x9a\x8f\xe6\x9c\xba\n\tdata_dir_path = ""G:\\\\Java\xe8\xb5\x84\xe6\x96\x99\\\\Code\\\\Python\\\\digital_imgae_processing_design\\\\dataset\\\\""\n\tasciiList = [str(index) for index in range(33, 123)]\n\n\t# \xe5\x85\x88\xe8\x85\x90\xe8\x9a\x80\xe5\x92\x8c\xe8\x86\xa8\xe8\x83\x80\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\xa4\xe7\xa7\x8d\xe6\x93\x8d\xe4\xbd\x9c\xe7\x8b\xac\xe7\xab\x8b\xef\xbc\x8c\xe8\x8e\xb7\xe5\xbe\x97\xe6\x80\xbb\xe5\x85\xb121 + 21 *6 = 147\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\n\tfor numStr in asciiList:\n\t\t# \xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe5\xa6\x82dataset/a/\n\t\tsub_dir = data_dir_path + numStr + ""\\\\""\n\t\t# \xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n\t\tsub_dir_list = os.listdir(sub_dir)\n\t\t# \xe5\x9b\xa0\xe4\xb8\xba\xe5\x8e\x9f\xe6\x9d\xa5\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x9c\x89\xe7\xbc\x96\xe5\x8f\xb720\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe4\xba\x86\xef\xbc\x8c\xe7\xbc\x96\xe5\x8f\xb7\xe6\xa0\xbc\xe5\xbc\x8f numStr_index.jpg\n\t\tindex = 21\n\t\t# \xe8\x85\x90\xe8\x9a\x80 \xe5\x8f\x82\xe6\x95\xb01-2\n\t\tfor file_name in sub_dir_list:\n\t\t\tfile_dir = sub_dir + file_name\n\t\t\timg = PIL2CV(file_dir)\n\t\t\tfor num in [1,2]:\n\t\t\t\tdst_erode = erode(img,num)\n\t\t\t\tdst = CV2PIL(dst_erode)\n\t\t\t\twhile os.path.exists(sub_dir+numStr+\'_\'+str(index)+\'.jpg\'):\n\t\t\t\t\tindex += 1\n\t\t\t\tdst_path = sub_dir+numStr+\'_\'+str(index)+\'.jpg\'\n\t\t\t\tdst.save(dst_path,\'jpeg\')\n\t\t\t\tprint(dst_path)\n\n\t\t# \xe8\x86\xa8\xe8\x83\x80 \xe5\x8f\x82\xe6\x95\xb01-4\n\t\tfor file_name in sub_dir_list:\n\t\t\tfile_dir = sub_dir + file_name\n\t\t\timg = PIL2CV(file_dir)\n\t\t\tfor num in [1,2,3,4]:\n\t\t\t\tdst_dilate = dilate(img,num)\n\t\t\t\tdst = CV2PIL(dst_dilate)\n\t\t\t\twhile os.path.exists(sub_dir+numStr+\'_\'+str(index)+\'.jpg\'):\n\t\t\t\t\tindex += 1\n\t\t\t\tdst_path = sub_dir+numStr+\'_\'+str(index)+\'.jpg\'\n\t\t\t\tdst.save(dst_path,\'jpeg\')\n\t\t\t\tprint(dst_path)\n\n\t# \xe5\xaf\xb9\xe8\x85\x90\xe8\x9a\x80\xe8\x86\xa8\xe8\x83\x80\xe5\x90\x8e\xe7\x9a\x84\xe7\x85\xa7\xe7\x89\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x9a\x8f\xe6\x9c\xba\xe6\x97\x8b\xe8\xbd\xac\n\t# \xe6\x97\x8b\xe8\xbd\xac\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0147 + 147  =  294\n\tfor numStr in asciiList:\n\t\t# \xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x80\xe6\xac\xa1\xe7\x9b\xae\xe5\xbd\x95\xe5\x86\x85\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n\t\tsub_dir = data_dir_path + numStr + ""\\\\""\n\t\tsub_dir_list = os.listdir(sub_dir)\n\t\t# \xe7\xbb\xa7\xe7\xbb\xad\xe9\xa2\x84\xe5\x85\x88\xe5\xae\x9a\xe5\xa5\xbd\xe7\xbc\x96\xe5\x8f\xb7\n\t\tindex = 21\n\n\t\t# \xe5\xaf\xb9\xe8\xaf\xa5\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\n\t\tfor file_name in sub_dir_list:\n\t\t\tfile_dir = sub_dir + file_name\n\t\t\timg = PIL2CV(file_dir)\n\t\t\t# \xe6\x97\x8b\xe8\xbd\xac\n\t\t\tdst_rotate = rotate(img)\n\t\t\tdst = CV2PIL(dst_rotate)\n\t\t\twhile os.path.exists(sub_dir+numStr+\'_\'+str(index)+\'.jpg\'):\n\t\t\t\tindex += 1\n\t\t\tdst_path = sub_dir+numStr+\'_\'+str(index)+\'.jpg\'\n\t\t\tdst.save(dst_path, \'jpeg\')\n\t\t\tprint(dst_path)\n\n\t# \xe6\x97\x8b\xe8\xbd\xac\xe5\x90\x8e\xe5\x86\x8d\xe5\x8a\xa0\xe5\xb9\xb3\xe7\xa7\xbb 294 + 294 * 2 = 882\n\tfor numStr in asciiList:\n\t\t# \xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x80\xe6\xac\xa1\xe7\x9b\xae\xe5\xbd\x95\xe5\x86\x85\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n\t\tsub_dir = data_dir_path + numStr + ""\\\\""\n\t\tsub_dir_list = os.listdir(sub_dir)\n\t\t# \xe7\xbb\xa7\xe7\xbb\xad\xe9\xa2\x84\xe5\x85\x88\xe5\xae\x9a\xe5\xa5\xbd\xe7\xbc\x96\xe5\x8f\xb7\n\t\tindex = 21\n\t\t# \xe5\xaf\xb9\xe8\xaf\xa5\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\n\t\tfor i in range(2):\n\t\t\tfor file_name in sub_dir_list:\n\t\t\t\tfile_dir = sub_dir + file_name\n\t\t\t\timg = PIL2CV(file_dir)\n\t\t\t\t# \xe5\xb9\xb3\xe7\xa7\xbb\n\t\t\t\tdst_offset = offset(img)\n\t\t\t\tdst = CV2PIL(dst_offset)\n\t\t\t\twhile os.path.exists(sub_dir + numStr + \'_\' + str(index) + \'.jpg\'):\n\t\t\t\t\tindex += 1\n\t\t\t\tdst_path = sub_dir + numStr + \'_\' + str(index) + \'.jpg\'\n\t\t\t\tdst.save(dst_path, \'jpeg\')\n\t\t\t\tprint(dst_path)\n\n\t# \xe5\xb9\xb3\xe7\xa7\xbb\xe5\x90\x8e\xe7\xbc\xa9\xe6\x94\xbe 882 + 882 = 1764\n\tfor numStr in asciiList:\n\t\t# \xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x80\xe6\xac\xa1\xe7\x9b\xae\xe5\xbd\x95\xe5\x86\x85\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n\t\tsub_dir = data_dir_path + numStr + ""\\\\""\n\t\tsub_dir_list = os.listdir(sub_dir)\n\t\t# \xe7\xbb\xa7\xe7\xbb\xad\xe9\xa2\x84\xe5\x85\x88\xe5\xae\x9a\xe5\xa5\xbd\xe7\xbc\x96\xe5\x8f\xb7\n\t\tindex = 21\n\t\t# \xe5\xaf\xb9\xe8\xaf\xa5\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\n\t\tfor file_name in sub_dir_list:\n\t\t\tfile_dir = sub_dir + file_name\n\t\t\timg = PIL2CV(file_dir)\n\t\t\t# \xe7\xbc\xa9\xe6\x94\xbe\n\t\t\tdst_offset = scale(img)\n\t\t\tdst = CV2PIL(dst_offset)\n\t\t\twhile os.path.exists(sub_dir + numStr + \'_\' + str(index) + \'.jpg\'):\n\t\t\t\tindex += 1\n\t\t\tdst_path = sub_dir + numStr + \'_\' + str(index) + \'.jpg\'\n\t\t\tdst.save(dst_path, \'jpeg\')\n\t\t\tprint(dst_path)\n\n\t# \xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe5\x86\x8d\xe5\x8a\xa0\xe5\x99\xaa\xe7\x82\xb9 1764 + 1764 = 3528\n\tfor numStr in asciiList:\n\t\t# \xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x80\xe6\xac\xa1\xe7\x9b\xae\xe5\xbd\x95\xe5\x86\x85\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n\t\tsub_dir = data_dir_path + numStr + ""\\\\""\n\t\tsub_dir_list = os.listdir(sub_dir)\n\t\t# \xe7\xbb\xa7\xe7\xbb\xad\xe9\xa2\x84\xe5\x85\x88\xe5\xae\x9a\xe5\xa5\xbd\xe7\xbc\x96\xe5\x8f\xb7\n\t\tindex = 21\n\t\t# \xe5\xaf\xb9\xe8\xaf\xa5\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\n\t\tfor file_name in sub_dir_list:\n\t\t\tfile_dir = sub_dir + file_name\n\t\t\timg = PIL2CV(file_dir)\n\t\t\t# \xe5\x8a\xa0\xe5\x99\xaa\xe7\x82\xb9\n\t\t\tdst_offset = noise(img)\n\t\t\tdst = CV2PIL(dst_offset)\n\t\t\twhile os.path.exists(sub_dir + numStr + \'_\' + str(index) + \'.jpg\'):\n\t\t\t\tindex += 1\n\t\t\tdst_path = sub_dir + numStr + \'_\' + str(index) + \'.jpg\'\n\t\t\tdst.save(dst_path, \'jpeg\')\n\t\t\tprint(dst_path)\n\n\ndef PIL2CV(imgPath):\n\t# \xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe7\x89\x87\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xbaopencv\xe6\xa0\xbc\xe5\xbc\x8f\n\timage = Image.open(imgPath)\n\treturn cv.cvtColor(np.asarray(image), cv.COLOR_RGB2GRAY)\n\ndef CV2PIL(image):\n\t# \xe8\xbe\x93\xe5\x85\xa5opencv\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xbaImage\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x9b\xbe\xe7\x89\x87\n\treturn Image.fromarray(cv.cvtColor(image, cv.COLOR_BGR2RGB))\n\n\ndef test():\n\timage = Image.open(""65_1.jpg"")\n\timg = cv.cvtColor(np.asarray(image), cv.COLOR_RGB2GRAY)\n\timg = scale(img)\n\tcv.imshow(\'img\',img)\n\tcv.waitKey(0)\n\nif __name__ == \'__main__\':\n\texpand()\n\t# test()'"
VideoSubScanPlayer/font_data.py,4,"b'from PIL import Image, ImageDraw, ImageFont\nimport os\nimport cv2 as cv\nimport numpy as np\n\n""""""\n\xe6\xa0\xb9\xe6\x8d\xaefont\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\xad\xe7\x9a\x84\xe5\xad\x97\xe4\xbd\x93\xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n""""""\n\n# \xe6\xa0\xb9\xe6\x8d\xae\xe5\xad\x97\xe4\xbd\x93\xe7\x94\x9f\xe6\x88\x90\xe6\x8c\x87\xe5\xae\x9a\xe5\xad\x97\xe7\xac\xa6\ndef getInfo(img):\n\trow, col = img.shape\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xb7\xa6\xe5\x8f\xb3\xe9\x97\xb4\xe9\x9a\x94\xe4\xbf\xa1\xe6\x81\xaf\n\trowLine = np.zeros(row, np.uint8)\n\tcolLine = np.zeros(col, np.uint8)\n\t# \xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1 \xe7\x94\xa8\xe4\xba\x8e\xe7\xa1\xae\xe5\xae\x9a\xe4\xb8\x8a\xe4\xb8\x8b\xe9\x97\xb4\xe9\x9a\x94\n\tfor r in range(row):\n\t\tfor c in range(col):\n\t\t\tif img[r][c] != 0:\n\t\t\t\trowLine[r] = 1\n\t\t\t\tbreak\n\t# \xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1 \xe7\x94\xa8\xe4\xba\x8e\xe7\xa1\xae\xe5\xae\x9a\xe5\xb7\xa6\xe5\x8f\xb3\xe9\x97\xb4\xe9\x9a\x94\n\tfor c in range(col):\n\t\tfor r in range(row):\n\t\t\tif img[r][c] != 0:\n\t\t\t\tcolLine[c] = 1\n\t\t\t\tbreak\n\t# \xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xb7\xa6\xe5\x8f\xb3\xe9\xbb\x91\xe8\x89\xb2\xe9\x97\xb4\xe9\x9a\x94\n\ttop, down, left, right = 0, 0, 0, 0\n\t# print(rowLine)\n\t# print(colLine)\n\tfor i in rowLine:\n\t\tif i == 0:\n\t\t\ttop += 1\n\t\telse:\n\t\t\tbreak\n\tfor i in reversed(rowLine):\n\t\tif i == 0:\n\t\t\tdown += 1\n\t\telse:\n\t\t\tbreak\n\tfor i in colLine:\n\t\tif i == 0:\n\t\t\tleft += 1\n\t\telse:\n\t\t\tbreak\n\tfor i in reversed(colLine):\n\t\tif i == 0:\n\t\t\tright += 1\n\t\telse:\n\t\t\tbreak\n\treturn top,down,left,right\n\ndef start_to_make_data():\n\tdir = \'font/\'\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe5\xad\x97\xe4\xbd\x93\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n\tfont_name = os.listdir(dir)\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe5\xae\x8c\xe6\x95\xb4\xe5\xad\x97\xe4\xbd\x93\xe8\xb7\xaf\xe5\xbe\x84\n\tfont_list = [os.path.join(dir, file) for file in font_name]  # if file[-3:] == ""bin""]\n\t# \xe6\x8c\x87\xe5\xae\x9a\xe8\xa6\x81\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8cascii 32\xe5\x88\xb0126\n\tasciiList = [index for index in range(33, 123)]\n\t# print(strList)\n\t# print(font_name)\n\tmakeImg(font_list, asciiList)\n\ndef makeImg(fontList, asciiList):\n\t# 64 * 64 :\n\twidth = 64\n\theight = 64\n\tfor ascii_id in asciiList:\n\t\t# \xe5\x88\x9b\xe5\xbb\xba\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\n\t\tpath = os.path.abspath(\'.\')\n\t\tif os.path.exists(path + \'\\\\\' + \'dataset\\\\\' + str(ascii_id)) == False:\n\t\t\tos.mkdir(path + \'\\\\\' + \'dataset\\\\\' + str(ascii_id))\n\n\t\t# \xe6\xa0\xb9\xe6\x8d\xae\xe5\xad\x97\xe4\xbd\x93\xe5\x88\x97\xe8\xa1\xa8\xe5\x88\x9b\xe5\xbb\xba\xe6\x95\xb0\xe6\x8d\xae\n\t\tfor index, fontName in enumerate(fontList):\n\t\t\timage = Image.new(\'RGB\', (width, height), (0, 0, 0))\n\t\t\t# \xe5\x88\x9b\xe5\xbb\xbaFont\xe5\xaf\xb9\xe8\xb1\xa1:\n\t\t\tfont = ImageFont.truetype(fontName, 48)\n\t\t\t# \xe5\x88\x9b\xe5\xbb\xbaDraw\xe5\xaf\xb9\xe8\xb1\xa1:\n\t\t\tdraw = ImageDraw.Draw(image)\n\t\t\t# \xe8\xbe\x93\xe5\x87\xba\xe6\x96\x87\xe5\xad\x97\n\t\t\tposition =(8,2)\n\t\t\tdraw.text(position, chr(ascii_id), font=font, fill=""#FFFFFF"", spacing=0, align=\'left\')\n\t\t\t# \xe6\x9e\x84\xe5\xbb\xba\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe7\x9b\xae\xe5\xbd\x95\xe5\xb9\xb6\xe8\xbe\x93\xe5\x87\xba\n\t\t\tfile_name = path + \'\\\\\' + \'dataset\\\\\' + str(ascii_id) + \'\\\\\'+ str(ascii_id) + ""_"" + str(index) + \'.jpg\'\n\t\t\tprint(file_name)\n\t\t\t# \xe5\xb1\x85\xe4\xb8\xad\xe5\x9b\xbe\xe7\x89\x87\xe5\xb9\xb6\xe4\xbf\x9d\xe5\xad\x98\n\t\t\tdst = alignCenter(image)\n\t\t\tdst.save(file_name, \'jpeg\')\n\n\ndef alignCenter(photo):\n\t# \xe5\xaf\xb9\xe5\x88\x9b\xe5\xbb\xba\xe5\xa5\xbd\xe7\x9a\x84\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb1\x85\xe4\xb8\xad\xe5\xa4\x84\xe7\x90\x86\n\t# \xe7\x81\xb0\xe5\xba\xa6\xe8\xaf\xbb\xe5\x8f\x96\n\t# row, col = image.size\n\t# print(row,col)\n\timage = cv.cvtColor(np.asarray(photo), cv.COLOR_RGB2GRAY)\n\n\t# \xe4\xb8\xb4\xe6\x97\xb6\xe6\x94\xbe\xe5\xa4\xa7\xe6\x96\xb9\xe4\xbe\xbf\xe8\xb0\x83\xe8\xaf\x95\n\t# img = cv.resize(img,(200,200))\n\tth, img = cv.threshold(image,128,255,cv.THRESH_BINARY)\n\n\n\ttop,down,left,right = getInfo(img)\n\t# print(top,down,left,right)\n\t# \xe7\xa7\xbb\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\n\tmatShift = np.float32([[1, 0, (right-left)/2], [0, 1, (down-top)/2]])\n\t# \xe7\xa7\xbb\xe4\xbd\x8dAPI\n\tdst = cv.warpAffine(image, matShift, img.shape)\n\n\treturn Image.fromarray(cv.cvtColor(dst,cv.COLOR_BGR2RGB))\n\n\nif __name__ == \'__main__\':\n\tstart_to_make_data()\n\t# alignCenter(\'test.jpg\')\n\n\n'"
VideoSubScanPlayer/image_process_tool/__init__.py,0,b'# coding=utf-8\n'
VideoSubScanPlayer/image_process_tool/cut.py,1,"b""# *_*coding:utf-8 *_*\nimport cv2\nimport numpy as np\nimport cutFont as cf\nimport zoom\n\n\ndef Nomalize(array, value):\n\trow, col = array.shape\n\tfor i in range(row):\n\t\tfor j in range(col):\n\t\t\tif array[i][j] > value:\n\t\t\t\tarray[i][j] = 1\n\t\t\telse:\n\t\t\t\tarray[i][j] = 0\n\treturn array\n\n\n'''\xe8\xae\xbe\xe7\xbd\xae\xe8\xa7\x86\xe9\xa2\x91\xe5\xad\x97\xe5\xb9\x95\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe5\x8c\xba\xe5\x9f\x9f'''\n\n\ndef set_ROI(image):\n\tr, c, line = image.shape\n\treturn image[int(r * 0.74):r, int(c / 10):int(c / 2) * 2, :]\n\n\n'''\xe8\xbf\x90\xe8\xa1\x8c\xe5\x88\x86\xe5\x89\xb2\xe7\xae\x97\xe6\xb3\x95,origineImage\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8e\x9f\xe5\x9b\xbe\xef\xbc\x8ci\xe8\xa1\xa8\xe7\xa4\xba\xe7\xac\xac\xe5\x87\xa0\xe5\xb8\xa7\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87'''\n\n\ndef Image_Division(origineImage):\n\t# \xe5\x85\x88\xe5\xb0\x86\xe5\xbd\xa9\xe8\x89\xb2\xe5\x9b\xbe\xe7\x89\x87\xe4\xbf\x9d\xe5\xad\x98\n\trgb_img = origineImage.copy()\n\n\t# \xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x97\xe5\xb9\x95\xe7\x9a\x84\xe5\x8c\xba\xe5\x9f\x9f\xe8\x8c\x83\xe5\x9b\xb4\n\torigineImage = set_ROI(origineImage)\n\trgb_img = set_ROI(rgb_img)\n\n\t# \xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe5\x88\x87\xe5\x89\xb2\n\tPosition, B_Position, img = cf.cutFont(origineImage, 1, 0)\n\n\t# \xe5\xa6\x82\xe6\x9e\x9cPosition\xe4\xb8\xba\xe7\xa9\xba\xe5\x88\x99\xe8\xaf\xb4\xe6\x98\x8e\xe6\xb2\xa1\xe6\x9c\x89\xe5\xad\x97\xe5\xb9\x95,\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n\tif Position == None:\n\t\treturn False, None, None\n\n\t# \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe6\x94\xbe\xe9\x80\x82\xe7\x94\xa8\xe4\xba\x8e\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\xbc\xe5\xbc\x8f\n\tmatrix = []\n\n\t# \xe6\xa0\xb9\xe6\x8d\xae\xe7\xa1\xae\xe5\xae\x9a\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\x88\x86\xe5\x89\xb2\xe5\xad\x97\xe7\xac\xa6\n\tlength = len(Position)\n\t# \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe5\x82\xa8\xe6\x9c\x80\xe7\xbb\x88\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe5\xad\x97\xe5\xb9\x95\xe7\x9a\x84\xe5\x83\x8f\xe7\xb4\xa0\xe7\xb4\xa2\xe5\xbc\x95\n\tfinal_Position = []\n\n\tfor m in range(length):\n\t\tx1 = Position[m][0]\n\t\ty1 = Position[m][1]\n\t\tx2 = Position[m][2]\n\t\ty2 = Position[m][3]\n\n\t\t# \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e15\xe4\xb8\xaa\xe5\x83\x8f\xe7\xb4\xa0\xef\xbc\x8c\xe5\xb0\xb1\xe5\x8f\xaf\xe8\x83\xbd\xe5\xad\x98\xe5\x9c\xa8\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe8\xbf\x9e\xe5\x9c\xa8\xe4\xb8\x80\xe8\xb5\xb7\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe8\xbf\x99\xe7\xa7\x8d\xe6\x83\x85\xe5\x86\xb5\xe5\x81\x9a\xe4\xba\x8c\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\n\t\tif x2 - x1 >= 15:\n\t\t\t# new_img = origineImage[y1:y2, x1:x2]\n\n\t\t\t# \xe4\xba\x8c\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\n\t\t\tsub_Position, sub_B_Position, sub_img = cf.cutFont(origineImage, 2, [x1, x2, y1, y2])\n\n\t\t\t# \xe8\x8b\xa5sub_Position\xe4\xb8\xba\xe7\xa9\xba\xe5\x88\x99\xe8\xaf\xb4\xe6\x98\x8e\xe6\xb2\xa1\xe6\x9c\x89\xe5\xad\x97\xe5\xb9\x95\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n\t\t\tif sub_Position == None:\n\t\t\t\treturn False, None, None\n\n\t\t\t# \xe4\xbf\x9d\xe5\xad\x98\xe4\xba\x8c\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\n\t\t\tfor n in range(len(sub_Position)):\n\t\t\t\txx1 = sub_Position[n][0]\n\t\t\t\tyy1 = sub_Position[n][1]\n\t\t\t\txx2 = sub_Position[n][2]\n\t\t\t\tyy2 = sub_Position[n][3]\n\t\t\t\t# \xe8\x8e\xb7\xe5\xbe\x97\xe4\xba\x8c\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\n\t\t\t\timg_i = rgb_img[yy1:yy2, xx1:xx2]\n\t\t\t\t# \xe5\xb0\x86\xe5\xad\x97\xe4\xbd\x93\xe6\x8b\x89\xe4\xbc\xb8\xe5\x88\xb064*64\n\t\t\t\tnew_img_i = zoom.magnify(img_i)\n\n\t\t\t\tmatrix.append(Nomalize(new_img_i,128).reshape((4096)))\n\t\t\t\t# \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe6\x9c\x80\xe7\xbb\x88\xe4\xbd\x8d\xe7\xbd\xae\xe5\x88\x97\xe8\xa1\xa8\xe9\x87\x8c\n\t\t\t\tfinal_Position.append(sub_Position[n])\n\n\n\n\t\t# \xe5\xb0\x8f\xe4\xba\x8e15\xe4\xb8\xaa\xe5\x83\x8f\xe7\xb4\xa0\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbf\x9d\xe5\xad\x98\n\t\telse:\n\t\t\t# \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe6\x9c\x80\xe7\xbb\x88\xe4\xbd\x8d\xe7\xbd\xae\xe5\x88\x97\xe8\xa1\xa8\xe9\x87\x8c\n\t\t\tfinal_Position.append(Position[m])\n\t\t\timg_j = rgb_img[y1:y2, x1:x2]\n\t\t\t# \xe6\x8b\x89\xe4\xbc\xb864*64\n\t\t\tnew_img_j = zoom.magnify(img_j)\n\t\t\tmatrix.append(Nomalize(new_img_j,128).reshape((4096)))\n\n\t# \xe7\x94\xa8\xe6\x9d\xa5\xe5\xad\x98\xe5\x82\xa8\xe7\xa9\xba\xe6\xa0\xbc\xe4\xbd\x8d\xe4\xba\x8e\xe8\xbf\x99\xe4\xb8\x80\xe6\x95\xb4\xe5\x8f\xa5\xe8\xaf\x9d\xe4\xb8\xad\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\n\tblank_index = []\n\tcount = 0\n\n\t# \xe9\x81\x8d\xe5\x8e\x86\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0\n\tfor blank in range(len(B_Position)):\n\n\t\t# \xe9\x81\x8d\xe5\x8e\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\n\t\tfor char in range(count, len(final_Position) - 1):\n\n\t\t\t# \xe8\x8b\xa5\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe5\xa4\xa7\xe4\xba\x8e\xe7\xac\xacchar\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb0\x8f\xe4\xba\x8e\xe7\xac\xacchar+1\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe5\x88\x99\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xa4\xe4\xb8\xba\xe8\xbf\x99\xe4\xb8\xaa\xe7\xa9\xba\xe6\xa0\xbc\xe5\xad\x98\xe5\x9c\xa8\xe4\xba\x8e\xe7\xac\xacchar\xe5\x92\x8c\xe7\xac\xacchar+1\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb9\x8b\xe9\x97\xb4\n\t\t\tif (B_Position[blank][0] >= final_Position[char][2]) and (\n\t\t\t\t\tB_Position[blank][2] <= final_Position[char + 1][0]):\n\t\t\t\t# \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\x88\x97\xe8\xa1\xa8\xe4\xb8\xad\n\t\t\t\tblank_index.append(char)\n\t\t\t\t# \xe9\x87\x8d\xe6\x96\xb0\xe5\xae\x9a\xe4\xb9\x89\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\n\t\t\t\tcount = char + 1\n\t\t\t\tbreak\n\n\treturn True, np.array(matrix, dtype = np.uint8), blank_index\n\n\nif __name__ == '__main__':\n\timg = cv2.imread('D:/video1/test26.jpg')\n\ta, b, c = Image_Division(img)\n\t# print(b)\n"""
VideoSubScanPlayer/image_process_tool/cutFont.py,3,"b""# *_*coding:utf-8 *_*\nimport cv2\nimport numpy as np\n\n\n\n'''\xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1'''\n\n\ndef getHProjection(image):\n\n    return np.sum(image/255, axis=1)\n\n'''\xe5\x9e\x82\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1'''\n\n\ndef getVProjection(image):\n\n\n    return np.sum(image/255, axis=0)\n\n#\xe9\x98\x88\xe5\x80\xbc\xe5\x88\x86\xe5\x89\xb2\ndef threshold(image, hold):\n    image[image > hold] = 255\n    image[image <= hold] = 0\n    #\xe5\xb0\x86\xe4\xb8\x89\xe4\xb8\xaa\xe9\x80\x9a\xe9\x81\x93\xe5\x90\x88\xe5\xb9\xb6\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x9a\xe9\x81\x93\n    return image[:, :, 0] & image[:, :, 1] & image[:, :, 2]\n\n#index\xe4\xb8\xba\xe7\xac\xac\xe5\x87\xa0\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\ndef cutFont(origineImage, index, row_col):\n\n\n    #\xe5\xb0\x86\xe5\xbd\xa9\xe8\x89\xb2\xe5\x9b\xbe\xe7\x89\x87\xe4\xbf\x9d\xe5\xad\x98\n    rgb_img = origineImage.copy()\n\n    #\xe9\x98\x88\xe5\x80\xbc\xe5\x88\x86\xe5\x89\xb2\n    if index == 1:\n        image = threshold(origineImage, 240)\n    else:\n        image = threshold(origineImage, 230)\n\n    #\xe8\x86\xa8\xe8\x83\x80\xe6\x93\x8d\xe4\xbd\x9c\n    if index == 1:\n        k = cv2.getStructuringElement(cv2.MORPH_RECT, (4, 4))\n        image = cv2.dilate(image, k)\n    else:\n        k = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))\n        image = cv2.dilate(image, k)\n\n\n\n\n    # \xe5\x9b\xbe\xe5\x83\x8f\xe9\xab\x98\xe4\xb8\x8e\xe5\xae\xbd\n    (h, w) = image.shape\n\n    #print(w)\n    Position = []\n    B_Position = []\n    H_Start = []\n    H_End = []\n\n    if index == 1:\n\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1\n        H = getHProjection(image)\n\n        # \xe8\x8b\xa5\xe6\xb2\xa1\xe6\x9c\x89\xe5\xad\x97\xe5\xb9\x95\xe5\x83\x8f\xe7\xb4\xa0\xe7\x82\xb9\n        if np.sum(H, axis=0) == 0:\n            return None, None, None\n\n        start = 0\n\n\n\n\n        #\xe7\xa1\xae\xe5\xae\x9a\xe8\xa1\x8c\xe7\x9a\x84\xe8\xb5\xb7\xe7\x82\xb9\xe5\x92\x8c\xe7\xbb\x88\xe7\x82\xb9\xe4\xbd\x8d\xe7\xbd\xae\n        for i in range(len(H)):\n            if H[i] > 0 and start == 0:\n                H_Start.append(i)\n                start = 1\n            elif H[i] <= 0 and start == 1:\n                H_End.append(i)\n                start = 0\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x99\xbd\xe8\x89\xb2\xe5\xad\x97\xe7\xa2\xb0\xe5\x88\xb0\xe4\xba\x86\xe8\xbe\xb9\xe7\xbc\x98\xe5\xaf\xbc\xe8\x87\xb4\xe6\xb2\xa1\xe6\x9c\x89\xe7\xbb\x93\xe5\xb0\xbe\xef\xbc\x8c\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x83\x8f\xe7\xb4\xa0\xe7\x82\xb9\xe4\xbd\x9c\xe4\xb8\xba\xe7\xbb\x93\xe5\xb0\xbe\n        if (len(H_Start) > len(H_End)):\n            H_End.append(len(H))\n\n    else:\n        #\xe8\x8b\xa5\xe4\xb8\xba\xe4\xba\x8c\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\xef\xbc\x8c\xe8\xa1\x8c\xe5\xb7\xb2\xe7\xbb\x8f\xe7\xa1\xae\xe5\xae\x9a\xe5\xa5\xbd\xe4\xba\x86\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8\xe4\xb8\xad\n        H_Start.append(row_col[2])\n        H_End.append(row_col[3])\n\n\n\n    #\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n    count = 0\n\n\n\n    for i in range(len(H_Start)):\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe8\xa1\x8c\xe5\x9b\xbe\xe5\x83\x8f\n        cropImg = image[H_Start[i]:H_End[i], 0:w]\n        # \xe5\xaf\xb9\xe8\xa1\x8c\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9e\x82\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1\n        W = getVProjection(cropImg)\n        #\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\xb9\x95\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae,1\xe4\xb8\xba\xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x8c0\xe4\xb8\xba\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\n        Wstart = 0\n        #\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\xb9\x95\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c1\xe4\xb8\xba\xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x8c0\xe4\xb8\xba\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\n        Wend = 0\n        #\xe5\xad\x97\xe5\xb9\x95\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\n        W_Start = 0\n        #\xe5\xad\x97\xe5\xb9\x95\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\n        W_End = 0\n        #\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c1\xe4\xb8\xba\xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x8c0\xe4\xb8\xba\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\n        Bstart = 0\n        #\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c1\xe4\xb8\xba\xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x8c0\xe4\xb8\xba\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\n        Bend = 0\n        #\xe7\xa9\xba\xe6\xa0\xbc\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe7\xb4\xa2\xe5\xbc\x95\n        B_Start = 0\n        #\xe7\xa9\xba\xe6\xa0\xbc\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae\xe7\xb4\xa2\xe5\xbc\x95\n        B_End = 0\n\n        if index == 1:\n            #\xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\xe5\xb0\xb1\xe5\x88\x97\xe7\x9a\x84\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe5\xbc\x80\xe5\xa7\x8b\xe5\x88\x87\xe5\x89\xb2\n            c_start = 1\n            c_end = len(W) - 1\n        else:\n            #\xe7\xac\xac\xe4\xba\x8c\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\xe5\xb7\xb2\xe7\xbb\x8f\xe7\xa1\xae\xe5\xae\x9a\xe4\xba\x86\xe5\x88\x86\xe5\x89\xb2\xe5\x88\x97\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x8c\x87\xe5\xae\x9a\n            c_start = row_col[0]\n            c_end = row_col[1]\n\n        #\xe5\xaf\xb9\xe5\x88\x97\xe6\x8a\x95\xe5\xbd\xb1\xe5\x90\x8e\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x81\x8d\xe5\x8e\x86\xef\xbc\x8c\xe6\x89\xbe\xe5\x87\xba\xe5\xad\x97\xe7\xac\xa6\xe5\x92\x8c\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n        for j in range(c_start-1, c_end + 1):\n            #\xe8\x8b\xa5\xe7\x99\xbd\xe8\x89\xb2\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\xe5\xa4\xa7\xe4\xba\x8e0\xe5\xb9\xb6\xe4\xb8\x94\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe5\xbc\x80\xe5\xa4\xb4\xe4\xbd\x8d\xe7\xbd\xae\n            if W[j] > 0 and Wstart == 0:\n                #\xe5\xb0\x86j\xe8\xb5\x8b\xe5\x80\xbc\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\xbc\x80\xe5\xa4\xb4\xe7\xb4\xa2\xe5\xbc\x95\n                W_Start = j\n                #\xe6\x89\xbe\xe5\x88\xb0\xe5\xbc\x80\xe5\xa4\xb4\n                Wstart = 1\n                #\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\xe7\xbb\x93\xe5\xb0\xbe\n                Wend = 0\n            #\xe8\x8b\xa5\xe7\x99\xbd\xe8\x89\xb2\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x89\xbe\xe5\x88\xb0\xe5\xbc\x80\xe5\xa4\xb4\n            if W[j] <= 0 and Wstart == 1:\n                #\xe5\xb0\x86j\xe8\xb5\x8b\xe5\x80\xbc\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\xbb\x93\xe6\x9d\x9f\xe7\xb4\xa2\xe5\xbc\x95\n                W_End = j\n                #\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\xe5\xbc\x80\xe5\xa4\xb4\n                Wstart = 0\n                #\xe6\x89\xbe\xe5\x88\xb0\xe7\xbb\x93\xe5\xb0\xbe\n                Wend = 1\n            #\xe8\x8b\xa5\xe7\x99\xbd\xe8\x89\xb2\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe5\xb9\xb6\xe4\xb8\x94\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe5\xbc\x80\xe5\xa4\xb4\xe5\xb9\xb6\xe4\xb8\x94\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\n            if W[j] <= 0 and Bstart == 0 and index == 1:\n                #\xe5\xb0\x86j\xe8\xb5\x8b\xe5\x80\xbc\xe7\xbb\x99\xe7\xa9\xba\xe6\xa0\xbc\xe8\xb5\xb7\xe5\xa7\x8b\xe7\xb4\xa2\xe5\xbc\x95\n                B_Start = j\n                #\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe5\xbc\x80\xe5\xa4\xb4\n                Bstart = 1\n                #\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe7\xbb\x93\xe5\xb0\xbe\n                Bend = 0\n\n            #\xe8\x8b\xa5\xe7\x99\xbd\xe8\x89\xb2\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\xe5\xa4\xa7\xe4\xba\x8e0\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe5\xbc\x80\xe5\xa4\xb4\xe4\xbd\x8d\xe7\xbd\xae\xe5\xb9\xb6\xe4\xb8\x94\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\n            if W[j] > 0 and Bstart == 1 and index == 1:\n                #\xe5\xb0\x86j\xe8\xb5\x8b\xe5\x80\xbc\xe7\xbb\x99\xe7\xa9\xba\xe6\xa0\xbc\xe7\xbb\x93\xe6\x9d\x9f\xe7\xb4\xa2\xe5\xbc\x95\n                B_End = j\n                #\xe6\x9c\xaa\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe5\xbc\x80\xe5\xa4\xb4\n                Bstart = 0\n                #\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe7\xbb\x93\xe5\xb0\xbe\n                Bend = 1\n\n            #\xe5\xa6\x82\xe6\x9e\x9c\xe7\x99\xbd\xe8\x89\xb2\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\xe5\xb0\x8f\xe4\xba\x8e0\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x89\xbe\xe5\x88\xb0\xe4\xba\x86\xe7\xa9\xba\xe6\xa0\xbc\xe5\xbc\x80\xe5\xa4\xb4\xe5\xb9\xb6\xe4\xb8\x94\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x86count\xe8\x87\xaa\xe5\xa2\x9e\xe6\x9d\xa5\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x99\xe4\xb8\xaa\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n            if W[j] <= 0 and Bstart == 1 and index == 1:\n                count += 1\n\n            #\xe8\x8b\xa5\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe7\xbb\x93\xe5\xb0\xbe\xe4\xba\x86\n            if Wend == 1:\n                #\xe5\xb0\x86\xe5\x88\x87\xe5\x89\xb2\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xad\x98\xe6\x94\xbe\xe5\x88\xb0Position\xe4\xb8\xad\n                Position.append([W_Start, H_Start[i], W_End, H_End[i]])\n                #\xe5\xb0\x86\xe7\xbb\x93\xe5\xb0\xbe\xe8\xae\xbe\xe4\xb8\xba0\xe9\x87\x8d\xe6\x96\xb0\xe5\xaf\xbb\xe6\x89\xbe\n                Wend = 0\n\n            #\xe6\x89\xbe\xe5\x88\xb0\xe7\xa9\xba\xe6\xa0\xbc\xe7\xbb\x93\xe5\xb0\xbe\xe5\xb9\xb6\xe4\xb8\x94\xe8\xbf\x99\xe4\xb8\xaa\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe6\x98\xaf\xe5\xa4\xa7\xe4\xba\x8e7\xe4\xb8\xaa\xe5\x83\x8f\xe7\xb4\xa0\xe5\xb0\x8f\xe4\xba\x8e100\xe4\xb8\xaa\xe5\x83\x8f\xe7\xb4\xa0\xe5\xb9\xb6\xe4\xb8\x94\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x86\xe5\x89\xb2\n            if Bend == 1 and count >= 7 and count < 100 and index == 1:\n                #\xe5\xb0\x86\xe7\xa9\xba\xe6\xa0\xbc\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0B_Position\xe4\xb8\xad\n                B_Position.append([B_Start, H_Start[i], B_End, H_End[i]])\n                #\xe9\x95\xbf\xe5\xba\xa6\xe7\xbd\xae\xe4\xb8\xba0\xe9\x87\x8d\xe6\x96\xb0\xe5\xaf\xbb\xe6\x89\xbe\n                count = 0\n            #\xe8\x8b\xa5\xe7\xa9\xba\xe6\xa0\xbc\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe8\xa6\x81\xe6\xb1\x82\n            if Bend == 1 and (count < 7 or count >= 100) and index == 1:\n                #\xe4\xb8\x8d\xe5\xad\x98\xe5\x82\xa8\xe6\xad\xa4\xe7\xa9\xba\xe6\xa0\xbc\xe5\xb9\xb6\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\x86\xe9\x95\xbf\xe5\xba\xa6\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xbe\xe4\xb8\xba0\n                count = 0\n\n\n    return Position, B_Position, image\n"""
VideoSubScanPlayer/image_process_tool/readVideo.py,2,"b'# *_*coding:utf-8 *_*\nimport cv2\nimport time\nimport cut\nimport cutFont as cf\nimport numpy as np\n\n\ndef SubText_Detection(frame1, frame2):\n\t# \xe8\xae\xbe\xe7\xbd\xaeROI\xe5\x92\x8c\xe9\x98\x88\xe5\x80\xbc\xe5\x88\x86\xe5\x89\xb2\n\tframe1 = cut.set_ROI(frame1)\n\tframe1 = cf.threshold(frame1, 240)\n\n\t# \xe8\xae\xbe\xe7\xbd\xaeROI\xe5\x92\x8c\xe9\x98\x88\xe5\x80\xbc\xe5\x88\x86\xe5\x89\xb2\n\tframe2 = cut.set_ROI(frame2)\n\tframe2 = cf.threshold(frame2, 240)\n\n\t# \xe8\xae\xa1\xe7\xae\x97\xe5\x89\x8d\xe5\x90\x8e\xe4\xb8\xa4\xe5\xb8\xa7\xe7\x9a\x84\xe6\x96\xb9\xe5\xb7\xae\n\tr, c = frame1.shape\n\timg = frame2 - frame1\n\timg[img <= 0] = 0\n\n\tsum_r = np.sum(img ** 2, axis = 1)\n\tsum = np.sum(sum_r, axis = 0)\n\n\te = sum / (r * c) * 100\n\n\t# \xe8\x8b\xa5\xe6\x96\xb9\xe5\xb7\xae\xe5\xa4\xa7\xe4\xba\x8e0.3\xe8\xaf\xb4\xe6\x98\x8e\xe5\x87\xba\xe7\x8e\xb0\xe5\xad\x97\xe5\xb9\x95\n\tif e >= 0.1:\n\t\t# \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\xa7\xe4\xba\x8e0.3\xe8\xaf\xb4\xe6\x98\x8e\xe6\x9c\x89\xe6\x96\xb0\xe5\xad\x97\xe5\xb9\x95\xe5\x87\xba\xe7\x8e\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eTrue\n\t\treturn True\n\telse:\n\t\treturn False\n'"
VideoSubScanPlayer/image_process_tool/zoom.py,6,"b""# *_*coding:utf-8 *_*\nimport cv2\nimport numpy as np\n\n'''\xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x8b\x89\xe4\xbc\xb8\xe5\x88\xb064*64'''\n\n\ndef magnify(image):\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\xb0\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe4\xb8\x89\xe4\xb8\xaa\xe9\x80\x9a\xe9\x81\x93\n\tr, c, line = image.shape\n\n\t# \xe5\xb0\x86240\xe8\xae\xbe\xe4\xb8\xba\xe9\x98\x88\xe5\x80\xbc\xef\xbc\x8c\xe5\xb0\x8f\xe4\xba\x8e240\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba0\xef\xbc\x8c\xe5\xa4\xa7\xe4\xba\x8e240\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba255\n\timage[image >= 240] = 255\n\timage[image < 240] = 0\n\t# \xe5\xb0\x86\xe4\xb8\x89\xe4\xb8\xaa\xe9\x80\x9a\xe9\x81\x93\xe5\x90\x88\xe5\xb9\xb6\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\n\timage = image[:, :, 0] & image[:, :, 1] & image[:, :, 2]\n\t# \xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x86\xa8\xe8\x83\x80\n\tk = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))\n\timage = cv2.dilate(image, k)\n\n\t# \xe6\x89\xa9\xe5\xb1\x95\xe5\xae\xbd\xe9\xab\x98\n\tr1 = r + 10\n\tc1 = c + 10\n\n\t# \xe8\xae\xa1\xe7\xae\x97\xe6\xaf\x94\xe4\xbe\x8b\n\trow = 64 / r1\n\tcol = 64 / c1\n\n\t# \xe8\xae\xbe\xe7\xbd\xae\xe5\x85\xa8\xe9\xbb\x91\xe5\x9b\xbe\xe7\x89\x87\n\tnew_img = np.zeros((r1, c1))\n\n\t# \xe7\x9b\xb8\xe5\xbd\x93\xe4\xba\x8e\xe5\x9c\xa8\xe5\x8e\x9f\xe5\x9b\xbe\xe5\x8a\xa0\xe4\xb8\x8a\xe4\xb8\x80\xe5\x91\xa8\xe9\xbb\x91\xe8\xbe\xb9\n\tnew_img[5:r1 - 5, 5:c1 - 5] = image\n\t# \xe6\x8c\x89\xe8\xae\xa1\xe7\xae\x97\xe5\xa5\xbd\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe7\xad\x89\xe6\xaf\x94\xe4\xbe\x8b\xe5\x85\x88\xe5\xb0\x86\xe9\xab\x98\xe5\xba\xa6\xe6\x8b\x89\xe4\xbc\xb8\xe5\x88\xb064\xef\xbc\x8c\xe7\xba\xbf\xe6\x80\xa7\xe6\x8f\x92\xe5\x80\xbc\n\tnew_img = cv2.resize(new_img, (int(c1 * row), 64), interpolation = cv2.INTER_LINEAR)\n\n\tr2, c2 = new_img.shape\n\t# \xe5\x88\xa4\xe6\x96\xad\xe9\xab\x98\xe5\xba\xa6\xe7\xad\x89\xe6\xaf\x94\xe4\xbe\x8b\xe6\x8b\x89\xe4\xbc\xb8\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\xe6\x98\xaf\xe5\xa4\xa7\xe4\xba\x8e64\xe8\xbf\x98\xe6\x98\xaf\xe5\xb0\x8f\xe4\xba\x8e64\n\t# \xe8\x8b\xa5\xe5\xae\xbd\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e64\n\tif c2 > 64:\n\t\t# \xe8\xae\xa1\xe7\xae\x97\xe5\xa4\x9a\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\n\t\tc_i = c2 - 64\n\t\t# \xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9b\xb4\xe5\xa4\xa7\xe7\x9a\x84\xe6\xad\xa3\xe6\x96\xb9\xe5\xbd\xa2\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\n\t\tnew_new_img = np.zeros((c2, c2))\n\t\tck = int(c_i / 2)\n\t\t# \xe5\x88\xa4\xe6\x96\xad\xe5\xa5\x87\xe5\x81\xb6\xe7\x84\xb6\xe5\x90\x8e\xe5\xb0\x86\xe6\x8b\x89\xe4\xbc\xb8\xe9\xab\x98\xe5\xba\xa6\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\x85\xa5\xe6\xad\xa3\xe6\x96\xb9\xe5\xbd\xa2\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\xad\xe9\x97\xb4\xe4\xbd\x8d\xe7\xbd\xae\n\t\tif c_i % 2 != 0:\n\t\t\tnew_new_img[ck:c2 - ck - 1, :] = new_img\n\t\telse:\n\t\t\tnew_new_img[ck:c2 - ck, :] = new_img\n\t\t# \xe5\x86\x8d\xe7\xad\x89\xe6\xaf\x94\xe4\xbe\x8b\xe7\xbc\xa9\xe5\xb0\x8f\xe4\xb8\xba64*64\n\t\tnew_new_img = cv2.resize(new_new_img, (64, 64), interpolation = cv2.INTER_AREA)\n\t\treturn scale(alignCenter(new_new_img),0.75)\n\t# \xe5\x90\x8c\xe7\x90\x86\xef\xbc\x8c\xe8\x8b\xa5\xe5\xae\xbd\xe5\xba\xa6\xe5\xb0\x8f\xe4\xba\x8e64\n\telse:\n\t\t# \xe8\xae\xa1\xe7\xae\x97\xe5\xa4\x9a\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\x83\x8f\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\n\t\tc_i = 64 - c2\n\t\tnew_new_img = np.zeros((64, 64))\n\t\tck = int(c_i / 2)\n\t\t# \xe5\x88\xa4\xe6\x96\xad\xe5\xa5\x87\xe5\x81\xb6\xe7\x84\xb6\xe5\x90\x8e\xe5\xb0\x86\xe6\x8b\x89\xe4\xbc\xb8\xe9\xab\x98\xe5\xba\xa6\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\x85\xa5\xe6\xad\xa3\xe6\x96\xb9\xe5\xbd\xa2\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\xad\xe9\x97\xb4\xe4\xbd\x8d\xe7\xbd\xae\n\t\tif c_i % 2 != 0:\n\t\t\tnew_new_img[:, ck:64 - ck - 1] = new_img\n\t\telse:\n\t\t\tnew_new_img[:, ck:64 - ck] = new_img\n\n\t\treturn scale(alignCenter(new_new_img),0.75)\n\ndef getInfo(img):\n\trow, col = img.shape\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xb7\xa6\xe5\x8f\xb3\xe9\x97\xb4\xe9\x9a\x94\xe4\xbf\xa1\xe6\x81\xaf\n\trowLine = np.zeros(row, np.uint8)\n\tcolLine = np.zeros(col, np.uint8)\n\t# \xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1 \xe7\x94\xa8\xe4\xba\x8e\xe7\xa1\xae\xe5\xae\x9a\xe4\xb8\x8a\xe4\xb8\x8b\xe9\x97\xb4\xe9\x9a\x94\n\tfor r in range(row):\n\t\tfor c in range(col):\n\t\t\tif img[r][c] != 0:\n\t\t\t\trowLine[r] = 1\n\t\t\t\tbreak\n\t# \xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1 \xe7\x94\xa8\xe4\xba\x8e\xe7\xa1\xae\xe5\xae\x9a\xe5\xb7\xa6\xe5\x8f\xb3\xe9\x97\xb4\xe9\x9a\x94\n\tfor c in range(col):\n\t\tfor r in range(row):\n\t\t\tif img[r][c] != 0:\n\t\t\t\tcolLine[c] = 1\n\t\t\t\tbreak\n\t# \xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xb7\xa6\xe5\x8f\xb3\xe9\xbb\x91\xe8\x89\xb2\xe9\x97\xb4\xe9\x9a\x94\n\ttop, down, left, right = 0, 0, 0, 0\n\t# print(rowLine)\n\t# print(colLine)\n\tfor i in rowLine:\n\t\tif i == 0:\n\t\t\ttop += 1\n\t\telse:\n\t\t\tbreak\n\tfor i in reversed(rowLine):\n\t\tif i == 0:\n\t\t\tdown += 1\n\t\telse:\n\t\t\tbreak\n\tfor i in colLine:\n\t\tif i == 0:\n\t\t\tleft += 1\n\t\telse:\n\t\t\tbreak\n\tfor i in reversed(colLine):\n\t\tif i == 0:\n\t\t\tright += 1\n\t\telse:\n\t\t\tbreak\n\treturn top,down,left,right\n\n\ndef alignCenter(img):\n\t# \xe5\xaf\xb9\xe5\x88\x9b\xe5\xbb\xba\xe5\xa5\xbd\xe7\x9a\x84\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb1\x85\xe4\xb8\xad\xe5\xa4\x84\xe7\x90\x86\n\t# \xe7\x81\xb0\xe5\xba\xa6\xe8\xaf\xbb\xe5\x8f\x96\n\n\ttop,down,left,right = getInfo(img)\n\t# print(top,down,left,right)\n\t# \xe7\xa7\xbb\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\n\tmatShift = np.float32([[1, 0, (right-left)/2], [0, 1, (down-top)/2]])\n\t# \xe7\xa7\xbb\xe4\xbd\x8dAPI\n\tdst = cv2.warpAffine(img, matShift, img.shape)\n\n\treturn dst\n\ndef scale(img,scale_rate):\n\t# \xe5\x9b\xbe\xe5\x83\x8f\xe7\xbc\xa9\xe6\x94\xbe\n\timg_info = img.shape\n\theight = img_info[0]\n\twidth = img_info[1]\n\n\t# \xe6\x97\x8b\xe8\xbd\xac\xe7\x9f\xa9\xe9\x98\xb5,\xe4\xb8\xad\xe5\xbf\x83\xe7\x82\xb9\xef\xbc\x8c\xe8\xa7\x92\xe5\xba\xa6\xef\xbc\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe7\xb3\xbb\xe6\x95\xb0\n\tmatRotate = cv2.getRotationMatrix2D((height * 0.5, width * 0.5), 0, scale_rate)\n\tret = cv2.warpAffine(img, matRotate, (height, width))\n\t# print(scale_rate)\n\treturn ret"""
