file_path,api_count,code
voronoi_diagrams/voronoi.py,8,"b'# coding=utf-8\nimport numpy as np\nfrom scipy.spatial import Voronoi\nfrom shapely.geometry import Polygon, LineString, MultiPolygon, MultiPoint, Point, geo\nfrom shapely.ops import *\n\ndef voronoi_finite_polygons_2d(vor, radius=None):\n    """"""\n    Reconstruct infinite voronoi regions in a 2D diagram to finite\n    regions.\n    Parameters\n    ----------\n    vor : Voronoi\n        Input diagram\n    radius : float, optional\n        Distance to \'points at infinity\'.\n    Returns\n    -------\n    regions : list of tuples\n        Indices of vertices in each revised Voronoi regions.\n    vertices : list of tuples\n        Coordinates for revised Voronoi vertices. Same as coordinates\n        of input vertices, with \'points at infinity\' appended to the\n        end.\n    """"""\n\n    if vor.points.shape[1] != 2:\n        raise ValueError(""Requires 2D input"")\n\n    new_regions = []\n    new_vertices = vor.vertices.tolist()\n\n    center = vor.points.mean(axis=0)\n    if radius is None:\n        radius = vor.points.ptp().max()*2\n\n    # Construct a map containing all ridges for a given point\n    all_ridges = {}\n    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):\n        all_ridges.setdefault(p1, []).append((p2, v1, v2))\n        all_ridges.setdefault(p2, []).append((p1, v1, v2))\n\n    # Reconstruct infinite regions\n    for p1, region in enumerate(vor.point_region):\n        vertices = vor.regions[region]\n\n        if all(v >= 0 for v in vertices):\n            # finite region\n            new_regions.append(vertices)\n            continue\n\n        # reconstruct a non-finite region\n        ridges = all_ridges[p1]\n        new_region = [v for v in vertices if v >= 0]\n\n        for p2, v1, v2 in ridges:\n            if v2 < 0:\n                v1, v2 = v2, v1\n            if v1 >= 0:\n                # finite ridge: already in the region\n                continue\n\n            # Compute the missing endpoint of an infinite ridge\n\n            t = vor.points[p2] - vor.points[p1] # tangent\n            t /= np.linalg.norm(t)\n            n = np.array([-t[1], t[0]])  # normal\n\n            midpoint = vor.points[[p1, p2]].mean(axis=0)\n            direction = np.sign(np.dot(midpoint - center, n)) * n\n            far_point = vor.vertices[v2] + direction * radius\n\n            new_region.append(len(new_vertices))\n            new_vertices.append(far_point.tolist())\n\n        # sort region counterclockwise\n        vs = np.asarray([new_vertices[v] for v in new_region])\n        c = vs.mean(axis=0)\n        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])\n        new_region = np.array(new_region)[np.argsort(angles)]\n\n        # finish\n        new_regions.append(new_region.tolist())\n\n    return new_regions, np.asarray(new_vertices)\n\ndef list_voronoi_cells(seeds):\n    # make up data points\n    points = np.asarray([L[::-1] for L in seeds])\n\n    # compute Voronoi tesselation\n    vor = Voronoi(points)\n\n    # plot\n    regions, vertices = voronoi_finite_polygons_2d(vor)\n\n    box = Polygon([(-276.328125, 80.17871349622823),\n     (276.328125, 80.17871349622823),\n     (276.328125, -80.17871349622823),\n     (-276.328125, -80.17871349622823), (-276.328125, 80.17871349622823)])\n\n    return [Polygon(vertices[region]).intersection(box) for region in regions]\n'"
