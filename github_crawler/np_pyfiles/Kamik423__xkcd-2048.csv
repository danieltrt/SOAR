file_path,api_count,code
extractor.py,4,"b'#!/usr/bin/env python3\n""""""A Python script to extract the point coordinates from the comic.\n""""""\n\nimport numpy as np\n\nfrom matplotlib import pyplot as plt\nfrom scipy import ndimage\n\ndef main():\n    """"""Do the main processing.\n    """"""\n    # Load image\n    image_raw = plt.imread(\'image_process/06_final.png\')\n    # Convert to binary to make finding easier - via alpha threshold\n    image_bin = np.array([np.array(\n        [1 if pixel[-1] > 0.5 else 0 for pixel in row])\n                          for row in image_raw])\n    # Initialize variables\n    height = len(image_bin)\n    points = []\n    # Filter grouped pixels\n    structure = np.ones((3, 3), dtype=np.int)\n    labeled, component_count = ndimage.measurements.label(image_bin, structure)\n    # Compute center of mass\n    for label in range(1, component_count + 1):\n        matches = np.argwhere(labeled == label)\n        center_of_mass = np.sum(matches, axis=0) / len(matches)\n        points.append(center_of_mass)\n    # Generate CSV\n    csv = \'\'\n    for line in points:\n        x = line[1]\n        # Mirror the coordinates so it is not counting from the top left but\n        # The bottom left as in the comic\n        y = height - line[0]\n        csv += f\'{x:.1f},{y:.1f}\\n\'\n    # Plot\n    plt.imshow(labeled)\n    plt.scatter(*reversed(list(zip(*points))), 4, \'0\')\n    # Output\n    plt.savefig(\'image_process/07_mapped.png\')\n    with open(\'points.csv\', \'w\') as f:\n        f.write(csv)\n    plt.show()\n\nif __name__ == \'__main__\':\n    main()\n'"
