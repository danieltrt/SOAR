file_path,api_count,code
movie.py,0,b'from movie import app\n'
movieconfig.py,0,"b""import os\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config(object):\n    SECRET_KEY=os.environ.get('SECRET_KEY') or 'you-will-never-guess'\n"""
movie/__init__.py,0,b'from flask import Flask\nfrom movieconfig import Config\n\napp=Flask(__name__)\napp.config.from_object  (Config)\n\n\n\nfrom movie import routes\n'
movie/forms.py,0,"b""from flask_wtf import FlaskForm\nfrom wtforms import SubmitField,StringField\nfrom wtforms.validators import DataRequired\n\nclass MovieForm(FlaskForm):\n    moviename=StringField('Enter Movie Name...',validators=[DataRequired()])\n    submit=SubmitField('Search')\n"""
movie/routes.py,0,"b""from movie import app\nfrom flask import render_template,flash\nfrom movie.forms import MovieForm\n\n@app.route('/',methods=['GET','POST'])\ndef movierec():\n    form=MovieForm()\n    if form.validate_on_submit():\n        import pandas as pd\n        import numpy as np\n\n        ratings=pd.read_csv('ratings.csv')\n        movies=pd.read_csv('movies.csv')\n\n        movie_data=pd.merge(ratings,movies,on='movieId')\n\n        movie_data.groupby('title')['rating'].mean().sort_values(ascending=False)\n\n        movie_data.groupby('title')['rating'].count().sort_values(ascending=False)\n        rating_mean=pd.DataFrame(movie_data.groupby('title')['rating'].mean())\n        rating_mean['rating_count']=pd.DataFrame(movie_data.groupby('title')['rating'].count())\n\n        user_movie_rating=movie_data.pivot_table(index='userId',columns='title',values='rating')\n\n        x=form.moviename.data\n        x=x.split()\n        for i in range(0,len(x)):\n            x[i]=x[i].capitalize()\n        x=' '.join(x)\n\n        flag=-1\n        for i in range(0,len(movies)):\n            if x in movies.iloc[i,1]:\n                x=movies.iloc[i,1]\n                flag=1\n\n        if flag==-1:\n            flash('There was some error. The admin has been notified. Please try another movie. Sorry for the inconvenience!!')\n        else:\n            movie=x\n            movie_ratings=user_movie_rating[movie]\n\n            movies_like_movie=user_movie_rating.corrwith(movie_ratings)\n            corr_movie=pd.DataFrame(movies_like_movie,columns=['Correlation'])\n            corr_movie.dropna(inplace=True)\n            corr_movie=corr_movie.sort_values('Correlation',ascending=False)\n\n            corr_movie=corr_movie.join(rating_mean['rating_count'])\n\n            final=corr_movie[corr_movie['rating_count']>40].sort_values('Correlation',ascending=False)\n            final=final.index\n            for i in range(1,5):\n                flash(final[i])\n    return render_template('main.html',form=form)\n"""
