file_path,api_count,code
HeatMap.py,2,"b""import os\nimport numpy as np\nfrom PIL import  Image\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport scipy.ndimage as ndimage\n\nclass HeatMap:\n    def __init__(self,image,heat_map,gaussian_std=10):\n        #if image is numpy array\n        if isinstance(image,np.ndarray):\n            height = image.shape[0]\n            width = image.shape[1]\n            self.image = image\n        else: \n            #PIL open the image path, record the height and width\n            image = Image.open(image)\n            width, height = image.size\n            self.image = image\n        \n        #Convert numpy heat_map values into image formate for easy upscale\n        #Rezie the heat_map to the size of the input image\n        #Apply the gausian filter for smoothing\n        #Convert back to numpy\n        heatmap_image = Image.fromarray(heat_map*255)\n        heatmap_image_resized = heatmap_image.resize((width,height))\n        heatmap_image_resized = ndimage.gaussian_filter(heatmap_image_resized, \n                                                        sigma=(gaussian_std, gaussian_std), \n                                                        order=0)\n        heatmap_image_resized = np.asarray(heatmap_image_resized)\n        self.heat_map = heatmap_image_resized\n    \n    #Plot the figure\n    def plot(self,transparency=0.7,color_map='bwr',\n             show_axis=False, show_original=False, show_colorbar=False,width_pad=0):\n            \n        #If show_original is True, then subplot first figure as orginal image\n        #Set x,y to let the heatmap plot in the second subfigure, \n        #otherwise heatmap will plot in the first sub figure\n        if show_original:\n            plt.subplot(1, 2, 1)\n            if not show_axis:\n                plt.axis('off')\n            plt.imshow(self.image)\n            x,y=2,2\n        else:\n            x,y=1,1\n        \n        #Plot the heatmap\n        plt.subplot(1,x,y)\n        if not show_axis:\n            plt.axis('off')\n        plt.imshow(self.image)\n        plt.imshow(self.heat_map/255, alpha=transparency, cmap=color_map)\n        if show_colorbar:\n            plt.colorbar()\n        plt.tight_layout(w_pad=width_pad)\n        plt.show()\n    \n    ###Save the figure\n    def save(self,filename,format='png',save_path=os.getcwd(),\n             transparency=0.7,color_map='bwr',width_pad = -10,\n             show_axis=False, show_original=False, show_colorbar=False, **kwargs):\n        if show_original:\n            plt.subplot(1, 2, 1)\n            if not show_axis:\n                plt.axis('off')\n            plt.imshow(self.image)\n            x,y=2,2\n        else:\n            x,y=1,1\n        \n        #Plot the heatmap\n        plt.subplot(1,x,y)\n        if not show_axis:\n            plt.axis('off')\n        plt.imshow(self.image)\n        plt.imshow(self.heat_map/255, alpha=transparency, cmap=color_map)\n        if show_colorbar:\n            plt.colorbar()\n        plt.tight_layout(w_pad=width_pad)\n        plt.savefig(os.path.join(save_path,filename+'.'+format), \n                    format=format, \n                    bbox_inches='tight',\n                    pad_inches = 0, **kwargs)\n        print('{}.{} has been successfully saved to {}'.format(filename,format,save_path))"""
__init__.py,0,b'from .HeatMap import HeatMap'
