file_path,api_count,code
Bollean Logic and Contol Flow/Add_else.py,0,"b'# Define variables\nroom = ""kit""\narea = 14.0\n\n# if-else construct for room\nif room == ""kit"" :\n    print(""looking around in the kitchen."")\nelse :\n    print(""looking around elsewhere."")\n\n# if-else construct for area\nif area > 15 :\n    print(""big place!"")\nelse :\n    print(""pretty small."")'"
Bollean Logic and Contol Flow/Equality.py,0,"b'# Comparison of booleans\nprint(True == False)\n\n# Comparison of integers\nprint(-5 * 15 != 75)\n\n# Comparison of strings\nprint(""pyscript"" == ""PyScript"")\n\n# Compare a boolean with an integer\nprint(True == 1)'"
Bollean Logic and Contol Flow/Greater_and_less_than.py,0,"b'# Comparison of integers\nx = -3 * 6\nprint(x >= -10)\n\n# Comparison of strings\ny = ""test""\nprint(""test"" <= y)\n\n# Comparison of booleans\nprint(True > False)'"
Bollean Logic and Contol Flow/and_or_not.py,0,b'# Define variables\nmy_kitchen = 18.0\nyour_kitchen = 14.0\n\n# my_kitchen bigger than 10 and smaller than 18?\nprint(my_kitchen > 10 and my_kitchen < 18)\n\n# my_kitchen smaller than 14 or bigger than 17?\nprint(my_kitchen < 14 or my_kitchen > 17)\n\n# Double my_kitchen smaller than triple your_kitchen?\nprint(2 * my_kitchen < 3 * your_kitchen)'
Bollean Logic and Contol Flow/elif.py,0,"b'# Define variables\nroom = ""bed""\narea = 14.0\n\n# if-elif-else construct for room\nif room == ""kit"" :\n    print(""looking around in the kitchen."")\nelif room == ""bed"":\n    print(""looking around in the bedroom."")\nelse :\n    print(""looking around elsewhere."")\n\n# if-elif-else construct for area\nif area > 15 :\n    print(""big place!"")\nelif area > 10 :\n    print(""medium size, nice!"")\nelse :\n    print(""pretty small."")'"
Bollean Logic and Contol Flow/if.py,0,"b'# Define variables\nroom = ""kit""\narea = 14.0\n\n# if statement for room\nif room == ""kit"" :\n    print(""looking around in the kitchen."")\n\n# if statement for area\nif area > 15.0:\n    print(""big place!"")'"
Functions and Packages/Familiar_functions.py,0,"b'# Create variables var1 and var2\nvar1 = [1, 2, 3, 4]\nvar2 = True\n\n# Print out type of var1\nprint(type(var1))\n\n# Print out length of var1\nprint(len(var1))\n\n# Convert var2 to an integer: out2\nout2 = int(var2)\nprint(out2)'"
Functions and Packages/Import_package.py,0,"b'# Definition of radius\nr = 0.43\n\n# Import the math package\nimport math\n\n# Calculate C\nC = 2 * math.pi * r\n\n# Calculate A\nA = math.pi * r**2\n\n# Build printout\nprint(""Circumference: "" + str(C))\nprint(""Area: "" + str(A))'"
Functions and Packages/List_Methods.py,0,"b'# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))\n\n# Print out how often 14.5 appears in areas\nprint(areas.count(14.5))'"
Functions and Packages/List_Methods2.py,0,"b' Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Use append twice to add poolhouse and garage size\nareas.append(24.5)\nareas.append(15.45)\n\n\n# Print out areas\nprint(areas)\n\n# Reverse the orders of the elements in areas\nareas.reverse()\n\n# Print out areas\nprint(areas)'"
Functions and Packages/Multiple_arguments.py,0,"b'# Create lists first and second\nfirst = [11.25, 18.0, 20.0]\nsecond = [10.75, 9.50]\n\n# Paste together first and second: full\nfull = first + second\n\n# Sort full in descending order: full_sorted\nfull_sorted = sorted(full, reverse = True)\n\n# Print out full_sorted\nprint(full_sorted)'"
Functions and Packages/Selective_import.py,0,b'# Definition of radius\nr = 192500\n\n# Import radians function of math package\nfrom math import radians\n\n# Travel distance of Moon if 12 degrees. Store in dist.\ndist = r * radians(12)\n\n# Print out dist\nprint(dist)'
Functions and Packages/String_Methods.py,0,"b'# string to experiment with: room\nroom = ""poolhouse""\n\n# Use upper() on room: room_up\nroom_up = room.upper()\n\n\n# Print out room and room_up\nprint(room)\nprint(room_up)\n\n# Print out the number of o\'s in room\nprint(room.count(""o""))'"
List - A Data Structure/Create_a_list.py,0,"b'# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Create list areas\nareas = [hall, kit, liv, bed, bath]\n\n\n# Print areas\nprint(areas)\n'"
List - A Data Structure/Create_list_with different_type.py,0,"b'# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Adapt list areas\nareas = [""hallway"", hall, ""kitchen"", kit, ""living room"", liv,""bedroom"", bed, ""bathroom"", bath]\n\n# Print areas\nprint(areas)'"
List - A Data Structure/Extend_a_list.py,0,"b'# Create the areas list and make some changes\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""chill zone"", 20.0, \n         ""bedroom"", 10.75, ""bathroom"", 10.50]\n\n# Add poolhouse data to areas, new list is areas_1\nareas_1 = areas + [""poolhouse"", 24.5]\n\n# Add garage data to areas_1, new list is areas_2\nareas_2 = areas_1 + [""garage"", 15.45]'"
List - A Data Structure/Inner_workings_of_lists.py,0,"b'# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = areas[:]\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)'"
List - A Data Structure/List_of_lists.py,0,"b'# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# house information as list of lists\nhouse = [[""hallway"", hall],\n         [""kitchen"", kit],\n         [""living room"", liv],\n         [""bedroom"", bed],\n         [""bathroom"", bath]]\n\n# Print out house\nprint(house)\n\n# Print out the type of house\nprint(type(house))'"
List - A Data Structure/Replace_list_elements.py,0,"b'# Create the areas list\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\n\n# Correct the bathroom area\nareas[-1] = 10.50\n\n\n# Change ""living room"" to ""chill zone""\nareas[4] = ""chill zone""'"
List - A Data Structure/Slicing_and_dicing (2).py,0,"b'# Create the areas list\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\n\n# Alternative slicing to create downstairs\ndownstairs = areas[:6]\n\n# Alternative slicing to create upstairs\nupstairs = areas [6:]'"
List - A Data Structure/Slicing_and_dicing.py,0,"b'# Create the areas list\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\n\n# Use slicing to create downstairs\ndownstairs = areas[0:6]\n\n# Use slicing to create upstairs\nupstairs = areas[6:10]\n\n# Print out downstairs and upstairs\nprint(downstairs)\nprint(upstairs)'"
List - A Data Structure/Subset_and_calculate.py,0,"b'# Create the areas list\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\n\n# Sum of kitchen and bedroom area: eat_sleep_area\neat_sleep_area = 18.0 + 10.75\n\n# Print the variable eat_sleep_area\nprint(eat_sleep_area)'"
List - A Data Structure/Subset_and_conquer.py,0,"b'# Create the areas list\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\n\n# Print out second element from areas\nprint(areas[1])\n\n# Print out last element from areas\nprint(areas[-1])\n\n# Print out the area of the living room\nprint(areas[-5])'"
Numpy/2D_Arithmetic.py,2,"b'# baseball is available as a regular list of lists\n# update is available as 2D Numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and update\nprint(np_baseball + update)\n\n# Create Numpy array: conversion\nconversion = np.array([0.0254, 0.453592, 1])\n\n# Print out product of np_baseball and conversion\nprint(np_baseball * conversion)'"
Numpy/Average_versus_median.py,3,"b'# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height from np_baseball\nnp_height = np.array(np_baseball[:,0])\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))'"
Numpy/Baseball_data_in_2D_form.py,1,b'# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)'
Numpy/Baseball_players'_BMI.py,2,b'# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg \nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m ** 2\n\n# Print out bmi\nprint(bmi)'
Numpy/Baseball_players'_height.py,1,b'# height is available as a regular list\n\n# Import numpy\nimport numpy as np\n\n# Create a Numpy array from height: np_height\nnp_height = np.array(height)\n\n# Print out np_height\nprint(np_height)\n\n# Convert np_height to m: np_height_m\nnp_height_m = np_height * 0.0254\n\n# Print np_height_m\nprint(np_height_m)'
Numpy/Blend_ it_all_together.py,6,"b'# heights and positions are available as lists\n\n# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\nnp_positions = np.array(positions)\nnp_heights = np.array(heights)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np.array(np_heights[np_positions == \'GK\'])\n\n# Heights of the other players: other_heights\nother_heights = np.array(np_heights[np_positions != \'GK\'])\n\n# Print out the median height of goalkeepers. Replace \'None\'\nprint(""Median height of goalkeepers: "" + str(np.median(gk_heights)))\n\n# Print out the median height of other players. Replace \'None\'\nprint(""Median height of other players: "" + str(np.median(other_heights)))'"
Numpy/Explore_the_baseball_data.py,4,"b'# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(""Average: "" + str(avg))\n\n# Print median height. Replace \'None\'\nmed = np.median(np_baseball[:,0])\nprint(""Median: "" + str(med))\n\n# Print out the standard deviation on height. Replace \'None\'\nstddev = np.std(np_baseball[:,0])\nprint(""Standard Deviation: "" + str(stddev))\n\n# Print out correlation between first and second column. Replace \'None\'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(""Correlation: "" + str(corr))'"
Numpy/Lightweight_baseball_players.py,3,b'# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height) * 0.0254\nnp_weight_kg = np.array(weight) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = np.array(bmi < 21)\n\n# Print out light\nprint(light)\n\n# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])'
Numpy/Subsetting_2D_Numpy_Arrays.py,1,"b'# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49, : ])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123,0])'"
Numpy/Subsetting_Numpy_Arrays.py,2,b'# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 50\nprint(np_weight[50])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[100 : 111])'
Numpy/Your_First_2D_Numpy Array.py,1,"b'# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)'"
Numpy/Your_First_Numpy_Array.py,1,"b'# Create list baseball \nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Import the numpy package as np\nimport numpy as np\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))'"
Pandas/CSV_to_DataFrame(2).py,0,"b""# Import pandas as pd\nimport pandas as pd\n\n# Fix import by including index_col\ncars = pd.read_csv('cars.csv', index_col = 0)\n\n# Print out cars\nprint(cars)"""
Pandas/CSV_to_DataFrame.py,0,"b'# Import pandas as pd\nimport pandas as pd\n\n# Import the cars.csv data: cars\ncars = pd.read_csv(""cars.csv"")\n\n# Print out cars\nprint(cars)'"
Pandas/Square_Brackets.py,0,"b""#Import cars data\nimport pandas as pd\ncars = pd.read_csv('cars.csv', index_col = 0)\n\n# Print out country column as Pandas Series\nprint(cars['country'])\n\n# Print out country column as Pandas DataFrame\nprint(cars[['country']])\n"""
Pandas/loc(1).py,0,"b""# Import cars data\nimport pandas as pd\ncars = pd.read_csv('cars.csv', index_col = 0)\n\n# Print out observation for Japan\nprint(cars.loc['JAP'])\n\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])"""
Pandas/loc(2).py,0,"b""# Import cars data\nimport pandas as pd\ncars = pd.read_csv('cars.csv', index_col = 0)\n\n# Print out drives_right value of Morocco\nprint(cars.loc['MOR', 'drives_right'])\n\n# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])"""
Plotting with Matplotlib/Additional_Customizations.py,1,"b""# Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()"""
Plotting with Matplotlib/Build_a_histogram(1).py,0,b'# Create histogram of life_exp data\nplt.hist(life_exp)\n\n# Display histogram\nplt.show()'
Plotting with Matplotlib/Build_a_histogram(2)_bins.py,0,"b'# Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)\n\n# Show and clean up plot\nplt.show()\nplt.clf()\n\n# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)\n\n# Show and clean up again\nplt.show()\nplt.clf()'"
Plotting with Matplotlib/Build_a_histogram(3)_compare.py,0,"b'# Histogram of life_exp, 15 bins\nplt.hist(life_exp, bins = 15)\n\n# Show and clear plot\nplt.show()\nplt.clf()\n\n# Histogram of life_exp1950, 15 bins\nplt.hist(life_exp1950, bins = 15)\n\n# Show and clear plot again\nplt.show()\nplt.clf()'"
Plotting with Matplotlib/Colors.py,1,"b""# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])\n\n# Show the plot\nplt.show()"""
Plotting with Matplotlib/Labels.py,0,"b""# Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n\n# After customizing, display the plot\nplt.show()"""
Plotting with Matplotlib/Line_plot_(1).py,0,"b'# Print the last item from year and pop\nprint(year[-1])\nprint(pop[-1])\n\n# Import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\n\n# Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year, pop)\nplt.show()'"
Plotting with Matplotlib/Line_plot_(3).py,0,"b'import matplotlib.pyplot as plt\n\n# Print the last item of gdp_cap and life_exp\nprint(life_exp[-1])\nprint(gdp_cap[-1])\n\n# Make a line plot, gdp_cap on the x-axis, life_exp on the y-axis\nplt.plot(gdp_cap, life_exp)\n\n# Display the plot\nplt.show()'"
Plotting with Matplotlib/Scatter_Plot_(1).py,0,"b""import matplotlib.pyplot as plt\n\n# Change the line plot below to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()"""
Plotting with Matplotlib/Scatter_plot_(2).py,0,"b'# Import package\nimport matplotlib.pyplot as plt\n\n# Build Scatter plot\nplt.scatter(pop, life_exp)\n\n# Show plot\nplt.show()'"
Plotting with Matplotlib/Sizes.py,1,"b""# Import numpy as np\nimport numpy as np\n\n# Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])\n\n# Display the plot\nplt.show()"""
Plotting with Matplotlib/Ticks.py,0,"b""# Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000,10000,100000]\ntick_lab = ['1k','10k','100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)\n\n# After customizing, display the plot\nplt.show()"""
Python Basics/Calculations_with_variables.py,0,b'# Create a variable savings\nsavings = 100\n\n# Create a variable factor\nfactor = 1.1\n\n# Calculate result\nresult = 100 * 1.1 ** 7\n\n# Print out result\nprint(result)'
Python Basics/Operations_with_other_types.py,0,"b'# Several variables to experiment with\nsavings = 100\nfactor = 1.1\ndesc = ""compound interest""\n\n# Assign product of factor and savings to year1\nyear1 = savings * factor\n\n\n# Print the type of year1\nprint(type(year1))\n\n# Assign sum of desc and desc to doubledesc\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)'"
Python Basics/Other_variable_types.py,0,"b'# Create a variable desc\ndesc = ""compound interest""\n\n# Create a variable profitable\nprofitable = True'"
Python Basics/Type_conversion.py,0,"b'# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\nprint(""I started with $"" + str(savings) + "" and now have $"" + str(result) + "". Awesome!"")\n\n# Definition of pi_string\npi_string = ""3.1415926""\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)'"
