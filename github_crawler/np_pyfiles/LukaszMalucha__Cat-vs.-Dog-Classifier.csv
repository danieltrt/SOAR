file_path,api_count,code
app.py,0,"b'## App Utilities\nimport os\n# import env\nfrom db import db\n\nfrom flask_bootstrap import Bootstrap\nfrom flask_restful import Api\nfrom flask import Flask, render_template, request, jsonify\nfrom flask_uploads import UploadSet, configure_uploads, IMAGES\n\nfrom resources.user import UserRegister, UserLogin, UserLogout, login_manager\nfrom resources.utils import allowed_file, image_classification\nfrom resources.blog_posts import blog_posts\n\n## App Settings\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = os.environ.get(\'SECRET_KEY\')\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = os.environ.get(\'SQLALCHEMY_DATABASE_URI\')\napp.config[\'SQLALCHEMY_TRACK_MODIFICATIONS\'] = False\napp.config[\'PROPAGATE_EXCEPTIONS\'] = True\napp.config[\'UPLOADED_PHOTOS_DEST\'] = \'static/uploads\'\napp.config[\'FLASKS3_BUCKET_NAME\'] = os.environ.get(\'FLASKS3_BUCKET_NAME\')\nphotos = UploadSet(\'photos\', IMAGES)  # image upload handling\nconfigure_uploads(app, photos)\n\n\napp.config[\'DEBUG\'] = False\napi = Api(app)\n\nBootstrap(app)\nlogin_manager.init_app(app)\n\n## Register Resources\n\napi.add_resource(UserRegister, \'/register\')\napi.add_resource(UserLogin, \'/login\')\napi.add_resource(UserLogout, \'/logout\')\n\n\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef dashboard():\n    """"""Main Dashboard""""""\n    return render_template(""dashboard.html"")\n\n@app.route(\'/predict\', methods=[\'GET\', \'POST\'])\ndef predict():\n    """"""Image Classification""""""\n    if request.method == \'POST\' and \'file\' in request.files:\n        image = request.files[\'file\']\n        # .jpg file extension check\n        if allowed_file(image.filename):\n            # Apply neural network\n            guess = image_classification(image)\n\n            return jsonify({\'guess\': guess})\n\n        else:\n            return jsonify({\'error\': ""Only .jpg files allowed""})\n    else:\n        return jsonify({\'error\': ""Please upload a .jpg file""})\n\n@app.route(\'/blog\')\ndef blog():\n    """"""Blog""""""\n    blog_list = blog_posts[::-1]\n    return render_template(""blog.html"", blog_list=blog_list)\n\n\n### ERROR HANDLING\n\n\n@app.errorhandler(404)\ndef error404(error):\n    return render_template(\'404.html\'), 404\n\n\n@app.errorhandler(500)\ndef error500(error):\n    return render_template(\'500.html\'), 500\n\n\n## DB INIT\ndb.init_app(app)\n\n## APP INITIATION\nif __name__ == \'__main__\':\n\n    if app.config[\'DEBUG\']:\n        @app.before_first_request\n        def create_tables():\n            db.create_all()\n\n    # app.run()\n\n# Heroku\n    port = int(os.environ.get(\'PORT\', 5000))\n    app.run(host=\'0.0.0.0\', port=port)\n'"
db.py,0,b'from flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n'
deep_learning/ConvolutionalNeuralNetwork_V1.py,2,"b'### Convolutional Neural Network  - Cat or Dog ???\n\n##################################################################### Building the CNN ################################################\n\n\n\n### Importing Libraries\n\nfrom keras.models import Sequential     # initialize\nfrom keras.layers import Conv2D         # saving model\nfrom keras.models import load_model     # Convolution layer\nfrom keras.layers import MaxPooling2D   # Pooling\nfrom keras.layers import Flatten        # Flattening\nfrom keras.layers import Dense          # Fully connected layers for ANN\nfrom keras.layers import Dropout        # Dropout Rate\n\n\n### Initializing the CNN\n\nclassifier = Sequential()\n\n### Step 1 - Convolution 32x3x3\n\nclassifier.add(Conv2D(32, (3, 3),                            ## 32 - number of feature detectors, 3-rows and 3-cols                  \n                             input_shape=(128, 128, 3),      ## fixed size of image to standardize dataset + 3d array for color img (reverse order for Tensorflow backend)\n                             activation = \'relu\'))         ## to make sure there is no negative values in pixel maps to have non-linearity\n\n\n### Step 2 - Max Pooling\n\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.25))\n\n### Step 2b - add additional convolutional layer for better result (from 50% to 80% accuracy)\n\nclassifier.add(Conv2D(32, (3, 3), activation = \'relu\'))      ## No input shape as it was already done\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.2))\n\n\n### Step 2c - add additional convolutional layer for better result (from 80% to 90% accuracy)\n\nclassifier.add(Conv2D(64, (3, 3), activation = \'relu\'))      ## No input shape as it was already done\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.3))\n\n\n### Step 2d - add additional convolutional layer for better result (from 80% to 90% accuracy)\n\nclassifier.add(Conv2D(128, (3, 3), activation = \'relu\'))      ## No input shape as it was already done\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.4))\n\n\n### Step 3 - Flattening to one single vector\n\nclassifier.add(Flatten())\n\n\n### Step 4 - Full connection\n\n# Hidden layer - 128 as a experience guess\n\nclassifier.add(Dense(activation = \'relu\', units = 128))\n\n\n# Output layer - one node\n\nclassifier.add(Dense(activation = \'sigmoid\', units = 1))  ## softmax for non--binary\n\n\n### Compile the CNN Model (alternatively optimizer=""RMSprop"")\n\nclassifier.compile(optimizer = \'adam\', loss = \'binary_crossentropy\', metrics = [\'accuracy\'])\n\n\n############################################################ Fitting the CNN to the images ###########################################\n\n\n### From https://keras.io/preprocessing/image/   apply some random transformations on image dataset\n### flow_from_directory method code from webpage\n\nfrom keras.preprocessing.image import ImageDataGenerator \n\ntrain_datagen = ImageDataGenerator(rescale=1./255,\n                                   rotation_range=40,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1./255)\n\ntraining_set = train_datagen.flow_from_directory(\'dataset/training_set\',       ## extraction directory\n                                                 target_size=(128, 128),         ## same dims as in cnn\n                                                 batch_size=32,\n                                                 class_mode=\'binary\')\n\ntest_set = test_datagen.flow_from_directory(\'dataset/test_set\',                ## extraction directory\n                                            target_size=(128, 128),              ## same dims as in cnn\n                                            batch_size=32,\n                                            class_mode=\'binary\')\n\n\n\n### Fitting Classifier\n\nclassifier.fit_generator(training_set,\n                         steps_per_epoch=11,            ## train images\n                         epochs=10,                     ## approx 30min/epoch on gpu tf backend\n                         validation_data=test_set,\n                         validation_steps=11)            ## test images\n\n\n\n\nclassifier.save(\'cat_dog_classifier.h5\')        \n\n\n## Acc - 89% Loss - 25%\n\n\n\n\n\n############################################################## Single Prediction with CNN ##########################################\n\n\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\nimport numpy as np\n     \nclass_labels = {v: k for k, v in training_set.class_indices.items()}\n     \nimg = imread(\'FILEPATH\') \nimg = resize(img,(128,128))\nimg = np.expand_dims(img,axis=0)\n     \nif(np.max(img)>1):\n        \n        img = img/255.0\n     \nprediction = classifier.predict_classes(img)\n     \nprint (class_labels[prediction[0][0]])\n\n\n\n\n\n\n\n\n'"
deep_learning/ConvolutionalNeuralNetwork_V2.py,0,"b'# -*- coding: utf-8 -*-\n""""""\nCreated on Mon May  4 16:46:19 2020\n\n@author: LukaszMalucha\n""""""\n\n\nimport os \nimport zipfile\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm_notebook\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\ndataset_path=""./cats_and_dogs_filtered.zip""\n\nzip_object = zipfile.ZipFile(dataset_path, mode=\'r\')\n\nzip_object.extractall(""./"")\nzip_object.close()\n\n\n\ndataset_path_new = ""./cats_and_dogs_filtered/""\ntrain_dir = os.path.join(dataset_path_new, ""train"")\nvalidation_dir = os.path.join(dataset_path_new, ""validation"")\n\n\nIMG_SHAPE = (128, 128, 3)\n\n\n# Custom head as we are prediciting cat/dog only instead of imagenet full spectrum\nbase_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE, include_top=False, weights=""imagenet"")\n\n\n# Freeze layers of initial network to prevent them from changing\nbase_model.trainable = False\n\n# Custom head\nbase_model.output\n\n# Use global average pulling layer to flatter input\nglobal_average_layer = tf.keras.layers.GlobalAveragePooling2D()(base_model.output)\nglobal_average_layer\n\nprediction_layer = tf.keras.layers.Dense(units=1, activation=""sigmoid"")(global_average_layer)\n\n\n# Combine base model with custom head\n\n\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=prediction_layer)\n\nmodel.summary()\n\n\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001), loss=""binary_crossentropy"", metrics=[""accuracy""])\n\n\n# Image Data Generator\n\n\ndata_gen_train = ImageDataGenerator(rescale=1/255.)\ndata_gen_valid = ImageDataGenerator(rescale=1/255.)\n\n\ntrain_generator = data_gen_train.flow_from_directory(train_dir, target_size=(128, 128), batch_size=128, class_mode=""binary"")\n\nvalid_generator = data_gen_valid.flow_from_directory(validation_dir, target_size=(128, 128), batch_size=128, class_mode=""binary"")\n\n\n\nmodel.fit_generator(train_generator, epochs=20, validation_data=valid_generator)\n\n\nvalid_loss, valid_accuracy = model.evaluate_generator(valid_generator)\n\n\nprint(""Accuracy after transfer learning: {}"".format(valid_accuracy))\n\n\n# Fine Tuning\n#\n#base_model.trainable = True\n#\n#print(f""Number of layers: {len(base_model.layers)}"") # 155\n#\n#fine_tune_at = 100\n#\n## Freez all layers before 100\n#for layer in base_model.layers[:fine_tune_at]:\n#    layer.trainable = False\n\n\n\n#model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001), loss=""binary_crossentropy"", metrics=[""accuracy""])\n#\n#\n#model.fit_generator(train_generator, epochs=5, validation_data=valid_generator)\n#\n#valid_loss, valid_accuracy = model.evaluate_generator(valid_generator)\n\n\n\nmodel_json = model.to_json()\nwith open(""cat_dog_classifier.json"", ""w"") as json_file:\n    json_file.write(model_json)\n\n\nmodel.save_weights(""fashion_model.h5"")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'"
models/__init__.py,0,b''
models/forms.py,0,"b""from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField\nfrom wtforms.validators import InputRequired, Email, Length, EqualTo\n\n\n## Login Form\n\nclass LoginForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Length(min=3, max=50)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80)])\n    remember = BooleanField('Remember Me')\n\n## Register Form\n\nclass RegisterForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Email(message='Please enter correct email'), Length(max=50)])\n    username = StringField('username', validators=[InputRequired(), Length(min=3, max=50)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80), EqualTo('confirm', message='Passwords must match')])\n    confirm = PasswordField('Repeat Password')"""
models/user.py,0,"b""from db import db\nfrom flask_login import UserMixin\n\n\nclass UserModel(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(50), unique=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n\n    def __init__(self, email, username, password):\n        self.email = email\n        self.username = username\n        self.password = password\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    @classmethod\n    def find_by_email(cls, email):\n        return cls.query.filter_by(email=email).first()\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n"""
resources/__init__.py,0,b''
resources/blog_posts.py,0,"b'blog_posts = [\n\n    {""date"": ""Dec 2018"",\n     ""title"": ""Starcraft II A.I. Bot"",\n     ""content"": ""Industria is a mixture of role-based A.I. with an deep learning decision process enhancement. While most of it\'s actions are scripted, it decides about an army composition."",\n     ""keywords"": [\'starcraft-ii\',\'bot\',\'artificial-intelligence\',\'q-learning\',\'reinforcement-learning\'],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/47260876-9d6ded00-d4bb-11e8-94bd-3d718231d34b.PNG"",\n     ""link"": ""https://github.com/LukaszMalucha/Starcraf2-A.I.-Bot""\n     },\n\n    {""date"": ""Feb 2019"",\n    ""title"": ""Twitter Dashboard"",\n    ""content"": ""Project Goal was to create fully functional interface for Twitter API. Flask App allows user to find out what is currently trending and extract data sample to MongoDB. ""\n               ""Once data sample is extracted, next step is to pre-process it and load to SQL database. Final step is to apply ""\n               ""Keras LSTM model on processed tweets to find out what\'s the dominating sentiment among conversation participants - positive, negative or neutral."",\n    ""keywords"": [\n                \'twitter-api\',\n                \'mongodb\',\n                \'sentiment-analysis\',\n                \'flask\',\n                \'python\',\n                ],\n    ""img"": ""https://user-images.githubusercontent.com/26208598/48212361-5749d200-e373-11e8-9e1c-de0939c4b5b0.PNG"",\n    ""link"": ""https://github.com/LukaszMalucha/Twitter-Flask""\n\n    },\n\n    {""date"": ""Feb 2019"",\n     ""title"": ""ML Library Project"",\n     ""content"": ""Goal of the project is to create robust, fully-responsive, open-source URL platform where user will be ""\n                ""able to find information about particular machine learning algorithm. Data will be easily accessible and in the compact form. ""\n                ""It will be ML cheat sheet in a form of a website. Project will be stored on GitHub."",\n     ""keywords"": [\n                \'html\',\n                \'css\',\n                \'bootstrap\',\n                \'material-design\',\n                     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/45377204-cfa14a80-b5f1-11e8-88a5-106b311f541f.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/ML-Library""\n\n     },\n\n    {""date"": ""Feb 2019"",\n     ""title"": ""RestBank API"",\n     ""content"": ""Django RESTful banking application for asset management. With integrated Token authorization and view permissions App allows bank customer safely interact with his Asset Portfolio. ""\n                ""User can buy and sell financial instruments, top up his cash balance. It also allows bank staff members to create or delete available instruments and also update current price."",\n     ""keywords"": [\n         \'django-rest -framework\',\n         \'python\',\n         \'banking\',\n         \'django\'\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/53289476-45f3cc80-378e-11e9-8c19-36568d8f95ed.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/RESTBank-App""\n\n     },\n    {""date"": ""Mar 2019"",\n     ""title"": ""Springboard Analytics"",\n     ""content"": ""Django App that allows user to: Scrape and clean course data from Springboardcourses.ie. ""\n                ""Visualize course data in order to get some useful insights. Apply machine learning apriori algorithm on gathered information. ""\n                ""Extract course data from Django Postgres db with a handy RESTful Backend."",\n\n     ""keywords"": [\n         \'django\'\n        \'data-preprocessing\',\n        \'rest-api\',\n        \'restful-api\',\n        \'rest\',\n        \'pandas\',\n        \'django-rest-framework\'\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/53902093-57fc2780-4038-11e9-81db-517067de0c2f.jpg"",\n     ""link"": ""https://github.com/LukaszMalucha/Springboard-Insights""\n\n     },\n    {""date"": ""Mar 2019"",\n     ""title"": ""Data Labs with Python & Tableau"",\n     ""content"": ""What is a current value of you property? We\'ll determine most attractive investments in the area. ""\n                ""Also we\'ll answer the question what\'s the ultimate toolbox for Data Science based on scraped Linkedin profiles."",\n\n     ""keywords"": [\n         \'tableau\',\n         \'django\',\n         \'pandas\',\n         \'restful-api\',\n         \'machine-learning\'\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/54075691-1f5b8880-429a-11e9-8919-baf9744a40b4.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Data-Labs-with-Python-Tableau""\n\n     },\n    {""date"": ""Mar 2019"",\n     ""title"": ""Project Management Dashboard"",\n     ""content"": ""Project management Dashboard made with Django.""\n                "" This Project is a simulation of work environment, ""\n                ""where more traditional agile techniques are blended with key gamification concepts of \'reward\' and \'role\'. "",\n\n     ""keywords"": [\n\n         \'django\',\n         \'agile\',\n         \'project-management\',\n         \'docker\',\n         \'postgresql\',\n         \'python\',\n         \'heroku\',\n         \'gamification\',\n\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/54495673-ecd70e80-48dd-11e9-81b4-7c8634ed8a6a.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Project-Dashboard-with-Django""\n\n     },\n\n    {""date"": ""Mar 2019"",\n     ""title"": ""Twitter API Dashboard"",\n     ""content"": ""Flask application hosting Twitter API. Main functionality allows user to find out what is currently trending and extract data sample to MongoDB. Once data sample is extracted, next step is to pre-process it and load to SQL database. ""\n                ""Final step is to apply Keras LSTM model on processed tweets to find out what\'s the dominating sentiment among conversation participants - positive, negative or neutral."",\n\n     ""keywords"": [\n\n         \'flask\',\n         \'twitter\',\n         \'sentiment-analysis\',\n         \'selenium\',\n         \'api\',\n         \'python\',\n         \'tweepy\',\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/52292307-57ef0600-296c-11e9-872b-f8ccdf31c024.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Twitter-API-Dashboard""\n\n     },\n\n    {""date"": ""Apr 2019"",\n     ""title"": ""Geocoder IE"",\n     ""content"": ""Coding Assignment. We received list of approx. ""\n                ""3000 Irish addresses from one of our Customers. Our customer wants those addresses to be geocoded. ""\n                ""Regarding accuracy they expect each geocode to be accurate at least at county level. "",\n\n     ""keywords"": [\n        \'geocoder\',\n        \'dataset\',\n        \'pandas\',\n        \'geocode-data\',\n        \'flask\',\n        \'leafletjs\',\n        \'csv\',\n        \'rest-api\',\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/55428834-e4d7c980-5581-11e9-991a-da9bf0a1a9f5.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Geocoder-IE""\n\n     },\n    {""date"": ""Apr 2019"",\n     ""title"": ""Flask Js Survey"",\n     ""content"": ""It\'s hard to decide if you have so many different algorithms to your disposal. But with certain information given about analyzed dataset, ""\n                ""we can narrow that choice to few best matches. Project is also an example of building connection between MongoDB database, ""\n                ""Flask Backend, and jQuery frontend."",\n\n     ""keywords"": [\n         \'algorithm\',\n         \'mongodb\',\n         \'flask\',\n         \'python\',\n         \'jquery\',\n         \'ajax\',\n         \'sqlite3\',\n         \'rest-api\',\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/55672680-a568f000-5895-11e9-94d2-92aff7f8984a.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Flask-Js-Survey""\n\n     },\n\n    {""date"": ""Apr 2019"",\n     ""title"": ""Cat vs. Dog Image Classifier"",\n     ""content"": ""Image classifier trained to distinct between cats and dogs images. ""\n                ""Convolutional Neural Network was built with Keras & Tensorflow(GPU). Heroku-hosted web application was built with Flask framework. "",\n\n     ""keywords"": [\n\n         \'image-classifier\',\n         \'flask\',\n         \'convolutional-neural-networks\',\n         \'gpu\',\n         \'tensorflow\',\n         \'numpy\',\n\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/55568076-e24ab080-56f6-11e9-82e2-ed877c52ff6b.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Cat-vs.-Dog-Classifier""\n\n     },\n\n    {""date"": ""Apr 2019"",\n     ""title"": ""Digit Recognition with Keras"",\n     ""content"": ""Hand-Written Digit Recognition based on MNIST Dataset. ""\n                ""Convolutional Neural Network was built with Keras & Tensorflow(GPU). Heroku-hosted web application was built with Flask framework, Ajax & FileSaver.  "",\n\n     ""keywords"": [\n        \'digit-recognition\',\n        \'flask\',\n        \'dataset\',\n        \'mnist-dataset\',\n        \'convolutional-neural-networks\',\n        \'tensorflow\',\n        \'keras\',\n        \'jquery\',\n        \'ajax\',\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/55821040-756b5800-5af4-11e9-9b8b-0d1f5455d17a.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Digit-Recognition""\n\n     },\n\n    {""date"": ""Apr 2019"",\n     ""title"": ""A.I. Sommelier"",\n     ""content"": ""Can A.I. accurately predict red wine quality rating? Anyway, what is quality if not how wine taster\'s tongue precepts wine\'s chemical components?""            \n                ""Let\'s try to answer that question with machine learning approach, where various classifier algorithms will try to discover all the patters in wine rating process. ""\n                ""As a last part of a project, let\'s build some artificial sommeliers and let them handle real-world wine samples. Everything in a form of python flask application."",\n\n     ""keywords"": [\n\n         \'classifier\',\n         \'flask\',\n         \'machine-learning\',\n         \'sklearn\',\n         \'pandas\',\n         \'wine-quality\',\n         \'xgboost\',\n         \'random-forest\',\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/55909851-e41fe280-5bd4-11e9-9390-f34556a2f978.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Flask-Wine-Quality""\n\n     },\n\n    {""date"": ""Apr 2019"",\n     ""title"": ""Blockchain Environment Simulation"",\n     ""content"": ""Flask App simulation of a Blockchain. Great for getting your head around basic concepts of a Technology: blockchain: ""\n                ""Mining Block | Proof of Work | Hash | Validation Check | Blockchain Token ICO. ""\n                ""Happy mining!"",\n\n     ""keywords"": [\n        \'blockchain\',\n        \'flask\',\n        \'solidity\',\n        \'jquery\',\n        \'ajax\',\n        \'bitcoin\',\n        \'mining\',\n        \'sqlite3\',\n\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/56019047-94880680-5cfb-11e9-948a-8d84275c4f72.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Blockchain-Simulation""\n\n     },\n\n    {""date"": ""Apr 2019"",\n     ""title"": ""Pathfinder AI"",\n     ""content"": ""Practical application of Q-Learning algorithm on pathfinding problem. ""\n                ""Additionally, project includes algorithm that generate an array of all the possible moves in 8x8 grid, easily adjustable."",\n\n     ""keywords"": [\n\n         \'artificial-intelligence\',\n         \'flask\',\n         \'q-learning\',\n         \'reinforcement-learning\',\n         \'numpy\',\n         \'algorithm\',\n         \'rest-api\',\n         \'jquery\',\n         \'ajax\'\n\n     ],\n     ""img"": ""https://user-images.githubusercontent.com/26208598/56038938-12afd180-5d2b-11e9-92ab-7faa8ff5e32d.JPG"",\n     ""link"": ""https://github.com/LukaszMalucha/Pathfinder-AI""\n\n     },\n\n\n\n]\n'"
resources/user.py,0,"b'from flask import session, Response, render_template, redirect, flash\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_restful import Resource\nfrom models.user import UserModel\nfrom models.forms import RegisterForm, LoginForm\nfrom flask_login import LoginManager, login_user, logout_user, AnonymousUserMixin\n\nlogin_manager = LoginManager()\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return UserModel.find_by_id(int(user_id))\n\nclass Anonymous(AnonymousUserMixin):\n  def __init__(self):\n    self.email = \'Guest\'\n\nlogin_manager.anonymous_user = Anonymous\n\n\nclass UserRegister(Resource):\n\n    def get(self):\n        form = RegisterForm()\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n    def post(self):\n        form = RegisterForm()\n        if form.validate_on_submit():\n            if UserModel.find_by_email(form.email.data) or UserModel.find_by_username(form.username.data):\n                flash(f\'User already exist\', \'alert alert-danger\')\n                return Response(render_template(\'user/register.html\', form=form))\n\n            hashed_password = generate_password_hash(form.password.data,\n                                                     method=\'sha256\')  ## password get hashed for security purposes\n            new_user = UserModel(email=form.email.data, username=form.username.data, password=hashed_password)\n            new_user.save_to_db()\n            login_user(new_user)\n            return redirect(""/"")\n\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n\nclass UserLogin(Resource):\n\n    def get(self):\n        form = LoginForm()\n\n        # alert alert-success\n        return Response(render_template(\'user/login.html\', form=form))  ## passing login form to login template\n\n    def post(self):\n        form = LoginForm()\n\n        if form.validate_on_submit():  ## if form was submitted....\n            user = UserModel.find_by_email(email=form.email.data)\n            if user:\n                if check_password_hash(user.password, form.password.data):\n                    session[\'current_user\'] = user.email\n                    flash(f\'You have successfully logged in as {user.email}\', \'alert alert-success\')\n                    login_user(user)\n                    return redirect(""/"")\n            else:\n                flash(u\'Invalid Email or Password provided\', \'alert alert-danger\')\n\n        return Response(render_template(\'user/login.html\', form=form))\n\n\nclass UserLogout(Resource):\n\n    def get(self):\n        logout_user()\n        return redirect(""login"")\n'"
resources/utils.py,2,"b'import os.path\nimport numpy as np\nimport keras\nfrom keras.models import load_model\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\n\n# Path to saved classifier\nmy_path = os.path.abspath(os.path.dirname(__file__))\ncat_dog_classifier = os.path.join(my_path, ""../static/cat_dog_classifier/cat_dog_classifier.h5"")\n\n\nALLOWED_EXTENSIONS = set([\'jpg\'])\ndef allowed_file(filename):\n    """"""Only .jpg files allowed""""""\n    return \'.\' in filename and \\\n           filename.rsplit(\'.\', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef image_classification(image):\n    """"""Apply image classifier""""""\n    # clear Tensor session to avoid error\n    keras.backend.clear_session()\n    # load saved model\n    image_classifier = load_model(cat_dog_classifier)\n    # prepare labels\n    class_labels = {0: \'Cat\', 1: \'Dog\'}\n    # read photo & transform it into array\n    img = imread(image)\n    img = resize(img, (128, 128))\n    img = np.expand_dims(img, axis=0)\n    if np.max(img) > 1:\n        img = img / 255.0\n    # predict class\n    prediction = image_classifier.predict_classes(img)\n    percent_values = prediction.tolist()\n    # for website display\n    guess = class_labels[prediction[0][0]]\n    return guess\n\n\n\n'"
_Dockerized/catdogclassifier/web/app.py,0,"b'## App Utilities\nimport os\nimport env\nfrom db import db\n\nfrom flask_bootstrap import Bootstrap\nfrom flask_restful import Api\nfrom flask import Flask, render_template, request, jsonify\nfrom flask_uploads import UploadSet, configure_uploads, IMAGES\n\nfrom resources.user import UserRegister, UserLogin, UserLogout, login_manager\nfrom resources.utils import allowed_file, image_classification\n\n## App Settings\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = os.environ.get(\'SECRET_KEY\')\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = os.environ.get(\'SQLALCHEMY_DATABASE_URI\')\napp.config[\'SQLALCHEMY_TRACK_MODIFICATIONS\'] = False\napp.config[\'PROPAGATE_EXCEPTIONS\'] = True\napp.config[\'UPLOADED_PHOTOS_DEST\'] = \'static/uploads\'\napp.config[\'FLASKS3_BUCKET_NAME\'] = os.environ.get(\'FLASKS3_BUCKET_NAME\')\nphotos = UploadSet(\'photos\', IMAGES)  # image upload handling\nconfigure_uploads(app, photos)\n\napp.config[\'DEBUG\'] = True\napi = Api(app)\n\nBootstrap(app)\nlogin_manager.init_app(app)\n\n## Register Resources\n\napi.add_resource(UserRegister, \'/register\')\napi.add_resource(UserLogin, \'/login\')\napi.add_resource(UserLogout, \'/logout\')\n\n\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef dashboard():\n    """"""Main Dashboard""""""\n    return render_template(""dashboard.html"")\n\n@app.route(\'/predict\', methods=[\'GET\', \'POST\'])\ndef predict():\n    """"""Image Classification""""""\n    if request.method == \'POST\' and \'file\' in request.files:\n        image = request.files[\'file\']\n        # .jpg file extension check\n        if allowed_file(image.filename):\n            # Apply neural network\n            guess = image_classification(image)\n\n            return jsonify({\'guess\': guess})\n\n        else:\n            return jsonify({\'error\': ""Only .jpg files allowed""})\n    else:\n        return jsonify({\'error\': ""Please upload a .jpg file""})\n\n\n### ERROR HANDLING\n\n\n@app.errorhandler(404)\ndef error404(error):\n    return render_template(\'404.html\'), 404\n\n\n@app.errorhandler(500)\ndef error500(error):\n    return render_template(\'500.html\'), 500\n\n\n## DB INIT\ndb.init_app(app)\n\n## APP INITIATION\nif __name__ == \'__main__\':\n\n    if app.config[\'DEBUG\']:\n        @app.before_first_request\n        def create_tables():\n            db.create_all()\n\n    app.run(host=\'0.0.0.0\')        \n\t'"
_Dockerized/catdogclassifier/web/db.py,0,b'from flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n'
_Dockerized/catdogclassifier/web/deep_learning/ConvolutionalNeuralNetwork.py,2,"b'### Convolutional Neural Network  - Cat or Dog ???\n\n##################################################################### Building the CNN ################################################\n\n\n\n### Importing Libraries\n\nfrom keras.models import Sequential     # initialize\nfrom keras.layers import Conv2D         # saving model\nfrom keras.models import load_model     # Convolution layer\nfrom keras.layers import MaxPooling2D   # Pooling\nfrom keras.layers import Flatten        # Flattening\nfrom keras.layers import Dense          # Fully connected layers for ANN\nfrom keras.layers import Dropout        # Dropout Rate\n\n\n### Initializing the CNN\n\nclassifier = Sequential()\n\n### Step 1 - Convolution 32x3x3\n\nclassifier.add(Conv2D(32, (3, 3),                            ## 32 - number of feature detectors, 3-rows and 3-cols                  \n                             input_shape=(128, 128, 3),      ## fixed size of image to standardize dataset + 3d array for color img (reverse order for Tensorflow backend)\n                             activation = \'relu\'))         ## to make sure there is no negative values in pixel maps to have non-linearity\n\n\n### Step 2 - Max Pooling\n\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.25))\n\n### Step 2b - add additional convolutional layer for better result (from 50% to 80% accuracy)\n\nclassifier.add(Conv2D(32, (3, 3), activation = \'relu\'))      ## No input shape as it was already done\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.2))\n\n\n### Step 2c - add additional convolutional layer for better result (from 80% to 90% accuracy)\n\nclassifier.add(Conv2D(64, (3, 3), activation = \'relu\'))      ## No input shape as it was already done\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.3))\n\n\n### Step 2d - add additional convolutional layer for better result (from 80% to 90% accuracy)\n\nclassifier.add(Conv2D(128, (3, 3), activation = \'relu\'))      ## No input shape as it was already done\nclassifier.add(MaxPooling2D(pool_size = (2,2)))            ## dims 2x2\n\nclassifier.add(Dropout(rate = 0.4))\n\n\n### Step 3 - Flattening to one single vector\n\nclassifier.add(Flatten())\n\n\n### Step 4 - Full connection\n\n# Hidden layer - 128 as a experience guess\n\nclassifier.add(Dense(activation = \'relu\', units = 128))\n\n\n# Output layer - one node\n\nclassifier.add(Dense(activation = \'sigmoid\', units = 1))  ## softmax for non--binary\n\n\n### Compile the CNN Model (alternatively optimizer=""RMSprop"")\n\nclassifier.compile(optimizer = \'adam\', loss = \'binary_crossentropy\', metrics = [\'accuracy\'])\n\n\n############################################################ Fitting the CNN to the images ###########################################\n\n\n### From https://keras.io/preprocessing/image/   apply some random transformations on image dataset\n### flow_from_directory method code from webpage\n\nfrom keras.preprocessing.image import ImageDataGenerator \n\ntrain_datagen = ImageDataGenerator(rescale=1./255,\n                                   rotation_range=40,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1./255)\n\ntraining_set = train_datagen.flow_from_directory(\'dataset/training_set\',       ## extraction directory\n                                                 target_size=(128, 128),         ## same dims as in cnn\n                                                 batch_size=32,\n                                                 class_mode=\'binary\')\n\ntest_set = test_datagen.flow_from_directory(\'dataset/test_set\',                ## extraction directory\n                                            target_size=(128, 128),              ## same dims as in cnn\n                                            batch_size=32,\n                                            class_mode=\'binary\')\n\n\n\n### Fitting Classifier\n\nclassifier.fit_generator(training_set,\n                         steps_per_epoch=11,            ## train images\n                         epochs=10,                     ## approx 30min/epoch on gpu tf backend\n                         validation_data=test_set,\n                         validation_steps=11)            ## test images\n\n\n\n\nclassifier.save(\'cat_dog_classifier.h5\')        \n\n\n## Acc - 89% Loss - 25%\n\n\n\n\n\n############################################################## Single Prediction with CNN ##########################################\n\n\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\nimport numpy as np\n     \nclass_labels = {v: k for k, v in training_set.class_indices.items()}\n     \nimg = imread(\'FILEPATH\') \nimg = resize(img,(128,128))\nimg = np.expand_dims(img,axis=0)\n     \nif(np.max(img)>1):\n        \n        img = img/255.0\n     \nprediction = classifier.predict_classes(img)\n     \nprint (class_labels[prediction[0][0]])\n\n\n\n\n\n\n\n\n'"
_Dockerized/catdogclassifier/web/models/__init__.py,0,b''
_Dockerized/catdogclassifier/web/models/forms.py,0,"b""from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField\nfrom wtforms.validators import InputRequired, Email, Length, EqualTo\n\n\n## Login Form\n\nclass LoginForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Length(min=3, max=15)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80)])\n    remember = BooleanField('Remember Me')\n\n## Register Form\n\nclass RegisterForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Email(message='Please enter correct email'), Length(max=50)])\n    username = StringField('username', validators=[InputRequired(), Length(min=3, max=15)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80), EqualTo('confirm', message='Passwords must match')])\n    confirm = PasswordField('Repeat Password')"""
_Dockerized/catdogclassifier/web/models/user.py,0,"b""from db import db\nfrom flask_login import UserMixin\n\n\nclass UserModel(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(50), unique=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n\n    def __init__(self, email, username, password):\n        self.email = email\n        self.username = username\n        self.password = password\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    @classmethod\n    def find_by_email(cls, email):\n        return cls.query.filter_by(email=email).first()\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n"""
_Dockerized/catdogclassifier/web/resources/__init__.py,0,b''
_Dockerized/catdogclassifier/web/resources/user.py,0,"b'from flask import session, Response, render_template, redirect, flash\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_restful import Resource\nfrom models.user import UserModel\nfrom models.forms import RegisterForm, LoginForm\nfrom flask_login import LoginManager, login_user, logout_user, AnonymousUserMixin\n\nlogin_manager = LoginManager()\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return UserModel.find_by_id(int(user_id))\n\nclass Anonymous(AnonymousUserMixin):\n  def __init__(self):\n    self.email = \'Guest\'\n\nlogin_manager.anonymous_user = Anonymous\n\n\nclass UserRegister(Resource):\n\n    def get(self):\n        form = RegisterForm()\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n    def post(self):\n        form = RegisterForm()\n        if form.validate_on_submit():\n            if UserModel.find_by_email(form.email.data) or UserModel.find_by_username(form.username.data):\n                flash(\'User already exist\', \'alert alert-danger\')\n                return Response(render_template(\'user/register.html\', form=form))\n\n            hashed_password = generate_password_hash(form.password.data,\n                                                     method=\'sha256\')  ## password get hashed for security purposes\n            new_user = UserModel(email=form.email.data, username=form.username.data, password=hashed_password)\n            new_user.save_to_db()\n            login_user(new_user)\n            return redirect(""/"")\n\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n\nclass UserLogin(Resource):\n\n    def get(self):\n        form = LoginForm()\n\n        # alert alert-success\n        return Response(render_template(\'user/login.html\', form=form))  ## passing login form to login template\n\n    def post(self):\n        form = LoginForm()\n\n        if form.validate_on_submit():  ## if form was submitted....\n            user = UserModel.find_by_email(email=form.email.data)\n            if user:\n                if check_password_hash(user.password, form.password.data):\n                    session[\'current_user\'] = user.email\n                    flash(\'You have successfully logged in as {0}\'.format(user.email), \'alert alert-success\')\n                    login_user(user)\n                    return redirect(""/"")\n            else:\n                flash(u\'Invalid Email or Password provided\', \'alert alert-danger\')\n\n        return Response(render_template(\'user/login.html\', form=form))\n\n\nclass UserLogout(Resource):\n\n    def get(self):\n        logout_user()\n        return redirect(""login"")\n'"
_Dockerized/catdogclassifier/web/resources/utils.py,2,"b'import os.path\nimport numpy as np\nimport keras\nfrom keras.models import load_model\n\nfrom skimage.io import imread\nfrom skimage.transform import resize\n\n# Path to saved classifier\nmy_path = os.path.abspath(os.path.dirname(__file__))\ncat_dog_classifier = os.path.join(my_path, ""../static/cat_dog_classifier/cat_dog_classifier.h5"")\n\n\nALLOWED_EXTENSIONS = set([\'jpg\'])\ndef allowed_file(filename):\n    """"""Only .jpg files allowed""""""\n    return \'.\' in filename and \\\n           filename.rsplit(\'.\', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef image_classification(image):\n    """"""Apply image classifier""""""\n    # clear Tensor session to avoid error\n    keras.backend.clear_session()\n    # load saved model\n    image_classifier = load_model(cat_dog_classifier)\n    # prepare labels\n    class_labels = {0: \'Cat\', 1: \'Dog\'}\n    # read photo & transform it into array\n    img = imread(image)\n    img = resize(img, (128, 128))\n    img = np.expand_dims(img, axis=0)\n    if np.max(img) > 1:\n        img = img / 255.0\n    # predict class\n    prediction = image_classifier.predict_classes(img)\n    percent_values = prediction.tolist()\n    # for website display\n    guess = class_labels[prediction[0][0]]\n    return guess\n\n\n\n'"
