file_path,api_count,code
app.py,0,"b'## App Utilities\nimport os\n# import env\nfrom db import db\n\nfrom flask import Flask, render_template\nfrom flask_restful import Api\nfrom flask_bootstrap import Bootstrap\nfrom flask_s3 import FlaskS3\n\nfrom resources.user import UserRegister, UserLogin, UserLogout, login_manager\nfrom resources.algorithms import Environment, Pathfinder\n\n## App Settings\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = os.environ.get(\'SECRET_KEY\')\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = os.environ.get(\'SQLALCHEMY_DATABASE_URI\')\napp.config[\'SQLALCHEMY_TRACK_MODIFICATIONS\'] = False\napp.config[\'PROPAGATE_EXCEPTIONS\'] = True\napp.config[\'FLASKS3_BUCKET_NAME\'] = os.environ.get(\'FLASKS3_BUCKET_NAME\')\n\napp.config[\'DEBUG\'] = False\napi = Api(app)\n\nBootstrap(app)\nlogin_manager.init_app(app)\ns3 = FlaskS3(app)\n\n## Register Resources\napi.add_resource(Environment, \'/environment\')\napi.add_resource(Pathfinder, \'/pathfinder\')\n\napi.add_resource(UserRegister, \'/register\')\napi.add_resource(UserLogin, \'/login\')\napi.add_resource(UserLogout, \'/logout\')\n\n\n\n\n## Main View\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef dashboard():\n    return render_template(""dashboard.html"")\n\n\n@app.errorhandler(404)\ndef error404(error):\n    return render_template(\'404.html\'), 404\n\n\n@app.errorhandler(500)\ndef error500(error):\n    return render_template(\'500.html\'), 500\n\n\n# DB INIT\ndb.init_app(app)\n\n# APP INITIATION\nif __name__ == \'__main__\':\n    from db import db\n\n    db.init_app(app)\n\n    if app.config[\'DEBUG\']:\n        @app.before_first_request\n        def create_tables():\n            db.create_all()\n\n    # app.run()\n\n# Docker\n#     app.run(host=\'0.0.0.0\')\n\n# Heroku\n    port = int(os.environ.get(\'PORT\', 5000))\n    app.run(host=\'0.0.0.0\', port=port)\n'"
db.py,0,b'from flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n'
models/__init__.py,0,b''
models/ai.py,6,"b'import numpy as np\n\n\n### GENERATE 64x64 possible movements grid (1 - possible, 0 - impossible )\n\ndef grid(edge):\n    full_grid = []\n    for n in range(0, edge ** 2):\n        grid = [0] * edge ** 2\n        for i, j in enumerate(grid):\n            if n % edge == 0:\n                if i == n + 1 or i == n + edge or i == n - edge:\n                    grid[i] = 1\n            elif (n + 1) % edge == 0:\n                if i == n + edge or i == n - 1 or i == n - edge:\n                    grid[i] = 1\n            else:\n                if i == n + 1 or i == n + edge or i == n - 1 or i == n - edge:\n                    grid[i] = 1\n        full_grid.append(grid)\n\n    return full_grid\n\n\ndef find_route(starting_location, ending_location, desert_storm_1,\n               desert_storm_2, desert_storm_3, desert_storm_4, reward_grid):\n    alpha = 0.75\n    gamma = 0.9\n\n    R_new = np.copy(reward_grid)\n    R_new[ending_location, ending_location] = 1000\n    R_new[desert_storm_1, desert_storm_1] = 0\n    R_new[desert_storm_2, desert_storm_2] = 0\n    R_new[desert_storm_3, desert_storm_3] = 0\n    R_new[desert_storm_4, desert_storm_4] = 0\n    Q = np.array(np.zeros([64, 64]))\n\n    for i in range(10000):\n        current_state = np.random.randint(0, 64)\n        playable_actions = []\n        for j in range(64):\n            if j not in {desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4}:\n                if R_new[current_state, j] > 0:\n                    playable_actions.append(j)\n        next_state = np.random.choice(playable_actions)\n        TD = R_new[current_state, next_state] + gamma * Q[next_state, np.argmax(Q[next_state, ])] - Q[\n            current_state, next_state]\n        Q[current_state, next_state] = Q[current_state, next_state] + alpha * TD\n\n    route = [starting_location]\n    next_location = starting_location\n    while next_location != ending_location:\n        next_location = np.argmax(Q[starting_location, ])\n        route.append(next_location)\n        starting_location = next_location\n    return route\n\n\ndef best_route(starting_location, collection,\n               desert_storm_1, desert_storm_2,\n               desert_storm_3, desert_storm_4,\n               ending_location, reward_grid):\n    return find_route(starting_location, collection, desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4,\n                      reward_grid) + find_route(collection, ending_location, desert_storm_1, desert_storm_2,\n                                                desert_storm_3, desert_storm_4, reward_grid)[1:]\n'"
models/forms.py,0,"b""from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField\nfrom wtforms.validators import InputRequired, Email, Length, EqualTo\n\n\n## Login Form\n\nclass LoginForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Length(min=3, max=15)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80)])\n    remember = BooleanField('Remember Me')\n\n## Register Form\n\nclass RegisterForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Email(message='Please enter correct email'), Length(max=50)])\n    username = StringField('username', validators=[InputRequired(), Length(min=3, max=15)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80), EqualTo('confirm', message='Passwords must match')])\n    confirm = PasswordField('Repeat Password')"""
models/user.py,0,"b""from db import db\nfrom flask_login import UserMixin\n\n\nclass UserModel(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(50), unique=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n\n    def __init__(self, email, username, password):\n        self.email = email\n        self.username = username\n        self.password = password\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    @classmethod\n    def find_by_email(cls, email):\n        return cls.query.filter_by(email=email).first()\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n"""
resources/__init__.py,0,b''
resources/algorithms.py,0,"b""from flask import session, Response, render_template, request\nfrom flask_restful import Resource\nfrom models.ai import grid, best_route\n\n\nclass Environment(Resource):\n\n    def post(self):\n\n        start_location = int(request.form['start_location'])\n        base_location = int(request.form['base_location'])\n        astronauts = int(request.form['astronauts'])\n        desert_storm_1 = int(request.form['desert_storm_1'])\n        desert_storm_2 = int(request.form['desert_storm_2'])\n        desert_storm_3 = int(request.form['desert_storm_3'])\n        desert_storm_4 = int(request.form['desert_storm_4'])\n        desert_storms = [desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4]\n\n        env_dict = {'start_location': start_location, 'base_location': base_location,\n                    'astronauts': astronauts, 'desert_storm_1': desert_storm_1, 'desert_storm_2': desert_storm_2,\n                    'desert_storm_3': desert_storm_3, 'desert_storm_4': desert_storm_4}\n\n        env_set = {start_location, base_location, astronauts, desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4}\n\n        ## Check if unique\n        if len(env_set) < 7:\n            return {'error': 'Objects should be placed on distinct tiles'}\n\n\n        ## Check if there's a distance to prevent stucking\n        for i in desert_storms:\n            if abs(i - astronauts) < 2 or abs(i - start_location) < 2 or abs(i - start_location) < 2:\n                return {'error': 'Desert Storms should be placed at least one tile from the other objects'}\n\n        session['env_dict'] = env_dict\n        session['desert_storms'] = desert_storms\n\n        return env_dict\n\n\nclass Pathfinder(Resource):\n\n    def post(self):\n\n        env_dict = session.get('env_dict')\n        desert_storms = session.get('desert_storms')\n\n        reward_grid = grid(8)\n\n        starting_location = env_dict['start_location']\n        ending_location = env_dict['base_location']\n        collection = env_dict['astronauts']\n        desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4 = desert_storms\n\n        # Returns List\n        path = best_route(starting_location, collection,\n                          desert_storm_1, desert_storm_2,\n                          desert_storm_3, desert_storm_4,\n                          ending_location, reward_grid)\n\n        str_path = [ str(element) for element in path ]\n        env_dict['path'] = str_path\n        return env_dict\n\n"""
resources/user.py,0,"b'from flask import session, Response, render_template, redirect, flash\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_restful import Resource\nfrom models.user import UserModel\nfrom models.forms import RegisterForm, LoginForm\nfrom flask_login import LoginManager, login_user, logout_user, AnonymousUserMixin\n\nlogin_manager = LoginManager()\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return UserModel.find_by_id(int(user_id))\n\n\nclass Anonymous(AnonymousUserMixin):\n    def __init__(self):\n        self.email = \'Guest\'\n\n\nlogin_manager.anonymous_user = Anonymous\n\n\nclass UserRegister(Resource):\n\n    def get(self):\n        form = RegisterForm()\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n    def post(self):\n        form = RegisterForm()\n        if form.validate_on_submit():\n            if UserModel.find_by_email(form.email.data) or UserModel.find_by_username(form.username.data):\n                flash(\'User already exist\', \'alert alert-danger alert-user\')\n                return Response(render_template(\'user/register.html\', form=form))\n\n            hashed_password = generate_password_hash(form.password.data,\n                                                     method=\'sha256\')  ## password get hashed for security purposes\n            new_user = UserModel(email=form.email.data, username=form.username.data, password=hashed_password)\n            new_user.save_to_db()\n            login_user(new_user)\n            return redirect(""/"")\n\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n\nclass UserLogin(Resource):\n\n    def get(self):\n        form = LoginForm()\n\n        # alert alert-success\n        return Response(render_template(\'user/login.html\', form=form))  ## passing login form to login template\n\n    def post(self):\n        form = LoginForm()\n\n        if form.validate_on_submit():  ## if form was submitted....\n            user = UserModel.find_by_email(email=form.email.data)\n            if user:\n                if check_password_hash(user.password, form.password.data):\n                    session[\'current_user\'] = user.email\n                    flash(f\'You have successfully logged in as {user.email}\', \'alert alert-success alert-user\')\n                    login_user(user)\n                    return redirect(""/"")\n            else:\n                flash(u\'Invalid Email or Password provided\', \'alert alert-danger alert-user\')\n\n        return Response(render_template(\'user/login.html\', form=form))\n\n\nclass UserLogout(Resource):\n\n    def get(self):\n        logout_user()\n        return redirect(""login"")\n'"
tests/__init__.py,0,b''
tests/base_test.py,0,"b'from unittest import TestCase\nfrom app import app\nfrom db import db\n\n\nclass BaseTest(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        app.config[""SQLALCHEMY_DATABASE_URI""] = \'sqlite:///\'\n        with app.app_context():\n            db.init_app(app)\n\n\n    def setUp(self):\n        with app.app_context():\n            db.create_all()\n\n        self.app = app.test_client\n        self.app_context = app.app_context\n\n\n    def tearDown(self):\n\n        with app.app_context():\n            db.session.remove()\n            db.drop_all()'"
tests/acceptance/__init__.py,0,b''
tests/db_models/__init__.py,0,b''
tests/db_models/test_sqlite.py,0,"b'from models.user import UserModel\nfrom tests.base_test import BaseTest\n\n\n\n\nclass UserTest(BaseTest):\n    def test_crud(self):\n        with self.app_context():\n            user = UserModel(\'test\', \'test@gmail.com\',\'abcd\')\n\n            self.assertIsNone(UserModel.find_by_username(\'test\'), ""Found an user with name \'test\' before save_to_db"")\n            self.assertIsNone(UserModel.find_by_id(1), ""Found an user with id \'1\' before save_to_db"")\n\n            user.save_to_db()\n\n            self.assertIsNotNone(UserModel.find_by_username(\'test\'),\n                                 ""Did not find an user with name \'test\' after save_to_db"")\n            self.assertIsNotNone(UserModel.find_by_id(1), ""Did not find an user with id \'1\' after save_to_db"")\n\n            self.assertEqual(user.username, \'test\',\n                             ""The name of the user after creation does not equal the constructor argument."")\n            self.assertEqual(user.password, \'abcd\',\n                             ""The password of the user after creation does not equal the constructor argument."")\n\n\n'"
tests/views/__init__.py,0,b''
tests/views/test_views.py,0,"b""from unittest import TestCase\nfrom app import app\n\n\nclass TestHome(TestCase):\n\n    ## Home Test\n\n    def test_home(self):\n        with app.test_client() as c:\n            resp = c.get('/')\n            self.assertEqual(resp.status_code, 200)\n\n    # Login page loads correctly\n\n    def test_login_page_loads(self):\n        with app.test_client() as c:\n            response = c.get('/login', content_type='html/text')\n            self.assertEqual(response.status_code, 200)\n            self.assertTrue(b'Please Log in' in response.data)\n\n    # Signup page loads correctly\n\n    def test_signin_page_loads(self):\n        with app.test_client() as c:\n            response = c.get('/register', content_type='html/text')\n            self.assertEqual(response.status_code, 200)\n            self.assertTrue(b'Sign In' in response.data)\n\n    # Ensure that canvas shows on the  homepage\n\n    def test_form_shows_up(self):\n        with app.test_client() as c:\n            response = c.get('/', follow_redirects=True)\n            self.assertTrue(b'Create the Environment for AI' in response.data)\n            self.assertEqual(response.status_code, 200)\n"""
_Dockerized/aipathfinder/web/app.py,0,"b'## App Utilities\nimport os\nimport env\nfrom db import db\n\nfrom flask import Flask, render_template, session\nfrom flask_restful import Api\nfrom flask_bootstrap import Bootstrap\nfrom flask_s3 import FlaskS3\n\nfrom resources.user import UserRegister, UserLogin, UserLogout, login_manager\nfrom resources.algorithms import Environment, Pathfinder\n\n## App Settings\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = os.environ.get(\'SECRET_KEY\')\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = os.environ.get(\'SQLALCHEMY_DATABASE_URI\')\napp.config[\'SQLALCHEMY_TRACK_MODIFICATIONS\'] = False\napp.config[\'PROPAGATE_EXCEPTIONS\'] = True\napp.config[\'FLASKS3_BUCKET_NAME\'] = os.environ.get(\'FLASKS3_BUCKET_NAME\')\n\napp.config[\'DEBUG\'] = False\napi = Api(app)\n\nBootstrap(app)\nlogin_manager.init_app(app)\ns3 = FlaskS3(app)\n\n## Register Resources\napi.add_resource(Environment, \'/environment\')\napi.add_resource(Pathfinder, \'/pathfinder\')\n\napi.add_resource(UserRegister, \'/register\')\napi.add_resource(UserLogin, \'/login\')\napi.add_resource(UserLogout, \'/logout\')\n\n\n\n\n## Main View\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef dashboard():\n    return render_template(""dashboard.html"")\n\n\n@app.errorhandler(404)\ndef error404(error):\n    return render_template(\'404.html\'), 404\n\n\n@app.errorhandler(500)\ndef error500(error):\n    return render_template(\'500.html\'), 500\n\n\n# DB INIT\ndb.init_app(app)\n\n# APP INITIATION\nif __name__ == \'__main__\':\n    from db import db\n\n    db.init_app(app)\n\n    if app.config[\'DEBUG\']:\n        @app.before_first_request\n        def create_tables():\n            db.create_all()\n\n    # app.run(debug=True)\n\n# Docker\n    app.run(host=\'0.0.0.0\')\n\n# Heroku\n    # port = int(os.environ.get(\'PORT\', 5000))\n    # app.run(host=\'0.0.0.0\', port=port)\n'"
_Dockerized/aipathfinder/web/db.py,0,b'from flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n'
tests/acceptance/locators/__init__.py,0,b''
tests/acceptance/locators/base_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass BasePageLocators:\n    TITLE = By.TAG_NAME, 'strong'\n    NAV_LINKS =  By.ID, 'navigation'\n    DROPDOWN = By.ID, 'trigger'\n    DROPDOWN_LINKS = By.ID, 'dropdown_link'\n    PAGE = By.ID, 'page-index'\n    FORM_ENV = By.ID, 'form-env'\n    SUBMIT_BUTTON = By.ID, 'submit-button'"""
tests/acceptance/locators/environment_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass EnvironmentPageLocators:\n    TITLE = By.TAG_NAME, 'strong'\n    NAV_LINKS =  By.ID, 'navigation'\n    DROPDOWN = By.ID, 'user_dropdown'\n    DROPDOWN_LINKS = By.ID, 'dropdown_link'\n    PAGE = By.ID, 'page-index'\n    FORM_ENV = By.ID, 'form-path'\n    SUBMIT_BUTTON = By.ID, 'button_command'\n    TILE_BASE = By.ID, 'mars_base'\n    TILE_ASTRONAUTS = By.ID, 'mars_astronauts'\n    TILE_START = By.ID, 'start_location'\n    TILE_STORM = By.ID, 'mars_storm'\n"""
tests/acceptance/locators/login_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass LoginPageLocators:\n    LOGIN_FORM = By.ID, 'login-form'\n    USERNAME_FIELD = By.ID, 'username'\n    PASSWORD = By.ID, 'password'\n    SUBMIT_BUTTON = By.ID, 'submit-button'"""
tests/acceptance/locators/register_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass RegisterPageLocators:\n    REGISTER_FORM = By.ID, 'form-signin'\n    USERNAME_FIELD = By.ID, 'username'\n    EMAIL_FIELD = By.ID, 'email'\n    PASSWORD = By.ID, 'password'\n    SUBMIT_BUTTON = By.ID, 'submit-button'\n"""
tests/acceptance/locators/route_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass RoutePageLocators:\n    TITLE = By.TAG_NAME, 'strong'\n    NAV_LINKS =  By.ID, 'navigation'\n    DROPDOWN = By.ID, 'user_dropdown'\n    DROPDOWN_LINKS = By.ID, 'dropdown_link'\n    PAGE = By.ID, 'page-index'\n    HOME_BUTTON = By.ID, 'button_command'\n    TILE_PATH = By.ID, 'mars_path'\n"""
tests/acceptance/page_model/__init__.py,0,b''
tests/acceptance/page_model/base_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.base_page import BasePageLocators\n\n\nclass BasePage:\n    def __init__(self, driver):\n        self.driver = driver\n\n    @property\n    def url(self):\n        return 'http://127.0.0.1:5000'\n\n    @property\n    def title(self):\n        return self.driver.find_element(*BasePageLocators.TITLE)\n\n    @property\n    def navigation(self):\n        return self.driver.find_elements(*BasePageLocators.NAV_LINKS)\n\n    @property\n    def dropdown(self):\n        return self.driver.find_element(*BasePageLocators.DROPDOWN)\n\n    @property\n    def dropdown_links(self):\n        return self.driver.find_elements(*BasePageLocators.DROPDOWN_LINKS)\n\n    @property\n    def form(self):\n        return self.driver.find_element(*BasePageLocators.FORM_ENV)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*BasePageLocators.SUBMIT_BUTTON)\n\n    def form_field(self, name):\n        return self.form.find_element(By.NAME, name)\n\n"""
tests/acceptance/page_model/environment_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.environment_page import EnvironmentPageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass EnvironmentPage(BasePage):\n\n    @property\n    def url(self):\n        return super(EnvironmentPage, self).url + '/environment'\n\n    @property\n    def title(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TITLE)\n\n    @property\n    def navigation(self):\n        return self.driver.find_elements(*EnvironmentPageLocators.NAV_LINKS)\n\n    @property\n    def dropdown(self):\n        return self.driver.find_element(*EnvironmentPageLocators.DROPDOWN)\n\n    @property\n    def dropdown_links(self):\n        return self.driver.find_elements(*EnvironmentPageLocators.DROPDOWN_LINKS)\n\n    @property\n    def form(self):\n        return self.driver.find_element(*EnvironmentPageLocators.FORM_ENV)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*EnvironmentPageLocators.SUBMIT_BUTTON)\n\n    @property\n    def tile_base(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TILE_BASE)\n\n    @property\n    def tile_astronauts(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TILE_ASTRONAUTS)\n\n    @property\n    def tile_start(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TILE_START)\n\n    @property\n    def tile_storms(self):\n        return self.driver.find_elements(*EnvironmentPageLocators.TILE_STORM)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"""
tests/acceptance/page_model/login_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.login_page import LoginPageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass LoginPage(BasePage):\n    @property\n    def url(self):\n        return super(LoginPage, self).url + '/login'\n\n    @property\n    def form(self):\n        return self.driver.find_element(*LoginPageLocators.LOGIN_FORM)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*LoginPageLocators.SUBMIT_BUTTON)\n\n    def form_field(self, name):\n        return self.form.find_element(By.NAME, name)\n"""
tests/acceptance/page_model/register_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.register_page import RegisterPageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass RegisterPage(BasePage):\n    @property\n    def url(self):\n        return super(RegisterPage, self).url + '/register'\n\n    @property\n    def form(self):\n        return self.driver.find_element(*RegisterPageLocators.REGISTER_FORM)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*RegisterPageLocators.SUBMIT_BUTTON)\n\n    def form_field(self, name):\n        return self.form.find_element(By.NAME, name)\n"""
tests/acceptance/page_model/route_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.route_page import RoutePageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass RoutePage(BasePage):\n\n    @property\n    def url(self):\n        return super(RoutePage, self).url + '/pathfinder'\n\n    @property\n    def title(self):\n        return self.driver.find_element(*RoutePageLocators.TITLE)\n\n    @property\n    def navigation(self):\n        return self.driver.find_elements(*RoutePageLocators.NAV_LINKS)\n\n    @property\n    def dropdown(self):\n        return self.driver.find_element(*RoutePageLocators.DROPDOWN)\n\n    @property\n    def dropdown_links(self):\n        return self.driver.find_elements(*RoutePageLocators.DROPDOWN_LINKS)\n\n\n    @property\n    def home_button(self):\n        return self.driver.find_element(*RoutePageLocators.HOME_BUTTON)\n\n    @property\n    def tile_path(self):\n        return self.driver.find_elements(*RoutePageLocators.TILE_PATH)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"""
tests/acceptance/steps/__init__.py,0,b''
tests/acceptance/steps/content.py,0,"b'from behave import *\nfrom pathlib import Path\n\nfrom tests.acceptance.page_model.base_page import BasePage\nfrom tests.acceptance.page_model.environment_page import EnvironmentPage\nfrom tests.acceptance.page_model.login_page import LoginPage\nfrom tests.acceptance.page_model.register_page import RegisterPage\nfrom tests.acceptance.page_model.route_page import RoutePage\n\nuse_step_matcher(\'re\')\n\n\n@then(\'There is a title shown on the page\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    assert page.title.is_displayed()\n\n\n@then(\'The title tag has content ""(.*)""\')\ndef step_impl(context, content):\n    page = BasePage(context.driver)\n    assert page.title.text == content\n\n\n@then(\'There are three buttons shown on the page\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    assert page.clear_button.is_displayed()\n    assert page.download_button.is_displayed()\n    assert page.predict_button.is_displayed()\n\n@then(\'I can see there is a register form on the page\')\ndef step_impl(context):\n    page = RegisterPage(context.driver)\n    assert page.form.is_displayed()\n\n\n@then(\'I can see there is a login form on the page\')\ndef step_impl(context):\n    page = LoginPage(context.driver)\n    assert page.form.is_displayed()\n\n\n\n@then(\'I can see there are all key tiles displayed\')\ndef step_impl(context):\n    page = EnvironmentPage(context.driver)\n    assert page.tile_start.is_displayed()\n    assert page.tile_astronauts.is_displayed()\n    assert page.tile_base.is_displayed()\n    assert len(page.tile_storms) == 4\n\n\n\n@then(\'I can see there is a path visible\')\ndef step_impl(context):\n    page = RoutePage(context.driver)\n    assert len(page.tile_path) > 2'"
tests/acceptance/steps/interactions.py,0,"b'from behave import *\n\nfrom tests.acceptance.page_model.base_page import BasePage\nfrom tests.acceptance.page_model.environment_page import EnvironmentPage\nfrom tests.acceptance.page_model.login_page import LoginPage\nfrom tests.acceptance.page_model.register_page import RegisterPage\nfrom tests.acceptance.page_model.route_page import RoutePage\n\nuse_step_matcher(\'re\')\n\n\n@when(\'I click on the ""(.*)"" link\')\ndef step_impl(context, link_text):\n    page = BasePage(context.driver)\n    links = page.navigation\n\n    matching_links = [l for l in links if l.text == link_text]\n    # matching_links[0].click()\n    if len(matching_links) > 0:\n        matching_links[0].click()\n    else:\n        raise RuntimeError()\n\n@when(\'I click on the login\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    page.login.click()\n\n\n@when(\'I click on the dropdown menu\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    page.dropdown.click()\n\n@when(\'I click on the ""(.*)"" dropdown link\')\ndef step_impl(context, link_text):\n    page = BasePage(context.driver)\n    links = page.dropdown_links\n    matching_links = [l for l in links if l.text == link_text]\n    matching_links[0].click()\n\n@when(\'I enter ""(.*)"" in the ""(.*)"" field\')\ndef step_impl(context, content, field_name):\n    page = RegisterPage(context.driver)\n    page.form_field(field_name).send_keys(content)\n\n\n@when(\'I enter ""(.*)"" in the ""(.*)"" login field\')\ndef step_impl(context, content, field_name):\n    page = LoginPage(context.driver)\n    page.form_field(field_name).send_keys(content)\n\n@when(\'I enter ""(.*)"" in the ""(.*)"" environment field\')\ndef step_impl(context, content, field_name):\n    page = BasePage(context.driver)\n    page.form_field(field_name).send_keys(content)\n\n\n@when(\'I choose ""(.*)"" field\')\ndef step_impl(context, field_name):\n    page = BasePage(context.driver)\n    page.form_field(field_name).click()\n\n\n@when(\'I press the submit button\')\ndef step_impl(context):\n    page = RegisterPage(context.driver)\n    page.submit_button.click()\n\n\n@when(\'I press the login button\')\ndef step_impl(context):\n    page = LoginPage(context.driver)\n    page.submit_button.click()\n\n\n\n@when(\'I press the ""BUILD THE ENVIRONMENT"" button\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    page.submit_button.click()\n\n@when(\'I initiate pathfinder AI\')\ndef step_impl(context):\n    page = EnvironmentPage(context.driver)\n    page.submit_button.click()\n\n\n@when(\'I press the ""Change Environment"" button\')\ndef step_impl(context):\n    page = RoutePage(context.driver)\n    page.home_button.click()'"
tests/acceptance/steps/navigation.py,0,"b""from behave import *\nfrom selenium import webdriver\n\nfrom tests.acceptance.page_model.base_page import BasePage\nfrom tests.acceptance.page_model.environment_page import EnvironmentPage\nfrom tests.acceptance.page_model.login_page import LoginPage\nfrom tests.acceptance.page_model.register_page import RegisterPage\nfrom tests.acceptance.page_model.route_page import RoutePage\n\nuse_step_matcher('re')\n\n\n@given('I am on the homepage')\ndef step_impl(context):\n    context.driver = webdriver.Chrome('C:/chromedriver.exe')  ## path to chromedriver\n    page = BasePage(context.driver)\n    context.driver.get(page.url)\n\n\n@given('I am on the register page')\ndef step_impl(context):\n    context.driver = webdriver.Chrome('C:/chromedriver.exe')\n    page = RegisterPage(context.driver)\n    context.driver.get(page.url)\n\n\n@given('I am on the login page')\ndef step_impl(context):\n    context.driver = webdriver.Chrome('C:/chromedriver.exe')\n    page = LoginPage(context.driver)\n    context.driver.get(page.url)\n\n\n@then('I am on the homepage')\ndef step_impl(context):\n    expected_url = 'http://127.0.0.1:5000/'\n    assert context.driver.current_url == expected_url\n\n\n@then('I am on the register page')\ndef step_impl(context):\n    expected_url = RegisterPage(context.driver).url\n    assert context.driver.current_url == expected_url\n\n\n@then('I am on the login page')\ndef step_impl(context):\n    expected_url = LoginPage(context.driver).url\n    assert context.driver.current_url == expected_url\n\n\n@then('I am on the environment page')\ndef step_impl(context):\n    expected_url = EnvironmentPage(context.driver).url\n    assert context.driver.current_url == expected_url\n\n@then('I am on the route page')\ndef step_impl(context):\n    expected_url = RoutePage(context.driver).url\n    assert context.driver.current_url == expected_url"""
tests/acceptance/steps/waits.py,0,"b""from behave import *\nimport time\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nfrom tests.acceptance.locators.base_page import BasePageLocators\n\nuse_step_matcher('re')\n\n\n@given('I wait for the page to load')\ndef step_impl(context):\n    WebDriverWait(context.driver, 2).until(\n        expected_conditions.visibility_of_element_located(BasePageLocators.PAGE)\n    )\n\n\n@given('I wait for the dropdown to load')\ndef step_impl(context):\n    WebDriverWait(context.driver, 2).until(\n        expected_conditions.visibility_of_element_located(BasePageLocators.DROPDOWN)\n    )\n\n@given('I wait for the algorithm page to load')\ndef step_impl(context):\n    time.sleep(3)\n"""
_Dockerized/aipathfinder/web/models/__init__.py,0,b''
_Dockerized/aipathfinder/web/models/ai.py,6,"b'import numpy as np\n\n\n### GENERATE 64x64 possible movements grid (1 - possible, 0 - impossible )\n\ndef grid(edge):\n    full_grid = []\n    for n in range(0, edge ** 2):\n        grid = [0] * edge ** 2\n        for i, j in enumerate(grid):\n            if n % edge == 0:\n                if i == n + 1 or i == n + edge or i == n - edge:\n                    grid[i] = 1\n            elif (n + 1) % edge == 0:\n                if i == n + edge or i == n - 1 or i == n - edge:\n                    grid[i] = 1\n            else:\n                if i == n + 1 or i == n + edge or i == n - 1 or i == n - edge:\n                    grid[i] = 1\n        full_grid.append(grid)\n\n    return full_grid\n\n\ndef find_route(starting_location, ending_location, desert_storm_1,\n               desert_storm_2, desert_storm_3, desert_storm_4, reward_grid):\n    alpha = 0.75\n    gamma = 0.9\n\n    R_new = np.copy(reward_grid)\n    R_new[ending_location, ending_location] = 1000\n    R_new[desert_storm_1, desert_storm_1] = 0\n    R_new[desert_storm_2, desert_storm_2] = 0\n    R_new[desert_storm_3, desert_storm_3] = 0\n    R_new[desert_storm_4, desert_storm_4] = 0\n    Q = np.array(np.zeros([64, 64]))\n\n    for i in range(10000):\n        current_state = np.random.randint(0, 64)\n        playable_actions = []\n        for j in range(64):\n            if j not in {desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4}:\n                if R_new[current_state, j] > 0:\n                    playable_actions.append(j)\n        next_state = np.random.choice(playable_actions)\n        TD = R_new[current_state, next_state] + gamma * Q[next_state, np.argmax(Q[next_state, ])] - Q[\n            current_state, next_state]\n        Q[current_state, next_state] = Q[current_state, next_state] + alpha * TD\n\n    route = [starting_location]\n    next_location = starting_location\n    while next_location != ending_location:\n        next_location = np.argmax(Q[starting_location, ])\n        route.append(next_location)\n        starting_location = next_location\n    return route\n\n\ndef best_route(starting_location, collection,\n               desert_storm_1, desert_storm_2,\n               desert_storm_3, desert_storm_4,\n               ending_location, reward_grid):\n    return find_route(starting_location, collection, desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4,\n                      reward_grid) + find_route(collection, ending_location, desert_storm_1, desert_storm_2,\n                                                desert_storm_3, desert_storm_4, reward_grid)[1:]\n'"
_Dockerized/aipathfinder/web/models/forms.py,0,"b""from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField\nfrom wtforms.validators import InputRequired, Email, Length, EqualTo\n\n\n## Login Form\n\nclass LoginForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Length(min=3, max=15)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80)])\n    remember = BooleanField('Remember Me')\n\n## Register Form\n\nclass RegisterForm(FlaskForm):\n    email = StringField('email', validators=[InputRequired(), Email(message='Please enter correct email'), Length(max=50)])\n    username = StringField('username', validators=[InputRequired(), Length(min=3, max=15)])\n    password = PasswordField('password', validators=[InputRequired(), Length(min=6, max=80), EqualTo('confirm', message='Passwords must match')])\n    confirm = PasswordField('Repeat Password')"""
_Dockerized/aipathfinder/web/models/user.py,0,"b""from db import db\nfrom flask_login import UserMixin\n\n\nclass UserModel(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(50), unique=True)\n    username = db.Column(db.String(80))\n    password = db.Column(db.String(80))\n\n    def __init__(self, email, username, password):\n        self.email = email\n        self.username = username\n        self.password = password\n\n    def save_to_db(self):\n        db.session.add(self)\n        db.session.commit()\n\n    @classmethod\n    def find_by_email(cls, email):\n        return cls.query.filter_by(email=email).first()\n\n    @classmethod\n    def find_by_username(cls, username):\n        return cls.query.filter_by(username=username).first()\n\n    @classmethod\n    def find_by_id(cls, _id):\n        return cls.query.filter_by(id=_id).first()\n"""
_Dockerized/aipathfinder/web/resources/__init__.py,0,b''
_Dockerized/aipathfinder/web/resources/algorithms.py,0,"b""from flask import session, Response, render_template, request\nfrom flask_restful import Resource\nfrom models.ai import grid, best_route\n\n\nclass Environment(Resource):\n\n    def post(self):\n\n        start_location = int(request.form['start_location'])\n        base_location = int(request.form['base_location'])\n        astronauts = int(request.form['astronauts'])\n        desert_storm_1 = int(request.form['desert_storm_1'])\n        desert_storm_2 = int(request.form['desert_storm_2'])\n        desert_storm_3 = int(request.form['desert_storm_3'])\n        desert_storm_4 = int(request.form['desert_storm_4'])\n        desert_storms = [desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4]\n\n        env_dict = {'start_location': start_location, 'base_location': base_location,\n                    'astronauts': astronauts, 'desert_storm_1': desert_storm_1, 'desert_storm_2': desert_storm_2,\n                    'desert_storm_3': desert_storm_3, 'desert_storm_4': desert_storm_4}\n\n        env_set = {start_location, base_location, astronauts, desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4}\n\n        ## Check if unique\n        if len(env_set) < 7:\n            return {'error': 'Objects should be placed on distinct tiles'}\n\n\n        ## Check if there's a distance to prevent stucking\n        for i in desert_storms:\n            if abs(i - astronauts) < 2 or abs(i - start_location) < 2 or abs(i - start_location) < 2:\n                return {'error': 'Desert Storms should be placed at least one tile from the other objects'}\n\n        session['env_dict'] = env_dict\n        session['desert_storms'] = desert_storms\n\n        return env_dict\n\n\nclass Pathfinder(Resource):\n\n    def post(self):\n\n        env_dict = session.get('env_dict')\n        desert_storms = session.get('desert_storms')\n\n        reward_grid = grid(8)\n\n        starting_location = env_dict['start_location']\n        ending_location = env_dict['base_location']\n        collection = env_dict['astronauts']\n        desert_storm_1, desert_storm_2, desert_storm_3, desert_storm_4 = desert_storms\n\n        # Returns List\n        path = best_route(starting_location, collection,\n                          desert_storm_1, desert_storm_2,\n                          desert_storm_3, desert_storm_4,\n                          ending_location, reward_grid)\n\n        str_path = [ str(element) for element in path ]\n        env_dict['path'] = str_path\n        return env_dict\n\n"""
_Dockerized/aipathfinder/web/resources/user.py,0,"b'from flask import session, Response, render_template, redirect, flash\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_restful import Resource\nfrom models.user import UserModel\nfrom models.forms import RegisterForm, LoginForm\nfrom flask_login import LoginManager, login_user, logout_user, AnonymousUserMixin\n\nlogin_manager = LoginManager()\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return UserModel.find_by_id(int(user_id))\n\n\nclass Anonymous(AnonymousUserMixin):\n    def __init__(self):\n        self.email = \'Guest\'\n\n\nlogin_manager.anonymous_user = Anonymous\n\n\nclass UserRegister(Resource):\n\n    def get(self):\n        form = RegisterForm()\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n    def post(self):\n        form = RegisterForm()\n        if form.validate_on_submit():\n            if UserModel.find_by_email(form.email.data) or UserModel.find_by_username(form.username.data):\n                flash(\'User already exist\', \'alert alert-danger alert-user\')\n                return Response(render_template(\'user/register.html\', form=form))\n\n            hashed_password = generate_password_hash(form.password.data,\n                                                     method=\'sha256\')  ## password get hashed for security purposes\n            new_user = UserModel(email=form.email.data, username=form.username.data, password=hashed_password)\n            new_user.save_to_db()\n            login_user(new_user)\n            return redirect(""/"")\n\n        return Response(render_template(\'user/register.html\', form=form))  ## passing signup form to signup template\n\n\nclass UserLogin(Resource):\n\n    def get(self):\n        form = LoginForm()\n\n        # alert alert-success\n        return Response(render_template(\'user/login.html\', form=form))  ## passing login form to login template\n\n    def post(self):\n        form = LoginForm()\n\n        if form.validate_on_submit():  ## if form was submitted....\n            user = UserModel.find_by_email(email=form.email.data)\n            if user:\n                if check_password_hash(user.password, form.password.data):\n                    session[\'current_user\'] = user.email\n                    flash(f\'You have successfully logged in as {user.email}\', \'alert alert-success alert-user\')\n                    login_user(user)\n                    return redirect(""/"")\n            else:\n                flash(u\'Invalid Email or Password provided\', \'alert alert-danger alert-user\')\n\n        return Response(render_template(\'user/login.html\', form=form))\n\n\nclass UserLogout(Resource):\n\n    def get(self):\n        logout_user()\n        return redirect(""login"")\n'"
_Dockerized/aipathfinder/web/tests/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/base_test.py,0,"b'from unittest import TestCase\nfrom app import app\nfrom db import db\n\n\nclass BaseTest(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        app.config[""SQLALCHEMY_DATABASE_URI""] = \'sqlite:///\'\n        with app.app_context():\n            db.init_app(app)\n\n\n    def setUp(self):\n        with app.app_context():\n            db.create_all()\n\n        self.app = app.test_client\n        self.app_context = app.app_context\n\n\n    def tearDown(self):\n\n        with app.app_context():\n            db.session.remove()\n            db.drop_all()'"
_Dockerized/aipathfinder/web/tests/acceptance/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/db_models/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/db_models/test_sqlite.py,0,"b'from models.user import UserModel\nfrom tests.base_test import BaseTest\n\n\n\n\nclass UserTest(BaseTest):\n    def test_crud(self):\n        with self.app_context():\n            user = UserModel(\'test\', \'test@gmail.com\',\'abcd\')\n\n            self.assertIsNone(UserModel.find_by_username(\'test\'), ""Found an user with name \'test\' before save_to_db"")\n            self.assertIsNone(UserModel.find_by_id(1), ""Found an user with id \'1\' before save_to_db"")\n\n            user.save_to_db()\n\n            self.assertIsNotNone(UserModel.find_by_username(\'test\'),\n                                 ""Did not find an user with name \'test\' after save_to_db"")\n            self.assertIsNotNone(UserModel.find_by_id(1), ""Did not find an user with id \'1\' after save_to_db"")\n\n            self.assertEqual(user.username, \'test\',\n                             ""The name of the user after creation does not equal the constructor argument."")\n            self.assertEqual(user.password, \'abcd\',\n                             ""The password of the user after creation does not equal the constructor argument."")\n\n\n'"
_Dockerized/aipathfinder/web/tests/views/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/views/test_views.py,0,"b""from unittest import TestCase\nfrom app import app\n\n\nclass TestHome(TestCase):\n\n    ## Home Test\n\n    def test_home(self):\n        with app.test_client() as c:\n            resp = c.get('/')\n            self.assertEqual(resp.status_code, 200)\n\n    # Login page loads correctly\n\n    def test_login_page_loads(self):\n        with app.test_client() as c:\n            response = c.get('/login', content_type='html/text')\n            self.assertEqual(response.status_code, 200)\n            self.assertTrue(b'Please Log in' in response.data)\n\n    # Signup page loads correctly\n\n    def test_signin_page_loads(self):\n        with app.test_client() as c:\n            response = c.get('/register', content_type='html/text')\n            self.assertEqual(response.status_code, 200)\n            self.assertTrue(b'Sign In' in response.data)\n\n    # Ensure that canvas shows on the  homepage\n\n    def test_form_shows_up(self):\n        with app.test_client() as c:\n            response = c.get('/', follow_redirects=True)\n            self.assertTrue(b'Create the Environment for AI' in response.data)\n            self.assertEqual(response.status_code, 200)\n"""
_Dockerized/aipathfinder/web/tests/acceptance/locators/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/acceptance/locators/base_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass BasePageLocators:\n    TITLE = By.TAG_NAME, 'strong'\n    NAV_LINKS =  By.ID, 'navigation'\n    DROPDOWN = By.ID, 'trigger'\n    DROPDOWN_LINKS = By.ID, 'dropdown_link'\n    PAGE = By.ID, 'page-index'\n    FORM_ENV = By.ID, 'form-env'\n    SUBMIT_BUTTON = By.ID, 'submit-button'"""
_Dockerized/aipathfinder/web/tests/acceptance/locators/environment_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass EnvironmentPageLocators:\n    TITLE = By.TAG_NAME, 'strong'\n    NAV_LINKS =  By.ID, 'navigation'\n    DROPDOWN = By.ID, 'user_dropdown'\n    DROPDOWN_LINKS = By.ID, 'dropdown_link'\n    PAGE = By.ID, 'page-index'\n    FORM_ENV = By.ID, 'form-path'\n    SUBMIT_BUTTON = By.ID, 'button_command'\n    TILE_BASE = By.ID, 'mars_base'\n    TILE_ASTRONAUTS = By.ID, 'mars_astronauts'\n    TILE_START = By.ID, 'start_location'\n    TILE_STORM = By.ID, 'mars_storm'\n"""
_Dockerized/aipathfinder/web/tests/acceptance/locators/login_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass LoginPageLocators:\n    LOGIN_FORM = By.ID, 'login-form'\n    USERNAME_FIELD = By.ID, 'username'\n    PASSWORD = By.ID, 'password'\n    SUBMIT_BUTTON = By.ID, 'submit-button'"""
_Dockerized/aipathfinder/web/tests/acceptance/locators/register_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass RegisterPageLocators:\n    REGISTER_FORM = By.ID, 'form-signin'\n    USERNAME_FIELD = By.ID, 'username'\n    EMAIL_FIELD = By.ID, 'email'\n    PASSWORD = By.ID, 'password'\n    SUBMIT_BUTTON = By.ID, 'submit-button'\n"""
_Dockerized/aipathfinder/web/tests/acceptance/locators/route_page.py,0,"b""from selenium.webdriver.common.by import By\n\n\nclass RoutePageLocators:\n    TITLE = By.TAG_NAME, 'strong'\n    NAV_LINKS =  By.ID, 'navigation'\n    DROPDOWN = By.ID, 'user_dropdown'\n    DROPDOWN_LINKS = By.ID, 'dropdown_link'\n    PAGE = By.ID, 'page-index'\n    HOME_BUTTON = By.ID, 'button_command'\n    TILE_PATH = By.ID, 'mars_path'\n"""
_Dockerized/aipathfinder/web/tests/acceptance/page_model/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/acceptance/page_model/base_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.base_page import BasePageLocators\n\n\nclass BasePage:\n    def __init__(self, driver):\n        self.driver = driver\n\n    @property\n    def url(self):\n        return 'http://127.0.0.1:5000'\n\n    @property\n    def title(self):\n        return self.driver.find_element(*BasePageLocators.TITLE)\n\n    @property\n    def navigation(self):\n        return self.driver.find_elements(*BasePageLocators.NAV_LINKS)\n\n    @property\n    def dropdown(self):\n        return self.driver.find_element(*BasePageLocators.DROPDOWN)\n\n    @property\n    def dropdown_links(self):\n        return self.driver.find_elements(*BasePageLocators.DROPDOWN_LINKS)\n\n    @property\n    def form(self):\n        return self.driver.find_element(*BasePageLocators.FORM_ENV)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*BasePageLocators.SUBMIT_BUTTON)\n\n    def form_field(self, name):\n        return self.form.find_element(By.NAME, name)\n\n"""
_Dockerized/aipathfinder/web/tests/acceptance/page_model/environment_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.environment_page import EnvironmentPageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass EnvironmentPage(BasePage):\n\n    @property\n    def url(self):\n        return super(EnvironmentPage, self).url + '/environment'\n\n    @property\n    def title(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TITLE)\n\n    @property\n    def navigation(self):\n        return self.driver.find_elements(*EnvironmentPageLocators.NAV_LINKS)\n\n    @property\n    def dropdown(self):\n        return self.driver.find_element(*EnvironmentPageLocators.DROPDOWN)\n\n    @property\n    def dropdown_links(self):\n        return self.driver.find_elements(*EnvironmentPageLocators.DROPDOWN_LINKS)\n\n    @property\n    def form(self):\n        return self.driver.find_element(*EnvironmentPageLocators.FORM_ENV)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*EnvironmentPageLocators.SUBMIT_BUTTON)\n\n    @property\n    def tile_base(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TILE_BASE)\n\n    @property\n    def tile_astronauts(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TILE_ASTRONAUTS)\n\n    @property\n    def tile_start(self):\n        return self.driver.find_element(*EnvironmentPageLocators.TILE_START)\n\n    @property\n    def tile_storms(self):\n        return self.driver.find_elements(*EnvironmentPageLocators.TILE_STORM)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"""
_Dockerized/aipathfinder/web/tests/acceptance/page_model/login_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.login_page import LoginPageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass LoginPage(BasePage):\n    @property\n    def url(self):\n        return super(LoginPage, self).url + '/login'\n\n    @property\n    def form(self):\n        return self.driver.find_element(*LoginPageLocators.LOGIN_FORM)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*LoginPageLocators.SUBMIT_BUTTON)\n\n    def form_field(self, name):\n        return self.form.find_element(By.NAME, name)\n"""
_Dockerized/aipathfinder/web/tests/acceptance/page_model/register_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.register_page import RegisterPageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass RegisterPage(BasePage):\n    @property\n    def url(self):\n        return super(RegisterPage, self).url + '/register'\n\n    @property\n    def form(self):\n        return self.driver.find_element(*RegisterPageLocators.REGISTER_FORM)\n\n    @property\n    def submit_button(self):\n        return self.driver.find_element(*RegisterPageLocators.SUBMIT_BUTTON)\n\n    def form_field(self, name):\n        return self.form.find_element(By.NAME, name)\n"""
_Dockerized/aipathfinder/web/tests/acceptance/page_model/route_page.py,0,"b""from selenium.webdriver.common.by import By\n\nfrom tests.acceptance.locators.route_page import RoutePageLocators\nfrom tests.acceptance.page_model.base_page import BasePage\n\n\nclass RoutePage(BasePage):\n\n    @property\n    def url(self):\n        return super(RoutePage, self).url + '/pathfinder'\n\n    @property\n    def title(self):\n        return self.driver.find_element(*RoutePageLocators.TITLE)\n\n    @property\n    def navigation(self):\n        return self.driver.find_elements(*RoutePageLocators.NAV_LINKS)\n\n    @property\n    def dropdown(self):\n        return self.driver.find_element(*RoutePageLocators.DROPDOWN)\n\n    @property\n    def dropdown_links(self):\n        return self.driver.find_elements(*RoutePageLocators.DROPDOWN_LINKS)\n\n\n    @property\n    def home_button(self):\n        return self.driver.find_element(*RoutePageLocators.HOME_BUTTON)\n\n    @property\n    def tile_path(self):\n        return self.driver.find_elements(*RoutePageLocators.TILE_PATH)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"""
_Dockerized/aipathfinder/web/tests/acceptance/steps/__init__.py,0,b''
_Dockerized/aipathfinder/web/tests/acceptance/steps/content.py,0,"b'from behave import *\nfrom pathlib import Path\n\nfrom tests.acceptance.page_model.base_page import BasePage\nfrom tests.acceptance.page_model.environment_page import EnvironmentPage\nfrom tests.acceptance.page_model.login_page import LoginPage\nfrom tests.acceptance.page_model.register_page import RegisterPage\nfrom tests.acceptance.page_model.route_page import RoutePage\n\nuse_step_matcher(\'re\')\n\n\n@then(\'There is a title shown on the page\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    assert page.title.is_displayed()\n\n\n@then(\'The title tag has content ""(.*)""\')\ndef step_impl(context, content):\n    page = BasePage(context.driver)\n    assert page.title.text == content\n\n\n@then(\'There are three buttons shown on the page\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    assert page.clear_button.is_displayed()\n    assert page.download_button.is_displayed()\n    assert page.predict_button.is_displayed()\n\n@then(\'I can see there is a register form on the page\')\ndef step_impl(context):\n    page = RegisterPage(context.driver)\n    assert page.form.is_displayed()\n\n\n@then(\'I can see there is a login form on the page\')\ndef step_impl(context):\n    page = LoginPage(context.driver)\n    assert page.form.is_displayed()\n\n\n\n@then(\'I can see there are all key tiles displayed\')\ndef step_impl(context):\n    page = EnvironmentPage(context.driver)\n    assert page.tile_start.is_displayed()\n    assert page.tile_astronauts.is_displayed()\n    assert page.tile_base.is_displayed()\n    assert len(page.tile_storms) == 4\n\n\n\n@then(\'I can see there is a path visible\')\ndef step_impl(context):\n    page = RoutePage(context.driver)\n    assert len(page.tile_path) > 2'"
_Dockerized/aipathfinder/web/tests/acceptance/steps/interactions.py,0,"b'from behave import *\n\nfrom tests.acceptance.page_model.base_page import BasePage\nfrom tests.acceptance.page_model.environment_page import EnvironmentPage\nfrom tests.acceptance.page_model.login_page import LoginPage\nfrom tests.acceptance.page_model.register_page import RegisterPage\nfrom tests.acceptance.page_model.route_page import RoutePage\n\nuse_step_matcher(\'re\')\n\n\n@when(\'I click on the ""(.*)"" link\')\ndef step_impl(context, link_text):\n    page = BasePage(context.driver)\n    links = page.navigation\n\n    matching_links = [l for l in links if l.text == link_text]\n    # matching_links[0].click()\n    if len(matching_links) > 0:\n        matching_links[0].click()\n    else:\n        raise RuntimeError()\n\n@when(\'I click on the login\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    page.login.click()\n\n\n@when(\'I click on the dropdown menu\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    page.dropdown.click()\n\n@when(\'I click on the ""(.*)"" dropdown link\')\ndef step_impl(context, link_text):\n    page = BasePage(context.driver)\n    links = page.dropdown_links\n    matching_links = [l for l in links if l.text == link_text]\n    matching_links[0].click()\n\n@when(\'I enter ""(.*)"" in the ""(.*)"" field\')\ndef step_impl(context, content, field_name):\n    page = RegisterPage(context.driver)\n    page.form_field(field_name).send_keys(content)\n\n\n@when(\'I enter ""(.*)"" in the ""(.*)"" login field\')\ndef step_impl(context, content, field_name):\n    page = LoginPage(context.driver)\n    page.form_field(field_name).send_keys(content)\n\n@when(\'I enter ""(.*)"" in the ""(.*)"" environment field\')\ndef step_impl(context, content, field_name):\n    page = BasePage(context.driver)\n    page.form_field(field_name).send_keys(content)\n\n\n@when(\'I choose ""(.*)"" field\')\ndef step_impl(context, field_name):\n    page = BasePage(context.driver)\n    page.form_field(field_name).click()\n\n\n@when(\'I press the submit button\')\ndef step_impl(context):\n    page = RegisterPage(context.driver)\n    page.submit_button.click()\n\n\n@when(\'I press the login button\')\ndef step_impl(context):\n    page = LoginPage(context.driver)\n    page.submit_button.click()\n\n\n\n@when(\'I press the ""BUILD THE ENVIRONMENT"" button\')\ndef step_impl(context):\n    page = BasePage(context.driver)\n    page.submit_button.click()\n\n@when(\'I initiate pathfinder AI\')\ndef step_impl(context):\n    page = EnvironmentPage(context.driver)\n    page.submit_button.click()\n\n\n@when(\'I press the ""Change Environment"" button\')\ndef step_impl(context):\n    page = RoutePage(context.driver)\n    page.home_button.click()'"
_Dockerized/aipathfinder/web/tests/acceptance/steps/navigation.py,0,"b""from behave import *\nfrom selenium import webdriver\n\nfrom tests.acceptance.page_model.base_page import BasePage\nfrom tests.acceptance.page_model.environment_page import EnvironmentPage\nfrom tests.acceptance.page_model.login_page import LoginPage\nfrom tests.acceptance.page_model.register_page import RegisterPage\nfrom tests.acceptance.page_model.route_page import RoutePage\n\nuse_step_matcher('re')\n\n\n@given('I am on the homepage')\ndef step_impl(context):\n    context.driver = webdriver.Chrome('C:/chromedriver.exe')  ## path to chromedriver\n    page = BasePage(context.driver)\n    context.driver.get(page.url)\n\n\n@given('I am on the register page')\ndef step_impl(context):\n    context.driver = webdriver.Chrome('C:/chromedriver.exe')\n    page = RegisterPage(context.driver)\n    context.driver.get(page.url)\n\n\n@given('I am on the login page')\ndef step_impl(context):\n    context.driver = webdriver.Chrome('C:/chromedriver.exe')\n    page = LoginPage(context.driver)\n    context.driver.get(page.url)\n\n\n@then('I am on the homepage')\ndef step_impl(context):\n    expected_url = 'http://127.0.0.1:5000/'\n    assert context.driver.current_url == expected_url\n\n\n@then('I am on the register page')\ndef step_impl(context):\n    expected_url = RegisterPage(context.driver).url\n    assert context.driver.current_url == expected_url\n\n\n@then('I am on the login page')\ndef step_impl(context):\n    expected_url = LoginPage(context.driver).url\n    assert context.driver.current_url == expected_url\n\n\n@then('I am on the environment page')\ndef step_impl(context):\n    expected_url = EnvironmentPage(context.driver).url\n    assert context.driver.current_url == expected_url\n\n@then('I am on the route page')\ndef step_impl(context):\n    expected_url = RoutePage(context.driver).url\n    assert context.driver.current_url == expected_url"""
_Dockerized/aipathfinder/web/tests/acceptance/steps/waits.py,0,"b""from behave import *\nimport time\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.support.wait import WebDriverWait\n\nfrom tests.acceptance.locators.base_page import BasePageLocators\n\nuse_step_matcher('re')\n\n\n@given('I wait for the page to load')\ndef step_impl(context):\n    WebDriverWait(context.driver, 2).until(\n        expected_conditions.visibility_of_element_located(BasePageLocators.PAGE)\n    )\n\n\n@given('I wait for the dropdown to load')\ndef step_impl(context):\n    WebDriverWait(context.driver, 2).until(\n        expected_conditions.visibility_of_element_located(BasePageLocators.DROPDOWN)\n    )\n\n@given('I wait for the algorithm page to load')\ndef step_impl(context):\n    time.sleep(3)\n"""
