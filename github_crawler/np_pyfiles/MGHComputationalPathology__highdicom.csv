file_path,api_count,code
setup.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport io\nimport re\n\nimport setuptools\n\nwith io.open('src/highdicom/version.py', 'rt', encoding='utf8') as f:\n    version = re.search(r'__version__ = \\'(.*?)\\'', f.read()).group(1)\n\n\nsetuptools.setup(\n    name='highdicom',\n    version=version,\n    description='High-level DICOM abstractions.',\n    author='Markus D. Herrmann',\n    maintainer='Markus D. Herrmann',\n    url='https://github.com/mghcomputationalpathology/highdicom',\n    license='MIT',\n    platforms=['Linux', 'MacOS', 'Windows'],\n    classifiers=[\n        'Operating System :: MacOS',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX :: Linux',\n        'License :: OSI Approved :: MIT License',\n        'Intended Audience :: Science/Research',\n        'Topic :: Multimedia :: Graphics',\n        'Topic :: Scientific/Engineering :: Information Analysis',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Development Status :: 4 - Beta',\n    ],\n    include_package_data=True,\n    packages=setuptools.find_packages('src'),\n    package_dir={'': 'src'},\n    python_requires='>=3.6',\n    install_requires=[\n        'pydicom>=1.4.1',\n        'numpy>=1.0',\n        'pillow>=6.0'\n    ],\n)\n"""
bin/create_iods_modules.py,0,"b'#!/usr/bin/env python3\nimport datetime\nimport collections\nimport json\nimport logging\nimport os\nimport sys\n\nfrom pydicom.datadict import dictionary_keyword, repeater_has_tag\nfrom pydicom.tag import Tag\n\nlogger = logging.getLogger(__name__)\n\n\nPGK_PATH = os.path.join(\n    os.path.dirname(__file__),\n    \'..\',\n    \'src\',\n    \'highdicom\'\n)\n\n\ndef _load_json_from_file(filename):\n    with open(filename) as f:\n        return json.load(f)\n\n\ndef _dump_json(data):\n    return json.dumps(data, indent=4, sort_keys=True)\n\n\ndef _create_iods(directory):\n    filename = os.path.join(directory, \'ciod_to_modules.json\')\n    ciod_to_modules = _load_json_from_file(filename)\n    iods = collections.defaultdict(list)\n    for item in ciod_to_modules:\n        mapping = {\n            \'key\': item[\'moduleId\'],\n            \'usage\': item[\'usage\'],\n            \'ie\': item[\'informationEntity\'],\n        }\n        iods[item[\'ciodId\']].append(mapping)\n    return iods\n\n\ndef _create_modules(directory):\n    filename = os.path.join(directory, \'module_to_attributes.json\')\n    module_to_attributes = _load_json_from_file(filename)\n    modules = collections.defaultdict(list)\n    for item in module_to_attributes:\n        path = item[\'path\'].split(\':\')[1:]\n        tag_string = path.pop(-1)\n        # Handle attributes used for real-time communication, which are neither\n        # in DicomDictionary nor in RepeaterDictionary\n        if any(p.startswith(\'0006\') for p in path):\n            logger.warning(f\'skip attribute ""{tag_string}""\')\n            continue\n        logger.debug(f\'add attribute ""{tag_string}""\')\n        # Handle attributes that are in RepeatersDictionary\n        tag_string = tag_string.replace(\'xx\', \'00\')\n        tag = Tag(tag_string)\n        try:\n            keyword = dictionary_keyword(tag)\n        except KeyError:\n            logger.error(f\'keyword not found for attribute ""{tag}""\')\n            continue\n        mapping = {\n            \'keyword\': keyword,\n            \'type\': item[\'type\'],\n            \'path\': [dictionary_keyword(t) for t in path],\n        }\n        modules[item[\'moduleId\']].append(mapping)\n    return modules\n\n\nif __name__ == \'__main__\':\n\n    logging.basicConfig()\n    logger.setLevel(logging.DEBUG)\n\n    # Positional argument is path to directory containing JSON files generated\n    # using the dicom-standard Python package, see\n    # https://github.com/innolitics/dicom-standard/tree/master/standard\n    try:\n        directory = sys.argv[1]\n    except IndexError:\n        raise ValueError(\'Path to directory must be provided.\')\n    if not os.path.exists(directory):\n        raise IOError(\'Path does not exist: ""{}""\'.format(directory))\n    if not os.path.isdir(directory):\n        raise IOError(\'Path is not a directory: ""{}""\'.format(directory))\n\n    now = datetime.datetime.now()\n    current_date = datetime.datetime.date(now).strftime(\'%Y-%m-%d\')\n    current_time = datetime.datetime.time(now).strftime(\'%H:%M:%S\')\n\n    iods = _create_iods(directory)\n    iods_docstr = \'\\n\'.join([\n        \'""""""DICOM information object definitions (IODs)\',\n        f\'auto-generated on {current_date} at {current_time}.\',\n        \'""""""\'\n    ])\n    iods_filename = os.path.join(PGK_PATH, \'_iods.py\')\n    with open(iods_filename, \'w\') as fp:\n        fp.write(iods_docstr)\n        fp.write(\'\\n\\n\')\n        iods_formatted = _dump_json(iods).replace(\'null\', \'None\')\n        fp.write(\'IOD_MODULE_MAP = {}\'.format(iods_formatted))\n\n    modules = _create_modules(directory)\n    modules_docstr = (\n        \'""""""DICOM modules\'\n        f\'auto-generated on {current_date} at {current_time}.\'\n        \'""""""\'\n    )\n    modules_filename = os.path.join(PGK_PATH, \'_modules.py\')\n    with open(modules_filename, \'w\') as fp:\n        fp.write(modules_docstr)\n        fp.write(\'\\n\\n\')\n        modules_formatted = _dump_json(modules).replace(\'null\', \'None\')\n        fp.write(\'MODULE_ATTRIBUTE_MAP = {}\'.format(modules_formatted))\n'"
docs/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Configuration file for the Sphinx documentation builder.\n#\n# This file does only contain a selection of the most common options. For a\n# full list see the documentation:\n# http://www.sphinx-doc.org/en/stable/config\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\nimport pkg_resources\n\nsource_dir = os.path.dirname(__file__)\npkg_dir = os.path.join(source_dir, \'..\', \'..\', \'src\', \'highdicom\')\nsys.path.insert(0, os.path.abspath(pkg_dir))\n\n# -- Project information -----------------------------------------------------\n\nproject = \'highdicom\'\ncopyright = \'2020, MGH Computational Pathology\'\nauthor = \'Markus D. Herrmann\'\n\n# The full version, including alpha/beta/rc tags\ntry:\n    release = pkg_resources.get_distribution(\'highdicom\').version\nexcept pkg_resources.DistributionNotFound:\n    print(\'Package ""highdicom"" must be installed to build docs.\')\n    sys.exit(1)\n# The short X.Y version\nversion = \'.\'.join(release.split(\'.\')[:2])\n\n\n# -- General configuration ---------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    \'sphinxcontrib.autoprogram\',\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx_autodoc_typehints\',\n]\n\nnapoleon_google_docstring = False\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = \'.rst\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path .\nexclude_patterns = []\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n# Concatenate docstring of class definion and __init__ method definition.\nautoclass_content = \'both\'\n\ntypehints_fully_qualified = True\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don\'t match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``[\'localtoc.html\', \'relations.html\', \'sourcelink.html\',\n# \'searchbox.html\']``.\n#\n# html_sidebars = {}\n\n\n# -- Options for HTMLHelp output ---------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'highdicomdoc\'\n\n\n# -- Options for LaTeX output ------------------------------------------------\n\nlatex_elements = {\n    # The paper size (\'letterpaper\' or \'a4paper\').\n    #\n    # \'papersize\': \'letterpaper\',\n\n    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n    #\n    # \'pointsize\': \'10pt\',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # \'preamble\': \'\',\n\n    # Latex figure (float) alignment\n    #\n    # \'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (\n        master_doc,\n        \'highdicom.tex\',\n        \'highdicom Documentation\',\n        author,\n        \'manual\'\n    ),\n]\n\n\n# -- Options for manual page output ------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (\n        master_doc,\n        \'highdicom.tex\',\n        \'highdicom Documentation\',\n        [author],\n        1\n    ),\n]\n\n\n# -- Options for Texinfo output ----------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (\n        master_doc,\n        \'highdicom\',\n        \'highdicom Documentation\',\n        author,\n        \'highdicom\',\n        (\n            \'High-level Python abstractions for the creation \'\n            \'of derived DICOM objects.\'\n        ),\n        \'Miscellaneous\'\n    ),\n]\n\n\n# -- Extension configuration -------------------------------------------------\n'"
tests/conftest.py,0,b''
tests/test_legacy.py,0,"b'import unittest\nfrom pydicom import FileDataset, Dataset\nfrom pydicom.uid import generate_uid\nfrom highdicom.legacy import sop\nfrom datetime import datetime, timedelta\nimport pytest\nimport enum\n\n\nclass Modality(enum.IntEnum):\n    CT = 0\n    MR = 1\n    PT = 2\n\n\nsop_classes = [(\'CT\', \'1.2.840.10008.5.1.4.1.1.2\'),\n               (\'MR\', \'1.2.840.10008.5.1.4.1.1.4\'),\n               (\'PT\', \'1.2.840.10008.5.1.4.1.1.128\')]\n\n\nclass TestLegacyConvertedEnhancedImage(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._modalities = (\'CT\', \'MR\', \'PET\')\n        self._ref_dataset_seq_CT = \\\n            self.generate_common_dicom_dataset_series(3, Modality.CT)\n        self._ref_dataset_seq_MR = \\\n            self.generate_common_dicom_dataset_series(3, Modality.MR)\n        self._ref_dataset_seq_PET = \\\n            self.generate_common_dicom_dataset_series(3, Modality.PT)\n        self._output_series_instance_uid = generate_uid()\n        self._output_sop_instance_uid = generate_uid()\n        self._output_series_number = \'1\'\n        self._output_instance_number = \'1\'\n\n    def test_output_attributes(self):\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                ref_dataset_seq = getattr(self, ""_ref_dataset_seq_{}"".format(m))\n\n                multiframe_item = LegacyConverterClass(\n                    legacy_datasets=ref_dataset_seq,\n                    series_instance_uid=self._output_series_instance_uid,\n                    series_number=self._output_instance_number,\n                    sop_instance_uid=self._output_sop_instance_uid,\n                    instance_number=self._output_instance_number)\n                assert multiframe_item.SeriesInstanceUID == \\\n                    self._output_series_instance_uid\n                assert multiframe_item.SOPInstanceUID == \\\n                    self._output_sop_instance_uid\n                assert int(multiframe_item.SeriesNumber) == int(\n                    self._output_series_number)\n                assert int(multiframe_item.InstanceNumber) == int(\n                    self._output_instance_number)\n\n    def test_empty_dataset(self):\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                with self.assertRaises(ValueError):\n                    LegacyConverterClass(\n                        [],\n                        series_instance_uid=self._output_series_instance_uid,\n                        series_number=self._output_instance_number,\n                        sop_instance_uid=self._output_sop_instance_uid,\n                        instance_number=self._output_instance_number)\n\n    def test_wrong_modality(self):\n\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                ref_dataset_seq = getattr(self, ""_ref_dataset_seq_{}"".format(m))\n                tmp_orig_modality = ref_dataset_seq[0].Modality\n                ref_dataset_seq[0].Modality = \'\'\n                with self.assertRaises(ValueError):\n                    LegacyConverterClass(\n                        legacy_datasets=ref_dataset_seq,\n                        series_instance_uid=self._output_series_instance_uid,\n                        series_number=self._output_instance_number,\n                        sop_instance_uid=self._output_sop_instance_uid,\n                        instance_number=self._output_instance_number)\n                ref_dataset_seq[0].Modality = tmp_orig_modality\n\n    def test_wrong_sop_class_uid(self):\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                ref_dataset_seq = getattr(self, ""_ref_dataset_seq_{}"".format(m))\n                tmp_orig_sop_class_id = ref_dataset_seq[0].SOPClassUID\n                ref_dataset_seq[0].SOPClassUID = \'1.2.3.4.5.6.7.8.9\'\n                with self.assertRaises(ValueError):\n                    LegacyConverterClass(\n                        legacy_datasets=ref_dataset_seq,\n                        series_instance_uid=self._output_series_instance_uid,\n                        series_number=self._output_instance_number,\n                        sop_instance_uid=self._output_sop_instance_uid,\n                        instance_number=self._output_instance_number)\n                ref_dataset_seq[0].SOPClassUID = tmp_orig_sop_class_id\n\n    def test_mixed_studies(self):\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                ref_dataset_seq = getattr(self, ""_ref_dataset_seq_{}"".format(m))\n                # first run with intact input\n\n                LegacyConverterClass(\n                    legacy_datasets=ref_dataset_seq,\n                    series_instance_uid=self._output_series_instance_uid,\n                    series_number=self._output_instance_number,\n                    sop_instance_uid=self._output_sop_instance_uid,\n                    instance_number=self._output_instance_number)\n                # second run with defected input\n                tmp_orig_study_instance_uid = ref_dataset_seq[\n                    0].StudyInstanceUID\n                ref_dataset_seq[0].StudyInstanceUID = \'1.2.3.4.5.6.7.8.9\'\n                with self.assertRaises(ValueError):\n                    LegacyConverterClass(\n                        legacy_datasets=ref_dataset_seq,\n                        series_instance_uid=self._output_series_instance_uid,\n                        series_number=self._output_instance_number,\n                        sop_instance_uid=self._output_sop_instance_uid,\n                        instance_number=self._output_instance_number)\n                ref_dataset_seq[\n                    0].StudyInstanceUID = tmp_orig_study_instance_uid\n\n    def test_mixed_series(self):\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                ref_dataset_seq = getattr(self, ""_ref_dataset_seq_{}"".format(m))\n                # first run with intact input\n                LegacyConverterClass(\n                    legacy_datasets=ref_dataset_seq,\n                    series_instance_uid=self._output_series_instance_uid,\n                    series_number=self._output_instance_number,\n                    sop_instance_uid=self._output_sop_instance_uid,\n                    instance_number=self._output_instance_number)\n                # second run with defected input\n                tmp_series_instance_uid = ref_dataset_seq[0].SeriesInstanceUID\n                ref_dataset_seq[0].SeriesInstanceUID = \'1.2.3.4.5.6.7.8.9\'\n                with self.assertRaises(ValueError):\n                    LegacyConverterClass(\n                        legacy_datasets=ref_dataset_seq,\n                        series_instance_uid=self._output_series_instance_uid,\n                        series_number=self._output_instance_number,\n                        sop_instance_uid=self._output_sop_instance_uid,\n                        instance_number=self._output_instance_number)\n                ref_dataset_seq[0].SeriesInstanceUID = tmp_series_instance_uid\n\n    def test_mixed_transfer_syntax(self):\n        for m in self._modalities:\n            with self.subTest(m=m):\n                LegacyConverterClass = getattr(\n                    sop,\n                    ""LegacyConvertedEnhanced{}Image"".format(m)\n                )\n                ref_dataset_seq = getattr(self, ""_ref_dataset_seq_{}"".format(m))\n                # first run with intact input\n                LegacyConverterClass(\n                    legacy_datasets=ref_dataset_seq,\n                    series_instance_uid=self._output_series_instance_uid,\n                    series_number=self._output_instance_number,\n                    sop_instance_uid=self._output_sop_instance_uid,\n                    instance_number=self._output_instance_number)\n                # second run with defected input\n                tmp_transfer_syntax_uid = ref_dataset_seq[\n                    0].file_meta.TransferSyntaxUID\n                ref_dataset_seq[\n                    0].file_meta.TransferSyntaxUID = \'1.2.3.4.5.6.7.8.9\'\n                with self.assertRaises(ValueError):\n                    LegacyConverterClass(\n                        legacy_datasets=ref_dataset_seq,\n                        series_instance_uid=self._output_series_instance_uid,\n                        series_number=self._output_instance_number,\n                        sop_instance_uid=self._output_sop_instance_uid,\n                        instance_number=self._output_instance_number)\n                ref_dataset_seq[\n                    0].file_meta.TransferSyntaxUID = tmp_transfer_syntax_uid\n\n    def generate_common_dicom_dataset_series(self, slice_count: int,\n                                             system: Modality) -> list:\n        output_dataset = []\n        slice_pos = 0\n        slice_thickness = 0\n        study_uid = generate_uid()\n        series_uid = generate_uid()\n        frame_of_ref_uid = generate_uid()\n        date_ = datetime.now().date()\n        age = timedelta(days=45 * 365)\n        time_ = datetime.now().time()\n        cols = 2\n        rows = 2\n        bytes_per_voxel = 2\n\n        for i in range(0, slice_count):\n            file_meta = Dataset()\n            pixel_array = b""\\0"" * cols * rows * bytes_per_voxel\n            file_meta.MediaStorageSOPClassUID = sop_classes[system][1]\n            file_meta.MediaStorageSOPInstanceUID = generate_uid()\n            file_meta.ImplementationClassUID = generate_uid()\n\n            tmp_dataset = FileDataset(\'\', {}, file_meta=file_meta,\n                                      preamble=pixel_array)\n            tmp_dataset.file_meta.TransferSyntaxUID = ""1.2.840.10008.1.2.1""\n            tmp_dataset.SliceLocation = slice_pos + i * slice_thickness\n            tmp_dataset.SliceThickness = slice_thickness\n            tmp_dataset.WindowCenter = 1\n            tmp_dataset.WindowWidth = 2\n            tmp_dataset.AcquisitionNumber = 1\n            tmp_dataset.InstanceNumber = i\n            tmp_dataset.SeriesNumber = 1\n            tmp_dataset.ImageOrientationPatient = [1.000000, 0.000000, 0.000000,\n                                                   0.000000, 1.000000, 0.000000]\n            tmp_dataset.ImagePositionPatient = [0.0, 0.0,\n                                                tmp_dataset.SliceLocation]\n            tmp_dataset.ImageType = [\'ORIGINAL\', \'PRIMARY\', \'AXIAL\']\n            tmp_dataset.PixelSpacing = [1, 1]\n            tmp_dataset.PatientName = \'John Doe\'\n            tmp_dataset.FrameOfReferenceUID = frame_of_ref_uid\n            tmp_dataset.SOPClassUID = sop_classes[system][1]\n            tmp_dataset.SOPInstanceUID = generate_uid()\n            tmp_dataset.SeriesInstanceUID = series_uid\n            tmp_dataset.StudyInstanceUID = study_uid\n            tmp_dataset.BitsAllocated = bytes_per_voxel * 8\n            tmp_dataset.BitsStored = bytes_per_voxel * 8\n            tmp_dataset.HighBit = (bytes_per_voxel * 8 - 1)\n            tmp_dataset.PixelRepresentation = 1\n            tmp_dataset.Columns = cols\n            tmp_dataset.Rows = rows\n            tmp_dataset.SamplesPerPixel = 1\n            tmp_dataset.AccessionNumber = \'2\'\n            tmp_dataset.AcquisitionDate = date_\n            tmp_dataset.AcquisitionTime = datetime.now().time()\n            tmp_dataset.AdditionalPatientHistory = \'UTERINE CA PRE-OP EVAL\'\n            tmp_dataset.ContentDate = date_\n            tmp_dataset.ContentTime = datetime.now().time()\n            tmp_dataset.Manufacturer = \'Mnufacturer\'\n            tmp_dataset.ManufacturerModelName = \'Model\'\n            tmp_dataset.Modality = sop_classes[system][0]\n            tmp_dataset.PatientAge = \'064Y\'\n            tmp_dataset.PatientBirthDate = date_ - age\n            tmp_dataset.PatientID = \'ID0001\'\n            tmp_dataset.PatientIdentityRemoved = \'YES\'\n            tmp_dataset.PatientPosition = \'FFS\'\n            tmp_dataset.PatientSex = \'F\'\n            tmp_dataset.PhotometricInterpretation = \'MONOCHROME2\'\n            tmp_dataset.PixelData = pixel_array\n            tmp_dataset.PositionReferenceIndicator = \'XY\'\n            tmp_dataset.ProtocolName = \'some protocole\'\n            tmp_dataset.ReferringPhysicianName = \'\'\n            tmp_dataset.SeriesDate = date_\n            tmp_dataset.SeriesDescription = \'test series \'\n            tmp_dataset.SeriesTime = time_\n            tmp_dataset.SoftwareVersions = \'01\'\n            tmp_dataset.SpecificCharacterSet = \'ISO_IR 100\'\n            tmp_dataset.StudyDate = date_\n            tmp_dataset.StudyDescription = \'test study\'\n            tmp_dataset.StudyID = \'\'\n            if (system == Modality.CT):\n                tmp_dataset.RescaleIntercept = 0\n                tmp_dataset.RescaleSlope = 1\n            tmp_dataset.StudyTime = time_\n            output_dataset.append(tmp_dataset)\n        return output_dataset\n'"
tests/test_sc.py,6,"b""import unittest\n\nimport numpy as np\nimport pytest\nfrom pydicom.uid import generate_uid\n\nfrom highdicom.content import SpecimenDescription\nfrom highdicom.enum import CoordinateSystemNames\nfrom highdicom.sc.sop import SCImage\n\n\nclass TestSCImage(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._rgb_pixel_array = np.zeros((10, 10, 3), dtype=np.uint8)\n        self._monochrome_pixel_array = np.zeros((10, 10), dtype=np.uint16)\n        self._study_instance_uid = generate_uid()\n        self._series_instance_uid = generate_uid()\n        self._sop_instance_uid = generate_uid()\n        self._series_number = int(np.random.choice(100))\n        self._instance_number = int(np.random.choice(100))\n        self._manufacturer = 'ABC'\n        self._laterality = 'L'\n        self._patient_orientation = ['A', 'R']\n        self._container_identifier = str(np.random.choice(100))\n        self._specimen_identifier = str(np.random.choice(100))\n        self._specimen_uid = generate_uid()\n\n    def test_construct_rgb_patient(self):\n        bits_allocated = 8\n        photometric_interpretation = 'RGB'\n        coordinate_system = 'PATIENT'\n        instance = SCImage(\n            pixel_array=self._rgb_pixel_array,\n            photometric_interpretation=photometric_interpretation,\n            bits_allocated=bits_allocated,\n            coordinate_system=coordinate_system,\n            study_instance_uid=self._study_instance_uid,\n            series_instance_uid=self._series_instance_uid,\n            sop_instance_uid=self._sop_instance_uid,\n            series_number=self._series_number,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            laterality=self._laterality,\n            patient_orientation=self._patient_orientation\n        )\n        assert instance.BitsAllocated == bits_allocated\n        assert instance.SamplesPerPixel == 3\n        assert instance.PlanarConfiguration == 0\n        assert instance.PhotometricInterpretation == photometric_interpretation\n        assert instance.StudyInstanceUID == self._study_instance_uid\n        assert instance.SeriesInstanceUID == self._series_instance_uid\n        assert instance.SOPInstanceUID == self._sop_instance_uid\n        assert instance.SeriesNumber == self._series_number\n        assert instance.InstanceNumber == self._instance_number\n        assert instance.Manufacturer == self._manufacturer\n        assert instance.Laterality == self._laterality\n        assert instance.PatientOrientation == self._patient_orientation\n        assert instance.AccessionNumber is None\n        assert instance.PatientName is None\n        assert instance.PatientSex is None\n        assert instance.StudyTime is None\n        assert instance.StudyTime is None\n        assert instance.PixelData == self._rgb_pixel_array.tobytes()\n        with pytest.raises(AttributeError):\n            instance.ContainerIdentifier\n            instance.SpecimenDescriptionSequence\n            instance.ContainerTypeCodeSequence\n            instance.IssuerOfTheContainerIdentifierSequence\n\n    def test_construct_rgb_patient_missing_parameter(self):\n        with pytest.raises(TypeError):\n            bits_allocated = 8\n            photometric_interpretation = 'RGB'\n            coordinate_system = 'PATIENT'\n            SCImage(\n                pixel_array=self._rgb_pixel_array,\n                photometric_interpretation=photometric_interpretation,\n                bits_allocated=bits_allocated,\n                coordinate_system=coordinate_system,\n                study_instance_uid=self._study_instance_uid,\n                series_instance_uid=self._series_instance_uid,\n                sop_instance_uid=self._sop_instance_uid,\n                series_number=self._series_number,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                patient_orientation=self._patient_orientation\n            )\n\n    def test_construct_rgb_patient_missing_parameter_1(self):\n        with pytest.raises(TypeError):\n            bits_allocated = 8\n            photometric_interpretation = 'RGB'\n            coordinate_system = 'PATIENT'\n            SCImage(\n                pixel_array=self._rgb_pixel_array,\n                photometric_interpretation=photometric_interpretation,\n                bits_allocated=bits_allocated,\n                coordinate_system=coordinate_system,\n                study_instance_uid=self._study_instance_uid,\n                series_instance_uid=self._series_instance_uid,\n                sop_instance_uid=self._sop_instance_uid,\n                series_number=self._series_number,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                laterality=self._laterality,\n            )\n\n    def test_construct_rgb_slide_single_specimen(self):\n        bits_allocated = 8\n        photometric_interpretation = 'RGB'\n        coordinate_system = 'SLIDE'\n        specimen_description = SpecimenDescription(\n            specimen_id=self._specimen_identifier,\n            specimen_uid=self._specimen_uid\n        )\n        instance = SCImage(\n            pixel_array=self._rgb_pixel_array,\n            photometric_interpretation=photometric_interpretation,\n            bits_allocated=bits_allocated,\n            coordinate_system=coordinate_system,\n            study_instance_uid=self._study_instance_uid,\n            series_instance_uid=self._series_instance_uid,\n            sop_instance_uid=self._sop_instance_uid,\n            series_number=self._series_number,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            container_identifier=self._container_identifier,\n            specimen_descriptions=[specimen_description]\n        )\n        assert instance.BitsAllocated == bits_allocated\n        assert instance.SamplesPerPixel == 3\n        assert instance.PlanarConfiguration == 0\n        assert instance.PhotometricInterpretation == photometric_interpretation\n        assert instance.StudyInstanceUID == self._study_instance_uid\n        assert instance.SeriesInstanceUID == self._series_instance_uid\n        assert instance.SOPInstanceUID == self._sop_instance_uid\n        assert instance.SeriesNumber == self._series_number\n        assert instance.InstanceNumber == self._instance_number\n        assert instance.Manufacturer == self._manufacturer\n        assert instance.ContainerIdentifier == self._container_identifier\n        assert len(instance.ContainerTypeCodeSequence) == 1\n        assert len(instance.IssuerOfTheContainerIdentifierSequence) == 0\n        assert len(instance.SpecimenDescriptionSequence) == 1\n        specimen_item = instance.SpecimenDescriptionSequence[0]\n        assert specimen_item.SpecimenIdentifier == self._specimen_identifier\n        assert specimen_item.SpecimenUID == self._specimen_uid\n        assert instance.AccessionNumber is None\n        assert instance.PatientName is None\n        assert instance.PatientSex is None\n        assert instance.StudyTime is None\n        assert instance.StudyTime is None\n        assert instance.PixelData == self._rgb_pixel_array.tobytes()\n        with pytest.raises(AttributeError):\n            instance.Laterality\n            instance.PatientOrientation\n\n    def test_construct_rgb_slide_single_specimen_missing_parameter(self):\n        bits_allocated = 8\n        photometric_interpretation = 'RGB'\n        coordinate_system = 'SLIDE'\n        specimen_description = SpecimenDescription(\n            specimen_id=self._specimen_identifier,\n            specimen_uid=self._specimen_uid\n        )\n        with pytest.raises(TypeError):\n            SCImage(\n                pixel_array=self._rgb_pixel_array,\n                photometric_interpretation=photometric_interpretation,\n                bits_allocated=bits_allocated,\n                coordinate_system=coordinate_system,\n                study_instance_uid=self._study_instance_uid,\n                series_instance_uid=self._series_instance_uid,\n                sop_instance_uid=self._sop_instance_uid,\n                series_number=self._series_number,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                specimen_descriptions=[specimen_description]\n            )\n\n    def test_construct_rgb_slide_single_specimen_missing_parameter_1(self):\n        bits_allocated = 8\n        photometric_interpretation = 'RGB'\n        coordinate_system = 'SLIDE'\n        with pytest.raises(TypeError):\n            SCImage(\n                pixel_array=self._rgb_pixel_array,\n                photometric_interpretation=photometric_interpretation,\n                bits_allocated=bits_allocated,\n                coordinate_system=coordinate_system,\n                study_instance_uid=self._study_instance_uid,\n                series_instance_uid=self._series_instance_uid,\n                sop_instance_uid=self._sop_instance_uid,\n                series_number=self._series_number,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                container_identifier=self._container_identifier,\n            )\n\n    def test_construct_monochrome_patient(self):\n        bits_allocated = 12\n        photometric_interpretation = 'MONOCHROME2'\n        coordinate_system = 'PATIENT'\n        instance = SCImage(\n            pixel_array=self._monochrome_pixel_array,\n            photometric_interpretation=photometric_interpretation,\n            bits_allocated=bits_allocated,\n            coordinate_system=coordinate_system,\n            study_instance_uid=self._study_instance_uid,\n            series_instance_uid=self._series_instance_uid,\n            sop_instance_uid=self._sop_instance_uid,\n            series_number=self._series_number,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            laterality=self._laterality,\n            patient_orientation=self._patient_orientation\n        )\n        assert instance.BitsAllocated == bits_allocated\n        assert instance.SamplesPerPixel == 1\n        assert instance.PhotometricInterpretation == photometric_interpretation\n        assert instance.StudyInstanceUID == self._study_instance_uid\n        assert instance.SeriesInstanceUID == self._series_instance_uid\n        assert instance.SOPInstanceUID == self._sop_instance_uid\n        assert instance.SeriesNumber == self._series_number\n        assert instance.InstanceNumber == self._instance_number\n        assert instance.Manufacturer == self._manufacturer\n        assert instance.Laterality == self._laterality\n        assert instance.PatientOrientation == self._patient_orientation\n        assert instance.AccessionNumber is None\n        assert instance.PatientName is None\n        assert instance.PatientSex is None\n        assert instance.StudyTime is None\n        assert instance.StudyTime is None\n        assert instance.PixelData == self._monochrome_pixel_array.tobytes()\n        with pytest.raises(AttributeError):\n            instance.ContainerIdentifier\n            instance.SpecimenDescriptionSequence\n            instance.ContainerTypeCodeSequence\n            instance.IssuerOfTheContainerIdentifierSequence\n"""
tests/test_seg.py,41,"b""from io import BytesIO\nimport unittest\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport numpy as np\nimport pytest\n\nfrom pydicom.data import get_testdata_file, get_testdata_files\nfrom pydicom.dataset import Dataset\nfrom pydicom.filereader import dcmread\nfrom pydicom.sr.codedict import codes\nfrom pydicom.uid import generate_uid, UID\n\nfrom highdicom.content import (\n    AlgorithmIdentificationSequence,\n    PlanePositionSequence,\n    PixelMeasuresSequence,\n    PlaneOrientationSequence,\n)\nfrom highdicom.enum import CoordinateSystemNames\nfrom highdicom.seg.content import (\n    DimensionIndexSequence,\n    SegmentDescription,\n)\nfrom highdicom.seg.enum import (\n    SegmentAlgorithmTypeValues,\n    SegmentsOverlapValues,\n    SegmentationTypeValues,\n)\nfrom highdicom.seg.sop import Segmentation\nfrom highdicom.seg.utils import iter_segments\n\n\nclass TestAlgorithmIdentificationSequence(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._name = 'verydeepneuralnetwork'\n        self._version = '1.0'\n        self._family = codes.DCM.ArtificialIntelligence\n        self._source = 'me'\n        self._parameters = {'one': '1', 'two': '2'}\n\n    def test_construction(self):\n        seq = AlgorithmIdentificationSequence(\n            self._name,\n            self._family,\n            self._version\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.AlgorithmName == self._name\n        assert item.AlgorithmVersion == self._version\n        assert len(item.AlgorithmFamilyCodeSequence) == 1\n        assert item.AlgorithmFamilyCodeSequence[0] == self._family\n        with pytest.raises(AttributeError):\n            item.AlgorithmSource\n            item.AlgorithmParameters\n\n    def test_construction_missing_required_argument(self):\n        with pytest.raises(TypeError):\n            AlgorithmIdentificationSequence(\n                name=self._name,\n                family=self._family\n            )\n\n    def test_construction_missing_required_argument_2(self):\n        with pytest.raises(TypeError):\n            AlgorithmIdentificationSequence(\n                name=self._name,\n                source=self._source\n            )\n\n    def test_construction_missing_required_argument_3(self):\n        with pytest.raises(TypeError):\n            AlgorithmIdentificationSequence(\n                family=self._family,\n                source=self._source\n            )\n\n    def test_construction_optional_argument(self):\n        seq = AlgorithmIdentificationSequence(\n            name=self._name,\n            family=self._family,\n            version=self._version,\n            source=self._source\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.AlgorithmSource == self._source\n        with pytest.raises(AttributeError):\n            item.AlgorithmParameters\n\n    def test_construction_optional_argument_2(self):\n        seq = AlgorithmIdentificationSequence(\n            name=self._name,\n            family=self._family,\n            version=self._version,\n            parameters=self._parameters\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        parsed_params = ','.join([\n            '='.join([key, value])\n            for key, value in self._parameters.items()\n        ])\n        assert item.AlgorithmParameters == parsed_params\n        with pytest.raises(AttributeError):\n            item.AlgorithmSource\n\n\nclass TestSegmentDescription(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._segment_number = 1\n        self._segment_label = 'segment #1'\n        self._segmented_property_category = \\\n            codes.SCT.MorphologicallyAbnormalStructure\n        self._segmented_property_type = codes.SCT.Neoplasm\n        self._segment_algorithm_type = \\\n            SegmentAlgorithmTypeValues.AUTOMATIC.value\n        self._algorithm_identification = AlgorithmIdentificationSequence(\n            name='bla',\n            family=codes.DCM.ArtificialIntelligence,\n            version='v1'\n        )\n        self._tracking_id = 'segment #1'\n        self._tracking_uid = generate_uid()\n        self._anatomic_region = codes.SCT.Thorax\n        self._anatomic_structure = codes.SCT.Lung\n\n    def test_construction(self):\n        item = SegmentDescription(\n            self._segment_number,\n            self._segment_label,\n            self._segmented_property_category,\n            self._segmented_property_type,\n            self._segment_algorithm_type,\n            self._algorithm_identification\n        )\n        assert item.SegmentNumber == self._segment_number\n        assert item.SegmentLabel == self._segment_label\n        assert item.SegmentedPropertyCategoryCodeSequence[0] == \\\n            self._segmented_property_category\n        assert item.SegmentedPropertyTypeCodeSequence[0] == \\\n            self._segmented_property_type\n        assert item.SegmentAlgorithmType == self._segment_algorithm_type\n        assert item.SegmentAlgorithmName == \\\n            self._algorithm_identification[0].AlgorithmName\n        assert len(item.SegmentationAlgorithmIdentificationSequence) == 1\n        with pytest.raises(AttributeError):\n            item.TrackingID\n            item.TrackingUID\n            item.AnatomicRegionSequence\n            item.PrimaryAnatomicStructureSequence\n\n    def test_construction_missing_required_argument(self):\n        with pytest.raises(TypeError):\n            SegmentDescription(\n                segment_label=self._segment_label,\n                segmented_property_category=self._segmented_property_category,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_type=self._segment_algorithm_type,\n                algorithm_identification=self._algorithm_identification\n            )\n\n    def test_construction_missing_required_argument_2(self):\n        with pytest.raises(TypeError):\n            SegmentDescription(\n                segment_number=self._segment_number,\n                segmented_property_category=self._segmented_property_category,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_type=self._segment_algorithm_type,\n                algorithm_identification=self._algorithm_identification\n            )\n\n    def test_construction_missing_required_argument_3(self):\n        with pytest.raises(TypeError):\n            SegmentDescription(\n                segment_number=self._segment_number,\n                segment_label=self._segment_label,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_type=self._segment_algorithm_type,\n                algorithm_identification=self._algorithm_identification\n            )\n\n    def test_construction_missing_required_argument_4(self):\n        with pytest.raises(TypeError):\n            SegmentDescription(\n                segment_number=self._segment_number,\n                segment_label=self._segment_label,\n                segmented_property_category=self._segmented_property_category,\n                algorithm_type=self._segment_algorithm_type,\n                algorithm_identification=self._algorithm_identification\n            )\n\n    def test_construction_missing_required_argument_5(self):\n        with pytest.raises(TypeError):\n            SegmentDescription(\n                segment_number=self._segment_number,\n                segment_label=self._segment_label,\n                segmented_property_category=self._segmented_property_category,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_identification=self._algorithm_identification\n            )\n\n    def test_construction_missing_required_argument_6(self):\n        with pytest.raises(TypeError):\n            SegmentDescription(\n                segment_number=self._segment_number,\n                segment_label=self._segment_label,\n                segmented_property_category=self._segmented_property_category,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_type=self._segment_algorithm_type\n            )\n\n    def test_construction_optional_argument(self):\n        item = SegmentDescription(\n            segment_number=self._segment_number,\n            segment_label=self._segment_label,\n            segmented_property_category=self._segmented_property_category,\n            segmented_property_type=self._segmented_property_type,\n            algorithm_type=self._segment_algorithm_type,\n            algorithm_identification=self._algorithm_identification,\n            tracking_id=self._tracking_id,\n            tracking_uid=self._tracking_uid,\n        )\n        assert item.TrackingID == self._tracking_id\n        assert item.TrackingUID == self._tracking_uid\n        with pytest.raises(AttributeError):\n            item.AnatomicRegionSequence\n            item.PrimaryAnatomicStructureSequence\n\n    def test_construction_optional_argument_2(self):\n        item = SegmentDescription(\n            segment_number=self._segment_number,\n            segment_label=self._segment_label,\n            segmented_property_category=self._segmented_property_category,\n            segmented_property_type=self._segmented_property_type,\n            algorithm_type=self._segment_algorithm_type,\n            algorithm_identification=self._algorithm_identification,\n            anatomic_regions=[self._anatomic_region],\n            primary_anatomic_structures=[self._anatomic_structure]\n        )\n        assert len(item.AnatomicRegionSequence) == 1\n        assert item.AnatomicRegionSequence[0] == self._anatomic_region\n        assert len(item.PrimaryAnatomicStructureSequence) == 1\n        assert item.PrimaryAnatomicStructureSequence[0] == \\\n            self._anatomic_structure\n        with pytest.raises(AttributeError):\n            item.TrackingID\n            item.TrackingUID\n\n\nclass TestPixelMeasuresSequence(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._pixel_spacing = (0.5, 0.5)\n        self._slice_thickness = 0.3\n        self._spacing_between_slices = 0.7\n\n    def test_construction(self):\n        seq = PixelMeasuresSequence(\n            self._pixel_spacing,\n            self._slice_thickness\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.PixelSpacing == list(self._pixel_spacing)\n        assert item.SliceThickness == self._slice_thickness\n        with pytest.raises(AttributeError):\n            self.SpacingBetweenSlices\n\n    def test_construction_missing_required_attribute(self):\n        with pytest.raises(TypeError):\n            PixelMeasuresSequence(\n                pixel_spacing=self._pixel_spacing\n            )\n\n    def test_construction_missing_required_attribute_2(self):\n        with pytest.raises(TypeError):\n            PixelMeasuresSequence(\n                slice_thickness=self._slice_thickness\n            )\n\n    def test_construction_optional_attribute(self):\n        seq = PixelMeasuresSequence(\n            pixel_spacing=self._pixel_spacing,\n            slice_thickness=self._slice_thickness,\n            spacing_between_slices=self._spacing_between_slices\n        )\n        item = seq[0]\n        assert item.SpacingBetweenSlices == self._spacing_between_slices\n\n\nclass TestPlanePositionSequence(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._image_position = (1.0, 2.0, 3.0)\n        self._pixel_matrix_position = (10, 20)\n\n    def test_construction_1(self):\n        seq = PlanePositionSequence(\n            coordinate_system=CoordinateSystemNames.PATIENT,\n            image_position=self._image_position\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.ImagePositionPatient == list(self._image_position)\n        with pytest.raises(AttributeError):\n            item.XOffsetInSlideCoordinateSystem\n\n    def test_construction_2(self):\n        seq = PlanePositionSequence(\n            coordinate_system=CoordinateSystemNames.SLIDE,\n            image_position=self._image_position,\n            pixel_matrix_position=self._pixel_matrix_position\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.XOffsetInSlideCoordinateSystem == self._image_position[0]\n        assert item.YOffsetInSlideCoordinateSystem == self._image_position[1]\n        assert item.ZOffsetInSlideCoordinateSystem == self._image_position[2]\n        assert item.RowPositionInTotalImagePixelMatrix == \\\n            self._pixel_matrix_position[0]\n        assert item.ColumnPositionInTotalImagePixelMatrix == \\\n            self._pixel_matrix_position[1]\n        with pytest.raises(AttributeError):\n            item.ImagePositionPatient\n\n    def test_construction_missing_required_argument(self):\n        with pytest.raises(TypeError):\n            PlanePositionSequence(\n                coordinate_system=CoordinateSystemNames.SLIDE,\n                image_position=self._image_position\n            )\n\n    def test_construction_missing_required_argument_2(self):\n        with pytest.raises(TypeError):\n            PlanePositionSequence(\n                coordinate_system=CoordinateSystemNames.SLIDE,\n                pixel_matrix_position=self._pixel_matrix_position\n            )\n\n    def test_construction_missing_required_argument_3(self):\n        with pytest.raises(TypeError):\n            PlanePositionSequence(\n                coordinate_system=CoordinateSystemNames.PATIENT\n            )\n\n    def test_construction_missing_required_argument_4(self):\n        with pytest.raises(TypeError):\n            PlanePositionSequence(\n                pixel_matrix_position=self._pixel_matrix_position\n            )\n\n\nclass TestPlaneOrientationSequence(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._image_orientation = (1.0, 0.0, 0.0, 0.0, 1.0, 0.0)\n\n    def test_construction(self):\n        seq = PlaneOrientationSequence(\n            'PATIENT',\n            self._image_orientation\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.ImageOrientationPatient == list(self._image_orientation)\n        with pytest.raises(AttributeError):\n            item.ImageOrientationSlide\n\n    def test_construction_2(self):\n        seq = PlaneOrientationSequence(\n            'SLIDE',\n            self._image_orientation\n        )\n        assert len(seq) == 1\n        item = seq[0]\n        assert item.ImageOrientationSlide == list(self._image_orientation)\n        with pytest.raises(AttributeError):\n            item.ImageOrientationPatient\n\n    def test_construction_missing_required_attribute(self):\n        with pytest.raises(TypeError):\n            PlaneOrientationSequence(\n                image_orientation=self._image_orientation\n            )\n\n    def test_construction_missing_required_attribute_2(self):\n        with pytest.raises(TypeError):\n            PlaneOrientationSequence(\n                coordinate_system='PATIENT'\n            )\n\n    def test_construction_wrong_attribute_enumated_value(self):\n        with pytest.raises(ValueError):\n            PlaneOrientationSequence(\n                coordinate_system='OTHER',\n                image_orientation=self._image_orientation\n            )\n\n\nclass TestDimensionIndexSequence(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n\n    def test_construction(self):\n        seq = DimensionIndexSequence(\n            coordinate_system='PATIENT'\n        )\n        assert len(seq) == 2\n        assert seq[0].DimensionIndexPointer == 0x0062000B\n        assert seq[0].FunctionalGroupPointer == 0x0062000A\n        assert seq[1].DimensionIndexPointer == 0x00200032\n        assert seq[1].FunctionalGroupPointer == 0x00209113\n\n    def test_construction_2(self):\n        seq = DimensionIndexSequence(\n            coordinate_system='SLIDE'\n        )\n        assert len(seq) == 6\n        assert seq[0].DimensionIndexPointer == 0x0062000B\n        assert seq[0].FunctionalGroupPointer == 0x0062000A\n        assert seq[1].DimensionIndexPointer == 0x0040072A\n        assert seq[1].FunctionalGroupPointer == 0x0048021A\n        assert seq[2].DimensionIndexPointer == 0x0040073A\n        assert seq[2].FunctionalGroupPointer == 0x0048021A\n        assert seq[3].DimensionIndexPointer == 0x0040074A\n        assert seq[3].FunctionalGroupPointer == 0x0048021A\n        assert seq[4].DimensionIndexPointer == 0x0048021E\n        assert seq[4].FunctionalGroupPointer == 0x0048021A\n        assert seq[5].DimensionIndexPointer == 0x0048021F\n        assert seq[5].FunctionalGroupPointer == 0x0048021A\n\n\nclass TestSegmentation(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        file_path = Path(__file__)\n        data_dir = file_path.parent.parent.joinpath('data')\n        self._segmented_property_category = \\\n            codes.SCT.MorphologicallyAbnormalStructure\n        self._segmented_property_type = codes.SCT.Neoplasm\n        self._segment_descriptions = [\n            SegmentDescription(\n                segment_number=1,\n                segment_label='Segment #1',\n                segmented_property_category=self._segmented_property_category,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_type=SegmentAlgorithmTypeValues.AUTOMATIC.value,\n                algorithm_identification=AlgorithmIdentificationSequence(\n                    name='bla',\n                    family=codes.DCM.ArtificialIntelligence,\n                    version='v1'\n                )\n            ),\n        ]\n        self._additional_segment_descriptions = [\n            SegmentDescription(\n                segment_number=2,\n                segment_label='Segment #2',\n                segmented_property_category=self._segmented_property_category,\n                segmented_property_type=self._segmented_property_type,\n                algorithm_type=SegmentAlgorithmTypeValues.AUTOMATIC.value,\n                algorithm_identification=AlgorithmIdentificationSequence(\n                    name='foo',\n                    family=codes.DCM.ArtificialIntelligence,\n                    version='v1'\n                )\n            ),\n        ]\n        self._series_instance_uid = generate_uid()\n        self._series_number = 1\n        self._sop_instance_uid = generate_uid()\n        self._instance_number = 1\n        self._manufacturer = 'FavoriteManufacturer'\n        self._manufacturer_model_name = 'BestModel'\n        self._software_versions = 'v1.0'\n        self._device_serial_number = '1-2-3'\n        self._content_description = 'Test Segmentation'\n        self._content_creator_name = 'Robo^Doc'\n\n        # A single CT image\n        self._ct_image = dcmread(\n            str(data_dir.joinpath('test_files', 'ct_image.dcm'))\n        )\n        self._ct_pixel_array = np.zeros(\n            self._ct_image.pixel_array.shape,\n            dtype=np.bool\n        )\n        self._ct_pixel_array[1:5, 10:15] = True\n\n        # A microscopy image\n        self._sm_image = dcmread(\n            str(data_dir.joinpath('test_files', 'sm_image.dcm'))\n        )\n        # Override te existing ImageOrientationSlide to make the frame ordering\n        # simpler for the tests\n        self._sm_image.ImageOrientationSlide = [0.0, 1.0, 0.0, 1.0, 0.0, 0.0]\n        self._sm_pixel_array = np.zeros(\n            self._sm_image.pixel_array.shape[:3],  # remove colour channel axis\n            dtype=np.bool\n        )\n        self._sm_pixel_array[2:3, 1:5, 7:9] = True\n        self._sm_pixel_array[6:9, 2:8, 1:4] = True\n\n        # A series of single frame CT images\n        ct_series = [\n            dcmread(f) for f in get_testdata_files('77654033/CT2')\n        ]\n        # Ensure the frames are in the right spatial order\n        # (only 3rd dimension changes)\n        self._ct_series = sorted(\n            ct_series,\n            key=lambda x: x.ImagePositionPatient[2]\n        )\n        self._ct_series_mask_array = np.zeros(\n            (len(self._ct_series), ) + self._ct_series[0].pixel_array.shape,\n            dtype=np.bool\n        )\n        self._ct_series_mask_array[1:2, 1:5, 7:9] = True\n\n        # An enhanced (multiframe) CT image\n        self._ct_multiframe = dcmread(get_testdata_file('eCT_Supplemental.dcm'))\n        self._ct_multiframe_mask_array = np.zeros(\n            self._ct_multiframe.pixel_array.shape,\n            dtype=np.bool\n        )\n        self._ct_multiframe_mask_array[:, 100:200, 200:400] = True\n\n    @staticmethod\n    def remove_empty_frames(mask):\n        # Remove empty frames from an array\n        return np.stack([\n            frame for frame in mask if np.sum(frame) > 0\n        ])\n\n    @staticmethod\n    def get_array_after_writing(instance):\n        # Write DICOM object to buffer, read it again and reconstruct the mask\n        with BytesIO() as fp:\n            instance.save_as(fp)\n            fp.seek(0)\n            instance_reread = dcmread(fp)\n\n        return instance_reread.pixel_array\n\n    def test_construction(self):\n        instance = Segmentation(\n            [self._ct_image],\n            self._ct_pixel_array,\n            SegmentationTypeValues.FRACTIONAL.value,\n            self._segment_descriptions,\n            self._series_instance_uid,\n            self._series_number,\n            self._sop_instance_uid,\n            self._instance_number,\n            self._manufacturer,\n            self._manufacturer_model_name,\n            self._software_versions,\n            self._device_serial_number\n        )\n        assert instance.SeriesInstanceUID == self._series_instance_uid\n        assert instance.SeriesNumber == self._series_number\n        assert instance.SOPInstanceUID == self._sop_instance_uid\n        assert instance.InstanceNumber == self._instance_number\n        assert instance.Manufacturer == self._manufacturer\n        assert instance.ManufacturerModelName == self._manufacturer_model_name\n        assert instance.SoftwareVersions == self._software_versions\n        assert instance.DeviceSerialNumber == self._device_serial_number\n        assert instance.Modality == 'SEG'\n        assert instance.file_meta.TransferSyntaxUID == '1.2.840.10008.1.2'\n        assert instance.PatientID == self._ct_image.PatientID\n        assert instance.AccessionNumber == self._ct_image.AccessionNumber\n        assert instance.LossyImageCompression == '00'\n        assert instance.BitsAllocated == 8\n        assert instance.HighBit == 7\n        assert instance.BitsStored == 8\n        assert instance.ImageType == ['DERIVED', 'PRIMARY']\n        assert instance.SamplesPerPixel == 1\n        assert instance.PhotometricInterpretation == 'MONOCHROME2'\n        assert instance.PixelRepresentation == 0\n        assert instance.SegmentationType == 'FRACTIONAL'\n        assert instance.SegmentationFractionalType == 'PROBABILITY'\n        assert instance.MaximumFractionalValue == 255\n        assert instance.ContentDescription is None\n        assert instance.ContentCreatorName is None\n        with pytest.raises(AttributeError):\n            instance.LossyImageCompressionRatio\n            instance.LossyImageCompressionMethod\n        assert len(instance.SegmentSequence) == 1\n        assert len(instance.SourceImageSequence) == 1\n        assert len(instance.DimensionIndexSequence) == 2\n        ref_item = instance.SourceImageSequence[0]\n        assert ref_item.ReferencedSOPInstanceUID == \\\n            self._ct_image.SOPInstanceUID\n        assert instance.Rows == self._ct_image.pixel_array.shape[0]\n        assert instance.Columns == self._ct_image.pixel_array.shape[1]\n        assert len(instance.SharedFunctionalGroupsSequence) == 1\n        shared_item = instance.SharedFunctionalGroupsSequence[0]\n        assert len(shared_item.PixelMeasuresSequence) == 1\n        pm_item = shared_item.PixelMeasuresSequence[0]\n        assert pm_item.PixelSpacing == self._ct_image.PixelSpacing\n        assert pm_item.SliceThickness == self._ct_image.SliceThickness\n        assert len(shared_item.PlaneOrientationSequence) == 1\n        po_item = shared_item.PlaneOrientationSequence[0]\n        assert po_item.ImageOrientationPatient == \\\n            self._ct_image.ImageOrientationPatient\n        assert len(instance.DimensionOrganizationSequence) == 1\n        assert len(instance.DimensionIndexSequence) == 2\n        assert instance.NumberOfFrames == 1\n        assert len(instance.PerFrameFunctionalGroupsSequence) == 1\n        frame_item = instance.PerFrameFunctionalGroupsSequence[0]\n        assert len(frame_item.SegmentIdentificationSequence) == 1\n        assert len(frame_item.FrameContentSequence) == 1\n        assert len(frame_item.DerivationImageSequence) == 1\n        assert len(frame_item.PlanePositionSequence) == 1\n        frame_content_item = frame_item.FrameContentSequence[0]\n        assert len(frame_content_item.DimensionIndexValues) == 2\n        for derivation_image_item in frame_item.DerivationImageSequence:\n            assert len(derivation_image_item.SourceImageSequence) == 1\n        assert SegmentsOverlapValues[instance.SegmentsOverlap] == \\\n            SegmentsOverlapValues.NO\n        with pytest.raises(AttributeError):\n            frame_item.PlanePositionSlideSequence\n\n    def test_construction_2(self):\n        instance = Segmentation(\n            [self._sm_image],\n            self._sm_pixel_array,\n            SegmentationTypeValues.FRACTIONAL.value,\n            self._segment_descriptions,\n            self._series_instance_uid,\n            self._series_number,\n            self._sop_instance_uid,\n            self._instance_number,\n            self._manufacturer,\n            self._manufacturer_model_name,\n            self._software_versions,\n            self._device_serial_number\n        )\n        assert instance.PatientID == self._sm_image.PatientID\n        assert instance.AccessionNumber == self._sm_image.AccessionNumber\n        assert len(instance.SegmentSequence) == 1\n        assert len(instance.SourceImageSequence) == 1\n        ref_item = instance.SourceImageSequence[0]\n        assert ref_item.ReferencedSOPInstanceUID == \\\n            self._sm_image.SOPInstanceUID\n        assert instance.TotalPixelMatrixRows == \\\n            self._sm_image.TotalPixelMatrixRows\n        assert instance.TotalPixelMatrixColumns == \\\n            self._sm_image.TotalPixelMatrixColumns\n        assert instance.Rows == self._sm_image.pixel_array.shape[1]\n        assert instance.Columns == self._sm_image.pixel_array.shape[2]\n        assert len(instance.SharedFunctionalGroupsSequence) == 1\n        shared_item = instance.SharedFunctionalGroupsSequence[0]\n        assert len(shared_item.PixelMeasuresSequence) == 1\n        pm_item = shared_item.PixelMeasuresSequence[0]\n        src_shared_item = self._sm_image.SharedFunctionalGroupsSequence[0]\n        src_pm_item = src_shared_item.PixelMeasuresSequence[0]\n        assert pm_item.PixelSpacing == src_pm_item.PixelSpacing\n        assert pm_item.SliceThickness == src_pm_item.SliceThickness\n        assert len(shared_item.PlaneOrientationSequence) == 1\n        po_item = shared_item.PlaneOrientationSequence[0]\n        assert po_item.ImageOrientationSlide == \\\n            self._sm_image.ImageOrientationSlide\n        assert len(instance.DimensionOrganizationSequence) == 1\n        assert len(instance.DimensionIndexSequence) == 6\n\n        # Number of frames should be number of frames in the segmentation mask\n        # that are non-empty, due to sparsity\n        num_frames = (self._sm_pixel_array.sum(axis=(1, 2)) > 0).sum()\n        assert instance.NumberOfFrames == num_frames\n        assert len(instance.PerFrameFunctionalGroupsSequence) == num_frames\n        frame_item = instance.PerFrameFunctionalGroupsSequence[0]\n        assert len(frame_item.SegmentIdentificationSequence) == 1\n        assert len(frame_item.DerivationImageSequence) == 1\n        assert len(frame_item.FrameContentSequence) == 1\n        assert len(frame_item.PlanePositionSlideSequence) == 1\n        frame_content_item = frame_item.FrameContentSequence[0]\n        assert len(frame_content_item.DimensionIndexValues) == 6\n        for derivation_image_item in frame_item.DerivationImageSequence:\n            assert len(derivation_image_item.SourceImageSequence) == 1\n            source_image_item = derivation_image_item.SourceImageSequence[0]\n            assert hasattr(source_image_item, 'ReferencedFrameNumber')\n        assert SegmentsOverlapValues[instance.SegmentsOverlap] == \\\n            SegmentsOverlapValues.NO\n        with pytest.raises(AttributeError):\n            frame_item.PlanePositionSequence\n\n    def test_construction_3(self):\n        # Segmentation instance from a series of single-frame CT images\n        instance = Segmentation(\n            self._ct_series,\n            self._ct_series_mask_array,\n            SegmentationTypeValues.FRACTIONAL.value,\n            self._segment_descriptions,\n            self._series_instance_uid,\n            self._series_number,\n            self._sop_instance_uid,\n            self._instance_number,\n            self._manufacturer,\n            self._manufacturer_model_name,\n            self._software_versions,\n            self._device_serial_number\n        )\n        src_im = self._ct_series[1]\n        assert instance.PatientID == src_im.PatientID\n        assert instance.AccessionNumber == src_im.AccessionNumber\n        assert len(instance.SegmentSequence) == 1\n        assert len(instance.SourceImageSequence) == len(self._ct_series)\n        ref_item = instance.SourceImageSequence[1]\n        assert ref_item.ReferencedSOPInstanceUID == src_im.SOPInstanceUID\n        assert instance.Rows == src_im.pixel_array.shape[0]\n        assert instance.Columns == src_im.pixel_array.shape[1]\n        assert len(instance.SharedFunctionalGroupsSequence) == 1\n        shared_item = instance.SharedFunctionalGroupsSequence[0]\n        assert len(shared_item.PixelMeasuresSequence) == 1\n        pm_item = shared_item.PixelMeasuresSequence[0]\n        assert pm_item.PixelSpacing == src_im.PixelSpacing\n        assert pm_item.SliceThickness == src_im.SliceThickness\n        assert len(shared_item.PlaneOrientationSequence) == 1\n        po_item = shared_item.PlaneOrientationSequence[0]\n        assert po_item.ImageOrientationPatient == \\\n            src_im.ImageOrientationPatient\n        assert len(instance.DimensionOrganizationSequence) == 1\n        assert len(instance.DimensionIndexSequence) == 2\n        assert instance.NumberOfFrames == 1\n        assert len(instance.PerFrameFunctionalGroupsSequence) == 1\n        frame_item = instance.PerFrameFunctionalGroupsSequence[0]\n        assert len(frame_item.SegmentIdentificationSequence) == 1\n        assert len(frame_item.FrameContentSequence) == 1\n        assert len(frame_item.DerivationImageSequence) == 1\n        assert len(frame_item.PlanePositionSequence) == 1\n        frame_content_item = frame_item.FrameContentSequence[0]\n        assert len(frame_content_item.DimensionIndexValues) == 2\n        for derivation_image_item in frame_item.DerivationImageSequence:\n            assert len(derivation_image_item.SourceImageSequence) == 1\n            source_image_item = derivation_image_item.SourceImageSequence[0]\n            assert source_image_item.ReferencedSOPClassUID == src_im.SOPClassUID\n            assert source_image_item.ReferencedSOPInstanceUID == \\\n                src_im.SOPInstanceUID\n            assert hasattr(source_image_item, 'PurposeOfReferenceCodeSequence')\n        uid_to_plane_position = {}\n        for fm in instance.PerFrameFunctionalGroupsSequence:\n            src_img_item = fm.DerivationImageSequence[0].SourceImageSequence[0]\n            uid_to_plane_position[src_img_item.ReferencedSOPInstanceUID] = \\\n                fm.PlanePositionSequence[0].ImagePositionPatient\n        source_uid_to_plane_position = {\n            dcm.SOPInstanceUID: dcm.ImagePositionPatient\n            for dcm in self._ct_series\n            if dcm.SOPInstanceUID in uid_to_plane_position\n        }\n        assert source_uid_to_plane_position == uid_to_plane_position\n        assert SegmentsOverlapValues[instance.SegmentsOverlap] == \\\n            SegmentsOverlapValues.NO\n        with pytest.raises(AttributeError):\n            frame_item.PlanePositionSlideSequence\n\n    def test_construction_4(self):\n        # Segmentation instance from an enhanced (multi-frame) CT image\n        instance = Segmentation(\n            [self._ct_multiframe],\n            self._ct_multiframe_mask_array,\n            SegmentationTypeValues.FRACTIONAL.value,\n            self._segment_descriptions,\n            self._series_instance_uid,\n            self._series_number,\n            self._sop_instance_uid,\n            self._instance_number,\n            self._manufacturer,\n            self._manufacturer_model_name,\n            self._software_versions,\n            self._device_serial_number\n        )\n        assert instance.PatientID == self._ct_multiframe.PatientID\n        assert instance.AccessionNumber == self._ct_multiframe.AccessionNumber\n        assert len(instance.SegmentSequence) == 1\n        assert len(instance.SourceImageSequence) == 1\n        ref_item = instance.SourceImageSequence[0]\n        assert ref_item.ReferencedSOPInstanceUID == \\\n            self._ct_multiframe.SOPInstanceUID\n        assert instance.NumberOfFrames == \\\n            self._ct_multiframe.pixel_array.shape[0]\n        assert instance.Rows == self._ct_multiframe.pixel_array.shape[1]\n        assert instance.Columns == self._ct_multiframe.pixel_array.shape[2]\n        assert len(instance.SharedFunctionalGroupsSequence) == 1\n        shared_item = instance.SharedFunctionalGroupsSequence[0]\n        src_shared_item = self._ct_multiframe.SharedFunctionalGroupsSequence[0]\n        assert len(shared_item.PixelMeasuresSequence) == 1\n        pm_item = shared_item.PixelMeasuresSequence[0]\n        assert pm_item.PixelSpacing == \\\n            src_shared_item.PixelMeasuresSequence[0].PixelSpacing\n        assert pm_item.SliceThickness == \\\n            src_shared_item.PixelMeasuresSequence[0].SliceThickness\n        assert len(shared_item.PlaneOrientationSequence) == 1\n        po_item = shared_item.PlaneOrientationSequence[0]\n        assert po_item.ImageOrientationPatient == \\\n            src_shared_item.PlaneOrientationSequence[0].ImageOrientationPatient\n        assert len(instance.DimensionOrganizationSequence) == 1\n        assert len(instance.DimensionIndexSequence) == 2\n        assert len(instance.PerFrameFunctionalGroupsSequence) == \\\n            self._ct_multiframe.NumberOfFrames\n        frame_item = instance.PerFrameFunctionalGroupsSequence[0]\n        assert len(frame_item.SegmentIdentificationSequence) == 1\n        assert len(frame_item.FrameContentSequence) == 1\n        assert len(frame_item.DerivationImageSequence) == 1\n        assert len(frame_item.PlanePositionSequence) == 1\n        frame_content_item = frame_item.FrameContentSequence[0]\n        assert len(frame_content_item.DimensionIndexValues) == 2\n        for derivation_image_item in frame_item.DerivationImageSequence:\n            assert len(derivation_image_item.SourceImageSequence) == 1\n            source_image_item = derivation_image_item.SourceImageSequence[0]\n            assert source_image_item.ReferencedSOPClassUID == \\\n                self._ct_multiframe.SOPClassUID\n            assert source_image_item.ReferencedSOPInstanceUID == \\\n                self._ct_multiframe.SOPInstanceUID\n            assert hasattr(source_image_item, 'PurposeOfReferenceCodeSequence')\n        for i, (src_fm, seg_fm) in enumerate(\n                zip(\n                    self._ct_multiframe.PerFrameFunctionalGroupsSequence,\n                    instance.PerFrameFunctionalGroupsSequence\n                )\n            ):\n            assert src_fm.PlanePositionSequence[0].ImagePositionPatient == \\\n                seg_fm.PlanePositionSequence[0].ImagePositionPatient\n            derivation_image_item = seg_fm.DerivationImageSequence[0]\n            source_image_item = derivation_image_item.SourceImageSequence[0]\n            assert source_image_item.ReferencedFrameNumber == i + 1\n            assert source_image_item.ReferencedSOPInstanceUID == \\\n                self._ct_multiframe.SOPInstanceUID\n        assert SegmentsOverlapValues[instance.SegmentsOverlap] == \\\n            SegmentsOverlapValues.NO\n        with pytest.raises(AttributeError):\n            frame_item.PlanePositionSlideSequence\n\n    def test_pixel_types(self):\n        # A series of tests on different types of image\n        tests = [\n            ([self._ct_image], self._ct_pixel_array),\n            ([self._sm_image], self._sm_pixel_array),\n            (self._ct_series, self._ct_series_mask_array),\n            ([self._ct_multiframe], self._ct_multiframe_mask_array),\n        ]\n\n        for source, mask in tests:\n\n            # Create a mask for an additional segment as the complement of the\n            # original mask\n            additional_mask = (1 - mask)\n\n            # Find the expected encodings for the masks\n            if mask.ndim > 2:\n                expected_encoding = self.remove_empty_frames(mask)\n                expected_additional_encoding = self.remove_empty_frames(\n                    additional_mask\n                )\n                two_segment_expected_encoding = np.concatenate(\n                    [expected_encoding, expected_additional_encoding],\n                    axis=0\n                )\n                expected_encoding = expected_encoding.squeeze()\n                expected_additional_encoding = \\\n                    expected_additional_encoding.squeeze()\n            else:\n                expected_encoding = mask\n                two_segment_expected_encoding = np.stack(\n                    [mask, additional_mask]\n                )\n\n            # Test instance creation for different pixel types\n            for pix_type in [np.bool, np.uint8, np.uint16, np.float]:\n                instance = Segmentation(\n                    source,\n                    mask.astype(pix_type),\n                    SegmentationTypeValues.FRACTIONAL.value,\n                    self._segment_descriptions,\n                    self._series_instance_uid,\n                    self._series_number,\n                    self._sop_instance_uid,\n                    self._instance_number,\n                    self._manufacturer,\n                    self._manufacturer_model_name,\n                    self._software_versions,\n                    self._device_serial_number,\n                    max_fractional_value=1\n                )\n\n                # Ensure the recovered pixel array matches what is expected\n                assert np.array_equal(\n                    self.get_array_after_writing(instance),\n                    expected_encoding\n                )\n\n                # Add another segment\n                instance.add_segments(\n                    additional_mask.astype(pix_type),\n                    self._additional_segment_descriptions\n                )\n                assert SegmentsOverlapValues[instance.SegmentsOverlap] == \\\n                    SegmentsOverlapValues.UNDEFINED\n\n                # Ensure the recovered pixel array matches what is expected\n                assert np.array_equal(self.get_array_after_writing(instance),\n                                      two_segment_expected_encoding)\n\n        for source, mask in tests:\n            additional_mask = (1 - mask)\n            if mask.ndim > 2:\n                expected_encoding = self.remove_empty_frames(mask)\n                expected_additional_encoding = \\\n                    self.remove_empty_frames(additional_mask)\n                two_segment_expected_encoding = np.concatenate(\n                    [expected_encoding, expected_additional_encoding],\n                    axis=0\n                )\n                expected_encoding = expected_encoding.squeeze()\n                expected_additional_encoding = \\\n                    expected_additional_encoding.squeeze()\n            else:\n                expected_encoding = (mask > 0).astype(mask.dtype)\n                expected_additional_encoding = (additional_mask > 0).astype(\n                    mask.dtype\n                )\n                two_segment_expected_encoding = np.stack(\n                    [expected_encoding, expected_additional_encoding]\n                )\n            for pix_type in [np.bool, np.uint8, np.uint16, np.float]:\n                instance = Segmentation(\n                    source,\n                    mask.astype(pix_type),\n                    SegmentationTypeValues.BINARY.value,\n                    self._segment_descriptions,\n                    self._series_instance_uid,\n                    self._series_number,\n                    self._sop_instance_uid,\n                    self._instance_number,\n                    self._manufacturer,\n                    self._manufacturer_model_name,\n                    self._software_versions,\n                    self._device_serial_number,\n                    max_fractional_value=1\n                )\n\n                # Ensure the recovered pixel array matches what is expected\n                assert np.array_equal(\n                    self.get_array_after_writing(instance),\n                    expected_encoding\n                )\n\n                # Add another segment\n                instance.add_segments(\n                    additional_mask.astype(pix_type),\n                    self._additional_segment_descriptions\n                )\n                assert SegmentsOverlapValues(instance.SegmentsOverlap) == \\\n                    SegmentsOverlapValues.UNDEFINED\n\n                # Ensure the recovered pixel array matches what is expected\n                assert np.array_equal(\n                    self.get_array_after_writing(instance),\n                    two_segment_expected_encoding\n                )\n\n    def test_odd_number_pixels(self):\n        # Test that an image with an odd number of pixels per frame is encoded\n        # properly Including when additional segments are subsequently added\n\n        # Create an instance with an odd number of pixels in each frame\n        # Based on the single frame CT image\n        odd_instance = self._ct_image\n        r = 9\n        c = 9\n        odd_pixels = np.random.randint(\n            256,\n            size=(r, c),\n            dtype=np.uint16\n        )\n\n        odd_instance.PixelData = odd_pixels.flatten().tobytes()\n        odd_instance.Rows = r\n        odd_instance.Columns = c\n\n        odd_mask = np.random.randint(\n            2,\n            size=odd_pixels.shape,\n            dtype=np.bool\n        )\n        addtional_odd_mask = np.random.randint(\n            2,\n            size=odd_pixels.shape,\n            dtype=np.bool\n        )\n\n        instance = Segmentation(\n            [odd_instance],\n            odd_mask,\n            SegmentationTypeValues.BINARY.value,\n            segment_descriptions=self._segment_descriptions,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            manufacturer_model_name=self._manufacturer_model_name,\n            software_versions=self._software_versions,\n            device_serial_number=self._device_serial_number\n        )\n\n        assert np.array_equal(self.get_array_after_writing(instance), odd_mask)\n\n        instance.add_segments(\n            addtional_odd_mask,\n            self._additional_segment_descriptions\n        )\n\n        expected_two_segment_mask = np.stack(\n            [odd_mask, addtional_odd_mask],\n            axis=0\n        )\n        assert np.array_equal(\n            self.get_array_after_writing(instance),\n            expected_two_segment_mask\n        )\n\n    def test_multi_segments(self):\n        # Test that the multi-segment encoding is behaving as expected\n\n        # Create an example mask with two segments\n        multi_segment_mask = np.zeros(\n            self._ct_image.pixel_array.shape,\n            dtype=np.uint8\n        )\n        multi_segment_mask[1:5, 10:15] = 1\n        multi_segment_mask[5:7, 1:5] = 2\n\n        # Create another example mask with two segments,\n        # where one is empty\n        multi_segment_mask_empty = np.zeros(\n            self._ct_image.pixel_array.shape,\n            dtype=np.uint8\n        )\n        multi_segment_mask_empty[5:7, 1:5] = 2\n\n        for mask in [multi_segment_mask, multi_segment_mask_empty]:\n            # The expected encoding splits into two channels stacked down axis 0\n            if len(np.unique(mask)) > 2:\n                expected_encoding = np.stack([\n                    mask == i for i in np.arange(1, len(np.unique(mask)))\n                ])\n            else:\n                expected_encoding = (mask > 0).astype(mask.dtype)\n\n            all_segment_descriptions = (\n                self._segment_descriptions +\n                self._additional_segment_descriptions\n            )\n            instance = Segmentation(\n                [self._ct_image],\n                mask,\n                SegmentationTypeValues.BINARY.value,\n                all_segment_descriptions,\n                self._series_instance_uid,\n                self._series_number,\n                self._sop_instance_uid,\n                self._instance_number,\n                self._manufacturer,\n                self._manufacturer_model_name,\n                self._software_versions,\n                self._device_serial_number,\n                max_fractional_value=1\n            )\n\n            # Ensure the recovered pixel array matches what is expected\n            assert np.array_equal(\n                self.get_array_after_writing(instance),\n                expected_encoding\n            )\n\n    def test_construction_wrong_segment_order(self):\n        with pytest.raises(ValueError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=(\n                    self._additional_segment_descriptions +\n                    self._segment_descriptions\n                ),\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_duplicate_segment_number(self):\n        with pytest.raises(ValueError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=(\n                    self._segment_descriptions +\n                    self._segment_descriptions\n                ),\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_non_described_segment(self):\n        with pytest.raises(ValueError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array * 3,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=(\n                    self._segment_descriptions +\n                    self._segment_descriptions\n                ),\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_2(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_3(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_4(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_5(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_6(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_7(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_8(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_9(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                software_versions=self._software_versions,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_10(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                device_serial_number=self._device_serial_number\n            )\n\n    def test_construction_missing_required_attribute_11(self):\n        with pytest.raises(TypeError):\n            Segmentation(\n                source_images=[self._ct_image],\n                pixel_array=self._ct_pixel_array,\n                segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n                segment_descriptions=self._segment_descriptions,\n                series_instance_uid=self._series_instance_uid,\n                series_number=self._series_number,\n                sop_instance_uid=self._sop_instance_uid,\n                instance_number=self._instance_number,\n                manufacturer=self._manufacturer,\n                manufacturer_model_name=self._manufacturer_model_name,\n                software_versions=self._software_versions\n            )\n\n    def test_construction_optional_arguments(self):\n        fractional_type = 'OCCUPANCY'\n        max_fractional_value = 100\n        content_description = 'bla bla bla'\n        content_creator_name = 'Me Myself'\n        series_description = 'My First Segmentation'\n        instance = Segmentation(\n            source_images=[self._ct_image],\n            pixel_array=self._ct_pixel_array,\n            segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n            segment_descriptions=self._segment_descriptions,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            manufacturer_model_name=self._manufacturer_model_name,\n            software_versions=self._software_versions,\n            device_serial_number=self._device_serial_number,\n            fractional_type=fractional_type,\n            max_fractional_value=max_fractional_value,\n            content_description=content_description,\n            content_creator_name=content_creator_name,\n            series_description=series_description,\n        )\n        assert instance.SegmentationFractionalType == fractional_type\n        assert instance.MaximumFractionalValue == max_fractional_value\n        assert instance.ContentDescription == content_description\n        assert instance.ContentCreatorName == content_creator_name\n        assert instance.SeriesDescription == series_description\n\n    def test_construction_optional_arguments_2(self):\n        pixel_spacing = (0.5, 0.5)\n        slice_thickness = 0.3\n        pixel_measures = PixelMeasuresSequence(\n            pixel_spacing=pixel_spacing,\n            slice_thickness=slice_thickness,\n            spacing_between_slices=0.7\n        )\n        image_orientation = (-1.0, 0.0, 0.0, 0.0, -1.0, 0.0)\n        plane_orientation = PlaneOrientationSequence(\n            coordinate_system=CoordinateSystemNames.PATIENT,\n            image_orientation=image_orientation\n        )\n        plane_positions = [\n            PlanePositionSequence(\n                coordinate_system=CoordinateSystemNames.PATIENT,\n                image_position=(0.0, 0.0, 0.0)\n            ),\n        ]\n        instance = Segmentation(\n            source_images=[self._ct_image],\n            pixel_array=self._ct_pixel_array,\n            segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n            segment_descriptions=self._segment_descriptions,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            manufacturer_model_name=self._manufacturer_model_name,\n            software_versions=self._software_versions,\n            device_serial_number=self._device_serial_number,\n            pixel_measures=pixel_measures,\n            plane_orientation=plane_orientation,\n            plane_positions=plane_positions\n        )\n        shared_item = instance.SharedFunctionalGroupsSequence[0]\n        assert len(shared_item.PixelMeasuresSequence) == 1\n        pm_item = shared_item.PixelMeasuresSequence[0]\n        assert pm_item.PixelSpacing == list(pixel_spacing)\n        assert pm_item.SliceThickness == slice_thickness\n        assert len(shared_item.PlaneOrientationSequence) == 1\n        po_item = shared_item.PlaneOrientationSequence[0]\n        assert po_item.ImageOrientationPatient == list(image_orientation)\n\n    def test_construction_optional_arguments_3(self):\n        pixel_spacing = (0.5, 0.5)\n        slice_thickness = 0.3\n        pixel_measures = PixelMeasuresSequence(\n            pixel_spacing=pixel_spacing,\n            slice_thickness=slice_thickness\n        )\n        image_orientation = (-1.0, 0.0, 0.0, 0.0, -1.0, 0.0)\n        plane_orientation = PlaneOrientationSequence(\n            coordinate_system=CoordinateSystemNames.SLIDE,\n            image_orientation=image_orientation\n        )\n        plane_positions = [\n            PlanePositionSequence(\n                coordinate_system=CoordinateSystemNames.SLIDE,\n                image_position=(i * 1.0, i * 1.0, 1.0),\n                pixel_matrix_position=(i * 1, i * 1)\n            )\n            for i in range(self._sm_image.pixel_array.shape[0])\n        ]\n        instance = Segmentation(\n            source_images=[self._sm_image],\n            pixel_array=self._sm_pixel_array,\n            segmentation_type=SegmentationTypeValues.FRACTIONAL.value,\n            segment_descriptions=self._segment_descriptions,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            manufacturer=self._manufacturer,\n            manufacturer_model_name=self._manufacturer_model_name,\n            software_versions=self._software_versions,\n            device_serial_number=self._device_serial_number,\n            pixel_measures=pixel_measures,\n            plane_orientation=plane_orientation,\n            plane_positions=plane_positions\n        )\n        shared_item = instance.SharedFunctionalGroupsSequence[0]\n        assert len(shared_item.PixelMeasuresSequence) == 1\n        pm_item = shared_item.PixelMeasuresSequence[0]\n        assert pm_item.PixelSpacing == list(pixel_spacing)\n        assert pm_item.SliceThickness == slice_thickness\n        assert len(shared_item.PlaneOrientationSequence) == 1\n        po_item = shared_item.PlaneOrientationSequence[0]\n        assert po_item.ImageOrientationSlide == list(image_orientation)\n\n\nclass TestSegUtilities(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        file_path = Path(__file__)\n        data_dir = file_path.parent.parent.joinpath('data')\n        self._ct_image = dcmread(\n            str(data_dir.joinpath('test_files', 'ct_image.dcm'))\n        )\n        self._sm_image = dcmread(\n            str(data_dir.joinpath('test_files', 'sm_image.dcm'))\n        )\n\n    def test_iter_segments_ct_single_frame_2_segments(self):\n        image_dataset = self._ct_image\n        mask = np.zeros(\n            self._ct_image.pixel_array.shape,\n            dtype=np.uint8\n        )\n        mask[1:5, 10:15] = 1\n        mask[5:7, 1:5] = 2\n        algorithm_identification = AlgorithmIdentificationSequence(\n            name='test',\n            version='v1.0',\n            family=codes.cid7162.ArtificialIntelligence\n        )\n        segment_descriptions = [\n            SegmentDescription(\n                segment_number=1,\n                segment_label='tumor tissue',\n                segmented_property_category=codes.cid7150.Tissue,\n                segmented_property_type=codes.SCT.Neoplasm,\n                algorithm_type=SegmentAlgorithmTypeValues.AUTOMATIC,\n                algorithm_identification=algorithm_identification,\n                tracking_uid=generate_uid(),\n                tracking_id='first segment'\n            ),\n            SegmentDescription(\n                segment_number=2,\n                segment_label='connective tissue',\n                segmented_property_category=codes.cid7150.Tissue,\n                segmented_property_type=codes.cid7166.ConnectiveTissue,\n                algorithm_type=SegmentAlgorithmTypeValues.AUTOMATIC,\n                algorithm_identification=algorithm_identification,\n                tracking_uid=generate_uid(),\n                tracking_id='second segment'\n            ),\n        ]\n\n        seg_dataset = Segmentation(\n            source_images=[image_dataset],\n            pixel_array=mask,\n            segmentation_type=SegmentationTypeValues.BINARY,\n            segment_descriptions=segment_descriptions,\n            series_instance_uid=generate_uid(),\n            series_number=2,\n            sop_instance_uid=generate_uid(),\n            instance_number=1,\n            manufacturer='Manufacturer',\n            manufacturer_model_name='Manufacturer Model',\n            software_versions='v1',\n            device_serial_number='Device XYZ'\n        )\n\n        generator = iter_segments(seg_dataset)\n        items = list(generator)\n        assert len(items) == 2\n        item_segment_1 = items[0]\n        assert np.squeeze(item_segment_1[0]).shape == mask.shape\n        seg_id_item_1 = item_segment_1[1][0].SegmentIdentificationSequence[0]\n        assert seg_id_item_1.ReferencedSegmentNumber == 1\n        assert item_segment_1[2].SegmentNumber == 1\n        item_segment_2 = items[1]\n        assert np.squeeze(item_segment_2[0]).shape == mask.shape\n        seg_id_item_2 = item_segment_2[1][0].SegmentIdentificationSequence[0]\n        assert seg_id_item_2.ReferencedSegmentNumber == 2\n        assert item_segment_2[2].SegmentNumber == 2\n"""
tests/test_sr.py,18,"b'import unittest\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport numpy as np\nimport pytest\n\nfrom pydicom.dataset import Dataset\nfrom pydicom.filereader import dcmread\nfrom pydicom.sr.codedict import codes\nfrom pydicom.sr.coding import Code\nfrom pydicom.uid import generate_uid, UID\nfrom pydicom.valuerep import DA, DS, DT, TM\n\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.content import (\n    FindingSite,\n    ImageRegion,\n    ImageRegion3D,\n    VolumeSurface,\n    SourceImageForRegion,\n    SourceImageForSegmentation,\n    ReferencedSegment,\n    ReferencedSegmentationFrame,\n    SourceSeriesForSegmentation\n)\nfrom highdicom.sr.enum import (\n    GraphicTypeValues,\n    GraphicTypeValues3D,\n    RelationshipTypeValues,\n    ValueTypeValues,\n)\nfrom highdicom.sr.utils import find_content_items\nfrom highdicom.sr.value_types import (\n    CodeContentItem,\n    ContainerContentItem,\n    CompositeContentItem,\n    DateContentItem,\n    DateTimeContentItem,\n    ImageContentItem,\n    NumContentItem,\n    ScoordContentItem,\n    Scoord3DContentItem,\n    TextContentItem,\n    TimeContentItem,\n    UIDRefContentItem,\n)\nfrom highdicom.sr.sop import (\n    ComprehensiveSR,\n    Comprehensive3DSR,\n    EnhancedSR,\n)\nfrom highdicom.sr.templates import (\n    DEFAULT_LANGUAGE,\n    DeviceObserverIdentifyingAttributes,\n    Measurement,\n    MeasurementProperties,\n    MeasurementReport,\n    ObservationContext,\n    ObserverContext,\n    PersonObserverIdentifyingAttributes,\n    PlanarROIMeasurementsAndQualitativeEvaluations,\n    SubjectContext,\n    SubjectContextSpecimen,\n    TrackingIdentifier,\n    VolumetricROIMeasurementsAndQualitativeEvaluations,\n)\n\n\nclass TestCodedConcept(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._value = \'373098007\'\n        self._meaning = \'Mean Value of population\'\n        self._scheme_designator = \'SCT\'\n\n    def test_construction_kwargs(self):\n        c = CodedConcept(\n            value=self._value,\n            scheme_designator=self._scheme_designator,\n            meaning=self._meaning\n        )\n        assert c.value == self._value\n        assert c.scheme_designator == self._scheme_designator\n        assert c.meaning == self._meaning\n        assert c.scheme_version is None\n        assert c.CodeValue == self._value\n        assert c.CodingSchemeDesignator == self._scheme_designator\n        assert c.CodeMeaning == self._meaning\n        with pytest.raises(AttributeError):\n            assert c.CodingSchemeVersion\n\n    def test_construction_kwargs_optional(self):\n        version = \'v1.0\'\n        c = CodedConcept(\n            value=self._value,\n            scheme_designator=self._scheme_designator,\n            meaning=self._meaning,\n            scheme_version=version\n        )\n        assert c.value == self._value\n        assert c.scheme_designator == self._scheme_designator\n        assert c.meaning == self._meaning\n        assert c.scheme_version == version\n        assert c.CodeValue == self._value\n        assert c.CodingSchemeDesignator == self._scheme_designator\n        assert c.CodeMeaning == self._meaning\n        assert c.CodingSchemeVersion == version\n\n    def test_construction_args(self):\n        c = CodedConcept(self._value, self._scheme_designator, self._meaning)\n        assert c.value == self._value\n        assert c.scheme_designator == self._scheme_designator\n        assert c.meaning == self._meaning\n        assert c.scheme_version is None\n        assert c.CodeValue == self._value\n        assert c.CodingSchemeDesignator == self._scheme_designator\n        assert c.CodeMeaning == self._meaning\n        with pytest.raises(AttributeError):\n            assert c.CodingSchemeVersion\n\n    def test_construction_args_optional(self):\n        version = \'v1.0\'\n        c = CodedConcept(\n            self._value, self._scheme_designator, self._meaning, version\n        )\n        assert c.value == self._value\n        assert c.scheme_designator == self._scheme_designator\n        assert c.meaning == self._meaning\n        assert c.scheme_version == version\n        assert c.CodeValue == self._value\n        assert c.CodingSchemeDesignator == self._scheme_designator\n        assert c.CodeMeaning == self._meaning\n        assert c.CodingSchemeVersion == version\n\n    def test_equal(self):\n        c1 = CodedConcept(self._value, self._scheme_designator, self._meaning)\n        c2 = CodedConcept(self._value, self._scheme_designator, self._meaning)\n        assert c1 == c2\n\n    def test_not_equal(self):\n        c1 = CodedConcept(self._value, self._scheme_designator, self._meaning)\n        c2 = CodedConcept(\'373099004\', \'SCT\', \'Median Value of population\')\n        assert c1 != c2\n\n    def test_equal_ignore_meaning(self):\n        c1 = CodedConcept(self._value, self._scheme_designator, self._meaning)\n        c2 = CodedConcept(self._value, self._scheme_designator, \'bla bla bla\')\n        assert c1 == c2\n\n    def test_equal_equivalent_coding(self):\n        c1 = CodedConcept(self._value, self._scheme_designator, self._meaning)\n        c2 = CodedConcept(\'R-00317\', \'SRT\', self._meaning)\n        assert c1 == c2\n\n\nclass TestContentItem(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n\n    def test_code_item_construction(self):\n        name = codes.SCT.FindingSite\n        value = codes.SCT.Abdomen\n        i = CodeContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'CODE\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.ConceptCodeSequence[0] == value\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_text_item_construction(self):\n        name = codes.DCM.TrackingIdentifier\n        value = \'1234\'\n        i = TextContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'TEXT\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.TextValue == value\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_time_item_construction_from_string(self):\n        name = codes.DCM.StudyTime\n        value = \'15:30\'\n        i = TimeContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'TIME\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.Time == TM(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_time_item_construction_from_string_malformatted(self):\n        name = codes.DCM.StudyTime\n        value = \'abc\'\n        with pytest.raises(ValueError):\n            TimeContentItem(\n                name=name,\n                value=value\n            )\n\n    def test_time_item_construction_from_time(self):\n        name = codes.DCM.StudyTime\n        value = datetime.now().time()\n        i = TimeContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'TIME\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.Time == TM(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_date_item_construction_from_string(self):\n        name = codes.DCM.StudyDate\n        value = \'20190821\'\n        i = DateContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'DATE\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.Date == DA(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_date_item_construction_from_string_malformatted(self):\n        name = codes.DCM.StudyDate\n        value = \'abcd\'\n        with pytest.raises(ValueError):\n            DateContentItem(\n                name=name,\n                value=value\n            )\n\n    def test_date_item_construction_from_time(self):\n        name = codes.DCM.StudyTime\n        value = datetime.now().date()\n        i = DateContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'DATE\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.Date == DA(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_datetime_item_construction_from_string(self):\n        name = codes.DCM.ImagingStartDatetime\n        value = \'20190821-15:30\'\n        i = DateTimeContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'DATETIME\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.DateTime == DT(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_datetime_item_construction_from_string_malformatted(self):\n        name = codes.DCM.ImagingStartDatetime\n        value = \'abcd\'\n        with pytest.raises(ValueError):\n            DateTimeContentItem(\n                name=name,\n                value=value\n            )\n\n    def test_datetime_item_construction_from_datetime(self):\n        name = codes.DCM.ImagingStartDatetime\n        value = datetime.now()\n        i = DateTimeContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'DATETIME\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.DateTime == DT(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_uidref_item_construction_from_string(self):\n        name = codes.DCM.SeriesInstanceUID\n        value = \'1.2.3.4.5.6\'\n        i = UIDRefContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'UIDREF\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.UID == UID(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_uidref_item_construction_wrong_value_type(self):\n        name = codes.DCM.SeriesInstanceUID\n        value = 123456\n        with pytest.raises(TypeError):\n            UIDRefContentItem(\n                name=name,\n                value=value\n            )\n\n    def test_uidref_item_construction_from_uid(self):\n        name = codes.DCM.SeriesInstanceUID\n        value = UID(\'1.2.3.4.5.6\')\n        i = UIDRefContentItem(\n            name=name,\n            value=value\n        )\n        assert i.ValueType == \'UIDREF\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.UID == UID(value)\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n\n    def test_num_item_construction_from_integer(self):\n        name = codes.SCT.Area\n        value = 100\n        unit = Code(\'um2\', \'UCUM\', \'Square Micrometer\')\n        i = NumContentItem(\n            name=name,\n            value=value,\n            unit=unit\n        )\n        assert i.ValueType == \'NUM\'\n        assert i.ConceptNameCodeSequence[0] == name\n        value_item = i.MeasuredValueSequence[0]\n        unit_code_item = value_item.MeasurementUnitsCodeSequence[0]\n        assert value_item.NumericValue == value\n        with pytest.raises(AttributeError):\n            assert value_item.FloatingPointValue\n        assert unit_code_item.CodeValue == unit.value\n        assert unit_code_item.CodingSchemeDesignator == unit.scheme_designator\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n        with pytest.raises(AttributeError):\n            assert i.NumericValueQualifierCodeSequence\n\n    def test_num_item_construction_from_float(self):\n        name = codes.SCT.Area\n        value = 100.0\n        unit = Code(\'um2\', \'UCUM\', \'Square Micrometer\')\n        i = NumContentItem(\n            name=name,\n            value=value,\n            unit=unit\n        )\n        assert i.ValueType == \'NUM\'\n        assert i.ConceptNameCodeSequence[0] == name\n        value_item = i.MeasuredValueSequence[0]\n        unit_code_item = value_item.MeasurementUnitsCodeSequence[0]\n        assert value_item.NumericValue == value\n        assert value_item.FloatingPointValue == value\n        assert unit_code_item.CodeValue == unit.value\n        assert unit_code_item.CodingSchemeDesignator == unit.scheme_designator\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n        with pytest.raises(AttributeError):\n            assert i.NumericValueQualifierCodeSequence\n\n    def test_num_item_construction_from_qualifier_code(self):\n        name = codes.SCT.Area\n        qualifier = Code(\'114000\', \'SCT\', \'Not a number\')\n        i = NumContentItem(\n            name=name,\n            qualifier=qualifier\n        )\n        assert i.ValueType == \'NUM\'\n        assert i.ConceptNameCodeSequence[0] == name\n        with pytest.raises(AttributeError):\n            assert i.MeasuredValueSequence\n        with pytest.raises(AttributeError):\n            assert i.RelationshipType\n        qualifier_code_item = i.NumericValueQualifierCodeSequence[0]\n        assert qualifier_code_item.CodeValue == qualifier.value\n\n    def test_container_item_construction(self):\n        name = codes.DCM.ImagingMeasurementReport\n        tid = \'1500\'\n        i = ContainerContentItem(\n            name=name,\n            template_id=tid\n        )\n        assert i.ValueType == \'CONTAINER\'\n        assert i.ConceptNameCodeSequence[0] == name\n        content_template_item = i.ContentTemplateSequence[0]\n        assert content_template_item.TemplateIdentifier == tid\n        assert content_template_item.MappingResource == \'DCMR\'\n        assert i.ContinuityOfContent == \'CONTINUOUS\'\n\n    def test_composite_item_construction(self):\n        name = codes.DCM.RealWorldValueMapUsedForMeasurement\n        sop_class_uid = \'1.2.840.10008.5.1.4.1.1.2\'\n        sop_instance_uid = \'1.2.3.4\'\n        i = CompositeContentItem(\n            name=name,\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n        )\n        assert i.ValueType == \'COMPOSITE\'\n        assert i.ConceptNameCodeSequence[0] == name\n        ref_sop_item = i.ReferencedSOPSequence[0]\n        assert ref_sop_item.ReferencedSOPClassUID == sop_class_uid\n        assert ref_sop_item.ReferencedSOPInstanceUID == sop_instance_uid\n\n    def test_image_item_construction(self):\n        name = codes.DCM.SourceImageForSegmentation\n        sop_class_uid = \'1.2.840.10008.5.1.4.1.1.2\'\n        sop_instance_uid = \'1.2.3.4\'\n        i = ImageContentItem(\n            name=name,\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n        )\n        assert i.ValueType == \'IMAGE\'\n        assert i.ConceptNameCodeSequence[0] == name\n        ref_sop_item = i.ReferencedSOPSequence[0]\n        assert ref_sop_item.ReferencedSOPClassUID == sop_class_uid\n        assert ref_sop_item.ReferencedSOPInstanceUID == sop_instance_uid\n        with pytest.raises(AttributeError):\n            ref_sop_item.ReferencedFrameNumber\n        with pytest.raises(AttributeError):\n            ref_sop_item.ReferencedSegmentNumber\n\n    def test_image_item_construction_with_multiple_frame_numbers(self):\n        name = codes.DCM.SourceImageForSegmentation\n        sop_class_uid = \'1.2.840.10008.5.1.4.1.1.2.2\'\n        sop_instance_uid = \'1.2.3.4\'\n        frame_numbers = [1, 2, 3]\n        i = ImageContentItem(\n            name=name,\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n            referenced_frame_numbers=frame_numbers\n        )\n        ref_sop_item = i.ReferencedSOPSequence[0]\n        assert ref_sop_item.ReferencedSOPClassUID == sop_class_uid\n        assert ref_sop_item.ReferencedSOPInstanceUID == sop_instance_uid\n        assert ref_sop_item.ReferencedFrameNumber == frame_numbers\n        with pytest.raises(AttributeError):\n            ref_sop_item.ReferencedSegmentNumber\n\n    def test_image_item_construction_with_single_frame_number(self):\n        name = codes.DCM.SourceImageForSegmentation\n        sop_class_uid = \'1.2.840.10008.5.1.4.1.1.2.2\'\n        sop_instance_uid = \'1.2.3.4\'\n        frame_number = 1\n        i = ImageContentItem(\n            name=name,\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n            referenced_frame_numbers=frame_number\n        )\n        ref_sop_item = i.ReferencedSOPSequence[0]\n        assert ref_sop_item.ReferencedSOPClassUID == sop_class_uid\n        assert ref_sop_item.ReferencedSOPInstanceUID == sop_instance_uid\n        assert ref_sop_item.ReferencedFrameNumber == frame_number\n        with pytest.raises(AttributeError):\n            ref_sop_item.ReferencedSegmentNumber\n\n    def test_image_item_construction_single_segment_number(self):\n        name = codes.DCM.SourceImageForSegmentation\n        sop_class_uid = \'1.2.840.10008.5.1.4.1.1.66.4\'\n        sop_instance_uid = \'1.2.3.4\'\n        segment_number = 1\n        i = ImageContentItem(\n            name=name,\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n            referenced_segment_numbers=segment_number\n        )\n        ref_sop_item = i.ReferencedSOPSequence[0]\n        assert ref_sop_item.ReferencedSOPClassUID == sop_class_uid\n        assert ref_sop_item.ReferencedSOPInstanceUID == sop_instance_uid\n        assert ref_sop_item.ReferencedSegmentNumber == segment_number\n        with pytest.raises(AttributeError):\n            ref_sop_item.ReferencedFrameNumber\n\n    def test_scoord_item_construction_point(self):\n        name = codes.DCM.ImageRegion\n        graphic_type = GraphicTypeValues.POINT\n        graphic_data = np.array([[1.0, 1.0]])\n        pixel_origin_interpretation = \'FRAME\'\n        i = ScoordContentItem(\n            name=name,\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            pixel_origin_interpretation=pixel_origin_interpretation\n        )\n        assert i.ValueType == \'SCOORD\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.GraphicType == graphic_type.value\n        assert i.GraphicData == graphic_data.flatten().tolist()\n        assert i.PixelOriginInterpretation == pixel_origin_interpretation\n        with pytest.raises(AttributeError):\n            i.FiducialUID\n\n    def test_scoord_item_construction_circle(self):\n        name = codes.DCM.ImageRegion\n        graphic_type = GraphicTypeValues.CIRCLE\n        graphic_data = np.array([[1.0, 1.0], [2.0, 2.0]])\n        pixel_origin_interpretation = \'VOLUME\'\n        i = ScoordContentItem(\n            name=name,\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            pixel_origin_interpretation=pixel_origin_interpretation\n        )\n        assert i.ValueType == \'SCOORD\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.GraphicType == graphic_type.value\n        assert np.all(i.GraphicData[:2] == graphic_data[0, :])\n        assert np.all(i.GraphicData[2:4] == graphic_data[1, :])\n        assert i.PixelOriginInterpretation == pixel_origin_interpretation\n        with pytest.raises(AttributeError):\n            i.FiducialUID\n\n    def test_scoord3d_item_construction_point(self):\n        name = codes.DCM.ImageRegion\n        graphic_type = GraphicTypeValues3D.POINT\n        graphic_data = np.array([[1.0, 1.0, 1.0]])\n        frame_of_reference_uid = \'1.2.3\'\n        i = Scoord3DContentItem(\n            name=name,\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            frame_of_reference_uid=frame_of_reference_uid\n        )\n        assert i.ValueType == \'SCOORD3D\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.GraphicType == graphic_type.value\n        assert np.all(i.GraphicData == graphic_data[0, :])\n        assert i.ReferencedFrameOfReferenceUID == frame_of_reference_uid\n        with pytest.raises(AttributeError):\n            i.FiducialUID\n\n    def test_scoord3d_item_construction_polygon(self):\n        name = codes.DCM.ImageRegion\n        graphic_type = GraphicTypeValues3D.POLYGON\n        graphic_data = np.array([\n            [1.0, 1.0, 1.0], [2.0, 2.0, 1.0], [1.0, 1.0, 1.0]\n        ])\n        frame_of_reference_uid = \'1.2.3\'\n        i = Scoord3DContentItem(\n            name=name,\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            frame_of_reference_uid=frame_of_reference_uid\n        )\n        assert i.ValueType == \'SCOORD3D\'\n        assert i.ConceptNameCodeSequence[0] == name\n        assert i.GraphicType == graphic_type.value\n        assert np.all(i.GraphicData[:3] == graphic_data[0, :])\n        assert np.all(i.GraphicData[3:6] == graphic_data[1, :])\n        assert np.all(i.GraphicData[6:9] == graphic_data[2, :])\n        assert i.ReferencedFrameOfReferenceUID == frame_of_reference_uid\n        with pytest.raises(AttributeError):\n            i.FiducialUID\n\n\nclass TestContentSequence(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n\n\nclass TestObservationContext(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._person_name = \'Foo Bar\'\n        self._device_uid = generate_uid()\n        self._specimen_uid = generate_uid()\n        self._observer_person_context = ObserverContext(\n            observer_type=codes.cid270.Person,\n            observer_identifying_attributes=PersonObserverIdentifyingAttributes(\n                name=self._person_name\n            )\n        )\n        self._observer_device_context = ObserverContext(\n            observer_type=codes.cid270.Device,\n            observer_identifying_attributes=DeviceObserverIdentifyingAttributes(\n                uid=self._device_uid\n            )\n        )\n        self._subject_context = SubjectContext(\n            subject_class=codes.cid271.Specimen,\n            subject_class_specific_context=SubjectContextSpecimen(\n                uid=self._specimen_uid\n            )\n        )\n        self._observation_context = ObservationContext(\n            observer_person_context=self._observer_person_context,\n            observer_device_context=self._observer_device_context,\n            subject_context=self._subject_context\n        )\n\n    def test_observer_context(self):\n        # person\n        assert len(self._observer_person_context) == 2\n        item = self._observer_person_context[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121005\'\n        assert item.ConceptCodeSequence[0] == codes.cid270.Person\n        item = self._observer_person_context[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121008\'\n        assert item.TextValue == self._person_name\n        # device\n        assert len(self._observer_device_context) == 2\n        item = self._observer_device_context[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121005\'\n        assert item.ConceptCodeSequence[0] == codes.cid270.Device\n        item = self._observer_device_context[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121012\'\n        assert item.UID == self._device_uid\n\n    def test_subject_context(self):\n        assert len(self._subject_context) == 2\n        item = self._subject_context[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121024\'\n        assert item.ConceptCodeSequence[0] == codes.cid271.Specimen\n        item = self._subject_context[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121039\'\n        assert item.UID == self._specimen_uid\n\n    def test_content_length(self):\n        assert len(self._observation_context) == 6\n\n\nclass TestFindingSiteOptional(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._location = codes.cid7151.LobeOfLung\n        self._laterality = codes.cid244.Right\n        self._modifier = codes.cid2.Apical\n        self._finding_site = FindingSite(\n            anatomic_location=self._location,\n            laterality=self._laterality,\n            topographical_modifier=self._modifier\n        )\n\n    def test_finding_site(self):\n        item = self._finding_site\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'363698007\'\n        assert item.ConceptCodeSequence[0] == self._location\n        assert len(item.ContentSequence) == 2\n\n    def test_laterality(self):\n        item = self._finding_site.ContentSequence[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'272741003\'\n        assert item.ConceptCodeSequence[0] == self._laterality\n\n    def test_topographical_modifier(self):\n        item = self._finding_site.ContentSequence[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'106233006\'\n        assert item.ConceptCodeSequence[0] == self._modifier\n\n\nclass TestFindingSite(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._location = \\\n            codes.cid6300.RightAnteriorMiddlePeripheralZoneOfProstate\n        self._finding_site = FindingSite(\n            anatomic_location=self._location\n        )\n\n    def test_finding_site(self):\n        item = self._finding_site\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'363698007\'\n        assert item.ConceptCodeSequence[0] == self._location\n        assert len(item.ContentSequence) == 0\n\n\nclass TestTrackingIdentifierOptional(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._uid = generate_uid()\n        self._identifier = \'prostate zone size measurements\'\n        self._tracking_identifier = TrackingIdentifier(\n            uid=self._uid,\n            identifier=self._identifier\n        )\n\n    def test_identifier(self):\n        item = self._tracking_identifier[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'112039\'\n        assert item.TextValue == self._identifier\n\n    def test_uid(self):\n        item = self._tracking_identifier[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'112040\'\n        assert item.UID == self._uid\n\n\nclass TestTrackingIdentifier(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._uid = generate_uid()\n        self._tracking_identifier = TrackingIdentifier(\n            uid=self._uid\n        )\n\n    def test_uid(self):\n        item = self._tracking_identifier[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'112040\'\n        assert item.UID == self._uid\n\n\nclass TestMeasurement(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._value = 10.0\n        self._unit = codes.cid7181.SquareMillimeter\n        self._tracking_identifier = TrackingIdentifier(\n            uid=generate_uid(),\n            identifier=\'prostate zone size measurement\'\n        )\n        self._name = codes.cid7469.Area\n        self._measurement = Measurement(\n            name=self._name,\n            value=self._value,\n            unit=self._unit,\n            tracking_identifier=self._tracking_identifier\n        )\n\n    def test_name(self):\n        item = self._measurement[0]\n        assert item.ConceptNameCodeSequence[0] == self._name\n\n    def test_value(self):\n        item = self._measurement[0]\n        assert len(item.MeasuredValueSequence) == 1\n        assert len(item.MeasuredValueSequence[0]) == 3\n        assert item.MeasuredValueSequence[0].NumericValue == DS(self._value)\n        value_item = item.MeasuredValueSequence[0]\n        unit_item = value_item.MeasurementUnitsCodeSequence[0]\n        assert unit_item == self._unit\n        with pytest.raises(AttributeError):\n            item.NumericValueQualifierCodeSequence\n\n    def test_tracking_identifier(self):\n        item = self._measurement[0].ContentSequence[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'112039\'\n\n    def test_tracking_unique_identifier(self):\n        item = self._measurement[0].ContentSequence[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'112040\'\n\n\nclass TestMeasurementOptional(unittest.TestCase):\n\n    def setUp(self):\n        \'\'\'Creates a Measurement for a numeric value in millimiter unit with\n        derivation, method and reference to an image region.\'\'\'\n        super().setUp()\n        self._value = 10\n        self._unit = codes.cid7181.SquareMillimeter\n        self._tracking_identifier = TrackingIdentifier(\n            uid=generate_uid(),\n            identifier=\'prostate zone size measurement\'\n        )\n        self._derivation = codes.cid7464.Total\n        self._method = codes.cid7473.AreaOfClosedIrregularPolygon\n        self._location = \\\n            codes.cid6300.RightAnteriorMiddlePeripheralZoneOfProstate\n        self._finding_site = FindingSite(\n            anatomic_location=self._location\n        )\n        self._image = SourceImageForRegion(\n            referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.2.2\',\n            referenced_sop_instance_uid=generate_uid()\n        )\n        self._region = ImageRegion(\n            graphic_type=GraphicTypeValues.POINT,\n            graphic_data=np.array([[1.0, 1.0]]),\n            source_image=self._image\n        )\n        self._name = codes.cid7469.Area\n        self._measurement = Measurement(\n            name=self._name,\n            value=self._value,\n            unit=self._unit,\n            tracking_identifier=self._tracking_identifier,\n            method=self._method,\n            derivation=self._derivation,\n            finding_sites=[self._finding_site, ]\n        )\n\n    def test_method(self):\n        item = self._measurement[0].ContentSequence[2]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'370129005\'\n        assert item.ConceptCodeSequence[0] == self._method\n\n    def test_derivation(self):\n        item = self._measurement[0].ContentSequence[3]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121401\'\n        assert item.ConceptCodeSequence[0] == self._derivation\n\n    def test_finding_site(self):\n        item = self._measurement[0].ContentSequence[4]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'363698007\'\n        assert item.ConceptCodeSequence[0] == self._location\n        # Laterality and topological modifier were not specified\n        assert len(item.ContentSequence) == 0\n\n\nclass TestImageRegion(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n\nclass TestVolumeSurface(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n\nclass TestReferencedSegment(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._sop_class_uid = \'1.2.840.10008.5.1.4.1.1.66.4\'\n        self._sop_instance_uid = generate_uid()\n        self._segment_number = 1\n        self._frame_numbers = [1, 2, ]\n        self._source_series = SourceSeriesForSegmentation(\n            referenced_series_instance_uid=generate_uid()\n        )\n\n    def test_construction(self):\n        ReferencedSegment(\n            sop_class_uid=self._sop_class_uid,\n            sop_instance_uid=self._sop_instance_uid,\n            segment_number=self._segment_number,\n            frame_numbers=self._frame_numbers,\n            source_series=self._source_series\n        )\n\n\nclass TestReferencedSegmentationFrame(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._sop_class_uid = \'1.2.840.10008.5.1.4.1.1.66.4\'\n        self._sop_instance_uid = generate_uid()\n        self._segment_number = 1\n        self._frame_number = 1\n        self._source_image = SourceImageForSegmentation(\n            referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.2.2\',\n            referenced_sop_instance_uid=generate_uid()\n        )\n\n    def test_construction(self):\n        ReferencedSegmentationFrame(\n            sop_class_uid=self._sop_class_uid,\n            sop_instance_uid=self._sop_instance_uid,\n            segment_number=self._segment_number,\n            frame_number=self._frame_number,\n            source_image=self._source_image\n        )\n\n\nclass TestPlanarROIMeasurementsAndQualitativeEvaluations(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._tracking_identifier = TrackingIdentifier(\n            uid=generate_uid(),\n            identifier=\'planar roi measurements\'\n        )\n        self._image = SourceImageForRegion(\n            referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.2.2\',\n            referenced_sop_instance_uid=generate_uid()\n        )\n        self._region = ImageRegion(\n            graphic_type=GraphicTypeValues.CIRCLE,\n            graphic_data=np.array([[1.0, 1.0], [2.0, 2.0]]),\n            source_image=self._image\n        )\n        self._measurements = PlanarROIMeasurementsAndQualitativeEvaluations(\n            tracking_identifier=self._tracking_identifier,\n            referenced_region=self._region\n        )\n\n    def test_constructed_without_human_readable_tracking_identifier(self):\n        tracking_identifier = TrackingIdentifier(\n            uid=generate_uid()\n        )\n        with pytest.raises(ValueError):\n            PlanarROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=tracking_identifier,\n                referenced_region=self._region\n            )\n\n    def test_constructed_without_reference(self):\n        with pytest.raises(ValueError):\n            PlanarROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=self._tracking_identifier\n            )\n\n    def test_constructed_with_multiple_references(self):\n        with pytest.raises(ValueError):\n            PlanarROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=self._tracking_identifier,\n                referenced_region=self._region,\n                referenced_segment=self._region\n            )\n\n\nclass TestVolumetricROIMeasurementsAndQualitativeEvaluations(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._tracking_identifier = TrackingIdentifier(\n            uid=generate_uid(),\n            identifier=\'volumetric roi measurements\'\n        )\n        self._images = [\n            SourceImageForRegion(\n                referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.2.2\',\n                referenced_sop_instance_uid=generate_uid()\n            )\n            for i in range(3)\n        ]\n        self._regions = [\n            ImageRegion(\n                graphic_type=GraphicTypeValues.POLYLINE,\n                graphic_data=np.array([\n                    [1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [1.0, 1.0]\n                ]),\n                source_image=self._images[i]\n            )\n            for i in range(3)\n        ]\n        self._measurements = VolumetricROIMeasurementsAndQualitativeEvaluations(\n            tracking_identifier=self._tracking_identifier,\n            referenced_regions=self._regions\n        )\n\n    def test_constructed_with_volume(self):\n        image = SourceImageForSegmentation(\n            referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.2.2\',\n            referenced_sop_instance_uid=generate_uid()\n        )\n        volume = VolumeSurface(\n            graphic_type=GraphicTypeValues3D.ELLIPSOID,\n            graphic_data=np.array([\n                [1.0, 2.0, 2.0], [3.0, 2.0, 2.0],\n                [2.0, 1.0, 2.0], [2.0, 3.0, 2.0],\n                [2.0, 2.0, 1.0], [2.0, 2.0, 3.0],\n            ]),\n            source_images=[image],\n            frame_of_reference_uid=generate_uid()\n        )\n        measurements = VolumetricROIMeasurementsAndQualitativeEvaluations(\n            tracking_identifier=self._tracking_identifier,\n            referenced_volume_surface=volume\n        )\n        assert len(measurements) == 1\n        assert len(measurements[0].ContentSequence) == 3\n\n    def test_constructed_without_reference(self):\n        with pytest.raises(ValueError):\n            VolumetricROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=self._tracking_identifier\n            )\n\n    def test_constructed_with_multiple_references(self):\n        with pytest.raises(ValueError):\n            VolumetricROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=self._tracking_identifier,\n                referenced_regions=self._regions,\n                referenced_volume_surface=self._regions\n            )\n\n\nclass TestMeasurementReport(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._observer_person_context = ObserverContext(\n            observer_type=codes.cid270.Person,\n            observer_identifying_attributes=PersonObserverIdentifyingAttributes(\n                name=\'Foo Bar\'\n            )\n        )\n        self._observer_device_context = ObserverContext(\n            observer_type=codes.cid270.Device,\n            observer_identifying_attributes=DeviceObserverIdentifyingAttributes(\n                uid=generate_uid()\n            )\n        )\n        self._observation_context = ObservationContext(\n            observer_person_context=self._observer_person_context,\n            observer_device_context=self._observer_device_context\n        )\n        self._procedure_reported = codes.cid100.CTPerfusionHeadWithContrastIV\n        self._tracking_identifier = TrackingIdentifier(\n            uid=generate_uid(),\n            identifier=\'planar roi measurements\'\n        )\n        self._image = SourceImageForRegion(\n            referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.2.2\',\n            referenced_sop_instance_uid=generate_uid()\n        )\n        self._region = ImageRegion(\n            graphic_type=GraphicTypeValues.CIRCLE,\n            graphic_data=np.array([[1.0, 1.0], [2.0, 2.0]]),\n            source_image=self._image\n        )\n        self._measurements = PlanarROIMeasurementsAndQualitativeEvaluations(\n            tracking_identifier=self._tracking_identifier,\n            referenced_region=self._region\n        )\n        self._measurement_report = MeasurementReport(\n            observation_context=self._observation_context,\n            procedure_reported=self._procedure_reported,\n            imaging_measurements=[self._measurements]\n        )\n\n    def test_container(self):\n        item = self._measurement_report[0]\n        assert len(item.ContentSequence) == 8\n        subitem = item.ContentTemplateSequence[0]\n        assert subitem.TemplateIdentifier == \'1500\'\n\n    def test_language(self):\n        item = self._measurement_report[0].ContentSequence[0]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121049\'\n        assert item.ConceptCodeSequence[0] == DEFAULT_LANGUAGE\n\n    def test_observation_context(self):\n        item = self._measurement_report[0].ContentSequence[1]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121005\'\n        item = self._measurement_report[0].ContentSequence[2]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121008\'\n        item = self._measurement_report[0].ContentSequence[3]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121005\'\n        item = self._measurement_report[0].ContentSequence[4]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121012\'\n\n    def test_procedure_reported(self):\n        item = self._measurement_report[0].ContentSequence[5]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'121058\'\n        assert item.ConceptCodeSequence[0] == self._procedure_reported\n\n    def test_image_library(self):\n        item = self._measurement_report[0].ContentSequence[6]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'111028\'\n\n    def test_imaging_measurements(self):\n        item = self._measurement_report[0].ContentSequence[7]\n        assert item.ConceptNameCodeSequence[0].CodeValue == \'126010\'\n        subitem = item.ContentSequence[0]\n        assert subitem.ConceptNameCodeSequence[0].CodeValue == \'125007\'\n\n\nclass TestEnhancedSR(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        self._ref_dataset = Dataset()\n        self._ref_dataset.PatientID = \'1\'\n        self._ref_dataset.PatientName = \'patient\'\n        self._ref_dataset.PatientBirthDate = \'2000101\'\n        self._ref_dataset.PatientSex = \'o\'\n        self._ref_dataset.SOPClassUID = \'1.2.840.10008.5.1.4.1.1.2.2\'\n        self._ref_dataset.SOPInstanceUID = generate_uid()\n        self._ref_dataset.SeriesInstanceUID = generate_uid()\n        self._ref_dataset.StudyInstanceUID = generate_uid()\n        self._ref_dataset.AccessionNumber = \'2\'\n        self._ref_dataset.StudyID = \'3\'\n        self._ref_dataset.StudyDate = datetime.now().date()\n        self._ref_dataset.StudyTime = datetime.now().time()\n        self._ref_dataset.ReferringPhysicianName = \'doctor\'\n\n        self._series_instance_uid = generate_uid()\n        self._series_number = 3\n        self._sop_instance_uid = generate_uid()\n        self._instance_number = 4\n        self._institution_name = \'institute\'\n        self._institutional_department_name = \'department\'\n        self._manufacturer = \'manufacturer\'\n\n        observer_person_context = ObserverContext(\n            observer_type=codes.DCM.Person,\n            observer_identifying_attributes=PersonObserverIdentifyingAttributes(\n                name=\'Foo\'\n            )\n        )\n        observer_device_context = ObserverContext(\n            observer_type=codes.DCM.Device,\n            observer_identifying_attributes=DeviceObserverIdentifyingAttributes(\n                uid=generate_uid()\n            )\n        )\n        observation_context = ObservationContext(\n            observer_person_context=observer_person_context,\n            observer_device_context=observer_device_context,\n        )\n        referenced_region = ImageRegion(\n            graphic_type=GraphicTypeValues.POLYLINE,\n            graphic_data=np.array([\n                (165.0, 200.0),\n                (170.0, 200.0),\n                (170.0, 220.0),\n                (165.0, 220.0),\n                (165.0, 200.0),\n            ]),\n            source_image=SourceImageForRegion(\n                referenced_sop_class_uid=self._ref_dataset.SOPClassUID,\n                referenced_sop_instance_uid=self._ref_dataset.SOPInstanceUID\n            )\n        )\n        finding_sites = [\n            FindingSite(\n                anatomic_location=codes.SCT.CervicoThoracicSpine,\n                topographical_modifier=codes.SCT.VertebralForamen\n            ),\n        ]\n        measurements = [\n            Measurement(\n                name=codes.SCT.AreaOfDefinedRegion,\n                tracking_identifier=TrackingIdentifier(uid=generate_uid()),\n                value=1.7,\n                unit=codes.UCUM.SquareMillimeter,\n                properties=MeasurementProperties(\n                    normality=CodedConcept(\n                        value=""17621005"",\n                        meaning=""Normal"",\n                        scheme_designator=""SCT""\n                    ),\n                    level_of_significance=codes.SCT.NotSignificant\n                )\n            )\n        ]\n        imaging_measurements = [\n            PlanarROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=TrackingIdentifier(\n                    uid=generate_uid(),\n                    identifier=\'Planar ROI Measurements\'\n                ),\n                referenced_region=referenced_region,\n                finding_type=codes.SCT.SpinalCord,\n                measurements=measurements,\n                finding_sites=finding_sites\n            )\n        ]\n        self._content = MeasurementReport(\n            observation_context=observation_context,\n            procedure_reported=codes.LN.CTUnspecifiedBodyRegion,\n            imaging_measurements=imaging_measurements\n        )[0]\n\n        self._report = EnhancedSR(\n            evidence=[self._ref_dataset],\n            content=self._content,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            institution_name=self._institution_name,\n            institutional_department_name=self._institutional_department_name,\n            manufacturer=self._manufacturer\n        )\n\n    def test_sop_class_uid(self):\n        assert self._report.SOPClassUID == \'1.2.840.10008.5.1.4.1.1.88.22\'\n\n\nclass TestComprehensiveSR(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        file_path = Path(__file__)\n        data_dir = file_path.parent.parent.joinpath(\'data\')\n        self._ref_dataset = dcmread(\n            str(data_dir.joinpath(\'test_files\', \'ct_image.dcm\'))\n        )\n\n        self._series_instance_uid = generate_uid()\n        self._series_number = 3\n        self._sop_instance_uid = generate_uid()\n        self._instance_number = 4\n        self._institution_name = \'institute\'\n        self._institutional_department_name = \'department\'\n        self._manufacturer = \'manufacturer\'\n\n        observer_person_context = ObserverContext(\n            observer_type=codes.DCM.Person,\n            observer_identifying_attributes=PersonObserverIdentifyingAttributes(\n                name=\'Foo\'\n            )\n        )\n        observer_device_context = ObserverContext(\n            observer_type=codes.DCM.Device,\n            observer_identifying_attributes=DeviceObserverIdentifyingAttributes(\n                uid=generate_uid()\n            )\n        )\n        observation_context = ObservationContext(\n            observer_person_context=observer_person_context,\n            observer_device_context=observer_device_context,\n        )\n        referenced_region = ImageRegion(\n            graphic_type=GraphicTypeValues.POLYLINE,\n            graphic_data=np.array([\n                (165.0, 200.0),\n                (170.0, 200.0),\n                (170.0, 220.0),\n                (165.0, 220.0),\n                (165.0, 200.0),\n            ]),\n            source_image=SourceImageForRegion(\n                referenced_sop_class_uid=self._ref_dataset.SOPClassUID,\n                referenced_sop_instance_uid=self._ref_dataset.SOPInstanceUID\n            )\n        )\n        finding_sites = [\n            FindingSite(\n                anatomic_location=codes.SCT.CervicoThoracicSpine,\n                topographical_modifier=codes.SCT.VertebralForamen\n            ),\n        ]\n        measurements = [\n            Measurement(\n                name=codes.SCT.AreaOfDefinedRegion,\n                tracking_identifier=TrackingIdentifier(uid=generate_uid()),\n                value=1.7,\n                unit=codes.UCUM.SquareMillimeter,\n                properties=MeasurementProperties(\n                    normality=CodedConcept(\n                        value=""17621005"",\n                        meaning=""Normal"",\n                        scheme_designator=""SCT""\n                    ),\n                    level_of_significance=codes.SCT.NotSignificant\n                )\n            )\n        ]\n        imaging_measurements = [\n            PlanarROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=TrackingIdentifier(\n                    uid=generate_uid(),\n                    identifier=\'Planar ROI Measurements\'\n                ),\n                referenced_region=referenced_region,\n                finding_type=codes.SCT.SpinalCord,\n                measurements=measurements,\n                finding_sites=finding_sites\n            )\n        ]\n        self._content = MeasurementReport(\n            observation_context=observation_context,\n            procedure_reported=codes.LN.CTUnspecifiedBodyRegion,\n            imaging_measurements=imaging_measurements\n        )[0]\n\n        self._report = ComprehensiveSR(\n            evidence=[self._ref_dataset],\n            content=self._content,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            institution_name=self._institution_name,\n            institutional_department_name=self._institutional_department_name,\n            manufacturer=self._manufacturer\n        )\n\n    def test_sop_class_uid(self):\n        assert self._report.SOPClassUID == \'1.2.840.10008.5.1.4.1.1.88.33\'\n\n\nclass TestComprehensive3DSR(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        file_path = Path(__file__)\n        data_dir = file_path.parent.parent.joinpath(\'data\')\n        self._ref_dataset = dcmread(\n            str(data_dir.joinpath(\'test_files\', \'ct_image.dcm\'))\n        )\n\n        self._series_instance_uid = generate_uid()\n        self._series_number = 3\n        self._sop_instance_uid = generate_uid()\n        self._instance_number = 4\n        self._institution_name = \'institute\'\n        self._institutional_department_name = \'department\'\n        self._manufacturer = \'manufacturer\'\n\n        observer_person_context = ObserverContext(\n            observer_type=codes.DCM.Person,\n            observer_identifying_attributes=PersonObserverIdentifyingAttributes(\n                name=\'Foo\'\n            )\n        )\n        observer_device_context = ObserverContext(\n            observer_type=codes.DCM.Device,\n            observer_identifying_attributes=DeviceObserverIdentifyingAttributes(\n                uid=generate_uid()\n            )\n        )\n        observation_context = ObservationContext(\n            observer_person_context=observer_person_context,\n            observer_device_context=observer_device_context,\n        )\n        referenced_region = ImageRegion3D(\n            graphic_type=GraphicTypeValues3D.POLYGON,\n            graphic_data=np.array([\n                (165.0, 200.0, 134.0),\n                (170.0, 200.0, 134.0),\n                (170.0, 220.0, 134.0),\n                (165.0, 220.0, 134.0),\n                (165.0, 200.0, 134.0),\n            ]),\n            frame_of_reference_uid=self._ref_dataset.FrameOfReferenceUID\n        )\n        finding_sites = [\n            FindingSite(\n                anatomic_location=codes.SCT.CervicoThoracicSpine,\n                topographical_modifier=codes.SCT.VertebralForamen\n            ),\n        ]\n        measurements = [\n            Measurement(\n                name=codes.SCT.AreaOfDefinedRegion,\n                tracking_identifier=TrackingIdentifier(uid=generate_uid()),\n                value=1.7,\n                unit=codes.UCUM.SquareMillimeter,\n                properties=MeasurementProperties(\n                    normality=CodedConcept(\n                        value=""17621005"",\n                        meaning=""Normal"",\n                        scheme_designator=""SCT""\n                    ),\n                    level_of_significance=codes.SCT.NotSignificant\n                )\n            )\n        ]\n        imaging_measurements = [\n            PlanarROIMeasurementsAndQualitativeEvaluations(\n                tracking_identifier=TrackingIdentifier(\n                    uid=generate_uid(),\n                    identifier=\'Planar ROI Measurements\'\n                ),\n                referenced_region=referenced_region,\n                finding_type=codes.SCT.SpinalCord,\n                measurements=measurements,\n                finding_sites=finding_sites\n            )\n        ]\n        self._content = MeasurementReport(\n            observation_context=observation_context,\n            procedure_reported=codes.LN.CTUnspecifiedBodyRegion,\n            imaging_measurements=imaging_measurements\n        )[0]\n\n        self._report = Comprehensive3DSR(\n            evidence=[self._ref_dataset],\n            content=self._content,\n            series_instance_uid=self._series_instance_uid,\n            series_number=self._series_number,\n            sop_instance_uid=self._sop_instance_uid,\n            instance_number=self._instance_number,\n            institution_name=self._institution_name,\n            institutional_department_name=self._institutional_department_name,\n            manufacturer=self._manufacturer\n        )\n\n    def test_sop_class_uid(self):\n        assert self._report.SOPClassUID == \'1.2.840.10008.5.1.4.1.1.88.34\'\n\n    def test_patient_attributes(self):\n        assert self._report.PatientID == self._ref_dataset.PatientID\n        assert self._report.PatientName == self._ref_dataset.PatientName\n\n    def test_study_attributes(self):\n        assert (\n            self._report.StudyInstanceUID == self._ref_dataset.StudyInstanceUID\n        )\n        assert self._report.AccessionNumber == self._ref_dataset.AccessionNumber\n\n    def test_series_attributes(self):\n        assert self._report.SeriesInstanceUID == self._series_instance_uid\n        assert self._report.SeriesNumber == self._series_number\n\n    def test_instance_attributes(self):\n        assert self._report.SOPInstanceUID == self._sop_instance_uid\n        assert self._report.InstanceNumber == self._instance_number\n        assert self._report.SOPClassUID == \'1.2.840.10008.5.1.4.1.1.88.34\'\n        assert self._report.InstitutionName == self._institution_name\n        assert self._report.Manufacturer == self._manufacturer\n        assert self._report.Modality == \'SR\'\n\n\nclass TestSRUtilities(unittest.TestCase):\n\n    def setUp(self):\n        super().setUp()\n        file_path = Path(__file__)\n        data_dir = file_path.parent.parent.joinpath(\'data\')\n        self._sr_document = dcmread(\n            str(data_dir.joinpath(\'test_files\', \'sr_document.dcm\'))\n        )\n\n    def test_find_content_items(self):\n        items = find_content_items(self._sr_document)\n        assert len(items) == 8\n\n    def test_find_content_items_filtered_by_name(self):\n        items = find_content_items(\n            self._sr_document,\n            name=codes.DCM.ProcedureReported\n        )\n        assert len(items) == 1\n        name_code_value = items[0].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value == codes.DCM.ProcedureReported.value\n\n    def test_find_content_items_filtered_by_relationship_type(self):\n        items = find_content_items(\n            self._sr_document,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        assert len(items) == 4\n        name_code_value_1 = items[0].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value_1 == codes.DCM.ObserverType.value\n        name_code_value_2 = items[1].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value_2 == codes.DCM.PersonObserverName.value\n        name_code_value_3 = items[2].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value_3 == codes.DCM.ObserverType.value\n        name_code_value_4 = items[3].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value_4 == codes.DCM.DeviceObserverUID.value\n\n    def test_find_content_items_filtered_by_value_type(self):\n        items = find_content_items(\n            self._sr_document,\n            value_type=ValueTypeValues.UIDREF\n        )\n        assert len(items) == 1\n        name_code_value = items[0].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value == codes.DCM.DeviceObserverUID.value\n\n    def test_find_content_items_filtered_by_value_type_relationship_type(self):\n        items = find_content_items(\n            self._sr_document,\n            value_type=ValueTypeValues.CODE,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        assert len(items) == 2\n        name_code_value_1 = items[0].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value_1 == codes.DCM.ObserverType.value\n        name_code_value_2 = items[1].ConceptNameCodeSequence[0].CodeValue\n        assert name_code_value_2 == codes.DCM.ObserverType.value\n\n    def test_find_content_items_recursively(self):\n        items = find_content_items(self._sr_document, recursive=True)\n        assert len(items) == 20\n\n    def test_find_content_items_filter_by_name_recursively(self):\n        items = find_content_items(\n            self._sr_document,\n            name=codes.DCM.TrackingUniqueIdentifier,\n            recursive=True\n        )\n        assert len(items) == 2\n\n    def test_find_content_items_filter_by_value_type_recursively(self):\n        items = find_content_items(\n            self._sr_document,\n            value_type=ValueTypeValues.SCOORD,\n            recursive=True\n        )\n        assert len(items) == 1\n\n    def test_find_content_items_filter_by_value_type_recursively_1(self):\n        items = find_content_items(\n            self._sr_document,\n            value_type=ValueTypeValues.CODE,\n            recursive=True\n        )\n        assert len(items) == 9\n\n    def test_find_content_items_filter_by_relationship_type_recursively(self):\n        items = find_content_items(\n            self._sr_document,\n            relationship_type=RelationshipTypeValues.CONTAINS,\n            recursive=True\n        )\n        assert len(items) == 6\n'"
src/highdicom/__init__.py,0,b''
src/highdicom/_iods.py,0,"b'""""""DICOM information object definitions (IODs)\nauto-generated on 2020-06-07 at 13:32:23.\n""""""\n\nIOD_MODULE_MAP = {\n    ""12-lead-ecg"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""acquisition-context-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""advanced-blending-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""advanced-blending-presentation-state"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""advanced-blending-presentation-state-display"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""displayed-area"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""spatial-transformation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""ambulatory-ecg"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""arterial-pulse-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""autorefraction-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""autorefraction-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""autorefraction-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""basic-cardiac-electrophysiology-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""basic-directory"": [\n        {\n            ""ie"": ""Basic Directory"",\n            ""key"": ""file-set-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Basic Directory"",\n            ""key"": ""directory-information"",\n            ""usage"": ""U""\n        }\n    ],\n    ""basic-structured-display"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""structured-display"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""structured-display-image-box"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""structured-display-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""basic-text-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""basic-voice-audio-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""blending-softcopy-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-blending"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""displayed-area"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""spatial-transformation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""breast-projection-x-ray-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""dx-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-mammography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-mammography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""breast-view"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""breast-projection-x-ray-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""patient-orientation"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""breast-tomosynthesis-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-mammography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""breast-tomosynthesis-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image---equipment-coordinate-relationship"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""breast-tomosynthesis-contributing-sources"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""breast-tomosynthesis-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-reconstruction"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""breast-view"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""c-arm-photon-electron-radiation"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""general-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""rt-delivery-device-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""rt-radiation-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""c-arm-photon-electron-delivery-device"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""c-arm-photon-electron-beam"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""radiotherapy-common-instance"",\n            ""usage"": ""M""\n        }\n    ],\n    ""chest-cad-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""colon-cad-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""color-palette"": [\n        {\n            ""ie"": ""Color Palette"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Color Palette"",\n            ""key"": ""color-palette-definition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Color Palette"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Color Palette"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        }\n    ],\n    ""color-softcopy-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-shutter"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""bitmap-display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-activation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""displayed-area"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""spatial-transformation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""comprehensive-3d-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""comprehensive-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""content-assessment-results"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Content Assessment Results"",\n            ""key"": ""content-assessment-results"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Content Assessment Results"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Content Assessment Results"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        }\n    ],\n    ""corneal-topography-map"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""corneal-topography-map-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""corneal-topography-map-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""corneal-topography-map-analysis"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""cr-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""cr-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cr-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""ct-defined-procedure-protocol"": [\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""protocol-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""clinical-trial-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""patient-specification"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""equipment-specification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""instructions"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""patient-positioning"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""defined-ct-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""defined-ct-reconstruction"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""defined-storage"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""ct-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-plane"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ct-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-energy-ct-image"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""ct-performed-procedure-protocol"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ct-protocol-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""protocol-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""patient-protocol-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""instructions"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""patient-positioning"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""performed-ct-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""performed-ct-reconstruction"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""performed-storage"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Procedure Protocol"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""deformable-spatial-registration"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""spatial-registration-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""deformable-spatial-registration"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""digital-intra-oral-x-ray-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""dx-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""intra-oral-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-anatomy-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-detector"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-collimator"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-positioning"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-tomography-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-acquisition-dose"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-generation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-filtration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-grid"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intra-oral-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-histogram"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""digital-mammography-x-ray-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""dx-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""mammography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-anatomy-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-detector"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-collimator"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-positioning"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-tomography-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-acquisition-dose"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-generation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-filtration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-grid"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mammography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-histogram"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""digital-x-ray-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""dx-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-anatomy-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-detector"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-collimator"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-positioning"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-tomography-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-acquisition-dose"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-generation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-filtration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-grid"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-histogram"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""encapsulated-cda"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""encapsulated-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""encapsulated-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""encapsulated-mtl"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""encapsulated-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""encapsulated-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""manufacturing-3d-model"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        }\n    ],\n    ""encapsulated-obj"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""encapsulated-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""encapsulated-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""manufacturing-3d-model"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        }\n    ],\n    ""encapsulated-pdf"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""encapsulated-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""encapsulated-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""encapsulated-stl"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""encapsulated-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""encapsulated-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""manufacturing-3d-model"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Encapsulated Document"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-ct-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ct-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-ct-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""supplemental-palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-ct-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-multi-energy-ct-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-mr-color-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""mr-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-mr-color-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""bulk-motion-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-mr-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mr-pulse-sequence"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-mr-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""mr-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-mr-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""bulk-motion-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""supplemental-palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-mr-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mr-pulse-sequence"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-pet-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-pet-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-pet-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-pet-isotope"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-pet-acquisition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-pet-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-pet-corrections"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""enhanced-us-volume"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-us-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""ultrasound-frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-us-volume-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-palette-color-lookup-table"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-us-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ivus-image"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""excluded-intervals"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-xa-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""xa-xrf-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mask"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-xa-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-filtration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-grid"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-xa-xrf-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""xa-xrf-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-image-intensifier"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-detector"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""xa-xrf-multi-frame-presentation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""enhanced-xrf-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""xa-xrf-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mask"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-xrf-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-tomography-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-filtration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-grid"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-xa-xrf-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""xa-xrf-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-image-intensifier"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-detector"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""xa-xrf-multi-frame-presentation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""extensible-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""general-audio-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""general-ecg"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""generic-implant-template"": [\n        {\n            ""ie"": ""Implant Template"",\n            ""key"": ""generic-implant-template-description"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Implant Template"",\n            ""key"": ""generic-implant-template-2d-drawings"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Implant Template"",\n            ""key"": ""generic-implant-template-3d-models"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Implant Template"",\n            ""key"": ""generic-implant-template-mating-features"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Implant Template"",\n            ""key"": ""generic-implant-template-planning-landmarks"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Implant Template"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface Mesh"",\n            ""key"": ""surface-mesh"",\n            ""usage"": ""C""\n        }\n    ],\n    ""grayscale-softcopy-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-shutter"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-mask"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""mask"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""bitmap-display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-activation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""displayed-area"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""spatial-transformation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""softcopy-voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""softcopy-presentation-lut"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""hanging-protocol"": [\n        {\n            ""ie"": ""Hanging Protocol"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Hanging Protocol"",\n            ""key"": ""hanging-protocol-definition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Hanging Protocol"",\n            ""key"": ""hanging-protocol-environment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Hanging Protocol"",\n            ""key"": ""hanging-protocol-display"",\n            ""usage"": ""M""\n        }\n    ],\n    ""hemodynamic-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""implant-assembly-template"": [\n        {\n            ""ie"": ""Implant Assembly"",\n            ""key"": ""implant-assembly-template"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Implant Assembly"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""implant-template-group"": [\n        {\n            ""ie"": ""Implant Template Group"",\n            ""key"": ""implant-template-group"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Implant Template Group"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""implantation-plan-sr-document"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""intraocular-lens-calculations"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""intraocular-lens-calculations-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""intraocular-lens-calculations"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""intravascular-optical-coherence-tomography-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""intravascular-oct-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""supplemental-palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intravascular-optical-coherence-tomography-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intravascular-oct-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intravascular-oct-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intravascular-oct-processing-parameters"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intravascular-image-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""keratometry-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""keratometry-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""keratometry-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""key-object-selection-document"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""key-object-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""key-object-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""legacy-converted-enhanced-ct-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ct-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""legacy-converted-enhanced-ct-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-ct-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""legacy-converted-enhanced-mr-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""mr-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""legacy-converted-enhanced-mr-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""bulk-motion-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-mr-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""legacy-converted-enhanced-pet-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-pet-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""legacy-converted-enhanced-pet-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-pet-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""lensometry-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""lensometry-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""lensometry-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""macular-grid-thickness-and-volume-report"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""mammography-cad-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""mr-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-plane"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mr-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""mr-spectroscopy"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""mr-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""mr-spectroscopy-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""bulk-motion-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""mr-spectroscopy"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""mr-spectroscopy-pulse-sequence"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""mr-spectroscopy-data"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""MR Spectroscopy"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""multi-frame-grayscale-byte-sc-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-grayscale-byte-sc-image-multi-frame-functional-groups"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-image"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-vector"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""multi-frame-grayscale-word-sc-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-grayscale-word-sc-image-multi-frame-functional-groups"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-image"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-vector"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""multi-frame-single-bit-sc-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-image"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-vector"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""multi-frame-true-color-sc-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-true-color-sc-image-multi-frame-functional-groups"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-image"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-multi-frame-vector"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""nm-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""nm-pet-patient-orientation"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-isotope"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-detector"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-tomo-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-multi-gated-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-phase"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""nm-reconstruction"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-overlay"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""ophthalmic-axial-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-axial-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""ophthalmic-axial-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""ophthalmic-optical-coherence-tomography-b-scan-volume-analysis"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-tomography-b-scan-volume-analysis-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-optical-coherence-tomography-b-scan-volume-analysis-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-optical-coherence-tomography-b-scan-volume-analysis-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""ophthalmic-optical-coherence-tomography-en-face-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-tomography-en-face-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-optical-coherence-tomography-en-face-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ocular-region-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-optical-coherence-tomography-en-face-image-quality-rating"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""ophthalmic-photography-16-bit-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-photography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ocular-region-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photographic-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""ophthalmic-photography-8-bit-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-photography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ocular-region-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photographic-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""ophthalmic-thickness-map"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-thickness-map-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""supplemental-palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""bitmap-display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-thickness-map"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-thickness-map-quality-rating"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""ophthalmic-tomography-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-tomography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-tomography-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-tomography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-tomography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-tomography-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ocular-region-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""ophthalmic-visual-field-static-perimetry-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""visual-field-static-perimetry-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""visual-field-static-perimetry-test-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""visual-field-static-perimetry-test-reliability"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""visual-field-static-perimetry-test-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""visual-field-static-perimetry-test-results"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""ophthalmic-patient-clinical-information-and-test-lens-parameters"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""parametric-map"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""parametric-map-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""floating-point-image-pixel"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""double-floating-point-image-pixel"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""parametric-map-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""parametric-map-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""bulk-motion-synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""patient-radiation-dose-structured-report"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""performed-imaging-agent-administration-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""pet-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""pet-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""pet-isotope"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""pet-multi-gated-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""nm-pet-patient-orientation"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-plane"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""pet-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""planar-mpr-volumetric-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volumetric-presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volumetric-presentation-state-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volume-cropping"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-view-description"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""multi-planar-reconstruction-geometry"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""mpr-volumetric-presentation-state-display"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volumetric-graphic-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-animation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        }\n    ],\n    ""planned-imaging-agent-administration-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""procedure-log"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""protocol-approval"": [\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Approval"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Approval"",\n            ""key"": ""protocol-approval"",\n            ""usage"": ""M""\n        }\n    ],\n    ""pseudo-color-softcopy-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-shutter"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-mask"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""mask"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""bitmap-display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-activation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""displayed-area"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""spatial-transformation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""softcopy-voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""radiopharmaceutical-radiation-dose-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""raw-data"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Raw Data"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Raw Data"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Raw Data"",\n            ""key"": ""raw-data"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Raw Data"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""real-time-audio-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""real-time-bulk-data-flow"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""real-time-audio-waveform-current-frame-functional-groups"",\n            ""usage"": ""M""\n        }\n    ],\n    ""real-time-video-endoscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""real-time-bulk-data-flow"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""real-time-acquisition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""real-time-video-endoscopic-image-current-frame-functional-groups"",\n            ""usage"": ""M""\n        }\n    ],\n    ""real-time-video-photographic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""real-time-bulk-data-flow"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""real-time-acquisition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""real-time-video-photographic-image-current-frame-functional-groups"",\n            ""usage"": ""M""\n        }\n    ],\n    ""real-world-value-mapping"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""real-world-value-mapping-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Real World Value Mapping"",\n            ""key"": ""real-world-value-mapping"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Real World Value Mapping"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Real World Value Mapping"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rendition-selection-document"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""key-object-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame Of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""key-object-document"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""respiratory-waveform"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""waveform-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Waveform"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""robotic-arm-radiation"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""general-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""rt-delivery-device-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""rt-radiation-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""robotic-arm-delivery-device"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""robotic-arm-path"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""radiotherapy-common-instance"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rt-beams-delivery-instruction"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-beams-delivery-instruction"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rt-beams-treatment-record"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-general-treatment-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-patient-setup"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-machine-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""measured-dose-reference-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""calculated-dose-reference-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-beams-session-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-summary-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""rt-brachy-application-setup-delivery-instruction"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-brachy-application-setup-delivery-instruction"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rt-brachy-treatment-record"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-general-treatment-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-patient-setup"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-machine-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""measured-dose-reference-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""calculated-dose-reference-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-brachy-session-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-summary-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""rt-dose"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""general-image"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""image-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""multi-frame-overlay"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""rt-dose"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""rt-dvh"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""structure-set"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""roi-contour"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""rt-dose-roi"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Dose"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""rt-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""rt-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""approval"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""rt-ion-beams-treatment-record"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-general-treatment-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-patient-setup"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-machine-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""measured-dose-reference-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""calculated-dose-reference-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-ion-beams-session-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-summary-record"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""rt-ion-plan"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-general-plan"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-prescription"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-ion-tolerance-tables"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-patient-setup"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-fraction-scheme"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-ion-beams"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""approval"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""rt-physician-intent"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""general-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""rt-physician-intent"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""rt-enhanced-prescription"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""rt-treatment-phase-intent"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Physician Intent"",\n            ""key"": ""radiotherapy-common-instance"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rt-plan"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-general-plan"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-prescription"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-tolerance-tables"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-patient-setup"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-fraction-scheme"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-beams"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""rt-brachy-application-setups"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""approval"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Plan"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""rt-radiation-set"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation Set"",\n            ""key"": ""general-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation Set"",\n            ""key"": ""rt-radiation-set"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation Set"",\n            ""key"": ""rt-dose-contribution"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""RT Radiation Set"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation Set"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation Set"",\n            ""key"": ""radiotherapy-common-instance"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rt-segment-annotation"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Segment Annotation"",\n            ""key"": ""rt-segment-annotation"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Segment Annotation"",\n            ""key"": ""segment-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Segment Annotation"",\n            ""key"": ""general-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Segment Annotation"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Segment Annotation"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Segment Annotation"",\n            ""key"": ""radiotherapy-common-instance"",\n            ""usage"": ""M""\n        }\n    ],\n    ""rt-structure-set"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""structure-set"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""roi-contour"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""rt-roi-observations"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""approval"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Structure Set"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""rt-treatment-summary-record"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-general-treatment-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""rt-treatment-summary-record"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Treatment Record"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""secondary-capture-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""sc-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sc-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""segmentation"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""segmentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""segmentation-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""segmentation-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""simplified-adult-echo-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""timezone"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""spatial-fiducials"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""spatial-fiducials-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Fiducials"",\n            ""key"": ""spatial-fiducials"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Fiducials"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Fiducials"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Spatial Fiducials"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""spatial-registration"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""spatial-registration-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""spatial-registration"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Spatial Registration"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""spectacle-prescription-report"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""stereometric-relationship"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""stereometric-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Stereometric Relationship"",\n            ""key"": ""stereometric-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Stereometric Relationship"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Stereometric Relationship"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""subjective-refraction-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""subjective-refraction-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""subjective-refraction-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""surface-scan-mesh"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""optical-surface-scanner-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""surface-mesh"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""uv-mapping"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""scan-procedure"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""surface-scan-point-cloud"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""optical-surface-scanner-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""point-cloud"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""uv-mapping"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""scan-procedure"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""surface-segmentation"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""segmentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""surface-segmentation"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""surface-mesh"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Surface"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""tomotherapeutic-radiation"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-rt-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""general-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""rt-delivery-device-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""rt-radiation-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""tomotherapeutic-delivery-device"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""tomotherapeutic-beam"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""RT Radiation"",\n            ""key"": ""radiotherapy-common-instance"",\n            ""usage"": ""M""\n        }\n    ],\n    ""tractography-results"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""tractography-results-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Tractography Results"",\n            ""key"": ""tractography-results"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Tractography Results"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Tractography Results"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Tractography Results"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""us-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""us-region-calibration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""us-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""us-multi-frame-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""palette-color-lookup-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""us-region-calibration"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""us-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""video-endoscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""video-microscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""video-photographic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""visual-acuity-measurements"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""visual-acuity-measurements-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""general-ophthalmic-refractive-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""visual-acuity-measurements"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Measurements"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""vl-endoscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""vl-microscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""optical-path"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""vl-photographic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""vl-photographic-equipment"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-photographic-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-photographic-geolocation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""vl-slide-coordinates-microscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""slide-coordinates"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""optical-path"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        }\n    ],\n    ""vl-whole-slide-microscopy-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""whole-slide-microscopy-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""vl-whole-slide-microscopy-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""whole-slide-microscopy-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""optical-path"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-resolution-navigation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""slide-label"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""volume-rendering-volumetric-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volumetric-presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volumetric-presentation-state-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volume-cropping"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-view-description"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volume-render-geometry"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""render-shading"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""render-display"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""volumetric-graphic-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-group"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-animation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""M""\n        }\n    ],\n    ""wide-field-ophthalmic-photography-3d-coordinates-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-photography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""wide-field-ophthalmic-photography-3d-coordinates"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""wide-field-ophthalmic-photography-quality-rating"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ocular-region-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photographic-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""wide-field-ophthalmic-photography-stereographic-projection-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""ophthalmic-photography-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""wide-field-ophthalmic-photography-stereographic-projection"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""wide-field-ophthalmic-photography-quality-rating"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ocular-region-imaged"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photography-acquisition-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""ophthalmic-photographic-parameters"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""icc-profile"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""x-ray-3d-angiographic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-angiographic-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cardiac-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""respiratory-synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""patient-orientation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image---equipment-coordinate-relationship"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-angiographic-image-contributing-sources"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-angiographic-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-reconstruction"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""x-ray-3d-craniofacial-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""enhanced-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""frame-of-reference"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""enhanced-contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""acquisition-context"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-craniofacial-image-multi-frame-functional-groups"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-dimension"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""patient-orientation"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image---equipment-coordinate-relationship"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-craniofacial-image-contributing-sources"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-craniofacial-acquisition"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-3d-reconstruction"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""x-ray-angiographic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mask"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-acquisition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-collimator"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-table"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""xa-positioner"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-detector"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-overlay"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""x-ray-radiation-dose-sr"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""sr-document-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-general"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sr-document-content"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Document"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ],\n    ""x-ray-radiofluoroscopic-image"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Frame of Reference"",\n            ""key"": ""synchronization"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""general-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""image-pixel"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""contrast-bolus"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""cine"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-pointers"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""mask"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""display-shutter"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""device"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""intervention"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""specimen"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-image"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-acquisition"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-collimator"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-table"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""xrf-positioner"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""x-ray-tomography-acquisition"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""dx-detector"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""multi-frame-overlay"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""modality-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""voi-lut"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""common-instance-reference"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Image"",\n            ""key"": ""frame-extraction"",\n            ""usage"": ""C""\n        }\n    ],\n    ""xa-xrf-grayscale-softcopy-presentation-state"": [\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""patient"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Patient"",\n            ""key"": ""clinical-trial-subject"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""general-study"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""patient-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Study"",\n            ""key"": ""clinical-trial-study"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""general-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""clinical-trial-series"",\n            ""usage"": ""U""\n        },\n        {\n            ""ie"": ""Series"",\n            ""key"": ""presentation-series"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Equipment"",\n            ""key"": ""enhanced-general-equipment"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-identification"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-relationship"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""presentation-state-shutter"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""bitmap-display-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-plane"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""overlay-activation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""displayed-area"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-annotation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""spatial-transformation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""graphic-layer"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""softcopy-voi-lut"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""xa-xrf-presentation-state-mask"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""xa-xrf-presentation-state-shutter"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""xa-xrf-presentation-state-presentation"",\n            ""usage"": ""C""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""softcopy-presentation-lut"",\n            ""usage"": ""M""\n        },\n        {\n            ""ie"": ""Presentation State"",\n            ""key"": ""sop-common"",\n            ""usage"": ""M""\n        }\n    ]\n}'"
src/highdicom/base.py,0,"b'import logging\nimport datetime\nfrom io import BytesIO\nfrom typing import List, Optional, Sequence, Union\n\nfrom pydicom.datadict import keyword_for_tag, tag_for_keyword\nfrom pydicom.dataset import Dataset\nfrom pydicom.filewriter import write_file_meta_info\nfrom pydicom.uid import (\n    DeflatedExplicitVRLittleEndian,\n    ExplicitVRBigEndian,\n    ExplicitVRLittleEndian,\n    ImplicitVRLittleEndian,\n    UID_dictionary,\n)\nfrom pydicom.valuerep import DA, DT, TM\n\nfrom highdicom.sr.coding import CodingSchemeIdentificationItem\nfrom highdicom.enum import ContentQualificationValues\nfrom highdicom.version import __version__\nfrom highdicom._iods import IOD_MODULE_MAP\nfrom highdicom._modules import MODULE_ATTRIBUTE_MAP\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass SOPClass(Dataset):\n\n    """"""Base class for DICOM SOP Instances.""""""\n\n    def __init__(\n            self,\n            study_instance_uid: str,\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            sop_class_uid: str,\n            instance_number: int,\n            manufacturer: str,\n            modality: str,\n            transfer_syntax_uid: Optional[str] = None,\n            patient_id: Optional[str] = None,\n            patient_name: Optional[str] = None,\n            patient_birth_date: Optional[str] = None,\n            patient_sex: Optional[str] = None,\n            accession_number: Optional[str] = None,\n            study_id: str = None,\n            study_date: Optional[Union[str, datetime.date]] = None,\n            study_time: Optional[Union[str, datetime.time]] = None,\n            referring_physician_name: Optional[str] = None,\n            content_qualification: Optional[\n                Union[str, ContentQualificationValues]\n            ] = None,\n            coding_schemes: Optional[\n                Sequence[CodingSchemeIdentificationItem]\n            ] = None,\n            series_description: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        study_instance_uid: str\n            UID of the study\n        series_instance_uid: str\n            UID of the series\n        series_number: Union[int, None]\n            Number of the series within the study\n        sop_instance_uid: str\n            UID that should be assigned to the instance\n        instance_number: int\n            Number that should be assigned to the instance\n        manufacturer: str\n            Name of the manufacturer (developer) of the device (software)\n            that creates the instance\n        modality: str\n            Name of the modality\n        transfer_syntax_uid: str, optional\n            UID of transfer syntax that should be used for encoding of\n            data elements. Defaults to Implicit VR Little Endian\n            (UID ``""1.2.840.10008.1.2""``)\n        patient_id: str, optional\n           ID of the patient (medical record number)\n        patient_name: str, optional\n           Name of the patient\n        patient_birth_date: str, optional\n           Patient\'s birth date\n        patient_sex: str, optional\n           Patient\'s sex\n        study_id: str, optional\n           ID of the study\n        accession_number: str, optional\n           Accession number of the study\n        study_date: Union[str, datetime.date], optional\n           Date of study creation\n        study_time: Union[str, datetime.time], optional\n           Time of study creation\n        referring_physician_name: str, optional\n            Name of the referring physician\n        content_qualification: Union[str, highdicom.enum.ContentQualificationValues], optional\n            Indicator of content qualification\n        coding_schemes: Sequence[highdicom.sr.coding.CodingSchemeIdentificationItem], optional\n            private or public coding schemes that are not part of the\n            DICOM standard\n        series_description: str, optional\n            Human readable description of the series\n\n        Note\n        ----\n        The constructor only provides attributes that are required by the\n        standard (type 1 and 2) as part of the Patient, General Study,\n        Patient Study, General Series, General Equipment and SOP Common modules.\n        Derived classes are responsible for providing additional attributes\n        required by the corresponding Information Object Definition (IOD).\n        Additional optional attributes can subsequently be added to the dataset.\n\n        """"""  # noqa\n        super().__init__()\n        if transfer_syntax_uid is None:\n            transfer_syntax_uid = ImplicitVRLittleEndian\n        if transfer_syntax_uid == ExplicitVRBigEndian:\n            self.is_little_endian = False\n        else:\n            self.is_little_endian = True\n        if transfer_syntax_uid == ImplicitVRLittleEndian:\n            self.is_implicit_VR = True\n        else:\n            self.is_implicit_VR = False\n\n        # Include all File Meta Information required for writing SOP instance\n        # to a file in PS3.10 format.\n        self.preamble = b\'\\x00\' * 128\n        self.file_meta = Dataset()\n        self.file_meta.DICOMPrefix = \'DICM\'\n        self.file_meta.FilePreamble = self.preamble\n        self.file_meta.TransferSyntaxUID = transfer_syntax_uid\n        self.file_meta.MediaStorageSOPClassUID = str(sop_class_uid)\n        self.file_meta.MediaStorageSOPInstanceUID = str(sop_instance_uid)\n        self.file_meta.FileMetaInformationVersion = b\'\\x00\\x01\'\n        self.file_meta.ImplementationClassUID = \'1.2.826.0.1.3680043.9.7433.1.1\'\n        self.file_meta.ImplementationVersionName = \'{} v{}\'.format(\n            __name__.split(\'.\')[0], __version__\n        )\n        self.fix_meta_info(enforce_standard=True)\n        with BytesIO() as fp:\n            write_file_meta_info(fp, self.file_meta, enforce_standard=True)\n            self.file_meta.FileMetaInformationGroupLength = len(fp.getvalue())\n\n        # Patient\n        self.PatientID = patient_id\n        self.PatientName = patient_name\n        self.PatientBirthDate = patient_birth_date\n        self.PatientSex = patient_sex\n\n        # Study\n        self.StudyInstanceUID = str(study_instance_uid)\n        self.AccessionNumber = accession_number\n        self.StudyID = study_id\n        self.StudyDate = DA(study_date) if study_date is not None else None\n        self.StudyTime = TM(study_time) if study_time is not None else None\n        self.ReferringPhysicianName = referring_physician_name\n\n        # Series\n        self.SeriesInstanceUID = str(series_instance_uid)\n        self.SeriesNumber = series_number\n        self.Modality = modality\n        if series_description is not None:\n            self.SeriesDescription = series_description\n\n        # Equipment\n        self.Manufacturer = manufacturer\n\n        # Instance\n        self.SOPInstanceUID = str(sop_instance_uid)\n        self.SOPClassUID = str(sop_class_uid)\n        self.InstanceNumber = instance_number\n        self.ContentDate = DA(datetime.datetime.now().date())\n        self.ContentTime = TM(datetime.datetime.now().time())\n        if content_qualification is not None:\n            content_qualification = ContentQualificationValues(\n                content_qualification\n            )\n            self.ContentQualification = content_qualification.value\n        if coding_schemes is not None:\n            self.CodingSchemeIdentificationSequence: List[Dataset] = []\n            for item in coding_schemes:\n                if not isinstance(item, CodingSchemeIdentificationItem):\n                    raise TypeError(\n                        \'Coding scheme identification item must have type \'\n                        \'""CodingSchemeIdentificationItem"".\'\n                    )\n                self.CodingSchemeIdentificationSequence.append(item)\n\n    def _copy_attribute(\n            self,\n            dataset: Dataset,\n            keyword: str\n    ) -> None:\n        """"""Copies an attribute from `dataset` to `self`.\n\n        Parameters\n        ----------\n        dataset: pydicom.dataset.Dataset\n            DICOM Data Set from which attribute should be copied\n        keyword: str\n            Keyword of the attribute\n\n        """"""\n        tag = tag_for_keyword(keyword)\n        try:\n            data_element = dataset[tag]\n            logger.debug(\'copied attribute ""{}""\'.format(keyword))\n        except KeyError:\n            logger.debug(\'skipped attribute ""{}""\'.format(keyword))\n            return\n        self.add(data_element)\n\n    def _copy_root_attributes_of_module(\n            self,\n            dataset: Dataset,\n            ie: str\n    ) -> None:\n        """"""Copies all attributes at the root level of a given module from\n        `dataset` to `self`.\n\n        Parameters\n        ----------\n        dataset: pydicom.dataset.Dataset\n            DICOM Data Set from which attribute should be copied\n        ie: str\n            DICOM Information Entity (IE)\n\n        """"""\n        logger.info(\n            \'copy {}-related attributes from dataset ""{}""\'.format(\n                ie, dataset.SOPInstanceUID\n            )\n        )\n        try:\n            sop_class_name = UID_dictionary[dataset.SOPClassUID][0]\n        except KeyError:\n            raise ValueError(\n                \'Could not determine IOD for SOP Class UID ""{}"".\'.format(\n                    dataset.SOPClassUID\n                )\n            )\n        iod_key = sop_class_name.replace(\' Storage\', \'\').replace(\' \', \'-\')\n        iod_key = iod_key.lower()\n        for module_item in IOD_MODULE_MAP[iod_key]:\n            module_key = module_item[\'key\']\n            if module_item[\'ie\'] != ie:\n                continue\n            logger.info(\n                \'copy attributes of module ""{}""\'.format(\n                    \' \'.join([\n                        name.capitalize()\n                        for name in module_key.split(\'-\')\n                    ])\n                )\n            )\n            for item in MODULE_ATTRIBUTE_MAP[module_key]:\n                if len(item[\'path\']) == 0:\n                    self._copy_attribute(dataset, str(item[\'keyword\']))\n\n    def copy_patient_and_study_information(self, dataset: Dataset) -> None:\n        """"""Copies patient- and study-related metadata from `dataset` that\n        are defined in the following modules: Patient, General Study,\n        Patient Study, Clinical Trial Subject and Clinical Trial Study.\n\n        Parameters\n        ----------\n        dataset: pydicom.dataset.Dataset\n            DICOM Data Set from which attributes should be copied\n\n        """"""\n        self._copy_root_attributes_of_module(dataset, \'Patient\')\n        self._copy_root_attributes_of_module(dataset, \'Study\')\n\n    def copy_specimen_information(self, dataset: Dataset) -> None:\n        """"""Copies specimen-related metadata from `dataset` that\n        are defined in the Specimen module.\n\n        Parameters\n        ----------\n        dataset: pydicom.dataset.Dataset\n            DICOM Data Set from which attributes should be copied\n\n        """"""\n        self._copy_root_attributes_of_module(dataset, \'Specimen\')\n\n    @classmethod\n    def from_dataset(cls, dataset: Dataset) -> \'SOPClass\':\n        try:\n            inst = cls(\n                study_instance_uid=dataset.StudyInstanceUID,\n                series_instance_uid=dataset.SeriesInstanceUID,\n                series_number=dataset.SeriesNumber,\n                sop_instance_uid=dataset.SOPInstanceUID,\n                sop_class_uid=dataset.SOPClassUID,\n                instance_number=dataset.InstanceNumber,\n                manufacturer=dataset.Manufacturer,\n                modality=dataset.Modality,\n                transfer_syntax_uid=dataset.file_meta.TransferSyntaxUID,\n                patient_id=dataset.PatientID,\n                patient_name=dataset.PatientName,\n                patient_birth_date=dataset.PatientBirthDate,\n                patient_sex=dataset.PatientSex,\n                accession_number=dataset.AccessionNumber,\n                study_id=dataset.StudyID,\n                study_date=dataset.StudyDate,\n                study_time=dataset.StudyTime,\n                referring_physician_name=dataset.ReferringPhysicianName\n            )\n        except AttributeError as error:\n            raise AttributeError(\n                \'Required attribute missing: {}\'.format(error)\n            )\n        if inst.SOPClassUID != dataset.SOPClassUID:\n            raise AttributeError(\n                \'Incorrect SOP Class UID for type ""{}"".\'.format(cls.__name__)\n            )\n        return inst\n'"
src/highdicom/content.py,12,"b'""""""Generic Data Elements that can be included in a variety of IODs.""""""\nimport datetime\nfrom typing import Any, Dict, List, Optional, Union, Sequence, Tuple\n\nimport numpy as np\nfrom pydicom.dataset import Dataset\nfrom pydicom.sequence import Sequence as DataElementSequence\nfrom pydicom.sr.coding import Code\nfrom pydicom.sr.codedict import codes\n\nfrom highdicom.enum import (\n    CoordinateSystemNames,\n    UniversalEntityIDTypeValues,\n)\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.value_types import (\n    CodeContentItem,\n    ContentSequence,\n    DateTimeContentItem,\n    NumContentItem,\n    TextContentItem,\n)\n\n\nclass AlgorithmIdentificationSequence(DataElementSequence):\n\n    """"""Sequence of data elements describing information useful for\n    identification of an algorithm.\n    """"""\n\n    def __init__(\n            self,\n            name: str,\n            family: Union[Code, CodedConcept],\n            version: str,\n            source: Optional[str] = None,\n            parameters: Optional[Dict[str, str]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        name: str\n            Name of the algorithm\n        family: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Kind of algorithm family\n        version: str\n            Version of the algorithm\n        source: str, optional\n            Source of the algorithm, e.g. name of the algorithm manufacturer\n        parameters: Dict[str: str], optional\n            Name and actual value of the parameters with which the algorithm\n            was invoked\n\n        """"""  # noqa\n        super().__init__()\n        item = Dataset()\n        item.AlgorithmName = name\n        item.AlgorithmVersion = version\n        item.AlgorithmFamilyCodeSequence = [\n            CodedConcept(\n                family.value,\n                family.scheme_designator,\n                family.meaning,\n                family.scheme_version,\n            ),\n        ]\n        if source is not None:\n            item.AlgorithmSource = source\n        if parameters is not None:\n            item.AlgorithmParameters = \',\'.join([\n                \'=\'.join([key, value])\n                for key, value in parameters.items()\n            ])\n        self.append(item)\n\n\nclass PixelMeasuresSequence(DataElementSequence):\n\n    """"""Sequence of data elements describing physical spacing of an image based\n    on the Pixel Measures functional group macro.\n    """"""\n\n    def __init__(\n            self,\n            pixel_spacing: Tuple[float, float],\n            slice_thickness: float,\n            spacing_between_slices: Optional[float] = None,\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        pixel_spacing: Tuple[float, float]\n            Distance in physical space between neighboring pixels in\n            millimeters along the row and column dimension of the image\n        slice_thickness: float\n            Depth of physical space volume the image represents in millimeter\n        spacing_between_slices: float, optional\n            Distance in physical space between two consecutive images in\n            millimeters. Only required for certain modalities, such as MR.\n\n        """"""\n        super().__init__()\n        item = Dataset()\n        item.PixelSpacing = list(pixel_spacing)\n        item.SliceThickness = slice_thickness\n        if spacing_between_slices is not None:\n            item.SpacingBetweenSlices = spacing_between_slices\n        self.append(item)\n\n\nclass PlanePositionSequence(DataElementSequence):\n\n    """"""Sequence of data elements describing the position of an individual plane\n    (frame) in the patient coordinate system based on the Plane Position\n    (Patient) functional group macro or in the slide coordinate system based\n    on the Plane Position (Slide) functional group macro.\n    """"""\n\n    def __init__(\n            self,\n            coordinate_system: Union[str, CoordinateSystemNames],\n            image_position: Tuple[float, float, float],\n            pixel_matrix_position: Optional[Tuple[int, int]] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        image_position: Tuple[float, float, float]\n            Offset of the first row and first column of the plane (frame) in\n            millimeter along the x, y, and z axis of the three-dimensional\n            patient or slide coordinate system\n        pixel_matrix_position: Tuple[int, int], optional\n            Offset of the first row and first column of the plane (frame) in\n            pixels along the row and column direction of the total pixel matrix\n            (only required if `coordinate_system` is ``""SLIDE""``)\n\n        """"""\n        super().__init__()\n        item = Dataset()\n        if coordinate_system == CoordinateSystemNames.SLIDE:\n            if pixel_matrix_position is None:\n                raise TypeError(\n                    \'Position in Pixel Matrix must be specified for \'\n                    \'slide coordinate system.\'\n                )\n            row_position, col_position = pixel_matrix_position\n            item.XOffsetInSlideCoordinateSystem = image_position[0]\n            item.YOffsetInSlideCoordinateSystem = image_position[1]\n            item.ZOffsetInSlideCoordinateSystem = image_position[2]\n            item.RowPositionInTotalImagePixelMatrix = row_position\n            item.ColumnPositionInTotalImagePixelMatrix = col_position\n        elif coordinate_system == CoordinateSystemNames.PATIENT:\n            item.ImagePositionPatient = list(image_position)\n        self.append(item)\n\n    def __eq__(self, other: Any) -> bool:\n        """"""Determines whether two image planes have the same position.\n\n        Parameters\n        ----------\n        other: highdicom.content.PlanePositionSequence\n            Plane position of other image that should be compared\n\n        Returns\n        -------\n        bool\n            Whether the two image planes have the same position\n\n        """"""\n        if not isinstance(other, self.__class__):\n            raise TypeError(\n                \'Can only compare image position between instances of \'\n                \'class ""{}"".\'.format(self.__class__.__name__)\n            )\n        if hasattr(self[0], \'ImagePositionPatient\'):\n            return np.array_equal(\n                np.array(other[0].ImagePositionPatient),\n                np.array(self[0].ImagePositionPatient)\n            )\n        else:\n            return np.array_equal(\n                np.array([\n                    other[0].XOffsetInSlideCoordinateSystem,\n                    other[0].YOffsetInSlideCoordinateSystem,\n                    other[0].ZOffsetInSlideCoordinateSystem,\n                ]),\n                np.array([\n                    self[0].XOffsetInSlideCoordinateSystem,\n                    self[0].YOffsetInSlideCoordinateSystem,\n                    self[0].ZOffsetInSlideCoordinateSystem,\n                ]),\n            )\n\n\nclass PlaneOrientationSequence(DataElementSequence):\n\n    """"""Sequence of data elements describing the image position in the patient\n    or slide coordinate system based on either the Plane Orientation (Patient)\n    or the Plane Orientation (Slide) functional group macro, respectively.\n    """"""\n\n    def __init__(\n            self,\n            coordinate_system: Union[str, CoordinateSystemNames],\n            image_orientation: Tuple[float, float, float, float, float, float]\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        coordinate_system: Union[str, highdicom.enum.CoordinateSystemNames]\n            Subject (``""PATIENT""`` or ``""SLIDE""``) that was the target of\n            imaging\n        image_orientation: Tuple[float, float, float, float, float, float]\n            Direction cosines for the first row (first triplet) and the first\n            column (second triplet) of an image with respect to the x, y, and z\n            axis of the three-dimensional coordinate system\n\n        """"""\n        super().__init__()\n        coordinate_system = CoordinateSystemNames(coordinate_system)\n        item = Dataset()\n        if coordinate_system == CoordinateSystemNames.SLIDE:\n            item.ImageOrientationSlide = list(image_orientation)\n        elif coordinate_system == CoordinateSystemNames.PATIENT:\n            item.ImageOrientationPatient = list(image_orientation)\n        self.append(item)\n\n    def __eq__(self, other: Any) -> bool:\n        """"""Determines whether two image planes have the same orientation.\n\n        Parameters\n        ----------\n        other: highdicom.content.PlaneOrientationSequence\n            Plane position of other image that should be compared\n\n        Returns\n        -------\n        bool\n            Whether the two image planes have the same orientation\n\n        """"""\n        if not isinstance(other, self.__class__):\n            raise TypeError(\n                \'Can only compare orientation between instances of \'\n                \'class ""{}"".\'.format(self.__class__.__name__)\n            )\n        if hasattr(self[0], \'ImageOrientationPatient\'):\n            if not hasattr(other[0], \'ImageOrientationPatient\'):\n                raise AttributeError(\n                    \'Can only compare orientation between images that \'\n                    \'share the same coordinate system.\'\n                )\n            return np.array_equal(\n                np.array(other[0].ImageOrientationPatient),\n                np.array(self[0].ImageOrientationPatient)\n            )\n        elif hasattr(self[0], \'ImageOrientationSlide\'):\n            if not hasattr(other[0], \'ImageOrientationSlide\'):\n                raise AttributeError(\n                    \'Can only compare orientations between images that \'\n                    \'share the same coordinate system.\'\n                )\n            return np.array_equal(\n                np.array(other[0].ImageOrientationSlide),\n                np.array(self[0].ImageOrientationSlide)\n            )\n        else:\n            return False\n\n\nclass IssuerOfIdentifier(Dataset):\n\n    """"""Dataset describing the issuer or a specimen or container identifier.""""""\n\n    def __init__(\n            self,\n            issuer_of_identifier: str,\n            issuer_of_identifier_type: Optional[\n                Union[str, UniversalEntityIDTypeValues]\n            ] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        issuer_of_identifier: str\n            Identifier of the entity that created the examined specimen\n        issuer_of_identifier_type: Union[str, highdicom.enum.UniversalEntityIDTypeValues], optional\n            Type of identifier of the entity that created the examined specimen\n            (required if `issuer_of_specimen_id` is a Unique Entity ID)\n\n        """"""  # noqa\n        super().__init__()\n        if issuer_of_identifier_type is None:\n            self.LocalNamespaceEntityID = issuer_of_identifier\n        else:\n            self.UniversalEntityID = issuer_of_identifier\n            issuer_of_identifier_type = UniversalEntityIDTypeValues(\n                issuer_of_identifier_type\n            )\n            self.UniversalEntityIDType = issuer_of_identifier_type.value\n\n\nclass SpecimenCollection(ContentSequence):\n\n    """"""Sequence of structured reporting content item describing a specimen\n    collection procedure.\n    """"""\n\n    def __init__(\n            self,\n            procedure: Union[Code, CodedConcept]\n        ):\n        """"""\n        Parameters\n        ----------\n        procedure: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Procedure used to collect the examined specimen\n\n        """"""  # noqa\n        super().__init__()\n        item = CodeContentItem(\n            name=codes.SCT.SpecimenCollection,\n            value=procedure\n        )\n        self.append(item)\n\n\nclass SpecimenSampling(ContentSequence):\n\n    """"""Sequence of structured reporting content item describing a specimen\n    sampling procedure according to structured reporting template TID 8002\n    Specimen Sampling.\n    """"""\n\n    def __init__(\n            self,\n            method: Union[Code, CodedConcept],\n            parent_specimen_id: str,\n            parent_specimen_type: Union[Code, CodedConcept],\n            issuer_of_parent_specimen_id: Optional[IssuerOfIdentifier] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        method: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Method used to sample the examined specimen from a parent specimen\n        parent_specimen_id: str\n            Identifier of the parent specimen\n        parent_specimen_type: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Type of the parent specimen\n        issuer_of_parent_specimen_id: highdicom.content.IssuerOfIdentifier, optional\n            Issuer who created the parent specimen\n\n        """"""  # noqa\n        super().__init__()\n        # CID 8110\n        method_item = CodeContentItem(\n            name=codes.DCM.SamplingMethod,\n            value=method\n        )\n        self.append(method_item)\n        parent_specimen_identitier_item = TextContentItem(\n            name=codes.DCM.ParentSpecimenIdentifier,\n            value=parent_specimen_id\n        )\n        self.append(parent_specimen_identitier_item)\n        if issuer_of_parent_specimen_id is not None:\n            try:\n                entity_id = issuer_of_parent_specimen_id.UniversalEntityID\n            except AttributeError:\n                entity_id = issuer_of_parent_specimen_id.LocalNamespaceEntityID\n            issuer_of_parent_specimen_identitier_item = TextContentItem(\n                name=codes.DCM.IssuerOfParentSpecimenIdentifier,\n                value=entity_id\n            )\n            self.append(issuer_of_parent_specimen_identitier_item)\n        # CID 8103\n        parent_specimen_type_item = CodeContentItem(\n            name=codes.DCM.ParentSpecimenType,\n            value=parent_specimen_type\n        )\n        self.append(parent_specimen_type_item)\n\n\nclass SpecimenStaining(ContentSequence):\n\n    """"""Sequence of structured reporting content item describing a specimen\n    staining procedure according to structured reporting template TID 8003\n    Specimen Staining.\n    """"""\n\n    def __init__(\n            self,\n            substances: Sequence[Union[Code, CodedConcept]]\n        ):\n        """"""\n        Parameters\n        ----------\n        substances: Sequence[Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]]\n            Substances used to stain examined specimen(s)\n\n        """"""  # noqa\n        super().__init__()\n        # CID 8112\n        for s in substances:\n            item = CodeContentItem(\n                name=codes.SCT.UsingSubstance,\n                value=s\n            )\n            self.append(item)\n\n\nclass SpecimenPreparationStep(ContentSequence):\n\n    """"""Dataset describing a specimen preparation step according to\n    structured reporting template TID 8001 Specimen Preparation.\n    """"""\n\n    def __init__(\n            self,\n            specimen_id: str,\n            processing_type: Union[Code, CodedConcept],\n            processing_procedure: Union[\n                SpecimenCollection,\n                SpecimenSampling,\n                SpecimenStaining,\n            ],\n            processing_description: Optional[\n                Union[str, Code, CodedConcept]\n            ] = None,\n            processing_datetime: Optional[datetime.datetime] = None,\n            issuer_of_specimen_id: Optional[IssuerOfIdentifier] = None,\n            fixative: Optional[Union[Code, CodedConcept]] = None,\n            embedding_medium: Optional[Union[Code, CodedConcept]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        specimen_id: str\n            Identifier of the processed specimen\n        processing_type: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Type of processing\n        processing_procedure: Union[highdicom.content.SpecimenCollection, highdicom.content.SpecimenSampling, highdicom.content.SpecimenStaining]\n            Procedure used during processing\n        processing_datetime: datetime.datetime, optional\n            Datetime of processing\n        processing_description: Union[str, pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept], optional\n            Description of processing\n        issuer_of_specimen_id: highdicom.content.IssuerOfIdentifier, optional\n        fixative: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept], optional\n            Fixative used during processing\n        embedding_medium: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept], optional\n            Embedding medium used during processing\n\n        """"""  # noqa\n        super().__init__()\n        specimen_identifier_item = TextContentItem(\n            name=codes.DCM.SpecimenIdentifier,\n            value=specimen_id\n        )\n        self.append(specimen_identifier_item)\n        if issuer_of_specimen_id is not None:\n            self.append(issuer_of_specimen_id)\n        # CID 8111\n        processing_type_item = CodeContentItem(\n            name=codes.DCM.ProcessingType,\n            value=processing_type\n        )\n        self.append(processing_type_item)\n        if processing_datetime is not None:\n            processing_datetime_item = DateTimeContentItem(\n                name=codes.DCM.DateTimeOfProcessing,\n                value=processing_datetime\n            )\n            self.append(processing_datetime_item)\n        if processing_description is not None:\n            if isinstance(processing_description, str):\n                processing_description_item = TextContentItem(\n                    name=codes.DCM.ProcessingStepDescription,\n                    value=processing_description\n                )\n            else:\n                processing_description_item = CodeContentItem(\n                    name=codes.DCM.ProcessingStepDescription,\n                    value=processing_description\n                )\n            self.append(processing_description_item)\n        accepted_procedure_types = (\n            SpecimenCollection,\n            SpecimenSampling,\n            SpecimenStaining,\n        )\n        if not isinstance(processing_procedure, accepted_procedure_types):\n            raise TypeError(\n                \'Unknown procedure of specimen preparation step.\'\n            )\n        self.extend(processing_procedure)\n        if fixative is not None:\n            tissue_fixative_item = CodeContentItem(\n                name=codes.SCT.TissueFixative,\n                value=fixative\n            )\n            self.append(tissue_fixative_item)\n        if embedding_medium is not None:\n            embedding_medium_item = CodeContentItem(\n                name=codes.SCT.EmbeddingMedium,\n                value=embedding_medium\n            )\n            self.append(embedding_medium_item)\n\n\nclass SpecimenDescription(Dataset):\n\n    """"""Dataset describing a specimen.""""""\n\n    def __init__(\n            self,\n            specimen_id: str,\n            specimen_uid: str,\n            specimen_location: Optional[\n                Union[str, Tuple[float, float, float]]\n            ] = None,\n            specimen_preparation_steps: Optional[\n                Sequence[SpecimenPreparationStep]\n            ] = None,\n            issuer_of_specimen_id: Optional[IssuerOfIdentifier] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        specimen_id: str\n            Identifier of the examined specimen\n        specimen_uid: str\n            Unique identifier of the examined specimen\n        specimen_location: Union[str, Tuple[float, float, float]], optional\n            Location of the examined specimen relative to the container\n            provided either in form of text or in form of spatial x, y, z\n            coordinates specifying the position (offset) relative to the\n            three-dimensional slide coordinate system\n        specimen_preparation_steps: Sequence[highdicom.content.SpecimenPreparationStep], optional\n            Steps that were applied during the preparation of the examined\n            specimen in the laboratory prior to image acquisition\n        issuer_of_specimen_id: highdicom.content.IssuerOfIdentifier, optional\n            Description of the issuer of the specimen identifier\n\n        """"""  # noqa\n        super().__init__()\n        self.SpecimenIdentifier = specimen_id\n        self.SpecimenUID = specimen_uid\n        self.SpecimenPreparationSequence: List[Dataset] = []\n        if specimen_preparation_steps is not None:\n            for step in specimen_preparation_steps:\n                if not isinstance(step, ContentSequence):\n                    raise TypeError(\n                        \'Each specimen preparation step must be provided as \'\n                        \'a sequence of content items.\'\n                    )\n                step_item = Dataset()\n                step_item.SpecimenPreparationStepContentItemSequence = step\n                self.SpecimenPreparationSequence.append(step_item)\n        if specimen_location is not None:\n            loc_seq = []\n            if isinstance(specimen_location, str):\n                loc_item = TextContentItem(\n                    name=codes.DCM.LocationOfSpecimen,\n                    value=specimen_location\n                )\n                loc_seq.append(loc_item)\n            elif isinstance(specimen_location, tuple):\n                names = (\n                    codes.DCM.LocationOfSpecimenXOffset,\n                    codes.DCM.LocationOfSpecimenYOffset,\n                    codes.DCM.LocationOfSpecimenZOffset,\n                )\n                for i, coordinate in enumerate(specimen_location):\n                    loc_item = NumContentItem(\n                        name=names[i],\n                        value=coordinate,\n                    )\n                    loc_seq.append(loc_item)\n            self.SpecimenLocalizationContentItemSequence = loc_seq\n        self.IssuerOfTheSpecimenIdentifierSequence: List[Dataset] = []\n        if issuer_of_specimen_id is not None:\n            self.IssuerOfTheSpecimenIdentifierSequence.append(\n                issuer_of_specimen_id\n            )\n'"
src/highdicom/enum.py,0,"b'""""""Enumerated values.""""""\nfrom enum import Enum\n\n\nclass CoordinateSystemNames(Enum):\n\n    """"""Enumerated values for coordinate system names.""""""\n\n    PATIENT = \'PATIENT\'\n    SLIDE = \'SLIDE\'\n\n\nclass ContentQualificationValues(Enum):\n\n    """"""Enumerated values for Content Qualification attribute.""""""\n\n    PRODUCT = \'PRODUCT\'\n    RESEARCH = \'RESEARCH\'\n    SERVICE = \'SERVICE\'\n\n\nclass DimensionOrganizationTypeValues(Enum):\n\n    """"""Enumerated values for Dimension Organization Type attribute.""""""\n\n    THREE_DIMENSIONAL = \'3D\'\n    THREE_DIMENSIONAL_TEMPORAL = \'3D_TEMPORAL\'\n    TILED_FULL = \'TILED_FULL\'\n    TILED_SPARSE = \'TILED_SPARSE\'\n\n\nclass PhotometricInterpretationValues(Enum):\n\n    """"""Enumerated values for Photometric Interpretation attribute.""""""\n\n    MONOCHROME1 = \'MONOCHROME1\'\n    MONOCHROME2 = \'MONOCHROME2\'\n    PALETTE_COLOR = \'PALETTE COLOR\'\n    RGB = \'RGB\'\n    YBR_FULL = \'YBR_FULL\'\n    YBR_FULL_422 = \'YBR_FULL_422\'\n    YBR_PARTIAL_420 = \'YBR_PARTIAL_420\'\n    YBR_ICT = \'YBR_ICT\'\n    YBR_RCT = \'YBR_RCT\'\n\n\nclass LateralityValues(Enum):\n\n    """"""Enumerated values for Laterality attribute.""""""\n\n    R = \'R\'\n    L = \'L\'\n\n\nclass AnatomicalOrientationTypeValues(Enum):\n\n    """"""Enumerated values for Anatomical Orientation Type attribute.""""""\n\n    BIPED = \'BIPED\'\n    QUADRUPED = \'QUADRUPED\'\n\n\nclass PatientOrientationValuesBiped(Enum):\n\n    """"""Enumerated values for Patient Orientation attribute\n    if Anatomical Orientation Type attribute has value ``""BIPED""``.\n    """"""\n\n    A = \'A\'\n    P = \'P\'\n    R = \'R\'\n    L = \'L\'\n    H = \'H\'\n    F = \'F\'\n\n\nclass PatientOrientationValuesQuadruped(Enum):\n\n    """"""Enumerated values for Patient Orientation attribute\n    if Anatomical Orientation Type attribute has value ``""QUADRUPED""``.\n    """"""\n\n    LE = \'LE\'\n    RT = \'RT\'\n    D = \'D\'\n    V = \'V\'\n    CR = \'CR\'\n    CD = \'CD\'\n    R = \'R\'\n    M = \'M\'\n    L = \'L\'\n    PR = \'PR\'\n    DI = \'DI\'\n    PA = \'PA\'\n    PL = \'PL\'\n\n\nclass UniversalEntityIDTypeValues(Enum):\n\n    """"""Enumerated values for Universal Entity ID Type attribute.""""""\n\n    DNS = \'DNS\'\n    EUI64 = \'EUI64\'\n    ISO = \'ISO\'\n    URI = \'URI\'\n    UUID = \'UUID\'\n    X400 = \'X400\'\n    X500 = \'X500\'\n'"
src/highdicom/uid.py,0,"b'import logging\n\nimport pydicom\n\nlogger = logging.getLogger(__name__)\n\n\nclass UID(pydicom.uid.UID):\n\n    """"""Unique DICOM identifier with a highdicom-specific UID prefix.""""""\n\n    def __new__(cls: type) -> str:\n        prefix = \'1.2.826.0.1.3680043.10.511.3.\'\n        identifier = pydicom.uid.generate_uid(prefix=prefix)\n        return super().__new__(cls, identifier)\n'"
src/highdicom/utils.py,7,"b'import itertools\nfrom typing import Iterator, Tuple\n\nimport numpy as np\n\nfrom highdicom.content import PlanePositionSequence\nfrom highdicom.enum import CoordinateSystemNames\n\n\ndef tile_pixel_matrix(\n        total_pixel_matrix_rows: int,\n        total_pixel_matrix_columns: int,\n        rows: int,\n        columns: int,\n        image_orientation: Tuple[float, float, float, float, float, float]\n    ) -> Iterator[Tuple[int, int]]:\n    """"""Tiles an image into smaller frames given the size of the\n    total pixel matrix, the size of each frame and the orientation of the image\n    with respect to the three-dimensional slide coordinate system.\n\n    Parameters\n    ----------\n    total_pixel_matrix_rows: int\n        Number of rows in the total pixel matrix\n    total_pixel_matrix_columns: int\n        Number of columns in the total pixel matrix\n    rows: int\n        Number of rows per tile\n    columns: int\n        Number of columns per tile\n    image_orientation: Tuple[float, float, float, float, float, float]\n        Cosines of row (first triplet) and column (second triplet) direction\n        for x, y and z axis of the slide coordinate system\n\n    Returns\n    -------\n    Iterator\n        One-based row, column coordinates of each image tile\n\n    """"""\n    tiles_per_row = int(np.ceil(total_pixel_matrix_rows / rows))\n    tiles_per_col = int(np.ceil(total_pixel_matrix_columns / columns))\n    if tuple(image_orientation[:3]) == (0.0, -1.0, 0.0):\n        tile_row_indices = reversed(range(1, tiles_per_row + 1))\n    else:\n        tile_row_indices = iter(range(1, tiles_per_row + 1))\n    if tuple(image_orientation[3:]) == (-1.0, 0.0, 0.0):\n        tile_col_indices = reversed(range(1, tiles_per_col + 1))\n    else:\n        tile_col_indices = iter(range(1, tiles_per_col + 1))\n    return itertools.product(tile_row_indices, tile_col_indices)\n\n\ndef compute_plane_positions_tiled_full(\n        row_index: int,\n        column_index: int,\n        depth_index: int,\n        x_offset: float,\n        y_offset: float,\n        z_offset: float,\n        rows: int,\n        columns: int,\n        image_orientation: Tuple[float, float, float, float, float, float],\n        pixel_spacing: Tuple[float, float],\n        slice_thickness: float,\n        spacing_between_slices: float\n    ) -> PlanePositionSequence:\n    """"""Computes the absolute position of a plane (frame) in the\n    three-dimensional slide coordinate system given their relative position\n    in the Total Pixel Matrix.\n    This information is not provided in image instances with Dimension\n    Orientation Type TILED_FULL and therefore needs to be computed.\n\n    Parameters\n    ----------\n    row_index: int\n        Relative one-based index value for a given frame along the row\n        direction of the the tiled total pixel matrix, which is defined by\n        the first triplet in `image_orientation`\n    column_index: int\n        Relative one-based index value for a given frame along the column\n        direction of the the tiled total pixel matrix, which is defined by\n        the second triplet in `image_orientation`\n    depth_index: int\n        Relative one-based index value for a given frame along the depth\n        direction from the glass slide to the coverslip (focal plane)\n    x_offset_image: float\n        X offset of the total pixel matrix in the slide coordinate system\n    y_offset_image: float\n        Y offset of the total pixel matrix in the slide coordinate system\n    z_offset_image: float\n        Z offset of the total pixel matrix (focal plane) in the slide\n        coordinate system\n    rows: int\n        Number of rows per tile\n    columns: int\n        Number of columns per tile\n    image_orientation: Tuple[float, float, float, float, float, float]\n        Cosines of row (first triplet) and column (second triplet) direction\n        for x, y and z axis of the slide coordinate system\n    pixel_spacing: Tuple[float, float]\n        Physical distance between the centers of neighboring pixels along\n        the row and column direction\n    slice_thickness: float\n        Physical thickness of a focal plane\n    spacing_between_slices: float\n        Physical distance between neighboring focal planes\n\n    Returns\n    -------\n    highdicom.content.PlanePositionSequence\n        Positon of each plane in the slide coordinate system\n\n    """"""\n    row_offset_frame = ((row_index - 1) * rows) + 1\n    column_offset_frame = ((column_index - 1) * columns) + 1\n    # We need to take rotation of pixel matrix relative to slide into account.\n    # According to the standard, we only have to deal with planar rotations by\n    # 180 degrees along the row and/or column direction.\n    if tuple([float(v) for v in image_orientation[:3]]) == (0.0, -1.0, 0.0):\n        x_func = np.subtract\n    else:\n        x_func = np.add\n    x_offset_frame = float(x_func(\n        x_offset,\n        (row_offset_frame * pixel_spacing[1])\n    ))\n    if tuple([float(v) for v in image_orientation[3:]]) == (-1.0, 0.0, 0.0):\n        y_func = np.subtract\n    else:\n        y_func = np.add\n    y_offset_frame = float(y_func(\n        y_offset,\n        (column_offset_frame * pixel_spacing[0])\n    ))\n    z_offset_frame = float(np.sum([\n        z_offset,\n        (float(depth_index - 1) * slice_thickness),\n        (float(depth_index - 1) * spacing_between_slices)\n    ]))\n    return PlanePositionSequence(\n        coordinate_system=CoordinateSystemNames.SLIDE,\n        image_position=(x_offset_frame, y_offset_frame, z_offset_frame),\n        pixel_matrix_position=(row_offset_frame, column_offset_frame)\n    )\n'"
src/highdicom/version.py,0,"b""__version__ = '0.5.0rc'\n"""
src/highdicom/legacy/__init__.py,0,"b'""""""Package for creation of Legacy Converted Enhanced CT, MR or PET Image\ninstances.\n""""""\n\nSOP_CLASS_UIDS = {\n    \'1.2.840.10008.5.1.4.1.1.4.4\',    # Legacy Converted Enhanced MR Image\n    \'1.2.840.10008.5.1.4.1.1.2.2\',    # Legacy Converted Enhanced CT Image\n    \'1.2.840.10008.5.1.4.1.1.128.1\',  # Legacy Converted Enhanced PET Image\n}\n'"
src/highdicom/legacy/sop.py,0,"b'""""""Module for SOP Classes of Legacy Converted Enhanced Image IODs.""""""\n\nimport logging\nfrom collections import defaultdict\nfrom typing import Any, Dict, List, Optional, Sequence, Union\n\nimport numpy as np\nfrom pydicom.datadict import tag_for_keyword\nfrom pydicom.dataset import Dataset\nfrom pydicom.tag import Tag\nfrom pydicom.uid import UID\n\nfrom highdicom.base import SOPClass\nfrom highdicom.legacy import SOP_CLASS_UIDS\nfrom highdicom._iods import IOD_MODULE_MAP\nfrom highdicom._modules import MODULE_ATTRIBUTE_MAP\n\n\nlogger = logging.getLogger(__name__)\n\n\nLEGACY_ENHANCED_SOP_CLASS_UID_MAP = {\n    # CT Image Storage\n    \'1.2.840.10008.5.1.4.1.1.2\': \'1.2.840.10008.5.1.4.1.1.2.2\',\n    # MR Image Storage\n    \'1.2.840.10008.5.1.4.1.1.4\': \'1.2.840.10008.5.1.4.1.1.4.4\',\n    # PET Image Storage\n    \'1.2.840.10008.5.1.4.1.1.128\': \'1.2.840.10008.5.1.4.1.1.128.1\',\n}\n\n\n_SOP_CLASS_UID_IOD_KEY_MAP = {\n    \'1.2.840.10008.5.1.4.1.1.2.2\':   \'legacy-converted-enhanced-ct-image\',\n    \'1.2.840.10008.5.1.4.1.1.4.4\':   \'legacy-converted-enhanced-mr-image\',\n    \'1.2.840.10008.5.1.4.1.1.128.1\': \'legacy-converted-enhanced-pet-image\',\n}\n\n\ndef _convert_legacy_to_enhanced(\n        sf_datasets: Sequence[Dataset],\n        mf_dataset: Optional[Dataset] = None\n    ) -> Dataset:\n    """"""Converts one or more MR, CT or PET Image instances into one\n    Legacy Converted Enhanced MR/CT/PET Image instance by copying information\n    from `sf_datasets` into `mf_dataset`.\n\n    Parameters\n    ----------\n    sf_datasets: Sequence[pydicom.dataset.Dataset]\n        DICOM data sets of single-frame legacy image instances\n    mf_dataset: pydicom.dataset.Dataset, optional\n        DICOM data set of multi-frame enhanced image instance\n\n    Returns\n    -------\n    pydicom.dataset.Dataset\n        DICOM data set of enhanced multi-frame image instance\n\n    Note\n    ----\n    Frames will be included into the Pixel Data element in the order in\n    which instances are provided via `sf_datasets`.\n\n    """"""\n    try:\n        ref_ds = sf_datasets[0]\n    except IndexError:\n        raise ValueError(\'No data sets of single-frame legacy images provided.\')\n\n    if mf_dataset is None:\n        mf_dataset = Dataset()\n\n    transfer_syntaxes = set()\n    series = set()\n    studies = set()\n    modalities = set()\n    for ds in sf_datasets:\n        transfer_syntaxes.add(ds.file_meta.TransferSyntaxUID)\n        series.add(ds.SeriesInstanceUID)\n        studies.add(ds.StudyInstanceUID)\n        modalities.add(ds.Modality)\n    if len(series) > 1:\n        raise ValueError(\n            \'All instances must belong to the same series.\'\n        )\n    if len(studies) > 1:\n        raise ValueError(\n            \'All instances must belong to the same study.\'\n        )\n    if len(modalities) > 1:\n        raise ValueError(\n            \'All instances must have the same modality.\'\n        )\n    if len(transfer_syntaxes) > 1:\n        raise ValueError(\n            \'All instances must have the same transfer syntaxes.\'\n        )\n\n    sop_class_uid = LEGACY_ENHANCED_SOP_CLASS_UID_MAP[ref_ds.SOPClassUID]\n\n    mf_dataset.NumberOfFrames = len(sf_datasets)\n\n    # We will ignore some attributes, because they will get assigned new\n    # values in the legacy converted enhanced image instance.\n    ignored_attributes = {\n        tag_for_keyword(\'NumberOfFrames\'),\n        tag_for_keyword(\'InstanceNumber\'),\n        tag_for_keyword(\'SOPClassUID\'),\n        tag_for_keyword(\'SOPInstanceUID\'),\n        tag_for_keyword(\'PixelData\'),\n        tag_for_keyword(\'SeriesInstanceUID\'),\n    }\n\n    mf_attributes = []\n    iod_key = _SOP_CLASS_UID_IOD_KEY_MAP[sop_class_uid]\n    for module_item in IOD_MODULE_MAP[iod_key]:\n        module_key = module_item[\'key\']\n        for attr_item in MODULE_ATTRIBUTE_MAP[module_key]:\n            # Only root-level attributes\n            if len(attr_item[\'path\']) > 0:\n                continue\n            tag = tag_for_keyword(attr_item[\'keyword\'])\n            if tag in ignored_attributes:\n                continue\n            mf_attributes.append(tag)\n\n    # Assign attributes that are not defined at the root level of the\n    # Lecacy Converted Enhanced MR/CT/PET Image IOD to the appropriate\n    # sequence attributes of the SharedFunctinoalGroupsSequence or\n    # PerFrameFunctionalGroupsSequence attributes. Collect all unassigned\n    # attributes (we will deal with them later on).\n    # IODs only cover the modules, but not functional group macros.\n    # Therefore, we need to handle those separately.\n    assigned_attributes = {\n        # shared\n        tag_for_keyword(\'ImageOrientationPatient\'),\n        tag_for_keyword(\'PixelSpacing\'),\n        tag_for_keyword(\'SliceThickness\'),\n        tag_for_keyword(\'SpacingBetweenSlices\'),\n        # per-frame\n        tag_for_keyword(\'ImageType\'),\n        tag_for_keyword(\'AcquisitionDate\'),\n        tag_for_keyword(\'AcquisitionTime\'),\n        tag_for_keyword(\'InstanceNumber\'),\n        tag_for_keyword(\'SOPClassUID\'),\n        tag_for_keyword(\'SOPInstanceUID\'),\n        tag_for_keyword(\'ImagePositionPatient\'),\n        tag_for_keyword(\'WindowCenter\'),\n        tag_for_keyword(\'WindowWidth\'),\n        tag_for_keyword(\'ReferencedImageSequence\'),\n        tag_for_keyword(\'SourceImageSequence\'),\n        tag_for_keyword(\'BodyPartExamined\'),\n        tag_for_keyword(\'IrradiationEventUID\'),\n        tag_for_keyword(\'RescaleIntercept\'),\n        tag_for_keyword(\'RescaleSlope\'),\n        tag_for_keyword(\'RescaleType\'),\n    }\n\n    if ref_ds.ImageType[0] == \'ORIGINAL\':\n        mf_dataset.VolumeBasedCalculationTechnique = \'NONE\'\n    else:\n        mf_dataset.VolumeBasedCalculationTechnique = \'MIXED\'\n\n    pixel_representation = sf_datasets[0].PixelRepresentation\n    volumetric_properties = \'VOLUME\'\n    unique_image_types = set()\n    unassigned_dataelements: Dict[str, List[Dataset]] = defaultdict(list)\n\n    # Per-Frame Functional Groups\n    perframe_items = []\n    for i, ds in enumerate(sf_datasets):\n        perframe_item = Dataset()\n\n        # Frame Content (M)\n        frame_content_item = Dataset()\n        if \'AcquisitionDate\' in ds and \'AcquisitionTime\' in ds:\n            frame_content_item.FrameAcquisitionDateTime = \'{}{}\'.format(\n                ds.AcquisitionDate,\n                ds.AcquisitionTime\n            )\n        frame_content_item.FrameAcquisitionNumber = ds.InstanceNumber\n        perframe_item.FrameContentSequence = [\n            frame_content_item,\n        ]\n\n        # Plane Position (Patient) (M)\n        plane_position_item = Dataset()\n        plane_position_item.ImagePositionPatient = ds.ImagePositionPatient\n        perframe_item.PlanePositionSequence = [\n            plane_position_item,\n        ]\n\n        frame_type = list(ds.ImageType)\n        if len(frame_type) < 4:\n            if frame_type[0] == \'ORIGINAL\':\n                frame_type.append(\'NONE\')\n            else:\n                logger.warn(\'unknown derived pixel contrast\')\n                frame_type.append(\'OTHER\')\n        unique_image_types.add(tuple(frame_type))\n        frame_type_item = Dataset()\n        frame_type_item.FrameType = frame_type\n        frame_type_item.PixelRepresentation = pixel_representation\n        frame_type_item.VolumetricProperties = volumetric_properties\n        if frame_type[0] == \'ORIGINAL\':\n            frame_type_item.FrameVolumeBasedCalculationTechnique = \'NONE\'\n        else:\n            frame_type_item.FrameVolumeBasedCalculationTechnique = \'MIXED\'\n\n        if sop_class_uid == \'1.2.840.10008.5.1.4.1.1.4.4\':\n            # MR Image Frame Type (M)\n            perframe_item.MRImageFrameTypeSequence = [\n                frame_type_item,\n            ]\n\n        elif sop_class_uid == \'1.2.840.10008.5.1.4.1.1.2.2\':\n            # CT Image Frame Type (M)\n            perframe_item.CTImageFrameTypeSequence = [\n                frame_type_item,\n            ]\n\n            # CT Pixel Value Transformation (M)\n            pixel_val_transform_item = Dataset()\n            pixel_val_transform_item.RescaleIntercept = ds.RescaleIntercept\n            pixel_val_transform_item.RescaleSlope = ds.RescaleSlope\n            try:\n                pixel_val_transform_item.RescaleType = ds.RescaleType\n            except AttributeError:\n                pixel_val_transform_item.RescaleType = \'US\'\n            perframe_item.PixelValueTransformationSequence = [\n                pixel_val_transform_item,\n            ]\n\n        elif sop_class_uid == \'1.2.840.10008.5.1.4.1.1.128.1\':\n            # PET Image Frame Type (M)\n            perframe_item.PETImageFrameTypeSequence = [\n                frame_type_item,\n            ]\n\n        # Frame VOI LUT (U)\n        try:\n            frame_voi_lut_item = Dataset()\n            frame_voi_lut_item.WindowCenter = ds.WindowCenter\n            frame_voi_lut_item.WindowWidth = ds.WindowWidth\n            perframe_item.FrameVOILUTSequence = [\n                frame_voi_lut_item,\n            ]\n        except AttributeError:\n            pass\n\n        # Referenced Image (C)\n        try:\n            perframe_item.ReferencedImageSequence = \\\n                ds.ReferencedImageSequence\n        except AttributeError:\n            pass\n\n        # Derivation Image (C)\n        try:\n            perframe_item.SourceImageSequence = ds.SourceImageSequence\n        except AttributeError:\n            pass\n\n        # Frame Anatomy (C)\n        try:\n            frame_anatomy_item = Dataset()\n            frame_anatomy_item.BodyPartExamined = ds.BodyPartExamined\n            perframe_item.FrameAnatomySequence = [\n                frame_anatomy_item,\n            ]\n        except AttributeError:\n            pass\n\n        # Image Frame Conversion Source (C)\n        conv_src_attr_item = Dataset()\n        conv_src_attr_item.ReferencedSOPClassUID = ds.SOPClassUID\n        conv_src_attr_item.ReferencedSOPInstanceUID = ds.SOPInstanceUID\n        perframe_item.ConversionSourceAttributesSequence = [\n            conv_src_attr_item,\n        ]\n\n        # Irradiation Event Identification (C) - CT/PET only\n        try:\n            irradiation_event_id_item = Dataset()\n            irradiation_event_id_item.IrradiationEventUID = \\\n                ref_ds.IrradiationEventUID\n            perframe_item.IrradiationEventIdentificationSequence = [\n                irradiation_event_id_item,\n            ]\n        except AttributeError:\n            pass\n\n        # Temporal Position (U)\n        try:\n            temporal_position_item = Dataset()\n            temporal_position_item.TemporalPositionTimeOffset = \\\n                ref_ds.TemporalPositionTimeOffset\n            perframe_item.TemporalPositionSequence = [\n                temporal_position_item,\n            ]\n        except AttributeError:\n            pass\n\n        # Cardiac Synchronization (U)\n        # TODO: http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.16.2.html#sect_C.7.6.16.2.7  # noqa\n\n        # Contrast/Bolus Usage (U) - MR/CT only\n        # TODO: http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.16.2.html#sect_C.7.6.16.2.12  # noqa\n\n        # Respiratory Synchronization (U)\n        # TODO: http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.16.2.html#sect_C.7.6.16.2.17  # noqa\n\n        # Real World Value Mapping (U) - PET only\n        # TODO: http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.16.2.html#sect_C.7.6.16.2.11  # noqa\n\n        perframe_items.append(perframe_item)\n\n        # All other attributes that are not assigned to functional groups.\n        for tag, da in ds.items():\n            if tag in assigned_attributes:\n                continue\n            elif tag in mf_attributes:\n                mf_dataset.add(da)\n            else:\n                if tag not in ignored_attributes:\n                    unassigned_dataelements[tag].append(da)\n\n    # All remaining unassigned attributes will be collected in either the\n    # UnassignedSharedConvertedAttributesSequence or the\n    # UnassignedPerFrameConvertedAttributesSequence, depending on whether\n    # values vary accross frames (original single-frame image instances).\n    unassigned_shared_ca_item = Dataset()\n    unassigned_perframe_ca_items = [\n        Dataset()\n        for _ in range(len(sf_datasets))\n    ]\n    for tag, dataelements in unassigned_dataelements.items():\n        values = [str(da.value) for da in dataelements]\n        unique_values = set(values)\n        if len(unique_values) == 1:\n            unassigned_shared_ca_item.add(dataelements[0])\n        else:\n            for i, da in enumerate(dataelements):\n                unassigned_perframe_ca_items[i].add(da)\n\n    mf_dataset.ImageType = list(list(unique_image_types)[0])\n    if len(unique_image_types) > 1:\n        mf_dataset.ImageType[2] = \'MIXED\'\n    mf_dataset.PixelRepresentation = pixel_representation\n    mf_dataset.VolumetricProperties = volumetric_properties\n\n    # Shared Functional Groups\n    shared_item = Dataset()\n\n    # Pixel Measures (M)\n    pixel_measures_item = Dataset()\n    pixel_measures_item.PixelSpacing = ref_ds.PixelSpacing\n    pixel_measures_item.SliceThickness = ref_ds.SliceThickness\n    try:\n        pixel_measures_item.SpacingBetweenSlices = \\\n            ref_ds.SpacingBetweenSlices\n    except AttributeError:\n        pass\n    shared_item.PixelMeasuresSequence = [\n        pixel_measures_item,\n    ]\n\n    # Plane Orientation (Patient) (M)\n    plane_orientation_item = Dataset()\n    plane_orientation_item.ImageOrientationPatient = \\\n        ref_ds.ImageOrientationPatient\n    shared_item.PlaneOrientationSequence = [\n        plane_orientation_item,\n    ]\n\n    shared_item.UnassignedSharedConvertedAttributesSequence = [\n        unassigned_shared_ca_item,\n    ]\n    mf_dataset.SharedFunctionalGroupsSequence = [\n        shared_item,\n    ]\n\n    for i, ca_item in enumerate(unassigned_perframe_ca_items):\n        perframe_items[i].UnassignedPerFrameConvertedAttributesSequence = [\n            ca_item,\n        ]\n    mf_dataset.PerFrameFunctionalGroupsSequence = perframe_items\n\n    mf_dataset.AcquisitionContextSequence = []\n\n    # TODO: Encapsulated Pixel Data with compressed frame items.\n\n    # Create the Pixel Data element of the mulit-frame image instance using\n    # native encoding (simply concatenating pixels of individual frames)\n    # Sometimes there may be numpy types such as "">i2"". The (* 1) hack\n    # ensures that pixel values have the correct integer type.\n    mf_dataset.PixelData = b\'\'.join([\n        (ds.pixel_array * 1).data for ds in sf_datasets\n    ])\n\n    return mf_dataset\n\n\nclass LegacyConvertedEnhancedMRImage(SOPClass):\n\n    """"""SOP class for Legacy Converted Enhanced MR Image instances.""""""\n\n    def __init__(\n        self,\n        legacy_datasets: Sequence[Dataset],\n        series_instance_uid: str,\n        series_number: int,\n        sop_instance_uid: str,\n        instance_number: int,\n        **kwargs: Any\n    ) -> None:\n        """"""\n        Parameters\n        ----------\n        legacy_datasets: Sequence[pydicom.dataset.Dataset]\n            DICOM data sets of legacy single-frame image instances that should\n            be converted\n        series_instance_uid: str\n            UID of the series\n        series_number: Union[int, None]\n            Number of the series within the study\n        sop_instance_uid: str\n            UID that should be assigned to the instance\n        instance_number: int\n            Number that should be assigned to the instance\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        """"""\n\n        try:\n            ref_ds = legacy_datasets[0]\n        except IndexError:\n            raise ValueError(\'No DICOM data sets of provided.\')\n\n        if ref_ds.Modality != \'MR\':\n            raise ValueError(\n                \'Wrong modality for conversion of legacy MR images.\'\n            )\n        if ref_ds.SOPClassUID != \'1.2.840.10008.5.1.4.1.1.4\':\n            raise ValueError(\n                \'Wrong SOP class for conversion of legacy MR images.\'\n            )\n\n        sop_class_uid = LEGACY_ENHANCED_SOP_CLASS_UID_MAP[ref_ds.SOPClassUID]\n\n        super().__init__(\n            study_instance_uid=ref_ds.StudyInstanceUID,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=sop_class_uid,\n            instance_number=instance_number,\n            manufacturer=ref_ds.Manufacturer,\n            modality=ref_ds.Modality,\n            transfer_syntax_uid=None,  # FIXME: frame encoding\n            patient_id=ref_ds.PatientID,\n            patient_name=ref_ds.PatientName,\n            patient_birth_date=ref_ds.PatientBirthDate,\n            patient_sex=ref_ds.PatientSex,\n            accession_number=ref_ds.AccessionNumber,\n            study_id=ref_ds.StudyID,\n            study_date=ref_ds.StudyDate,\n            study_time=ref_ds.StudyTime,\n            referring_physician_name=ref_ds.ReferringPhysicianName,\n            **kwargs\n        )\n        _convert_legacy_to_enhanced(legacy_datasets, self)\n        self.PresentationLUTShape = \'IDENTITY\'\n\n\nclass LegacyConvertedEnhancedCTImage(SOPClass):\n\n    """"""SOP class for Legacy Converted Enhanced CT Image instances.""""""\n\n    def __init__(\n        self,\n        legacy_datasets: Sequence[Dataset],\n        series_instance_uid: str,\n        series_number: int,\n        sop_instance_uid: str,\n        instance_number: int,\n        **kwargs: Any\n    ) -> None:\n        """"""\n        Parameters\n        ----------\n        legacy_datasets: Sequence[pydicom.dataset.Dataset]\n            DICOM data sets of legacy single-frame image instances that should\n            be converted\n        series_instance_uid: str\n            UID of the series\n        series_number: Union[int, None]\n            Number of the series within the study\n        sop_instance_uid: str\n            UID that should be assigned to the instance\n        instance_number: int\n            Number that should be assigned to the instance\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        """"""\n\n        try:\n            ref_ds = legacy_datasets[0]\n        except IndexError:\n            raise ValueError(\'No DICOM data sets of provided.\')\n\n        if ref_ds.Modality != \'CT\':\n            raise ValueError(\n                \'Wrong modality for conversion of legacy CT images.\'\n            )\n        if ref_ds.SOPClassUID != \'1.2.840.10008.5.1.4.1.1.2\':\n            raise ValueError(\n                \'Wrong SOP class for conversion of legacy CT images.\'\n            )\n\n        sop_class_uid = LEGACY_ENHANCED_SOP_CLASS_UID_MAP[ref_ds.SOPClassUID]\n\n        super().__init__(\n            study_instance_uid=ref_ds.StudyInstanceUID,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=sop_class_uid,\n            instance_number=instance_number,\n            manufacturer=ref_ds.Manufacturer,\n            modality=ref_ds.Modality,\n            transfer_syntax_uid=None,  # FIXME: frame encoding\n            patient_id=ref_ds.PatientID,\n            patient_name=ref_ds.PatientName,\n            patient_birth_date=ref_ds.PatientBirthDate,\n            patient_sex=ref_ds.PatientSex,\n            accession_number=ref_ds.AccessionNumber,\n            study_id=ref_ds.StudyID,\n            study_date=ref_ds.StudyDate,\n            study_time=ref_ds.StudyTime,\n            referring_physician_name=ref_ds.ReferringPhysicianName,\n            **kwargs\n        )\n        _convert_legacy_to_enhanced(legacy_datasets, self)\n\n\nclass LegacyConvertedEnhancedPETImage(SOPClass):\n\n    """"""SOP class for Legacy Converted Enhanced PET Image instances.""""""\n\n    def __init__(\n            self,\n            legacy_datasets: Sequence[Dataset],\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            instance_number: int,\n            **kwargs: Any\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        legacy_datasets: Sequence[pydicom.dataset.Dataset]\n            DICOM data sets of legacy single-frame image instances that should\n            be converted\n        series_instance_uid: str\n            UID of the series\n        series_number: Union[int, None]\n            Number of the series within the study\n        sop_instance_uid: str\n            UID that should be assigned to the instance\n        instance_number: int\n            Number that should be assigned to the instance\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        """"""\n\n        try:\n            ref_ds = legacy_datasets[0]\n        except IndexError:\n            raise ValueError(\'No DICOM data sets of provided.\')\n\n        if ref_ds.Modality != \'PT\':\n            raise ValueError(\n                \'Wrong modality for conversion of legacy PET images.\'\n            )\n        if ref_ds.SOPClassUID != \'1.2.840.10008.5.1.4.1.1.128\':\n            raise ValueError(\n                \'Wrong SOP class for conversion of legacy PET images.\'\n            )\n\n        sop_class_uid = LEGACY_ENHANCED_SOP_CLASS_UID_MAP[ref_ds.SOPClassUID]\n\n        super().__init__(\n            study_instance_uid=ref_ds.StudyInstanceUID,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=sop_class_uid,\n            instance_number=instance_number,\n            manufacturer=ref_ds.Manufacturer,\n            modality=ref_ds.Modality,\n            transfer_syntax_uid=None,  # FIXME: frame encoding\n            patient_id=ref_ds.PatientID,\n            patient_name=ref_ds.PatientName,\n            patient_birth_date=ref_ds.PatientBirthDate,\n            patient_sex=ref_ds.PatientSex,\n            accession_number=ref_ds.AccessionNumber,\n            study_id=ref_ds.StudyID,\n            study_date=ref_ds.StudyDate,\n            study_time=ref_ds.StudyTime,\n            referring_physician_name=ref_ds.ReferringPhysicianName,\n            **kwargs\n        )\n        _convert_legacy_to_enhanced(legacy_datasets, self)\n'"
src/highdicom/sc/__init__.py,0,"b'""""""Package for creation of Secondary Capture (SC) Image instances.""""""\n\nSOP_CLASS_UIDS = {\n    \'1.2.840.10008.5.1.4.1.1.7\',  # SC Image\n}\n'"
src/highdicom/sc/enum.py,0,"b'""""""Enumerate values specific to Secondary Capture (SC) Image IODs.""""""\nfrom enum import Enum\n\n\nclass ConversionTypeValues(Enum):\n\n    """"""Enumerated values for attribute Conversion Type.""""""\n\n    DV = \'DV\'\n    DI = \'DI\'\n    DF = \'DF\'\n    WSD = \'WSD\'\n    SD = \'SD\'\n    SI = \'SI\'\n    DRW = \'DRW\'\n    SYN = \'SYN\'\n'"
src/highdicom/sc/sop.py,5,"b'""""""Module for SOP Classes of Secondary Capture (SC) Image IODs.""""""\n\nimport logging\nimport datetime\nfrom typing import Any, List, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nfrom pydicom._storage_sopclass_uids import SecondaryCaptureImageStorage\nfrom pydicom.dataset import Dataset\nfrom pydicom.sr.codedict import codes\nfrom pydicom.valuerep import DA, TM\n\nfrom highdicom.base import SOPClass\nfrom highdicom.content import (\n    IssuerOfIdentifier,\n    SpecimenDescription,\n)\nfrom highdicom.enum import (\n    AnatomicalOrientationTypeValues,\n    CoordinateSystemNames,\n    LateralityValues,\n    PhotometricInterpretationValues,\n    PatientOrientationValuesBiped,\n    PatientOrientationValuesQuadruped,\n)\nfrom highdicom.sc.enum import ConversionTypeValues\nfrom highdicom.sr.coding import CodedConcept\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass SCImage(SOPClass):\n\n    """"""SOP class for a Secondary Capture (SC) Image, which represents a\n    single-frame image that was converted from a non-DICOM format.\n    """"""\n\n    def __init__(\n            self,\n            pixel_array: np.ndarray,\n            photometric_interpretation: Union[\n                str,\n                PhotometricInterpretationValues\n            ],\n            bits_allocated: int,\n            coordinate_system: Union[str, CoordinateSystemNames],\n            study_instance_uid: str,\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            instance_number: int,\n            manufacturer: str,\n            patient_id: Optional[str] = None,\n            patient_name: Optional[str] = None,\n            patient_birth_date: Optional[str] = None,\n            patient_sex: Optional[str] = None,\n            accession_number: Optional[str] = None,\n            study_id: str = None,\n            study_date: Optional[Union[str, datetime.date]] = None,\n            study_time: Optional[Union[str, datetime.time]] = None,\n            referring_physician_name: Optional[str] = None,\n            pixel_spacing: Optional[Tuple[int, int]] = None,\n            laterality: Optional[Union[str, LateralityValues]] = None,\n            patient_orientation: Optional[\n                Union[\n                    Tuple[str, str],\n                    Tuple[\n                        PatientOrientationValuesBiped,\n                        PatientOrientationValuesBiped,\n                    ],\n                    Tuple[\n                        PatientOrientationValuesQuadruped,\n                        PatientOrientationValuesQuadruped,\n                    ]\n                ]\n            ] = None,\n            anatomical_orientation_type: Optional[\n                Union[str, AnatomicalOrientationTypeValues]\n            ] = None,\n            container_identifier: Optional[str] = None,\n            issuer_of_container_identifier: Optional[IssuerOfIdentifier] = None,\n            specimen_descriptions: Optional[\n                Sequence[SpecimenDescription]\n            ] = None,\n            **kwargs: Any\n        ):\n        """"""\n\n        Parameters\n        ----------\n        pixel_array: numpy.ndarray\n            Array of unsigned integer pixel values representing a single-frame\n            image; either a 2D grayscale image or a 3D color image\n            (RGB color space)\n        photometric_interpretation: Union[str, highdicom.enum.PhotometricInterpretationValues]\n            Interpretation of pixel data; either ``""MONOCHROME1""`` or\n            ``""MONOCHROME2""`` for 2D grayscale images or ``""RGB""`` or\n            ``""YBR_FULL""`` for 3D color images\n        bits_allocated: int\n            Number of bits that should be allocated per pixel value\n        coordinate_system: Union[str, highdicom.enum.CoordinateSystemNames]\n            Subject (``""PATIENT""`` or ``""SLIDE""``) that was the target of\n            imaging\n        study_instance_uid: str\n            Study Instance UID\n        series_instance_uid: str\n            Series Instance UID of the SC image series\n        series_number: Union[int, None]\n            Series Number of the SC image series\n        sop_instance_uid: str\n            SOP instance UID that should be assigned to the SC image instance\n        instance_number: int\n            Number that should be assigned to this SC image instance\n        manufacturer: str\n            Name of the manufacturer of the device that creates the SC image\n            instance (in a research setting this is typically the same\n            as `institution_name`)\n        patient_id: str, optional\n           ID of the patient (medical record number)\n        patient_name: str, optional\n           Name of the patient\n        patient_birth_date: str, optional\n           Patient\'s birth date\n        patient_sex: str, optional\n           Patient\'s sex\n        study_id: str, optional\n           ID of the study\n        accession_number: str, optional\n           Accession number of the study\n        study_date: Union[str, datetime.date], optional\n           Date of study creation\n        study_time: Union[str, datetime.time], optional\n           Time of study creation\n        referring_physician_name: str, optional\n            Name of the referring physician\n        pixel_spacing: Tuple[int, int], optional\n            Physical spacing in millimeter between pixels along the row and\n            column dimension\n        laterality: Union[str, highdicom.enum.LateralityValues], optional\n            Laterality of the examined body part (required if\n            `coordinate_system` is ``""PATIENT""``)\n        patient_orientation:\n                Union[Tuple[str, str], Tuple[highdicom.enum.PatientOrientationValuesBiped, highdicom.enum.PatientOrientationValuesBiped], Tuple[highdicom.enum.PatientOrientationValuesQuadruped, highdicom.enum.PatientOrientationValuesQuadruped]], optional\n            Orientation of the patient along the row and column axes of the\n            image (required if `coordinate_system` is ``""PATIENT""``)\n        anatomical_orientation_type: Union[str, highdicom.enum.AnatomicalOrientationTypeValues], optional\n            Type of anatomical orientation of patient relative to image (may be\n            provide if `coordinate_system` is ``""PATIENT""`` and patient is\n            an animal)\n        container_identifier: str, optional\n            Identifier of the container holding the specimen (required if\n            `coordinate_system` is ``""SLIDE""``)\n        issuer_of_container_identifier: highdicom.content.IssuerOfIdentifier, optional\n            Issuer of `container_identifier`\n        specimen_descriptions: Sequence[highdicom.content.SpecimenDescriptions], optional\n            Description of each examined specimen (required if\n            `coordinate_system` is ``""SLIDE""``)\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        """"""  # noqa\n        super().__init__(\n            study_instance_uid=study_instance_uid,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=SecondaryCaptureImageStorage,\n            instance_number=instance_number,\n            manufacturer=manufacturer,\n            modality=\'OT\',\n            transfer_syntax_uid=None,  # uncompressed!\n            patient_id=patient_id,\n            patient_name=patient_name,\n            patient_birth_date=patient_birth_date,\n            patient_sex=patient_sex,\n            accession_number=accession_number,\n            study_id=study_id,\n            study_date=study_date,\n            study_time=study_time,\n            referring_physician_name=referring_physician_name,\n            **kwargs\n        )\n\n        coordinate_system = CoordinateSystemNames(coordinate_system)\n        if coordinate_system == CoordinateSystemNames.PATIENT:\n            if laterality is None:\n                raise TypeError(\n                    \'Laterality is required if coordinate system \'\n                    \'is ""PATIENT"".\'\n                )\n            if patient_orientation is None:\n                raise TypeError(\n                    \'Patient orientation is required if coordinate system \'\n                    \'is ""PATIENT"".\'\n                )\n\n            # General Series\n            laterality = LateralityValues(laterality)\n            self.Laterality = laterality.value\n\n            # General Image\n            if anatomical_orientation_type is not None:\n                anatomical_orientation_type = AnatomicalOrientationTypeValues(\n                    anatomical_orientation_type\n                )\n                self.AnatomicalOrientationType = \\\n                    anatomical_orientation_type.value\n            else:\n                anatomical_orientation_type = \\\n                    AnatomicalOrientationTypeValues.BIPED\n\n            row_orientation, col_orientation = patient_orientation\n            if (anatomical_orientation_type ==\n                    AnatomicalOrientationTypeValues.BIPED):\n                patient_orientation = (\n                    PatientOrientationValuesBiped(row_orientation).value,\n                    PatientOrientationValuesBiped(col_orientation).value,\n                )\n            else:\n                patient_orientation = (\n                    PatientOrientationValuesQuadruped(row_orientation).value,\n                    PatientOrientationValuesQuadruped(col_orientation).value,\n                )\n            self.PatientOrientation = list(patient_orientation)\n\n        elif coordinate_system == CoordinateSystemNames.SLIDE:\n            if container_identifier is None:\n                raise TypeError(\n                    \'Container identifier is required if coordinate system \'\n                    \'is ""SLIDE"".\'\n                )\n            if specimen_descriptions is None:\n                raise TypeError(\n                    \'Specimen descriptions are required if coordinate system \'\n                    \'is ""SLIDE"".\'\n                )\n\n            # Specimen\n            self.ContainerIdentifier = container_identifier\n            self.IssuerOfTheContainerIdentifierSequence: List[Dataset] = []\n            if issuer_of_container_identifier is not None:\n                self.IssuerOftheContainerIdentifierSequence.append(\n                    issuer_of_container_identifier\n                )\n            container_type_item = CodedConcept(*codes.SCT.MicroscopeSlide)\n            self.ContainerTypeCodeSequence = [container_type_item]\n            self.SpecimenDescriptionSequence = specimen_descriptions\n\n        # SC Equipment\n        self.ConversionType = ConversionTypeValues.DI.value\n\n        # SC Image\n        now = datetime.datetime.now()\n        self.DateOfSecondaryCapture = DA(now.date())\n        self.TimeOfSecondaryCapture = TM(now.time())\n\n        # Image Pixel\n        self.ImageType = [\'DERIVED\', \'SECONDARY\', \'OTHER\']\n        self.Rows = pixel_array.shape[0]\n        self.Columns = pixel_array.shape[1]\n        wrong_bit_depth_assignment = (\n            pixel_array.dtype == np.bool and bits_allocated != 1,\n            pixel_array.dtype == np.uint8 and bits_allocated != 8,\n            pixel_array.dtype == np.uint16 and bits_allocated not in (12, 16),\n        )\n        if any(wrong_bit_depth_assignment):\n            raise ValueError(\'Pixel array has an unexpected bit depth.\')\n        if bits_allocated not in (1, 8, 12, 16):\n            raise ValueError(\'Unexpected number of bits allocated.\')\n        self.BitsAllocated = bits_allocated\n        self.HighBit = self.BitsAllocated - 1\n        self.BitsStored = self.BitsAllocated\n        self.PixelRepresentation = 0\n        photometric_interpretation = PhotometricInterpretationValues(\n            photometric_interpretation\n        )\n        if pixel_array.ndim == 3:\n            accepted_interpretations = {\n                PhotometricInterpretationValues.RGB.value,\n                PhotometricInterpretationValues.YBR_FULL.value,\n                PhotometricInterpretationValues.YBR_FULL_422.value,\n                PhotometricInterpretationValues.YBR_PARTIAL_420.value,\n            }\n            if photometric_interpretation.value not in accepted_interpretations:\n                raise ValueError(\n                    \'Pixel array has an unexpected photometric interpretation.\'\n                )\n            if pixel_array.shape[-1] != 3:\n                raise ValueError(\n                    \'Pixel array has an unexpected number of color channels.\'\n                )\n            if bits_allocated != 8:\n                raise ValueError(\'Color images must be 8-bit.\')\n            if pixel_array.dtype != np.uint8:\n                raise TypeError(\n                    \'Pixel array must have 8-bit unsigned integer data type \'\n                    \'in case of a color image.\'\n                )\n            self.PhotometricInterpretation = photometric_interpretation.value\n            self.SamplesPerPixel = 3\n            self.PlanarConfiguration = 0\n        elif pixel_array.ndim == 2:\n            accepted_interpretations = {\n                PhotometricInterpretationValues.MONOCHROME1.value,\n                PhotometricInterpretationValues.MONOCHROME2.value,\n            }\n            if photometric_interpretation.value not in accepted_interpretations:\n                raise ValueError(\n                    \'Pixel array has an unexpected photometric interpretation.\'\n                )\n            self.PhotometricInterpretation = photometric_interpretation.value\n            self.SamplesPerPixel = 1\n        else:\n            raise ValueError(\n                \'Pixel array has an unexpected number of dimensions.\'\n            )\n        if pixel_spacing is not None:\n            self.PixelSpacing = pixel_spacing\n        self.PixelData = pixel_array.tobytes()\n'"
src/highdicom/seg/__init__.py,0,"b'""""""Package for creation of Segmentation (SEG) instances.""""""\n\nSOP_CLASS_UIDS = {\n    \'1.2.840.10008.5.1.4.1.1.66.4\',  # Segmentation\n    \'1.2.840.10008.5.1.4.1.1.66.5\',  # Surface Segmentation\n}\n'"
src/highdicom/seg/content.py,0,"b'""""""Data Elements that are specific to the Segmentation IOD.""""""\nfrom typing import Optional, Sequence, Union\n\nimport numpy as np\nfrom pydicom.datadict import tag_for_keyword\nfrom pydicom.dataset import Dataset\nfrom pydicom.sequence import Sequence as DataElementSequence\nfrom pydicom.sr.coding import Code\n\nfrom highdicom.content import AlgorithmIdentificationSequence\nfrom highdicom.enum import CoordinateSystemNames\nfrom highdicom.seg.enum import SegmentAlgorithmTypeValues\nfrom highdicom.sr.coding import CodedConcept\n\n\nclass SegmentDescription(Dataset):\n\n    """"""Dataset describing a segment based on the Segment Description macro.""""""\n\n    def __init__(\n            self,\n            segment_number: int,\n            segment_label: str,\n            segmented_property_category: Union[Code, CodedConcept],\n            segmented_property_type: Union[Code, CodedConcept],\n            algorithm_type: Union[SegmentAlgorithmTypeValues, str],\n            algorithm_identification: AlgorithmIdentificationSequence,\n            tracking_uid: Optional[str] = None,\n            tracking_id: Optional[str] = None,\n            anatomic_regions: Optional[\n                Sequence[Union[Code, CodedConcept]]\n            ] = None,\n            primary_anatomic_structures: Optional[\n                Sequence[Union[Code, CodedConcept]]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        segment_number: int\n            Number of the segment\n        segment_label: str\n            Label of the segment\n        segmented_property_category: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Category of the property the segment represents,\n            e.g. ``Code(""49755003"", ""SCT"", ""Morphologically Abnormal Structure"")``\n            (see CID 7150 Segmentation Property Categories)\n        segmented_property_type: Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]\n            Property the segment represents,\n            e.g. ``Code(""108369006"", ""SCT"", ""Neoplasm"")``\n            (see CID 7151 Segmentation Property Types)\n        algorithm_type: Union[str, highdicom.seg.enum.SegmentAlgorithmTypeValues]\n            Type of algorithm\n        algorithm_identification: highdicom.content.AlgorithmIdentificationSequence, optional\n            Information useful for identification of the algorithm, such\n            as its name or version\n        tracking_uid: str, optional\n            Unique tracking identifier (universally unique)\n        tracking_id: str, optional\n            Tracking identifier (unique only with the domain of use)\n        anatomic_regions: Sequence[Union[pydicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]], optional\n            Anatomic region(s) into which segment falls,\n            e.g. ``Code(""41216001"", ""SCT"", ""Prostate"")``\n            (see CID 4 Anatomic Region, CID 4031 Common Anatomic Regions, as\n            as well as other CIDs for domain-specific anatomic regions)\n        primary_anatomic_structures: Sequence[Union[highdicom.sr.coding.Code, highdicom.sr.coding.CodedConcept]], optional\n            Anatomic structure(s) the segment represents\n            (see CIDs for domain-specific primary anatomic structures)\n\n        """"""  # noqa\n        super().__init__()\n        self.SegmentNumber = segment_number\n        self.SegmentLabel = segment_label\n        self.SegmentedPropertyCategoryCodeSequence = [\n            CodedConcept(\n                segmented_property_category.value,\n                segmented_property_category.scheme_designator,\n                segmented_property_category.meaning,\n                segmented_property_category.scheme_version\n            ),\n        ]\n        self.SegmentedPropertyTypeCodeSequence = [\n            CodedConcept(\n                segmented_property_type.value,\n                segmented_property_type.scheme_designator,\n                segmented_property_type.meaning,\n                segmented_property_type.scheme_version\n            ),\n        ]\n        algorithm_type = SegmentAlgorithmTypeValues(algorithm_type)\n        self.SegmentAlgorithmType = algorithm_type.value\n        self.SegmentAlgorithmName = algorithm_identification[0].AlgorithmName\n        self.SegmentationAlgorithmIdentificationSequence = \\\n            algorithm_identification\n        num_given_tracking_identifiers = sum([\n            tracking_id is not None,\n            tracking_uid is not None\n        ])\n        if num_given_tracking_identifiers == 2:\n            self.TrackingID = tracking_id\n            self.TrackingUID = tracking_uid\n        elif num_given_tracking_identifiers == 1:\n            raise TypeError(\n                \'Tracking ID and Tracking UID must both be provided.\'\n            )\n        if anatomic_regions is not None:\n            self.AnatomicRegionSequence = [\n                CodedConcept(\n                    region.value,\n                    region.scheme_designator,\n                    region.meaning,\n                    region.scheme_version\n                )\n                for region in anatomic_regions\n            ]\n        if primary_anatomic_structures is not None:\n            self.PrimaryAnatomicStructureSequence = [\n                CodedConcept(\n                    structure.value,\n                    structure.scheme_designator,\n                    structure.meaning,\n                    structure.scheme_version\n                )\n                for structure in primary_anatomic_structures\n            ]\n\n\nclass DimensionIndexSequence(DataElementSequence):\n\n    """"""Sequence of data elements describing dimension indices for the patient\n    or slide coordinate system based on the Dimension Index functional\n    group macro.\n\n    Note\n    ----\n    The order of indices is fixed.\n\n    """"""\n\n    def __init__(\n            self,\n            coordinate_system: Union[str, CoordinateSystemNames]\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        coordinate_system: Union[str, highdicom.enum.CoordinateSystemNames]\n            Subject (``""PATIENT""`` or ``""SLIDE""``) that was the target of\n            imaging\n\n        """"""\n        super().__init__()\n        coordinate_system = CoordinateSystemNames(coordinate_system)\n        if coordinate_system == CoordinateSystemNames.SLIDE:\n            dim_uid = \'1.2.826.0.1.3680043.9.7433.2.4\'\n\n            segment_number_index = Dataset()\n            segment_number_index.DimensionIndexPointer = tag_for_keyword(\n                \'ReferencedSegmentNumber\'\n            )\n            segment_number_index.FunctionalGroupPointer = tag_for_keyword(\n                \'SegmentIdentificationSequence\'\n            )\n            segment_number_index.DimensionOrganizationUID = dim_uid\n            segment_number_index.DimensionDescriptionLabel = \'Segment Number\'\n\n            x_image_dimension_index = Dataset()\n            x_image_dimension_index.DimensionIndexPointer = tag_for_keyword(\n                \'XOffsetInSlideCoordinateSystem\'\n            )\n            x_image_dimension_index.FunctionalGroupPointer = tag_for_keyword(\n                \'PlanePositionSlideSequence\'\n            )\n            x_image_dimension_index.DimensionOrganizationUID = dim_uid\n            x_image_dimension_index.DimensionDescriptionLabel = \\\n                \'X Offset in Slide Coordinate System\'\n\n            y_image_dimension_index = Dataset()\n            y_image_dimension_index.DimensionIndexPointer = tag_for_keyword(\n                \'YOffsetInSlideCoordinateSystem\'\n            )\n            y_image_dimension_index.FunctionalGroupPointer = tag_for_keyword(\n                \'PlanePositionSlideSequence\'\n            )\n            y_image_dimension_index.DimensionOrganizationUID = dim_uid\n            y_image_dimension_index.DimensionDescriptionLabel = \\\n                \'Y Offset in Slide Coordinate System\'\n\n            z_image_dimension_index = Dataset()\n            z_image_dimension_index.DimensionIndexPointer = tag_for_keyword(\n                \'ZOffsetInSlideCoordinateSystem\'\n            )\n            z_image_dimension_index.FunctionalGroupPointer = tag_for_keyword(\n                \'PlanePositionSlideSequence\'\n            )\n            z_image_dimension_index.DimensionOrganizationUID = dim_uid\n            z_image_dimension_index.DimensionDescriptionLabel = \\\n                \'Z Offset in Slide Coordinate System\'\n\n            col_image_dimension_index = Dataset()\n            col_image_dimension_index.DimensionIndexPointer = tag_for_keyword(\n                \'ColumnPositionInTotalImagePixelMatrix\'\n            )\n            col_image_dimension_index.FunctionalGroupPointer = tag_for_keyword(\n                \'PlanePositionSlideSequence\'\n            )\n            col_image_dimension_index.DimensionOrganizationUID = dim_uid\n            col_image_dimension_index.DimensionDescriptionLabel = \\\n                \'Column Position In Total Image Pixel Matrix\'\n\n            row_image_dimension_index = Dataset()\n            row_image_dimension_index.DimensionIndexPointer = tag_for_keyword(\n                \'RowPositionInTotalImagePixelMatrix\'\n            )\n            row_image_dimension_index.FunctionalGroupPointer = tag_for_keyword(\n                \'PlanePositionSlideSequence\'\n            )\n            row_image_dimension_index.DimensionOrganizationUID = dim_uid\n            row_image_dimension_index.DimensionDescriptionLabel = \\\n                \'Row Position In Total Image Pixel Matrix\'\n\n            self.extend([\n                segment_number_index,\n                x_image_dimension_index,\n                y_image_dimension_index,\n                z_image_dimension_index,\n                col_image_dimension_index,\n                row_image_dimension_index,\n            ])\n\n        elif coordinate_system == CoordinateSystemNames.PATIENT:\n            dim_uid = \'1.2.826.0.1.3680043.9.7433.2.3\'\n\n            segment_number_index = Dataset()\n            segment_number_index.DimensionIndexPointer = tag_for_keyword(\n                \'ReferencedSegmentNumber\'\n            )\n            segment_number_index.FunctionalGroupPointer = tag_for_keyword(\n                \'SegmentIdentificationSequence\'\n            )\n            segment_number_index.DimensionOrganizationUID = dim_uid\n            segment_number_index.DimensionDescriptionLabel = \'Segment Number\'\n\n            image_position_index = Dataset()\n            image_position_index.DimensionIndexPointer = tag_for_keyword(\n                \'ImagePositionPatient\'\n            )\n            image_position_index.FunctionalGroupPointer = tag_for_keyword(\n                \'PlanePositionSequence\'\n            )\n            image_position_index.DimensionOrganizationUID = dim_uid\n            image_position_index.DimensionDescriptionLabel = \\\n                \'Image Position Patient\'\n\n            self.extend([\n                segment_number_index,\n                image_position_index,\n            ])\n'"
src/highdicom/seg/enum.py,0,"b'""""""Enumerate values specific to Segmentation IODs.""""""\nfrom enum import Enum\n\n\nclass SegmentAlgorithmTypeValues(Enum):\n\n    """"""Enumerated values for attribute Segment Algorithm Type.""""""\n\n    AUTOMATIC = \'AUTOMATIC\'\n    SEMIAUTOMATIC = \'SEMIAUTOMATIC\'\n    MANUAL = \'MANUAL\'\n\n\nclass SegmentationTypeValues(Enum):\n\n    """"""Enumerated values for attribute Segmentation Type.""""""\n\n    BINARY = \'BINARY\'\n    FRACTIONAL = \'FRACTIONAL\'\n\n\nclass SegmentationFractionalTypeValues(Enum):\n\n    """"""Enumerated values for attribute Segmentation Fractional Type.""""""\n\n    PROBABILITY = \'PROBABILITY\'\n    OCCUPANCY = \'OCCUPANCY\'\n\n\nclass SpatialLocationsPreservedValues(Enum):\n\n    """"""Enumerated values for attribute Spatial Locations Preserved.""""""\n\n    YES = \'YES\'\n    NO = \'NO\'\n    REORIENTED_ONLY = \'REORIENTED_ONLY\'\n\n\nclass SegmentsOverlapValues(Enum):\n\n    """"""Enumerated values for attribute Segments Overlap.""""""\n\n    YES = \'YES\'\n    UNDEFINED = \'UNDEFINED\'\n    NO = \'NO\'\n'"
src/highdicom/seg/sop.py,37,"b'""""""Module for the SOP class of the Segmentation IOD.""""""\nimport itertools\nimport logging\nimport numpy as np\nfrom collections import defaultdict\nfrom typing import Any, Dict, List, Optional, Set, Sequence, Union, Tuple\n\nfrom pydicom.dataset import Dataset\nfrom pydicom.pixel_data_handlers.numpy_handler import pack_bits\nfrom pydicom.pixel_data_handlers.util import get_expected_length\nfrom pydicom.uid import UID\nfrom pydicom.sr.codedict import codes\nfrom pydicom._storage_sopclass_uids import (\n    SegmentationStorage,\n    VLSlideCoordinatesMicroscopicImageStorage,\n    VLWholeSlideMicroscopyImageStorage,\n)\n\nfrom highdicom.base import SOPClass\nfrom highdicom.content import (\n    PlaneOrientationSequence,\n    PlanePositionSequence,\n    PixelMeasuresSequence\n)\nfrom highdicom.enum import CoordinateSystemNames\nfrom highdicom.seg.content import (\n    DimensionIndexSequence,\n    SegmentDescription,\n)\nfrom highdicom.seg.enum import (\n    SegmentationFractionalTypeValues,\n    SegmentationTypeValues,\n    SegmentsOverlapValues,\n)\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.utils import compute_plane_positions_tiled_full\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass Segmentation(SOPClass):\n\n    """"""SOP class for a Segmentation, which represents one or more\n    regions of interest (ROIs) as mask images (raster graphics) in\n    two-dimensional image space.\n\n    """"""\n\n    def __init__(\n            self,\n            source_images: Sequence[Dataset],\n            pixel_array: np.ndarray,\n            segmentation_type: Union[str, SegmentationTypeValues],\n            segment_descriptions: Sequence[SegmentDescription],\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            instance_number: int,\n            manufacturer: str,\n            manufacturer_model_name: str,\n            software_versions: Union[str, Tuple[str]],\n            device_serial_number: str,\n            fractional_type: Optional[\n                Union[str, SegmentationFractionalTypeValues]\n            ] = SegmentationFractionalTypeValues.PROBABILITY,\n            max_fractional_value: int = 255,\n            content_description: Optional[str] = None,\n            content_creator_name: Optional[str] = None,\n            transfer_syntax_uid: Union[str, UID] = \'1.2.840.10008.1.2\',\n            pixel_measures: Optional[PixelMeasuresSequence] = None,\n            plane_orientation: Optional[PlaneOrientationSequence] = None,\n            plane_positions: Optional[Sequence[PlanePositionSequence]] = None,\n            **kwargs: Any\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        source_images: Sequence[pydicom.dataset.Dataset]\n            One or more single- or multi-frame images (or metadata of images)\n            from which the segmentation was derived\n        pixel_array: numpy.ndarray\n            Array of segmentation pixel data of boolean, unsigned integer or\n            floating point data type representing a mask image. If `pixel_array`\n            is a floating-point array or a binary array (containing only the\n            values ``True`` and ``False`` or ``0`` and ``1``), the segment number\n            used to encode the segment is taken from segment_descriptions.\n            Otherwise, if pixel_array contains multiple integer values, each value\n            is treated as a different segment whose segment number is that integer\n            value. In this case, all segments found in the array must be described\n            in `segment_descriptions`. Note that this is valid for both ``""BINARY""``\n            and ``""FRACTIONAL""`` segmentations.\n            For ``""FRACTIONAL""`` segmentations, values either encode the probability\n            of a given pixel belonging to a segment\n            (if `fractional_type` is ``""PROBABILITY""``)\n            or the extent to which a segment occupies the pixel\n            (if `fractional_type` is ``""OCCUPANCY""``).\n            When `pixel_array` has a floating point data type, only one segment can be\n            encoded. Additional segments can be subsequently\n            added to the `Segmentation` instance using the ``add_segments()``\n            method.\n            If `pixel_array` represents a 3D image, the first dimension\n            represents individual 2D planes and these planes must be ordered\n            based on their position in the three-dimensional patient\n            coordinate system (first along the X axis, second along the Y axis,\n            and third along the Z axis).\n            If `pixel_array` represents a tiled 2D image, the first dimension\n            represents individual 2D tiles (for one channel and z-stack) and\n            these tiles must be ordered based on their position in the tiled\n            total pixel matrix (first along the row dimension and second along\n            the column dimension, which are defined in the three-dimensional\n            slide coordinate system by the direction cosines encoded by the\n            *Image Orientation (Slide)* attribute).\n        segmentation_type: Union[str, highdicom.seg.enum.SegmentationTypeValues]\n            Type of segmentation, either ``""BINARY""`` or ``""FRACTIONAL""``\n        segment_descriptions: Sequence[highdicom.seg.content.SegmentDescription]\n            Description of each segment encoded in `pixel_array`. In the case of\n            pixel arrays with multiple integer values, the segment description\n            with the corresponding segment number is used to describe each segment.\n        series_instance_uid: str\n            UID of the series\n        series_number: Union[int, None]\n            Number of the series within the study\n        sop_instance_uid: str\n            UID that should be assigned to the instance\n        instance_number: int\n            Number that should be assigned to the instance\n        manufacturer: str\n            Name of the manufacturer of the device (developer of the software)\n            that creates the instance\n        manufacturer_model_name: str\n            Name of the device model (name of the software library or\n            application) that creates the instance\n        software_versions: Union[str, Tuple[str]]\n            Version(s) of the software that creates the instance\n        fractional_type: Union[str, highdicom.seg.enum.SegmentationFractionalTypeValues], optional\n            Type of fractional segmentation that indicates how pixel data\n            should be interpreted\n        max_fractional_value: int, optional\n            Maximum value that indicates probability or occupancy of 1 that\n            a pixel represents a given segment\n        content_description: str, optional\n            Description of the segmentation\n        content_creator_name: str, optional\n            Name of the creator of the segmentation\n        transfer_syntax_uid: str, optional\n            UID of transfer syntax that should be used for encoding of\n            data elements. The following lossless compressed transfer syntaxes\n            are supported: JPEG2000 (``""1.2.840.10008.1.2.4.90""``) and\n            JPEG-LS (``""1.2.840.10008.1.2.4.80""``). Lossy compression is not\n            supported.\n        pixel_measures: PixelMeasures, optional\n            Physical spacing of image pixels in `pixel_array`.\n            If ``None``, it will be assumed that the segmentation image has the\n            same pixel measures as the source image(s).\n        plane_orientation: highdicom.content.PlaneOrientationSequence, optional\n            Orientation of planes in `pixel_array` relative to axes of\n            three-dimensional patient or slide coordinate space.\n            If ``None``, it will be assumed that the segmentation image as the\n            same plane orientation as the source image(s).\n        plane_positions: Sequence[highdicom.content.PlanePositionSequence], optional\n            Position of each plane in `pixel_array` in the three-dimensional\n            patient or slide coordinate space.\n            If ``None``, it will be assumed that the segmentation image has the\n            same plane position as the source image(s). However, this will only\n            work when the first dimension of `pixel_array` matches the number\n            of frames in `source_images` (in case of multi-frame source images)\n            or the number of `source_images` (in case of single-frame source\n            images).\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        Raises\n        ------\n        ValueError\n            When\n                * Length of `source_images` is zero.\n                * Items of `source_images` are not all part of the same study\n                  and series.\n                * Items of `source_images` have different number of rows and\n                  columns.\n                * Length of `plane_positions` does not match number of segments\n                  encoded in `pixel_array`.\n                * Length of `plane_positions` does not match number of 2D planes\n                  in `pixel_array` (size of first array dimension).\n\n        Note\n        ----\n        The assumption is made that segments in `pixel_array` are defined in\n        the same frame of reference as `source_images`.\n\n\n        """"""  # noqa\n        if len(source_images) == 0:\n            raise ValueError(\'At least one source image is required.\')\n        self._source_images = source_images\n\n        uniqueness_criteria = set(\n            (\n                image.StudyInstanceUID,\n                image.SeriesInstanceUID,\n                image.Rows,\n                image.Columns,\n            )\n            for image in self._source_images\n        )\n        if len(uniqueness_criteria) > 1:\n            raise ValueError(\n                \'Source images must all be part of the same series and must \'\n                \'have the same image dimensions (number of rows/columns).\'\n            )\n\n        src_img = self._source_images[0]\n        is_multiframe = hasattr(src_img, \'NumberOfFrames\')\n        if is_multiframe and len(self._source_images) > 1:\n            raise ValueError(\n                \'Only one source image should be provided in case images \'\n                \'are multi-frame images.\'\n            )\n\n        supported_transfer_syntaxes = {\n            \'1.2.840.10008.1.2\',       # Implicit Little Endian\n            \'1.2.840.10008.1.2.1\',     # Explicit Little Endian\n            # \'1.2.840.10008.1.2.4.90\',  # JPEG2000\n            # \'1.2.840.10008.1.2.4.80\',  # JPEG-LS\n        }\n        if transfer_syntax_uid not in supported_transfer_syntaxes:\n            raise ValueError(\n                \'Transfer syntax ""{}"" is not supported\'.format(\n                    transfer_syntax_uid\n                )\n            )\n\n        if pixel_array.ndim == 2:\n            pixel_array = pixel_array[np.newaxis, ...]\n\n        super().__init__(\n            study_instance_uid=src_img.StudyInstanceUID,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            instance_number=instance_number,\n            sop_class_uid=SegmentationStorage,\n            manufacturer=manufacturer,\n            modality=\'SEG\',\n            transfer_syntax_uid=transfer_syntax_uid,\n            patient_id=src_img.PatientID,\n            patient_name=src_img.PatientName,\n            patient_birth_date=src_img.PatientBirthDate,\n            patient_sex=src_img.PatientSex,\n            accession_number=src_img.AccessionNumber,\n            study_id=src_img.StudyID,\n            study_date=src_img.StudyDate,\n            study_time=src_img.StudyTime,\n            referring_physician_name=src_img.ReferringPhysicianName,\n            **kwargs\n        )\n\n        # Using Container Type Code Sequence attribute would be more elegant,\n        # but unfortunately it is a type 2 attribute.\n        if (hasattr(src_img, \'ImageOrientationSlide\') or\n                hasattr(src_img, \'ImageCenterPointCoordinatesSequence\')):\n            self._coordinate_system = CoordinateSystemNames.SLIDE\n        else:\n            self._coordinate_system = CoordinateSystemNames.PATIENT\n\n        # Frame of Reference\n        self.FrameOfReferenceUID = src_img.FrameOfReferenceUID\n        self.PositionReferenceIndicator = getattr(\n            src_img,\n            \'PositionReferenceIndicator\',\n            None\n        )\n\n        # (Enhanced) General Equipment\n        self.DeviceSerialNumber = device_serial_number\n        self.ManufacturerModelName = manufacturer_model_name\n        self.SoftwareVersions = software_versions\n\n        # General Reference\n        self.SourceImageSequence: List[Dataset] = []\n        referenced_series: Dict[str, List[Dataset]] = defaultdict(list)\n        for s_img in self._source_images:\n            ref = Dataset()\n            ref.ReferencedSOPClassUID = s_img.SOPClassUID\n            ref.ReferencedSOPInstanceUID = s_img.SOPInstanceUID\n            self.SourceImageSequence.append(ref)\n            referenced_series[s_img.SeriesInstanceUID].append(ref)\n\n        # Common Instance Reference\n        self.ReferencedSeriesSequence: List[Dataset] = []\n        for series_instance_uid, referenced_images in referenced_series.items():\n            ref = Dataset()\n            ref.SeriesInstanceUID = series_instance_uid\n            ref.ReferencedInstanceSequence = referenced_images\n            self.ReferencedSeriesSequence.append(ref)\n\n        # Image Pixel\n        self.Rows = pixel_array.shape[1]\n        self.Columns = pixel_array.shape[2]\n\n        # Segmentation Image\n        self.ImageType = [\'DERIVED\', \'PRIMARY\']\n        self.SamplesPerPixel = 1\n        self.PhotometricInterpretation = \'MONOCHROME2\'\n        self.PixelRepresentation = 0\n        self.ContentLabel = \'ISO_IR 192\'  # UTF-8\n        self.ContentDescription = content_description\n        self.ContentCreatorName = content_creator_name\n\n        segmentation_type = SegmentationTypeValues(segmentation_type)\n        self.SegmentationType = segmentation_type.value\n        if self.SegmentationType == SegmentationTypeValues.BINARY.value:\n            self.BitsAllocated = 1\n            self.HighBit = 0\n        elif self.SegmentationType == SegmentationTypeValues.FRACTIONAL.value:\n            self.BitsAllocated = 8\n            self.HighBit = 7\n            segmentation_fractional_type = SegmentationFractionalTypeValues(\n                fractional_type\n            )\n            self.SegmentationFractionalType = segmentation_fractional_type.value\n            if max_fractional_value > 2**8:\n                raise ValueError(\n                    \'Maximum fractional value must not exceed image bit depth.\'\n                )\n            self.MaximumFractionalValue = max_fractional_value\n        else:\n            raise ValueError(\n                \'Unknown segmentation type ""{}""\'.format(segmentation_type)\n            )\n\n        self.BitsStored = self.BitsAllocated\n        self.LossyImageCompression = getattr(\n            src_img,\n            \'LossyImageCompression\',\n            \'00\'\n        )\n        if self.LossyImageCompression == \'01\':\n            self.LossyImageCompressionRatio = \\\n                src_img.LossyImageCompressionRatio\n            self.LossyImageCompressionMethod = \\\n                src_img.LossyImageCompressionMethod\n\n        # will be updated by ""add_segments()""\n        self.SegmentSequence: List[Dataset] = []\n\n        # Multi-Frame Functional Groups and Multi-Frame Dimensions\n        shared_func_groups = Dataset()\n        if pixel_measures is None:\n            if is_multiframe:\n                src_shared_fg = src_img.SharedFunctionalGroupsSequence[0]\n                pixel_measures = src_shared_fg.PixelMeasuresSequence\n            else:\n                pixel_measures = PixelMeasuresSequence(\n                    pixel_spacing=src_img.PixelSpacing,\n                    slice_thickness=src_img.SliceThickness,\n                    spacing_between_slices=src_img.get(\n                        \'SpacingBetweenSlices\',\n                        None\n                    )\n                )\n            # TODO: ensure derived segmentation image and original image have\n            # same physical dimensions\n            # seg_row_dim = self.Rows * pixel_measures[0].PixelSpacing[0]\n            # seg_col_dim = self.Columns * pixel_measures[0].PixelSpacing[1]\n            # src_row_dim = src_img.Rows\n            # Do we need to take ImageOrientationPatient/ImageOrientationPatient\n            # into account?\n\n        if is_multiframe:\n            if self._coordinate_system == CoordinateSystemNames.SLIDE:\n                source_plane_orientation = PlaneOrientationSequence(\n                    coordinate_system=self._coordinate_system,\n                    image_orientation=src_img.ImageOrientationSlide\n                )\n                if src_img.SOPClassUID == VLWholeSlideMicroscopyImageStorage:\n                    self.TotalPixelMatrixRows = src_img.TotalPixelMatrixRows\n                    self.TotalPixelMatrixColumns = \\\n                        src_img.TotalPixelMatrixColumns\n                    self.TotalPixelMatrixFocalPlanes = \\\n                        src_img.TotalPixelMatrixFocalPlanes\n            else:\n                src_sfg = src_img.SharedFunctionalGroupsSequence[0]\n                source_plane_orientation = src_sfg.PlaneOrientationSequence\n        else:\n            source_plane_orientation = PlaneOrientationSequence(\n                coordinate_system=self._coordinate_system,\n                image_orientation=src_img.ImageOrientationPatient\n            )\n        if plane_orientation is None:\n            plane_orientation = source_plane_orientation\n        self._plane_orientation = plane_orientation\n        self._source_plane_orientation = plane_orientation\n\n        self.DimensionIndexSequence = DimensionIndexSequence(\n            coordinate_system=self._coordinate_system\n        )\n        dimension_organization = Dataset()\n        dimension_organization.DimensionOrganizationUID = \\\n            self.DimensionIndexSequence[0].DimensionOrganizationUID\n        self.DimensionOrganizationSequence = [dimension_organization]\n\n        shared_func_groups.PixelMeasuresSequence = pixel_measures\n        shared_func_groups.PlaneOrientationSequence = plane_orientation\n        self.SharedFunctionalGroupsSequence = [shared_func_groups]\n\n        # NOTE: Information about individual frames will be updated by the\n        # ""add_segments()"" method upon addition of segmentation bitplanes.\n        self.NumberOfFrames = 0\n        self.PerFrameFunctionalGroupsSequence: List[Dataset] = []\n\n        self._segment_inventory: Set[int] = set()\n        self.PixelData = b\'\'\n        self.add_segments(\n            pixel_array=pixel_array,\n            segment_descriptions=segment_descriptions,\n            plane_positions=plane_positions\n        )\n\n        self.copy_specimen_information(src_img)\n        self.copy_patient_and_study_information(src_img)\n\n    def add_segments(\n            self,\n            pixel_array: np.ndarray,\n            segment_descriptions: Sequence[SegmentDescription],\n            plane_positions: Optional[Sequence[PlanePositionSequence]] = None\n        ) -> Dataset:\n        """"""Adds one or more segments to the segmentation image.\n\n        Parameters\n        ----------\n        pixel_array: numpy.ndarray\n            Array of segmentation pixel data of boolean, unsigned integer or\n            floating point data type representing a mask image. If `pixel_array`\n            is a floating-point array or a binary array (containing only the\n            values ``True`` and ``False`` or ``0`` and ``1``), the segment number\n            used to encode the segment is taken from segment_descriptions.\n            Otherwise, if pixel_array contains multiple integer values, each value\n            is treated as a different segment whose segment number is that integer\n            value. In this case, all segments found in the array must be described\n            in `segment_descriptions`. Note that this is valid for both ``""BINARY""``\n            and ``""FRACTIONAL""`` segmentations.\n            For ``""FRACTIONAL""`` segmentations, values either encode the probability\n            of a given pixel belonging to a segment\n            (if `fractional_type` is ``""PROBABILITY""``)\n            or the extent to which a segment occupies the pixel\n            (if `fractional_type` is ``""OCCUPANCY""``).\n            When `pixel_array` has a floating point data type, only one segment can be\n            encoded. Additional segments can be subsequently\n            added to the `Segmentation` instance using the ``add_segments()``\n            method.\n            If `pixel_array` represents a 3D image, the first dimension\n            represents individual 2D planes and these planes must be ordered\n            based on their position in the three-dimensional patient\n            coordinate system (first along the X axis, second along the Y axis,\n            and third along the Z axis).\n            If `pixel_array` represents a tiled 2D image, the first dimension\n            represents individual 2D tiles (for one channel and z-stack) and\n            these tiles must be ordered based on their position in the tiled\n            total pixel matrix (first along the row dimension and second along\n            the column dimension, which are defined in the three-dimensional\n            slide coordinate system by the direction cosines encoded by the\n            *Image Orientation (Slide)* attribute).\n        segment_descriptions: Sequence[highdicom.seg.content.SegmentDescription]\n            Description of each segment encoded in `pixel_array`. In the case of\n            pixel arrays with multiple integer values, the segment description\n            with the corresponding segment number is used to describe each\n            segment.\n        plane_positions: Sequence[highdicom.content.PlanePositionSequence], optional\n            Position of each plane in `pixel_array` relative to the\n            three-dimensional patient or slide coordinate system.\n\n        Note\n        ----\n        Items of `segment_descriptions` must be sorted by segment number in\n        ascending order.\n        In case `segmentation_type` is ``""BINARY""``, the number of items per\n        sequence must match the number of unique positive pixel values in\n        `pixel_array`. In case `segmentation_type` is ``""FRACTIONAL""``, only\n        one segment can be encoded by `pixel_array` and hence only one item is\n        permitted per sequence.\n\n        """"""  # noqa\n        if pixel_array.ndim == 2:\n            pixel_array = pixel_array[np.newaxis, ...]\n        if pixel_array.ndim != 3:\n            raise ValueError(\'Pixel array must be a 2D or 3D array.\')\n\n        if pixel_array.shape[1:3] != (self.Rows, self.Columns):\n            raise ValueError(\n                \'Pixel array representing segments has the wrong number of \'\n                \'rows and columns.\'\n            )\n\n        described_segment_numbers = np.array([\n            int(item.SegmentNumber)\n            for item in segment_descriptions\n        ])\n        # Check that there are no duplicated segment numbers in the segment\n        # descriptions\n        if not (np.diff(described_segment_numbers) > 0).all():\n            raise ValueError(\n                \'Segment descriptions must be sorted by segment number.\'\n            )\n\n        if pixel_array.dtype in (np.bool, np.uint8, np.uint16):\n            segments_present = np.unique(\n                pixel_array[pixel_array > 0].astype(np.uint16)\n            )\n\n            # Special case where the mask is binary and there is a single\n            # segment description. Allow the mark the positive segment with\n            # the correct segment number\n            if (np.array_equal(segments_present, np.array([1])) and\n                    len(segment_descriptions) == 1):\n                pixel_array = pixel_array.astype(np.uint8)\n                pixel_array *= described_segment_numbers.item()\n\n            # Otherwise, the pixel values in the pixel array must all belong to\n            # a described segment\n            else:\n                if not np.all(\n                        np.in1d(segments_present, described_segment_numbers)\n                    ):\n                    raise ValueError(\n                        \'Pixel array contains segments that lack descriptions.\'\n                    )\n\n        elif (pixel_array.dtype == np.float):\n            unique_values = np.unique(pixel_array)\n            if np.min(unique_values) < 0.0 or np.max(unique_values) > 1.0:\n                raise ValueError(\n                    \'Floating point pixel array values must be in the \'\n                    \'range [0, 1].\'\n                )\n            if len(segment_descriptions) != 1:\n                raise ValueError(\n                    \'When providing a float-valued pixel array, provide only \'\n                    \'a single segment description\'\n                )\n            if self.SegmentationType == SegmentationTypeValues.BINARY.value:\n                non_boolean_values = np.logical_and(\n                    unique_values > 0.0,\n                    unique_values < 1.0\n                )\n                if np.any(non_boolean_values):\n                    raise ValueError(\n                        \'Floating point pixel array values must be either \'\n                        \'0.0 or 1.0 in case of BINARY segmentation type.\'\n                    )\n                pixel_array = pixel_array.astype(np.bool)\n        else:\n            raise TypeError(\'Pixel array has an invalid data type.\')\n\n        # Check that the new segments do not already exist\n        if len(set(described_segment_numbers) & self._segment_inventory) > 0:\n            raise ValueError(\'Segment with given segment number already exists\')\n\n        # Set the optional tag value SegmentsOverlapValues to NO to indicate\n        # that the segments do not overlap. We can know this for sure if it\'s\n        # the first segment (or set of segments) to be added because they are\n        # contained within a single pixel array.\n        if len(self._segment_inventory) == 0:\n            self.SegmentsOverlap = SegmentsOverlapValues.NO.value\n        else:\n            # If this is not the first set of segments to be added, we cannot\n            # be sure whether there is overlap with the existing segments\n            self.SegmentsOverlap = SegmentsOverlapValues.UNDEFINED.value\n\n        src_img = self._source_images[0]\n        is_multiframe = hasattr(src_img, \'NumberOfFrames\')\n        if self._coordinate_system == CoordinateSystemNames.SLIDE:\n            if hasattr(src_img, \'PerFrameFunctionalGroupsSequence\'):\n                source_plane_positions = [\n                    item.PlanePositionSlideSequence\n                    for item in src_img.PerFrameFunctionalGroupsSequence\n                ]\n            else:\n                # If Dimension Organization Type is TILED_FULL, plane\n                # positions are implicit and need to be computed.\n                image_origin = src_img.TotalPixelMatrixOriginSequence[0]\n                orientation = (\n                    float(src_img.ImageOrientationSlide[0]),\n                    float(src_img.ImageOrientationSlide[1]),\n                    float(src_img.ImageOrientationSlide[2]),\n                    float(src_img.ImageOrientationSlide[3]),\n                    float(src_img.ImageOrientationSlide[4]),\n                    float(src_img.ImageOrientationSlide[5]),\n                )\n                tiles_per_column = int(\n                    np.ceil(\n                        src_img.TotalPixelMatrixRows /\n                        src_img.Rows\n                    )\n                )\n                tiles_per_row = int(\n                    np.ceil(\n                        src_img.TotalPixelMatrixColumns /\n                        src_img.Columns\n                    )\n                )\n                num_focal_planes = getattr(\n                    src_img,\n                    \'NumberOfFocalPlanes\',\n                    1\n                )\n                row_range = range(1, tiles_per_column + 1)\n                column_range = range(1, tiles_per_row + 1)\n                depth_range = range(1, num_focal_planes + 1)\n\n                shared_fg = self.SharedFunctionalGroupsSequence[0]\n                pixel_measures = shared_fg.PixelMeasuresSequence[0]\n                pixel_spacing = (\n                    float(pixel_measures.PixelSpacing[0]),\n                    float(pixel_measures.PixelSpacing[1]),\n                )\n                slice_thickness = getattr(\n                    pixel_measures,\n                    \'SliceThickness\',\n                    1.0\n                )\n                spacing_between_slices = getattr(\n                    pixel_measures,\n                    \'SpacingBetweenSlices\',\n                    1.0\n                )\n                source_plane_positions = [\n                    compute_plane_positions_tiled_full(\n                        row_index=r,\n                        column_index=c,\n                        depth_index=d,\n                        x_offset=image_origin.XOffsetInSlideCoordinateSystem,\n                        y_offset=image_origin.YOffsetInSlideCoordinateSystem,\n                        z_offset=1.0,  # TODO\n                        rows=self.Rows,\n                        columns=self.Columns,\n                        image_orientation=orientation,\n                        pixel_spacing=pixel_spacing,\n                        slice_thickness=slice_thickness,\n                        spacing_between_slices=spacing_between_slices\n                    )\n                    for r, c, d in itertools.product(\n                        row_range,\n                        column_range,\n                        depth_range\n                    )\n                ]\n        else:\n            if is_multiframe:\n                source_plane_positions = [\n                    item.PlanePositionSequence\n                    for item in src_img.PerFrameFunctionalGroupsSequence\n                ]\n            else:\n                source_plane_positions = [\n                    PlanePositionSequence(\n                        coordinate_system=CoordinateSystemNames.PATIENT,\n                        image_position=img.ImagePositionPatient\n                    )\n                    for img in self._source_images\n                ]\n\n        if plane_positions is None:\n            if pixel_array.shape[0] != len(source_plane_positions):\n                if is_multiframe:\n                    raise ValueError(\n                        \'Number of frames in pixel array does not match number \'\n                        \' of frames in source image.\'\n                    )\n                else:\n                    raise ValueError(\n                        \'Number of frames in pixel array does not match number \'\n                        \'of source images.\'\n                    )\n            plane_positions = source_plane_positions\n        else:\n            if pixel_array.shape[0] != len(plane_positions):\n                raise ValueError(\n                    \'Number of pixel array planes does not match number of \'\n                    \'provided plane positions.\'\n                )\n\n        are_spatial_locations_preserved = (\n            all(\n                plane_positions[i] == source_plane_positions[i]\n                for i in range(len(plane_positions))\n            ) and\n            self._plane_orientation == self._source_plane_orientation\n        )\n\n        # For each dimension other than the Referenced Segment Number,\n        # obtain the value of the attribute that the Dimension Index Pointer\n        # points to in the element of the Plane Position Sequence or\n        # Plane Position Slide Sequence.\n        # Per definition, this is the Image Position Patient attribute\n        # in case of the patient coordinate system, or the\n        # X/Y/Z Offset In Slide Coordinate System and the Column/Row\n        # Position in Total Image Pixel Matrix attributes in case of the\n        # the slide coordinate system.\n        plane_position_values = np.array([\n            [\n                np.array(p[0][indexer.DimensionIndexPointer].value)\n                for indexer in self.DimensionIndexSequence[1:]\n            ]\n            for p in plane_positions\n        ])\n\n        # Planes need to be sorted according to the Dimension Index Value\n        # based on the order of the items in the Dimension Index Sequence.\n        # Here we construct an index vector that we can subsequently use to\n        # sort planes before adding them to the Pixel Data element.\n        _, plane_sort_index = np.unique(\n            plane_position_values,\n            axis=0,\n            return_index=True\n        )\n\n        # Get unique values of attributes in the Plane Position Sequence or\n        # Plane Position Slide Sequence, which define the position of the plane\n        # with respect to the three dimensional patient or slide coordinate\n        # system, respectively. These can subsequently be used to look up the\n        # relative position of a plane relative to the indexed dimension.\n        dimension_position_values = [\n            np.unique(plane_position_values[:, index], axis=0)\n            for index in range(plane_position_values.shape[1])\n        ]\n\n        # When using binary segmentation type, the previous frames may have been\n        # padded to be a multiple of 8. In this case, we need to decode the\n        # pixel data, add the new pixels and then re-encode. This process\n        # should be avoided if it is not necessary in order to improve\n        # efficiency.\n        if (self.SegmentationType == SegmentationTypeValues.BINARY.value and\n                ((self.Rows * self.Columns * self.SamplesPerPixel) % 8) > 0):\n            re_encode_pixel_data = True\n            logger.warning(\n                \'pixel data needs to be re-encoded for binary bitpacking - \'\n                \'consider using FRACTIONAL instead of BINARY segmentation type\'\n            )\n            # If this is the first segment added, the pixel array is empty\n            if hasattr(self, \'PixelData\') and len(self.PixelData) > 0:\n                full_pixel_array = self.pixel_array.flatten()\n            else:\n                full_pixel_array = np.array([], np.bool)\n        else:\n            re_encode_pixel_data = False\n\n            # Before adding new pixel data, remove trailing null padding byte\n            if len(self.PixelData) == get_expected_length(self) + 1:\n                self.PixelData = self.PixelData[:-1]\n\n        for i, segment_number in enumerate(described_segment_numbers):\n            if pixel_array.dtype == np.float:\n                # Floating-point numbers must be mapped to 8-bit integers in\n                # the range [0, max_fractional_value].\n                planes = np.around(\n                    pixel_array * float(self.MaximumFractionalValue)\n                )\n                planes = planes.astype(np.uint8)\n            elif pixel_array.dtype in (np.uint8, np.uint16):\n                # Labeled masks must be converted to binary masks.\n                planes = np.zeros(pixel_array.shape, dtype=np.bool)\n                planes[pixel_array == segment_number] = True\n            elif pixel_array.dtype == np.bool:\n                planes = pixel_array\n\n            contained_plane_index = []\n            for j in plane_sort_index:\n                if np.sum(planes[j]) == 0:\n                    logger.info(\n                        \'skip empty plane {} of segment #{}\'.format(\n                            j, segment_number\n                        )\n                    )\n                    continue\n                contained_plane_index.append(j)\n                logger.info(\n                    \'add plane #{} for segment #{}\'.format(\n                        j, segment_number\n                    )\n                )\n\n                pffp_item = Dataset()\n                frame_content_item = Dataset()\n                frame_content_item.DimensionIndexValues = [segment_number]\n\n                # Look up the position of the plane relative to the indexed\n                # dimension.\n                try:\n                    if self._coordinate_system == CoordinateSystemNames.SLIDE:\n                        index_values = [\n                            np.where(\n                                (dimension_position_values[idx] == pos)\n                            )[0][0] + 1\n                            for idx, pos in enumerate(plane_position_values[j])\n                        ]\n                    else:\n                        # In case of the patient coordinate system, the\n                        # value of the attribute the Dimension Index Sequence\n                        # points to (Image Position Patient) has a value\n                        # multiplicity greater than one.\n                        index_values = [\n                            np.where(\n                                (dimension_position_values[idx] == pos).all(\n                                    axis=1\n                                )\n                            )[0][0] + 1\n                            for idx, pos in enumerate(plane_position_values[j])\n                        ]\n                except IndexError as error:\n                    raise IndexError(\n                        \'Could not determine position of plane #{} in \'\n                        \'three dimensional coordinate system based on \'\n                        \'dimension index values: {}\'.format(j, error)\n                    )\n                frame_content_item.DimensionIndexValues.extend(index_values)\n                pffp_item.FrameContentSequence = [frame_content_item]\n                if self._coordinate_system == CoordinateSystemNames.SLIDE:\n                    pffp_item.PlanePositionSlideSequence = plane_positions[j]\n                else:\n                    pffp_item.PlanePositionSequence = plane_positions[j]\n\n                # Determining the source images that map to the frame is not\n                # always trivial. Since DerivationImageSequence is a type 2\n                # attribute, we leave its value empty.\n                pffp_item.DerivationImageSequence = []\n\n                if are_spatial_locations_preserved:\n                    derivation_image_item = Dataset()\n                    derivation_code = codes.cid7203.Segmentation\n                    derivation_image_item.DerivationCodeSequence = [\n                        CodedConcept(\n                            derivation_code.value,\n                            derivation_code.scheme_designator,\n                            derivation_code.meaning,\n                            derivation_code.scheme_version\n                        ),\n                    ]\n\n                    derivation_src_img_item = Dataset()\n                    if len(plane_sort_index) > len(self._source_images):\n                        # A single multi-frame source image\n                        src_img_item = self.SourceImageSequence[0]\n                        # Frame numbers are one-based\n                        derivation_src_img_item.ReferencedFrameNumber = j + 1\n                    else:\n                        # Multiple single-frame source images\n                        src_img_item = self.SourceImageSequence[j]\n                    derivation_src_img_item.ReferencedSOPClassUID = \\\n                        src_img_item.ReferencedSOPClassUID\n                    derivation_src_img_item.ReferencedSOPInstanceUID = \\\n                        src_img_item.ReferencedSOPInstanceUID\n                    purpose_code = \\\n                        codes.cid7202.SourceImageForImageProcessingOperation\n                    derivation_src_img_item.PurposeOfReferenceCodeSequence = [\n                        CodedConcept(\n                            purpose_code.value,\n                            purpose_code.scheme_designator,\n                            purpose_code.meaning,\n                            purpose_code.scheme_version\n                        ),\n                    ]\n                    derivation_src_img_item.SpatialLocationsPreserved = \'YES\'\n                    derivation_image_item.SourceImageSequence = [\n                        derivation_src_img_item,\n                    ]\n                    pffp_item.DerivationImageSequence.append(\n                        derivation_image_item\n                    )\n                else:\n                    logger.warning(\'spatial locations not preserved\')\n\n                identification = Dataset()\n                identification.ReferencedSegmentNumber = segment_number\n                pffp_item.SegmentIdentificationSequence = [\n                    identification,\n                ]\n                self.PerFrameFunctionalGroupsSequence.append(pffp_item)\n                self.NumberOfFrames += 1\n\n            if re_encode_pixel_data:\n                full_pixel_array = np.concatenate([\n                    full_pixel_array,\n                    planes[contained_plane_index].flatten()\n                ])\n            else:\n                self.PixelData += self._encode_pixels(\n                    planes[contained_plane_index]\n                )\n\n            # In case of a tiled Total Pixel Matrix pixel data for the same\n            # segment may be added.\n            if segment_number not in self._segment_inventory:\n                self.SegmentSequence.append(segment_descriptions[i])\n            self._segment_inventory.add(segment_number)\n\n        # Re-encode the whole pixel array at once if necessary\n        if re_encode_pixel_data:\n            self.PixelData = self._encode_pixels(full_pixel_array)\n\n        # Add back the null trailing byte if required\n        if len(self.PixelData) % 2 == 1:\n            self.PixelData += b\'0\'\n\n    def _encode_pixels(self, planes: np.ndarray) -> bytes:\n        """"""Encodes pixel planes.\n\n        Parameters\n        ----------\n        planes: numpy.ndarray\n            Array representing one or more segmentation image planes\n\n        Returns\n        -------\n        bytes\n            Encoded pixels\n\n        """"""\n        # TODO: compress depending on transfer syntax UID\n        if self.SegmentationType == SegmentationTypeValues.BINARY.value:\n            return pack_bits(planes.flatten())\n        else:\n            return planes.flatten().tobytes()\n'"
src/highdicom/seg/utils.py,3,"b'""""""Utilities for working with SEG image instances.""""""\nfrom typing import Generator, Optional, Union\n\nimport numpy as np\nfrom pydicom.dataset import Dataset\nfrom pydicom.sr.coding import Code\n\n\ndef iter_segments(dataset: Dataset) -> Generator:\n    """"""Iterates over segments of a Segmentation image instance.\n\n    Parameters\n    ----------\n    dataset: pydicom.dataset.Dataset\n        Segmentation image instance\n\n    Returns\n    -------\n    Generator[Tuple[numpy.ndarray, Tuple[pydicom.dataset.Dataset], pydicom.dataset.Dataset]]\n        Pixel pata frames and description (items of the Per-Frame Functional\n        Groups Sequence and item of the Segment Sequence) of each segment\n\n    Raises\n    ------\n    AttributeError\n        When data set does not contain Content Sequence attribute.\n\n    """"""  # noqa\n    if not hasattr(dataset, \'PixelData\'):\n        raise AttributeError(\n            \'Data set does not contain a Pixel Data attribute.\'\n        )\n    segment_description_lut = {\n        int(item.SegmentNumber): item\n        for item in dataset.SegmentSequence\n    }\n    segment_number_per_frame = np.array([\n        int(item.SegmentIdentificationSequence[0].ReferencedSegmentNumber)\n        for item in dataset.PerFrameFunctionalGroupsSequence\n    ])\n    for i in np.unique(segment_number_per_frame):\n        indices = np.where(segment_number_per_frame == i)[0]\n        yield (\n            dataset.pixel_array[indices, ...],\n            tuple([\n                dataset.PerFrameFunctionalGroupsSequence[index]\n                for index in indices\n            ]),\n            segment_description_lut[i],\n        )\n'"
src/highdicom/sr/__init__.py,0,"b'""""""Package for creationg of Structured Report (SR) instances.""""""\n\nSOP_CLASS_UIDS = {\n    \'1.2.840.10008.5.1.4.1.1.88.11\',  # Basic Text SR\n    \'1.2.840.10008.5.1.4.1.1.88.22\',  # Enhanced SR\n    \'1.2.840.10008.5.1.4.1.1.88.33\',  # Comprehensive SR\n    \'1.2.840.10008.5.1.4.1.1.88.34\',  # Comprehensive 3D SR\n    \'1.2.840.10008.5.1.4.1.1.88.35\',  # Extensible SR\n    \'1.2.840.10008.5.1.4.1.1.88.40\',  # Procedure Log\n    \'1.2.840.10008.5.1.4.1.1.88.50\',  # Mammography CAD SR\n    \'1.2.840.10008.5.1.4.1.1.88.65\',  # Chest CAD SR\n    \'1.2.840.10008.5.1.4.1.1.88.67\',  # X-Ray Radiation Dose SR\n    \'1.2.840.10008.5.1.4.1.1.88.68\',  # Radiopharmaceutical Radiation Dose SR\n    \'1.2.840.10008.5.1.4.1.1.88.69\',  # Colon CAD SR\n    \'1.2.840.10008.5.1.4.1.1.88.70\',  # Implantation Plan SR\n    \'1.2.840.10008.5.1.4.1.1.88.71\',  # Acquisition Context SR\n    \'1.2.840.10008.5.1.4.1.1.88.72\',  # Simplified Adult Echo SR\n    \'1.2.840.10008.5.1.4.1.1.88.73\',  # Patient Radiation Dose SR\n}\n'"
src/highdicom/sr/coding.py,0,"b'import logging\nfrom typing import Any, Optional, Sequence, Union\n\nfrom pydicom.dataset import Dataset\nfrom pydicom.sr.coding import Code\n\nlogger = logging.getLogger(__name__)\n\n\nclass CodedConcept(Dataset):\n\n    """"""Coded concept of a DICOM SR document content module attribute.""""""\n\n    def __init__(\n            self,\n            value: str,\n            scheme_designator: str,\n            meaning: str,\n            scheme_version: Optional[str] = None\n    ) -> None:\n        """"""\n        Parameters\n        ----------\n        value: str\n            code\n        scheme_designator: str\n            designator of coding scheme\n        meaning: str\n            meaning of the code\n        scheme_version: str, optional\n            version of coding scheme\n\n        """"""\n        super(CodedConcept, self).__init__()\n        if len(value) > 16:\n            if value.startswith(\'urn\') or \'://\' in value:\n                self.URNCodeValue = str(value)\n            else:\n                self.LongCodeValue = str(value)\n        else:\n            self.CodeValue = str(value)\n        self.CodeMeaning = str(meaning)\n        self.CodingSchemeDesignator = str(scheme_designator)\n        if scheme_version is not None:\n            self.CodingSchemeVersion = str(scheme_version)\n        # TODO: Enhanced Code Sequence Macro Attributes\n\n    def __eq__(self, other: Any) -> bool:\n        """"""Compares `self` and `other` for equality.\n\n        Parameters\n        ----------\n        other: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            code\n\n        Returns\n        -------\n        bool\n            whether `self` and `other` are considered equal\n\n        """"""\n        return Code.__eq__(self, other)\n\n    def __ne__(self, other: Any) -> bool:\n        """"""Compares `self` and `other` for inequality.\n\n        Parameters\n        ----------\n        other: Union[CodedConcept, pydicom.sr.coding.Code]\n            code\n\n        Returns\n        -------\n        bool\n            whether `self` and `other` are not considered equal\n\n        """"""\n        return not (self == other)\n\n    @property\n    def value(self) -> str:\n        """"""str: value of either `CodeValue`, `LongCodeValue` or `URNCodeValue`\n        attribute""""""\n        return getattr(\n            self, \'CodeValue\',\n            getattr(\n                self, \'LongCodeValue\',\n                getattr(\n                    self, \'URNCodeValue\',\n                    None\n                )\n            )\n        )\n\n    @property\n    def meaning(self) -> str:\n        """"""str: meaning of the code""""""\n        return self.CodeMeaning\n\n    @property\n    def scheme_designator(self) -> str:\n        """"""str: designator of the coding scheme (e.g. ``""DCM""``)""""""\n\n        return self.CodingSchemeDesignator\n\n    @property\n    def scheme_version(self) -> str:\n        """"""Union[str, None]: version of the coding scheme (if specified)""""""\n        return getattr(self, \'CodingSchemeVersion\', None)\n\n\nclass CodingSchemeResourceItem(Dataset):\n\n    """"""Class for items of the Coding Scheme Resource Sequence.""""""\n\n    def __init__(self, url: str, url_type: str) -> None:\n        """"""\n        Parameters\n        ----------\n        url: str\n            unique resource locator\n        url_type: str\n            type of resource `url` points to (options: `{""DOC"", ""OWL"", ""CSV""}`)\n\n        """"""\n        super().__init__()\n        self.CodingSchemeURL = str(url)\n        if url_type not in {""DOC"", ""OWL"", ""CSV""}:\n            raise ValueError(\'Unknonw URL type.\')\n        self.CodingSchemeURLType = str(url_type)\n\n\nclass CodingSchemeIdentificationItem(Dataset):\n\n    """"""Class for items of the Coding Scheme Identification Sequence.""""""\n\n    def __init__(\n            self,\n            designator: str,\n            name: Optional[str] = None,\n            version: Optional[str] = None,\n            registry: Optional[str] = None,\n            uid: Optional[str] = None,\n            external_id: Optional[str] = None,\n            responsible_organization: Optional[str] = None,\n            resources: Optional[Sequence[CodingSchemeResourceItem]] = None\n    ) -> None:\n        """"""\n        Parameters\n        ----------\n        designator: str\n            value of the Coding Scheme Designator attribute of a `CodedConcept`\n        name: str, optional\n            name of the scheme\n        version: str, optional\n            version of the scheme\n        registry: str, optional\n            name of an external registry where scheme may be obtained from;\n            required if scheme is registered\n        uid: str, optional\n            unique identifier of the scheme; required if the scheme is\n            registered by an ISO 8824 object identifier compatible with the\n            UI value representation (VR)\n        external_id: str, optional\n            external identifier of the scheme; required if the scheme is\n            registered and `uid` is not available\n        responsible_organization: str, optional\n            name of the organization that is responsible for the scheme\n        resources: Sequence[pydicom.sr.coding.CodingSchemeResourceItem], optional\n            one or more resources related to the scheme\n\n        """"""  # noqa\n        super().__init__()\n        self.CodingSchemeDesignator = str(designator)\n        if name is not None:\n            self.CodingSchemeName = str(name)\n        if version is not None:\n            self.CodingSchemeVersion = str(version)\n        if responsible_organization is not None:\n            self.CodingSchemeResponsibleOrganization = \\\n                str(responsible_organization)\n        if registry is not None:\n            self.CodingSchemeRegistry = str(registry)\n            if uid is None and external_id is None:\n                raise ValueError(\n                    \'UID or external ID is required if coding scheme is \'\n                    \'registered.\'\n                )\n            if uid is not None and external_id is not None:\n                raise ValueError(\n                    \'Either UID or external ID should be specified for \'\n                    \'registered coding scheme.\'\n                )\n            if uid is not None:\n                self.CodingSchemeUID = str(uid)\n            elif external_id is not None:\n                self.CodingSchemeExternalID = str(external_id)\n        if resources is not None:\n            self.CodingSchemeResourcesSequence: Sequence[Dataset] = []\n            for r in resources:\n                if not isinstance(r, CodingSchemeResourceItem):\n                    raise TypeError(\n                        \'Resources must have type CodingSchemeResourceItem.\'\n                    )\n                self.CodingSchemeResourcesSequence.append(r)\n'"
src/highdicom/sr/content.py,3,"b'""""""Content items for Structured Report document instances.""""""\nfrom typing import Optional, Sequence, Union\n\nimport numpy as np\nfrom pydicom.sr.coding import Code\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.enum import (\n    GraphicTypeValues,\n    GraphicTypeValues3D,\n    PixelOriginInterpretationValues,\n    RelationshipTypeValues,\n)\nfrom highdicom.sr.value_types import (\n    CodeContentItem,\n    CompositeContentItem,\n    ContentSequence,\n    ImageContentItem,\n    NumContentItem,\n    ScoordContentItem,\n    Scoord3DContentItem,\n    UIDRefContentItem,\n)\n\n\nclass LongitudinalTemporalOffsetFromEvent(NumContentItem):\n\n    """"""Content item representing a longitudinal temporal offset from an event.\n    """"""\n\n    def __init__(\n            self,\n            value: Optional[Union[int, float]],\n            unit: Optional[Union[CodedConcept, Code]] = None,\n            event_type: Optional[Union[CodedConcept, Code]] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        value: Union[int, float], optional\n            offset in time from a particular event of significance\n        unit: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            unit of time, e.g., ""Days"" or ""Seconds""\n        event_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            type of event to which offset is relative,\n            e.g., ""Baseline"" or ""Enrollment""\n\n        """"""  # noqa\n        super().__init__(\n            name=CodedConcept(\n                value=\'128740\',\n                meaning=\'Longitudinal Temporal Offset from Event\',\n                scheme_designator=\'DCM\'\n            ),\n            value=value,\n            unit=unit,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        event_type_item = CodeContentItem(\n            name=CodedConcept(\n                value=\'128741\',\n                meaning=\'Longitudinal Temporal Event Type\',\n                scheme_designator=\'DCM\'\n            ),\n            value=event_type,\n            relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n        )\n        self.ContentSequence = ContentSequence([event_type_item])\n\n\nclass SourceImageForMeasurement(ImageContentItem):\n\n    """"""Content item representing a reference to an image that was used as a\n    source for a measurement.\n    """"""\n\n    def __init__(\n            self,\n            referenced_sop_class_uid: str,\n            referenced_sop_instance_uid: str,\n            referenced_frame_numbers: Optional[Sequence[int]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        referenced_sop_class_uid: str\n            SOP Class UID of the referenced image object\n        referenced_sop_instance_uid: str\n            SOP Instance UID of the referenced image object\n        referenced_frame_numbers: Sequence[int], optional\n            numbers of the frames to which the reference applies in case the\n            referenced image is a multi-frame image\n\n        """"""\n        super().__init__(\n            name=CodedConcept(\n                value=\'121112\',\n                meaning=\'Source of Measurement\',\n                scheme_designator=\'DCM\'\n            ),\n            referenced_sop_class_uid=referenced_sop_class_uid,\n            referenced_sop_instance_uid=referenced_sop_instance_uid,\n            referenced_frame_numbers=referenced_frame_numbers,\n            relationship_type=RelationshipTypeValues.SELECTED_FROM\n        )\n\n\nclass SourceImageForRegion(ImageContentItem):\n\n    """"""Content item representing a reference to an image that was used as a\n    source for a region.\n    """"""\n\n    def __init__(\n            self,\n            referenced_sop_class_uid: str,\n            referenced_sop_instance_uid: str,\n            referenced_frame_numbers: Optional[Sequence[int]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        referenced_sop_class_uid: str\n            SOP Class UID of the referenced image object\n        referenced_sop_instance_uid: str\n            SOP Instance UID of the referenced image object\n        referenced_frame_numbers: Sequence[int], optional\n            numbers of the frames to which the reference applies in case the\n            referenced image is a multi-frame image\n\n        """"""\n        super().__init__(\n            name=CodedConcept(\n                value=\'111040\',\n                meaning=\'Original Source\',\n                scheme_designator=\'DCM\'\n            ),\n            referenced_sop_class_uid=referenced_sop_class_uid,\n            referenced_sop_instance_uid=referenced_sop_instance_uid,\n            referenced_frame_numbers=referenced_frame_numbers,\n            relationship_type=RelationshipTypeValues.SELECTED_FROM\n        )\n\n\nclass SourceImageForSegmentation(ImageContentItem):\n\n    """"""Content item representing a reference to an image that was used as the\n    source for a segmentation.\n    """"""\n\n    def __init__(\n            self,\n            referenced_sop_class_uid: str,\n            referenced_sop_instance_uid: str,\n            referenced_frame_numbers: Optional[Sequence[int]] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        referenced_sop_class_uid: str\n            SOP Class UID of the referenced image object\n        referenced_sop_instance_uid: str\n            SOP Instance UID of the referenced image object\n        referenced_frame_numbers: Sequence[int], optional\n            numbers of the frames to which the reference applies in case the\n            referenced image is a multi-frame image\n\n        """"""\n        super().__init__(\n            name=CodedConcept(\n                value=\'121233\',\n                meaning=\'Source Image for Segmentation\',\n                scheme_designator=\'DCM\'\n            ),\n            referenced_sop_class_uid=referenced_sop_class_uid,\n            referenced_sop_instance_uid=referenced_sop_instance_uid,\n            referenced_frame_numbers=referenced_frame_numbers,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n\n\nclass SourceSeriesForSegmentation(UIDRefContentItem):\n\n    """"""Content item representing a reference to a series of images that was\n    used as the source for a segmentation.\n    """"""\n\n    def __init__(self, referenced_series_instance_uid: str):\n        """"""\n        Parameters\n        ----------\n        referenced_series_instance_uid: str\n            Series Instance UID\n\n        """"""\n        super().__init__(\n            name=CodedConcept(\n                value=\'121232\',\n                meaning=\'Source Series for Segmentation\',\n                scheme_designator=\'DCM\'\n            ),\n            value=referenced_series_instance_uid,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n\n\nclass ImageRegion(ScoordContentItem):\n\n    """"""Content item representing an image region of interest in the\n    two-dimensional image coordinate space in pixel unit.\n    """"""\n\n    def __init__(\n            self,\n            graphic_type: Union[GraphicTypeValues, str],\n            graphic_data: np.ndarray,\n            source_image: SourceImageForRegion,\n            pixel_origin_interpretation: Optional[\n                Union[PixelOriginInterpretationValues, str]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        graphic_type: Union[highdicom.sr.enum.GraphicTypeValues, str]\n            name of the graphic type\n        graphic_data: numpy.ndarray\n            array of ordered spatial coordinates, where each row of the array\n            represents a (column, row) coordinate pair\n        source_image: highdicom.sr.template.SourceImageForRegion\n            source image to which `graphic_data` relates\n        pixel_origin_interpretation: Union[highdicom.sr.enum.PixelOriginInterpretationValues, str], optional\n            whether pixel coordinates specified by `graphic_data` are defined\n            relative to the total pixel matrix\n            (``highdicom.sr.enum.PixelOriginInterpretationValues.VOLUME``) or\n            relative to an individual frame\n            (``highdicom.sr.enum.PixelOriginInterpretationValues.FRAME``)\n            of the source image\n            (default: ``highdicom.sr.enum.PixelOriginInterpretationValues.VOLUME``)\n\n        """"""  # noqa\n        graphic_type = GraphicTypeValues(graphic_type)\n        if graphic_type == GraphicTypeValues.MULTIPOINT:\n            raise ValueError(\n                \'Graphic type ""MULTIPOINT"" is not valid for region.\'\n            )\n        if not isinstance(source_image, SourceImageForRegion):\n            raise TypeError(\n                \'Argument ""source_image"" must have type SourceImageForRegion.\'\n            )\n        if pixel_origin_interpretation is None:\n            pixel_origin_interpretation = PixelOriginInterpretationValues.VOLUME\n        if pixel_origin_interpretation == PixelOriginInterpretationValues.FRAME:\n            if (not hasattr(source_image, \'ReferencedFrameNumber\') or\n                    source_image.ReferencedFrameNumber is None):\n                raise ValueError(\n                    \'Frame number of source image must be specified when value \'\n                    \'of argument ""pixel_origin_interpretation"" is ""FRAME"".\'\n                )\n        super().__init__(\n            name=CodedConcept(\n                value=\'111030\',\n                meaning=\'Image Region\',\n                scheme_designator=\'DCM\'\n            ),\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            pixel_origin_interpretation=pixel_origin_interpretation,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        self.ContentSequence = [source_image]\n\n\nclass ImageRegion3D(Scoord3DContentItem):\n\n    """"""Content item representing an image region of interest in the\n    three-dimensional patient/slide coordinate space in millimeter unit.\n    """"""\n\n    def __init__(\n            self,\n            graphic_type: Union[GraphicTypeValues3D, str],\n            graphic_data: np.ndarray,\n            frame_of_reference_uid: str\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        graphic_type: Union[highdicom.sr.enum.GraphicTypeValues3D, str]\n            name of the graphic type\n        graphic_data: numpy.ndarray\n            array of ordered spatial coordinates, where each row of the array\n            represents a (x, y, z) coordinate triplet\n        frame_of_reference_uid: str\n            UID of the frame of reference\n\n        """"""  # noqa\n        graphic_type = GraphicTypeValues3D(graphic_type)\n        if graphic_type == GraphicTypeValues3D.MULTIPOINT:\n            raise ValueError(\n                \'Graphic type ""MULTIPOINT"" is not valid for region.\'\n            )\n        if graphic_type == GraphicTypeValues3D.ELLIPSOID:\n            raise ValueError(\n                \'Graphic type ""ELLIPSOID"" is not valid for region.\'\n            )\n        super().__init__(\n            name=CodedConcept(\n                value=\'111030\',\n                meaning=\'Image Region\',\n                scheme_designator=\'DCM\'\n            ),\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            frame_of_reference_uid=frame_of_reference_uid,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n\n\nclass VolumeSurface(Scoord3DContentItem):\n\n    """"""Content item representing a volume surface in the the three-dimensional\n    patient/slide coordinate system in millimeter unit.\n    """"""\n\n    def __init__(\n            self,\n            graphic_type: Union[GraphicTypeValues3D, str],\n            graphic_data: np.ndarray,\n            frame_of_reference_uid: str,\n            source_images: Optional[\n                Sequence[SourceImageForSegmentation]\n            ] = None,\n            source_series: Optional[SourceSeriesForSegmentation] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        graphic_type: Union[highdicom.sr.enum.GraphicTypeValues3D, str]\n            name of the graphic type\n        graphic_data: Sequence[Sequence[int]]\n            ordered set of (row, column, frame) coordinate pairs\n        frame_of_reference_uid: str\n            unique identifier of the frame of reference within which the\n            coordinates are defined\n        source_images: Sequence[highdicom.sr.content.SourceImageForSegmentation], optional\n            source images for segmentation\n        source_series: highdicom.sr.content.SourceSeriesForSegmentation, optional\n            source series for segmentation\n\n        Note\n        ----\n        Either one or more source images or one source series must be provided.\n\n        """"""  # noqa\n        graphic_type = GraphicTypeValues3D(graphic_type)\n        if graphic_type != GraphicTypeValues3D.ELLIPSOID:\n            raise ValueError(\n                \'Graphic type for volume surface must be ""ELLIPSOID"".\'\n            )\n        super().__init__(\n            name=CodedConcept(\n                value=\'121231\',\n                meaning=\'Volume Surface\',\n                scheme_designator=\'DCM\'\n            ),\n            frame_of_reference_uid=frame_of_reference_uid,\n            graphic_type=graphic_type,\n            graphic_data=graphic_data,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        self.ContentSequence = ContentSequence()\n        if source_images is not None:\n            for image in source_images:\n                if not isinstance(image, SourceImageForSegmentation):\n                    raise TypeError(\n                        \'Items of argument ""source_image"" must have type \'\n                        \'SourceImageForSegmentation.\'\n                    )\n                self.ContentSequence.append(image)\n        elif source_series is not None:\n            if not isinstance(source_series, SourceSeriesForSegmentation):\n                raise TypeError(\n                    \'Argument ""source_series"" must have type \'\n                    \'SourceSeriesForSegmentation.\'\n                )\n            self.ContentSequence.append(source_series)\n        else:\n            raise ValueError(\n                \'One of the following two arguments must be provided: \'\n                \'""source_images"" or ""source_series"".\'\n            )\n\n\nclass RealWorldValueMap(CompositeContentItem):\n\n    """"""Content item representing a reference to a real world value map.""""""\n\n    def __init__(self, referenced_sop_instance_uid: str):\n        """"""\n        Parameters\n        ----------\n        referenced_sop_instance_uid: str\n            SOP Instance UID of the referenced object\n\n        """"""\n        super().__init__(\n            name=CodedConcept(\n                value=\'126100\',\n                meaning=\'Real World Value Map used for measurement\',\n                scheme_designator=\'DCM\'\n            ),\n            referenced_sop_class_uid=\'1.2.840.10008.5.1.4.1.1.67\',\n            referenced_sop_instance_uid=referenced_sop_instance_uid,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n\n\nclass FindingSite(CodeContentItem):\n\n    """"""Content item representing a coded finding site.""""""\n\n    def __init__(\n            self,\n            anatomic_location: Union[CodedConcept, Code],\n            laterality: Optional[Union[CodedConcept, Code]] = None,\n            topographical_modifier: Optional[Union[CodedConcept, Code]] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        anatomic_location: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded anatomic location (region or structure)\n        laterality: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded laterality\n            (see CID 244 ""Laterality"" for options)\n        topographical_modifier: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded modifier of anatomic location\n\n        """"""  # noqa\n        super().__init__(\n            name=CodedConcept(\n                value=\'363698007\',\n                meaning=\'Finding Site\',\n                scheme_designator=\'SCT\'\n            ),\n            value=anatomic_location,\n            relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n        )\n        self.ContentSequence = ContentSequence()\n        if laterality is not None:\n            laterality_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'272741003\',\n                    meaning=\'Laterality\',\n                    scheme_designator=\'SCT\'\n                ),\n                value=laterality,\n                relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n            )\n            self.ContentSequence.append(laterality_item)\n        if topographical_modifier is not None:\n            modifier_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'106233006\',\n                    meaning=\'Topographical Modifier\',\n                    scheme_designator=\'SCT\'\n                ),\n                value=topographical_modifier,\n                relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n            )\n            self.ContentSequence.append(modifier_item)\n\n\nclass ReferencedSegmentationFrame(ContentSequence):\n\n    """"""Content items representing a reference to an individual frame of a\n    segmentation instance as well as the image that was used as a source for\n    the segmentation.\n    """"""\n\n    def __init__(\n            self,\n            sop_class_uid: str,\n            sop_instance_uid: str,\n            frame_number: int,\n            segment_number: int,\n            source_image: SourceImageForSegmentation\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        sop_class_uid: str\n            SOP Class UID of the referenced image object\n        sop_instance_uid: str\n            SOP Instance UID of the referenced image object\n        segment_number: int\n            number of the segment to which the refernce applies\n        frame_number: int\n            number of the frame to which the reference applies\n        source_image: highdicom.sr.content.SourceImageForSegmentation\n            source image for segmentation\n\n        """"""\n        super().__init__()\n        segmentation_item = ImageContentItem(\n            name=CodedConcept(\n                value=\'121214\',\n                meaning=\'Referenced Segmentation Frame\',\n                scheme_designator=\'DCM\'\n            ),\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n            referenced_frame_numbers=frame_number,\n            referenced_segment_numbers=segment_number,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        self.append(segmentation_item)\n        if not isinstance(source_image, SourceImageForSegmentation):\n            raise TypeError(\n                \'Argument ""source_image"" must have type \'\n                \'SourceImageForSegmentation.\'\n            )\n        self.append(source_image)\n\n\nclass ReferencedSegment(ContentSequence):\n\n    """"""Content items representing a reference to an individual segment of a\n    segmentation or surface segmentation instance as well as the images that\n    were used as a source for the segmentation.\n    """"""\n\n    def __init__(\n            self,\n            sop_class_uid: str,\n            sop_instance_uid: str,\n            segment_number: int,\n            frame_numbers: Optional[Sequence[int]] = None,\n            source_images: Optional[\n                Sequence[SourceImageForSegmentation]\n            ] = None,\n            source_series: Optional[SourceSeriesForSegmentation] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        sop_class_uid: str\n            SOP Class UID of the referenced segmentation object\n        sop_instance_uid: str\n            SOP Instance UID of the referenced segmentation object\n        frame_numbers: Sequence[int], optional\n            numbers of the frames to which the reference applies\n            (in case a segmentation instance is referenced)\n        segment_number: int\n            number of the segment to which the refernce applies\n        source_images: Sequence[highdicom.sr.content.SourceImageForSegmentation], optional\n            source images for segmentation\n        source_series: highdicom.sr.content.SourceSeriesForSegmentation, optional\n            source series for segmentation\n\n        Note\n        ----\n        Either `source_images` or `source_series` must be provided.\n\n        """"""  # noqa\n        super().__init__()\n        segment_item = ImageContentItem(\n            name=CodedConcept(\n                value=\'121191\',\n                meaning=\'Referenced Segment\',\n                scheme_designator=\'DCM\'\n            ),\n            referenced_sop_class_uid=sop_class_uid,\n            referenced_sop_instance_uid=sop_instance_uid,\n            referenced_frame_numbers=frame_numbers,\n            referenced_segment_numbers=segment_number,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        self.append(segment_item)\n        if source_images is not None:\n            for image in source_images:\n                if not isinstance(image, SourceImageForSegmentation):\n                    raise TypeError(\n                        \'Items of argument ""source_images"" must have type \'\n                        \'SourceImageForSegmentation.\'\n                    )\n                self.append(image)\n        elif source_series is not None:\n            if not isinstance(source_series,\n                              SourceSeriesForSegmentation):\n                raise TypeError(\n                    \'Argument ""source_series"" must have type \'\n                    \'SourceSeriesForSegmentation.\'\n                )\n            self.append(source_series)\n        else:\n            raise ValueError(\n                \'One of the following two arguments must be provided: \'\n                \'""source_images"" or ""source_series"".\'\n            )\n'"
src/highdicom/sr/enum.py,0,"b'""""""Enumerate values specific to Structured Report IODs.""""""\nfrom enum import Enum\n\n\nclass ValueTypeValues(Enum):\n\n    """"""Enumerated values for attribute Value Type.""""""\n\n    CODE = \'CODE\'\n    COMPOSITE = \'COMPOSITE\'\n    CONTAINER = \'CONTAINER\'\n    DATE = \'DATE\'\n    DATETIME = \'DATETIME\'\n    IMAGE = \'IMAGE\'\n    NUM = \'NUM\'\n    PNAME = \'PNAME\'\n    SCOORD = \'SCOORD\'\n    SCOORD3D = \'SCOORD3D\'\n    TCOORD = \'TCOORD\'\n    TEXT = \'TEXT\'\n    TIME = \'TIME\'\n    UIDREF = \'UIDREF\'\n    WAVEFORM = \'WAVEFORM\'\n\n\nclass GraphicTypeValues(Enum):\n\n    """"""Enumerated values for attribute Graphic Type.""""""\n\n    CIRCLE = \'CIRCLE\'\n    ELLIPSE = \'ELLIPSE\'\n    ELLIPSOID = \'ELLIPSOID\'\n    MULTIPOINT = \'MULTIPOINT\'\n    POINT = \'POINT\'\n    POLYLINE = \'POLYLINE\'\n\n\nclass GraphicTypeValues3D(Enum):\n\n    """"""Enumerated values for attribute Graphic Type 3D.""""""\n\n    ELLIPSE = \'ELLIPSE\'\n    ELLIPSOID = \'ELLIPSOID\'\n    MULTIPOINT = \'MULTIPOINT\'\n    POINT = \'POINT\'\n    POLYLINE = \'POLYLINE\'\n    POLYGON = \'POLYGON\'\n\n\nclass TemporalRangeTypeValues(Enum):\n\n    """"""Enumerated values for attribute Temporal Range Type.""""""\n\n    BEGIN = \'BEGIN\'\n    END = \'END\'\n    MULTIPOINT = \'MULTIPOINT\'\n    MULTISEGMENT = \'MULTISEGMENT\'\n    POINT = \'POINT\'\n    SEGMENT = \'SEGMENT\'\n\n\nclass RelationshipTypeValues(Enum):\n\n    """"""Enumerated values for attribute Relationship Type.""""""\n\n    CONTAINS = \'CONTAINS\'\n    HAS_ACQ_CONTENT = \'HAS ACQ CONTENT\'\n    HAS_CONCEPT_MOD = \'HAS CONCEPT MOD\'\n    HAS_OBS_CONTEXT = \'HAS OBS CONTEXT\'\n    HAS_PROPERTIES = \'HAS PROPERTIES\'\n    INFERRED_FROM = \'INFERRED FROM\'\n    SELECTED_FROM = \'SELECTED FROM\'\n\n\nclass PixelOriginInterpretationValues(Enum):\n\n    """"""Enumerated values for attribute Pixel Origin Interpretation.""""""\n\n    FRAME = \'FRAME\'\n    VOLUME = \'VOLUME\'\n'"
src/highdicom/sr/sop.py,0,"b'""""""Module for SOP Classes of Structured Report (SR) IODs.""""""\n\nimport datetime\nimport logging\nfrom collections import defaultdict\nfrom typing import Any, Dict, List, Optional, Sequence, Union\n\nfrom pydicom.sr.coding import Code\nfrom pydicom.dataset import Dataset\nfrom pydicom.uid import PYDICOM_IMPLEMENTATION_UID, ExplicitVRLittleEndian\nfrom pydicom.valuerep import DA, DT, TM\nfrom pydicom._storage_sopclass_uids import (\n    ComprehensiveSRStorage,\n    Comprehensive3DSRStorage,\n    EnhancedSRStorage,\n)\n\nfrom highdicom.base import SOPClass\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.enum import ValueTypeValues\nfrom highdicom.sr.utils import find_content_items\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass _SR(SOPClass):\n\n    """"""Abstract base class for Structured Report (SR) SOP classes.""""""\n\n    def __init__(\n            self,\n            evidence: Sequence[Dataset],\n            content: Dataset,\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            sop_class_uid: str,\n            instance_number: int,\n            manufacturer: Optional[str] = None,\n            is_complete: bool = False,\n            is_final: bool = False,\n            is_verified: bool = False,\n            institution_name: Optional[str] = None,\n            institutional_department_name: Optional[str] = None,\n            verifying_observer_name: Optional[str] = None,\n            verifying_organization: Optional[str] = None,\n            performed_procedure_codes: Optional[\n                Sequence[Union[Code, CodedConcept]]\n            ] = None,\n            requested_procedures: Optional[Sequence[Dataset]] = None,\n            previous_versions: Optional[Sequence[Dataset]] = None,\n            record_evidence: bool = True,\n            **kwargs: Any\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        evidence: Sequence[pydicom.dataset.Dataset]\n            Instances that are referenced in the content tree and from which\n            the created SR document instance should inherit patient and study\n            information\n        content: pydicom.dataset.Dataset\n            Root container content items that should be included in the\n            SR document\n        series_instance_uid: str\n            Series Instance UID of the SR document series\n        series_number: Union[int, None]\n            Series Number of the SR document series\n        sop_instance_uid: str\n            SOP Instance UID that should be assigned to the SR document instance\n        sop_class_uid: str\n            SOP Class UID for the SR document type\n        instance_number: int\n            Number that should be assigned to this SR document instance\n        manufacturer: str\n            Name of the manufacturer of the device that creates the SR document\n            instance (in a research setting this is typically the same\n            as `institution_name`)\n        is_complete: bool, optional\n            Whether the content is complete (default: ``False``)\n        is_final: bool, optional\n            Whether the report is the definitive means of communicating the\n            findings (default: ``False``)\n        is_verified: bool, optional\n            Whether the report has been verified by an observer accountable\n            for its content (default: ``False``)\n        institution_name: str, optional\n            Name of the institution of the person or device that creates the\n            SR document instance\n        institutional_department_name: str, optional\n            Name of the department of the person or device that creates the\n            SR document instance\n        verifying_observer_name: Union[str, None], optional\n            Name of the person that verfied the SR document\n            (required if `is_verified`)\n        verifying_organization: str\n            Name of the organization that verfied the SR document\n            (required if `is_verified`)\n        performed_procedure_codes: List[highdicom.sr.coding.CodedConcept]\n            Codes of the performed procedures that resulted in the SR document\n        requested_procedures: List[pydicom.dataset.Dataset]\n            Requested procedures that are being fullfilled by creation of the\n            SR document\n        previous_versions: List[pydicom.dataset.Dataset]\n            Instances representing previous versions of the SR document\n        record_evidence: bool, optional\n            Whether provided `evidence` should be recorded, i.e. included\n            in Current Requested Procedure Evidence Sequence or Pertinent\n            Other Evidence Sequence (default: ``True``)\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        Note\n        ----\n        Each dataset in `evidence` must be part of the same study.\n\n        """"""\n        super().__init__(\n            study_instance_uid=evidence[0].StudyInstanceUID,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=sop_class_uid,\n            instance_number=instance_number,\n            manufacturer=manufacturer,\n            modality=\'SR\',\n            transfer_syntax_uid=None,\n            patient_id=evidence[0].PatientID,\n            patient_name=evidence[0].PatientName,\n            patient_birth_date=evidence[0].PatientBirthDate,\n            patient_sex=evidence[0].PatientSex,\n            accession_number=evidence[0].AccessionNumber,\n            study_id=evidence[0].StudyID,\n            study_date=evidence[0].StudyDate,\n            study_time=evidence[0].StudyTime,\n            referring_physician_name=evidence[0].ReferringPhysicianName,\n            **kwargs\n        )\n\n        if institution_name is not None:\n            self.InstitutionName = institution_name\n            if institutional_department_name is not None:\n                self.InstitutionalDepartmentName = institutional_department_name\n\n        now = datetime.datetime.now()\n        if is_complete:\n            self.CompletionFlag = \'COMPLETE\'\n        else:\n            self.CompletionFlag = \'PARTIAL\'\n        if is_verified:\n            if verifying_observer_name is None:\n                raise ValueError(\n                    \'Verifying Observer Name must be specified if SR document \'\n                    \'has been verified.\'\n                )\n            if verifying_organization is None:\n                raise ValueError(\n                    \'Verifying Organization must be specified if SR document \'\n                    \'has been verified.\'\n                )\n            self.VerificationFlag = \'VERIFIED\'\n            observer_item = Dataset()\n            observer_item.VerifyingObserverName = verifying_observer_name\n            observer_item.VerifyingOrganization = verifying_organization\n            observer_item.VerificationDateTime = DT(now)\n            self.VerifyingObserverSequence = [observer_item]\n        else:\n            self.VerificationFlag = \'UNVERIFIED\'\n        if is_final:\n            self.PreliminaryFlag = \'FINAL\'\n        else:\n            self.PreliminaryFlag = \'PRELIMINARY\'\n\n        # Add content to dataset\n        for tag, value in content.items():\n            self[tag] = value\n\n        evd_collection: Dict[str, List[Dataset]] = defaultdict(list)\n        for evd in evidence:\n            if evd.StudyInstanceUID != evidence[0].StudyInstanceUID:\n                raise ValueError(\n                    \'Referenced data sets must all belong to the same study.\'\n                )\n            evd_instance_item = Dataset()\n            evd_instance_item.ReferencedSOPClassUID = evd.SOPClassUID\n            evd_instance_item.ReferencedSOPInstanceUID = evd.SOPInstanceUID\n            evd_collection[evd.SeriesInstanceUID].append(\n                evd_instance_item\n            )\n        evd_study_item = Dataset()\n        evd_study_item.StudyInstanceUID = evidence[0].StudyInstanceUID\n        evd_study_item.ReferencedSeriesSequence = []\n        for evd_series_uid, evd_instance_items in evd_collection.items():\n            evd_series_item = Dataset()\n            evd_series_item.SeriesInstanceUID = evd_series_uid\n            evd_series_item.ReferencedSOPSequence = evd_instance_items\n            evd_study_item.ReferencedSeriesSequence.append(evd_series_item)\n        if requested_procedures is not None:\n            self.ReferencedRequestSequence = requested_procedures\n            self.CurrentRequestedProcedureEvidenceSequence = [evd_study_item]\n        else:\n            if record_evidence:\n                self.PertinentOtherEvidenceSequence = [evd_study_item]\n\n        if previous_versions is not None:\n            pre_collection: Dict[str, List[Dataset]] = defaultdict(list)\n            for pre in previous_versions:\n                if pre.StudyInstanceUID != evidence[0].StudyInstanceUID:\n                    raise ValueError(\n                        \'Previous version data sets must belong to the \'\n                        \'same study.\'\n                    )\n                pre_instance_item = Dataset()\n                pre_instance_item.ReferencedSOPClassUID = pre.SOPClassUID\n                pre_instance_item.ReferencedSOPInstanceUID = pre.SOPInstanceUID\n                pre_collection[pre.SeriesInstanceUID].append(\n                    pre_instance_item\n                )\n            pre_study_item = Dataset()\n            pre_study_item.StudyInstanceUID = pre.StudyInstanceUID\n            pre_study_item.ReferencedSeriesSequence = []\n            for pre_series_uid, pre_instance_items in pre_collection.items():\n                pre_series_item = Dataset()\n                pre_series_item.SeriesInstanceUID = pre_series_uid\n                pre_series_item.ReferencedSOPSequence = pre_instance_items\n                pre_study_item.ReferencedSeriesSequence.append(pre_series_item)\n            self.PredecessorDocumentsSequence = [pre_study_item]\n\n        if performed_procedure_codes is not None:\n            self.PerformedProcedureCodeSequence = performed_procedure_codes\n        else:\n            self.PerformedProcedureCodeSequence = []\n\n        # TODO\n        self.ReferencedPerformedProcedureStepSequence: List[Dataset] = []\n\n        self.copy_patient_and_study_information(evidence[0])\n\n\nclass EnhancedSR(_SR):\n\n    """"""SOP class for an Enhanced Structured Report (SR) document, whose\n    content may include textual and a minimal amount of coded information,\n    numeric measurement values, references to SOP Instances (retricted to the\n    leaves of the tree), as well as 2D spatial or temporal regions of interest\n    within such SOP Instances.\n    """"""\n\n    def __init__(\n            self,\n            evidence: Sequence[Dataset],\n            content: Dataset,\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            instance_number: int,\n            manufacturer: Optional[str] = None,\n            is_complete: bool = False,\n            is_final: bool = False,\n            is_verified: bool = False,\n            institution_name: Optional[str] = None,\n            institutional_department_name: Optional[str] = None,\n            verifying_observer_name: Optional[str] = None,\n            verifying_organization: Optional[str] = None,\n            performed_procedure_codes: Optional[\n                Sequence[Union[Code, CodedConcept]]\n            ] = None,\n            requested_procedures: Optional[Sequence[Dataset]] = None,\n            previous_versions: Optional[Sequence[Dataset]] = None,\n            record_evidence: bool = True,\n            **kwargs: Any\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        evidence: Sequence[pydicom.dataset.Dataset]\n            Instances that are referenced in the content tree and from which\n            the created SR document instance should inherit patient and study\n            information\n        content: pydicom.dataset.Dataset\n            Root container content items that should be included in the\n            SR document\n        series_instance_uid: str\n            Series Instance UID of the SR document series\n        series_number: Union[int, None]\n            Series Number of the SR document series\n        sop_instance_uid: str\n            SOP Instance UID that should be assigned to the SR document instance\n        instance_number: int\n            Number that should be assigned to this SR document instance\n        manufacturer: str, optional\n            Name of the manufacturer of the device that creates the SR document\n            instance (in a research setting this is typically the same\n            as `institution_name`)\n        is_complete: bool, optional\n            Whether the content is complete (default: ``False``)\n        is_final: bool, optional\n            Whether the report is the definitive means of communicating the\n            findings (default: ``False``)\n        is_verified: bool, optional\n            Whether the report has been verified by an observer accountable\n            for its content (default: ``False``)\n        institution_name: str, optional\n            Name of the institution of the person or device that creates the\n            SR document instance\n        institutional_department_name: str, optional\n            Name of the department of the person or device that creates the\n            SR document instance\n        verifying_observer_name: Union[str, None], optional\n            Name of the person that verfied the SR document\n            (required if `is_verified`)\n        verifying_organization: str\n            Name of the organization that verfied the SR document\n            (required if `is_verified`)\n        performed_procedure_codes: List[highdicom.sr.coding.CodedConcept]\n            Codes of the performed procedures that resulted in the SR document\n        requested_procedures: List[pydicom.dataset.Dataset]\n            Requested procedures that are being fullfilled by creation of the\n            SR document\n        previous_versions: List[pydicom.dataset.Dataset]\n            Instances representing previous versions of the SR document\n        record_evidence: bool, optional\n            Whether provided `evidence` should be recorded, i.e. included\n            in Current Requested Procedure Evidence Sequence or Pertinent\n            Other Evidence Sequence (default: ``True``)\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        Note\n        ----\n        Each dataset in `evidence` must be part of the same study.\n\n        """"""\n        super().__init__(\n            evidence=evidence,\n            content=content,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=EnhancedSRStorage,\n            instance_number=instance_number,\n            manufacturer=manufacturer,\n            is_complete=is_complete,\n            is_final=is_final,\n            is_verified=is_verified,\n            institution_name=institution_name,\n            institutional_department_name=institutional_department_name,\n            verifying_observer_name=verifying_observer_name,\n            verifying_organization=verifying_organization,\n            performed_procedure_codes=performed_procedure_codes,\n            requested_procedures=requested_procedures,\n            previous_versions=previous_versions,\n            record_evidence=record_evidence,\n            **kwargs\n        )\n        unsopported_content = find_content_items(\n            content,\n            value_type=ValueTypeValues.SCOORD3D,\n            recursive=True\n        )\n        if len(unsopported_content) > 0:\n            raise ValueError(\n                \'Enhanced SR does not support content items with \'\n                \'SCOORD3D value type.\'\n            )\n\n\nclass ComprehensiveSR(_SR):\n\n    """"""SOP class for a Comprehensive Structured Report (SR) document, whose\n    content may include textual and a variety of coded information, numeric\n    measurement values, references to SOP Instances, as well as 2D\n    spatial or temporal regions of interest within such SOP Instances.\n    """"""\n\n    def __init__(\n            self,\n            evidence: Sequence[Dataset],\n            content: Dataset,\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            instance_number: int,\n            manufacturer: Optional[str] = None,\n            is_complete: bool = False,\n            is_final: bool = False,\n            is_verified: bool = False,\n            institution_name: Optional[str] = None,\n            institutional_department_name: Optional[str] = None,\n            verifying_observer_name: Optional[str] = None,\n            verifying_organization: Optional[str] = None,\n            performed_procedure_codes: Optional[\n                Sequence[Union[Code, CodedConcept]]\n            ] = None,\n            requested_procedures: Optional[Sequence[Dataset]] = None,\n            previous_versions: Optional[Sequence[Dataset]] = None,\n            record_evidence: bool = True,\n            **kwargs: Any\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        evidence: Sequence[pydicom.dataset.Dataset]\n            Instances that are referenced in the content tree and from which\n            the created SR document instance should inherit patient and study\n            information\n        content: pydicom.dataset.Dataset\n            Root container content items that should be included in the\n            SR document\n        series_instance_uid: str\n            Series Instance UID of the SR document series\n        series_number: Union[int, None]\n            Series Number of the SR document series\n        sop_instance_uid: str\n            SOP Instance UID that should be assigned to the SR document instance\n        instance_number: int\n            Number that should be assigned to this SR document instance\n        manufacturer: str, optional\n            Name of the manufacturer of the device that creates the SR document\n            instance (in a research setting this is typically the same\n            as `institution_name`)\n        is_complete: bool, optional\n            Whether the content is complete (default: ``False``)\n        is_final: bool, optional\n            Whether the report is the definitive means of communicating the\n            findings (default: ``False``)\n        is_verified: bool, optional\n            Whether the report has been verified by an observer accountable\n            for its content (default: ``False``)\n        institution_name: str, optional\n            Name of the institution of the person or device that creates the\n            SR document instance\n        institutional_department_name: str, optional\n            Name of the department of the person or device that creates the\n            SR document instance\n        verifying_observer_name: Union[str, None], optional\n            Name of the person that verfied the SR document\n            (required if `is_verified`)\n        verifying_organization: str\n            Name of the organization that verfied the SR document\n            (required if `is_verified`)\n        performed_procedure_codes: List[highdicom.sr.coding.CodedConcept]\n            Codes of the performed procedures that resulted in the SR document\n        requested_procedures: List[pydicom.dataset.Dataset]\n            Requested procedures that are being fullfilled by creation of the\n            SR document\n        previous_versions: List[pydicom.dataset.Dataset]\n            Instances representing previous versions of the SR document\n        record_evidence: bool, optional\n            Whether provided `evidence` should be recorded, i.e. included\n            in Current Requested Procedure Evidence Sequence or Pertinent\n            Other Evidence Sequence (default: ``True``)\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        Note\n        ----\n        Each dataset in `evidence` must be part of the same study.\n\n        """"""\n        super().__init__(\n            evidence=evidence,\n            content=content,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=ComprehensiveSRStorage,\n            instance_number=instance_number,\n            manufacturer=manufacturer,\n            is_complete=is_complete,\n            is_final=is_final,\n            is_verified=is_verified,\n            institution_name=institution_name,\n            institutional_department_name=institutional_department_name,\n            verifying_observer_name=verifying_observer_name,\n            verifying_organization=verifying_organization,\n            performed_procedure_codes=performed_procedure_codes,\n            requested_procedures=requested_procedures,\n            previous_versions=previous_versions,\n            record_evidence=record_evidence,\n            **kwargs\n        )\n        unsopported_content = find_content_items(\n            content,\n            value_type=ValueTypeValues.SCOORD3D,\n            recursive=True\n        )\n        if len(unsopported_content) > 0:\n            raise ValueError(\n                \'Comprehensive SR does not support content items with \'\n                \'SCOORD3D value type.\'\n            )\n\n\nclass Comprehensive3DSR(_SR):\n\n    """"""SOP class for a Comprehensive 3D Structured Report (SR) document, whose\n    content may include textual and a variety of coded information, numeric\n    measurement values, references to SOP Instances, as well as 2D or 3D\n    spatial or temporal regions of interest within such SOP Instances.\n    """"""\n\n    def __init__(\n            self,\n            evidence: Sequence[Dataset],\n            content: Dataset,\n            series_instance_uid: str,\n            series_number: int,\n            sop_instance_uid: str,\n            instance_number: int,\n            manufacturer: Optional[str] = None,\n            is_complete: bool = False,\n            is_final: bool = False,\n            is_verified: bool = False,\n            institution_name: Optional[str] = None,\n            institutional_department_name: Optional[str] = None,\n            verifying_observer_name: Optional[str] = None,\n            verifying_organization: Optional[str] = None,\n            performed_procedure_codes: Optional[\n                Sequence[Union[Code, CodedConcept]]\n            ] = None,\n            requested_procedures: Optional[Sequence[Dataset]] = None,\n            previous_versions: Optional[Sequence[Dataset]] = None,\n            record_evidence: bool = True,\n            **kwargs: Any\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        evidence: Sequence[pydicom.dataset.Dataset]\n            Instances that are referenced in the content tree and from which\n            the created SR document instance should inherit patient and study\n            information\n        content: pydicom.dataset.Dataset\n            Root container content items that should be included in the\n            SR document\n        series_instance_uid: str\n            Series Instance UID of the SR document series\n        series_number: Union[int, None]\n            Series Number of the SR document series\n        sop_instance_uid: str\n            SOP instance UID that should be assigned to the SR document instance\n        instance_number: int\n            Number that should be assigned to this SR document instance\n        manufacturer: str, optional\n            Name of the manufacturer of the device that creates the SR document\n            instance (in a research setting this is typically the same\n            as `institution_name`)\n        is_complete: bool, optional\n            Whether the content is complete (default: ``False``)\n        is_final: bool, optional\n            Whether the report is the definitive means of communicating the\n            findings (default: ``False``)\n        is_verified: bool, optional\n            Whether the report has been verified by an observer accountable\n            for its content (default: ``False``)\n        institution_name: str, optional\n            Name of the institution of the person or device that creates the\n            SR document instance\n        institutional_department_name: str, optional\n            Name of the department of the person or device that creates the\n            SR document instance\n        verifying_observer_name: Union[str, None], optional\n            Name of the person that verfied the SR document\n            (required if `is_verified`)\n        verifying_organization: str\n            Name of the organization that verfied the SR document\n            (required if `is_verified`)\n        performed_procedure_codes: List[highdicom.sr.coding.CodedConcept]\n            Codes of the performed procedures that resulted in the SR document\n        requested_procedures: List[pydicom.dataset.Dataset]\n            Requested procedures that are being fullfilled by creation of the\n            SR document\n        previous_versions: List[pydicom.dataset.Dataset]\n            Instances representing previous versions of the SR document\n        record_evidence: bool, optional\n            Whether provided `evidence` should be recorded, i.e. included\n            in Current Requested Procedure Evidence Sequence or Pertinent\n            Other Evidence Sequence (default: ``True``)\n        **kwargs: Any, optional\n            Additional keyword arguments that will be passed to the constructor\n            of `highdicom.base.SOPClass`\n\n        Note\n        ----\n        Each dataset in `evidence` must be part of the same study.\n\n        """"""\n        super().__init__(\n            evidence=evidence,\n            content=content,\n            series_instance_uid=series_instance_uid,\n            series_number=series_number,\n            sop_instance_uid=sop_instance_uid,\n            sop_class_uid=Comprehensive3DSRStorage,\n            instance_number=instance_number,\n            manufacturer=manufacturer,\n            is_complete=is_complete,\n            is_final=is_final,\n            is_verified=is_verified,\n            institution_name=institution_name,\n            institutional_department_name=institutional_department_name,\n            verifying_observer_name=verifying_observer_name,\n            verifying_organization=verifying_organization,\n            performed_procedure_codes=performed_procedure_codes,\n            requested_procedures=requested_procedures,\n            previous_versions=previous_versions,\n            record_evidence=record_evidence,\n            **kwargs\n        )\n'"
src/highdicom/sr/templates.py,0,"b'""""""DICOM structured reporting templates.""""""\nfrom typing import Optional, Sequence, Union\n\nfrom pydicom.dataset import Dataset\nfrom pydicom.sr.coding import Code\nfrom pydicom.sr.codedict import codes\n\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.content import (\n    FindingSite,\n    LongitudinalTemporalOffsetFromEvent,\n    ImageRegion,\n    ImageRegion3D,\n    VolumeSurface,\n    RealWorldValueMap,\n    ReferencedSegment,\n    ReferencedSegmentationFrame,\n    SourceImageForMeasurement,\n)\nfrom highdicom.sr.enum import RelationshipTypeValues\nfrom highdicom.sr.value_types import (\n    CodeContentItem,\n    ContainerContentItem,\n    ContentItem,\n    ContentSequence,\n    NumContentItem,\n    TextContentItem,\n    UIDRefContentItem,\n)\nfrom highdicom.uid import UID\n\n\nDEFAULT_LANGUAGE = CodedConcept(\n    value=\'en-US\',\n    scheme_designator=\'RFC5646\',\n    meaning=\'English (United States)\'\n)\n\n\nclass Template(ContentSequence):\n\n    """"""Abstract base class for a DICOM SR template.""""""\n\n    def __init__(self, items: Optional[Sequence[ContentItem]] = None) -> None:\n        """"""\n        Parameters\n        ----------\n        items: Sequence[ContentItem], optional\n            content items\n\n        """"""\n        super().__init__(items)\n\n\nclass AlgorithmIdentification(Template):\n\n    """"""TID 4019 Algorithm Identification""""""\n\n    def __init__(\n            self,\n            name: str,\n            version: str,\n            parameters: Optional[Sequence[str]] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: str\n            name of the algorithm\n        version: str\n            version of the algorithm\n        parameters: Sequence[str], optional\n            parameters of the algorithm\n\n        """"""\n        super().__init__()\n        name_item = TextContentItem(\n            name=CodedConcept(\n                value=\'111001\',\n                meaning=\'Algorithm Name\',\n                scheme_designator=\'DCM\'\n            ),\n            value=name,\n            relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n        )\n        self.append(name_item)\n        version_item = TextContentItem(\n            name=CodedConcept(\n                value=\'111003\',\n                meaning=\'Algorithm Version\',\n                scheme_designator=\'DCM\'\n            ),\n            value=version,\n            relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n        )\n        self.append(version_item)\n        if parameters is not None:\n            for param in parameters:\n                parameter_item = TextContentItem(\n                    name=CodedConcept(\n                        value=\'111002\',\n                        meaning=\'Algorithm Parameter\',\n                        scheme_designator=\'DCM\'\n                    ),\n                    value=param,\n                    relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n                )\n                self.append(parameter_item)\n\n\nclass TrackingIdentifier(Template):\n\n    """"""TID 4108 Tracking Identifier""""""\n\n    def __init__(\n            self,\n            uid: Optional[str] = None,\n            identifier: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        uid: Union[pydicom.uid.UID, str], optional\n            globally unique identifier\n        identifier: str, optional\n            human readable identifier\n\n        """"""\n        super().__init__()\n        if uid is None:\n            uid = UID()\n        if identifier is not None:\n            tracking_identifier_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'112039\',\n                    meaning=\'Tracking Identifier\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=identifier,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(tracking_identifier_item)\n        tracking_uid_item = UIDRefContentItem(\n            name=CodedConcept(\n                value=\'112040\',\n                meaning=\'Tracking Unique Identifier\',\n                scheme_designator=\'DCM\'\n            ),\n            value=uid,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(tracking_uid_item)\n\n\nclass TimePointContext(Template):\n\n    """"""TID 1502 Time Point Context""""""\n\n    def __init__(\n            self,\n            time_point: str,\n            time_point_type: Optional[Union[CodedConcept, Code]] = None,\n            time_point_order: Optional[int] = None,\n            subject_time_point_identifier: Optional[\n                LongitudinalTemporalOffsetFromEvent\n            ] = None,\n            protocol_time_point_identifier: Optional[str] = None,\n            temporal_offset_from_event: Optional[\n                LongitudinalTemporalOffsetFromEvent\n            ] = None,\n            temporal_event_type: Optional[Union[CodedConcept, Code]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        time_point: str\n            actual value represention of the time point\n        time_point_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded type of time point, e.g., ""Baseline"" or ""Posttreatment""\n            (see CID 646 ""Time Point Types"" for options)\n        time_point_order: int, optional\n            number indicating the order of a time point relative to other\n            time points in a time series\n        subject_time_point_identifier: str, optional\n           identifier of a specific time point in a time series, which is\n           unique within an appropriate local context and specific to a\n           particular subject (patient)\n        protocol_time_point_identifier: str, optional\n           identifier of a specific time point in a time series, which is\n           unique within an appropriate local context and specific to a\n           particular protocol using the same value for different subjects\n        temporal_offset_from_event: highdicom.sr.content.LongitudinalTemporalOffsetFromEvent, optional\n            offset in time from a particular event of significance, e.g., the\n            baseline of an imaging study or enrollment into a clincal trial\n        temporal_event_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            type of event to which `temporal_offset_from_event` is relative,\n            e.g., ""Baseline"" or ""Enrollment""\n            (required if `temporal_offset_from_event` is provided)\n\n        """"""  # noqa\n        time_point_item = TextContentItem(\n            name=CodedConcept(\n                value=\'C2348792\',\n                meaning=\'Time Point\',\n                scheme_designator=\'UMLS\'\n            ),\n            value=time_point,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(time_point_item)\n        if time_point_type is not None:\n            time_point_type_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'126072\',\n                    meaning=\'Time Point Type\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=time_point_type,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(time_point_type_item)\n        if time_point_order is not None:\n            time_point_order_item = NumContentItem(\n                name=CodedConcept(\n                    value=\'126073\',\n                    meaning=\'Time Point Order\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=time_point_order,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(time_point_order_item)\n        if subject_time_point_identifier is not None:\n            subject_time_point_identifier_item = NumContentItem(\n                name=CodedConcept(\n                    value=\'126070\',\n                    meaning=\'Subject Time Point Identifier\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=subject_time_point_identifier,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(subject_time_point_identifier_item)\n        if protocol_time_point_identifier is not None:\n            protocol_time_point_identifier_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'126071\',\n                    meaning=\'Protocol Time Point Identifier\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=protocol_time_point_identifier,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(protocol_time_point_identifier_item)\n        if temporal_offset_from_event is not None:\n            if not isinstance(temporal_offset_from_event,\n                              LongitudinalTemporalOffsetFromEvent):\n                raise TypeError(\n                    \'Argument ""temporal_offset_from_event"" must have type \'\n                    \'LongitudinalTemporalOffsetFromEvent.\'\n                )\n            self.append(temporal_offset_from_event)\n\n\nclass MeasurementStatisticalProperties(Template):\n\n    """"""TID 311 Measurement Statistical Properties""""""\n\n    def __init__(\n            self,\n            values: Sequence[NumContentItem],\n            description: Optional[str] = None,\n            authority: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        values: Sequence[highdicom.sr.value_types.NumContentItem]\n            reference values of the population of measurements, e.g., its\n            mean or standard deviation\n            (see CID 226 ""Population Statistical Descriptors"" and\n            CID 227 227 ""Sample Statistical Descriptors"" for options)\n        description: str, optional\n            description of the reference population of measurements\n        authority: str, optional\n            authority for a description of the reference population of\n            measurements\n\n        """"""\n        super().__init__()\n        if not isinstance(values, (list, tuple)):\n            raise TypeError(\'Argument ""values"" must be a list.\')\n        for concept in values:\n            if not isinstance(concept, NumContentItem):\n                raise ValueError(\n                    \'Items of argument ""values"" must have type \'\n                    \'NumContentItem.\'\n                )\n        self.extend(values)\n        if description is not None:\n            description_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121405\',\n                    meaning=\'Population Description\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=description,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(description_item)\n        if authority is not None:\n            authority_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121406\',\n                    meaning=\'Reference Authority\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=authority,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(authority_item)\n\n\nclass NormalRangeProperties(Template):\n\n    """"""TID 312 Normal Range Properties""""""\n\n    def __init__(\n            self,\n            values: Sequence[NumContentItem],\n            description: Optional[str] = None,\n            authority: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        values: Sequence[highdicom.sr.value_types.NumContentItem]\n            reference values of the normal range, e.g., its upper and lower\n            bound\n            (see CID 223 ""Normal Range Values"" for options)\n        description: str, optional\n            description of the normal range\n        authority: str, optional\n            authority for the description of the normal range\n\n        """"""\n        super().__init__()\n        if not isinstance(values, (list, tuple)):\n            raise TypeError(\'Argument ""values"" must be a list.\')\n        for concept in values:\n            if not isinstance(concept, NumContentItem):\n                raise ValueError(\n                    \'Items of argument ""values"" must have type \'\n                    \'NumContentItem.\'\n                )\n        self.extend(values)\n        if description is not None:\n            description_item = TextContentItem(\n                name=codes.DCM.NormalRangeDescription,\n                value=description,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(description_item)\n        if authority is not None:\n            authority_item = TextContentItem(\n                name=codes.DCM.NormalRangeAuthority,\n                value=authority,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(authority_item)\n\n\nclass MeasurementProperties(Template):\n\n    """"""TID 310 Measurement Properties""""""\n\n    def __init__(\n            self,\n            normality: Optional[Union[CodedConcept, Code]] = None,\n            level_of_significance: Optional[Union[CodedConcept, Code]] = None,\n            selection_status: Optional[Union[CodedConcept, Code]] = None,\n            measurement_statistical_properties: Optional[\n                MeasurementStatisticalProperties\n            ] = None,\n            normal_range_properties: Optional[NormalRangeProperties] = None,\n            upper_measurement_uncertainty: Optional[Union[int, float]] = None,\n            lower_measurement_uncertainty: Optional[Union[int, float]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        normality: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            the extend to which the measurement is considered normal or abnormal\n            (see CID 222 ""Normality Codes"" for options)\n        level_of_significance: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            the extend to which the measurement is considered normal or abnormal\n            (see CID 220 ""Level of Significance"" for options)\n        selection_status: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            how the measurement value was selected or computed from a set of\n            available values\n            (see CID 224 ""Selection Method"" for options)\n        measurement_statistical_properties: highdicom.sr.templates.MeasurementStatisticalProperties, optional\n            statistical properties of a reference population for a measurement\n            and/or the position of a measurement in such a reference population\n        normal_range_properties: highdicom.sr.templates.NormalRangeProperties, optional\n            statistical properties of a reference population for a measurement\n            and/or the position of a measurement in such a reference population\n        upper_measurement_uncertainty: Union[int, float], optional\n            upper range of measurment uncertainty\n        lower_measurement_uncertainty: Union[int, float], optional\n            lower range of measurment uncertainty\n\n        """"""  # noqa\n        super().__init__()\n        if normality is not None:\n            normality_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121402\',\n                    meaning=\'Normality\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=normality,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(normality_item)\n        if measurement_statistical_properties is not None:\n            if not isinstance(measurement_statistical_properties,\n                              MeasurementStatisticalProperties):\n                raise TypeError(\n                    \'Argument ""measurment_statistical_properties"" must have \'\n                    \'type MeasurementStatisticalProperties.\'\n                )\n            self.extend(measurement_statistical_properties)\n        if normal_range_properties is not None:\n            if not isinstance(normal_range_properties,\n                              NormalRangeProperties):\n                raise TypeError(\n                    \'Argument ""normal_range_properties"" must have \'\n                    \'type NormalRangeProperties.\'\n                )\n            self.extend(normal_range_properties)\n        if level_of_significance is not None:\n            level_of_significance_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121403\',\n                    meaning=\'Level of Significance\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=level_of_significance,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(level_of_significance_item)\n        if selection_status is not None:\n            selection_status_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121404\',\n                    meaning=\'Selection Status\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=selection_status,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(selection_status_item)\n        if upper_measurement_uncertainty is not None:\n            upper_measurement_uncertainty_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'371886008\',\n                    meaning=\'+, range of upper measurement uncertainty\',\n                    scheme_designator=\'SCT\'\n                ),\n                value=upper_measurement_uncertainty,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(upper_measurement_uncertainty_item)\n        if lower_measurement_uncertainty is not None:\n            lower_measurement_uncertainty_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'371885007\',\n                    meaning=\'-, range of lower measurement uncertainty\',\n                    scheme_designator=\'SCT\'\n                ),\n                value=lower_measurement_uncertainty,\n                relationship_type=RelationshipTypeValues.HAS_PROPERTIES\n            )\n            self.append(lower_measurement_uncertainty_item)\n\n\nclass PersonObserverIdentifyingAttributes(Template):\n\n    """"""TID 1003 Person Observer Identifying Attributes""""""\n\n    def __init__(\n            self,\n            name: str,\n            login_name: Optional[str] = None,\n            organization_name: Optional[str] = None,\n            role_in_organization: Optional[Union[CodedConcept, Code]] = None,\n            role_in_procedure: Optional[Union[CodedConcept, Code]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        name: str\n            name of the person\n        login_name: str\n            login name of the person\n        organization_name: str, optional\n            name of the person\'s organization\n        role_in_organization: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            role of the person within the organization\n        role_in_procedure: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            role of the person in the reported procedure\n\n        """"""  # noqa\n        super().__init__()\n        name_item = TextContentItem(\n            name=CodedConcept(\n                value=\'121008\',\n                meaning=\'Person Observer Name\',\n                scheme_designator=\'DCM\',\n            ),\n            value=name,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(name_item)\n        if login_name is not None:\n            login_name_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'128774\',\n                    meaning=\'Person Observer\\\'s Login Name\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=login_name,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(login_name_item)\n        if organization_name is not None:\n            organization_name_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121009\',\n                    meaning=\'Person Observer\\\'s Organization Name\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=organization_name,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(organization_name_item)\n        if role_in_organization is not None:\n            role_in_organization_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121010\',\n                    meaning=\'Person Observer\\\'s Role in the Organization\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=role_in_organization,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(role_in_organization_item)\n        if role_in_procedure is not None:\n            role_in_procedure_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121011\',\n                    meaning=\'Person Observer\\\'s Role in this Procedure\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=role_in_procedure,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(role_in_procedure_item)\n\n\nclass DeviceObserverIdentifyingAttributes(Template):\n\n    """"""TID 1004 Device Observer Identifying Attributes""""""\n\n    def __init__(\n            self,\n            uid: str,\n            name: Optional[str] = None,\n            manufacturer_name: Optional[str] = None,\n            model_name: Optional[str] = None,\n            serial_number: Optional[str] = None,\n            physical_location: Optional[str] = None,\n            role_in_procedure: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        uid: str\n            device UID\n        name: str, optional\n            name of device\n        manufacturer_name: str, optional\n            name of device\'s manufacturer\n        model_name: str, optional\n            name of the device\'s model\n        serial_number: str, optional\n            serial number of the device\n        physical_location: str, optional\n            physical location of the device during the procedure\n        role_in_procedure: str, optional\n            role of the device in the reported procedure\n\n        """"""\n        super().__init__()\n        device_observer_item = UIDRefContentItem(\n            name=CodedConcept(\n                value=\'121012\',\n                meaning=\'Device Observer UID\',\n                scheme_designator=\'DCM\',\n            ),\n            value=uid,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(device_observer_item)\n        if manufacturer_name is not None:\n            manufacturer_name_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121013\',\n                    meaning=\'Device Observer Manufacturer\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=manufacturer_name,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(manufacturer_name_item)\n        if model_name is not None:\n            model_name_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121015\',\n                    meaning=\'Device Observer Model Name\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=model_name,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(model_name_item)\n        if serial_number is not None:\n            serial_number_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121016\',\n                    meaning=\'Device Observer Serial Number\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=serial_number,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(serial_number_item)\n        if physical_location is not None:\n            physical_location_item = TextContentItem(\n                name=codes.DCM.DeviceObserverPhysicalLocationDuringObservation,\n                value=physical_location,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(physical_location_item)\n        if role_in_procedure is not None:\n            role_in_procedure_item = CodeContentItem(\n                name=codes.DCM.DeviceRoleInProcedure,\n                value=role_in_procedure,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(role_in_procedure_item)\n\n\nclass ObserverContext(Template):\n\n    """"""TID 1002 Observer Context""""""\n\n    def __init__(\n            self,\n            observer_type: CodedConcept,\n            observer_identifying_attributes: Union[\n                PersonObserverIdentifyingAttributes,\n                DeviceObserverIdentifyingAttributes\n            ]\n        ):\n        """"""\n        Parameters\n        ----------\n        observer_type: highdicom.sr.coding.CodedConcept\n            type of observer\n            (see CID 270 ""Observer Type"" for options)\n        observer_identifying_attributes: Union[highdicom.sr.templates.PersonObserverIdentifyingAttributes, highdicom.sr.templates.DeviceObserverIdentifyingAttributes]\n            observer identifying attributes\n\n        """"""  # noqa\n        super().__init__()\n        observer_type_item = CodeContentItem(\n            name=CodedConcept(\n                value=\'121005\',\n                meaning=\'Observer Type\',\n                scheme_designator=\'DCM\',\n            ),\n            value=observer_type,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(observer_type_item)\n        if observer_type == codes.cid270.Person:\n            if not isinstance(observer_identifying_attributes,\n                              PersonObserverIdentifyingAttributes):\n                raise TypeError(\n                    \'Observer identifying attributes must have \'\n                    \'type {} for observer type ""{}"".\'.format(\n                        PersonObserverIdentifyingAttributes.__name__,\n                        observer_type.meaning\n                    )\n                )\n        elif observer_type == codes.cid270.Device:\n            if not isinstance(observer_identifying_attributes,\n                              DeviceObserverIdentifyingAttributes):\n                raise TypeError(\n                    \'Observer identifying attributes must have \'\n                    \'type {} for observer type ""{}"".\'.format(\n                        DeviceObserverIdentifyingAttributes.__name__,\n                        observer_type.meaning,\n                    )\n                )\n        else:\n            raise ValueError(\n                \'Argument ""oberver_type"" must be either ""Person"" or ""Device"".\'\n            )\n        self.extend(observer_identifying_attributes)\n\n\nclass SubjectContextFetus(Template):\n\n    """"""TID 1008 Subject Context Fetus""""""\n\n    def __init__(self, subject_id: str):\n        """"""\n        Parameters\n        ----------\n        subject_id: str\n            identifier of the fetus for longitudinal tracking\n\n        """"""\n        super().__init__()\n        subject_id_item = TextContentItem(\n            name=CodedConcept(\n                value=\'121030\',\n                meaning=\'Subject ID\',\n                scheme_designator=\'DCM\'\n            ),\n            value=subject_id,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(subject_id_item)\n\n\nclass SubjectContextSpecimen(Template):\n\n    """"""TID 1009 Subject Context Specimen""""""\n\n    def __init__(\n            self,\n            uid: str,\n            identifier: Optional[str] = None,\n            container_identifier: Optional[str] = None,\n            specimen_type: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        uid: str\n            unique identifier of the observed specimen\n        identifier: str, optional\n            identifier of the observed specimen (may have limited scope,\n            e.g., only relevant with respect to the corresponding container)\n        container_identifier: str, optional\n            identifier of the container holding the speciment (e.g., a glass\n            slide)\n        specimen_type: highdicom.sr.coding.CodedConcept, optional\n            type of the specimen\n            (see CID 8103 ""Anatomic Pathology Specimen Types"" for options)\n\n        """"""\n        super().__init__()\n        specimen_uid_item = UIDRefContentItem(\n            name=CodedConcept(\n                value=\'121039\',\n                meaning=\'Specimen UID\',\n                scheme_designator=\'DCM\'\n            ),\n            value=uid,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(specimen_uid_item)\n        if identifier is not None:\n            specimen_identifier_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121041\',\n                    meaning=\'Specimen Identifier\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=identifier,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(specimen_identifier_item)\n        if container_identifier is not None:\n            container_identifier_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'111700\',\n                    meaning=\'Specimen Container Identifier\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=container_identifier,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(container_identifier_item)\n        if specimen_type is not None:\n            specimen_type_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121042\',\n                    meaning=\'Specimen Type\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=specimen_type,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(specimen_type_item)\n\n\nclass SubjectContextDevice(Template):\n\n    """"""TID 1010 Subject Context Device""""""\n\n    def __init__(\n            self,\n            name: str,\n            uid: Optional[str] = None,\n            manufacturer_name: Optional[str] = None,\n            model_name: Optional[str] = None,\n            serial_number: Optional[str] = None,\n            physical_location: Optional[str] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        name: str\n            name of the observed device\n        uid: str, optional\n            unique identifier of the observed device\n        manufacturer_name: str, optional\n            name of the observed device\'s manufacturer\n        model_name: str, optional\n            name of the observed device\'s model\n        serial_number: str, optional\n            serial number of the observed device\n        physical_location: str, optional\n            physical location of the observed device during the procedure\n\n        """"""\n        super().__init__()\n        device_name_item = TextContentItem(\n            name=codes.DCM.DeviceSubjectName,\n            value=name,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(device_name_item)\n        if uid is not None:\n            device_uid_item = UIDRefContentItem(\n                name=codes.DCM.DeviceSubjectUID,\n                value=uid,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(device_uid_item)\n        if manufacturer_name is not None:\n            manufacturer_name_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121194\',\n                    meaning=\'Device Subject Manufacturer\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=manufacturer_name,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(manufacturer_name_item)\n        if model_name is not None:\n            model_name_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121195\',\n                    meaning=\'Device Subject Model Name\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=model_name,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(model_name_item)\n        if serial_number is not None:\n            serial_number_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'121196\',\n                    meaning=\'Device Subject Serial Number\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=serial_number,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(serial_number_item)\n        if physical_location is not None:\n            physical_location_item = TextContentItem(\n                name=codes.DCM.DeviceSubjectPhysicalLocationDuringObservation,\n                value=physical_location,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            self.append(physical_location_item)\n\n\nclass SubjectContext(Template):\n\n    """"""TID 1006 Subject Context""""""\n\n    def __init__(\n            self,\n            subject_class: CodedConcept,\n            subject_class_specific_context: Optional[\n                Union[\n                    SubjectContextFetus,\n                    SubjectContextSpecimen,\n                    SubjectContextDevice\n                ]\n            ] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        subject_class: highdicom.sr.coding.CodedConcept\n            type of subject if the subject of the report is not the patient\n            (see CID 271 ""Observation Subject Class"" for options)\n        subject_class_specific_context: Union[highdicom.sr.templates.SubjectContextFetus, highdicom.sr.templates.SubjectContextSpecimen, highdicom.sr.templates.SubjectContextDevice], optional\n            additional context information specific to `subject_class`\n\n        """"""  # noqa\n        super().__init__()\n        subject_class_item = CodeContentItem(\n            name=CodedConcept(\n                value=\'121024\',\n                meaning=\'Subject Class\',\n                scheme_designator=\'DCM\'\n            ),\n            value=subject_class,\n            relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n        )\n        self.append(subject_class_item)\n        if subject_class_specific_context is not None:\n            self.extend(subject_class_specific_context)\n\n\nclass ObservationContext(Template):\n\n    """"""TID 1001 Observation Context""""""\n\n    def __init__(\n            self,\n            observer_person_context: Optional[ObserverContext] = None,\n            observer_device_context: Optional[ObserverContext] = None,\n            subject_context: Optional[SubjectContext] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        observer_person_context: [highdicom.sr.templates.ObserverContext, None], optional\n            description of the person that reported the observation\n        observer_device_context: highdicom.sr.templates.ObserverContext, optional\n            description of the device that was involved in reporting the\n            observation\n        subject_context: highdicom.sr.templates.SubjectContext, optional\n            description of the imaging subject in case it is not the patient\n            for which the report is generated (e.g., a pathology specimen in\n            a whole-slide microscopy image, a fetus in an ultrasound image, or\n            a pacemaker device in a chest X-ray image)\n\n        """"""  # noqa\n        super().__init__()\n        if observer_person_context is not None:\n            if not isinstance(observer_person_context, ObserverContext):\n                raise TypeError(\n                    \'Argument ""observer_person_context"" must \'\n                    \'have type {}\'.format(\n                        ObserverContext.__name__\n                    )\n                )\n            self.extend(observer_person_context)\n        if observer_device_context is not None:\n            if not isinstance(observer_device_context, ObserverContext):\n                raise TypeError(\n                    \'Argument ""observer_device_context"" must \'\n                    \'have type {}\'.format(\n                        ObserverContext.__name__\n                    )\n                )\n            self.extend(observer_device_context)\n        if subject_context is not None:\n            if not isinstance(subject_context, SubjectContext):\n                raise TypeError(\n                    \'Argument ""subject_context"" must have type {}\'.format(\n                        SubjectContext.__name__\n                    )\n                )\n            self.extend(subject_context)\n\n\nclass LanguageOfContentItemAndDescendants(Template):\n\n    """"""TID 1204 Language of Content Item and Descendants""""""\n\n    def __init__(self, language: CodedConcept):\n        """"""\n        Parameters\n        ----------\n        language: highdicom.sr.coding.CodedConcept\n            language used for content items included in report\n\n        """"""\n        super().__init__()\n        language_item = CodeContentItem(\n            name=CodedConcept(\n                value=\'121049\',\n                meaning=\'Language of Content Item and Descendants\',\n                scheme_designator=\'DCM\',\n            ),\n            value=language,\n            relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n        )\n        self.append(language_item)\n\n\nclass Measurement(Template):\n\n    """"""TID 300 Measurement""""""\n\n    def __init__(\n            self,\n            name: Union[CodedConcept, Code],\n            tracking_identifier: Optional[TrackingIdentifier] = None,\n            value: Optional[Union[int, float]] = None,\n            unit: Optional[Union[CodedConcept, Code]] = None,\n            qualifier: Optional[Union[CodedConcept, Code]] = None,\n            algorithm_id: Optional[AlgorithmIdentification] = None,\n            derivation: Optional[Union[CodedConcept, Code]] = None,\n            finding_sites: Optional[Sequence[FindingSite]] = None,\n            method: Optional[Union[CodedConcept, Code]] = None,\n            properties: Optional[MeasurementProperties] = None,\n            referenced_images: Optional[\n                Sequence[SourceImageForMeasurement]\n            ] = None,\n            referenced_real_world_value_map: Optional[RealWorldValueMap] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        name: highdicom.sr.coding.CodedConcept\n            name of the measurement\n            (see CID 7469 ""Generic Intensity and Size Measurements"" and\n            CID 7468 ""Texture Measurements"" for options)\n        tracking_identifier: highdicom.sr.templates.TrackingIdentifier, optional\n            identifier for tracking measurements\n        value: Union[int, float], optional\n            numeric measurement value\n        unit: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            unit of the numeric measurement value\n            (see CID 7181 ""Abstract Multi-dimensional Image Model Component\n            Units"" for options)\n        qualifier: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            qualification of numeric measurement value or as an alternative\n            qualitative description\n        algorithm_id: highdicom.sr.templates.AlgorithmIdentification, optional\n            identification of algorithm used for making measurements\n        derivation: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            how the value was computed\n            (see CID 7464 ""General Region of Interest Measurement Modifiers""\n            for options)\n        finding_sites: Sequence[highdicom.sr.content.FindingSite], optional\n            Coded description of one or more anatomic locations corresonding\n            to the image region from which measurement was taken\n        method: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            measurement method\n            (see CID 6147 ""Response Criteria"" for options)\n        properties: highdicom.sr.templates.MeasurementProperties, optional\n            measurement properties, including evaluations of its normality\n            and/or significance, its relationship to a reference population,\n            and an indication of its selection from a set of measurements\n        referenced_images: Sequence[highdicom.sr.content.SourceImageForMeasurement], optional\n            referenced images which were used as sources for the measurement\n        referenced_real_world_value_map: highdicom.sr.content.RealWorldValueMap, optional\n            referenced real world value map for referenced source images\n\n        """"""  # noqa\n        super().__init__()\n        value_item = NumContentItem(\n            name=name,\n            value=value,\n            unit=unit,\n            qualifier=qualifier,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        value_item.ContentSequence = ContentSequence()\n        if tracking_identifier is not None:\n            if not isinstance(tracking_identifier, TrackingIdentifier):\n                raise TypeError(\n                    \'Argument ""tracking_identifier"" must have type \'\n                    \'TrackingIdentifier.\'\n                )\n            value_item.ContentSequence.extend(tracking_identifier)\n        if method is not None:\n            method_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'370129005\',\n                    meaning=\'Measurement Method\',\n                    scheme_designator=\'SCT\'\n                ),\n                value=method,\n                relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n            )\n            value_item.ContentSequence.append(method_item)\n        if derivation is not None:\n            derivation_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121401\',\n                    meaning=\'Derivation\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=derivation,\n                relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n            )\n            value_item.ContentSequence.append(derivation_item)\n        if finding_sites is not None:\n            if not isinstance(finding_sites, (list, tuple, set)):\n                raise TypeError(\n                    \'Argument ""finding_sites"" must be a sequence.\'\n\n                )\n            for site in finding_sites:\n                if not isinstance(site, FindingSite):\n                    raise TypeError(\n                        \'Items of argument ""finding_sites"" must have \'\n                        \'type FindingSite.\'\n                    )\n                value_item.ContentSequence.append(site)\n        if properties is not None:\n            if not isinstance(properties, MeasurementProperties):\n                raise TypeError(\n                    \'Argument ""properties"" must have \'\n                    \'type MeasurementProperties.\'\n                )\n            value_item.ContentSequence.extend(properties)\n        if referenced_images is not None:\n            for image in referenced_images:\n                if not isinstance(image, SourceImageForMeasurement):\n                    raise TypeError(\n                        \'Arguments ""referenced_images"" must have type \'\n                        \'SourceImageForMeasurement.\'\n                    )\n                value_item.ContentSequence.append(image)\n        if referenced_real_world_value_map is not None:\n            if not isinstance(referenced_real_world_value_map,\n                              RealWorldValueMap):\n                raise TypeError(\n                    \'Argument ""referenced_real_world_value_map"" must have type \'\n                    \'RealWorldValueMap.\'\n                )\n            value_item.ContentSequence.append(referenced_real_world_value_map)\n        if algorithm_id is not None:\n            if not isinstance(algorithm_id, AlgorithmIdentification):\n                raise TypeError(\n                    \'Argument ""algorithm_id"" must have type \'\n                    \'AlgorithmIdentification.\'\n                )\n            value_item.ContentSequence.extend(algorithm_id)\n        self.append(value_item)\n\n\nclass MeasurementsAndQualitativeEvaluations(Template):\n\n    """"""TID 1501 Measurement and Qualitative Evaluation Group""""""\n\n    def __init__(\n            self,\n            tracking_identifier: TrackingIdentifier,\n            referenced_real_world_value_map: Optional[RealWorldValueMap] = None,\n            time_point_context: Optional[TimePointContext] = None,\n            finding_type: Optional[Union[CodedConcept, Code]] = None,\n            method: Optional[Union[CodedConcept, Code]] = None,\n            algorithm_id: Optional[AlgorithmIdentification] = None,\n            finding_sites: Optional[Sequence[FindingSite]] = None,\n            session: Optional[str] = None,\n            measurements: Sequence[Measurement] = None,\n            qualitative_evaluations: Optional[Sequence[CodeContentItem]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        tracking_identifier: highdicom.sr.templates.TrackingIdentifier\n            Identifier for tracking measurements\n        referenced_real_world_value_map: highdicom.sr.content.RealWorldValueMap, optional\n            Referenced real world value map for region of interest\n        time_point_context: highdicom.sr.templates.TimePointContext, optional\n            Description of the time point context\n        finding_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            Type of object that was measured, e.g., organ or tumor\n        method: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded measurement method\n            (see CID 6147 ""Response Criteria"" for options)\n        algorithm_id: highdicom.sr.templates.AlgorithmIdentification, optional\n            identification of algorithm used for making measurements\n        finding_sites: Sequence[highdicom.sr.content.FindingSite], optional\n            Coded description of one or more anatomic locations corresonding\n            to the image region from which measurement was taken\n        session: str, optional\n            Description of the session\n        measurements: Sequence[highdicom.sr.templates.Measurement], optional\n            Numeric measurements\n        qualitative_evaluations: Sequence[highdicom.sr.value_types.CodeContentItem], optional\n            Coded name-value pairs that describe measurements in qualitative\n            terms\n\n        """"""  # noqa\n        super().__init__()\n        group_item = ContainerContentItem(\n            name=CodedConcept(\n                value=\'125007\',\n                meaning=\'Measurement Group\',\n                scheme_designator=\'DCM\'\n            ),\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        group_item.ContentSequence = ContentSequence()\n        if not isinstance(tracking_identifier, TrackingIdentifier):\n            raise TypeError(\n                \'Argument ""tracking_identifier"" must have type \'\n                \'TrackingIdentifier.\'\n            )\n        if len(tracking_identifier) != 2:\n            raise ValueError(\n                \'Argument ""tracking_identifier"" must include a \'\n                \'human readable tracking identifier and a tracking unique \'\n                \'identifier.\'\n            )\n        group_item.ContentSequence.extend(tracking_identifier)\n        if session is not None:\n            session_item = TextContentItem(\n                name=CodedConcept(\n                    value=\'C67447\',\n                    meaning=\'Activity Session\',\n                    scheme_designator=\'NCIt\'\n                ),\n                value=session,\n                relationship_type=RelationshipTypeValues.HAS_OBS_CONTEXT\n            )\n            group_item.ContentSequence.append(session_item)\n        if finding_type is not None:\n            finding_type_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121071\',\n                    meaning=\'Finding\',\n                    scheme_designator=\'DCM\'\n                ),\n                value=finding_type,\n                relationship_type=RelationshipTypeValues.CONTAINS\n            )\n            group_item.ContentSequence.append(finding_type_item)\n        if method is not None:\n            method_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'370129005\',\n                    meaning=\'Measurement Method\',\n                    scheme_designator=\'SCT\'\n                ),\n                value=method,\n                relationship_type=RelationshipTypeValues.CONTAINS\n            )\n            group_item.ContentSequence.append(method_item)\n        if finding_sites is not None:\n            if not isinstance(finding_sites, (list, tuple, set)):\n                raise TypeError(\n                    \'Argument ""finding_sites"" must be a sequence.\'\n\n                )\n            for site in finding_sites:\n                if not isinstance(site, FindingSite):\n                    raise TypeError(\n                        \'Items of argument ""finding_sites"" must have \'\n                        \'type FindingSite.\'\n                    )\n                group_item.ContentSequence.append(site)\n        if algorithm_id is not None:\n            if not isinstance(algorithm_id, AlgorithmIdentification):\n                raise TypeError(\n                    \'Argument ""algorithm_id"" must have type \'\n                    \'AlgorithmIdentification.\'\n                )\n            group_item.ContentSequence.extend(algorithm_id)\n        if time_point_context is not None:\n            if not isinstance(time_point_context, TimePointContext):\n                raise TypeError(\n                    \'Argument ""time_point_context"" must have type \'\n                    \'TimePointContext.\'\n                )\n            group_item.ContentSequence.append(time_point_context)\n        if referenced_real_world_value_map is not None:\n            if not isinstance(referenced_real_world_value_map,\n                              RealWorldValueMap):\n                raise TypeError(\n                    \'Argument ""referenced_real_world_value_map"" must have type \'\n                    \'RealWorldValueMap.\'\n                )\n            group_item.ContentSequence.append(referenced_real_world_value_map)\n        if measurements is not None:\n            for measurement in measurements:\n                if not isinstance(measurement, Measurement):\n                    raise TypeError(\n                        \'Items of argument ""measurements"" must have \'\n                        \'type Measurement.\'\n                    )\n                group_item.ContentSequence.extend(measurement)\n            group_item.ContentSequence.extend(measurement)\n        if qualitative_evaluations is not None:\n            for evaluation in qualitative_evaluations:\n                if not isinstance(evaluation, CodeContentItem):\n                    raise TypeError(\n                        \'Items of argument ""qualitative_evaluations"" must have \'\n                        \'type CodeContentItem.\'\n                    )\n                group_item.ContentSequence.append(evaluation)\n        self.append(group_item)\n\n\nclass _ROIMeasurementsAndQualitativeEvaluations(\n        MeasurementsAndQualitativeEvaluations):\n\n    """"""Abstract base class for ROI Measurements and Qualitative Evaluation\n    templates.""""""\n\n    def __init__(\n            self,\n            tracking_identifier: TrackingIdentifier,\n            referenced_regions: Optional[\n                Union[Sequence[ImageRegion], Sequence[ImageRegion3D]]\n            ] = None,\n            referenced_segment: Optional[\n                Union[ReferencedSegment, ReferencedSegmentationFrame]\n            ] = None,\n            referenced_volume_surface: Optional[VolumeSurface] = None,\n            referenced_real_world_value_map: Optional[RealWorldValueMap] = None,\n            time_point_context: Optional[TimePointContext] = None,\n            finding_type: Optional[Union[CodedConcept, Code]] = None,\n            method: Optional[Union[CodedConcept, Code]] = None,\n            algorithm_id: Optional[AlgorithmIdentification] = None,\n            finding_sites: Optional[Sequence[FindingSite]] = None,\n            session: Optional[str] = None,\n            measurements: Sequence[Measurement] = None,\n            qualitative_evaluations: Optional[Sequence[CodeContentItem]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        tracking_identifier: highdicom.sr.templates.TrackingIdentifier\n            identifier for tracking measurements\n        referenced_regions: Union[Sequence[highdicom.sr.content.ImageRegion], Sequence[highdicom.sr.content.ImageRegion3D]], optional\n            regions of interest in source image(s)\n        referenced_segment: Union[highdicom.sr.content.ReferencedSegment, highdicom.sr.content.ReferencedSegmentationFrame], optional\n            segmentation for region of interest in source image\n        referenced_volume_surface: hidicom.sr.content.VolumeSurface, optional\n            surface segmentation for region of interest in source image\n        referenced_real_world_value_map: highdicom.sr.content.RealWorldValueMap, optional\n            referenced real world value map for region of interest\n        time_point_context: highdicom.sr.templates.TimePointContext, optional\n            description of the time point context\n        finding_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            type of object that was measured, e.g., organ or tumor\n        method: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded measurement method\n            (see CID 6147 ""Response Criteria"" for options)\n        algorithm_id: highdicom.sr.templates.AlgorithmIdentification, optional\n            identification of algorithm used for making measurements\n        finding_sites: Sequence[highdicom.sr.content.FindingSite], optional\n            Coded description of one or more anatomic locations corresonding\n            to the image region from which measurement was taken\n        session: str, optional\n            description of the session\n        measurements: Sequence[highdicom.sr.templates.Measurement], optional\n            numeric measurements\n        qualitative_evaluations: Sequence[highdicom.sr.value_types.CodeContentItem], optional\n            coded name-value (question-answer) pairs that describe the\n            measurements in qualitative terms\n\n        Note\n        ----\n        Either a segmentation, a list of regions, or a volume needs to\n        referenced together with the corresponding source image(s) or series.\n        Derived classes determine which of the above will be allowed.\n\n        """"""  # noqa\n        super().__init__(\n            tracking_identifier=tracking_identifier,\n            referenced_real_world_value_map=referenced_real_world_value_map,\n            time_point_context=time_point_context,\n            finding_type=finding_type,\n            method=method,\n            algorithm_id=algorithm_id,\n            finding_sites=finding_sites,\n            session=session,\n            measurements=measurements,\n            qualitative_evaluations=qualitative_evaluations\n        )\n        group_item = self[0]\n        were_references_provided = [\n            referenced_regions is not None,\n            referenced_volume_surface is not None,\n            referenced_segment is not None,\n        ]\n        if sum(were_references_provided) == 0:\n            raise ValueError(\n                \'One of the following arguments must be provided: \'\n                \'""referenced_regions"", ""referenced_volume_surface"", or \'\n                \'""referenced_segment"".\'\n            )\n        elif sum(were_references_provided) > 1:\n            raise ValueError(\n                \'Only one of the following arguments should be provided: \'\n                \'""referenced_regions"", ""referenced_volume_surface"", or \'\n                \'""referenced_segment"".\'\n            )\n        if referenced_regions is not None:\n            if len(referenced_regions) == 0:\n                raise ValueError(\n                    \'Argument ""referenced_region"" must have non-zero length.\'\n                )\n            for region in referenced_regions:\n                if not isinstance(region, (ImageRegion, ImageRegion3D)):\n                    raise TypeError(\n                        \'Items of argument ""referenced_regions"" must have type \'\n                        \'ImageRegion or ImageRegion3D.\'\n                    )\n                group_item.ContentSequence.append(region)\n        elif referenced_volume_surface is not None:\n            if not isinstance(referenced_volume_surface,\n                              VolumeSurface):\n                raise TypeError(\n                    \'Items of argument ""referenced_volume_surface"" must have \'\n                    \'type VolumeSurface.\'\n                )\n            group_item.ContentSequence.append(referenced_volume_surface)\n        elif referenced_segment is not None:\n            if not isinstance(\n                    referenced_segment,\n                    (ReferencedSegment, ReferencedSegmentationFrame)\n                ):\n                raise TypeError(\n                    \'Argument ""referenced_segment"" must have type \'\n                    \'ReferencedSegment or \'\n                    \'ReferencedSegmentationFrame.\'\n                )\n            group_item.ContentSequence.append(referenced_segment)\n\n\nclass PlanarROIMeasurementsAndQualitativeEvaluations(\n        _ROIMeasurementsAndQualitativeEvaluations):\n\n    """"""TID 1410 Planar ROI Measurements and Qualitative Evaluations""""""\n\n    def __init__(\n            self,\n            tracking_identifier: TrackingIdentifier,\n            referenced_region: Optional[\n                Union[ImageRegion, ImageRegion3D]\n            ] = None,\n            referenced_segment: Optional[\n                Union[ReferencedSegment, ReferencedSegmentationFrame]\n            ] = None,\n            referenced_real_world_value_map: Optional[RealWorldValueMap] = None,\n            time_point_context: Optional[TimePointContext] = None,\n            finding_type: Optional[Union[CodedConcept, Code]] = None,\n            method: Optional[Union[CodedConcept, Code]] = None,\n            algorithm_id: Optional[AlgorithmIdentification] = None,\n            finding_sites: Optional[Sequence[FindingSite]] = None,\n            session: Optional[str] = None,\n            measurements: Sequence[Measurement] = None,\n            qualitative_evaluations: Optional[Union[CodedConcept, Code]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        tracking_identifier: highdicom.sr.templates.TrackingIdentifier\n            identifier for tracking measurements\n        referenced_region: Union[highdicom.sr.content.ImageRegion, highdicom.sr.content.ImageRegion3D], optional\n            region of interest in source image\n        referenced_segment: highdicom.sr.content.ReferencedSegmentationFrame, optional\n            segmentation for region of interest in source image\n        referenced_real_world_value_map: highdicom.sr.content.RealWorldValueMap, optional\n            referenced real world value map for region of interest\n        time_point_context: highdicom.sr.templates.TimePointContext, optional\n            description of the time point context\n        finding_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            type of object that was measured, e.g., organ or tumor\n        method: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded measurement method\n            (see CID 6147 ""Response Criteria"" for options)\n        algorithm_id: highdicom.sr.templates.AlgorithmIdentification, optional\n            identification of algorithm used for making measurements\n        finding_sites: Sequence[highdicom.sr.content.FindingSite], optional\n            Coded description of one or more anatomic locations corresonding\n            to the image region from which measurement was taken\n        session: str, optional\n            description of the session\n        measurements: Sequence[highdicom.sr.templates.Measurement], optional\n            measurements for a region of interest\n        qualitative_evaluations: Sequence[highdicom.sr.value_types.CodeContentItem], optional\n            coded name-value (question-answer) pairs that describe the\n            measurements in qualitative terms for a region of interest\n\n        Note\n        ----\n        Either a segmentation or a region needs to referenced\n        together with the corresponding source image from which the\n        segmentation or region was obtained.\n\n        """"""  # noqa\n        were_references_provided = [\n            referenced_region is not None,\n            referenced_segment is not None,\n        ]\n        if sum(were_references_provided) == 0:\n            raise ValueError(\n                \'One of the following arguments must be provided: \'\n                \'""referenced_region"", ""referenced_segment"".\'\n            )\n        elif sum(were_references_provided) > 1:\n            raise ValueError(\n                \'Only one of the following arguments should be provided: \'\n                \'""referenced_region"", ""referenced_segment"".\'\n            )\n        referenced_regions: Optional[\n            Union[Sequence[ImageRegion], Sequence[ImageRegion3D]]\n        ] = None\n        if referenced_region is not None:\n            referenced_regions = [referenced_region]\n        super().__init__(\n            tracking_identifier=tracking_identifier,\n            referenced_regions=referenced_regions,\n            referenced_segment=referenced_segment,\n            referenced_real_world_value_map=referenced_real_world_value_map,\n            time_point_context=time_point_context,\n            finding_type=finding_type,\n            method=method,\n            algorithm_id=algorithm_id,\n            finding_sites=finding_sites,\n            session=session,\n            measurements=measurements,\n            qualitative_evaluations=qualitative_evaluations\n        )\n\n\nclass VolumetricROIMeasurementsAndQualitativeEvaluations(\n        _ROIMeasurementsAndQualitativeEvaluations):\n\n    """"""TID 1411 Volumetric ROI Measurements and Qualitative Evaluations""""""\n\n    def __init__(\n            self,\n            tracking_identifier: TrackingIdentifier,\n            referenced_regions: Optional[\n                Union[ImageRegion, ImageRegion3D]\n            ] = None,\n            referenced_volume_surface: Optional[VolumeSurface] = None,\n            referenced_segment: Optional[\n                Union[ReferencedSegment, ReferencedSegmentationFrame]\n            ] = None,\n            referenced_real_world_value_map: Optional[RealWorldValueMap] = None,\n            time_point_context: Optional[TimePointContext] = None,\n            finding_type: Optional[Union[CodedConcept, Code]] = None,\n            method: Optional[Union[CodedConcept, Code]] = None,\n            algorithm_id: Optional[AlgorithmIdentification] = None,\n            finding_sites: Optional[Sequence[FindingSite]] = None,\n            session: Optional[str] = None,\n            measurements: Sequence[Measurement] = None,\n            qualitative_evaluations: Optional[Union[CodedConcept, Code]] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        tracking_identifier: highdicom.sr.templates.TrackingIdentifier\n            identifier for tracking measurements\n        referenced_regions: Union[Sequence[highdicom.sr.content.ImageRegion], Sequence[highdicom.sr.content.ImageRegion3D]], optional\n            regions of interest in source image(s)\n        referenced_volume_surface: highdicom.sr.content.VolumeSurface, optional\n            volume of interest in source image(s)\n        referenced_segment: highdicom.sr.content.ReferencedSegment, optional\n            segmentation for region of interest in source image\n        referenced_real_world_value_map: highdicom.sr.content.RealWorldValueMap, optional\n            referenced real world value map for region of interest\n        time_point_context: highdicom.sr.templates.TimePointContext, optional\n            description of the time point context\n        finding_type: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            type of object that was measured, e.g., organ or tumor\n        method: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded measurement method\n            (see CID 6147 ""Response Criteria"" for options)\n        algorithm_id: highdicom.sr.templates.AlgorithmIdentification, optional\n            identification of algorithm used for making measurements\n        finding_sites: Sequence[highdicom.sr.content.FindingSite], optional\n            Coded description of one or more anatomic locations corresonding\n            to the image region from which measurement was taken\n        session: str, optional\n            description of the session\n        measurements: Sequence[highdicom.sr.templates.Measurement], optional\n            measurements for a volume of interest\n        qualitative_evaluations: Sequence[highdicom.sr.value_types.CodeContentItem], optional\n            coded name-value (question-answer) pairs that describe the\n            measurements in qualitative terms for a volume of interest\n\n        Note\n        ----\n        Either a segmentation, a list of regions or volume needs to referenced\n        together with the corresponding source image(s) or series.\n\n        """"""  # noqa\n        super().__init__(\n            measurements=measurements,\n            tracking_identifier=tracking_identifier,\n            referenced_regions=referenced_regions,\n            referenced_volume_surface=referenced_volume_surface,\n            referenced_segment=referenced_segment,\n            referenced_real_world_value_map=referenced_real_world_value_map,\n            time_point_context=time_point_context,\n            finding_type=finding_type,\n            method=method,\n            algorithm_id=algorithm_id,\n            finding_sites=finding_sites,\n            session=session,\n            qualitative_evaluations=qualitative_evaluations\n        )\n\n\nclass MeasurementsDerivedFromMultipleROIMeasurements(Template):\n\n    """"""TID 1420 Measurements Derived From Multiple ROI Measurements""""""\n\n    def __init__(\n            self,\n            derivation: CodedConcept,\n            measurement_groups: Union[\n                Sequence[PlanarROIMeasurementsAndQualitativeEvaluations],\n                Sequence[VolumetricROIMeasurementsAndQualitativeEvaluations]\n            ],\n            measurement_properties: Optional[MeasurementProperties] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        derivation: Sequence[highdicom.sr.coding.CodedConcept]\n            methods for derivation of measurements from multiple ROIs\n            measurements\n            (see CID 7465 ""Measurements Derived From Multiple ROI Measurements""\n            for otions)\n        measurement_groups: Union[Sequence[highdicom.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations], Sequence[highdicom.sr.templates.VolumetricROIMeasurementsAndQualitativeEvaluations]]\n            one or more groups of either planar or volumetric ROI measurements\n            and qualitative evaluations\n        measurement_properties: highdicom.sr.templates.MeasurementProperties, optional\n            measurement properties, including evaluations of its normality\n            and/or significance, its relationship to a reference population,\n            and an indication of its selection from a set of measurements\n\n        """"""  # noqa\n        value_item = NumContentItem(\n            name=derivation,\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        value_item.ContentSequence = ContentSequence()\n        for group in measurement_groups:\n            allowed_group_types = (\n                PlanarROIMeasurementsAndQualitativeEvaluations,\n                VolumetricROIMeasurementsAndQualitativeEvaluations,\n            )\n            if not isinstance(group, allowed_group_types):\n                raise TypeError(\n                    \'Items of argument ""measurement_groups"" must have type \'\n                    \'PlanarROIMeasurementsAndQualitativeEvaluations or \'\n                    \'VolumetricROIMeasurementsAndQualitativeEvaluations.\'\n                )\n            group[0].RelationshipType = \'R-INFERRED FROM\'\n            value_item.ContentSequence.extend(group)\n        if measurement_properties is not None:\n            if not isinstance(measurement_properties, MeasurementProperties):\n                raise TypeError(\n                    \'Argument ""measurement_properties"" must have \'\n                    \'type MeasurementProperties.\'\n                )\n            value_item.ContentSequence.extend(measurement_properties)\n        # TODO: how to do R-INFERRED FROM relationship?\n        self.append(value_item)\n\n\nclass MeasurementReport(Template):\n\n    """"""TID 1500 Measurement Report""""""\n\n    def __init__(\n            self,\n            observation_context: ObservationContext,\n            procedure_reported: Union[CodedConcept, Code],\n            imaging_measurements: Optional[\n                Sequence[\n                    Union[\n                        PlanarROIMeasurementsAndQualitativeEvaluations,\n                        VolumetricROIMeasurementsAndQualitativeEvaluations,\n                        MeasurementsAndQualitativeEvaluations,\n                    ]\n                ]\n            ] = None,\n            derived_imaging_measurements: Optional[\n                Sequence[MeasurementsDerivedFromMultipleROIMeasurements]\n            ] = None,\n            title: Optional[Union[CodedConcept, Code]] = None,\n            language_of_content_item_and_descendants: Optional[\n                LanguageOfContentItemAndDescendants\n            ] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        observation_context: highdicom.sr.templates.ObservationContext\n            description of the observation context\n        procedure_reported: Union[Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], Sequence[Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]]]\n            one or more coded description(s) of the procedure\n            (see CID 100 ""Quantitative Diagnostic Imaging Procedures"" for\n            options)\n        imaging_measurements: Sequence[Union[highdicom.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations, highdicom.sr.templates.VolumetricROIMeasurementsAndQualitativeEvaluations, highdicom.sr.templates.MeasurementsAndQualitativeEvaluations]], optional\n            measurements and qualitative evaluations of images or regions\n            within images\n        derived_imaging_measurements: Sequence[highdicom.sr.templates.MeasurementsDerivedFromMultipleROIMeasurements], optional\n            measurements derived from other measurements of images or regions\n            within images\n            qualitative evaluations of images\n        title: highdicom.sr.coding.CodedConcept, optional\n            title of the report\n            (see CID 7021 ""Measurement Report Document Titles"" for options)\n        language_of_content_item_and_descendants: highdicom.sr.templates.LanguageOfContentItemAndDescendants, optional\n            specification of the language of report content items\n            (defaults to English)\n\n        Note\n        ----\n        Only one of `imaging_measurements` or `derived_imaging_measurements`\n        shall be specified.\n\n        """""" # noqa\n        super().__init__()\n        if title is None:\n            title = codes.cid7021.ImagingMeasurementReport\n        if not isinstance(title, (CodedConcept, Code, )):\n            raise TypeError(\n                \'Argument ""title"" must have type CodedConcept or Code.\'\n            )\n        item = ContainerContentItem(\n            name=title,\n            template_id=\'1500\'\n        )\n        item.ContentSequence = ContentSequence()\n        if language_of_content_item_and_descendants is None:\n            language_of_content_item_and_descendants = \\\n                LanguageOfContentItemAndDescendants(DEFAULT_LANGUAGE)\n        item.ContentSequence.extend(\n            language_of_content_item_and_descendants\n        )\n        item.ContentSequence.extend(observation_context)\n        if isinstance(procedure_reported, (CodedConcept, Code, )):\n            procedure_reported = [procedure_reported]\n        for procedure in procedure_reported:\n            procedure_item = CodeContentItem(\n                name=CodedConcept(\n                    value=\'121058\',\n                    meaning=\'Procedure reported\',\n                    scheme_designator=\'DCM\',\n                ),\n                value=procedure,\n                relationship_type=RelationshipTypeValues.HAS_CONCEPT_MOD\n            )\n            item.ContentSequence.append(procedure_item)\n        image_library_item = ImageLibrary()\n        item.ContentSequence.extend(image_library_item)\n\n        num_arguments_provided = sum([\n            imaging_measurements is not None,\n            derived_imaging_measurements is not None\n        ])\n        if num_arguments_provided > 1:\n            raise ValueError(\n                \'Only one of the following arguments can be provided: \'\n                \'""imaging_measurements"", ""derived_imaging_measurement"".\'\n            )\n        if imaging_measurements is not None:\n            measurement_types = (\n                PlanarROIMeasurementsAndQualitativeEvaluations,\n                VolumetricROIMeasurementsAndQualitativeEvaluations,\n                MeasurementsAndQualitativeEvaluations,\n            )\n            container_item = ContainerContentItem(\n                name=CodedConcept(\n                    value=\'126010\',\n                    meaning=\'Imaging Measurements\',\n                    scheme_designator=\'DCM\'\n                ),\n                relationship_type=RelationshipTypeValues.CONTAINS\n            )\n            container_item.ContentSequence = []\n            for measurements in imaging_measurements:\n                if not isinstance(measurements, measurement_types):\n                    raise TypeError(\n                        \'Measurements must have one of the following types: \'\n                        \'""{}""\'.format(\n                            \'"", ""\'.join(\n                                [\n                                    t.__name__\n                                    for t in measurement_types\n                                ]\n                            )\n                        )\n                    )\n                container_item.ContentSequence.extend(measurements)\n        elif derived_imaging_measurements is not None:\n            derived_measurement_types = (\n                MeasurementsDerivedFromMultipleROIMeasurements,\n            )\n            container_item = ContainerContentItem(\n                name=CodedConcept(\n                    value=\'126011\',\n                    meaning=\'Derived Imaging Measurements\',\n                    scheme_designator=\'DCM\'\n                ),\n                relationship_type=RelationshipTypeValues.CONTAINS\n            )\n            container_item.ContentSequence = []\n            for measurements in derived_imaging_measurements:\n                if not isinstance(measurements, derived_measurement_types):\n                    raise TypeError(\n                        \'Measurements must have one of the following types: \'\n                        \'""{}""\'.format(\n                            \'"", ""\'.join(\n                                [\n                                    t.__name__\n                                    for t in derived_measurement_types\n                                ]\n                            )\n                        )\n                    )\n                container_item.ContentSequence.extend(measurements)\n        else:\n            raise TypeError(\n                \'One of the following arguments must be provided: \'\n                \'""imaging_measurements"", ""derived_imaging_measurements"".\'\n            )\n        item.ContentSequence.append(container_item)\n        self.append(item)\n\n\nclass ImageLibrary(Template):\n\n    """"""TID 1600 Image Library""""""\n\n    def __init__(self) -> None:\n        """"""\n        Note\n        ----\n        Image Library Entry Descriptors are not included.\n\n        """"""\n        # We didn\'t implement this on purpose.\n        super().__init__()\n        library_item = ContainerContentItem(\n            name=CodedConcept(\n                value=\'111028\',\n                meaning=\'Image Library\',\n                scheme_designator=\'DCM\'\n            ),\n            relationship_type=RelationshipTypeValues.CONTAINS\n        )\n        self.append(library_item)\n'"
src/highdicom/sr/utils.py,0,"b'""""""Utilities for working with SR document instances.""""""\nfrom enum import Enum\nfrom typing import List, Optional, Union\n\nfrom pydicom.dataset import Dataset\nfrom pydicom.sr.coding import Code\n\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.enum import ValueTypeValues, RelationshipTypeValues\nfrom highdicom.sr.value_types import ContentItem\n\n\ndef find_content_items(\n        dataset: Dataset,\n        name: Optional[Union[CodedConcept, Code]] = None,\n        value_type: Optional[Union[ValueTypeValues, str]] = None,\n        relationship_type: Optional[Union[RelationshipTypeValues, str]] = None,\n        recursive: bool = False\n    ) -> List[Dataset]:\n    """"""Finds content items in a Structured Report document that match a given\n    query.\n\n    Parameters\n    ----------\n    dataset: pydicom.dataset.Dataset\n        SR document instance\n    name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n        Coded name that items should have\n    value_type: Union[highdicom.sr.enum.ValueTypeValues, str], optional\n        Type of value that items should have\n        (e.g. ``highdicom.sr.enum.ValueTypeValues.CONTAINER``)\n    relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n        Type of relationship that items should have with its parent\n        (e.g. ``highdicom.sr.enum.RelationshipTypeValues.CONTAINS``)\n    recursive: bool, optional\n        Whether search should be performed recursively, i.e. whether contained\n        child content items should also be queried\n\n    Returns\n    -------\n    List[pydicom.dataset.Dataset]\n        flat list of all content items that matched the query\n\n    Raises\n    ------\n    AttributeError\n        When data set does not contain Content Sequence attribute.\n\n    """"""  # noqa\n    def has_name(item: ContentItem, name: Optional[str]) -> bool:\n        if name is None:\n            return True\n        return item.name == name\n\n    def has_value_type(\n            item: ContentItem,\n            value_type: Optional[Union[ValueTypeValues, str]]\n    ) -> bool:\n        if value_type is None:\n            return True\n        value_type = ValueTypeValues(value_type)\n        return item.value_type == value_type.value\n\n    def has_relationship_type(\n            item: ContentItem,\n            relationship_type: Optional[Union[RelationshipTypeValues, str]]\n    ) -> bool:\n        if relationship_type is None:\n            return True\n        if getattr(item, \'relationship_type\', None) is None:\n            return False\n        relationship_type = RelationshipTypeValues(relationship_type)\n        return item.relationship_type == relationship_type.value\n\n    if not hasattr(dataset, \'ContentSequence\'):\n        raise AttributeError(\n            \'Data set does not contain a Content Sequence attribute.\'\n        )\n\n    def search_tree(\n            node: Dataset,\n            name: Optional[Union[CodedConcept, Code]],\n            value_type: Optional[Union[ValueTypeValues, str]],\n            relationship_type: Optional[Union[RelationshipTypeValues, str]],\n            recursive: bool\n        ) -> List:\n        matched_content_items = []\n        for i, content_item in enumerate(node.ContentSequence):\n            name_code = content_item.ConceptNameCodeSequence[0]\n            item = ContentItem(\n                value_type=content_item.ValueType,\n                name=CodedConcept(\n                    value=name_code.CodeValue,\n                    scheme_designator=name_code.CodingSchemeDesignator,\n                    meaning=name_code.CodeMeaning\n                ),\n                relationship_type=content_item.get(\'RelationshipType\', None)\n            )\n            if (has_name(item, name) and\n                    has_value_type(item, value_type) and\n                    has_relationship_type(item, relationship_type)):\n                matched_content_items.append(content_item)\n            if hasattr(content_item, \'ContentSequence\') and recursive:\n                matched_content_items += search_tree(\n                    node=content_item,\n                    name=name,\n                    value_type=value_type,\n                    relationship_type=relationship_type,\n                    recursive=recursive\n                )\n        return matched_content_items\n\n    return search_tree(\n        node=dataset,\n        name=name,\n        value_type=value_type,\n        relationship_type=relationship_type,\n        recursive=recursive\n    )\n'"
src/highdicom/sr/value_types.py,2,"b'""""""DICOM structured reporting content item value types.""""""\nimport datetime\nfrom collections import namedtuple\nfrom typing import Any, List, Optional, Sequence, Union\n\nimport numpy as np\nfrom pydicom.dataset import Dataset\nfrom pydicom.sequence import Sequence as DataElementSequence\nfrom pydicom.sr.coding import Code\nfrom pydicom.uid import UID\nfrom pydicom.valuerep import DA, TM, DT, PersonName\n\nfrom highdicom.sr.coding import CodedConcept\nfrom highdicom.sr.enum import (\n    GraphicTypeValues,\n    GraphicTypeValues3D,\n    PixelOriginInterpretationValues,\n    RelationshipTypeValues,\n    TemporalRangeTypeValues,\n    ValueTypeValues,\n)\n\n\nclass ContentItem(Dataset):\n\n    """"""Abstract base class for a collection of attributes contained in the\n    DICOM SR Document Content Module.""""""\n\n    def __init__(\n            self,\n            value_type: Union[str, ValueTypeValues],\n            name: Union[Code, CodedConcept],\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        value_type: Union[str, highdicom.sr.enum.ValueTypeValues]\n            type of value encoded in a content item\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            coded name or an enumerated item representing a coded name\n        relationship_type: Union[str, highdicom.sr.enum.RelationshipTypeValues], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(ContentItem, self).__init__()\n        value_type = ValueTypeValues(value_type)\n        self.ValueType = value_type.value\n        if not isinstance(name, (CodedConcept, Code, )):\n            raise TypeError(\n                \'Argument ""name"" must have type CodedConcept or Code.\'\n            )\n        if isinstance(name, Code):\n            name = CodedConcept(*name)\n        self.ConceptNameCodeSequence = [name]\n        if relationship_type is not None:\n            relationship_type = RelationshipTypeValues(relationship_type)\n            self.RelationshipType = relationship_type.value\n\n    def __setattr__(self, name: str, value: Any) -> None:\n        if name == \'ContentSequence\':\n            super(ContentItem, self).__setattr__(name, ContentSequence(value))\n        else:\n            super(ContentItem, self).__setattr__(name, value)\n\n    @property\n    def name(self) -> CodedConcept:\n        """"""CodedConcept: coded name of the content item""""""\n        return self.ConceptNameCodeSequence[0]\n\n    @property\n    def value_type(self) -> str:\n        """"""str: type of the content item\n        (see `highdicom.sr.value_types.ValueTypeValues`)\n\n        """"""\n        return self.ValueType\n\n    @property\n    def relationship_type(self) -> str:\n        """"""str: type of relationship the content item has with its parent\n        (see `highdicom.sr.enum.RelationshipTypeValues`)\n\n        """"""\n        return getattr(self, \'RelationshipType\', None)\n\n\nclass ContentSequence(DataElementSequence):\n\n    """"""Sequence of DICOM SR Content Items.""""""\n\n    def __init__(self, items: Optional[Sequence] = None) -> None:\n        if items is not None:\n            if not all(isinstance(i, ContentItem) for i in items):\n                raise TypeError(\n                    \'Items of ""{}"" must have type ContentItem.\'.format(\n                        self.__class__.__name__\n                    )\n                )\n        super(ContentSequence, self).__init__(items)\n\n    def __setitem__(self, position: int, item: ContentItem) -> None:\n        self.insert(position, item)\n\n    def __contains__(self, item: ContentItem) -> bool:\n        return any(contained_item == item for contained_item in self)\n\n    def get_nodes(self) -> \'ContentSequence\':\n        """"""Gets content items that represent nodes in the content tree, i.e.\n        target items that have a `ContentSequence` attribute.\n\n        Returns\n        -------\n        highdicom.sr.value_types.ContentSequence[highdicom.sr.value_types.ContentItem]\n            matched content items\n\n        """"""\n        return self.__class__([\n            item for item in self\n            if hasattr(item, \'ContentSequence\')\n        ])\n\n    def append(self, item: ContentItem) -> None:\n        """"""Appends a content item to the sequence.\n\n        Parameters\n        ----------\n        item: highdicom.sr.value_types.ContentItem\n            content item\n\n        """"""\n        if not isinstance(item, ContentItem):\n            raise TypeError(\n                \'Items of ""{}"" must have type ContentItem.\'.format(\n                    self.__class__.__name__\n                )\n            )\n        super(ContentSequence, self).append(item)\n\n    def extend(self, items: Sequence[ContentItem]) -> None:\n        """"""Extends multiple content items to the sequence.\n\n        Parameters\n        ----------\n        items: Sequence[highdicom.sr.value_types.ContentItem]\n            content items\n\n        """"""\n        for i in items:\n            self.append(i)\n\n    def insert(self, position: int, item: ContentItem) -> None:\n        """"""Inserts a content item into the sequence at a given position.\n\n        Parameters\n        ----------\n        position: int\n            index position\n        item: highdicom.sr.value_types.ContentItem\n            content item\n\n        """"""\n        if not isinstance(item, ContentItem):\n            raise TypeError(\n                \'Items of ""{}"" must have type ContentItem.\'.format(\n                    self.__class__.__name__\n                )\n            )\n        super(ContentSequence, self).insert(position, item)\n\n\nclass CodeContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type CODE.""""""\n\n    def __init__(\n        self,\n        name: Union[Code, CodedConcept],\n        value: Union[Code, CodedConcept],\n        relationship_type: Optional[\n            Union[str, RelationshipTypeValues]\n        ] = None\n    ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            coded value or an enumerated item representing a coded value\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(CodeContentItem, self).__init__(\n            ValueTypeValues.CODE, name, relationship_type\n        )\n        if not isinstance(value, (CodedConcept, Code, )):\n            raise TypeError(\n                \'Argument ""value"" must have type CodedConcept or Code.\'\n            )\n        if isinstance(value, Code):\n            value = CodedConcept(*value)\n        self.ConceptCodeSequence = [value]\n\n\nclass PnameContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type PNAME.""""""\n\n    def __init__(\n        self,\n        name: Union[Code, CodedConcept],\n        value: Union[str, PersonName],\n        relationship_type: Optional[\n            Union[str, RelationshipTypeValues]\n        ] = None\n    ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[str, pydicom.valuerep.PersonName]\n            name of the person\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(PnameContentItem, self).__init__(\n            ValueTypeValues.PNAME, name, relationship_type\n        )\n        self.PersonName = PersonName(value)\n\n\nclass TextContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type TEXT.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            value: str,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: str\n            description of the concept in free text\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """""" # noqa\n        super(TextContentItem, self).__init__(\n            ValueTypeValues.TEXT, name, relationship_type\n        )\n        self.TextValue = str(value)\n\n\nclass TimeContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type TIME.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            value: Union[str, datetime.time, TM],\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[str, datetime.time, pydicom.valuerep.TM]\n            time\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(TimeContentItem, self).__init__(\n            ValueTypeValues.TIME, name, relationship_type\n        )\n        self.Time = TM(value)\n\n\nclass DateContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type DATE.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            value: Union[str, datetime.date, DA],\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[str, datetime.date, pydicom.valuerep.DA]\n            date\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(DateContentItem, self).__init__(\n            ValueTypeValues.DATE, name, relationship_type\n        )\n        self.Date = DA(value)\n\n\nclass DateTimeContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type DATETIME.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            value: Union[str, datetime.datetime, DT],\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[str, datetime.datetime, pydicom.valuerep.DT]\n            datetime\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(DateTimeContentItem, self).__init__(\n            ValueTypeValues.DATETIME, name, relationship_type\n        )\n        self.DateTime = DT(value)\n\n\nclass UIDRefContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type UIDREF.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            value: Union[str, UID],\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[pydicom.uid.UID, str]\n            unique identifier\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(UIDRefContentItem, self).__init__(\n            ValueTypeValues.UIDREF, name, relationship_type\n        )\n        self.UID = value\n\n\nclass NumContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type NUM.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            value: Optional[Union[int, float]] = None,\n            unit: Optional[Union[Code, CodedConcept]] = None,\n            qualifier: Optional[Union[Code, CodedConcept]] = None,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        value: Union[int, float], optional\n            numeric value\n        unit: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            coded units of measurement (see CID 7181 ""Abstract Multi-dimensional\n            Image Model Component Units"")\n        qualifier: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code], optional\n            qualification of numeric value or as an alternative to\n            numeric value, e.g., reason for absence of numeric value\n            (see CID 42 ""Numeric Value Qualifier"" for options)\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        Note\n        ----\n        Either `value` and `unit` or `qualifier` must be specified.\n\n        """""" # noqa\n        super(NumContentItem, self).__init__(\n            ValueTypeValues.NUM, name, relationship_type\n        )\n        if value is not None:\n            self.MeasuredValueSequence: List[Dataset] = []\n            measured_value_sequence_item = Dataset()\n            if not isinstance(value, (int, float, )):\n                raise TypeError(\n                    \'Argument ""value"" must have type ""int"" or ""float"".\'\n                )\n            measured_value_sequence_item.NumericValue = value\n            if isinstance(value, float):\n                measured_value_sequence_item.FloatingPointValue = value\n            if not isinstance(unit, (CodedConcept, Code, )):\n                raise TypeError(\n                    \'Argument ""unit"" must have type CodedConcept or Code.\'\n                )\n            if isinstance(unit, Code):\n                unit = CodedConcept(*unit)\n            measured_value_sequence_item.MeasurementUnitsCodeSequence = [unit]\n            self.MeasuredValueSequence.append(measured_value_sequence_item)\n        elif qualifier is not None:\n            if not isinstance(qualifier, (CodedConcept, Code, )):\n                raise TypeError(\n                    \'Argument ""qualifier"" must have type ""CodedConcept"" or \'\n                    \'""Code"".\'\n                )\n            if isinstance(qualifier, Code):\n                qualifier = CodedConcept(*qualifier)\n            self.NumericValueQualifierCodeSequence = [qualifier]\n        else:\n            raise ValueError(\n                \'Either argument ""value"" or ""qualifier"" must be specified \'\n                \'upon creation of NumContentItem.\'\n            )\n\n\nclass ContainerContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type CONTAINER.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            is_content_continuous: bool = True,\n            template_id: Optional[str] = None,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        is_content_continous: bool, optional\n            whether contained content items are logically linked in a\n            continuous manner or separate items (default: ``True``)\n        template_id: str, optional\n            SR template identifier\n        relationship_type: str, optional\n            type of relationship with parent content item\n\n        """"""\n        super(ContainerContentItem, self).__init__(\n            ValueTypeValues.CONTAINER, name, relationship_type\n        )\n        if is_content_continuous:\n            self.ContinuityOfContent = \'CONTINUOUS\'\n        else:\n            self.ContinuityOfContent = \'SEPARATE\'\n        if template_id is not None:\n            item = Dataset()\n            item.MappingResource = \'DCMR\'\n            item.TemplateIdentifier = str(template_id)\n            self.ContentTemplateSequence = [item]\n\n\nclass CompositeContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type COMPOSITE.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            referenced_sop_class_uid: Union[str, UID],\n            referenced_sop_instance_uid: Union[str, UID],\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ):\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        referenced_sop_class_uid: Union[pydicom.uid.UID, str]\n            SOP Class UID of the referenced object\n        referenced_sop_instance_uid: Union[pydicom.uid.UID, str]\n            SOP Instance UID of the referenced object\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(CompositeContentItem, self).__init__(\n            ValueTypeValues.COMPOSITE, name, relationship_type\n        )\n        item = Dataset()\n        item.ReferencedSOPClassUID = str(referenced_sop_class_uid)\n        item.ReferencedSOPInstanceUID = str(referenced_sop_instance_uid)\n        self.ReferencedSOPSequence = [item]\n\n\nclass ImageContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type IMAGE.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            referenced_sop_class_uid: Union[str, UID],\n            referenced_sop_instance_uid: Union[str, UID],\n            referenced_frame_numbers: Optional[\n                Union[int, Sequence[int]]\n            ] = None,\n            referenced_segment_numbers: Optional[\n                Union[int, Sequence[int]]\n            ] = None,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        referenced_sop_class_uid: Union[pydicom.uid.UID, str]\n            SOP Class UID of the referenced image object\n        referenced_sop_instance_uid: Union[pydicom.uid.UID, str]\n            SOP Instance UID of the referenced image object\n        referenced_frame_numbers: Union[int, Sequence[int]], optional\n            number of frame(s) to which the reference applies in case of a\n            multi-frame image\n        referenced_segment_numbers: Union[int, Sequence[int]], optional\n            number of segment(s) to which the refernce applies in case of a\n            segmentation image\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(ImageContentItem, self).__init__(\n            ValueTypeValues.IMAGE, name, relationship_type\n        )\n        item = Dataset()\n        item.ReferencedSOPClassUID = str(referenced_sop_class_uid)\n        item.ReferencedSOPInstanceUID = str(referenced_sop_instance_uid)\n        if referenced_frame_numbers is not None:\n            item.ReferencedFrameNumber = referenced_frame_numbers\n        if referenced_segment_numbers is not None:\n            item.ReferencedSegmentNumber = referenced_segment_numbers\n        self.ReferencedSOPSequence = [item]\n\n\nclass ScoordContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type SCOORD.\n\n    Note\n    ----\n    Spatial coordinates are defined in image space and have pixel units.\n\n    """"""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            graphic_type: Union[str, GraphicTypeValues],\n            graphic_data: np.ndarray,\n            pixel_origin_interpretation: Union[\n                str,\n                PixelOriginInterpretationValues\n            ],\n            fiducial_uid: Optional[Union[str, UID]] = None,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        graphic_type: Union[highdicom.sr.enum.GraphicTypeValues, str]\n            name of the graphic type\n        graphic_data: numpy.ndarray[numpy.int]\n            array of ordered spatial coordinates, where each row of the array\n            represents a (column, row) coordinate pair\n        pixel_origin_interpretation: Union[highdicom.sr.enum.PixelOriginInterpretationValues, str]\n            whether pixel coordinates specified by `graphic_data` are defined\n            relative to the total pixel matrix\n            (``highdicom.sr.enum.PixelOriginInterpretationValues.VOLUME``) or\n            relative to an individual frame\n            (``highdicom.sr.enum.PixelOriginInterpretationValues.FRAME``)\n        fiducial_uid: Union[pydicom.uid.UID, str, None], optional\n            unique identifier for the content item\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(ScoordContentItem, self).__init__(\n            ValueTypeValues.SCOORD, name, relationship_type\n        )\n        graphic_type = GraphicTypeValues(graphic_type)\n        pixel_origin_interpretation = PixelOriginInterpretationValues(\n            pixel_origin_interpretation\n        )\n        self.GraphicType = graphic_type.value\n\n        if graphic_type == GraphicTypeValues.POINT:\n            if graphic_data.shape[0] != 1 or not graphic_data.shape[1] == 2:\n                raise ValueError(\n                    \'Graphic data of a scoord of graphic type ""POINT"" \'\n                    \'must be a single (column row) pair in two-dimensional \'\n                    \'image coordinate space.\'\n                )\n        elif graphic_type == GraphicTypeValues.CIRCLE:\n            if graphic_data.shape[0] != 2 or not graphic_data.shape[1] == 2:\n                raise ValueError(\n                    \'Graphic data of a scoord of graphic type ""CIRCLE"" \'\n                    \'must be two (column, row) pairs in two-dimensional \'\n                    \'image coordinate space.\'\n                )\n        elif graphic_type == GraphicTypeValues.ELLIPSE:\n            if graphic_data.shape[0] != 4 or not graphic_data.shape[1] == 2:\n                raise ValueError(\n                    \'Graphic data of a scoord of graphic type ""ELLIPSE"" \'\n                    \'must be four (column, row) pairs in two-dimensional \'\n                    \'image coordinate space.\'\n                )\n        elif graphic_type == GraphicTypeValues.ELLIPSOID:\n            if graphic_data.shape[0] != 6 or not graphic_data.shape[1] == 2:\n                raise ValueError(\n                    \'Graphic data of a scoord of graphic type ""ELLIPSOID"" \'\n                    \'must be six (column, row) pairs in two-dimensional \'\n                    \'image coordinate space.\'\n                )\n        else:\n            if not graphic_data.shape[0] > 1 or not graphic_data.shape[1] == 2:\n                raise ValueError(\n                    \'Graphic data of a scoord must be multiple \'\n                    \'(column, row) pairs in two-dimensional image \'\n                    \'coordinate space.\'\n                )\n        # Flatten list of coordinate pairs\n        self.GraphicData = graphic_data.flatten().tolist()\n        self.PixelOriginInterpretation = pixel_origin_interpretation.value\n        if fiducial_uid is not None:\n            self.FiducialUID = fiducial_uid\n\n\nclass Scoord3DContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type SCOORD3D.\n\n    Note\n    ----\n    Spatial coordinates are defined in the patient or specimen-based coordinate\n    system and have milimeter unit.\n\n    """"""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            graphic_type: Union[GraphicTypeValues3D, str],\n            graphic_data: np.ndarray,\n            frame_of_reference_uid: Union[str, UID],\n            fiducial_uid: Optional[Union[str, UID]] = None,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        graphic_type: Union[highdicom.sr.enum.GraphicTypeValues3D, str]\n            name of the graphic type\n        graphic_data: numpy.ndarray[numpy.float]\n            array of spatial coordinates, where each row of the array\n            represents a (x, y, z) coordinate triplet\n        frame_of_reference_uid: Union[pydicom.uid.UID, str]\n            unique identifier of the frame of reference within which the\n            coordinates are defined\n        fiducial_uid: str, optional\n            unique identifier for the content item\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(Scoord3DContentItem, self).__init__(\n            ValueTypeValues.SCOORD3D, name, relationship_type\n        )\n        graphic_type = GraphicTypeValues3D(graphic_type)\n        self.GraphicType = graphic_type.value\n\n        if graphic_type == GraphicTypeValues3D.POINT:\n            if graphic_data.shape[0] != 1 or not graphic_data.shape[1] == 3:\n                raise ValueError(\n                    \'Graphic data of a scoord 3D of graphic type ""POINT"" \'\n                    \'must be a single point in three-dimensional patient or \'\n                    \'slide coordinate space in form of a (x, y, z) triplet.\'\n                )\n        elif graphic_type == GraphicTypeValues3D.ELLIPSE:\n            if graphic_data.shape[0] != 4 or not graphic_data.shape[1] == 3:\n                raise ValueError(\n                    \'Graphic data of a 3D scoord of graphic type ""ELLIPSE"" \'\n                    \'must be four (x, y, z) triplets in three-dimensional \'\n                    \'patient or slide coordinate space.\'\n                )\n        elif graphic_type == GraphicTypeValues3D.ELLIPSOID:\n            if graphic_data.shape[0] != 6 or not graphic_data.shape[1] == 3:\n                raise ValueError(\n                    \'Graphic data of a 3D scoord of graphic type \'\n                    \'""ELLIPSOID"" must be six (x, y, z) triplets in \'\n                    \'three-dimensional patient or slide coordinate space.\'\n                )\n        else:\n            if not graphic_data.shape[0] > 1 or not graphic_data.shape[1] == 3:\n                raise ValueError(\n                    \'Graphic data of a 3D scoord must be multiple \'\n                    \'(x, y, z) triplets in three-dimensional patient or \'\n                    \'slide coordinate space.\'\n                )\n        # Flatten list of coordinate triplets\n        self.GraphicData = graphic_data.flatten().tolist()\n        self.ReferencedFrameOfReferenceUID = frame_of_reference_uid\n        if fiducial_uid is not None:\n            self.FiducialUID = fiducial_uid\n\n\nclass TcoordContentItem(ContentItem):\n\n    """"""DICOM SR document content item for value type TCOORD.""""""\n\n    def __init__(\n            self,\n            name: Union[Code, CodedConcept],\n            temporal_range_type: Union[str, TemporalRangeTypeValues],\n            referenced_sample_positions: Optional[Sequence[int]] = None,\n            referenced_time_offsets: Optional[Sequence[float]] = None,\n            referenced_date_time: Optional[Sequence[datetime.datetime]] = None,\n            relationship_type: Optional[\n                Union[str, RelationshipTypeValues]\n            ] = None\n        ) -> None:\n        """"""\n        Parameters\n        ----------\n        name: Union[highdicom.sr.coding.CodedConcept, pydicom.sr.coding.Code]\n            concept name\n        temporal_range_type: Union[highdicom.sr.enum.TemporalRangeTypeValues, str]\n            name of the temporal range type\n        referenced_sample_positions: Sequence[int], optional\n            one-based relative sample position of acquired time points\n            within the time series\n        referenced_time_offsets: Sequence[float], optional\n            seconds after start of the acquisition of the time series\n        referenced_date_time: Sequence[datetime.datetime], optional\n            absolute time points\n        relationship_type: Union[highdicom.sr.enum.RelationshipTypeValues, str], optional\n            type of relationship with parent content item\n\n        """"""  # noqa\n        super(TcoordContentItem, self).__init__(\n            ValueTypeValues.TCOORD, name, relationship_type\n        )\n        temporal_range_type = TemporalRangeTypeValues(temporal_range_type)\n        self.TemporalRangeType = temporal_range_type.value\n        if referenced_sample_positions is not None:\n            self.ReferencedSamplePositions = [\n                int(v) for v in referenced_sample_positions\n            ]\n        elif referenced_time_offsets is not None:\n            self.ReferencedTimeOffsets = [\n                float(v) for v in referenced_time_offsets\n            ]\n        elif referenced_date_time is not None:\n            self.ReferencedDateTime = [\n                DT(v) for v in referenced_date_time\n            ]\n        else:\n            raise ValueError(\n                \'One of the following arguments is required: ""{}""\'.format(\n                    \'"", ""\'.join([\n                        \'referenced_sample_positions\',\n                        \'referenced_time_offsets\',\n                        \'referenced_date_time\'\n                    ])\n                )\n            )\n'"
