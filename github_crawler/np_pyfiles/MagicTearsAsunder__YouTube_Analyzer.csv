file_path,api_count,code
manage.py,0,"b'#!/usr/bin/env python\n""""""Django\'s command-line utility for administrative tasks.""""""\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'shindeiru.settings\')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            ""Couldn\'t import Django. Are you sure it\'s installed and ""\n            ""available on your PYTHONPATH environment variable? Did you ""\n            ""forget to activate a virtual environment?""\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
omaewa/__init__.py,0,b''
omaewa/admin.py,0,"b'from django.contrib import admin\nfrom .models import (\n    CustomUser, StatsZipFiles, YouTubeTextStats, HeatmapFiles,\n    WordClouds, Activities, TopChannels, TopVideos\n)\n\n# Register your models here.\nadmin.site.register(CustomUser)\nadmin.site.register(StatsZipFiles)\nadmin.site.register(YouTubeTextStats)\nadmin.site.register(HeatmapFiles)\nadmin.site.register(WordClouds)\nadmin.site.register(Activities)\nadmin.site.register(TopChannels)\nadmin.site.register(TopVideos)\n'"
omaewa/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass OmaewaConfig(AppConfig):\n    name = 'omaewa'\n"""
omaewa/delete_all_user_data.py,0,"b""def delete_all(username):\n    import os\n    import shutil\n    from django.conf import settings\n    from .models import (\n        StatsZipFiles, YouTubeTextStats, HeatmapFiles,\n        WordClouds, Activities, TopChannels, TopVideos\n    )\n\n    all_models = [\n        StatsZipFiles,\n        YouTubeTextStats,\n        WordClouds,\n        Activities,\n        HeatmapFiles,\n        TopChannels,\n        TopVideos,\n    ]\n\n    for the_model in all_models:\n        try:\n            out_data = the_model.objects.get(username_id=username)\n        except the_model.MultipleObjectsReturned:\n            out_data = the_model.objects.filter(username_id=username)\n        except the_model.DoesNotExist:\n            continue\n        out_data.delete()\n\n    try:\n        shutil.rmtree(os.path.join(settings.MEDIA_ROOT, 'extracted', username))\n        os.remove(\n            os.path.join(settings.MEDIA_ROOT, 'zipfiles', username + '.zip')\n        )\n    except FileNotFoundError:\n        pass\n"""
omaewa/email_confirmation.py,0,"b'from django.core.mail import send_mail\nfrom django.conf import settings\n\n\ndef send_email_confirmation(new_user, host_url):\n    the_link = f\'http://{host_url}/confirm/{new_user.random_url}\'\n    e_mail = new_user.email\n    mail_body = (\n        f""{new_user.username}, welcome to Omae Wa Mou Shindeiru!\\n\\n""\n        ""Thanks for creating an Omae Wa account.\\n""\n        ""Click the link below to confirm your email address.\\n\\n""\n        f""{the_link}""\n    )\n\n    send_mail(\n        \'Registration\',\n        mail_body,\n        settings.EMAIL_HOST_USER,\n        [f\'{e_mail}\']\n    )\n'"
omaewa/forms.py,0,"b""from django import forms\nfrom .models import CustomUser, StatsZipFiles\n\n\nclass CustomUserForm(forms.ModelForm):\n    class Meta:\n        model = CustomUser\n        fields = [\n            'username',\n            'password',\n            'email'\n        ]\n\n    username = forms.CharField(label='', widget=forms.TextInput(\n        attrs={\n            'placeholder': 'Username',\n            'maxlength': 50,\n            'class': 'form-control',\n            'autofocus': 'autofocus'\n        })\n    )\n\n    password = forms.CharField(label='', widget=forms.PasswordInput(\n        attrs={\n            'placeholder': 'Password',\n            'maxlength': 100,\n            'class': 'form-control'\n        })\n    )\n\n    email = forms.EmailField(label='', widget=forms.EmailInput(\n        attrs={\n            'placeholder': 'Email',\n            'maxlength': 50,\n            'class': 'form-control'\n        })\n    )\n\n\nclass UploadFileForm(forms.ModelForm):\n    class Meta:\n        model = StatsZipFiles\n        fields = ['file']\n\n    file = forms.FileField(label='', widget=forms.FileInput(\n        attrs={\n            'aria-describedby': 'inputGroupFileAddon01',\n            'id': 'inputGroupFile01',\n            'class': 'custom-file-input'\n        })\n    )\n"""
omaewa/handle_zip_file.py,0,"b'import os\nimport io\nimport json\nimport calendar\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom zipfile import ZipFile, BadZipFile\nfrom wordcloud import WordCloud\n\nfrom django.conf import settings\nfrom django.core.files.images import ImageFile\n\nfrom .delete_all_user_data import delete_all\n\n\nclass GenerateStats:\n    def __init__(self, user_model):\n        user_name = str(user_model.username)\n        self.the_path = os.path.join(\n            settings.MEDIA_ROOT, \'extracted\', user_name\n        )\n\n        self.is_error = 0\n        self.error_message = []\n\n        path_eng = {\n            \'liked_dir\': (\'playlists\', \'likes.json\'),\n            \'search_dir\': (\'history\', \'search-history.json\'),\n            \'watched_dir\': (\'history\', \'watch-history.json\')\n        }\n\n        list_file_exists = [\n            \'Takeout/YouTube/playlists/likes.json\',\n            \'Takeout/YouTube/history/search-history.json\',\n            \'Takeout/YouTube/history/watch-history.json\'\n        ]\n\n        try:\n            with ZipFile(user_model.file) as f:\n                info_list = [\n                    i for i in f.namelist() if i.startswith(\'Takeout/YouTube\')\n                ]\n\n                for i in list_file_exists:\n                    if i not in info_list:\n                        self.is_error = 1\n                        self.error_message.append(\'Expected files not found\')\n                        delete_all(user_name)\n                        return\n\n                f.extractall(members=info_list, path=self.the_path)\n\n        except BadZipFile as error:\n            print(error)\n            self.is_error = 1\n            self.error_message.append(\'Invalid .zip file\')\n            delete_all(user_name)\n            return\n\n        if not os.path.exists(os.path.join(self.the_path, \'heatmap\')):\n            os.mkdir(os.path.join(self.the_path, \'heatmap\'))\n\n        if not os.path.exists(os.path.join(self.the_path, \'activities\')):\n            os.mkdir(os.path.join(self.the_path, \'activities\'))\n\n        self.the_path = os.path.join(self.the_path, \'Takeout\', \'YouTube\')\n        self.path_language = path_eng\n        self.text_data = {}\n        self.files_data = {\n            \'wordcloud\': None,\n            \'heatmaps\': [],\n            \'activity_by_hour\': None,\n            \'activity_by_weekday\': None\n        }\n\n        self.search_history()\n        self.liked()\n        matplotlib.use(\'Agg\')\n        self.watched()\n\n    def search_history(self):\n        search_dir = os.path.join(\n            self.the_path,\n            *(self.path_language[\'search_dir\'])\n        )\n\n        all_search = GenerateStats.__extract_json(search_dir)\n        if all_search == 1:\n            self.is_error = 1\n            self.error_message.append(\'search-history.json decode error\')\n            return\n\n        count_searches = len(all_search)\n        first_search = all_search[-1][\'title\'][13:]\n\n        self.text_data[\'count_searches\'] = count_searches\n        self.text_data[\'first_search\'] = first_search\n\n        all_words = \' \'.join([i[\'title\'][13:] for i in all_search])\n\n        wordcloud = WordCloud(\n            width=450,\n            height=450,\n            background_color=\'white\',\n            min_font_size=10).generate(all_words)\n\n        stream = io.BytesIO()\n        stream.name = \'wordcloud.png\'\n        wordcloud.to_file(stream)\n        file = ImageFile(stream)\n        self.files_data[\'wordcloud\'] = file\n\n    def liked(self):\n        liked_dir = os.path.join(\n            self.the_path,\n            *(self.path_language[\'liked_dir\'])\n        )\n\n        all_liked = GenerateStats.__extract_json(liked_dir)\n\n        if all_liked == 1:\n            self.is_error = 1\n            self.error_message.append(\'likes.json decode error\')\n            return\n\n        count_liked = len(all_liked)\n        first_liked = all_liked[-1][\'snippet\'][\'title\']\n        temp = all_liked[-1][\'contentDetails\'][\'videoId\']\n        first_liked_url = \'https://www.youtube.com/watch?v=\' + temp\n\n        self.text_data[\'count_liked\'] = count_liked\n        self.text_data[\'first_liked\'] = first_liked\n        self.text_data[\'first_liked_url\'] = first_liked_url\n\n    def watched(self):\n        watched_dir = os.path.join(\n            self.the_path,\n            *(self.path_language[\'watched_dir\'])\n        )\n        all_watched = GenerateStats.__extract_json(watched_dir)\n\n        if all_watched == 1:\n            self.is_error = 1\n            self.error_message.append(\'watch-history.json decode error\')\n            return\n\n        count_watched = len(all_watched)\n        first_watched_title = all_watched[-1][\'title\'][8:]\n        first_watched_url = all_watched[-1][\'titleUrl\']\n        first_watched_dt = pd.to_datetime(\n            all_watched[-1][\'time\']\n        ).tz_convert(\'Europe/Moscow\').to_pydatetime()\n\n        self.text_data[\'count_watched\'] = count_watched\n        self.text_data[\'first_watched_title\'] = first_watched_title\n        self.text_data[\'first_watched_url\'] = first_watched_url\n        self.text_data[\'first_watched_dt\'] = first_watched_dt\n\n        def cnvrt_time(x):\n            x = pd.to_datetime(x).tz_convert(\'Europe/Moscow\')\n            return [x.day, x.month_name(), x.year, x.hour, x.day_name()]\n\n        time_list = [cnvrt_time(i[""time""]) for i in all_watched]\n\n        all_channels = [\n            i[\'subtitles\'][0].values()\n            for i in all_watched if i.get(\'subtitles\')\n        ]\n        all_videos = [\n            [i[\'title\'][8:], i[\'titleUrl\']]\n            for i in all_watched if i.get(\'titleUrl\')\n        ]\n\n        df = pd.DataFrame(data=time_list, columns=[\n            \'Day\', \'Month\', \'Year\', \'Hour\', \'Weekday\'\n        ])\n\n        frame_channels = pd.DataFrame(\n            data=all_channels, columns=[\'title\', \'the_url\']\n        )\n        frame_videos = pd.DataFrame(\n            data=all_videos, columns=[\'title\', \'the_url\']\n        )\n\n        def the_heatmap(the_frame):\n            list_of_years = list(df.Year.drop_duplicates())\n            list_of_years.sort()\n            sns.set()\n\n            monthes = [\n                \'January\', \'February\', \'March\', \'April\',\n                \'May\', \'June\', \'July\', \'August\',\n                \'September\', \'October\', \'November\', \'December\'\n            ]\n\n            for year in list_of_years:\n                frame_year = df[[\'Day\', \'Month\']][df[\'Year\'] == year]\n                frame_year = frame_year.groupby(\n                    frame_year.columns.tolist()).size().reset_index().rename(\n                    columns={0: \'Counts\'}\n                )\n                list_to_be_appended = []\n\n                for idx, month in enumerate(monthes):\n                    temp_month = set(\n                        frame_year[\'Day\'][frame_year[\'Month\'] == month]\n                    )\n                    days_in_month = set(\n                        range(1, (calendar.monthrange(year, idx+1)[1] + 1))\n                    )\n                    month_differ = days_in_month - temp_month\n\n                    while month_differ:\n                        list_to_be_appended.append(\n                            [month_differ.pop(), month, 0]\n                        )\n\n                appending_frame = pd.DataFrame(\n                    data=list_to_be_appended,\n                    columns=[\'Day\', \'Month\', \'Counts\']\n                )\n\n                frame_year = frame_year.append(appending_frame)\n                frame_year[\'Month\'] = pd.Categorical(\n                    frame_year[\'Month\'], categories=monthes, ordered=True\n                )\n                frame_year.sort_values(by=\'Month\', inplace=True)\n\n                htmap = frame_year.pivot(""Month"", ""Day"", ""Counts"")\n                f, ax = plt.subplots(figsize=(18, 7))  # 10 6\n                new = sns.heatmap(\n                    htmap, annot=True, fmt=\'.0f\', linewidths=.5, ax=ax\n                )\n                new.set_title(f\'{year}\')\n\n                stream = io.BytesIO()\n                new.get_figure().savefig(stream, format=\'png\', quality=95)\n                stream.name = f\'{year}.png\'\n                file = ImageFile(stream)\n                self.files_data[\'heatmaps\'].append(file)\n\n        def activity_by_hour(the_frame):\n            the_frame = the_frame.groupby(the_frame.columns.tolist()).size()\n            sns.set(style=""white"", context=""talk"")\n\n            f, ax = plt.subplots(1, 1, figsize=(10, 4), sharex=True)\n            x = list(the_frame.index)\n            y = list(the_frame)\n            sns.barplot(x=x, y=y, palette=""rocket"", ax=ax)\n            ax.axhline(0, color=""k"", clip_on=False)\n            ax.set_ylabel(""Overview"")\n            ax.set_title(""ACTIVITY BY HOUR OF DAY"")\n\n            stream = io.BytesIO()\n            ax.get_figure().savefig(stream, format=\'png\')\n            stream.name = \'activity_by_hour.png\'\n            file = ImageFile(stream)\n            self.files_data[\'activity_by_hour\'] = file\n\n        def activity_by_weekday(the_frame):\n            the_frame = the_frame.groupby(\n                the_frame.columns.tolist()).size()\n            weekdays = [\'Monday\', \'Tuesday\', \'Wednesday\',\n                        \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\']\n            the_frame.index = pd.Categorical(\n                the_frame.index, categories=weekdays, ordered=True\n            )\n            the_frame.sort_index(inplace=True)\n            sns.set(style=""white"", context=""talk"")\n\n            f, ax = plt.subplots(1, 1, figsize=(10, 4), sharex=True)\n            x = list(the_frame.index)\n            y = list(the_frame)\n            sns.barplot(x=x, y=y, palette=""rocket"", ax=ax)\n            ax.axhline(0, color=""k"", clip_on=False)\n            ax.set_ylabel(""Overview"")\n            ax.set_title(""ACTIVITY BY DAY OF WEEK"")\n\n            stream = io.BytesIO()\n            ax.get_figure().savefig(stream, format=\'png\')\n            stream.name = \'activity_by_weekday.png\'\n            file = ImageFile(stream)\n            self.files_data[\'activity_by_weekday\'] = file\n\n        def top_five_watched(the_frame):\n            the_frame = the_frame.groupby(\n                the_frame.columns.tolist()).size().reset_index().rename(\n                columns={0: \'counts\'}\n            )\n            the_frame = the_frame.sort_values(by=\'counts\', ascending=False)\n            the_frame = the_frame.head()\n            return the_frame\n\n        plt.rcParams[\'figure.dpi\'] = 60\n        plt.rcParams.update({\'font.size\': 12})\n\n        the_heatmap(df[[\'Day\', \'Month\', \'Year\']])\n        activity_by_hour(df[[\'Hour\']])\n        activity_by_weekday(df[[\'Weekday\']])\n        plt.close(\'all\')\n        self.frame_channels = top_five_watched(frame_channels)\n        self.frame_videos = top_five_watched(frame_videos)\n\n    def __extract_json(directory):\n        with open(directory, \'r\') as f:\n            try:\n                all_json = json.load(f)\n            except json.decoder.JSONDecodeError as error:\n                print(error)\n                return 1\n            else:\n                return all_json\n'"
omaewa/models.py,0,"b""import os\nimport uuid\n\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom django.core.validators import FileExtensionValidator\n\n\nclass CustomUser(AbstractUser):\n    username = models.CharField(\n        verbose_name='Username',\n        primary_key=True,\n        max_length=50\n    )\n    password = models.CharField(verbose_name='Password', max_length=100)\n\n    email = models.EmailField(verbose_name='Email', unique=True, max_length=50)\n\n    first_name = models.CharField(\n        verbose_name='First name',\n        max_length=50,\n        null=True,\n        blank=True\n    )\n    last_name = models.CharField(\n        verbose_name='Last name',\n        max_length=50,\n        null=True,\n        blank=True\n    )\n    is_confirmed = models.BooleanField(\n        verbose_name='Is confirmed',\n        default=False\n    )\n    random_url = models.UUIDField(default=uuid.uuid4, null=True, blank=True)\n\n\nclass StatsZipFiles(models.Model):\n    def user_directory_path(instance, filename):\n        # file will be uploaded to MEDIA_ROOT/zipfiles/<username>.zip\n        filename = instance.username_id + '.zip'\n        return os.path.join('zipfiles', f'{filename}')\n\n    file = models.FileField(\n        verbose_name='ZipFile',\n        upload_to=user_directory_path,\n        validators=[FileExtensionValidator(allowed_extensions=['zip'])],\n        blank=False\n    )\n    username = models.OneToOneField(\n        'CustomUser',\n        verbose_name='Username_id',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n\n\nclass YouTubeTextStats(models.Model):\n    username = models.OneToOneField(\n        'CustomUser',\n        verbose_name='Username',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n    count_searches = models.PositiveIntegerField(\n        verbose_name='Count_Searches',\n        blank=False\n    )\n    first_search = models.CharField(\n        max_length=200,\n        verbose_name='First_Search',\n        blank=True,\n        null=True\n    )\n    count_liked = models.PositiveIntegerField(\n        verbose_name='Count_Liked',\n        blank=False\n    )\n    first_liked = models.CharField(\n        max_length=200,\n        verbose_name='First_Liked',\n        blank=True,\n        null=True\n    )\n    first_liked_url = models.URLField(\n        verbose_name='First_Liked_Url',\n        blank=True,\n        null=True\n    )\n    count_watched = models.PositiveIntegerField(\n        verbose_name='Count_Watched',\n        blank=False\n    )\n    first_watched_title = models.CharField(\n        max_length=200,\n        verbose_name='First_Watched_Title',\n        blank=True,\n        null=True\n    )\n    first_watched_url = models.URLField(\n        verbose_name='First_Watched_Url',\n        blank=True,\n        null=True\n    )\n    first_watched_dt = models.DateTimeField(\n        verbose_name='First_Watched_Dt',\n        blank=True,\n        null=True\n    )\n\n\nclass HeatmapFiles(models.Model):\n    def user_directory_path(instance, filename):\n        # will be uploaded to MEDIA_ROOT/extracted/<username>/heatmap/<fname>\n        return os.path.join(\n            'extracted', f'{instance.username_id}', 'heatmap', f'{filename}'\n        )\n\n    username = models.ForeignKey(\n        'CustomUser',\n        verbose_name='Username',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n    file = models.ImageField(\n        verbose_name='Heatmap',\n        upload_to=user_directory_path,\n        blank=False\n    )\n\n    class Meta:\n        ordering = ['file']\n\n\nclass WordClouds(models.Model):\n    def user_directory_path(instance, filename):\n        # file will be uploaded to MEDIA_ROOT/extracted/<username>/wordcloud/\n        return os.path.join(\n            'extracted', f'{instance.username_id}', 'wordcloud', f'{filename}'\n        )\n    username = models.OneToOneField(\n        'CustomUser',\n        verbose_name='Username',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n    file = models.ImageField(\n        verbose_name='WordCloud',\n        upload_to=user_directory_path,\n        blank=False\n    )\n\n\nclass Activities(models.Model):\n    def user_directory_path(instance, filename):\n        # file will be uploaded to MEDIA_ROOT/extracted/<username>/activities/\n        return os.path.join(\n            'extracted', f'{instance.username_id}', 'activities', f'{filename}'\n        )\n\n    username = models.OneToOneField(\n        'CustomUser',\n        verbose_name='Username',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n    activity_by_hour = models.ImageField(\n        verbose_name='Activity_By_Hour',\n        upload_to=user_directory_path,\n        blank=False\n    )\n    activity_by_weekday = models.ImageField(\n        verbose_name='Activity_By_Weekday',\n        upload_to=user_directory_path,\n        blank=False\n    )\n\n\nclass TopChannels(models.Model):\n    username = models.ForeignKey(\n        'CustomUser',\n        verbose_name='Username',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n    title = models.CharField(\n        max_length=200,\n        verbose_name='Title',\n        blank=True,\n        null=True\n    )\n    the_url = models.URLField(\n        verbose_name='Channel_Url',\n        blank=True,\n        null=True\n    )\n    counts = models.PositiveIntegerField(\n        verbose_name='Counts',\n        blank=False\n    )\n\n    class Meta:\n        ordering = ['-counts']\n\n\nclass TopVideos(models.Model):\n    username = models.ForeignKey(\n        'CustomUser',\n        verbose_name='Username',\n        on_delete=models.CASCADE,\n        blank=False\n    )\n    title = models.CharField(\n        max_length=200,\n        verbose_name='Title',\n        blank=True,\n        null=True\n    )\n    the_url = models.URLField(\n        verbose_name='Video_Url',\n        blank=True,\n        null=True\n    )\n    counts = models.PositiveIntegerField(\n        verbose_name='Counts',\n        blank=False\n    )\n\n    class Meta:\n        ordering = ['-counts']\n"""
omaewa/urls.py,0,"b""from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('register', views.user_registration, name='user_registration'),\n    path('login', views.user_login, name='user_login'),\n    path('logout', views.user_logout, name='user_logout'),\n    path('confirm/<uuid:the_uid>', views.conf_reg, name='conf_reg'),\n    path('category', views.category_page, name='category_page'),\n    path('posting', views.post_page, name='post_page'),\n    path('youtube', views.youtube, name='youtube')\n]\n"""
omaewa/views.py,0,"b'from django.shortcuts import render, get_object_or_404\nfrom django.http import HttpResponseRedirect, HttpRequest\nfrom django.urls import reverse\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.decorators import login_required\n\nfrom .forms import CustomUserForm, UploadFileForm\nfrom .email_confirmation import send_email_confirmation\nfrom .handle_zip_file import GenerateStats\nfrom .delete_all_user_data import delete_all\nfrom .models import (\n    CustomUser, StatsZipFiles, YouTubeTextStats, HeatmapFiles,\n    WordClouds, Activities, TopChannels, TopVideos\n)\n\n\ndef user_registration(request, *args, **kwargs):\n    if request.user.is_authenticated:\n        return HttpResponseRedirect(reverse(\'index\'))\n\n    data_from_form = CustomUserForm(request.POST or None)\n    message = None\n\n    if data_from_form.is_valid():\n        new_user = data_from_form.save()\n        new_user.set_password(new_user.password)\n        new_user.save()\n        send_email_confirmation(new_user, request.get_host())\n        message = ""Please, check your e-mail.""\n        data_from_form = CustomUserForm()\n\n    context = {\n        \'form\': data_from_form,\n        \'message\': message\n    }\n    return render(request, \'omaewa/register.html\', context)\n\n\ndef conf_reg(request, the_uid, *args, **kwargs):\n    the_user = get_object_or_404(CustomUser, random_url=the_uid)\n    if not the_user.is_confirmed:\n        the_user.is_confirmed = True\n        the_user.random_url = None\n        the_user.save()\n    else:\n        raise ValueError(f\'An unexpected error: {the_user}\')\n\n    return HttpResponseRedirect(reverse(\'user_login\'))\n\n\ndef user_login(request, *args, **kwargs):\n    if request.user.is_authenticated:\n        return HttpResponseRedirect(reverse(\'index\'))\n\n    message = None\n\n    if request.method == \'POST\':\n        username = request.POST.get(\'username\')\n        password = request.POST.get(\'password\')\n        user = authenticate(username=username, password=password)\n        if user:\n            if not user.is_confirmed:\n                message = \'Please, confirm your e-mail.\'\n            elif user.is_active:\n                login(request, user)\n                return HttpResponseRedirect(reverse(\'index\'))\n            else:\n                message = \'Your account was inactive.\'\n        else:\n            message = \'Incorrect username and/or password\'\n\n    context = {\n        \'message\': message\n    }\n\n    return render(request, \'omaewa/login.html\', context)\n\n\n@login_required\ndef user_logout(request, *args, **kwargs):\n    logout(request)\n    return HttpResponseRedirect(reverse(\'user_login\'))\n\n\n@login_required\ndef youtube(request, *args, **kwargs):\n    form = UploadFileForm()\n    if request.method == \'POST\':\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            delete_all(request.user.username)\n            new_zip = StatsZipFiles.objects.update_or_create(\n                username=request.user,\n                defaults={\'file\': form.cleaned_data[\'file\']}\n            )\n\n            yt_dt = GenerateStats(new_zip[0])\n\n            del new_zip\n\n            if yt_dt.is_error:\n                context = {\n                    \'form\': UploadFileForm(),\n                    \'message\': yt_dt.error_message\n                }\n                return render(request, \'omaewa/youtube.html\', context)\n\n            YouTubeTextStats.objects.update_or_create(\n                username=request.user,\n                defaults=yt_dt.text_data\n            )\n\n            try:\n                htmap = HeatmapFiles.objects.filter(username=request.user)\n            except HeatmapFiles.DoesNotExist:\n                pass\n            else:\n                htmap.delete()\n            finally:\n                for i in yt_dt.files_data[\'heatmaps\']:\n                    HeatmapFiles.objects.create(username=request.user, file=i)\n\n            WordClouds.objects.update_or_create(\n                username=request.user,\n                defaults={\'file\': yt_dt.files_data[\'wordcloud\']}\n            )\n\n            defies = {\n                \'activity_by_hour\': yt_dt.files_data[\'activity_by_hour\'],\n                \'activity_by_weekday\': yt_dt.files_data[\'activity_by_weekday\']\n            }\n\n            try:\n                activs = Activities.objects.get(username=request.user)\n            except Activities.DoesNotExist:\n                pass\n            else:\n                activs.delete()\n            finally:\n                Activities.objects.create(username=request.user, **defies)\n\n            tops = {\n                TopChannels: yt_dt.frame_channels,\n                TopVideos: yt_dt.frame_videos\n            }\n\n            for the_model in tops:\n                try:\n                    top_five = the_model.objects.filter(username=request.user)\n                except top_five.DoesNotExist:\n                    pass\n                else:\n                    top_five.delete()\n                finally:\n                    for index, row in tops[the_model].iterrows():\n                        the_model.objects.create(\n                            username=request.user,\n                            title=row[\'title\'],\n                            the_url=row[\'the_url\'],\n                            counts=row[\'counts\']\n                        )\n\n            del yt_dt\n\n            return HttpResponseRedirect(reverse(\'index\'))\n\n    return render(request, \'omaewa/youtube.html\', {\'form\': form})\n\n\ndef index(request, *args, **kwargs):\n    if not request.user.is_authenticated:\n        return HttpResponseRedirect(reverse(\'user_login\'))\n\n    if request.method == \'POST\':\n        username = request.user.username\n        delete_all(username)\n        return HttpResponseRedirect(reverse(\'youtube\'))\n    else:\n        username = request.user\n        all_models = {\n            YouTubeTextStats: \'ytts\',\n            WordClouds: \'wrdcld\',\n            Activities: \'activs\',\n            HeatmapFiles: \'htmap\',\n            TopChannels: \'topchs\',\n            TopVideos: \'topvids\',\n        }\n\n        context = {}\n\n        for the_model in all_models.keys():\n            try:\n                out_data = the_model.objects.get(username_id=username)\n            except the_model.MultipleObjectsReturned:\n                out_data = the_model.objects.filter(username_id=username)\n            except the_model.DoesNotExist:\n                return HttpResponseRedirect(reverse(\'youtube\'))\n\n            context[all_models[the_model]] = out_data\n        return render(request, \'omaewa/index.html\', context)\n\n\ndef category_page(request, *args, **kwargs):\n    return render(request, \'omaewa/category-page.html\', {})\n\n\ndef post_page(request, *args, **kwargs):\n    return render(request, \'omaewa/post-page.html\', {})\n'"
shindeiru/__init__.py,0,b''
shindeiru/settings.py,0,"b'""""""\nDjango settings for shindeiru project.\n\nGenerated by \'django-admin startproject\' using Django 2.2.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/2.2/ref/settings/\n""""""\n\nimport os\nimport environ\nimport omaewa\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Main app \'OMAEWA\' absolute path\nOMAEWA_DIR = os.path.dirname(omaewa.__file__)\n\n# Read dot env file\nenv = environ.Env()\nenviron.Env.read_env()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env.str(\'SECRET_KEY\')\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = env.bool(\'DEBUG\')\n\nALLOWED_HOSTS = [\n    ""localhost"", ""0.0.0.0"", ""127.0.0.1"", env.str(\'ALLOWED_HOST_4\')\n]\n\n\n# Application definition\nINSTALLED_APPS = [\n    \'omaewa.apps.OmaewaConfig\',\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.messages\',\n    \'django.contrib.staticfiles\',\n    \'django_cleanup.apps.CleanupConfig\',\n]\n\nMIDDLEWARE = [\n    \'django.middleware.security.SecurityMiddleware\',\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.middleware.csrf.CsrfViewMiddleware\',\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n    \'django.contrib.messages.middleware.MessageMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n]\n\nROOT_URLCONF = \'shindeiru.urls\'\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.contrib.messages.context_processors.messages\',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'shindeiru.wsgi.application\'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.2/ref/settings/#databases\n\n# DATABASES = {\n#     \'default\': {\n#         \'ENGINE\': \'django.db.backends.sqlite3\',\n#         \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n#     }\n# }\n\n# Assumes you are using PostgreSQL\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.postgresql_psycopg2\',\n        \'NAME\': env.str(\'DATABASE_NAME\'),\n        \'USER\': env.str(\'DATABASE_USER\'),\n        \'PASSWORD\': env.str(\'DATABASE_PASSWORD\'),\n        \'HOST\': env.str(\'DATABASE_HOST\'),\n        \'PORT\': env.str(\'DATABASE_PORT\'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n    },\n]\n\nAUTH_USER_MODEL = \'omaewa.CustomUser\'\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.2/topics/i18n/\n\nLANGUAGE_CODE = \'en-us\'\n\nTIME_ZONE = \'Europe/Moscow\'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.2/howto/static-files/\n\nSTATIC_URL = \'/static/\'\nMEDIA_URL = \'/media/\'\nMEDIA_ROOT = os.path.join(BASE_DIR, \'media\')\n\n# SMTP e-mailing settings\nEMAIL_BACKEND = \'django.core.mail.backends.smtp.EmailBackend\'\nEMAIL_HOST = \'smtp.gmail.com\'\nEMAIL_PORT = env.int(\'EMAIL_PORT\')\nEMAIL_HOST_USER = env.str(\'EMAIL_HOST_USER\')\nEMAIL_HOST_PASSWORD = env.str(\'EMAIL_HOST_APP_KEY\')\nEMAIL_USE_TLS = True\n\n\nCACHES = {\n    \'default\': {\n        \'BACKEND\': \'django.core.cache.backends.dummy.DummyCache\',\n    }\n}\n'"
shindeiru/urls.py,0,"b'""""""shindeiru URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/2.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n""""""\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path(\'admin/\', admin.site.urls),\n    path(\'\', include(\'omaewa.urls\'))\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n'"
shindeiru/wsgi.py,0,"b'""""""\nWSGI config for shindeiru project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/\n""""""\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'shindeiru.settings\')\n\napplication = get_wsgi_application()\n'"
omaewa/functional_tests/__init__.py,0,b''
omaewa/functional_tests/test_login_page.py,0,"b""import os\nfrom uuid import uuid4\nfrom selenium import webdriver\nfrom urllib.parse import urljoin\nfrom django.conf import settings\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.urls import reverse\nfrom omaewa.views import user_login\n\n\nclass TestOmaewaLoginPage(StaticLiveServerTestCase):\n    def setUp(self):\n        chromedriver_dir = os.path.join(\n            settings.OMAEWA_DIR, 'functional_tests', 'chromedriver')\n\n        assert os.path.exists(chromedriver_dir)\n\n        self.driver = webdriver.Chrome(chromedriver_dir)\n\n    def tearDown(self):\n        self.driver.close()\n\n    def test_login_page_alert_displayed_if_incorrect_credentials(self):\n        self.driver.get(urljoin(self.live_server_url, reverse(user_login)))\n\n        username_field = self.driver.find_element_by_name('username')\n        password_field = self.driver.find_element_by_name('password')\n        button = self.driver.find_element_by_id('login_submit')\n\n        username_field.send_keys(str(uuid4()))\n        password_field.send_keys(str(uuid4()))\n        button.click()\n\n        alert = self.driver.find_element_by_class_name('alert-primary')\n        self.assertEquals(alert.text, 'Incorrect username and/or password')\n"""
omaewa/migrations/__init__.py,0,b''
omaewa/tests/__init__.py,0,b''
omaewa/tests/test_forms.py,0,b''
omaewa/tests/test_models.py,0,b''
omaewa/tests/test_urls.py,0,"b'from uuid import uuid4\nfrom django.test import TestCase, SimpleTestCase\nfrom django.urls import reverse, resolve\nfrom omaewa.urls import urlpatterns\nfrom omaewa.views import (\n    index,\n    user_registration,\n    user_login,\n    user_logout,\n    conf_reg,\n    category_page,\n    post_page,\n    youtube,\n)\n\n\nclass TestUrls(SimpleTestCase):\n\n    def test_all_urls_are_resolved(self):\n        views_tuple = (\n            index,\n            user_registration,\n            user_login,\n            user_logout,\n            conf_reg,\n            category_page,\n            post_page,\n            youtube,\n        )\n\n        arguments = [None] * len(views_tuple)\n        # Customise url arguments below\n        arguments[views_tuple.index(conf_reg)] = (str(uuid4()),)\n\n        for i, url_path in enumerate(urlpatterns):\n            url = reverse(url_path.name, args=arguments[i])\n            self.assertEquals(resolve(url).func, views_tuple[i])\n'"
omaewa/tests/test_views.py,0,"b""import os\nimport pytz\nfrom uuid import uuid4\nfrom datetime import datetime\n\nfrom django.conf import settings\nfrom django.urls import reverse\nfrom django.test import TestCase, Client\n\nfrom omaewa.models import CustomUser\nfrom omaewa.delete_all_user_data import delete_all\n\n\nclass TestViews(TestCase):\n    def setUp(self):\n        self.zipfile_dir = os.path.join(\n            settings.OMAEWA_DIR, 'tests', 'takeout_eng_2.zip')\n        assert os.path.exists(self.zipfile_dir)\n\n        self.client = Client()\n        self.credentials = {\n            'username': 'DummyTestUser',\n            'password': '12345678',\n            'email': 'dslksdjnfiwjfiajffaqiwpdk@gmail.com'\n        }\n        self.test_user = CustomUser.objects.create(**self.credentials)\n        self.test_user.set_password(self.credentials['password'])\n        self.test_user.save()\n\n        self.register_url = reverse('user_registration')\n        self.login_url = reverse('user_login')\n        self.youtube_url = reverse('youtube')\n        self.confirm_random_uuid = reverse('conf_reg', args=[str(uuid4())])\n        self.confirm_existing_uuid = reverse(\n            'conf_reg', args=[self.test_user.random_url]\n        )\n\n    def tearDown(self):\n        delete_all(self.test_user.username)\n\n    def test_register_GET(self):\n        response = self.client.get(self.register_url)\n\n        self.assertEquals(response.status_code, 200)\n        self.assertTemplateUsed(response, 'omaewa/register.html')\n\n    def test_login_GET(self):\n        response = self.client.get(self.login_url)\n\n        self.assertEquals(response.status_code, 200)\n        self.assertTemplateUsed(response, 'omaewa/login.html')\n\n    def test_confirm_random_uuid_GET(self):\n        response = self.client.get(self.confirm_random_uuid)\n\n        self.assertEquals(response.status_code, 404)\n\n    def test_confirm_existing_uuid_GET(self):\n        response = self.client.get(self.confirm_existing_uuid)\n\n        self.assertRedirects(response, reverse('user_login'))\n        self.assertEquals(response.status_code, 302)\n\n    def test_register_POST(self):\n        response = self.client.post(self.register_url, self.credentials)\n\n        self.assertEquals(response.status_code, 200)\n        self.assertTemplateUsed(response, 'omaewa/register.html')\n\n    def test_login_authenticated(self):\n        response_login = self.client.login(**self.credentials)\n        response_youtube = self.client.get(self.youtube_url)\n\n        self.assertTrue(response_login)\n        self.assertEquals(response_youtube.status_code, 200)\n\n    def test_youtube_post_zipfile(self):\n        custom_dt = datetime(2016, 4, 17, 17, 45, 36, 752000, tzinfo=pytz.UTC)\n\n        response_login = self.client.login(**self.credentials)\n        self.assertTrue(response_login)\n\n        with open(self.zipfile_dir, 'rb') as file:\n            response = self.client.post(self.youtube_url, {'file': file})\n\n        self.assertEquals(response.status_code, 302)\n        self.assertRedirects(response, reverse('index'))\n        self.assertEquals(self.test_user.youtubetextstats.count_watched, 21481)\n        self.assertEquals(self.test_user.youtubetextstats.count_searches, 3734)\n        self.assertEquals(self.test_user.youtubetextstats.count_liked, 422)\n        self.assertEquals(self.test_user.youtubetextstats.first_liked,\n                          'Maddyson \xd0\xb8\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb5\xd1\x82 \xd0\xb2 Battlefield 3: Close Quarters')\n        self.assertEquals(self.test_user.youtubetextstats.first_liked_url,\n                          'https://www.youtube.com/watch?v=CpjUBsxkFcs')\n        self.assertEquals(self.test_user.youtubetextstats.first_search,\n                          '+100500')\n        self.assertEquals(self.test_user.youtubetextstats.first_watched_title,\n                          '\xd0\xa1\xd1\x83\xd0\xbf\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb5\xd1\x80\xd0\xbe\xd0\xb8 \xd0\xbd\xd0\xb0 \xd0\x9f\xd1\x8f\xd1\x82\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb5 \xd0\x92\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb9 \xd0\xb2\xd1\x8b\xd0\xbf\xd1\x83\xd1\x81\xd0\xba')\n        self.assertEquals(self.test_user.youtubetextstats.first_watched_url,\n                          'https://www.youtube.com/watch?v=PcRgkXxy5yM')\n\n        self.assertEquals(self.test_user.youtubetextstats.first_watched_dt,\n                          custom_dt)\n"""
