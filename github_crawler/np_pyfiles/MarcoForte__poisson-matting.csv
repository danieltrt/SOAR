file_path,api_count,code
poisson_matting.py,10,"b'from __future__ import division\n\nimport numpy as np\nimport scipy.ndimage\nimport cv2\nfrom numba import jit\n\n\n@jit\ndef computeAlphaJit(alpha, b, unknown):\n    h, w = unknown.shape\n    alphaNew = alpha.copy()\n    alphaOld = np.zeros(alphaNew.shape)\n    threshold = 0.1\n    n = 1\n    while (n < 50 and np.sum(np.abs(alphaNew - alphaOld)) > threshold):\n        alphaOld = alphaNew.copy()\n        for i in range(1, h-1):\n            for j in range(1, w-1):\n                if(unknown[i,j]):\n                    alphaNew[i,j] = 1/4  * (alphaNew[i-1 ,j] + alphaNew[i,j-1] + alphaOld[i, j+1] + alphaOld[i+1,j] - b[i,j])\n        n +=1\n    return alphaNew\n\n\ndef poisson_matte(gray_img, trimap):\n    h, w = gray_img.shape\n    fg = trimap == 255\n    bg = trimap == 0\n    unknown = True ^ np.logical_or(fg,bg)\n    fg_img = gray_img*fg\n    bg_img = gray_img*bg\n    alphaEstimate = fg + 0.5 * unknown\n\n    approx_bg = cv2.inpaint(bg_img.astype(np.uint8),(unknown+fg).astype(np.uint8)*255,3,cv2.INPAINT_TELEA)*(np.logical_not(fg)).astype(np.float32)\n    approx_fg = cv2.inpaint(fg_img.astype(np.uint8),(unknown+bg).astype(np.uint8)*255,3,cv2.INPAINT_TELEA)*(np.logical_not(bg)).astype(np.float32)\n\n    # Smooth F - B image\n    approx_diff = approx_fg - approx_bg\n    approx_diff = scipy.ndimage.filters.gaussian_filter(approx_diff, 0.9)\n\n    dy, dx = np.gradient(gray_img)\n    d2y, _ = np.gradient(dy/approx_diff)\n    _, d2x = np.gradient(dx/approx_diff)\n    b = d2y + d2x\n\n    alpha = computeAlphaJit(alphaEstimate, b, unknown)\n    \n    alpha = np.minimum(np.maximum(alpha,0),1).reshape(h,w)\n    return alpha\n\n# Load in image\ndef main():    \n    img = scipy.misc.imread(\'troll.png\')\n    gray_img = scipy.misc.imread(\'troll.png\', flatten=\'True\')\n    trimap = scipy.misc.imread(\'trollTrimap.bmp\', flatten=\'True\')\n\n    alpha = poisson_matte(gray_img,trimap)\n\n    plt.imshow(alpha, cmap=\'gray\')\n    plt.show()\n    h, w, c = img.shape\n    plt.imshow((alpha.reshape(h,w,1).repeat(3,2)*img).astype(np.uint8))\n    plt.show()\n\nif __name__ == ""__main__"":\n    import scipy.misc\n    import matplotlib.pyplot as plt\n    main()'"
