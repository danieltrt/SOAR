file_path,api_count,code
Main.py,41,"b'import numpy as np\nimport matplotlib.pyplot as plt\nimport Oversamp as Os\n\n# 1(a) dB to Linear\nPower_dB = np.array([0, -3, -6, -8])\nPower = 10**(Power_dB/10)\n\n# 1(b) Max excess delay\n# 120 ns\n\n# 1(c) Mean excess delay\nDelay = np.array([0, 20, 80, 120])*(1e-9)\nPower_Normalize = Power/sum(Power)\nDelay_Mean = Delay.dot(Power_Normalize)\n\n# 1(d) RMS excess delay\nDelay_RMS = np.sqrt(((Delay-Delay_Mean)**2).dot(Power_Normalize))\n\n# 2(a) h\nX = np.loadtxt(""Gaussian_RV_X.txt"", dtype=float)\nY = np.loadtxt(""Gaussian_RV_Y.txt"", dtype=float)\nvariance_test_X = np.var(X,ddof=1) # Degrees of Freedom = 1\nvariance_test_Y = np.var(Y,ddof=1) # Degrees of Freedom = 1\nZ = X+1j*Y\na = np.sqrt(Power)\ng = a*Z\ng_abs = abs(g)\nk = g_abs**2\nK = 1/np.sqrt(sum(k))\nh = K*g\nh_test = sum(abs(h)**2)\n\n# 2(b) Fourier transform equation\n\n# 2(c) Channel Frequency response\nfs = 50e6\nf = (np.linspace(-1, 1, 401))*fs\nHH = np.zeros(np.size(f), dtype=complex)\n\nfor ff in range(0, np.size(f), 1):\n    temp = h*np.exp(-1j*2*np.pi*f[ff]*Delay)\n    HH[ff] = sum(temp)\n\nplt.style.use(\'dark_background\')\nfig, P1 = plt.subplots()\nP1.plot(f, abs(HH), \'-\', color=\'palevioletred\', linewidth=4.0)\nP1.set_xlabel(""f"")\nP1.set_ylabel(""Amplitude"")\nP1.set_title(""Frequency domin-Magnitude"")\n\nplt.style.use(\'dark_background\')\nfig, P2 = plt.subplots()\nP2.plot(f, np.angle(HH), \'-\', color=\'palevioletred\', linewidth=4.0)\nP2.set_xlabel(""f"")\nP2.set_ylabel(""Amplitude"")\nP2.set_title(""Frequency domin-Phase"")\n\n# 2(d) Subcarrier\nB_c = 1/(5*Delay_RMS)\nN = np.ceil(50e6/B_c)\n\n# 3(a) d_n\nBinary_data = np.array([0, 1, 0, 1, 1, 1])\nBinary_data_new = np.zeros(np.size(Binary_data), dtype=complex)\n\nfor p in range(0, np.size(Binary_data), 1):\n    if Binary_data[p] == 0:\n        Binary_data_new[p] = 1\n    else:\n        Binary_data_new[p] = -1\n\nd_n = Os.oversamp(Binary_data_new, 8)\nt = np.arange(np.size(d_n))*20e-9\n\nplt.style.use(\'dark_background\')\nfig, P3 = plt.subplots()\nmarkerline, stemlines, baseline = P3.stem(t, d_n)\nplt.setp(markerline, color=\'springgreen\', markersize=8.5)\nplt.setp(stemlines, color=\'cornflowerblue\', linewidth=4.0, linestyle=\'--\')\nplt.setp(baseline, color=\'palevioletred\', linewidth=2.0)\nP3.set_xlabel(""t"")\nP3.set_ylabel(""Amplitude"")\nP3.set_title(""d_n"")\n\n# 3(b) z_n\nh_new = np.array([h[0], h[1], 0, 0, h[2], 0, h[3]])\nNN = np.size(h_new)\nt = np.arange(NN)*20e-9\n\nplt.style.use(\'dark_background\')\nfig, P4 = plt.subplots()\nmarkerline, stemlines, baseline = P4.stem(t, abs(h_new))\nplt.setp(markerline, color=\'springgreen\', markersize=8.5)\nplt.setp(stemlines, color=\'cornflowerblue\', linewidth=4.0, linestyle=\'--\')\nplt.setp(baseline, color=\'palevioletred\', linewidth=2.0)\nP4.set_xlabel(""t"")\nP4.set_ylabel(""Amplitude"")\nP4.set_title(""h_new"")\n\nz_n_temp = np.zeros((NN,np.size(d_n)), dtype=complex)\nz_n_temp2 = np.zeros((NN,np.size(d_n)+NN-1), dtype=complex)\n\nfor o in range(0, NN, 1):\n    offset_zero_front = np.zeros((o), dtype=complex)\n    offset_zero_back = np.zeros((NN-1-o), dtype=complex)\n    z_n_temp[o,:] = h_new[o]*d_n # [1x48]\n    z_n_temp2[o,:] = np.concatenate((offset_zero_front, z_n_temp[o,:], offset_zero_back)) # [1x54]\n\nz_n = sum(z_n_temp2) # [1x54]\nt = np.arange(np.size(d_n)+6)*20e-9\n\nplt.style.use(\'dark_background\')\nfig, P5 = plt.subplots()\nP5.plot(t, np.real(z_n), \'-\', color=\'palevioletred\', linewidth=4.0)\nP5.set_xlabel(""t"")\nP5.set_ylabel(""Amplitude"")\nP5.set_title(""real z_n"")\n\nplt.style.use(\'dark_background\')\nfig, P6 = plt.subplots()\nP6.plot(t, np.imag(z_n), \'-\', color=\'palevioletred\', linewidth=4.0)\nP6.set_xlabel(""t"")\nP6.set_ylabel(""Amplitude"")\nP6.set_title(""imag z_n"")\n\nplt.style.use(\'dark_background\')\nfig, P7 = plt.subplots()\nP7.plot(t, abs(z_n), \'--\', color=\'palevioletred\', linewidth=3.0, label=\'abs z_n\')\nt2 = np.arange(np.size(d_n))*20e-9\nmarkerline, stemlines, baseline = P7.stem(t2, d_n, label=\'d_n\')\nplt.setp(markerline, color=\'springgreen\', markersize=8.5)\nplt.setp(stemlines, color=\'cornflowerblue\', linewidth=4.0, linestyle=\'--\')\nplt.setp(baseline, color=\'palevioletred\', linewidth=2.0)\n\nP7.legend(loc=\'lower right\')\nP7.set_xlabel(""t"")\nP7.set_ylabel(""Amplitude"")\nP7.set_title(""imag z_n"")\n\n# 3(c) ISI\n# NO\n\n# 4(a) Binary for CFO\nBinary_data_CFO = np.array([1, 0, 1, 0, 1, 1, 0, 1])\nd_n_before_CFO = np.zeros(np.size(Binary_data_CFO)*4, dtype=complex)\n\nfor r in range(0, np.size(Binary_data_CFO), 1):\n    if Binary_data_CFO[r] == 0:\n        d_n_before_CFO[np.arange(4)+4*r] = np.array([1, 1, 1, 1])\n    else:\n        d_n_before_CFO[np.arange(4)+4*r] = np.array([-1, -1, -1, -1])\n\nttt = np.arange(np.size(d_n_before_CFO))*20e-9\nplt.style.use(\'dark_background\')\nfig, P8 = plt.subplots()\nmarkerline, stemlines, baseline = P8.stem(ttt, d_n_before_CFO)\nplt.setp(markerline, color=\'springgreen\', markersize=8.5)\nplt.setp(stemlines, color=\'cornflowerblue\', linewidth=4.0, linestyle=\'--\')\nplt.setp(baseline, color=\'palevioletred\', linewidth=2.0)\nP8.set_xlabel(""t"")\nP8.set_ylabel(""Amplitude"")\nP8.set_title(""d_n"")\n\n# 4(b) CFO\nCFO=800e3\nd_n_after_CFO = d_n_before_CFO*np.exp(1j*2*np.pi*CFO*ttt)\n\nplt.style.use(\'dark_background\')\nfig, P9 = plt.subplots()\nP9.plot(ttt, np.real(d_n_after_CFO), \'-\', color=\'palevioletred\', linewidth=4.0)\nP9.set_xlabel(""t"")\nP9.set_ylabel(""Amplitude"")\nP9.set_title(""Real CFO"")\n\nplt.style.use(\'dark_background\')\nfig, P10 = plt.subplots()\nP10.plot(ttt, np.imag(d_n_after_CFO), \'-\', color=\'palevioletred\', linewidth=4.0)\nP10.set_xlabel(""t"")\nP10.set_ylabel(""Amplitude"")\nP10.set_title(""Imag CFO"")\n\n# 4(c) CFO complex\nplt.style.use(\'dark_background\')\nfig, P11 = plt.subplots()\nP11.plot(np.real(d_n_after_CFO), np.imag(d_n_after_CFO), \'o\', color=\'palevioletred\', linewidth=4.0)\nP11.set_xlabel(""I"")\nP11.set_ylabel(""Q"")\nP11.set_title(""CFO Complex"")\nP11.axis(\'equal\')\nP11.axis([-1.5, 1.5, -1.5, 1.5])\n\nplt.show()'"
Oversamp.py,2,"b'def oversamp(indata, sample):\n    import numpy as np\n    nsymb = np.size(indata)\n    out = np.zeros(nsymb*sample, dtype=complex)\n    for i in range(0, nsymb, 1):\n        out[i*sample] = indata[i]\n    return out'"
