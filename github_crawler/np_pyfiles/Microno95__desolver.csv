file_path,api_count,code
setup.py,0,"b'#!/usr/bin/env python\n""""""\nThe MIT License (MIT)\n\nCopyright (c) 2016-2020 Microno95, Ekin Ozturk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n""""""\n\nimport os\nfrom setuptools import setup\n\nsetup_py_path = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n\nwith open(os.path.join(setup_py_path, ""README.rst""), ""r"") as fh:\n    long_description = fh.read()\n\nname    = \'desolver\'\nrelease = \'3.1.1\'\nversion = ""."".join(release.split(""."")[:2])\n    \nsetup(name=name,\n      version=release,\n      description=\'Differential Equation System Solver\',\n      author=\'Ekin Ozturk\',\n      author_email=\'ekin.ozturk@mail.utoronto.ca\',\n      long_description=long_description,\n      long_description_content_type=""text/x-rst"",\n      install_requires=[\'numpy\', \'tqdm\', \'scipy>=0.18.0\'],\n      license=\'MIT\',\n      keywords=[\'ode solver\', \'differential equation\', \'differential system\', \'ode system\', \'non-linear ode\'],\n      url=\'https://github.com/Microno95/desolver\',\n      packages=[\'desolver\', \'desolver.integrators\', \'desolver.exception_types\', \'desolver.utilities\', \'desolver.backend\'],\n      extras_require={\n        \'pyaudi\':   [""pyaudi>=1.7"", ""numpy>=1.17""],\n        \'pytorch\':  [""torch>=1.3.1"", ""torchvision>=0.4.2"", ""numpy>=1.17""],\n      },\n      classifiers=[\n          # How mature is this project? Common values are\n          #   3 - Alpha\n          #   4 - Beta\n          #   5 - Production/Stable\n          \'Development Status :: 5 - Production/Stable\',\n\n          \'Environment :: Console\',\n          # Indicate who your project is intended for\n          \'Intended Audience :: Developers\',\n          \'Intended Audience :: Science/Research\',\n          \'Intended Audience :: Education\',\n          \'Intended Audience :: End Users/Desktop\',\n          \'Topic :: Scientific/Engineering :: Mathematics\',\n\n          # Pick your license as you wish (should match ""license"" above)\n          \'License :: OSI Approved :: MIT License\',\n\n          # Specify the Python versions you support here. In particular, ensure\n          # that you indicate whether you support Python 2, Python 3 or both.\n          \'Programming Language :: Python :: 3.5\',\n          \'Programming Language :: Python :: 3.6\',\n          \'Programming Language :: Python :: 3.7\'\n      ],\n      # these are optional and override conf.py settings\n      command_options={\n          \'build_sphinx\': {\n              \'project\': (\'setup.py\', name),\n              \'version\': (\'setup.py\', version),\n              \'release\': (\'setup.py\', release),\n              \'source_dir\': (\'setup.py\', \'docs\')}}\n    )\n'"
desolver/__init__.py,0,"b'from . import backend\nfrom . import exception_types\n\nfrom .differential_system import DiffRHS, rhs_prettifier, OdeSystem\nfrom . import utilities\nfrom . import integrators\n\nfrom .integrators import available_methods\n\ntry:\n    # Pytest testing\n    from numpy._pytesttester import PytestTester\n    test = PytestTester(__name__)\n    del PytestTester\nexcept:\n    pass'"
desolver/differential_system.py,0,"b'import collections\nimport sys\n\nfrom tqdm.auto import tqdm\n\nfrom . import backend as D\nfrom . import integrators as integrators\nfrom . import exception_types as etypes\nfrom . import utilities as deutil\n\nimport numpy as np\n\nCubicHermiteInterp = deutil.interpolation.CubicHermiteInterp\nroot_finder        = deutil.optimizer.brentsrootvec\n\n__all__ = [\n    \'DiffRHS\',\n    \'rhs_prettifier\',\n    \'OdeSystem\'\n]\n\nStateTuple = collections.namedtuple(\'StateTuple\', [\'t\', \'y\'])\n\n##### Code adapted from https://github.com/scipy/scipy/blob/v1.3.2/scipy/integrate/_ivp/ivp.py#L28 #####\ndef prepare_events(events):\n    """"""Standardize event functions and extract is_terminal and direction.""""""\n    if callable(events):\n        events = (events,)\n\n    if events is not None:\n        is_terminal = D.zeros(len(events), dtype=bool)\n        direction   = D.zeros(len(events), dtype=D.int64)\n        for i, event in enumerate(events):\n            if hasattr(event, ""is_terminal""):\n                is_terminal[i] = bool(event.is_terminal)\n\n            if hasattr(event, ""direction""):\n                direction[i] = event.direction\n    else:\n        is_terminal = None\n        direction   = None\n\n    return events, is_terminal, direction\n\n#####\n\ndef handle_events(sol, events, consts, direction, is_terminal):\n    """"""Helper function to handle events.\n    Parameters\n    ----------\n    sol : DenseOutput\n        Function ``sol(t)`` which evaluates an ODE solution between `t_old`\n        and  `t`.\n    events : list of callables\n        List of Event functions\n    consts : dict\n        Dictionary of system constants\n    direction : array-type, shape (n_events,)\n        Direction of event to be detected\n    is_terminal : array-type, shape (n_events,)\n        Which events are terminal.\n    Returns\n    -------\n    active_events : array-type\n        Indices of events which take zero between `t_prev` and `t_next` and before\n        a possible termination.\n    roots : array-type\n        Values of t at which events occurred sorted in time according to the direction\n        of `t_prev` to `t_next`.\n    terminate : bool\n        Whether a terminal event occurred.\n    """"""\n    ev_f = [(lambda event: lambda t: event(t, sol(t), **consts))(ev) for ev in events]\n    t_prev, t_next = sol.t0, sol.t1\n    \n    roots, success = root_finder(\n        ev_f,\n        [t_prev, t_next],\n        tol=4*D.epsilon()\n    )\n    \n    roots = D.asarray(roots)\n    \n    int_dir = D.sign(t_next - t_prev)\n    \n    g     = [events[idx]((1.9*t_root + 0.1*t_prev)/2, sol((1.9*t_root + 0.1*t_prev)/2), **consts) for idx, t_root in enumerate(roots)]\n    g_new = [events[idx]((1.9*t_root + 0.1*t_next)/2, sol((1.9*t_root + 0.1*t_next)/2), **consts) for idx, t_root in enumerate(roots)]\n    \n    g     = D.stack(g)\n    g_new = D.stack(g_new)\n    \n    up     = (g <= 0) & (g_new >= 0)\n    down   = (g >= 0) & (g_new <= 0)\n    either = up | down\n    mask   = (up     & (direction > 0) |\n              down   & (direction < 0) |\n              either & (direction == 0))\n    \n    if D.backend() in [\'numpy\', \'pyaudi\']:\n        active_events = D.nonzero(mask)[0]\n    else:\n        active_events = D.reshape(D.nonzero(mask)[0], (-1,))\n    \n    roots     = roots[active_events]\n    terminate = False\n    \n    if len(active_events) > 0:\n        order = D.argsort(D.sign(t_next - t_prev) * roots)\n        active_events = active_events[order]\n        roots         = roots[order]\n        \n        if D.any(is_terminal[active_events]):\n            t             = D.nonzero(is_terminal[active_events])[0][0]\n            active_events = active_events[:t + 1]\n            roots         = roots[:t + 1]\n            terminate     = True\n            \n    return active_events, roots, terminate\n\nclass DenseOutput(object):\n    """"""Dense Output class for storing the dense output from a numerical integration.\n    \n    Attributes\n    ----------\n    t_eval : list or array-type\n        time of evaluation of differential equations\n    y_interpolants : list of interpolants\n        interpolants of each timestep in a numerical integration\n    """"""\n    def __init__(self, t_eval, y_interpolants):\n        if t_eval is None and y_interpolants is None:\n            self.t_eval         = [0.0]\n            self.y_interpolants = []\n        else:\n            if t_eval is None or y_interpolants is None:\n                raise ValueError(""Both t_eval and y_interpolants must not be NoneTypes"")\n            elif len(t_eval) != len(y_interpolants) + 1:\n                raise ValueError(""The number of evaluation times and interpolants must be equal!"")\n            else:\n                self.t_eval         = list(t_eval)\n                self.y_interpolants = y_interpolants\n        \n    def __call__(self, t):\n        if len(D.shape(t)) > 0:\n            ret_vals = D.zeros_like(D.asarray(t))\n            flat_t   = D.reshape(D.asarray(t), (-1,))\n            _y_test  = self.y_interpolants[0](self.t_eval[0])\n            flat_y   = D.stack([D.empty_like(_y_test) for _ in range(len(flat_t))])\n            for idx, _t in enumerate(flat_t):\n                tidx = min(deutil.search_bisection(self.t_eval, _t), len(self.y_interpolants) - 1)\n                flat_y[idx] = self.y_interpolants[tidx](_t)\n            return D.reshape(flat_y, D.shape(t) + D.shape(flat_y)[1:])\n        else:\n            tidx = min(deutil.search_bisection(self.t_eval, t), len(self.y_interpolants) - 1)\n            return self.y_interpolants[tidx](t)\n    \n    def add_interpolant(self, t, y_interp):\n        try:\n            y_interp(self.t_eval[-1])\n        except:\n            raise\n        try:\n            y_interp(t)\n        except:\n            raise\n        if (t - self.t_eval[-1]) < 0:\n            self.t_eval.insert(0, t)\n            self.y_interpolants.insert(0, y_interp)\n        else:\n            self.t_eval.append(t)\n            self.y_interpolants.append(y_interp)\n    \n\nclass DiffRHS(object):\n    """"""Differential Equation class. Designed to wrap around around a function for the right-hand side of an ordinary differential equation.\n    \n    Attributes\n    ----------\n    rhs : callable\n        Right-hand side of an ordinary differential equation\n    equ_repr : str\n        String representation of the right-hand side.\n    """"""\n    def __init__(self, rhs, equ_repr=None, md_repr=None):\n        """"""Initialises the equation class possibly with a human-readable equation representation.\n        \n        Parameters\n        ----------\n        rhs : callable\n            A function for obtaining the rhs of an ordinary differential equation with the invocation patter rhs(t, y, **kwargs)\n        equ_repr : str, optional\n            A human-readable transcription of the differential equation represented by rhs\n        """"""\n        self.rhs     = rhs\n        if equ_repr is not None:\n            self.equ_repr = str(equ_repr)\n            if md_repr is not None:\n                self.md_repr = md_repr\n            else:\n                self.md_repr = equ_repr\n        else:\n            if md_repr is not None:\n                self.md_repr = md_repr\n            else:\n                try:\n                    self.md_repr = self.rhs._repr_markdown_()\n                except:\n                    self.md_repr = str(self.rhs)\n            self.equ_repr = str(self.rhs)\n        self.nfev = 0\n        \n    def __call__(self, t, y, *args, **kwargs):\n        called_val = self.rhs(t, y, *args, **kwargs)\n        self.nfev += 1\n        return called_val\n\n    def __str__(self):\n        return self.equ_repr\n    \n    def _repr_markdown_(self):\n        return self.md_repr\n\n    def __repr__(self):\n        return ""<DiffRHS({},{},{})>"".format(repr(self.rhs), self.equ_repr, self.md_repr)\n\ndef rhs_prettifier(equ_repr=None, md_repr=None):\n    def rhs_wrapper(rhs):\n        return DiffRHS(rhs, equ_repr, md_repr)\n    return rhs_wrapper\n\nclass OdeSystem(object):\n    """"""Ordinary Differential Equation class. Designed to be used with a system of ordinary differential equations.""""""\n    def __init__(self, equ_rhs, y0, t=(0, 1), dense_output=False, dt=1.0, rtol=1e-6, atol=1e-6, constants=dict()):\n        """"""Initialises the system to the parameters passed or to default values.\n\n        Parameters\n        ----------\n        equ_rhs : callable\n            Specifies the right hand side of the system.\n             The calling signature of equ_rhs should be:\n                 equ_rhs(t, y, **constants)\n             NOTE: To make the output prettier, you can decorate the rhs\n                   function with a @rhs_prettifier(""Equation representation"")\n                   call where ""Equation Representation"" is a text representation\n                   of your equation.\n        y0 : array-like or float\n            Specifies the initial state of the system.\n        t : tuple of floats, optional\n            A tuple of the form (initial time, final time) aka the integration limits.\n        dense_output : bool, optional\n            Set to True or False to specify whether or not a dense output for the solution\n            should be computed.\n        dt : float, optional\n            Sets the step-size for the integration, choose a value that is slightly less \n            than the highest frequency changes in value of the solutions to the equations.\n        rtol, atol : float, optional\n            Denotes the target relative and absolute errors respectively. \n            Only for adaptive methods.\n            NOTE: rtol and atol are used in the error computation as\n                      err_bound = atol + rtol * abs(y)\n                  in the same way as it is used in the scipy routines.\n        constants : dict, optional\n            Dict of keyword arguments passed to equ_rhs.\n        """"""\n\n        if len(t) != 2:\n            raise ValueError(""Two time bounds are required, only {} were given."".format(len(t)))\n        if not callable(equ_rhs):\n            raise TypeError(""equ_rhs is not callable, please pass a callable object for the right hand side."")\n            \n        if hasattr(equ_rhs, ""equ_repr""):\n            self.equ_rhs     = DiffRHS(equ_rhs.rhs, equ_rhs.equ_repr, equ_rhs.md_repr)\n        else:\n            self.equ_rhs     = DiffRHS(equ_rhs)\n            \n        self.__rtol      = rtol\n        self.__atol      = atol\n        self.__consts    = constants if constants is not None else dict()\n        self.__y         = [D.copy(y0)]\n        self.__t         = [D.to_float(t[0])]\n        self.dim         = D.shape(self.__y[0])\n        self.counter     = 0\n        self.__t0        = D.to_float(t[0])\n        self.__tf        = D.to_float(t[1])\n        self.__method    = integrators.RK45CKSolver\n        self.integrator  = None\n        self.__dt        = D.to_float(dt)\n        self.__dt0       = self.dt\n        \n        if D.backend() == \'torch\':\n            self.device = y0.device\n        else:\n            self.device = None\n            \n        self.staggered_mask = None\n        self.__dense_output = dense_output\n        self.int_status     = 0\n        self.success        = False\n        self.sol            = None\n            \n        self.__move_to_device()\n        self.__allocate_soln_space(10)\n        self.__fix_dt_dir(self.tf, self.t0)\n        self.__events       = []\n        self.initialise_integrator()\n        \n        if self.__dense_output:\n            self.sol = DenseOutput([self.t0], [])\n\n    @property\n    def events(self):\n        """"""A tuple of (time, state) tuples at which each event occurs.\n        \n        Examples\n        --------\n\n        >>> ode_system = desolver.OdeSystem(...)\n        >>> ode_system.integrate(events=[...])\n        >>> ode_system.events\n        (StateTuple(t=..., y=...), StateTuple(t=..., y=...), StateTuple(t=..., y=...), ...)\n        \n        """"""\n        if self.__events:\n            return tuple(self.__events)\n        else:\n            return\n    \n    @property\n    def y(self):\n        """"""The states at which the system has been evaluated.\n        """"""\n        if D.backend() == \'torch\':\n            return D.stack(self.__y[:self.counter + 1])\n        else:\n            return self.__y[:self.counter + 1]\n    \n    @property\n    def t(self):\n        """"""The times at which the system has been evaluated.\n        """"""\n        if D.backend() == \'torch\':\n            return D.stack(self.__t[:self.counter + 1])\n        else:\n            return self.__t[:self.counter + 1]\n    \n    @property\n    def nfev(self):\n        """"""The number of function evaluations used during the numerical integration\n        """"""\n        return self.equ_rhs.nfev\n\n    @property\n    def constants(self):\n        """"""A dictionary of constants for the differential system.\n        """"""\n        return self.__consts\n    \n    @constants.setter\n    def constants(self, new_constants):\n        """"""Sets the constants in the differential system\n        """"""\n        self.__consts = new_constants\n    \n    @constants.deleter\n    def constants(self):\n        self.__consts = dict()\n    \n    @property\n    def rtol(self):\n        """"""The relative tolerance of the adaptive integration schemes\n        """"""\n        return self.__rtol\n    \n    @rtol.setter\n    def rtol(self, new_rtol):\n        """"""Sets the target relative error used by the timestep autocalculator and the adaptive integration methods.\n        Has no effect when the integration method is non-adaptive.\n        """"""\n        self.__rtol = new_rtol\n        self.initialise_integrator()\n    \n    @property\n    def atol(self):\n        """"""The absolute tolerance of the adaptive integration schemes\n        """"""\n        return self.__atol\n    \n    @atol.setter\n    def atol(self, new_atol):\n        """"""Sets the target absolute error used by the timestep autocalculator and the adaptive integration methods.\n        Has no effect when the integration method is non-adaptive.\n        """"""\n        self.__atol = new_atol\n        self.initialise_integrator()\n    \n    @property\n    def dt(self):\n        """"""The timestep of the numerical integration\n        """"""\n        return self.__dt\n    \n    @dt.setter\n    def dt(self, new_dt):\n        self.__dt  = D.to_float(new_dt)\n#         self.__dt0 = self.dt\n        self.__move_to_device()\n        self.__fix_dt_dir(self.tf, self.t0)\n        return self.__dt\n    \n    @property\n    def t0(self):\n        """"""The initial integration time\n        """"""\n        return self.__t0\n    \n    @t0.setter\n    def t0(self, new_t0):\n        """"""Changes the initial time for the integration of the ODE system.\n\n        Parameters\n        ----------\n        new_t0 : float\n            Initial integration time.\n            \n        Raises\n        ------\n        ValueError\n            If the initial integration time is greater than the final time and the integration \n            has been run (successfully or unsuccessfully).\n        """"""\n        new_t0 = D.to_float(new_t0)\n        if D.abs(self.tf - new_t0) <= D.epsilon():\n            raise ValueError(""The start time of the integration cannot be greater than or equal to {}!"".format(self.tf))\n        self.__t0 = new_t0\n        self.__move_to_device()\n        self.__fix_dt_dir(self.tf, self.t0)\n    \n    @property\n    def tf(self):\n        """"""The final integration time\n        """"""\n        return self.__tf\n    \n    @tf.setter\n    def tf(self, new_tf):\n        """"""Changes the initial time for the integration of the ODE system.\n\n        Parameters\n        ----------\n        new_tf : float\n            Initial integration time.\n            \n        Raises\n        ------\n        ValueError\n            If the initial integration time is greater than the final time and the integration \n            has been run (successfully or unsuccessfully).\n        """"""\n        new_tf = D.to_float(new_tf)\n        if D.abs(self.t0 - new_tf) <= D.epsilon():\n            raise ValueError(""The end time of the integration cannot be equal to the start time: {}!"".format(self.t0))\n        self.__tf = new_tf\n        self.__move_to_device()\n        self.__fix_dt_dir(self.tf, self.t0)\n        \n    def __fix_dt_dir(self, t1, t0):\n        if D.sign(self.__dt) != D.sign(t1 - t0):\n            self.__dt      = -self.__dt\n        else:\n            self.__dt      =  self.__dt\n        \n    def __move_to_device(self):\n        if self.device is not None and D.backend() == \'torch\':\n            self.__y[0] = self.__y[0].to(self.device)\n            self.__t[0] = self.__t[0].to(self.device)\n            self.__t0   = self.__t0.to(self.device)\n            self.__tf   = self.__tf.to(self.device)\n            self.__dt   = self.__dt.to(self.device)\n            self.__dt0  = self.__dt0.to(self.device)\n            try:\n                self.__atol = self.__atol.to(self.device)\n            except AttributeError:\n                pass\n            except:\n                raise\n            try:\n                self.__rtol = self.__rtol.to(self.device)\n            except AttributeError:\n                pass\n            except:\n                raise\n            try:\n                self.equ_rhs.rhs = self.equ_rhs.rhs.to(self.device)\n            except AttributeError:\n                pass\n            except:\n                raise\n        return\n        \n    def __allocate_soln_space(self, num_units):\n        if num_units != 0:\n            if D.backend() in [\'numpy\', \'pyaudi\']:\n                self.__y  = D.concatenate([self.__y, D.zeros((num_units, ) + D.shape(self.__y[0]), dtype=self.__y[0].dtype)], axis=0)\n                self.__t  = D.concatenate([self.__t, D.zeros((num_units, ) + D.shape(self.__t[0]), dtype=self.__y[0].dtype)], axis=0)\n            else:\n                self.__y  = self.__y + [None for _ in range(num_units)]\n                self.__t  = self.__t + [None for _ in range(num_units)]\n    \n    def __trim_soln_space(self):\n        self.__y = self.__y[:self.counter+1]\n        self.__t = self.__t[:self.counter+1]\n        \n    def set_kick_vars(self, staggered_mask):\n        """"""Sets the variable mask for the symplectic integrators. \n\n        The conventional structure of a symplectic integrator is Kick-Drift-Kick\n        or Drift-Kick-Drift where Drift is when the Positions are updated and\n        Kick is when the Velocities are updated.\n\n        The default assumption is that the latter half of the variables are\n        to be updated in the Kick step and the former half in the Drift step.\n\n        Does nothing if integrator is not symplectic.\n        \n        Parameters\n        ----------\n        staggered_mask : array of bools\n            A boolean array with the same shape as y. Specifies the elements \n            of y that are to be updated as part of the Kick step.\n        """"""\n        self.staggered_mask = staggered_mask\n        self.initialise_integrator()\n\n    def get_current_time(self):\n        """"""Returns the current time of the ODE system""""""\n        return self.t[self.counter]\n\n    def initialise_integrator(self):\n        integrator_kwargs = dict(dtype=self.y[0].dtype, device=self.device)\n        \n        if self.method.__adaptive__:\n            integrator_kwargs[\'atol\'] = self.atol\n            integrator_kwargs[\'rtol\'] = self.rtol\n            \n        if self.method.__symplectic__:\n            integrator_kwargs[\'staggered_mask\'] = self.staggered_mask\n            \n        self.integrator = self.method(self.dim, **integrator_kwargs)\n        \n    def __get_integrator_mask(self, staggered_mask):\n        if staggered_mask is None and hasattr(self.integrator, ""staggered_mask""):\n            return self.integrator.staggered_mask\n        return staggered_mask\n    \n    @property\n    def method(self):\n        """"""The numerical integration scheme\n        """"""\n        return self.__method\n    \n    @method.setter\n    def method(self, new_method):\n        self.set_method(new_method, None)\n    \n    def set_method(self, new_method, staggered_mask=None):\n        """"""Sets the method of integration.\n\n        Parameters\n        ---------\n        new_method : str or stateful functor\n            A string that is the name of an integrator that is available in DESolver, OR a functor that \n            takes the current state, time, time step and equation, and advances the state by 1 timestep \n            adjusting the timestep as necessary. \n            \n        staggered_mask : boolean masking array\n            A boolean array with the same shape as the system state that indicates which variables are\n            updated during the \'kick\' stage of a symplectic integrator. Has no effect if the integrator\n            is adaptive.\n            \n        Raises\n        ------\n        ValueError\n            If the string is not a valid integration scheme.\n        """"""        \n        self.staggered_mask = self.__get_integrator_mask(staggered_mask)\n        if self.int_status == 1:\n            deutil.warning(""An integration was already run, the system will be reset"")\n            self.reset()\n        if new_method in integrators.available_methods():\n            self.__method = integrators.available_methods(False)[new_method]\n        elif issubclass(new_method, integrators.IntegratorTemplate):\n            if new_method not in map(lambda x:x[1], integrators.available_methods(False).items()):\n                deutil.warning(""This is not a method implemented as part of the DESolver package. Cannot guarantee results."")\n            self.__method = new_method\n        else:\n            raise ValueError(""The method you selected does not exist in the list of available methods, \\\n                              call desolver.available_methods() to see what these are"")\n        self.initialise_integrator()\n                \n    def get_step_interpolant(self):\n        ""Computes the 3rd order Hermite polynomial interpolant over one step.""\n        return CubicHermiteInterp(\n                    self.__t[self.counter-1], \n                    self.__t[self.counter], \n                    self.__y[self.counter-1], \n                    self.__y[self.counter],\n                    self.equ_rhs(self.__t[self.counter-1], self.__y[self.counter-1], **self.constants),\n                    self.equ_rhs(self.__t[self.counter], self.__y[self.counter], **self.constants)\n                )\n\n    def integration_status(self):\n        """"""Returns the integration status as a human-readable string.\n\n        Returns\n        -------\n        str\n            String containing the integration status message.\n        """"""\n        if self.int_status == 0:\n            return ""Integration has not been run.""\n        elif self.int_status == 1:\n            return ""Integration completed successfully.""\n        elif self.int_status == 2:\n            return ""Integration terminated upon finding a triggered event.""\n        elif self.int_status == -1:\n            return ""Recursion limit was reached during integration, ""+\\\n                   ""this can be caused by the adaptive integrator being unable ""+\\\n                   ""to find a suitable step size to achieve the rtol/atol ""+\\\n                   ""requirements.""\n        elif self.int_status == -2:\n            return ""A KeyboardInterrupt exception was raised during integration.""\n        elif self.int_status == -3:\n            return ""A generic exception was raised during integration.""\n\n    def reset(self):\n        """"""Resets the system to the initial time.""""""\n        self.counter      = 0\n        self.__trim_soln_space()\n        self.sol          = None\n        self.dt           = self.__dt0\n        self.equ_rhs.nfev = 0\n        self.__move_to_device()\n        self.int_status   = 0\n        if self.__dense_output:\n            self.sol = DenseOutput([self.t0], [])\n        if self.__events:\n            self.__events = []\n        self.initialise_integrator()\n\n    def integrate(self, t=None, callback=None, eta=False, events=None):\n        """"""Integrates the system to a specified time.\n\n        Parameters\n        ----------\n        t : float\n            If t is specified, then the system will be integrated to time t. Otherwise the system will \n            integrate to the specified final time. \n            NOTE: t can be negative in order to integrate backwards in time, but use this with caution as this functionality is slightly unstable.\n                  \n        callback : callable or list of callables\n            A callable object or list of callable objects that are invoked as callback(self) at each time step.\n            e.g. for logging integration to disk, saving data, manipulating the state of the system, etc.\n                  \n        eta : bool\n            Specifies whether or not the integration process should return an eta, current progress \n            and simple information regarding step-size and current time. Will be deprecated\n            in the future in favour of verbosity argument that prints once every n-steps.\n            NOTE: This may slow the integration process down as the process of outputting these values create overhead.\n                  \n        events : callable or list of callables\n            Events to track, defaults to None. Each function must have the signature ``event(t, y, **kwargs)``\n            and the solver will find the time t such that ``event(t, y, **kwargs) == 0``. The ``**kwargs`` argument\n            allows the solver to pass the system constants to the function.\n            Additionally, each event function can possess the following two attributes:\n            \n                direction: bool, optional\n                    Indicates the direction of the event crossing that will register an event.\n                is_terminal: bool, optional\n                    Indicates whether the detection of the event terminates the numerical integration.\n                  \n        Raises\n        ------\n        RecursionError : \n            Raised if an adaptive integrator recurses beyond the recursion limit when attempting to compute a forward step.\n            This usually means that the numerical integration did not converge and that the \n            behaviour of the system is highly unreliable. This could be due to numerical issues.\n            \n        """"""\n        if t:\n            tf = t\n        else:\n            tf = self.tf\n            \n        if D.abs(tf - self.t[-1]) < D.epsilon():\n            return\n        steps  = 0\n        \n        self.__fix_dt_dir(tf, self.t[-1])\n\n        if D.abs(self.dt) > D.abs(tf - self.t[-1]):\n            self.dt = D.abs(tf - self.t[-1])*0.5\n\n        total_steps = int((tf-self.t[-1])/self.dt)\n        \n        if eta:\n            tqdm_progress_bar = tqdm(total=9e9)\n            \n        try:\n            callback = list(callback)\n        except:\n            if callback is None:\n                callback = []\n            else:\n                callback = [callback]\n            \n        events, is_terminal, direction = prepare_events(events)\n            \n        end_int = False\n        self.equ_rhs.nfev = 0 if self.int_status == 1 else self.equ_rhs.nfev\n        cState  = D.zeros_like(self.__y[self.counter])\n        cTime   = D.zeros_like(self.__t[self.counter])\n        self.__allocate_soln_space(total_steps)\n        try:\n            while self.dt != 0 and D.abs(tf - self.__t[self.counter]) > 4 * D.epsilon() and not end_int:\n                if D.abs(self.dt + self.__t[self.counter]) > D.abs(tf):\n                    self.dt = (tf - self.__t[self.counter])\n                self.dt, (dTime, dState) = self.integrator(self.equ_rhs, self.__t[self.counter], self.__y[self.counter], self.constants, timestep=self.dt)\n                \n                if self.counter+1 >= len(self.__y):\n                    total_steps = int((tf-self.__t[self.counter]-dTime)/self.dt) + 1\n                    self.__allocate_soln_space(total_steps)\n\n                #\n                # Compensated Summation based on \n                # https://reference.wolfram.com/language/tutorial/NDSolveSPRK.html\n                #\n\n                dState = dState + cState\n                dTime  = dTime  + cTime\n\n                self.__y[self.counter+1] = self.__y[self.counter] + dState\n                self.__t[self.counter+1] = self.__t[self.counter] + dTime \n\n                cState = (self.__y[self.counter] - self.__y[self.counter+1]) + dState\n                cTime  = (self.__t[self.counter] - self.__t[self.counter+1]) + dTime\n\n                self.counter += 1\n\n                if events is not None or self.__dense_output:\n                    tsol = self.get_step_interpolant()\n\n                if events is not None:\n                    active_events, roots, end_int = handle_events(tsol, events, self.constants, direction, is_terminal)\n\n                    if self.counter+len(roots)+1 >= len(self.__y):\n                        total_steps = max(int(abs((tf-self.__t[self.counter]-dTime)/self.dt)), 2) + len(roots)\n                        self.__allocate_soln_space(total_steps)\n\n                    prev_time = self.__t[self.counter - 1]\n                    prev_y    = self.__y[self.counter - 1]\n                    self.counter -= 1\n\n                    for root in roots:\n                        if root != self.__t[self.counter]:\n                            self.__t[self.counter+1] = root\n                            self.__y[self.counter+1] = tsol(root)\n                            self.__events.append(StateTuple(t=self.__t[self.counter+1], y=self.__y[self.counter+1]))\n                            self.counter += 1\n\n                    if end_int:\n                        tsol            = self.get_step_interpolant()\n                        self.int_status = 2\n                        self.success    = True\n                    else:\n                        self.__t[self.counter+1] = prev_time + dTime\n                        self.__y[self.counter+1] = prev_y    + dState\n                        self.counter += 1\n\n                if self.__dense_output:\n                    self.sol.add_interpolant(self.__t[self.counter], tsol)\n\n                if eta:\n                    tqdm_progress_bar.total = tqdm_progress_bar.n + int(abs((tf - self.__t[self.counter]) / self.dt))\n                    tqdm_progress_bar.desc  = ""{:>10.2f} | {:.2f} | {:<10.2e}"".format(self.__t[self.counter], tf, self.dt).ljust(8)\n                    tqdm_progress_bar.update()\n\n                steps += 1\n\n                for i in callback:\n                    i(self)\n                    \n        except KeyboardInterrupt:\n            self.int_status = -2\n            raise\n        except RecursionError:\n            self.int_status = -1\n            raise\n        except:\n            self.int_status = -3\n            raise\n        finally:\n            self.success    = True\n            if self.int_status != 2:\n                self.int_status = 1\n            self.__trim_soln_space()\n            if eta:\n                tqdm_progress_bar.close()\n\n    def __repr__(self):\n        return ""\\n"".join([\n            """"""{:>10}: {:<128}"""""".format(""message"",   self.integration_status()),\n            """"""{:>10}: {:<128}"""""".format(""nfev"",      str(self.nfev)),\n            """"""{:>10}: {:<128}"""""".format(""sol"",       str(self.sol)),\n            """"""{:>10}: {:<128}"""""".format(""t0"",        str(self.t0)),\n            """"""{:>10}: {:<128}"""""".format(""tf"",        str(self.tf)),\n            """"""{:>10}: {:<128}"""""".format(""y0"",        str(self.y[0])),\n            """"""{:>10}: {}     """""".format(""Equations"", repr(self.equ_rhs)),\n            """"""{:>10}: {:<128}"""""".format(""t"",         str(self.t)),\n            """"""{:>10}: {:<128}"""""".format(""y"",         str(self.y)),\n        ])\n    \n    def _repr_markdown_(self):\n        return """"""```\n{:>10}: {:<128}  \n{:>10}: {:<128}  \n{:>10}: {:<128}  \n{:>10}: {:<128}  \n{:>10}: {:<128}  \n{:>10}: {:<128}  \n{:>10}: \n```  \n{}\n \n```  \n{:>10}: {:<128}  \n{:>10}: {:<128}  \n```\n"""""".format(\n            ""message"", self.integration_status(), \n            ""nfev"", str(self.nfev), \n            ""sol"", str(self.sol), \n            ""t0"", str(self.t0), \n            ""tf"", str(self.tf), \n            ""y0"", str(self.y[0]), \n            ""Equations"", self.equ_rhs._repr_markdown_(), \n            ""t"", str(self.t), \n            ""y"", str(self.y))\n\n    def __str__(self):\n        """"""Prints the equations, initial conditions, final states, time limits and defined constants in the system.""""""\n        print_str = ""y({t0}) = {init_val}\\ndy = {equation}\\ny({t}) = {cur_val}\\n""\n        print_str = print_str.format(init_val=self.y[0], \n                                     t0=self.t0,\n                                     equation=str(self.equ_rhs), \n                                     t=self.t[-1],\n                                     cur_val=self.y[-1])\n        if self.constants:\n            print_str += ""\\nThe constants that have been defined for this system are: ""\n            print_str += ""\\n"" + str(self.constants)\n        \n        print_str += ""The time limits for this system are:\\n""\n        print_str += ""t0 = {}, tf = {}, t_current = {}, step_size = {}"".format(self.t0, self.tf, self.t[-1], self.dt)\n        \n        return print_str\n    \n    def __getitem__(self, index):\n        if isinstance(index, int):\n            if index > self.counter:\n                raise IndexError(""index {} out of bounds for integrations with {} steps"".format(index, self.counter+1))\n            else:\n                return StateTuple(t=self.t[index], y=self.y[index])\n        elif isinstance(index, slice):\n            if index.start is not None:\n                start_idx = deutil.search_bisection(self.t[:self.counter+1], index.start)\n            else:\n                start_idx = 0\n            if index.stop is not None:\n                end_idx   = deutil.search_bisection(self.t[:self.counter+1], index.stop) + 1\n            else:\n                end_idx   = self.counter + 1\n            if index.step is not None:\n                step      = index.step\n            else:\n                step      = 1\n            return StateTuple(t=self.t[start_idx:end_idx:step], y=self.y[start_idx:end_idx:step])\n        else:\n            if self.__dense_output and self.sol is not None:\n                return StateTuple(t=index, y=self.sol(index))\n            else:\n                nearest_idx = deutil.search_bisection(self.__t, index)\n                return StateTuple(t=self.t[nearest_idx], y=self.y[nearest_idx])\n            \n    def __len__(self):\n        return self.counter + 1\n'"
docs/conf.py,0,"b'# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full\n# list see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport stanford_theme\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath(\'..\'))\n\nmaster_doc = \'index\'\n\n# -- Project information -----------------------------------------------------\n\nproject = \'desolver\'\ncopyright = \'2020, Ekin Ozturk\'\nauthor = \'Ekin Ozturk\'\n\n# The full version, including alpha/beta/rc tags\nrelease = \'3.1.0\'\n\n\n# -- General configuration ---------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    ""sphinx.ext.autosectionlabel"",\n    ""nbsphinx"",\n    ""sphinx.ext.napoleon"",\n    \'sphinx.ext.mathjax\',\n    \'sphinx.ext.githubpages\',\n    \'IPython.sphinxext.ipython_console_highlighting\',\n#     ""sphinx.ext.intersphinx"" \n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [\'_build\', \'Thumbs.db\', \'.DS_Store\', \'setup.py\', \'**/*backend*\', \'**/.ipynb_checkpoints/*\']\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\n# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get(\'READTHEDOCS\', None) == \'True\'\n\nif not on_rtd:  # only import and set the theme if we\'re building docs locally\n    import stanford_theme\n    html_theme = \'stanford_theme\'\n    html_theme_path = [stanford_theme.get_html_theme_path()]\n\n# otherwise, readthedocs.org uses their theme by default, so no need to specify it\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# intersphinx_mapping = {\'audi\': (""https://darioizzo.github.io/audi/"", None)}\n'"
desolver/backend/__init__.py,0,b'from .load_backend import *'
desolver/backend/common.py,2,"b'import numpy\n\n__all__ = [\n    \'e\',\n    \'euler_gamma\',\n    \'pi\',\n    \'set_backend\',\n    \'backend\',\n    \'epsilon\',\n    \'available_float_fmt\',\n    \'float_fmt\',\n    \'set_float_fmt\',\n    \'cast_to_float_fmt\',\n    \'float_fmts\'\n]\n\n_BACKEND      = \'numpy\'\n_FLOAT_FORMAT = \'float64\'\n\nfloat_fmts = dict()\n\n# Constants\ne           = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274\neuler_gamma = 0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495\npi          = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\n\ndef set_backend(backend):\n    """"""Method for setting the backend.\n\n    Returns\n    -------\n    str\n        The new backend as a string\n    """"""\n    global _BACKEND\n    \n    _BACKEND = str(backend)\n    \ndef backend():\n    """"""Method for determining the current backend.\n\n    Returns\n    -------\n    str\n        The current backend as a string\n\n    Examples\n    --------\n    ```python\n        >>> desolver.backend.backend()\n        \'numpy\'\n    ```\n    """"""\n    \n    return _BACKEND\n\ndef epsilon():\n    """"""Returns fuzz factor used in numeric expressions\n\n    Returns\n    -------\n    float\n        fuzz factor\n\n    Example\n    --------\n    ```python\n        >>> epsilon()\n        \'1e-07\'\n    ```\n    """"""\n    \n    if _FLOAT_FORMAT == \'float16\':\n        return 5e-3\n    elif _FLOAT_FORMAT == \'float32\':\n        return 5e-7\n    elif _FLOAT_FORMAT in [\'float64\', \'gdual_double\', \'gdual_vdouble\']:\n        return 5e-16\n    elif _FLOAT_FORMAT == \'gdual_real128\':\n        return 5e-16\n    \ndef available_float_fmt():\n    return sorted(float_fmts.keys())\n\ndef float_fmt():\n    """"""Returns float format as a string\n\n    Returns\n    -------\n    str\n        str denoting the currently used float format\n\n    See Also\n    --------\n    set_float_fmt: sets the float format\n\n    Example\n    --------\n    ```python\n        >>> float_format()\n        \'float64\'\n    ```\n    """"""\n    \n    return _FLOAT_FORMAT\n\ndef set_float_fmt(new_fmt):\n    """"""Sets the default float type\n\n    Parameters\n    ----------\n    new_fmt : str\n        New format for float type\n\n    Raises\n    ------\n    ValueError\n        When the float format is not one of the expected types or is incompatible with the backend\n\n    See Also\n    --------\n    float_fmt: returns current default float type\n\n    Examples\n    --------\n    ```python\n        >>> from desolver import backend as D\n        >>> D.float_format()\n        \'float64\'\n        >>> D.set_float_format(\'float16\')\n        >>> D.float_format()\n        \'float16\'\n    ```\n    """"""\n    \n    global _FLOAT_FORMAT\n    \n    if _BACKEND == \'numpy\':\n        if new_fmt not in available_float_fmt():\n            raise ValueError(""Unknown float type "" + str(new_fmt) + "" for backend "" + str(_BACKEND))\n    elif _BACKEND == \'torch\':\n        import torch\n        if new_fmt not in available_float_fmt():\n            raise ValueError(""Unknown float type "" + str(new_fmt) + "" for backend "" + str(_BACKEND))\n        elif new_fmt == \'float32\':\n            torch.set_default_dtype(torch.float32)\n        elif new_fmt == \'float64\':\n            torch.set_default_dtype(torch.float64)\n    \n    _FLOAT_FORMAT = str(new_fmt)\n\n\ndef cast_to_float_fmt(x):\n    """"""Cast a Numpy array to the default DESolver float type\n\n    Parameters\n    ----------\n    x : np.ndarray\n        Numpy array to be cast to DESolver float type\n\n    Returns\n    -------\n    np.ndarray\n        The same Numpy array cast to the same type as the DESolver float type\n\n    See Also\n    --------\n    float_fmt: returns the current default float type\n    set_float_fmt: sets the default float type\n\n    Examples\n    --------\n    ```python\n        >>> from desolver import backend as D\n        >>> D.float_fmt()\n        \'float64\'\n        >>> arr = numpy.array([8.0, -1.0], dtype=\'float32\')\n        >>> arr.dtype\n        dtype(\'float32\')\n        >>> new_arr = D.cast_to_float_fmt(arr)\n        >>> new_arr\n        array([ 8., -1.], dtype=float64)\n        >>> new_arr.dtype\n        dtype(\'float64\')\n    ```\n    """"""\n    \n    return numpy.asarray(x, dtype=float_fmt())\n'"
desolver/backend/load_backend.py,0,"b'import os\nimport sys\nimport numpy\n\nfrom .common import *\n\nif \'DES_BACKEND\' in os.environ:\n    set_backend(os.environ[\'DES_BACKEND\'])\n    assert(backend() == str(os.environ[\'DES_BACKEND\']))\n\nif backend() == \'numpy\':\n    from .numpy_backend import *\n    try:\n        from .pyaudi_backend import *\n        print(""PyAudi backend is available."", file=sys.stderr)\n    except:\n        pass\nelif backend() == \'torch\':\n    from .torch_backend import *\n    print(""Default dtype set to float32 due to use of torch backend"")\n    set_float_fmt(""float32"")\nelse:\n    raise ValueError(""Unable to import backend : "" + str(backend()))\n    \nprint(""Using "" + str(backend()) + "" backend"", file=sys.stderr)\n\ndef contract_first_ndims(a, b, n=1):\n    """"""Contracts the tensors a and b along the first n dimensions\n\n    Simple interface to contract two tensors, a and b, along their first n dimensions.\n    For example, for a (2,2,3,9) tensor and a (2,2,7) tensor, an n=1 contraction gives\n    a (2,3,9,7) tensor and an n=2 contraction gives a (3,9,7) tensor.\n\n    Parameters\n    ----------\n    a : array-type\n        First tensor to contract with\n    b : array-type\n        Second tensor to contract with\n    n : int\n        The first indices to contract along\n\n    Returns\n    -------\n    array-type\n        The resultant tensor\n\n    Raises\n    ------\n    ValueError\n        If `n>len(shape(a))` ie. the contraction requires more dimensions than there exists\n\n    See Also\n    --------\n    einsum: function used to write tensor operations via einstein notation\n\n    Examples\n    --------\n    ```python\n    >>> a = D.array([[0.0, 1.0],[1.0, 0.0]])\n    >>> b = D.array([[2.0, 1.0],[3.0, 5.0]])\n    >>> D.contract_first_ndims(a, b, n=1)\n    array([3., 1.])\n    >>> D.contract_first_ndims(a, b, n=2)\n    4.0\n    ```\n    """"""\n    if len(shape(a)) > len(shape(b)):\n        a,b = b,a\n    if n > len(shape(a)):\n        raise ValueError(""Cannot contract along more dims than there exists!"")\n    na = len(shape(a))\n    nb = len(shape(b))\n    einsum_str = ""{},{}->{}""\n    estr1      = """".join([chr(97 + i) for i in range(na)])\n    estr2      = """".join([chr(97 + i) for i in range(nb)])\n    estr3      = """".join([chr(97 + i + n) for i in range(nb - n)])\n    einsum_str = einsum_str.format(estr1, estr2, estr3)\n    return einsum(einsum_str, a, b)\n\ndel os, sys\n'"
desolver/backend/numpy_backend.py,0,"b'from .common import *\n\nimport numpy\nimport scipy\nimport scipy.special\n    \n\n# Datatypes\nbool    = numpy.bool\nfloat16 = numpy.float16\nfloat32 = numpy.float32\nfloat64 = numpy.float64\nuint8   = numpy.uint8\nint16   = numpy.int16\nint32   = numpy.int32\nint64   = numpy.int64\n\n\nfloat_fmts.update({\n    \'float16\': float16,\n    \'float32\': float32,\n    \'float64\': float64\n})\n\ndef asarray(x):\n    return array(x)\n\ndef to_float(x):\n    return numpy.asanyarray(x).astype(float64)\n\ndef to_type(x, dtype):\n    return numpy.asanyarray(x).astype(dtype)\n\n# Convenience Decorators\ndef type_reg(f):\n    def _wrapped(*args, **kwargs):\n        kwargs.setdefault(""dtype"", float_fmts[float_fmt()])\n        return f(*args, **kwargs)\n    _wrapped.original_function = f\n    return _wrapped\n\n# Fundamental Mathematical Operators\nneg      = numpy.negative\npow      = numpy.power\nabs      = numpy.abs\nsqrt     = numpy.sqrt\n\nexp      = numpy.exp\nexpm1    = numpy.expm1\nlog      = numpy.log\nlog10    = numpy.log10\nlog1p    = numpy.log1p\nlog2     = numpy.log2\n\nadd      = numpy.add\nsub      = numpy.subtract\ndiv      = numpy.divide\nmul      = numpy.multiply\n\nreciprocal = numpy.reciprocal\nremainder  = numpy.remainder\n\nceil     = numpy.ceil\nfloor    = numpy.floor\nround    = numpy.round\nfmod     = numpy.fmod\n    \nclip     = numpy.clip\nsign     = numpy.sign\ntrunc    = numpy.trunc\n\n# Trigonometric Functions\ncos      = numpy.cos\nsin      = numpy.sin\ntan      = numpy.tan\n\ncosh     = numpy.cosh\nsinh     = numpy.sinh\ntanh     = numpy.tanh \n\nacos     = numpy.arccos\nasin     = numpy.arcsin\natan     = numpy.arctan\natan2    = numpy.arctan2\n\n# Other Functions\ndigamma  = scipy.special.digamma\nerf      = scipy.special.erf\nerfc     = scipy.special.erfc\nerfinv   = scipy.special.erfinv\nsigmoid  = scipy.special.expit\n\ndef softplus(x, out=None):\n    return log(1 + exp(x), out=out)\n\n# Additional Definitions\ndef rsqrt(x, out=None):\n    return pow(x, -0.5, out=out)\n\ndef addcdiv(x, value=1, y1=None, y2=None, out=None):\n    if y1 is None or y2 is None:\n        raise ValueError(""y1 and y2 must both be specified"")\n    if out is None:\n        out = value * div(y1, y2)\n        out = x + out\n    else:\n        div(y1, y2, out=out)\n        mul(value, out, out=out)\n        add(x, out, out=out)\n    return out\n\ndef addcmul(x, value=1, y1=None, y2=None, out=None):\n    if y1 is None or y2 is None:\n        raise ValueError(""y1 and y2 must both be specified"")\n    if out is None:\n        out = value * mul(y1, y2)\n        out = x + out\n    else:\n        mul(y1, y2, out=out)\n        mul(value, out, out=out)\n        add(x, out, out=out)\n    return out\n\ndef frac(x, out=None):\n    if out is None:\n        return x - floor(x)\n    floor(x, out=out)\n    sub(x, out=out)\n    return out\n\ndef lerp(start, end, weight, out=None):\n    if out is None:\n        return start + weight * (end - start)\n    sub(end, start, out=out)\n    mul(weight, out, out=out)\n    add(start, out, out=out)\n    return out\n\ndef mvlgamma(x, p):\n    return scipy.special.multigammaln(x, d=p)\n\n# Common Array Operations\neinsum      = numpy.einsum\nconcatenate = numpy.concatenate\nappend      = numpy.append\nstack       = numpy.stack\nravel       = numpy.ravel\nflatten     = numpy.ravel\narange      = type_reg(numpy.arange)\nlogspace    = type_reg(numpy.logspace)\nlinspace    = type_reg(numpy.linspace)\neye         = type_reg(numpy.eye)\n\n# Reduction Ops\nargmax    = numpy.argmax\nargmin    = numpy.argmin\ncumprod   = numpy.cumprod\ncumsum    = numpy.cumsum\nlogsumexp = scipy.special.logsumexp\nmean      = numpy.mean\nmedian    = numpy.median\nprod      = numpy.prod\nstd       = numpy.std\nvar       = numpy.var\nsum       = numpy.sum\nnorm      = numpy.linalg.norm\n\ndef dist(x, y, ord=2):\n    return numpy.linalg.norm(x-y, ord=ord)\n\n# Comparison Ops\nallclose   = numpy.allclose\nargsort    = numpy.argsort\n\neq         = numpy.equal\nne         = numpy.not_equal\nge         = numpy.greater_equal\ngt         = numpy.greater\nle         = numpy.less_equal\nlt         = numpy.less\n\ndef equal(*args, **kwargs):\n    return numpy.all(eq(*args, **kwargs))\n\nisfinite   = numpy.isfinite\nisinf      = numpy.isinf\nisnan      = numpy.isnan\nmax        = numpy.max\nmin        = numpy.min\nany        = numpy.any\nall        = numpy.all\n\narray      = type_reg(numpy.array)\nzeros      = type_reg(numpy.zeros)\nempty      = type_reg(numpy.empty)\nfull       = type_reg(numpy.full)\nzeros_like = type_reg(numpy.zeros_like)\nones_like  = type_reg(numpy.ones_like)\nempty_like = type_reg(numpy.empty_like)\nfull_like  = type_reg(numpy.full_like)\n\ndef to_numpy(x):\n    return numpy.asarray(x)\n\ndef as_bool_array(x):\n    return numpy.asarray(x).astype(bool)\n\ndef copy(x):\n    return numpy.copy(x)\n\ndef reshape(x, new_dims):\n    return numpy.reshape(asarray(x), new_dims)\n\ndef shape(x):\n    return numpy.shape(x)\n\ndef logical_not(x, out=None, where=True):\n    return numpy.logical_not(x, out=out, where=where)\n\ndef logical_or(a, b, out=None, where=True):\n    return numpy.logical_or(a, b, out=out, where=where)\n\ndef logical_and(a, b, out=None, where=True):\n    return numpy.logical_and(a, b, out=out, where=where)\n\ndef logical_xor(a, b, out=None, where=True):\n    return numpy.logical_xor(a, b, out=out, where=where)\n\nnonzero = numpy.nonzero\nargsort = numpy.argsort'"
desolver/backend/pyaudi_backend.py,0,"b'import numpy\nimport pyaudi\nimport scipy\nimport scipy.special\n\nfrom .common import *\nfrom .numpy_backend import *\n\n# Datatypes\ngdual_double           = pyaudi.gdual_double\ngdual_vdouble          = pyaudi.gdual_vdouble\n\ndef __atan2_helper(x1, x2):\n    return atan(x1/x2) + (float(x2) < 0) * pi\n        \n# gdual_double Definitions\ntry:\n    gdual_double.__float__ = lambda self: self.constant_cf\n    # gdual_double.__int__  = lambda self: int(self.constant_cf)\n    gdual_double.__abs__   = pyaudi.abs\n    gdual_double.sqrt      = pyaudi.sqrt\n    gdual_double.exp       = pyaudi.exp\n    gdual_double.expm1     = lambda self: pyaudi.exp(self) - 1.0\n    gdual_double.log       = pyaudi.log\n    gdual_double.log10     = lambda self: pyaudi.log(self) / pyaudi.log(gdual_double(10.0))\n    gdual_double.log1p     = lambda self: pyaudi.log(self + 1.0)\n    gdual_double.log2      = lambda self: pyaudi.log(self) / pyaudi.log(gdual_double(2.0))\n    gdual_double.cos       = pyaudi.cos\n    gdual_double.sin       = pyaudi.sin\n    gdual_double.tan       = pyaudi.tan\n    gdual_double.cosh      = pyaudi.cosh\n    gdual_double.sinh      = pyaudi.sinh\n    gdual_double.tanh      = pyaudi.tanh\n    gdual_double.arccos    = pyaudi.acos\n    gdual_double.arcsin    = pyaudi.asin\n    gdual_double.arctan    = pyaudi.atan\n    gdual_double.arctan2   = lambda self, x2: pyaudi.__atan2_helper(self, x2)\n    gdual_double.erf       = pyaudi.erf\n    gdual_double.erfc      = lambda self: 1.0 - pyaudi.erf(self)\n\n    float_fmts.update({\n        \'gdual_double\':  gdual_double,\n    })\nexcept Exception as e:\n    print(""Unable to load pyaudi.gdual_double"", file=sys.stderr)\n    print(""\\t\\tError raised is:"", file=sys.stderr)\n    print(e, file=sys.stderr)\n    pass\n\n# gdual_vdouble Definitions\ntry:\n    gdual_vdouble.__float__ = lambda self: self.constant_cf\n    # gdual_vdouble.__int__ = lambda self: int(self.constant_cf)\n    gdual_vdouble.__abs__   = pyaudi.abs\n    gdual_vdouble.sqrt      = pyaudi.sqrt\n    gdual_vdouble.exp       = pyaudi.exp\n    gdual_vdouble.expm1     = lambda self: pyaudi.exp(self) - 1.0\n    gdual_vdouble.log       = pyaudi.log\n    gdual_vdouble.log10     = lambda self: pyaudi.log(self) / pyaudi.log(gdual_vdouble(10.0))\n    gdual_vdouble.log1p     = lambda self: pyaudi.log(self + 1.0)\n    gdual_vdouble.log2      = lambda self: pyaudi.log(self) / pyaudi.log(gdual_vdouble(2.0))\n    gdual_vdouble.cos       = pyaudi.cos\n    gdual_vdouble.sin       = pyaudi.sin\n    gdual_vdouble.tan       = pyaudi.tan\n    gdual_vdouble.cosh      = pyaudi.cosh\n    gdual_vdouble.sinh      = pyaudi.sinh\n    gdual_vdouble.tanh      = pyaudi.tanh\n    gdual_vdouble.arccos    = pyaudi.acos\n    gdual_vdouble.arcsin    = pyaudi.asin\n    gdual_vdouble.arctan    = pyaudi.atan\n    gdual_vdouble.arctan2   = lambda self, x2: pyaudi.__atan2_helper(self, x2)\n    gdual_vdouble.erf       = pyaudi.erf\n    gdual_vdouble.erfc      = lambda self: 1.0 - pyaudi.erf(self)\n\n    float_fmts.update({\n        \'gdual_vdouble\':  gdual_vdouble,\n    })\nexcept Exception as e:\n    print(""Unable to load pyaudi.gdual_vdouble"", file=sys.stderr)\n    print(""\\t\\tError raised is:"", file=sys.stderr)\n    print(e, file=sys.stderr)\n    pass\n\n\ndef to_float(x):\n    if isinstance(numpy.atleast_1d(numpy.asanyarray(x))[0], gdual_vdouble):\n        if numpy.asanyarray(x).ndim > 0:\n            return numpy.stack([i.constant_cf for i in numpy.asanyarray(x)]).astype(float64)\n        else:\n            return numpy.array(numpy.asanyarray(x).item().constant_cf).astype(float64)\n    else:\n        return numpy.asanyarray(x).astype(float64)\n\n\ndef sign(x1, *args, **kwargs):\n    if asarray(x1).dtype == object:\n        return numpy.sign(asarray(x1).astype(float64), *args, **kwargs)\n    else:\n        return numpy.sign(asarray(x1), *args, **kwargs)\n\ndef sigmoid(x1, *args, **kwargs):\n    return 1/(1 + exp(-x1))\n\n# Reduction Ops\ndef logsumexp(x1, *args, **kwargs):\n    if x1.dtype == object:\n        return log(sum(exp(x1)))\n    else:\n        return scipy.special.logsumexp(x1, *args, **kwargs)\n\n\n# gdual_real128 Definitions\ntry:\n    gdual_real128             = pyaudi.gdual_real128\n    gdual_real128.__float__   = lambda self: float(repr(self.constant_cf))\n#    gdual_real128.__int__     = lambda self: int(float(repr(self.constant_cf)))\n    gdual_real128.__abs__     = pyaudi.abs\n    gdual_real128.sqrt        = pyaudi.sqrt\n    gdual_real128.exp         = pyaudi.exp\n    gdual_real128.expm1       = lambda self: pyaudi.exp(self) - 1.0\n    gdual_real128.log         = pyaudi.log\n    gdual_real128.log10       = lambda self: pyaudi.log(self) / pyaudi.log(gdual_real128(10.0))\n    gdual_real128.log1p       = lambda self: pyaudi.log(self + 1.0)\n    gdual_real128.log2        = lambda self: pyaudi.log(self) / pyaudi.log(gdual_real128(2.0))\n    gdual_real128.cos         = pyaudi.cos\n    gdual_real128.sin         = pyaudi.sin\n    gdual_real128.tan         = pyaudi.tan\n    gdual_real128.cosh        = pyaudi.cosh\n    gdual_real128.sinh        = pyaudi.sinh\n    gdual_real128.tanh        = pyaudi.tanh\n    gdual_real128.arccos      = pyaudi.acos\n    gdual_real128.arcsin      = pyaudi.asin\n    gdual_real128.arctan      = pyaudi.atan\n    gdual_real128.arctan2     = lambda self, x2: pyaudi.__atan2_helper(self, x2)\n    gdual_real128.erf         = pyaudi.erf\n    gdual_real128.erfc        = lambda self: 1.0 - pyaudi.erf(self)\n    \n    float_fmts.update({\n        \'gdual_real128\':  gdual_real128,\n    })\nexcept AttributeError:\n    pass\nexcept Exception as e:\n    print(""Unable to load pyaudi.gdual_real128"", file=sys.stderr)\n    print(""\\t\\tError raised is:"", file=sys.stderr)\n    print(e, file=sys.stderr)\n    pass'"
desolver/backend/torch_backend.py,0,"b'from .common import *\n\nimport torch\n\n# Datatypes\nbool    = torch.bool\nfloat32 = torch.float32\nfloat64 = torch.float64\nuint8   = torch.uint8\nint16   = torch.int16\nint32   = torch.int32\nint64   = torch.int64\n\nfloat_fmts.update({\n    \'float32\': \'float32\',\n    \'float64\': \'float64\'\n})\n\ndef to_float(x):\n    if not torch.is_tensor(x):\n        return torch.tensor(x, dtype=torch.get_default_dtype())\n    return x.to(torch.get_default_dtype())\n\ndef to_type(x, dtype):\n    if not torch.is_tensor(x):\n        return torch.tensor(x, dtype=dtype)\n    return x.to(dtype)\n\n# Convenience Decorators\ndef type_reg(f):\n    def _wrapped(*args, **kwargs):\n        kwargs.setdefault(""dtype"", torch.get_default_dtype())\n        return f(*args, **kwargs)\n    _wrapped.original_function = f\n    return _wrapped\n\ndef axis_reg(f):\n    def _wrapped(x, axis=None, *args, **kwargs):\n        if axis is None:\n            return f(x.view(-1), dim=0, *args, **kwargs)\n        return f(x, dim=axis, *args, **kwargs)\n    _wrapped.original_function = f\n    return _wrapped\n\ndef keepdim_reg(f):\n    def _wrapped(x, keepdims=False, *args, **kwargs):\n        return f(x, keepdim=keepdims, *args, **kwargs)\n    _wrapped.original_function = f\n    return _wrapped\n\n# Fundamental Mathematical Operators\nneg      = torch.neg\npow      = torch.pow\nabs      = torch.abs\nsqrt     = torch.sqrt\nrsqrt    = torch.rsqrt\n\nexp      = torch.exp\nexpm1    = torch.expm1\nlog      = torch.log\nlog10    = torch.log10\nlog1p    = torch.log1p\nlog2     = torch.log2\n\nadd      = torch.add\nmul      = torch.mul\ndiv      = torch.div\n\naddcdiv  = torch.addcdiv\naddcmul  = torch.addcmul\nreciprocal = torch.reciprocal\nremainder  = torch.remainder\n\nceil     = torch.ceil\nfloor    = torch.floor\nround    = torch.round\nfmod     = torch.fmod\nfrac     = torch.frac\nlerp     = torch.lerp\nclip     = torch.clamp\nsign     = torch.sign\ntrunc    = torch.trunc\n\n# Trigonometric Functions\ncos      = torch.cos\nsin      = torch.sin\ntan      = torch.tan\n\ncosh     = torch.cosh\nsinh     = torch.sinh\ntanh     = torch.tanh \n\nacos     = torch.acos\nasin     = torch.asin\natan     = torch.atan\natan2    = torch.atan2\n\n# Other Functions\ndigamma  = torch.digamma\nmvlgamma = torch.mvlgamma\nerf      = torch.erf\nerfc     = torch.erfc\nerfinv   = torch.erfinv\nsigmoid  = torch.sigmoid\n\ndef softplus(x, out=None):\n    if out is not None:\n        out.data = log(1 + exp(x))\n        return out\n    else:\n        return log(1 + exp(x))\n\n# Additional Math Definitions\ndef square(x, out=None):\n    if out is not None:\n        out.data = x**2\n        return out\n    else:\n        return x**2\n\ndef sub(x, y, out=None):\n    if out is None:\n        return x - y\n    neg(y, out=out)\n    return add(x, out, out=out)\n\n# Common Array Operations\neinsum      = torch.einsum\narange      = type_reg(torch.arange)\n\ndef concatenate(arrs, axis=0, out=None):\n    if axis is None:\n        return torch.cat([i.view(-1) for i in arrs], dim=0, out=out)\n    return torch.cat(arrs, dim=axis, out=out)\n\ndef ravel(x):\n    return asarray(x).flatten()\n\ndef flatten(x):\n    return ravel(x)\n\ndef append(arr, values, axis=None):\n    arr = asarray(arr)\n    if axis is None:\n        if arr.dim() != 1:\n            arr = ravel(arr)\n        values = ravel(values)\n        axis = arr.dim()-1\n    return concatenate((arr, values), axis=axis)\n\ndef stack(arrs, axis=0, out=None):\n    return torch.stack(arrs, dim=axis, out=out)\n\n@type_reg\ndef linspace(start, end, num=100, out=None, dtype=None):\n    return torch.linspace(start, end, steps=num, dtype=dtype, out=out)\n\n@type_reg\ndef logspace(start, end, num=100, out=None, dtype=None):\n    return torch.logspace(start, end, steps=num, dtype=dtype, out=out)\n\n@type_reg\ndef eye(N, M=None, out=None, dtype=None):\n    if out is None:\n        if M is None:\n            return torch.eye(N, dtype=dtype)\n        else:\n            return torch.eye(N, m=M, dtype=dtype)\n    else:\n        if M is None:\n            out.data = torch.eye(N, dtype=dtype)\n        else:\n            out.data = torch.eye(N, m=M, dtype=dtype)        \n    return out\n\n# Reduction Ops\nargmax    = keepdim_reg(axis_reg(torch.argmax))\nargmin    = keepdim_reg(axis_reg(torch.argmin))\ncumprod   = keepdim_reg(axis_reg(torch.cumprod))\ncumsum    = keepdim_reg(axis_reg(torch.cumsum))\nlogsumexp = keepdim_reg(axis_reg(torch.logsumexp))\nmean      = keepdim_reg(axis_reg(torch.mean))\nmedian    = keepdim_reg(axis_reg(torch.median))\nprod      = keepdim_reg(axis_reg(torch.prod))\nstd       = keepdim_reg(axis_reg(torch.std))\nvar       = keepdim_reg(axis_reg(torch.var))\nsum       = keepdim_reg(axis_reg(torch.sum))\n\ndef norm(x, ord=\'fro\', axis=None, keepdims=False):\n    return torch.norm(x, p=ord, dim=axis, keepdim=keepdims)\n\ndef dist(x, y, ord=2):\n    return torch.dist(x, y, p=ord)\n\n# Comparison Ops\nallclose   = torch.allclose\nargsort    = axis_reg(torch.argsort)\n\neq         = torch.eq\nne         = torch.ne\nge         = torch.ge\ngt         = torch.gt\nle         = torch.le\nlt         = torch.lt\n\nequal      = torch.equal\nisfinite   = torch.isfinite\nisinf      = torch.isinf\nisnan      = torch.isnan\n\ndef max(x, axis=None, keepdims=False, out=None):\n    if axis is None:\n        return torch.max(x.view(-1), dim=0, keepdim=keepdims, out=out)[0]\n    return torch.max(x, dim=axis, keepdim=keepdims, out=out)[0]\n\ndef min(x, axis=None, keepdims=False, out=None):\n    if axis is None:\n        return torch.min(x.view(-1), dim=0, keepdim=keepdims, out=out)[0]\n    return torch.min(x, dim=axis, keepdim=keepdims, out=out)[0]\nany        = torch.any\nall        = torch.all\n\narray      = type_reg(torch.tensor)\nzeros      = type_reg(torch.zeros)\nempty      = type_reg(torch.empty)\nfull       = type_reg(torch.full)\nzeros_like = type_reg(torch.zeros_like)\nones_like  = type_reg(torch.ones_like)\nempty_like = type_reg(torch.empty_like)\nfull_like  = type_reg(torch.full_like)\n\ndef asarray(x):\n    if not torch.is_tensor(x):\n        return array(x)\n    return x\n\ndef to_numpy(x):\n    if isinstance(x, (list, tuple)):\n        return stack(x).detach().cpu().numpy()\n    return x.clone().detach().cpu().numpy()\n\ndef as_bool_array(x):\n    return x.to(bool)\n\ndef copy(x):\n    return x.clone()\n\ndef reshape(x, new_dims):\n    return torch.reshape(x, new_dims)\n\ndef shape(x):\n    if hasattr(x, \'shape\'):\n        return x.shape\n    else:\n        return shape(asarray(x))\n\ndef logical_not(a, out=None, where=None):\n    if where is None:\n        if a.is_cuda:\n            out = 1 - a\n        else:\n            out = (1 - a.to(torch.uint8)).to(torch.bool)\n    else:\n        if out is None:\n            out = a.clone()\n        if a.is_cuda:\n            out[where] = 1 - out[where]\n        else:\n            out[where] = (1 - out[where].to(torch.uint8)).to(torch.bool)\n    return out\n\ndef logical_or(a, b, out=None, where=None):\n    if where is None:\n        out = a | b\n    else:\n        if out is None:\n            out = a.clone()\n        out[where] = a[where] | b[where]\n    return out\n\ndef logical_and(a, b, out=None, where=None):\n    if where is None:\n        out = a & b\n    else:\n        if out is None:\n            out = a.clone()\n        out[where] = a[where] & b[where]\n    return out\n\ndef logical_xor(a, b, out=None, where=None):\n    if where is None:\n        out = a ^ b\n    else:\n        if out is None:\n            out = a.clone()\n        out[where] = a[where] ^ b[where]\n    return out\n\ndef nonzero(a):\n    if len(shape(a)) == 0:\n        return (torch.nonzero(a.reshape(-1)), )\n    else:\n        return (torch.nonzero(a),)\n\nargsort = torch.argsort\n\ndef jacobian(out_tensor, in_tensor, batch_mode=False, nu=1, create_graph=True):\n    """"""Computes the derivative of an output tensor wrt an input tensor.\n\n    Computes the full nu-th order derivative for the output tensor wrt an input tensor. \n    For nu = 1, this is the Jacobian, for nu = 2, this is the Hessian, etc.\n    The computation scales with the number of output values, ie. out_tensor.numel(), thus it will\n    become quite slow for very large tensors.\n    \n    The batched computation assumes that the first dimension is the batch dimension and computes the \n    derivative for all the batch elements. The batches are computed in parallel thus for reasonable batch\n    sizes the computation should scale as out_tensor.numel() / out_tensor.shape[0].\n\n    Parameters\n    ----------\n    out_tensor : torch.tensor\n        The function whose derivative is to be computed\n    in_tensor  : torch.tensor\n        The input wrt which the derivative is to be computed\n    batch_mode : bool\n        Determines if the first dimension is to be treated as a batch dimension or not\n    nu : int\n        Order of the derivative to be computed\n    create_graph : bool\n        To keep the computational graph after the jacobian is computed. This is useful if you intend to\n        compute further derivatives on the derivative, e.g. for gradient descent.\n\n    Returns\n    -------\n    torch.tensor\n        The derivative tensor of out_tensor wrt in_tensor\n\n    Raises\n    ------\n    ValueError\n        If nu < 0 as that is not a valid derivative order.\n\n    See Also\n    --------\n    torch.autograd.grad : The base function through which gradients are computed\n\n    Examples\n    --------\n    ```python\n    >>> b   = torch.tensor( [0.0, 1.0], dtype=torch.float64, requires_grad=True)\n    >>> mat = torch.tensor([[0.0, 1.0], [-5.0, 0.0]], dtype=torch.float64, requires_grad=True)\n    >>> k   = mat@b\n    >>> jacobian(k, b, nu=1)\n    tensor([[ 0.,  1.],\n            [-5.,  0.]], dtype=torch.float64)\n    >>> jacobian(k, mat, nu=1)\n    tensor([[[0., 1.],\n             [0., 0.]],\n\n            [[0., 0.],\n             [0., 1.]]], dtype=torch.float64, grad_fn=<AsStridedBackward>)\n    ```\n    """"""\n    if nu < 0:\n        raise ValueError(""nu cannot be less than zero! That\'s not a derivative..."")\n    if nu == 0:\n        return out_tensor\n    if out_tensor.requires_grad == False:\n        if batch_mode:\n            temp = torch.zeros(out_tensor.shape + in_tensor.shape[1:], dtype=in_tensor.dtype, device=in_tensor.device, requires_grad=False)\n        else:\n            temp = torch.zeros(out_tensor.shape + in_tensor.shape, dtype=in_tensor.dtype, device=in_tensor.device, requires_grad=False)\n    else:\n        if batch_mode:\n            outputs_view = out_tensor.view(out_tensor.shape[0], -1)\n            batch_one    = torch.ones_like(outputs_view[:, 0])\n            temp = [\n                torch.autograd.grad(\n                    outputs_view[:, j], \n                    in_tensor,\n                    grad_outputs=batch_one,\n                    allow_unused=True,\n                    retain_graph=True,\n                    create_graph=create_graph if nu==1 else True\n                )[0] for j in range(outputs_view.shape[1])]\n            final_shape = out_tensor.shape + in_tensor.shape[1:]\n        else:\n            outputs_view = out_tensor.view(-1)\n            temp = [torch.autograd.grad(\n                outputs_view[i], \n                in_tensor,\n                allow_unused=True,\n                retain_graph=True,\n                create_graph=create_graph if nu==1 else True,\n            )[0] for i in range(outputs_view.shape[0])]\n            final_shape = out_tensor.shape + in_tensor.shape\n        temp = torch.stack([\n            i if i is not None else torch.zeros_like(in_tensor) for i in temp\n        ])\n        temp = temp.view(final_shape)\n    if nu > 1:\n        temp = jacobian(temp, in_tensor, create_graph=create_graph, nu=nu-1, batch_mode=batch_mode)\n    return temp'"
desolver/exception_types/__init__.py,0,b'from .exception_types import *\n'
desolver/exception_types/exception_types.py,0,"b'class RecursionError(Exception):\n    def __init__(self, *args, **kwargs):\n        Exception.__init__(self, *args, **kwargs)\n\nclass FailedIntegrationError(Exception):\n    def __init__(self, *args, **kwargs):\n        Exception.__init__(self, *args, **kwargs)\n        \n__all__ = [""RecursionError"", ""FailedIntegrationError""]\n'"
desolver/integrators/__init__.py,0,"b'from .integrator_template import *\nfrom .integrator_types import *\nfrom .integration_schemes import *\n\n__available_methods = dict()\n\n__integration_methods__ = [\n    RK1412Solver,\n    RK108Solver,\n    RK8713MSolver,\n    RK45CKSolver,\n    RK5Solver,\n    RK4Solver,\n    MidpointSolver,\n    HeunsSolver,\n    EulerSolver,\n    EulerTrapSolver,\n    HeunEulerSolver,\n    SymplecticEulerSolver,\n    BABs9o7HSolver,\n    ABAs5o6HSolver\n]\n\n__available_methods.update(dict(\n    [(func.__name__, func) for func in __integration_methods__ if hasattr(func, ""__alt_names__"")] +\n    [(alt_name, func)      for func in __integration_methods__ if hasattr(func, ""__alt_names__"") for alt_name in func.__alt_names__]))\n\ndef available_methods(names=True):\n    if names:\n        return sorted(set(__available_methods.keys()))\n    else:\n        return __available_methods\n'"
desolver/integrators/integration_schemes.py,0,"b'import numpy\n\nfrom .integrator_types import ExplicitRungeKuttaIntegrator, ExplicitSymplecticIntegrator\nfrom .. import backend as D\n\n__all__ = [\n    \'RK1412Solver\',\n    \'RK108Solver\',\n    \'RK8713MSolver\',\n    \'RK45CKSolver\',\n    \'RK5Solver\',\n    \'RK4Solver\',\n    \'MidpointSolver\',\n    \'HeunsSolver\',\n    \'EulerSolver\',\n    \'EulerTrapSolver\',\n    \'HeunEulerSolver\',\n    \'SymplecticEulerSolver\',\n    \'BABs9o7HSolver\',\n    \'ABAs5o6HSolver\'\n]\n\nclass RK1412Solver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the Adaptive Runge-Kutta 14(12) method using\n    the coefficients defined by Feagin.\n    \n    References\n    ----------\n    [1] Feagin, Terry. ""HIGH-ORDER EXPLICIT RUNGE-KUTTA METHODS USING W-SYMMETRY."" Neural, Parallel & Scientific Computations 20, no. 3-4 (2012): 437-458.\n    """"""\n    \n    order = 14.0\n    \n    __alt_names__ = (""Explicit RK1412"", ""RK1412"", ""Runge-Kutta 14(12)"", ""RK1412Feag"")\n    __adaptive__  = True\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0.,                                     0.,                                         0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [11111111111111111./100000000000000000., 11111111111111111./100000000000000000.,     0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [13888888888888889./25000000000000000.,  -83333333333333333./100000000000000000.,    138888888888888889./100000000000000000., 0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [83333333333333333./100000000000000000., 20833333333333333./100000000000000000.,     0.,                                      5./8.,                                  0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [33333333333333333./100000000000000000., 19333333333333333./100000000000000000.,     0.,                                      11./50.,                                -2./25.,                              0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [1./1.,                                  1./10.,                                     0.,                                      0.,                                     2./5.,                                1./2.,                                 0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [16749674481819323./25000000000000000.,  5174228081833989./50000000000000000.,       0.,                                      0.,                                     6103444365320361./50000000000000000., 24128724516562331./50000000000000000., -381409600015607./10000000000000000.,  0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [7426709605345459./25000000000000000.,   12438052665409441./100000000000000000.,     0.,                                      0.,                                     0.,                                   2261202821975843./10000000000000000.,  1378858876180809./100000000000000000., -1680525334991711./25000000000000000.,  0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [72727272727272727./100000000000000000., 4684595328298369./50000000000000000.,       0.,                                      0.,                                     0.,                                   0.,                                    -613406843450511./100000000000000000., 10800991281275153./50000000000000000.,  21184753175788097./50000000000000000.,  0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [14015279904218877./100000000000000000., 8384798124090527./100000000000000000.,      0.,                                      0.,                                     0.,                                   0.,                                    -589746835504869./50000000000000000.,  -4945980411376253./20000000000000000.,  978080858367729./10000000000000000.,    21759068924342063./100000000000000000.,  0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [35035051988507537./50000000000000000.,  3076276798847141./50000000000000000.,       0.,                                      0.,                                     0.,                                   0.,                                    592232780324503./100000000000000000.,  47032615996384111./100000000000000000., 299688863848679./1000000000000000.,     -24765687759399491./100000000000000000., 1386187872142971./12500000000000000.,    0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [9090909090909091./25000000000000000.,   2098500366813913./50000000000000000.,       0.,                                      0.,                                     0.,                                   0.,                                    -63597539253241./20000000000000000.,   10079971436327401./12500000000000000.,  975983126412389./10000000000000000.,    77857557815839891./100000000000000000.,  20489042383159943./100000000000000000.,  -39065394906867047./25000000000000000.,   0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [26315789473684211./100000000000000000., 2188633911168651./50000000000000000.,       0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     124873005504039./20000000000000000.,     20004309710957731./100000000000000000.,  -805328367804983./100000000000000000.,    423035056134793./20000000000000000.,    0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [3921722466502709./100000000000000000.,  1417496251817573./50000000000000000.,       0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     249163204855817./100000000000000000.,    2301387878545931./100000000000000000.,   -322155956692977./100000000000000000.,    197688509889533./20000000000000000.,    -1065053856644437./50000000000000000.,      0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [20322937573209419./25000000000000000.,  343511894290243./1000000000000000.,         0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     21045191202362739./100000000000000000.,  25856863014307603./25000000000000000.,   300151822932211./50000000000000000.,      42796906254980977./50000000000000000.,  -97723500503676681./100000000000000000.,    -66002698047929469./100000000000000000.,    0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [16666666666666667./100000000000000000., -1435740016721681./100000000000000000.,     0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     -4578165875613./125000000000000.,        3502549756362137./100000000000000000.,   721892032724227./20000000000000000.,      -2652199675536811./100000000000000000., 4456990113056981./100000000000000000.,      777144333320989./6250000000000000.,         413829693239481./100000000000000000.,     0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [9./10.,                                 35603240442512029./100000000000000000.,     0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     -2250963794737813./5000000000000000.,    4305279070837109./10000000000000000.,    3199831431318889./6250000000000000.,      45415181944320213./50000000000000000.,  -30980273342983483./25000000000000000.,     -64904866167176147./100000000000000000.,    25170890458681929./100000000000000000.,   974883087931983./1250000000000000.,        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [6412992574519669./100000000000000000.,  1309356874065131./100000000000000000.,      0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     -9320530679851./100000000000000000.,        2526871671311497./50000000000000000.,       40223517097./50000000000000000.,          59172602949417./100000000000000000.,       -8032294443./20000000000000000.,         0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [4082998185668577./20000000000000000.,   207926484466053./10000000000000000.,        0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     58269591880009./100000000000000000.,        -25053147886213./3125000000000000.,         403847643847./100000000000000000.,        8546099980555061./100000000000000000.,     -25560810117./12500000000000000.,        10532857882443189./100000000000000000.,    0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [39535039104876057./100000000000000000., 140153449795736021./100000000000000000.,    0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     -11512600049211063./50000000000000000.,     -360553420233456453./50000000000000000.,    93225390173709./25000000000000000.,       -471415495727125021./100000000000000000.,  -176367657545349./100000000000000000.,   382065274019349383./50000000000000000.,    70120408731950367./20000000000000000.,    0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [60464960895123943./100000000000000000., 298786626735301717./25000000000000000.,     0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     779480932108175969./100000000000000000.,    -225800557546930317./4000000000000000.,     9123763069306449./100000000000000000.,    -636681399627174431./50000000000000000.,   -3968959219047197./100000000000000000.,  544392141883570887./10000000000000000.,    -364411637921569237./100000000000000000., -80450324991050991./100000000000000000., 0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [15917001814331423./20000000000000000.,  -14880942650710048843./100000000000000000., 0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     -2293238195728141211./25000000000000000.,   70765614497159835983./100000000000000000.,  -110563611857482441./100000000000000000., 17613459188381137259./100000000000000000., 24569241210744033./50000000000000000.,   -17106950011245373609./25000000000000000., 279910604998398259./10000000000000000.,   659698550151411667./50000000000000000.,  25025756256796089./20000000000000000.,   0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [93587007425480331./100000000000000000., -241826986737049191./25000000000000000.,    0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     -446990150858505531./100000000000000000.,   227563564345476341./5000000000000000.,      -7130850861838269./100000000000000000.,   140342017585515927./12500000000000000.,    394513677242571./3125000000000000.,      -272149587218427071./6250000000000000.,    39358715377152949./50000000000000000.,    26613234837234211./50000000000000000.,   42242273399632533./100000000000000000.,  8591312495030671./100000000000000000.,   0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [16666666666666667./100000000000000000., -62915020279409189./6250000000000000.,      0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     -4578165875613./125000000000000.,        3502549756362137./100000000000000000.,   721892032724227./20000000000000000.,      -2652199675536811./100000000000000000., -39193060761341509./6250000000000000.,      4820792374425629891./100000000000000000.,   -868089611420207./12500000000000000.,     1268106902048502957./100000000000000000.,  598355844841619./50000000000000000.,     -58406220624060301./1250000000000000.,     133029613326626711./100000000000000000.,  50383393751699149./50000000000000000.,   2095120519336651./100000000000000000.,   1050673531656321./50000000000000000.,    476098007208561./50000000000000000.,   0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [20322937573209419./25000000000000000.,  -40947808167774370877./100000000000000000., 0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     21045191202362739./100000000000000000.,  25856863014307603./25000000000000000.,   300151822932211./50000000000000000.,      42796906254980977./50000000000000000.,  -25051699854744786049./100000000000000000., 97321233326194213883./50000000000000000.,   -152251941051155183./50000000000000000.,  6132829744103521419./12500000000000000.,   156647589531270907./100000000000000000., -94098714497005586681./50000000000000000., 7525922247248471753./100000000000000000., 864335892450827669./25000000000000000.,  321147679440968961./100000000000000000., -46040804173841439./100000000000000000., -1741436679683621./20000000000000000., -184837953539575767./25000000000000000.,  0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [3921722466502709./100000000000000000.,  343347475853550879./100000000000000000.,    0.,                                      0.,                                     0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     249163204855817./100000000000000000.,    2301387878545931./100000000000000000.,   -322155956692977./100000000000000000.,    197688509889533./20000000000000000.,    54063199844480627./25000000000000000.,      -1626998645464574213./100000000000000000.,  -2570690042410491./20000000000000000.,    -898915042666504253./100000000000000000.,  -13943814529281./4000000000000000.,      63174477645335923./4000000000000000.,      -57440333091409507./100000000000000000.,  -3456020390213933./10000000000000000.,   -132448298041317./20000000000000000.,    -194447032310551./25000000000000000.,    -14243367696091./4000000000000000.,    1198206266124827./250000000000000.,       7686273243653429./50000000000000000.,    0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [9090909090909091./25000000000000000.,   3230385208719854423./100000000000000000.,   0.,                                      0.,                                     0.,                                   0.,                                    -63597539253241./20000000000000000.,   10079971436327401./12500000000000000.,  975983126412389./10000000000000000.,    77857557815839891./100000000000000000.,  20489042383159943./100000000000000000.,  -39065394906867047./25000000000000000.,   0.,                                     817149459411552853./50000000000000000.,     -15454455529354362123./100000000000000000., 156971088703334873./100000000000000000.,  327685545087248131./100000000000000000.,   -1258723112984133./25000000000000000.,   15332115185804166507./100000000000000000., 44848011645482531./6250000000000000.,     -147018374337650241./50000000000000000., -6658459460768031./100000000000000000.,  -4623460549908437./100000000000000000.,  -1020993667928397./50000000000000000., -1067046212877471701./20000000000000000., -27109742943015731./20000000000000000.,  -9824767237577047./6250000000000000.,     0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [35035051988507537./50000000000000000.,  -1664514674863415129./100000000000000000.,  0.,                                      0.,                                     0.,                                   0.,                                    592232780324503./100000000000000000.,  47032615996384111./100000000000000000., 299688863848679./1000000000000000.,     -24765687759399491./100000000000000000., 1386187872142971./12500000000000000.,    0.,                                       -9834380876924583./20000000000000000.,  -114743154427289497./10000000000000000.,    321037266630492109./4000000000000000.,      -7682646079600857./20000000000000000.,    728147667468107583./100000000000000000.,   -6634969230612419./50000000000000000.,   -8107998325257307267./100000000000000000., -781484330222629./625000000000000.,       259263594969543681./100000000000000000., -15072014917320227./50000000000000000.,  11069223039491617./50000000000000000.,   8275772747718929./100000000000000000., 379921324081223041./20000000000000000.,   26923194640963969./100000000000000000.,  162674827447066537./100000000000000000.,  9834380876924583./20000000000000000.,    0.,                                       0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [14015279904218877./100000000000000000., 8384798124090527./100000000000000000.,      0.,                                      0.,                                     0.,                                   0.,                                    -589746835504869./50000000000000000.,  -4945980411376253./20000000000000000.,  978080858367729./10000000000000000.,    21759068924342063./100000000000000000.,  0.,                                      6879280338166261./50000000000000000.,     4398702297150467./100000000000000000.,  0.,                                         -25685040688409667./50000000000000000.,     82635569115131551./100000000000000000.,   1285090698599059163./50000000000000000.,   0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    -1285090698599059163./50000000000000000., -82635569115131551./100000000000000000., 25685040688409667./50000000000000000.,    -4398702297150467./100000000000000000.,  -6879280338166261./50000000000000000.,    0.,                                     0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [7426709605345459./25000000000000000.,   12438052665409441./100000000000000000.,     0.,                                      0.,                                     0.,                                   2261202821975843./10000000000000000.,  1378858876180809./100000000000000000., -1680525334991711./25000000000000000.,  0.,                                     0.,                                      -17124779501708567./20000000000000000.,  -196337522866858909./100000000000000000., -1161664113620597./5000000000000000.,   0.,                                         430660719086453349./100000000000000000.,    -292722963249465483./100000000000000000., -1646263332795717889./20000000000000000.,  0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    1646263332795717889./20000000000000000.,  292722963249465483./100000000000000000., -430660719086453349./100000000000000000., 1161664113620597./5000000000000000.,     196337522866858909./100000000000000000.,  17124779501708567./20000000000000000.,  0.,                                      0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [16749674481819323./25000000000000000.,  5174228081833989./50000000000000000.,       0.,                                      0.,                                     6103444365320361./50000000000000000., 24128724516562331./50000000000000000., -381409600015607./10000000000000000.,  0.,                                     -6881244066385029./12500000000000000.,  0.,                                      -71191581158518923./100000000000000000., -29206480283577567./50000000000000000.,   0.,                                     0.,                                         52761577031466233./25000000000000000.,      -8374947367395721./100000000000000000.,   255010749536160457./50000000000000000.,    0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    -255010749536160457./50000000000000000.,  8374947367395721./100000000000000000.,   -52761577031466233./25000000000000000.,   0.,                                      29206480283577567./50000000000000000.,    71191581158518923./100000000000000000., 6881244066385029./12500000000000000.,    0.,                                     0.,        0.,                                    0.,                                      0., ],\n    [33333333333333333./100000000000000000., 19333333333333333./100000000000000000.,     0.,                                      11./50.,                                -2./25.,                              0.,                                    0.,                                    1099934255807247./10000000000000000.,   -3178713100953377./12500000000000000.,  0.,                                      3462283108466777./4000000000000000.,     332416449114093083./100000000000000000.,  0.,                                     0.,                                         -1201022233159779339./100000000000000000.,  11915036656062331./25000000000000000.,    -580486022442072781./20000000000000000.,   0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    580486022442072781./20000000000000000.,   -11915036656062331./25000000000000000.,  1201022233159779339./100000000000000000., 0.,                                      -332416449114093083./100000000000000000., -3462283108466777./4000000000000000.,   3178713100953377./12500000000000000.,    -1099934255807247./10000000000000000.,  0.,        0.,                                    0.,                                      0., ],\n    [13888888888888889./25000000000000000.,  -83333333333333333./100000000000000000.,    138888888888888889./100000000000000000., 0.,                                     0.,                                   -3./4.,                                0.,                                    -4925295437180263./10000000000000000.,  0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      4925295437180263./10000000000000000.,   3./4.,     0.,                                    0.,                                      0., ],\n    [11111111111111111./100000000000000000., 11111111111111111./100000000000000000.,     0.,                                      -11111111111111111./50000000000000000., 0.,                                   0.,                                    0.,                                    0.,                                     0.,                                     0.,                                      0.,                                      0.,                                       0.,                                     0.,                                         0.,                                         0.,                                       0.,                                        0.,                                      0.,                                        0.,                                       0.,                                      0.,                                      0.,                                      0.,                                    0.,                                       0.,                                      0.,                                       0.,                                      0.,                                       0.,                                     0.,                                      0.,                                     0.,        11111111111111111./50000000000000000., 0.,                                      0., ],\n    [1./1.,                                  7145878509724289./25000000000000000.,       29166666666666667./100000000000000000.,  7./32.,                                 0.,                                   21./128.,                              0.,                                    10909717747277833./50000000000000000.,  18039289847869777./100000000000000000., 0.,                                      10285691970242251./50000000000000000.,   94810856086629./390625000000000.,         24646578081362931./100000000000000000., -13799677631635633./4000000000000000.,      2860944527000451./12500000000000000.,       14164529985107571./50000000000000000.,    321085125837766641./100000000000000000.,   -2235387773648457./10000000000000000.,   -70712115720441907./100000000000000000.,   8028083628757177./2500000000000000.,      70477174154834883./50000000000000000.,   -15136205344374261./100000000000000000., 9308764363175357./25000000000000000.,    12648937320318067./50000000000000000., -321085125837766641./100000000000000000., -14164529985107571./50000000000000000.,  -2860944527000451./12500000000000000.,    -24646578081362931./100000000000000000., -94810856086629./390625000000000.,        -10285691970242251./50000000000000000., -18039289847869777./100000000000000000., -10909717747277833./50000000000000000., -21./128., -7./32.,                               -29166666666666667./100000000000000000., 0., ]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0., 892857142857143./50000000000000000., 3./512., 3./256., 0., 9./512., 0., 3./128., 15./512., 0., 9./256., 21./512., 3./64., 0., 27./512., 15./256., 33./512., 0., 5267605678587651./50000000000000000., 8528067312087609./50000000000000000., 10311469866467597./50000000000000000., 10311469866467597./50000000000000000., 8528067312087609./50000000000000000., 5267605678587651./50000000000000000., -33./512., -15./256., -27./512., -3./64., -21./512., -9./256., -15./512., -3./128., -9./512., -3./256., -3./512., 892857142857143./50000000000000000.],\n         [0., 892857142857143./50000000000000000., 242968749999999999./50000000000000000000., 3./256., 0., 9./512., 0., 3./128., 15./512., 0., 9./256., 21./512., 3./64., 0., 27./512., 15./256., 33./512., 0., 5267605678587651./50000000000000000., 8528067312087609./50000000000000000., 10311469866467597./50000000000000000., 10311469866467597./50000000000000000., 8528067312087609./50000000000000000., 5267605678587651./50000000000000000., -33./512., -15./256., -27./512., -3./64., -21./512., -9./256., -15./512., -3./128., -9./512., -3./256., -242968749999999999./50000000000000000000., 892857142857143./50000000000000000.]], dtype=numpy.float64\n    )\n        \n#     def get_error_estimate(self, dState, dTime, aux, tableau_idx_expand):\n#         return (aux[0] - aux[-1]) / 1000 + (dState - aux[-1]) / dTime # D.sum(self.final_state[1][tableau_idx_expand] * aux, axis=0) * dTime / 1000 # \n\n\nclass RK108Solver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the Adaptive Runge-Kutta 10(8) method using\n    the coefficients defined by Feagin.\n    \n    References\n    ----------\n    [1] Feagin, Terry. ""HIGH-ORDER EXPLICIT RUNGE-KUTTA METHODS USING W-SYMMETRY."" Neural, Parallel & Scientific Computations 20, no. 3-4 (2012): 437-458.\n    """"""\n    \n    order = 10.0\n    \n    __alt_names__ = (""Explicit RK108"", ""RK108"", ""Runge-Kutta 10(8)"", ""RK108Feag"")\n    __adaptive__  = True\n    __order__     = order\n    \n    tableau = numpy.array(\nn    [1./10.,                                       1./10.,                                       0.,                                          0.,                                            0.,                                          0.,                                           0.,                                            0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [53935784080298178753./100000000000000000000., -22879414034382286013./25000000000000000000., 29090688043565464561./20000000000000000000., 0.,                                            0.,                                          0.,                                           0.,                                            0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [8090367612044726813./10000000000000000000.,   2528239878763977129./12500000000000000000.,   0.,                                          60677757090335451097./100000000000000000000.,  0.,                                          0.,                                           0.,                                            0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [3090367612044726813./10000000000000000000.,   3680494294172871503./20000000000000000000.,   0.,                                          19796683122719236907./100000000000000000000.,  -1823869618284081573./25000000000000000000., 0.,                                           0.,                                            0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [3924296760879181073./4000000000000000000.,    8790073402066813373./100000000000000000000.,  0.,                                          0.,                                            10261492563006516133./25000000000000000000., 1206784384197166223./2500000000000000000.,    0.,                                            0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [83333333333333333333./100000000000000000000., 4298502524512301511./50000000000000000000.,   0.,                                          0.,                                            6617719260814443679./20000000000000000000.,  12241573932736254821./25000000000000000000.,  -914820468838563421./12500000000000000000.,    0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [35401736585680237633./100000000000000000000., 6046522456266686033./50000000000000000000.,   0.,                                          0.,                                            0.,                                          26012467575829562281./100000000000000000000., 1627013107745456651./50000000000000000000.,    -186181316192925313./3125000000000000000.,     0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [88252766196473234643./100000000000000000000., 11085437958039148351./100000000000000000000., 0.,                                          0.,                                            0.,                                          0.,                                           -1514403720637513969./25000000000000000000.,   3217637056017783901./10000000000000000000.,    25524286280403151579./50000000000000000000.,   0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [2008174244501007963./3125000000000000000.,    11205441475287900483./100000000000000000000., 0.,                                          0.,                                            0.,                                          0.,                                           -14494277590286591567./100000000000000000000., -33326971909625670659./100000000000000000000., 9985384591137601227./20000000000000000000.,    6368807611621076303./12500000000000000000.,   0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [1116825755498992037./3125000000000000000.,    5698839198209299307./50000000000000000000.,   0.,                                          0.,                                            0.,                                          0.,                                           -3844066821016784693./50000000000000000000.,   23952736032439064911./100000000000000000000.,  7955493247361892781./20000000000000000000.,    268897392184018639./25000000000000000000.,    -6555382483280377483./20000000000000000000.,    0.,                                             0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [11747233803526765357./100000000000000000000., 498946580175122529./6250000000000000000.,     0.,                                          0.,                                            0.,                                          0.,                                           -1040659373601206153./20000000000000000000.,   -5769541461685488817./100000000000000000000.,  9739095785605208249./50000000000000000000.,    14538492318832506973./100000000000000000000., -122334798492448559./1562500000000000000.,      -5725164968054945609./50000000000000000000.,    0.,                                            0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [83333333333333333333./100000000000000000000., 24627890254121432003./25000000000000000000.,  0.,                                          0.,                                            6617719260814443679./20000000000000000000.,  12241573932736254821./25000000000000000000.,  -68948243287421783791./50000000000000000000.,  -86116419502763566667./100000000000000000000., 578428813637537220023./100000000000000000000., 32880776198510356689./10000000000000000000.,  -238633905093136384013./100000000000000000000., -65095868496728783731./20000000000000000000.,   -108171770843211491177./50000000000000000000., 0.,                                           0.,                                            0.,                                           0.,       0., ],\n    [3090367612044726813./10000000000000000000.,   17901605915432657821./20000000000000000000.,  0.,                                          19796683122719236907./100000000000000000000.,  -1823869618284081573./25000000000000000000., 0.,                                           -42561811983100380987./50000000000000000000.,  9958002807963332543./25000000000000000000.,    363937263181035606029./100000000000000000000., 30964575407966064473./20000000000000000000.,  -106110857352026858013./50000000000000000000.,  -158350398545326172713./100000000000000000000., -85780804142968132461./50000000000000000000.,  -2440364057501274521./100000000000000000000., 0.,                                            0.,                                           0.,       0., ],\n    [53935784080298178753./100000000000000000000., -22879414034382286013./25000000000000000000., 29090688043565464561./20000000000000000000., 0.,                                            0.,                                          -38866682182248411677./50000000000000000000., 0.,                                            -1138619577693970087./12500000000000000000.,   0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            1138619577693970087./12500000000000000000.,   38866682182248411677./50000000000000000000.,   0.,                                           0.,       0., ],\n    [1./10.,                                       1./10.,                                       0.,                                          -15717866579977116337./100000000000000000000., 0.,                                          0.,                                           0.,                                            0.,                                            0.,                                            0.,                                           0.,                                             0.,                                             0.,                                            0.,                                           0.,                                            15717866579977116337./100000000000000000000., 0.,       0., ],\n    [1./1.,                                        18178130070009528389./100000000000000000000., 27./40.,                                     17137907992359491997./50000000000000000000.,   0.,                                          25911121454832274451./100000000000000000000., -7165579334359041781./20000000000000000000.,   -20918979188176661219./20000000000000000000.,  93032784541562698329./100000000000000000000.,  88975479715854051223./50000000000000000000.,  1./10.,                                         -28254756953904408161./100000000000000000000.,  -15932735011997254917./100000000000000000000., -7275794732350075543./50000000000000000000.,  -25911121454832274451./100000000000000000000., -17137907992359491997./50000000000000000000., -27./40., 0., ]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0., 3333333333333333333./100000000000000000000., 1./40., 3333333333333333333./100000000000000000000., 0., 1./20., 0., 1./25., 0., 2365468476861543627./12500000000000000000., 27742918851774317651./100000000000000000000., 27742918851774317651./100000000000000000000., 2365468476861543627./12500000000000000000., -1./25., -1./20., -3333333333333333333./100000000000000000000., -1./40., 3333333333333333333./100000000000000000000.],\n         [0., 3333333333333333333./100000000000000000000., 1./36., 3333333333333333333./100000000000000000000., 0., 1./20., 0., 1./25., 0., 2365468476861543627./12500000000000000000., 27742918851774317651./100000000000000000000., 27742918851774317651./100000000000000000000., 2365468476861543627./12500000000000000000., -1./25., -1./20., -3333333333333333333./100000000000000000000., -1./36., 3333333333333333333./100000000000000000000.]], dtype=numpy.float64\n    )\n        \n#     def get_error_estimate(self, dState, dTime, aux, tableau_idx_expand):\n#         return (aux[0] - aux[-1]) / 360 + (dState - aux[-1]) / dTime # D.sum(self.final_state[1][tableau_idx_expand] * aux, axis=0) * dTime / 1000 # \n\nclass RK8713MSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the Adaptive Runge-Kutta 8(7) method using\n    the coefficients defined by Dormand and Prince.\n    \n    References\n    ----------\n    [1] Prince, P.J., and J.R. Dormand. \xe2\x80\x98High Order Embedded Runge-Kutta Formulae\xe2\x80\x99. Journal of Computational and Applied Mathematics 7, no. 1 (March 1981): 67\xe2\x80\x9375. https://doi.org/10.1016/0771-050X(81)90010-3 .\n    """"""\n    \n    order = 8.0\n    \n    __alt_names__ = (""Explicit RK8713M"", ""RK87"", ""Runge-Kutta 8(7)"", ""RK8713M"")\n    __adaptive__  = True\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0.0,                    0.0,                  0.0,      0.0,       0.0,                      0.0,                    0.0,                     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [1/18,                   1/18,                 0.0,      0.0,       0.0,                      0.0,                    0.0,                     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [1/12,                   1/48,                 1/16,     0.0,       0.0,                      0.0,                    0.0,                     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [1/8,                    1/32,                 0.0,      3/32,      0.0,                      0.0,                    0.0,                     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [5/16,                   5/16,                 0.0,     -75/64,     75/64,                    0.0,                    0.0,                     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [3/8,                    3/80,                 0.0,      0.0,       3/16,                     3/20,                   0.0,                     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [59/400,                 29443841/614563906,   0.0,      0.0,       77736538/692538347,      -28693883/1125000000,    23124283/1800000000,     0.0,                     0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [93/200,                 16016141/946692911,   0.0,      0.0,       61564180/158732637,       22789713/633445777,     545815736/2771057229,   -180193667/1043307555,    0.0,                     0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [5490023248/9719169821,  39632708/573591083,   0.0,      0.0,      -433636366/683701615,     -421739975/2616292301,   100302831/723423059,     790204164/839813087,     800635310/3783071287,    0.0,                     0.0,                   0.0,                  0.0, 0.0],\n         [13/20,                  246121993/1340847787, 0.0,      0.0,      -37695042795/15268766246, -309121744/1061227803,  -12992083/490766935,      6005943493/2108947869,   393006217/1396673457,    123872331/1001029789,    0.0,                   0.0,                  0.0, 0.0],\n         [1201146811/1299019798, -1028468189/846180014, 0.0,      0.0,       8478235783/508512852,     1311729495/1432422823, -10304129995/1701304382, -48777925059/3047939560,  15336726248/1032824649, -45442868181/3398467696,  3065993473/597172653,  0.0,                  0.0, 0.0],\n         [1,                      185892177/718116043,  0.0,      0.0,      -3185094517/667107341,    -477755414/1098053517,  -703635378/230739211,     5731566787/1027545527,   5232866602/850066563,   -4093664535/808688257,    3962137247/1805957418, 65686358/487910083,   0.0, 0.0],\n         [1,                      403863854/491063109,  0.0,      0.0,      -5068492393/434740067,    -411421997/543043805,    652783627/914296604,     11173962825/925320556,  -13158990841/6184727034,  3936647629/1978049680,  -160528059/685178525,   248638103/1413531060, 0.0, 0.0]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0., 13451932/455176623, 0.0, 0.0, 0.0, 0.0, -808719846/976000145, 1757004468/5645159321, 656045339/265891186, -3867574721/1518517206, 465885868/322736535,  53011238/667516719,   2/45,                 0.0],\n         [0., 14005451/335480064, 0.0, 0.0, 0.0, 0.0, -59238493/1068277825, 181606767/758867731,   561292985/797845732, -1041891430/1371343529, 760417239/1151165299, 118820643/751138087, -528747749/2220607170, 1/4]], dtype=numpy.float64\n    )\n    \nclass RK45CKSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the Adaptive Runge-Kutta 4(5) method using\n    the coefficients defined by Cash and Karp.\n    \n    References\n    ----------\n    [1] Cash, J. R., and Alan H. Karp. \xe2\x80\x98A Variable Order Runge-Kutta Method for Initial Value Problems with Rapidly Varying Right-Hand Sides\xe2\x80\x99. ACM Transactions on Mathematical Software 16, no. 3 (1 September 1990): 201\xe2\x80\x9322. https://doi.org/10.1145/79505.79507 .\n    """"""\n    \n    order = 5.0\n    \n    __alt_names__ = (""Explicit RK45CK"", ""RK45CK"", ""Runge-Kutta-Cash-Karp"", ""RK45"")\n    __adaptive__  = True\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0.0,  0.0,        0.0,     0.0,       0.0,          0.0,      0.0],\n         [1/5,  1/5,        0.0,     0.0,       0.0,          0.0,      0.0],\n         [3/10, 3/40,       9/40,    0.0,       0.0,          0.0,      0.0],\n         [3/5,  3/10,       -9/10,   6/5,       0.0,          0.0,      0.0],\n         [1,    -11/54,     5/2,     -70/27,    35/27,        0.0,      0.0],\n         [7/8,  1631/55296, 175/512, 575/13824, 44275/110592, 253/4096, 0.0]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0., 37/378,     0, 250/621,     125/594,     0,         512/1771],\n         [0., 2825/27648, 0, 18575/48384, 13525/55296, 277/14336, 1/4     ]], dtype=numpy.float64\n    )\n    \nclass RK5Solver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements a 5th order Runge-Kutta method.\n    This is simply the fifth order method embedded in RK45CK.\n    \n    References\n    ----------\n    [1] Cash, J. R., and Alan H. Karp. \xe2\x80\x98A Variable Order Runge-Kutta Method for Initial Value Problems with Rapidly Varying Right-Hand Sides\xe2\x80\x99. ACM Transactions on Mathematical Software 16, no. 3 (1 September 1990): 201\xe2\x80\x9322. https://doi.org/10.1145/79505.79507 .\n    """"""\n    \n    order = 5.0\n    \n    __alt_names__ = (""Explicit RK5"", ""RK5"", ""Runge-Kutta 5"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.copy(RK45CKSolver.tableau)\n\n    final_state = numpy.array(\n        [[0., 37/378,     0, 250/621,     125/594,     0,         512/1771]], dtype=numpy.float64\n    )\n    \nclass RK4Solver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the classic 4th order Runge-Kutta method.\n    """"""\n    \n    order = 4.0\n    \n    __alt_names__ = (""Explicit RK4"", ""RK4"", ""Runge-Kutta 4"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0,   0,   0,   0, 0],\n         [1/2, 1/2, 0,   0, 0],\n         [1/2, 0,   1/2, 0, 0],\n         [1,   0,   0,   1, 0]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0., 1/6, 1/3, 1/3, 1/6]], dtype=numpy.float64\n    )\n\nclass MidpointSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the midpoint method.\n    """"""\n    \n    order = 2.0\n    \n    __alt_names__ = (""Explicit Midpoint"", ""Midpoint"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0,    0,   0],\n         [1/2,  1/2, 0]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0,    0,   1]], dtype=numpy.float64\n    )\n\nclass HeunsSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements Heun\'s method.\n    """"""\n    \n    order = 2.0\n    \n    __alt_names__ = (""Explicit Heun\'s"", ""Heun\'s"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0,    0,   0  ],\n         [1,    1,   0  ]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0,    1/4, 3/4]], dtype=numpy.float64\n    )\n\nclass EulerSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the Euler method.\n    """"""\n    \n    order = 1.0\n    \n    __alt_names__ = (""Explicit Euler"", ""Euler"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0,    0]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0,    1]], dtype=numpy.float64\n    )\n\nclass EulerTrapSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the Euler-Trapezoidal method.\n    """"""\n    \n    order = 2.0\n    \n    __alt_names__ = (""Explicit Euler-Trapezoidal"", ""Euler-Trapezoidal"", ""Euler-Trap"", ""Predictor-Corrector Euler"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0,   0,   0,     0,   0  ],\n         [1,   1,   0,     0,   0  ],\n         [1,   1/2, 1/2,   0,   0  ],\n         [1,   1/2, 0,     1/2, 0  ]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0,   1/2, 0,    0,   1/2]], dtype=numpy.float64\n    )\n\nclass HeunEulerSolver(ExplicitRungeKuttaIntegrator):\n    """"""\n    The derived class that implements the adaptive Heun-Euler method.\n    This is a 1st order method (Euler) with an embedded \n    2nd order method (Heun) that does adaptive timestepping.\n    """"""\n    \n    order = 2.0\n    \n    __alt_names__ = (""Explicit Adaptive Heun-Euler"", ""Adaptive Heun-Euler"", ""AHE"")\n    __adaptive__  = True\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0,   0,   0],\n         [1,   1,   0]], dtype=numpy.float64\n    )\n\n    final_state = numpy.array(\n        [[0,    1/2, 1/2],\n         [0,    1,   0   ]], dtype=numpy.float64\n    )\n    \nclass SymplecticEulerSolver(ExplicitSymplecticIntegrator):\n    """"""\n    The derived class that implements the symplectic Euler method.\n    \n    This is the simplest symplectic integration scheme.\n    """"""\n    \n    order = 1.0\n    \n    __alt_names__ = (""Explicit Symplectic Forward Euler"", ""Symplectic Forward Euler"")\n    __adaptive__  = False\n    __order__     = order\n    \n    tableau = numpy.array(\n        [[0.5, 0,   0.5],\n         [0,   1.0, 0  ],\n         [0.5, 0,   0.5]], dtype=numpy.float64\n    )\n\nclass BABs9o7HSolver(ExplicitSymplecticIntegrator):\n    """"""\n    The derived class that implements the 7th order \n    BAB\'s9o7H symplectic integrator. This integrator\n    is only applicable to systems that have a Hamiltonian\n    that can be split such that: `H(p,q) = T(p) + V(q)`.\n    \n    References\n    ----------\n    [1] Nielsen, Kristian Mads Egeris. \xe2\x80\x98Efficient Fourth Order Symplectic Integrators for Near-Harmonic Separable Hamiltonian Systems\xe2\x80\x99. ArXiv:1501.04345 [Physics, Physics:Quant-Ph], 9 February 2015. http://arxiv.org/abs/1501.04345 .\n    """"""\n    \n    order = 7.0\n    \n    __alt_names__ = (""Explicit BABS9O7H"", ""BABS9O7H"")\n    __adaptive__  = False\n    __order__     = order\n    \n    # Based on arXiv:1501.04345v2 - BAB\'s9o7H\n    tableau = numpy.array(\n       [[ 0.                  ,  0.                  ,  0.04649290043965892 ],\n        [ 0.                  ,  0.1289555065927298  ,  0.                  ],\n        [ 0.                  ,  0.                  ,  0.154901012702888   ],\n        [ 0.                  ,  0.10907642985488271 ,  0.                  ],\n        [ 0.                  ,  0.                  ,  0.31970548287359174 ],\n        [ 0.                  , -0.013886035680471514,  0.                  ],\n        [ 0.                  ,  0.                  , -0.19292000881571322 ],\n        [ 0.                  ,  0.18375497456418036 ,  0.                  ],\n        [ 0.                  ,  0.                  ,  0.17182061279957458 ],\n        [ 0.                  ,  0.18419824933735726 ,  0.                  ],\n        [ 0.                  ,  0.                  ,  0.17182061279957458 ],\n        [ 0.                  ,  0.18375497456418036 ,  0.                  ],\n        [ 0.                  ,  0.                  , -0.19292000881571322 ],\n        [ 0.                  , -0.013886035680471514,  0.                  ],\n        [ 0.                  ,  0.                  ,  0.31970548287359174 ],\n        [ 0.                  ,  0.10907642985488271 ,  0.                  ],\n        [ 0.                  ,  0.                  ,  0.154901012702888   ],\n        [ 0.                  ,  0.1289555065927298  ,  0.                  ],\n        [ 1.                  ,  0.                  ,  0.04649290043965892 ]], dtype=numpy.float64\n    )\n\nclass ABAs5o6HSolver(ExplicitSymplecticIntegrator):\n    """"""\n    The derived class that implements the 6th order \n    ABAs5o6H symplectic integrator. This integrator\n    is only applicable to systems that have a Hamiltonian\n    that can be split such that `H(p,q) = T(p) + V(q)`.\n    \n    References\n    ----------\n    [1] Nielsen, Kristian Mads Egeris. \xe2\x80\x98Efficient Fourth Order Symplectic Integrators for Near-Harmonic Separable Hamiltonian Systems\xe2\x80\x99. ArXiv:1501.04345 [Physics, Physics:Quant-Ph], 9 February 2015. http://arxiv.org/abs/1501.04345 .\n    """"""\n    \n    order = 6.0\n    \n    __alt_names__ = (""Explicit ABAS5O6H"", ""ABAS5O6H"")\n    __adaptive__  = False\n    __order__     = order\n    \n    # Based on arXiv:1501.04345v2 - ABAs5o6H\n    tableau = numpy.array(\n      [[ 0.                  ,  0.                  ,  0.15585935917621682 ],\n       [ 0.                  , -0.6859195549562167  ,  0.                  ],\n       [ 0.                  ,  0.                  , -0.007025499091957318],\n       [ 0.                  ,  0.9966295909529364  ,  0.                  ],\n       [ 0.                  ,  0.                  ,  0.35116613991574047 ],\n       [ 0.                  ,  0.3785799280065607  ,  0.                  ],\n       [ 0.                  ,  0.                  ,  0.35116613991574047 ],\n       [ 0.                  ,  0.9966295909529364  ,  0.                  ],\n       [ 0.                  ,  0.                  , -0.007025499091957318],\n       [ 0.                  , -0.6859195549562167  ,  0.                  ],\n       [ 1.                  ,  0.                  ,  0.15585935917621682 ]]\n   )\n'"
desolver/integrators/integrator_template.py,0,"b'from .. import backend as D\n\n__all__ = [\n    \'IntegratorTemplate\',\n#     \'named_integrator\',\n]\n\n# def named_integrator(name, alt_names=tuple(), order=1.0):\n#     def wrap(f):\n#         f.__name__ = str(name)\n#         f.__alt_names__ = alt_names\n#         if hasattr(f, \'order\'):\n#             f.__order__ = f.order\n#         else:\n#             f.__order__ = order\n#         if hasattr(f, ""final_state""):\n#             f.__adaptive__ = D.shape(f.final_state)[0] == 2\n#         else:\n#             f.__adaptive__ = False\n#         return f\n#     return wrap\n\nclass IntegratorTemplate(object):\n    def __init__(self):\n        raise NotImplementedError(""Do not initialise this class directly!"")\n\n    def forward(self, rhs, initial_time, initial_state, constants, timestep):\n        raise NotImplementedError(""Do not use this class directly! How did you initialise it??"")\n        \n    def dense_output(self):\n        raise NotImplementedError(""Do not use this class directly! How did you initialise it??"")\n\n    __call__ = forward\n\n    def update_timestep(self, initial_state, dState, diff, initial_time, timestep, tol=0.8):\n        err_estimate = D.max(D.abs(D.to_float(diff)))\n        relerr = D.max(D.to_float(self.atol + self.rtol * D.abs(initial_state) + self.rtol * D.abs(dState / timestep)))\n        if err_estimate != 0:\n            corr = timestep * tol * (relerr / err_estimate) ** (1.0 / self.order)\n            if corr != 0:\n                timestep = corr\n        if err_estimate > relerr:\n            return timestep, True\n        else:\n            return timestep, False\n    \n    @classmethod\n    def __str__(cls):\n        return cls.__name__\n    \n    def __repr__(self):\n        if D.backend() == \'torch\':\n            return ""<{}({},{},{},{})>"".format(self.__class__.__name__, self.dim, self.dtype, self.rtol, self.atol)\n        else:\n            return ""<{}({},{},{},{},{})>"".format(self.__class__.__name__, self.dim, self.dtype, self.rtol, self.atol, self.device)\n\n'"
desolver/integrators/integrator_types.py,0,"b'from .integrator_template import IntegratorTemplate\nfrom .. import backend as D\n\n__all__ = [\n    \'ExplicitRungeKuttaIntegrator\',\n    \'ExplicitSymplecticIntegrator\'\n]\n\nclass ExplicitRungeKuttaIntegrator(IntegratorTemplate):\n    """"""\n    A base class for all explicit Runge-Kutta methods with a lower triangular Butcher Tableau.\n\n    An ExplicitRungeKuttaIntegrator derived object corresponds to a\n    numerical integrator tailored to a particular dynamical system \n    with an integration scheme defined by the Butcher tableau of the child\n    class.\n    \n    A child class that defines two sets of coefficients for final_state\n    is considered an adaptive method and uses the adaptive stepping \n    based on the local error estimate derived from the two sets of \n    final_state coefficients. Furthermore, local extrapolation is used.\n    \n    Attributes\n    ----------\n    tableau : numpy array, shape (N, N+1)\n        A numpy array with N stages and N+1 entries per stage where the first column \n        is the timestep fraction and the remaining columns are the stage coefficients.\n        \n    final_state : numpy array, shape (k, N)\n        A numpy array with N+1 coefficients defining the final stage coefficients.\n        If k == 2, then the method is considered adaptive and the first row is\n        the lower order method and the second row is the higher order method\n        whose difference gives the local error of the numerical integration.\n        \n    __symplectic__ : bool\n        True if the method is symplectic.\n    """"""\n    \n    tableau = None\n    final_state = None\n    order = 1\n    __symplectic__ = False\n\n    def __init__(self, sys_dim, dtype=None, rtol=None, atol=None, device=None):\n        if dtype is None:\n            self.tableau     = D.array(self.tableau)\n            self.final_state = D.array(self.final_state)\n        else:\n            self.tableau     = D.to_type(self.tableau, dtype)\n            self.final_state = D.to_type(self.final_state, dtype)\n            \n        self.dim        = sys_dim\n        self.rtol       = rtol\n        self.atol       = atol\n        self.adaptive   = D.shape(self.final_state)[0] == 2\n        self.num_stages = D.shape(self.tableau)[0]\n        self.aux        = D.zeros((self.num_stages, ) + self.dim)\n        \n        if dtype is not None:\n            if D.backend() == \'torch\':\n                self.aux = self.aux.to(dtype)\n            else:\n                self.aux = self.aux.astype(dtype)\n        \n        if D.backend() == \'torch\':\n            self.aux         = self.aux.to(device)\n            self.tableau     = self.tableau.to(device)\n            self.final_state = self.final_state.to(device)\n            \n    def forward(self, rhs, initial_time, initial_state, constants, timestep):\n        if self.tableau is None:\n            raise NotImplementedError(""In order to use the fixed step integrator, subclass this class and populate the butcher tableau"")\n        else:\n            aux = self.aux\n            tableau_idx_expand = tuple([slice(1, None, None)] + [None] * (aux.ndim - 1))\n\n            for stage in range(self.num_stages):\n                current_state = initial_state    + D.sum(self.tableau[stage][tableau_idx_expand] * aux, axis=0)\n                aux[stage]    = rhs(initial_time + self.tableau[stage, 0]*timestep, current_state, **constants) * timestep\n                \n                           \n            self.dState = D.sum(self.final_state[0][tableau_idx_expand] * aux, axis=0)\n            self.dTime  = timestep\n            \n            if self.adaptive:\n                diff = self.get_error_estimate(self.dState, self.dTime, aux, tableau_idx_expand)\n                timestep, redo_step = self.update_timestep(initial_state, self.dState, diff, initial_time, timestep)\n                if redo_step:\n                    timestep, (self.dTime, self.dState) = self(rhs, initial_time, initial_state, constants, timestep)\n            \n            return timestep, (self.dTime, self.dState)\n        \n    def get_error_estimate(self, dState, dTime, aux, tableau_idx_expand):\n        return dState - D.sum(self.final_state[1][tableau_idx_expand] * aux, axis=0)\n        \n    def dense_output(self, rhs, initial_time, initial_state):\n        return CubicHermiteInterp(\n            initial_time, \n            initial_time + self.dTime, \n            initial_state, \n            initial_state + self.dState,\n            rhs(initial_time, initial_state),\n            rhs(initial_time + self.dTime, initial_state + self.dState)\n        )\n\n    __call__ = forward\n\nclass ExplicitSymplecticIntegrator(IntegratorTemplate):\n    """"""\n    A base class for all symplectic numerical integration methods.\n\n    A ExplicitSymplecticIntegrator derived object corresponds to a\n    numerical integrator tailored to a particular dynamical system \n    with an integration scheme defined by the sequence of drift-kick\n    coefficients in tableau.\n    \n    An explicit symplectic integrator may be considered as a sequence of carefully\n    picked drift and kick stages that build off the previous stage which is\n    the implementation considered here. A masking array of indices indicates\n    the drift and kick variables that are updated at each stage.\n    \n    In a system defined by a Hamiltonian of q and p (generalised position and\n    generalised momentum respectively), the drift stages update q and the kick\n    stages update p. For a conservative Hamiltonian, a symplectic method will\n    minimise the drift in the Hamiltonian during the integration.\n    \n    Attributes\n    ----------\n    tableau : numpy array, shape (N, N+1)\n        A numpy array with N stages and N+1 entries per stage where the first column \n        is the timestep fraction and the remaining columns are the stage coefficients.\n        \n    __symplectic__ : bool\n        True if the method is symplectic.\n    """"""\n    \n    tableau = None\n    __symplectic__ = True\n\n    def __init__(self, sys_dim, dtype=None, staggered_mask=None, rtol=None, atol=None, device=None):\n        if staggered_mask is None:\n            staggered_mask      = D.arange(sys_dim[0]//2, sys_dim[0], dtype=D.int64)\n            self.staggered_mask = D.zeros(sys_dim, dtype=D.bool)\n            self.staggered_mask[staggered_mask] = 1\n        else:\n            self.staggered_mask = D.to_type(staggered_mask, D.bool)\n            \n        if dtype is None:\n            self.tableau     = D.array(self.tableau)\n        else:\n            self.tableau     = D.to_type(self.tableau, dtype)\n\n        self.dim        = sys_dim\n        self.rtol       = rtol\n        self.atol       = atol\n        self.adaptive   = False\n        self.num_stages = D.shape(self.tableau)[0]\n        self.msk  = self.staggered_mask\n        self.nmsk = D.logical_not(self.staggered_mask)\n        \n        if D.backend() == \'torch\':\n            self.tableau     = self.tableau.to(device)\n            self.msk  = self.msk.to(self.tableau)\n            self.nmsk = self.nmsk.to(self.tableau)\n\n    def forward(self, rhs, initial_time, initial_state, constants, timestep):\n        if self.tableau is None:\n            raise NotImplementedError(""In order to use the fixed step integrator, subclass this class and populate the butcher tableau"")\n        else:\n            msk  = self.msk\n            nmsk = self.nmsk\n\n            current_time  = D.copy(initial_time)\n            current_state = D.copy(initial_state)\n            self.dState   = D.zeros_like(current_state)\n\n            for stage in range(self.num_stages):\n                aux          = rhs(current_time, initial_state + self.dState, **constants) * timestep\n                current_time = current_time + timestep * self.tableau[stage, 0]\n                self.dState += aux * self.tableau[stage, 1] * msk + aux * self.tableau[stage, 2] * nmsk\n                \n            self.dTime = timestep\n            \n            return timestep, (self.dTime, self.dState)\n        \n    def dense_output(self, rhs, initial_time, initial_state, constants):\n        return CubicHermiteInterp(\n            initial_time, \n            initial_time + self.dTime, \n            initial_state, \n            initial_state + self.dState,\n            rhs(initial_time, initial_state, **constants),\n            rhs(initial_time + self.dTime, initial_state + self.dState, **constants)\n        )\n\n    __call__ = forward\n'"
desolver/tests/test_dense_output.py,1,"b'import desolver as de\nfrom desolver.differential_system import DenseOutput\nfrom desolver.utilities.interpolation import CubicHermiteInterp\nimport desolver.backend as D\nimport numpy as np\n\nfrom nose.tools import *\n\ndef test_dense_init_and_call():\n    denseoutput = DenseOutput(None, None)\n    assert(denseoutput.t_eval == [0.0])\n    assert(denseoutput.y_interpolants == [])\n    \ndef test_dense_init_add_postfix():\n    denseoutput = DenseOutput(None, None)\n    inputs = D.array([0, 1, 0, 1, 1, 1])\n    interpolator = CubicHermiteInterp(*inputs)\n    denseoutput.add_interpolant(1, interpolator)\n    \ndef test_dense_init_add_prefix():\n    denseoutput = DenseOutput(None, None)\n    inputs = D.array([-1, 0, 0, 1, 1, 1])\n    interpolator = CubicHermiteInterp(*inputs)\n    denseoutput.add_interpolant(-1, interpolator)\n    \n@raises(TypeError)\ndef test_dense_add_noncallable():\n    inputs = D.array([0, 1, 0, 1, 1, 1])\n    interpolator = CubicHermiteInterp(*inputs)\n    denseoutput = DenseOutput([0, 1], [interpolator])\n    denseoutput.add_interpolant(2, None)\n    \n@raises(ValueError)\ndef test_dense_add_outofbounds():\n    inputs = D.array([0, 1, 0, 1, 1, 1])\n    interpolator = CubicHermiteInterp(*inputs)\n    denseoutput = DenseOutput([0, 1], [interpolator])\n    def new_interp(t):\n        if t < 2:\n            raise ValueError(""Out of bounds"")\n        else:\n            return t\n    denseoutput.add_interpolant(2, new_interp)\n    \n@raises(ValueError)\ndef test_dense_add_timemismatch_oob():\n    inputs = D.array([0, 1, 0, 1, 1, 1])\n    interpolator = CubicHermiteInterp(*inputs)\n    denseoutput = DenseOutput([0, 1], [interpolator])\n    def new_interp(t):\n        if t > 2:\n            raise ValueError(""Out of bounds"")\n        else:\n            return t\n    denseoutput.add_interpolant(3, new_interp)\n    \n@raises(ValueError)\ndef test_dense_init_no_t():\n    denseoutput = DenseOutput(None, [0.1])\n    \n@raises(ValueError)\ndef test_dense_init_no_y():\n    denseoutput = DenseOutput([0.1], None)\n    \n@raises(ValueError)\ndef test_dense_init_mismatch_length():\n    denseoutput = DenseOutput([0.1], [0.1, 0.1])\n    \ndef test_dense_output():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        assert(a.integration_status() == ""Integration has not been run."")\n        \n        a.integrate()\n        \n        assert(a.integration_status() == ""Integration completed successfully."")\n\n        assert(D.max(D.abs(a[0].y - analytic_soln(a[0].t, y_init))) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[0].t)) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[-1].y - analytic_soln(a[-1].t, y_init))) <= 10*D.epsilon()**0.5)\n        \n        assert(D.max(D.abs(a[a[0].t].y - analytic_soln(a[0].t, y_init))) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[a[0].t].t)) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[a[-1].t].y - analytic_soln(a[-1].t, y_init))) <= 10*D.epsilon()**0.5)\n        \n        assert(D.max(D.abs(a[a[0].t:a[-1].t].y - a.y)) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[:a[-1].t].y - a.y)) <= 4*D.epsilon())\n        \n        assert(D.max(D.abs(a[a[0].t:a[-1].t:2].y - a.y[::2])) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[a[0].t::2].y - a.y[::2])) <= 4*D.epsilon())\n        assert(D.max(D.abs(a[:a[-1].t:2].y - a.y[::2])) <= 4*D.epsilon())\n    \nif __name__ == ""__main__"":\n    np.testing.run_module_suite()'"
desolver/tests/test_differential_system.py,1,"b'import desolver as de\nimport desolver.backend as D\nimport numpy as np\nfrom nose.tools import *\n\ndef test_getter_setters():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, **kwargs):    \n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n\n            return D.array([\n                c2 * D.sin(t) + c1 * D.cos(t) + t,\n                c2 * D.cos(t) - c1 * D.sin(t) + 1\n            ])\n\n        def kbinterrupt_cb(ode_sys):\n            if ode_sys[-1][0] > D.pi:\n                raise KeyboardInterrupt(""Test Interruption and Catching"")\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5)\n\n        assert(a.t0 == 0)\n        assert(a.tf == 2 * D.pi)\n        assert(a.dt == 0.01)\n        assert(a.get_current_time() == a.t0)\n        assert(a.rtol == D.epsilon()**0.5)\n        assert(a.atol == D.epsilon()**0.5)\n        assert(D.norm(a.y[0]  - y_init) <= 2 * D.epsilon())\n        assert(D.norm(a.y[-1] - y_init) <= 2 * D.epsilon())\n\n        a.set_kick_vars([True, False])\n\n        assert(a.staggered_mask == [True, False])\n        pval = 3 * D.pi\n\n        a.tf = pval\n    \n        assert(a.tf == pval)\n        pval = -1.0\n\n        a.t0 = pval\n\n        assert(a.t0 == pval)\n        assert(a.dt == 0.01)\n\n        a.rtol = 1e-3\n\n        assert(a.rtol == 1e-3)\n\n        a.atol = 1e-3\n\n        assert(a.atol == 1e-3)\n        \n        for method in de.available_methods():\n            a.set_method(method)\n            assert(isinstance(a.integrator, de.available_methods(False)[method]))\n\n        for method in de.available_methods():\n            a.method = method\n            assert(isinstance(a.integrator, de.available_methods(False)[method]))\n\n        a.constants[\'k\'] = 5.0\n\n        assert(a.constants[\'k\'] == 5.0)\n\n        a.constants.pop(\'k\')\n\n        assert(\'k\' not in a.constants.keys())\n        \n        new_constants = dict(k=10.0)\n        \n        a.constants = new_constants\n\n        assert(a.constants[\'k\'] == 10.0)\n        \n        del a.constants\n        \n        assert(not bool(a.constants))\n        \ndef test_integration_and_representation():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        assert(a.integration_status() == ""Integration has not been run."")\n        \n        a.integrate()\n        \n        assert(a.integration_status() == ""Integration completed successfully."")\n\n        try:\n            print(str(a))\n            print(repr(a))\n            assert(D.max(D.abs(a.sol(a.t[0]) - y_init)) <= 8*D.epsilon()**0.5)\n            assert(D.max(D.abs(a.sol(a.t[-1]) - analytic_soln(a.t[-1], y_init))) <= 8*D.epsilon()**0.5)\n            assert(D.max(D.abs(a.sol(a.t).T - analytic_soln(a.t, y_init))) <= 8*D.epsilon()**0.5)\n        except:\n            raise\n            \n        for i in a:\n            assert(D.max(D.abs(i.y - analytic_soln(i.t, y_init))) <= 8*D.epsilon()**0.5)\n            \n        assert(len(a.y) == len(a))\n        assert(len(a.t) == len(a))\n        \ndef test_integration_and_nearestfloat_no_dense_output():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=False, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        assert(a.integration_status() == ""Integration has not been run."")\n        \n        a.integrate()\n        \n        assert(a.integration_status() == ""Integration completed successfully."")\n        \n        assert(D.abs(a.t[-2] - a[2*D.pi].t) <= D.abs(a.dt))\n        \ndef test_no_events():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=False, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        a.integrate()\n        \n        assert(a.events is None)\n\n@raises(ValueError)\ndef test_wrong_t0():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=False, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        a.t0 = 2*D.pi\n\n@raises(ValueError)\ndef test_wrong_tf():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=False, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        a.tf = 0.0\n\n@raises(ValueError)\ndef test_not_enough_time_values():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=False, t=(0,), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        a.tf = 0.0\n\ndef test_dt_dir_fix():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=False, t=(0, 2*D.pi), dt=-0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n\n@raises(TypeError)\ndef test_non_callable_rhs():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, k, **kwargs):\n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n            \n            return D.stack([\n                c2 * D.sin(D.to_float(D.asarray(t))) + c1 * D.cos(D.to_float(D.asarray(t))) + D.asarray(t),\n                c2 * D.cos(D.to_float(D.asarray(t))) - c1 * D.sin(D.to_float(D.asarray(t))) + 1\n            ])\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(de_mat, y0=y_init, dense_output=False, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5, constants=dict(k=1.0))\n        \n        a.tf = 0.0\n        \ndef test_DiffRHS():\n    def rhs(t, state, k, **kwargs):\n        return None\n    \n    wrapped_rhs_no_repr = de.DiffRHS(rhs)\n    \n    assert(str(wrapped_rhs_no_repr) == str(rhs))\n    assert(wrapped_rhs_no_repr._repr_markdown_() == str(rhs))\n    \n    wrapped_rhs_no_equ_repr = de.DiffRHS(rhs, equ_repr=None, md_repr=""1"")\n    \n    assert(str(wrapped_rhs_no_equ_repr) == str(rhs))\n    assert(wrapped_rhs_no_equ_repr._repr_markdown_() == ""1"")\n    \n    wrapped_rhs_no_md_repr = de.DiffRHS(rhs, equ_repr=""1"", md_repr=None)\n    \n    assert(str(wrapped_rhs_no_md_repr) == ""1"")\n    assert(wrapped_rhs_no_md_repr._repr_markdown_() == ""1"")\n    \n    wrapped_rhs_both_repr = de.DiffRHS(rhs, equ_repr=""1"", md_repr=""2"")\n    \n    assert(str(wrapped_rhs_both_repr) == ""1"")\n    assert(wrapped_rhs_both_repr._repr_markdown_() == ""2"")\n        \nif __name__ == ""__main__"":\n    np.testing.run_module_suite()\n        '"
desolver/tests/test_event_detection.py,1,"b'import desolver as de\nimport desolver.backend as D\nimport numpy as np\n\ndef test_event_detection_multiple():\n    for ffmt in D.available_float_fmt():\n        if ffmt == \'float16\':\n            continue\n        D.set_float_fmt(ffmt)\n\n        print(""Testing event detection for float format {}"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, **kwargs):    \n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n\n            return D.array([\n                c2 * D.sin(t) + c1 * D.cos(t) + t,\n                c2 * D.cos(t) - c1 * D.sin(t) + 1\n            ])\n        \n        y_init = D.array([1., 0.])\n\n        def time_event(t, y, **kwargs):\n            return t - D.pi/8\n\n        def second_time_event(t, y, **kwargs):\n            return t - D.pi/16\n        \n        time_event.is_terminal = True\n        time_event.direction   = 0\n        second_time_event.is_terminal = False\n        second_time_event.direction   = 0\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, D.pi/4), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5)\n\n        with de.utilities.BlockTimer(section_label=""Integrator Tests"") as sttimer:\n            for i in sorted(set(de.available_methods(False).values()), key=lambda x:x.__name__):\n                try:\n                    a.set_method(i)\n                    print(""Testing {}"".format(a.integrator))\n                    assert(a.integration_status() == ""Integration has not been run."")\n\n                    a.integrate(eta=True, events=[time_event, second_time_event])\n                    \n                    assert(a.integration_status() == ""Integration terminated upon finding a triggered event."")\n\n                    try:\n                        assert(D.abs(a.t[-1] - D.pi/8) <= 10*D.epsilon())\n                        assert(D.abs(a.events[0].t - D.pi/16) <= 10*D.epsilon())\n                        assert(len(a.events) == 2)\n                    except:\n                        print(""Event detection with integrator {} failed with t[-1] = {}"".format(a.integrator, a.t[-1]))\n                        raise RuntimeError(""Failed to detect event for integrator {}"".format(str(i)))\n                    else:\n                        print(""Event detection with integrator {} succeeded with t[-1] = {}"".format(a.integrator, a.t[-1]))\n                    a.reset()\n                except Exception as e:\n                    raise e\n                    raise RuntimeError(""Test failed for integration method: {}"".format(a.integrator))\n            print("""")\n\n        print(""{} backend test passed successfully!"".format(D.backend()))\n        \ndef test_event_detection_single():\n    for ffmt in D.available_float_fmt():\n        if ffmt == \'float16\':\n            continue\n        D.set_float_fmt(ffmt)\n\n        print(""Testing event detection for float format {}"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, **kwargs):    \n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n\n            return D.array([\n                c2 * D.sin(t) + c1 * D.cos(t) + t,\n                c2 * D.cos(t) - c1 * D.sin(t) + 1\n            ])\n        \n        y_init = D.array([1., 0.])\n\n        def time_event(t, y, **kwargs):\n            return t - D.pi/8\n\n        time_event.is_terminal = True\n        time_event.direction   = 0\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, D.pi/4), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5)\n\n        with de.utilities.BlockTimer(section_label=""Integrator Tests"") as sttimer:\n            for i in sorted(set(de.available_methods(False).values()), key=lambda x:x.__name__):\n                try:\n                    a.set_method(i)\n                    print(""Testing {}"".format(a.integrator))\n                    assert(a.integration_status() == ""Integration has not been run."")\n\n                    a.integrate(eta=True, events=time_event)\n                    \n                    assert(a.integration_status() == ""Integration terminated upon finding a triggered event."")\n\n                    try:\n                        assert(D.abs(a.t[-1] - D.pi/8) <= 10*D.epsilon())\n                        assert(len(a.events) == 1)\n                    except:\n                        print(""Event detection with integrator {} failed with t[-1] = {}"".format(a.integrator, a.t[-1]))\n                        raise RuntimeError(""Failed to detect event for integrator {}"".format(str(i)))\n                    else:\n                        print(""Event detection with integrator {} succeeded with t[-1] = {}"".format(a.integrator, a.t[-1]))\n                    a.reset()\n                except Exception as e:\n                    raise e\n                    raise RuntimeError(""Test failed for integration method: {}"".format(a.integrator))\n            print("""")\n\n        print(""{} backend test passed successfully!"".format(D.backend()))\n        \n        \nif __name__ == ""__main__"":\n    np.testing.run_module_suite()'"
desolver/tests/test_float_formats.py,1,"b'import desolver as de\nimport desolver.backend as D\nimport numpy as np\n\ndef test_float_formats():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        de_mat = D.array([[0.0, 1.0],[-1.0, 0.0]])\n\n        @de.rhs_prettifier(""""""[vx, -x+t]"""""")\n        def rhs(t, state, **kwargs):    \n            return de_mat @ state + D.array([0.0, t])\n\n        def analytic_soln(t, initial_conditions):\n            c1 = initial_conditions[0]\n            c2 = initial_conditions[1] - 1\n\n            return D.array([\n                c2 * D.sin(t) + c1 * D.cos(t) + t,\n                c2 * D.cos(t) - c1 * D.sin(t) + 1\n            ])\n\n        def kbinterrupt_cb(ode_sys):\n            if ode_sys[-1][0] > D.pi:\n                raise KeyboardInterrupt(""Test Interruption and Catching"")\n\n        y_init = D.array([1., 0.])\n\n        a = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, 2*D.pi), dt=0.01, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5)\n\n        with de.utilities.BlockTimer(section_label=""Integrator Tests"") as sttimer:\n            for i in sorted(set(de.available_methods(False).values()), key=lambda x:x.__name__):\n                if ""Heun-Euler"" in i.__name__ and D.float_fmt() == ""gdual_real128"":\n                    print(""skipping {} due to ridiculous timestep requirements."".format(i))\n                    continue\n                try:\n                    a.set_method(i)\n                    print(""Testing {}"".format(a.integrator))\n                    try:\n                        a.integrate(callback=kbinterrupt_cb, eta=True)\n                    except KeyboardInterrupt as e:\n                        pass\n                    try:\n                        a.integrate(eta=True)\n                    except:\n                        raise\n\n                    max_diff = D.max(D.abs(analytic_soln(a.t[-1], a.y[0]) - a.y[-1]))\n                    if a.method.__adaptive__ and max_diff >= a.atol * 10 + D.epsilon():\n                        print(""{} Failed with max_diff from analytical solution = {}"".format(a.integrator, max_diff))\n                        raise RuntimeError(""Failed to meet tolerances for adaptive integrator {}"".format(str(i)))\n                    else:\n                        print(""{} Succeeded with max_diff from analytical solution = {}"".format(a.integrator, max_diff))\n                    a.reset()\n                except Exception as e:\n                    print(e)\n                    raise RuntimeError(""Test failed for integration method: {}"".format(a.integrator))\n            print("""")\n\n        print(""{} backend test passed successfully!"".format(D.backend()))\n        \n        \nif __name__ == ""__main__"":\n    np.testing.run_module_suite()\n        '"
desolver/tests/test_torch_gradients.py,2,"b'import desolver as de\nimport desolver.backend as D\nimport numpy as np\n\n@np.testing.dec.skipif(D.backend() != \'torch\', ""PyTorch Unavailable"")\ndef test_gradients():\n    for ffmt in D.available_float_fmt():\n        D.set_float_fmt(ffmt)\n\n        print(""Testing {} float format"".format(D.float_fmt()))\n\n        import torch\n\n        torch.set_printoptions(precision=17)\n        torch.set_num_threads(1)\n\n        device = torch.device(""cuda"" if torch.cuda.is_available() else ""cpu"")\n\n        torch.autograd.set_detect_anomaly(True)\n\n        class NNController(torch.nn.Module):\n\n            def __init__(self, in_dim=2, out_dim=2, inter_dim=50, append_time=False):\n                super().__init__()\n\n                self.append_time = append_time\n\n                self.net = torch.nn.Sequential(\n                    torch.nn.Linear(in_dim+(1 if append_time else 0), inter_dim),\n                    torch.nn.Softplus(),\n                    torch.nn.Linear(inter_dim, out_dim),\n                    torch.nn.Sigmoid()\n                )\n\n                for idx,m in enumerate(self.net.modules()):\n                    if isinstance(m, torch.nn.Linear):\n                        torch.nn.init.xavier_normal_(m.weight, gain=1.0)\n                        torch.nn.init.constant_(m.bias, 0.0)\n\n            def forward(self, t, y, dy):\n                if self.append_time:\n                    return self.net(torch.cat([y.view(-1), dy.view(-1), t.view(-1)]))\n                else:\n                    return self.net(torch.cat([y, dy]))\n\n        class SimpleODE(torch.nn.Module):\n            def __init__(self, inter_dim=10, k=1.0):\n                super().__init__()\n                self.nn_controller = NNController(in_dim=4, out_dim=1, inter_dim=inter_dim)\n                self.A = torch.nn.Parameter(torch.tensor([[0.0, 1.0],[-k, -1.0]], requires_grad=False))\n\n            def forward(self, t, y, params=None):\n                if not isinstance(t, torch.Tensor):\n                    torch_t = torch.tensor(t)\n                else:\n                    torch_t = t\n                if not isinstance(y, torch.Tensor):\n                    torch_y = torch.tensor(y)\n                else:\n                    torch_y = y\n                if params is not None:\n                    if not isinstance(params, torch.Tensor):\n                        torch_params = torch.tensor(params)\n                    else:\n                        torch_params = params\n\n                dy = torch.matmul(self.A, torch_y)\n\n                controller_effect = self.nn_controller(torch_t, torch_y, dy) if params is None else params\n\n                return dy + torch.cat([torch.tensor([0.0]).to(dy), (controller_effect * 2.0 - 1.0)])\n\n        with de.utilities.BlockTimer(section_label=""Integrator Tests""):\n            for i in sorted(set(de.available_methods(False).values()), key=lambda x:x.__name__):\n                try:\n                    yi1 = D.array([1.0, 0.0], requires_grad=True).to(device)\n                    df  = SimpleODE(k=1.0)\n\n                    a = de.OdeSystem(df, yi1, t=(0, 1.), dt=0.0675, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5)\n                    a.set_method(i)\n                    a.integrate(eta=True)\n\n                    dyfdyi = D.jacobian(a.y[-1], a.y[0])\n                    dyi = D.array([0.0, 1.0]).to(device) * D.epsilon()**0.5\n                    dyf = D.einsum(""nk,k->n"", dyfdyi, dyi)\n                    yi2 = yi1 + dyi\n                    \n                    print(a.y[-1].device)\n\n                    b = de.OdeSystem(df, yi2, t=(0, 1.), dt=0.0675, rtol=D.epsilon()**0.5, atol=D.epsilon()**0.5)\n                    b.set_method(i)\n                    b.integrate(eta=True)\n\n                    true_diff = b.y[-1] - a.y[-1]\n\n                    print(D.norm(true_diff - dyf), D.epsilon()**0.5)\n\n                    assert(D.allclose(true_diff, dyf, rtol=4 * D.epsilon()**0.5, atol=4 * D.epsilon()**0.5))\n                    print(""{} method test succeeded!"".format(a.integrator))\n                except:\n                    raise\n                    #raise RuntimeError(""Test failed for integration method: {}"".format(a.integrator))\n            print("""")\n\n        print(""{} backend test passed successfully!"".format(D.backend()))\n        \n\nif __name__ == ""__main__"":\n    np.testing.run_module_suite()'"
desolver/utilities/__init__.py,0,b'from .utilities import *\nfrom . import optimizer\nfrom . import interpolation\n'
desolver/utilities/interpolation.py,0,"b'from .. import backend as D\n\n__all__ = [\n    \'CubicHermiteInterp\'\n]\n\nclass CubicHermiteInterp(object):\n    """"""Cubic Hermite Polynomial Interpolation Class\n\n    Constructs a cubic Hermite polynomial interpolant for a function with values p0 and p1,\n    and gradients m0 and m1 at t0 and t1 respectively.\n    \n    Parameters\n    ----------\n    t0, t1 : float\n        Evaluation points\n    p0, p1 : float or array-type\n        Function values at t0 and t1\n    m0, m1 : float or array-type\n        Function gradients wrt. t and t0 and t1\n    """"""\n    def __init__(self, t0, t1, p0, p1, m0, m1):\n        self.t1 = D.copy(t1)\n        self.t0 = D.copy(t0)\n        self.p0 = D.copy(p0)\n        self.p1 = D.copy(p1)\n        self.m0 = D.copy(m0)\n        self.m1 = D.copy(m1)\n        \n    @property\n    def trange(self):\n        return self.t1 - self.t0\n    \n    @property\n    def tshift(self):\n        return self.t0\n    \n    def __affine_transform(self, t):\n        return (t - self.tshift)/self.trange\n    \n    def __call__(self, t_eval):\n        """"""\n        Parameters\n        ----------\n        t_eval : float or array-type\n           Point to evaluate interpolant at\n        """"""\n        t        = self.__affine_transform(t_eval)\n        t2       = t**2\n        t3       = t2 * t\n        t3mt2    = t3 - t2\n        p2t3m3t2 = 2 * t3mt2 - t2\n        return (1 + p2t3m3t2) * self.p0 + (t3mt2 - t2 + t) * self.trange * self.m0 - p2t3m3t2 * self.p1 + t3mt2 * self.trange * self.m1'"
desolver/utilities/optimizer.py,0,"b'import numpy\nfrom .. import backend as D\n\n__all__ = [\n    \'brentsroot\',\n    \'brentsrootvec\'\n]\n\ndef brentsroot(f, bounds, tol=None, verbose=False):\n    """"""Brent\'s algorithm for finding root of a bracketed function.\n\n    Parameters\n    ----------\n    f : callable\n        callable that evaluates the function whose roots are to be found\n    bounds : tuple of float, shape (2,)\n        lower and upper bound of interval to find root in\n    tol : float-type\n        numerical tolerance for the precision of the root\n    verbose : bool\n        set to true to print useful information\n\n    Returns\n    -------\n    tuple(float-type, bool)\n        returns the location of the root if found and a bool indicating a root was found\n\n    Examples\n    --------\n    \n    >>> def ft(x):\n        return x**2 - (1 - x)**5\n    >>> xl, xu = 0.1, 1.0\n    >>> x0, success = brentsroot(ft, xl, xu, verbose=True)\n    >>> success, x0, ft(x0)\n    (True, 0.34595481584824206, 6.938893903907228e-17)\n    \n    """"""\n    lower_bound, upper_bound = bounds\n    if tol is None:\n        tol = D.epsilon()\n    if tol < D.epsilon():\n        tol = D.epsilon()\n    tol = D.to_float(tol)\n    a,b = D.to_float(lower_bound), D.to_float(upper_bound)\n    fa = f(a)\n    fb = f(b)\n    \n    if fa*fb >= 0:\n        return D.to_float(numpy.inf), False\n    if D.abs(fa) < D.abs(fb):\n        a,b = b,a\n        fa,fb = fb,fa\n    \n    c  = D.copy(a)\n    d  = D.copy(b)\n    fc = f(c)\n    \n    mflag = True\n    conv  = False\n    numiter = 3\n    \n    while not conv:\n        if verbose:\n            print(""[{numiter}] a={a}, b={b}, f(a)={fa}, f(b)={fb}"".format(**locals()))\n        if fa != fc and fb != fc:\n            s =     (a * fb * fc) / ((fa - fb)*(fa - fc))\n            s = s + (b * fa * fc) / ((fb - fa)*(fb - fc))\n            s = s + (c * fa * fb) / ((fc - fa)*(fc - fb))\n        else:\n            s = b - fb * (b - a) / (fb - fa)\n            \n        cond1 = not ((3 * a + b) / 4 < s < b or b < s < (3 * a + b) / 4)\n        cond2 = D.abs(s - b) >= D.abs(b - c)/2\n        cond3 = D.abs(s - b) >= D.abs(c - d)/2\n        cond4 = D.abs(b - c) < tol\n        cond5 = D.abs(c - d) < tol\n        bisect_now = cond1 or (mflag and cond2) or (not mflag and cond3) or (mflag and cond4) or (not mflag and cond5)\n        mflag = bisect_now\n        if mflag:\n            s = (a + b) / 2\n\n        fs = f(s)\n        numiter += 1\n        d  = c\n        \n        if fa * fs < 0:\n            b  = s\n            fb = fs\n        else:\n            a  = s\n            fa = fs\n        \n        if D.abs(fa) < D.abs(fb):\n            a,b = b,a\n            fa,fb = fb,fa\n        \n        conv = (fb == 0 or fs == 0 or D.abs(b - a) < tol)\n    if verbose:\n        print(""[{numiter}] a={a}, b={b}, f(a)={fa}, f(b)={fb}"".format(**locals()))\n    return b, D.abs(f(b)) <= tol\n\ndef brentsrootvec(f, bounds, tol=None, verbose=False):\n    """"""Vectorised Brent\'s algorithm for finding root of bracketed functions.\n\n    Parameters\n    ----------\n    f : list of callables\n        list of callables each of which evaluates the function to find the root of\n    bounds : tuple of float, shape (2,)\n        lower and upper bound of interval to find root in\n    tol : float-type\n        numerical tolerance for the precision of the roots\n    verbose : bool\n        set to true to print useful information\n\n    Returns\n    -------\n    tuple(list(float-type), list(bool))\n        returns a list of the locations of roots and a list of bools indicating whether or not a root was found in the interval\n\n    Examples\n    --------\n    \n    >>> f = lambda x: lambda y: x * y - y**2 + x\n    >>> xl, xu = 0.1, 1.0\n    >>> funcs = [f(i*0.5) for i in range(3)]\n    >>> x0, success = brentsrootvec(funcs, xl, xu, verbose=True)\n    >>> success, x0, [funcs[i](x0[i]) for i in range(len(funcs))]\n    (array([ True,  True,  True]), array([0.        , 1.        , 1.61803399]), [0.0, 0.0, 0.0])\n    \n    """"""\n    lower_bound, upper_bound = bounds\n    if tol is None:\n        tol = D.epsilon()\n    if tol < D.epsilon():\n        tol = D.epsilon()\n    tol = D.to_float(tol)\n    a,b = D.stack([lower_bound for _ in range(len(f))]), D.stack([upper_bound for _ in range(len(f))])\n    \n    def _f(x, msk=None):\n        if msk is None:\n            if verbose:\n                print([f[i](x[i]) for i in range(len(f))])\n                print(f[0](x[0]), f[1](x[1]))\n            return D.stack([f[i](x[i]) for i in range(len(f))])\n        else:\n            return D.stack([f[i](x[i]) if msk[i] else D.to_float(0.0) for i in range(len(f))])\n    \n    if verbose:\n        print(_f(a))\n    \n    conv = D.ones_like(a, dtype=bool)\n    \n    fa = _f(a)\n    fb = _f(b)\n    \n    mask               = (D.abs(fa) < D.abs(fb))\n    a[mask],  b[mask]  = b[mask],  a[mask]\n    fa[mask], fb[mask] = fb[mask], fa[mask]\n    \n    c  = D.copy(a)\n    d  = D.copy(b)\n    s  = D.copy(a)\n    fc = _f(c)\n    fs = D.copy(fc)\n    \n    mflag              = D.ones_like(a, dtype=bool)\n    conv[fa * fb >= 0] = False\n    not_conv           = D.logical_not(conv)\n    numiter            = D.ones_like(a, dtype=D.int64)*3\n    true_conv          = D.abs(_f(b)) <= tol\n    \n    while D.any(conv):\n        if verbose:\n            print(""[{numiter}] a={a}, b={b}, f(a)={fa}, f(b)={fb}, conv={not_conv}"".format(**locals()))\n        mask                      = D.logical_and(fa != fc, fb != fc)\n        mask[not_conv]            = False \n        s[mask]                   = (a[mask] * fb[mask] * fc[mask]) / ((fa[mask] - fb[mask])*(fa[mask] - fc[mask]))\n        s[mask]                   = s[mask] + (b[mask] * fa[mask] * fc[mask]) / ((fb[mask] - fa[mask])*(fb[mask] - fc[mask]))\n        s[mask]                   = s[mask] + (c[mask] * fa[mask] * fb[mask]) / ((fc[mask] - fa[mask])*(fc[mask] - fb[mask]))\n        mask                      = D.logical_not(mask)\n        mask[D.logical_not(conv)] = False\n        s[mask]                   = b[mask] - fb[mask] * (b[mask] - a[mask]) / (fb[mask] - fa[mask])\n            \n        cond1          = D.logical_not(D.logical_or(D.logical_and((3 * a + b) / 4 < s, s < b), D.logical_and(b < s, s < (3 * a + b) / 4)))\n        mask           = cond1\n        cond2          = D.logical_and(mflag, D.abs(s - b) >= D.abs(b - c)/2)\n        mask           = D.logical_or(mask, cond2)\n        cond3          = D.logical_and(D.logical_not(mflag), D.abs(s - b) >= D.abs(c - d) / 2)\n        mask           = D.logical_or(mask, cond3)\n        cond4          = D.logical_and(mflag, D.abs(b - c) < tol)\n        mask           = D.logical_or(mask, cond4)\n        cond5          = D.logical_and(D.logical_not(mflag), D.abs(c - d) < tol)\n        mask           = D.logical_or(mask, cond5)\n        mask[not_conv] = False\n        s[mask]        = (a[mask] + b[mask]) / 2\n        mflag[mask]    = True\n        mask           = D.logical_not(mask)\n        mask[not_conv] = False\n        mflag[mask]    = False\n            \n        fs                 = _f(s, conv)\n        numiter[conv]      = numiter[conv] + 1\n        d                  = c\n        \n        mask               = fa * fs < 0\n        mask[not_conv]     = False\n        b[mask]            = s[mask]\n        fb[mask]           = fs[mask]\n        mask               = D.logical_not(mask)\n        mask[not_conv]     = False\n        a[mask]            = s[mask]\n        fa[mask]           = fs[mask]        \n    \n        mask               = D.abs(fa) < D.abs(fb)\n        mask[not_conv]     = False\n        a[mask],  b[mask]  = b[mask],  a[mask]\n        fa[mask], fb[mask] = fb[mask], fa[mask]\n        \n        conv               = D.logical_not(D.logical_or(D.logical_or(fb == 0, fs == 0), D.abs(b - a) < tol))\n        not_conv           = D.logical_not(conv)\n        true_conv          = D.abs(_f(b)) <= tol\n        \n        if D.any(numiter > 1000):\n            break\n    if verbose:\n        print(""[{numiter}] a={a}, b={b}, f(a)={fa}, f(b)={fb}, conv={true_conv}"".format(**locals()))\n    return b, true_conv'"
desolver/utilities/utilities.py,0,"b'import time\nimport sys\n\n__all__ = [\n    \'convert_suffix\',\n    \'warning\',\n    \'search_bisection\',\n    \'BlockTimer\'\n]\n\ndef convert_suffix(value, suffixes=(\'d\', \'h\', \'m\', \'s\'), ratios=(24, 60, 60), delimiter=\':\'):\n    """"""Converts a base value into a human readable format with the given suffixes and ratios.\n\n    Parameters\n    ----------\n    value : int or float\n        value to be converted\n    suffixes : list of str\n        suffixes for each subdivision (eg. [\'days\', \'hours\', \'minutes\', \'seconds\'])\n    ratios : list of int\n        the relative period of each subdivision (eg. 24 hours in 1 day, 60 minutes in 1 hour, \n        60 seconds in 1 minute -> [24, 60, 60])\n    delimiter : str\n        string to use between each subdivision\n\n    Returns\n    -------\n    str\n        returns string with the subdivision values and suffixes joined together\n\n    Examples\n    --------\n    \n    >>> convert_suffix(3661, suffixes=[\'d\', \'h\', \'m\', \'s\'], ratios=[24, 60, 60], delimiter=\':\')\n    \'0d:1h:1m1.00s\'\n    \n    """"""\n    tValue = value\n    outputValues = []\n    for i in ratios[::-1]:\n        outputValues.append(int(tValue % i))\n        tValue = (tValue - tValue % i) // i\n    outputValues.append(tValue)\n    ret_string = delimiter.join([""{}{}"".format(int(i[0]), i[1]) for i in zip(outputValues[::-1][:-1], suffixes[:-1])])\n    ret_string = ret_string + ""{:.2f}{}"".format(outputValues[0], suffixes[-1])\n    return ret_string\n\ndef warning(*args, **kwargs):\n    """"""Convenience function for printing to sys.stderr. \n\n    Parameters\n    ----------\n    args : variable\n        arguments to be passed to print\n    kwargs : variable\n        keyword arguments to be passed to print\n        \n    Examples\n    --------\n    \n    >>> warning(""Things have failed..."")\n    Things have failed...\n    \n    """"""\n    print(*args, file=sys.stderr, **kwargs)\n\ndef search_bisection(array, val):\n    """"""Finds the index of the nearest value to val in array. Uses the bisection method.\n\n    Parameters\n    ----------\n    array : list of numeric values\n        list to search, assumes the list is sorted (will not work if it isn\'t sorted!)\n    val : numeric\n        numeric value to find the nearest value in the array.\n\n    Returns\n    -------\n    int\n        returns the index of the position in the array with the value closest to val\n\n    Examples\n    --------\n    \n    >>> list_to_search = [1,2,3,4,5]\n    >>> val_to_find    = 2.5\n    >>> idx = search_bisection(list_to_search, val_to_find)\n    >>> idx, list_to_search[idx]\n    (1, 2)\n    \n    """"""\n    \n    jlower = 0\n    jupper = len(array) - 1\n    \n    if val <= array[jlower]:\n        return jlower\n    elif val >= array[jupper]:\n        return jupper\n    \n    while (jupper - jlower) > 1:\n        jmid = (jupper + jlower) // 2\n        if (val >= array[jmid]):\n            jlower = jmid\n        else:\n            jupper = jmid\n            \n    return jlower\n\nclass BlockTimer():\n    """"""Timing Class\n\n    Takes advantage of the with syntax in order to time a block of code.\n    \n    Parameters\n    ----------\n    section_label : str\n        name given to section of code\n    start_now : bool\n        if True the timer is started upon construction, otherwise start() must be called.\n    suppress_print : bool\n        if True a message will be printed upon destruction with the section_label and the code time.\n    """"""\n    def __init__(self, section_label=None, start_now=True, suppress_print=False):\n        self.start_now = start_now\n        self.stopped   = not start_now\n        self.start_time = None\n        self.end_time = None\n        self.label = section_label\n        self.suppress_print = suppress_print\n\n    def __enter__(self):\n        if self.start_now:\n            self.start_time = time.perf_counter()\n        return self\n\n    def __exit__(self, type, value, traceback):\n        if not self.stopped:\n            self.end()\n        if not self.suppress_print:\n            if self.start_time is None and not self.start_now:\n                print(""Timer was never started, cannot give run-time of code."")\n                print(""Set start_now=True to count from start of block to end"")\n            elif self.start_now:\n                if self.label: print(""Section:\\n\\t""+self.label)\n                self.end_time = time.perf_counter()\n                print(""\\tThis code block took {}"".format(convert_suffix(self.end_time - self.start_time)))\n            else:\n                if self.label: print(""Section:\\n\\t""+self.label)\n                print(""\\tBetween start() and end(), the time taken was {}"".format(convert_suffix(self.end_time - self.start_time)))\n\n    def start(self):\n        """"""Method to start the timer\n        """"""\n        self.start_time = time.perf_counter()\n\n    def end(self):\n        """"""Method to stop the timer\n        """"""\n        self.end_time = time.perf_counter()\n        self.stopped  = True\n\n    def elapsed(self):\n        """"""Method to get the elapsed time.\n        \n        Returns\n        -------\n        float\n            Returns the elapsed time since timer start if stop() was not called, otherwise returns the elapsed time\n            between timer start and when elapsed() is called.        \n        """"""\n        \n        if self.end_time is None:\n            return time.perf_counter() - self.start_time\n        else:\n            return self.end_time - self.start_time\n        \n    def restart_timer(self):\n        """"""Method to restart the timer. \n        \n        Sets the start time to now and resets the end time.\n        """"""\n        if self.stopped:\n            self.stopped = False\n        self.start_time = time.perf_counter()\n        self.end_time   = None\n'"
docs/examples/getting_started.py,0,"b'import desolver as de\nimport desolver.backend as D\n\n@de.rhs_prettifier(\n    equ_repr=""[vx, -k*x/m]"",\n    md_repr=r""""""\n$$\n\\frac{dx}{dt} = \\begin{bmatrix}\n   0            & 1 \\\\\n   -\\frac{k}{m} & 0\n   \\end{bmatrix} \\cdot \\begin{bmatrix}x \\\\ v_x\\end{bmatrix}\n$$\n""""""\n)\ndef rhs(t, state, k, m, **kwargs):\n    return D.array([[0.0, 1.0], [-k/m,  0.0]])@state\n\ny_init = D.array([1., 0.])\n\na = de.OdeSystem(rhs, y0=y_init, dense_output=True, t=(0, 2*D.pi), dt=0.01, rtol=1e-9, atol=1e-9, constants=dict(k=1.0, m=1.0))\n\nprint(a)\n\na.integrate()\n\nprint(a)\n\nprint(""If the integration was successful and correct, a[0].y and a[-1].y should be near identical."")\nprint(""a[0].y  = {}"".format(a[0].y))\nprint(""a[-1].y = {}"".format(a[-1].y))\n\nprint(""Maximum difference from initial state after one oscillation cycle: {}"".format(D.max(D.abs(a[0].y-a[-1].y))))'"
desolver/backend/tests/test_backend.py,8,"b'import os\nimport numpy as np\n\ndef test_backend():\n    try:\n        import desolver as de\n        import desolver.backend as D\n        import numpy as np\n        import scipy\n        \n        if ""DES_BACKEND"" in os.environ:\n            assert(D.backend() == os.environ[\'DES_BACKEND\'])\n        \n        if D.backend() not in [\'torch\']:\n            # Default datatype test\n            for i in D.available_float_fmt():\n                D.set_float_fmt(i)\n                assert(D.array(1.0).dtype  == D.float_fmts[D.float_fmt()])\n\n        expected_eps = {\'float16\': 5e-3, \'float32\': 5e-7, \'float64\': 5e-16, \'gdual_double\': 5e-16, \'gdual_vdouble\': 5e-16, \'gdual_real128\': 5e-16}\n        test_array   = np.array([1], dtype=np.int64)\n        # Test Function Evals\n        for i in D.available_float_fmt():\n            D.set_float_fmt(i)\n            assert(D.float_fmt() == str(i))\n            assert(D.epsilon() == expected_eps[str(i)])\n            assert(isinstance(D.available_float_fmt(), list))\n            if not i.startswith(\'gdual\'):\n                assert(D.cast_to_float_fmt(test_array).dtype == str(i))\n            \n            arr1 = D.array([[2.0, 1.0],[1.0, 0.0]])\n            arr2 = D.array([[1.0, 1.0],[-1.0, 1.0]])\n            \n            if not i.startswith(\'gdual\'):\n                arr3 = D.contract_first_ndims(arr1, arr2, 1)\n                arr4 = D.contract_first_ndims(arr1, arr2, 2)\n            \n                true_arr3 = D.array([1.0, 1.0])\n                true_arr4 = D.array(2.)\n\n                assert(D.norm(arr3 - true_arr3) <= 2 * D.epsilon())\n                assert(D.norm(arr4 - true_arr4) <= 2 * D.epsilon())\n            \n            de.utilities.warning(""Testing float format {}"".format(D.float_fmt()))\n            \n            pi = D.to_float(D.pi)\n            \n            assert(np.pi - 2*D.epsilon()          <= pi                        <= np.pi + 2*D.epsilon())\n            assert(np.e - 2*D.epsilon()           <= D.to_float(D.e)           <= np.e + 2*D.epsilon())\n            assert(np.euler_gamma - 2*D.epsilon() <= D.to_float(D.euler_gamma) <= np.euler_gamma + 2*D.epsilon())\n            \n            assert(-2*D.epsilon() <= D.sin(pi) <= 2*D.epsilon())\n            assert(-2*D.epsilon() <= D.cos(pi)+1 <= 2*D.epsilon())\n            assert(-2*D.epsilon() <= D.tan(pi) <= 2*D.epsilon())\n\n            assert(D.asin(D.to_float(1)) == pi/2)\n            assert(D.acos(D.to_float(1)) == 0)\n            assert(D.atan(D.to_float(1)) == pi/4)\n            assert(D.atan2(D.to_float(1), D.to_float(1)) == pi/4)\n\n            assert(D.sinh(pi)        == np.sinh(pi))\n            assert(D.cosh(pi)        == np.cosh(pi))\n            assert(D.tanh(pi)        == np.tanh(pi))\n\n            assert(-3.141592653589793 - 2*D.epsilon()  <= D.neg(pi)   <= -3.141592653589793 + 2*D.epsilon())\n            assert(31.00627668029982 - 10*D.epsilon()  <= D.pow(pi,3) <= 31.00627668029982 + 10*D.epsilon())\n            assert(3.141592653589793 - 2*D.epsilon()   <= D.abs(pi)   <= 3.141592653589793 + 2*D.epsilon())\n            assert(1.77245385090551603 - 2*D.epsilon() <= D.sqrt(pi)  <= 1.77245385090551603 + 2*D.epsilon())\n            assert(23.1406926327792690 - 10*D.epsilon()<= D.exp(pi)   <= 23.1406926327792690 + 10*D.epsilon())\n            assert(22.1406926327792690 - 10*D.epsilon()<= D.expm1(pi) <= 22.1406926327792690 + 10*D.epsilon())\n            assert(1.14472988584940017 - 2*D.epsilon() <= D.log(pi)   <= 1.14472988584940017 + 2*D.epsilon())\n            assert(1.14472988584940017 - 2*D.epsilon() <= D.log(pi)   <= 1.14472988584940017 + 2*D.epsilon())\n            assert(0.49714987269413385 - 2*D.epsilon() <= D.log10(pi) <= 0.49714987269413385 + 2*D.epsilon())\n            assert(1.42108041279429263 - 2*D.epsilon() <= D.log1p(pi) <= 1.42108041279429263 + 2*D.epsilon())\n            assert(1.65149612947231880 - 2*D.epsilon() <= D.log2(pi)  <= 1.65149612947231880 + 2*D.epsilon())\n\n            assert(4.14159265358979324 - 2*D.epsilon() <= D.add(pi,1) <= 4.14159265358979324 + 2*D.epsilon())\n            assert(2.14159265358979324 - 2*D.epsilon() <= D.sub(pi,1) <= 2.14159265358979324 + 2*D.epsilon())\n            assert(D.div(pi,1)       == pi)\n            assert(D.mul(pi,1)       == pi)\n\n            assert(0.31830988618379067 - 2*D.epsilon() <= D.reciprocal(pi)  <= 0.31830988618379067 + 2*D.epsilon())\n            \n            if not i.startswith(\'gdual\'):\n                assert(0.14159265358979324 - 2*D.epsilon() <= D.remainder(pi,3) <= 0.14159265358979324 + 2*D.epsilon())\n                assert(D.ceil(pi)        == 4)\n                assert(D.floor(pi)       == 3)\n                assert(D.round(pi)       == 3)\n                assert(1.1415926535897931 - 2*D.epsilon()  <= D.fmod(pi,2) <= 1.1415926535897931 + 2*D.epsilon())\n\n                assert(D.clip(pi,1,2)    == 2)\n                assert(D.sign(pi)        == 1)\n                assert(D.trunc(pi)       == 3)\n\n                assert(0.9772133079420067 - 2*D.epsilon()    <= D.digamma(pi)             <= 0.9772133079420067 + 2*D.epsilon())\n                assert(0.4769362762044699 - 2*D.epsilon()    <= D.erfinv(D.to_float(0.5)) <= 0.4769362762044699 + 2*D.epsilon())\n                assert(1.7891115385869942 - 2*D.epsilon()    <= D.mvlgamma(pi, 2)         <= 1.7891115385869942 + 2*D.epsilon())\n                assert(D.frac(pi)            == pi - 3)\n                \n            assert(0.9999911238536324 - 2*D.epsilon()    <= D.erf(pi)                 <= 0.9999911238536324 + 2*D.epsilon())\n            assert(8.8761463676416054e-6 - 2*D.epsilon() <= D.erfc(pi)                <= 8.8761463676416054e-6 + 2*D.epsilon())\n            \n            assert(0.9585761678336372 - 2*D.epsilon()    <= D.sigmoid(pi)             <= 0.9585761678336372 + 2*D.epsilon())\n\n            assert(0.5641895835477563 - 2*D.epsilon()    <= D.rsqrt(pi)               <= 0.5641895835477563 + 2*D.epsilon())\n            assert(pi + 0.5 - 2*D.epsilon()              <= D.lerp(pi,pi+1,0.5)       <= pi + 0.5 + 2*D.epsilon())\n            \n            \n            assert(D.addcdiv(pi,1,D.to_float(3),D.to_float(2))   == pi + (1 * (3 / 2)))\n            assert(D.addcmul(pi,1,D.to_float(3),D.to_float(2))   == pi + (1 * (3 * 2)))\n            \n            if not i.startswith(\'gdual\'):\n                assert(-2*D.epsilon() <= D.einsum(""nm->"", D.array([[1.0, 2.0], [-2.0, -1.0]])) <= 2*D.epsilon())\n    except:\n        print(""{} Backend Test Failed"".format(D.backend()))\n        raise\n    print(""{} Backend Test Succeeded"".format(D.backend()))\n    \n\nif __name__ == ""__main__"":\n    np.testing.run_module_suite()\n'"
desolver/exception_types/tests/test_exception_types.py,1,"b'import desolver as de\nimport numpy as np\n\ndef test_recursion_error():\n    try:\n        raise de.exception_types.RecursionError()\n    except de.exception_types.RecursionError:\n        pass\n    except:\n        raise\n    \n    \ndef test_failed_integration_error():\n    try:\n        raise de.exception_types.FailedIntegrationError()\n    except de.exception_types.FailedIntegrationError:\n        pass\n    except:\n        raise\n        \nif __name__ == ""__main__"":\n    np.testing.run_module_suite()\n'"
desolver/utilities/tests/test_optimizer.py,7,"b'import desolver as de\nimport desolver.backend as D\nimport numpy as np\n\ndef test_brentsroot():\n    for fmt in D.available_float_fmt():\n        print(""Set dtype to:"", fmt)\n        D.set_float_fmt(fmt)\n        for _ in range(10):\n            ac_prod = D.array(np.random.uniform(0.9, 1.1))\n            a = D.array(np.random.uniform(-1, 1))\n            a = D.to_float(-1 * (a <= 0) + 1 * (a > 0))\n            c = ac_prod / a\n            b = D.sqrt(0.01 + 4*ac_prod)\n\n            gt_root = -b / (2*a) - 0.1 / (2*a)\n\n            ub  = -b / (2*a)\n            lb  = -b / (2*a) - 1.0 / (2*a)\n\n            fun = lambda x: a*x**2 + b*x + c\n\n            assert(D.to_numpy(D.to_float(D.abs(fun(gt_root)))) <= 32*D.epsilon())\n\n            root, success = de.utilities.optimizer.brentsroot(fun, [lb, ub], 4*D.epsilon(), verbose=True)\n\n            assert(success)\n            assert(np.allclose(D.to_numpy(D.to_float(gt_root)), D.to_numpy(D.to_float(root)), 32*D.epsilon(), 32*D.epsilon()))\n            assert(D.to_numpy(D.to_float(D.abs(fun(root)))) <= 32*D.epsilon())\n\ndef test_brentsrootvec():\n    for fmt in D.available_float_fmt():\n        print(""Set dtype to:"", fmt)\n        D.set_float_fmt(fmt)\n        if fmt == \'gdual_vdouble\':\n            continue\n        for _ in range(10):\n            slope_list     = D.array(np.copysign(np.random.uniform(0.9, 1.1, size=25), np.random.uniform(-1, 1, size=25)))\n            intercept_list = slope_list\n\n            gt_root_list = -intercept_list/slope_list\n\n            fun_list = [(lambda m,b: lambda x: m*x + b)(m,b) for m,b in zip(slope_list, intercept_list)]\n\n            assert(all(map((lambda i: D.to_numpy(D.to_float(D.abs(i))) <= 32*D.epsilon()), map((lambda x: x[0](x[1])), zip(fun_list, gt_root_list)))))\n\n            root_list, success = de.utilities.optimizer.brentsrootvec(fun_list, [D.min(gt_root_list) - 1., D.max(gt_root_list) + 1.], 4*D.epsilon(), verbose=True)\n\n            assert(np.all(D.to_numpy(success)))\n            assert(np.allclose(D.to_numpy(D.to_float(gt_root_list)), D.to_numpy(D.to_float(root_list)), 32*D.epsilon(), 32*D.epsilon()))\n\n            assert(all(map((lambda i: D.to_numpy(D.to_float(D.abs(i))) <= 32*D.epsilon()), map((lambda x: x[0](x[1])), zip(fun_list, root_list)))))\n\nif __name__ == ""__main__"":\n    np.testing.run_module_suite()\n'"
desolver/utilities/tests/test_utilities.py,1,"b'import desolver as de\nimport desolver.backend as D\nimport numpy as np\n\ndef test_convert_suffix():\n    assert(de.utilities.convert_suffix(3661) == ""0d:1h:1m1.00s"")\n\ndef test_bisection_search():\n    l1 = [0.0, 1.0, 2.0, 3.0, 5.0, 10.0]\n\n    for idx, i in enumerate(l1):\n        assert(de.utilities.search_bisection(l1, i) == idx)\n    \ndef test_BlockTimer():\n    try:\n        with de.utilities.BlockTimer(start_now=False) as test:\n            assert(test.start_time is None and not test.start_now)\n    except:\n        raise\n    with de.utilities.BlockTimer(start_now=False) as test:\n        assert(isinstance(test.start_now, bool) and test.start_now == False)\n        assert(test.start_time is None)\n        assert(test.end_time is None)\n        test.start()\n        assert(isinstance(test.start_time, float))\n        assert(isinstance(test.elapsed(), float) and test.elapsed() > 0)\n        test.end()\n        assert(isinstance(test.end_time, float))\n        assert(isinstance(test.elapsed(), float) and test.elapsed() > 0)\n        assert(test.stopped == True)\n        test.restart_timer()\n        assert(test.end_time is None)\n        assert(test.stopped == False)\n\nif __name__ == ""__main__"":\n    np.testing.run_module_suite()\n'"
