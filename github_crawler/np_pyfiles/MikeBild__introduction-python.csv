file_path,api_count,code
apps/event-budgets/dropbox-sync.py,0,"b""import dropbox\nimport schedule\nimport sys\nimport os\n\ndbx = dropbox.Dropbox(os.getenv('DROPBOX_TOKEN'))\n\ndef job():\n  files = dbx.files_list_folder('/python-in-a-nutshell-data')\n  for f in [f.path_lower for f in files.entries]:\n    dbx.files_download_to_file('.' + f, f)\n    print('Synced file:', f)\n\nschedule.every(5).seconds.do(job)\n\nwhile True:\n  try:\n    schedule.run_pending()\n  except (KeyboardInterrupt, SystemExit):\n    print('Exiting')\n    sys.exit()"""
apps/event-budgets/event_budget.py,0,"b""#!/usr/bin/env python3\n\nimport pandas\n\ndef load_event_buget(f):\n  event_buget = pandas.read_excel(f, index_col='Description').transpose()\n  id = event_buget['Date']['Content'].strftime('%d-%m-%y')\n  event_buget.insert(0, 'Id', id)\n  expenses = pandas.read_excel(f, sheet_name='Expenses')\n  expenses.insert(0, 'Id', id)\n  expenses = expenses.assign(Total = lambda x: x.Units * x.Estimate)\n  event_buget = expenses.merge(event_buget, on='Id').dropna(axis=1)\n  return event_buget\n\ndef group_by_category(func):\n  def wrapper(f):\n    expenses = func(f)\n    return expenses.groupby(['Category']).agg({'Total': [sum, min, max]})\n  return wrapper\n\ndef to_pie_plot(func):\n  def wrapper(f):\n    grouped = func(f)\n    return grouped['Total']['sum'].plot(kind='pie', title='Totals by Category', autopct='%1.1f%%', figsize=(17,10))\n  return wrapper\n\n@to_pie_plot\n@group_by_category\ndef __as_bar_plot(f):\n  return load_event_buget(f)\n\nif __name__ == '__main__':\n  plot = __as_bar_plot('python-in-a-nutshell-data/Q1-18-python-in-a-nutshell.xlsx')\n  plot.get_figure().savefig('output.png')\n\n# if __name__ == '__main__':\n#   plot = to_pie_plot(group_by_category(load_event_buget))('python-in-a-nutshell-data/Q1-18-python-in-a-nutshell.xlsx')\n#   plot.get_figure().savefig('output.png')\n"""
apps/event-budgets/event_budget_board.py,0,"b""#!/usr/bin/env python3\n\nimport pandas\nfrom glob import glob\nfrom event_budget import load_event_buget\n\ndef event_budget_board():\n    all_event_files = glob('python-in-a-nutshell-data/*.xlsx')\n    return pandas.concat(load_event_buget(f) for f in all_event_files)\n\ndef group_by_place_and_category(func):\n  def wrapper():\n    return func().groupby(['Place', 'Category']).agg({'Total': sum})\n  return wrapper\n\ndef to_bar_plot(func):\n  def wrapper():\n    return func()['Total'].unstack('Category').plot(kind='bar', title='Totals by Place & Category', stacked=True, figsize=(17,10))\n  return wrapper\n\nif __name__ == '__main__':\n  plot = to_bar_plot(group_by_place_and_category(event_budget_board))()\n  plot.get_figure().savefig('board.png')\n"""
apps/event-budgets/server.py,0,"b""from flask import Flask, Response\nfrom io import BytesIO\nfrom event_budget_board import group_by_place_and_category, event_budget_board, to_bar_plot\n\napp = Flask(__name__)\n\n@app.route('/board')\ndef board_as_json():\n  return Response(group_by_place_and_category(event_budget_board)().reset_index().to_json(), mimetype='application/json')\n\n@app.route('/plot')\ndef board_as_plot():\n  img = BytesIO()\n  plot = to_bar_plot(group_by_place_and_category(event_budget_board))()\n  plot.get_figure().savefig(img, format='png')\n  img.seek(0)\n  return Response(img, mimetype='image/png')\n\nif __name__ == '__main__':\n  app.run(debug=True, port=8080)"""
data-analysis/examples/1-matplotlib.py,0,"b'"""""" Basic usage of matplotlib """"""\n\nfrom matplotlib import pyplot as plt\n\n# Load data series\nx = [1, 3, 7]\n\n# Plot\nplt.plot(x)\n\n# Save as PDF\nplt.savefig(\'fig_test.pdf\', dpi=600, format=\'pdf\')\n\n# Figure\nplt.show()'"
data-analysis/examples/1-numpy.py,17,"b'"""""" NumPy - Examples in a Nutshell """"""\nimport numpy as np\n\n# Creation\na = np.array([1, 2, 3])\nprint(\'Creation:\', a)\n\nb = np.array([(1.5, 2, 3), (4, 5, 6)], dtype=float)\nprint(\'Creation (2D, typed):\', b)\n\nzeros = np.zeros(3)\nzeros2D = np.zeros((3, 4))\nprint(\'Zeros:\', zeros)\nprint(\'Zeros (2D):\', zeros2D)\n\narange = np.arange(10)\nprint(\'Arange:\', arange)\narange = np.arange(10, 25, 2, dtype=int)\nprint(\'Arange (start, stop, step):\', arange)\n\nrandom = np.random.random((2, 2))\nprint(\'Random (2D):\', random)\n\n# Selection\n\nprint(\'Selection:\', arange[2])\nprint(\'Selection (2D):\', random[1, 1])\nprint(\'Selection (Slice):\', arange[2:4])\nprint(\'Index (Boolean):\', arange[arange>15])\n\n# Input/Output\n\ndata = np.loadtxt(""numpy.txt"")\ndata = np.genfromtxt(""numpy.txt"", delimiter=\';\')\nnp.savetxt(""numpy.txt"", random, delimiter=\';\')\n\n# Compare\n\nprint(\'Compare (per Element):\', a == a)\nprint(\'Compare (Array):\', np.array_equal(a, a))\n\n# Aggregates\n\nprint(\'Sum:\', a.sum())\nprint(\'Min:\', a.min())\nprint(\'Max:\', a.max())\nprint(\'Mean:\', a.mean())\n\n# Copy\nc = np.copy(a)\nprint(\'Copy:\', c)\n\n# Sort\nsorting = np.random.random(3)\nsorting.sort()\nprint(\'Sort:\', sorting)\n\n# Manipulation\n\nprint(\'Flatten:\', random.ravel())\nreshape = np.random.random((2, 2))\nreshape.resize(4, 2)\nprint(\'Resize:\', reshape)\n\nmanipulation = np.append(reshape, np.array([[1,2]]), axis=0)\nprint(\'Append:\', manipulation)\n\nmanipulation = np.insert(manipulation, 2, np.array([[3,4]]), axis=0)\nprint(\'Insert:\', manipulation)\n\nmanipulation = np.delete(manipulation, 2, axis=0)\nprint(\'Delete:\', manipulation)'"
data-analysis/examples/1-pandas.py,0,"b""import pandas as pd\n\n# Series\nseries = pd.Series([1, 2.1, 3], index=['a', 'b', 'c'], dtype=int)\nprint('Series:', series)\n\n# DataFrame\ndata = {\n  'Country': ['Germany', 'India', 'Swiss'],\n  'Capital': ['Berlin', 'New Delhi', 'Bern'],\n  'Population': [82457000, 1339180000, 8401000, ]\n}\n\ndf = pd.DataFrame(data, columns=['Country', 'Capital', 'Population'])\nprint('DataFrame:', df)"""
data-analysis/examples/2-matplotlib.py,1,"b'"""""" NumPy - usage of NumPy and MatPlotLib""""""\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Calculate data series\nx = np.arange(1, 11)\ny = 2 * x + 5\n\n# Plot\nplt.title(\'MatPlotLib Example\')\nplt.xlabel(\'x axis caption\')\nplt.ylabel(\'y axis caption\')\nplt.plot(x, y, \'ob\')\n\n# Save as PNG\nplt.savefig(\'fig_test.png\', format=\'png\')\n\n# Figure\nplt.show()'"
data-analysis/examples/3-matplotlib.py,3,"b'"""""" SubPlots - multiple plots """"""\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Calculate sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Setup a subplot grid that has height 2 and width 1\n\n# Activate and plot first subplot\nplt.subplot(2, 1, 1)\nplt.plot(x, y_sin)\nplt.title(\'Sine\')\n\n# Activate and plot second subplot\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title(\'Cosine\')\n\n# Figure\nplt.show()'"
deployment/examples/app.py,0,"b'#!/usr/bin/env python3\n\n# Simple types\nboolean = True and False\nstring = \'Hello World!\'\ninteger = 0\ncomplex = 0j\nfloat = 0.0\nnone = None\n\nprint(\'Simple:\', string)\n\n# Sequences\nlist = [1, \'a\', 0.0]\ntuple = (1, \'a\', 0.0)\ndictionary = {\n  \'key1\': \'value 1\',\n  \'key2\': \'value 2\'\n}\nimmutable_set = set([\'a\', \'b\'])\n\nfor item in list:\n  # continue\n  # break\n  print(item)\n\n# Conditions\nif list:\n  print(\'Is a list\')\nelif not list:\n  print(\'Is not a list\')\nelse:\n  print(\'What else ;-)\')\n\nsomething = \'123\' if list else \'456\'\n\n# Function definition\ndef my_function(name=\'Mike\'):\n  """"""A \'Hello World!\' function""""""\n  return \'Hello \' + name\n\nprint(""Output:"", my_function(\'John\'))\n\n# DocString\nhelp(my_function.__doc__)\n\n# Lambda\nmy_func = lambda name=\'Mike\': \'Hello \' + name\nprint(""Output:"", my_func(\'John\'))\n\n# Input/Output\ninput = input(""Input please: "")\nprint(\'Output:\', input)\n\n# Class\nclass Parent(object):\n  value = 0\n  __private_value = 0\n  def __init__(self, value = 100):\n    self.__private_value = value\n    self.value = value + value\n  def getInstance(self):\n    return self\n  def getPrivateValue(self):\n    return self.__private_value\n\nparent = Parent(10)\nprint(dir(parent))\nprint(\'Class:\', parent.value, parent.getPrivateValue())\n\n# Module\n\nimport sys\nprint(\'Module Search Path:\', sys.path)\nfrom sys import path\nprint(\'Module Search Path:\', path)\n'"
python/examples/11-argparse.py,0,"b'import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(""-v"", ""--verbosity"", action=""store_true"", default=0, help=""increase output verbosity"")\nparser.add_argument(""-p"", ""--port"", default=8080, help=""set port"")\nargs = parser.parse_args()\nprint(\'Verbosity level:\', args.verbosity)\nprint(\'Port:\', args.port)'"
python/examples/classes.py,0,"b'class Website:\n  # constructor\n  def __init__(self, url, founding_year, free_to_use):\n    self.url = url\n    self.founding_year = founding_year\n    self.free_to_use = free_to_use\n  # method\n  def info(self):\n    print(""URL:"", self.url)\n    print(""Founding year:"", self.founding_year)\n    print(""Free to use:"", self.free_to_use)\n\nWebsite.is_online = True\n\ngithub = Website(\'https://github.com/\', 2008, True)\ngithub.info()\n\nprint(""Class attribute (is_online):"", Website.is_online)'"
python/examples/collection.py,0,"b'import collections\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Named tuples\nWebsite = collections.namedtuple(\'Website\', [\'url\', \'founding_year\', \'free_to_use\'])\ngithub = Website(\'https://github.com/\', 2008, True)\nprint(""Named tuples (all):"", github)\nprint(""Named tuples (url):"", github.url)\n(url, founding_year, free_to_use) = github\nprint(""Named tuples (unpack):"", url, founding_year, free_to_use)\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Deque\nnames = collections.deque([\'John\', \'Mike\', \'Max\', \'Hans\'], maxlen=3)\nprint(""Deque:"", names)\nprint(""Deque pop (right):"", names.pop())\nprint(""Deque pop (left):"", names.popleft())\nprint(""Deque to list:"", list(names))\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Counter\nwords = [\'hello\', \'there\', \'this\', \'test\', \'is\', \'a\', \'hello\', \'test\']\ncounts = collections.Counter(words)\nprint(\'Counter:\', [str(word + "":"" + str(count)) for (word, count) in counts.items()])'"
python/examples/conditionals.py,0,"b'# if/else example\n\npassword = input(""Enter your password: "")\nif password == ""secret"":\n    print(""That\'s correct, welcome!"")\nelse:\n    print(""Access denied."")\n\n# elif example\n\nword = input(""Enter something: "")\nprint(word)\nif word == ""hi"":\n  print(""Hi to you too!"")\nelif word == ""hello"":\n  print(""Hello hello!"")\nelse:\n  print(""I don\'t know what"", word, ""means."")'"
python/examples/data-types.py,0,"b'from functools import reduce\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# List\nnames = [\'John\', \'Mike\', \'Max\']\nprint(""List:"", names, ""Length:"", len(names))\n\nnames += [\'Peter\']\nprint(""Concat:"",names, ""Length:"", len(names))\nprint(""Slice:"", names[1:3])\nprint(""Every second:"", names[::2])\nprint(""Sorted (lexicographical):"", sorted(names))\nprint(""Sorted (custom):"", sorted(names, key=lambda x: len(x)))\nprint(""Join:"", ""|"".join(names))\nprint(""Map:"", map(lambda x: x + x, names))\nprint(""Filter:"", filter(lambda x: len(x) > 3, names))\nprint(""Reduce:"", reduce(lambda x,y: x + \'|\' + y, names))\n\nnames_repeat = (names + [\'Klaus\']) * 2\nprint(""Repeat:"", names_repeat, len(names_repeat))\n\nprint(""Comprehensions:"", [len(x) for x in names])\nprint(""Comprehensions (conditional):"", [x+x for x in names if len(x) > 3])\nprint(""Comprehensions (nested):"", [(x,y) for x in names for y in [1, 2, 3]])\n\nfor name in names:\n  print(""Loop:"", name)\n\nfor index, item in enumerate(names):\n  print(""Enumerate"", index, item)\n\nnames_iterator = iter(names)\nprint(""Iterator:"", names_iterator.__next__())\nprint(""Iterator:"", names_iterator.__next__())\n\nnames.append(\'Klaus\')\nprint(""Append:"", names)\nnames.reverse()\nprint(""Reverse:"", names)\nnames.extend([\'Charli\'])\nprint(""Extend:"", names)\nnames.insert(3, \'Kate\')\nprint(""Insert:"", names)\nnames.remove(\'Kate\')\nprint(""Remove:"", names)\nprint(""Pop:"", names.pop(), names)\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Tuple\nthing = (1, 2, 3)\nthing += 4,\nprint(""Tuple:"", thing)\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Set\n\nhelloworld = {\'Hello\', \'World\'}\nprint(""Set basic:"", [x for x in helloworld])\n\n# Create a set from sequence\nhello = set(\'hello\')\nprint(""Set from sequence:"", [x for x in hello])\n\n# Modify set\n\nhelloworld.add(\'Python\')\nprint(""Set add:"", [x for x in helloworld])\nhelloworld.remove(\'Python\')\nprint(""Set remove:"", [x for x in helloworld])\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Dictionary\nnames_and_ages = {\n  \'Max\': 12,\n  \'Mike\': 38\n}\nprint(""Dictionary:"", names_and_ages, ""Length:"", len(names_and_ages))\nprint(""Index access:"", names_and_ages[\'Mike\'])\nprint(""Values:"", names_and_ages.values())\nprint(""Items:"", names_and_ages.items())\nprint(""Find:"", (\'Mike\', 38) in names_and_ages.items())\nfor name, age in names_and_ages.items():\n  print(""Loop:"", name, age)'"
python/examples/decorators.py,0,"b'print(\'\'.join([\'-\' for x in range(70)]))\n# Functional decorator\ndef functional_decorator(f):\n  def function_wrapper():\n    print(""Decorating"", f.__name__)\n    print(""Before calling "" + f.__name__)\n    f()\n    print(""After calling "" + f.__name__)\n  return function_wrapper\n\n# Call by function composition\ndef functional():\n  print(""inside functional()"")\n\nfunctional = functional_decorator(functional)\nfunctional()\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Call by @decorator syntax\n@functional_decorator\ndef functional_decorated():\n  print(""inside functional_decorated()"")\n\nfunctional_decorated()\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Decorator with Parameter\ndef greeting(expr):\n  def greeting_decorator(func):\n    def function_wrapper(x):\n      print(expr + "", "" + func.__name__ + "" returns:"")\n      func(x)\n    return function_wrapper\n  return greeting_decorator\n\n@greeting(""Hello!!!"")\ndef foo(x):\n  print(x, 42)\nfoo(""Hi"")\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Passing-Through all parameters\ndef call_counter(func):\n  def function_wrapper(*args, **kwargs):\n    function_wrapper.calls += 1\n    return func(*args, **kwargs)\n  function_wrapper.calls = 0\n\n  return function_wrapper\n\n@call_counter\ndef succ(x):\n  return x + 1\n\nprint(""Success calls before:"", succ.calls)\nfor i in range(10):\n  succ(i)\nprint(""Success calls after:"", succ.calls)\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Class decorator\nclass class_decorator:\n  def __init__(self, f):\n    self.f = f\n\n  def __call__(self):\n    print(""Decorating"", self.f.__name__)\n    print(""Before calling "" + self.f.__name__)\n    self.f()\n    print(""After calling "" + self.f.__name__)\n\n@class_decorator\ndef class_decorated():\n    print(""inside class_decorated()"")\n\nclass_decorated()'"
python/examples/env-os.py,0,"b""#!/usr/bin/env python3\n\nimport os\n\nprint('Home:', os.environ['HOME'])\nprint('My:', os.environ.get('MY'))\nprint('Foo:', os.environ.get('FOO', 'default_value'))\n"""
python/examples/exceptions.py,0,"b'try:\n  int(\'lol\')\nexcept Exception:\n  print(""Oops!"")\n\n\ntry:\n  123 + \'hello\'\nexcept ValueError:\n  print(\'wrong value\')\nexcept TypeError:\n  print(\'wrong type\')\n\nimport sys\n\ntext = input(""Enter a number: "")\ntry:\n  number = int(text)\nexcept ValueError:\n  print(""\'%s\' is not a number."" % text, file=sys.stderr)\n  sys.exit(1)\nprint(""Your number doubled is %d."" % (number * 2))'"
python/examples/files.py,0,"b'full_content = \'\'\nwith open(\'hello.txt\', \'r\') as f:\n  full_content = f.read()\nprint(""Full content:"", full_content)\n\nlines = []\nwith open(\'hello.txt\', \'r\') as f:\n  for line in f:\n    lines.append(line)\nprint(""Lines:"", lines)\n\nwith open(\'hello-new.txt\', \'w\') as f:\n  print(""Hello World!"", file=f)\n\nwith open(\'hello.txt\', \'a\') as f:\n  print(""Hello World!"", file=f)'"
python/examples/functional.py,0,"b'print(\'\'.join([\'-\' for x in range(70)]))\n# Functions are objects\ndef my_func(x):\n  print(""Functions are objects:"", x, my_func.foo)\nmy_func.foo = \'foo\'\nprint(dir(my_func))\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Named and anonymous functions\nmy_lambda = lambda x: print(""Lambda:"", x, my_lambda.bar)\nmy_lambda.bar = \'bar\'\nmy_lambda(42)\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Functions inside functions\ndef f():\n  def g():\n    print(""Hi, it\'s me \'g\'"")\n    print(""Thanks for calling me"")\n\n  print(""This is the function \'f\'"")\n  print(""I am calling \'g\' now:"")\n  g()\n\nf()\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Function as parameter\ndef g():\n  print(""Hi, it\'s me \'g\'"")\n  print(""Thanks for calling me"")\n\ndef f(func):\n  print(""Hi, it\'s me \'f\'"")\n  print(""I will call \'func\' now"")\n  func()\n\nf(g)\n\nprint(\'\'.join([\'-\' for x in range(70)]))\n# Returning a function\ndef f(x):\n  def g(y):\n    return y + x + 3\n  return g\n\nnf1 = f(1)\n\nprint(nf1(1))\nprint(f(3)(1))'"
python/examples/functions.py,0,"b'# pass\ndef do_nothing():\n  pass\n\ndo_nothing()\n\n# side effect\n\ndef print_hi():\n  print(""Hi!"")\n\nprint_hi()\n\n# parameter\ndef print_message(message):\n  print(message)\n\nprint_message(""Hello World!"")\n\n## return a value\ndef get_username():\n  return input(""Username: "")\n\na_username = get_username()\nprint(""Your username:"", a_username)\n\n## return multiple values via construction/destruction\ndef get_password():\n  password = input(""Password: "")\n  verify = input(""Verify: "")\n  return (password, verify)\n\n(password, verify) = get_password()\nprint(""Your password:"", password)\nprint(""Your verify: "", verify)\n\n# lambda function\nadd = lambda x,y: x + y\nadd5 = lambda y: add(5, y)\nprint(""Lambda add:"", add(5, 5))\nprint(""Lambda add5:"", add5(10))'"
python/examples/modules.py,0,"b'import random\nprint(""A random number between 1 and 3:"", random.randint(1, 3))\n\nfrom random import randint\nprint(""A random number between 1 and 3:"", randint(1, 3))\n\nfrom random import randint, shuffle\nnumbers = [1,2,randint(3, 6)]\nshuffle(numbers)\nprint(""List shuffle:"", numbers)\n\nimport mymodule\nprint(""My module random:"", mymodule.rand())\n'"
python/examples/mymodule.py,0,"b'from random import randint\n\ndef rand():\n  return randint(1, 3)'"
python/examples/python3.py,0,"b""a, b, *rest = range(10)\nprint('Unpacking:', a, b, rest)\n\ndef f(a, b, *args, option=True):\n  print('Keyword only arguments:', a, b, args, option)\n\nf('a', 'b', 'c', option=False)\n\n# Iterators\nprint('Iterators:', ', '.join(map(str, range(3))))\n\n# Yield from\ndef gen():\n  yield from ['a', 'b']\nprint('Yield from:', ', '.join(gen()))\n"""
python/examples/signal-handler.py,0,"b""#!/usr/bin/env python3\n\nimport signal\nimport sys\n\ndef signal_handler(signal, frame):\n  print('You pressed Ctrl+C!')\n  sys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\n\nprint('Press Ctrl+C')\nsignal.pause()"""
python/examples/switch-alternative.py,0,"b'switch = {\n  \'a\': lambda x: x * 5,\n  \'b\': lambda x: x + 7,\n  \'c\': lambda x: x - 2\n}\n\ncalulation = input(""Choose calculation: "")\nfactor = input(""Enter a factor: "")\n\nprint (""Result: "", switch[calulation](int(factor)))'"
python/examples/testing.py,0,"b""import unittest\nimport testing_sut\n\nclass MyTestClass(unittest.TestCase):\n  @classmethod\n  def setUpClass(cls):\n    pass\n\n  @classmethod\n  def tearDownClass(cls):\n    pass\n  def setUp(self):\n    pass\n\n  def tearDown(self):\n    pass\n\n  def test_answer_should_success(self):\n    assert testing_sut.func(3) == 4\n\n  def test_answer_should_fail(self):\n    assert testing_sut.func(3) == 5\n\nif __name__ == '__main__':\n  unittest.main()"""
python/examples/testing_sut.py,0,b'def func(x):\n  return x + 1'
web/examples/1-app.py,0,"b""from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n  return 'Hello World!'\n\nif __name__ == '__main__':\n  app.run(debug=True, port=8080)"""
web/examples/2-html.py,0,"b""from flask import Flask, request, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n  return render_template('2-html.html')\n\n@app.route('/forms', methods=['POST'])\ndef forms():\n  return 'You said: ' + request.form['text']\n\nif __name__ == '__main__':\n  app.run(debug=True, port=8080)"""
web/examples/3-json.py,0,"b""from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/json', methods=['GET', 'POST'])\ndef get_username():\n  print('Request:', request.json)\n\n  res = {\n    'username': 'John Doe',\n  }\n\n  if request.json:\n    res.update(request.json)\n  else: res\n\n  return jsonify(res)\n\nif __name__ == '__main__':\n  app.run(debug=True, port=8080)"""
web/examples/4-stream.py,0,"b""from flask import Flask, stream_with_context, request, Response\n\napp = Flask(__name__)\n\n@app.route('/stream')\ndef streamed_response():\n  @stream_with_context\n  def generate():\n    yield 'Hello;'\n    yield request.args['name']\n  return Response(generate(), mimetype='text/csv')\n\nif __name__ == '__main__':\n  app.run(debug=True, port=8080)"""
web/examples/5-testing.py,0,"b'from app import app\nimport unittest\n\nclass FlaskAppTests(unittest.TestCase):\n  def setUp(self):\n    self.app = app.test_client()\n    self.app.testing = True\n\n  def test_home_status_code(self):\n    result = self.app.get(\'/\')\n    self.assertEqual(result.status_code, 202)\n\n  def test_home_data(self):\n    result = self.app.get(\'/\')\n    self.assertEqual( b\'Hello World!\', result.data)\n\nif __name__ == ""__main__"":\n  unittest.main()'"
web/examples/app.py,0,"b""from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n  return 'Hello World!', 202\n\nif __name__ == '__main__':\n  app.run(debug=True, port=8080)"""
