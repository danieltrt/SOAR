file_path,api_count,code
Intro Data Science/9. MapReduce/1. Counting Words Serially/quiz.py,0,"b'# Import libraries\nimport logging\nimport sys\nimport string\n\nfrom util import logfile\nlogging.basicConfig(filename=logfile, format=\'%(message)s\', level=logging.INFO, filemode=\'w\')\n\ndef word_count():\n    # For this exercise, write a program that serially counts the number of occurrences\n    # of each word in the book Alice in Wonderland.\n    #\n    # The text of Alice in Wonderland will be fed into your program line-by-line.\n    # Your program needs to take each line and do the following:\n    # 1) Tokenize the line into string tokens by whitespace\n    #    Example: ""Hello, World!"" should be converted into ""Hello,"" and ""World!""\n    #    (This part has been done for you.)\n    #\n    # 2) Remove all punctuation\n    #    Example: ""Hello,"" and ""World!"" should be converted into ""Hello"" and ""World""\n    #\n    # 3) Make all letters lowercase\n    #    Example: ""Hello"" and ""World"" should be converted to ""hello"" and ""world""\n    #\n    # Store the the number of times that a word appears in Alice in Wonderland\n    # in the word_counts dictionary, and then *print* (don\'t return) that dictionary\n    #\n    # In this exercise, print statements will be considered your final output. Because\n    # of this, printing a debug statement will cause the grader to break. Instead, \n    # you can use the logging module which we\'ve configured for you.\n    #\n    # For example:\n    # logging.info(""My debugging message"")\n    #\n    # The logging module can be used to give you more control over your\n    # debugging or other messages than you can get by printing them. Messages \n    # logged via the logger we configured will be saved to a\n    # file. If you click ""Test Run"", then you will see the contents of that file\n    # once your program has finished running.\n    # \n    # The logging module also has other capabilities; see \n    # https://docs.python.org/2/library/logging.html\n    # for more information.\n\n    word_counts = {}\n    for line in sys.stdin:\n        data = line.strip().split("" "")\n        for value in data:\n            value = value.translate(string.maketrans("""",""""), string.punctuation).lower()\n            if value in word_counts:\n                word_counts[value] += 1\n            else:\n                word_counts[value] = 1\n    print (word_counts)\n\nword_count()\n'"
Intro Data Science/9. MapReduce/2. Mapper and Reducer with Aadhaar Data/aadhaar_generated_mapper.py,0,"b'import sys\nimport string\nimport logging\n\nfrom util import mapper_logfile\nlogging.basicConfig(filename=mapper_logfile, format=\'%(message)s\',\n                    level=logging.INFO, filemode=\'w\')\n\ndef mapper():\n    \n    #Also make sure to fill out the reducer code before clicking ""Test Run"" or ""Submit"".\n\n    #Each line will be a comma-separated list of values. The\n    #header row WILL be included. Tokenize each row using the \n    #commas, and emit (i.e. print) a key-value pair containing the \n    #district (not state) and Aadhaar generated, separated by a tab. \n    #Skip rows without the correct number of tokens and also skip \n    #the header row.\n\n    #You can see a copy of the the input Aadhaar data\n    #in the link below:\n    #https://www.dropbox.com/s/vn8t4uulbsfmalo/aadhaar_data.csv\n\n    #Since you are printing the output of your program, printing a debug \n    #statement will interfere with the operation of the grader. Instead, \n    #use the logging module, which we\'ve configured to log to a file printed \n    #when you click ""Test Run"". For example:\n    #logging.info(""My debugging message"")\n    #\n    #Note that, unlike print, logging.info will take only a single argument.\n    #So logging.info(""my message"") will work, but logging.info(""my"",""message"") will not.\n    \n    dist = 0\n    adge = 0\n    for line in sys.stdin:\n        data = line.split(\',\')\n        if data[3] == ""District"":\n            dist = data.index(""District"")\n            adge = data.index(""Aadhaar generated"")\n        else:\n            output = data[dist] + \'\\t\' + data[adge]\n            print output\n\nmapper()\n'"
Intro Data Science/9. MapReduce/2. Mapper and Reducer with Aadhaar Data/aadhaar_generated_reducer.py,0,"b'import sys\nimport logging\n\nfrom util import reducer_logfile\nlogging.basicConfig(filename=reducer_logfile, format=\'%(message)s\',\n                    level=logging.INFO, filemode=\'w\')\n\ndef reducer():\n    \n    #Also make sure to fill out the mapper code before clicking ""Test Run"" or ""Submit"".\n\n    #Each line will be a key-value pair separated by a tab character.\n    #Print out each key once, along with the total number of Aadhaar \n    #generated, separated by a tab. Make sure each key-value pair is \n    #formatted correctly! Here\'s a sample final key-value pair: \'Gujarat\\t5.0\'\n\n    #Since you are printing the output of your program, printing a debug \n    #statement will interfere with the operation of the grader. Instead, \n    #use the logging module, which we\'ve configured to log to a file printed \n    #when you click ""Test Run"". For example:\n    #logging.info(""My debugging message"")\n    #Note that, unlike print, logging.info will take only a single argument.\n    #So logging.info(""my message"") will work, but logging.info(""my"",""message"") will not.\n        \n    districts = {}    \n    for line in sys.stdin:\n        val = line.split(\'\\t\')\n        if val[0] in districts:\n            districts[val[0]] += int(val[1])\n        else:\n            districts[val[0]] = int(val[1])\n        \n    for key, value in districts.iteritems():\n        print (""{}\\t{}"".format(key,str(value)))\n        \nreducer()\n'"
