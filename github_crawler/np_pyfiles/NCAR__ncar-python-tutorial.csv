file_path,api_count,code
setup/download_cartopy_assets.py,0,"b'#!/usr/bin/env python\n# (C) British Crown Copyright 2011 - 2016, Met Office\n#\n# This file is part of cartopy.\n#\n# cartopy is free software: you can redistribute it and/or modify it under\n# the terms of the GNU Lesser General Public License as published by the\n# Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# cartopy is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with cartopy.  If not, see <https://www.gnu.org/licenses/>.\n\n""""""\nThis module provides a command-line tool for triggering the download of\nthe data used by various Feature instances.\n\nFor detail on how to use this tool, execute it with the `-h` option:\n\n    python download.py -h\n\n""""""\nfrom __future__ import absolute_import, division, print_function\n\nimport argparse\n\nfrom cartopy import config\nfrom cartopy.feature import Feature, GSHHSFeature, NaturalEarthFeature\nfrom cartopy.io import Downloader\n\n\nALL_SCALES = (""110m"", ""50m"", ""10m"")\n\n\nFEATURE_DEFN_GROUPS = {\n    # Only need one GSHHS resolution because they *all* get downloaded\n    # from one file.\n    ""gshhs"": GSHHSFeature(scale=""f""),\n    ""physical"": (\n        (""physical"", ""coastline"", ALL_SCALES),\n        (""physical"", ""land"", ALL_SCALES),\n        (""physical"", ""ocean"", ALL_SCALES),\n        (""physical"", ""rivers_lake_centerlines"", ALL_SCALES),\n        (""physical"", ""lakes"", ALL_SCALES),\n        (""physical"", ""geography_regions_polys"", ALL_SCALES),\n        (""physical"", ""geography_regions_points"", ALL_SCALES),\n        (""physical"", ""geography_marine_polys"", ALL_SCALES),\n        (""physical"", ""glaciated_areas"", ALL_SCALES),\n    ),\n    ""cultural"": (\n        (""cultural"", ""admin_0_countries"", ALL_SCALES),\n        (""cultural"", ""admin_0_countries_lakes"", ALL_SCALES),\n        (""cultural"", ""admin_0_sovereignty"", ALL_SCALES),\n        (""cultural"", ""admin_0_boundary_lines_land"", ALL_SCALES),\n        (""cultural"", ""urban_areas"", (""50m"", ""10m"")),\n        (""cultural"", ""roads"", ""10m""),\n        (""cultural"", ""roads_north_america"", ""10m""),\n        (""cultural"", ""railroads"", ""10m""),\n        (""cultural"", ""railroads_north_america"", ""10m""),\n    ),\n    ""cultural-extra"": (\n        (""cultural"", ""admin_0_map_units"", ""110m""),\n        (""cultural"", ""admin_0_scale_rank"", ""110m""),\n        (""cultural"", ""admin_0_tiny_countries"", ""110m""),\n        (""cultural"", ""admin_0_pacific_groupings"", ""110m""),\n        (""cultural"", ""admin_1_states_provinces_shp"", ""110m""),\n        (""cultural"", ""admin_1_states_provinces_lines"", ""110m""),\n    ),\n}\n\n\ndef download_features(group_names, dry_run=True):\n    for group_name in group_names:\n        feature_defns = FEATURE_DEFN_GROUPS[group_name]\n        if isinstance(feature_defns, Feature):\n            feature = feature_defns\n            level = list(feature._levels)[0]\n            downloader = Downloader.from_config((""shapefiles"", ""gshhs"", feature._scale, level))\n            format_dict = {""config"": config, ""scale"": feature._scale, ""level"": level}\n            if dry_run:\n                print(""URL: {}"".format(downloader.url(format_dict)))\n            else:\n                downloader.path(format_dict)\n                geoms = list(feature.geometries())\n                print(""Feature {} length: {}"".format(feature, len(geoms)))\n        else:\n            for category, name, scales in feature_defns:\n                if not isinstance(scales, tuple):\n                    scales = (scales,)\n                for scale in scales:\n                    downloader = Downloader.from_config(\n                        (""shapefiles"", ""natural_earth"", scale, category, name)\n                    )\n                    feature = NaturalEarthFeature(category, name, scale)\n                    format_dict = {\n                        ""config"": config,\n                        ""category"": category,\n                        ""name"": name,\n                        ""resolution"": scale,\n                    }\n                    if dry_run:\n                        print(""URL: {}"".format(downloader.url(format_dict)))\n                    else:\n                        downloader.path(format_dict)\n                        geoms = list(feature.geometries())\n                        print(\n                            ""Feature {}, {}, {} length: {}""\n                            """".format(category, name, scale, len(geoms))\n                        )\n\n\nif __name__ == ""__main__"":\n    parser = argparse.ArgumentParser(description=""Download feature datasets."")\n    parser.add_argument(\n        ""group_names"",\n        nargs=""+"",\n        choices=FEATURE_DEFN_GROUPS,\n        metavar=""GROUP_NAME"",\n        help=""Feature group name: %(choices)s"",\n    )\n    parser.add_argument(\n        ""--output"",\n        ""-o"",\n        help=""save datasets in the specified directory "" ""(default: user cache directory)"",\n    )\n    parser.add_argument(""--dry-run"", help=""just print the URLs to download"", action=""store_true"")\n    parser.add_argument(\n        ""--ignore-repo-data"", action=""store_true"", help=""ignore existing repo data when downloading""\n    )\n    args = parser.parse_args()\n\n    if args.output:\n        config[""pre_existing_data_dir""] = args.output\n        config[""data_dir""] = args.output\n    if args.ignore_repo_data:\n        config[""repo_data_dir""] = config[""data_dir""]\n    download_features(args.group_names, dry_run=args.dry_run)\n'"
setup/download_data.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, division, print_function\nfrom ftplib import FTP\nimport os\nimport sys\n\n# Ref: https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console\n# https://gist.github.com/aubricus/f91fb55dc6ba5557fbab06119420dd6a\ndef printProgressBar(iteration, total, prefix="""", suffix="""", decimals=1, bar_length=100):\n    """"""\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        bar_length  - Optional  : character length of bar (Int)\n    """"""\n    str_format = ""{0:."" + str(decimals) + ""f}""\n    percents = str_format.format(100 * (iteration / float(total)))\n    filled_length = int(round(bar_length * iteration / float(total)))\n    bar = ""\xe2\x96\x88"" * filled_length + ""-"" * (bar_length - filled_length)\n\n    sys.stdout.write(""\\r%s |%s| %s%s %s"" % (prefix, bar, percents, ""%"", suffix)),\n    # sys.stdout.write(\'%s |%s| %s%s %s\\r\' % (prefix, bar, percents, \'%\', suffix)),\n\n    if iteration == total:\n        sys.stdout.write(""\\n"")\n    sys.stdout.flush()\n\n\ndef ftp_download(\n    host=""ftp.cgd.ucar.edu"",\n    directory=""archive/aletheia-data/tutorial-data"",\n    filelist=[],\n    output_dir=None,\n):\n    ftp = FTP()\n    ftp.connect(host)\n    ftp.login()\n    ftp.cwd(directory)\n    if not filelist:\n        filenames = ftp.nlst()\n\n    else:\n        filenames = filelist\n\n    if not output_dir:\n        output_dir = os.getcwd()\n\n    try:\n        os.makedirs(output_dir)\n\n    except Exception:\n        pass\n\n    # Initial call to print 0% progress\n    l = len(filenames)\n    print(""Currently downloading tutorial data"")\n    printProgressBar(0, l, prefix=""Progress:"", suffix="""", bar_length=50)\n    for i, filename in enumerate(filenames):\n        local_filename = os.path.join(output_dir, filename)\n        if os.path.exists(local_filename):\n            # Do nothing if file or symlink exists\n            print(""{} exists already"".format(local_filename))\n        else:\n            with open(local_filename, ""wb"") as f:\n                cmd = ""RETR {}"".format(filename)\n                ftp.retrbinary(cmd, f.write)\n\n            print(local_filename, "" "")\n        # Update Progress Bar\n        printProgressBar(i + 1, l, prefix=""Progress:"", suffix="""", bar_length=50)\n\n    ftp.quit()\n\n\nif __name__ == ""__main__"":\n    ftp_download(directory=""archive/aletheia-data/"", filelist=[""test.sh""])\n'"
site/conf.py,0,"b'# -*- coding: utf-8 -*-\n\nimport time\n\n# !! This is the configuration of Nikola. !! #\n# !!  You should edit it to your liking.  !! #\n\n\n# ! Some settings can be different in different languages.\n# ! A comment stating (translatable) is used to denote those.\n# ! There are two ways to specify a translatable setting:\n# ! (a) BLOG_TITLE = ""My Blog""\n# ! (b) BLOG_TITLE = {""en"": ""My Blog"", ""es"": ""Mi Blog""}\n# ! Option (a) is used when you don\'t want that setting translated.\n# ! Option (b) is used for settings that are different in different languages.\n\n\n# Data about this site\nBLOG_AUTHOR = ""NCAR Xdev Team""  # (translatable)\nBLOG_TITLE = ""NCAR Python Tutorials""  # (translatable)\n# This is the main URL for your site. It will be used\n# in a prominent link. Don\'t forget the protocol (http/https)!\nSITE_URL = ""https://ncar.github.io/ncar-python-tutorial/""\n# This is the URL where Nikola\'s output will be deployed.\n# If not set, defaults to SITE_URL\n# BASE_URL = ""https://ncar.github.io/ncar-python-tutorials/""\nBLOG_EMAIL = ""xdev@ucar.edu""\nBLOG_DESCRIPTION = ""Information about past and future NCAR Python Tutorials""  # (translatable)\n\n# Nikola is multilingual!\n#\n# Currently supported languages are:\n#\n# en        English\n# af        Afrikaans\n# ar        Arabic\n# az        Azerbaijani\n# bg        Bulgarian\n# bs        Bosnian\n# ca        Catalan\n# cs        Czech [ALTERNATIVELY cz]\n# da        Danish\n# de        German\n# el        Greek [NOT gr]\n# eo        Esperanto\n# es        Spanish\n# et        Estonian\n# eu        Basque\n# fa        Persian\n# fi        Finnish\n# fr        French\n# fur       Friulian\n# gl        Galician\n# he        Hebrew\n# hi        Hindi\n# hr        Croatian\n# hu        Hungarian\n# ia        Interlingua\n# id        Indonesian\n# it        Italian\n# ja        Japanese [NOT jp]\n# ko        Korean\n# lt        Lithuanian\n# ml        Malayalam\n# nb        Norwegian (Bokm\xc3\xa5l)\n# nl        Dutch\n# pa        Punjabi\n# pl        Polish\n# pt        Portuguese\n# pt_br     Portuguese (Brazil)\n# ru        Russian\n# sk        Slovak\n# sl        Slovene\n# sq        Albanian\n# sr        Serbian (Cyrillic)\n# sr_latin  Serbian (Latin)\n# sv        Swedish\n# te        Telugu\n# th        Thai\n# tr        Turkish [NOT tr_TR]\n# uk        Ukrainian\n# ur        Urdu\n# vi        Vietnamese\n# zh_cn     Chinese (Simplified)\n# zh_tw     Chinese (Traditional)\n#\n# If you want to use Nikola with a non-supported language you have to provide\n# a module containing the necessary translations\n# (cf. the modules at nikola/data/themes/base/messages/).\n# If a specific post is not translated to a language, then the version\n# in the default language will be shown instead.\n\n# What is the default language?\nDEFAULT_LANG = ""en""\n\n# What other languages do you have?\n# The format is {""translationcode"" : ""path/to/translation"" }\n# the path will be used as a prefix for the generated pages location\nTRANSLATIONS = {\n    DEFAULT_LANG: """",\n    # Example for another language:\n    # ""es"": ""./es"",\n}\n\n# What will translated input files be named like?\n\n# If you have a page something.rst, then something.pl.rst will be considered\n# its Polish translation.\n#     (in the above example: path == ""something"", ext == ""rst"", lang == ""pl"")\n# this pattern is also used for metadata:\n#     something.meta -> something.pl.meta\n\nTRANSLATIONS_PATTERN = \'{path}.{lang}.{ext}\'\n\n# Links for the sidebar / navigation bar.  (translatable)\n# This is a dict.  The keys are languages, and values are tuples.\n#\n# For regular links:\n#     (\'https://getnikola.com/\', \'Nikola Homepage\')\n#\n# For submenus:\n#     (\n#         (\n#             (\'https://apple.com/\', \'Apple\'),\n#             (\'https://orange.com/\', \'Orange\'),\n#         ),\n#         \'Fruits\'\n#     )\n#\n# WARNING: Support for submenus is theme-dependent.\n#          Only one level of submenus is supported.\n# WARNING: Some themes, including the default Bootstrap 4 theme,\n#          may present issues if the menu is too large.\n#          (in Bootstrap, the navbar can grow too large and cover contents.)\n# WARNING: If you link to directories, make sure to follow\n#          ``STRIP_INDEXES``.  If it\xe2\x80\x99s set to ``True``, end your links\n#          with a ``/``, otherwise end them with ``/index.html`` \xe2\x80\x94 or\n#          else they won\xe2\x80\x99t be highlighted when active.\n\nNAVIGATION_LINKS = {\n    DEFAULT_LANG: (\n#        (""/archive.html"", ""Archive""),\n#        (""/categories/"", ""Tags""),\n#        (""/rss.xml"", ""RSS feed""),\n    ),\n}\n\n# Alternative navigation links. Works the same way NAVIGATION_LINKS does,\n# although themes may not always support them. (translatable)\n# (Bootstrap 4: right-side of navbar, Bootblog 4: right side of title)\nNAVIGATION_ALT_LINKS = {\n    DEFAULT_LANG: ()\n}\n\n# Name of the theme to use.\nTHEME = ""ncar"" # ""bootstrap4""\n\n# Primary color of your theme. This will be used to customize your theme.\n# Must be a HEX value.\nTHEME_COLOR = \'#AAAAAA\'\n\n# Theme configuration. Fully theme-dependent. (translatable)\n# Examples below are for bootblog4.\n# bootblog4 supports: featured_large featured_small featured_on_mobile\n#                     featured_large_image_on_mobile featured_strip_html sidebar\n# bootstrap4 supports: navbar_light (defaults to False)\nTHEME_CONFIG = {\n    DEFAULT_LANG: {\n        # Show the latest featured post in a large box, with the previewimage as its background.\n        \'featured_large\': False,\n        # Show the first (remaining) two featured posts in small boxes.\n        \'featured_small\': False,\n        # Show featured posts on mobile.\n        \'featured_on_mobile\': True,\n        # Show image in `featured_large` on mobile.\n        # `featured_small` displays them only on desktop.\n        \'featured_large_image_on_mobile\': True,\n        # Strip HTML from featured post text.\n        \'featured_strip_html\': False,\n        # Contents of the sidebar, If empty, the sidebar is not displayed.\n        \'sidebar\': \'\',\n        \'has_custom_css\': True\n    }\n}\n\n# POSTS and PAGES contains (wildcard, destination, template) tuples.\n# (translatable)\n#\n# The wildcard is used to generate a list of source files\n# (whatever/thing.rst, for example).\n#\n# That fragment could have an associated metadata file (whatever/thing.meta),\n# and optionally translated files (example for Spanish, with code ""es""):\n#     whatever/thing.es.rst and whatever/thing.es.meta\n#\n#     This assumes you use the default TRANSLATIONS_PATTERN.\n#\n# From those files, a set of HTML fragment files will be generated:\n# cache/whatever/thing.html (and maybe cache/whatever/thing.html.es)\n#\n# These files are combined with the template to produce rendered\n# pages, which will be placed at\n# output/TRANSLATIONS[lang]/destination/pagename.html\n#\n# where ""pagename"" is the ""slug"" specified in the metadata file.\n# The page might also be placed in /destination/pagename/index.html\n# if PRETTY_URLS are enabled.\n#\n# The difference between POSTS and PAGES is that POSTS are added\n# to feeds, indexes, tag lists and archives and are considered part\n# of a blog, while PAGES are just independent HTML pages.\n#\n# Finally, note that destination can be translated, i.e. you can\n# specify a different translation folder per language. Example:\n#     PAGES = (\n#         (""pages/*.rst"", {""en"": ""pages"", ""de"": ""seiten""}, ""page.tmpl""),\n#         (""pages/*.md"", {""en"": ""pages"", ""de"": ""seiten""}, ""page.tmpl""),\n#     )\n\nPOSTS = (\n    (""posts/*.rst"", ""posts"", ""post.tmpl""),\n    (""posts/*.md"", ""posts"", ""post.tmpl""),\n    (""posts/*.txt"", ""posts"", ""post.tmpl""),\n    (""posts/*.html"", ""posts"", ""post.tmpl""),\n)\nPAGES = (\n    (""pages/*.rst"", ""pages"", ""page.tmpl""),\n    (""pages/*.md"", ""pages"", ""page.tmpl""),\n    (""pages/*.txt"", ""pages"", ""page.tmpl""),\n    (""pages/*.html"", ""pages"", ""page.tmpl""),\n)\n\n\n# Below this point, everything is optional\n\n# Post\'s dates are considered in UTC by default, if you want to use\n# another time zone, please set TIMEZONE to match. Check the available\n# list from Wikipedia:\n# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n# (e.g. \'Europe/Zurich\')\n# Also, if you want to use a different time zone in some of your posts,\n# you can use the ISO 8601/RFC 3339 format (ex. 2012-03-30T23:00:00+02:00)\nTIMEZONE = ""America/Denver""\n\n# If you want to use ISO 8601 (also valid RFC 3339) throughout Nikola\n# (especially in new_post), set this to True.\n# Note that this does not affect DATE_FORMAT.\n# FORCE_ISO8601 = False\n\n# Date format used to display post dates. (translatable)\n# Used by babel.dates, CLDR style: http://cldr.unicode.org/translation/date-time\n# You can also use \'full\', \'long\', \'medium\', or \'short\'\n# DATE_FORMAT = \'yyyy-MM-dd HH:mm\'\n\n# Date format used to display post dates, if local dates are used. (translatable)\n# Used by moment.js: https://momentjs.com/docs/#/displaying/format/\n# JS_DATE_FORMAT = \'YYYY-MM-DD HH:mm\'\n\n# Date fanciness.\n#\n# 0 = using DATE_FORMAT and TIMEZONE\n# 1 = using JS_DATE_FORMAT and local user time (via moment.js)\n# 2 = using a string like \xe2\x80\x9c2 days ago\xe2\x80\x9d\n#\n# Your theme must support it, Bootstrap already does.\n# DATE_FANCINESS = 0\n\n# Customize the locale/region used for a language.\n# For example, to use British instead of US English: LOCALES = {\'en\': \'en_GB\'}\n# LOCALES = {}\n\n# One or more folders containing files to be copied as-is into the output.\n# The format is a dictionary of {source: relative destination}.\n# Default is:\n# FILES_FOLDERS = {\'files\': \'\'}\n# Which means copy \'files\' into \'output\'\n\n# One or more folders containing code listings to be processed and published on\n# the site. The format is a dictionary of {source: relative destination}.\n# Default is:\n# LISTINGS_FOLDERS = {\'listings\': \'listings\'}\n# Which means process listings from \'listings\' into \'output/listings\'\n\n# A mapping of languages to file-extensions that represent that language.\n# Feel free to add or delete extensions to any list, but don\'t add any new\n# compilers unless you write the interface for it yourself.\n#\n# The default compiler for `new_post` is the first entry in the POSTS tuple.\n#\n# \'rest\' is reStructuredText\n# \'markdown\' is Markdown\n# \'html\' assumes the file is HTML and just copies it\nCOMPILERS = {\n    ""rest"": (\'.rst\', \'.txt\'),\n    ""markdown"": (\'.md\', \'.mdown\', \'.markdown\'),\n    ""textile"": (\'.textile\',),\n    ""txt2tags"": (\'.t2t\',),\n    ""bbcode"": (\'.bb\',),\n    ""wiki"": (\'.wiki\',),\n    ""ipynb"": (\'.ipynb\',),\n    ""html"": (\'.html\', \'.htm\'),\n    # PHP files are rendered the usual way (i.e. with the full templates).\n    # The resulting files have .php extensions, making it possible to run\n    # them without reconfiguring your server to recognize them.\n    ""php"": (\'.php\',),\n    # Pandoc detects the input from the source filename\n    # but is disabled by default as it would conflict\n    # with many of the others.\n    # ""pandoc"": (\'.rst\', \'.md\', \'.txt\'),\n}\n\n# Enable reST directives that insert the contents of external files such\n# as ""include"" and ""raw."" This maps directly to the docutils file_insertion_enabled\n# config. See: http://docutils.sourceforge.net/docs/user/config.html#file-insertion-enabled\n# REST_FILE_INSERTION_ENABLED = True\n\n# Create by default posts in one file format?\n# Set to False for two-file posts, with separate metadata.\n# ONE_FILE_POSTS = True\n\n# Preferred metadata format for new posts\n# ""Nikola"": reST comments, wrapped in a HTML comment if needed (default)\n# ""YAML"": YAML wrapped in ""---""\n# ""TOML"": TOML wrapped in ""+++""\n# ""Pelican"": Native markdown metadata or reST docinfo fields. Nikola style for other formats.\n# METADATA_FORMAT = ""Nikola""\n\n# Use date-based path when creating posts?\n# Can be enabled on a per-post basis with `nikola new_post -d`.\n# The setting is ignored when creating pages.\n# NEW_POST_DATE_PATH = False\n\n# What format to use when creating posts with date paths?\n# Default is \'%Y/%m/%d\', other possibilities include \'%Y\' or \'%Y/%m\'.\n# NEW_POST_DATE_PATH_FORMAT = \'%Y/%m/%d\'\n\n# If this is set to True, the DEFAULT_LANG version will be displayed for\n# untranslated posts.\n# If this is set to False, then posts that are not translated to a language\n# LANG will not be visible at all in the pages in that language.\n# SHOW_UNTRANSLATED_POSTS = True\n\n# Nikola supports logo display.  If you have one, you can put the URL here.\n# Final output is <img src=""LOGO_URL"" id=""logo"" alt=""BLOG_TITLE"">.\n# The URL may be relative to the site root.\n# LOGO_URL = \'\'\n\n# If you want to hide the title of your website (for example, if your logo\n# already contains the text), set this to False.\n# SHOW_BLOG_TITLE = True\n\n# Paths for different autogenerated bits. These are combined with the\n# translation paths.\n\n# Final locations are:\n# output / TRANSLATION[lang] / TAG_PATH / index.html (list of tags)\n# output / TRANSLATION[lang] / TAG_PATH / tag.html (list of posts for a tag)\n# output / TRANSLATION[lang] / TAG_PATH / tag RSS_EXTENSION (RSS feed for a tag)\n# (translatable)\n# TAG_PATH = ""categories""\n\n# By default, the list of tags is stored in\n#     output / TRANSLATION[lang] / TAG_PATH / index.html\n# (see explanation for TAG_PATH). This location can be changed to\n#     output / TRANSLATION[lang] / TAGS_INDEX_PATH\n# with an arbitrary relative path TAGS_INDEX_PATH.\n# (translatable)\n# TAGS_INDEX_PATH = ""tags.html""\n\n# If TAG_PAGES_ARE_INDEXES is set to True, each tag\'s page will contain\n# the posts themselves. If set to False, it will be just a list of links.\n# TAG_PAGES_ARE_INDEXES = False\n\n# Set descriptions for tag pages to make them more interesting. The\n# default is no description. The value is used in the meta description\n# and displayed underneath the tag list or index page\xe2\x80\x99s title.\n# TAG_DESCRIPTIONS = {\n#    DEFAULT_LANG: {\n#        ""blogging"": ""Meta-blog posts about blogging."",\n#        ""open source"": ""My contributions to my many, varied, ever-changing, and eternal libre software projects.""\n#    },\n# }\n\n# Set special titles for tag pages. The default is ""Posts about TAG"".\n# TAG_TITLES = {\n#    DEFAULT_LANG: {\n#        ""blogging"": ""Meta-posts about blogging"",\n#        ""open source"": ""Posts about open source software""\n#    },\n# }\n\n# If you do not want to display a tag publicly, you can mark it as hidden.\n# The tag will not be displayed on the tag list page and posts.\n# Tag pages will still be generated.\nHIDDEN_TAGS = [\'mathjax\']\n\n# Only include tags on the tag list/overview page if there are at least\n# TAGLIST_MINIMUM_POSTS number of posts or more with every tag. Every tag\n# page is still generated, linked from posts, and included in the sitemap.\n# However, more obscure tags can be hidden from the tag index page.\n# TAGLIST_MINIMUM_POSTS = 1\n\n# A list of dictionaries specifying tags which translate to each other.\n# Format: a list of dicts {language: translation, language2: translation2, \xe2\x80\xa6}\n# For example:\n#   [\n#     {\'en\': \'private\', \'de\': \'Privat\'},\n#     {\'en\': \'work\', \'fr\': \'travail\', \'de\': \'Arbeit\'},\n#   ]\n# TAG_TRANSLATIONS = []\n\n# If set to True, a tag in a language will be treated as a translation\n# of the literally same tag in all other languages. Enable this if you\n# do not translate tags, for example.\n# TAG_TRANSLATIONS_ADD_DEFAULTS = True\n\n# Final locations are:\n# output / TRANSLATION[lang] / CATEGORY_PATH / index.html (list of categories)\n# output / TRANSLATION[lang] / CATEGORY_PATH / CATEGORY_PREFIX category.html (list of posts for a category)\n# output / TRANSLATION[lang] / CATEGORY_PATH / CATEGORY_PREFIX category RSS_EXTENSION (RSS feed for a category)\n# (translatable)\n# CATEGORY_PATH = ""categories""\n# CATEGORY_PREFIX = ""cat_""\n\n# By default, the list of categories is stored in\n#     output / TRANSLATION[lang] / CATEGORY_PATH / index.html\n# (see explanation for CATEGORY_PATH). This location can be changed to\n#     output / TRANSLATION[lang] / CATEGORIES_INDEX_PATH\n# with an arbitrary relative path CATEGORIES_INDEX_PATH.\n# (translatable)\n# CATEGORIES_INDEX_PATH = ""categories.html""\n\n# If CATEGORY_ALLOW_HIERARCHIES is set to True, categories can be organized in\n# hierarchies. For a post, the whole path in the hierarchy must be specified,\n# using a forward slash (\'/\') to separate paths. Use a backslash (\'\\\') to escape\n# a forward slash or a backslash (i.e. \'\\//\\\\\' is a path specifying the\n# subcategory called \'\\\' of the top-level category called \'/\').\nCATEGORY_ALLOW_HIERARCHIES = False\n# If CATEGORY_OUTPUT_FLAT_HIERARCHY is set to True, the output written to output\n# contains only the name of the leaf category and not the whole path.\nCATEGORY_OUTPUT_FLAT_HIERARCHY = False\n\n# If CATEGORY_PAGES_ARE_INDEXES is set to True, each category\'s page will contain\n# the posts themselves. If set to False, it will be just a list of links.\n# CATEGORY_PAGES_ARE_INDEXES = False\n\n# Set descriptions for category pages to make them more interesting. The\n# default is no description. The value is used in the meta description\n# and displayed underneath the category list or index page\xe2\x80\x99s title.\n# CATEGORY_DESCRIPTIONS = {\n#    DEFAULT_LANG: {\n#        ""blogging"": ""Meta-blog posts about blogging."",\n#        ""open source"": ""My contributions to my many, varied, ever-changing, and eternal libre software projects.""\n#    },\n# }\n\n# Set special titles for category pages. The default is ""Posts about CATEGORY"".\n# CATEGORY_TITLES = {\n#    DEFAULT_LANG: {\n#        ""blogging"": ""Meta-posts about blogging"",\n#        ""open source"": ""Posts about open source software""\n#    },\n# }\n\n# If you do not want to display a category publicly, you can mark it as hidden.\n# The category will not be displayed on the category list page.\n# Category pages will still be generated.\nHIDDEN_CATEGORIES = []\n\n# A list of dictionaries specifying categories which translate to each other.\n# Format: a list of dicts {language: translation, language2: translation2, \xe2\x80\xa6}\n# See TAG_TRANSLATIONS example above.\n# CATEGORY_TRANSLATIONS = []\n\n# If set to True, a category in a language will be treated as a translation\n# of the literally same category in all other languages. Enable this if you\n# do not translate categories, for example.\n# CATEGORY_TRANSLATIONS_ADD_DEFAULTS = True\n\n# If no category is specified in a post, the destination path of the post\n# can be used in its place. This replaces the sections feature. Using\n# category hierarchies is recommended.\n# CATEGORY_DESTPATH_AS_DEFAULT = False\n\n# If True, the prefix will be trimmed from the category name, eg. if the\n# POSTS destination is ""foo/bar"", and the path is ""foo/bar/baz/quux"",\n# the category will be ""baz/quux"" (or ""baz"" if only the first directory is considered).\n# Note that prefixes coming from translations are always ignored.\n# CATEGORY_DESTPATH_TRIM_PREFIX = False\n\n# If True, only the first directory of a path will be used.\n# CATEGORY_DESTPATH_FIRST_DIRECTORY_ONLY = True\n\n# Map paths to prettier category names. (translatable)\n# CATEGORY_DESTPATH_NAMES = {\n#    DEFAULT_LANG: {\n#        \'webdev\': \'Web Development\',\n#        \'webdev/django\': \'Web Development/Django\',\n#        \'random\': \'Odds and Ends\',\n#    },\n# }\n\n# By default, category indexes will appear in CATEGORY_PATH and use\n# CATEGORY_PREFIX. If this is enabled, those settings will be ignored (except\n# for the index) and instead, they will follow destination paths (eg. category\n# \'foo\' might appear in \'posts/foo\'). If the category does not come from a\n# destpath, first entry in POSTS followed by the category name will be used.\n# For this setting, category hierarchies are required and cannot be flattened.\n# CATEGORY_PAGES_FOLLOW_DESTPATH = False\n\n# If ENABLE_AUTHOR_PAGES is set to True and there is more than one\n# author, author pages are generated.\n# ENABLE_AUTHOR_PAGES = True\n\n# Path to author pages. Final locations are:\n# output / TRANSLATION[lang] / AUTHOR_PATH / index.html (list of authors)\n# output / TRANSLATION[lang] / AUTHOR_PATH / author.html (list of posts by an author)\n# output / TRANSLATION[lang] / AUTHOR_PATH / author RSS_EXTENSION (RSS feed for an author)\n# (translatable)\n# AUTHOR_PATH = ""authors""\n\n# If AUTHOR_PAGES_ARE_INDEXES is set to True, each author\'s page will contain\n# the posts themselves. If set to False, it will be just a list of links.\n# AUTHOR_PAGES_ARE_INDEXES = False\n\n# Set descriptions for author pages to make them more interesting. The\n# default is no description. The value is used in the meta description\n# and displayed underneath the author list or index page\xe2\x80\x99s title.\n# AUTHOR_PAGES_DESCRIPTIONS = {\n#    DEFAULT_LANG: {\n#        ""Juanjo Conti"": ""Python coder and writer."",\n#        ""Roberto Alsina"": ""Nikola father.""\n#    },\n# }\n\n\n# If you do not want to display an author publicly, you can mark it as hidden.\n# The author will not be displayed on the author list page and posts.\n# Tag pages will still be generated.\nHIDDEN_AUTHORS = [\'Guest\']\n\n# Final location for the main blog page and sibling paginated pages is\n# output / TRANSLATION[lang] / INDEX_PATH / index-*.html\n# (translatable)\n# INDEX_PATH = """"\n\n# Optional HTML that displayed on \xe2\x80\x9cmain\xe2\x80\x9d blog index.html files.\n# May be used for a greeting. (translatable)\nFRONT_INDEX_HEADER = {\n    DEFAULT_LANG: \'\'\n}\n\n# Create per-month archives instead of per-year\n# CREATE_MONTHLY_ARCHIVE = False\n# Create one large archive instead of per-year\n# CREATE_SINGLE_ARCHIVE = False\n# Create year, month, and day archives each with a (long) list of posts\n# (overrides both CREATE_MONTHLY_ARCHIVE and CREATE_SINGLE_ARCHIVE)\n# CREATE_FULL_ARCHIVES = False\n# If monthly archives or full archives are created, adds also one archive per day\n# CREATE_DAILY_ARCHIVE = False\n# Create previous, up, next navigation links for archives\n# CREATE_ARCHIVE_NAVIGATION = False\n# Final locations for the archives are:\n# output / TRANSLATION[lang] / ARCHIVE_PATH / ARCHIVE_FILENAME\n# output / TRANSLATION[lang] / ARCHIVE_PATH / YEAR / index.html\n# output / TRANSLATION[lang] / ARCHIVE_PATH / YEAR / MONTH / index.html\n# output / TRANSLATION[lang] / ARCHIVE_PATH / YEAR / MONTH / DAY / index.html\n# (translatable)\n# ARCHIVE_PATH = """"\n# ARCHIVE_FILENAME = ""archive.html""\n\n# If ARCHIVES_ARE_INDEXES is set to True, each archive page which contains a list\n# of posts will contain the posts themselves. If set to False, it will be just a\n# list of links.\n# ARCHIVES_ARE_INDEXES = False\n\n# URLs to other posts/pages can take 3 forms:\n# rel_path: a relative URL to the current page/post (default)\n# full_path: a URL with the full path from the root\n# absolute: a complete URL (that includes the SITE_URL)\n# URL_TYPE = \'rel_path\'\n\n# Extension for RSS feed files\n# RSS_EXTENSION = "".xml""\n\n# RSS filename base (without extension); used for indexes and galleries.\n# (translatable)\n# RSS_FILENAME_BASE = ""rss""\n\n# Final location for the blog main RSS feed is:\n# output / TRANSLATION[lang] / RSS_PATH / RSS_FILENAME_BASE RSS_EXTENSION\n# (translatable)\n# RSS_PATH = """"\n\n# Final location for the blog main Atom feed is:\n# output / TRANSLATION[lang] / ATOM_PATH / ATOM_FILENAME_BASE ATOM_EXTENSION\n# (translatable)\n# ATOM_PATH = """"\n\n# Atom filename base (without extension); used for indexes.\n# (translatable)\nATOM_FILENAME_BASE = ""feed""\n\n# Extension for Atom feed files\n# ATOM_EXTENSION = "".atom""\n\n# Slug the Tag URL. Easier for users to type, special characters are\n# often removed or replaced as well.\n# SLUG_TAG_PATH = True\n\n# Slug the Author URL. Easier for users to type, special characters are\n# often removed or replaced as well.\n# SLUG_AUTHOR_PATH = True\n\n# A list of redirection tuples, [(""foo/from.html"", ""/bar/to.html"")].\n#\n# A HTML file will be created in output/foo/from.html that redirects\n# to the ""/bar/to.html"" URL. notice that the ""from"" side MUST be a\n# relative URL.\n#\n# If you don\'t need any of these, just set to []\nREDIRECTIONS = []\n\n# Presets of commands to execute to deploy. Can be anything, for\n# example, you may use rsync:\n# ""rsync -rav --delete output/ joe@my.site:/srv/www/site""\n# And then do a backup, or run `nikola ping` from the `ping`\n# plugin (`nikola plugin -i ping`).  Or run `nikola check -l`.\n# You may also want to use github_deploy (see below).\n# You can define multiple presets and specify them as arguments\n# to `nikola deploy`.  If no arguments are specified, a preset\n# named `default` will be executed.  You can use as many presets\n# in a `nikola deploy` command as you like.\n# DEPLOY_COMMANDS = {\n#     \'default\': [\n#         ""rsync -rav --delete output/ joe@my.site:/srv/www/site"",\n#     ]\n# }\n\n# github_deploy configuration\n# For more details, read the manual:\n# https://getnikola.com/handbook.html#deploying-to-github\n# You will need to configure the deployment branch on GitHub.\nGITHUB_SOURCE_BRANCH = \'master\'\nGITHUB_DEPLOY_BRANCH = \'gh-pages\'\n\n# The name of the remote where you wish to push to, using github_deploy.\nGITHUB_REMOTE_NAME = \'origin\'\n\n# Whether or not github_deploy should commit to the source branch automatically\n# before deploying.\nGITHUB_COMMIT_SOURCE = True\n\n# Where the output site should be located\n# If you don\'t use an absolute path, it will be considered as relative\n# to the location of conf.py\n# OUTPUT_FOLDER = \'output\'\n\n# where the ""cache"" of partial generated content should be located\n# default: \'cache\'\n# CACHE_FOLDER = \'cache\'\n\n# Filters to apply to the output.\n# A directory where the keys are either: a file extensions, or\n# a tuple of file extensions.\n#\n# And the value is a list of commands to be applied in order.\n#\n# Each command must be either:\n#\n# A string containing a \'%s\' which will\n# be replaced with a filename. The command *must* produce output\n# in place.\n#\n# Or:\n#\n# A python callable, which will be called with the filename as\n# argument.\n#\n# By default, only .php files uses filters to inject PHP into\n# Nikola\xe2\x80\x99s templates. All other filters must be enabled through FILTERS.\n#\n# Many filters are shipped with Nikola. A list is available in the manual:\n# <https://getnikola.com/handbook.html#post-processing-filters>\n#\n# from nikola import filters\n# FILTERS = {\n#    "".html"": [filters.typogrify],\n#    "".js"": [filters.closure_compiler],\n#    "".jpg"": [""jpegoptim --strip-all -m75 -v %s""],\n# }\n\n# Executable for the ""yui_compressor"" filter (defaults to \'yui-compressor\').\n# YUI_COMPRESSOR_EXECUTABLE = \'yui-compressor\'\n\n# Executable for the ""closure_compiler"" filter (defaults to \'closure-compiler\').\n# CLOSURE_COMPILER_EXECUTABLE = \'closure-compiler\'\n\n# Executable for the ""optipng"" filter (defaults to \'optipng\').\n# OPTIPNG_EXECUTABLE = \'optipng\'\n\n# Executable for the ""jpegoptim"" filter (defaults to \'jpegoptim\').\n# JPEGOPTIM_EXECUTABLE = \'jpegoptim\'\n\n# Executable for the ""html_tidy_withconfig"", ""html_tidy_nowrap"",\n# ""html_tidy_wrap"", ""html_tidy_wrap_attr"" and ""html_tidy_mini"" filters\n# (defaults to \'tidy5\').\n# HTML_TIDY_EXECUTABLE = \'tidy5\'\n\n# List of XPath expressions which should be used for finding headers\n# ({hx} is replaced by headers h1 through h6).\n# You must change this if you use a custom theme that does not use\n# ""e-content entry-content"" as a class for post and page contents.\n# HEADER_PERMALINKS_XPATH_LIST = [\'*//div[@class=""e-content entry-content""]//{hx}\']\n# Include *every* header (not recommended):\n# HEADER_PERMALINKS_XPATH_LIST = [\'*//{hx}\']\n\n# File blacklist for header permalinks. Contains output path\n# (eg. \'output/index.html\')\n# HEADER_PERMALINKS_FILE_BLACKLIST = []\n\n# Expert setting! Create a gzipped copy of each generated file. Cheap server-\n# side optimization for very high traffic sites or low memory servers.\n# GZIP_FILES = False\n# File extensions that will be compressed\n# GZIP_EXTENSIONS = (\'.txt\', \'.htm\', \'.html\', \'.css\', \'.js\', \'.json\', \'.atom\', \'.xml\')\n# Use an external gzip command? None means no.\n# Example: GZIP_COMMAND = ""pigz -k {filename}""\n# GZIP_COMMAND = None\n# Make sure the server does not return a ""Accept-Ranges: bytes"" header for\n# files compressed by this option! OR make sure that a ranged request does not\n# return partial content of another representation for these resources. Do not\n# use this feature if you do not understand what this means.\n\n# #############################################################################\n# Image Gallery Options\n# #############################################################################\n\n# One or more folders containing galleries. The format is a dictionary of\n# {""source"": ""relative_destination""}, where galleries are looked for in\n# ""source/"" and the results will be located in\n# ""OUTPUT_PATH/relative_destination/gallery_name""\n# Default is:\n# GALLERY_FOLDERS = {""galleries"": ""galleries""}\n# More gallery options:\n# THUMBNAIL_SIZE = 180\n# MAX_IMAGE_SIZE = 1280\n# USE_FILENAME_AS_TITLE = True\n# EXTRA_IMAGE_EXTENSIONS = []\n#\n# If set to False, it will sort by filename instead. Defaults to True\n# GALLERY_SORT_BY_DATE = True\n\n# If set to True, EXIF data will be copied when an image is thumbnailed or\n# resized. (See also EXIF_WHITELIST)\n# PRESERVE_EXIF_DATA = False\n\n# If you have enabled PRESERVE_EXIF_DATA, this option lets you choose EXIF\n# fields you want to keep in images. (See also PRESERVE_EXIF_DATA)\n#\n# For a full list of field names, please see here:\n# http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf\n#\n# This is a dictionary of lists. Each key in the dictionary is the\n# name of a IDF, and each list item is a field you want to preserve.\n# If you have a IDF with only a \'*\' item, *EVERY* item in it will be\n# preserved. If you don\'t want to preserve anything in a IDF, remove it\n# from the setting. By default, no EXIF information is kept.\n# Setting the whitelist to anything other than {} implies\n# PRESERVE_EXIF_DATA is set to True\n# To preserve ALL EXIF data, set EXIF_WHITELIST to {""*"": ""*""}\n\n# EXIF_WHITELIST = {}\n\n# Some examples of EXIF_WHITELIST settings:\n\n# Basic image information:\n# EXIF_WHITELIST[\'0th\'] = [\n#    ""Orientation"",\n#    ""XResolution"",\n#    ""YResolution"",\n# ]\n\n# If you want to keep GPS data in the images:\n# EXIF_WHITELIST[\'GPS\'] = [""*""]\n\n# Embedded thumbnail information:\n# EXIF_WHITELIST[\'1st\'] = [""*""]\n\n# If set to True, any ICC profile will be copied when an image is thumbnailed or\n# resized.\n# PRESERVE_ICC_PROFILES = False\n\n# Folders containing images to be used in normal posts or pages.\n# IMAGE_FOLDERS is a dictionary of the form {""source"": ""destination""},\n# where ""source"" is the folder containing the images to be published, and\n# ""destination"" is the folder under OUTPUT_PATH containing the images copied\n# to the site. Thumbnail images will be created there as well.\n\n# To reference the images in your posts, include a leading slash in the path.\n# For example, if IMAGE_FOLDERS = {\'images\': \'images\'}, write\n#\n#   .. image:: /images/tesla.jpg\n#\n# See the Nikola Handbook for details (in the \xe2\x80\x9cEmbedding Images\xe2\x80\x9d and\n# \xe2\x80\x9cThumbnails\xe2\x80\x9d sections)\n\n# Images will be scaled down according to IMAGE_THUMBNAIL_SIZE and MAX_IMAGE_SIZE\n# options, but will have to be referenced manually to be visible on the site\n# (the thumbnail has ``.thumbnail`` added before the file extension by default,\n# but a different naming template can be configured with IMAGE_THUMBNAIL_FORMAT).\n\nIMAGE_FOLDERS = {\'images\': \'images\'}\n# IMAGE_THUMBNAIL_SIZE = 400\n# IMAGE_THUMBNAIL_FORMAT = \'{name}.thumbnail{ext}\'\n\n# #############################################################################\n# HTML fragments and diverse things that are used by the templates\n# #############################################################################\n\n# Data about post-per-page indexes.\n# INDEXES_PAGES defaults to \' old posts, page %d\' or \' page %d\' (translated),\n# depending on the value of INDEXES_PAGES_MAIN.\n#\n# (translatable) If the following is empty, defaults to BLOG_TITLE:\n# INDEXES_TITLE = """"\n#\n# (translatable) If the following is empty, defaults to \' [old posts,] page %d\' (see above):\n# INDEXES_PAGES = """"\n#\n# If the following is True, INDEXES_PAGES is also displayed on the main (the\n# newest) index page (index.html):\n# INDEXES_PAGES_MAIN = False\n#\n# If the following is True, index-1.html has the oldest posts, index-2.html the\n# second-oldest posts, etc., and index.html has the newest posts. This ensures\n# that all posts on index-x.html will forever stay on that page, now matter how\n# many new posts are added.\n# If False, index-1.html has the second-newest posts, index-2.html the third-newest,\n# and index-n.html the oldest posts. When this is active, old posts can be moved\n# to other index pages when new posts are added.\n# INDEXES_STATIC = True\n#\n# (translatable) If PRETTY_URLS is set to True, this setting will be used to create\n# prettier URLs for index pages, such as page/2/index.html instead of index-2.html.\n# Valid values for this settings are:\n#   * False,\n#   * a list or tuple, specifying the path to be generated,\n#   * a dictionary mapping languages to lists or tuples.\n# Every list or tuple must consist of strings which are used to combine the path;\n# for example:\n#     [\'page\', \'{number}\', \'{index_file}\']\n# The replacements\n#     {number}     --> (logical) page number;\n#     {old_number} --> the page number inserted into index-n.html before (zero for\n#                      the main page);\n#     {index_file} --> value of option INDEX_FILE\n# are made.\n# Note that in case INDEXES_PAGES_MAIN is set to True, a redirection will be created\n# for the full URL with the page number of the main page to the normal (shorter) main\n# page URL.\n# INDEXES_PRETTY_PAGE_URL = False\n#\n# If the following is true, a page range navigation will be inserted to indices.\n# Please note that this will undo the effect of INDEXES_STATIC, as all index pages\n# must be recreated whenever the number of pages changes.\n# SHOW_INDEX_PAGE_NAVIGATION = False\n\n# If the following is True, a meta name=""generator"" tag is added to pages. The\n# generator tag is used to specify the software used to generate the page\n# (it promotes Nikola).\n# META_GENERATOR_TAG = True\n\n# Color scheme to be used for code blocks. If your theme provides\n# ""assets/css/code.css"" this is ignored. Set to None to disable.\n# Can be any of:\n# algol, algol_nu, autumn, borland, bw, colorful, default, emacs, friendly,\n# fruity, igor, lovelace, manni, monokai, murphy, native, paraiso-dark,\n# paraiso-light, pastie, perldoc, rrt, tango, trac, vim, vs, xcode\n# This list MAY be incomplete since pygments adds styles every now and then.\n# Check with list(pygments.styles.get_all_styles()) in an interpreter.\n#\n# CODE_COLOR_SCHEME = \'default\'\n\n# FAVICONS contains (name, file, size) tuples.\n# Used to create favicon link like this:\n# <link rel=""name"" href=""file"" sizes=""size""/>\n# FAVICONS = (\n#     (""icon"", ""/favicon.ico"", ""16x16""),\n#     (""icon"", ""/icon_128x128.png"", ""128x128""),\n# )\n\n# Show teasers (instead of full posts) in indexes? Defaults to False.\nINDEX_TEASERS = True\n\n# HTML fragments with the Read more... links.\n# The following tags exist and are replaced for you:\n# {link}                        A link to the full post page.\n# {read_more}                   The string \xe2\x80\x9cRead more\xe2\x80\x9d in the current language.\n# {reading_time}                An estimate of how long it will take to read the post.\n# {remaining_reading_time}      An estimate of how long it will take to read the post, sans the teaser.\n# {min_remaining_read}          The string \xe2\x80\x9c{remaining_reading_time} min remaining to read\xe2\x80\x9d in the current language.\n# {paragraph_count}             The amount of paragraphs in the post.\n# {remaining_paragraph_count}   The amount of paragraphs in the post, sans the teaser.\n# {post_title}                  The title of the post.\n# {{                            A literal { (U+007B LEFT CURLY BRACKET)\n# }}                            A literal } (U+007D RIGHT CURLY BRACKET)\n\n# \'Read more...\' for the index page, if INDEX_TEASERS is True (translatable)\nINDEX_READ_MORE_LINK = \'<p class=""more""><a href=""{link}"">{read_more}\xe2\x80\xa6</a></p>\'\n# \'Read more...\' for the feeds, if FEED_TEASERS is True (translatable)\nFEED_READ_MORE_LINK = \'<p><a href=""{link}"">{read_more}\xe2\x80\xa6</a> ({min_remaining_read})</p>\'\n\n# Append a URL query to the FEED_READ_MORE_LINK in Atom and RSS feeds. Advanced\n# option used for traffic source tracking.\n# Minimum example for use with Piwik: ""pk_campaign=feed""\n# The following tags exist and are replaced for you:\n# {feedRelUri}                  A relative link to the feed.\n# {feedFormat}                  The name of the syndication format.\n# Example using replacement for use with Google Analytics:\n# ""utm_source={feedRelUri}&utm_medium=nikola_feed&utm_campaign={feedFormat}_feed""\nFEED_LINKS_APPEND_QUERY = False\n\n# A HTML fragment describing the license, for the sidebar.\n# (translatable)\nLICENSE = """"\n# I recommend using the Creative Commons\' wizard:\n# https://creativecommons.org/choose/\n# LICENSE = """"""\n# <a rel=""license"" href=""https://creativecommons.org/licenses/by-nc-sa/4.0/"">\n# <img alt=""Creative Commons License BY-NC-SA""\n# style=""border-width:0; margin-bottom:12px;""\n# src=""https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png""></a>""""""\n\n# A small copyright notice for the page footer (in HTML).\n# (translatable)\nCONTENT_FOOTER = \'Contents &copy; {date}         <a href=""mailto:{email}"">{author}</a> - Powered by         <a href=""https://getnikola.com"" rel=""nofollow"">Nikola</a>         {license}\'\n\n# Things that will be passed to CONTENT_FOOTER.format().  This is done\n# for translatability, as dicts are not formattable.  Nikola will\n# intelligently format the setting properly.\n# The setting takes a dict. The keys are languages. The values are\n# tuples of tuples of positional arguments and dicts of keyword arguments\n# to format().  For example, {\'en\': ((\'Hello\'), {\'target\': \'World\'})}\n# results in CONTENT_FOOTER[\'en\'].format(\'Hello\', target=\'World\').\n# If you need to use the literal braces \'{\' and \'}\' in your footer text, use\n# \'{{\' and \'}}\' to escape them (str.format is used)\n# WARNING: If you do not use multiple languages with CONTENT_FOOTER, this\n#          still needs to be a dict of this format.  (it can be empty if you\n#          do not need formatting)\n# (translatable)\nCONTENT_FOOTER_FORMATS = {\n    DEFAULT_LANG: (\n        (),\n        {\n            ""email"": BLOG_EMAIL,\n            ""author"": BLOG_AUTHOR,\n            ""date"": time.gmtime().tm_year,\n            ""license"": LICENSE\n        }\n    )\n}\n\n# A simple copyright tag for inclusion in RSS feeds that works just\n# like CONTENT_FOOTER and CONTENT_FOOTER_FORMATS\nRSS_COPYRIGHT = \'Contents \xc2\xa9 {date} <a href=""mailto:{email}"">{author}</a> {license}\'\nRSS_COPYRIGHT_PLAIN = \'Contents \xc2\xa9 {date} {author} {license}\'\nRSS_COPYRIGHT_FORMATS = CONTENT_FOOTER_FORMATS\n\n# To use comments, you can choose between different third party comment\n# systems.  The following comment systems are supported by Nikola:\n#   disqus, facebook, intensedebate, isso, muut, commento\n# You can leave this option blank to disable comments.\nCOMMENT_SYSTEM = """"\n# And you also need to add your COMMENT_SYSTEM_ID which\n# depends on what comment system you use. The default is\n# ""nikolademo"" which is a test account for Disqus. More information\n# is in the manual.\nCOMMENT_SYSTEM_ID = """"\n\n# Create index.html for page folders?\n# WARNING: if a page would conflict with the index file (usually\n#          caused by setting slug to `index`), the PAGE_INDEX\n#          will not be generated for that directory.\n# PAGE_INDEX = False\n# Enable comments on pages (i.e. not posts)?\n# COMMENTS_IN_PAGES = False\n# Enable comments on picture gallery pages?\n# COMMENTS_IN_GALLERIES = False\n\n# What file should be used for directory indexes?\n# Defaults to index.html\n# Common other alternatives: default.html for IIS, index.php\n# INDEX_FILE = ""index.html""\n\n# If a link ends in /index.html,  drop the index.html part.\n# http://mysite/foo/bar/index.html => http://mysite/foo/bar/\n# (Uses the INDEX_FILE setting, so if that is, say, default.html,\n# it will instead /foo/default.html => /foo)\nSTRIP_INDEXES = True\n\n# List of files relative to the server root (!) that will be asked to be excluded\n# from indexing and other robotic spidering. * is supported. Will only be effective\n# if SITE_URL points to server root. The list is used to exclude resources from\n# /robots.txt and /sitemap.xml, and to inform search engines about /sitemapindex.xml.\n# ROBOTS_EXCLUSIONS = [""/archive.html"", ""/category/*.html""]\n\n# Instead of putting files in <slug>.html, put them in <slug>/index.html.\n# No web server configuration is required. Also enables STRIP_INDEXES.\n# This can be disabled on a per-page/post basis by adding\n#    .. pretty_url: False\n# to the metadata.\nPRETTY_URLS = True\n\n# If True, publish future dated posts right away instead of scheduling them.\n# Defaults to False.\n# FUTURE_IS_NOW = False\n\n# If True, future dated posts are allowed in deployed output\n# Only the individual posts are published/deployed; not in indexes/sitemap\n# Generally, you want FUTURE_IS_NOW and DEPLOY_FUTURE to be the same value.\n# DEPLOY_FUTURE = False\n# If False, draft posts will not be deployed\n# DEPLOY_DRAFTS = True\n\n# Allows scheduling of posts using the rule specified here (new_post -s)\n# Specify an iCal Recurrence Rule: http://www.kanzaki.com/docs/ical/rrule.html\n# SCHEDULE_RULE = \'\'\n# If True, use the scheduling rule to all posts (not pages!) by default\n# SCHEDULE_ALL = False\n\n# Do you want a add a Mathjax config file?\n# MATHJAX_CONFIG = """"\n\n# If you want support for the $.$ syntax (which may conflict with running\n# text!), just use this config:\n# MATHJAX_CONFIG = """"""\n# <script type=""text/x-mathjax-config"">\n# MathJax.Hub.Config({\n#     tex2jax: {\n#         inlineMath: [ [\'$\',\'$\'], [""\\\\\\("",""\\\\\\)""] ],\n#         displayMath: [ [\'$$\',\'$$\'], [""\\\\\\["",""\\\\\\]""] ],\n#         processEscapes: true\n#     },\n#     displayAlign: \'center\', // Change this to \'left\' if you want left-aligned equations.\n#     ""HTML-CSS"": {\n#         styles: {\'.MathJax_Display\': {""margin"": 0}}\n#     }\n# });\n# </script>\n# """"""\n\n# Want to use KaTeX instead of MathJax? While KaTeX may not support every\n# feature yet, it\'s faster and the output looks better.\n# USE_KATEX = False\n\n# KaTeX auto-render settings. If you want support for the $.$ syntax (which may\n# conflict with running text!), just use this config:\n# KATEX_AUTO_RENDER = """"""\n# delimiters: [\n#     {left: ""$$"", right: ""$$"", display: true},\n#     {left: ""\\\\\\\\["", right: ""\\\\\\\\]"", display: true},\n#     {left: ""\\\\\\\\begin{equation*}"", right: ""\\\\\\\\end{equation*}"", display: true},\n#     {left: ""$"", right: ""$"", display: false},\n#     {left: ""\\\\\\\\("", right: ""\\\\\\\\)"", display: false}\n# ]\n# """"""\n\n# Do you want to customize the nbconversion of your IPython notebook?\n# IPYNB_CONFIG = {}\n# With the following example configuration you can use a custom jinja template\n# called `toggle.tpl` which has to be located in your site/blog main folder:\n# IPYNB_CONFIG = {\'Exporter\': {\'template_file\': \'toggle\'}}\n\n# What Markdown extensions to enable?\n# You will also get gist, nikola and podcast because those are\n# done in the code, hope you don\'t mind ;-)\n# Note: most Nikola-specific extensions are done via the Nikola plugin system,\n#       with the MarkdownExtension class and should not be added here.\n# Defaults are markdown.extensions.(fenced_code|codehilite|extra)\n# markdown.extensions.meta is required for Markdown metadata.\nMARKDOWN_EXTENSIONS = [\'markdown.extensions.fenced_code\', \'markdown.extensions.codehilite\', \'markdown.extensions.extra\']\n\n# Options to be passed to markdown extensions (See https://python-markdown.github.io/reference/)\n# Default is {} (no config at all)\n# MARKDOWN_EXTENSION_CONFIGS = {}\n\n\n# Extra options to pass to the pandoc command.\n# by default, it\'s empty, is a list of strings, for example\n# [\'-F\', \'pandoc-citeproc\', \'--bibliography=/Users/foo/references.bib\']\n# Pandoc does not demote headers by default.  To enable this, you can use, for example\n# [\'--base-header-level=2\']\n# PANDOC_OPTIONS = []\n\n# Social buttons. This is sample code for AddThis (which was the default for a\n# long time). Insert anything you want here, or even make it empty (which is\n# the default right now)\n# (translatable)\n# SOCIAL_BUTTONS_CODE = """"""\n# <!-- Social buttons -->\n# <div id=""addthisbox"" class=""addthis_toolbox addthis_peekaboo_style addthis_default_style addthis_label_style addthis_32x32_style"">\n# <a class=""addthis_button_more"">Share</a>\n# <ul><li><a class=""addthis_button_facebook""></a>\n# <li><a class=""addthis_button_google_plusone_share""></a>\n# <li><a class=""addthis_button_linkedin""></a>\n# <li><a class=""addthis_button_twitter""></a>\n# </ul>\n# </div>\n# <script src=""https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4f7088a56bb93798""></script>\n# <!-- End of social buttons -->\n# """"""\n\n# Show link to source for the posts?\nSHOW_SOURCELINK = False\n# Copy the source files for your pages?\n# Setting it to False implies SHOW_SOURCELINK = False\n# COPY_SOURCES = True\n\n# Modify the number of Post per Index Page\n# Defaults to 10\n# INDEX_DISPLAY_POST_COUNT = 10\n\n# By default, Nikola generates RSS files for the website and for tags, and\n# links to it.  Set this to False to disable everything RSS-related.\n# GENERATE_RSS = True\n\n# By default, Nikola does not generates Atom files for indexes and links to\n# them. Generate Atom for tags by setting TAG_PAGES_ARE_INDEXES to True.\n# Atom feeds are built based on INDEX_DISPLAY_POST_COUNT and not FEED_LENGTH\n# Switch between plain-text summaries and full HTML content using the\n# FEED_TEASER option. FEED_LINKS_APPEND_QUERY is also respected. Atom feeds\n# are generated even for old indexes and have pagination link relations\n# between each other. Old Atom feeds with no changes are marked as archived.\n# GENERATE_ATOM = False\n\n# Only include teasers in Atom and RSS feeds. Disabling include the full\n# content. Defaults to True.\n# FEED_TEASERS = True\n\n# Strip HTML from Atom and RSS feed summaries and content. Defaults to False.\n# FEED_PLAIN = False\n\n# Number of posts in Atom and RSS feeds.\n# FEED_LENGTH = 10\n\n# RSS_LINK is a HTML fragment to link the RSS or Atom feeds. If set to None,\n# the base.tmpl will use the feed Nikola generates. However, you may want to\n# change it for a FeedBurner feed or something else.\n# RSS_LINK = None\n\n# A search form to search this site, for the sidebar. You can use a Google\n# custom search (https://www.google.com/cse/)\n# Or a DuckDuckGo search: https://duckduckgo.com/search_box.html\n# Default is no search form.\n# (translatable)\n# SEARCH_FORM = """"\n#\n# This search form works for any site and looks good in the ""site"" theme where\n# it appears on the navigation bar:\n#\n# SEARCH_FORM = """"""\n# <!-- DuckDuckGo custom search -->\n# <form method=""get"" id=""search"" action=""https://duckduckgo.com/""\n#  class=""navbar-form pull-left"">\n# <input type=""hidden"" name=""sites"" value=""%s"">\n# <input type=""hidden"" name=""k8"" value=""#444444"">\n# <input type=""hidden"" name=""k9"" value=""#D51920"">\n# <input type=""hidden"" name=""kt"" value=""h"">\n# <input type=""text"" name=""q"" maxlength=""255""\n#  placeholder=""Search&hellip;"" class=""span2"" style=""margin-top: 4px;"">\n# <input type=""submit"" value=""DuckDuckGo Search"" style=""visibility: hidden;"">\n# </form>\n# <!-- End of custom search -->\n# """""" % SITE_URL\n#\n# If you prefer a Google search form, here\'s an example that should just work:\n# SEARCH_FORM = """"""\n# <!-- Google custom search -->\n# <form method=""get"" action=""https://www.google.com/search"" class=""navbar-form navbar-right"" role=""search"">\n# <div class=""form-group"">\n# <input type=""text"" name=""q"" class=""form-control"" placeholder=""Search"">\n# </div>\n# <button type=""submit"" class=""btn btn-primary"">\n# \t<span class=""glyphicon glyphicon-search""></span>\n# </button>\n# <input type=""hidden"" name=""sitesearch"" value=""%s"">\n# </form>\n# <!-- End of custom search -->\n# """""" % SITE_URL\n\n# Use content distribution networks for jQuery, twitter-bootstrap css and js,\n# and html5shiv (for older versions of Internet Explorer)\n# If this is True, jQuery and html5shiv are served from the Google CDN and\n# Bootstrap is served from BootstrapCDN (provided by MaxCDN)\n# Set this to False if you want to host your site without requiring access to\n# external resources.\n# USE_CDN = False\n\n# Check for USE_CDN compatibility.\n# If you are using custom themes, have configured the CSS properly and are\n# receiving warnings about incompatibility but believe they are incorrect, you\n# can set this to False.\n# USE_CDN_WARNING = True\n\n# Extra things you want in the pages HEAD tag. This will be added right\n# before </head>\n# (translatable)\n# EXTRA_HEAD_DATA = """"\n# Google Analytics or whatever else you use. Added to the bottom of <body>\n# in the default template (base.tmpl).\n# (translatable)\n# BODY_END = """"\n\n# The possibility to extract metadata from the filename by using a\n# regular expression.\n# To make it work you need to name parts of your regular expression.\n# The following names will be used to extract metadata:\n# - title\n# - slug\n# - date\n# - tags\n# - link\n# - description\n#\n# An example re is the following:\n# \'.*\\/(?P<date>\\d{4}-\\d{2}-\\d{2})-(?P<slug>.*)-(?P<title>.*)\\.rst\'\n# (Note the \'.*\\/\' in the beginning -- matches source paths relative to conf.py)\n# FILE_METADATA_REGEXP = None\n\n# Should titles fetched from file metadata be unslugified (made prettier?)\n# FILE_METADATA_UNSLUGIFY_TITLES = True\n\n# If enabled, extract metadata from docinfo fields in reST documents.\n# If your text files start with a level 1 heading, it will be treated as the\n# document title and will be removed from the text.\n# USE_REST_DOCINFO_METADATA = False\n\n# If enabled, hide docinfo fields in reST document output\n# HIDE_REST_DOCINFO = False\n\n# Map metadata from other formats to Nikola names.\n# Supported formats: yaml, toml, rest_docinfo, markdown_metadata\n# METADATA_MAPPING = {}\n#\n# Example for Pelican compatibility:\n# METADATA_MAPPING = {\n#     ""rest_docinfo"": {""summary"": ""description"", ""modified"": ""updated""},\n#     ""markdown_metadata"": {""summary"": ""description"", ""modified"": ""updated""}\n# }\n# Other examples: https://getnikola.com/handbook.html#mapping-metadata-from-other-formats\n\n# Map metadata between types/values. (Runs after METADATA_MAPPING.)\n# Supported formats: nikola, yaml, toml, rest_docinfo, markdown_metadata\n# The value on the right should be a dict of callables.\n# METADATA_VALUE_MAPPING = {}\n# Examples:\n# METADATA_VALUE_MAPPING = {\n#     ""yaml"": {""keywords"": lambda value: \', \'.join(value)},  # yaml: \'keywords\' list -> str\n#     ""nikola"": {\n#         ""widgets"": lambda value: value.split(\', \'),  # nikola: \'widgets\' comma-separated string -> list\n#         ""tags"": str.lower  # nikola: force lowercase \'tags\' (input would be string)\n#      }\n# }\n\n# Additional metadata that is added to a post when creating a new_post\n# ADDITIONAL_METADATA = {}\n\n# Nikola supports Twitter Card summaries, but they are disabled by default.\n# They make it possible for you to attach media to Tweets that link\n# to your content.\n#\n# Uncomment and modify to following lines to match your accounts.\n# Images displayed come from the `previewimage` meta tag.\n# You can specify the card type by using the `card` parameter in TWITTER_CARD.\n# TWITTER_CARD = {\n#     # \'use_twitter_cards\': True,  # enable Twitter Cards\n#     # \'card\': \'summary\',          # Card type, you can also use \'summary_large_image\',\n#                                   # see https://dev.twitter.com/cards/types\n#     # \'site\': \'@website\',         # twitter nick for the website\n#     # \'creator\': \'@username\',     # Username for the content creator / author.\n# }\n\n# Bundle JS and CSS into single files to make site loading faster in a HTTP/1.1\n# environment but is not recommended for HTTP/2.0 when caching is used.\n# Defaults to True.\nUSE_BUNDLES = False\n\n# Plugins you don\'t want to use. Be careful :-)\n# DISABLED_PLUGINS = [""render_galleries""]\n\n# Special settings to disable only parts of the indexes plugin.\n# Use with care.\n# DISABLE_INDEXES = False\n# DISABLE_MAIN_ATOM_FEED = False\n# DISABLE_MAIN_RSS_FEED = False\n\n# Add the absolute paths to directories containing plugins to use them.\n# For example, the `plugins` directory of your clone of the Nikola plugins\n# repository.\n# EXTRA_PLUGINS_DIRS = []\n\n# Add the absolute paths to directories containing themes to use them.\n# For example, the `v7` directory of your clone of the Nikola themes\n# repository.\n# EXTRA_THEMES_DIRS = []\n\n# List of regular expressions, links matching them will always be considered\n# valid by ""nikola check -l""\n# LINK_CHECK_WHITELIST = []\n\n# If set to True, enable optional hyphenation in your posts (requires pyphen)\n# Enabling hyphenation has been shown to break math support in some cases,\n# use with caution.\n# HYPHENATE = False\n\n# The <hN> tags in HTML generated by certain compilers (reST/Markdown)\n# will be demoted by that much (1 \xe2\x86\x92 h1 will become h2 and so on)\n# This was a hidden feature of the Markdown and reST compilers in the\n# past.  Useful especially if your post titles are in <h1> tags too, for\n# example.\n# (defaults to 1.)\n# DEMOTE_HEADERS = 1\n\n# If you don\xe2\x80\x99t like slugified file names ([a-z0-9] and a literal dash),\n# and would prefer to use all the characters your file system allows.\n# USE WITH CARE!  This is also not guaranteed to be perfect, and may\n# sometimes crash Nikola, your web server, or eat your cat.\n# USE_SLUGIFY = True\n\n# If set to True, the tags \'draft\', \'mathjax\' and \'private\' have special\n# meaning. If set to False, these tags are handled like regular tags.\nUSE_TAG_METADATA = False\n\n# If set to True, a warning is issued if one of the \'draft\', \'mathjax\'\n# and \'private\' tags are found in a post. Useful for checking that\n# migration was successful.\nWARN_ABOUT_TAG_METADATA = False\n\n# Templates will use those filters, along with the defaults.\n# Consult your engine\'s documentation on filters if you need help defining\n# those.\n# TEMPLATE_FILTERS = {}\n\n# Put in global_context things you want available on all your templates.\n# It can be anything, data, functions, modules, etc.\nGLOBAL_CONTEXT = {}\n\n# Add functions here and they will be called with template\n# GLOBAL_CONTEXT as parameter when the template is about to be\n# rendered\nGLOBAL_CONTEXT_FILLER = []\n'"
notebooks/bytopic/dask/solutions/02_dask_arrays_mean.py,0,"b'ones.mean(axis=[1, 2]).compute()\n'"
notebooks/bytopic/data-visualization/solutions/color_scatter.py,0,"b""fig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 1, 1)\n\nax.plot([285, 320], [285, 320], color='black', linestyle='--')\ns = ax.scatter(temps, temps_1000, c= temps - temps_1000, cmap='bwr', vmin=-5, vmax=5)\nfig.colorbar(s)\n\nax.set_xlabel('Temperature (surface)')\nax.set_ylabel('Temperature (1000 hPa)')\nax.set_title('Temperature Cross Plot')\nax.grid(True)\n"""
notebooks/bytopic/data-visualization/solutions/contourf_contour.py,2,"b""fig, ax = plt.subplots()\ncf = ax.contourf(X, Y, Z, levels=np.arange(-2, 2, 0.5), cmap='PiYG', extend='both')\ncl = ax.contour(X, Y, Z, levels=np.arange(-2, 2, 0.5), colors='black')\nax.clabel(cl)\nplt.colorbar(cf)"""
notebooks/bytopic/data-visualization/solutions/map.py,1,"b""field, lon = add_cyclic_point(ds.sst[0, :, :], coord=ds.lon)\nlat = ds.lat\n\n# kludge for cyclic issue\nlon[-1] = lon[-1] + 1e-4\n\nlevels = np.arange(-2, 31., 1)\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.Robinson(central_longitude=305.0))\n\n# filled contours\ncf = ax.contourf(lon, lat, field, levels=levels, \n                 cmap='plasma', transform=ccrs.PlateCarree());\n\n# contour lines\ncs = ax.contour(lon, lat, field, colors='k', levels=levels, linewidths=0.5,\n                transform=ccrs.PlateCarree())\n\n# add contour labels\nlb = plt.clabel(cs, fontsize=6, inline=True, fmt='%r');\n\n# land\nland = ax.add_feature(\n    cartopy.feature.NaturalEarthFeature('physical','land','110m', facecolor='black'))\n\n# colorbar and labels\ncb = plt.colorbar(cf, shrink=0.5)\ncb.ax.set_title('\xc2\xb0C')\nax.set_title('SST');"""
notebooks/bytopic/data-visualization/solutions/subplots.py,0,"b""fig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(1, 2, 1)\n\n# Specify how our lines should look\nax.plot(times, temps, color='tab:red', label='Temperature (surface)')\nax.plot(times, temps_1000, color='tab:red', linestyle=':',\n        label='Temperature (isobaric level)')\n\n# Same as above\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\nax.set_title('Temperature Forecast')\nax.grid(True)\nax.legend(loc='upper left')\n\nax2 = fig.add_subplot(1, 2, 2, sharex=ax, sharey=ax)\nax2.plot(times, dewpoint, color='tab:green', label='Dewpoint (surface)')\nax2.plot(times, dewpoint_1000, color='tab:green', linestyle=':', marker='o',\n         label='Dewpoint (isobaric level)')\n\nax2.set_xlabel('Time')\nax2.set_ylabel('Dewpoint')\nax2.set_title('Dewpoint Forecast')\nax2.grid(True)\nax2.legend(loc='upper left')\nax2.set_ylim(257, 312)\nax2.set_xlim(95, 162)\n"""
notebooks/bytopic/metpy/solutions/QG_data.py,0,"b""# Remaining variables needed to compute QG Omega forcing terms\nhght_500 = ds.Geopotential_height_isobaric.metpy.sel(vertical=500 * units.hPa,\n                                                     time=vtime)\nuwnd_500 = ds['u-component_of_wind_isobaric'].metpy.sel(vertical=500 * units.hPa,\n                                                        time=vtime)\nvwnd_500 = ds['v-component_of_wind_isobaric'].metpy.sel(vertical=500 * units.hPa,\n                                                        time=vtime)\nuwnd_900 = ds['u-component_of_wind_isobaric'].metpy.sel(vertical=900 * units.hPa,\n                                                        time=vtime)\nvwnd_900 = ds['v-component_of_wind_isobaric'].metpy.sel(vertical=900 * units.hPa,\n                                                        time=vtime)"""
notebooks/bytopic/metpy/solutions/distance.py,0,"b""speed = 25 * units.knots\ntime = 1 * units.fortnight\ndistance = speed * time\nprint(distance.to('furlongs'))\n"""
notebooks/bytopic/metpy/solutions/hodograph_preprocessing.py,0,"b""# Calculate the height above ground level (AGL)\nsounding['height_agl'] = sounding['height'] - sounding['height'][0]\n\n# Make an array of segment boundaries - don't forget units!\nboundaries = [0, 1, 3, 5, 8] * units.km\n\n# Make a list of colors for the segments\ncolors = ['tab:red', 'tab:green', 'tab:blue', 'tab:olive']\n"""
notebooks/bytopic/metpy/solutions/hodograph_segmented.py,0,"b""# Create figure/axis\nfig, ax = plt.subplots(1, 1, figsize=(6, 6))\n\n# Create a hodograph object/fiducial lines\nh = Hodograph(ax, component_range=60.)\nh.add_grid(increment=20)\n\n# Plot the data\nl = h.plot_colormapped(sounding['u_wind'],\n                       sounding['v_wind'],\n                       sounding['height_agl'],\n                       bounds=boundaries, colors=colors)\n\n# BONUS - add a colorbar\nplt.colorbar(l)\n"""
notebooks/bytopic/metpy/solutions/qg_omega_total_fig.py,0,"b""fig=plt.figure(1, figsize=(15.,12.))\n\n# Upper-Left Panel\nax=plt.subplot(111,projection=plotproj)\nax.set_extent([-125.,-73,25.,50.],ccrs.PlateCarree())\nax.add_feature(cfeature.COASTLINE, linewidth=0.5)\nax.add_feature(cfeature.STATES,linewidth=0.5)\n\n# Contour #1\ncs = ax.contour(lons, lats, hght_700s, clev_hght_700,colors='k',\n                linewidths=1.5, linestyles='solid', transform=dataproj)\nplt.clabel(cs, fontsize=10, inline=1, inline_spacing=3, fmt='%i',\n           rightside_up=True, use_clabeltext=True)\n\n# Contour #2\ncs2 = ax.contour(lons, lats, tmpc_700s, clev_tmpc_700, colors='grey',\n                linewidths=1.0, linestyles='dotted', transform=dataproj)\nplt.clabel(cs2, fontsize=10, inline=1, inline_spacing=3, fmt='%d',\n           rightside_up=True, use_clabeltext=True)\n\n# Colorfill\ncf = ax.contourf(lons, lats, (term_A+term_B)*10**12, clev_omega,\n                 cmap=plt.cm.RdYlBu_r, extend='both', transform=dataproj)\nplt.colorbar(cf, orientation='horizontal', pad=0.0, aspect=50, extendrect=True)\n\n# Vector\nax.barbs(lons.m, lats.m, uwnd_700s.to('kts').m, vwnd_700s.to('kts').m,\n         regrid_shape=15, transform=dataproj)\n\n# Titles\nplt.title('700-hPa Geopotential Heights, Temperature (C),\\n'\n          'Winds (kt), and QG Omega Forcings ($*10^{12}$ kg m$^{-3}$ s$^{-3}$)',loc='left')\nplt.title('VALID: ' + vtime_str, loc='right')\n\nplt.show()\n"""
notebooks/bytopic/metpy/solutions/skewt_cape_cin.py,0,"b""# Calculate surface based cape/cin\nsurface_cape, surface_cin = mpcalc.surface_based_cape_cin(sounding['pressure'],\n                                                          sounding['temperature'],\n                                                          sounding['dewpoint'])\n\n# Print CAPE and CIN\nprint('CAPE: {}\\tCIN: {}'.format(surface_cape, surface_cin))\n\n# Shade CAPE\nskew.shade_cape(sounding['pressure'],\n                sounding['temperature'],\n                sounding['profile'])\n\n# Shade CIN\nskew.shade_cin(sounding['pressure'],\n               sounding['temperature'],\n               sounding['profile'])\n\n# Redisplay the figure\nfig\n"""
notebooks/bytopic/metpy/solutions/skewt_get_data.py,0,"b""# Import the Wyoming simple web service upper air object\nfrom siphon.simplewebservice.wyoming import WyomingUpperAir\n\n# Create the datetime and station variables you'll need\nrequest_time = datetime(2011, 4, 14, 18)\nstation = 'OUN'\n\n# Make the request for the data\ndf = WyomingUpperAir.request_data(request_time, station)\n\n# Attach units to the data\nsounding = pandas_dataframe_to_unit_arrays(df)\n"""
notebooks/bytopic/metpy/solutions/skewt_make_figure.py,0,"b""# Make a figure\nfig = plt.figure(figsize=(10, 10))\n\n# Make a SkewT object\nskew = SkewT(fig)\n\n# Plot the temperature and dewpoint\nskew.plot(sounding['pressure'], sounding['temperature'], linewidth=2, color='tab:red')\nskew.plot(sounding['pressure'], sounding['dewpoint'], linewidth=2, color='tab:green')\n"""
notebooks/bytopic/metpy/solutions/skewt_thermo.py,0,"b'# Get data for the sounding\ndf = WyomingUpperAir.request_data(datetime(1999, 5, 3, 12), \'OUN\')\n\n# Calculate the ideal surface parcel path\nsounding[\'profile\'] = mpcalc.parcel_profile(sounding[\'pressure\'],\n                                            sounding[\'temperature\'][0],\n                                            sounding[\'dewpoint\'][0]).to(\'degC\')\n\n# Calculate the LCL\nlcl_pressure, lcl_temperature = mpcalc.lcl(sounding[\'pressure\'][0],\n                                           sounding[\'temperature\'][0],\n                                           sounding[\'dewpoint\'][0])\n\n# Calculate the LFC\nlfc_pressure, lfc_temperature = mpcalc.lfc(sounding[\'pressure\'],\n                                           sounding[\'temperature\'],\n                                           sounding[\'dewpoint\'])\n\n# Calculate the EL\nel_pressure, el_temperature = mpcalc.el(sounding[\'pressure\'],\n                                        sounding[\'temperature\'],\n                                        sounding[\'dewpoint\'])\n\n# Create a new figure and SkewT object\nfig = plt.figure(figsize=(10, 10))\nskew = SkewT(fig)\n\n# Plot the profile and data\nskew.plot(sounding[\'pressure\'], sounding[\'profile\'], color=\'black\')\nskew.plot(sounding[\'pressure\'], sounding[\'temperature\'], color=\'tab:red\')\nskew.plot(sounding[\'pressure\'], sounding[\'dewpoint\'], color=\'tab:blue\')\n\n# Plot the LCL, LFC, and EL as horizontal markers\nif lcl_pressure:\n    skew.ax.plot(lcl_temperature, lcl_pressure, marker=""_"", color=\'orange\', markersize=30, markeredgewidth=3)\n    \nif lfc_pressure:\n    skew.ax.plot(lfc_temperature, lfc_pressure, marker=""_"", color=\'brown\', markersize=30, markeredgewidth=3)\n    \nif el_pressure:\n    skew.ax.plot(el_temperature, el_pressure, marker=""_"", color=\'blue\', markersize=30, markeredgewidth=3)\n\n# Set axis limits\nskew.ax.set_xlim(-60, 30)\nskew.ax.set_ylim(1000, 100)\n\n# Add fiducial lines\nskew.plot_dry_adiabats()\nskew.plot_moist_adiabats()\nskew.plot_mixing_lines()\n'"
notebooks/bytopic/metpy/solutions/skewt_wind_fiducials.py,0,"b""# Plot wind barbs\nskew.plot_barbs(sounding['pressure'], sounding['u_wind'], sounding['v_wind'])\n\n# Add dry adiabats\nskew.plot_dry_adiabats()\n\n# Add moist adiabats\nskew.plot_moist_adiabats()\n\n# Add mixing ratio lines\nskew.plot_mixing_lines()\n\n# Redisplay figure\nfig\n"""
notebooks/bytopic/metpy/solutions/temperature_change.py,0,b'temperature_change_rate = -2.3 * units.delta_degF / (10 * units.minutes)\ntemperature = 25 * units.degC\ndt = 1.5 * units.hours\nprint(temperature + temperature_change_rate * dt)\n'
notebooks/bytopic/metpy/solutions/term_B_calc.py,0,"b'# 700-hPa Temperature Advection\ntadv_700 = mpcalc.advection(tmpk_700s, (uwnd_700s, vwnd_700s), (dx, dy)).to_base_units()\n# Laplacian of Temperature Advection\nlap_tadv_700 = mpcalc.laplacian(tadv_700, deltas=(dy, dx))\n\n# Final term B calculation with constants\nterm_B = (-Rd / (sigma * (700 * units.hPa)) * lap_tadv_700).to_base_units()\nprint(term_B.units)'"
notebooks/bytopic/metpy/solutions/wind_speed.py,0,"b""speed = mpcalc.wind_speed(u, v)\nprint(speed)\nprint(speed.to('mph'))\n"""
notebooks/bytopic/packaging/hello-cesm-package/setup.py,0,"b'""""""The setup script.""""""\n\n\nfrom setuptools import setup\n\ninstall_requires = [\n    ""xarray"",\n    ""numpy"",\n    ""matplotlib"",\n]  # Whatever third-party libraries are required to use our package.\n\n\nlong_description = """"""\nCESM data analysis package as an example of a\npython package from pre-existing code\n""""""\n\nsetup(\n    author=""Alice Doe"",\n    author_email=""alice@example.com"",\n    description=""My CESM analysis package"",\n    install_requires=install_requires,\n    license=""MIT"",\n    long_description=long_description,\n    keywords=""ocean modeling"",\n    name=""cesm-package"",\n    packages=[""cesm_package""],\n    url=""https://github.com/github-user-name/project-name"",\n    version=""0.1"",\n    zip_safe=False,\n)\n'"
notebooks/bytopic/test-driven-development/my_cesm_package/__init__.py,0,b''
notebooks/bytopic/test-driven-development/my_cesm_package/statistics.py,0,"b'def mean(num_list):\n    try:\n        return sum(num_list) / len(num_list)\n    except ZeroDivisionError as detail:\n        msg = ""The algebraic mean of an empty list is undefined. Please provide a list of numbers.""\n        raise ZeroDivisionError(f""{detail.__str__()}\\n{msg}"")\n'"
notebooks/bytopic/test-driven-development/tests/__init__.py,0,"b'from my_cesm_package.statistics import mean\n\n\ndef test_ints():\n    num_list = [1, 2, 3, 4, 5]\n    obs = mean(num_list)\n    exp = 3\n    assert obs == exp\n\n\ndef test_zero():\n    num_list = [0, 2, 4, 6]\n    obs = mean(num_list)\n    exp = 3\n    assert obs == exp\n\n\ndef test_double():\n    # This one will fail in Python 2\n    num_list = [1, 2, 3, 4]\n    obs = mean(num_list)\n    exp = 2.5\n    assert obs == exp\n\n\ndef test_long():\n    big = 100000000\n    obs = mean(range(1, big))\n    exp = big / 2.0\n    assert obs == exp\n\n\ndef test_complex():\n    # given that complex numbers are an unordered field\n    # the arithmetic mean of complex numbers is meaningless\n    num_list = [2 + 3j, 3 + 4j, -32 - 2j]\n    obs = mean(num_list)\n    exp = NotImplemented\n    assert obs == exp\n'"
notebooks/bytopic/test-driven-development/tests/test_statistics.py,0,"b'from my_cesm_package.statistics import mean\n\n\ndef test_ints():\n    num_list = [1, 2, 3, 4, 5]\n    obs = mean(num_list)\n    exp = 3\n    assert obs == exp\n\n\ndef test_zero():\n    num_list = [0, 2, 4, 6]\n    obs = mean(num_list)\n    exp = 3\n    assert obs == exp\n\n\ndef test_double():\n    num_list = [1, 2, 3, 4]\n    obs = mean(num_list)\n    exp = 2.5\n    assert obs == exp\n\n\ndef test_long():\n    big = 100000000\n    obs = mean(range(1, big))\n    exp = big / 2.0\n    assert obs == exp\n\n\ndef test_complex():\n    # given that complex numbers are an unordered field\n    # the arithmetic mean of complex numbers is meaningless\n    num_list = [2 + 3j, 3 + 4j, -32 - 2j]\n    obs = mean(num_list)\n    exp = NotImplemented\n    assert obs == exp\n'"
notebooks/workflows/cesm/oxygen-trend-computation/util.py,7,"b""import esmlab\nimport numpy as np\nimport xarray as xr\n\ndef clean_ds(ds, keep_vars):\n    ds.attrs = {}\n    ds.time.attrs['units'] = 'days since 0000-01-01 00:00:00'\n    ds.time.attrs['calendar'] = 'noleap'\n    \n    non_dim_coords = set(ds.coords) - set(ds.dims)\n    if non_dim_coords:\n        ds = ds.reset_coords(non_dim_coords)\n\n    ds = ds.drop([v for v in ds.variables if v not in keep_vars])\n    ds = ds.sel(z_t=200e2, method='nearest')\n    return ds\n\n\ndef sel_time(ds, indexer_val, time_coord_name=None, year_offset=None):\n    esmlabacc = ds.esmlab.set_time(time_coord_name=time_coord_name)\n    time_coord_name = esmlabacc.time_coord_name\n    dso = esmlabacc.compute_time_var(year_offset=year_offset).sel(**{time_coord_name: indexer_val})\n    esmlabacc = dso.esmlab.set_time(time_coord_name=time_coord_name)\n    return esmlabacc.uncompute_time_var()\n\n\ndef pop_add_cyclic(ds):\n    \n    nj = ds.TLAT.shape[0]\n    ni = ds.TLONG.shape[1]\n\n    xL = int(ni/2 - 1)\n    xR = int(xL + ni)\n\n    tlon = ds.TLONG.data\n    tlat = ds.TLAT.data\n    \n    tlon = np.where(np.greater_equal(tlon, min(tlon[:,0])), tlon-360., tlon)  \n    lon  = np.concatenate((tlon, tlon + 360.), 1)\n    lon = lon[:, xL:xR]\n\n    if ni == 320:\n        lon[367:-3, 0] = lon[367:-3, 0] + 360.        \n    lon = lon - 360.\n    \n    lon = np.hstack((lon, lon[:, 0:1] + 360.))\n    if ni == 320:\n        lon[367:, -1] = lon[367:, -1] - 360.\n\n    #-- trick cartopy into doing the right thing:\n    #   it gets confused when the cyclic coords are identical\n    lon[:, 0] = lon[:, 0] - 1e-8\n\n    #-- periodicity\n    lat = np.concatenate((tlat, tlat), 1)\n    lat = lat[:, xL:xR]\n    lat = np.hstack((lat, lat[:,0:1]))\n\n    TLAT = xr.DataArray(lat, dims=('nlat', 'nlon'))\n    TLONG = xr.DataArray(lon, dims=('nlat', 'nlon'))\n    \n    dso = xr.Dataset({'TLAT': TLAT, 'TLONG': TLONG})\n\n    # copy vars\n    varlist = [v for v in ds.data_vars if v not in ['TLAT', 'TLONG']]\n    for v in varlist:\n        v_dims = ds[v].dims\n        if not ('nlat' in v_dims and 'nlon' in v_dims):\n            dso[v] = ds[v]\n        else:\n            # determine and sort other dimensions\n            other_dims = set(v_dims) - {'nlat', 'nlon'}\n            other_dims = tuple([d for d in v_dims if d in other_dims])\n            lon_dim = ds[v].dims.index('nlon')\n            field = ds[v].data\n            field = np.concatenate((field, field), lon_dim)\n            field = field[..., :, xL:xR]\n            field = np.concatenate((field, field[..., :, 0:1]), lon_dim)       \n            dso[v] = xr.DataArray(field, dims=other_dims+('nlat', 'nlon'), \n                                  attrs=ds[v].attrs)\n\n\n    # copy coords\n    for v, da in ds.coords.items():\n        if not ('nlat' in da.dims and 'nlon' in da.dims):\n            dso = dso.assign_coords(**{v: da})\n                \n            \n    return dso"""
notebooks/workflows/ocean_heat_content/solutions/solution_1_1.py,0,"b""ds['lev_bnds']"""
notebooks/workflows/ocean_heat_content/solutions/solution_1_2.py,0,"b""da_thetao = ds['thetao']\nds_thetao = da_thetao.to_dataset()\nds_thetao"""
notebooks/workflows/ocean_heat_content/solutions/solution_1_3.py,0,"b'print(""*** Dimensions"")\nprint(ds.dims)\nprint(""\\n\\n*** Coordinates"")\nprint(ds.coords)\nprint(""\\n\\n*** Attributes"")\nprint(ds.attrs)\n'"
notebooks/workflows/ocean_heat_content/solutions/solution_2_1.py,0,"b""level_point = ds['lev'][-1]\nlevel_point"""
notebooks/workflows/ocean_heat_content/solutions/solution_2_2.py,0,"b""thetao_lat5 = ds['thetao'].isel(lat=5)\nthetao_lat5"""
notebooks/workflows/ocean_heat_content/solutions/solution_2_3.py,0,"b""thetao_30lon_30lat = ds['thetao'].sel(lon=30, lat=30, method='nearest', tolerance=1)\nthetao_30lon_30lat"""
notebooks/workflows/ocean_heat_content/solutions/solution_2_4.py,0,"b""level_bounds_limited = ds['lev_bnds'].where(ds['lev_bnds'] < 100, drop = True)\nlevel_bounds_limited.values"""
notebooks/workflows/ocean_heat_content/solutions/solution_2_5.py,0,"b'temperature_limited = ds[""thetao""].where(delta_level != 0, drop=True)\ntemperature_limited\n'"
notebooks/workflows/ocean_heat_content/solutions/solution_2_6.py,0,"b'def limit_depth_of_variables(level_bounds, temperature, depth_limit):\n    level_bounds_limited = level_bounds.where(level_bounds < depth_limit, depth_limit)\n    delta_level = abs(level_bounds_limited[:, 1] - level_bounds_limited[:, 0])\n\n    delta_level_limited = delta_level.where(delta_level != 0, drop=True)\n    temperature_limited = temperature.where(delta_level != 0, drop=True)\n\n    return delta_level_limited, temperature_limited\n\n\ndelta_level_limited, temperature_limited = limit_depth_of_variables(\n    ds[""lev_bnds""], ds[""thetao""], 50\n)\nprint(delta_level_limited, ""\\n\\n"")\nprint(temperature_limited)\n'"
notebooks/workflows/ocean_heat_content/solutions/solution_3_1.py,0,"b""thetao_point = ds['thetao'].isel(time=0, lev = 0, lat = 30, lon=30)\n\norig_units = cf.Unit(thetao_point.attrs['units'])\n\ntarget_units = cf.Unit('degK')\norig_units.convert(thetao_point, target_units)"""
notebooks/workflows/ocean_heat_content/solutions/solution_3_2.py,0,"b'def change_units(ds, variable_str, variable_bounds_str, target_unit_str):\n    """""" Applies unit conversion on an xarray DataArray """"""\n    orig_units = cf.Unit(ds[variable_str].attrs[""units""])\n    target_units = cf.Unit(target_unit_str)\n    variable_in_new_units = xr.apply_ufunc(\n        orig_units.convert,\n        ds[variable_bounds_str],\n        target_units,\n        output_dtypes=[ds[variable_bounds_str].dtype],\n    )\n    return variable_in_new_units\n'"
notebooks/workflows/ocean_heat_content/solutions/solution_3_3.py,0,"b'level_bounds_in_m = change_units(ds, ""lev"", ""lev_bnds"", ""m"")\ntemperature_in_K = change_units(ds, ""thetao"", ""thetao"", ""degK"")\nprint(level_bounds_in_m, temperature_in_K)\n'"
notebooks/workflows/ocean_heat_content/solutions/solution_4_1.py,0,"b'def calc_ocean_heat(delta_level, temperature):\n    """""" Compute Ocean Heat Content """"""\n    rho = 1026  # kg/m^3\n    c_p = 3990  # J/(kg K)\n    weighted_temperature = delta_level * temperature\n    heat = weighted_temperature.sum(dim=""lev"") * rho * c_p\n    return heat\n\n\nheat = calc_ocean_heat(delta_level_limited, temperature_limited)\nprint(heat)\n'"
notebooks/bytopic/packaging/hello-cesm-package/cesm_package/__init__.py,0,"b'__version__ = ""0.1""\n'"
notebooks/bytopic/packaging/hello-cesm-package/cesm_package/climatologies.py,0,"b'"""""" Module for climatology functions """"""\n\n\ndef compute_seasonal_climatology(dset):\n    """"""Function to compute seasonal climatologies\n    Parameters\n    ----------\n    dset : xr.Dataset, xr.DataArray\n         xarray dataset, or xarray dataarray\n\n    Returns\n    -------\n    Computed seasonal climatology\n    """"""\n\n    clim = dset.groupby(""time.season"").mean(dim=""time"")\n    return clim\n'"
notebooks/bytopic/packaging/hello-cesm-package/cesm_package/statistics.py,0,"b'""""""Module for statistic functions""""""\n\n\ndef compute_mean(dset, dims=None):\n    """"""Compute Mean along specified dim\n    Parameters\n    ----------\n    dset : xr.Dataset, xr.DataArray\n          xarray dataset or xarray dataarray\n\n    dims : list, default (None)\n\n        list of dimensions to apply mean along\n\n    Returns\n    -------\n    Dataset/DataArray with mean applied to specified dimensions\n    """"""\n\n    return dset.mean(dim=dims)\n'"
notebooks/bytopic/packaging/hello-cesm-package/tests/test_statistics.py,0,b'def test_sample():\n    assert 2 == 2\n'
