file_path,api_count,code
Chapter01/simul.py,0,"b""from matplotlib import pyplot as plt\nfrom matplotlib import animation\nfrom random import uniform\nimport timeit\n\nclass Particle:\n\n    __slots__ = ('x', 'y', 'ang_speed')\n\n    def __init__(self, x, y, ang_speed):\n        self.x = x\n        self.y = y\n        self.ang_speed = ang_speed\n\n\nclass ParticleSimulator:\n\n    def __init__(self, particles):\n        self.particles = particles\n\n    def evolve(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n\n        for i in range(nsteps):\n            for p in self.particles:\n\n                norm = (p.x**2 + p.y**2)**0.5\n                v_x = (-p.y)/norm\n                v_y = p.x/norm\n\n                d_x = timestep * p.ang_speed * v_x\n                d_y = timestep * p.ang_speed * v_y\n\n                p.x += d_x\n                p.y += d_y\n\n    # def evolve(self, dt):\n    #     timestep = 0.00001\n    #     nsteps = int(dt/timestep)\n\n    #     # First, change the loop order\n    #     for p in self.particles:\n    #         t_x_ang = timestep * p.ang_speed\n    #         for i in range(nsteps):\n    #             norm = (p.x**2 + p.y**2)**0.5\n    #             p.x, p.y = p.x - t_x_ang*p.y/norm, p.y + t_x_ang * p.x/norm\n\ndef visualize(simulator):\n\n    X = [p.x for p in simulator.particles]\n    Y = [p.y for p in simulator.particles]\n\n    fig = plt.figure()\n    ax = plt.subplot(111, aspect='equal')\n    line, = ax.plot(X, Y, 'ro')\n\n    # Axis limits\n    plt.xlim(-1, 1)\n    plt.ylim(-1, 1)\n\n    # It will be run when the animation starts\n    def init():\n        line.set_data([], [])\n        return line,\n\n    def animate(i):\n        # We let the particle evolve for 0.1 time units\n        simulator.evolve(0.01)\n        X = [p.x for p in simulator.particles]\n        Y = [p.y for p in simulator.particles]\n\n        line.set_data(X, Y)\n        return line,\n\n    # Call the animate function each 10 ms\n    anim = animation.FuncAnimation(fig,\n                                   animate,\n                                   init_func=init,\n                                   blit=True,\n                                   interval=10)\n    plt.show()\n\n\ndef test_visualize():\n    particles = [Particle( 0.3, 0.5, +1),\n                 Particle( 0.0, -0.5, -1),\n                 Particle(-0.1, -0.4, +3)]\n\n    simulator = ParticleSimulator(particles)\n    visualize(simulator)\n\ndef test_evolve():\n    particles = [Particle( 0.3,  0.5, +1),\n                 Particle( 0.0, -0.5, -1),\n                 Particle(-0.1, -0.4, +3)]\n\n    simulator = ParticleSimulator(particles)\n\n    simulator.evolve(0.1)\n\n    p0, p1, p2 = particles\n\n    def fequal(a, b):\n        return abs(a - b) < 1e-5\n\n    assert fequal(p0.x, 0.2102698450356825)\n    assert fequal(p0.y, 0.5438635787296997)\n\n    assert fequal(p1.x, -0.0993347660567358)\n    assert fequal(p1.y, -0.4900342888538049)\n\n    assert fequal(p2.x,  0.1913585038252641)\n    assert fequal(p2.y, -0.3652272210744360)\n\n\ndef benchmark():\n    particles = [Particle(uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0))\n                  for i in range(100)]\n\n    simulator = ParticleSimulator(particles)\n    simulator.evolve(0.1)\n\n\ndef timing():\n    result = timeit.timeit('benchmark()',\n                           setup='from __main__ import benchmark',\n                           number=10)\n    # Result is the time it takes to run the whole loop\n    print(result)\n\n    result = timeit.repeat('benchmark()',\n                           setup='from __main__ import benchmark',\n                           number=10,\n                           repeat=3)\n    # Result is a list of times\n    print(result)\n\n\ndef benchmark_memory():\n    particles = [Particle(uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0))\n                  for i in range(100000)]\n\n    simulator = ParticleSimulator(particles)\n    simulator.evolve(0.001)\n\n\nif __name__ == '__main__':\n    benchmark()\n"""
Chapter01/taylor.py,0,"b""def factorial(n): \n    if n == 0: \n        return 1.0 \n    else: \n        return float(n) * factorial(n-1) \n\ndef taylor_exp(n): \n    return [1.0/factorial(i) for i in range(n)] \n\ndef taylor_sin(n): \n    res = [] \n    for i in range(n): \n        if i % 2 == 1: \n           res.append((-1)**((i-1)/2)/float(factorial(i))) \n        else: \n           res.append(0.0) \n    return res \n\ndef benchmark(): \n    taylor_exp(500) \n    taylor_sin(500) \n\nif __name__ == '__main__': \n    benchmark() \n"""
Chapter01/test_simul.py,0,"b'from simul import Particle, ParticleSimulator\n\ndef test_evolve(benchmark):\n    particles = [Particle( 0.3,  0.5, +1),\n                 Particle( 0.0, -0.5, -1),\n                 Particle(-0.1, -0.4, +3)]\n\n    simulator = ParticleSimulator(particles)\n\n    simulator.evolve(0.1)\n\n    p0, p1, p2 = particles\n\n    def fequal(a, b):\n        return abs(a - b) < 1e-5\n\n    assert fequal(p0.x, 0.2102698450356825)\n    assert fequal(p0.y, 0.5438635787296997)\n\n    assert fequal(p1.x, -0.0993347660567358)\n    assert fequal(p1.y, -0.4900342888538049)\n\n    assert fequal(p2.x,  0.1913585038252641)\n    assert fequal(p2.y, -0.3652272210744360)\n\n    benchmark(simulator.evolve, 0.1)\n'"
Chapter04/cheb.py,2,"b""import numpy as np\nfrom distance import chebyshev\n\ndef benchmark():\n     a = np.random.rand(1000, 2)\n     b = np.random.rand(1000, 2)\n     for x1, y1 in a:\n        for x2, y2 in b:\n            chebyshev(x1, x2, y1, y2)\n\nif __name__ == '__main__':\n    benchmark()\n"""
Chapter04/setup.py,0,"b""from distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(\n   name='Hello',\n   ext_modules = cythonize(['hello.pyx', 'cevolve.pyx',\n                            'mathlib.pyx', 'distance.pyx']),\n)\n"""
Chapter04/simul.py,8,"b""import numpy as np\nfrom cevolve import c_evolve\n\nclass Particle:\n\n    __slots__ = ('x', 'y', 'ang_speed')\n    \n    def __init__(self, x, y, ang_speed):\n        self.x = x\n        self.y = y\n        self.ang_speed = ang_speed\n\nclass ParticleSimulator:\n\n    def __init__(self, particles):\n        self.particles = particles\n\n    def evolve_cython(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n        \n        r_i = np.array([[p.x, p.y] for p in self.particles])        \n        ang_speed_i = np.array([p.ang_speed for p in self.particles])\n\n        c_evolve(r_i, ang_speed_i, timestep, nsteps)\n        \n        for i, p in enumerate(self.particles):\n            p.x, p.y = r_i[i]\n        \n    def evolve_numpy(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n        \n        r_i = np.array([[p.x, p.y] for p in self.particles])        \n        ang_speed_i = np.array([p.ang_speed for p in self.particles])\n        \n        v_i = np.empty_like(r_i)\n        \n        for i in range(nsteps):\n            norm_i = np.sqrt((r_i ** 2).sum(axis=1))\n\n            v_i = r_i[:, [1, 0]]\n            v_i[:, 0] *= -1\n            v_i /= norm_i[:, np.newaxis]                \n\n            d_i = timestep * ang_speed_i[:, np.newaxis] * v_i\n\n            r_i += d_i\n        \n        for i, p in enumerate(self.particles):\n            p.x, p.y = r_i[i]\n\n    def evolve_python(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n\n        # First, change the loop order\n        for p in self.particles:\n            t_x_ang = timestep * p.ang_speed\n            for i in range(nsteps):\n                norm = (p.x**2 + p.y**2)**0.5\n                p.x, p.y = p.x - t_x_ang*p.y/norm, p.y + t_x_ang * p.x/norm\n\nfrom random import uniform\n\ndef benchmark(npart=100, method='python'):\n    particles = [Particle(uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0)) \n                  for i in range(npart)]\n    \n    simulator = ParticleSimulator(particles)\n    if method=='python':\n        simulator.evolve_python(0.1)\n        \n    if method == 'cython':\n        simulator.evolve_cython(0.1)\n        \n    elif method == 'numpy':\n        simulator.evolve_numpy(0.1)\n"""
Chapter06/cpu_monitor.py,2,"b'from rx import Observable\nimport psutil\nimport numpy as np\nimport pylab as plt\n\ncpu_data = (Observable\n            .interval(100) # Each 100 milliseconds\n            .map(lambda x: psutil.cpu_percent())\n            .publish())\ncpu_data.connect()\n\n\ndef monitor_cpu(npoints):\n    lines, = plt.plot([], [])\n    plt.xlim(0, npoints)\n    plt.ylim(0, 100)\n\n    cpu_data_window = cpu_data.buffer_with_count(npoints, 1)\n\n    def update_plot(cpu_readings):\n        lines.set_xdata(np.arange(len(cpu_readings)))\n        lines.set_ydata(np.array(cpu_readings))\n        plt.draw()\n\n    alertpoints = 4\n    high_cpu = (cpu_data\n                .buffer_with_count(alertpoints, 1)\n                .map(lambda readings: all(r > 20 for r in readings)))\n\n    label = plt.text(1, 1, ""normal"")\n\n    def update_warning(is_high):\n        if is_high:\n            label.set_text(""high"")\n        else:\n            label.set_text(""normal"")\n\n    high_cpu.subscribe(update_warning)\n    cpu_data_window.subscribe(update_plot)\n\n    plt.show()\n\nif __name__ == \'__main__\':\n    monitor_cpu(10)\n'"
Chapter07/pi.py,0,"b'import multiprocessing\nimport random\n\nsamples = 10000000\n\ndef pi_serial():\n    hits = 0\n\n    for i in range(samples):\n        x = random.uniform(-1.0, 1.0)\n        y = random.uniform(-1.0, 1.0)\n    \n        if x**2 + y**2 <= 1:\n            hits += 1\n\n    pi = 4.0 * hits/samples\n    return pi\n\ndef sample():\n    x = random.uniform(-1.0, 1.0)\n    y = random.uniform(-1.0, 1.0)\n    \n    if x**2 + y**2 <= 1:\n        return 1\n    else:\n        return 0\n\ndef pi_apply_async():\n    pool = multiprocessing.Pool()\n    results_async = [pool.apply_async(sample) \n                     for i in range(samples)]\n    hits = sum(r.get() for r in results_async)\n\n    pi = 4.0 * hits/samples\n    return pi\n\ndef sample_multiple(samples_partial):\n    return sum(sample() for i in range(samples_partial))\n\ndef pi_apply_async_chunked():\n    ntasks = 10\n    chunk_size = samples/ntasks\n    pool = multiprocessing.Pool()\n    results_async = [pool.apply_async(sample_multiple, [chunk_size]) \n                     for i in range(ntasks)]\n    hits = sum(r.get() for r in results_async)\n\n    pi = 4.0 * hits/samples\n    return pi\n'"
Chapter07/processes.py,0,"b'import multiprocessing\nimport time\n\nclass Process(multiprocessing.Process):\n    def __init__(self, id):\n        super(Process, self).__init__()\n        self.id = id\n\n    def run(self):\n        time.sleep(1)\n        print(""I\'m the process with id: {}"".format(self.id))\n\ndef square(x):\n    return x * x\n\ndef map_test():\n    pool = multiprocessing.Pool()\n        \n    inputs = [0, 1, 2, 3, 4]\n    outputs = pool.map(square, inputs)\n    print(outputs)\n    outputs_async = pool.map_async(square, inputs)\n    outputs = outputs_async.get()\n    print(outputs)\n\n\nif __name__ == \'__main__\':\n    processes = Process(1), Process(2), Process(3), Process(4)\n    [p.start() for p in processes]\n\n    map_test()\n'"
Chapter07/setup.py,0,"b""from distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Build import cythonize\n\nhello_parallel = Extension('hello_parallel',\n                           ['hello_parallel.pyx'],\n                           extra_compile_args=['-fopenmp'],\n                           extra_link_args=['-fopenmp'])\ncevolve = Extension('cevolve',\n                    ['cevolve.pyx'],\n                    extra_compile_args=['-fopenmp'],\n                    extra_link_args=['-fopenmp'])\nsetup(\n   name='Hello',\n   ext_modules = cythonize([cevolve, hello_parallel]),\n)\n"""
Chapter07/shared.py,0,"b""import multiprocessing\n\nlock = multiprocessing.Lock()\n\nclass Process(multiprocessing.Process):\n    \n    def __init__(self, counter):\n        super(Process, self).__init__()\n        self.counter = counter\n\n    def run(self):\n        for i in range(1000):\n            with lock:\n                self.counter.value += 1\n\n\ndef main():\n    counter = multiprocessing.Value('i', lock=True)\n    counter.value = 0\n    \n    processes = [Process(counter) for i in range(4)]\n    [p.start() for p in processes]\n    [p.join() for p in processes]\n    print(counter.value)\n\n\nif __name__ == '__main__':\n    main()\n"""
Chapter07/simul.py,10,"b""import numpy as np\nfrom cevolve import c_evolve, c_evolve_openmp\n\nclass Particle:\n\n    __slots__ = ('x', 'y', 'ang_speed')\n    \n    def __init__(self, x, y, ang_speed):\n        self.x = x\n        self.y = y\n        self.ang_speed = ang_speed\n\nclass ParticleSimulator:\n\n    def __init__(self, particles):\n        self.particles = particles\n\n    def evolve_cython(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n        \n        r_i = np.array([[p.x, p.y] for p in self.particles])        \n        ang_speed_i = np.array([p.ang_speed for p in self.particles])\n\n        c_evolve(r_i, ang_speed_i, timestep, nsteps)\n        \n        for i, p in enumerate(self.particles):\n            p.x, p.y = r_i[i]\n\n    def evolve_openmp(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n        \n        r_i = np.array([[p.x, p.y] for p in self.particles])        \n        ang_speed_i = np.array([p.ang_speed for p in self.particles])\n\n        c_evolve_openmp(r_i, ang_speed_i, timestep, nsteps)\n        \n        for i, p in enumerate(self.particles):\n            p.x, p.y = r_i[i]\n        \n    def evolve_numpy(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n        \n        r_i = np.array([[p.x, p.y] for p in self.particles])        \n        ang_speed_i = np.array([p.ang_speed for p in self.particles])\n        \n        v_i = np.empty_like(r_i)\n        \n        for i in range(nsteps):\n            norm_i = np.sqrt((r_i ** 2).sum(axis=1))\n\n            v_i = r_i[:, [1, 0]]\n            v_i[:, 0] *= -1\n            v_i /= norm_i[:, np.newaxis]                \n\n            d_i = timestep * ang_speed_i[:, np.newaxis] * v_i\n\n            r_i += d_i\n        \n        for i, p in enumerate(self.particles):\n            p.x, p.y = r_i[i]\n\n    def evolve_python(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n\n        # First, change the loop order\n        for p in self.particles:\n            t_x_ang = timestep * p.ang_speed\n            for i in range(nsteps):\n                norm = (p.x**2 + p.y**2)**0.5\n                p.x, p.y = p.x - t_x_ang*p.y/norm, p.y + t_x_ang * p.x/norm\n\nfrom random import uniform\n\ndef benchmark(npart=100, method='python'):\n    particles = [Particle(uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0)) \n                  for i in range(npart)]\n    \n    simulator = ParticleSimulator(particles)\n    if method=='python':\n        simulator.evolve_python(1.0)\n        \n    if method == 'cython':\n        simulator.evolve_cython(10.0)\n\n    if method == 'openmp':\n        simulator.evolve_openmp(10.0)\n        \n    elif method == 'numpy':\n        simulator.evolve_numpy(1.0)\n"""
Chapter07/simul_parallel.py,0,"b""from IPython.parallel import Client\nfrom random import uniform\nfrom simul import Particle\n\n\ndef scatter_gather(nparticles):\n    particles = [Particle(uniform(-1.0, 1.0), \n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0)) for i in range(nparticles)]\n    \n    rc = Client()\n    dview = rc[:]\n    \n    dview.scatter('particle_chunk', particles).get()\n\n    dview.execute('from simul import ParticleSimulator')\n    dview.execute('simulator = ParticleSimulator(particle_chunk)')\n    dview.execute('simulator.evolve_cython(0.1)')\n    \n    particles = dview.gather('particle_chunk', block=True)\n\n"""
Chapter07/test_tensorflow.py,2,"b""import tensorflow as tf\nimport numpy as np\nimport time\nimport sys\n\nNUM_THREADS = int(sys.argv[1])\nN = 30000\n\nprint('Num threads', NUM_THREADS)\nx_data = np.random.uniform(-1, 1, N)\ny_data = np.random.uniform(-1, 1, N)\n\nx = tf.placeholder('float64', name='x')\ny = tf.placeholder('float64', name='y')\n\nhit_tests = x ** 2 + y ** 2 < 1.0\nhits = tf.reduce_sum(tf.cast(hit_tests, 'int32'))\n\nwith tf.Session(config=tf.ConfigProto(inter_op_parallelism_threads=NUM_THREADS,\n                                      intra_op_parallelism_threads=NUM_THREADS)) as sess:\n    start = time.time()\n    for i in range(10000):\n        sess.run(hits, {x: x_data, y: y_data})\n    print(time.time() - start)\n"""
Chapter07/test_tensorflow_matmul.py,2,"b""import tensorflow as tf\nimport time\nimport numpy as np\nN = 5000\n\nA_data = np.random.rand(N, N)\nB_data = np.random.rand(N, N)\n\n# Creates a graph.\n\nwith tf.device('/gpu:0'):\n    A = tf.placeholder('float32')\n    B = tf.placeholder('float32')\n\n    C = tf.matmul(A, B)\n\nwith tf.Session() as sess:\n    start = time.time()\n    sess.run(C, {A: A_data, B: B_data})\n    print('Matrix multiply ({}) took: {}'.format(N, time.time() - start))\n"""
Chapter07/test_theano.py,2,"b'import numpy as np\nimport theano.tensor as T\nimport theano as th\nth.config.openmp_elemwise_minsize = 1000\nth.config.openmp = True\n\nx = T.vector(\'x\')\ny = T.vector(\'y\')\n\nhit_test = x ** 2 + y ** 2 < 1\nhits = hit_test.sum()\nmisses = x.shape[0]\npi_est = 4 * hits/misses\n\ncalculate_pi = th.function([x, y], pi_est)\n\nx_val = np.random.uniform(-1, 1, 30000)\ny_val = np.random.uniform(-1, 1, 30000)\n\nimport timeit\nres = timeit.timeit(""calculate_pi(x_val, y_val)"", \n                    ""from __main__ import x_val, y_val, calculate_pi"", number=100000)\nprint(res)\n'"
Chapter07/test_theano_matmul.py,2,"b'from theano import function, config\nimport theano.tensor as T\nimport numpy as np\nimport time\n\nN = 5000\n\nA_data = np.random.rand(N, N).astype(\'float32\')\nB_data = np.random.rand(N, N).astype(\'float32\')\n\nA = T.matrix(\'A\')\nB = T.matrix(\'B\')\n\nf = function([A, B], T.dot(A, B))\n\nstart = time.time()\nf(A_data, B_data)\n\nprint(""Matrix multiply ({}) took {} seconds"".format(N, time.time() - start))\nprint(\'Device used:\', config.device)\n'"
Chapter08/example1.py,0,"b""# ch1/example1.py\n\nfrom math import sqrt\nimport concurrent.futures\nfrom timeit import default_timer as timer\n\ndef is_prime(x):\n    if x < 2:\n        return False\n\n    if x == 2:\n        return x\n\n    if x % 2 == 0:\n        return False\n\n    limit = int(sqrt(x)) + 1\n    for i in range(3, limit, 2):\n        if x % i == 0:\n            return False\n\n    return x\n\n\ninput = [i for i in range(10 ** 13, 10 ** 13 + 500)]\n\n\n# sequential\n# comment out to only run concurrent\nstart = timer()\nresult = []\nfor i in input:\n    if is_prime(i):\n        result.append(i)\nprint('Result 1:', result)\nprint('Took: %.2f seconds.' % (timer() - start))\n\n\n# concurrent\n# comment out to only run sequential\nstart = timer()\nresult = []\nwith concurrent.futures.ProcessPoolExecutor(max_workers=20) as executor:\n    futures = [executor.submit(is_prime, i) for i in input]\n\n    for i, future in enumerate(concurrent.futures.as_completed(futures)):\n        if future.result():\n            result.append(future.result())\n\nprint('Result 2:', result)\nprint('Took: %.2f seconds.' % (timer() - start))\n"""
Chapter08/example2.py,0,"b""# ch1/example2.py\n\nimport concurrent.futures\nfrom timeit import default_timer as timer\n\n\n# sequential\ndef f(x):\n    return x * x - x + 1\n\nstart = timer()\nresult = 3\nfor i in range(20):\n    result = f(result)\n\nprint('Result is very large. Only printing the last 5 digits:', result % 100000)\nprint('Sequential took: %.2f seconds.' % (timer() - start))\n\n\n# concurrent\ndef concurrent_f(x):\n    global result\n    result = f(result)\n\nresult = 3\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=20) as exector:\n    futures = [exector.submit(concurrent_f, i) for i in range(20)]\n\n    _ = concurrent.futures.as_completed(futures)\n\nprint('Result is very large. Only printing the last 5 digits:', result % 100000)\nprint('Concurrent took: %.2f seconds.' % (timer() - start))\n"""
Chapter09/example1.py,0,"b""# ch2/example1.py\n\nfrom math import sqrt\n\nimport concurrent.futures\nimport multiprocessing\n\nfrom timeit import default_timer as timer\n\n\ndef is_prime(x):\n    if x < 2:\n        return False\n\n    if x == 2:\n        return x\n\n    if x % 2 == 0:\n        return False\n\n    limit = int(sqrt(x)) + 1\n    for i in range(3, limit, 2):\n        if x % i == 0:\n            return False\n\n    return x\n\ndef concurrent_solve(n_workers):\n    print('Number of workers: %i.' % n_workers)\n\n    start = timer()\n    result = []\n\n    with concurrent.futures.ProcessPoolExecutor(max_workers=n_workers) as executor:\n\n        futures = [executor.submit(is_prime, i) for i in input]\n        completed_futures = concurrent.futures.as_completed(futures)\n\n        sub_start = timer()\n\n        for i, future in enumerate(completed_futures):\n            if future.result():\n                result.append(future.result())\n\n        sub_duration = timer() - sub_start\n\n    duration = timer() - start\n    print('Sub took: %.4f seconds.' % sub_duration)\n    print('Took: %.4f seconds.' % duration)\n\n\ninput = [i for i in range(10 ** 13, 10 ** 13 + 1000)]\n\nfor n_workers in range(1, multiprocessing.cpu_count() + 1):\n    concurrent_solve(n_workers)\n    print('_' * 20)\n"""
Chapter10/example1.py,0,"b""# ch3/example1.py\n\nfrom my_thread import MyThread\n\n\nthread1 = MyThread('A', 0.5)\nthread2 = MyThread('B', 0.5)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\n\nprint('Finished.')\n"""
Chapter10/example2.py,0,"b""# ch3/example2.py\n\nimport _thread as thread\nfrom math import sqrt\n\ndef is_prime(x):\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nmy_input = [2, 193, 323, 1327, 433785907]\n\nfor x in my_input:\n    thread.start_new_thread(is_prime, (x, ))\n\na = input('Type something to quit: \\n')\nprint('Finished.')\n"""
Chapter10/example3.py,0,"b""# ch3/example3.py\n\nimport threading\nfrom math import sqrt\n\ndef is_prime(x):\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nclass MyThread(threading.Thread):\n    def __init__(self, x):\n        threading.Thread.__init__(self)\n        self.x = x\n\n    def run(self):\n        print('Starting processing %i...' % x)\n        is_prime(self.x)\n\nmy_input = [2, 193, 323, 1327, 433785907]\n\nthreads = []\n\nfor x in my_input:\n    temp_thread = MyThread(x)\n    temp_thread.start()\n\n    threads.append(temp_thread)\n\nfor thread in threads:\n    thread.join()\n\nprint('Finished.')\n"""
Chapter10/example4.py,0,"b""# ch3/example4.py\n\nimport threading\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, name, delay):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.delay = delay\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        thread_lock.acquire()\n        thread_count_down(self.name, self.delay)\n        thread_lock.release()\n        print('Finished thread %s.' % self.name)\n\ndef thread_count_down(name, delay):\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Thread %s counting down: %i...' % (name, counter))\n        counter -= 1\n\nthread_lock = threading.Lock()\n\nthread1 = MyThread('A', 0.5)\nthread2 = MyThread('B', 0.5)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\n\nprint('Finished.')\n"""
Chapter10/example5.py,0,"b""# ch3/example5.py\n\nimport queue\nimport threading\nimport time\n\n\nclass MyThread(threading.Thread):\n    def __init__(self, name):\n        threading.Thread.__init__(self)\n        self.name = name\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        process_queue()\n        print('Exiting thread %s.' % self.name)\n\ndef process_queue():\n    while True:\n        try:\n            x = my_queue.get(block=False)\n        except queue.Empty:\n            return\n        else:\n            print_factors(x)\n\n        time.sleep(1)\n\ndef print_factors(x):\n    result_string = 'Positive factors of %i are: ' % x\n    for i in range(1, x + 1):\n        if x % i == 0:\n            result_string += str(i) + ' '\n    result_string += '\\n' + '_' * 20\n\n    print(result_string)\n\n\n# setting up variables\ninput_ = [1, 10, 4, 3]\n\n# filling the queue\nmy_queue = queue.Queue()\nfor x in input_:\n    my_queue.put(x)\n\n\n# initializing and starting 3 threads\nthread1 = MyThread('A')\nthread2 = MyThread('B')\nthread3 = MyThread('C')\n\nthread1.start()\nthread2.start()\nthread3.start()\n\n# joining all 3 threads\nthread1.join()\nthread2.join()\nthread3.join()\n\nprint('Done.')\n"""
Chapter10/my_thread.py,0,"b""# ch3/my_thread.py\n\nimport threading\nimport time\n\n\nclass MyThread(threading.Thread):\n    def __init__(self, name, delay):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.delay = delay\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        thread_count_down(self.name, self.delay)\n        print('Finished thread %s.' % self.name)\n\ndef thread_count_down(name, delay):\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Thread %s counting down: %i...' % (name, counter))\n        counter -= 1\n"""
Chapter11/example1.py,0,"b""# ch4/example1.py\n\nn_files = 254\nfiles = []\n\n# method 1\nfor i in range(n_files):\n    files.append(open('output1/sample%i.txt' % i, 'w'))\n\n# method 2\n'''for i in range(n_files):\n    f = open('output1/sample%i.txt' % i, 'w')\n    files.append(f)\n    f.close()'''\n\n# method 3\n'''for i in range(n_files):\n    with open('output1/sample%i.txt' % i, 'w') as f:\n        files.append(f)'''\n"""
Chapter11/example2.py,0,"b""# ch4/example2.py\n\nfrom threading import Lock\n\nmy_lock = Lock()\n\n# induces deadlocks\ndef get_data_from_file_v1(filename):\n    my_lock.acquire()\n\n    with open(filename, 'r') as f:\n        data.append(f.read())\n\n    my_lock.release()\n\n# handles exceptions\ndef get_data_from_file_v2(filename):\n    with my_lock, open(filename, 'r') as f:\n        data.append(f.read())\n\ndata = []\n\ntry:\n    get_data_from_file_v1('output2/sample0.txt')\n    #get_data_from_file_v2('output2/sample0.txt')\nexcept FileNotFoundError:\n    print('File could not be found...')\n\nmy_lock.acquire()\nprint('Lock can still be acquired.')\n"""
Chapter12/example1.py,0,"b""# ch05/example1.py\n\nimport requests\n\nurl = 'http://www.google.com'\n\nres = requests.get(url)\n\nprint(res.status_code)\nprint(res.headers)\n\nwith open('google.html', 'w') as f:\n    f.write(res.text)\n\nprint('Done.')\n"""
Chapter12/example2.py,0,"b""# ch05/example2.py\n\nimport requests\n\ndef ping(url):\n    res = requests.get(url)\n    print(f'{url}: {res.text}')\n\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/400',\n    'http://httpstat.us/404',\n    'http://httpstat.us/408',\n    'http://httpstat.us/500',\n    'http://httpstat.us/524'\n]\n\nfor url in urls:\n    ping(url)\n\nprint('Done.')\n"""
Chapter12/example3.py,0,"b""# ch05/example3.py\n\nimport threading\nimport requests\nimport time\n\ndef ping(url):\n    res = requests.get(url)\n    print(f'{url}: {res.text}')\n\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/400',\n    'http://httpstat.us/404',\n    'http://httpstat.us/408',\n    'http://httpstat.us/500',\n    'http://httpstat.us/524'\n]\n\nstart = time.time()\nfor url in urls:\n    ping(url)\nprint(f'Sequential: {time.time() - start : .2f} seconds')\n\nprint()\n\nstart = time.time()\nthreads = []\nfor url in urls:\n    thread = threading.Thread(target=ping, args=(url,))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()\n\nprint(f'Threading: {time.time() - start : .2f} seconds')\n"""
Chapter12/example4.py,0,"b""# ch05/example4.py\n\nimport threading\nimport requests\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, url):\n        threading.Thread.__init__(self)\n        self.url = url\n        self.result = None\n\n    def run(self):\n        res = requests.get(self.url)\n        self.result = f'{self.url}: {res.text}'\n\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/400',\n    'http://httpstat.us/404',\n    'http://httpstat.us/408',\n    'http://httpstat.us/500',\n    'http://httpstat.us/524'\n]\n\nstart = time.time()\n\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nfor thread in threads:\n    print(thread.result)\n\nprint(f'Took {time.time() - start : .2f} seconds')\n\nprint('Done.')\n"""
Chapter12/example5.py,0,"b""# ch05/example5.py\n\nimport threading\nimport requests\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, url):\n        threading.Thread.__init__(self)\n        self.url = url\n        self.result = None\n\n    def run(self):\n        res = requests.get(self.url)\n        self.result = f'{self.url}: {res.text}'\n\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/200?sleep=20000',\n    'http://httpstat.us/400'\n]\n\nstart = time.time()\n\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nfor thread in threads:\n    print(thread.result)\n\nprint(f'Took {time.time() - start : .2f} seconds')\n\nprint('Done.')\n"""
Chapter12/example6.py,0,"b""# ch05/example6.py\n\nimport threading\nimport requests\nimport time\n\nUPDATE_INTERVAL = 0.01\n\nclass MyThread(threading.Thread):\n    def __init__(self, url):\n        threading.Thread.__init__(self)\n        self.url = url\n        self.result = f'{self.url}: Custom timeout'\n\n    def run(self):\n        res = requests.get(self.url)\n        self.result = f'{self.url}: {res.text}'\n\ndef process_requests(threads, timeout=5):\n    def alive_count():\n        alive = [1 if thread.isAlive() else 0 for thread in threads]\n        return sum(alive)\n\n    while alive_count() > 0 and timeout > 0:\n        timeout -= UPDATE_INTERVAL\n        time.sleep(UPDATE_INTERVAL)\n    for thread in threads:\n        print(thread.result)\n\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/200?sleep=4000',\n    'http://httpstat.us/200?sleep=20000',\n    'http://httpstat.us/400'\n]\n\nstart = time.time()\n\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    thread.setDaemon(True)\n    thread.start()\nprocess_requests(threads)\n\nprint(f'Took {time.time() - start : .2f} seconds')\n\nprint('Done.')\n"""
Chapter13/example1.py,0,"b""# ch6/example1.py\n\nfrom multiprocessing import Process\nimport time\n\n\ndef count_down(name, delay):\n    print('Process %s starting...' % name)\n\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Process %s counting down: %i...' % (name, counter))\n        counter -= 1\n\n    print('Process %s exiting...' % name)\n\n\nif __name__ == '__main__':\n    process1 = Process(target=count_down, args=('A', 0.5))\n    process2 = Process(target=count_down, args=('B', 0.5))\n\n    process1.start()\n    process2.start()\n\n    process1.join()\n    process2.join()\n\n    print('Done.')\n"""
Chapter13/example2.py,0,"b""# ch6/example2.py\n\nfrom multiprocessing import Process, current_process\nimport time\n\n\ndef f1():\n    pname = current_process().name\n    print('Starting process %s...' % pname)\n    time.sleep(2)\n    print('Exiting process %s...' % pname)\n\ndef f2():\n    pname = current_process().name\n    print('Starting process %s...' % pname)\n    time.sleep(4)\n    print('Exiting process %s...' % pname)\n\n\nif __name__ == '__main__':\n    p1 = Process(name='Worker 1', target=f1)\n    p2 = Process(name='Worker 2', target=f2)\n    p3 = Process(target=f1)\n\n    p1.start()\n    p2.start()\n    p3.start()\n\n    p1.join()\n    p2.join()\n    p3.join()\n"""
Chapter13/example3.py,0,"b""# ch6/example3.py\n\nfrom multiprocessing import Process, current_process\nimport time\nimport os\n\n\ndef print_info(title):\n    print(title)\n\n    if hasattr(os, 'getppid'):\n        print('Parent process ID: %s.' % str(os.getppid()))\n\n    print('Current Process ID: %s.\\n' % str(os.getpid()))\n\ndef f():\n    print_info('Function f')\n\n    pname = current_process().name\n    print('Starting process %s...' % pname)\n    time.sleep(1)\n    print('Exiting process %s...' % pname)\n\n\nif __name__ == '__main__':\n    print_info('Main program')\n\n    p = Process(target=f)\n    p.start()\n    p.join()\n\n    print('Done.')\n"""
Chapter13/example4.py,0,"b""# ch6/example4.py\n\nfrom multiprocessing import Process, current_process\nimport time\n\n\ndef f1():\n    p = current_process()\n    print('Starting process %s, ID %s...' % (p.name, p.pid))\n    time.sleep(4)\n    print('Exiting process %s, ID %s...' % (p.name, p.pid))\n\ndef f2():\n    p = current_process()\n    print('Starting process %s, ID %s...' % (p.name, p.pid))\n    time.sleep(2)\n    print('Exiting process %s, ID %s...' % (p.name, p.pid))\n\n\nif __name__ == '__main__':\n    p1 = Process(name='Worker 1', target=f1)\n    p1.daemon = True\n    p2 = Process(name='Worker 2', target=f2)\n\n    p1.start()\n    time.sleep(1)\n    p2.start()\n"""
Chapter13/example5.py,0,"b""# ch6/example5.py\n\nfrom multiprocessing import Process, current_process\nimport time\n\n\ndef f1():\n    p = current_process()\n    print('Starting process %s, ID %s...' % (p.name, p.pid))\n    time.sleep(4)\n    print('Exiting process %s, ID %s...' % (p.name, p.pid))\n\ndef f2():\n    p = current_process()\n    print('Starting process %s, ID %s...' % (p.name, p.pid))\n    time.sleep(2)\n    print('Exiting process %s, ID %s...' % (p.name, p.pid))\n\n\nif __name__ == '__main__':\n    p1 = Process(name='Worker 1', target=f1)\n    p1.daemon = True\n    p2 = Process(name='Worker 2', target=f2)\n\n    p1.start()\n    time.sleep(1)\n    p2.start()\n\n    p1.join(1)\n    print('Whether Worker 1 is still alive:', p1.is_alive())\n    p2.join()\n"""
Chapter13/example6.py,0,"b""# ch6/example6.py\n\nimport multiprocessing\n\nclass MyWorker():\n    def __init__(self, x):\n        self.x = x\n\n    def process(self):\n        pname = multiprocessing.current_process().name\n        print('Starting process %s for number %i...' % (pname, self.x))\n\ndef work(q):\n    worker = q.get()\n    worker.process()\n\nif __name__ == '__main__':\n    my_queue = multiprocessing.Queue()\n\n    p = multiprocessing.Process(target=work, args=(my_queue,))\n    p.start()\n\n    my_queue.put(MyWorker(10))\n\n    my_queue.close()\n    my_queue.join_thread()\n    p.join()\n\n    print('Done.')\n"""
Chapter13/example7.py,0,"b""# ch6/example7.py\n\nfrom math import sqrt\nimport multiprocessing\n\nclass Consumer(multiprocessing.Process):\n\n    def __init__(self, task_queue, result_queue):\n        multiprocessing.Process.__init__(self)\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n\n    def run(self):\n        pname = self.name\n\n        while not self.task_queue.empty():\n\n            temp_task = self.task_queue.get()\n\n            print('%s processing task: %s' % (pname, temp_task))\n\n            answer = temp_task.process()\n            self.task_queue.task_done()\n            self.result_queue.put(answer)\n\nclass Task():\n    def __init__(self, x):\n        self.x = x\n\n    def process(self):\n        if self.x < 2:\n            return '%i is not a prime number.' % self.x\n\n        if self.x == 2:\n            return '%i is a prime number.' % self.x\n\n        if self.x % 2 == 0:\n            return '%i is not a prime number.' % self.x\n\n        limit = int(sqrt(self.x)) + 1\n        for i in range(3, limit, 2):\n            if self.x % i == 0:\n                return '%i is not a prime number.' % self.x\n\n        return '%i is a prime number.' % self.x\n\n    def __str__(self):\n        return 'Checking if %i is a prime or not.' % self.x\n\nif __name__ == '__main__':\n\n    tasks = multiprocessing.JoinableQueue()\n    results = multiprocessing.Queue()\n\n    # spawning consumers with respect to the\n    # number cores available in the system\n    n_consumers = multiprocessing.cpu_count()\n    print('Spawning %i consumers...' % n_consumers)\n    consumers = [Consumer(tasks, results) for i in range(n_consumers)]\n    for consumer in consumers:\n        consumer.start()\n\n    # enqueueing jobs\n    my_input = [2, 36, 101, 193, 323, 513, 1327, 100000, 9999999, 433785907]\n    for item in my_input:\n        tasks.put(Task(item))\n\n    tasks.join()\n\n    for i in range(len(my_input)):\n        temp_result = results.get()\n        print('Result:', temp_result)\n\n    print('Done.')\n"""
Chapter13/example8.py,0,"b""# ch6/example8.py\n\nfrom math import sqrt\nimport multiprocessing\n\nclass Consumer(multiprocessing.Process):\n\n    def __init__(self, task_queue, result_queue):\n        multiprocessing.Process.__init__(self)\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n\n    def run(self):\n        pname = self.name\n\n        while True:\n            temp_task = self.task_queue.get()\n\n            if temp_task is None:\n                print('Exiting %s...' % pname)\n                self.task_queue.task_done()\n                break\n\n            print('%s processing task: %s' % (pname, temp_task))\n\n            answer = temp_task.process()\n            self.task_queue.task_done()\n            self.result_queue.put(answer)\n\nclass Task():\n    def __init__(self, x):\n        self.x = x\n\n    def process(self):\n        if self.x < 2:\n            return '%i is not a prime number.' % self.x\n\n        if self.x == 2:\n            return '%i is a prime number.' % self.x\n\n        if self.x % 2 == 0:\n            return '%i is not a prime number.' % self.x\n\n        limit = int(sqrt(self.x)) + 1\n        for i in range(3, limit, 2):\n            if self.x % i == 0:\n                return '%i is not a prime number.' % self.x\n\n        return '%i is a prime number.' % self.x\n\n    def __str__(self):\n        return 'Checking if %i is a prime or not.' % self.x\n\nif __name__ == '__main__':\n\n    tasks = multiprocessing.JoinableQueue()\n    results = multiprocessing.Queue()\n\n    # spawning consumers with respect to the\n    # number cores available in the system\n    n_consumers = multiprocessing.cpu_count()\n    print('Spawning %i consumers...' % n_consumers)\n    consumers = [Consumer(tasks, results) for i in range(n_consumers)]\n    for consumer in consumers:\n        consumer.start()\n\n    # enqueueing jobs\n    my_input = [2, 36, 101, 193, 323, 513, 1327, 100000, 9999999, 433785907]\n    for item in my_input:\n        tasks.put(Task(item))\n\n    for i in range(n_consumers):\n        tasks.put(None)\n\n    tasks.join()\n\n    for i in range(len(my_input)):\n        temp_result = results.get()\n        print('Result:', temp_result)\n\n    print('Done.')\n"""
Chapter14/example1.py,0,"b""# ch7/example1.py\n\nimport multiprocessing\n\n\nclass ReductionConsumer(multiprocessing.Process):\n\n    def __init__(self, task_queue, result_queue):\n        multiprocessing.Process.__init__(self)\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n\n    def run(self):\n        pname = self.name\n        print('Using process %s...' % pname)\n\n        while True:\n            num1 = self.task_queue.get()\n            if num1 is None:\n                print('Exiting process %s.' % pname)\n                self.task_queue.task_done()\n                break\n\n            self.task_queue.task_done()\n            num2 = self.task_queue.get()\n            if num2 is None:\n                print('Reaching the end with process %s and number %i.' % (pname, num1))\n                self.task_queue.task_done()\n                self.result_queue.put(num1)\n                break\n\n            print('Running process %s on numbers %i and %i.' % (pname, num1, num2))\n            self.task_queue.task_done()\n            self.result_queue.put(num1 + num2)\n\n\ndef reduce_sum(array):\n    tasks = multiprocessing.JoinableQueue()\n    results = multiprocessing.JoinableQueue()\n    result_size = len(array)\n\n    n_consumers = multiprocessing.cpu_count()\n\n    for item in array:\n        results.put(item)\n\n    while result_size > 1:\n        tasks = results\n        results = multiprocessing.JoinableQueue()\n\n        consumers = [ReductionConsumer(tasks, results) for i in range(n_consumers)]\n        for consumer in consumers:\n            consumer.start()\n\n        for i in range(n_consumers):\n            tasks.put(None)\n\n        tasks.join()\n        result_size = result_size // 2 + (result_size % 2)\n        #print('-' * 40)\n\n    return results.get()\n\n\nmy_array = [i for i in range(20)]\n\nresult = reduce_sum(my_array)\nprint('Final result: %i.' % result)\n"""
Chapter15/example1.py,0,"b""# ch8/example1.py\n\nimport cv2\n\nim = cv2.imread('input/ship.jpg')\ncv2.imshow('Test', im)\ncv2.waitKey(0) # press any key to move forward here\n\nprint(im)\nprint('Type:', type(im))\nprint('Shape:', im.shape)\nprint('Top-left pixel:', im[0, 0])\n\nprint('Done.')\n"""
Chapter15/example2.py,0,"b""# ch8/example2.py\n\nimport cv2\n\nim = cv2.imread('input/ship.jpg')\ngray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n\ncv2.imshow('Grayscale', gray_im)\ncv2.waitKey(0)\n\nprint(gray_im)\nprint('Type:', type(gray_im))\nprint('Shape:', gray_im.shape)\ncv2.imwrite('output/gray_ship.jpg', gray_im)\n\nprint('Done.')\n"""
Chapter15/example3.py,0,"b""# ch8/example3.py\n\nimport cv2\n\nim = cv2.imread('input/ship.jpg')\ngray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n\nret, custom_thresh_im = cv2.threshold(gray_im, 127, 255, cv2.THRESH_BINARY)\ncv2.imwrite('output/custom_thresh_ship.jpg', custom_thresh_im)\n\nprint('Done.')\n"""
Chapter15/example4.py,0,"b""# ch8/example4.py\n\nimport cv2\n\nim = cv2.imread('input/ship.jpg')\nim = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n\nmean_thresh_im = cv2.adaptiveThreshold(im, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)\ncv2.imwrite('output/mean_thresh_ship.jpg', mean_thresh_im)\n\ngauss_thresh_im = cv2.adaptiveThreshold(im, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)\ncv2.imwrite('output/gauss_thresh_ship.jpg', gauss_thresh_im)\n\nprint('Done.')\n"""
Chapter15/example5.py,0,"b""from multiprocessing import Pool\nimport cv2\n\nimport sys\nfrom timeit import default_timer as timer\n\n\nTHRESH_METHOD = cv2.ADAPTIVE_THRESH_GAUSSIAN_C\nINPUT_PATH = 'input/large_input/'\nOUTPUT_PATH = 'output/large_output/'\n\nn = 20\nnames = ['ship_%i_%i.jpg' % (i, j) for i in range(n) for j in range(n)]\n\n\ndef process_threshold(im, output_name, thresh_method):\n    gray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    thresh_im = cv2.adaptiveThreshold(gray_im, 255, thresh_method, cv2.THRESH_BINARY, 11, 2)\n\n    cv2.imwrite(OUTPUT_PATH + output_name, thresh_im)\n\n\nif __name__ == '__main__':\n\n    for n_processes in range(1, 7):\n        start = timer()\n\n        with Pool(n_processes) as p:\n            p.starmap(process_threshold, [(\n                cv2.imread(INPUT_PATH + name),\n                name,\n                THRESH_METHOD\n            ) for name in names])\n\n        print('Took %.4f seconds with %i process(es).' % (timer() - start, n_processes))\n\n    print('Done.')\n"""
Chapter15/example6.py,0,"b""from multiprocessing import Pool\nimport cv2\n\nimport sys\nfrom functools import partial\nfrom timeit import default_timer as timer\n\n\nTHRESH_METHOD = cv2.ADAPTIVE_THRESH_GAUSSIAN_C\nINPUT_PATH = 'input/large_input/'\nOUTPUT_PATH = 'output/large_output/'\n\nn = 20\nnames = ['ship_%i_%i.jpg' % (i, j) for i in range(n) for j in range(n)]\n\n\ndef process_threshold(name, thresh_method):\n    im = cv2.imread(INPUT_PATH + name)\n    gray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    thresh_im = cv2.adaptiveThreshold(gray_im, 255, thresh_method, cv2.THRESH_BINARY, 11, 2)\n\n    cv2.imwrite(OUTPUT_PATH + name, thresh_im)\n\n\nif __name__ == '__main__':\n\n    for n_processes in range(1, 7):\n        start = timer()\n\n        with Pool(n_processes) as p:\n            p.map(partial(process_threshold, thresh_method=THRESH_METHOD), names)\n\n        print('Took %.4f seconds with %i process(es).' % (timer() - start, n_processes))\n        \n    print('Done.')\n"""
Chapter15/example7.py,0,"b""import cv2\n\nface_cascade = cv2.CascadeClassifier('input/haarcascade_frontalface_default.xml')\n\nfor filename in ['obama1.jpeg', 'obama2.jpg']:\n    im = cv2.imread('input/' + filename)\n    gray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(im)\n\n    for (x, y, w, h) in faces:\n        cv2.rectangle(im, (x, y), (x + w, y + h), (0, 255, 0), 2)\n\n    cv2.imshow('%i face(s) found' % len(faces), im)\n    cv2.waitKey(0)\n\n    #cv2.imwrite('output/' + filename, im)\n\nprint('Done.')\n"""
Chapter15/generate_input.py,0,"b""import cv2\n\nn = 20\n\nim = cv2.imread('input/ship.jpg')\nh, w, a = im.shape\nh_unit = h // n; w_unit = w // n\n\nfor i in range(n):\n    start_x = h_unit * i\n    for j in range(n):\n        #print(i, j)\n        start_y = w_unit * j\n        cv2.imwrite(\n            'input/large_input/ship_%i_%i.jpg' % (i, j),\n            im[start_x : start_x + h_unit, start_y : start_y + w_unit, :]\n        )\n\nprint('Done.')\n"""
Chapter16/example1.py,0,"b""# ch9/example1.py\n\nfrom math import sqrt\n\ndef is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nif __name__ == '__main__':\n\n    is_prime(9637529763296797)\n    is_prime(427920331)\n    is_prime(157)\n"""
Chapter16/example2.py,0,"b""# ch9/example1.py\n\nfrom math import sqrt\nimport asyncio\n\nasync def is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n            elif i % 100000 == 1:\n                await asyncio.sleep(0)\n\n        print('%i is a prime number.' % x)\n\nasync def main():\n\n    task1 = loop.create_task(is_prime(9637529763296797))\n    task2 = loop.create_task(is_prime(427920331))\n    task3 = loop.create_task(is_prime(157))\n\n    await asyncio.wait([task1, task2, task3])\n\nif __name__ == '__main__':\n    try:\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n    except Exception as e:\n        print('There was a problem:')\n        print(str(e))\n    finally:\n        loop.close()\n"""
Chapter17/aiohttp_client.py,0,"b""import asyncio\nimport aiohttp\n\nasync def get_html(session, url):\n    async with session.get(url) as res:\n        return await res.text()\n\nasync def main():\n    urls = [\n        'http://python.org',\n        'http://google.com',\n        ''\n    ]\n\n    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:\n        html = await get_html(session, 'http://python.org')\n        print(len(html))\n\nasyncio.run(main())\n"""
Chapter17/custom_client.py,0,b'import asyncio\n\nasync def get_html():\n    \n'
Chapter17/echo_server.py,0,"b'import asyncio\n\nasync def handle_echo(reader, writer):\n    data = await reader.read(100)\n    message = data.decode()\n    addr = writer.get_extra_info(\'peername\')\n    print(""Received %r from %r"" % (message, addr))\n\n    print(""Send: %r"" % message)\n    writer.write(data)\n    await writer.drain()\n\n    print(""Close the client socket"")\n    writer.close()\n\nloop = asyncio.get_event_loop()\ncoro = asyncio.start_server(handle_echo, \'127.0.0.1\', 8888, loop=loop)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint(\'Serving on {}\'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n'"
Chapter17/example1.py,0,"b""# ch10/example1.py\n\nimport time\n\ndef count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        time.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n\nstart = time.perf_counter()\n\ncount_down('A', 1)\ncount_down('B', 0.8)\ncount_down('C', 0.5)\n\nprint('-' * 40)\nprint('Done.')\n"""
Chapter17/example2.py,0,"b""# ch10/example2.py\n\nimport asyncio\nimport time\n\nasync def count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        await asyncio.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n\nloop = asyncio.get_event_loop()\ntasks = [\n    loop.create_task(count_down('A', 1)),\n    loop.create_task(count_down('B', 0.8)),\n    loop.create_task(count_down('C', 0.5))\n]\n\nstart = time.perf_counter()\nloop.run_until_complete(asyncio.wait(tasks))\n\nprint('-' * 40)\nprint('Done.')\n"""
Chapter17/example3.py,0,"b""# ch9/example1.py\n\nfrom math import sqrt\nfrom timeit import default_timer as timer\n\ndef is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nif __name__ == '__main__':\n\n    start = timer()\n    is_prime(9637529763296797)\n    is_prime(427920331)\n    is_prime(157)\n    print('Took %.2f seconds.' % (timer() - start))\n"""
Chapter17/example4.py,0,"b""# ch9/example1.py\n\nfrom math import sqrt\nimport asyncio\nfrom timeit import default_timer as timer\n\nasync def is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n            elif i % 100000 == 1:\n                await asyncio.sleep(0)\n\n        print('%i is a prime number.' % x)\n\nasync def main():\n\n    task1 = loop.create_task(is_prime(9637529763296797))\n    task2 = loop.create_task(is_prime(427920331))\n    task3 = loop.create_task(is_prime(157))\n\n    await asyncio.wait([task1, task2, task3])\n\nif __name__ == '__main__':\n    try:\n        start = timer()\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n        print('Took %.2f seconds.' % (timer() - start))\n    except Exception as e:\n        print('There was a problem:')\n        print(str(e))\n    finally:\n        loop.close()\n"""
Chapter17/example5.py,0,"b""# ch10/example5.py\n\nfrom concurrent.futures import ThreadPoolExecutor\nimport asyncio\nimport time\n\ndef count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        time.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n\nasync def main():\n    futures = [loop.run_in_executor(\n        executor,\n        count_down,\n        *args\n    ) for args in [('A', 1), ('B', 0.8), ('C', 0.5)]]\n\n    await asyncio.gather(*futures)\n\n    print('-' * 40)\n    print('Done.')\n\nstart = time.perf_counter()\nexecutor = ThreadPoolExecutor(max_workers=3)\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n"""
Chapter17/example6.py,0,"b""# ch10/example6.py\n\nfrom math import sqrt\nimport asyncio\nfrom concurrent.futures import ProcessPoolExecutor\nfrom timeit import default_timer as timer\n\n#async def is_prime(x):\ndef is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nasync def main():\n\n    task1 = loop.run_in_executor(executor, is_prime, 9637529763296797)\n    task2 = loop.run_in_executor(executor, is_prime, 427920331)\n    task3 = loop.run_in_executor(executor, is_prime, 157)\n\n    await asyncio.gather(*[task1, task2, task3])\n\nif __name__ == '__main__':\n    try:\n        start = timer()\n\n        executor = ProcessPoolExecutor(max_workers=3)\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\n        print('Took %.2f seconds.' % (timer() - start))\n\n    except Exception as e:\n        print('There was a problem:')\n        print(str(e))\n\n    finally:\n        loop.close()\n"""
Chapter17/factorial.py,0,"b""import asyncio\nimport time\nfrom datetime import datetime\n\nasync def custom_factorial(name, n):\n    f = 1\n\n    for i in range(2, n + 1):\n        print(f'Task {name}: Compute factorial({i}).')\n        await asyncio.sleep(1)\n        f *= i\n\n    print(f'Task {name}: factorial({n}) is {f}.')\n\nasync def main():\n    tasks = [custom_factorial('A', 3), custom_factorial('B', 4)]\n    await asyncio.gather(*tasks)\n\nstart = time.time()\nasyncio.run(main())\nend = time.time()\nprint(f'Total time: {end - start : .4f}.')\n"""
Chapter17/new_countdown.1.py,0,"b""# ch10/example2.py\n\nimport asyncio\nimport time\n\nasync def count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        await asyncio.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n\nasync def main():\n\n    await asyncio.gather(*[\n        count_down('A', 1),\n        count_down('B', 0.8),\n        count_down('C', 0.5)\n    ])\n\nstart = time.perf_counter()\nasyncio.run(main())\n\nprint('-' * 40)\nprint('Done.')\n"""
Chapter18/example1.py,0,"b""# ch11/example1.py\n\nimport asyncio\n\nclass EchoServerClientProtocol(asyncio.Protocol):\n    def connection_made(self, transport):\n        peername = transport.get_extra_info('peername')\n        print('Connection from {}'.format(peername))\n        self.transport = transport\n\n    def data_received(self, data):\n        message = data.decode()\n        print('Data received: {!r}'.format(message))\n\nloop = asyncio.get_event_loop()\ncoro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint('Serving on {}'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n"""
Chapter18/example2.py,0,"b""# ch11/example2.py\n\nimport asyncio\n\nclass EchoServerClientProtocol(asyncio.Protocol):\n    def connection_made(self, transport):\n        peername = transport.get_extra_info('peername')\n        print('Connection from {}'.format(peername))\n        self.transport = transport\n\n    def data_received(self, data):\n        message = data.decode()\n        print('Data received: {!r}'.format(message))\n\n        self.transport.write(('Echoed back: {}'.format(message)).encode())\n\nloop = asyncio.get_event_loop()\ncoro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint('Serving on {}'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n"""
Chapter18/example3.py,0,"b""# ch11/example3.py\n\nimport asyncio\n\nclass EchoServerClientProtocol(asyncio.Protocol):\n    def connection_made(self, transport):\n        peername = transport.get_extra_info('peername')\n        print('Connection from {}'.format(peername))\n        self.transport = transport\n\n    def data_received(self, data):\n        message = data.decode()\n        print('Data received: {!r}'.format(message))\n\n        self.transport.write(('Echoed back: {}'.format(message)).encode())\n\n        print('Close the client socket')\n        self.transport.close()\n\nloop = asyncio.get_event_loop()\ncoro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint('Serving on {}'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n"""
Chapter18/example4.py,0,"b""# ch11/example4.py\n\nimport aiohttp\nimport asyncio\n\nasync def get_html(session, url):\n    async with session.get(url, ssl=False) as res:\n        return await res.text()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        html = await get_html(session, 'http://packtpub.com')\n        print(html)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n"""
Chapter18/example5.py,0,"b""# ch11/example5.py\n\nimport aiohttp\nimport aiofiles\nimport asyncio\n\nimport os\nfrom timeit import default_timer as timer\n\nasync def download_html(session, url):\n    async with session.get(url, ssl=False) as res:\n        filename = 'output/%s.html' % os.path.basename(url)\n\n        async with aiofiles.open(filename, 'wb') as f:\n            while True:\n                chunk = await res.content.read(1024)\n                if not chunk:\n                    break\n                await f.write(chunk)\n\n        return await res.release()\n\nasync def main(url):\n    async with aiohttp.ClientSession() as session:\n        await download_html(session, url)\n\nurls = [\n    'http://packtpub.com',\n    'http://python.org',\n    'http://docs.python.org/3/library/asyncio',\n    'http://aiohttp.readthedocs.io',\n    'http://google.com'\n]\n\nstart = timer()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(\n    asyncio.gather(*(main(url) for url in urls))\n)\n\nprint('Took %.2f seconds.' % (timer() - start))\n"""
Chapter18/example6.py,0,"b""# ch11/example6.py\n\nimport requests\nimport os\n\nfrom timeit import default_timer as timer\n\ndef download_html(url):\n    res = requests.get(url)\n\n    filename = 'output/%s.html' % os.path.basename(url)\n    with open(filename, 'w') as f:\n        f.write(res.text)\n\nurls = [\n    'http://packtpub.com',\n    'http://python.org',\n    'http://docs.python.org/3/library/asyncio',\n    'http://aiohttp.readthedocs.io',\n    'http://google.com'\n]\n\nstart = timer()\n\nfor url in urls:\n    download_html(url)\n\nprint('Took %.2f seconds.' % (timer() - start))\n"""
Chapter19/example1.py,0,"b""# ch12/example1.py\n\nimport threading\nimport time\n\ndef thread_a():\n    print('Thread A is starting...')\n\n    print('Thread A waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread A has acquired lock A, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread A has acquired lock B, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A releasing both locks.')\n    lock_a.release()\n    lock_b.release()\n\ndef thread_b():\n    print('Thread B is starting...')\n\n    print('Thread B waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread B has acquired lock B, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread B has acquired lock A, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B releasing both locks.')\n    lock_b.release()\n    lock_a.release()\n\nlock_a = threading.Lock()\nlock_b = threading.Lock()\n\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint('Finished.')\n"""
Chapter19/example2.py,0,"b""# ch12/example2.py\n\nimport threading\nimport time\n\ndef thread_a():\n    print('Thread A is starting...')\n\n    print('Thread A waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread A has acquired lock A, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread A has acquired lock B, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A releasing both locks.')\n    lock_a.release()\n    lock_b.release()\n\ndef thread_b():\n    print('Thread B is starting...')\n\n    print('Thread B waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread B has acquired lock A, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread B has acquired lock B, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B releasing both locks.')\n    lock_b.release()\n    lock_a.release()\n\nlock_a = threading.Lock()\nlock_b = threading.Lock()\n\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint('Finished.')\n"""
Chapter19/example3.py,0,"b""# ch12/example3.py\n\nimport threading\n\n# The philosopher thread\ndef philosopher(left, right):\n    while True:\n        with left:\n             with right:\n                 print(f'Philosopher at {threading.currentThread()} is eating.')\n\n# The chopsticks\nN_FORKS = 5\nforks = [threading.Lock() for n in range(N_FORKS)]\n\n# Create all of the philosophers\nphils = [threading.Thread(\n    target=philosopher,\n    args=(forks[n], forks[(n + 1) % N_FORKS])\n) for n in range(N_FORKS)]\n\n# Run all of the philosophers\nfor p in phils:\n    p.start()\n"""
Chapter19/example4.py,0,"b""# ch4/example4.py\n\nimport threading\n\nclass acquire(object):\n    def __init__(self, *locks):\n        self.locks = sorted(locks, key=lambda x: id(x))\n\n    def __enter__(self):\n        for lock in self.locks:\n            lock.acquire()\n\n    def __exit__(self, ty, val, tb):\n        for lock in reversed(self.locks):\n            lock.release()\n        return False\n\n# The philosopher thread\ndef philosopher(left, right):\n    while True:\n        with acquire(left,right):\n             print(f'Philosopher at {threading.currentThread()} is eating.')\n\n# The chopsticks\nN_FORKS = 5\nforks = [threading.Lock() for n in range(N_FORKS)]\n\n# Create all of the philosophers\nphils = [threading.Thread(\n    target=philosopher,\n    args=(forks[n], forks[(n + 1) % N_FORKS])\n) for n in range(N_FORKS)]\n\n# Run all of the philosophers\nfor p in phils:\n    p.start()\n"""
Chapter19/example5.py,0,"b""import threading\nimport time\nfrom timeit import default_timer as timer\n\ndef thread_a():\n    print('Thread A is starting...')\n\n    print('Thread A waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread A has acquired lock A, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread A has acquired lock B, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A releasing both locks.')\n    lock_a.release()\n    lock_b.release()\n\ndef thread_b():\n    print('Thread B is starting...')\n\n    print('Thread B waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread B has acquired lock A, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread B has acquired lock B, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B releasing both locks.')\n    lock_b.release()\n    lock_a.release()\n\nlock_a = threading.Lock()\nlock_b = threading.Lock()\n\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\n\nstart = timer()\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint('Took %.2f seconds.' % (timer() - start))\nprint('Finished.')\n"""
Chapter19/example6.py,0,"b""import threading\nimport time\nfrom timeit import default_timer as timer\n\ndef thread_a():\n    print('Thread A is starting...')\n\n    print('Thread A waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread A has acquired lock A, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread A has acquired lock B, performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A releasing both locks.')\n    lock_a.release()\n    lock_b.release()\n\ndef thread_b():\n    print('Thread B is starting...')\n\n    print('Thread B waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread B has acquired lock A, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread B has acquired lock B, performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B releasing both locks.')\n    lock_b.release()\n    lock_a.release()\n\nlock_a = threading.Lock()\nlock_b = threading.Lock()\n\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\n\nstart = timer()\n\nthread1.start()\nthread1.join()\n\nthread2.start()\nthread2.join()\n\nprint('Took %.2f seconds.' % (timer() - start))\nprint('Finished.')\n"""
Chapter19/example7.py,0,"b""# ch12/example7.py\n\nimport threading\nimport time\nfrom timeit import default_timer as timer\n\ndef thread_a():\n    print('Thread A is starting...')\n\n    print('Thread A is performing some calculation...')\n    time.sleep(2)\n\n    print('Thread A is performing some calculation...')\n    time.sleep(2)\n\ndef thread_b():\n    print('Thread B is starting...')\n\n    print('Thread B is performing some calculation...')\n    time.sleep(5)\n\n    print('Thread B is performing some calculation...')\n    time.sleep(5)\n\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\n\nstart = timer()\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint('Took %.2f seconds.' % (timer() - start))\n\nprint('Finished.')\n"""
Chapter19/example8.py,0,"b""# ch12/example8.py\n\nimport threading\nimport time\n\nclass Spouse(threading.Thread):\n\n    def __init__(self, name, partner):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.partner = partner\n        self.hungry = True\n\n    def run(self):\n        while self.hungry:\n            print('%s is hungry and wants to eat.' % self.name)\n\n            if self.partner.hungry:\n                print('%s is waiting for their partner to eat first...' % self.name)\n            else:\n                with fork:\n                    print('%s has stared eating.' % self.name)\n                    time.sleep(5)\n\n                    print('%s is now full.' % self.name)\n                    self.hungry = False\n\nfork = threading.Lock()\n\npartner1 = Spouse('Wife', None)\npartner2 = Spouse('Husband', partner1)\npartner1.partner = partner2\n\npartner1.start()\npartner2.start()\n\npartner1.join()\npartner2.join()\n\nprint('Finished.')\n"""
Chapter20/example1.py,0,"b""# ch13/example1.py\n\nimport threading\n\ndef writer():\n    global text\n\n    while True:\n        with resource:\n            print(f'Writing being done by {threading.current_thread().name}.')\n            text += f'Writing was done by {threading.current_thread().name}. '\n\ndef reader():\n    global rcount\n\n    while True:\n        with rcounter:\n            rcount += 1\n            if rcount == 1:\n                resource.acquire()\n\n        print(f'Reading being done by {threading.current_thread().name}:')\n        print(text)\n\n        with rcounter:\n            rcount -= 1\n            if rcount == 0:\n                resource.release()\n\ntext = 'This is some text. '\nrcount = 0\n\nrcounter = threading.Lock()\nresource = threading.Lock()\n\nthreads = [threading.Thread(target=reader) for i in range(3)] + [threading.Thread(target=writer) for i in range(2)]\n\nfor thread in threads:\n    thread.start()\n"""
Chapter20/example2.py,0,"b""# ch13/example2.py\n\nimport threading\n\ndef writer():\n    global text\n    global wcount\n\n    while True:\n        with wcounter:\n            wcount += 1\n            if wcount == 1:\n                read_try.acquire()\n\n        with resource:\n            print(f'Writing being done by {threading.current_thread().name}.')\n            text += f'Writing was done by {threading.current_thread().name}. '\n\n        with wcounter:\n            wcount -= 1\n            if wcount == 0:\n                read_try.release()\n\ndef reader():\n    global rcount\n\n    while True:\n        with read_try:\n            with rcounter:\n                rcount += 1\n                if rcount == 1:\n                    resource.acquire()\n\n            print(f'Reading being done by {threading.current_thread().name}:')\n            print(text)\n\n            with rcounter:\n                rcount -= 1\n                if rcount == 0:\n                    resource.release()\n\ntext = 'This is some text. '\nwcount = 0\nrcount = 0\n\nwcounter = threading.Lock()\nrcounter = threading.Lock()\nresource = threading.Lock()\nread_try = threading.Lock()\n\nthreads = [threading.Thread(target=reader) for i in range(3)] + [threading.Thread(target=writer) for i in range(2)]\n\nfor thread in threads:\n    thread.start()\n"""
Chapter20/example3.py,0,"b""# ch13/example3.py\n\nimport threading\n\ndef writer():\n    global text\n\n    while True:\n        with service:\n            resource.acquire()\n\n        print(f'Writing being done by {threading.current_thread().name}.')\n        text += f'Writing was done by {threading.current_thread().name}. '\n\n        resource.release()\n\ndef reader():\n    global rcount\n\n    while True:\n        with service:\n            rcounter.acquire()\n            rcount += 1\n            if rcount == 1:\n                resource.acquire()\n        rcounter.release()\n\n        print(f'Reading being done by {threading.current_thread().name}:')\n        #print(text)\n\n        with rcounter:\n            rcount -= 1\n            if rcount == 0:\n                resource.release()\n\ntext = 'This is some text. '\nrcount = 0\n\nrcounter = threading.Lock()\nresource = threading.Lock()\nservice = threading.Lock()\n\nthreads = [threading.Thread(target=reader) for i in range(3)] + [threading.Thread(target=writer) for i in range(2)]\n\nfor thread in threads:\n    thread.start()\n"""
Chapter21/example1.py,0,"b""# ch14/example1.py\n\nimport threading\nimport random\nimport time\n\ndef update():\n    global counter\n\n    current_counter = counter # reading in shared resource\n    time.sleep(random.randint(0, 1)) # simulating heavy calculations\n    counter = current_counter + 1 # updating shared resource\n\ncounter = 0\n\nthreads = [threading.Thread(target=update) for i in range(20)]\n\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n\nprint(f'Final counter: {counter}.')\nprint('Finished.')\n"""
Chapter21/example2.py,0,"b""# ch14/example2.py\n\nimport threading\nimport random\nimport time\n\ndef update():\n    global counter\n\n    with count_lock:\n        current_counter = counter # reading in shared resource\n        time.sleep(random.randint(0, 1)) # simulating heavy calculations\n        counter = current_counter + 1\n\ncounter = 0\ncount_lock = threading.Lock()\n\nthreads = [threading.Thread(target=update) for i in range(20)]\n\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n\nprint(f'Final counter: {counter}.')\nprint('Finished.')\n"""
Chapter21/example3.py,0,"b""# ch14/example3.py\n\nimport threading\nimport random; random.seed(0)\nimport time\n\ndef update(pause_period):\n    global counter\n\n    with count_lock:\n        current_counter = counter # reading in shared resource\n        time.sleep(pause_period) # simulating heavy calculations\n        counter = current_counter + 1 # updating shared resource\n\npause_periods = [random.randint(0, 1) for i in range(20)]\n\n###########################################################################\n\ncounter = 0\ncount_lock = threading.Lock()\n\nstart = time.perf_counter()\nfor i in range(20):\n    update(pause_periods[i])\n\nprint('--Sequential version--')\nprint(f'Final counter: {counter}.')\nprint(f'Took {time.perf_counter() - start : .2f} seconds.')\n\n###########################################################################\n\ncounter = 0\n\nthreads = [threading.Thread(target=update, args=(pause_periods[i],)) for i in range(20)]\n\nstart = time.perf_counter()\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n\nprint('--Concurrent version--')\nprint(f'Final counter: {counter}.')\nprint(f'Took {time.perf_counter() - start : .2f} seconds.')\n\n###########################################################################\n\nprint('Finished.')\n"""
Chapter22/example1.py,0,"b""# ch15/example1.py\n\nimport sys\n\nprint(f'Reference count when direct-referencing: {sys.getrefcount([7])}.')\n\na = [7]\nprint(f'Reference count when referenced once: {sys.getrefcount(a)}.')\n\nb = a\nprint(f'Reference count when referenced twice: {sys.getrefcount(a)}.')\n\n###########################################################################\n\na[0] = 8\nprint(f'Variable a after a is changed: {a}.')\nprint(f'Variable b after a is changed: {b}.')\n\nprint('Finished.')\n"""
Chapter22/example2.py,0,"b""# ch15/example2.py\n\nimport time\nimport threading\n\nCOUNT = 50000000\n\ndef countdown(n):\n    while n > 0:\n        n -= 1\n\n###########################################################################\n\nstart = time.time()\ncountdown(COUNT)\n\nprint('Sequential program finished.')\nprint(f'Took {time.time() - start : .2f} seconds.')\n\n###########################################################################\n\nthread1 = threading.Thread(target=countdown, args=(COUNT // 2,))\nthread2 = threading.Thread(target=countdown, args=(COUNT // 2,))\n\nstart = time.time()\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\n\nprint('Concurrent program finished.')\nprint(f'Took {time.time() - start : .2f} seconds.')\n"""
Chapter22/example3.py,0,"b""# ch15/example3.py\n\nimport time\nimport threading\nfrom multiprocessing import Pool\n\nCOUNT = 50000000\n\ndef countdown(n):\n    while n > 0:\n        n -= 1\n\nif __name__ == '__main__':\n\n    #######################################################################\n    # Sequential\n\n    start = time.time()\n    countdown(COUNT)\n\n    print('Sequential program finished.')\n    print(f'Took {time.time() - start : .2f} seconds.')\n    print()\n\n    #######################################################################\n    # Multithreading\n\n    thread1 = threading.Thread(target=countdown, args=(COUNT // 2,))\n    thread2 = threading.Thread(target=countdown, args=(COUNT // 2,))\n\n    start = time.time()\n    thread1.start()\n    thread2.start()\n    thread1.join()\n    thread2.join()\n\n    print('Multithreading program finished.')\n    print(f'Took {time.time() - start : .2f} seconds.')\n    print()\n\n    #######################################################################\n    # Multiprocessing\n\n    pool = Pool(processes=2)\n    start = time.time()\n    pool.apply_async(countdown, args=(COUNT//2,))\n    pool.apply_async(countdown, args=(COUNT//2,))\n    pool.close()\n    pool.join()\n\n    print('Multiprocessing program finished.')\n    print(f'Took {time.time() - start : .2f} seconds.')\n"""
Chapter23/abstract_factory.py,0,"b'\n# Frog game\n\nclass Frog:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return self.name\n\n    def interact_with(self, obstacle):\n        act = obstacle.action()\n        msg = f\'{self} the Frog encounters {obstacle} and {act}!\'\n        print(msg)\n\nclass Bug:\n    def __str__(self):\n        return \'a bug\'\n\n    def action(self):\n        return \'eats it\'\n\nclass FrogWorld:\n    def __init__(self, name):\n        print(self)\n        self.player_name = name\n\n    def __str__(self):\n        return \'\\n\\n\\t------ Frog World -------\'\n\n    def make_character(self):\n        return Frog(self.player_name)\n\n    def make_obstacle(self):\n        return Bug()\n\n\n# Wizard game\n\nclass Wizard:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return self.name\n\n    def interact_with(self, obstacle):\n        act = obstacle.action()\n        msg = f\'{self} the Wizard battles against {obstacle} and {act}!\'\n        print(msg)\n\nclass Ork:\n    def __str__(self):\n        return \'an evil ork\'\n\n    def action(self):\n        return \'kills it\'\n\nclass WizardWorld:\n    def __init__(self, name):\n        print(self)\n        self.player_name = name\n\n    def __str__(self):\n        return \'\\n\\n\\t------ Wizard World -------\'\n\n    def make_character(self):\n        return Wizard(self.player_name)\n\n    def make_obstacle(self):\n        return Ork()\n\n# Game environment\nclass GameEnvironment:\n    def __init__(self, factory):\n        self.hero = factory.make_character()\n        self.obstacle = factory.make_obstacle()\n\n    def play(self):\n        self.hero.interact_with(self.obstacle)\n\ndef validate_age(name):\n    try:\n        age = input(f\'Welcome {name}. How old are you? \')\n        age = int(age)\n    except ValueError as err:\n        print(f""Age {age} is invalid, please try again..."")\n        return (False, age)\n    return (True, age)\n\ndef main():\n    name = input(""Hello. What\'s your name? "")\n    valid_input = False\n    while not valid_input:\n        valid_input, age = validate_age(name)\n    game = FrogWorld if age < 18 else WizardWorld\n    environment = GameEnvironment(game(name))\n    environment.play()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
Chapter23/factory_method.py,0,"b'import json\nimport xml.etree.ElementTree as etree\n\n\nclass JSONDataExtractor:\n\n    def __init__(self, filepath):\n        self.data = dict()\n        with open(filepath, mode=\'r\', encoding=\'utf-8\') as f:\n            self.data = json.load(f)\n\n    @property\n    def parsed_data(self):\n        return self.data\n\n\nclass XMLDataExtractor:\n\n    def __init__(self, filepath):\n        self.tree =  etree.parse(filepath)\n\n    @property\n    def parsed_data(self):\n        return self.tree\n\n\ndef dataextraction_factory(filepath):\n    if filepath.endswith(\'json\'):\n        extractor = JSONDataExtractor\n    elif filepath.endswith(\'xml\'):\n        extractor = XMLDataExtractor\n    else:\n        raise ValueError(\'Cannot extract data from {}\'.format(filepath))\n    return extractor(filepath)\n\n\ndef extract_data_from(filepath):\n    factory_obj = None\n    try:\n        factory_obj = dataextraction_factory(filepath)\n    except ValueError as e:\n        print(e)\n    return factory_obj\n\n\ndef main():\n    sqlite_factory = extract_data_from(\'data/person.sq3\')\n    print()\n\n    json_factory = extract_data_from(\'data/movies.json\')\n    json_data = json_factory.parsed_data\n    print(f\'Found: {len(json_data)} movies\')\n    for movie in json_data:\n        print(f""Title: {movie[\'title\']}"")\n        year = movie[\'year\']\n        if year:\n            print(f""Year: {year}"")\n        director = movie[\'director\']\n        if director:\n            print(f""Director: {director}"")\n        genre = movie[\'genre\']\n        if genre:\n            print(f""Genre: {genre}"")\n        print()\n\n    xml_factory = extract_data_from(\'data/person.xml\')\n    xml_data = xml_factory.parsed_data\n    liars = xml_data.findall(f"".//person[lastName=\'Liar\']"")\n    print(f\'found: {len(liars)} persons\')\n    for liar in liars:\n        firstname = liar.find(\'firstName\').text\n        print(f\'first name: {firstname}\')\n        lastname = liar.find(\'lastName\').text\n        print(f\'last name: {lastname}\')\n        [print(f""phone number ({p.attrib[\'type\']}):"", p.text) \n              for p in liar.find(\'phoneNumbers\')]\n        print()\n    print()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
Chapter23/id.py,0,"b""\nclass A:\n    pass\n\nif __name__ == '__main__':\n    a = A()\n    b = A()\n\t\n    print(id(a) == id(b))\n    print(a, b)\n"""
Chapter24/apple_factory.py,0,"b'\nMINI14 = \'1.4GHz Mac mini\'\n\nclass AppleFactory:\n    class MacMini14:\n        def __init__(self):\n            self.memory = 4 # in gigabytes\n            self.hdd = 500 # in gigabytes\n            self.gpu = \'Intel HD Graphics 5000\'\n\n        def __str__(self):\n            info = (f\'Model: {MINI14}\',\n                    f\'Memory: {self.memory}GB\',\n                    f\'Hard Disk: {self.hdd}GB\',\n                    f\'Graphics Card: {self.gpu}\')\n            return \'\\n\'.join(info)\n\n    def build_computer(self, model):\n        if model == MINI14:\n            return self.MacMini14()\n        else:\n            print(f""I don\'t know how to build {model}"")\n\nif __name__ == \'__main__\':\n    afac = AppleFactory()\n    mac_mini = afac.build_computer(MINI14)\n    print(mac_mini)\n'"
Chapter24/builder.py,0,"b""\nfrom enum import Enum\nimport time\n\nPizzaProgress = Enum('PizzaProgress', 'queued preparation baking ready')\nPizzaDough = Enum('PizzaDough', 'thin thick')\nPizzaSauce = Enum('PizzaSauce', 'tomato creme_fraiche')\nPizzaTopping = Enum('PizzaTopping', \n                    'mozzarella double_mozzarella bacon ham mushrooms red_onion oregano')\nSTEP_DELAY = 3 # in seconds for the sake of the example\n\n\nclass Pizza:\n    def __init__(self, name):\n        self.name = name\n        self.dough = None\n        self.sauce = None\n        self.topping = []\n\n    def __str__(self):\n        return self.name\n\n    def prepare_dough(self, dough):\n        self.dough = dough\n        print(f'preparing the {self.dough.name} dough of your {self}...')\n        time.sleep(STEP_DELAY)\n        print(f'done with the {self.dough.name} dough')\n\n        \nclass MargaritaBuilder:\n    def __init__(self):\n        self.pizza = Pizza('margarita')\n        self.progress = PizzaProgress.queued\n        self.baking_time = 5 # in seconds for the sake of the example\n\n    def prepare_dough(self):\n        self.progress = PizzaProgress.preparation\n        self.pizza.prepare_dough(PizzaDough.thin)\n\n    def add_sauce(self):\n        print('adding the tomato sauce to your margarita...')\n        self.pizza.sauce = PizzaSauce.tomato\n        time.sleep(STEP_DELAY)\n        print('done with the tomato sauce')\n\n    def add_topping(self):\n        topping_desc = 'double mozzarella, oregano'\n        topping_items = (PizzaTopping.double_mozzarella, PizzaTopping.oregano)\n        print(f'adding the topping ({topping_desc}) to your margarita')\n        self.pizza.topping.append([t for t in topping_items])\n        time.sleep(STEP_DELAY)\n        print(f'done with the topping ({topping_desc})')\n\n    def bake(self):\n        self.progress = PizzaProgress.baking\n        print(f'baking your margarita for {self.baking_time} seconds')\n        time.sleep(self.baking_time)\n        self.progress = PizzaProgress.ready\n        print('your margarita is ready')\n\n        \nclass CreamyBaconBuilder:\n    def __init__(self):\n        self.pizza = Pizza('creamy bacon')\n        self.progress = PizzaProgress.queued\n        self.baking_time = 7 # in seconds for the sake of the example\n\n    def prepare_dough(self):\n        self.progress = PizzaProgress.preparation\n        self.pizza.prepare_dough(PizzaDough.thick)\n\n    def add_sauce(self):\n        print('adding the cr\xc3\xa8me fra\xc3\xaeche sauce to your creamy bacon')\n        self.pizza.sauce = PizzaSauce.creme_fraiche\n        time.sleep(STEP_DELAY)\n        print('done with the cr\xc3\xa8me fra\xc3\xaeche sauce')\n\n    def add_topping(self):\n        topping_desc = 'mozzarella, bacon, ham, mushrooms, red onion, oregano'\n        topping_items =  (PizzaTopping.mozzarella,\n                          PizzaTopping.bacon,\n                          PizzaTopping.ham,\n                          PizzaTopping.mushrooms,\n                          PizzaTopping.red_onion, \n                          PizzaTopping.oregano)\n        print(f'adding the topping ({topping_desc}) to your creamy bacon')\n        self.pizza.topping.append([t for t in topping_items])\n        time.sleep(STEP_DELAY)\n        print(f'done with the topping ({topping_desc})')\n\n    def bake(self):\n        self.progress = PizzaProgress.baking\n        print(f'baking your creamy bacon for {self.baking_time} seconds')\n        time.sleep(self.baking_time)\n        self.progress = PizzaProgress.ready\n        print('your creamy bacon is ready')\n\n        \nclass Waiter:\n    def __init__(self):\n        self.builder = None\n\n    def construct_pizza(self, builder):\n        self.builder = builder\n        steps = (builder.prepare_dough, \n                 builder.add_sauce, \n                 builder.add_topping, \n                 builder.bake)\n        [step() for step in steps]\n\n    @property\n    def pizza(self):\n        return self.builder.pizza\n\n        \ndef validate_style(builders):\n    try:\n        input_msg = 'What pizza would you like, [m]argarita or [c]reamy bacon? '\n        pizza_style = input(input_msg)\n        builder = builders[pizza_style]()\n        valid_input = True\n    except KeyError:\n        error_msg = 'Sorry, only margarita (key m) and creamy bacon (key c) are available'\n        print(error_msg)\n        return (False, None)\n    return (True, builder)\n\n    \ndef main():\n    builders = dict(m=MargaritaBuilder, c=CreamyBaconBuilder)\n    valid_input = False\n    while not valid_input:\n        valid_input, builder = validate_style(builders)\n    print()\n    waiter = Waiter()\n    waiter.construct_pizza(builder)\n    pizza = waiter.pizza\n    print()\n    print(f'Enjoy your {pizza}!')\n\n    \nif __name__ == '__main__':\n    main()\n"""
Chapter24/computer_builder.py,0,"b""\nclass Computer:\n    def __init__(self, serial_number):\n        self.serial = serial_number\n        self.memory = None # in gigabytes\n        self.hdd = None # in gigabytes\n        self.gpu = None\n\n    def __str__(self):\n        info = (f'Memory: {self.memory}GB',\n                f'Hard Disk: {self.hdd}GB',\n                f'Graphics Card: {self.gpu}')\n        return '\\n'.join(info)\n\nclass ComputerBuilder:\n    def __init__(self):\n        self.computer = Computer('AG23385193')\n\n    def configure_memory(self, amount):\n        self.computer.memory = amount\n\n    def configure_hdd(self, amount):\n        self.computer.hdd = amount\n\n    def configure_gpu(self, gpu_model):\n        self.computer.gpu = gpu_model\n\nclass HardwareEngineer:\n    def __init__(self):\n        self.builder = None\n\n    def construct_computer(self, memory, hdd, gpu):\n        self.builder = ComputerBuilder()\n        steps = (self.builder.configure_memory(memory),\n                 self.builder.configure_hdd(hdd),\n                 self.builder.configure_gpu(gpu))\n        [step for step in steps]\n\n    @property\n    def computer(self):\n        return self.builder.computer\n\ndef main():\n    engineer = HardwareEngineer()\n    engineer.construct_computer(hdd=500, \n                                memory=8, \n                                gpu='GeForce GTX 650 Ti')\n    computer = engineer.computer\n    print(computer)\n\nif __name__ == '__main__':\n    main()\n"""
Chapter24/exercise_fluent_builder.py,0,"b""class Pizza: \n    def __init__(self, builder): \n        self.garlic = builder.garlic \n        self.extra_cheese  = builder.extra_cheese \n \n    def __str__(self): \n        garlic = 'yes' if self.garlic else 'no' \n        cheese = 'yes' if self.extra_cheese else 'no' \n        info = (f'Garlic: {garlic}', f'Extra cheese: {cheese}') \n        return '\\n'.join(info) \n \n    class PizzaBuilder: \n        def __init__(self): \n            self.extra_cheese = False \n            self.garlic = False \n \n        def add_garlic(self): \n            self.garlic = True \n            return self \n \n        def add_extra_cheese(self): \n            self.extra_cheese = True \n            return self \n \n        def build(self): \n            return Pizza(self) \n \nif __name__ == '__main__': \n    pizza = Pizza.PizzaBuilder().add_garlic().add_extra_cheese().build() \n    print(pizza)"""
Chapter25/prototype.py,0,"b'import copy\n\nclass Website: \n    def __init__(self, name, domain, description, author, **kwargs): \n        \'\'\'Examples of optional attributes (kwargs): \n           category, creation_date, technologies, keywords.\n        \'\'\' \n        self.name = name \n        self.domain = domain \n        self.description = description\n        self.author = author\n        \n        for key in kwargs:\n            setattr(self, key, kwargs[key])\n \n    def __str__(self): \n        summary = [f\'Website ""{self.name}""\\n\',] \n        \n        infos = vars(self).items()\n        ordered_infos = sorted(infos)\n        for attr, val in ordered_infos:\n            if attr == \'name\':\n                continue\n            summary.append(f\'{attr}: {val}\\n\')\n            \n        return \'\'.join(summary) \n\n        \nclass Prototype: \n    def __init__(self): \n        self.objects = dict() \n \n    def register(self, identifier, obj): \n        self.objects[identifier] = obj \n \n    def unregister(self, identifier): \n        del self.objects[identifier] \n \n    def clone(self, identifier, **attrs): \n        found = self.objects.get(identifier) \n        if not found: \n            raise ValueError(f\'Incorrect object identifier: {identifier}\') \n        obj = copy.deepcopy(found) \n        for key in attrs:\n            setattr(obj, key, attrs[key])\n\n        return obj\n        \ndef main(): \n    keywords = (\'python\', \'data\', \'apis\', \'automation\')\n    site1 = Website(\'ContentGardening\', \n            domain=\'contentgardening.com\', \n            description=\'Automation and data-driven apps\', \n            author=\'Kamon Ayeva\',\n            category=\'Blog\',\n            keywords=keywords)\n \n    prototype = Prototype() \n    identifier = \'ka-cg-1\' \n    prototype.register(identifier, site1)\n    \n    site2 = prototype.clone(identifier, \n            name=\'ContentGardeningPlayground\',\n            domain=\'play.contentgardening.com\', \n            description=\'Experimentation for techniques featured on the blog\', \n            category=\'Membership site\',\n            creation_date=\'2018-08-01\') \n \n    for site in (site1, site2): \n        print(site)\n    print(f\'ID site1 : {id(site1)} != ID site2 : {id(site2)}\')\n    \nif __name__ == \'__main__\': \n    main()\n    '"
Chapter25/singleton.py,0,"b""\n\nimport urllib.parse\nimport urllib.request\n\n\nclass SingletonType(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(SingletonType, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n\nclass URLFetcher(metaclass=SingletonType):\n\n    def __init__(self):\n        self.urls = []\n    \n    def fetch(self, url):\n        req = urllib.request.Request(url)\n        with urllib.request.urlopen(req) as response:\n            if response.code == 200:\n                the_page = response.read()\n                print(the_page)\n        \n                urls = self.urls\n                urls.append(url)\n                self.urls = urls\n            \n    def dump_url_registry(self):\n        return ', '.join(self.urls)\n\n\ndef main():\n\n    MY_URLS = ['http://www.voidspace.org.uk', \n               'http://google.com', \n               'http://python.org',\n               'https://www.python.org/error',\n               ]\n\n    print(URLFetcher() is URLFetcher())\n\n    fetcher = URLFetcher()\n    for url in MY_URLS:\n        try:\n            fetcher.fetch(url)\n        except Exception as e:\n            print(e)\n            \n    print('-------')\n    done_urls = fetcher.dump_url_registry()\n    print(f'Done URLs: {done_urls}')\n    \nif __name__ == '__main__':\n    main()\n"""
Chapter26/adapter.py,0,"b'\nfrom external import Musician, Dancer\n\n \nclass Club: \n    def __init__(self, name): \n        self.name = name \n \n    def __str__(self): \n        return f\'the club {self.name}\' \n \n    def organize_event(self): \n        return \'hires an artist to perform for the people\' \n\n        \nclass Adapter: \n    def __init__(self, obj, adapted_methods): \n        self.obj = obj \n        self.__dict__.update(adapted_methods) \n \n    def __str__(self): \n        return str(self.obj) \n\n        \ndef main(): \n\n    objects = [Club(\'Jazz Cafe\'), Musician(\'Roy Ayers\'), Dancer(\'Shane Sparks\')]\n    \n    for obj in objects:\n        if hasattr(obj, \'play\') or hasattr(obj, \'dance\'):\n            if hasattr(obj, \'play\'):\n                adapted_methods = dict(organize_event=obj.play)\n            elif hasattr(obj, \'dance\'):            \n                adapted_methods = dict(organize_event=obj.dance)\n                \n            # referencing the adapted object here\n            obj = Adapter(obj, adapted_methods)\n            \n        print(f\'{obj} {obj.organize_event()}\') \n\n  \nif __name__ == ""__main__"": \n    main()'"
Chapter26/external.py,0,"b""class Musician: \n    def __init__(self, name): \n        self.name = name\n \n    def __str__(self): \n        return f'the musician {self.name}' \n \n    def play(self): \n        return 'plays music' \n \nclass Dancer: \n    def __init__(self, name): \n        self.name = name \n \n    def __str__(self): \n        return f'the dancer {self.name}' \n \n    def dance(self): \n        return 'does a dance performance' \n """
Chapter27/mymath.py,0,"b'\nimport functools \n \ndef memoize(fn): \n    cache = dict() \n \n    @functools.wraps(fn) \n    def memoizer(*args): \n        if args not in cache: \n            cache[args] = fn(*args) \n        return cache[args] \n \n    return memoizer\n    \n@memoize \ndef number_sum(n): \n    \'\'\'Returns the sum of the first n numbers\'\'\' \n    assert(n >= 0), \'n must be >= 0\' \n    if n == 0:\n        return 0\n    else:\n        return n + number_sum(n-1)\n \n@memoize \ndef fibonacci(n): \n    \'\'\'Returns the suite of Fibonacci numbers\'\'\' \n    assert(n >= 0), \'n must be >= 0\'\n    if n in (0, 1):\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)    \n        \ndef main():\n    from timeit import Timer\n\n    to_execute = [\n        (number_sum, \n         Timer(\'number_sum(300)\', \'from __main__ import number_sum\')),\n        (fibonacci, \n         Timer(\'fibonacci(100)\', \'from __main__ import fibonacci\'))    \n    ]\n    \n    for item in to_execute:\n        fn = item[0]\n        print(f\'Function ""{fn.__name__}"": {fn.__doc__}\')\n        t = item[1]\n        print(f\'Time: {t.timeit()}\')\n        print()\n\nif __name__ == \'__main__\': \n    main()\n'"
Chapter27/number_sum.py,0,"b""sum_cache = {0:0}\n  \ndef number_sum(n): \n    '''Returns the sum of the first n numbers''' \n    assert(n >= 0), 'n must be >= 0'\n    \n    if n in sum_cache:\n        return sum_cache[n]\n    res = n + number_sum(n-1)\n    # Add the value to the cache\n    sum_cache[n] = res\n    return res\n         \nif __name__ == '__main__': \n    from timeit import Timer \n    t = Timer('number_sum(300)', 'from __main__ import number_sum')\n    print('Time: ', t.timeit())"""
Chapter27/number_sum_naive.py,0,"b""\ndef number_sum(n): \n    '''Returns the sum of the first n numbers''' \n    assert(n >= 0), 'n must be >= 0' \n    \n    if n == 0:\n        return 0\n    else:\n        return n + number_sum(n-1)  \n \nif __name__ == '__main__': \n    from timeit import Timer \n    t = Timer('number_sum(30)', 'from __main__ import number_sum')\n    print('Time: ', t.timeit())"""
Chapter28/bridge.py,0,"b'\n\nimport abc\nimport urllib.parse\nimport urllib.request\n\n\nclass ResourceContent:\n    """"""\n    Define the abstraction\'s interface.\n    Maintain a reference to an object which represents the Implementor.\n    """"""\n\n    def __init__(self, imp):\n        self._imp = imp\n\n    def show_content(self, path):\n        self._imp.fetch(path)\n\n\nclass ResourceContentFetcher(metaclass=abc.ABCMeta):\n    """"""\n    Define the interface (Implementor) for implementation classes that help fetch content.\n    """"""\n    \n    @abc.abstractmethod\n    def fetch(path):\n        pass\n        \n\nclass URLFetcher(ResourceContentFetcher):\n    """"""\n    Implement the Implementor interface and define its concrete\n    implementation.\n    """"""\n    \n    def fetch(self, path):\n        # path is an URL\n        req = urllib.request.Request(path)\n        with urllib.request.urlopen(req) as response:\n            if response.code == 200:\n                the_page = response.read()\n                print(the_page)\n                        \n                \nclass LocalFileFetcher(ResourceContentFetcher):\n    """"""\n    Implement the Implementor interface and define its concrete\n    implementation.\n    """"""\n\n    def fetch(self, path):\n        # path is the filepath to a text file\n        with open(path) as f:\n            print(f.read())\n        \n       \ndef main():\n    url_fetcher = URLFetcher()\n    iface = ResourceContent(url_fetcher)\n    iface.show_content(\'http://python.org\')\n\n    print(\'===================\')\n    \n    localfs_fetcher = LocalFileFetcher()\n    iface = ResourceContent(localfs_fetcher)\n    iface.show_content(\'file.txt\')\n\n    \nif __name__ == ""__main__"":\n    main()\n\n    '"
Chapter29/facade.py,0,"b'from enum import Enum \nfrom abc import ABCMeta, abstractmethod \n \nState = Enum(\'State\', \'new running sleeping restart zombie\') \n \nclass User: \n    pass \n \nclass Process: \n    pass \n \nclass File: \n    pass \n \nclass Server(metaclass=ABCMeta): \n    @abstractmethod \n    def __init__(self): \n        pass \n \n    def __str__(self): \n        return self.name \n \n    @abstractmethod \n    def boot(self): \n        pass \n \n    @abstractmethod  \n    def kill(self, restart=True): \n        pass \n \nclass FileServer(Server): \n    def __init__(self): \n        \'\'\'actions required for initializing the file server\'\'\' \n        self.name = \'FileServer\' \n        self.state = State.new \n \n    def boot(self): \n        print(f\'booting the {self}\') \n        \'\'\'actions required for booting the file server\'\'\' \n        self.state = State.running \n \n    def kill(self, restart=True): \n        print(f\'Killing {self}\') \n        \'\'\'actions required for killing the file server\'\'\' \n        self.state = State.restart if restart else State.zombie \n \n    def create_file(self, user, name, permissions): \n        \'\'\'check validity of permissions, user rights, etc.\'\'\' \n        print(f""trying to create the file \'{name}\' for user \'{user}\' with permissions {permissions}"") \n \nclass ProcessServer(Server): \n    def __init__(self): \n        \'\'\'actions required for initializing the process server\'\'\' \n        self.name = \'ProcessServer\' \n        self.state = State.new \n \n    def boot(self): \n        print(f\'booting the {self}\') \n        \'\'\'actions required for booting the process server\'\'\' \n        self.state = State.running \n \n    def kill(self, restart=True): \n        print(f\'Killing {self}\') \n        \'\'\'actions required for killing the process server\'\'\' \n        self.state = State.restart if restart else State.zombie \n \n    def create_process(self, user, name): \n        \'\'\'check user rights, generate PID, etc.\'\'\' \n        print(f""trying to create the process \'{name}\' for user \'{user}\'"") \n \nclass WindowServer: \n    pass \n \nclass NetworkServer: \n    pass \n \nclass OperatingSystem: \n    \'\'\'The Facade\'\'\' \n    def __init__(self): \n        self.fs = FileServer() \n        self.ps = ProcessServer() \n \n    def start(self): \n        [i.boot() for i in (self.fs, self.ps)] \n \n    def create_file(self, user, name, permissions): \n        return self.fs.create_file(user, name, permissions) \n \n    def create_process(self, user, name): \n        return self.ps.create_process(user, name) \n \ndef main(): \n    os = OperatingSystem() \n    os.start()  \n    os.create_file(\'foo\', \'hello\', \'-rw-r-r\') \n    os.create_process(\'bar\', \'ls /tmp\') \n \nif __name__ == \'__main__\': \n    main()\n    \n'"
Chapter30/flyweight.py,0,"b""import random \nfrom enum import Enum \n \nCarType = Enum('CarType', 'subcompact compact suv') \n \nclass Car: \n    pool = dict() \n \n    def __new__(cls, car_type): \n        obj = cls.pool.get(car_type, None) \n        if not obj: \n            obj = object.__new__(cls) \n            cls.pool[car_type] = obj \n            obj.car_type = car_type \n        return obj \n \n    def render(self, color, x, y):\n        type = self.car_type\n        msg = f'render a car of type {type} and color {color} at ({x}, {y})'\n        print(msg)\n \ndef main(): \n    rnd = random.Random() \n    #age_min, age_max = 1, 30    # in years \n    colors = 'white black silver gray red blue brown beige yellow green'.split()\n    min_point, max_point = 0, 100 \n    car_counter = 0 \n \n    for _ in range(10): \n        c1 = Car(CarType.subcompact) \n        c1.render(random.choice(colors), \n                  rnd.randint(min_point, max_point), \n                  rnd.randint(min_point, max_point)) \n        car_counter += 1 \n \n    for _ in range(3): \n        c2 = Car(CarType.compact) \n        c2.render(random.choice(colors), \n                  rnd.randint(min_point, max_point), \n                  rnd.randint(min_point, max_point)) \n        car_counter += 1 \n \n    for _ in range(5): \n        c3 = Car(CarType.suv) \n        c3.render(random.choice(colors), \n                  rnd.randint(min_point, max_point), \n                  rnd.randint(min_point, max_point)) \n        car_counter += 1 \n \n    print(f'cars rendered: {car_counter}') \n    print(f'cars actually created: {len(Car.pool)}') \n \n    c4 = Car(CarType.subcompact) \n    c5 = Car(CarType.subcompact) \n    c6 = Car(CarType.suv) \n    print(f'{id(c4)} == {id(c5)}? {id(c4) == id(c5)}') \n    print(f'{id(c5)} == {id(c6)}? {id(c5) == id(c6)}') \n\n    \nif __name__ == '__main__': \n    main()\n    \n"""
Chapter30/lazy.py,0,"b'\nclass LazyProperty: \n    def __init__(self, method): \n        self.method = method \n        self.method_name = method.__name__ \n        # print(f""function overriden: {self.fget}"") \n        # print(f""function\'s name: {self.func_name}"")\n      \n    def __get__(self, obj, cls): \n        if not obj: \n            return None \n        value = self.method(obj) \n        # print(f\'value {value}\') \n        setattr(obj, self.method_name, value) \n        return value \n\n     \nclass Test: \n    def __init__(self): \n        self.x = \'foo\' \n        self.y = \'bar\' \n        self._resource = None\n        \n    @LazyProperty \n    def resource(self): \n        print(f\'initializing self._resource which is: {self._resource}\')        \n        self._resource = tuple(range(5)) # expensive \n        return self._resource\n        \n        \ndef main():     \n    t = Test() \n    print(t.x) \n    print(t.y) \n    # do more work... \n    print(t.resource) \n    print(t.resource)\n\n\nif __name__ == \'__main__\': \n    main()\n    '"
Chapter30/mvc.py,0,"b'quotes = (\n\'A man is not complete until he is married. Then he is finished.\', \n\'As I said before, I never repeat myself.\', \n\'Behind a successful man is an exhausted woman.\', \n\'Black holes really suck...\',\n\'Facts are stubborn things.\'\n) \n \nclass QuoteModel: \n    def get_quote(self, n): \n        try: \n            value = quotes[n] \n        except IndexError as err: \n            value = \'Not found!\' \n        return value \n \nclass QuoteTerminalView: \n    def show(self, quote): \n        print(f\'And the quote is: ""{quote}""\') \n \n    def error(self, msg): \n        print(f\'Error: {msg}\') \n \n    def select_quote(self): \n        return input(\'Which quote number would you like to see? \') \n \nclass QuoteTerminalController: \n    def __init__(self): \n        self.model = QuoteModel() \n        self.view = QuoteTerminalView() \n \n    def run(self): \n        valid_input = False \n        while not valid_input: \n            try: \n                n = self.view.select_quote() \n                n = int(n) \n                valid_input = True \n            except ValueError as err: \n                self.view.error(f""Incorrect index \'{n}\'"") \n        quote = self.model.get_quote(n) \n        self.view.show(quote) \n \ndef main(): \n    controller = QuoteTerminalController() \n    while True: \n        controller.run() \n \nif __name__ == \'__main__\': \n    main()\n    '"
Chapter30/proxy.py,0,"b'class SensitiveInfo: \n    def __init__(self): \n        self.users = [\'nick\', \'tom\', \'ben\', \'mike\'] \n \n    def read(self): \n        nb = len(self.users)\n        print(f""There are {nb} users: {\' \'.join(self.users)}"") \n \n    def add(self, user): \n        self.users.append(user) \n        print(f\'Added user {user}\') \n \nclass Info:  \n    \'\'\'protection proxy to SensitiveInfo\'\'\' \n \n    def __init__(self): \n        self.protected = SensitiveInfo() \n        self.secret = \'0xdeadbeef\' \n \n    def read(self): \n        self.protected.read() \n \n    def add(self, user): \n        sec = input(\'what is the secret? \') \n        self.protected.add(user) if sec == self.secret else print(""That\'s wrong!"") \n \ndef main(): \n    info = Info() \n \n    while True: \n        print(\'1. read list |==| 2. add user |==| 3. quit\') \n        key = input(\'choose option: \') \n        if key == \'1\': \n            info.read() \n        elif key == \'2\': \n            name = input(\'choose username: \') \n            info.add(name) \n        elif key == \'3\': \n            exit() \n        else: \n            print(f\'unknown option: {key}\') \n \nif __name__ == \'__main__\': \n    main()'"
Chapter31/chain.py,0,"b""class Event: \n    def __init__(self, name): \n        self.name = name \n\n    def __str__(self): \n        return self.name \n\nclass Widget: \n    def __init__(self, parent=None): \n        self.parent = parent \n\n    def handle(self, event): \n        handler = f'handle_{event}' \n        if hasattr(self, handler): \n            method = getattr(self, handler) \n            method(event) \n        elif self.parent is not None: \n            self.parent.handle(event) \n        elif hasattr(self, 'handle_default'): \n            self.handle_default(event) \n\nclass MainWindow(Widget): \n    def handle_close(self, event): \n        print(f'MainWindow: {event}') \n\n    def handle_default(self, event): \n        print(f'MainWindow Default: {event}') \n\nclass SendDialog(Widget): \n    def handle_paint(self, event): \n        print(f'SendDialog: {event}') \n\nclass MsgText(Widget): \n    def handle_down(self, event): \n        print(f'MsgText: {event}') \n\ndef main(): \n    mw = MainWindow() \n    sd = SendDialog(mw) \n    msg = MsgText(sd) \n\n    for e in ('down', 'paint', 'unhandled', 'close'): \n        evt = Event(e) \n        print(f'Sending event -{evt}- to MainWindow') \n        mw.handle(evt) \n        print(f'Sending event -{evt}- to SendDialog') \n        sd.handle(evt) \n        print(f'Sending event -{evt}- to MsgText') \n        msg.handle(evt) \n\nif __name__ == '__main__': \n    main()\n"""
Chapter32/command.py,0,"b'import os  \n \nverbose = True  \n\nclass RenameFile:\n \n    def __init__(self, src, dest):  \n        self.src = src \n        self.dest = dest\n        \n    def execute(self):  \n        if verbose:  \n            print(f""[renaming \'{self.src}\' to \'{self.dest}\']"")  \n        os.rename(self.src, self.dest)  \n\n    def undo(self):  \n        if verbose:  \n            print(f""[renaming \'{self.dest}\' back to \'{self.src}\']"")  \n        os.rename(self.dest, self.src) \n\nclass CreateFile:\n\n    def __init__(self, path, txt=\'hello world\\n\'):  \n        self.path = path \n        self.txt = txt \n\n    def execute(self):  \n        if verbose:  \n            print(f""[creating file \'{self.path}\']"")  \n        with open(self.path, mode=\'w\', encoding=\'utf-8\') as out_file:  \n            out_file.write(self.txt)\n            \n    def undo(self):  \n        delete_file(self.path)\n        \nclass ReadFile:\n\n    def __init__(self, path):  \n        self.path = path \n\n    def execute(self):  \n        if verbose:  \n            print(f""[reading file \'{self.path}\']"")  \n        with open(self.path, mode=\'r\', encoding=\'utf-8\') as in_file:  \n            print(in_file.read(), end=\'\')\n       \ndef delete_file(path): \n    if verbose: \n        print(f""deleting file {path}"")\n    os.remove(path) \n       \ndef main():\n\n    orig_name, new_name = \'file1\', \'file2\'  \n \n    commands = (CreateFile(orig_name), \n            ReadFile(orig_name),  \n            RenameFile(orig_name, new_name))\n \n    [c.execute() for c in commands]\n    \n    answer = input(\'reverse the executed commands? [y/n] \')  \n \n    if answer not in \'yY\': \n        print(f""the result is {new_name}"")  \n        exit()  \n \n    for c in reversed(commands):  \n        try:  \n            c.undo()  \n        except AttributeError as e:  \n            print(""Error"", str(e))\n \nif __name__ == ""__main__"":  \n    main()'"
Chapter32/first-class.py,0,"b'import os  \nverbose = True  \n\nclass CreateFile:\n\n    def __init__(self, path, txt=\'hello world\\n\'):  \n        self.path = path \n        self.txt = txt \n\n    def execute(self):  \n        if verbose:  \n            print(f""[creating file \'{self.path}\']"")  \n        with open(self.path, mode=\'w\', encoding=\'utf-8\') as out_file:  \n            out_file.write(self.txt)\n            \n    def undo(self):  \n        try:\n            delete_file(self.path)\n        except:\n            print(\'delete action not successful...\')\n            print(\'... file was probably already deleted.\')\n\ndef delete_file(path):\n    if verbose:\n        print(f""deleting file {path}..."")\n    os.remove(path)\n     \ndef main():\n\n    orig_name = \'file1\'  \n    df=delete_file  \n\n    commands = [CreateFile(orig_name),] \n    commands.append(df)  \n  \n    for c in commands:  \n        try:  \n            c.execute()  \n        except AttributeError as e:  \n            df(orig_name)  \n  \n    for c in reversed(commands):  \n        try:  \n            c.undo()  \n        except AttributeError as e:  \n            pass\n            \nif __name__ == ""__main__"":  \n    main()\n    '"
Chapter33/observer.py,0,"b'\nclass Publisher:  \n    def __init__(self):  \n        self.observers = []  \n \n    def add(self, observer):  \n        if observer not in self.observers:  \n            self.observers.append(observer)  \n        else:  \n            print(f\'Failed to add: {observer}\')  \n \n    def remove(self, observer):  \n        try:  \n            self.observers.remove(observer)  \n        except ValueError:  \n            print(f\'Failed to remove: {observer}\')  \n \n    def notify(self):  \n        [o.notify(self) for o in self.observers]  \n \nclass DefaultFormatter(Publisher):  \n    def __init__(self, name):  \n        Publisher.__init__(self)  \n        self.name = name  \n        self._data = 0  \n \n    def __str__(self):\n        return f""{type(self).__name__}: \'{self.name}\' has data = {self._data}""\n \n    @property  \n    def data(self):  \n        return self._data  \n \n    @data.setter  \n    def data(self, new_value):  \n        try:  \n            self._data = int(new_value)  \n        except ValueError as e:  \n            print(f\'Error: {e}\')  \n        else: \n            self.notify()  \n \nclass HexFormatterObs:  \n    def notify(self, publisher):  \n        value = hex(publisher.data)\n        print(f""{type(self).__name__}: \'{publisher.name}\' has now hex data = {value}"")  \n \nclass BinaryFormatterObs:  \n    def notify(self, publisher):  \n        value = bin(publisher.data)\n        print(f""{type(self).__name__}: \'{publisher.name}\' has now bin data = {value}"")  \n \ndef main():  \n    df = DefaultFormatter(\'test1\')  \n    print(df)  \n \n    print()  \n    hf = HexFormatterObs()  \n    df.add(hf)  \n    df.data = 3  \n    print(df)  \n \n    print()  \n    bf = BinaryFormatterObs()  \n    df.add(bf)  \n    df.data = 21  \n    print(df)  \n \n    print()  \n    df.remove(hf)  \n    df.data = 40  \n    print(df)  \n \n    print()  \n    df.remove(hf)  \n    df.add(bf)  \n \n    df.data = \'hello\'  \n    print(df)  \n \n    print()  \n    df.data = 15.8  \n    print(df)  \n \nif __name__ == \'__main__\':  \n    main()\n    '"
