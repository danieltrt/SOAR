file_path,api_count,code
scripts/step1.py,0,"b'""""""\nDownloads the data in a zip file, reads its contents and generates a\nnew csv file with the fields we need.\n""""""\n\nimport csv\nfrom zipfile import ZipFile\n\nimport requests\n\n\ndef download():\n    """"""Downloads the dataset and saves it to disk.""""""\n\n    url = ""https://www.ssa.gov/oact/babynames/names.zip""\n\n    with requests.get(url) as response:\n\n        with open(""names.zip"", ""wb"") as temp_file:\n            temp_file.write(response.content)\n\n\ndef parse_zip():\n    """"""Reads the contents of the zip file and creates a csv file with them.""""""\n\n    # This list will hold all our data. We initialize it with the header row.\n    data_list = [[""year"", ""name"", ""gender"", ""count""]]\n\n    # We first read the zip file using a zipfile.ZipFile object.\n    with ZipFile(""names.zip"") as temp_zip:\n\n        # Then we read the file list.\n        for file_name in temp_zip.namelist():\n\n            # We will only process .txt files.\n            if "".txt"" in file_name:\n\n                # Now we read the current file from the zip file.\n                with temp_zip.open(file_name) as temp_file:\n\n                    # The file is opened as binary, we decode it using utf-8 so it can be manipulated as a string.\n                    for line in temp_file.read().decode(""utf-8"").splitlines():\n\n                        # We prepare our desired data fields and add them to the data list.\n                        line_chunks = line.split("","")\n                        year = file_name[3:7]\n                        name = line_chunks[0]\n                        gender = line_chunks[1]\n                        count = line_chunks[2]\n\n                        data_list.append([year, name, gender, count])\n\n    # We save the data list into a csv file.\n    csv.writer(open(""data.csv"", ""w"", newline="""",\n                    encoding=""utf-8"")).writerows(data_list)\n\n\nif __name__ == ""__main__"":\n\n    download()\n    parse_zip()\n'"
scripts/step2.py,10,"b'""""""\nFunctions used to generate the insights and plots from the article.\n""""""\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Those parameters generate plots with a mauve color.\nsns.set(style=""ticks"",\n        rc={\n            ""figure.figsize"": [12, 7],\n            ""text.color"": ""white"",\n            ""axes.labelcolor"": ""white"",\n            ""axes.edgecolor"": ""white"",\n            ""xtick.color"": ""white"",\n            ""ytick.color"": ""white"",\n            ""axes.facecolor"": ""#443941"",\n            ""figure.facecolor"": ""#443941""}\n        )\n\n\ndef get_essentials(df):\n    """"""Gets total counts by gender.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be analyzed.\n\n    """"""\n\n    # Top 5 rows.\n    print(df.head())\n\n    # Bottom 5 rows.\n    print(df.tail())\n\n    # Unique names combined.\n    print(df[""name""].nunique())\n\n    # Unique names Male.\n    print(df[df[""gender""] == ""M""][""name""].nunique())\n\n    # Unique names Female.\n    print(df[df[""gender""] == ""F""][""name""].nunique())\n\n    # Unique names gender neutral.\n    both_df = df.pivot_table(\n        index=""name"", columns=""gender"", values=""count"", aggfunc=np.sum).dropna()\n\n    print(both_df.index.nunique())\n\n\ndef totals_by_year(df):\n    """"""Gets total counts by year.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be analyzed.\n\n    """"""\n\n    both_df = df.groupby(""year"").sum()\n    male_df = df[df[""gender""] == ""M""].groupby(""year"").sum()\n    female_df = df[df[""gender""] == ""F""].groupby(""year"").sum()\n\n    print(""Both Min:"", both_df.min()[""count""], ""-"", both_df.idxmin()[""count""])\n    print(""Both Max:"", both_df.max()[""count""], ""-"", both_df.idxmax()[""count""])\n    print(""Male Min:"", male_df.min()[""count""], ""-"", male_df.idxmin()[""count""])\n    print(""Male Max:"", male_df.max()[""count""], ""-"", male_df.idxmax()[""count""])\n    print(""Female Min:"", female_df.min()[\n          ""count""], ""-"", female_df.idxmin()[""count""])\n    print(""Female Max:"", female_df.max()[\n          ""count""], ""-"", female_df.idxmax()[""count""])\n\n\ndef get_top_10(df):\n    """"""Gets the top 10 most used male and female names.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be analyzed.\n\n    """"""\n\n    # We create a new dataframe with only male names and sum all their counts.\n    # Then we sort it in descending order.\n    male_df = df[df[""gender""] == ""M""][[""name"", ""count""]].groupby(\n        ""name"").sum().sort_values(""count"", ascending=False)\n\n    print(male_df.head(10))\n\n    # We create a new dataframe with only female names and sum all their counts.\n    # Then we sort it in descending order.\n    female_df = df[df[""gender""] == ""F""][[""name"", ""count""]].groupby(\n        ""name"").sum().sort_values(""count"", ascending=False)\n\n    print(female_df.head(10))\n\n\ndef get_top_20_gender_neutral(df):\n    """"""Gets the top 20 most used gender neutral names.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be analyzed.\n\n    """"""\n\n    # We pivot the dataframe so the names will be the index and the genders will be the columns.\n    df = df.pivot_table(index=""name"", columns=""gender"",\n                        values=""count"", aggfunc=np.sum).dropna()\n\n    # Limit to only names with at least 50,000 records on both genders.\n    df = df[(df[""M""] >= 50000) & (df[""F""] >= 50000)]\n    print(df.head(20))\n\n\ndef plot_counts_by_year(df):\n    """"""Plots the year counts by male, female and combined.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be plotted.\n\n    """"""\n\n    # We create new dataframes for male, female and combined.\n    both_df = df.groupby(""year"").sum()\n    male_df = df[df[""gender""] == ""M""].groupby(""year"").sum()\n    female_df = df[df[""gender""] == ""F""].groupby(""year"").sum()\n\n    # We plot our dataframes directly.\n    # The x-axis will be the index and the y-axis will be the total counts.\n    plt.plot(both_df, label=""Both"", color=""yellow"")\n    plt.plot(male_df, label=""Male"", color=""lightblue"")\n    plt.plot(female_df, label=""Female"", color=""pink"")\n\n    # We make our yticks in steps of 50,000.\n    # First we format the numbers for the labels.\n    # Then we use the actual numbers as the steps.\n    yticks_labels = [""{:,}"".format(i) for i in range(0, 4500000+1, 500000)]\n    plt.yticks(np.arange(0, 4500000+1, 500000), yticks_labels)\n\n    # Final customizations.\n    plt.legend()\n    plt.grid(False)\n    plt.xlabel(""Year"")\n    plt.ylabel(""Records Count"")\n    plt.title(""Records per Year"")\n    plt.savefig(""total_by_year.png"", facecolor=""#443941"")\n\n\ndef plot_popular_names_growth(df):\n    """"""Plots the most popular names and how they have grown trough the years.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be plotted.\n\n    """"""\n\n    # We first pivot the dataframe to merge values from male and female and\n    # pivot the table so the names are our index and the years are our columns.\n    # We also fill missing values with zeroes.\n    pivoted_df = df.pivot_table(\n        index=""name"", columns=""year"", values=""count"", aggfunc=np.sum).fillna(0)\n\n    # Then we calculate the percentage of each name by year.\n    percentage_df = pivoted_df / pivoted_df.sum() * 100\n\n    # We add a new column to store the cumulative percentages sum.\n    percentage_df[""total""] = percentage_df.sum(axis=1)\n\n    # We sort the dataframe to check which are the top values and slice it.\n    # After that we drop the \'total\' column since it won\'t be used anymore.\n    sorted_df = percentage_df.sort_values(\n        by=""total"", ascending=False).drop(""total"", axis=1)[0:10]\n\n    # We flip the axes so we can plot the data more easily.\n    transposed_df = sorted_df.transpose()\n\n    # We plot each name individually by using the column name as the label and Y-axis.\n    for name in transposed_df.columns.tolist():\n        plt.plot(transposed_df.index, transposed_df[name], label=name)\n\n    # We set our yticks in steps of 0.5.\n    yticks_labels = [""{}%"".format(i) for i in np.arange(0, 5.5, 0.5)]\n    plt.yticks(np.arange(0, 5.5, 0.5), yticks_labels)\n\n    # Final customizations.\n    plt.legend()\n    plt.grid(False)\n    plt.xlabel(""Year"")\n    plt.ylabel(""Percentage by Year"")\n    plt.title(""Top 10 Names Growth"")\n    plt.savefig(""most_popular_growth.png"", facecolor=""#443941"")\n\n\ndef plot_top_10_trending(df):\n    """"""Plots the most populare names and how they have grown trough the years.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The DataFrame to be plotted.\n\n    """"""\n\n    # First we remove all records previous to 2008.\n    filtered_df = df[df[""year""] >= 2008]\n    \n    # Then we merge values from male and female and pivot the table\n    # so the names are our index and the years are our columns.\n    # We also fill missing values with zeroes.\n    pivoted_df = filtered_df.pivot_table(\n        index=""name"", columns=""year"", values=""count"", aggfunc=np.sum).fillna(0)\n\n    # Then we calculate the percentage of each name by year.\n    percentage_df = pivoted_df / pivoted_df.sum() * 100\n\n    # We add a new column to store the cumulative percentages sum.\n    percentage_df[""total""] = percentage_df.sum(axis=1)\n\n    # We sort the dataframe to check which are the top values and slice it.\n    # After that we drop the \'total\' column since it won\'t be used anymore.\n    sorted_df = percentage_df.sort_values(\n        by=""total"", ascending=False).drop(""total"", axis=1)[0:10]\n\n    # We flip the axes so we can plot the dataframe more easily.\n    transposed_df = sorted_df.transpose()\n\n    # We plot each name individually by using the column name as the label and Y-axis.\n    for name in transposed_df.columns.tolist():\n        plt.plot(transposed_df.index, transposed_df[name], label=name)\n\n    # We set our yticks in steps of 0.05%.\n    yticks_labels = [""{:.2f}%"".format(i) for i in np.arange(0.3, 0.7, 0.05)]\n    plt.yticks(np.arange(0.3, 0.7, 0.05), yticks_labels)\n\n    # We set our xticks in steps of 1, from 2009 to 2018.\n    xticks_labels = [""{}"".format(i) for i in range(2008, 2618+1, 1)]\n    plt.xticks(np.arange(2008, 2018+1, 1), xticks_labels)\n\n    # Final customizations.\n    plt.legend()\n    plt.grid(False)\n    plt.xlabel(""Year"")\n    plt.ylabel(""Percentage by Year"")\n    plt.title(""Top 10 Trending Names"")\n    plt.savefig(""trending_names.png"", facecolor=""#443941"")\n\n\nif __name__ == ""__main__"":\n\n    main_df = pd.read_csv(""data.csv"")\n'"
