file_path,api_count,code
scripts/step1_global.py,0,"b'""""""\nThis script downloads the Johns Hopkins COVID-19 time series datasets and merges them into one CSV file.\n""""""\n\nimport csv\nfrom datetime import datetime\n\nimport requests\n\nCSV_FILES = {\n    ""confirmed"": ""https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"",\n    ""deaths"": ""https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"",\n    ""recovered"": ""https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv""\n}\n\n\ndef main():\n    """"""Prepares our data structures and parses the original CSV files.""""""\n\n    # Start by generating a skeleton dict and getting all the available dates.\n    data_dict, dates_dict = generate_list()\n\n    # Iterate over our 3 urls.\n    for kind, url in CSV_FILES.items():\n\n        with requests.get(url) as response:\n\n            # Pass the response text into a csv.DictReader object.\n            reader = csv.DictReader(response.text.splitlines())\n\n            # Iterate over each row of the CSV file.\n            for row in reader:\n\n                # Iterate over our available dates.\n                for k, v in dates_dict.items():\n\n                    # Construct the key for our look up.\n                    temp_key = ""{}_{}"".format(v, row[""Country/Region""])\n\n                    # Update the corresponding value depending on the CSV data kind.\n                    if kind == ""confirmed"":\n                        data_dict[temp_key][0] += int(row[k])\n                    elif kind == ""deaths"":\n                        data_dict[temp_key][1] += int(row[k])\n                    elif kind == ""recovered"":\n                        data_dict[temp_key][2] += int(row[k])\n\n    # Save our data to a CSV file.\n    with open(""global_data.csv"", ""w"", encoding=""utf-8"", newline="""") as other_file:\n\n        # Initialize the data list with the header row.\n        data_list = data_list = [\n            [""isodate"", ""country"", ""confirmed"", ""deaths"", ""recovered""]]\n\n        # Iterate over our data dict and pass the values to the data list.\n        for k, v in data_dict.items():\n            isodate, country = k.split(""_"")\n            data_list.append([isodate, country, v[0], v[1], v[2]])\n\n        csv.writer(other_file).writerows(data_list)\n\n\ndef generate_list():\n    """"""Prepares a list with all the available countries and all the available dates.\n    This list will contain dummy values that will be later filled.\n\n    Returns\n    -------\n    tup\n        A tuple containing a skeleton list and a dict with the date strings and their datetime objects.\n\n    """"""\n\n    # Initialize the skeleton dict.\n    data_dict = dict()\n\n    # This dictionary will hold all our available dates.\n    dates_dict = dict()\n\n    # This set will hold all the countries/regions we find.\n    countries = set()\n\n    # We will load the first CSV url.\n    file = list(CSV_FILES.values())[0]\n\n    with requests.get(file) as response:\n\n        # Pass the response text into a csv.DictReader object.\n        reader = csv.DictReader(response.text.splitlines())\n\n        # Extract the header row and select from the fifth column onwards.\n        fields = reader.fieldnames[4:]\n\n        # Convert the header row dates to datetime objects.\n        for field in fields:\n            dates_dict[field] = ""{:%Y-%m-%d}"".format(\n                datetime.strptime(field, ""%m/%d/%y""))\n\n        # Extract the countries/regions by iterating over all rows.\n        for row in reader:\n            countries.add(row[""Country/Region""])\n\n        # Convert the countries set to a list and sort it.\n        countries = sorted(list(countries))\n\n        # Combine every date with every country and fill it with zero values.\n        for date in dates_dict.values():\n\n            for country in countries:\n\n                temp_key = ""{}_{}"".format(date, country)\n                data_dict[temp_key] = [0, 0, 0]\n\n        return data_dict, dates_dict\n\n\nif __name__ == ""__main__"":\n\n    main()\n'"
scripts/step1_mx.py,0,"b'""""""\nThis script downloads the Mexican dataset and its catalog.\nIt then merges them and cleans them into a new dataset.\n""""""\n\nimport csv\nimport io\nimport os\nimport zipfile\n\nimport requests\nfrom openpyxl import load_workbook\n\n\nDATA_URL = ""http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip""\nDATA_FILE = ""./data.zip""\n\nCATALOG_URL = ""http://187.191.75.115/gobmx/salud/datos_abiertos/diccionario_datos_covid19.zip""\nCATALOG_FILE = ""./catalog.zip""\n\n# These will hold the values from the catalog workbook.\nORIGEN_DICT = dict()\nSECTOR_DICT = dict()\nSEXO_DICT = dict()\nTIPO_PACIENTE_DICT = dict()\nSI_NO_DICT = dict()\nNACIONALIDAD_DICT = dict()\nRESULTADO_DICT = dict()\nENTIDADES_DICT = dict()\nMUNICIPIOS_DICT = dict()\n\n# Used to fix encoding issues.\nFIXERS = {\n    ""\xc3\x83\xc2\xb1"": ""\xc3\xb1"",\n    ""\xc3\x83\xc2\xa1"": ""\xc3\xa1"",\n    ""\xc3\x83\xc2\xa9"": ""\xc3\xa9"",\n    ""\xc3\x83\xc2\xb3"": ""\xc3\xb3"",\n    ""\xc3\x83\xc2\xba"": ""\xc3\xba"",\n    ""\xc3\x83"": ""\xc3\xad""\n}\n\n\ndef download():\n    """"""Downloads the required zip files.""""""\n\n    print(""Downloading ZIP files..."")\n\n    with requests.get(DATA_URL) as response:\n\n        with open(DATA_FILE, ""wb"") as temp_file:\n            temp_file.write(response.content)\n\n    with requests.get(CATALOG_URL) as response:\n\n        with open(CATALOG_FILE, ""wb"") as temp_file:\n            temp_file.write(response.content)\n\n    print(""ZIP files downloaded."")\n\n\ndef convert():\n    """"""Extracts the data from the zip files and creates a new dataset with them.""""""\n\n    data_list = list()\n\n    with zipfile.ZipFile(CATALOG_FILE) as catalog_zip:\n        print(""Reading catalog file..."")\n\n        with catalog_zip.open(catalog_zip.namelist()[0]) as cat_file:\n            print(""Processing catalog file..."")\n\n            workbook = load_workbook(io.BytesIO(\n                cat_file.read()), read_only=True)\n\n            # Origen\n            sheet = workbook[""Cat\xc3\xa1logo ORIGEN""]\n\n            for row in sheet.rows:\n                ORIGEN_DICT[str(row[0].value)] = str(row[1].value).strip()\n\n            # Sectores de Salud\n            sheet = workbook[""Cat\xc3\xa1logo SECTOR""]\n\n            for row in sheet.rows:\n                SECTOR_DICT[str(row[0].value)] = str(row[1].value).strip()\n\n            # Sexo\n            sheet = workbook[""Cat\xc3\xa1logo SEXO""]\n\n            for row in sheet.rows:\n                SEXO_DICT[str(row[0].value)] = str(row[1].value).strip()\n\n            # Tipo Paciente\n            sheet = workbook[""Cat\xc3\xa1logo TIPO_PACIENTE""]\n\n            for row in sheet.rows:\n                TIPO_PACIENTE_DICT[str(row[0].value)] = str(\n                    row[1].value).strip()\n\n            # Si / No\n            sheet = workbook[""Cat\xc3\xa1logo SI_NO""]\n\n            for row in sheet.rows:\n                SI_NO_DICT[str(row[0].value)] = str(row[1].value).strip()\n\n            # Nacionalidad\n            sheet = workbook[""Cat\xc3\xa1logo NACIONALIDAD""]\n\n            for row in sheet.rows:\n                NACIONALIDAD_DICT[str(row[0].value)] = str(\n                    row[1].value).strip()\n\n            # Resultado\n            sheet = workbook[""Cat\xc3\xa1logo RESULTADO""]\n\n            for row in sheet.rows:\n\n                # This one has an issue with rows that are not empty.\n                if len(row) > 0:\n                    RESULTADO_DICT[str(row[0].value)] = str(\n                        row[1].value).strip()\n\n            # Entidades Federativas\n            sheet = workbook[""Cat\xc3\xa1logo de ENTIDADES""]\n\n            for row in sheet.rows:\n                ENTIDADES_DICT[str(row[0].value)] = str(row[1].value).strip()\n\n            # Municipios\n            sheet = workbook[""Cat\xc3\xa1logo MUNICIPIOS""]\n\n            for row in sheet.rows:\n                # This one requires to combine the state and municipality codes.\n                state_with_municipality = ""{}-{}"".format(\n                    row[0].value, row[2].value)\n\n                MUNICIPIOS_DICT[state_with_municipality] = str(\n                    row[1].value).strip()\n\n            print(""Catalog file processed."")\n\n    # Extract the CSV file from the ZIP file.\n    with zipfile.ZipFile(DATA_FILE) as data_zip:\n        print(""Reading CSV file..."")\n\n        with data_zip.open(data_zip.namelist()[0], ""r"") as csv_file:\n            print(""Procesing CSV file..."")\n\n            reader = csv.DictReader(\n                io.TextIOWrapper(csv_file, encoding=""latin-1""))\n\n            for row in reader:\n\n                # we start with the municipality one so it doesn\'t break the states column.\n                state_with_municipality = ""{}-{}"".format(\n                    row[""MUNICIPIO_RES""], row[""ENTIDAD_RES""])\n\n                row[""MUNICIPIO_RES""] = MUNICIPIOS_DICT.get(\n                    state_with_municipality, ""NO ETIQUETADO"")\n\n                row[""ENTIDAD_UM""] = ENTIDADES_DICT[row[""ENTIDAD_UM""]]\n                row[""ENTIDAD_NAC""] = ENTIDADES_DICT[row[""ENTIDAD_NAC""]]\n                row[""ENTIDAD_RES""] = ENTIDADES_DICT[row[""ENTIDAD_RES""]]\n                row[""ORIGEN""] = ORIGEN_DICT[row[""ORIGEN""]]\n                row[""SECTOR""] = SECTOR_DICT[row[""SECTOR""]]\n                row[""SEXO""] = SEXO_DICT[row[""SEXO""]]\n                row[""TIPO_PACIENTE""] = TIPO_PACIENTE_DICT[row[""TIPO_PACIENTE""]]\n                row[""NACIONALIDAD""] = NACIONALIDAD_DICT[row[""NACIONALIDAD""]]\n                row[""RESULTADO""] = RESULTADO_DICT[row[""RESULTADO""]]\n\n                # Yes or No fields.\n                row[""MIGRANTE""] = SI_NO_DICT[row[""MIGRANTE""]]\n                row[""INTUBADO""] = SI_NO_DICT[row[""INTUBADO""]]\n                row[""NEUMONIA""] = SI_NO_DICT[row[""NEUMONIA""]]\n                row[""EMBARAZO""] = SI_NO_DICT[row[""EMBARAZO""]]\n                row[""HABLA_LENGUA_INDIG""] = SI_NO_DICT[row[""HABLA_LENGUA_INDIG""]]\n                row[""DIABETES""] = SI_NO_DICT[row[""DIABETES""]]\n                row[""EPOC""] = SI_NO_DICT[row[""EPOC""]]\n                row[""ASMA""] = SI_NO_DICT[row[""ASMA""]]\n                row[""INMUSUPR""] = SI_NO_DICT[row[""INMUSUPR""]]\n                row[""HIPERTENSION""] = SI_NO_DICT[row[""HIPERTENSION""]]\n                row[""OTRA_COM""] = SI_NO_DICT[row[""OTRA_COM""]]\n                row[""CARDIOVASCULAR""] = SI_NO_DICT[row[""CARDIOVASCULAR""]]\n                row[""OBESIDAD""] = SI_NO_DICT[row[""OBESIDAD""]]\n                row[""RENAL_CRONICA""] = SI_NO_DICT[row[""RENAL_CRONICA""]]\n                row[""TABAQUISMO""] = SI_NO_DICT[row[""TABAQUISMO""]]\n                row[""OTRO_CASO""] = SI_NO_DICT[row[""OTRO_CASO""]]\n                row[""UCI""] = SI_NO_DICT[row[""UCI""]]\n\n                # Special case where a country is not defined.\n                if str(row[""PAIS_ORIGEN""]) == ""99"":\n                    row[""PAIS_ORIGEN""] = ""NO ESPECIFICADO""\n\n                # Fix encoding issues.\n                for k, v in FIXERS.items():\n                    row[""PAIS_NACIONALIDAD""] = row[""PAIS_NACIONALIDAD""].replace(\n                        k, v).strip()\n\n                data_list.append(row)\n\n            print(""CAV file processed."")\n\n    with open(""./mx_data.csv"", ""w"", encoding=""utf-8"", newline="""") as result_csv:\n        writer = csv.DictWriter(result_csv, reader.fieldnames)\n        writer.writeheader()\n        writer.writerows(data_list)\n        print(""Dataset saved."")\n\n    # Clean up\n    os.remove(DATA_FILE)\n    os.remove(CATALOG_FILE)\n\n\nif __name__ == ""__main__"":\n\n    download()\n    convert()\n'"
scripts/step2_global.py,2,"b'""""""\nGenerates various plots and insights from the global dataset.\n""""""\n\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\nsns.set(style=""ticks"",\n        rc={\n            ""figure.figsize"": [15, 10],\n            ""text.color"": ""white"",\n            ""legend.fontsize"": ""large"",\n            ""xtick.labelsize"": ""x-large"",\n            ""ytick.labelsize"": ""x-large"",\n            ""axes.labelsize"": ""x-large"",\n            ""axes.titlesize"": ""x-large"",\n            ""axes.labelcolor"": ""white"",\n            ""axes.edgecolor"": ""white"",\n            ""xtick.color"": ""white"",\n            ""ytick.color"": ""white"",\n            ""axes.facecolor"": ""#111111"",\n            ""figure.facecolor"": ""#232b2b""}\n        )\n\n\nCOUNTRIES = [\n    [""US"", ""United States"", ""lightblue""],\n    [""Italy"", ""Italy"", ""pink""],\n    [""Spain"", ""Spain"", ""orange""],\n    [""France"", ""France"", ""yellow""],\n    [""United Kingdom"", ""United Kingdom"", ""lime""]\n]\n\n\ndef get_top_10(df):\n    """"""Gets the top 10 countries in each field.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    """"""\n\n    grouped_df = df.groupby(""country"").max()\n\n    # Confirmed cases\n    print(grouped_df.sort_values(""confirmed"",\n                                 ascending=False)[""confirmed""][:10])\n\n    # Deaths\n    print(grouped_df.sort_values(""deaths"", ascending=False)[""deaths""][:10])\n\n    # Recoveries\n    print(grouped_df.sort_values(""recovered"",\n                                 ascending=False)[""recovered""][:10])\n\n    a = grouped_df.sort_values(""recovered"", ascending=False)[""recovered""][:10]\n    print(a.to_markdown())\n\n\ndef get_global_counts_growths(df, field):\n    """"""Gets the daily confirmed cases, deaths or recoveries for all countries combined.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    field : str\n        The field to check, it can be \'confirmed\', \'deaths\' or \'recovered\'.\n\n    """"""\n\n    # Resample the DataFrame by 1 day intervals.\n    resampled_df = df.resample(""D"").sum()\n\n    # We add 2 new columns to know the daily totals and their percent change.\n    resampled_df[""difference""] = resampled_df[field].diff()\n    resampled_df[""change""] = resampled_df[""difference""].pct_change()\n\n    # We drop all NaN values.\n    resampled_df.dropna(inplace=True)\n\n    # We format the previous 2 columns so they can be easier to read.\n    resampled_df[""difference""] = resampled_df[""difference""].apply(int)\n\n    resampled_df[""change""] = resampled_df[""change""].apply(\n        lambda x: str(np.round(x * 100, 2)) + ""%"")\n\n    print(resampled_df[[field, ""difference"", ""change""]][-10:])\n\n\ndef get_country_counts_growths(df, country, field):\n    """"""Gets the daily confirmed cases, deaths or recoveries for a specified country.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    country : str\n        The country/region name.\n\n    field : str\n        The field to check, it can be \'confirmed\', \'deaths\' or \'recovered\'.\n\n    """"""\n\n    # Filter our DataFrame so it only reads data from the country we are interested in.\n    filtered_df = df[df[""country""] == country].copy()\n\n    # We add 2 new columns to know the daily totals and their percent change.\n    filtered_df[""difference""] = filtered_df[field].diff()\n    filtered_df[""change""] = filtered_df[""difference""].pct_change()\n\n    # We drop all NaN values.\n    filtered_df.dropna(inplace=True)\n\n    # We format the previous 2 columns so they can be easier to read.\n    filtered_df[""difference""] = filtered_df[""difference""].apply(int)\n\n    filtered_df[""change""] = filtered_df[""change""].apply(\n        lambda x: str(np.round(x * 100, 2)) + ""%"")\n\n    print(filtered_df[[field, ""difference"", ""change""]][-10:])\n\n\ndef get_100_to_3200(df):\n    """"""Gets the number of days of confirmed cases between exponential growth bins.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    """"""\n\n    # We remove all rows lower than 100.\n    df = df[df[""confirmed""] >= 100]\n\n    # We define our bins and their labels.\n    bins = [(100, 199), (200, 399), (400, 799), (800, 1599), (1600, 3200)]\n    labels = [""100-199"", ""200-399"", ""400-799"", ""800-1599"", ""1600-3200""]\n\n    # We extract all the available countries in the dataset.\n    all_countries = sorted(df[""country""].unique().tolist())\n\n    # These lists will be filled with values in the next step.\n    valid_countries = list()\n    data_list = list()\n\n    # We iterate over all the countries we have and create temporary DataFrames with them.\n    for country in all_countries:\n\n        temp_df = df[df[""country""] == country]\n\n        # Only process countries if their confirmed cases are equal or greater than 3,200.\n        if temp_df[""confirmed""].max() >= 3200:\n            temp_list = list()\n\n            # We iterate over our bins and count how many days each one has.\n            for item in bins:\n                temp_list.append(temp_df[(temp_df[""confirmed""] >= item[0]) & (\n                    temp_df[""confirmed""] <= item[1])][""confirmed""].count())\n\n            data_list.append(temp_list)\n            valid_countries.append(country)\n\n    # We create a final DataFrame with the results and a new column with the total days from 100 to 3,200.\n    final_df = pd.DataFrame(data_list, index=valid_countries, columns=labels)\n    final_df[""total""] = final_df.sum(axis=1)\n    print(final_df)\n\n\ndef plot_global_daily_growth(df):\n    """"""Plots the daily global growth.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    """"""\n\n    # Filter out rows with zero confirmed cases.\n    df = df[df[""confirmed""] > 0]\n\n    # Resample the data by 1 day intervals and sum the daily totals.\n    resampled_df = df.resample(""D"").sum()\n\n    # Create 3 line plots on the same axis, one for each field.\n    fig, ax = plt.subplots()\n\n    ax.plot(resampled_df.index,\n            resampled_df[""confirmed""], label=""Confirmed"", color=""gold"")\n\n    ax.plot(resampled_df.index,\n            resampled_df[""deaths""], label=""Deaths"", color=""lightblue"")\n\n    ax.plot(resampled_df.index,\n            resampled_df[""recovered""], label=""Recoveries"", color=""lime"")\n\n    # Customize tickers.\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax.yaxis.set_major_locator(ticker.MaxNLocator())\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    plt.grid(linewidth=0.5)\n    plt.legend(loc=2)\n    plt.title(""Daily Confirmed Cases, Deaths & Recoveries Growth"", pad=15)\n    plt.xlabel(""Date (2020)"", labelpad=15)\n    plt.ylabel(""Cumulative Count"", labelpad=15)\n    plt.savefig(""daily_global_growth.png"", facecolor=""#232b2b"")\n\n\ndef plot_country_daily_growth(df, country):\n    """"""Plots the daily growth for a specified country.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    country: str\n        The contry or region name.\n\n    """"""\n\n    # Filter out rows with zero confirmed cases and only select rows that belong\n    # to the specified country.\n    df = df[(df[""confirmed""] > 0) & (df[""country""] == country)]\n\n    # Create 3 line plots on the same axis, one for each field.\n    fig, ax = plt.subplots()\n\n    ax.plot(df.index, df[""confirmed""], label=""Confirmed"", color=""gold"")\n    ax.plot(df.index, df[""deaths""], label=""Deaths"", color=""lightblue"")\n    ax.plot(df.index, df[""recovered""], label=""Recoveries"", color=""lime"")\n\n    # Customize tickers.\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax.yaxis.set_major_locator(ticker.MaxNLocator())\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    plt.grid(linewidth=0.5)\n    plt.legend(loc=2)\n    plt.title(""Daily Confirmed Cases, Deaths & Recoveries Growth"", pad=15)\n    plt.xlabel(""Date (2020)"", labelpad=15)\n    plt.ylabel(""Cumulative Count"", labelpad=15)\n    plt.savefig(""daily_country_growth.png"", facecolor=""#232b2b"")\n\n\ndef plot_global_daily_counts(df):\n    """"""Plots the daily global counts.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    """"""\n\n    # Filter out rows with zero confirmed cases.\n    df = df[df[""confirmed""] > 0]\n\n    # Resample the data by 1 day intervals and sum the daily totals.\n    resampled_df = df.resample(""D"").sum()\n\n    # Add 3 new columns, one for each field counts.\n    resampled_df[""confirmed_difference""] = resampled_df[""confirmed""].diff()\n    resampled_df[""deaths_difference""] = resampled_df[""deaths""].diff()\n    resampled_df[""recovered_difference""] = resampled_df[""recovered""].diff()\n\n    # Create 3 line plots on the same axis, one for each field counts.\n    fig, ax = plt.subplots()\n\n    ax.plot(resampled_df.index,\n            resampled_df[""confirmed_difference""], label=""Confirmed"", color=""gold"")\n\n    ax.plot(resampled_df.index,\n            resampled_df[""deaths_difference""], label=""Deaths"", color=""lightblue"")\n\n    ax.plot(resampled_df.index,\n            resampled_df[""recovered_difference""], label=""Recoveries"", color=""lime"")\n\n    # Customize tickers.\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax.yaxis.set_major_locator(ticker.MaxNLocator())\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    plt.grid(linewidth=0.5)\n    plt.legend(loc=2)\n    plt.title(""Daily Confirmed Cases, Deaths & Recoveries Counts"", pad=15)\n    plt.xlabel(""Date (2020)"", labelpad=15)\n    plt.ylabel(""Daily Count"", labelpad=15)\n    plt.savefig(""daily_global_counts.png"", facecolor=""#232b2b"")\n\n\ndef plot_country_daily_counts(df, country):\n    """"""Plots the daily counts for a specified country.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    country: str\n        The contry or region name.\n\n    """"""\n\n    # Filter out rows with zero confirmed cases and only select rows that belong\n    # to the specified country.\n    df = df[(df[""confirmed""] > 0) & (df[""country""] == country)].copy()\n\n    # Add 3 new columns, one for each field counts.\n    df[""confirmed_difference""] = df[""confirmed""].diff()\n    df[""deaths_difference""] = df[""deaths""].diff()\n    df[""recovered_difference""] = df[""recovered""].diff()\n\n    # Create 3 line plots on the same axis, one for each field counts.\n    fig, ax = plt.subplots()\n\n    ax.plot(df.index, df[""confirmed_difference""],\n            label=""Confirmed"", color=""gold"")\n    ax.plot(df.index, df[""deaths_difference""],\n            label=""Deaths"", color=""lightblue"")\n    ax.plot(df.index, df[""recovered_difference""],\n            label=""Recoveries"", color=""lime"")\n\n    # Customize tickers.\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax.yaxis.set_major_locator(ticker.MaxNLocator())\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    plt.grid(linewidth=0.5)\n    plt.legend(loc=2)\n    plt.title(""Daily Confirmed Cases, Deaths & Recoveries Counts"", pad=15)\n    plt.xlabel(""Date (2020)"", labelpad=15)\n    plt.ylabel(""Daily Count"", labelpad=15)\n    plt.savefig(""daily_country_counts.png"", facecolor=""#232b2b"")\n\n\ndef plot_daily_comparison(df, field):\n    """"""Plots the daily deaths for the specified countries.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the global data.\n\n    field : str\n        The field to check, it can be \'confirmed\', \'deaths\' or \'recovered\'.\n\n    """"""\n\n    # Filter out rows with zero confirmed cases.\n    df = df[df[field] > 0]\n\n    # Create a line plot for each country and add it to the same axis.\n    fig, ax = plt.subplots()\n\n    for country in COUNTRIES:\n        temp_df = df[df[""country""] == country[0]].copy()\n        temp_df[""difference""] = temp_df[field].diff()\n\n        ax.plot(temp_df.index, temp_df[""difference""],\n                label=country[1], color=country[2])\n\n    # Ticker customizations.\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax.yaxis.set_major_locator(ticker.MaxNLocator())\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    ax.grid(linewidth=0.5)\n    ax.legend(loc=2)\n    plt.title(""Daily Comparison Between Countries"", pad=15)\n    plt.xlabel(""Date (2020)"", labelpad=15)\n    plt.ylabel(""Daily Count"", labelpad=15)\n    plt.savefig(""daily_comparison.png"", facecolor=""#232b2b"")\n\n\nif __name__ == ""__main__"":\n\n    main_df = pd.read_csv(""global_data.csv"", parse_dates=[\n                          ""isodate""], index_col=0)\n\n    # get_top_10(main_df)\n    # get_global_counts_growths(main_df, ""deaths"")\n    # get_country_counts_growths(main_df, ""US"", ""deaths"")\n    # get_100_to_3200(main_df)\n\n    # plot_global_daily_growth(main_df)\n    # plot_country_daily_growth(main_df, ""US"")\n    # plot_global_daily_counts(main_df)\n    # plot_country_daily_counts(main_df, ""US"")\n    # plot_daily_comparison(main_df, ""deaths"")\n'"
scripts/step2_mx.py,2,"b'""""""\nGenerates various plots and insights from the Mexican dataset.\n""""""\n\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\nsns.set(style=""ticks"",\n        rc={\n            ""figure.figsize"": [15, 10],\n            ""text.color"": ""white"",\n            ""legend.fontsize"": ""large"",\n            ""xtick.labelsize"": ""x-large"",\n            ""ytick.labelsize"": ""x-large"",\n            ""axes.labelsize"": ""x-large"",\n            ""axes.titlesize"": ""x-large"",\n            ""axes.labelcolor"": ""white"",\n            ""axes.edgecolor"": ""white"",\n            ""xtick.color"": ""white"",\n            ""ytick.color"": ""white"",\n            ""axes.facecolor"": ""#111111"",\n            ""figure.facecolor"": ""#232b2b""}\n        )\n\n\ndef get_confirmed_by_state(df):\n    """"""Gets the total confirmed cases by state and gender.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the Mexican data.\n\n    """"""\n\n    # Only take into account confirmed cases.\n    df = df[df[""RESULTADO""] == ""Positivo SARS-CoV-2""]\n\n    # We will use this value to calculate the percentages.\n    total_cases = len(df)\n\n    # We pivot the table, we will use the gender as our columns and the state as our index.\n    pivoted_df = df.pivot_table(\n        index=""ENTIDAD_RES"", columns=""SEXO"", aggfunc=""count"")\n\n    # From this MultiIndex DataFrame we will add two columns to the age column.\n    # These columns will have the total percentage by state and gender.\n    pivoted_df[""EDAD"", ""female_percentage""] = np.round(\n        pivoted_df[""EDAD"", ""MUJER""] / total_cases * 100, 2)\n\n    pivoted_df[""EDAD"", ""male_percentage""] = np.round(\n        pivoted_df[""EDAD"", ""HOMBRE""] / total_cases * 100, 2)\n\n    # We rename the columns so they are human readable.\n    pivoted_df.rename(columns={""HOMBRE"": ""Male"",\n                               ""MUJER"": ""Female"",\n                               ""male_percentage"": ""Male %"",\n                               ""female_percentage"": ""Female %""}, level=1, inplace=True)\n\n    print(pivoted_df[""EDAD""].to_markdown())\n\n\ndef plot_daily_symptoms_growth(df):\n    """"""Plots the daily initial symptoms growth and daily counts.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the Mexican data.\n\n    """"""\n\n    # Only take into account confirmed cases.\n    df = df[df[""RESULTADO""] == ""Positivo SARS-CoV-2""]\n\n    # We group our DataFrame by day of initial symptoms and aggregate them by number of ocurrences.\n    grouped_df = df.groupby(""FECHA_SINTOMAS"").count()\n\n    # Convert the index to datetime.\n    grouped_df.index = pd.to_datetime(grouped_df.index)\n\n    # We add a new column that will hold the cumulative sum of the previous counts.\n    grouped_df[""cumsum""] = grouped_df[""SECTOR""].cumsum()\n\n    # We create a basic line plot with the previously created column.\n    fig, (ax1, ax2) = plt.subplots(2)\n\n    ax1.plot(grouped_df.index, grouped_df[""cumsum""],\n             label=""Initial Symptoms Growth"", color=""lime"")\n\n    ax2.plot(grouped_df.index, grouped_df[""SECTOR""],\n             label=""Initial Symptoms Counts"", color=""gold"")\n\n    # Ticker customizations. The y-axis will be formatted with month and day.\n    ax1.xaxis.set_major_locator(ticker.MaxNLocator(15))\n    ax1.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax1.yaxis.set_major_locator(ticker.MaxNLocator(10))\n    ax1.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    ax2.xaxis.set_major_locator(ticker.MaxNLocator(15))\n    ax2.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax2.yaxis.set_major_locator(ticker.MaxNLocator(10))\n    ax2.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    ax1.grid(linewidth=0.5)\n    ax1.legend(loc=2)\n    ax1.set_title(""Initial Symptoms Growth & Daily Counts"", pad=15)\n    ax1.set_ylabel(""COVID-19 Positive Tests"", labelpad=15)\n\n    ax2.grid(linewidth=0.5)\n    ax2.legend(loc=2)\n    ax2.set_ylabel(""COVID-19 Positive Tests"", labelpad=15)\n\n    plt.savefig(""mexico_symptoms_growth.png"", facecolor=""#232b2b"")\n\n\ndef plot_daily_deaths_growth(df):\n    """"""Plots the deaths growth and daily counts.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the Mexican data.\n\n    """"""\n\n    # Only take into account confirmed cases and deaths.\n    df = df[(df[""RESULTADO""] == ""Positivo SARS-CoV-2"")\n            & (df[""FECHA_DEF""] != ""9999-99-99"")]\n\n    # We group our DataFrame by day of initial symptoms and aggregate them by number of ocurrences.\n    grouped_df = df.groupby(""FECHA_DEF"").count()\n\n    # Convert the index to datetime.\n    grouped_df.index = pd.to_datetime(grouped_df.index)\n\n    # We add a new column that will hold the cumulative sum of the previous counts.\n    grouped_df[""cumsum""] = grouped_df[""SECTOR""].cumsum()\n\n    # We create a basic line plot with the previously created column.\n    fig, (ax1, ax2) = plt.subplots(2)\n\n    ax1.plot(grouped_df.index, grouped_df[""cumsum""],\n             label=""Deaths Growth"", color=""lime"")\n\n    ax2.plot(grouped_df.index, grouped_df[""SECTOR""],\n             label=""Deaths Counts"", color=""gold"")\n\n    # Ticker customizations. The y-axis will be formatted with month and day.\n    ax1.xaxis.set_major_locator(ticker.MaxNLocator(15))\n    ax1.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax1.yaxis.set_major_locator(ticker.MaxNLocator(10))\n    ax1.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    ax2.xaxis.set_major_locator(ticker.MaxNLocator(15))\n    ax2.xaxis.set_major_formatter(mdates.DateFormatter(""%m-%d""))\n    ax2.yaxis.set_major_locator(ticker.MaxNLocator(10))\n    ax2.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    ax1.grid(linewidth=0.5)\n    ax1.legend(loc=2)\n    ax1.set_title(""Deaths Growth & Daily Counts"", pad=15)\n    ax1.set_ylabel(""COVID-19 Deaths"", labelpad=15)\n\n    ax2.grid(linewidth=0.5)\n    ax2.legend(loc=2)\n    ax2.set_ylabel(""COVID-19 Deaths"", labelpad=15)\n\n    plt.savefig(""mexico_deaths_growth.png"", facecolor=""#232b2b"")\n\n\ndef plot_test_results(df):\n    """"""Plots the tests results by day.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the Mexican data.\n\n    """"""\n\n    # The RESULTADO column has 3 possible values. We create\n    # one column for each one.\n    df[""tests""] = 1\n\n    df[""positive""] = df[""RESULTADO""].apply(\n        lambda x: 1 if x == ""Positivo SARS-CoV-2"" else 0)\n\n    df[""not_positive""] = df[""RESULTADO""].apply(\n        lambda x: 1 if x == ""No positivo SARS-CoV-2"" else 0)\n\n    df[""pending""] = df[""RESULTADO""].apply(\n        lambda x: 1 if x == ""Resultado pendiente"" else 0)\n\n    # We group the DataFrame by the date of entry and aggregate them by sum.\n    df = df.groupby(""FECHA_INGRESO"").sum()\n\n    # Convert the index to datetime.\n    df.index = pd.to_datetime(df.index)\n\n    # These percentages will be used for the plots labels.\n    total = df[""tests""].sum()\n    positive = round(df[""positive""].sum() / total * 100, 2)\n    not_positive = round(df[""not_positive""].sum() / total * 100, 2)\n    pending = round(df[""pending""].sum() / total * 100, 2)\n\n    # We create a vertical bar plot with the previously created columns.\n    fix, ax = plt.subplots()\n\n    ax.bar(df.index, df[""positive""], color=""#ef6c00"",\n           label=f""SARS-CoV-2 Positive ({positive}%)"", linewidth=0)\n\n    ax.bar(df.index, df[""not_positive""], color=""#42a5f5"",\n           label=f""SARS-CoV-2 Not Positive ({not_positive}%)"", bottom=df[""positive""] + df[""pending""], linewidth=0)\n\n    ax.bar(df.index, df[""pending""], color=""#ffca28"",\n           label=f""Pending Result ({pending}%)"", bottom=df[""positive""], linewidth=0)\n\n    # Ticker customtzations.\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(15))\n    ax.xaxis.set_major_formatter(mdates.DateFormatter(""%d-%m""))\n    ax.yaxis.set_major_locator(ticker.MaxNLocator(12))\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    plt.title(""COVID-19 Test Results"", pad=15)\n    plt.legend(loc=2)\n    plt.grid(linewidth=0.5)\n    plt.ylabel(""Number of Daily Results"", labelpad=15)\n    plt.xlabel(""2020"", labelpad=15)\n\n    plt.savefig(""mexico_tests.png"", facecolor=""#232b2b"")\n\n\ndef plot_age_groups(df):\n    """"""Plots the age groups by gender.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        A DataFrame containing the Mexican data.\n\n    """"""\n\n    # Only take into account confirmed cases.\n    df = df[df[""RESULTADO""] == ""Positivo SARS-CoV-2""]\n\n    # Create one DataFrame for each gender.\n    male_df = df[df[""SEXO""] == ""HOMBRE""]\n    female_df = df[df[""SEXO""] == ""MUJER""]\n\n    # These lists will be used for our bins.\n    age_groups = list()\n    labels = list()\n\n    for i in range(0, 100, 10):\n\n        # Our latest bin will be for ages >= 90.\n        if i == 90:\n            age_groups.append((i, i+30))\n            labels.append(""\xe2\x89\xa5 90"")\n        else:\n            age_groups.append((i, i+9))\n            labels.append(""{}-{}"".format(i, i+9))\n\n    # We use the previous tuples to build our indexer and slice our DataFrames with it.\n    male_values = list()\n    female_values = list()\n\n    for start, end in age_groups:\n        \n        male_values.append(\n            male_df[male_df[""EDAD""].between(start, end)][""EDAD""].count())\n\n        female_values.append(\n            female_df[female_df[""EDAD""].between(start, end)][""EDAD""].count())\n\n    fig, ax = plt.subplots()\n\n    bars = ax.bar(\n        [i - 0.225 for i in range(len(labels))], height=male_values,  width=0.45,  color=""#1565c0"", linewidth=0)\n\n    # This loop creates small texts with the absolute values above each bar (first set of bars).\n    for bar in bars:\n        height = bar.get_height()\n\n        plt.text(bar.get_x() + bar.get_width()/2.0, height * 1.01,\n                 ""{:,}"".format(height), ha=""center"", va=""bottom"")\n\n    bars2 = ax.bar(\n        [i + 0.225 for i in range(len(labels))], height=female_values,  width=0.45,  color=""#f06292"", linewidth=0)\n\n    # This loop creates small texts with the absolute values above each bar (second set of bars).\n    for bar2 in bars2:\n        height2 = bar2.get_height()\n\n        plt.text(bar2.get_x() + bar2.get_width()/2.0, height2 * 1.01,\n                 ""{:,}"".format(height2), ha=""center"", va=""bottom"")\n\n    # Ticker customizations.\n    ax.yaxis.set_major_locator(ticker.MaxNLocator())\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(""{x:,.0f}""))\n\n    # Add final customizations.\n    plt.grid(linewidth=0.5)\n    plt.legend([""Male"", ""Female""], loc=2)\n    plt.xticks(range(len(labels)), labels)\n    plt.title(""Age and Sex Distribution"", pad=15)\n    plt.xlabel(""Age Range"", labelpad=15)\n    plt.ylabel(""Confirmed Cases"", labelpad=15)\n\n    plt.savefig(""mexico_age_sex.png"", facecolor=""#232b2b"")\n\n\nif __name__ == ""__main__"":\n\n    main_df = pd.read_csv(""mx_data.csv"")\n\n    # get_confirmed_by_state(main_df)\n    # plot_daily_symptoms_growth(main_df)\n    # plot_daily_deaths_growth(main_df)\n    # plot_test_results(main_df)\n    # plot_age_groups(main_df)\n'"
