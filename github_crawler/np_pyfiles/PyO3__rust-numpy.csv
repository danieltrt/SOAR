file_path,api_count,code
examples/linalg/setup.py,0,"b""from setuptools import find_packages, setup\nfrom setuptools_rust import RustExtension\n\n\nsetup_requires = ['setuptools-rust>=0.10.2']\ninstall_requires = ['numpy']\ntest_requires = install_requires + ['pytest']\n\nsetup(\n    name='rust_linalg',\n    version='0.1.0',\n    description='Example of python extension with ndarray-linalg',\n    rust_extensions=[RustExtension(\n        'rust_linalg.rust_linalg',\n        './Cargo.toml',\n    )],\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    test_requires=test_requires,\n    packages=find_packages(),\n    zip_safe=False,\n)\n"""
examples/simple-extension/setup.py,0,"b""from setuptools import find_packages, setup\nfrom setuptools_rust import RustExtension\n\n\nsetup_requires = ['setuptools-rust>=0.10.2']\ninstall_requires = ['numpy']\ntest_requires = install_requires + ['pytest']\n\nsetup(\n    name='rust_ext',\n    version='0.1.0',\n    description='Example of python-extension using rust-numpy',\n    rust_extensions=[RustExtension(\n        'rust_ext.rust_ext',\n        './Cargo.toml',\n    )],\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    test_requires=test_requires,\n    packages=find_packages(),\n    zip_safe=False,\n)\n"""
examples/linalg/rust_linalg/__init__.py,0,b'from .rust_linalg import *  # noqa\n'
examples/linalg/tests/test_linalg.py,3,"b'import numpy as np\nimport rust_linalg\n\n\ndef test_inv():\n    x = np.array([\n        [1, 0],\n        [0, 2],\n    ], dtype=np.float64)\n    y = rust_linalg.inv(x)\n    np.testing.assert_array_almost_equal(y, np.linalg.inv(x))\n'"
examples/simple-extension/rust_ext/__init__.py,0,b'from .rust_ext import *  # noqa\n'
examples/simple-extension/tests/test_ext.py,8,"b'import numpy as np\nfrom rust_ext import axpy, mult\n\n\ndef test_axpy():\n    x = np.array([1.0, 2.0, 3.0])\n    y = np.array([3.0, 3.0, 3.0])\n    z = axpy(3.0, x, y)\n    np.testing.assert_array_almost_equal(z, np.array([6.0, 9.0, 12.0]))\n    x = np.array([1.0, 2.0, 3.0, 4.0])\n    y = np.array([3.0, 3.0, 3.0, 3.0])\n    z = axpy(3.0, x, y)\n    np.testing.assert_array_almost_equal(z, np.array([6.0, 9.0, 12.0, 15.0]))\n\n\ndef test_mult():\n    x = np.array([1.0, 2.0, 3.0])\n    mult(3.0, x)\n    np.testing.assert_array_almost_equal(x, np.array([3.0, 6.0, 9.0]))\n'"
