file_path,api_count,code
lib.py,0,"b'import csv\n\n\ndef mk_data_var(variant):\n    col_store = []\n\n    col_store.append(read_column_from_csv(0 + (variant - 1) * 5, \'data/6problem.csv\', type=\'r\', pop=False))\n    col_store.append(read_column_from_csv(1 + (variant - 1) * 5, \'data/6problem.csv\', type=\'r\', pop=False))\n    col_store.append(read_column_from_csv(2 + (variant - 1) * 5, \'data/6problem.csv\', type=\'r\', pop=False))\n    col_store.append(read_column_from_csv(3 + (variant - 1) * 5, \'data/6problem.csv\', type=\'r\', pop=False))\n    col_store.append(read_column_from_csv(4 + (variant - 1) * 5, \'data/6problem.csv\', type=\'r\', pop=False))\n\n    res = \'\'\n    for i in range(len(col_store[0])):\n        st = \'\'\n        for y in range(5):\n            st += col_store[y][i]\n\n        if len(st) >= 4:\n            for y in range(4):\n                res += col_store[y][i] + \',\'\n\n            res += col_store[4][i] + \'\\n\'\n\n    write_file(\'data/6problem_{}.csv\'.format(variant), res)\n\n\ndef write_file(filename, text):\n    with open(filename, \'w\') as f:\n        f.write(text)\n\n\ndef read_column_from_csv(column_number, file, type=\'f\', pop=True):\n    column_array = []\n    # read file\n    with open(file) as f:\n        reader = csv.reader(f)\n\n        column_array = [row[column_number] for row in reader]\n\n        # pop string element like \'x2_1\'\n        if pop:\n            column_array.pop(0)\n\n        while column_array[len(column_array) - 1] == \'\':\n            column_array.pop(len(column_array) - 1)\n\n\n        # make values float\n        if type == \'f\':\n            column_array = list(map(lambda x: float(x), column_array))\n        # make values int\n        if type == \'i\':\n            column_array = list(map(lambda x: int(x), column_array))\n\n    return column_array\n\n\ndef avg(array):\n    """"""\n    :param array: \xd0\x9c\xd0\xb0\xd1\x81\xd1\x81\xd0\xb8\xd0\xb2 \xd1\x81 \xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbc\xd0\xb8\n    :return: \xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd0\xbd\xd0\xb5\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n    """"""\n    return sum(array) / len(array)\n\n\ndef pearson(x, y):\n    """"""\n    \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xb4\xd1\x81\xd1\x87\xd1\x91\xd1\x82\xd0\xb0 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd1\x82\xd0\xb0 \xd0\xbf\xd0\xb8\xd1\x80\xd1\x81\xd0\xbe\xd0\xbd\xd0\xb0\n\n    \xd0\x90\xd0\xbd\xd0\xb0\xd0\xbb\xd0\xbe\xd0\xb3:\n        scipy.stats.pearsonr(x, y)[0] <---->  pearson(x, y)\n\n    \xd0\x9f\xd0\xbe\xd0\xb4\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbd\xd0\xb5\xd0\xb5:\n        http://www.machinelearning.ru/wiki/index.php?title=%D0%9A%D0%BE%D1%8D%D1%84%D1%84%D0%B8%D1%86%D0%B8%D0%B5%D0%BD%D1%82_%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%B8_%D0%9F%D0%B8%D1%80%D1%81%D0%BE%D0%BD%D0%B0\n\n    :param x: \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd0\xb0\xd1\x8f \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0\n    :param y: \xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0\xd1\x8f \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0\n    :return: \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82 \xd0\xbf\xd0\xb8\xd1\x80\xd1\x81\xd0\xbe\xd0\xbd\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x87\xd0\xb8\xd0\xbd\n    """"""\n\n    cov_X_Y = covariation(x, y)\n    disp_X = vdcv(x)\n    disp_Y = vdcv(y)\n\n    return cov_X_Y / (disp_X * disp_Y) ** (1 / 2)\n\n\ndef vdcv(arr):\n    """"""\n    \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xb4\xd1\x81\xd1\x87\xd1\x91\xd1\x82\xd0\xb0 \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xbe\xd1\x87\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb4\xd0\xb8\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xb8\xd0\xb8\n\n\n    \xd0\x90\xd0\xbd\xd0\xb0\xd0\xbb\xd0\xbe\xd0\xb3:\n        numpy.cov(x,y)[0,0] <---> vdcv(x)\n        numpy.cov(x,y)[1,1] <---> vdcv(y)\n\n\n    \xd0\x9f\xd0\xbe\xd0\xb4\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbd\xd0\xb5\xd0\xb5:\n        https://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%B1%D0%BE%D1%80%D0%BE%D1%87%D0%BD%D0%B0%D1%8F_%D0%B4%D0%B8%D1%81%D0%BF%D0%B5%D1%80%D1%81%D0%B8%D1%8F\n\n    :param arr: \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0(\xd0\xb2 \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb5 \xd0\xbc\xd0\xb0\xd1\x81\xd1\x81\xd0\xb8\xd0\xb2\xd0\xb0)\n    :return: \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xbe\xd1\x87\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb4\xd0\xb8\xd1\x81\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xb8\xd1\x8f\n    """"""\n    avg_arr = avg(arr)\n    sum_of_elems = 0.\n    for i in range(len(arr)):\n        sum_of_elems += (arr[i] - avg_arr) ** 2\n    return sum_of_elems / len(arr)\n\n\ndef covariation(fst, sec):\n    """"""\n    \xd0\xa4\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbf\xd0\xbe\xd0\xb4\xd1\x81\xd1\x87\xd1\x91\xd1\x82\xd0\xb0 \xd0\xba\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd1\x86\xd0\xb8\xd0\xb8 \n\n    \xd0\x90\xd0\xbd\xd0\xb0\xd0\xbb\xd0\xbe\xd0\xb3:\n        numpy.cov(x,y)[0,1] <-----> covariation(x, y)\n\n    \xd0\x9f\xd0\xbe\xd0\xb4\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbd\xd0\xb5\xd0\xb5:\n        https://en.wikipedia.org/wiki/Covariance\n\n    :param fst: \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd0\xb0\xd1\x8f \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0\n    :param sec: \xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0\xd1\x8f \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0\n    :return: \xd0\xba\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x87\xd0\xb8\xd0\xbd\n    """"""\n    avg_fst = avg(fst)\n    avg_sec = avg(sec)\n\n    sum = 0.\n    for i in range(len(fst)):\n        sum += ((fst[i] - avg_fst) * (sec[i] - avg_sec))\n    return sum / len(fst)\n\n\ndef rank(arr, val):\n    """"""\n    Function that return rank of element in array\n    :param arr: array of tuples\n    :param val: element\n    :return: rank of element\n    """"""\n    position = 1\n    for elem in arr:\n        if elem[1] == val:\n            break\n        position += 1\n    return position\n\n\ndef spearman(x, y):\n    """"""\n    Function that calculate Spearman coefficient for given X and Y arrays\n\n    Alternatives:\n        scipy.stats.spearmanr(x, y)[0] <----> spearman(x,y)\n\n    Useful link:\n        https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient\n\n    :param x: X array\n    :param y: Y array\n    :return: Spearman coefficient for given X and Y arrays\n    """"""\n    pair_arr = []\n    for i in range(len(x)):\n        # append the tuple\n        pair_arr.append((x[i], y[i]))\n\n    # sort by first param\n    pair_arr = sorted(pair_arr, key=lambda pair: pair[0])\n\n    # sort by second param\n    sorted_y_arr = sorted(pair_arr, key=lambda pair: pair[1])\n\n    # replace first with its rank\n\n    rank_Y_arr = []\n    for pair in pair_arr:\n        rank_Y_arr.append(rank(sorted_y_arr, pair[1]))\n\n    sum_of_d = 0.\n    for i in range(1, 51):\n        sum_of_d += (i - rank_Y_arr[i - 1]) ** 2\n\n    return 1 - 6 * sum_of_d / (50 * (50 ** 2 - 1))\n\n\ndef ess(y_arr, y_arr_explained):\n    """"""\n    :param y_arr: input array\n    :param y_arr_explained: input array explained\n    :return: Explained sum of squares\n    """"""\n    mean_y = sum(y_arr) / len(y_arr)\n\n    return sum([(y_arr_explained[i] - mean_y) ** 2 for i in range(len(y_arr))])\n\n\ndef rss(y_arr, y_arr_explained):\n    """"""\n    :param y_arr: array\n    :return: Residual sum of squares\n    """"""\n\n    return sum([(y_arr_explained[i] - y_arr[i]) ** 2 for i in range(len(y_arr))])\n'"
problem1.py,1,"b'import numpy as np\nfrom scipy.stats import rv_continuous\n\n\nclass customDist(rv_continuous):\n    """"""""\n    Distribution F(x)=1-exp(-exp(0.1x)\n    """"""\n    #TODO \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8f\xd1\x82\xd1\x8c \xd1\x82\xd1\x83\xd1\x82 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xb2\xd0\xbe\xd1\x91 \xd1\x80\xd0\xb0\xd1\x81\xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n    def _cdf(self, x, *args):\n        return 1 - np.exp(-np.exp(x / 10.))\n\n\nd = customDist()\n\n\n#\xd0\x93\xd0\xb5\xd0\xbd\xd0\xb5\xd1\x80\xd0\xb8\xd1\x80\xd1\x83\xd0\xb5\xd0\xbc \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd1\x83 \xd0\xb8\xd0\xb7 100 \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x87\xd0\xb8\nsample = d.rvs(size=100)\n\nimport matplotlib.pyplot as m\n\nf = m.figure()\nm.hist(sample, bins=10)\nm.title(""Distribution F(x)=1-exp(-exp(0.1x)) 100xValues"")\nm.xlabel(""Value"")\nm.ylabel(""Count of times"")\nm.grid(True)\n\n#\xd0\x93\xd0\xb5\xd0\xbd\xd0\xb5\xd1\x80\xd0\xb8\xd1\x80\xd1\x83\xd0\xb5\xd0\xbc \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd1\x83 \xd0\xb8\xd0\xb7 1000 \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\nsample = d.rvs(size=1000)\n\nf = m.figure()\nm.hist(sample, bins=10)\nm.title(""Distribution F(x)=1-exp(-exp(0.1x)) 1000xValues"")\nm.xlabel(""Value"")\nm.ylabel(""Count of times"")\nm.grid(True)\n\n#\xd0\x93\xd0\xb5\xd0\xbd\xd0\xb5\xd1\x80\xd0\xb8\xd1\x80\xd1\x83\xd0\xb5\xd0\xbc \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd1\x83 \xd0\xb8\xd0\xb7 1000 \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x87\xd0\xb8\xd0\xbd\n#\xd0\xb3\xd0\xb4\xd0\xb5 \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xb0\xd1\x8f \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0 \xd1\x8f\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd0\xbe\xd0\xb9 30 \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x87\xd0\xb8\xd0\xbd \xd0\xb8\xd0\xb7 \xd0\xb8\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd0\xb8\nsample = [sum(d.rvs(size=30)) for i in range(1000)]\n\nf = m.figure()\nm.hist(sample, bins=10)\nm.title(""Distribution Yi=SUM j=1...30 Xij i=1...30 1000xValues"")\nm.xlabel(""Value"")\nm.ylabel(""Count of times"")\nm.grid(True)\n\nm.show()\n'"
problem2.py,0,"b'import numpy.random as l\nimport numpy as n\nimport matplotlib.pyplot as p\n\nmean = 3\nsigma = 1\ncount_of_elements = 8\n# \xd0\xba\xd0\xb2\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb8\xd0\xbb\xd1\x8c \xd1\x83\xd1\x80\xd0\xbe\xd0\xb2\xd0\xbd\xd1\x8f P (X<x)=0.4750  \xd0\xb4\xd0\xbb\xd1\x8f N(0,1)\n# TODO \xd1\x8d\xd1\x82\xd0\xbe \xd0\xbd\xd1\x83\xd0\xb6\xd0\xbd\xd0\xbe \xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xb4\xd0\xbb\xd1\x8f 1 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb0, \xd0\xbc\xd0\xb1 \xd0\xb2\xd0\xb0\xd0\xbc \xd0\xbd\xd1\x83\xd0\xb6\xd0\xbd\xd0\xbe \xd1\x82\xd1\x83\xd1\x82 \xd1\x87\xd1\x82\xd0\xbe-\xd1\x82\xd0\xbe \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8f\xd1\x82\xd1\x8c\ncvantil0025gaussian = 1.96\n\n\ndef test(m=mean, c=count_of_elements):\n    global h_one_true, h_two_true\n    # of course sum is 10000\n    h_one_true = 0\n    h_two_true = 0\n    for i in range(10000):\n        # TODO \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8f\xd1\x82\xd1\x8c \xd1\x82\xd1\x83\xd1\x82 \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xb2\xd0\xbe\xd1\x91 \xd1\x80\xd0\xb0\xd1\x81\xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n        array_of_elements_from_distribution = l.normal(m, sigma, c)\n        average = sum(array_of_elements_from_distribution) / c\n        right = average + (cvantil0025gaussian * sigma / n.sqrt(c))\n        left = average - (cvantil0025gaussian * sigma / n.sqrt(c))\n        if left < mean < right:\n            h_one_true += 1\n        else:\n            h_two_true += 1\n    return h_one_true, h_two_true\n\n\ntest()\n\nprint(""result is :\\n""\n      ""hypnosis than mean is 3 was true {0} times\\n""\n      ""hypnosis than mean isn\'t 3 was true {1} times\\n""\n      ""\xd0\xbe\xd1\x86\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb0 \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0 {2} ""\n      .format(h_one_true, h_two_true, h_two_true / 10000)\n      )\n""""""\nresult is :\nhypnosis than mean is 3 was true 9454 times\nhypnosis than mean isn\'t 3 was true 546 times\n\xd0\xbe\xd1\x86\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb0 \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x80\xd0\xbe\xd0\xb4\xd0\xb0 0.0546\n""""""\n\ncounter = 1\narray_of_points = []\narray_of_counters = []\nfor i in range(9):\n    test(counter)\n    array_of_points.append(h_two_true / 10000)\n    array_of_counters.append(counter)\n    counter += 0.5\n\np.plot(array_of_counters, array_of_points,\n       linewidth=3,\n       color=\'r\')\n\ncounter = 1\narray_of_points = []\narray_of_counters = []\nfor i in range(9):\n    test(counter, 50)\n    array_of_points.append(h_two_true / 10000)\n    array_of_counters.append(counter)\n    counter += 0.5\n\np.plot(array_of_counters, array_of_points,\n       linewidth=3,\n       color=\'g\')\n\np.xlabel(""\xd0\x9c\xd0\xb0\xd1\x82 \xd0\xbe\xd0\xb6\xd0\xb8\xd0\xb4\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb3\xd0\xb5\xd0\xbd\xd0\xb5\xd1\x80\xd0\xb8\xd1\x80\xd1\x83\xd0\xb5\xd0\xbc\xd0\xbe\xd0\xb9 \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd0\xb8(\xd0\xbd\xd0\xb0\xd1\x81\xd1\x82\xd0\xbe\xd1\x8f\xd1\x89\xd0\xb5\xd0\xb5)"")\np.ylabel(""\xd0\x92\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbe\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xbd\xd1\x83\xd1\x82\xd1\x8c \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xbd\xd1\x83\xd1\x8e \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83"")\n\np.text(2.3, 0.9, ""\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd0\xb0 \xd0\xb8\xd0\xb7 50 \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2"", rotation=300, color=\'g\')\np.text(1, 0.85, ""\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd0\xb0 \xd0\xb8\xd0\xb7 8 \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2"", rotation=300, color=\'r\')\n\np.show()\n'"
problem3.py,0,"b'import matplotlib.pyplot as p\nfrom lib import pearson, spearman\n\n# TODO ALTER THIS DATA YOURS ONES\nx = [\n    -0.45, -0.93, -0.90, 0.58, 2.56, -0.84, -0.01, 0.55, 1.34, -0.21, 1.06, -0.27, 0.11, 0.02, 2.07, 1.04,\n    0.46, 1.04, -0.22, -2.18, 1.74, 0.90, 0.83, 8.86, 8.63, -0.47, 0.99, -0.86, -1.48, 1.23, 0.68, 0.87,\n    0.87, 0.27, -0.84, -0.16, 0.95, -1.73, 0.71, -1.26, 1.50, -1.57, 0.31, 0.58, -0.66, -0.18, -1.24, -0.04, 0.13, 0.52\n]\n\ny = [\n    3.91, 5.31, 4.87, 2.04, -2.43, 5.12, 2.95, 1.57, 0.30, 3.29, -0.08, 4.23, 2.15,\n    2.71, -2.66, 0.27, 1.83, 1.36, 3.52, 7.10, -0.63, 0.06, 0.46, 1.03, 1.04, 3.63,\n    1.09, 5.15, 6.28, 0.43, 0.53, 1.15, 0.68, 1.38, 4.37, 3.81, 0.66, 7.17, 0.84, 4.58, 0.05, 7.27,\n    1.67, 1.25, 5.05, 4.25, 6.41, 2.51, 2.30, 0.96\n]\n\n##############################################################\n################### PEARSON ##################################\n##############################################################\n\n\nprint(""Pearson coefficient is "" + str(pearson(x, y)))\nprint()\n\n##############################################################\n################### SPEARMAN #################################\n##############################################################\n\n\n\nprint(""Spearman coefficient is "" + str(spearman(x, y)))\nprint()\n\n##############################################################\n######### \xd0\x93\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd0\xb0 \xd0\xbe\xd0\xb1 \xd0\xbe\xd1\x82\xd1\x81\xd1\x83\xd1\x82\xd1\x81\xd1\x82\xd0\xb2\xd0\xb8\xd0\xb8 \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb2\xd1\x8f\xd0\xb7\xd0\xb8 ########\n##############################################################\n\n# Read more about this topic:\n# http://www.machinelearning.ru/wiki/index.php?title=%D0%9A%D0%BE%D1%8D%D1%84%D1%84%D0%B8%D1%86%D0%B8%D0%B5%D0%BD%D1%82_%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%B8_%D0%9F%D0%B8%D1%80%D1%81%D0%BE%D0%BD%D0%B0\n\n# T-statistics pearson coefficient\ntsta = pearson(x, y) * ((50 - 2) / (1 - pearson(x, y) ** 2)) ** (1 / 2)\nstydent_kvantil005 = 2.0106348\nprint(""t-\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd0\xba\xd0\xb8 \xd1\x80\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb0 "" + str(tsta))\nif tsta < stydent_kvantil005 and -1 * stydent_kvantil005 < tsta:\n    print(""\xd0\x93\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd0\xb0 \xd0\xbe \xd0\xbd\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xb8 \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9""\n          "" \xd1\x81\xd0\xb2\xd1\x8f\xd0\xb7\xd0\xb8 \xd0\xb8\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f \xd0\xb8\xd0\xb7 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0 \xd0\x9f\xd0\xb8\xd1\x80\xd1\x81\xd0\xbe\xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f"")\nelse:\n    print(""\xd0\x93\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd0\xb0 \xd0\xbe \xd0\xbd\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xb8 \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9""\n          "" \xd1\x81\xd0\xb2\xd1\x8f\xd0\xb7\xd0\xb8 \xd0\xb8\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f \xd0\xb8\xd0\xb7 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0 \xd0\x9f\xd0\xb8\xd1\x80\xd1\x81\xd0\xbe\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f"")\n\n# T-statistics spearman coefficient\ntsta = spearman(x, y) * ((50 - 2) / (1 - spearman(x, y) ** 2)) ** (1 / 2)\nstydent_kvantil005 = 2.0106348\nprint(""t-\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd0\xba\xd0\xb8 \xd1\x80\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb0 "" + str(tsta))\nif tsta < stydent_kvantil005 and -1 * stydent_kvantil005 < tsta:\n    print(""\xd0\x93\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd0\xb0 \xd0\xbe \xd0\xbd\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xb8 \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9""\n          "" \xd1\x81\xd0\xb2\xd1\x8f\xd0\xb7\xd0\xb8 \xd0\xb8\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f \xd0\xb8\xd0\xb7 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0 \xd0\xa1\xd0\xbf\xd0\xb8\xd1\x80\xd0\xbc\xd0\xb0\xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f"")\nelse:\n    print(""\xd0\x93\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd0\xb0 \xd0\xbe \xd0\xbd\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb8\xd0\xb8 \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9""\n          "" \xd1\x81\xd0\xb2\xd1\x8f\xd0\xb7\xd0\xb8 \xd0\xb8\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f \xd0\xb8\xd0\xb7 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0 \xd0\xa1\xd0\xbf\xd0\xb8\xd1\x80\xd0\xbc\xd0\xb0\xd0\xbd\xd0\xb0 \xd0\xbd\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f"")\n\n##############################################################\n######### \xd0\x9f\xd0\xbe\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb8\xd0\xba\xd0\xb0 #################################\n##############################################################\n\n# TODO thinking about results\np.scatter(x, y)\np.show()\n'"
problem4.py,0,"b'import numpy\nimport numpy.linalg as linal\nfrom scipy.stats import f\nfrom scipy.stats import t\nfrom lib import pearson, read_column_from_csv, ess, rss\nimport matplotlib.pyplot as plt\n\nvariation = int(input(""\xd0\x92\xd0\xb2\xd0\xb5\xd0\xb4\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xb2\xd0\xb0\xd1\x88 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82:""))\nk = 4\nn = 40\nfile_path = \'data/4problem.csv\'\n\ndef ls(var_to_calc, ridge=0, restricted=False):\n    """"""\n    :param ridge: ridge coefficient\n    :param var_to_calc: variant from 1 to 10\n    :param restricted: model with restriction or not\n    :return: array of LS(least squares) coefficients\n    """"""\n\n    x = get_x_matrix(var_to_calc, restricted)\n\n    # (X^T * X)\n    # numpy.dot is a matrix multiplication\n\n    # if ridge is none 0\n    if not restricted:\n        ar = numpy.zeros((4, 4), float)\n        numpy.fill_diagonal(ar, float(ridge))\n        x_step1 = numpy.dot(x.T, x) + ar\n    else:\n        x_step1 = numpy.dot(x.T, x)\n\n    # (X^T * X)^-1\n    x_step2 = linal.inv(x_step1)\n\n    # (X^T * X)^-1 * X^T\n    x_step3 = numpy.dot(x_step2, x.T)\n\n    # (X^T * X)^-1 * X^T * Y\n    y_1 = read_column_from_csv(column_number=3 + (var_to_calc - 1) * 4, file=file_path)\n    y_1 = numpy.array([y_1]).T\n    coefficient_vector = numpy.dot(x_step3, y_1)\n\n    return coefficient_vector.T[0]\n\n\ndef get_x_matrix(var_to_calc, restricted=False):\n    var_to_calc -= 1\n\n    x_2 = read_column_from_csv(column_number=0 + var_to_calc * 4, file=file_path)\n    x_3 = read_column_from_csv(column_number=1 + var_to_calc * 4, file=file_path)\n    x_4 = read_column_from_csv(column_number=2 + var_to_calc * 4, file=file_path)\n    y_1 = read_column_from_csv(column_number=3 + var_to_calc * 4, file=file_path)\n\n    len_of_data = len(y_1)\n\n    # vector of MSE coefficients is (X^T * X)^-1 * X^T * Y\n    # 1. make vector-column\n\n    x = numpy.ones((len_of_data, 1), dtype=float)\n\n    x_2 = numpy.array([x_2]).T\n    x_3 = numpy.array([x_3]).T\n    x_4 = numpy.array([x_4]).T\n    y_1 = numpy.array([y_1]).T\n\n    x = numpy.concatenate((x, x_2), axis=1)\n    if not restricted:\n        x = numpy.concatenate((x, x_3), axis=1)\n        x = numpy.concatenate((x, x_4), axis=1)\n    return x\n\n\ndef coefficient_variance(number_of_coefficient, y_arr, y_explained, x_matrix):\n    """"""\n    :param number_of_coefficient: number from range(n)\n    :param y_arr: input y\n    :param y_explained: y explained array\n    :param x_matrix: x matrix from docs\n    :return: variance of coefficient\n    """"""\n    variance_e_2 = rss(y_arr, y_explained) / (n - k)\n\n    # (X^T * X)^-1\n    mmatrix = linal.inv(numpy.dot(x_matrix.T, x_matrix))\n\n    v_matrix = numpy.dot(variance_e_2, mmatrix)\n\n    return v_matrix[number_of_coefficient][number_of_coefficient]\n\n\n##############################################################\n######### \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbb\xd0\xb8\xd0\xbd\xd0\xb5\xd0\xb9\xd0\xbd\xd1\x83\xd1\x8e \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c y \xd0\xbe\xd1\x82 x2, x3 \xd0\xb8 x4#######\n####### \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xbc \xd0\xbd\xd0\xb0\xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb8\xd1\x85 \xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd0\xb2 #########################\n##############################################################\n\nprint(""""""1. \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbb\xd0\xb8\xd0\xbd\xd0\xb5\xd0\xb9\xd0\xbd\xd1\x83\xd1\x8e \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c y \xd0\xbe\xd1\x82 x2, x3 \xd0\xb8 x4\n \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xbc \xd0\xbd\xd0\xb0\xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x8c\xd1\x88\xd0\xb8\xd1\x85 \xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd0\xb2"""""")\nprint()\n# LS(least squares)\n# b1 b2 b3 b4\ncoefficient_vector = ls(variation)\nprint(""\xd0\x9a\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd1\x8b b1 b2 b3 b4:"")\nprint(coefficient_vector)\nprint()\n\n##############################################################\n######## \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc ##############\n##############################################################\n\nprint(""2. \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc"")\nprint()\nx_2 = read_column_from_csv(column_number=0 + (variation - 1) * 4, file=file_path)\nx_3 = read_column_from_csv(column_number=1 + (variation - 1) * 4, file=file_path)\nx_4 = read_column_from_csv(column_number=2 + (variation - 1) * 4, file=file_path)\ny_1 = read_column_from_csv(column_number=3 + (variation - 1) * 4, file=file_path)\n\ny_estimation = [coefficient_vector[0]\n                + coefficient_vector[1] * x_2[i]\n                + coefficient_vector[2] * x_3[i]\n                + coefficient_vector[3] * x_4[i]\n                for i in range(40)]\n\ness_ur = ess(y_1, y_estimation)\nrss_ur = rss(y_1, y_estimation)\n\n# Fisher dist\nf_crit = f.ppf(0.95, k - 1, n - k)\nf_real = ess_ur / (k - 1) / (rss_ur / (n - k))\n\nprint(\'F (95%, k-1, n-4) is {}\'.format(f_crit))\nprint(\'ess / (k - 1) / (rss / (n - k)) is {}\'.format(f_real))\n\nif f_crit < f_real:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc (b1=b2=b3=b4=0)\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc (b1=b2=b3=b4=0)\')\n\nprint()\n\n##############################################################\n######## \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c  \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xbe\xd0\xb1\xd1\x8a\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd1\x8e\xd1\x89\xd0\xb8\xd1\x85##\n####### \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xbf\xd0\xbe \xd0\xbe\xd1\x82\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 ############################\n##############################################################\n\nprint(\'3. \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c  \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xbe\xd0\xb1\xd1\x8a\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd1\x8e\xd1\x89\xd0\xb8\xd1\x85 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xbf\xd0\xbe \xd0\xbe\xd1\x82\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8\')\nprint()\n\nt_critical = t.ppf(0.95, n - k)\nprint(\'\xd0\x9a\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 t(n-k)~{}\'.format(t_critical))\nprint()\n\nfor i in range(4):\n    t_val = (coefficient_vector[i] - 0) / (coefficient_variance(i, y_1, y_estimation, get_x_matrix(variation))) ** (1 / 2)\n    print(""\xd0\x93\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd0\xb0 H0: \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82 b{}=0"".format(i + 1))\n    print(\'\xd0\x9a\xd1\x80\xd0\xb8\xd1\x82\xd0\xb5\xd1\x80\xd0\xb8\xd0\xb9 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0 b{}:\\t{}\'.format(i + 1, t_val))\n    if t_critical >= t_val >= -t_critical:\n        print(\'\\t\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe b{}=0\'.format(i + 1))\n    else:\n        print(\'\\t\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc, \xd1\x87\xd1\x82\xd0\xbe b{}=0\'.format(i + 1))\n    print()\n\n##############################################################\n######## \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x81\xd0\xbe\xd0\xb2\xd0\xbc\xd0\xb5\xd1\x81\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 ##########\n####### \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 x3 \xd0\xb8 x4 #################\n##############################################################\n\nprint(\'4. \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x81\xd0\xbe\xd0\xb2\xd0\xbc\xd0\xb5\xd1\x81\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 x3 \xd0\xb8 x4\')\nprint()\n\n# it is the same model but assuming that x3 and x4 is equals to 0\n# that is what we called r(Restricted by some condition like x3 = x4 = 0)\n\ncoefficient_vector_r = ls(variation, restricted=True)\n\ny_estimation_r = [coefficient_vector_r[0]\n                  + coefficient_vector_r[1] * x_2[i]\n                  for i in range(40)]\n\nq = 2  # count of ""="" in condition\n\n# so condition is :\n#  x3=x4\n#  x3=0\n\n# RSS Restricted\nrss_r = rss(y_1, y_estimation_r)\n\nf_r_critical = f.ppf(0.95, q, n - k)\nf_r_real = (rss_r - rss_ur) / q / (rss_ur / (n - k))\n\nprint(\'F (95%, q, n-k) is {}\'.format(f_r_critical))\nprint(\'(rss_r - rss_ur) / q / (rss_ur / (n - k)) is {}\'.format(f_r_real))\n\nif f_r_critical < f_r_real:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83  \xd0\xbe \xd1\x81\xd0\xbe\xd0\xb2\xd0\xbc\xd0\xb5\xd1\x81\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 x3 \xd0\xb8 x4\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83  \xd0\xbe \xd1\x81\xd0\xbe\xd0\xb2\xd0\xbc\xd0\xb5\xd1\x81\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 x3 \xd0\xb8 x4\')\n\nprint()\n\n##############################################################\n######## \xd0\xa0\xd0\xb0\xd1\x81\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xba\xd0\xbe\xd1\x80\xd1\x80\xd0\xb5\xd0\xbb\xd1\x8f\xd1\x86\xd0\xb8\xd0\xbe\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x83 ##################\n######## \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbe\xd0\xb1\xd1\x8a\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd1\x8e\xd1\x89\xd0\xb8\xd1\x85 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 ##########################\n##############################################################\n\nprint(\'5. \xd0\xa0\xd0\xb0\xd1\x81\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xba\xd0\xbe\xd1\x80\xd1\x80\xd0\xb5\xd0\xbb\xd1\x8f\xd1\x86\xd0\xb8\xd0\xbe\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x83 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbe\xd0\xb1\xd1\x8a\xd1\x8f\xd1\x81\xd0\xbd\xd1\x8f\xd1\x8e\xd1\x89\xd0\xb8\xd1\x85 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85\')\nprint()\n\ncorr_matrix = [y_1, x_2, x_3, x_4]\nnames = [""Y"", ""X2"", ""X3"", ""X4""]\ntab = ""\\t""\nprint(tab + names[0] + tab + tab + names[1] + tab + tab + names[2] + tab + tab + names[3])\nfor i in range(4):\n    print(names[i], end=tab)\n    for j in range(4):\n        print(""%.4f"" % pearson(corr_matrix[i], corr_matrix[j]), end=tab)\n    print()\nprint()\n\n##############################################################\n######## \xd0\xa7\xd0\xb0\xd1\x81\xd1\x82\xd1\x8c 2. \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb8 \xd0\xa0\xd0\xb8\xd0\xb4\xd0\xb6\xd0\xb0 ###############################\n##############################################################\n\nprint(\'\xd0\x9f\xd0\xbe\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb8\xd0\xba \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x86\xd0\xb5\xd0\xbd\xd0\xbe\xd0\xba \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xbe\xd1\x82 \xce\xbb\')\nprint()\n\n\ndef draw_plot(sample_1, sample_2, numb):\n    plt.figure(num=""B{}"".format(numb))\n    plt.title(""Dependence of b{} from lambda"".format(numb))\n    plt.xlabel(""lambda"")\n    plt.ylabel(""b{}"".format(numb))\n    plt.plot(sample_1, sample_2)\n    plt.show()\n\n\nlmd = []\nb1 = []\nb2 = []\nb3 = []\nb4 = []\nfor i in range(21):\n    res = ls(variation, ridge=(i / 10))\n    lmd.append(i / 10)\n    b1.append(res[0])\n    b2.append(res[1])\n    b3.append(res[2])\n    b4.append(res[3])\n    print(""\xf0\x9d\x9c\x86 = "" + str(i / 10) + "";\\t"" + str(res))\n\nprint()\ndraw_plot(lmd, b1, 1)\ndraw_plot(lmd, b2, 2)\ndraw_plot(lmd, b3, 3)\ndraw_plot(lmd, b4, 4)\n'"
problem5.py,5,"b'import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport statsmodels.formula.api as smf\n\nfrom lib import read_column_from_csv\n\n\ndef draw_scatter(title, sample_1, title_1, sample_2, title_2):\n    plt.title(title)\n    plt.xlabel(title_1)\n    plt.ylabel(title_2)\n\n    plt.scatter(sample_1, sample_2)\n    plt.show()\n\n\ndef draw_histogram(title, sample, bins):\n    plt.title(title)\n    plt.hist(sample, bins=bins)\n    plt.show()\n\n""""""\n\xd0\x9d\xd0\xb5\xd0\xbc\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb5\xd0\xbe\xd1\x80\xd0\xb8\xd0\xb8:\n    \xd0\x9d\xd1\x83\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8\xd0\xb4\xd1\x83\xd0\xbc\xd0\xb0\xd1\x82\xd1\x8c \xd1\x82\xd0\xb0\xd0\xba\xd1\x83\xd1\x8e \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0\xd1\x8f \xd0\xbd\xd0\xb0\xd0\xb8\xd0\xbb\xd1\x83\xd1\x87\xd1\x88\xd0\xb8\xd0\xbc \xd0\xbe\xd0\xb1\xd1\x80\xd0\xb0\xd0\xb7\xd0\xbe\xd0\xbc \xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb5.\n    \xd0\xa3\xd0\xbd\xd0\xb8\xd0\xb2\xd0\xb5\xd1\x80\xd1\x81\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x83\xd0\xb4\xd0\xb0\xd1\x87\xd0\xbd\xd0\xbe \xd1\x8f\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f RSS(Residual sum of squares) \n    \xd0\xb8\xd0\xbb\xd0\xb8 \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd0\xb0 \xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd0\xb2 \xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xba\xd0\xbe\xd0\xb2. \xd0\xa2.\xd0\xb5. \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 RSS \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe \xd0\xbd\xd0\xb5\xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xbe\xd0\xb9 - \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd1\x82 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xbe\xd0\xb0\xd1\x8f.\n    \n\n\n\xd0\xa5\xd0\xb0\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5\xd1\x80\xd0\xb8\xd1\x80\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb8:\n    totsp \xd0\xbe\xd0\xb1\xd1\x89\xd0\xb0\xd1\x8f \xd0\xbf\xd0\xbb\xd0\xbe\xd1\x89\xd0\xb0\xd0\xb4\xd1\x8c \xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb8\xd1\x80\xd1\x8b (\xd0\xb2 \xd0\xba\xd0\xb2.\xd0\xbc);\n    price \xd1\x86\xd0\xb5\xd0\xbd\xd0\xb0 \xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb8\xd1\x80\xd1\x8b \xd0\xb2 \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xbb\xd0\xb0\xd1\x80\xd0\xb0\xd1\x85 \xd0\xa1\xd0\xa8\xd0\x90;\n    d2=1, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb8\xd1\x80\xd0\xb0 \xd0\xb4\xd0\xb2\xd1\x83\xd1\x85\xd0\xba\xd0\xbe\xd0\xbc\xd0\xbd\xd0\xb0\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f, 0 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5;\n    d3=1, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb8\xd1\x80\xd0\xb0 \xd1\x82\xd1\x80\xd1\x91\xd1\x85\xd0\xba\xd0\xbe\xd0\xbc\xd0\xbd\xd0\xb0\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f, 0 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5;\n    d4=1, \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb8\xd1\x80\xd0\xb0 \xd1\x87\xd0\xb5\xd1\x82\xd1\x8b\xd1\x80\xd1\x91\xd1\x85\xd0\xba\xd0\xbe\xd0\xbc\xd0\xbd\xd0\xb0\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f, 0 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5;\n    dist \xd1\x80\xd0\xb0\xd1\x81\xd1\x81\xd1\x82\xd0\xbe\xd1\x8f\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbe\xd1\x82 \xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0 \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd1\x8b (\xd0\xb2 \xd0\xba\xd0\xbc);\n    walk=1,  \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xb4\xd0\xbe \xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xb1\xd1\x8b\xd1\x81\xd1\x82\xd1\x80\xd0\xbe \xd0\xb4\xd0\xbe\xd0\xb9\xd1\x82\xd0\xb8 \xd0\xbf\xd0\xb5\xd1\x88\xd0\xba\xd0\xbe\xd0\xbc, 0 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5;\n    brick=1,  \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xb4\xd0\xbe\xd0\xbc \xd0\xba\xd0\xb8\xd1\x80\xd0\xbf\xd0\xb8\xd1\x87\xd0\xbd\xd1\x8b\xd0\xb9, 0 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5;\n    bal=1,  \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xba\xd0\xbe\xd0\xbd, 0 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5;\n    floor=0,  \xd0\xb5\xd1\x81\xd0\xbb\xd0\xb8 \xd1\x8d\xd1\x82\xd0\xb0\xd0\xb6 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd1\x8b\xd0\xb9 \xd0\xb8\xd0\xbb\xd0\xb8 \xd0\xbf\xd0\xbe\xd1\x81\xd0\xbb\xd0\xb5\xd0\xb4\xd0\xbd\xd0\xb8\xd0\xb9, 1 \xd0\xb8\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5.\n""""""\n\nvariation = 1\n\n# TODO \xd0\x92\xd1\x8b \xd0\xb4\xd0\xbe\xd0\xbb\xd0\xb6\xd0\xbd\xd1\x8b \xd1\x81\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x82\xd1\x8c \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb9 .csv \xd1\x84\xd0\xb0\xd0\xb9\xd0\xbb \xd0\xb8\xd0\xb7 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb8\xd1\x81\xd0\xbb\xd0\xb0\xd0\xbb \xd0\xa4\xd1\x83\xd1\x80\xd0\xbc\xd0\xb0\xd0\xbd\xd0\xbe\xd0\xb2. \xd0\x9d\xd1\x83\xd0\xb6\xd0\xbd\xd0\xbe \xd1\x83\xd0\xb4\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb8\xd0\xb7 \xd0\xbd\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8\n# \xd0\xb2 \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd1\x8b\xd1\x85 \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd1\x8b\xd0\xb5 \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd1\x8b. \xd0\x9f\xd1\x83\xd1\x81\xd1\x82\xd1\x8b\xd0\xb5 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8 \xd0\xb2 \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xbe\xd0\xbc \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd0\xbd\xd1\x8b\xd0\xb5, \xd0\xbf\xd0\xbe\xd1\x8d\xd1\x82\xd0\xbe\xd0\xbc\xd1\x83 \xd1\x83\xd0\xb4\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x82\xd0\xb5\n# \xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x82\xd0\xb5, \xd1\x87\xd1\x82\xd0\xbe \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd1\x8b\xd0\xb5 \xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe \xd0\xb2 \xd0\xb2\xd0\xb0\xd1\x88\xd0\xb5\xd0\xbc \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb5. \xd0\x9f\xd0\xbe\xd1\x81\xd0\xbb\xd0\xb5 \xd1\x8d\xd1\x82\xd0\xb8\xd1\x85 \xd0\xbe\xd0\xbf\xd0\xb5\xd1\x80\xd0\xb0\xd1\x86\xd0\xb8\xd0\xb9 \xd1\x81\xd0\xbe\xd1\x85\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xb5\xd0\xb3\xd0\xbe \xd0\xba\xd0\xb0\xd0\xba data/5problem.csv\n\nbal = read_column_from_csv(column_number=0 + (variation - 1) * 11, file=\'data/5problem.csv\')\nbrick = read_column_from_csv(column_number=1 + (variation - 1) * 11, file=\'data/5problem.csv\')\nd2 = read_column_from_csv(column_number=2 + (variation - 1) * 11, file=\'data/5problem.csv\')\nd3 = read_column_from_csv(column_number=3 + (variation - 1) * 11, file=\'data/5problem.csv\')\nd4 = read_column_from_csv(column_number=4 + (variation - 1) * 11, file=\'data/5problem.csv\')\ndist = read_column_from_csv(column_number=5 + (variation - 1) * 11, file=\'data/5problem.csv\')\nfloor = read_column_from_csv(column_number=6 + (variation - 1) * 11, file=\'data/5problem.csv\')\nprice = read_column_from_csv(column_number=7 + (variation - 1) * 11, file=\'data/5problem.csv\')\ntotsp = read_column_from_csv(column_number=8 + (variation - 1) * 11, file=\'data/5problem.csv\')\nwalk = read_column_from_csv(column_number=9 + (variation - 1) * 11, file=\'data/5problem.csv\')\n\nprint(bal)\n\ndf = pd.DataFrame({\n    ""price"": price,\n    ""walk"": walk,\n    ""totsp"": totsp,\n    ""floor"": floor,\n    ""dist"": dist,\n    ""d2"": d2,\n    ""d3"": d3,\n    ""d4"": d4,\n    ""brick"": brick,\n    ""bal"": bal\n})\nn = len(price)\n\n# about OLS - Ordinary least squares\n# In statistics, ordinary least squares (OLS) or linear least squares is a method\n# for estimating the unknown parameters in a linear regression model, with the goal\n# of minimizing the sum of the squares of the differences between the observed responses\n# (values of the variable being predicted) in the given dataset and those predicted by a\n# linear function of a set of explanatory variables. Visually this is seen as the sum of\n# the squared vertical distances between each data point in the set and the corresponding point\n# on the regression line \xe2\x80\x93 the smaller the differences, the better the model fits the data.\n# The resulting estimator can be expressed by a simple formula, especially in the case of\n# a single regressor on the right-hand side.\n# https://en.wikipedia.org/wiki/Ordinary_least_squares\n\n#TODO \xd0\x92\xd1\x8b\xd0\xb1\xd1\x80\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c\n# \xd0\x94\xd0\xbb\xd1\x8f \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xbd\xd1\x83\xd0\xb6\xd0\xbd\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd1\x8c: https://github.com/bdemeshev/epsilon/raw/master/e_001/functional-form/functional-form.pdf\n\n# \xd0\x9c\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80 1 - \xd0\x9b\xd0\xb8\xd0\xbd\xd0\xb5\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f\nlin_mod = smf.ols(formula=""price ~ totsp + dist + walk + d2 + d3 + d4 + brick + bal + floor"", data=df)\nlin_res = lin_mod.fit()\nprint(""RSS ="", sum(np.square(lin_res.resid)))\nprint(lin_res.summary())\ndraw_histogram(""Lear regression (ost)"", lin_res.resid, 100)\ndraw_scatter(""Lear regression"", lin_res.fittedvalues, ""fitted_price"", lin_res.resid, ""price - fitted_price"")\n\n\n# \xd0\x9c\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80 2 - \xd0\x9f\xd0\xbe\xd0\xbb\xd1\x83\xd0\x9b\xd0\xbe\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x84\xd0\xbc\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\nl_h_mod = smf.ols(formula=""np.log(price)~ totsp + dist + walk + d2 + d3 + d4 + brick + bal + floor"", data=df)\nl_h_res = l_h_mod.fit()\nprint(""RSS ="", sum(np.square(l_h_res.resid)))\nprint(l_h_res.summary())\ndraw_histogram(""Log_h (ost)"", l_h_res.resid, 20)\ndraw_scatter(""Log_h res"", l_h_res.fittedvalues, ""log(fitted_price)"", l_h_res.resid, ""log(price) - log(fitted_price)"")\n\n# \xd0\x9c\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80 3 - \xd0\x9b\xd0\xbe\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x84\xd0\xbc\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\nl_mod = smf.ols(formula=""np.log(price)~ np.log(totsp) + dist + walk + d2 + d3 + d4 + brick + bal + floor"", data=df)\nl_res = l_mod.fit()\nprint(""RSS ="", sum(np.square(l_res.resid)))\nprint(l_res.summary())\ndraw_histogram(""Log (ost)"", l_res.resid, 20)\ndraw_scatter(""Log res"", l_res.fittedvalues, ""log(fitted_price)"", l_res.resid, ""log(price) - log(fitted_price)"")\n\n""""""\n#TODO \xd0\x9f\xd0\xbe\xd1\x81\xd0\xbb\xd0\xb5 \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xba\xd0\xb0\xd0\xba \xd0\xb2\xd1\x8b \xd0\xbd\xd0\xb0\xd1\x88\xd0\xbb\xd0\xb8 \xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xb8\xd0\xb5 \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd1\x8b\n\n\xd0\xa0\xd0\xb0\xd1\x81\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7 \xd1\x86\xd0\xb5\xd0\xbd\xd1\x8b \xd0\xbe\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xba\xd0\xbe\xd0\xbc\xd0\xbd\xd0\xb0\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb8\xd1\x80\xd1\x8b \xd1\x81 \xd1\x83\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8 \xd1\x85\xd0\xb0\xd1\x80\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5\xd1\x80\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbc\xd0\xb8:\n    \xd0\xbf\xd0\xbb\xd0\xbe\xd1\x89\xd0\xb0\xd0\xb4\xd1\x8c 40 \xd0\xba\xd0\xb2.\xd0\xbc.,\n    \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xb1\xd0\xb0\xd0\xbb\xd0\xba\xd0\xbe\xd0\xbd\xd0\xbe\xd0\xbc,\n    \xd0\xba\xd0\xb8\xd1\x80\xd0\xbf\xd0\xb8\xd1\x87\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb4\xd0\xb5\xd0\xb2\xd1\x8f\xd1\x82\xd0\xb8\xd1\x8d\xd1\x82\xd0\xb0\xd0\xb6\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb4\xd0\xbe\xd0\xbc,\n    \xd1\x82\xd1\x80\xd0\xb5\xd1\x82\xd0\xb8\xd0\xb9 \xd1\x8d\xd1\x82\xd0\xb0\xd0\xb6,\n    \xd0\xb2 10 \xd0\xba\xd0\xbc \xd0\xbe\xd1\x82 \xd1\x86\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0 \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd1\x8b, \n    \xd1\x80\xd1\x8f\xd0\xb4\xd0\xbe\xd0\xbc \xd1\x81 \xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\xd0\xbe\n""""""'"
problem6.py,0,"b'import pandas as pd\nimport statsmodels.formula.api as smf\nimport math\nfrom lib import rss, ess\nfrom scipy.stats import f, norm, chi\nimport numpy as np\n\nfrom lib import mk_data_var, read_column_from_csv\n\n# TODO alter this to your variant\nv_number = 1\n\nmk_data_var(v_number)\n\nclass_1 = read_column_from_csv(0, \'data/6problem_{}.csv\'.format(v_number), type=\'f\')\nclass_2 = read_column_from_csv(1, \'data/6problem_{}.csv\'.format(v_number), type=\'f\')\nsex = read_column_from_csv(3, \'data/6problem_{}.csv\'.format(v_number), type=\'f\')\nsurvived = read_column_from_csv(4, \'data/6problem_{}.csv\'.format(v_number), type=\'f\')\n\ndf = pd.DataFrame({\n    ""class_1"": class_1,\n    ""class_2"": class_2,\n    ""sex"": sex,\n    ""survived"": survived\n})\n\n###################################################################################################\n###############  \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 #####################\n###############  \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b                                #####################\n###############  \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc                          #####################\n###############  \xd0\xa0\xd0\xb0\xd1\x81\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb5\xd0\xb9 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f       #####################\n###############  1.1 LOGIT                                                    #####################\n###################################################################################################\n\n\n# \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b:\nmodel_logit_1 = smf.logit(formula=""survived ~ sex + class_1 + class_2 "", data=df)\nres = model_logit_1.fit()\nprint(res.summary())\nloglikelihood_logit_1 = res.llf\n\n# \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc\n\n# \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8\ny_estimate = [1\n              if\n              math.exp(\n                  res.params[0] +\n                  res.params[1] * sex[i] +\n                  res.params[2] * class_1[i] +\n                  res.params[3] * class_2[i]) > 1\n              else 0\n\n              for i in range(len(sex))]\n\nchance_logit = [\n    math.exp(\n        res.params[0] +\n        res.params[1] * sex[i] +\n        res.params[2] * class_1[i] +\n        res.params[3] * class_2[i])\n    for i in range(len(sex))]\n\nprint(""\xd1\x88\xd0\xb0\xd0\xbd\xd1\x81 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c logit {}"".format(chance_logit))\n\ness_y = ess(survived, y_estimate)\nrss_y = rss(survived, y_estimate)\nk = 4  # \xd0\xba\xd0\xbe\xd0\xbb-\xd0\xb2\xd0\xbe \xd0\xba\xd0\xbe\xd1\x8d\xd1\x84\xd1\x84\xd0\xb8\xd1\x86\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 (\xd1\x81 \xd1\x83\xd1\x87\xd1\x91\xd1\x82\xd0\xbe\xd0\xbc \xd1\x81\xd0\xb2\xd0\xbe\xd0\xb1\xd0\xbe\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe)\nn = len(survived)  # \xd0\xbe\xd0\xb1\xd1\x8a\xd1\x91\xd0\xbc \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xba\xd0\xb8\n\nf_crit = f.ppf(0.95, k - 1, n - k)\nf_real = ess_y / (k - 1) / (rss_y / (n - k))\n\nif f_crit < f_real:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc H0:(b2=b3=b4=0)\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc H0:(b2=b3=b4=0)\')\n\n# \xd0\x92 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5, \xd0\xbf\xd0\xbe\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xb5\xd0\xbb\n# \xd1\x8f\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f RSS. \xd0\x92 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 RSS - \xd0\xba\xd0\xbe\xd0\xbb\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xbd\xd0\xb0\xd0\xb1\xd0\xbb\xd1\x8e\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb9, \xd0\xb3\xd0\xb4\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb8\xd0\xb4\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8.\nprint(\'\xd0\x9c\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c logit \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8 \xd0\xb2 {} \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x8f\xd1\x85 \xd0\xb8\xd0\xb7 {}\'.format(rss_y, n))\n\n###################################################################################################\n###############  \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 #####################\n###############  \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b                                #####################\n###############  \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc                          #####################\n###############  \xd0\xa0\xd0\xb0\xd1\x81\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb5\xd0\xb9 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f       #####################\n###############  1.2 PROBIT                                                   #####################\n###################################################################################################\n\n\n# \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b:\nmodel_probit_1 = smf.probit(formula=""survived ~ 1 + sex + class_1 + class_2"", data=df)\nres = model_probit_1.fit()\nprint(res.summary())\nloglikelihood_probit_1 = res.llf\n# \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc\n\n# \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8\ny_estimate = [1\n              if\n              norm.cdf(\n                  res.params[0] +\n                  res.params[1] * sex[i] +\n                  res.params[2] * class_1[i] +\n                  res.params[3] * class_2[i]) > 0.5\n              else 0\n\n              for i in range(len(sex))]\n\nchance_probit = [\n    norm.cdf(\n        res.params[0] +\n        res.params[1] * sex[i] +\n        res.params[2] * class_1[i] +\n        res.params[3] * class_2[i])\n    /\n    (1 - norm.cdf(\n        res.params[0] +\n        res.params[1] * sex[i] +\n        res.params[2] * class_1[i] +\n        res.params[3] * class_2[i]))\n    for i in range(len(sex))]\n\nprint(""\xd0\xa8\xd0\xb0\xd0\xbd\xd1\x81 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c probit {}"".format(chance_probit))\n\ness_y = ess(survived, y_estimate)\nrss_y = rss(survived, y_estimate)\n\nf_crit = f.ppf(0.95, k - 1, n - k)\nf_real = ess_y / (k - 1) / (rss_y / (n - k))\n\nif f_crit < f_real:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc H0:(b2=b3=b4=0)\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc H0:(b2=b3=b4=0)\')\n\n# \xd0\x92 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5, \xd0\xbf\xd0\xbe\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xb5\xd0\xbb\n# \xd1\x8f\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f RSS. \xd0\x92 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 RSS - \xd0\xba\xd0\xbe\xd0\xbb\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xbd\xd0\xb0\xd0\xb1\xd0\xbb\xd1\x8e\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb9, \xd0\xb3\xd0\xb4\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb8\xd0\xb4\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8.\nprint(\'\xd0\x9c\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c probit \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8 \xd0\xb2 {} \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x8f\xd1\x85 \xd0\xb8\xd0\xb7 {}\'.format(rss_y, n))\n\n###################################################################################################\n###############  \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 #####################\n###############  \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b                                #####################\n###############  \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc                          #####################\n###############  \xd0\xa0\xd0\xb0\xd1\x81\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb5\xd0\xb9 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f       #####################\n###############  1.3 OLS                                                      #####################\n###################################################################################################\n\n\n# \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b:\nmodel_ols_1 = smf.ols(formula=""survived ~ 1 + sex + class_1 + class_2"", data=df)\nres = model_ols_1.fit()\nprint(res.summary())\nloglikelihood_ols_1 = res.llf\n\n# \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc\n\n# \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbd\xd0\xbe\xd0\xb7 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8\ny_estimate = [1\n              if\n              res.params[0] +\n              res.params[1] * sex[i] +\n              res.params[2] * class_1[i] +\n              res.params[3] * class_2[i] > 0.5\n              else 0\n\n              for i in range(len(sex))]\nchance_ols = [res.params[0] +\n              res.params[1] * sex[i] +\n              res.params[2] * class_1[i] +\n              res.params[3] * class_2[i]\n              /\n              (1 -\n               res.params[0] +\n               res.params[1] * sex[i] +\n               res.params[2] * class_1[i] +\n               res.params[3] * class_2[i])\n              for i in range(len(sex))]\n\nprint(\'\xd1\x88\xd0\xb0\xd0\xbd\xd1\x81 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c ols {}\'.format(chance_ols))\n\ness_y = ess(survived, y_estimate)\nrss_y = rss(survived, y_estimate)\n\nf_crit = f.ppf(0.95, k - 1, n - k)\nf_real = ess_y / (k - 1) / (rss_y / (n - k))\n\nif f_crit < f_real:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc H0:(b2=b3=b4=0)\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb8 \xd1\x80\xd0\xb5\xd0\xb3\xd1\x80\xd0\xb5\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8 \xd0\xb2 \xd1\x86\xd0\xb5\xd0\xbb\xd0\xbe\xd0\xbc H0:(b2=b3=b4=0)\')\n\n# \xd0\x92 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5, \xd0\xbf\xd0\xbe\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, \xd0\xbd\xd0\xb0 \xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbc \xd0\xb4\xd0\xb5\xd0\xbb\n# \xd1\x8f\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f RSS. \xd0\x92 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 RSS - \xd0\xba\xd0\xbe\xd0\xbb\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xbd\xd0\xb0\xd0\xb1\xd0\xbb\xd1\x8e\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb9, \xd0\xb3\xd0\xb4\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb8\xd0\xb4\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8.\nprint(\'\xd0\x9c\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c ols \xd1\x80\xd0\xb0\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82\xd1\x81\xd1\x8f \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8 \xd0\xb2 {} \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x8f\xd1\x85 \xd0\xb8\xd0\xb7 {}\'.format(rss_y, n))\n\n###################################################################################################\n###############  \xd0\x92\xd0\xbe\xd0\xb7\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe, \xd0\xb2\xd0\xba\xd0\xbb\xd0\xb0\xd0\xb4 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0 \xd0\xb2 \xd1\x88\xd0\xb0\xd0\xbd\xd1\x81\xd1\x8b \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb5\xd0\xbb \xd0\xbe\xd1\x82 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0     #####################\n###############  \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 H0:b5=b6=0 \xd1\x81 \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xbe\xd1\x89\xd1\x8c\xd1\x8e \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2 \xd0\x92\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xb4\xd0\xb0        #####################\n###############  \xd0\xb8 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f                                    #####################\n###############  2.1 LOGIT                                                    #####################\n###################################################################################################\n\n\n# \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b:\nmodel_logit_2 = smf.logit(formula=""survived ~ sex + class_1 + class_2 + sex  * class_1 + sex * class_2 "", data=df)\nres = model_logit_2.fit()\nprint(res.summary())\nloglikelihood_logit_2 = res.llf\n\n# \xd1\x82\xd0\xb5\xd1\x81\xd1\x82 \xd0\xb2\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xb4\xd0\xb0\nhypotheses = \'(sex:class_1 = 0), (sex:class_2 = 0)\'\nprint(res.wald_test(hypotheses))\n# <Wald test: statistic=[[ 48.20634159]], p-value=3.4050690848332066e-11>\n\n# \xd1\x82.\xd0\xba.  48.20634159 > 3.4050690848332066e-11 \xd1\x82\xd0\xbe \xd0\xbe\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc \xd1\x87\xd1\x82\xd0\xbe H0:b4=b5=0\n\nprint(res.wald_test_terms())\n# Chi2 \xd1\x8d\xd1\x82\xd0\xbe \xd0\x9a\xd0\xa1\xd0\x98 \xd0\x9a\xd0\x92\xd0\x90\xd0\x94\xd0\xa0\xd0\x90\xd0\xa2  https://en.wikipedia.org/wiki/Chi-squared_distribution\n\n#                  chi2                  P>chi2  df constraint\n# Intercept     1.022117     0.31201739467110934              1\n# sex          54.473978  1.5751991092226142e-13              1\n# class_1      46.947935   7.289775024150576e-12              1\n# class_2      33.212807   8.260467771755613e-09              1\n# sex:class_1  21.853960  2.9420881191443115e-06              1\n# sex:class_2  33.535868   6.996184344418819e-09              1\n\n# \xd0\x92 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd0\xb1\xd1\x86\xd0\xb5 \xd1\x81hi2 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd0\xba\xd1\x81\xd0\xb8-\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82 \xd0\xb0 \xd0\xb2 P>chi2 \xd0\xba\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n\n# \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\nLR = 2 * (loglikelihood_logit_2 - loglikelihood_logit_1)\nchi_crit = chi.ppf(0.95, 2)\nprint(\'\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f {}, \xd0\xba\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 chi^2(0.95,2) {}\'.format(LR, chi_crit))\n\nif chi_crit < LR:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe H0:(b4=b5=0) \xd0\xbd\xd0\xb0 \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe H0:(b4=b5=0) \xd0\xbd\xd0\xb0 \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\')\n\n###################################################################################################\n###############  \xd0\x92\xd0\xbe\xd0\xb7\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe, \xd0\xb2\xd0\xba\xd0\xbb\xd0\xb0\xd0\xb4 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0 \xd0\xb2 \xd1\x88\xd0\xb0\xd0\xbd\xd1\x81\xd1\x8b \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb5\xd0\xbb \xd0\xbe\xd1\x82 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0     #####################\n###############  \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 H0:b5=b6=0 \xd1\x81 \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xbe\xd1\x89\xd1\x8c\xd1\x8e \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2 \xd0\x92\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xb4\xd0\xb0        #####################\n###############  \xd0\xb8 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f                                    #####################\n###############  2.2 PROBIT                                                   #####################\n###################################################################################################\n\n\n# \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b:\nmodel_probit_2 = smf.probit(formula=""survived ~ sex + class_1 + class_2 + sex  * class_1 + sex * class_2 "", data=df)\nres = model_probit_2.fit()\nprint(res.summary())\nloglikelihood_probit_2 = res.llf\n\n# \xd1\x82\xd0\xb5\xd1\x81\xd1\x82 \xd0\xb2\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xb4\xd0\xb0\nhypotheses = \'(sex:class_1 = 0), (sex:class_2 = 0)\'\nprint(res.wald_test(hypotheses))\n# <Wald test: statistic=[[ 55.13369063]], p-value=1.066279833716726e-12>>\n\n# \xd1\x82.\xd0\xba.  55.13369063 > 1.066279833716726e-12 \xd1\x82\xd0\xbe \xd0\xbe\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc \xd1\x87\xd1\x82\xd0\xbe H0:b4=b5=0\n\nprint(res.wald_test_terms())\n# Chi2 \xd1\x8d\xd1\x82\xd0\xbe \xd0\x9a\xd0\xa1\xd0\x98 \xd0\x9a\xd0\x92\xd0\x90\xd0\x94\xd0\xa0\xd0\x90\xd0\xa2  https://en.wikipedia.org/wiki/Chi-squared_distribution\n\n#                  chi2                  P>chi2  df constraint\n# Intercept     1.023938      0.3115866531305128              1\n# sex          54.501637  1.5531840655491292e-13              1\n# class_1      69.370741   8.159008714992242e-17              1\n# class_2      38.070251    6.82427343485755e-10              1\n# sex:class_1  27.832553  1.3228158804184256e-07              1\n# sex:class_2  39.025231   4.183634412066243e-10              1\n\n# \xd0\x92 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd0\xb1\xd1\x86\xd0\xb5 \xd1\x81hi2 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd0\xba\xd1\x81\xd0\xb8-\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82 \xd0\xb0 \xd0\xb2 P>chi2 \xd0\xba\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n\n# \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\nLR = 2 * (loglikelihood_probit_2 - loglikelihood_probit_1)\nchi_crit = chi.ppf(0.95, 2)\nprint(\'\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f {}, \xd0\xba\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 chi^2(0.95,2) {}\'.format(LR, chi_crit))\n\nif chi_crit < LR:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe H0:(b4=b5=0) \xd0\xbd\xd0\xb0 \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe H0:(b4=b5=0) \xd0\xbd\xd0\xb0 \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\')\n\n###################################################################################################\n###############  \xd0\x92\xd0\xbe\xd0\xb7\xd0\xbc\xd0\xbe\xd0\xb6\xd0\xbd\xd0\xbe, \xd0\xb2\xd0\xba\xd0\xbb\xd0\xb0\xd0\xb4 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0 \xd0\xb2 \xd1\x88\xd0\xb0\xd0\xbd\xd1\x81\xd1\x8b \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb5\xd0\xbb \xd0\xbe\xd1\x82 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0     #####################\n###############  \xd0\x9f\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\xd1\x82\xd0\xb5 \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 H0:b5=b6=0 \xd1\x81 \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xbe\xd1\x89\xd1\x8c\xd1\x8e \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2 \xd0\x92\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xb4\xd0\xb0        #####################\n###############  \xd0\xb8 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f                                    #####################\n###############  2.3 OLS                                                      #####################\n###################################################################################################\n\n\n# \xd0\x9e\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbc\xd0\xbe\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8c \xd0\xbb\xd0\xbe\xd0\xb3\xd0\xb8\xd1\x82 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd0\xbe\xd1\x8f\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xb2\xd1\x8b\xd0\xb6\xd0\xb8\xd1\x82\xd1\x8c \xd0\xb2 \xd0\xb7\xd0\xb0\xd0\xb2\xd0\xb8\xd1\x81\xd0\xb8\xd0\xbc\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8 \xd0\xbe\xd1\x82 \xd0\xbf\xd0\xbe\xd0\xbb\xd0\xb0, \xd0\xb2\xd0\xbe\xd0\xb7\xd1\x80\xd0\xb0\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xb0 \xd0\xba\xd0\xb0\xd1\x8e\xd1\x82\xd1\x8b:\nmodel_ols_2 = smf.ols(formula=""survived ~ sex + class_1 + class_2 + sex  * class_1 + sex * class_2 "", data=df)\nres = model_ols_2.fit()\nprint(res.summary())\nloglikelihood_ols_2 = res.llf\n\n# \xd1\x82\xd0\xb5\xd1\x81\xd1\x82 \xd0\xb2\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xb4\xd0\xb0\nhypotheses = \'(sex:class_1 = 0), (sex:class_2 = 0)\'\nprint(res.wald_test(hypotheses))\n# <F test: F=array([[ 36.73040501]]), p=3.492749236908268e-16, df_denom=1135, df_num=2>\n\n# \xd1\x82.\xd0\xba.  55.13369063 > 1.066279833716726e-12 \xd1\x82\xd0\xbe \xd0\xbe\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb5\xd0\xb7\xd1\x83 \xd0\xbe \xd1\x82\xd0\xbe\xd0\xbc \xd1\x87\xd1\x82\xd0\xbe H0:b4=b5=0\n\nprint(res.wald_test_terms())\n# Chi2 \xd1\x8d\xd1\x82\xd0\xbe \xd0\x9a\xd0\xa1\xd0\x98 \xd0\x9a\xd0\x92\xd0\x90\xd0\x94\xd0\xa0\xd0\x90\xd0\xa2  https://en.wikipedia.org/wiki/Chi-squared_distribution\n\n#                      F                     P>F  df constraint  df denom\n# Intercept    245.328845  3.2942791448259563e-50              1      1135\n# sex           75.992228   9.941124463426794e-18              1      1135\n# class_1      134.550383   1.767561467219483e-29              1      1135\n# class_2       65.332138  1.6092414932833707e-15              1      1135\n# sex:class_1   36.003246   2.645946158855074e-09              1      1135\n# sex:class_2   61.225240  1.1594973691583465e-14              1      1135\n\n# \xd0\x92 \xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd0\xb1\xd1\x86\xd0\xb5 \xd1\x81hi2 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd0\xba\xd1\x81\xd0\xb8-\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82 \xd0\xb0 \xd0\xb2 P>chi2 \xd0\xba\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\n\n# \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\nLR = 2 * (loglikelihood_ols_2 - loglikelihood_ols_1)\nchi_crit = chi.ppf(0.95, 2)\nprint(\'\xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f {}, \xd0\xba\xd1\x80\xd0\xb8\xd1\x82\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xbd\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 chi^2(0.95,2) {}\'.format(LR, chi_crit))\n\nif chi_crit < LR:\n    print(\'\xd0\x9e\xd1\x82\xd0\xb2\xd0\xb5\xd1\x80\xd0\xb3\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe H0:(b4=b5=0) \xd0\xbd\xd0\xb0 \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\')\nelse:\n    print(\'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb3\xd0\xb8\xd0\xbf\xd0\xbe\xd1\x82\xd0\xb7\xd1\x83 \xd0\xbe H0:(b4=b5=0) \xd0\xbd\xd0\xb0 \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd0\xb0 \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x88\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb4\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x8f\')\n'"
problem7.py,0,"b'from math import sqrt\nfrom random import randrange\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import savefig\nfrom lib import read_column_from_csv\n\n# TODO alter this to your variant\nv_number = 1\n\n"""""" \n    \xd0\x97\xd0\x90\xd0\x94\xd0\x90\xd0\x9d\xd0\x98\xd0\x95\n    \n    \xd0\x92 \xd1\x82\xd0\xb0\xd0\xb1\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb5 \xd1\x81 \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8 \xd1\x81\xd0\xbe\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb0\xd1\x82\xd1\x81\xd1\x8f \xd0\xba\xd0\xbe\xd0\xbe\xd1\x80\xd0\xb4\xd0\xb8\xd0\xbd\xd0\xb0\xd1\x82\xd1\x8b x \xd0\xb8 y \xd1\x82\xd0\xbe\xd1\x87\xd0\xb5\xd0\xba \xd0\xbd\xd0\xb5\xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xb8\xd0\xb7\xd0\xbe\xd0\xb1\xd1\x80\xd0\xb0\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f\n    (\xd0\xb4\xd0\xb0\xd0\xb2\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb5 \xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd1\x82\xd1\x8c, \xd1\x87\xd1\x82\xd0\xbe \xd1\x8d\xd1\x82\xd0\xbe \xd0\xbe\xd0\xb1\xd1\x80\xd0\xb0\xd0\xb1\xd0\xbe\xd1\x82\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd1\x84\xd0\xbe\xd1\x82\xd0\xbe \xd1\x82\xd1\x80\xd1\x91\xd1\x85 \xd0\xbc\xd0\xbe\xd0\xbd\xd0\xb5\xd1\x82\xd0\xbe\xd0\xba \xd1\x81 \xd0\xb7\xd0\xb0\xd1\x88\xd1\x83\xd0\xbc\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5\xd0\xbc). \n    \xd0\x9f\xd1\x80\xd0\xb8\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xba \xd0\xb4\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xbc \xd0\xb2\xd0\xb0\xd1\x88\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb0 \xd0\xbc\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb4 k-\xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd0\xbd\xd0\xb8\xd1\x85, \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd1\x8f \xd1\x87\xd0\xb8\xd1\x81\xd0\xbb\xd0\xbe \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x82\xd0\xb5\xd1\x80\xd0\xbe\xd0\xb2 k = 2, 3, 4. \n    \xd0\x94\xd0\xbb\xd1\x8f \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xbe\xd0\xb3\xd0\xbe k \xd0\xb8\xd0\xb7\xd0\xbe\xd0\xb1\xd1\x80\xd0\xb0\xd0\xb7\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd1\x80\xd0\xb0\xd0\xb7\xd0\xb1\xd0\xb8\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbd\xd0\xb0 \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb8\xd0\xba\xd0\xb5, \xd0\xb2\xd1\x8b\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8f\xd1\x8f \xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x82\xd0\xb5\xd1\x80\xd1\x8b \xd1\x80\xd0\xb0\xd0\xb7\xd0\xbd\xd1\x8b\xd0\xbc\xd0\xb8 \xd1\x86\xd0\xb2\xd0\xb5\xd1\x82\xd0\xb0\xd0\xbc\xd0\xb8.\n    \xd0\x9f\xd0\xbe \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbc \xd0\xbe\xd1\x86\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x82\xd0\xb5, \xd0\xbd\xd0\xb0\xd1\x81\xd0\xba\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd1\x83\xd0\xb4\xd0\xb0\xd0\xbb\xd0\xbe\xd1\x81\xd1\x8c \xd1\x80\xd0\xb0\xd1\x81\xd0\xbf\xd0\xbe\xd0\xb7\xd0\xbd\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbe\xd0\xb1\xd1\x80\xd0\xb0\xd0\xb7\xd1\x8b \xd0\xbc\xd0\xbe\xd0\xbd\xd0\xb5\xd1\x82\xd0\xbe\xd0\xba.\n    \n    \n    \xd0\x92\xd1\x8b\xd0\xb2\xd0\xbe\xd0\xb4 \xd1\x81\xd0\xba\xd1\x80\xd0\xb8\xd0\xbf\xd1\x82\xd0\xb0 \xd0\xbc\xd0\xbe\xd0\xb6\xd0\xb5\xd1\x82\xd0\xb5 \xd0\xbd\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb8 \xd0\xb2 \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb5 \xd1\x84\xd0\xbe\xd1\x82\xd0\xbe\xd0\xba\xd0\xb3\xd0\xb0\xd1\x84\xd0\xb8\xd0\xb9 \xd0\xb2 \xd1\x82\xd0\xb5\xd0\xba\xd1\x83\xd1\x89\xd0\xb5 \xd0\xb4\xd0\xb8\xd1\x80\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe\xd1\x80\xd0\xb8\xd0\xb8\n""""""\n\n\ndef draw_plot(x, y):\n    """"""\n    method draws and saves starting plot. without clustering. \n    :param x: x data set\n    :param y: y data set\n    :param color: \n    :return: void\n    """"""\n    plt.plot(x, y, ""k."", markersize=4)\n    savefig(\'starting_image.png\')\n\n\ndef draw_clusters(clusters):\n    """"""\n    this methods draws all clusters and saves picture\n    :param clusters: \n    :return: void\n    """"""\n    clusrs = restructure_clusters(clusters)\n    colours = [\'r.\', \'k.\', \'b.\', \'g.\', \'y.\', \'c.\']\n    for i in range(len(clusrs)):\n        plt.plot(clusrs[i][0], clusrs[i][1], colours[i])\n\n    savefig(\'clusters_\' + str(len(clusters)) + \'.png\')\n\n\ndef restructure_clusters(clusters):\n    """"""\n    since clusters looks like [[(x,y)..(x,y)],..[(x,y)..(x,y)]] we need to restructure them to use in plot\n    :param clusters: \n    :return: clusters which looks like [[[x1..xn]]]\n    """"""\n    clusrs = [[] for i in range(len(clusters))]\n    for i in range(len(clusters)):\n        X = []\n        Y = []\n        for j in range(len(clusters[i])):\n            X.append(clusters[i][j][0])\n            Y.append(clusters[i][j][1])\n        clusrs[i].append(X)\n        clusrs[i].append(Y)\n    return clusrs\n\n\ndef calc_euclid(x1, y1, x2, y2):\n    """"""\n    calcs euclid distance\n    :param x1: x coordinate of point\n    :param y1: y coordinate of point\n    :param x2: x coordinate of center\n    :param y2: y coordinate of center\n    :return: euclid distance\n    """"""\n    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n\ndef get_start_centers(k, x, y):\n    """"""\n    method helps to get random points, which will be starting centers of our clusters\n    :param k: number of clusters\n    :param x: x data set\n    :param y: y data set\n    :return: list which contains k random points\n    """"""\n    chosen = set()\n    centers = []\n    for i in range(k):\n        _rand = randrange(len(x))\n        while _rand in chosen:\n            _rand = randrange(len(x))\n        chosen.add(_rand)\n        centers.append([x[_rand], y[_rand]])\n    return centers\n\n\ndef clustering(k, x, y):\n    """"""\n    clustering method\n    :param k: number of clusters\n    :param x: x data set \n    :param y: y data set\n    :return: k clusters\n    """"""\n    # clusters - list of k lists, where k - number of clusters, given by task\n    clusters = [[] for i in range(k)]  # clusters will be that way [[(x1,y1),..,(xn,yn)],...[(x1, y1), ...,(xm,ym)]].\n    centers = get_start_centers(k, x, y)  # random  POINT\n    prev_centers = centers[:]\n    is_continue = True\n\n    while is_continue:\n        clusters = [[] for i in range(k)]  # we must renew our clusters every iteration\n\n        for i in range(len(X)):\n            min_distance = float(\'inf\')  # +infinity\n            index_of_minimal = 0\n            for j in range(len(centers)):  # decide which cluster\n                euclid_distance = calc_euclid(x[i], y[i], centers[j][0], centers[j][1])\n                if euclid_distance < min_distance:\n                    min_distance = euclid_distance\n                    index_of_minimal = j\n            clusters[index_of_minimal].append((x[i], y[i]))  # append a cortege\n\n        for i in range(len(prev_centers)):\n            prev_centers[i] = list(centers[i])  # we must copy this way.\n\n        for i in range(len(centers)):  # calculating new centers\n            sx = 0\n            sy = 0\n            for j in range(len(clusters[i])):\n                sx += clusters[i][j][0]\n                sy += clusters[i][j][1]\n            if len(clusters[i]) > 0:  # situation when cluster is empty is possible\n                centers[i][0] = round(sx / len(clusters[i]), 5)\n                centers[i][1] = round(sy / len(clusters[i]), 5)\n\n        is_continue = False\n        for i in range(len(centers)):  # decide must we continue or not\n            if centers[i] not in prev_centers:\n                is_continue = True\n                break\n\n    return clusters\n\n\nX = read_column_from_csv(0 + (v_number - 1) * 2, \'data/7problem.csv\')\nY = read_column_from_csv(1 + (v_number - 1) * 2, \'data/7problem.csv\')\ndraw_plot(X, Y)\nfor k in range(2, 5):\n    clusters = clustering(k, X, Y)\n    draw_clusters(clusters)\n'"
