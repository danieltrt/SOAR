file_path,api_count,code
test/NumSharp.UnitTest/Others/ReadmeExample.py,13,"b'\xef\xbb\xbfimport numpy as np\nfrom sklearn.datasets import load_boston\nimport matplotlib.pyplot as plt\nclass LinearRegression():\n    def __init__(self, X: np.ndarray, y, alpha=0.03, n_iter=1500):\n        self.alpha = alpha\n        self.n_iter = n_iter\n        self.n_samples = len(y)\n        self.n_features = np.size(X, 1)\n        self.X = np.hstack((np.ones((self.n_samples, 1)), \n                            (X - np.mean(X, 0)) / np.std(X, 0)))\n        self.y = np.expand_dims(y, -1)\n        self.params = np.zeros((self.n_features + 1, 1))\n        self.coef_ = None\n        self.intercept_ = None\n\n\n    def fit(self):\n        for i in range(self.n_iter):\n            self.params = self.params - (self.alpha/self.n_samples) * \\\n            self.X.T @ (self.X @ self.params - self.y)\n\n\n        self.intercept_ = self.params[0]\n        self.coef_ = self.params[1:]\n\n        return self\n\n\n\n    def score(self, X=None, y=None):\n        if X is None:\n            X = self.X\n        else:\n            n_samples = np.size(X, 0)\n            X = np.hstack((np.ones((n_samples, 1)), \n                           (X - np.mean(X, 0)) / np.std(X, 0)))\n\n\n        if y is None:\n            y = self.y\n        else:\n            y = np.expand_dims(y, -1)\n\n        y_pred = X @ self.params\n        score = 1 - (((y - y_pred)**2).sum() / ((y - y.mean())**2).sum())\n\n        return score\n\n\n\n    def predict(self, X):\n        n_samples = np.size(X, 0)\n        y = np.hstack((np.ones((n_samples, 1)), (X-np.mean(X, 0)) \\\n                            / np.std(X, 0))) @ self.params\n        return y\n\n\n\n\n\n    def get_params(self):\n        return self.params\n'"
test/NumSharp.UnitTest/Utilities/ndarray-generator.py,1,"b'import math\nimport numpy as np\n\n# The asCode2D function generates NDArray declarations in C# for use in unit testing.\n# This avoids some of the tedium and errors of hand-generation.\n# For example, calling the function like this generates C# static variables named\n# \'a53\' and \'b53\' from numpy\'s mgrid:\n#   aa, bb = np.mgrid[0:5, 0:3]\n#   cSharp.asCode2D(""a53"", aa)\n#   cSharp.asCode2D(""b53"", bb)\n\n\nclass cSharp:\n    def asCode2D(varName, v):\n        if v.dtype.name == ""int32"":\n            vType = ""Int32""\n        elif v.dtype.name == ""float64"":\n            vType = ""double""\n        else:\n            vType = ""unknown""\n        print(""        static NDArray {0} = new NDArray(new {1}[] {{"".format(varName, vType))\n        valstr = """"\n        commasToPrint = v.shape[0] * v.shape[1] - 1\n        for i, row in enumerate(v):\n            rowStr = ""            ""\n            for j, item in enumerate(row):\n                rowStr = rowStr + ""{}"".format(item)\n                if commasToPrint > 0:\n                    rowStr = rowStr + "", ""\n                commasToPrint -= 1\n                #if (i < v)\n            print(rowStr)\n        print(""            }}, new Shape(new int[] {{ {}, {} }}));"".format(v.shape[0], v.shape[1]))\n        print("""")\n\n    def asCode1D(varName, v):\n        if v.dtype.name == ""int32"":\n            vType = ""Int32""\n        elif v.dtype.name == ""float64"":\n            vType = ""double""\n        else:\n            vType = ""unknown""\n        print(""        static NDArray {0} = new NDArray(new {1}[] {{"".format(varName, vType))\n        rowStr = ""            ""\n        commasToPrint = v.shape[0] - 1\n        for j, item in enumerate(v):\n            rowStr = rowStr + ""{}"".format(item)\n            if commasToPrint > 0:\n                rowStr = rowStr + "", ""\n            commasToPrint -= 1\n        print(rowStr)\n        print(""            }}, new Shape(new int[] {{ {} }}));"".format(v.shape[0]))\n        print("""")\n'"
