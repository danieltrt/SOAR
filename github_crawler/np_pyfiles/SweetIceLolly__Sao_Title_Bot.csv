file_path,api_count,code
SaoLanguageBot.py,4,"b'# -*- coding:utf-8 -*-\r\n\r\n# \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe5\x82\xa8\xe7\x89\xa9\xe4\xbb\xb6\r\nimport numpy as np\r\n\r\n# \xe7\x94\xa8\xe4\xba\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe7\x94\x9f\xe6\x88\x90\r\nimport random\r\n\r\n# \xe7\x94\xa8\xe4\xba\x8e\xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\r\nimport sys\r\n\r\n# \xe5\xbc\x80\xe5\xa4\xb4\r\nBeginningList = (""\xe5\x9f\xba\xe4\xba\x8e"", ""\xe5\x85\xb3\xe4\xba\x8e"", ""\xe6\x8e\xa2\xe7\xa9\xb6"", ""\xe4\xbf\x83\xe8\xbf\x9b"", ""\xe4\xb8\x80\xe7\xa7\x8d"", ""\xe8\xae\xa8\xe8\xae\xba"", ""\xe8\xaf\x95\xe8\xae\xba"", ""\xe8\xae\xba"", ""\xe8\xaf\x95\xe6\x8e\xa2\xe7\xa9\xb6"", ""\xe5\xbb\xba\xe5\x9f\xba\xe4\xba\x8e"", ""\xe9\x9d\xa2\xe5\x90\x91"", ""\xe8\xaf\x84\xe8\xbf\xb0"")\r\n\r\n# \xe4\xbb\x8b\xe8\xaf\x8d\r\nPrepList = (""\xe9\x87\x8c"", ""\xe4\xb8\xad"", ""\xe4\xb8\x8a"", ""\xe7\x9a\x84"", ""\xe4\xb8\x8e"", ""\xe5\x92\x8c"")\r\n\r\n# \xe5\xbd\xa2\xe5\xae\xb9\xe8\xaf\x8d\r\nAdjList = (""\xe7\x8e\xb0\xe4\xbb\xa3"", ""\xe5\xae\x8f\xe8\xa7\x82"", ""\xe5\xbe\xae\xe8\xa7\x82"", ""\xe5\xbd\x93\xe4\xbb\xa3"", ""\xe6\x96\xb0\xe6\x97\xb6\xe4\xbb\xa3"", ""\xe7\x8e\xb0\xe4\xbb\xa3\xe5\x8c\x96"", ""\xe5\x9b\xbd\xe9\x99\x85\xe5\x8c\x96"", ""\xe5\x85\x88\xe8\xbf\x9b"", ""\xe4\xba\x8c\xe5\x8d\x81\xe4\xb8\x80\xe4\xb8\x96\xe7\xba\xaa"", ""\xe4\xb8\x80\xe4\xbd\x93\xe5\x8c\x96"")\r\n\r\n# \xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\r\nIndustryList = {""\xe5\x86\x9c\xe4\xb8\x9a"":0, ""\xe7\xbb\x8f\xe6\xb5\x8e\xe5\xad\xa6"":0, ""\xe6\x8a\x80\xe6\x9c\xaf"":0, ""\xe4\xba\xa7\xe4\xb8\x9a"":0, ""\xe7\xae\xa1\xe7\x90\x86\xe5\xad\xa6"":0, ""\xe7\x89\xa9\xe7\x90\x86"":0, ""\xe5\x8c\x96\xe5\xad\xa6"":0, ""\xe5\x88\xb6\xe8\x8d\xaf"":0, ""\xe5\x8c\xbb\xe5\xad\xa6"":0, ""\xe7\x8e\xaf\xe5\xa2\x83\xe5\xad\xa6"":0, ""\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba"":0,\r\n                ""\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae"":0, ""\xe7\x94\x9f\xe7\x89\xa9\xe5\xad\xa6"":0, ""\xe6\x95\xb0\xe5\xad\xa6"":0, ""\xe8\xaf\xad\xe8\xa8\x80\xe5\xad\xa6\xe4\xb9\xa0"":0, ""\xe5\x9b\xbd\xe6\xb0\x91\xe7\xbb\x8f\xe6\xb5\x8e"":0, ""\xe6\x88\xbf\xe5\x9c\xb0\xe4\xba\xa7\xe5\xb8\x82\xe5\x9c\xba"":0, ""\xe5\x9c\x9f\xe5\x9c\xb0\xe5\x88\xa9\xe7\x94\xa8"":0, ""\xe6\x8a\x95\xe8\xb5\x84"":0, ""\xe4\xbc\x81\xe4\xb8\x9a"":0,\r\n                ""\xe7\x94\x9f\xe6\x80\x81\xe5\xad\xa6"":0, ""\xe8\x82\xa1\xe5\xb8\x82"":0, ""\xe4\xbd\x8e\xe7\xa2\xb3\xe7\xbb\x8f\xe6\xb5\x8e"":0}\r\n\r\n# \xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\r\nNounList_dict = {""\xe6\x8a\x80\xe6\x9c\xaf"":0, ""\xe6\x96\xb9\xe6\xa1\x88"":0, ""\xe5\x8a\x9f\xe8\x83\xbd"":0, ""\xe4\xba\xa7\xe5\x93\x81"":0, ""\xe6\x96\xb9\xe6\xb3\x95"":0, ""\xe5\xb7\xa5\xe8\x89\xba"":0, ""\xe6\x8e\xaa\xe6\x96\xbd"":0, ""\xe6\x8a\x80\xe8\x83\xbd"":0, ""\xe8\x83\xbd\xe5\x8a\x9b"":0, ""\xe6\xa8\xa1\xe5\x9e\x8b"":0}\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe6\x8a\x8aNounList_dict\xe5\x82\xa8\xe5\xad\x98\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\r\ndef save_noun_dict():\r\n    try:\r\n        np.save(\'NounList_dict.npy\', NounList_dict)\r\n        print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x81"")\r\n    except:\r\n        print(""\xe4\xbf\x9d\xe5\xad\x98\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n        pass\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe6\x8a\x8aIndustry_dict\xe5\x82\xa8\xe5\xad\x98\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\r\ndef save_industry_dict():\r\n    try:\r\n        np.save(\'Industry_dict.npy\', Industry_dict)\r\n        print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x81"")\r\n    except:\r\n        print(""\xe4\xbf\x9d\xe5\xad\x98\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n        pass\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe8\x8b\xb1\xe6\x96\x87\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\r\ndef get_some_letters():\r\n    rtn = """"\r\n    IsAbbr = random.randint(1, 10) < 4\r\n    if IsAbbr:                                      # \xe7\xbc\xa9\xe5\x86\x99\xef\xbc\x88\xe5\x85\xa8\xe5\xa4\xa7\xe5\x86\x99\xef\xbc\x89\r\n        for i in range(random.randint(2, 5)):\r\n            rtn += chr(random.randint(65, 90))\r\n    else:                                           # \xe9\xa9\xbc\xe5\xb3\xb0\xe5\xbc\x8f\r\n        for i in range(random.randint(1, 2)):           # \xe5\x8d\x95\xe8\xaf\x8d\xe5\x9d\x97\xe6\x95\xb0\xef\xbc\x88\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x9d\x97\xe7\x94\xb1\xe5\xa4\xa7\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x89\r\n            rtn += chr(random.randint(65, 90))              # \xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\r\n            for j in range(random.randint(2, 5)):           # \xe5\x90\x8e\xe9\x9d\xa2\xe8\xb7\x9f\xe7\x9d\x80\xe4\xb8\x80\xe5\xa0\x86\xe5\xb0\x8f\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\r\n                rtn += chr(random.randint(97, 122))\r\n    return rtn\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe4\xbb\x8esource\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\r\n# \xe5\x8f\x82\xe6\x95\xb0:   source: \xe7\x94\xa8\xe6\x9d\xa5\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\x87\xe6\x9c\xac\xe7\x9a\x84list\r\n#         possibility_of_and: \xe5\x87\xba\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xaf\x8d\xe7\x9a\x84\xe5\x87\xa0\xe7\x8e\x87 (possibility_of_and / 10)\r\n#         force_use_and: \xe5\xbc\xba\xe5\x88\xb6\xe4\xbd\xbf\xe7\x94\xa8""\xe4\xb8\x8e""\xe4\xbd\x9c\xe4\xb8\xba\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xaf\x8d\r\n# \xe8\xbf\x94\xe5\x9b\x9e:   \xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\r\ndef select_item(source, possibility_of_and = 5, force_use_and = False):\r\n    data = source[:]\r\n    index = random.randint(0, len(data) - 1)\r\n\r\n    if len(data) > 2:\r\n        if random.randint(1, 10) <= possibility_of_and:\r\n            tmp = data[index]\r\n            del data[index]\r\n            if force_use_and:\r\n                tmp += ""\xe4\xb8\x8e""\r\n            else:\r\n                if random.randint(1, 10) <= 5:          # \xe4\xb8\xa4\xe4\xb8\xaa\xe8\xaf\x8d\xe6\x8d\xa2\xe7\x9d\x80\xe6\x9d\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe8\xbf\x99\xe4\xb9\x88\xe6\x9e\xaf\xe7\x87\xa5\r\n                    tmp += ""\xe4\xb8\x8e""\r\n                else:\r\n                    tmp += ""\xe5\x8f\x8a\xe5\x85\xb6""\r\n            tmp += data[random.randint(0, len(data) - 1)]\r\n            return tmp\r\n    return data[index]\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe6\x9d\xa5\xe7\x82\xb9\xe9\xaa\x9a\xe6\xa0\x87\xe9\xa2\x98\xe5\x90\xa7\xef\xbc\x81\r\n# \xe5\x8f\x82\xe6\x95\xb0:   sao_degree: \xe9\xaa\x9a\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\xa6\xe3\x80\x82\xe4\xb8\x8d\xe8\xa6\x81\xe5\xa4\xaa\xe9\xab\x98\xef\xbc\x813\xe5\xb0\xb1\xe6\x8c\xba\xe9\xaa\x9a\xe7\x9a\x84\xe4\xba\x86\r\n#         need_letters: \xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe5\x90\x8d\xe8\xaf\x8d\xe4\xb8\xad\xe9\x97\xb4\xe5\x8a\xa0\xe5\x85\xa5\xe4\xb8\x80\xe4\xba\x9b\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d\r\n# \xe8\xbf\x94\xe5\x9b\x9e:   \xe9\xaa\x9a\xe6\xa0\x87\xe9\xa2\x98\r\ndef get_sao_sentence(need_letters = False, sao_degree = 0):\r\n    # Get a beginning\r\n    sentence = select_item(BeginningList, 0)\r\n\r\n    sentence += select_item(AdjList, 0)\r\n    if need_letters:\r\n        sentence += get_some_letters()\r\n    sentence += select_item(list(Industry_dict.keys()), 3, True)\r\n    sentence += select_item(PrepList, 0)\r\n    for i in range(sao_degree):\r\n        if need_letters:\r\n            sentence += get_some_letters()\r\n        sentence += select_item(list(NounList_dict.keys()), 0)\r\n        sentence += select_item(PrepList, 0)\r\n    \r\n    if need_letters:\r\n        sentence += get_some_letters()\r\n    sentence += select_item(list(NounList_dict.keys()), 0)\r\n    sentence += ""\xe7\x9a\x84""\r\n    sentence += select_item(list(NounList_dict.keys()), 6)\r\n\r\n    return sentence\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe6\x98\xbe\xe7\xa4\xba\xe5\xb8\xae\xe5\x8a\xa9\r\ndef show_help():\r\n    print(""\xe5\x9f\xba\xe4\xba\x8e\xe5\xbd\x93\xe5\x89\x8d\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe7\xa8\x8b\xe5\xba\x8f\xe6\x89\x80\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe8\x80\x8c\xe6\x8f\x90\xe4\xbe\x9b\xe7\x9a\x84\xe5\x8f\xaf\xe7\x94\xa8\xe4\xba\xba\xe6\x9c\xba\xe4\xba\xa4\xe4\xba\x92\xe5\x91\xbd\xe4\xbb\xa4:\\n\\n""\r\n          ""help : \xe9\x80\x9a\xe8\xbf\x87\xe5\x9f\xba\xe4\xba\x8e\xe9\x94\xae\xe7\x9b\x98\xe7\x9a\x84\xe4\xba\xba\xe6\x9c\xba\xe4\xba\x92\xe5\x8a\xa8\xe6\x96\xb9\xe5\xbc\x8f\xe6\x98\xbe\xe7\xa4\xba\xe8\xaf\xa5\xe5\x9f\xba\xe4\xba\x8e\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe5\xb8\xae\xe5\x8a\xa9\xe6\x8c\x87\xe4\xbb\xa4\\n\\n""\r\n          ""input industry/noun text : \xe5\x9f\xba\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe9\x94\xae\xe7\x9b\x98\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x8e\xe7\x94\xa8\xe6\x88\xb7\xe6\x9b\xb4\xe6\x96\xb0\xe6\x84\x8f\xe5\x90\x91(industry: \xe6\x9b\xb4\xe6\x96\xb0\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8; noun: \xe6\x9b\xb4\xe6\x96\xb0\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8)\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9c\x89\xe6\x84\x8f\xe6\x84\xbf\xe6\x96\xb0\xe5\xa2\x9e\xe7\x9a\x84\xe6\x96\x87\xe6\x9c\xac(text)\xe7\x9a\x84\xe6\x89\x8b\xe5\x8a\xa8\xe8\xaf\x8d\xe5\x85\xb8\xe8\xaf\x8d\xe5\xba\x93\xe6\x9b\xb4\xe6\x96\xb0\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe8\xb7\xb5\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: input noun \xe5\xae\x9e\xe9\xaa\x8c \xe4\xbc\x9a\xe6\x8a\x8a\xe2\x80\x9c\xe5\xae\x9e\xe9\xaa\x8c\xe2\x80\x9d\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe4\xb8\xad\\n\\n""\r\n          ""remove industry/noun text : \xe5\x9f\xba\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe9\x94\xae\xe7\x9b\x98\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x8e\xe7\x94\xa8\xe6\x88\xb7\xe6\x9b\xb4\xe6\x96\xb0\xe6\x84\x8f\xe5\x90\x91(industry: \xe6\x9b\xb4\xe6\x96\xb0\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8; noun: \xe6\x9b\xb4\xe6\x96\xb0\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8)\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9c\x89\xe6\x84\x8f\xe5\x90\x91\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84\xe6\x96\x87\xe6\x9c\xac(text)\xe7\x9a\x84\xe6\x89\x8b\xe5\x8a\xa8\xe8\xaf\x8d\xe5\x85\xb8\xe8\xaf\x8d\xe5\xba\x93\xe6\x9b\xb4\xe6\x96\xb0\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe8\xb7\xb5\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: remove industry \xe6\x95\xb0\xe5\xad\xa6 \xe4\xbc\x9a\xe6\x8a\x8a\xe2\x80\x9c\xe6\x95\xb0\xe5\xad\xa6\xe2\x80\x9d\xe4\xbb\x8e\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe4\xb8\xad\xe7\xa7\xbb\xe9\x99\xa4\\n\\n""\r\n          ""check industry/noun : \xe9\x80\x9a\xe8\xbf\x87\xe7\x8e\xb0\xe4\xbb\xa3\xe5\x8c\x96\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe9\xab\x98\xe6\x95\x88\xe8\xaf\x8d\xe5\x85\xb8\xe7\xae\x97\xe6\xb3\x95\xe5\xb9\xb6\xe5\x9f\xba\xe4\xba\x8e\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xba\xe6\x9c\xba\xe4\xba\x92\xe5\x8a\xa8\xe4\xbb\x8e\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\xb7\xe8\x83\xbd\xe5\xa4\x9f\xe6\x9f\xa5\xe7\x9c\x8b\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8(industry)\xe6\x88\x96\xe8\x80\x85\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8(noun)\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe7\x9a\x84\xe8\xbf\x87\xe7\xa8\x8b\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: check noun \xe4\xbc\x9a\xe6\x8a\x8a\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe5\xb9\xb6\xe5\x91\x8a\xe8\xaf\x89\xe7\x94\xa8\xe6\x88\xb7\xe8\xaf\x8d\xe6\x9d\xa1\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\\n\\n""\r\n          ""get [\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d(0/1)] [\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa6] : \xe8\x8e\xb7\xe5\x8f\x96\xe5\x9f\xba\xe4\xba\x8e\xe7\x8e\xb0\xe4\xbb\xa3\xe7\x94\xb5\xe8\x84\x91\xe7\xbc\x96\xe7\xa8\x8b\xe6\x8a\x80\xe6\x9c\xaf\xe5\x8f\x8a\xe5\x85\xb6\xe5\xba\x94\xe7\x94\xa8\xe5\x92\x8c\xe6\x96\xb0\xe6\x97\xb6\xe4\xbb\xa3\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe6\x8a\x80\xe6\x9c\xaf\xe7\x9a\x84\xe8\xaf\x8d\xe5\xba\x93\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8f\x8a\xe8\xaf\xad\xe8\xa8\x80\xe5\x88\x86\xe6\x9e\x90\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe8\x87\xaa\xe5\x8a\xa8\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe9\xaa\x9a\xe8\xae\xba\xe6\x96\x87\xe9\xa2\x98\xe7\x9b\xae\\n""\r\n          ""[\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d]: \xe5\x8f\xaf\xe9\x80\x89\xe7\x9a\x84\xe3\x80\x82\xe8\x87\xaa\xe5\x8a\xa8\xe5\x9c\xa8\xe5\x90\x8d\xe8\xaf\x8d\xe4\xb8\xad\xe9\x97\xb4\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9c\x8b\xe8\xb5\xb7\xe6\x9d\xa5\xe9\x9d\x9e\xe5\xb8\xb8\xe9\xab\x98\xe5\xa4\xa7\xe4\xb8\x8a\xe7\x9a\x84\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba0(\xe4\xb8\x8d\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0); [\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa6]: \xe5\x8f\xaf\xe9\x80\x89\xe7\x9a\x84\xe3\x80\x82\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe9\xa2\x98\xe7\x9b\xae\xe6\x9c\x89\xe5\xa4\x9a\xe9\xaa\x9a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba0(\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x8c\xba\xe9\xaa\x9a\xe4\xba\x86\xef\xbc\x8c\xe9\x99\xa4\xe9\x9d\x9e\xe6\x82\xa8\xe8\xa7\x89\xe5\xbe\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe9\xaa\x9a)\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: get 1 2 \xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d\xe7\x9a\x84\xe3\x80\x81\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa62\xe7\x9a\x84\xe6\xa0\x87\xe9\xa2\x98\\n\\n""\r\n          ""\xe7\xa9\xba\xe7\x99\xbd\xe8\xbe\x93\xe5\x85\xa5 : \xe7\x9b\xb8\xe5\x90\x8c\xe4\xba\x8e get 0 0\\n\\n""\r\n          ""exit : \xe5\x9f\xba\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe9\x94\xae\xe7\x9b\x98\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe9\x80\x80\xe5\x87\xba\xe7\x9a\x84\xe5\xae\x9e\xe8\xb7\xb5""\r\n         )\r\n\r\n# \xe8\xaf\xb4\xe6\x98\x8e:   \xe6\x98\xbe\xe7\xa4\xba\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf\r\ndef show_error():\r\n    print(""\xe6\xad\xa4\xe5\x9f\xba\xe4\xba\x8e\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe7\x9a\x84\xe8\x8f\x9c\xe9\xb8\xa1\xe7\xa8\x8b\xe5\xba\x8f\xe6\x9c\xaa\xe8\x83\xbd\xe5\xa4\x84\xe7\x90\x86\xe5\x88\x9a\xe6\x89\x8d\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xb3\xe7\x83\xa6\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xa6\xe8\xa1\x8c\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbe\x93\xe5\x85\xa5\xe4\xbb\xa5\xe5\x8f\x96\xe5\xbe\x97\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82\\n""\r\n          ""Exception: "", end=\'\')\r\n    print(sys.exc_info()[1])\r\n\r\n# \xe7\xa8\x8b\xe5\xba\x8f\xe5\x85\xa5\xe5\x8f\xa3\xe7\x82\xb9\r\nif __name__ == \'__main__\':\r\n    try:\r\n        NounList_dict = np.load(""NounList_dict.npy"", allow_pickle=True).item()\r\n        print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe5\x8a\xa0\xe8\xbd\xbd\xef\xbc\x81\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(NounList_dict)))\r\n    except:\r\n        print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8NounList_dict.npy\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n\r\n    try:\r\n        Industry_dict = np.load(""Industry_dict.npy"", allow_pickle=True).item()\r\n        print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe5\x8a\xa0\xe8\xbd\xbd\xef\xbc\x81\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(Industry_dict)))\r\n    except:\r\n        print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8Industry_dict.npy\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n    print("""")\r\n\r\n    random.seed()\r\n    show_help()\r\n    while True:\r\n        userinput = input(\'\\n\').lower().strip()\r\n        while userinput.find(""  "") != -1:                   # \xe5\x8e\xbb\xe6\x8e\x89\xe5\xa4\x9a\xe4\xbd\x99\xe7\x9a\x84\xe7\xa9\xba\xe6\xa0\xbc\r\n            userinput = userinput.replace(""  "", "" "")\r\n\r\n        if userinput == \'\':                                 # \xe8\x8e\xb7\xe5\x8f\x96\xe9\xaa\x9a\xe6\xa0\x87\xe9\xa2\x98\r\n            print(get_sao_sentence())\r\n        else:\r\n            userinput = userinput.split("" "")\r\n            if userinput[0] == \'help\':                      # \xe6\x98\xbe\xe7\xa4\xba\xe5\xb8\xae\xe5\x8a\xa9\r\n                show_help()\r\n            elif userinput[0] == \'get\':                     # \xe8\x8e\xb7\xe5\x8f\x96\xe9\xaa\x9a\xe6\xa0\x87\xe9\xa2\x98\xef\xbc\x88\xe5\xb8\xa6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x89\r\n                need_letters = False\r\n                if len(userinput) == 1:                         # \xe6\xb2\xa1\xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\r\n                    print(get_sao_sentence())\r\n                elif len(userinput) >= 2:\r\n                    if userinput[1].isnumeric():\r\n                        if int(userinput[1]) == 1:                      # \xe6\x8c\x87\xe5\xae\x9a\xe4\xba\x86\xe8\xa6\x81\xe5\x8a\xa0\xe5\x85\xa5\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d\r\n                            need_letters = True\r\n                        elif int(userinput[1]) != 0:\r\n                            show_error()\r\n                            continue\r\n                    else:\r\n                        show_error()\r\n                    if len(userinput) >= 3:\r\n                        if userinput[2].isnumeric():\r\n                            if int(userinput[2]) >= 0:                  # \xe6\x8c\x87\xe5\xae\x9a\xe4\xba\x86\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa6\r\n                                print(get_sao_sentence(need_letters, int(userinput[2])))\r\n                            else:\r\n                                show_error()\r\n                        else:\r\n                            show_error()\r\n                    else:\r\n                        print(get_sao_sentence(need_letters))\r\n            elif userinput[0] == \'input\':                   # \xe6\x89\x8b\xe5\x8a\xa8\xe8\xbe\x93\xe5\x85\xa5\xe8\xaf\x8d\xe5\x85\xb8\r\n                try:\r\n                    if userinput[1] == \'industry\':              # \xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\r\n                        if userinput[2] in Industry_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            Industry_dict.update({\' \'.join(userinput[2:]):0})\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe6\xb7\xbb\xe5\x8a\xa0\xef\xbc\x81"")\r\n                            save_industry_dict()\r\n                    elif userinput[1] == \'noun\':                # \xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\r\n                        if userinput[2] in NounList_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            NounList_dict.update({\' \'.join(userinput[2:]):0})\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe6\xb7\xbb\xe5\x8a\xa0\xef\xbc\x81"")\r\n                            save_noun_dict()\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'remove\':                  # \xe6\x89\x8b\xe5\x8a\xa8\xe5\x88\xa0\xe9\x99\xa4\xe8\xaf\x8d\xe5\x85\xb8\r\n                try:\r\n                    if userinput[1] == \'industry\':              # \xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\r\n                        if not userinput[2] in Industry_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe7\xa7\xbb\xe9\x99\xa4\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            del Industry_dict[\' \'.join(userinput[2:])]\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe7\xa7\xbb\xe9\x99\xa4\xef\xbc\x81"")\r\n                            save_industry_dict()\r\n                    elif userinput[1] == \'noun\':                # \xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\r\n                        if not userinput[2] in NounList_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe7\xa7\xbb\xe9\x99\xa4\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            del NounList_dict[\' \'.join(userinput[2:])]\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe7\xa7\xbb\xe9\x99\xa4\xef\xbc\x81"")\r\n                            save_noun_dict()\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'check\':                   # \xe6\x9f\xa5\xe7\x9c\x8b\xe8\xaf\x8d\xe5\x85\xb8\r\n                try:\r\n                    if userinput[1] == \'industry\':              # \xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\r\n                        print(list(Industry_dict.keys()))\r\n                        print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(Industry_dict)))\r\n                    elif userinput[1] == \'noun\':                # \xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\r\n                        print(list(NounList_dict.keys()))\r\n                        print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(NounList_dict)))\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'exit\':                    # \xe9\x80\x80\xe5\x87\xba\r\n                break\r\n            else:                                           # \xe6\x9c\xaa\xe7\x9f\xa5\xe5\x91\xbd\xe4\xbb\xa4\r\n                print(""\xe7\x94\xa8\xe6\x88\xb7\xe5\x88\x9a\xe6\x89\x8d\xe9\x80\x9a\xe8\xbf\x87\xe4\xba\xba\xe6\x9c\xba\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe7\xbb\x99\xe8\xbf\x99\xe4\xb8\xaa\xe5\x9f\xba\xe4\xba\x8e\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe7\x9a\x84\xe5\x9e\x83\xe5\x9c\xbe\xe7\xa8\x8b\xe5\xba\x8f\xe8\xbe\x93\xe5\x85\xa5\xe4\xba\x86\xe5\x85\xb6\xe4\xb8\x8d\xe8\x83\xbd\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xb3\xe7\x83\xa6\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xa6\xe8\xa1\x8c\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbe\x93\xe5\x85\xa5\xe4\xbb\xa5\xe5\x8f\x96\xe5\xbe\x97\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82"")\r\n'"
SaoLanguageBotFullVer.py,4,"b'# -*- coding:utf-8 -*-\r\n\r\n# For browser manipulations\r\nfrom selenium import webdriver\r\nfrom selenium.common.exceptions import TimeoutException, NoSuchElementException\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.chrome.options import Options\r\n\r\n# For object storage\r\nimport numpy as np\r\n\r\n# For random numbers\r\nimport random\r\n\r\n# For exception handling\r\nimport sys\r\n\r\n# Beginnings\r\nBeginningList = (""\xe5\x9f\xba\xe4\xba\x8e"", ""\xe5\x85\xb3\xe4\xba\x8e"", ""\xe6\x8e\xa2\xe7\xa9\xb6"", ""\xe4\xbf\x83\xe8\xbf\x9b"", ""\xe4\xb8\x80\xe7\xa7\x8d"", ""\xe8\xae\xa8\xe8\xae\xba"", ""\xe8\xaf\x95\xe8\xae\xba"", ""\xe8\xae\xba"", ""\xe8\xaf\x95\xe6\x8e\xa2\xe7\xa9\xb6"", ""\xe5\xbb\xba\xe5\x9f\xba\xe4\xba\x8e"", ""\xe9\x9d\xa2\xe5\x90\x91"", ""\xe8\xaf\x84\xe8\xbf\xb0"")\r\n\r\n# Prepositions\r\nPrepList = (""\xe9\x87\x8c"", ""\xe4\xb8\xad"", ""\xe4\xb8\x8a"", ""\xe7\x9a\x84"", ""\xe4\xb8\x8e"", ""\xe5\x92\x8c"")\r\n\r\n# Adjectives\r\nAdjList = (""\xe7\x8e\xb0\xe4\xbb\xa3"", ""\xe5\xae\x8f\xe8\xa7\x82"", ""\xe5\xbe\xae\xe8\xa7\x82"", ""\xe5\xbd\x93\xe4\xbb\xa3"", ""\xe6\x96\xb0\xe6\x97\xb6\xe4\xbb\xa3"", ""\xe7\x8e\xb0\xe4\xbb\xa3\xe5\x8c\x96"", ""\xe5\x9b\xbd\xe9\x99\x85\xe5\x8c\x96"", ""\xe5\x85\x88\xe8\xbf\x9b"", ""\xe4\xba\x8c\xe5\x8d\x81\xe4\xb8\x80\xe4\xb8\x96\xe7\xba\xaa"", ""\xe4\xb8\x80\xe4\xbd\x93\xe5\x8c\x96"")\r\n\r\n# Industry types\r\nIndustryList = {""\xe5\x86\x9c\xe4\xb8\x9a"":0, ""\xe7\xbb\x8f\xe6\xb5\x8e\xe5\xad\xa6"":0, ""\xe6\x8a\x80\xe6\x9c\xaf"":0, ""\xe4\xba\xa7\xe4\xb8\x9a"":0, ""\xe7\xae\xa1\xe7\x90\x86\xe5\xad\xa6"":0, ""\xe7\x89\xa9\xe7\x90\x86"":0, ""\xe5\x8c\x96\xe5\xad\xa6"":0, ""\xe5\x88\xb6\xe8\x8d\xaf"":0, ""\xe5\x8c\xbb\xe5\xad\xa6"":0, ""\xe7\x8e\xaf\xe5\xa2\x83\xe5\xad\xa6"":0, ""\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba"":0,\r\n                ""\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae"":0, ""\xe7\x94\x9f\xe7\x89\xa9\xe5\xad\xa6"":0, ""\xe6\x95\xb0\xe5\xad\xa6"":0, ""\xe8\xaf\xad\xe8\xa8\x80\xe5\xad\xa6\xe4\xb9\xa0"":0, ""\xe5\x9b\xbd\xe6\xb0\x91\xe7\xbb\x8f\xe6\xb5\x8e"":0, ""\xe6\x88\xbf\xe5\x9c\xb0\xe4\xba\xa7\xe5\xb8\x82\xe5\x9c\xba"":0, ""\xe5\x9c\x9f\xe5\x9c\xb0\xe5\x88\xa9\xe7\x94\xa8"":0, ""\xe6\x8a\x95\xe8\xb5\x84"":0, ""\xe4\xbc\x81\xe4\xb8\x9a"":0,\r\n                ""\xe7\x94\x9f\xe6\x80\x81\xe5\xad\xa6"":0, ""\xe8\x82\xa1\xe5\xb8\x82"":0, ""\xe4\xbd\x8e\xe7\xa2\xb3\xe7\xbb\x8f\xe6\xb5\x8e"":0}\r\n\r\n# --------------------------------------------------------------------------\r\n# For dictionary update\r\n# Ignore text after ""\xe7\x9a\x84"" when meeting these symbols\r\nspecial_characters = (""\xe3\x80\x8a"", ""\xe3\x80\x8b"", ""-"", ""\xe2\x80\x94"", ""("", "")"", ""|"")\r\n\r\n# Split text after ""\xe7\x9a\x84"" by these conjunctions\r\nsplit_strings = (""\xe5\x8f\x8a\xe5\x85\xb6"", ""\xe4\xb8\x8e"", ""\xe5\x92\x8c"", ""\xe3\x80\x81"", ""\xe4\xbb\xa5\xe5\x8f\x8a"", ""\xe5\x8f\x8a"")\r\n\r\n# Skip current string if these strings are found in the text after ""\xe7\x9a\x84""\r\nignore_strings = (""?"", ""\xef\xbc\x9f"", ""\xe5\x90\x97"", ""..."")\r\n\r\n# Noun dictionary\r\nNounList_dict = {""\xe6\x8a\x80\xe6\x9c\xaf"":0, ""\xe6\x96\xb9\xe6\xa1\x88"":0, ""\xe5\x8a\x9f\xe8\x83\xbd"":0, ""\xe4\xba\xa7\xe5\x93\x81"":0, ""\xe6\x96\xb9\xe6\xb3\x95"":0, ""\xe5\xb7\xa5\xe8\x89\xba"":0, ""\xe6\x8e\xaa\xe6\x96\xbd"":0, ""\xe6\x8a\x80\xe8\x83\xbd"":0, ""\xe8\x83\xbd\xe5\x8a\x9b"":0, ""\xe6\xa8\xa1\xe5\x9e\x8b"":0}\r\n# --------------------------------------------------------------------------\r\n\r\n# Purpose:  Check if any ignore strings are in title\r\n# Args:     title: Title\r\n# Return:   True if this title is OK. False otherwise\r\ndef check_ignore_list(title):\r\n    for i in range(len(ignore_strings)):\r\n        if title.find(ignore_strings[i]) != -1:\r\n            return False\r\n    return True\r\n\r\n# Purpose:  Split text by conjunctions (split_strings)\r\n# Args:     text: The string to be splitted\r\n# Return:   A list that contains splitted items\r\ndef split_by_list(text):\r\n    rtn_list = []\r\n    prev_pos = 0\r\n    prev_len = 0\r\n    for i in range(len(text)):\r\n        for j in range(len(split_strings)):\r\n            if text[i:i+len(split_strings[j])] == split_strings[j]:\r\n                rtn_list.append(text[prev_pos + prev_len:i].strip())\r\n                prev_pos = i\r\n                prev_len = len(split_strings[j])\r\n                break\r\n    rtn_list.append(text[prev_pos + prev_len:].strip())\r\n    return rtn_list\r\n\r\n# Purpose:  Analyze the title and add strings to our dictionaries\r\n# Args:     title: Title\r\ndef analyze_and_add(title):\r\n    begin_pos = title.find(\'\xe5\x9f\xba\xe4\xba\x8e\')\r\n    if begin_pos != -1:\r\n        begin_pos += 2\r\n        end_pos = title.find(\'\xe7\x9a\x84\', begin_pos + 2)\r\n    else:\r\n        end_pos = title.rfind(\'\xe7\x9a\x84\')\r\n\r\n    if end_pos != -1:\r\n        if begin_pos != -1:                                 # Try to get string between \'\xe5\x9f\xba\xe4\xba\x8e\' and \'\xe7\x9a\x84\'\r\n            added_count = 0\r\n            vocab_list = split_by_list(title[begin_pos:end_pos])\r\n            for i in vocab_list:\r\n                if not i in Industry_dict:\r\n                    Industry_dict.update({i:0})\r\n                    added_count += 1\r\n            print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe6\x96\xb0\xe5\xa2\x9e\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0:\\t"" + str(added_count), end = \'\\t\')\r\n            print(vocab_list)\r\n\r\n        split_tmp = title.split(\'\xe7\x9a\x84\')\r\n        split_tmp = split_tmp[len(split_tmp) - 1]\r\n        if check_ignore_list(split_tmp):                     # Check if title should be ignored\r\n            for i in range(len(special_characters)):             # Cut title by special characters \r\n                pos = split_tmp.rfind(special_characters[i])\r\n                if pos != -1:\r\n                    split_tmp = split_tmp[0:pos - 1]\r\n        \r\n            added_count = 0\r\n            vocab_list = split_by_list(split_tmp)\r\n            for i in vocab_list:\r\n                if not i in NounList_dict:\r\n                    NounList_dict.update({i:0})\r\n                    added_count += 1\r\n            print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe6\x96\xb0\xe5\xa2\x9e\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0:\\t"" + str(added_count), end=\'\\t\')\r\n            print(vocab_list)\r\n        \r\n# Purpose:  Save NounList_dict to file\r\ndef save_noun_dict():\r\n    try:\r\n        np.save(\'NounList_dict.npy\', NounList_dict)\r\n        print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x81"")\r\n    except:\r\n        print(""\xe4\xbf\x9d\xe5\xad\x98\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n        pass\r\n\r\n# Purpose:  Save Industry_dict to file\r\ndef save_industry_dict():\r\n    try:\r\n        np.save(\'Industry_dict.npy\', Industry_dict)\r\n        print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x81"")\r\n    except:\r\n        print(""\xe4\xbf\x9d\xe5\xad\x98\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n        pass\r\n\r\n# Purpose:  Update dictionaries\r\n# Args:     use_google: True: Use Google Scholar; False: Use Baidu Scholar\r\n#           keyword: The keyword you want to search\r\n#           start_pn: Start page\r\n#           end_pn: End page\r\ndef update_dictionaries(use_google, keyword, start_pn, end_pn):\r\n    initial_noun_items = len(NounList_dict)\r\n    initial_industry_items = len(Industry_dict)\r\n\r\n    print(""\xe6\xad\xa3\xe5\x9c\xa8\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x9f\xba\xe4\xba\x8eChrome\xe7\x9a\x84\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe7\xa8\x8b\xe5\xba\x8f...\\n"")\r\n    chrome_options = Options()\r\n    #chrome_options.add_argument(\'--headless\')\r\n    chrome_options.add_argument(\'--log-level=3\')\r\n    driver = webdriver.Chrome(options=chrome_options)\r\n    driver.set_page_load_timeout(7)                     # Reduce timeout to increase speed\r\n    print(""\xe5\x9f\xba\xe4\xba\x8eChrome\xe7\x9a\x84\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe7\xa8\x8b\xe5\xba\x8f\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xae\x8c\xe6\x88\x90\\n"")\r\n\r\n    if use_google:\r\n        link = \'https://scholar.google.com/scholar?&q=\' + keyword + \'&hl=zh-CN&as_sdt=0,5&as_vis=1&start=\'\r\n    else:\r\n        link = \'http://xueshu.baidu.com/s?wd=\' + keyword + \'&pn=\'\r\n    first_round = True\r\n    for pn in range(start_pn - 1, end_pn):              # \'pn\' (or \'start\' for Google Scholar) argument in the request\r\n        try:\r\n            # Search\r\n            print(""\xe6\xad\xa3\xe5\x9c\xa8\xe8\x8e\xb7\xe5\x8f\x96\xe9\xa1\xb5\xe9\x9d\xa2: "" + str(pn + 1) + ""/"" + str(end_pn))\r\n            driver.get(link + str(pn * 10))\r\n        except TimeoutException:                        # Ignore timeout\r\n            pass\r\n        finally:\r\n            try:\r\n                # Try to locate left navigation pane as an indication of page loaded\r\n                try:\r\n                    if use_google:\r\n                        WebDriverWait(driver, 5).until(EC.presence_of_element_located(\r\n                            (By.XPATH, \'//*[@id=""gs_bdy_sb""]\')\r\n                            ))\r\n                    else:\r\n                        WebDriverWait(driver, 5).until(EC.presence_of_element_located(\r\n                            (By.XPATH, \'//*[@id=""leftnav""]\')\r\n                            ))\r\n                except TimeoutException:                        # Timeout, increase time limit and try again\r\n                    print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xbd\x93\xe5\x89\x8d\xe9\xa1\xb5\xe9\x9d\xa2\xe8\xb6\x85\xe6\x97\xb6\xef\xbc\x81\xe6\xad\xa3\xe5\x9c\xa8\xe9\x87\x8d\xe8\xaf\x95..."")\r\n                    driver.set_page_load_timeout(5)\r\n                    try:\r\n                        driver.get(link + str(pn * 10))\r\n                        if use_google:\r\n                            WebDriverWait(driver, 5).until(EC.presence_of_element_located(\r\n                                (By.XPATH, \'//*[@id=""gs_bdy_sb""]\')\r\n                                ))\r\n                        else:\r\n                            WebDriverWait(driver, 5).until(EC.presence_of_element_located(\r\n                                (By.XPATH, \'//*[@id=""leftnav""]\')\r\n                                ))\r\n                    except:\r\n                        print(""\xe4\xbb\x8d\xe7\x84\xb6\xe8\xb6\x85\xe6\x97\xb6\xef\xbc\x81\xe6\x94\xbe\xe5\xbc\x83\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xbd\x93\xe5\x89\x8d\xe7\xbd\x91\xe9\xa1\xb5\xe3\x80\x82 pn = "" + str(pn))\r\n                        pass\r\n                    finally:\r\n                        driver.set_page_load_timeout(2)\r\n                except:\r\n                    pass\r\n\r\n                # Try to get titles of all results (10 results per page)\r\n                if use_google:          # Using Google Scholar\r\n                    try:\r\n                        # Try to locate reCAPTCHA\r\n                        driver.find_element_by_xpath(\'//*[@id=""gs_captcha_ccl""]\')\r\n                        print(""\xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe8\xb0\xb7\xe6\xad\x8c\xe5\xad\xa6\xe6\x9c\xaf\xe6\x9e\x81\xe5\x85\xb6\xe6\x81\xbc\xe4\xba\xba\xe7\x9a\x84\xe4\xba\xba\xe6\x9c\xba\xe8\xae\xa4\xe8\xaf\x81\xef\xbc\x81\xe5\x8a\xb3\xe7\x83\xa6\xe6\x82\xa8\xe6\x89\x8b\xe5\x8a\xa8\xe5\xae\x8c\xe6\x88\x90\xe5\xae\x83... :("")\r\n\r\n                        # Wait until reCAPTCHA is done by user\r\n                        WebDriverWait(driver, 0xffffffff).until(EC.presence_of_element_located(\r\n                                    (By.XPATH, \'//*[@id=""gs_nm""]\')\r\n                                    ))\r\n                    except:\r\n                        pass\r\n\r\n                    # reCAPTCHA not located, continue the job\r\n                    for i in range(1, 10):\r\n                        try:\r\n                            # Try to find the item\r\n                            title = driver.find_element_by_xpath(\'//*[@id=""gs_res_ccl_mid""]/div[\' + str(i) + \']/div/h3\').text\r\n                            analyze_and_add(title)\r\n                        except NoSuchElementException:\r\n                            try:\r\n                                # A pdf link might be given together with the item, so try another xpath\r\n                                title = driver.find_element_by_xpath(\'//*[@id=""gs_res_ccl_mid""]/div[\' + str(i) + \']/div[2]/h3\').text\r\n                                analyze_and_add(title)\r\n                            except:\r\n                                pass\r\n                        except:\r\n                            pass\r\n                else:                   # Using Baidu Scholar\r\n                    for i in range(pn * 10 + 1, pn * 10 + 11):\r\n                        try:\r\n                            title = driver.find_element_by_xpath(\'//*[@id=""\' + str(i) + \'""]/div[1]/h3/a\').text\r\n                            analyze_and_add(title)\r\n                        except NoSuchElementException:\r\n                            pass\r\n                        except:\r\n                            pass\r\n                        \r\n                # After the first round, reduce timeout to improve speed\r\n                if first_round:\r\n                    driver.set_page_load_timeout(2)\r\n                    first_round = False\r\n            except NoSuchElementException:\r\n                print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe9\xa1\xb5\xe9\x9d\xa2\xe5\xa4\xb1\xe8\xb4\xa5: pn = "" + str(pn) + "" Exception: "", end=\'\')\r\n                print(sys.exc_info()[1])\r\n            except:\r\n                print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe9\xa1\xb5\xe9\x9d\xa2\xe5\x87\xba\xe9\x94\x99: pn = "" + str(pn) + "" Exception: "", end=\'\')\r\n                print(sys.exc_info()[1])\r\n    \r\n    driver.close()\r\n    print(""\xe5\xbd\x93\xe5\x89\x8d\xe6\x80\xbb\xe8\xae\xa1\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(NounList_dict)) + "" \xe6\x96\xb0\xe5\xa2\x9e\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(NounList_dict) - initial_noun_items))\r\n    print(""\xe5\xbd\x93\xe5\x89\x8d\xe6\x80\xbb\xe8\xae\xa1\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(Industry_dict)) + "" \xe6\x96\xb0\xe5\xa2\x9e\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(Industry_dict) - initial_industry_items))\r\n    save_noun_dict()\r\n    save_industry_dict()\r\n\r\n# Purpose:  Generate a random string\r\ndef get_some_letters():\r\n    rtn = """"\r\n    IsAbbr = random.randint(1, 10) < 4\r\n    if IsAbbr:                                      # Abbreviation\r\n        for i in range(random.randint(2, 5)):\r\n            rtn += chr(random.randint(65, 90))\r\n    else:                                           # CamelCaps\r\n        for i in range(random.randint(1, 2)):           # Random letter segments (Starts by upper case letters)\r\n            rtn += chr(random.randint(65, 90))              # Get a upper case letter\r\n            for j in range(random.randint(2, 5)):           # Following by a series of lower case letters\r\n                rtn += chr(random.randint(97, 122))\r\n    return rtn\r\n\r\n# Purpose:  Randomly select a text from source\r\n# Args:     source: The list to select text from\r\n#           possibility_of_and: The possibility of the occurence of conjunction words (possibility_of_and / 10)\r\n#           force_use_and: Force using ""\xe4\xb8\x8e"" as conjunction word\r\n# Return:   Randomly selected string\r\ndef select_item(source, possibility_of_and = 5, force_use_and = False):\r\n    data = source[:]\r\n    index = random.randint(0, len(data) - 1)\r\n\r\n    if len(data) > 2:\r\n        if random.randint(1, 10) <= possibility_of_and:\r\n            tmp = data[index]\r\n            del data[index]\r\n            if force_use_and:\r\n                tmp += ""\xe4\xb8\x8e""\r\n            else:\r\n                if random.randint(1, 10) <= 5:          # Switch the word to make it fancy\r\n                    tmp += ""\xe4\xb8\x8e""\r\n                else:\r\n                    tmp += ""\xe5\x8f\x8a\xe5\x85\xb6""\r\n            tmp += data[random.randint(0, len(data) - 1)]\r\n            return tmp\r\n    return data[index]\r\n\r\n# Purpose:  Get a Sao sentence!\r\n# Args:     sao_degree: Degree of Sao. Should not be too high! 3 is Sao enough\r\n#           need_letters: Add letters between nouns\r\n# Return:   A Sao sentence\r\ndef get_sao_sentence(need_letters = False, sao_degree = 0):\r\n    # Get a beginning\r\n    sentence = select_item(BeginningList, 0)\r\n\r\n    sentence += select_item(AdjList, 0)\r\n    if need_letters:\r\n        sentence += get_some_letters()\r\n    sentence += select_item(list(Industry_dict.keys()), 3, True)\r\n    sentence += select_item(PrepList, 0)\r\n    for i in range(sao_degree):\r\n        if need_letters:\r\n            sentence += get_some_letters()\r\n        sentence += select_item(list(NounList_dict.keys()), 0)\r\n        sentence += select_item(PrepList, 0)\r\n    \r\n    if need_letters:\r\n        sentence += get_some_letters()\r\n    sentence += select_item(list(NounList_dict.keys()), 0)\r\n    sentence += ""\xe7\x9a\x84""\r\n    sentence += select_item(list(NounList_dict.keys()), 6)\r\n\r\n    return sentence\r\n\r\n# Purpose:  Show help\r\ndef show_help():\r\n    print(""\xe5\x9f\xba\xe4\xba\x8e\xe5\xbd\x93\xe5\x89\x8d\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe7\xa8\x8b\xe5\xba\x8f\xe6\x89\x80\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe8\x80\x8c\xe6\x8f\x90\xe4\xbe\x9b\xe7\x9a\x84\xe5\x8f\xaf\xe7\x94\xa8\xe4\xba\xba\xe6\x9c\xba\xe4\xba\xa4\xe4\xba\x92\xe5\x91\xbd\xe4\xbb\xa4:\\n\\n""\r\n          ""help : \xe9\x80\x9a\xe8\xbf\x87\xe5\x9f\xba\xe4\xba\x8e\xe9\x94\xae\xe7\x9b\x98\xe7\x9a\x84\xe4\xba\xba\xe6\x9c\xba\xe4\xba\x92\xe5\x8a\xa8\xe6\x96\xb9\xe5\xbc\x8f\xe6\x98\xbe\xe7\xa4\xba\xe8\xaf\xa5\xe5\x9f\xba\xe4\xba\x8e\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe5\xb8\xae\xe5\x8a\xa9\xe6\x8c\x87\xe4\xbb\xa4\\n\\n""\r\n          ""update keyword start end : \xe5\x9f\xba\xe4\xba\x8e\xe7\x99\xbe\xe5\xba\xa6\xe5\xad\xa6\xe6\x9c\xaf\xe6\x90\x9c\xe7\xb4\xa2\xe7\x9a\x84\xe7\x8e\xb0\xe4\xbb\xa3\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe6\x8a\x80\xe6\x9c\xaf\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xae\xa2\xe6\x88\xb7\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x90\x9c\xe7\xb4\xa2\xe5\x86\x85\xe5\xae\xb9(keyword)\xe3\x80\x81\xe5\xbc\x80\xe5\xa7\x8b\xe9\xa1\xb5\xe9\x9d\xa2(start)\xe5\x92\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe9\xa1\xb5\xe9\x9d\xa2(end)\xe8\x8c\x83\xe5\x9b\xb4\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe5\x9c\xa8\xe7\xba\xbf\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe6\x90\x9c\xe7\xb4\xa2\xe3\x80\x81\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe6\x9e\x90\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9b\xb4\xe6\x96\xb0\xe7\x94\xa8\xe6\x88\xb7\xe8\xaf\x8d\xe5\xba\x93\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: update \xe5\x86\xb0\xe6\xa3\x8d 1 10 \xe4\xbc\x9a\xe5\x88\x86\xe6\x9e\x90\xe7\x99\xbe\xe5\xba\xa6\xe5\xad\xa6\xe6\x9c\xaf\xe4\xb8\x8a\xe4\xbb\xa5\xe2\x80\x9c\xe5\x86\xb0\xe6\xa3\x8d\xe2\x80\x9d\xe4\xb8\xba\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe7\x9a\x841-10\xe9\xa1\xb5\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\xa0\x87\xe9\xa2\x98\xe5\xb9\xb6\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xaf\x8d\xe6\xb1\x87\xe5\x88\xb0\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\\n\\n""\r\n          ""update_google keyword start end : \xe5\x9f\xba\xe4\xba\x8e\xe8\xb0\xb7\xe6\xad\x8c\xe5\xad\xa6\xe6\x9c\xaf\xe6\x90\x9c\xe7\xb4\xa2\xe7\x9a\x84\xe7\x8e\xb0\xe4\xbb\xa3\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe6\x8a\x80\xe6\x9c\xaf\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xae\xa2\xe6\x88\xb7\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x90\x9c\xe7\xb4\xa2\xe5\x86\x85\xe5\xae\xb9(keyword)\xe3\x80\x81\xe5\xbc\x80\xe5\xa7\x8b\xe9\xa1\xb5\xe9\x9d\xa2(start)\xe5\x92\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe9\xa1\xb5\xe9\x9d\xa2(end)\xe8\x8c\x83\xe5\x9b\xb4\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe5\x9c\xa8\xe7\xba\xbf\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe6\x90\x9c\xe7\xb4\xa2\xe3\x80\x81\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe6\x9e\x90\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9b\xb4\xe6\x96\xb0\xe7\x94\xa8\xe6\x88\xb7\xe8\xaf\x8d\xe5\xba\x93\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: update_google \xe5\x86\xb0\xe6\xa3\x8d 1 10 \xe4\xbc\x9a\xe5\x88\x86\xe6\x9e\x90\xe8\xb0\xb7\xe6\xad\x8c\xe5\xad\xa6\xe6\x9c\xaf\xe4\xb8\x8a\xe4\xbb\xa5\xe2\x80\x9c\xe5\x86\xb0\xe6\xa3\x8d\xe2\x80\x9d\xe4\xb8\xba\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe7\x9a\x841-10\xe9\xa1\xb5\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\xa0\x87\xe9\xa2\x98\xe5\xb9\xb6\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xaf\x8d\xe6\xb1\x87\xe5\x88\xb0\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\\n\\n""\r\n          ""input industry/noun text : \xe5\x9f\xba\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe9\x94\xae\xe7\x9b\x98\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x8e\xe7\x94\xa8\xe6\x88\xb7\xe6\x9b\xb4\xe6\x96\xb0\xe6\x84\x8f\xe5\x90\x91(industry: \xe6\x9b\xb4\xe6\x96\xb0\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8; noun: \xe6\x9b\xb4\xe6\x96\xb0\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8)\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9c\x89\xe6\x84\x8f\xe6\x84\xbf\xe6\x96\xb0\xe5\xa2\x9e\xe7\x9a\x84\xe6\x96\x87\xe6\x9c\xac(text)\xe7\x9a\x84\xe6\x89\x8b\xe5\x8a\xa8\xe8\xaf\x8d\xe5\x85\xb8\xe8\xaf\x8d\xe5\xba\x93\xe6\x9b\xb4\xe6\x96\xb0\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe8\xb7\xb5\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: input noun \xe5\xae\x9e\xe9\xaa\x8c \xe4\xbc\x9a\xe6\x8a\x8a\xe2\x80\x9c\xe5\xae\x9e\xe9\xaa\x8c\xe2\x80\x9d\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe4\xb8\xad\\n\\n""\r\n          ""remove industry/noun text : \xe5\x9f\xba\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe9\x94\xae\xe7\x9b\x98\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x8e\xe7\x94\xa8\xe6\x88\xb7\xe6\x9b\xb4\xe6\x96\xb0\xe6\x84\x8f\xe5\x90\x91(industry: \xe6\x9b\xb4\xe6\x96\xb0\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8; noun: \xe6\x9b\xb4\xe6\x96\xb0\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8)\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9c\x89\xe6\x84\x8f\xe5\x90\x91\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84\xe6\x96\x87\xe6\x9c\xac(text)\xe7\x9a\x84\xe6\x89\x8b\xe5\x8a\xa8\xe8\xaf\x8d\xe5\x85\xb8\xe8\xaf\x8d\xe5\xba\x93\xe6\x9b\xb4\xe6\x96\xb0\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe8\xb7\xb5\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: remove industry \xe6\x95\xb0\xe5\xad\xa6 \xe4\xbc\x9a\xe6\x8a\x8a\xe2\x80\x9c\xe6\x95\xb0\xe5\xad\xa6\xe2\x80\x9d\xe4\xbb\x8e\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe4\xb8\xad\xe7\xa7\xbb\xe9\x99\xa4\\n\\n""\r\n          ""check industry/noun : \xe9\x80\x9a\xe8\xbf\x87\xe7\x8e\xb0\xe4\xbb\xa3\xe5\x8c\x96\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe9\xab\x98\xe6\x95\x88\xe8\xaf\x8d\xe5\x85\xb8\xe7\xae\x97\xe6\xb3\x95\xe5\xb9\xb6\xe5\x9f\xba\xe4\xba\x8e\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xba\xe6\x9c\xba\xe4\xba\x92\xe5\x8a\xa8\xe4\xbb\x8e\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\xb7\xe8\x83\xbd\xe5\xa4\x9f\xe6\x9f\xa5\xe7\x9c\x8b\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8(industry)\xe6\x88\x96\xe8\x80\x85\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8(noun)\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe7\x9a\x84\xe8\xbf\x87\xe7\xa8\x8b\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: check noun \xe4\xbc\x9a\xe6\x8a\x8a\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe5\xb9\xb6\xe5\x91\x8a\xe8\xaf\x89\xe7\x94\xa8\xe6\x88\xb7\xe8\xaf\x8d\xe6\x9d\xa1\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\\n\\n""\r\n          ""get [\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d(0/1)] [\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa6] : \xe8\x8e\xb7\xe5\x8f\x96\xe5\x9f\xba\xe4\xba\x8e\xe7\x8e\xb0\xe4\xbb\xa3\xe7\x94\xb5\xe8\x84\x91\xe7\xbc\x96\xe7\xa8\x8b\xe6\x8a\x80\xe6\x9c\xaf\xe5\x8f\x8a\xe5\x85\xb6\xe5\xba\x94\xe7\x94\xa8\xe5\x92\x8c\xe6\x96\xb0\xe6\x97\xb6\xe4\xbb\xa3\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe6\x8a\x80\xe6\x9c\xaf\xe7\x9a\x84\xe8\xaf\x8d\xe5\xba\x93\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8f\x8a\xe8\xaf\xad\xe8\xa8\x80\xe5\x88\x86\xe6\x9e\x90\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe8\x87\xaa\xe5\x8a\xa8\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe9\xaa\x9a\xe8\xae\xba\xe6\x96\x87\xe9\xa2\x98\xe7\x9b\xae\\n""\r\n          ""[\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d]: \xe5\x8f\xaf\xe9\x80\x89\xe7\x9a\x84\xe3\x80\x82\xe8\x87\xaa\xe5\x8a\xa8\xe5\x9c\xa8\xe5\x90\x8d\xe8\xaf\x8d\xe4\xb8\xad\xe9\x97\xb4\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9c\x8b\xe8\xb5\xb7\xe6\x9d\xa5\xe9\x9d\x9e\xe5\xb8\xb8\xe9\xab\x98\xe5\xa4\xa7\xe4\xb8\x8a\xe7\x9a\x84\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba0(\xe4\xb8\x8d\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0); [\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa6]: \xe5\x8f\xaf\xe9\x80\x89\xe7\x9a\x84\xe3\x80\x82\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe9\xa2\x98\xe7\x9b\xae\xe6\x9c\x89\xe5\xa4\x9a\xe9\xaa\x9a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba0(\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x8c\xba\xe9\xaa\x9a\xe4\xba\x86\xef\xbc\x8c\xe9\x99\xa4\xe9\x9d\x9e\xe6\x82\xa8\xe8\xa7\x89\xe5\xbe\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe9\xaa\x9a)\\n""\r\n          ""\xe4\xbe\x8b\xe5\xa6\x82: get 1 2 \xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x8b\xb1\xe8\xaf\xad\xe5\x8d\x95\xe8\xaf\x8d\xe7\x9a\x84\xe3\x80\x81\xe9\xaa\x9a\xe7\xa8\x8b\xe5\xba\xa62\xe7\x9a\x84\xe6\xa0\x87\xe9\xa2\x98\\n\\n""\r\n          ""\xe7\xa9\xba\xe7\x99\xbd\xe8\xbe\x93\xe5\x85\xa5 : \xe7\x9b\xb8\xe5\x90\x8c\xe4\xba\x8e get 0 0\\n\\n""\r\n          ""exit : \xe5\x9f\xba\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe9\x94\xae\xe7\x9b\x98\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe9\x80\x80\xe5\x87\xba\xe7\x9a\x84\xe5\xae\x9e\xe8\xb7\xb5""\r\n         )\r\n\r\n# Purpose:  Show error message\r\ndef show_error():\r\n    print(""\xe6\xad\xa4\xe5\x9f\xba\xe4\xba\x8e\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe7\x9a\x84\xe8\x8f\x9c\xe9\xb8\xa1\xe7\xa8\x8b\xe5\xba\x8f\xe6\x9c\xaa\xe8\x83\xbd\xe5\xa4\x84\xe7\x90\x86\xe5\x88\x9a\xe6\x89\x8d\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xb3\xe7\x83\xa6\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xa6\xe8\xa1\x8c\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbe\x93\xe5\x85\xa5\xe4\xbb\xa5\xe5\x8f\x96\xe5\xbe\x97\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82\\n""\r\n          ""Exception: "", end=\'\')\r\n    print(sys.exc_info()[1])\r\n\r\n# Entry point\r\nif __name__ == \'__main__\':\r\n    try:\r\n        NounList_dict = np.load(""NounList_dict.npy"", allow_pickle=True).item()\r\n        print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe5\x8a\xa0\xe8\xbd\xbd\xef\xbc\x81\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(NounList_dict)))\r\n    except:\r\n        print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8NounList_dict.npy\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n\r\n    try:\r\n        Industry_dict = np.load(""Industry_dict.npy"", allow_pickle=True).item()\r\n        print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe5\xb7\xb2\xe5\x8a\xa0\xe8\xbd\xbd\xef\xbc\x81\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(Industry_dict)))\r\n    except:\r\n        print(""\xe5\x8a\xa0\xe8\xbd\xbd\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8Industry_dict.npy\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81"")\r\n    print("""")\r\n\r\n    random.seed()\r\n    show_help()\r\n    while True:\r\n        userinput = input(\'\\n\').lower().strip()\r\n        while userinput.find(""  "") != -1:                   # Remove redundant spaces in the input\r\n            userinput = userinput.replace(""  "", "" "")\r\n\r\n        if userinput == \'\':                                 # Get Sao sentence\r\n            print(get_sao_sentence())\r\n        else:\r\n            userinput = userinput.split("" "")\r\n            if userinput[0] == \'help\':                      # Show help\r\n                show_help()\r\n            elif userinput[0] == \'get\':                     # Get Sao sentence (with arguments)\r\n                need_letters = False\r\n                if len(userinput) == 1:                         # No arguments\r\n                    print(get_sao_sentence())\r\n                elif len(userinput) >= 2:\r\n                    if userinput[1].isnumeric():\r\n                        if int(userinput[1]) == 1:                      # Need letters specified\r\n                            need_letters = True\r\n                        elif int(userinput[1]) != 0:\r\n                            show_error()\r\n                            continue\r\n                    else:\r\n                        show_error()\r\n                    if len(userinput) >= 3:\r\n                        if userinput[2].isnumeric():\r\n                            if int(userinput[2]) >= 0:                  # Sao degree specified\r\n                                print(get_sao_sentence(need_letters, int(userinput[2])))\r\n                            else:\r\n                                show_error()\r\n                        else:\r\n                            show_error()\r\n                    else:\r\n                        print(get_sao_sentence(need_letters))\r\n            elif userinput[0] == \'update\':                  # Update dictionaries via Baidu Scholar\r\n                try:\r\n                    if userinput[2].isnumeric() and userinput[3].isnumeric():\r\n                        update_dictionaries(False, userinput[1], int(userinput[2]), int(userinput[3]))\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'update_google\':           # Update dictionaries via google scholar\r\n                try:\r\n                    if userinput[2].isnumeric() and userinput[3].isnumeric():\r\n                        update_dictionaries(True, userinput[1], int(userinput[2]), int(userinput[3]))\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'input\':                   # Manually input dictionary\r\n                try:\r\n                    if userinput[1] == \'industry\':              # For industry dictionary\r\n                        if userinput[2] in Industry_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            Industry_dict.update({\' \'.join(userinput[2:]):0})\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe6\xb7\xbb\xe5\x8a\xa0\xef\xbc\x81"")\r\n                            save_industry_dict()\r\n                    elif userinput[1] == \'noun\':                # For noun dictionary\r\n                        if userinput[2] in NounList_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            NounList_dict.update({\' \'.join(userinput[2:]):0})\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe6\xb7\xbb\xe5\x8a\xa0\xef\xbc\x81"")\r\n                            save_noun_dict()\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'remove\':                  # Manually remove\r\n                try:\r\n                    if userinput[1] == \'industry\':              # For industry dictionary\r\n                        if not userinput[2] in Industry_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe7\xa7\xbb\xe9\x99\xa4\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            del Industry_dict[\' \'.join(userinput[2:])]\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe7\xa7\xbb\xe9\x99\xa4\xef\xbc\x81"")\r\n                            save_industry_dict()\r\n                    elif userinput[1] == \'noun\':                # For noun dictionary\r\n                        if not userinput[2] in NounList_dict:\r\n                            print(""\xe6\x82\xa8\xe8\xa6\x81\xe7\xa7\xbb\xe9\x99\xa4\xe7\x9a\x84\xe6\x9d\xa1\xe7\x9b\xae\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81"")\r\n                        else:\r\n                            del NounList_dict[\' \'.join(userinput[2:])]\r\n                            print(""\xe6\x88\x90\xe5\x8a\x9f\xe7\xa7\xbb\xe9\x99\xa4\xef\xbc\x81"")\r\n                            save_noun_dict()\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'check\':                   # Check dictionary\r\n                try:\r\n                    if userinput[1] == \'industry\':              # For industry dictionary\r\n                        print(list(Industry_dict.keys()))\r\n                        print(""\xe5\xb7\xa5\xe4\xb8\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xaf\x8d\xe5\x85\xb8\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(Industry_dict)))\r\n                    elif userinput[1] == \'noun\':                # For noun dictionary\r\n                        print(list(NounList_dict.keys()))\r\n                        print(""\xe5\x90\x8d\xe8\xaf\x8d\xe8\xaf\x8d\xe5\x85\xb8\xe6\x9d\xa1\xe7\x9b\xae\xe6\x95\xb0: "" + str(len(NounList_dict)))\r\n                    else:\r\n                        show_error()\r\n                except:\r\n                    show_error()\r\n            elif userinput[0] == \'exit\':                    # Exit\r\n                break\r\n            else:                                           # Unknown command\r\n                print(""\xe7\x94\xa8\xe6\x88\xb7\xe5\x88\x9a\xe6\x89\x8d\xe9\x80\x9a\xe8\xbf\x87\xe4\xba\xba\xe6\x9c\xba\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe7\xbb\x99\xe8\xbf\x99\xe4\xb8\xaa\xe5\x9f\xba\xe4\xba\x8e\xe8\x84\x9a\xe6\x9c\xac\xe8\xaf\xad\xe8\xa8\x80\xe7\x9a\x84\xe5\x9e\x83\xe5\x9c\xbe\xe7\xa8\x8b\xe5\xba\x8f\xe8\xbe\x93\xe5\x85\xa5\xe4\xba\x86\xe5\x85\xb6\xe4\xb8\x8d\xe8\x83\xbd\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xb3\xe7\x83\xa6\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xa6\xe8\xa1\x8c\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbe\x93\xe5\x85\xa5\xe4\xbb\xa5\xe5\x8f\x96\xe5\xbe\x97\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xa8\x8b\xe5\xba\x8f\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82"")\r\n'"
