file_path,api_count,code
src/2D_Matrix_Multiplication.py,2,"b'import numpy as np\r\n\r\nprint(""Make sure that a should be equal to b * c"")\r\nb = int(input(""Enter the value of b ===> ""))\r\nc = int(input(""Enter the value of c ===> ""))\r\na = int(input(""Enter the value of a ===> ""))\r\n\r\nfirst = np.arange(a).reshape(b, c)\r\nprint(first)\r\n\r\nsecond = np.arange(a).reshape(b, c)\r\nprint(second)\r\n\r\nproduct = first * second\r\nprint(product)\r\n\r\n'"
src/Accessing_By_Index.py,0,"b'str = ""example""\nstr1 = str[3]\nprint(str1)\n\nstr2 = ""Tanu""[3]\nprint(str2)\n\n'"
src/String_Concat_Using_Print.py,0,"b'String1 = ""Tanu""\nString2 = ""Nanda""\nString3 = ""Prabhu""\n\nprint(String1 + "" "" + String2 + "" "" + String3)\n'"
src/Strings.py,0,"b'String = "" This is a string ""\nprint(String)\n'"
src/Vending_Machine.py,0,"b'import sys\n\noption = int(input(""Enter the option as 1, 2 or 3""))\n\nif option == 1:\n    charge = 1.00\nelif option == 2:\n    charge = 1.50\nelif option ==3:\n    charge = 2.00\nelse:\n    sys.exit(""Invalid option: Try again !!!!!"")\n\nquaters = int(input(""Enter the quarters""))\nnickels = int(input(""Enter the nickles""))\ndimes = int(input(""Enter the dimes""))\npennies = int(input(""Enter the pennis""))\n\ntotal = quaters*0.25 + nickels+0.10 + dimes*0.05 + pennies*0.01\n\nprint(""You total money is: %f"" %(total))\n\nif total >= charge:\n    print(""You change is: %f"" % (total-charge))\n\nelse:\n    print(""Please try again"")\n'"
src/control_Statements.py,0,"b'a = input(""Enter the value of a: "")\nb = input(""Enter the value of b: "")\nc = input(""Enter the value of c: "")\n\nif a > b > c:\n    print(""a is greater than b and c"")\nelif b > c > a:\n    print(""b is greater than c and a"")\nelif a == b == c:\n    print(""a, b, c are all equal"")\nelif a == b:\n    print(""a and b are equal"")\nelif b == c:\n    print(""b and c are equal"")\nelif a == c:\n    print(""a and c are equal"")\nelse:\n    print(""c is greater than a and b"")\n\n'"
src/dictionary.py,0,"b'name = {1: ""Tanu"", 2: ""Nanda"", 3: ""Prabhu""}\n\nprint(name[1])\nprint(name[2])\nprint(name[3])\nprint(name)\n\n# Creating the new Dictinoary from an empty dictionary\n\nname1 = {}\nname1[1] = ""Mercedes""\nname1[2] = ""Benz""\n\nprint(name1)\n\n# Calculating the length of the dictionary name1 can be done by\nlength = len(name1)\nprint(length)\n\n\n# Reassigning the key of the dictionary\n\nname[2] = ""N""\nprint(name)\n\n# Removing the key valur pair using a del:\n\nname2 = {1: ""Newton"", 2: ""Einstein"", 3: ""Tanu""}\ndel name2[3]\n\nprint(name2)\n'"
src/for_loop.py,0,"b'list = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)\n'"
src/functions.py,0,"b'\ndef add(c,d):\n    e = c + d\n    return e\n\n\na = int(input(""Enter the value of a:""))\nb = int(input(""Enter the value of b:""))\n\ne = add (a, b)\nprint(e)\n'"
src/helloWorld.py,0,"b'print(""Hello World"")\n'"
src/input().py,0,"b'firstName = input(""Enter your first name"")\nlastName = input(""Enter your last name"")\nage = input(""Enter your age"")\n\nprint(""Your firstname is: %s, lastname is: %s, and height is: %sl"" %(firstName, lastName, age))\n'"
src/length_of_name.py,0,"b'name = input(""Enter your name: "")\n\nlength = len(name)\n\nprint(""The length of your name is: %s"" %(length))\n\nif length < 4:\n    print(""The name is less than 4 characters"")\n\nelif length < 10 :\n    print(""The name is greater than 4 but less thank 10"")\nelse:\n    print(""The name is very long"")\n'"
src/list.py,0,"b'def list():\n    List = [""Tanu"", ""Nanda"", ""Prabhu""]\n    print(List)\n\ndef byIndex():\n    List = [""Tanu"", ""Nanda"", ""Prabhu""]\n    Index = List[2]\n    print(Index)\n\ndef appending():\n    adder = [1, 2, 3, 4]\n    adder.append(5)\n    print(adder)\n\ndef slicing():\n    slice = [1, 2, 3, 4, 5]\n    slice1 = slice[:2]\n    print(slice1)\n\ndef index():\n    index = [1, 2, 3, 4, 5]\n    index1 = index.index(3)\n    print(index1)\n\ndef insert():\n    insert = [""Tanu"", ""Nanda""]\n    insert.insert(2, ""Prabhu"")\n    print(insert)\n\ndef remove():\n    remove = [""Daimler"", ""Mercedes"", ""Benz""]\n    remove.remove(""Daimler"")\n    print(remove)\n\ndef pop():\n    popped = [""BMW"", ""Mercedes"", ""Mini""]\n    pop1 = popped.pop(2)\n    print(pop1)\n\noption = int(input(""Enter the option such as 1, 2, 3, 4, 5, 6, 7, 8""))\n\nif option == 1:\n    list()\nelif option == 2:\n    byIndex()\nelif option == 3:\n    appending()\nelif option == 4:\n    slicing()\nelif option == 5:\n    index()\nelif option == 6:\n    insert()\nelif option == 7:\n    remove()\nelif option == 8:\n    pop()\nelse:\n    print(""You have entered invalid option !!!!"")\n\n\n\n'"
src/list_functions1.py,0,"b'# Passing the entire list as a parameter to the function\r\nlist1 = [1, 2, 3, 4, 5, 6]\r\n\r\ndef func1(l1):\r\n    for item1 in list1:\r\n        print(item1)\r\n\r\nfunc1(list1)\r\n\r\n# Generating the list using a range function\r\n\r\n# range (stop)\r\nlist2 = range(5)\r\nprint(list2)\r\n\r\n# range (start, stop)\r\nlist3 = range(1, 10)\r\nprint(list3)\r\n\r\n#range (start, step, stop)\r\nlist4 = range(2, 10, 20)\r\nprint(list4)\r\n\r\n# range function are innutable, they cannot be modified\r\n\r\n# Using range function in a for loop\r\n\r\nlist5 = [1, 3, 5, 7]\r\n\r\ndef fun2(l2):\r\n    for item3 in range(0, 4):\r\n        print(l2[item3])\r\n\r\nfun2(list5)\r\n\r\n# Modifying the list using the range function\r\n\r\nlist6 = [1, 2, 3, 4, 5]\r\n\r\ndef modify(list):\r\n    for item4 in range(0, 5):\r\n        list[item4] = list[item4] + 5\r\n        print(list[item4])\r\n\r\nmodify(list6)\r\n\r\n# Passing multiple lists into the function\r\n\r\nlist7 = [1, 2, 3]\r\nlist8 = [4, 5, 6]\r\n\r\ndef multiple(a, b):\r\n    print(a, b)\r\n\r\nmultiple(list7, list8 )\r\n\r\n# Iterating through a list of list using a function\r\n\r\nlistoflist = [[1, 2, 3], [4, 5, 6]]\r\n\r\ndef makeOneList (a):\r\n    bothLists = []\r\n    for item in a:\r\n        for element in item:\r\n            bothLists.append(element)\r\n    print(bothLists)\r\n\r\nmakeOneList(listoflist)'"
src/lists_and_functions.py,0,"b'# passing a list as a parameter to a function\r\nlist = [""Tanu"", ""Nanda"", ""Prabhu""]\r\n\r\ndef call_list(li):\r\n    return  li\r\n\r\nprint(call_list(list))\r\nprint(call_list(list[2]))\r\n\r\n# Accessing an element in a list using a function\r\n\r\nlist2 = [1, 2, 3, 4, 5]\r\n\r\ndef listing(li1):\r\n    return li1\r\n\r\nprint(listing(list2[1]))\r\n\r\n# Modifing a list value in a function\r\n\r\nlist3 = [4, 3, 2, 1, 0]\r\n\r\ndef modify(l1):\r\n    return l1[1]+1\r\n\r\nprint(modify(list3))\r\n\r\n# Manipulating the list using the functions\r\n\r\nlist4 = [1, 1, 3, 8]\r\n\r\ndef list_manip(li):\r\n    li.remove(3)\r\n    li.insert(2,4)\r\n    return li\r\n\r\nprint(list_manip(list4))'"
src/numpy_examples.py,9,"b'import numpy as np\r\n\r\n# For arrays of 3 zeros\r\na = np.zeros(3)\r\nprint(a)\r\nprint(type(a[0])) # Indicates that a is of float type and the values inside it is of type float\r\n\r\n\r\n# For arrays of 10 zeros\r\nb = np.zeros(10)\r\nprint(b)\r\n\r\n# For looking to the shape of the array\r\nprint(b.shape)\r\n\r\n# changing the shape of the array from 10 to 1\r\n\r\nb.shape = (10, 1)\r\nprint(b)\r\n\r\n# changing the zeros to ones\r\nc = np.ones(5)\r\nprint(c)\r\n\r\n# Using line space\r\nd = np.linspace(2, 10, 5)\r\nprint(d)\r\n\r\n# another way to create an array\r\ne = np.array([10, 20])\r\nprint(e)\r\nprint(type(e))\r\n\r\n# also we can add a list in a array\r\nlist = [1, 2, 3, 4, 5]\r\nf = np.array([list])\r\nprint(f)\r\n\r\n# creating a two dimension array\r\nlist2 = [[1, 2, 3, 4],[5, 6, 7,]]\r\n\r\ng = np.array([list2])\r\nprint(g)\r\n\r\n# creating a random array using random()\r\n\r\nnp.random.seed(0) # if you remove this line then, you can rerun the code and check that the random array is same.\r\n\r\nh = np.random.randint(10, size=6)\r\nprint(h)\r\nprint(h[-1]) # gets the last element of the array'"
src/panda_examples.py,2,"b""import pandas as pd\r\nimport numpy as np\r\n\r\n# There are three datastructures in panda\r\n# 1. Series ==> They are a 1-D Matrix\r\n# 2. DataFrame ==> They are a 2-D Matrix\r\n# 3. Panel ==> They are a 3-D Matrix\r\n\r\n\r\n# Creating a Series Datastructure\r\na = [1, 2, 3, 4, 5]\r\nseries = pd.Series(a)\r\nprint(series)\r\n\r\n# Creating the Dataframe Datastructure\r\nb = [['Ashika', 24], ['Tanu', 23], ['Ashwin', 22],['Mohith', 16], ['Sourabh', 10]]\r\ndataframe = pd.DataFrame(b, columns= ['Name', 'Age'], dtype= int)\r\nprint(dataframe)\r\n\r\n# Creating the Panel Datastructure\r\ndata = {'Item1' : pd.DataFrame(np.random.randn(4, 3)),\r\n   'Item2' : pd.DataFrame(np.random.randn(4, 2))}\r\np = pd.Panel(data)\r\nprint(p.minor_xs(1))\r\n\r\n"""
src/tuples.py,0,"b'tuple1 = (1, ""Hi"", True, 8.999)\n\nprint(tuple1)\n\ntupleEmpty = ()\nprint(tupleEmpty)\n\n# Accessing the tuple by Index\n\ntuple2 = (1, 2, 3, 4, 5)\n\nprint(tuple2[4])\nprint(tuple2[1])\n\n# Slicing the tuples\n\nprint(tuple2[1:3])\nprint(tuple2[:3])\n'"
src/using_%s_format_operator.py,0,"b'name = ""Tanu""\nlastname = ""Nanda_Prabhu""\nheight = 6.1\n\nprint(""The name of the developer is %s %s and his height is %0.1f"" %(name, lastname, height))\n'"
src/variables.py,0,b'variableNamesCannotBeginWithANumber = True\nboolean = True\nposInt = 2\nzero = 0\nnegFloat = -1\ninitial = 3\ninitial = 4\nprint(initial)\n'
src/variables1.py,0,"b'""""""\ncomments practice:\n1.create a single line comment\n2.create a multiple line comment\n""""""\n\n# Hi this me\n\n""""""\nThis is me\n""""""\n\n""""""\nbasic mathematical operators practice:\n1.create a variable called add and assign it the sum of two numbers\n2.create a variable called sub and assign it the difference of two numbers\n3.create a variable called mult and assign it the product of two numbers\n4.create a variable called div and assign it the quotient of two numbers\n5.create a variable called power and assign it the value of a number raised to a power\n6.create a variable called mod and assign it the emainder of a quotient\n""""""\nadd = 5+6\nprint(add)\n\nsub = 7-6\nprint(sub)\n\nmult = 9*8\nprint(mult)\n\ndiv = 10/2\nprint(div)\n\npower = 5**6\nprint(power)\n\nmod = 9%4\nprint(mod)\n""""""\nmodulo practice:\n1.create a variable called mod1 and assign it the result of 7 % 5\n2.create a variable called mod2 and assign it the result of 16 % 6\n3.create a variable called mod3 and assign it the result of 4 % 3\n""""""\nmod1 = 7%5\nprint(mod1)\n\nmod2 = 16%6\nprint(mod2)\n\nmod3 = 4%3\nprint(mod3)\n""""""\norder of operations practice:\n1.create and assign a variable called ordOp1 the result of 7 + 6 + 9 - 4 * ((9 - 2) ** 2) / 7\n2.create and assign a variable called ordOp2 the result of (6 % 4 * (7 + (7 + 2) * 3)) ** 2\n""""""\n\nordOp1 = 7 + 6 + 9 - 4 * ((9 - 2) ** 2) / 7\nprint(ordOp1)\n\nordOp2 = (6 % 4 * (7 + (7 + 2) * 3)) ** 2\nprint(ordOp2)\n'"
