file_path,api_count,code
PLUTOdata.py,19,"b'import pyPLUTO as pp\nimport numpy as np\nimport os\nimport sys\nimport matplotlib\n# Force matplotlib to not use any Xwindows backend.\nmatplotlib.use(\'Agg\')\nimport matplotlib.pyplot as plt\n\n\nt0=1000000000.0\nsecond_to_yrs=3.17e-8\ncwd=os.getcwd()\nwdir=cwd+\'/\'\noutdir=cwd[cwd.rfind(\'/\')+1:]\nprint wdir,outdir\nnlinf = pp.nlast_info(w_dir=wdir)\nD=pp.pload(0,w_dir=wdir)\nPRS=D.prs\nRHO=D.rho\nX=D.x1\nY=D.x2\nVx=D.vx1\nVy=D.vx2 if \'vx2\' in D.vars else 0.\nBx=D.bx1 if \'bx1\' in D.vars else 0.\nBy=D.bx2 if \'bx2\' in D.vars else 0.\nx_HI=D.X_HI if \'X_HI\' in D.vars else 0.\nx_HII=D.X_HII if \'X_HII\' in D.vars else 0 \nx_H2=D.X_H2 if \'X_H2\' in D.vars else 0 \nT=D.SimTime\nprint nlinf\nfor t in range(1,nlinf[\'nlast\']+1):\n\tD=pp.pload(t,w_dir=wdir)\n\tPRS=np.dstack((PRS,D.prs))\n\tRHO=np.dstack((RHO,D.rho))\n\tVx=np.dstack((Vx,D.vx1))\n\tVy=np.dstack((Vy,D.vx2))\n\tBx=np.dstack((Bx,D.bx1)) if \'bx1\' in D.vars else 0.\n\tBy=np.dstack((By,D.bx2)) if \'bx2\' in D.vars else 0.\n\tx_HI=np.dstack((x_HI,D.X_HI)) if \'X_HI\' in D.vars else 0.\n\tx_HII=np.dstack((x_HII,D.X_HII)) if \'X_HII\' in D.vars else 0.\n\tx_H2=np.dstack((x_H2,D.X_H2)) if \'X_H2\' in D.vars else 0.\n\tT=np.append(T,D.SimTime)\n\t\nnp.savez_compressed(outdir,RHO=RHO,PRS=PRS,Vx=Vx,Vy=Vy,Bx=Bx,By=By,X=X,Y=Y,x_HI=x_HI,x_HII=x_HII,x_H2=x_H2,T=T*t0*second_to_yrs)\n\nTemper = PRS*10891304347826.088/RHO\nprint RHO.min(),RHO.max()\nprint PRS.min(),PRS.max()\nprint Temper.min(),Temper.max()\n#################################################################\n#Temp0=10891304347826.088\n#VAR=np.log10(PRS*Temp0/RHO) #Temperature\n#VAR=np.log10(np.copy(RHO)) #RHO\n#VAR=2.0*x_H2+x_HI+x_HII #SUM\n#VAR=x_HI+x_HII \n#VAR=2.0*x_H2\n#VAR=np.log10(RHO)\ndef quad(VAR,Save_Figure,cl=\'\',rows=2,cols=2,nn=0,tdk=\'kyrs\'):\n\n\tTT=np.linspace(0,T.shape[0]-1,rows*cols,dtype=int)\n\tfig, axes = plt.subplots(nrows=rows, ncols=cols, sharex=True, sharey=True,\n\t\t            figsize=(cols*5,rows*5))\n\ti=0\n\ttd=1e3 if tdk==\'kyrs\' else 1e6 if tdk==\'Myrs\' else 1.\n\tfor ax in axes.flat:\n\t\text=[X.min(),X.max(),Y.min(),Y.max()]\n\t\tax.get_yaxis().get_major_formatter().set_useOffset(False)\n\t\tax.add_artist(plt.Circle((0, 0), 1.0, color=\'r\',fill=False,linestyle=\'--\'))\n\t\tlabel = \'{:.1f} {}\'.format(T[TT[i]]/td,tdk)\n\t\tax.set_title(label,fontsize=20)\n\t\tax.grid(False)\n\t\tpc = ax.imshow(VAR[:,:,TT[i]].T,cmap=\'viridis\',origin=\'lower\',aspect=\'equal\',\n\t\t\t       extent=ext,vmin=VAR.min(),vmax=VAR.max())\n\t\tif nn>0:\n\t\t    k=nn #distance from boundaries for first/last arrows\n\t\t    q=pc.axes.quiver(X[k:-k:nn],Y[k:-k:nn],\n\t\t\t\t    Vx[:,:,TT[i]][k:-k:nn,k:-k:nn].T,\n\t\t\t\t    Vy[:,:,TT[i]][k:-k:nn,k:-k:nn].T,\n\t\t\t\t     scale=1e-4,alpha=0.5,width=0.002)\n\t\t    pc.axes.quiverkey(q,0.02,1.02,3.36e-6,r\'$1\\si{km.s^{-1}}$\',labelpos=\'E\',\n\t\t\t   fontproperties={\'weight\': \'bold\'})\n\t\ti=i+1\n\tplt.tight_layout()\n\tcbar_ax = fig.add_axes([0., 1.015, 1., 0.025*(np.float(cols)/rows)])#*(np.float(cols)/rows)\n\tcb=fig.colorbar(pc, cax=cbar_ax,orientation=""horizontal"",label=cl)\n\tcb.ax.tick_params(labelsize=17)\n\tcb.ax.xaxis.offsetText.set(size=20)\n\tcb.ax.xaxis.set_ticks_position(\'top\')\n\tcb.ax.xaxis.set_label_position(\'top\')\n\tfig.savefig(Save_Figure,bbox_inches=\'tight\')\n\nquad(np.log10(RHO),\'RHO\',rows=4,tdk=\'yrs\')\nquad(np.log10(PRS),\'PRS\')\nquad(2.0*x_H2+x_HI+x_HII ,\'sum\')\nquad(2.0*x_H2,\'H2\')\nquad(x_HI,\'HI\')\nquad(x_HII,\'HII\')\nquad(np.log10(Temper),\'Temperature\')\n'"
