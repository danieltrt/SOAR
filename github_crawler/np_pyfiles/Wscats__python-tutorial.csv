file_path,api_count,code
flask/server.py,0,"b""from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\n@app.route('/hello')\ndef hello():\n    return 'wscats'\n\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n# \xe7\xa1\xae\xe4\xbf\x9d\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\x8f\xaa\xe4\xbc\x9a\xe5\x9c\xa8\xe8\xaf\xa5\xe8\x84\x9a\xe6\x9c\xac\xe8\xa2\xab Python \xe8\xa7\xa3\xe9\x87\x8a\xe5\x99\xa8\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe6\x89\x8d\xe4\xbc\x9a\xe8\xbf\x90\xe8\xa1\x8c\nif __name__ == '__main__':\n    app.run()"""
flask/server1.py,0,"b""from flask import Flask,url_for\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\n@app.route('/hello')\ndef hello():\n    return 'wscats'\n\n@app.route('/user/<username>')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return 'User %s' % username\n\n# static file\nwith app.test_request_context():\n    print url_for('index')\n    print url_for('login')\n    print url_for('login', next='/')\n    print url_for('profile', username='John Doe')\n\nif __name__ == '__main__':\n    app.run()"""
ftp/ftp.py,0,"b""#coding=utf-8\nfrom ftplib import FTP\n#\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x98\xe9\x87\x8f\nftp = FTP()\n\ntimeout = 30  \nport = 21\n\n# \xe8\xbf\x9e\xe6\x8e\xa5FTP\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\nftp.connect('yuanxiaobo.gotoftp5.com',port,timeout)\n# \xe7\x99\xbb\xe5\xbd\x95\nftp.login('yuanxiaobo','19870616yxb')\n\n# \xe8\x8e\xb7\xe5\xbe\x97\xe6\xac\xa2\xe8\xbf\x8e\xe4\xbf\xa1\xe6\x81\xaf\nprint ftp.getwelcome()\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6,\xe8\x8e\xb7\xe5\xbe\x97\xe7\x9b\xae\xe5\xbd\x95\xe5\x88\x97\xe8\xa1\xa8\nlist = ftp.nlst()\nfor name in list:  \n    print name\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\nname = 'abc.txt'\npath = './' + name\n# \xe6\x89\x93\xe5\xbc\x80\xe8\xa6\x81\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\nf = open(path,'wb')\n# \xe4\xbf\x9d\xe5\xad\x98FTP\xe6\x96\x87\xe4\xbb\xb6\nfilename = 'RETR ' + name\n# \xe4\xbf\x9d\xe5\xad\x98FTP\xe4\xb8\x8a\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\nftp.retrbinary(filename,f.write)\n\n# \xe5\x88\xa0\xe9\x99\xa4FTP\xe6\x96\x87\xe4\xbb\xb6\n# ftp.delete(name)\n\n# \xe4\xb8\x8a\xe4\xbc\xa0FTP\xe6\x96\x87\xe4\xbb\xb6\n# ftp.storbinary('STOR test.txt', open(path, 'rb'))\n# ftp.quit()"""
numpy/function.py,8,"b'import numpy as np\n#arr = np.arange(14).reshape(2, 7)\n#arr = np.arange(15)\n#arr = np.zeros([3,4,6])\narr = np.random.random((2, 2, 3))\n#arr = np.random.rand(2, 2, 3)\n#arr = np.random.rand(2, 2, 3)\n#arr = np.ones((2,3,4), dtype=np.int32)\n#arr = np.random.randint(0, 2, 10)\nprint(arr)\n'"
numpy/loop.py,0,"b""animals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print(animal)\n\nanimals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\n    print(idx + 1, animal)\n"""
numpy/numpy.py,0,"b'# -*- coding: utf-8 -*-\n\nimport numpy;\nimport matplotlib.pyplot as plt\nimport pylab\n\nprint \'\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x97\xe8\xa1\xa8\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\'\ndata = [1,2,3,4,5,6]\nx = numpy.array(data)\nprint x #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\nprint x.dtype #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe5\x85\x83\xe7\xb4\xa0\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\n\nprint \'\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x97\xe8\xa1\xa8\xe7\x94\x9f\xe6\x88\x90\xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\'\ndata = [[1,2],[3,4],[5,6]]\nx = numpy.array(data)\nprint x #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\nprint x.ndim #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\nprint x.shape #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe3\x80\x82shape\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xbb\x84\n\nprint \'\xe4\xbd\xbf\xe7\x94\xa8zero/ones/empty\xe5\x88\x9b\xe5\xbb\xba\xe6\x95\xb0\xe7\xbb\x84:\xe6\xa0\xb9\xe6\x8d\xaeshape\xe6\x9d\xa5\xe5\x88\x9b\xe5\xbb\xba\'\nx = numpy.zeros(6) #\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba6\xe7\x9a\x84\xef\xbc\x8c\xe5\x85\x83\xe7\xb4\xa0\xe9\x83\xbd\xe6\x98\xaf0\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\nprint x\nx = numpy.zeros((2,3)) #\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba2\xef\xbc\x8c\xe4\xba\x8c\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba3\xe7\x9a\x84\xe4\xba\x8c\xe7\xbb\xb40\xe6\x95\xb0\xe7\xbb\x84\nprint x\nx = numpy.ones((2,3)) #\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba2\xef\xbc\x8c\xe4\xba\x8c\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba3\xe7\x9a\x84\xe4\xba\x8c\xe7\xbb\xb41\xe6\x95\xb0\xe7\xbb\x84\nprint x\nx = numpy.empty((3,3)) #\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba2\xef\xbc\x8c\xe4\xba\x8c\xe7\xbb\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba3,\xe6\x9c\xaa\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x9a\x84\xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\nprint x\n\nprint \'\xe4\xbd\xbf\xe7\x94\xa8arrange\xe7\x94\x9f\xe6\x88\x90\xe8\xbf\x9e\xe7\xbb\xad\xe5\x85\x83\xe7\xb4\xa0\'\nprint numpy.arange(6) # [0,1,2,3,4,5,] \xe5\xbc\x80\xe5\x8c\xba\xe9\x97\xb4\nprint numpy.arange(0,6,2)  # [0, 2\xef\xbc\x8c4]\n\nprint \'\xe7\x94\x9f\xe6\x88\x90\xe6\x8c\x87\xe5\xae\x9a\xe5\x85\x83\xe7\xb4\xa0\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84:\xe8\xae\xbe\xe7\xbd\xaedtype\xe5\xb1\x9e\xe6\x80\xa7\'\nx = numpy.array([1,2.6,3],dtype = numpy.int64)\nprint x # \xe5\x85\x83\xe7\xb4\xa0\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xbaint64\nprint x.dtype\nx = numpy.array([1,2,3],dtype = numpy.float64)\nprint x # \xe5\x85\x83\xe7\xb4\xa0\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xbafloat64\nprint x.dtype\n\nprint \'\xe4\xbd\xbf\xe7\x94\xa8astype\xe5\xa4\x8d\xe5\x88\xb6\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe5\xb9\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe7\xb1\xbb\xe5\x9e\x8b\'\nx = numpy.array([1,2.6,3],dtype = numpy.float64)\ny = x.astype(numpy.int32)\nprint y # [1 2 3]\nprint x # [ 1.   2.6  3. ]\nz = y.astype(numpy.float64)\nprint z # [ 1.  2.  3.]\n\nprint \'\xe5\xb0\x86\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x85\x83\xe7\xb4\xa0\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe6\x95\xb0\xe5\x80\xbc\xe5\x85\x83\xe7\xb4\xa0\'\nx = numpy.array([\'1\',\'2\',\'3\'],dtype = numpy.string_)\ny = x.astype(numpy.int32)\nprint x # [\'1\' \'2\' \'3\']\nprint y # [1 2 3] \xe8\x8b\xa5\xe8\xbd\xac\xe6\x8d\xa2\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xbc\x9a\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\n\nprint \'\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe4\xbb\x96\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\'\nx = numpy.array([ 1., 2.6,3. ],dtype = numpy.float32);\ny = numpy.arange(3,dtype=numpy.int32);\nprint y # [0 1 2]\nprint y.astype(x.dtype) # [ 0.  1.  2.]\n\n\nprint \'ndarray\xe6\x95\xb0\xe7\xbb\x84\xe4\xb8\x8e\xe6\xa0\x87\xe9\x87\x8f/\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe8\xbf\x90\xe7\xae\x97\'\nx = numpy.array([1,2,3]) \nprint x*2 # [2 4 6]\nprint x>2 # [False False  True]\ny = numpy.array([3,4,5])\nprint x+y # [4 6 8]\nprint x>y # [False False False]\n\nprint \'ndarray\xe7\x9a\x84\xe5\x9f\xba\xe6\x9c\xac\xe7\xb4\xa2\xe5\xbc\x95\'\nx = numpy.array([[1,2],[3,4],[5,6]])\nprint x[0] # [1,2]\nprint x[0][1] # 2,\xe6\x99\xae\xe9\x80\x9apython\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\nprint x[0,1] # \xe5\x90\x8cx[0][1]\xef\xbc\x8cndarray\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\nx = numpy.array([[[1, 2], [3,4]], [[5, 6], [7,8]]])\nprint x[0] # [[1 2],[3 4]]\ny = x[0].copy() # \xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\x89\xaf\xe6\x9c\xac\nz = x[0] # \xe6\x9c\xaa\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\x89\xaf\xe6\x9c\xac\nprint y #  [[1 2],[3 4]]\nprint y[0,0] # 1\ny[0,0] = 0 \nz[0,0] = -1\nprint y # [[0 2],[3 4]]\nprint x[0] # [[-1 2],[3 4]]\nprint z # [[-1 2],[3 4]]\n\nprint \'ndarray\xe7\x9a\x84\xe5\x88\x87\xe7\x89\x87\'\nx = numpy.array([1,2,3,4,5])\nprint x[1:3] # [2,3] \xe5\x8f\xb3\xe8\xbe\xb9\xe5\xbc\x80\xe5\x8c\xba\xe9\x97\xb4\nprint x[:3] # [1,2,3] \xe5\xb7\xa6\xe8\xbe\xb9\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba 0\nprint x[1:] # [2,3,4,5] \xe5\x8f\xb3\xe8\xbe\xb9\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\nprint x[0:4:2] # [1,3] \xe4\xb8\x8b\xe6\xa0\x87\xe9\x80\x92\xe5\xa2\x9e2\nx = numpy.array([[1,2],[3,4],[5,6]])\nprint x[:2] # [[1 2],[3 4]]\nprint x[:2,:1] # [[1],[3]]\nx[:2,:1] = 0 \nprint x # [[0,2],[0,4],[5,6]]\nx[:2,:1] = [[8],[6]]\nprint x # [[8,2],[6,4],[5,6]]\n\nprint \'ndarray\xe7\x9a\x84\xe5\xb8\x83\xe5\xb0\x94\xe5\x9e\x8b\xe7\xb4\xa2\xe5\xbc\x95\'\nx = numpy.array([3,2,3,1,3,0])\n# \xe5\xb8\x83\xe5\xb0\x94\xe5\x9e\x8b\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\xbf\x85\xe9\xa1\xbb\xe8\xb7\x9f\xe8\xa2\xab\xe7\xb4\xa2\xe5\xbc\x95\xe7\x9a\x84\xe8\xbd\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x80\xe8\x87\xb4\ny = numpy.array([True,False,True,False,True,False]) \nprint x[y] # [3,3,3] \nprint x[y==False] # [2,1,0]\nprint x>=3 # [ True False  True False  True  False]\nprint x[~(x>=3)] # [2,1,0]\nprint (x==2)|(x==1) # [False  True False  True False False]\nprint x[(x==2)|(x==1)] # [2 1]\nx[(x==2)|(x==1)] = 0\nprint x # [3 0 3 0 3 0]\n\nprint \'ndarray\xe7\x9a\x84\xe8\x8a\xb1\xe5\xbc\x8f\xe7\xb4\xa2\xe5\xbc\x95:\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb4\xe5\x9e\x8b\xe6\x95\xb0\xe7\xbb\x84\xe4\xbd\x9c\xe4\xb8\xba\xe7\xb4\xa2\xe5\xbc\x95\'\nx = numpy.array([1,2,3,4,5,6])\nprint x[[0,1,2]] # [1 2 3]\nprint x[[-1,-2,-3]] # [6,5,4]\nx = numpy.array([[1,2],[3,4],[5,6]])\nprint x[[0,1]] # [[1,2],[3,4]]\nprint x[[0,1],[0,1]] # [1,4] \xe6\x89\x93\xe5\x8d\xb0x[0][0]\xe5\x92\x8cx[1][1]\nprint x[[0,1]][:,[0,1]] # \xe6\x89\x93\xe5\x8d\xb001\xe8\xa1\x8c\xe7\x9a\x8401\xe5\x88\x97 [[1,2],[3,4]]\n# \xe4\xbd\xbf\xe7\x94\xa8numpy.ix_()\xe5\x87\xbd\xe6\x95\xb0\xe5\xa2\x9e\xe5\xbc\xba\xe5\x8f\xaf\xe8\xaf\xbb\xe6\x80\xa7\nprint x[numpy.ix_([0,1],[0,1])] #\xe5\x90\x8c\xe4\xb8\x8a \xe6\x89\x93\xe5\x8d\xb001\xe8\xa1\x8c\xe7\x9a\x8401\xe5\x88\x97 [[1,2],[3,4]]\nx[[0,1],[0,1]] = [0,0]\nprint x # [[0,2],[3,0],[5,6]]\n\nprint \'ndarray\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe8\xbd\xac\xe7\xbd\xae\xe5\x92\x8c\xe8\xbd\xb4\xe5\xaf\xb9\xe6\x8d\xa2\'\nk = numpy.arange(9) #[0,1,....8]\nm = k.reshape((3,3)) # \xe6\x94\xb9\xe5\x8f\x98\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84shape\xe5\xa4\x8d\xe5\x88\xb6\xe7\x94\x9f\xe6\x88\x902\xe7\xbb\xb4\xe7\x9a\x84\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba3\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\nprint k # [0 1 2 3 4 5 6 7 8]\nprint m # [[0 1 2] [3 4 5] [6 7 8]]\n# \xe8\xbd\xac\xe7\xbd\xae(\xe7\x9f\xa9\xe9\x98\xb5)\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x9aT\xe5\xb1\x9e\xe6\x80\xa7 : mT[x][y] = m[y][x]\nprint m.T # [[0 3 6] [1 4 7] [2 5 8]]\n# \xe8\xae\xa1\xe7\xae\x97\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe5\x86\x85\xe7\xa7\xaf xTx\nprint numpy.dot(m,m.T) # numpy.dot\xe7\x82\xb9\xe4\xb9\x98\n# \xe9\xab\x98\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe8\xbd\xb4\xe5\xaf\xb9\xe8\xb1\xa1\nk = numpy.arange(8).reshape(2,2,2)\nprint k # [[[0 1],[2 3]],[[4 5],[6 7]]]\nprint k[1][0][0]\n# \xe8\xbd\xb4\xe5\x8f\x98\xe6\x8d\xa2 transpose \nm = k.transpose((1,0,2)) # m[y][x][z] = k[x][y][z]\nprint m # [[[0 1],[4 5]],[[2 3],[6 7]]]\nprint m[0][1][0]\n# \xe8\xbd\xb4\xe4\xba\xa4\xe6\x8d\xa2 swapaxes (axes\xef\xbc\x9a\xe8\xbd\xb4)\nm = k.swapaxes(0,1) # \xe5\xb0\x86\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbd\xb4\xe5\x92\x8c\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe8\xbd\xb4\xe4\xba\xa4\xe6\x8d\xa2 m[y][x][z] = k[x][y][z]\nprint m # [[[0 1],[4 5]],[[2 3],[6 7]]]\nprint m[0][1][0]\n# \xe4\xbd\xbf\xe7\x94\xa8\xe8\xbd\xb4\xe4\xba\xa4\xe6\x8d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe7\xbb\x84\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbd\xac\xe7\xbd\xae\nm = numpy.arange(9).reshape((3,3))\nprint m # [[0 1 2] [3 4 5] [6 7 8]]\nprint m.swapaxes(1,0) # [[0 3 6] [1 4 7] [2 5 8]]\n\nprint \'\xe4\xb8\x80\xe5\x85\x83ufunc\xe7\xa4\xba\xe4\xbe\x8b\'\nx = numpy.arange(6)\nprint x # [0 1 2 3 4 5]\nprint numpy.square(x) # [ 0  1  4  9 16 25]\nx = numpy.array([1.5,1.6,1.7,1.8])\ny,z = numpy.modf(x)\nprint y # [ 0.5  0.6  0.7  0.8]\nprint z # [ 1.  1.  1.  1.]\n\nprint \'\xe4\xba\x8c\xe5\x85\x83ufunc\xe7\xa4\xba\xe4\xbe\x8b\'\nx = numpy.array([[1,4],[6,7]])\ny = numpy.array([[2,3],[5,8]])\nprint numpy.maximum(x,y) # [[2,4],[6,8]]\nprint numpy.minimum(x,y) # [[1,3],[5,7]]\n\nprint \'where\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\'\ncond = numpy.array([True,False,True,False])\nx = numpy.where(cond,-2,2)\nprint x # [-2  2 -2  2]\ncond = numpy.array([1,2,3,4])\nx = numpy.where(cond>2,-2,2)\nprint x # [ 2  2 -2 -2]\ny1 = numpy.array([-1,-2,-3,-4])\ny2 = numpy.array([1,2,3,4])\nx = numpy.where(cond>2,y1,y2) # \xe9\x95\xbf\xe5\xba\xa6\xe9\xa1\xbb\xe5\x8c\xb9\xe9\x85\x8d\nprint x # [1,2,-3,-4]\nprint \'where\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe5\xb5\x8c\xe5\xa5\x97\xe4\xbd\xbf\xe7\x94\xa8\'\ny1 = numpy.array([-1,-2,-3,-4,-5,-6])\ny2 = numpy.array([1,2,3,4,5,6])\ny3 = numpy.zeros(6)\ncond = numpy.array([1,2,3,4,5,6])\nx = numpy.where(cond>5,y3,numpy.where(cond>2,y1,y2))\nprint x # [ 1.  2. -3. -4. -5.  0.]\n\nprint \'numpy\xe7\x9a\x84\xe5\x9f\xba\xe6\x9c\xac\xe7\xbb\x9f\xe8\xae\xa1\xe6\x96\xb9\xe6\xb3\x95\'\nx = numpy.array([[1,2],[3,3],[1,2]]) #\xe5\x90\x8c\xe4\xb8\x80\xe7\xbb\xb4\xe5\xba\xa6\xe4\xb8\x8a\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\xe9\x95\xbf\xe5\xba\xa6\xe9\xa1\xbb\xe4\xb8\x80\xe8\x87\xb4\nprint x.mean() # 2\nprint x.mean(axis=1) # \xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe8\xa1\x8c\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe6\xb1\x82\xe5\xb9\xb3\xe5\x9d\x87\nprint x.mean(axis=0) # \xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe5\x88\x97\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe6\xb1\x82\xe5\xb9\xb3\xe5\x9d\x87\nprint x.sum() #\xe5\x90\x8c\xe7\x90\x86 12\nprint x.sum(axis=1) # [3 6 3]\nprint x.max() # 3\nprint x.max(axis=1) # [2 3 2]\nprint x.cumsum() # [ 1  3  6  9 10 12]\nprint x.cumprod() # [ 1  2  6 18 18 36]\nprint \'\xe7\x94\xa8\xe4\xba\x8e\xe5\xb8\x83\xe5\xb0\x94\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe7\xbb\x9f\xe8\xae\xa1\xe6\x96\xb9\xe6\xb3\x95\'\nx = numpy.array([[True,False],[True,False]])\nprint x.sum() # 2\nprint x.sum(axis=1) # [1,1]\nprint x.any(axis=0) # [True,False]\nprint x.all(axis=1) # [False,False]\nprint \'.sort\xe7\x9a\x84\xe5\xb0\xb1\xe5\x9c\xb0\xe6\x8e\x92\xe5\xba\x8f\'\nx = numpy.array([[1,6,2],[6,1,3],[1,5,2]])\nx.sort(axis=1) \nprint x # [[1 2 6] [1 3 6] [1 2 5]]\n#\xe9\x9d\x9e\xe5\xb0\xb1\xe5\x9c\xb0\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x9anumpy.sort()\xe5\x8f\xaf\xe4\xba\xa7\xe7\x94\x9f\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe5\x89\xaf\xe6\x9c\xac\n\nprint \'ndarray\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe5\x8c\x96\xe5\x92\x8c\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x90\xe7\xae\x97\'\nx = numpy.array([[1,6,2],[6,1,3],[1,5,2]])\nprint numpy.unique(x) # [1,2,3,5,6]\ny = numpy.array([1,6,5])\nprint numpy.in1d(x,y) # [ True  True False  True  True False  True  True False]\nprint numpy.setdiff1d(x,y) # [2 3]\nprint numpy.intersect1d(x,y) # [1 5 6]\n\n\nprint \'ndarray\xe7\x9a\x84\xe5\xad\x98\xe5\x8f\x96\'\nx = numpy.array([[1,6,2],[6,1,3],[1,5,2]])\nnumpy.save(\'file1\',x) #\xe4\xbb\xa5\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6.npy\xe4\xbf\x9d\xe5\xad\x98\nnumpy.savetxt(\'filetxt\',x,delimiter=\',\') # \xe4\xbb\xa5\xe6\x96\x87\xe6\x9c\xac\xe4\xbf\x9d\xe5\xad\x98\ny = numpy.load(\'file1.npy\')\nprint y #  [[1 6 2] [6 1 3] [1 5 2]]\ny = numpy.loadtxt(\'filetxt\',delimiter=\',\') # delimiter\xe4\xb8\xba\xe5\x88\x86\xe9\x9a\x94\xe7\xac\xa6\nprint y #  [[1 6 2] [6 1 3] [1 5 2]]\n# \xe5\x8e\x8b\xe7\xbc\xa9\xe4\xbf\x9d\xe5\xad\x98\nnumpy.savez(\'filezip\',a=x,b=y)\nprint numpy.load(\'filezip.npz\')[\'a\'] # \xe6\x8c\x89\xe5\xad\x97\xe5\x85\xb8\xe7\xb4\xa2\xe5\xbc\x95  [[1 6 2] [6 1 3] [1 5 2]]\n\nprint \'\xe7\xba\xbf\xe6\x80\xa7\xe4\xbb\xa3\xe6\x95\xb0\'\nimport numpy.linalg as nla\nprint \'\xe7\x9f\xa9\xe9\x98\xb5\xe7\x82\xb9\xe4\xb9\x98\'\nx = numpy.array([[1,2],[3,4]])\ny = numpy.array([[1,3],[2,4]])\nprint x.dot(y) # [[ 5 11][11 25]]\nprint numpy.dot(x,y) # # [[ 5 11][11 25]]\nprint \'\xe7\x9f\xa9\xe9\x98\xb5\xe6\xb1\x82\xe9\x80\x86\'\nx = numpy.array([[1,1],[1,2]])\ny = nla.inv(x) # \xe7\x9f\xa9\xe9\x98\xb5\xe6\xb1\x82\xe9\x80\x86\xef\xbc\x88\xe8\x8b\xa5\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe9\x80\x86\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x89\nprint x.dot(y) # \xe5\x8d\x95\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5 [[ 1.  0.][ 0.  1.]]\nprint nla.det(x) # \xe6\xb1\x82\xe8\xa1\x8c\xe5\x88\x97\xe5\xbc\x8f\n\nprint \'numpy.random\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe7\x94\x9f\xe6\x88\x90\'\nimport numpy.random as npr\n\nx = npr.randint(0,2,size=100000) #\xe6\x8a\x9b\xe7\xa1\xac\xe5\xb8\x81\nprint (x>0).sum() # \xe6\xad\xa3\xe9\x9d\xa2\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\nprint npr.normal(size=(2,2)) #\xe6\xad\xa3\xe6\x80\x81\xe5\x88\x86\xe5\xb8\x83\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe6\x95\xb0\xe7\xbb\x84 shape = (2,2)\n\n\nprint \'ndarray\xe6\x95\xb0\xe7\xbb\x84\xe9\x87\x8d\xe5\xa1\x91\'\nx = numpy.arange(0,6) #[0 1 2 3 4]\nprint x #[0 1 2 3 4]\nprint x.reshape((2,3)) # [[0 1 2][3 4 5]]\nprint x #[0 1 2 3 4]\nprint x.reshape((2,3)).reshape((3,2)) # [[0 1][2 3][4 5]]\ny = numpy.array([[1,1,1],[1,1,1]])\nx = x.reshape(y.shape)\nprint x # [[0 1 2][3 4 5]]\nprint x.flatten() # [0 1 2 3 4 5]\nx.flatten()[0] = -1 # flatten\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xaf\xe6\x8b\xb7\xe8\xb4\x9d\nprint x # [[0 1 2][3 4 5]]\nprint x.ravel() # [0 1 2 3 4 5]\nx.ravel()[0] = -1 # ravel\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xaf\xe8\xa7\x86\xe5\x9b\xbe\xef\xbc\x88\xe5\xbc\x95\xe7\x94\xa8\xef\xbc\x89 \nprint x # [[-1 1 2][3 4 5]]\nprint ""\xe7\xbb\xb4\xe5\xba\xa6\xe5\xa4\xa7\xe5\xb0\x8f\xe8\x87\xaa\xe5\x8a\xa8\xe6\x8e\xa8\xe5\xaf\xbc""\narr = numpy.arange(15)\nprint arr.reshape((5, -1)) # 15 / 5 = 3\n\nprint \'\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe5\x90\x88\xe5\xb9\xb6\xe4\xb8\x8e\xe6\x8b\x86\xe5\x88\x86\'\nx = numpy.array([[1, 2, 3], [4, 5, 6]])\ny = numpy.array([[7, 8, 9], [10, 11, 12]])\nprint numpy.concatenate([x, y], axis = 0)  # \xe7\xab\x96\xe7\x9b\xb4\xe7\xbb\x84\xe5\x90\x88 [[ 1  2  3][ 4  5  6][ 7  8  9][10 11 12]]\nprint numpy.concatenate([x, y], axis = 1)  # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xbb\x84\xe5\x90\x88 [[ 1  2  3  7  8  9][ 4  5  6 10 11 12]]\nprint \'\xe5\x9e\x82\xe7\x9b\xb4stack\xe4\xb8\x8e\xe6\xb0\xb4\xe5\xb9\xb3stack\'\nprint numpy.vstack((x, y)) # \xe5\x9e\x82\xe7\x9b\xb4\xe5\xa0\x86\xe5\x8f\xa0:\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xba\x8e\xe5\x9e\x82\xe7\x9b\xb4\xe7\xbb\x84\xe5\x90\x88\nprint numpy.hstack((x, y)) # \xe6\xb0\xb4\xe5\xb9\xb3\xe5\xa0\x86\xe5\x8f\xa0\xef\xbc\x9a\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xba\x8e\xe6\xb0\xb4\xe5\xb9\xb3\xe7\xbb\x84\xe5\x90\x88\n# dstack\xef\xbc\x9a\xe6\x8c\x89\xe6\xb7\xb1\xe5\xba\xa6\xe5\xa0\x86\xe5\x8f\xa0\nprint numpy.split(x,2,axis=0) # \xe6\x8c\x89\xe8\xa1\x8c\xe5\x88\x86\xe5\x89\xb2 [array([[1, 2, 3]]), array([[4, 5, 6]])]\nprint numpy.split(x,3,axis=1) # \xe6\x8c\x89\xe5\x88\x97\xe5\x88\x86\xe5\x89\xb2 [array([[1],[4]]), array([[2],[5]]), array([[3],[6]])]\n\nprint \'\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe9\x87\x8d\xe5\xa4\x8d\xe6\x93\x8d\xe4\xbd\x9c\'\nx = numpy.array([[1,2],[3,4]])\nprint x.repeat(2) # \xe6\x8c\x89\xe5\x85\x83\xe7\xb4\xa0\xe9\x87\x8d\xe5\xa4\x8d [1 1 2 2 3 3 4 4]\nprint x.repeat(2,axis=0) # \xe6\x8c\x89\xe8\xa1\x8c\xe9\x87\x8d\xe5\xa4\x8d [[1 2][1 2][3 4][3 4]]\nprint x.repeat(2,axis=1) # \xe6\x8c\x89\xe5\x88\x97\xe9\x87\x8d\xe5\xa4\x8d [[1 1 2 2][3 3 4 4]]\nx = numpy.array([1,2])\nprint numpy.tile(x,2)\nprint numpy.tile(x, (2, 2))  # \xe6\x8c\x87\xe5\xae\x9a\xe4\xbb\x8e\xe4\xbd\x8e\xe4\xbd\x8d\xe5\x88\xb0\xe9\xab\x98\xe4\xbd\x8d\xe4\xbe\x9d\xe6\xac\xa1\xe5\xa4\x8d\xe5\x88\xb6\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe3\x80\x82 '"
numpy/test.py,2,"b'#encoding=utf-8\n\nimport numpy as np\n\ndef main():\n    lst = [[1,2,3],[4,5,6]]\n    print(type(lst)) #\xe5\x88\x97\xe8\xa1\xa8\xe6\x95\xb0\xe6\x8d\xae\xe7\xb1\xbb\xe5\x9e\x8b\n    np_lst = np.array(lst)\n    print(np_lst) #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\n    print(type(np_lst)) #\xe7\xbb\x8f\xe8\xbf\x87numpy\xe5\xa4\x84\xe7\x90\x86\xe5\x90\x8e\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\xe7\xb1\xbb\xe5\x9e\x8b(\xe7\x9f\xa9\xe9\x98\xb5)\n    print(np_lst.shape) #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n    print(np_lst.ndim) #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\n    print(np_lst.dtype) #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe5\x85\x83\xe7\xb4\xa0\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\n    print(np_lst.itemsize) #\xe6\x89\x93\xe5\x8d\xb0\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe8\x8a\x82\xe9\x95\xbf\xe5\xba\xa6\n    print(np_lst.size) #\xe6\x89\x93\xe5\x8d\xb0\xe6\x95\xb0\xe7\xbb\x84\xe9\x95\xbf\xe5\xba\xa6\n    print(np.array(lst, dtype=complex))\n\nif __name__ == ""__main__"":\n    main()'"
opencv/canny.py,0,"b'# encoding=utf-8\nimport cv2\nimport numpy as np\nfrom json import dumps\n# \xe5\x9b\xbe\xe7\x89\x87\xe8\xb7\xaf\xe5\xbe\x84\nIMAGE_NAME = ""img/test.jpg""\n# \xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\xba\xe7\x9a\x84json\xe6\x96\x87\xe4\xbb\xb6\nJSON_NAME = \'opencv_temp.json\'\nimg = cv2.imread(IMAGE_NAME)\n\n# numpy\xe4\xb8\xadndarray\xe6\x96\x87\xe4\xbb\xb6\xe8\xbd\xac\xe4\xb8\xbalist\n# img_list = img.tolist()\nimg_list = img[:,:,::-1].tolist()\n# print(img_list)\n# \xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xbf\x9d\xe5\xad\x98\xe6\x95\xb0\xe7\xbb\x84\nimg_dict = {}\nimg_dict[\'name\'] = IMAGE_NAME\nimg_dict[\'content\'] = img_list\n\n# \xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\xbajson\xe6\xa0\xbc\xe5\xbc\x8f\n# json_data = dumps(img_dict, indent=2)\njson_data = dumps(img_dict)\n\n# \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\nwith open(JSON_NAME, \'w\') as json_file:\n    json_file.write(json_data)\n'"
opencv/test.py,0,"b'# encoding=utf-8\nimport cv2 as cv2\nimport numpy as np\nimg = cv2.imread(""img/test.jpg"")\n# cv2.imshow(""lena"",img)\n# cv2.waitKey(10000)\ncv2.namedWindow(""Image"")  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\x80\xe4\xb8\xaa\xe5\x90\x8d\xe4\xb8\xbaImage\xe7\x9a\x84\xe7\xaa\x97\xe5\x8f\xa3\ncv2.imshow(""Image"", img)  # \xe6\x98\xbe\xe7\xa4\xba\xe5\x9b\xbe\xe7\x89\x87\ncv2.waitKey(0)  # \xe7\xad\x89\xe5\xbe\x85\xe9\x94\xae\xe7\x9b\x98\xe8\xa7\xa6\xe5\x8f\x91\xe4\xba\x8b\xe4\xbb\xb6\xef\xbc\x8c\xe9\x87\x8a\xe6\x94\xbe\xe7\xaa\x97\xe5\x8f\xa3'"
scrapy/download.py,0,"b'import requests\nr = requests.get(\'http://localhost:88/cq1701/python/python-tutorial/scrapy/test.txt\')\nprint(r.content)\nwith open(""download.txt"", ""wb"") as file:\n   file.write(r.content)'"
scrapy/get.py,0,"b""import requests\npayload = {'name': 'wscats'}\nr = requests.get('http://localhost:88/cq1701/python/python-tutorial/scrapy/test.php', params=payload)\nprint(r.content)"""
scrapy/post.py,0,"b""import requests\npayload = {\n\t'username': 'ly',\n\t'password': '1234'\n} # form-data\n\nheaders = {\n\t'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1'\n} # headers\nr = requests.post('http://localhost:88/cs1701/nodejs/day2/login.php', data=payload, headers=headers)\nprint(r.content)"""
zip/zip.py,0,"b'import zipfile\nzFile = zipfile.ZipFile(""./test.zip"");\nzFile.extractall(""./"",pwd=""123"");'"
opencv/drive/canny.py,0,"b'# encoding=utf-8\nimport cv2\nimport numpy as np\nfrom json import dumps\n# \xe5\x9b\xbe\xe7\x89\x87\xe8\xb7\xaf\xe5\xbe\x84\nIMAGE_NAME = ""./img/screen.png""\n# \xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\xba\xe7\x9a\x84json\xe6\x96\x87\xe4\xbb\xb6\nJSON_NAME = \'screen.json\'\nimg = cv2.imread(IMAGE_NAME)\n\n# numpy\xe4\xb8\xadndarray\xe6\x96\x87\xe4\xbb\xb6\xe8\xbd\xac\xe4\xb8\xbalist\n# img_list = img.tolist()\nimg_list = img[:,:,::-1].tolist()\n# print(img_list)\n# \xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xbf\x9d\xe5\xad\x98\xe6\x95\xb0\xe7\xbb\x84\nimg_dict = {}\nimg_dict[\'name\'] = IMAGE_NAME\nimg_dict[\'content\'] = img_list\n\n# \xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\xbajson\xe6\xa0\xbc\xe5\xbc\x8f\n# json_data = dumps(img_dict, indent=2)\njson_data = dumps(img_dict)\n\n# \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\nwith open(JSON_NAME, \'w\') as json_file:\n    json_file.write(json_data)\n'"
opencv/drive/test.py,1,"b""# encoding=utf-8\nimport cv2\nimport numpy as np\nimport json\n# 1\xe3\x80\x81\xe5\x9b\xbe\xe5\x83\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x9f\xa9\xe9\x98\xb5\nimg = cv2.imread('./img/test.jpg')\nmatrix = np.asarray(img)\n\nsonStr = json.dumps(matrix, ensure_ascii=False, encoding='UTF-8') \n# \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\n#with open('screen.json', 'w') as json_file:\n#    json_file.write(matrix)\n# 2\xe3\x80\x81\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\x9b\xbe\xe5\x83\x8f\n# image = Image.fromarray(matrix)"""
tutorial/swiper/backend/manage.py,0,"b'#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == ""__main__"":\n    os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""swiper.settings"")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason. Ensure that the\n        # issue is really that Django is missing to avoid masking other\n        # exceptions on Python 2.\n        try:\n            import django\n        except ImportError:\n            raise ImportError(\n                ""Couldn\'t import Django. Are you sure it\'s installed and ""\n                ""available on your PYTHONPATH environment variable? Did you ""\n                ""forget to activate a virtual environment?""\n            )\n        raise\n    execute_from_command_line(sys.argv)\n'"
tutorial/swiper/chat/application.py,0,"b'import sys\n\nfrom tornado.ioloop import IOLoop\nfrom tornado.web import Application\nfrom tornado.options import options\n\nfrom django_env import *  # \xe5\x8a\xa0\xe8\xbd\xbd Django \xe7\x8e\xaf\xe5\xa2\x83\nfrom config import CONFIG\nfrom handler import ChatHandler\nfrom log import logger\n\n\ndef main():\n    handlers = [(\'/chatsocket\', ChatHandler)]\n    chat_app = Application(handlers, **CONFIG)\n    chat_app.listen(options.port)\n    ChatHandler.globle_listen()\n\n    try:\n        ioloop = IOLoop.current()\n        ioloop.start()\n    except KeyboardInterrupt:\n        logger.info(\'Exit\')\n        sys.exit(0)\n\n\nif __name__ == ""__main__"":\n    main()\n'"
tutorial/swiper/chat/config.py,0,"b'""""""\xe7\xb3\xbb\xe7\xbb\x9f\xe9\x85\x8d\xe7\xbd\xae""""""\nfrom tornado.options import define\n\ndefine(""port"", default=""8080"", type=int, help=""\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7"")\ndefine(""log_level"", default=""debug"", help=""\xe6\x97\xa5\xe5\xbf\x97\xe7\xad\x89\xe7\xba\xa7, \xe5\x8f\xaf\xe9\x80\x89\xe9\xa1\xb9: debug|info|warn|error"")\ndefine(""log_path"", default=""chat.log"", help=""\xe6\x97\xa5\xe5\xbf\x97\xe8\xb7\xaf\xe5\xbe\x84"")\ndefine(""log_backup"", default=30, type=int, help=""\xe6\x97\xa5\xe5\xbf\x97\xe6\x96\x87\xe4\xbb\xb6\xe6\x95\xb0\xe9\x87\x8f"")\n\nCONFIG = {\n    \'cookie_secret\': \'\\x1az\\x11tB4\\x17g7[Fry)R\\xa1a&""\\x7f\\x1a/r<\\x13,:y\\xaeR6M\',\n    \'xsrf_cookies\': True,\n    \'autoreload\': True,\n    \'debug\': False,\n}\n'"
tutorial/swiper/chat/django_env.py,0,"b'\'\'\'\n\xe5\x8a\xa0\xe8\xbd\xbd Django \xe7\x8e\xaf\xe5\xa2\x83\n\n\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x9c\xa8\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9 `from django_env import *` \xe5\x8d\xb3\xe5\x8f\xaf\n\'\'\'\n\nimport os\nimport sys\n\nimport django\n\n__all__ = ()\n\n\nCHAT_DIR = os.path.dirname(os.path.abspath(__file__))\nWEB_DIR = os.path.join(os.path.dirname(CHAT_DIR), \'backend\')\nos.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""swiper.settings"")\nsys.path.insert(0, WEB_DIR)\ndjango.setup()\n'"
tutorial/swiper/chat/handler.py,0,"b'import time\nfrom json import dumps, loads\nfrom collections import namedtuple, defaultdict\n\nfrom tornadoredis import Client\nfrom tornado.gen import coroutine, Task\nfrom tornado.websocket import WebSocketHandler\n\n# \xe4\xbb\x8e Web \xe7\xab\xaf\xe5\xbc\x95\xe5\x85\xa5\nfrom django.conf import settings\nfrom lib.cache import rds\nfrom user.models import User\n\n# \xe4\xbb\x8e Chat \xe6\x9c\xac\xe8\xba\xab\xe5\xbc\x95\xe5\x85\xa5\nimport log\nimport logic\n\nPacket = namedtuple(\'Packet\', [\'tag\', \'data\'])\n\n\nclass ChatHandler(WebSocketHandler):\n    \'\'\'WebSocket \xe5\xa4\x84\xe7\x90\x86\xe7\xb1\xbb\n        1. \xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe7\x99\xbb\xe9\x99\x86 Web \xe7\xb3\xbb\xe7\xbb\x9f\xef\xbc\x8c\xe5\x8f\x96\xe5\xbe\x97 session id \xe5\x86\x8d\xe6\x9d\xa5\xe4\xb8\x8e Chat Server \xe5\xbb\xba\xe7\xab\x8b\xe8\xbf\x9e\xe6\x8e\xa5\n        2. \xe8\xbf\x9e\xe6\x8e\xa5\xe6\x97\xb6 header \xe4\xb8\xad\xe4\xbc\xa0\xe5\x85\xa5\xe7\x94\xa8\xe6\x88\xb7\xe5\x94\xaf\xe4\xb8\x80\xe6\xa0\x87\xe8\xaf\x86 session_id\n\n        \xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\n            connections: {\n                uid1: conn_user_1,\n                uid2: conn_user_2,\n            }\n\n        \xe9\xa2\x91\xe9\x81\x93\xe6\xa0\xbc\xe5\xbc\x8f: ""\xe9\xa2\x91\xe9\x81\x93\xe5\x90\x8d"" \xe6\x88\x96 ""\xe9\xa2\x91\xe9\x81\x93\xe5\x90\x8d:\xe5\x85\xb6\xe4\xbb\x96\xe6\xa0\x87\xe8\xaf\x86""\n            BROADCAST\n            PRIVATE:uid\n    \'\'\'\n    connections = {}\n\n    def __init__(self, application, request, **kwargs):\n        super().__init__(self, application, request, **kwargs)\n        self.uid = None\n        self.user = None\n        self.sessionid = None\n        self.rds = None\n\n    def get_compression_options(self):\n        \'\'\'\xe5\x90\xaf\xe7\x94\xa8\xe5\x8e\x8b\xe7\xbc\xa9\'\'\'\n        return {}\n\n    def get_current_user(self):\n        \'\'\'\xe5\xbd\x93\xe5\x89\x8d\xe7\x94\xa8\xe6\x88\xb7\'\'\'\n        return self.user\n\n    def send_to_client(self, tag, data):\n        \'\'\'\xe6\x89\x93\xe5\x8c\x85\xe6\x95\xb0\xe6\x8d\xae, \xe5\xb9\xb6\xe5\x8f\x91\xe9\x80\x81\xe7\xbb\x99\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\'\'\'\n        packet = Packet(tag, data)\n        message = logic.pack_msg(packet)\n        self.write_message(message)\n\n    @staticmethod\n    def connect_redis():\n        rds = Client(host=settings.REDIS[\'Master\'][\'host\'],\n                     port=settings.REDIS[\'Master\'][\'port\'],\n                     selected_db=settings.REDIS[\'Master\'][\'db\'])\n        rds.connect()\n        return rds\n\n    @classmethod\n    def kick_out(cls, uid):\n        \'\'\'\xe5\xbc\xba\xe5\x88\xb6\xe8\xb8\xa2\xe4\xb8\x8b\xe7\xba\xbf\'\'\'\n        old_conn = cls.connections.pop(uid)\n        old_conn.close(499, \'KickOut\')\n        log.logger.error(\'KickOut: ip=%s id=%s\' % (old_conn.request.remote_ip, uid))\n        del old_conn\n\n    def open(self):\n        \'\'\'WebSocket\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\'\'\'\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe6\x98\xaf\xe5\x90\xa6\xe5\xb7\xb2\xe7\x99\xbb\xe9\x99\x86 Web \xe7\xb3\xbb\xe7\xbb\x9f\n        session_name = settings.SESSION_COOKIE_NAME\n        sessionid = self.request.headers.get(session_name)\n        session = logic.get_web_session(sessionid)\n        if sessionid is None or not session.has_key(session_name):\n            self.close(403, \'Forbidden\')\n            log.logger.error(\'Connection refused: %s\' % self.request.remote_ip)\n            return\n\n        try:\n            # \xe6\xa3\x80\xe6\x9f\xa5\xe9\x87\x8d\xe5\xa4\x8d\xe7\x99\xbb\xe5\xbd\x95, \xe6\x96\xb0\xe7\x9a\x84\xe7\x99\xbb\xe9\x99\x86\xe4\xbc\x9a\xe6\x8a\x8a\xe6\x97\xa7\xe7\x9a\x84\xe9\xa1\xb6\xe4\xb8\x8b\xe5\x8e\xbb\n            if uid in ChatHandler.connections:\n                self.kick_out(uid)\n\n            # \xe4\xbf\x9d\xe5\xad\x98 connections\n            self.uid = uid\n            self.user = User.get(uid=session[\'uid\'])\n            self.sessionid = sessionid\n            self.login_time = int(time.time())\n            self.rds = self.connect_redis()  # \xe5\xbc\x82\xe6\xad\xa5redis\xe8\xbf\x9e\xe6\x8e\xa5 (\xe7\x94\xa8\xe4\xba\x8e\xe7\x9b\x91\xe5\x90\xac\xe7\x94\xa8\xe6\x88\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe6\xb6\x88\xe6\x81\xaf)\n            ChatHandler.connections[self.uid] = self\n\n            self.pull_history_chat()  # \xe6\x8b\x89\xe5\x8f\x96\xe5\x8e\x86\xe5\x8f\xb2\xe6\xb6\x88\xe6\x81\xaf\xe5\xb9\xb6\xe5\x9b\x9e\xe5\x86\x99\xe7\xbb\x99 client\n            self.listen()\n        except Exception:\n            log.trace_err()\n\n    @coroutine\n    def listen(self):\n        \'\'\'\xe7\x9b\x91\xe5\x90\xac\xe7\x94\xa8\xe6\x88\xb7\xe9\xa2\x91\xe9\x81\x93\'\'\'\n        def handle_private_msg(msg):\n            \'\'\'\xe5\xa4\x84\xe7\x90\x86\xe7\xa7\x81\xe4\xba\xba\xe6\xb6\x88\xe6\x81\xaf\'\'\'\n            try:\n                log.logger.debug(\'Receive user msg: %s\' % repr(msg))\n                if msg.kind == \'message\' and msg.channel.startswith(\'PRIVATE:\'):\n                    self.write_message(msg.body)\n            except Exception:\n                log.trace_err()\n\n        try:\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe8\xae\xa2\xe9\x98\x85\n            channels = [\'PRIVATE:%s\' % self.uid]  # \xe7\xa7\x81\xe8\x81\x8a\n            yield Task(self.rds.subscribe, channels)\n            self.rds.listen(handle_private_msg)\n        except Exception:\n            log.trace_err()\n\n    @classmethod\n    @coroutine\n    def globle_listen(cls):\n        \'\'\'\n        \xe7\x9b\x91\xe5\x90\xac\xe5\x85\xa8\xe5\xb1\x80\xe9\xa2\x91\xe9\x81\x93\n\n        \xe5\x85\xa8\xe5\xb1\x80\xe5\xb9\xbf\xe6\x92\xad\xe9\xa2\x91\xe9\x81\x93\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8d\x95\xe7\x8b\xac\xe7\x9a\x84\xe7\x9b\x91\xe5\x90\xac\xe5\x99\xa8, \xe6\x94\xb6\xe5\x88\xb0\xe6\xb6\x88\xe6\x81\xaf\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x86\x99\xe5\x9b\x9e\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\n        \'\'\'\n        def handle_global_msg(msg):\n            \'\'\'\xe5\xa4\x84\xe7\x90\x86\xe5\x85\xa8\xe5\xb1\x80\xe6\xb6\x88\xe6\x81\xaf\'\'\'\n            try:\n                log.logger.debug(\'Receive globle msg: %s\' % repr(msg))\n                if msg.kind == \'message\':\n                    # \xe5\x90\x91\xe6\x89\x80\xe6\x9c\x89\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe6\x8e\xa8\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\n                    for cli_conn in cls.connections.values():\n                        cli_conn.write_message(msg.body)\n            except Exception:\n                log.trace_err()\n\n        try:\n            # \xe6\xa3\x80\xe6\x9f\xa5\xe5\x85\xa8\xe5\xb1\x80\xe7\x9b\x91\xe5\x90\xac\xe5\x99\xa8\n            rds_listener = cls.connect_redis()\n\n            # \xe5\xbc\x80\xe5\x90\xaf PUB/SUB \xe7\x9b\x91\xe5\x90\xac\n            channels = [\'BROADCAST\']\n            yield Task(rds_listener.subscribe, channels)\n            rds_listener.listen(handle_global_msg)\n        except Exception:\n            log.trace_err()\n\n    def on_message(self, message):\n        \'\'\'\xe5\xa4\x84\xe7\x90\x86\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe5\x8f\x91\xe6\x9d\xa5\xe7\x9a\x84\xe6\xb6\x88\xe6\x81\xaf\'\'\'\n        try:\n            log.logger.debug(\'Get request: %s\' % repr(message))\n            packet = Packet(*loads(message))\n        except (TypeError, ValueError) as e:\n            self.send_to_client(\'ERR\', \'DataError\')\n            return\n\n        try:\n            if packet.tag == \'PRIVATE\':\n                # \xe5\xb0\x86\xe7\xa7\x81\xe8\x81\x8a\xe6\xb6\x88\xe6\x81\xaf\xe5\x8f\x91\xe7\xbb\x99\xe7\x9b\xae\xe6\xa0\x87\xe7\x94\xa8\xe6\x88\xb7\n                self.private_chat(packet.data[\'to\'], packet.data[\'msg\'])\n\n            elif packet.tag == \'BROADCAST\':\n                # \xe5\x8f\x91\xe9\x80\x81\xe5\xb9\xbf\xe6\x92\xad\n                self.broadcast(packet.data)\n\n            else:\n                # \xe6\x97\xa0\xe6\xb3\x95\xe5\x8c\xb9\xe9\x85\x8d\xe7\xb1\xbb\xe5\x9e\x8b\n                log.logger.error(\'Can not match the msg: %s\' % repr(message))\n        except Exception:\n            log.trace_err()\n\n    @coroutine\n    def pull_history_chat(self):\n        \'\'\'\xe6\x8b\x89\xe5\x8f\x96\xe5\x8e\x86\xe5\x8f\xb2\xe8\x81\x8a\xe5\xa4\xa9\xe8\xae\xb0\xe5\xbd\x95\'\'\'\n        try:\n            # \xe8\x8e\xb7\xe5\x8f\x96 redis \xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\xb6\x88\xe6\x81\xaf\n            with self.rds.pipeline() as pipe:\n                p_channel = \'PRIVATE:%s\' % self.uid\n                pipe.lrange(p_channel, 0, -1)\n                pipe.delete(p_channel)\n                res = yield Task(pipe.execute)\n\n            p_chats = [loads(chat)[1] for chat in res[0]]\n            self.send_to_client(\'HISTORY\', p_chats)\n        except Exception:\n            log.trace_err()\n\n    def pack_chat_msg(self, channel, msg):\n        \'\'\'\xe5\xb0\x81\xe8\xa3\x85\xe7\xa7\x81\xe8\x81\x8a\xe6\xb6\x88\xe6\x81\xaf\'\'\'\n        data = {\n            \'tm\': int(time.time()),          # \xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n            \'from\': self.uid,                # \xe5\x8f\x91\xe9\x80\x81\xe8\x80\x85 uid\n            \'nickname\': self.user.nickname,  # \xe6\x98\xb5\xe7\xa7\xb0\n            \'avatar\': self.user.avatar[0],   # \xe5\xa4\xb4\xe5\x83\x8f ID\n            \'msg\': msg,                      # \xe6\xb6\x88\xe6\x81\xaf\xe5\x86\x85\xe5\xae\xb9\n        }\n        packet = Packet(channel, data)\n        return logic.pack_msg(packet)\n\n    def private_chat(self, to_uid, msg):\n        \'\'\'\xe7\xa7\x81\xe4\xba\xba\xe8\x81\x8a\xe5\xa4\xa9\'\'\'\n        channel = \'PRIVATE:%s\' % to_uid\n        message = self.pack_chat_msg(\'PRIVATE\', msg)\n\n        if rds.hexists(ckeys.AUTH_TKIDX, to_uid):\n            rds.publish(channel, message)\n        else:\n            log.logger.debug(\'Publish pchat to LIST: %s\' % repr(message))\n            rds.rpush(channel, message)\n\n    def broadcast(self, msg):\n        \'\'\'\xe5\xb9\xbf\xe6\x92\xad\'\'\'\n        packet = Packet(\'BROADCAST\', msg)\n        message = logic.pack_msg(packet)\n        rds.publish(\'BROADCAST\', message)\n\n    def on_close(self):\n        try:\n            # \xe5\x8f\x96\xe6\xb6\x88\xe8\xae\xa2\xe9\x98\x85\n            if getattr(self, \'rds\', None) and self.rds.subscribed:\n                self.rds.unsubscribe(self.rds.subscribed)\n                self.rds.disconnect()\n\n            if hasattr(self, \'uid\'):\n                # \xe6\xb8\x85\xe7\x90\x86 WebSocket connections\n                ChatHandler.connections[self.server].pop(self.uid, None)\n        except Exception as e:\n            log.trace_err()\n'"
tutorial/swiper/chat/log.py,0,"b'import os\nimport sys\nimport logging\nimport traceback\nfrom logging.handlers import TimedRotatingFileHandler\n\nfrom tornado import log\nfrom tornado.options import options\n\n__all__ = (\'logger\', \'trace_err\')\n\n\ndef configure_loggers():\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x8f\x82\xe6\x95\xb0\n    path = options.log_path\n    backup = options.log_backup\n    level = getattr(logging, options.log_level.upper())\n\n    # \xe5\xae\x9a\xe4\xb9\x89\xe6\x97\xa5\xe5\xbf\x97\xe6\xa0\xbc\xe5\xbc\x8f: \'\xe6\x97\xb6\xe9\x97\xb4 \xe7\xba\xa7\xe5\x88\xab [\xe6\xa8\xa1\xe5\x9d\x97\xe5\x90\x8d.\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d ]: message\'\n    fmt = (\'%(color)s%(asctime)s %(levelname)5.5s \'\n           \'[%(module)s.%(funcName)s]%(end_color)s: %(message)s\')\n    formatter = log.LogFormatter(datefmt=""%Y-%m-%d %H:%M:%S"", fmt=fmt)\n    log_handler = TimedRotatingFileHandler(path, when=\'D\', backupCount=backup)\n    log_handler.setFormatter(formatter)\n\n    # \xe8\xae\xbe\xe7\xbd\xae handler\n    for name in [""tornado.application"", ""tornado.general"", ""tornado.access""]:\n        logger = logging.getLogger(name)\n        logger.setLevel(level)\n        logger.addHandler(log_handler)\n\nconfigure_loggers()\nlogger = logging.getLogger(""tornado.application"")\n\n\ndef trace_err():\n    \'\'\'\n    \xe5\xb0\x86\xe6\x8d\x95\xe8\x8e\xb7\xe5\x88\xb0\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba\xe5\x88\xb0\xe9\x94\x99\xe8\xaf\xaf\xe6\x97\xa5\xe5\xbf\x97\n\n    \xe7\x9b\xb4\xe6\x8e\xa5\xe6\x94\xbe\xe5\x88\xb0 expect \xe4\xb8\x8b\xe5\x8d\xb3\xe5\x8f\xaf\n    \xe7\xa4\xba\xe4\xbe\x8b:\n        try:\n            raise ValueError\n        except Exception, e:\n            trace_err()\n    \'\'\'\n    split_line = lambda title: \'\\n%s\\n\' % title.center(50, \'-\')\n\n    # \xe5\x8f\x96\xe5\x87\xba\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe4\xbf\xa1\xe6\x81\xaf\n    msg = split_line(\' Error \')\n    msg += traceback.format_exc()\n\n    # \xe5\x8f\x96\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n    msg += split_line(\' Args \')\n    for k, v in sorted(sys._getframe(1).f_locals.items()):\n        msg += \'>>> %s: %s\\n\' % (k, v)\n\n    logger.error(msg)\n'"
tutorial/swiper/chat/logic.py,0,"b""import json\nfrom importlib import import_module\n\nfrom django.conf import settings\n\n\ndef get_web_session(session_key):\n    '''\xe8\x8e\xb7\xe5\x8f\x96 Web \xe7\xab\xaf\xe7\x9a\x84 session'''\n    engine = import_module(settings.SESSION_ENGINE)\n    session = engine.SessionStore(session_key)\n    return session\n\n\ndef pack_msg(packet):\n    msg = json.dumps(packet, ensure_ascii=False, separators=(',', ':'))\n    return msg.encode('utf8')\n"""
tutorial/swiper/deployment/init.py,0,"b'#!/usr/bin/env python\n\nimport os\nimport sys\nimport random\n\nimport django\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe7\x8e\xaf\xe5\xa2\x83\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nBACKEND_DIR = os.path.join(BASE_DIR, \'backend\')\n\nsys.path.insert(0, BACKEND_DIR)\nos.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""swiper.settings"")\ndjango.setup()\n\n\nfrom user.models import User\n\nlast_names = (\n    \'\xe8\xb5\xb5\xe9\x92\xb1\xe5\xad\x99\xe6\x9d\x8e\xe5\x91\xa8\xe5\x90\xb4\xe9\x83\x91\xe7\x8e\x8b\xe5\x86\xaf\xe9\x99\x88\xe8\xa4\x9a\xe5\x8d\xab\xe8\x92\x8b\xe6\xb2\x88\xe9\x9f\xa9\xe6\x9d\xa8\'\n    \'\xe6\x9c\xb1\xe7\xa7\xa6\xe5\xb0\xa4\xe8\xae\xb8\xe4\xbd\x95\xe5\x90\x95\xe6\x96\xbd\xe5\xbc\xa0\xe5\xad\x94\xe6\x9b\xb9\xe4\xb8\xa5\xe5\x8d\x8e\xe9\x87\x91\xe9\xad\x8f\xe9\x99\xb6\xe5\xa7\x9c\'\n    \'\xe6\x88\x9a\xe8\xb0\xa2\xe9\x82\xb9\xe5\x96\xbb\xe6\x9f\x8f\xe6\xb0\xb4\xe7\xaa\xa6\xe7\xab\xa0\xe4\xba\x91\xe8\x8b\x8f\xe6\xbd\x98\xe8\x91\x9b\xe5\xa5\x9a\xe8\x8c\x83\xe5\xbd\xad\xe9\x83\x8e\'\n    \'\xe9\xb2\x81\xe9\x9f\xa6\xe6\x98\x8c\xe9\xa9\xac\xe8\x8b\x97\xe5\x87\xa4\xe8\x8a\xb1\xe6\x96\xb9\xe4\xbf\x9e\xe4\xbb\xbb\xe8\xa2\x81\xe6\x9f\xb3\xe9\x85\x86\xe9\xb2\x8d\xe5\x8f\xb2\xe5\x94\x90\'\n    \'\xe8\xb4\xb9\xe5\xbb\x89\xe5\xb2\x91\xe8\x96\x9b\xe9\x9b\xb7\xe8\xb4\xba\xe5\x80\xaa\xe6\xb1\xa4\xe6\xbb\x95\xe6\xae\xb7\xe7\xbd\x97\xe6\xaf\x95\xe9\x83\x9d\xe9\x82\xac\xe5\xae\x89\xe5\xb8\xb8\'\n    \'\xe4\xb9\x90\xe4\xba\x8e\xe6\x97\xb6\xe5\x82\x85\xe7\x9a\xae\xe5\x8d\x9e\xe9\xbd\x90\xe5\xba\xb7\xe4\xbc\x8d\xe4\xbd\x99\xe5\x85\x83\xe5\x8d\x9c\xe9\xa1\xbe\xe5\xad\x9f\xe5\xb9\xb3\xe9\xbb\x84\'\n)\n\nfirst_names = {\n    \'Male\': [\n        \'\xe8\x87\xb4\xe8\xbf\x9c\', \'\xe4\xbf\x8a\xe9\xa9\xb0\', \'\xe9\x9b\xa8\xe6\xb3\xbd\', \'\xe7\x83\xa8\xe7\xa3\x8a\', \'\xe6\x99\x9f\xe7\x9d\xbf\',\n        \'\xe5\xa4\xa9\xe4\xbd\x91\', \'\xe6\x96\x87\xe6\x98\x8a\', \'\xe4\xbf\xae\xe6\xb4\x81\', \'\xe9\xbb\x8e\xe6\x98\x95\', \'\xe8\xbf\x9c\xe8\x88\xaa\',\n        \'\xe6\x97\xad\xe5\xb0\xa7\', \'\xe9\xb8\xbf\xe6\xb6\x9b\', \'\xe4\xbc\x9f\xe7\xa5\xba\', \'\xe8\x8d\xa3\xe8\xbd\xa9\', \'\xe8\xb6\x8a\xe6\xb3\xbd\',\n        \'\xe6\xb5\xa9\xe5\xae\x87\', \'\xe7\x91\xbe\xe7\x91\x9c\', \'\xe7\x9a\x93\xe8\xbd\xa9\', \'\xe6\xb5\xa6\xe6\xb3\xbd\', \'\xe7\xbb\x8d\xe8\xbe\x89\',\n        \'\xe7\xbb\x8d\xe7\xa5\xba\', \'\xe5\x8d\x87\xe8\x8d\xa3\', \'\xe5\x9c\xa3\xe6\x9d\xb0\', \'\xe6\x99\x9f\xe7\x9d\xbf\', \'\xe6\x80\x9d\xe8\x81\xaa\'\n    ],\n    \'Female\': [\n        \'\xe6\xb2\x9b\xe7\x8e\xb2\', \'\xe6\xac\xa3\xe5\xa6\x8d\', \'\xe4\xbd\xb3\xe7\x90\xa6\', \'\xe9\x9b\x85\xe8\x8a\x99\', \'\xe9\x9b\xa8\xe5\xa9\xb7\',\n        \'\xe9\x9f\xb5\xe5\xaf\x92\', \'\xe8\x8e\x89\xe5\xa7\xbf\', \'\xe9\x9b\xa8\xe5\xa9\xb7\', \'\xe5\xae\x81\xe9\xa6\xa8\', \'\xe5\xa6\x99\xe8\x8f\xb1\',\n        \'\xe5\xbf\x83\xe7\x90\xaa\', \'\xe9\x9b\xaf\xe5\xaa\x9b\', \'\xe8\xaf\x97\xe5\xa9\xa7\', \'\xe9\x9c\xb2\xe6\xb4\x81\', \'\xe9\x9d\x99\xe7\x90\xaa\',\n        \'\xe9\x9b\x85\xe7\x90\xb3\', \'\xe7\x81\xb5\xe9\x9f\xb5\', \'\xe6\xb8\x85\xe8\x8f\xa1\', \'\xe6\xba\xb6\xe6\x9c\x88\', \'\xe7\xb4\xa0\xe8\x8f\xb2\',\n        \'\xe9\x9b\xa8\xe5\x98\x89\', \'\xe9\x9b\x85\xe9\x9d\x99\', \'\xe6\xa2\xa6\xe6\xb4\x81\', \'\xe6\xa2\xa6\xe7\x92\x90\', \'\xe6\x83\xa0\xe8\x8c\x9c\'\n    ]\n}\n\n\ndef rand_name():\n    last_name = random.choice(last_names)\n    sex = random.choice([\'Male\', \'Female\'])\n    first_name = random.choice(first_names[sex])\n    return \'\'.join([last_name, first_name]), sex\n\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe5\x88\x9d\xe5\xa7\x8b\xe7\x94\xa8\xe6\x88\xb7\nfor i in range(1000):\n    name, sex = rand_name()\n    User.objects.create(\n        phonenum=\'%s\' % random.randrange(21000000000, 21900000000),\n        nickname=name,\n        sex=sex,\n        birth_year=random.randint(1980, 2000),\n        birth_month=random.randint(1, 12),\n        birth_day=random.randint(1, 28),\n        location=random.choice([\'\xe5\x8c\x97\xe4\xba\xac\', \'\xe4\xb8\x8a\xe6\xb5\xb7\', \'\xe6\xb7\xb1\xe5\x9c\xb3\', \'\xe6\x88\x90\xe9\x83\xbd\', \'\xe8\xa5\xbf\xe5\xae\x89\', \'\xe6\xb2\x88\xe9\x98\xb3\', \'\xe6\xad\xa6\xe6\xb1\x89\']),\n    )\n    print(\'created: %s %s\' % (name, sex))\n'"
tutorial/swiper/backend/common/__init__.py,0,b''
tutorial/swiper/backend/common/errors.py,0,"b""# coding: utf-8\n'''\n\xe7\xa8\x8b\xe5\xba\x8f\xe5\x86\x85\xe9\x83\xa8\xe9\x94\x99\xe8\xaf\xaf\n\n\xe7\xa8\x8b\xe5\xba\x8f\xe5\x86\x85\xe9\x83\xa8\xe6\xad\xa3\xe5\xb8\xb8\xe7\x9a\x84\xe9\x80\xbb\xe8\xbe\x91\xe9\x94\x99\xe8\xaf\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\xe7\xbb\x99\xe5\x89\x8d\xe7\xab\xaf\xef\xbc\x8c\xe7\xbb\x8f\xe8\xbf\x87\xe5\xbc\x82\xe5\xb8\xb8\xe4\xb8\xad\xe9\x97\xb4\xe4\xbb\xb6\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe4\xbc\x9a\xe5\xb0\x86\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x99\xe5\x89\x8d\xe7\xab\xaf\n'''\n\n\nclass LogicError(Exception):\n    '''\xe7\xa8\x8b\xe5\xba\x8f\xe5\x86\x85\xe9\x83\xa8\xe9\x80\xbb\xe8\xbe\x91\xe9\x94\x99\xe8\xaf\xaf'''\n    code = None\n    data = None\n\n    def __init__(self, data=None):\n        self.data = data  # \xe5\x8f\x91\xe7\x94\x9f\xe5\xbc\x82\xe5\xb8\xb8\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe5\x9b\x9e\xe5\x89\x8d\xe7\xab\xaf\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n\n    def __str__(self):\n        return self.__class__.__name__\n\n    @property\n    def msg(self):\n        return self.data or self.__class__.__name__\n\n\ndef gen_error(name: str, err_code: int) -> LogicError:\n    base_cls = (LogicError,)\n    cls_attr = {'code': err_code}\n    return type(name, base_cls, cls_attr)\n\n\n# \xe6\xad\xa3\xe5\xb8\xb8\nOK = gen_error('OK', 0)\n\n# \xe9\x80\x9a\xe7\x94\xa8\xe9\x94\x99\xe8\xaf\xaf\nInternalError = gen_error('InternalError', 500)         # \xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\x86\x85\xe9\x83\xa8\xe9\x94\x99\xe8\xaf\xaf\nParamsError = gen_error('ParamsError', 1001)            # \xe5\x8f\x82\xe6\x95\xb0\xe9\x94\x99\xe8\xaf\xaf\nDataError = gen_error('DataError', 1002)                # \xe6\x95\xb0\xe6\x8d\xae\xe9\x94\x99\xe8\xaf\xaf\nDoseNotExist = gen_error('DoseNotExist', 1003)          # \xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\nReachUpperLimit = gen_error('ReachUpperLimit', 1004)    # \xe8\xbe\xbe\xe5\x88\xb0\xe4\xb8\x8a\xe9\x99\x90\nPermissionDenied = gen_error('PermissionDenied', 1005)  # \xe6\xb2\xa1\xe6\x9c\x89\xe6\x9d\x83\xe9\x99\x90\nTimeout = gen_error('Timeout', 1006)                    # \xe8\xb6\x85\xe6\x97\xb6\nExpired = gen_error('Expired', 1007)                    # \xe5\xb7\xb2\xe8\xbf\x87\xe6\x9c\x9f\nNotYetTime = gen_error('NotYetTime', 1008)              # \xe6\x97\xb6\xe9\x97\xb4\xe6\x9c\xaa\xe5\x88\xb0\nInvalidPhone = gen_error('InvalidPhone', 1009)          # \xe6\x97\xa0\xe6\x95\x88\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\nInvalidPIN = gen_error('InvalidPIN', 1010)              # \xe6\x97\xa0\xe6\x95\x88\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\n\n# \xe7\x94\xa8\xe6\x88\xb7\xe7\xb1\xbb\xe9\x94\x99\xe8\xaf\xaf\nLoginRequired = gen_error('LoginRequired', 2000)    # \xe7\x94\xa8\xe6\x88\xb7\xe6\x9c\xaa\xe7\x99\xbb\xe5\xbd\x95\nNameConflict = gen_error('NameConflict', 2001)      # \xe5\x90\x8d\xe5\xad\x97\xe5\x86\xb2\xe7\xaa\x81\nMoneyNotEnough = gen_error('MoneyNotEnough', 2002)  # \xe9\x87\x91\xe9\x92\xb1\xe4\xb8\x8d\xe8\xb6\xb3\nUserNotExist = gen_error('UserNotExist', 2003)      # \xe7\x94\xa8\xe6\x88\xb7\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\nNotYourFriend = gen_error('NotYourFriend', 2004)    # \xe4\xb8\x8d\xe6\x98\xaf\xe5\xa5\xbd\xe5\x8f\x8b\xe5\x85\xb3\xe7\xb3\xbb\n\n# \xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe9\x94\x99\xe8\xaf\xaf\nWeiboAccessTokenError = gen_error('WeiboAccessTokenError', 9000) # AccessToken \xe6\x8e\xa5\xe5\x8f\xa3\xe9\x94\x99\xe8\xaf\xaf\nWeiboUserShowError = gen_error('WeiboUserShowError', 9000)       # UserShow \xe6\x8e\xa5\xe5\x8f\xa3\xe9\x94\x99\xe8\xaf\xaf\n"""
tutorial/swiper/backend/common/keys.py,0,"b""'''\n\xe5\x90\x84\xe7\xa7\x8d\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84 Key\n'''\n\nLOGIN_SMS_KEY = 'LoginSMS-%s'  # phone_num\n\nMODEL_KEY = 'Model-%s-%s'  # model_name, pk\n"""
tutorial/swiper/backend/common/middleware.py,0,"b""from logging import getLogger\nfrom traceback import format_exc\n\nfrom django.http import HttpResponse\nfrom django.utils.deprecation import MiddlewareMixin\n\nfrom common import errors\nfrom lib.http import render_json\nfrom lib.mail import async_mail_admins\nfrom user.models import User\n\nerr_log = getLogger('err')\n\n\nclass CorsMiddleware(MiddlewareMixin):\n    '''\xe5\xa4\x84\xe7\x90\x86\xe5\xae\xa2 JS \xe6\x88\xb7\xe7\xab\xaf\xe7\x9a\x84\xe8\xb7\xa8\xe5\x9f\x9f'''\n    def process_request(self, request):\n        if request.method == 'OPTIONS' and 'HTTP_ACCESS_CONTROL_REQUEST_METHOD' in request.META:\n            response = HttpResponse()\n            response['Content-Length'] = '0'\n            response['Access-Control-Allow-Headers'] = request.META['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']\n            response['Access-Control-Allow-Origin'] = 'http://127.0.0.1:8000'\n            return response\n\n    def process_response(self, request, response):\n        response['Access-Control-Allow-Origin'] = 'http://127.0.0.1:8000'\n        response['Access-Control-Allow-Credentials'] = 'true'\n        return response\n\n\nclass LogicErrorMiddleware(MiddlewareMixin):\n    '''\xe9\x80\x9a\xe7\x94\xa8\xe9\x80\xbb\xe8\xbe\x91\xe5\xbc\x82\xe5\xb8\xb8\xe5\xa4\x84\xe7\x90\x86\xe4\xb8\xad\xe9\x97\xb4\xe4\xbb\xb6'''\n    def process_exception(self, request, exception):\n        if isinstance(exception, errors.LogicError):\n            response = render_json(error=exception)\n        else:\n            error_info = '\\n%s' % format_exc()\n            err_log.error(error_info)  # \xe8\xbe\x93\xe5\x87\xba\xe9\x94\x99\xe8\xaf\xaf\xe6\x97\xa5\xe5\xbf\x97\n            async_mail_admins('\xe5\xbc\x82\xe5\xb8\xb8\xe5\x91\x8a\xe8\xad\xa6', error_info, fail_silently=False)\n            response = render_json(error=errors.InternalError)\n\n        return response\n\n\nclass AuthMiddleware(MiddlewareMixin):\n    '''\xe7\x99\xbb\xe9\x99\x86\xe8\xae\xa4\xe8\xaf\x81\xe6\xa3\x80\xe6\x9f\xa5\xe4\xb8\xad\xe9\x97\xb4\xe4\xbb\xb6'''\n    # \xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe6\xa3\x80\xe6\x9f\xa5\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n    IGNORED_PATH_LIST = [\n        '/api/user/verify',\n        '/api/user/login',\n        '/weibo/'\n    ]\n\n    def is_ignored_path(self, path):\n        '''\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe9\x9c\x80\xe8\xa6\x81\xe5\xbf\xbd\xe7\x95\xa5\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84'''\n        for ignored_path in self.IGNORED_PATH_LIST:\n            if path.startswith(ignored_path):\n                return True\n        return False\n\n    def process_request(self, request):\n        # \xe6\x8e\x92\xe9\x99\xa4\xe7\x99\xbd\xe5\x90\x8d\xe5\x8d\x95\xe9\x87\x8c\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n        if self.is_ignored_path(request.path):\n            return\n\n        # \xe6\xa3\x80\xe6\x9f\xa5 uid \xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe4\xba\x8e session \xe4\xb8\xad\n        if 'uid' not in request.session:\n            return render_json(error=errors.LoginRequired)\n\n        # \xe4\xb8\xba request \xe5\x8a\xa8\xe6\x80\x81\xe6\xb7\xbb\xe5\x8a\xa0 user \xe5\xb1\x9e\xe6\x80\xa7\n        uid = request.session['uid']\n        try:\n            user = User.get(pk=uid)\n            request.user = user\n        except User.DoesNotExist:\n            return render_json(error=errors.UserNotExist)\n"""
tutorial/swiper/backend/common/utils.py,0,"b""import re\nimport json\n\nPHONENUM_PATTERN = re.compile(r'^1[3-9]\\d{9}$')  # \xe9\xa2\x84\xe7\xbc\x96\xe8\xaf\x91\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xe5\x8c\xb9\xe9\x85\x8d\xe8\xa7\x84\xe5\x88\x99\n\n\ndef is_phonenum(phonenum:str):\n    '''\xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xe6\x98\xaf\xe5\x90\xa6\xe6\xad\xa3\xe7\xa1\xae'''\n    phonenum = phonenum.strip()\n    if PHONENUM_PATTERN.match(phonenum):\n        return True\n    else:\n        return False\n\n\ndef is_json(test_str):\n    '''\xe6\xa3\x80\xe6\x9f\xa5\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf json'''\n    if not isinstance(test_str, (str, bytes)):\n        return False\n\n    try:\n        json.loads(test_str)\n    except (TypeError, JSONDecodeError):\n        return False\n    else:\n        return True\n"""
tutorial/swiper/backend/lib/__init__.py,0,b''
tutorial/swiper/backend/lib/cache.py,0,"b""# -*- coding: utf-8 -*-\n\nimport time\nfrom redis import Redis as _Redis\nfrom redis.client import BasePipeline\nfrom pickle import dumps, loads, UnpicklingError\n\nfrom django.conf import settings\n\n\nclass Redis(_Redis):\n    '''\n    Redis\xe7\xbb\xa7\xe6\x89\xbf\xe7\xb1\xbb\n\n    \xe6\x8e\xa5\xe5\x8f\xa3\xe4\xb8\x8e\xe5\x8e\x9f\xe7\x94\x9f Redis \xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe5\xa2\x9e\xe5\x8a\xa0\xe8\x87\xaa\xe5\x8a\xa8\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe3\x80\x81\xe5\x8f\x8d\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\x8a\x9f\xe8\x83\xbd\n    '''\n    def __init__(self, *args, **kwargs):\n        _Redis.__init__(self, *args, **kwargs)\n\n    def keys(self, pattern='*'):\n        'Returns a list of keys matching ``pattern``'\n        return sorted(_Redis.keys(self, pattern))\n\n    def set(self, key, value, timeout=0):\n        if timeout > 0:\n            return self.setex(key, dumps(value, 1), timeout)\n        else:\n            return _Redis.set(self, key, dumps(value, 1))\n\n    def setnx(self, key, value, timeout=0):\n        res = _Redis.setnx(self, key, dumps(value, 1))\n        if res and timeout > 0:\n            _Redis.expire(self, key, timeout)\n        return res\n\n    def get(self, key, default=None):\n        value = _Redis.get(self, key)\n        return default if value is None else value\n\n    def mset(self, mapping):\n        return _Redis.mset(self, {k: dumps(v, 1) for k, v in mapping.items()})\n\n    def mget(self, keys, default=None):\n        values = _Redis.mget(self, keys)\n        return [default if v is None else v for v in values]\n\n    def hset(self, name, key, value):\n        return _Redis.hset(self, name, key, dumps(value, 1))\n\n    def hget(self, name, key, default=None):\n        value = _Redis.hget(self, name, key)\n        return default if value is None else value\n\n    def hmset(self, name, mapping):\n        return _Redis.hmset(self, name, {k: dumps(v, 1) for k, v in mapping.items()})\n\n    def hmget(self, name, keys, default=None):\n        values = _Redis.hmget(self, name, keys)\n        return [default if v is None else v for v in values]\n\n    def pop(self, key, default=None):\n        '''del specified key and return the corresponding value'''\n        pipe = self.pipeline()\n        pipe.get(key)\n        pipe.delete(key)\n        value, res = pipe.execute()\n        return default if value is None or res != 1 else value\n\n    def hpop(self, name, key, default=None):\n        '''del specified key and return the value of key within the hash name'''\n        pipe = self.pipeline()\n        pipe.hget(name, key)\n        pipe.hdel(name, key)\n        value, res = pipe.execute()\n        return default if value is None or res != 1 else value\n\n    def hscan_iter(self, name, match=None, count=None):\n        cursor = '0'\n        found = []\n        while cursor != 0:\n            cursor, data = self.hscan(name, cursor=cursor,\n                                      match=match, count=count)\n            for k, v in data.items():\n                if k not in found:\n                    found.append(k)\n                    yield k, v\n\n    def unpickle(self, data):\n        try:\n            if isinstance(data, bytes):\n                return loads(data)\n            elif isinstance(data, (list, tuple)):\n                return [self.unpickle(v) for v in data]\n            elif isinstance(data, dict):\n                return {k: self.unpickle(v) for k, v in data.items()}\n            else:\n                return data\n        except (UnpicklingError, TypeError, ValueError, EOFError):\n            return data\n\n    def parse_response(self, connection, command_name, **options):\n        '''Parses a response from the Redis server'''\n        response = _Redis.parse_response(self, connection, command_name, **options)\n        return self.unpickle(response)\n\n    def pipeline(self, transaction=True, shard_hint=None, origin=False):\n        if origin:\n            return _Redis.pipeline(self, transaction, shard_hint)\n        else:\n            return Pipeline(self.connection_pool, self.response_callbacks,\n                            transaction, shard_hint)\n\n\nclass Pipeline(BasePipeline, Redis):\n    '''\xe8\xa6\x86\xe7\x9b\x96\xe5\x8e\x9f\xe7\x94\x9fPipeline\xe7\xb1\xbb'''\n    def execute(self, raise_on_error=True):\n        result = super(Pipeline, self).execute(raise_on_error)\n        return [self.unpickle(r) for r in result]\n\n\nclass MSRedis(object):\n    '''\xe8\xaf\xbb\xe5\x86\x99\xe5\x88\x86\xe7\xa6\xbb\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf (\xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe7\xa8\x8b\xe5\xba\x8f\xe4\xb8\xad\xe7\x94\xa8\xe5\x88\xb0\xe7\x9a\x84\xe5\x91\xbd\xe4\xbb\xa4)'''\n    def __init__(self, conf):\n        self.master = Redis(**conf['Master'])\n        self.slave = Redis(**conf['Slave'])\n        self.read_commands = [\n            'ttl', 'exists', 'expire', 'get', 'keys',\n            'hget', 'hgetall', 'hkeys', 'hmget',\n            'sismember', 'smembers', 'sdiff', 'sinter', 'sunion'\n            'zrevrange', 'zrevrangebyscore', 'zrevrank', 'zscore'\n        ]\n\n    def __getattribute__(self, name):\n        if name in ['master', 'slave', 'read_commands']:\n            return object.__getattribute__(self, name)\n        elif name in self.read_commands:\n            return self.slave.__getattribute__(name)\n        else:\n            return self.master.__getattribute__(name)\n\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe5\x85\xa8\xe5\xb1\x80 Redis \xe8\xbf\x9e\xe6\x8e\xa5\nrds = MSRedis(settings.REDIS)\n"""
tutorial/swiper/backend/lib/db.py,0,"b""from django.db import models\n\nfrom lib.cache import rds\nfrom common.keys import MODEL_KEY\n\n\ndef get(cls, *args, **kwargs):\n    '''\xe6\x95\xb0\xe6\x8d\xae\xe4\xbc\x98\xe5\x85\x88\xe4\xbb\x8e\xe7\xbc\x93\xe5\xad\x98\xe8\x8e\xb7\xe5\x8f\x96, \xe7\xbc\x93\xe5\xad\x98\xe5\x8f\x96\xe4\xb8\x8d\xe5\x88\xb0\xe5\x86\x8d\xe4\xbb\x8e\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\x8e\xb7\xe5\x8f\x96'''\n    # \xe5\x88\x9b\xe5\xbb\xba key\n    pk = kwargs.get('pk') or kwargs.get('id')\n\n    # \xe4\xbb\x8e\xe7\xbc\x93\xe5\xad\x98\xe8\x8e\xb7\xe5\x8f\x96\n    if pk is not None:\n        key = MODEL_KEY % (cls.__name__, pk)\n        model_obj = rds.get(key)\n        if isinstance(model_obj, cls):\n            return model_obj\n\n    # \xe7\xbc\x93\xe5\xad\x98\xe9\x87\x8c\xe6\xb2\xa1\xe6\x9c\x89\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\x8e\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe5\x90\x8c\xe6\x97\xb6\xe5\x86\x99\xe5\x85\xa5\xe7\xbc\x93\xe5\xad\x98\n    model_obj = cls.objects.get(*args, **kwargs)\n    key = MODEL_KEY % (cls.__name__, model_obj.pk)\n    rds.set(key, model_obj)\n    return model_obj\n\n\ndef get_or_create(cls, *args, **kwargs):\n    # \xe5\x88\x9b\xe5\xbb\xba key\n    pk = kwargs.get('pk') or kwargs.get('id')\n\n    # \xe4\xbb\x8e\xe7\xbc\x93\xe5\xad\x98\xe8\x8e\xb7\xe5\x8f\x96\n    if pk is not None:\n        key = MODEL_KEY % (cls.__name__, pk)\n        model_obj = rds.get(key)\n        if isinstance(model_obj, cls):\n            return model_obj, False\n\n    # \xe6\x89\xa7\xe8\xa1\x8c\xe5\x8e\x9f\xe7\x94\x9f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xb9\xb6\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xbc\x93\xe5\xad\x98\n    model_obj, created = cls.objects.get_or_create(*args, **kwargs)\n    key = MODEL_KEY % (cls.__name__, model_obj.pk)\n    rds.set(key, model_obj)\n    return model_obj, created\n\n\ndef save(self, force_insert=False, force_update=False, using=None, update_fields=None):\n    '''\xe5\xad\x98\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\x90\x8e\xef\xbc\x8c\xe5\x90\x8c\xe6\x97\xb6\xe5\x86\x99\xe5\x85\xa5\xe7\xbc\x93\xe5\xad\x98'''\n    self._ori_save(force_insert, force_update, using, update_fields)\n\n    # \xe6\xb7\xbb\xe5\x8a\xa0\xe7\xbc\x93\xe5\xad\x98\n    key = MODEL_KEY % (self.__class__.__name__, self.pk)\n    rds.set(key, self)\n\n\ndef to_dict(self, *ignore):\n    '''\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xad\x97\xe5\x85\xb8'''\n    attr_dict = {}\n    for field in self._meta.fields:\n        if field.name in ignore:\n            continue\n        attr_dict[field.name] = getattr(self, field.name)\n    return attr_dict\n\n\ndef patch_model():\n    '''\n    \xe5\x8a\xa8\xe6\x80\x81\xe6\x9b\xb4\xe6\x96\xb0 Model \xe6\x96\xb9\xe6\xb3\x95\n\n    Model \xe5\x9c\xa8 Django \xe4\xb8\xad\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x89\xb9\xe6\xae\x8a\xe7\x9a\x84\xe7\xb1\xbb, \xe5\xa6\x82\xe6\x9e\x9c\xe9\x80\x9a\xe8\xbf\x87\xe7\xbb\xa7\xe6\x89\xbf\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe6\x9d\xa5\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x88\x96\xe4\xbf\xae\xe6\x94\xb9\xe5\x8e\x9f\xe6\x9c\x89\xe6\x96\xb9\xe6\xb3\x95, Django \xe4\xbc\x9a\xe5\xb0\x86\n    \xe7\xbb\xa7\xe6\x89\xbf\xe7\x9a\x84\xe7\xb1\xbb\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x99\xae\xe9\x80\x9a\xe7\x9a\x84 app.model, \xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xaa\xe8\x83\xbd\xe9\x80\x9a\xe8\xbf\x87 monkey patch \xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe5\x8a\xa8\xe6\x80\x81\xe4\xbf\xae\xe6\x94\xb9\n    '''\n    # \xe5\x8a\xa8\xe6\x80\x81\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95 get\n    models.Model.get = classmethod(get)\n    models.Model.get_or_create = classmethod(get_or_create)\n\n    # \xe4\xbf\xae\xe6\x94\xb9 save\n    models.Model._ori_save = models.Model.save\n    models.Model.save = save\n\n    # \xe6\xb7\xbb\xe5\x8a\xa0 to_dict\n    models.Model.to_dict = to_dict\n"""
tutorial/swiper/backend/lib/http.py,0,"b'from json import loads\nfrom json import dumps\nfrom json import JSONDecodeError\n\nfrom common.errors import OK\nfrom common.errors import LogicError\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.http import HttpResponseNotAllowed\n\n\ndef render_json(data=None, error=OK) -> HttpResponse:\n    \'\'\'\n    \xe5\xb0\x86\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe6\xb8\xb2\xe6\x9f\x93\xe4\xb8\xba JSON \xe6\x95\xb0\xe6\x8d\xae\n\n    Params:\n        data: \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x85\xb8\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe7\xa1\xae\xe4\xbf\x9d\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe7\x9a\x84\xe5\x80\xbc\xe9\x83\xbd\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa2\xab\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\n        error: \xe9\x80\xbb\xe8\xbe\x91\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe6\x98\xaf LogicError \xe7\x9a\x84\xe5\xad\x90\xe7\xb1\xbb\xe6\x88\x96\xe5\xae\x9e\xe4\xbe\x8b\n    \'\'\'\n    if isinstance(error, type) and issubclass(error, LogicError):\n        error = error()\n\n    result = {\n        \'data\': data or error.msg,\n        \'code\': error.code  # \xe7\x8a\xb6\xe6\x80\x81\xe7\xa0\x81\n    }\n\n    if settings.DEBUG:\n        # Debug \xe6\xa8\xa1\xe5\xbc\x8f\xe6\x97\xb6\xef\xbc\x8c\xe6\x8c\x89\xe8\xa7\x84\xe8\x8c\x83\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbe\x93\xe5\x87\xba json\n        json_str = dumps(result, ensure_ascii=False, indent=4, sort_keys=True)\n    else:\n        # \xe6\xad\xa3\xe5\xbc\x8f\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xef\xbc\x8c\xe5\xb0\x86\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe6\x8d\xae\xe5\x8e\x8b\xe7\xbc\xa9\n        json_str = dumps(result, ensure_ascii=False, separators=[\',\', \':\'])\n\n    return HttpResponse(json_str)\n\n\ndef allow_http_methods(*methods):\n    """"""\xe6\xa3\x80\xe6\x9f\xa5\xe5\x85\x81\xe8\xae\xb8\xe7\x9a\x84 HTTP \xe6\x96\xb9\xe6\xb3\x95""""""\n    def decor(view_func):\n        def wrap(request, *args, **kwargs):\n            nonlocal methods\n            methods = [m.upper() for m in methods]\n            if request.method not in methods:\n                return HttpResponseNotAllowed(methods)\n            return view_func(request, *args, **kwargs)\n        return wrap\n    return decor\n\n\nrequire_post = allow_http_methods(\'post\')\n'"
tutorial/swiper/backend/lib/mail.py,0,"b'from django.core.mail import send_mail, send_mass_mail, mail_admins\n\nfrom worker import call_by_worker\n\n\nasync_send_mail = call_by_worker(send_mail)\nasync_send_mass_mail = call_by_worker(send_mass_mail)\nasync_mail_admins = call_by_worker(mail_admins)\n'"
tutorial/swiper/backend/lib/qiniu.py,0,"b""import os\n\nimport qiniu\n\nfrom swiper import platform_config as plt\nfrom worker import call_by_worker\n\nauthorization = qiniu.Auth(plt.QN_ACCESS_KEY, plt.QN_SECRET_KEY)\n\n\ndef qiniu_upload(bucket_name, filepath, filename=None):\n    '''\n    \xe5\x90\x91\xe4\xb8\x83\xe7\x89\x9b\xe4\xba\x91\xe4\xb8\x8a\xe4\xbc\xa0\xe6\x96\x87\xe4\xbb\xb6\n\n    Args:\n        bucket_name: \xe7\xa9\xba\xe9\x97\xb4\xe5\x90\x8d\n        filepath: \xe6\x9c\xac\xe5\x9c\xb0\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n        filename: \xe4\xb8\x8a\xe4\xbc\xa0\xe5\x90\x8e\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    '''\n    if filename is None:\n        filename = os.path.basename(filepath)\n    token = authorization.upload_token(bucket_name, filename, 3600)  # \xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x8a\xe4\xbc\xa0 Token\n    ret, info = qiniu.put_file(token, filename, filepath)\n    return ret, info\n\n\ndef qiniu_upload_data(bucket_name, filedata, filename):\n    '''\n    \xe5\x90\x91\xe4\xb8\x83\xe7\x89\x9b\xe4\xba\x91\xe4\xb8\x8a\xe4\xbc\xa0\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe6\x95\xb0\xe6\x8d\xae\xe6\xb5\x81\n\n    Args:\n        bucket_name: \xe7\xa9\xba\xe9\x97\xb4\xe5\x90\x8d\n        filedata: \xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe6\x95\xb0\xe6\x8d\xae\xe6\xb5\x81\n        filename: \xe4\xb8\x8a\xe4\xbc\xa0\xe5\x90\x8e\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    '''\n    token = authorization.upload_token(bucket_name, filename, 3600)  # \xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x8a\xe4\xbc\xa0 Token\n    ret, info = qiniu.put_data(token, filename, filedata)\n    return ret, info\n\n\ndef qiniu_fetch(bucket_name, resource_url, filename=None):\n    '''\n    \xe7\x94\xb1\xe4\xb8\x83\xe7\x89\x9b\xe6\x8a\x93\xe5\x8f\x96\xe7\xbd\x91\xe7\xbb\x9c\xe8\xb5\x84\xe6\xba\x90\xe5\x88\xb0\xe7\xa9\xba\xe9\x97\xb4\n\n    Args:\n        bucket_name: \xe7\xa9\xba\xe9\x97\xb4\xe5\x90\x8d\n        resource_url: \xe7\xbd\x91\xe7\xbb\x9c\xe8\xb5\x84\xe6\xba\x90\xe5\x9c\xb0\xe5\x9d\x80\n        filename: \xe4\xb8\x8a\xe4\xbc\xa0\xe5\x90\x8e\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    '''\n    bucket = qiniu.BucketManager(authorization)\n    ret, info = bucket.fetch(resource_url, bucket_name, filename)\n    return ret, info\n\n\nasync_qiniu_upload = call_by_worker(qiniu_upload)\nasync_qiniu_upload_data = call_by_worker(qiniu_upload_data)\nasync_qiniu_fetch = call_by_worker(qiniu_fetch)\n"""
tutorial/swiper/backend/lib/sms.py,0,"b'import random\n\nimport requests\n\nfrom swiper import platform_config\nfrom worker import call_by_worker\n\n\ndef gen_verify_code(length=4):\n    \'\'\'\xe7\x94\x9f\xe6\x88\x90\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\'\'\'\n    if length <= 0:\n        length = 1\n    code = random.randrange(10 ** (length - 1), 10 ** (length))\n    return str(code)\n\n\ndef send_sms(phone_num, text):\n    \'\'\'\xe5\x8f\x91\xe9\x80\x81\xe7\x9f\xad\xe4\xbf\xa1\'\'\'\n    params = platform_config.HY_SMS_PARAMS.copy()\n    params[\'mobile\'] = phone_num\n    params[\'content\'] = params[\'content\'] % text\n    headers = {\n        ""Accept"": ""text/plain"",\n        ""Content-type"": ""application/x-www-form-urlencoded""\n    }\n    response = requests.post(platform_config.HY_SMS_URL, data=params, headers=headers)\n    return response\n\n\nasync_send_sms = call_by_worker(send_sms)  # \xe4\xb8\xba\xe6\x96\xb9\xe4\xbe\xbf\xe8\xb0\x83\xe8\xaf\x95\xef\xbc\x8c\xe5\xb0\x86\xe5\xbc\x82\xe6\xad\xa5\xe8\xb0\x83\xe7\x94\xa8\xe5\x8d\x95\xe7\x8b\xac\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe6\xac\xa1\n'"
tutorial/swiper/backend/social/__init__.py,0,b''
tutorial/swiper/backend/social/api.py,0,"b""from lib.http import require_post\nfrom lib.http import render_json\nfrom vip.logic import need_perm\nfrom social import logic\nfrom social.models import Friends\n\n\ndef recommend(request):\n    '''\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8e\xa8\xe8\x8d\x90\xe5\x88\x97\xe8\xa1\xa8'''\n    users = logic.get_recommend_users(request.user)\n    return render_json({'users': [u.to_dict() for u in users]})\n\n\n@require_post\ndef like(request):\n    '''\xe5\x96\x9c\xe6\xac\xa2'''\n    stranger_id = int(request.POST.get('stranger_id'))\n    return render_json({'matched': logic.like(stranger_id)})\n\n\n@require_post\n@need_perm('superlike')\ndef superlike(request):\n    '''\xe8\xb6\x85\xe7\xba\xa7\xe5\x96\x9c\xe6\xac\xa2'''\n    stranger_id = int(request.POST.get('stranger_id'))\n    return render_json({'matched': logic.superlike(stranger_id)})\n\n\n@require_post\ndef dislike(request):\n    '''\xe4\xb8\x8d\xe5\x96\x9c\xe6\xac\xa2'''\n    stranger_id = int(request.POST.get('stranger_id'))\n    logic.dislike(stranger_id)\n    return render_json()\n\n\n@require_post\n@need_perm('rewind')\ndef rewind(request):\n    '''\xe5\x8f\x8d\xe6\x82\x94'''\n    stranger_id = int(request.POST.get('stranger_id'))\n    return render_json(logic.rewind(stranger_id))\n\n\n@need_perm('liked_me')\ndef who_liked_me(request):\n    '''\xe6\x9f\xa5\xe7\x9c\x8b\xe8\xb0\x81\xe5\x96\x9c\xe6\xac\xa2\xe8\xbf\x87\xe6\x88\x91'''\n    users = logic.get_users_liked_me(request.user)\n    return render_json({'users': users})\n\n\ndef friend_list(request):\n    '''\xe5\xa5\xbd\xe5\x8f\x8b\xe5\x88\x97\xe8\xa1\xa8'''\n    user = request.user\n    friends = [f.to_dict() for f in user.friends()]\n    return render_json({'friends': friends})\n\n\n@require_post\ndef break_off(request):\n    '''\xe4\xb8\x8e\xe5\xaf\xb9\xe6\x96\xb9\xe7\xbb\x9d\xe4\xba\xa4'''\n    stranger_id = int(request.POST.get('stranger_id'))\n    Friends.break_off(request.session.uid, stranger_id)\n    return render_json()\n"""
tutorial/swiper/backend/social/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass SocialConfig(AppConfig):\n    name = 'social'\n"""
tutorial/swiper/backend/social/logic.py,0,"b""from social.models import Swiped\nfrom social.models import Friends\n\nfrom user.models import User\n\n\ndef get_recommend_users(user):\n    '''\n    \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8e\xa8\xe8\x8d\x90\xe5\x88\x97\xe8\xa1\xa8\n\n    TODO: \xe5\xbd\x93\xe5\x89\x8d\xe7\xae\x97\xe6\xb3\x95\xe4\xbb\x85\xe4\xbb\x85\xe6\x98\xaf\xe9\x9a\x8f\xe6\x9c\xba\xe7\xad\x9b\xe9\x80\x89\xe5\x81\x9a\xe7\x9a\x84\xe4\xbc\xaa\xe5\xae\x9e\xe7\x8e\xb0, \xe5\x90\x8e\xe6\x9c\x9f\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\n    '''\n    import random\n    total = User.objects.count()\n    start = random.randrange(total - 30)\n    end = start + 30\n    return User.objects.all()[start:end]\n\n\ndef like(user, stranger_id):\n    '''\xe5\x96\x9c\xe6\xac\xa2'''\n    Swiped.swipe_right(user.id, stranger_id)\n\n    # \xe6\xa3\x80\xe6\x9f\xa5\xe5\xaf\xb9\xe6\x96\xb9\xe6\x98\xaf\xe5\x90\xa6\xe5\x96\x9c\xe6\xac\xa2\xe8\xbf\x87\xe8\x87\xaa\xe5\xb7\xb1\n    if Swiped.is_liked(stranger_id, user.id):\n        Friends.be_friends(user.id, stranger_id)\n        # TODO: \xe5\x90\x91\xe6\xb7\xbb\xe5\x8a\xa0\xe5\xa5\xbd\xe5\x8f\x8b\xe7\x9a\x84\xe5\x8f\x8c\xe6\x96\xb9\xe5\xae\x9e\xe6\x97\xb6\xe6\x8e\xa8\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\n        return True\n    else:\n        return False\n\n\ndef superlike(user, stranger_id):\n    '''\xe8\xb6\x85\xe7\xba\xa7\xe5\x96\x9c\xe6\xac\xa2'''\n    Swiped.swipe_up(user.id, stranger_id)\n\n    # \xe6\xa3\x80\xe6\x9f\xa5\xe5\xaf\xb9\xe6\x96\xb9\xe6\x98\xaf\xe5\x90\xa6\xe5\x96\x9c\xe6\xac\xa2\xe8\xbf\x87\xe8\x87\xaa\xe5\xb7\xb1\n    if Swiped.is_liked(stranger_id, user.id):\n        Friends.be_friends(user.id, stranger_id)\n        # TODO: \xe5\x90\x91\xe6\xb7\xbb\xe5\x8a\xa0\xe5\xa5\xbd\xe5\x8f\x8b\xe7\x9a\x84\xe5\x8f\x8c\xe6\x96\xb9\xe5\xae\x9e\xe6\x97\xb6\xe6\x8e\xa8\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\n        return True\n    else:\n        return False\n\n\ndef dislike(user, stranger_id):\n    '''\xe4\xb8\x8d\xe5\x96\x9c\xe6\xac\xa2'''\n    Swiped.swipe_left(user.id, stranger_id)\n\n\ndef rewind(user, stranger_id):\n    '''\xe5\x8f\x8d\xe6\x82\x94'''\n    try:\n        Swiped.objects.get(uid=user.id, sid=stranger_id).delete()\n    except Swiped.DoesNotExist:\n        pass\n\n\ndef get_users_liked_me(user):\n    '''\xe6\x9f\xa5\xe7\x9c\x8b\xe5\x96\x9c\xe6\xac\xa2\xe8\xbf\x87\xe8\xbf\x87\xe6\x88\x91\xe7\x9a\x84\xe7\x94\xa8\xe6\x88\xb7'''\n    return Swiped.liked_me(user.id)\n"""
tutorial/swiper/backend/social/models.py,0,"b""from django.db import models\nfrom django.db.models import Q\n\n\nclass Swiped(models.Model):\n    '''\xe6\xbb\x91\xe8\xbf\x87\xe7\x9a\x84\xe8\xae\xb0\xe5\xbd\x95'''\n    MARK = (\n        ('like', '\xe5\x96\x9c\xe6\xac\xa2'),\n        ('superlike', '\xe8\xb6\x85\xe7\xba\xa7\xe5\x96\x9c\xe6\xac\xa2'),\n        ('dislike', '\xe4\xb8\x8d\xe5\x96\x9c\xe6\xac\xa2'),\n    )\n\n    uid = models.IntegerField(db_index=True, verbose_name='\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe8\xba\xab id')\n    sid = models.IntegerField(db_index=True, verbose_name='\xe8\xa2\xab\xe6\xbb\x91\xe7\x9a\x84\xe9\x99\x8c\xe7\x94\x9f\xe4\xba\xba id')\n    mark = models.CharField(max_length=16, db_index=True, choices=MARK, verbose_name='\xe6\xbb\x91\xe5\x8a\xa8\xe7\xb1\xbb\xe5\x9e\x8b')\n    time = models.DateTimeField(auto_now_add=True, verbose_name='\xe6\xbb\x91\xe5\x8a\xa8\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4')\n\n    class Meta:\n        ordering = ['-time', 'uid', 'sid']\n\n    @classmethod\n    def is_liked(cls, uid, sid):\n        condition = Q(mark='like') | Q(mark='superlike')\n        if cls.objects.filter(condition, uid=uid, sid=sid).exists():\n            return True\n        return False\n\n    @classmethod\n    def swipe_right(cls, uid, sid):\n        '''\xe5\x8f\xb3\xe6\xbb\x91'''\n        defaults = {'mark': 'like'}\n        cls.objects.update_or_create(uid=user.id, sid=stranger_id, defaults=defaults)\n\n    @classmethod\n    def swipe_up(cls, uid, sid):\n        '''\xe4\xb8\x8a\xe6\xbb\x91'''\n        defaults = {'mark': 'superlike'}\n        cls.objects.update_or_create(uid=user.id, sid=stranger_id, defaults=defaults)\n\n    @classmethod\n    def swipe_left(cls, uid, sid):\n        '''\xe5\xb7\xa6\xe6\xbb\x91'''\n        defaults = {'mark': 'dislike'}\n        cls.objects.update_or_create(uid=user.id, sid=stranger_id, defaults=defaults)\n\n    @classmethod\n    def liked(cls, uid):\n        '''\xe6\x88\x91\xe5\x96\x9c\xe6\xac\xa2\xe8\xbf\x87\xe7\x9a\x84'''\n        condition = Q(mark='like') | Q(mark='superlike')\n        return cls.objects.filter(condition, uid=uid)\n\n    @classmethod\n    def liked_me(cls, uid):\n        '''\xe5\x96\x9c\xe6\xac\xa2\xe6\x88\x91\xe7\x9a\x84'''\n        condition = Q(mark='like') | Q(mark='superlike')\n        return cls.objects.filter(condition, sid=uid)\n\n\nclass Friends(models.Model):\n    '''\n    \xe5\xa5\xbd\xe5\x8f\x8b\xe5\x85\xb3\xe7\xb3\xbb\xe8\xa1\xa8\n\n    User \xe8\xa1\xa8\xe8\x87\xaa\xe8\xba\xab\xe7\x9a\x84\xe2\x80\x9c\xe5\xa4\x9a\xe5\xaf\xb9\xe5\xa4\x9a\xe2\x80\x9d\xe5\x85\xb3\xe7\xb3\xbb, \xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa uid \xe5\xad\x97\xe6\xae\xb5\xe3\x80\x82\n    \xe4\xb8\xba\xe4\xba\x86\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe6\x9b\xb4\xe7\xb2\xbe\xe7\xae\x80\xef\xbc\x8c\xe7\x94\xa8\xe6\x88\xb7 A \xe4\xb8\x8e \xe7\x94\xa8\xe6\x88\xb7 B \xe6\x98\xaf\xe5\xa5\xbd\xe5\x8f\x8b\xe5\x85\xb3\xe7\xb3\xbb\xe5\x8f\xaa\xe4\xbc\x9a\xe4\xba\xa7\xe7\x94\x9f\xe4\xb8\x80\xe6\x9d\xa1\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8c\xe5\x8f\x96\xe5\x85\xb6\xe4\xb8\xad\xe8\xbe\x83\xe5\xb0\x8f\xe7\x9a\x84\xe5\x81\x9a uid1, \xe8\xbe\x83\xe5\xa4\xa7\xe7\x9a\x84\xe5\x81\x9a uid2\n    '''\n    uid1 = models.IntegerField()\n    uid2 = models.IntegerField()\n\n    @classmethod\n    def friend_id_list(cls, uid):\n        condition = Q(uid1=uid) | Q(uid2=uid)\n        relstions = cls.objects.filter(condition)\n        fid_list = []\n        for r in relstions:\n            friend_id = r.uid2 if uid == r.uid1 else r.uid1\n            fid_list.append(friend_id)\n        return fid_list\n\n    @classmethod\n    def is_friends(cls, uid1, uid2):\n        '''\xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\x9c\x8b\xe5\x8f\x8b\xe5\x85\xb3\xe7\xb3\xbb'''\n        uid1, uid2 = sorted([uid1, uid2])\n        return cls.objects.filter(uid1=uid1, uid2=uid2).exists()\n\n    @classmethod\n    def be_friends(cls, uid1, uid2):\n        '''\xe5\xbb\xba\xe7\xab\x8b\xe5\xa5\xbd\xe5\x8f\x8b\xe5\x85\xb3\xe7\xb3\xbb'''\n        uid1, uid2 = sorted([uid1, uid2])\n        cls.objects.get_or_create(uid1=uid1, uid2=uid2)\n\n    @classmethod\n    def break_off(cls, uid1, uid2):\n        '''\xe6\x96\xad\xe7\xbb\x9d\xe5\xa5\xbd\xe5\x8f\x8b\xe5\x85\xb3\xe7\xb3\xbb'''\n        uid1, uid2 = sorted([uid1, uid2])\n        try:\n            cls.objects.get(uid1=uid1, uid2=uid2).delete()\n        except cls.DoesNotExists:\n            pass\n\n        condition = Q(uid=uid1, sid=uid2) | Q(uid=uid2, sid=uid1)\n        Swiped.objects.filter(condition).update(mark='dislike')\n"""
tutorial/swiper/backend/swiper/__init__.py,0,b'from lib.db import patch_model\n\npatch_model()  # monkey patch\n'
tutorial/swiper/backend/swiper/gunicorn_config.py,0,"b'# -*- coding: utf-8 -*-\n\nimport os\nfrom multiprocessing import cpu_count\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nbind = [""127.0.0.1:9000""]  # \xe7\xba\xbf\xe4\xb8\x8a\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8d\xe4\xbc\x9a\xe5\xbc\x80\xe5\x90\xaf\xe5\x9c\xa8\xe5\x85\xac\xe7\xbd\x91 IP \xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xbd\xbf\xe7\x94\xa8\xe5\x86\x85\xe7\xbd\x91 IP\ndaemon = True  # \xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe5\xae\x88\xe6\x8a\xa4\xe8\xbf\x9b\xe7\xa8\x8b\xe6\xa8\xa1\xe5\xbc\x8f\npidfile = \'{BASE_DIR}/logs/gunicorn.pid\'\n\nworkers = cpu_count() * 2\nworker_class = ""gevent""  # \xe6\x8c\x87\xe5\xae\x9a\xe4\xb8\x80\xe4\xb8\xaa\xe5\xbc\x82\xe6\xad\xa5\xe5\xa4\x84\xe7\x90\x86\xe7\x9a\x84\xe5\xba\x93\nforwarded_allow_ips = \'*\'\n\nkeepalive = 60\ntimeout = 30\ngraceful_timeout = 10\nworker_connections = 65535\n\n# \xe6\x97\xa5\xe5\xbf\x97\xe5\xa4\x84\xe7\x90\x86\ncapture_output = True\nloglevel = \'info\'\nerrorlog = \'{BASE_DIR}/logs/error.log\'\n'"
tutorial/swiper/backend/swiper/platform_config.py,0,"b""'''\xe5\x90\x84\xe4\xb8\xaa\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe5\xb9\xb3\xe5\x8f\xb0\xe7\x9a\x84\xe6\x8e\xa5\xe5\x85\xa5\xe9\x85\x8d\xe7\xbd\xae'''\n\n# \xe4\xba\x92\xe4\xba\xbf\xe6\x97\xa0\xe9\x99\x90\xe7\x9f\xad\xe4\xbf\xa1\xe9\x85\x8d\xe7\xbd\xae\nHY_SMS_URL = 'http://106.ihuyi.com/webservice/sms.php?method=Submit'\nHY_SMS_PARAMS = {\n    'account': 'C42331298',\n    'password': '2d2284b74dc4972da3df3915fb17b28f',\n    'content': '\xe6\x82\xa8\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe6\x98\xaf\xef\xbc\x9a%s\xe3\x80\x82\xe8\xaf\xb7\xe4\xb8\x8d\xe8\xa6\x81\xe6\x8a\x8a\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe6\xb3\x84\xe9\x9c\xb2\xe7\xbb\x99\xe5\x85\xb6\xe4\xbb\x96\xe4\xba\xba\xe3\x80\x82',\n    'mobile': None,\n    'format': 'json'\n}\n\n\n# \xe4\xb8\x83\xe7\x89\x9b\xe4\xba\x91\xe8\xb4\xa6\xe5\x8f\xb7\xe9\x85\x8d\xe7\xbd\xae\nQN_ACCESS_KEY = 'kEM0sRR-meB92XU43_a6xZqhiyyTuu5yreGCbFtw'\nQN_SECRET_KEY = 'QxTKqgnOb_UVldphU261qu9IdzmjkgGHh6GQVPPy'\nQN_BASE_URL = 'http://ph3wmx4s2.bkt.clouddn.com'\nQN_BUCKET = 'swiper'\n\n\n# \xe5\xbe\xae\xe5\x8d\x9a OAuth \xe8\xae\xa4\xe8\xaf\x81\xe9\x85\x8d\xe7\xbd\xae\nWB_APP_KEY = '415847342'\nWB_APP_SECRET = '25bb6f5efd2f2d69177095562f031e3b'\nWB_CALLBACK = 'http://swiper.seamile.org/weibo/callback/'\n\n# \xe5\xbe\xae\xe5\x8d\x9a\xe6\x8e\x88\xe6\x9d\x83\xe8\xae\xa4\xe8\xaf\x81\xe6\x8e\xa5\xe5\x8f\xa3\nWB_AUTH_API = 'https://api.weibo.com/oauth2/authorize'\nWB_AUTH_ARGS = {\n    'client_id': WB_APP_KEY,\n    'redirect_uri': WB_CALLBACK,\n}\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbe\xae\xe5\x8d\x9a\xe4\xbb\xa4\xe7\x89\x8c\xe6\x8e\xa5\xe5\x8f\xa3\nWB_ACCESS_TOKEN_API = 'https://api.weibo.com/oauth2/access_token'\nWB_ACCESS_TOKEN_ARGS = {\n    'client_id': WB_APP_KEY,\n    'client_secret': WB_APP_SECRET,\n    'grant_type': 'authorization_code',\n    'redirect_uri': WB_CALLBACK,\n    'code': None,\n}\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbe\xae\xe5\x8d\x9a\xe7\x94\xa8\xe6\x88\xb7\xe6\x95\xb0\xe6\x8d\xae\xe6\x8e\xa5\xe5\x8f\xa3\nWB_USER_SHOW_API = 'https://api.weibo.com/2/users/show.json'\nWB_USER_SHOW_ARGS = {\n    'access_token': None,\n    'uid': None,\n}\n"""
tutorial/swiper/backend/swiper/settings.py,0,"b'""""""\nDjango settings for swiper project.\n\nGenerated by \'django-admin startproject\' using Django 1.11.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.11/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/1.11/ref/settings/\n""""""\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \'k$gybxt1($!)w=0=(7+@-f(wz&9t*z7joo41jike@3me6wm!nx\'\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = [\'*\']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.staticfiles\',\n    \'corsheaders\',\n    \'user\',\n    \'social\',\n    \'vip\',\n]\n\nMIDDLEWARE = [\n    \'django.middleware.security.SecurityMiddleware\',\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'common.middleware.CorsMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n    \'common.middleware.LogicErrorMiddleware\',\n    \'common.middleware.AuthMiddleware\',\n]\n\nROOT_URLCONF = \'swiper.urls\'\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'swiper.wsgi.application\'\n\n\n# Database\n# https://docs.djangoproject.com/en/1.11/ref/settings/#databases\n\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.sqlite3\',\n        \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.11/topics/i18n/\n\nLANGUAGE_CODE = \'zh-hans\'\n\nTIME_ZONE = \'Asia/Shanghai\'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\n\nSTATIC_URL = \'/static/\'\n\n\n# Redis\nREDIS = {\n    \'Master\': {\n        \'host\': \'localhost\',\n        \'port\': 6379,\n        \'db\': 15\n    },\n    \'Slave\': {\n        \'host\': \'localhost\',\n        \'port\': 6379,\n        \'db\': 15\n    },\n}\n\n\n# Email \xe9\x85\x8d\xe7\xbd\xae\nADMINS = [\n    (\'John\', \'john@example.com\'),\n    (\'Mary\', \'mary@example.com\')\n]\nEMAIL_SUBJECT_PREFIX = \'[Swiper] \'\n\n\n# Logging\nLOGGING = {\n    \'version\': 1,\n    \'disable_existing_loggers\': True,\n    \'formatters\': {\n        \'simple\': {\n            \'format\': \'%(asctime)s %(module)s.%(funcName)s: %(message)s\',\n            \'datefmt\': \'%Y-%m-%d %H:%M:%S\',\n        },\n        \'verbose\': {\n            \'format\': (\'%(asctime)s %(levelname)s [%(process)d-%(threadName)s] \'\n                       \'%(module)s.%(funcName)s line %(lineno)d: %(message)s\'),\n            \'datefmt\': \'%Y-%m-%d %H:%M:%S\',\n        }\n    },\n\n    \'handlers\': {\n        \'console\': {\n            \'class\': \'logging.StreamHandler\',\n            \'level\': \'DEBUG\'\n        },\n        \'info\': {\n            \'class\': \'logging.handlers.TimedRotatingFileHandler\',\n            \'filename\': f\'{BASE_DIR}/logs/info.log\',\n            \'when\': \'D\',  # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\x88\x87\xe5\x89\xb2\xe6\x97\xa5\xe5\xbf\x97\n            \'backupCount\': 30,  # \xe6\x97\xa5\xe5\xbf\x97\xe4\xbf\x9d\xe7\x95\x99 30 \xe5\xa4\xa9\n            \'formatter\': \'simple\',\n            \'level\': \'DEBUG\'\n        },\n        \'error\': {\n            \'class\': \'logging.handlers.TimedRotatingFileHandler\',\n            \'filename\': f\'{BASE_DIR}/logs/error.log\',\n            \'when\': \'W0\',  # \xe6\xaf\x8f\xe5\x91\xa8\xe4\xb8\x80\xe5\x88\x87\xe5\x89\xb2\xe6\x97\xa5\xe5\xbf\x97\n            \'backupCount\': 4,  # \xe6\x97\xa5\xe5\xbf\x97\xe4\xbf\x9d\xe7\x95\x99 4 \xe5\x91\xa8\n            \'formatter\': \'verbose\',\n            \'level\': \'DEBUG\'\n        }\n    },\n\n    \'loggers\': {\n        \'django\': {\n            \'handlers\': [\'console\'],\n            # \'level\': \'DEBUG\' if DEBUG else \'INFO\',\n        },\n        \'inf\': {\n            \'handlers\': [\'info\'],\n            \'propagate\': True,\n            \'level\': \'DEBUG\' if DEBUG else \'INFO\',\n        },\n        \'err\': {\n            \'handlers\': [\'error\'],\n            \'propagate\': True,\n            \'level\': \'DEBUG\' if DEBUG else \'ERROR\',\n        }\n    }\n}\n'"
tutorial/swiper/backend/swiper/urls.py,0,"b'""""""swiper URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/1.11/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  url(r\'^$\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  url(r\'^$\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.conf.urls import url, include\n    2. Add a URL to urlpatterns:  url(r\'^blog/\', include(\'blog.urls\'))\n""""""\nfrom django.conf.urls import url\n\nfrom user import api as user_api\nfrom social import api as social_api\nfrom vip import api as vip_api\n\n\nurlpatterns = [\n    # User API\n    url(r\'^api/user/verify$\', user_api.verify_phone),\n    url(r\'^api/user/login$\', user_api.login),\n    url(r\'^api/user/profile/show$\', user_api.show_profile),\n    url(r\'^api/user/profile/update$\', user_api.update_profile),\n    url(r\'^api/user/avatar/upload$\', user_api.upload_avatar),\n    # WeiBo\n    url(r\'weibo/authurl$\', user_api.weibo_authurl),\n    url(r\'weibo/callback$\', user_api.weibo_callback),\n\n    # Social API\n    url(r\'api/social/recommend$\', social_api.recommend),\n    url(r\'api/social/like$\', social_api.like),\n    url(r\'api/social/superlike$\', social_api.superlike),\n    url(r\'api/social/dislike$\', social_api.dislike),\n    url(r\'api/social/rewind$\', social_api.rewind),\n    url(r\'api/social/likedme$\', social_api.who_liked_me),\n    url(r\'api/social/friends$\', social_api.friend_list),\n    url(r\'api/social/break_off$\', social_api.break_off),\n\n    # VIP API\n    url(r\'api/vip/info$\', vip_api.vip_info),\n]\n'"
tutorial/swiper/backend/swiper/wsgi.py,0,"b'""""""\nWSGI config for swiper project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/\n""""""\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""swiper.settings"")\n\napplication = get_wsgi_application()\n'"
tutorial/swiper/backend/user/__init__.py,0,b''
tutorial/swiper/backend/user/api.py,0,"b""from urllib.parse import urlencode\n\nfrom swiper import platform_config\nfrom lib.cache import rds\nfrom lib.http import require_post, render_json\nfrom common import errors\nfrom common import keys\nfrom common.utils import is_phonenum\nfrom user.models import User\nfrom user.forms import ProfileForm\nfrom user.logic import send_login_code\nfrom user.logic import upload_avatar_to_cloud\nfrom user.logic import get_wb_access_token\nfrom user.logic import wb_user_show\n\n\ndef verify_phone(request):\n    '''\xe6\x8f\x90\xe4\xba\xa4\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xef\xbc\x8c\xe5\x90\x91\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\x91\xe9\x80\x81\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81'''\n    phone_num = request.GET.get('phone', '')\n    if is_phonenum(phone_num):\n        send_login_code(phone_num)\n        return render_json()\n    else:\n        raise errors.InvalidPhone\n\n\n@require_post\ndef login(request):\n    '''\xe6\x8f\x90\xe4\xba\xa4\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\xb9\xb6\xe7\x99\xbb\xe5\xbd\x95'''\n    phone_num = request.POST.get('phone')\n    code = request.POST.get('code')\n    key = keys.LOGIN_SMS_KEY % phone_num\n    if rds.get(key) != code:\n        raise errors.InvalidPIN\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe7\x94\xa8\xe6\x88\xb7\xef\xbc\x8c\xe5\xb9\xb6\xe6\x89\xa7\xe8\xa1\x8c\xe7\x99\xbb\xe9\x99\x86\xe6\x93\x8d\xe4\xbd\x9c\n    user, created = User.get_or_create(phonenum=phone_num)\n    if created:\n        user.init()\n    request.session['uid'] = user.id\n    return render_json({'user': user.to_dict()})\n\n\ndef show_profile(request):\n    '''\xe6\x9f\xa5\xe7\x9c\x8b\xe9\x85\x8d\xe7\xbd\xae'''\n    result = request.user.profile.to_dict()\n    return render_json(result)\n\n\n@require_post\ndef update_profile(request):\n    '''\xe4\xbf\xae\xe6\x94\xb9\xe7\x94\xa8\xe6\x88\xb7\xe9\x85\x8d\xe7\xbd\xae'''\n    profile = request.user.profile\n    form = ProfileForm(request.POST, instance=profile)\n    if form.is_valid():\n        form.save()\n        return render_json()\n    else:\n        raise errors.ParamsError\n\n\n@require_post\ndef upload_avatar(request):\n    '''\xe4\xb8\x8a\xe4\xbc\xa0\xe5\xa4\xb4\xe5\x83\x8f'''\n    avatar = request.user.avatar\n    upload_avatar_to_cloud(avatar, request.POST)\n    return render_json()\n\n\ndef weibo_authurl(request):\n    auth_url = '%s?%s' % (platform_config.WB_AUTH_API, urlencode(platform_config.WB_AUTH_ARGS))\n    return render_json({'auth_url': auth_url})\n\n\ndef weibo_callback(request):\n    '''\xe5\xbe\xae\xe5\x8d\x9a\xe5\x9b\x9e\xe8\xb0\x83\xe6\x8e\xa5\xe5\x8f\xa3'''\n    code = request.GET.get('code')\n\n    # \xe8\x8e\xb7\xe5\x8f\x96 access_token\n    access_token, wb_uid = get_wb_access_token(code)\n    if access_token is None:\n        raise errors.WeiboAccessTokenError\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbe\xae\xe5\x8d\x9a\xe7\x9a\x84\xe7\x94\xa8\xe6\x88\xb7\xe6\x95\xb0\xe6\x8d\xae\n    screen_name, avatar = wb_user_show(access_token, wb_uid)\n    if screen_name is None:\n        raise errors.WeiboUserShowError\n\n    # \xe5\x88\xa9\xe7\x94\xa8\xe5\xbe\xae\xe5\x8d\x9a\xe7\x9a\x84\xe8\xb4\xa6\xe5\x8f\xb7\xef\xbc\x8c\xe5\x9c\xa8\xe8\xae\xba\xe5\x9d\x9b\xe5\x86\x85\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x99\xbb\xe9\x99\x86\xe3\x80\x81\xe6\xb3\xa8\xe5\x86\x8c\n    nickname = '%s_wb' % screen_name\n    user, is_created = User.get_or_create(nickname=nickname)\n    user.avatar.first = avatar\n    user.avatar.save()\n    user.save()\n\n    # \xe8\xae\xb0\xe5\xbd\x95\xe7\x94\xa8\xe6\x88\xb7\xe7\x8a\xb6\xe6\x80\x81\n    request.session['uid'] = user.id\n\n    return render_json({'user': user.to_dict()})\n"""
tutorial/swiper/backend/user/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass UserConfig(AppConfig):\n    name = 'user'\n"""
tutorial/swiper/backend/user/forms.py,0,"b""from django import forms\n\nfrom user.models import Profile\n\n\nclass ProfileForm(forms.ModelForm):\n    class Meta:\n        model = Profile\n        fields = ['location', 'min_distance', 'max_distance', 'min_dating_age',\n                  'max_dating_age', 'dating_sex', 'vibration', 'only_matche',\n                  'auto_play']\n"""
tutorial/swiper/backend/user/logic.py,0,"b""import requests\n\nfrom lib.cache import rds\nfrom lib import sms\nfrom lib.qiniu import qiniu_upload_data\nfrom common import keys\nfrom common import errors\nfrom swiper import platform_config\nfrom worker import call_by_worker\n\n\ndef send_login_code(phone_num):\n    '''\xe5\x8f\x91\xe9\x80\x81\xe7\x99\xbb\xe9\x99\x86\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9f\xad\xe4\xbf\xa1'''\n    key = keys.LOGIN_SMS_KEY % phone_num\n    if not rds.exists(key):\n        random_code = sms.gen_verify_code(4)\n        sms.async_send_sms(phone_num, random_code)\n        rds.setex(key, random_code, 180)  # \xe7\x8a\xb6\xe6\x80\x81\xe7\xa0\x81\xe6\x9c\x89\xe6\x95\x88\xe6\x9c\x9f 180s\n    else:\n        raise errors.NotYetTime\n\n\n@call_by_worker\ndef upload_avatar_to_cloud(avatar, files):\n    '''\xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe4\xbc\xa0\xe8\x87\xb3\xe4\xb8\x83\xe7\x89\x9b\xe4\xba\x91'''\n    for field_name, file_obj in files.items():\n        # \xe4\xb8\x8a\xe4\xbc\xa0\n        filename = 'avatar-%s-%s' % (avatar.id, field_name)\n        qiniu_upload_data(platform_config.QN_BUCKET, file_obj, filename)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xb1\x9e\xe6\x80\xa7\n        url = '%s/%s' % (platform_config.QN_BASE_URL, filename)\n        setattr(avatar, field_name, url)\n    avatar.save()\n\n\ndef get_wb_access_token(code):\n    '''\xe8\x8e\xb7\xe5\x8f\x96\xe5\xbe\xae\xe5\x8d\x9a\xe7\x9a\x84 Access Token'''\n    # \xe6\x9e\x84\xe9\x80\xa0\xe5\x8f\x82\xe6\x95\xb0\n    args = platform_config.WB_ACCESS_TOKEN_ARGS.copy()\n    args['code'] = code\n\n    response = requests.post(platform_config.WB_ACCESS_TOKEN_API, data=args)  # \xe5\x8f\x91\xe9\x80\x81\xe8\xaf\xb7\xe6\xb1\x82\n    data = response.json()  # \xe6\x8f\x90\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\n    if 'access_token' in data:\n        access_token = data['access_token']\n        uid = data['uid']\n        return access_token, uid\n    else:\n        return None, None\n\n\ndef wb_user_show(access_token, wb_uid):\n    '''\xe6\xa0\xb9\xe6\x8d\xae\xe5\xbe\xae\xe5\x8d\x9a\xe7\x94\xa8\xe6\x88\xb7ID\xe8\x8e\xb7\xe5\x8f\x96\xe7\x94\xa8\xe6\x88\xb7\xe4\xbf\xa1\xe6\x81\xaf'''\n    # \xe6\x9e\x84\xe9\x80\xa0\xe5\x8f\x82\xe6\x95\xb0\n    args = platform_config.WB_USER_SHOW_ARGS\n    args['access_token'] = access_token\n    args['uid'] = wb_uid\n\n    # \xe5\x8f\x91\xe9\x80\x81\xe8\xaf\xb7\xe6\xb1\x82\n    response = requests.get(platform_config.WB_USER_SHOW_API, params=args)\n    data = response.json()\n    if 'screen_name' in data:\n        screen_name = data['screen_name']\n        avatar = data['avatar_hd']\n        return screen_name, avatar\n    else:\n        return None, None\n"""
tutorial/swiper/backend/user/models.py,0,"b'import datetime\n\nfrom django.db import models\nfrom django.utils.functional import cached_property\n\nfrom vip.models import Vip\nfrom social.models import Friends\n\n\nclass User(models.Model):\n    SEX = (\n        (\'Male\', \'\xe7\x94\xb7\'),\n        (\'Female\', \'\xe5\xa5\xb3\'),\n    )\n\n    phonenum = models.CharField(max_length=16, unique=True)\n    nickname = models.CharField(max_length=16)\n\n    # user info\n    sex = models.CharField(max_length=16, choices=SEX, blank=False, null=False)\n    birth_year = models.IntegerField(default=2000)\n    birth_month = models.IntegerField(default=1)\n    birth_day = models.IntegerField(default=1)\n    location = models.CharField(max_length=32, verbose_name=\'\xe5\xb8\xb8\xe5\xb1\x85\xe5\x9c\xb0\')\n\n    vip_id = models.IntegerField(default=1)  # \xe5\x85\xb3\xe8\x81\x94\xe7\x9a\x84 vip id\n    vip_expiration = models.DateTimeField(auto_now_add=True, verbose_name=""\xe4\xbc\x9a\xe5\x91\x98\xe8\xbf\x87\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4"")\n\n    def init(self):\n        \'\'\'TODO: \xe5\x88\x9b\xe5\xbb\xba\xe6\x96\xb0\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\'\'\'\n        pass\n\n    @cached_property\n    def age(self):\n        \'\'\'\xe5\xb9\xb4\xe9\xbe\x84\'\'\'\n        birthday = datetime.date(self.birth_year, self.birth_month, self.birth_day)\n        return (datetime.date.today() - birthday).days // 365\n\n    @cached_property\n    def avatar(self):\n        \'\'\'\xe5\xa4\xb4\xe5\x83\x8f\'\'\'\n        return Avatar.get_or_create(id=self.id)[0]\n\n    @cached_property\n    def profile(self):\n        \'\'\'\xe8\xb5\x84\xe6\x96\x99\'\'\'\n        return Profile.get_or_create(id=self.id)[0]\n\n    @cached_property\n    def vip(self):\n        \'\'\'\xe7\x94\xa8\xe6\x88\xb7\xe4\xbc\x9a\xe5\x91\x98\'\'\'\n        return Vip.get(id=self.vip_id)\n\n    @cached_property\n    def friends(self):\n        \'\'\'\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84\xe5\xa5\xbd\xe5\x8f\x8b\xe5\x88\x97\xe8\xa1\xa8\'\'\'\n        fid_list = Friends.friend_id_list(self.id)\n        return User.objects.filter(id__in=fid_list)  # objects \xe6\x98\xaf\xe7\x89\xb9\xe6\xae\x8a\xe7\x9a\x84\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7, \xe5\x8f\xaa\xe8\x83\xbd\xe9\x80\x9a\xe8\xbf\x87\xe7\xb1\xbb\xe8\xb0\x83\xe7\x94\xa8\n\n    @cached_property\n    def is_dating_ready(self):\n        \'\'\'\xe6\xa3\x80\xe6\x9f\xa5\xe8\xb5\x84\xe6\x96\x99\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x95\xb4\'\'\'\n        pass\n\n    def to_dict(self):\n        return {\n            \'uid\': self.id,\n            \'nickname\': self.nickname,\n            \'age\': self.age,\n            \'sex\': self.sex,\n            \'location\': self.location,\n            \'avatars\': list(self.avatar),\n        }\n\n\nclass Avatar(models.Model):\n    \'\'\'\n    \xe7\x94\xa8\xe6\x88\xb7\xe5\xbd\xa2\xe8\xb1\xa1\n\n    \xe4\xb8\x8e User \xe6\x98\xaf\xe2\x80\x9c\xe4\xb8\x80\xe5\xaf\xb9\xe4\xb8\x80\xe2\x80\x9d\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\x8e User \xe8\xa1\xa8 id \xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\n    \'\'\'\n    first = models.URLField(null=True, blank=True)\n    second = models.URLField(null=True, blank=True)\n    third = models.URLField(null=True, blank=True)\n    fourth = models.URLField(null=True, blank=True)\n    fifth = models.URLField(null=True, blank=True)\n    sixth = models.URLField(null=True, blank=True)\n\n    def __iter__(self):\n        urls = [self.first, self.second, self.third,\n                self.fourth, self.fifth, self.sixth]\n        return filter(None, urls)  # \xe5\x8f\x96\xe5\x87\xba\xe9\x9d\x9e\xe7\xa9\xba\xe5\xa4\xb4\xe5\x83\x8f\n\n    @cached_property\n    def head(self):\n        \'\'\'\xe9\x80\x89\xe6\x8b\xa9\xe7\xac\xac\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xe4\xbd\x9c\xe4\xb8\xba\xe5\xa4\xb4\xe5\x83\x8f\'\'\'\n        return self.first\n\n\nclass Profile(models.Model):\n    \'\'\'\n    \xe7\x94\xa8\xe6\x88\xb7\xe4\xb8\xaa\xe4\xba\xba\xe9\x85\x8d\xe7\xbd\xae\n\n    \xe4\xb8\x8e User \xe6\x98\xaf\xe2\x80\x9c\xe4\xb8\x80\xe5\xaf\xb9\xe4\xb8\x80\xe2\x80\x9d\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\x8e User \xe8\xa1\xa8 id \xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\n    \'\'\'\n    SEX = (\n        (\'Male\', \'\xe7\x94\xb7\xe6\x80\xa7\'),\n        (\'Female\', \'\xe5\xa5\xb3\xe6\x80\xa7\'),\n        (\'All\', \'\xe4\xb8\x8d\xe9\x99\x90\'),\n    )\n\n    # \xe4\xba\xa4\xe5\x8f\x8b\xe8\xae\xbe\xe7\xbd\xae\n    location = models.CharField(max_length=32, verbose_name=\'\xe7\x9b\xae\xe6\xa0\x87\xe5\x9f\x8e\xe5\xb8\x82\')\n    min_distance = models.FloatField(default=1.0, verbose_name=\'\xe6\x9c\x80\xe5\xb0\x8f\xe6\x9f\xa5\xe6\x89\xbe\xe8\x8c\x83\xe5\x9b\xb4\')\n    max_distance = models.FloatField(default=50.0, verbose_name=\'\xe6\x9c\x80\xe5\xa4\xa7\xe6\x9f\xa5\xe6\x89\xbe\xe8\x8c\x83\xe5\x9b\xb4\')\n    min_dating_age = models.IntegerField(default=18, verbose_name=\'\xe6\x9c\x80\xe5\xb0\x8f\xe4\xba\xa4\xe5\x8f\x8b\xe5\xb9\xb4\xe9\xbe\x84\')\n    max_dating_age = models.IntegerField(default=50, verbose_name=\'\xe6\x9c\x80\xe5\xa4\xa7\xe4\xba\xa4\xe5\x8f\x8b\xe5\xb9\xb4\xe9\xbe\x84\')\n    dating_sex = models.CharField(max_length=16, choices=SEX, verbose_name=\'\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe6\x80\xa7\xe5\x88\xab\')\n\n    # \xe5\x85\xb6\xe4\xbb\x96\xe8\xae\xbe\xe7\xbd\xae\n    vibration = models.BooleanField(default=True, verbose_name=\'\xe5\xbc\x80\xe5\x90\xaf\xe9\x9c\x87\xe5\x8a\xa8\')\n    only_matche = models.BooleanField(default=False, verbose_name=\'\xe4\xb8\x8d\xe8\xae\xa9\xe4\xb8\xba\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe4\xba\xba\xe7\x9c\x8b\xe6\x88\x91\xe7\x9a\x84\xe7\x9b\xb8\xe5\x86\x8c\')\n    auto_play = models.BooleanField(default=False, verbose_name=\'\xe8\x87\xaa\xe5\x8a\xa8\xe6\x92\xad\xe6\x94\xbe\xe8\xa7\x86\xe9\xa2\x91\')\n'"
tutorial/swiper/backend/vip/__init__.py,0,b''
tutorial/swiper/backend/vip/admin.py,0,b'from django.contrib import admin\n\n# Register your models here.\n'
tutorial/swiper/backend/vip/api.py,0,"b""from vip.models import Vip\n\n\ndef vip_info(request):\n    '''\xe6\x9e\x9a\xe4\xb8\xbe\xe6\x89\x80\xe6\x9c\x89 VIP \xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90'''\n    vips = {}\n    for vip in Vip.objects.all():\n        perms = ((perm.name, perm.description) for perm in vip.perms())\n        vips[vip.level] = {'price': vip.price, 'perms': sorted(perms)}\n    return vips\n"""
tutorial/swiper/backend/vip/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass VipConfig(AppConfig):\n    name = 'vip'\n"""
tutorial/swiper/backend/vip/logic.py,0,"b""from common.errors import PermissionDenied\n\n\ndef need_perm(perm_name):\n    '''Vip \xe6\x9d\x83\xe9\x99\x90\xe6\xa3\x80\xe6\x9f\xa5\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8'''\n    def check(view_function):\n        def wrapper(request):\n            user = request.user\n            if user.vip.has_perm(perm_name):\n                return view_function(request)\n            else:\n                raise PermissionDenied\n        return wrapper\n    return check\n"""
tutorial/swiper/backend/vip/models.py,0,"b""from django.db import models\n\n\nclass Vip(models.Model):\n    name = models.CharField(max_length=16, unique=True)\n    level = models.IntegerField(unique=True, verbose_name='\xe4\xbc\x9a\xe5\x91\x98\xe7\xad\x89\xe7\xba\xa7')\n    price = models.FloatField(verbose_name='\xe5\x85\x85\xe5\x80\xbc\xe4\xbc\x9a\xe5\x91\x98\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc, \xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x9a\xe5\x85\x83')\n\n    class Meta:\n        ordering = ['level', 'name']\n\n    def perms(self):\n        relations = VipPermRelation.objects.filter(vip_id=self.id)\n        perm_id = [r.perm_id for r in relations]\n        return Permission.objects.filter(id__in=perm_id)\n\n    def has_perm(self, perm_name):\n        '''\xe6\xa3\x80\xe6\x9f\xa5\xe6\xad\xa4 VIP \xe6\x98\xaf\xe5\x90\xa6\xe5\x85\xb7\xe6\x9c\x89\xe6\x9f\x90\xe7\xa7\x8d\xe6\x9d\x83\xe9\x99\x90'''\n        for perm in self.perms():\n            if perm.name == perm_name:\n                return True\n        return False\n\n\nclass Permission(models.Model):\n    '''\n    \xe7\x94\xa8\xe6\x88\xb7\xe7\x89\xb9\xe6\x9d\x83\n        superlike \xe8\xb6\x85\xe7\xba\xa7\xe5\x96\x9c\xe6\xac\xa2\xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90\n        rewind    \xe5\x8f\x8d\xe6\x82\x94\xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90\n        likeme    \xe6\x9f\xa5\xe7\x9c\x8b\xe8\xb0\x81\xe5\x96\x9c\xe6\xac\xa2\xe6\x88\x91\xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90\n    '''\n    name = models.CharField(max_length=32)\n    description = models.TextField(verbose_name='\xe6\x9d\x83\xe9\x99\x90\xe8\xaf\xa6\xe6\x83\x85\xe4\xbb\x8b\xe7\xbb\x8d')\n\n\nclass VipPermRelation(models.Model):\n    '''\n    VIP-Permission \xe5\x85\xb3\xe7\xb3\xbb\xe8\xa1\xa8\n\n    \xe6\xaf\x8f\xe7\xba\xa7 VIP \xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90\n        VIP1: \xe8\xb6\x85\xe7\xba\xa7\xe5\x96\x9c\xe6\xac\xa2\xe6\x9d\x83\xe9\x99\x90\n        VIP2: \xe5\x85\xa8\xe9\x83\xa8 VIP1 \xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90 + \xe5\x8f\x8d\xe6\x82\x94\xe6\x9d\x83\xe9\x99\x90\n        VIP3: \xe5\x85\xa8\xe9\x83\xa8 VIP2 \xe7\x9a\x84\xe6\x9d\x83\xe9\x99\x90 + \xe6\x9f\xa5\xe7\x9c\x8b\xe8\xa2\xab\xe5\x96\x9c\xe6\xac\xa2\xe6\x9d\x83\xe9\x99\x90\n\n    NOTE:\n        \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xb0\x86\xe6\x9d\x83\xe9\x99\x90\xe5\x81\x9a\xe7\x9a\x84\xe6\x9b\xb4\xe7\xbb\x86\xef\xbc\x8c\xe6\xaf\x8f\xe7\xa7\x8d\xe6\x9d\x83\xe9\x99\x90\xe9\x99\x90\xe5\x88\xb6\xe6\xaf\x8f\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe6\xac\xa1\xe6\x95\xb0\xe3\x80\x82\n        \xe6\xaf\x94\xe5\xa6\x82 VIP1 \xe6\xaf\x8f\xe6\x97\xa5\xe5\x8f\x8d\xe6\x82\x94 3 \xe6\xac\xa1\xef\xbc\x8cVIP2 \xe6\xaf\x8f\xe6\x97\xa5\xe5\x8f\x8d\xe6\x82\x94 10 \xe6\xac\xa1\n    '''\n    vip_id = models.IntegerField()\n    perm_id = models.IntegerField()\n\n    @classmethod\n    def add_relation(cls, vip_name, perm_name):\n        vip = Vip.get(name=vip_name)\n        perm = Permission.get(name=perm_name)\n        cls.get_or_create(vip_id=vip_id, perm_id=perm_id)\n\n    @classmethod\n    def del_relation(cls, vip_name, perm_name):\n        vip = Vip.get(name=vip_name)\n        perm = Permission.get(name=perm_name)\n        try:\n            cls.get(vip_id=vip_id, perm_id=perm_id).delete()\n        except cls.DoesNotExist:\n            pass\n"""
tutorial/swiper/backend/worker/__init__.py,0,"b""import os\nfrom celery import Celery\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'swiper.settings')\n\n# TODO\n#   \xe5\xbc\x82\xe6\xad\xa5\xe4\xb8\x8a\xe4\xbc\xa0\xe5\xa4\xb4\xe5\x83\x8f\xe5\x88\xb0\xe4\xb8\x83\xe7\x89\x9b\xe4\xba\x91\n#   \xe5\xbc\x82\xe6\xad\xa5\xe7\x99\xbb\xe5\xbd\x95\xe5\x90\x8e\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\xb0 redis\n#   \xe5\xbc\x82\xe6\xad\xa5\xe5\xad\x98\xe5\x82\xa8\xe5\xa4\x84\xe7\x90\x86\n\n# \xe5\x88\x9b\xe5\xbb\xba Celery Application\ncelery_app = Celery('swiper')\ncelery_app.config_from_object('worker.config')\ncelery_app.autodiscover_tasks()\n\n\ndef call_by_worker(func):\n    '''\xe5\xb0\x86\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x9c\xa8 Celery \xe4\xb8\xad\xe5\xbc\x82\xe6\xad\xa5\xe6\x89\xa7\xe8\xa1\x8c'''\n    task = celery_app.task(func)\n    return task.delay\n"""
tutorial/swiper/backend/worker/config.py,0,"b""_redis_url = 'redis://127.0.0.1:6379/0'\n\nbroker_url = _redis_url\nbroker_pool_limit = 1000  # Borker \xe8\xbf\x9e\xe6\x8e\xa5\xe6\xb1\xa0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x98\xaf10\n\ntimezone = 'Asia/Shanghai'\naccept_content = ['pickle', 'json']\n\ntask_serializer = 'pickle'\nresult_expires = 3600  # \xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x87\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4\n\nresult_backend = _redis_url\nresult_serializer = 'pickle'\nresult_cache_max = 10000  # \xe4\xbb\xbb\xe5\x8a\xa1\xe7\xbb\x93\xe6\x9e\x9c\xe6\x9c\x80\xe5\xa4\xa7\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe9\x87\x8f\n\nworker_redirect_stdouts_level = 'INFO'\n"""
tutorial/swiper/backend/social/migrations/0001_initial.py,0,"b""# -*- coding: utf-8 -*-\n# Generated by Django 1.11.15 on 2018-10-06 07:56\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Friends',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('uid1', models.IntegerField()),\n                ('uid2', models.IntegerField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Swiped',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('uid', models.IntegerField(db_index=True, verbose_name='\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe8\xba\xab id')),\n                ('sid', models.IntegerField(db_index=True, verbose_name='\xe8\xa2\xab\xe6\xbb\x91\xe7\x9a\x84\xe9\x99\x8c\xe7\x94\x9f\xe4\xba\xba id')),\n                ('mark', models.CharField(choices=[('like', '\xe5\x96\x9c\xe6\xac\xa2'), ('superlike', '\xe5\x96\x9c\xe6\xac\xa2'), ('dislike', '\xe5\x96\x9c\xe6\xac\xa2')], db_index=True, max_length=16, verbose_name='\xe6\xbb\x91\xe5\x8a\xa8\xe7\xb1\xbb\xe5\x9e\x8b')),\n                ('time', models.DateTimeField(auto_now_add=True, verbose_name='\xe6\xbb\x91\xe5\x8a\xa8\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4')),\n            ],\n            options={\n                'ordering': ['-time', 'uid', 'sid'],\n            },\n        ),\n    ]\n"""
tutorial/swiper/backend/social/migrations/__init__.py,0,b''
tutorial/swiper/backend/user/migrations/0001_initial.py,0,"b""# -*- coding: utf-8 -*-\n# Generated by Django 1.11.15 on 2018-10-06 07:56\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Avatar',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('first', models.URLField(blank=True, null=True)),\n                ('second', models.URLField(blank=True, null=True)),\n                ('third', models.URLField(blank=True, null=True)),\n                ('fourth', models.URLField(blank=True, null=True)),\n                ('fifth', models.URLField(blank=True, null=True)),\n                ('sixth', models.URLField(blank=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Profile',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('location', models.CharField(max_length=32, verbose_name='\xe7\x9b\xae\xe6\xa0\x87\xe5\x9f\x8e\xe5\xb8\x82')),\n                ('min_distance', models.FloatField(default=1.0, verbose_name='\xe6\x9c\x80\xe5\xb0\x8f\xe6\x9f\xa5\xe6\x89\xbe\xe8\x8c\x83\xe5\x9b\xb4')),\n                ('max_distance', models.FloatField(default=50.0, verbose_name='\xe6\x9c\x80\xe5\xa4\xa7\xe6\x9f\xa5\xe6\x89\xbe\xe8\x8c\x83\xe5\x9b\xb4')),\n                ('min_dating_age', models.IntegerField(default=18, verbose_name='\xe6\x9c\x80\xe5\xb0\x8f\xe4\xba\xa4\xe5\x8f\x8b\xe5\xb9\xb4\xe9\xbe\x84')),\n                ('max_dating_age', models.IntegerField(default=50, verbose_name='\xe6\x9c\x80\xe5\xa4\xa7\xe4\xba\xa4\xe5\x8f\x8b\xe5\xb9\xb4\xe9\xbe\x84')),\n                ('dating_sex', models.CharField(choices=[('Male', '\xe7\x94\xb7\xe6\x80\xa7'), ('Female', '\xe5\xa5\xb3\xe6\x80\xa7'), ('All', '\xe4\xb8\x8d\xe9\x99\x90')], max_length=16, verbose_name='\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe6\x80\xa7\xe5\x88\xab')),\n                ('vibration', models.BooleanField(default=True, verbose_name='\xe5\xbc\x80\xe5\x90\xaf\xe9\x9c\x87\xe5\x8a\xa8')),\n                ('only_matche', models.BooleanField(default=False, verbose_name='\xe4\xb8\x8d\xe8\xae\xa9\xe4\xb8\xba\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe4\xba\xba\xe7\x9c\x8b\xe6\x88\x91\xe7\x9a\x84\xe7\x9b\xb8\xe5\x86\x8c')),\n                ('auto_play', models.BooleanField(default=False, verbose_name='\xe8\x87\xaa\xe5\x8a\xa8\xe6\x92\xad\xe6\x94\xbe\xe8\xa7\x86\xe9\xa2\x91')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('phonenum', models.CharField(max_length=16, unique=True)),\n                ('nickname', models.CharField(max_length=16)),\n                ('sex', models.CharField(choices=[('Male', '\xe7\x94\xb7'), ('Female', '\xe5\xa5\xb3')], max_length=16)),\n                ('birth_year', models.IntegerField(default=2000)),\n                ('birth_month', models.IntegerField(default=1)),\n                ('birth_day', models.IntegerField(default=1)),\n                ('location', models.CharField(max_length=32, verbose_name='\xe5\xb8\xb8\xe5\xb1\x85\xe5\x9c\xb0')),\n                ('vip_id', models.IntegerField(default=1)),\n                ('vip_expiration', models.DateTimeField(auto_now_add=True, verbose_name='\xe4\xbc\x9a\xe5\x91\x98\xe8\xbf\x87\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4')),\n            ],\n        ),\n    ]\n"""
tutorial/swiper/backend/user/migrations/__init__.py,0,b''
tutorial/swiper/backend/vip/migrations/0001_initial.py,0,"b""# -*- coding: utf-8 -*-\n# Generated by Django 1.11.7 on 2018-10-05 16:13\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Permission',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=32)),\n                ('description', models.TextField(verbose_name='\xe6\x9d\x83\xe9\x99\x90\xe8\xaf\xa6\xe6\x83\x85\xe4\xbb\x8b\xe7\xbb\x8d')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Vip',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=16, unique=True)),\n                ('level', models.IntegerField(unique=True, verbose_name='\xe4\xbc\x9a\xe5\x91\x98\xe7\xad\x89\xe7\xba\xa7')),\n                ('price', models.FloatField(verbose_name='\xe5\x85\x85\xe5\x80\xbc\xe4\xbc\x9a\xe5\x91\x98\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc, \xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x9a\xe5\x85\x83')),\n            ],\n            options={\n                'ordering': ['level', 'name'],\n            },\n        ),\n        migrations.CreateModel(\n            name='VipPermRelation',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('vip_id', models.IntegerField()),\n                ('perm_id', models.IntegerField()),\n            ],\n        ),\n    ]\n"""
tutorial/swiper/backend/vip/migrations/__init__.py,0,b''
