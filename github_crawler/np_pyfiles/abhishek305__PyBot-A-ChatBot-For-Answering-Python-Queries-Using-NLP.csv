file_path,api_count,code
bot.py,0,"b' # Meet Pybot: your friend\r\n\r\nimport nltk\r\nimport warnings\r\nwarnings.filterwarnings(""ignore"")\r\n# nltk.download() # for downloading packages\r\n#import tensorflow as tf\r\nimport numpy as np\r\nimport random\r\nimport string # to process standard python strings\r\n\r\nf=open(\'nlp python answer finals.txt\',\'r\',errors = \'ignore\')\r\nm=open(\'modules pythons.txt\',\'r\',errors = \'ignore\')\r\ncheckpoint = ""./chatbot_weights.ckpt""\r\n#session = tf.InteractiveSession()\r\n#session.run(tf.global_variables_initializer())\r\n#saver = tf.train.Saver()\r\n#saver.restore(session, checkpoint)\r\n\r\nraw=f.read()\r\nrawone=m.read()\r\nraw=raw.lower()# converts to lowercase\r\nrawone=rawone.lower()# converts to lowercase\r\nnltk.download(\'punkt\') # first-time use only\r\nnltk.download(\'wordnet\') # first-time use only\r\nsent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences \r\nword_tokens = nltk.word_tokenize(raw)# converts to list of words\r\nsent_tokensone = nltk.sent_tokenize(rawone)# converts to list of sentences \r\nword_tokensone = nltk.word_tokenize(rawone)# converts to list of words\r\n\r\n\r\nsent_tokens[:2]\r\nsent_tokensone[:2]\r\n\r\nword_tokens[:5]\r\nword_tokensone[:5]\r\n\r\nlemmer = nltk.stem.WordNetLemmatizer()\r\ndef LemTokens(tokens):\r\n    return [lemmer.lemmatize(token) for token in tokens]\r\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\r\ndef LemNormalize(text):\r\n    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\r\n\r\nIntroduce_Ans = [""My name is PyBot."",""My name is PyBot you can called me pi."",""Im PyBot :) "",""My name is PyBot. and my nickname is pi and i am happy to solve your queries :) ""]\r\nGREETING_INPUTS = (""hello"", ""hi"",""hiii"",""hii"",""hiiii"",""hiiii"", ""greetings"", ""sup"", ""what\'s up"",""hey"",)\r\nGREETING_RESPONSES = [""hi"", ""hey"", ""hii there"", ""hi there"", ""hello"", ""I am glad! You are talking to me""]\r\nBasic_Q = (""what is python ?"",""what is python"",""what is python?"",""what is python."")\r\nBasic_Ans = ""Python is a high-level, interpreted, interactive and object-oriented scripting programming language python is designed to be highly readable It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages.""\r\nBasic_Om = (""what is module"",""what is module."",""what is module "",""what is module ?"",""what is module?"",""what is module in python"",""what is module in python."",""what is module in python?"",""what is module in python ?"")\r\nBasic_AnsM = [""Consider a module to be the same as a code library."",""A file containing a set of functions you want to include in your application."",""A module can define functions, classes and variables. A module can also include runnable code. Grouping related code into a module makes the code easier to understand and use.""]\r\n\r\n\r\n# Checking for greetings\r\ndef greeting(sentence):\r\n    """"""If user\'s input is a greeting, return a greeting response""""""\r\n    for word in sentence.split():\r\n        if word.lower() in GREETING_INPUTS:\r\n            return random.choice(GREETING_RESPONSES)\r\n\r\n# Checking for Basic_Q\r\ndef basic(sentence):\r\n    for word in Basic_Q:\r\n        if sentence.lower() == word:\r\n            return Basic_Ans\r\n\r\n# Checking for Basic_QM\r\ndef basicM(sentence):\r\n    """"""If user\'s input is a greeting, return a greeting response""""""\r\n    for word in Basic_Om:\r\n        if sentence.lower() == word:\r\n            return random.choice(Basic_AnsM)\r\n        \r\n# Checking for Introduce\r\ndef IntroduceMe(sentence):\r\n    return random.choice(Introduce_Ans)\r\n\r\n\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.metrics.pairwise import cosine_similarity\r\n\r\n\r\n# Generating response\r\ndef response(user_response):\r\n    robo_response=\'\'\r\n    sent_tokens.append(user_response)\r\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words=\'english\')\r\n    tfidf = TfidfVec.fit_transform(sent_tokens)\r\n    vals = cosine_similarity(tfidf[-1], tfidf)\r\n    idx=vals.argsort()[0][-2]\r\n    flat = vals.flatten()\r\n    flat.sort()\r\n    req_tfidf = flat[-2]\r\n    if(req_tfidf==0):\r\n        robo_response=robo_response+""I am sorry! I don\'t understand you""\r\n        return robo_response\r\n    else:\r\n        robo_response = robo_response+sent_tokens[idx]\r\n        return robo_response\r\n      \r\n# Generating response\r\ndef responseone(user_response):\r\n    robo_response=\'\'\r\n    sent_tokensone.append(user_response)\r\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words=\'english\')\r\n    tfidf = TfidfVec.fit_transform(sent_tokensone)\r\n    vals = cosine_similarity(tfidf[-1], tfidf)\r\n    idx=vals.argsort()[0][-2]\r\n    flat = vals.flatten()\r\n    flat.sort()\r\n    req_tfidf = flat[-2]\r\n    if(req_tfidf==0):\r\n        robo_response=robo_response+""I am sorry! I don\'t understand you""\r\n        return robo_response\r\n    else:\r\n        robo_response = robo_response+sent_tokensone[idx]\r\n        return robo_response\r\n\r\n\r\ndef chat(user_response):\r\n    user_response=user_response.lower()\r\n    keyword = "" module ""\r\n    keywordone = "" module""\r\n    keywordsecond = ""module ""\r\n    \r\n    if(user_response!=\'bye\'):\r\n        if(user_response==\'thanks\' or user_response==\'thank you\' ):\r\n            flag=False\r\n            #print(""ROBO: You are welcome.."")\r\n            return ""You are welcome..""\r\n        elif(basicM(user_response)!=None):\r\n            return basicM(user_response)\r\n        else:\r\n            if(user_response.find(keyword) != -1 or user_response.find(keywordone) != -1 or user_response.find(keywordsecond) != -1):\r\n                #print(""ROBO: "",end="""")\r\n                #print(responseone(user_response))\r\n                return responseone(user_response)\r\n                sent_tokensone.remove(user_response)\r\n            elif(greeting(user_response)!=None):\r\n                #print(""ROBO: ""+greeting(user_response))\r\n                return greeting(user_response)\r\n            elif(user_response.find(""your name"") != -1 or user_response.find("" your name"") != -1 or user_response.find(""your name "") != -1 or user_response.find("" your name "") != -1):\r\n                return IntroduceMe(user_response)\r\n            elif(basic(user_response)!=None):\r\n                return basic(user_response)\r\n            else:\r\n                #print(""ROBO: "",end="""")\r\n                #print(response(user_response))\r\n                return response(user_response)\r\n                sent_tokens.remove(user_response)\r\n                \r\n    else:\r\n        flag=False\r\n        #print(""ROBO: Bye! take care.."")\r\n        return ""Bye! take care..""\r\n        \r\n        \r\n\r\n'"
gui.py,0,"b'from tkinter import *\r\nimport time\r\nimport tkinter.messagebox\r\nfrom bot import chat\r\nimport pyttsx3\r\nimport threading\r\n\r\nsaved_username = [""You""]\r\n#ans=[""PyBot""]\r\nwindow_size=""400x400""\r\n\r\nclass ChatInterface(Frame):\r\n\r\n    def __init__(self, master=None):\r\n        Frame.__init__(self, master)\r\n        self.master = master\r\n\r\n        # sets default bg for top level windows\r\n        self.tl_bg = ""#EEEEEE""\r\n        self.tl_bg2 = ""#EEEEEE""\r\n        self.tl_fg = ""#000000""\r\n        self.font = ""Verdana 10""\r\n\r\n        menu = Menu(self.master)\r\n        self.master.config(menu=menu, bd=5)\r\n# Menu bar\r\n\r\n    # File\r\n        file = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label=""File"", menu=file)\r\n       # file.add_command(label=""Save Chat Log"", command=self.save_chat)\r\n        file.add_command(label=""Clear Chat"", command=self.clear_chat)\r\n      #  file.add_separator()\r\n        file.add_command(label=""Exit"",command=self.chatexit)\r\n\r\n    # Options\r\n        options = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label=""Options"", menu=options)\r\n\r\n        # username\r\n       \r\n\r\n        \r\n\r\n        # font\r\n        font = Menu(options, tearoff=0)\r\n        options.add_cascade(label=""Font"", menu=font)\r\n        font.add_command(label=""Default"",command=self.font_change_default)\r\n        font.add_command(label=""Times"",command=self.font_change_times)\r\n        font.add_command(label=""System"",command=self.font_change_system)\r\n        font.add_command(label=""Helvetica"",command=self.font_change_helvetica)\r\n        font.add_command(label=""Fixedsys"",command=self.font_change_fixedsys)\r\n\r\n        # color theme\r\n        color_theme = Menu(options, tearoff=0)\r\n        options.add_cascade(label=""Color Theme"", menu=color_theme)\r\n        color_theme.add_command(label=""Default"",command=self.color_theme_default) \r\n       # color_theme.add_command(label=""Night"",command=self.) \r\n        color_theme.add_command(label=""Grey"",command=self.color_theme_grey) \r\n        color_theme.add_command(label=""Blue"",command=self.color_theme_dark_blue) \r\n       \r\n        color_theme.add_command(label=""Torque"",command=self.color_theme_turquoise)\r\n        color_theme.add_command(label=""Hacker"",command=self.color_theme_hacker)\r\n       # color_theme.add_command(label=\'Mkbhd\',command=self.MKBHD)\r\n\r\n\r\n      \r\n        help_option = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label=""Help"", menu=help_option)\r\n        #help_option.add_command(label=""Features"", command=self.features_msg)\r\n        help_option.add_command(label=""About PyBot"", command=self.msg)\r\n        help_option.add_command(label=""Develpoers"", command=self.about)\r\n\r\n        self.text_frame = Frame(self.master, bd=6)\r\n        self.text_frame.pack(expand=True, fill=BOTH)\r\n\r\n        # scrollbar for text box\r\n        self.text_box_scrollbar = Scrollbar(self.text_frame, bd=0)\r\n        self.text_box_scrollbar.pack(fill=Y, side=RIGHT)\r\n\r\n        # contains messages\r\n        self.text_box = Text(self.text_frame, yscrollcommand=self.text_box_scrollbar.set, state=DISABLED,\r\n                             bd=1, padx=6, pady=6, spacing3=8, wrap=WORD, bg=None, font=""Verdana 10"", relief=GROOVE,\r\n                             width=10, height=1)\r\n        self.text_box.pack(expand=True, fill=BOTH)\r\n        self.text_box_scrollbar.config(command=self.text_box.yview)\r\n\r\n        # frame containing user entry field\r\n        self.entry_frame = Frame(self.master, bd=1)\r\n        self.entry_frame.pack(side=LEFT, fill=BOTH, expand=True)\r\n\r\n        # entry field\r\n        self.entry_field = Entry(self.entry_frame, bd=1, justify=LEFT)\r\n        self.entry_field.pack(fill=X, padx=6, pady=6, ipady=3)\r\n        # self.users_message = self.entry_field.get()\r\n\r\n        # frame containing send button and emoji button\r\n        self.send_button_frame = Frame(self.master, bd=0)\r\n        self.send_button_frame.pack(fill=BOTH)\r\n\r\n        # send button\r\n        self.send_button = Button(self.send_button_frame, text=""Send"", width=5, relief=GROOVE, bg=\'white\',\r\n                                  bd=1, command=lambda: self.send_message_insert(None), activebackground=""#FFFFFF"",\r\n                                  activeforeground=""#000000"")\r\n        self.send_button.pack(side=LEFT, ipady=8)\r\n        self.master.bind(""<Return>"", self.send_message_insert)\r\n        \r\n        self.last_sent_label(date=""No messages sent."")\r\n        #t2 = threading.Thread(target=self.send_message_insert(, name=\'t1\')\r\n        #t2.start()\r\n        \r\n\r\n    def playResponce(self,responce):\r\n        x=pyttsx3.init()\r\n        #print(responce)\r\n        li = []\r\n        if len(responce) > 100:\r\n            if responce.find(\'--\') == -1:\r\n                b = responce.split(\'--\')\r\n                #print(b)\r\n                 \r\n        x.setProperty(\'rate\',120)\r\n        x.setProperty(\'volume\',100)\r\n        x.say(responce)\r\n        x.runAndWait()\r\n        #print(""Played Successfully......"")\r\n        \r\n        \r\n    def last_sent_label(self, date):\r\n\r\n        try:\r\n            self.sent_label.destroy()\r\n        except AttributeError:\r\n            pass\r\n\r\n        self.sent_label = Label(self.entry_frame, font=""Verdana 7"", text=date, bg=self.tl_bg2, fg=self.tl_fg)\r\n        self.sent_label.pack(side=LEFT, fill=X, padx=3)\r\n\r\n    def clear_chat(self):\r\n        self.text_box.config(state=NORMAL)\r\n        self.last_sent_label(date=""No messages sent."")\r\n        self.text_box.delete(1.0, END)\r\n        self.text_box.delete(1.0, END)\r\n        self.text_box.config(state=DISABLED)\r\n\r\n    def chatexit(self):\r\n        exit()\r\n\r\n    def msg(self):\r\n        tkinter.messagebox.showinfo(""PyBOT v1.0"",\'PyBOT is a chatbot for answering python queries\\nIt is based on retrival-based NLP using pythons NLTK tool-kit module\\nGUI is based on Tkinter\\nIt can answer questions regarding python language for new learners\')\r\n\r\n    def about(self):\r\n        tkinter.messagebox.showinfo(""PyBOT Developers"",""1.Abhishek Ezhava\\n2.Mayur Kadam\\n3.Monis Khot\\n4.Raj Vishwakarma"")\r\n    \r\n    def send_message_insert(self, message):\r\n        user_input = self.entry_field.get()\r\n        pr1 = ""Human : "" + user_input + ""\\n""\r\n        self.text_box.configure(state=NORMAL)\r\n        self.text_box.insert(END, pr1)\r\n        self.text_box.configure(state=DISABLED)\r\n        self.text_box.see(END)\r\n        #t1 = threading.Thread(target=self.playResponce, args=(user_input,))\r\n        #t1.start()\r\n        #time.sleep(1)\r\n        ob=chat(user_input)\r\n        pr=""PyBot : "" + ob + ""\\n""\r\n        self.text_box.configure(state=NORMAL)\r\n        self.text_box.insert(END, pr)\r\n        self.text_box.configure(state=DISABLED)\r\n        self.text_box.see(END)\r\n        self.last_sent_label(str(time.strftime( ""Last message sent: "" + \'%B %d, %Y\' + \' at \' + \'%I:%M %p\')))\r\n        self.entry_field.delete(0,END)\r\n        time.sleep(0)\r\n        t2 = threading.Thread(target=self.playResponce, args=(ob,))\r\n        t2.start()\r\n        #return ob\r\n\r\n    \r\n\r\n\r\n        \r\n        \r\n    def font_change_default(self):\r\n        self.text_box.config(font=""Verdana 10"")\r\n        self.entry_field.config(font=""Verdana 10"")\r\n        self.font = ""Verdana 10""\r\n\r\n    def font_change_times(self):\r\n        self.text_box.config(font=""Times"")\r\n        self.entry_field.config(font=""Times"")\r\n        self.font = ""Times""\r\n\r\n    def font_change_system(self):\r\n        self.text_box.config(font=""System"")\r\n        self.entry_field.config(font=""System"")\r\n        self.font = ""System""\r\n\r\n    def font_change_helvetica(self):\r\n        self.text_box.config(font=""helvetica 10"")\r\n        self.entry_field.config(font=""helvetica 10"")\r\n        self.font = ""helvetica 10""\r\n\r\n    def font_change_fixedsys(self):\r\n        self.text_box.config(font=""fixedsys"")\r\n        self.entry_field.config(font=""fixedsys"")\r\n        self.font = ""fixedsys""\r\n\r\n    def color_theme_default(self):\r\n        self.master.config(bg=""#EEEEEE"")\r\n        self.text_frame.config(bg=""#EEEEEE"")\r\n        self.entry_frame.config(bg=""#EEEEEE"")\r\n        self.text_box.config(bg=""#FFFFFF"", fg=""#000000"")\r\n        self.entry_field.config(bg=""#FFFFFF"", fg=""#000000"", insertbackground=""#000000"")\r\n        self.send_button_frame.config(bg=""#EEEEEE"")\r\n        self.send_button.config(bg=""#FFFFFF"", fg=""#000000"", activebackground=""#FFFFFF"", activeforeground=""#000000"")\r\n        #self.emoji_button.config(bg=""#FFFFFF"", fg=""#000000"", activebackground=""#FFFFFF"", activeforeground=""#000000"")\r\n        self.sent_label.config(bg=""#EEEEEE"", fg=""#000000"")\r\n\r\n        self.tl_bg = ""#FFFFFF""\r\n        self.tl_bg2 = ""#EEEEEE""\r\n        self.tl_fg = ""#000000""\r\n\r\n    # Dark\r\n    def color_theme_dark(self):\r\n        self.master.config(bg=""#2a2b2d"")\r\n        self.text_frame.config(bg=""#2a2b2d"")\r\n        self.text_box.config(bg=""#212121"", fg=""#FFFFFF"")\r\n        self.entry_frame.config(bg=""#2a2b2d"")\r\n        self.entry_field.config(bg=""#212121"", fg=""#FFFFFF"", insertbackground=""#FFFFFF"")\r\n        self.send_button_frame.config(bg=""#2a2b2d"")\r\n        self.send_button.config(bg=""#212121"", fg=""#FFFFFF"", activebackground=""#212121"", activeforeground=""#FFFFFF"")\r\n       # self.emoji_button.config(bg=""#212121"", fg=""#FFFFFF"", activebackground=""#212121"", activeforeground=""#FFFFFF"")\r\n        self.sent_label.config(bg=""#2a2b2d"", fg=""#FFFFFF"")\r\n\r\n        self.tl_bg = ""#212121""\r\n        self.tl_bg2 = ""#2a2b2d""\r\n        self.tl_fg = ""#FFFFFF""\r\n\r\n    # Grey\r\n    def color_theme_grey(self):\r\n        self.master.config(bg=""#444444"")\r\n        self.text_frame.config(bg=""#444444"")\r\n        self.text_box.config(bg=""#4f4f4f"", fg=""#ffffff"")\r\n        self.entry_frame.config(bg=""#444444"")\r\n        self.entry_field.config(bg=""#4f4f4f"", fg=""#ffffff"", insertbackground=""#ffffff"")\r\n        self.send_button_frame.config(bg=""#444444"")\r\n        self.send_button.config(bg=""#4f4f4f"", fg=""#ffffff"", activebackground=""#4f4f4f"", activeforeground=""#ffffff"")\r\n        #self.emoji_button.config(bg=""#4f4f4f"", fg=""#ffffff"", activebackground=""#4f4f4f"", activeforeground=""#ffffff"")\r\n        self.sent_label.config(bg=""#444444"", fg=""#ffffff"")\r\n\r\n        self.tl_bg = ""#4f4f4f""\r\n        self.tl_bg2 = ""#444444""\r\n        self.tl_fg = ""#ffffff""\r\n\r\n\r\n    def color_theme_turquoise(self):\r\n        self.master.config(bg=""#003333"")\r\n        self.text_frame.config(bg=""#003333"")\r\n        self.text_box.config(bg=""#669999"", fg=""#FFFFFF"")\r\n        self.entry_frame.config(bg=""#003333"")\r\n        self.entry_field.config(bg=""#669999"", fg=""#FFFFFF"", insertbackground=""#FFFFFF"")\r\n        self.send_button_frame.config(bg=""#003333"")\r\n        self.send_button.config(bg=""#669999"", fg=""#FFFFFF"", activebackground=""#669999"", activeforeground=""#FFFFFF"")\r\n        #self.emoji_button.config(bg=""#669999"", fg=""#FFFFFF"", activebackground=""#669999"", activeforeground=""#FFFFFF"")\r\n        self.sent_label.config(bg=""#003333"", fg=""#FFFFFF"")\r\n\r\n        self.tl_bg = ""#669999""\r\n        self.tl_bg2 = ""#003333""\r\n        self.tl_fg = ""#FFFFFF""    \r\n\r\n    # Blue\r\n    def color_theme_dark_blue(self):\r\n        self.master.config(bg=""#263b54"")\r\n        self.text_frame.config(bg=""#263b54"")\r\n        self.text_box.config(bg=""#1c2e44"", fg=""#FFFFFF"")\r\n        self.entry_frame.config(bg=""#263b54"")\r\n        self.entry_field.config(bg=""#1c2e44"", fg=""#FFFFFF"", insertbackground=""#FFFFFF"")\r\n        self.send_button_frame.config(bg=""#263b54"")\r\n        self.send_button.config(bg=""#1c2e44"", fg=""#FFFFFF"", activebackground=""#1c2e44"", activeforeground=""#FFFFFF"")\r\n        #self.emoji_button.config(bg=""#1c2e44"", fg=""#FFFFFF"", activebackground=""#1c2e44"", activeforeground=""#FFFFFF"")\r\n        self.sent_label.config(bg=""#263b54"", fg=""#FFFFFF"")\r\n\r\n        self.tl_bg = ""#1c2e44""\r\n        self.tl_bg2 = ""#263b54""\r\n        self.tl_fg = ""#FFFFFF""\r\n\r\n \r\n    \r\n\r\n    # Torque\r\n    def color_theme_turquoise(self):\r\n        self.master.config(bg=""#003333"")\r\n        self.text_frame.config(bg=""#003333"")\r\n        self.text_box.config(bg=""#669999"", fg=""#FFFFFF"")\r\n        self.entry_frame.config(bg=""#003333"")\r\n        self.entry_field.config(bg=""#669999"", fg=""#FFFFFF"", insertbackground=""#FFFFFF"")\r\n        self.send_button_frame.config(bg=""#003333"")\r\n        self.send_button.config(bg=""#669999"", fg=""#FFFFFF"", activebackground=""#669999"", activeforeground=""#FFFFFF"")\r\n        #self.emoji_button.config(bg=""#669999"", fg=""#FFFFFF"", activebackground=""#669999"", activeforeground=""#FFFFFF"")\r\n        self.sent_label.config(bg=""#003333"", fg=""#FFFFFF"")\r\n\r\n        self.tl_bg = ""#669999""\r\n        self.tl_bg2 = ""#003333""\r\n        self.tl_fg = ""#FFFFFF""\r\n\r\n    # Hacker\r\n    def color_theme_hacker(self):\r\n        self.master.config(bg=""#0F0F0F"")\r\n        self.text_frame.config(bg=""#0F0F0F"")\r\n        self.entry_frame.config(bg=""#0F0F0F"")\r\n        self.text_box.config(bg=""#0F0F0F"", fg=""#33FF33"")\r\n        self.entry_field.config(bg=""#0F0F0F"", fg=""#33FF33"", insertbackground=""#33FF33"")\r\n        self.send_button_frame.config(bg=""#0F0F0F"")\r\n        self.send_button.config(bg=""#0F0F0F"", fg=""#FFFFFF"", activebackground=""#0F0F0F"", activeforeground=""#FFFFFF"")\r\n        #self.emoji_button.config(bg=""#0F0F0F"", fg=""#FFFFFF"", activebackground=""#0F0F0F"", activeforeground=""#FFFFFF"")\r\n        self.sent_label.config(bg=""#0F0F0F"", fg=""#33FF33"")\r\n\r\n        self.tl_bg = ""#0F0F0F""\r\n        self.tl_bg2 = ""#0F0F0F""\r\n        self.tl_fg = ""#33FF33""\r\n\r\n    \r\n\r\n    # Default font and color theme\r\n    def default_format(self):\r\n        self.font_change_default()\r\n        self.color_theme_default()    \r\n\r\n        \r\nroot=Tk()\r\n\r\n\r\na = ChatInterface(root)\r\nroot.geometry(window_size)\r\nroot.title(""PyBot"")\r\nroot.iconbitmap(\'i.ico\')\r\nroot.mainloop()\r\n'"
