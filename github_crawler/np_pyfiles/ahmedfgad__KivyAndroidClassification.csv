file_path,api_count,code
Fruits.py,0,"b'import numpy\nimport PIL.Image\n\ndef sigmoid(inpt):\n    return 1.0/(1.0+numpy.exp(-1*inpt))\n    \ndef relu(inpt):\n    result = inpt\n    result[inpt<0] = 0\n    return result\n\ndef predict_output(weights_mat_path, data_inputs, activation=""relu""):\n    weights_mat = numpy.load(weights_mat_path)\n    r1 = data_inputs\n    for curr_weights in weights_mat:\n        r1 = numpy.matmul(a=r1, b=curr_weights)\n        if activation == ""relu"":\n            r1 = relu(r1)\n        elif activation == ""sigmoid"":\n            r1 = sigmoid(r1)\n    r1 = r1[0, :]\n    predicted_label = numpy.where(r1 == numpy.max(r1))[0][0]\n    class_labels = [""Apple"", ""Raspberry"", ""Mango"", ""Lemon""]\n    predicted_class = class_labels[predicted_label]\n    return predicted_class\n\ndef extract_features(img_path):\n    im = PIL.Image.open(img_path).convert(""HSV"")\n    fruit_data_hsv = numpy.asarray(im, dtype=numpy.uint8)\n\n    indices = numpy.load(file=""indices.npy"")\n    \n    hist = numpy.histogram(a=fruit_data_hsv[:, :, 0], bins=360)\n    im_features = hist[0][indices]\n    img_features = numpy.zeros(shape=(1, im_features.size))\n    img_features[0, :] = im_features[:im_features.size]\n    return img_features\n\n'"
main.py,0,"b'import kivy.app\nimport Fruits\n\nclass FirstApp(kivy.app.App):\n    def classify_image(self):\n        img_path = self.root.ids[""img""].source\n\n        img_features = Fruits.extract_features(img_path)\n\n        predicted_class = Fruits.predict_output(""weights.npy"", img_features, activation=""sigmoid"")\n\n        self.root.ids[""label""].text = ""Predicted Class : "" + predicted_class\n\nfirstApp = FirstApp(title=""Fruits 360 Recognition."")\nfirstApp.run()\n\n'"
