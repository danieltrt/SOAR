file_path,api_count,code
main.py,0,"b'import kivy.app\nimport kivy.uix.boxlayout\nimport kivy.uix.image\nimport PIL.Image\nimport numpy\nimport numpycnn\nimport threading\nimport kivy.clock\n\nclass AppGUI(kivy.uix.boxlayout.BoxLayout):\n    layer_num = 1\n    def run_cnn_thread(self):\n        print(self.layer_num%3)\n        print(""Layer num : "", self.layer_num)\n        self.curr_img = self.cnn_example(numpy_img=self.curr_img, layer=self.layer_num%3)\n        self.refresh_GUI(layer=self.layer_num%3)\n        self.ids.lbl_details.text = ""Shape of output=""+str(self.curr_img.shape)\n        self.layer_num = self.layer_num + 1\n        print(""Output shape : "", self.curr_img.shape)\n\n    def start_cnn(self):\n        img1 = self.ids.img1#Original Image\n        im = PIL.Image.open(img1.source).convert(""L"")\n        img_arr = numpy.asarray(im, dtype=numpy.uint8)\n        if self.layer_num%3 == 1:\n            img1 = self.ids.img1#Original Image\n            im = PIL.Image.open(img1.source).convert(""L"")\n            img_arr = numpy.asarray(im, dtype=numpy.uint8)\n            self.curr_img = img_arr\n            threading.Thread(target=self.run_cnn_thread).start()\n            self.ids.btn.text = ""Wait.""\n        elif self.layer_num%3 == 2:\n            threading.Thread(target=self.run_cnn_thread).start()\n            self.ids.btn.text = ""Wait.""\n        elif self.layer_num%3 == 0:\n            threading.Thread(target=self.run_cnn_thread).start()\n            self.ids.btn.text = ""Wait.""\n\n    def cnn_example(self, numpy_img, layer=1):\n        if layer == 1:\n            #**Working with conv layer 1**\n            l1_filter = numpy.zeros((2,3,3))\n            l1_filter[0, :, :] = numpy.array([[[-1, 0, 1], \n                                               [-1, 0, 1], \n                                               [-1, 0, 1]]])\n            l1_filter[1, :, :] = numpy.array([[[1,   1,  1], \n                                               [0,   0,  0], \n                                               [-1, -1, -1]]])\n            \n            l1_feature_map = numpycnn.conv(numpy_img, l1_filter)\n            im = PIL.Image.fromarray(numpy.uint8(l1_feature_map[:, :, 0]))\n            im.save(""conv1_filter1.png"")\n    \n            im = PIL.Image.fromarray(numpy.uint8(l1_feature_map[:, :, 1]))\n            im.save(""conv1_filter2.png"")\n    \n            l1_feature_map_relu = numpycnn.relu(l1_feature_map)\n            im = PIL.Image.fromarray(numpy.uint8(l1_feature_map[:, :, 0]))\n            im.save(""conv1_relu1.png"")\n    \n            im = PIL.Image.fromarray(numpy.uint8(l1_feature_map[:, :, 1]))\n            im.save(""conv1_relu2.png"")\n    \n            l1_feature_map_relu_pool = numpycnn.pooling(l1_feature_map_relu, 2, 2)\n            im = PIL.Image.fromarray(numpy.uint8(l1_feature_map_relu_pool[:, :, 0]))\n            im.save(""conv1_relu_pool1.png"")\n    \n            im = PIL.Image.fromarray(numpy.uint8(l1_feature_map_relu_pool[:, :, 1]))\n            im.save(""conv1_relu_pool2.png"")\n\n            return l1_feature_map_relu_pool\n\n        elif layer == 2:\n            #**Working with conv layer 2**\n            l2_filter = numpy.random.rand(3, 5, 5, numpy_img.shape[-1])\n            l2_feature_map = numpycnn.conv(numpy_img, l2_filter)\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map[:, :, 0]))\n            im.save(""conv2_filter1.png"")\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map[:, :, 1]))\n            im.save(""conv2_filter2.png"")\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map[:, :, 2]))\n            im.save(""conv2_filter3.png"")\n\n            l2_feature_map_relu = numpycnn.relu(l2_feature_map)\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map_relu[:, :, 0]))\n            im.save(""conv2_relu1.png"")\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map_relu[:, :, 1]))\n            im.save(""conv2_relu2.png"")\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map_relu[:, :, 2]))\n            im.save(""conv2_relu3.png"")\n\n            l2_feature_map_relu_pool = numpycnn.pooling(l2_feature_map_relu, 2, 2)\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map_relu_pool[:, :, 0]))\n            im.save(""conv2_relu_pool1.png"")\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map_relu_pool[:, :, 1]))\n            im.save(""conv2_relu_pool2.png"")\n            im = PIL.Image.fromarray(numpy.uint8(l2_feature_map_relu_pool[:, :, 2]))\n            im.save(""conv2_relu_pool3.png"")\n            return l2_feature_map_relu_pool\n\n        elif layer == 0:#0 corresponds to layer 3\n            #**Working with conv layer 3**\n            l3_filter = numpy.random.rand(1, 7, 7, numpy_img.shape[-1])\n            l3_feature_map = numpycnn.conv(numpy_img, l3_filter)\n            im = PIL.Image.fromarray(numpy.uint8(l3_feature_map[:, :, 0]))\n            im.save(""conv3_filter1.png"")\n            l3_feature_map_relu = numpycnn.relu(l3_feature_map)\n            im = PIL.Image.fromarray(numpy.uint8(l3_feature_map_relu[:, :, 0]))\n            im.save(""conv3_relu1.png"")\n            l3_feature_map_relu_pool = numpycnn.pooling(l3_feature_map_relu, 2, 2)\n            im = PIL.Image.fromarray(numpy.uint8(l3_feature_map_relu_pool[:, :, 0]))\n            im.save(""conv3_relu_pool1.png"")\n\n            return l3_feature_map_relu_pool\n    \n    @kivy.clock.mainthread\n    def refresh_GUI(self, layer=1):\n        img1 = self.ids.img1\n        img2 = self.ids.img2\n        img3 = self.ids.img3\n        img4 = self.ids.img4\n        img5 = self.ids.img5\n        img6 = self.ids.img6\n        img7 = self.ids.img7\n        img8 = self.ids.img8\n        img9 = self.ids.img9\n\n        lbl1 = self.ids.lbl1\n        lbl2 = self.ids.lbl2\n        lbl3 = self.ids.lbl3\n        lbl4 = self.ids.lbl4\n        lbl5 = self.ids.lbl5\n        lbl6 = self.ids.lbl6\n        lbl7 = self.ids.lbl7\n        lbl8 = self.ids.lbl8\n        lbl9 = self.ids.lbl9\n\n        if layer == 1:\n            lbl2.text = ""L1Map1""\n            img2.source = ""conv1_filter1.png""\n            img2.reload()\n    \n            lbl3.text = ""L1Map2""\n            img3.source = ""conv1_filter2.png""\n            img3.reload()\n    \n            lbl4.text = ""L1Map1ReLU""\n            img4.source = ""conv1_relu1.png""\n            img4.reload()\n    \n            lbl5.text = ""L1Map2ReLU""\n            img5.source = ""conv1_relu2.png""\n            img5.reload()    \n\n            lbl6.text = ""L1Map1ReLUPool""\n            img6.source = ""conv1_relu_pool1.png""\n            img6.reload()\n    \n            lbl7.text = ""L1Map2ReLUPool""\n            img7.source = ""conv1_relu_pool2.png""\n            img7.reload()\n\n            self.ids.btn.text = ""Run Second Conv. Layer""\n\n        elif layer == 2:\n            lbl1.text = ""L2Map1""\n            img1.source = ""conv2_filter1.png""\n            img1.reload()\n\n            lbl2.text = ""L2Map2""\n            img2.source = ""conv2_filter2.png""\n            img2.reload()\n\n            lbl3.text = ""L2Map3""\n            img3.source = ""conv2_filter3.png""\n            img3.reload()\n\n            lbl4.text = ""L2Map1ReLU""\n            img4.source = ""conv2_relu1.png""\n            img4.reload()\n\n            lbl5.text = ""L2Map3ReLU""\n            img5.source = ""conv2_relu2.png""\n            img5.reload()\n\n            lbl6.text = ""L2Map3ReLU""\n            img6.source = ""conv2_relu3.png""\n            img6.reload()\n\n            lbl7.text = ""L2Map1ReLU""\n            img7.source = ""conv2_relu_pool1.png""\n            img7.reload()\n\n            lbl8.text = ""L2Map2ReLU""\n            img8.source = ""conv2_relu_pool2.png""\n            img8.reload()\n\n            lbl9.text = ""L2Map3ReLU""\n            img9.source = ""conv2_relu_pool3.png""\n            img9.reload()\n\n            self.ids.btn.text = ""Run Third Conv. Layer""\n\n        elif layer == 0:#0 corresponds to layer 3\n            lbl1.text = ""Original""\n            img1.source = ""input_image.jpg""\n            img1.reload()\n\n            #**Working with conv layer 3**\n            lbl2.text = ""L3Map1""\n            img2.source = ""conv3_filter1.png""\n            img2.reload()\n\n            lbl3.text = ""L3Map1ReLU""\n            img3.source = ""conv3_relu1.png""\n            img3.reload()\n            lbl4.text = ""L3Map1ReLUPool""\n            img4.source = ""conv3_relu_pool1.png""\n            img4.reload()\n\n            img5.source = """"\n            img5.reload()\n            img6.source = """"\n            img6.reload()\n            img7.source = """"\n            img7.reload()\n            img8.source = """"\n            img8.reload()\n            img9.source = """"\n            img9.reload()\n\n            lbl5.text = """"\n            lbl6.text = """"\n            lbl7.text = """"\n            lbl8.text = """"\n            lbl9.text = """"\n\n            self.ids.btn.text = ""Repeat Again. Run First Conv. Layer""\n\nclass NumPyCNNApp(kivy.app.App):\n    pass\n\nif __name__ == ""__main__"":\n    NumPyCNNApp().run()\n'"
numpycnn.py,0,"b'import numpy\r\n#import sys\r\n\r\n""""""\r\nConvolutional neural network implementation using NumPy.\r\nAn article describing this project is titled ""Building Convolutional Neural Network using NumPy from Scratch"". It is available in these links: https://www.linkedin.com/pulse/building-convolutional-neural-network-using-numpy-from-ahmed-gad/\r\nhttps://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html\r\nIt is also translated into Chinese: http://m.aliyun.com/yunqi/articles/585741\r\n\r\nThe project is tested using Python 3.5.2 installed inside Anaconda 4.2.0 (64-bit)\r\nNumPy version used is 1.14.0\r\n\r\nFor more info., contact me:\r\n    Ahmed Fawzy Gad\r\n    KDnuggets: https://www.kdnuggets.com/author/ahmed-gad\r\n    LinkedIn: https://www.linkedin.com/in/ahmedfgad\r\n    Facebook: https://www.facebook.com/ahmed.f.gadd\r\n    ahmed.f.gad@gmail.com\r\n    ahmed.fawzy@ci.menofia.edu.eg\r\n""""""\r\n\r\ndef conv_(img, conv_filter):\r\n    filter_size = conv_filter.shape[1]\r\n    result = numpy.zeros((img.shape))\r\n    #Looping through the image to apply the convolution operation.\r\n    for r in numpy.uint16(numpy.arange(filter_size/2.0, \r\n                          img.shape[0]-filter_size/2.0+1)):\r\n        for c in numpy.uint16(numpy.arange(filter_size/2.0, \r\n                                           img.shape[1]-filter_size/2.0+1)):\r\n            """"""\r\n            Getting the current region to get multiplied with the filter.\r\n            How to loop through the image and get the region based on \r\n            the image and filer sizes is the most tricky part of convolution.\r\n            """"""\r\n            curr_region = img[r-numpy.uint16(numpy.floor(filter_size/2.0)):r+numpy.uint16(numpy.ceil(filter_size/2.0)), \r\n                              c-numpy.uint16(numpy.floor(filter_size/2.0)):c+numpy.uint16(numpy.ceil(filter_size/2.0))]\r\n            #Element-wise multipliplication between the current region and the filter.\r\n            curr_result = curr_region * conv_filter\r\n            conv_sum = numpy.sum(curr_result) #Summing the result of multiplication.\r\n            result[r, c] = conv_sum #Saving the summation in the convolution layer feature map.\r\n            \r\n    #Clipping the outliers of the result matrix.\r\n    final_result = result[numpy.uint16(filter_size/2.0):result.shape[0]-numpy.uint16(filter_size/2.0), \r\n                          numpy.uint16(filter_size/2.0):result.shape[1]-numpy.uint16(filter_size/2.0)]\r\n    return final_result\r\ndef conv(img, conv_filter):\r\n    if len(img.shape) > 2 or len(conv_filter.shape) > 3: # Check if number of image channels matches the filter depth.\r\n        if img.shape[-1] != conv_filter.shape[-1]:\r\n            print(""Error: Number of channels in both image and filter must match."")\r\n#            sys.exit()\r\n    if conv_filter.shape[1] != conv_filter.shape[2]: # Check if filter dimensions are equal.\r\n        print(\'Error: Filter must be a square matrix. I.e. number of rows and columns must match.\')\r\n#        sys.exit()\r\n    if conv_filter.shape[1]%2==0: # Check if filter diemnsions are odd.\r\n        print(\'Error: Filter must have an odd size. I.e. number of rows and columns must be odd.\')\r\n#        sys.exit()\r\n\r\n    # An empty feature map to hold the output of convolving the filter(s) with the image.\r\n    feature_maps = numpy.zeros((img.shape[0]-conv_filter.shape[1]+1, \r\n                                img.shape[1]-conv_filter.shape[1]+1, \r\n                                conv_filter.shape[0]))\r\n\r\n    # Convolving the image by the filter(s).\r\n    for filter_num in range(conv_filter.shape[0]):\r\n        print(""Filter "", filter_num + 1)\r\n        curr_filter = conv_filter[filter_num, :] # getting a filter from the bank.\r\n        """""" \r\n        Checking if there are mutliple channels for the single filter.\r\n        If so, then each channel will convolve the image.\r\n        The result of all convolutions are summed to return a single feature map.\r\n        """"""\r\n        if len(curr_filter.shape) > 2:\r\n            conv_map = conv_(img[:, :, 0], curr_filter[:, :, 0]) # Array holding the sum of all feature maps.\r\n            for ch_num in range(1, curr_filter.shape[-1]): # Convolving each channel with the image and summing the results.\r\n                conv_map = conv_map + conv_(img[:, :, ch_num], \r\n                                  curr_filter[:, :, ch_num])\r\n        else: # There is just a single channel in the filter.\r\n            conv_map = conv_(img, curr_filter)\r\n        feature_maps[:, :, filter_num] = conv_map # Holding feature map with the current filter.\r\n    return feature_maps # Returning all feature maps.\r\n    \r\n\r\ndef pooling(feature_map, size=2, stride=2):\r\n    #Preparing the output of the pooling operation.\r\n    pool_out = numpy.zeros((numpy.uint16((feature_map.shape[0]-size+1)/stride),\r\n                            numpy.uint16((feature_map.shape[1]-size+1)/stride),\r\n                            feature_map.shape[-1]))\r\n    for map_num in range(feature_map.shape[-1]):\r\n        r2 = 0\r\n        for r in numpy.arange(0,feature_map.shape[0]-size-1, stride):\r\n            c2 = 0\r\n            for c in numpy.arange(0, feature_map.shape[1]-size-1, stride):\r\n                pool_out[r2, c2, map_num] = numpy.max([feature_map[r:r+size,  c:c+size]])\r\n                c2 = c2 + 1\r\n            r2 = r2 +1\r\n    return pool_out\r\n\r\ndef relu(feature_map):\r\n    #Preparing the output of the ReLU activation function.\r\n    relu_out = numpy.zeros(feature_map.shape)\r\n    for map_num in range(feature_map.shape[-1]):\r\n        for r in numpy.arange(0,feature_map.shape[0]):\r\n            for c in numpy.arange(0, feature_map.shape[1]):\r\n                relu_out[r, c, map_num] = numpy.max([feature_map[r, c, map_num], 0])\r\n    return relu_out\r\n'"
