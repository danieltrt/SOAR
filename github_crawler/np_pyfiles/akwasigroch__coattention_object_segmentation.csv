file_path,api_count,code
models.py,0,"b'import torch\nfrom torch import nn\nfrom torchvision.models.vgg import VGG\nfrom torchvision.models.vgg import vgg16\nfrom torchvision.models.resnet import resnet50\nimport torch.nn.functional as F\n\nclass ResNet50(nn.Module):\n    def __init__(self):\n        super(ResNet50, self).__init__()\n        self.model = resnet50(pretrained=True)\n        self.model = torch.nn.Sequential(*list(self.model.children())[:-1])\n        self.disable_training()\n    def forward(self,x):\n        return self.model(x)\n    def disable_training(self):\n        for parameter in self.parameters():\n            parameter.requires_grad = False\n\'\'\'Models based on https://github.com/pochih/FCN-pytorch\'\'\'\nclass FCN32s(nn.Module):\n\n    def __init__(self, n_class = 1):\n        super().__init__()\n        self.n_class = n_class\n        self.pretrained_net = VGGNet()\n        self.relu    = nn.ReLU(inplace=True)\n        self.deconv1 = nn.ConvTranspose2d(512, 512, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn1     = nn.BatchNorm2d(512)\n        self.deconv2 = nn.ConvTranspose2d(512, 256, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn2     = nn.BatchNorm2d(256)\n        self.deconv3 = nn.ConvTranspose2d(256, 128, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn3     = nn.BatchNorm2d(128)\n        self.deconv4 = nn.ConvTranspose2d(128, 64, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn4     = nn.BatchNorm2d(64)\n        self.deconv5 = nn.ConvTranspose2d(64, 32, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn5     = nn.BatchNorm2d(32)\n        self.classifier = nn.Conv2d(32, n_class, kernel_size=7, padding = 3)\n\n    def forward(self, x):\n        output = self.pretrained_net(x)\n        x5 = output[\'x5\']  # size=(N, 512, x.H/32, x.W/32)\n\n        score = self.bn1(self.relu(self.deconv1(x5)))     # size=(N, 512, x.H/16, x.W/16)\n        score = self.bn2(self.relu(self.deconv2(score)))  # size=(N, 256, x.H/8, x.W/8)\n        score = self.bn3(self.relu(self.deconv3(score)))  # size=(N, 128, x.H/4, x.W/4)\n        score = self.bn4(self.relu(self.deconv4(score)))  # size=(N, 64, x.H/2, x.W/2)\n        score = self.bn5(self.relu(self.deconv5(score)))  # size=(N, 32, x.H, x.W)\n        score = torch.sigmoid(self.classifier(score))                    # size=(N, n_class, x.H/1, x.W/1)\n\n        return score  # size=(N, n_class, x.H/1, x.W/1)\n   \nclass FCN8s(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        self.n_class = 1\n        self.pretrained_net = VGGNet()\n        self.relu    = nn.ReLU(inplace=True)\n        self.deconv1 = nn.ConvTranspose2d(512, 512, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn1     = nn.BatchNorm2d(512)\n        self.deconv2 = nn.ConvTranspose2d(512, 256, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn2     = nn.BatchNorm2d(256)\n        self.deconv3 = nn.ConvTranspose2d(256, 128, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn3     = nn.BatchNorm2d(128)\n        self.deconv4 = nn.ConvTranspose2d(128, 64, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn4     = nn.BatchNorm2d(64)\n        self.deconv5 = nn.ConvTranspose2d(64, 32, kernel_size=3, stride=2, padding=1, dilation=1, output_padding=1)\n        self.bn5     = nn.BatchNorm2d(32)\n        self.classifier = nn.Conv2d(32, self.n_class, kernel_size=1)\n\n    def forward(self, x):\n        output = self.pretrained_net(x)\n        x5 = output[\'x5\']  # size=(N, 512, x.H/32, x.W/32)\n        x4 = output[\'x4\']  # size=(N, 512, x.H/16, x.W/16)\n        x3 = output[\'x3\']  # size=(N, 256, x.H/8,  x.W/8)\n\n        score = self.relu(self.deconv1(x5))               # size=(N, 512, x.H/16, x.W/16)\n        score = self.bn1(score + x4)                      # element-wise add, size=(N, 512, x.H/16, x.W/16)\n        score = self.relu(self.deconv2(score))            # size=(N, 256, x.H/8, x.W/8)\n        score = self.bn2(score + x3)                      # element-wise add, size=(N, 256, x.H/8, x.W/8)\n        score = self.bn3(self.relu(self.deconv3(score)))  # size=(N, 128, x.H/4, x.W/4)\n        score = self.bn4(self.relu(self.deconv4(score)))  # size=(N, 64, x.H/2, x.W/2)\n        score = self.bn5(self.relu(self.deconv5(score)))  # size=(N, 32, x.H, x.W)\n        score = torch.sigmoid(self.classifier(score))                    # size=(N, n_class, x.H/1, x.W/1)\n\n        return score  # size=(N, n_class, x.H/1, x.W/1)\n\n\n\nclass VGGNet(VGG):\n    def __init__(self):\n        super().__init__(self.make_layers())\n        self.ranges = ((0, 5), (5, 10), (10, 17), (17, 24), (24, 31))\n\n        \n        self.load_state_dict(vgg16(pretrained=True).state_dict())\n        \n        del self.classifier\n\n    def forward(self, x):\n        output = {}\n\n        # get the output of each maxpooling layer (5 maxpool in VGG net)\n        for idx in range(len(self.ranges)):\n            for layer in range(self.ranges[idx][0], self.ranges[idx][1]):\n                x = self.features[layer](x)\n            output[""x%d""%(idx+1)] = x\n\n        return output\n\n    def make_layers(self, batch_norm=False):\n        cfg =  [64, 64, \'M\', 128, 128, \'M\', 256, 256, 256, \'M\', 512, 512, 512, \'M\', 512, 512, 512, \'M\']\n        layers = []\n        in_channels = 3\n        for v in cfg:\n            if v == \'M\':\n                layers += [nn.MaxPool2d(kernel_size=2, stride=2)]\n            else:\n                conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)\n                if batch_norm:\n                    layers += [conv2d, nn.BatchNorm2d(v), nn.ReLU(inplace=True)]\n                else:\n                    layers += [conv2d, nn.ReLU(inplace=True)]\n                in_channels = v\n        return nn.Sequential(*layers)\n\n\n\n\n\n\n  \n'"
