file_path,api_count,code
spectrogram.py,20,"b'import sys\nimport numpy as np\nimport scipy.io.wavfile as wav\nimport ntpath\n\nfrom numpy.lib import stride_tricks\nfrom matplotlib import pyplot as plt\n\noutput_folder = \'outputs\'  # set your output folder and make sure it exists\n\n# short-time Fourier Transformation(STFT)\ndef stft(sig, frame_size, overlap_factor=0.5, window=np.hanning):\n    win = window(frame_size)\n    hop_size = int(frame_size - np.floor(overlap_factor * frame_size))\n\n    # zeros at beginning (thus center of 1st window should be for sample nr. 0)   \n    samples = np.append(np.zeros(int(np.floor(frame_size / 2.0))), sig)\n    # cols for windowing\n    cols = np.ceil((len(samples) - frame_size) / float(hop_size)) + 1\n    # zeros at end (thus samples can be fully covered by frames)\n    samples = np.append(samples, np.zeros(frame_size))\n\n    frames = stride_tricks.as_strided(samples, shape=(int(cols), frame_size), strides=(samples.strides[0] * hop_size, samples.strides[0])).copy()\n    frames *= win\n\n    return np.fft.rfft(frames)    \n\ndef log_scale_spec(spec, sr=44100, factor=20.):\n    time_bins, frequency_bins = np.shape(spec)\n\n    scale = np.linspace(0, 1, frequency_bins) ** factor\n    scale *= (frequency_bins-1)/max(scale)\n    scale = np.unique(np.round(scale))\n\n    # Creates spectrogram with new frequency bins\n    new_spectrogram = np.complex128(np.zeros([time_bins, len(scale)]))\n    for i in range(0, len(scale)):        \n        if i == len(scale)-1:\n            new_spectrogram[:,i] = np.sum(spec[:,int(scale[i]):], axis=1)\n        else:        \n            new_spectrogram[:,i] = np.sum(spec[:,int(scale[i]):int(scale[i+1])], axis=1)\n\n    # Lists center frequency of bins\n    all_frequencies = np.abs(np.fft.fftfreq(frequency_bins*2, 1./sr)[:frequency_bins+1])\n    frequemcies = []\n    for i in range(0, len(scale)):\n        if i == len(scale)-1:\n            frequemcies += [np.mean(all_frequencies[int(scale[i]):])]\n        else:\n            frequemcies += [np.mean(all_frequencies[int(scale[i]):int(scale[i+1])])]\n\n    return new_spectrogram, frequemcies\n\ndef plot_audio_spectrogram(audio_path, binsize=2**10, plot_path=None, argv = \'\', colormap=""jet""):\n    sample_rate, samples = wav.read(audio_path)\n    s = stft(samples, binsize)\n    new_spectrogram, freq = log_scale_spec(s, factor=1.0, sr=sample_rate)\n    data = 20. * np.log10(np.abs(new_spectrogram) / 10e+6)  #dBFS\n\n    time_bins, freq_bins = np.shape(data)\n\n    print(""Time bins: "", time_bins)\n    print(""Frequency bins: "", freq_bins)\n    print(""Sample rate: "", sample_rate)\n    print(""Samples: "",len(samples))\n    # horizontal resolution correlated with audio length  (samples / sample length = audio length in seconds). If you use this(I\'ve no idea why). I highly recommend to use ""gaussian"" interpolation.\n    #plt.figure(figsize=(len(samples) / sample_rate, freq_bins / 100))\n    plt.figure(figsize=(time_bins/100, freq_bins/100)) # resolution equal to audio data resolution, dpi=100 as default\n    plt.imshow(np.transpose(data), origin=""lower"", aspect=""auto"", cmap=colormap, interpolation=""none"")\n\n    # Labels\n    plt.xlabel(""Time(s)"")\n    plt.ylabel(""Frequency(Hz)"")\n    plt.xlim([0, time_bins-1])\n    plt.ylim([0, freq_bins])\n\n\n    if \'l\' in argv: # Add Labels\n        plt.colorbar().ax.set_xlabel(\'dBFS\')\n    else: # No Labels\n        plt.subplots_adjust(left=0,right=1,bottom=0,top=1)\n        plt.axis(\'off\')\n\n\n\n    x_locations = np.float32(np.linspace(0, time_bins-1, 10))\n    plt.xticks(x_locations, [""%.02f"" % l for l in ((x_locations*len(samples)/time_bins)+(0.5*binsize))/sample_rate])\n    y_locations = np.int16(np.round(np.linspace(0, freq_bins-1, 20)))\n    plt.yticks(y_locations, [""%.02f"" % freq[i] for i in y_locations])\n\n\n    if \'s\' in argv: # Save\n        print(\'Unlabeled output saved as.png\')\n        plt.savefig(plot_path)\n    else:\n        print(\'Graphic interface...\')\n        plt.show()\n\n    plt.clf()\n\n    return data\nif len(sys.argv) > 2:\n    ims = plot_audio_spectrogram(sys.argv[1], 2**10, output_folder + \'/\'+ ntpath.basename(sys.argv[1].replace(\'.wav\',\'\')) + \'.png\',  sys.argv[2])\nelse:\n    ims = plot_audio_spectrogram(sys.argv[1], 2**10, None, \'\')\n\n\n\n'"
