file_path,api_count,code
setup.py,0,"b'import setuptools\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\nabout = {}\n\nwith open(os.path.join(here, \'valinvest\', \'__version__.py\'), \'r\') as f:\n    exec(f.read(), about)\n\nwith open(""README.md"", ""r"") as fh:\n    readme = fh.read()\n\nsetuptools.setup(\n    name=about[\'__title__\'],\n    version=about[\'__version__\'],\n    description=about[\'__description__\'],\n    long_description=readme,\n    long_description_content_type=\'text/markdown\',\n    author=about[\'__author__\'],\n    url=about[\'__url__\'],\n    packages=setuptools.find_packages(),\n    classifiers=[\n        ""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: MIT License"",\n        ""Operating System :: OS Independent"",\n    ],\n    python_requires=\'>=3.6\',\n)\n'"
tests/__init__.py,0,b''
tests/test_fundamentals.py,0,"b""import pytest\nfrom valinvest.fundamentals import Fundamental\n\naapl = Fundamental('AAPL')\nsbux = Fundamental('SBUX')\n\nreference_scores = {\n    'sbux': {\n        'fscore': 6.7,\n        'revenue_score': 1,\n        'ebitda_score': 0.7,\n        'eps_score': 0.7,\n        'roic_score': 0.1,\n        'croic_score': 0.9,\n        'beta_score': 1,\n        'ebitda_cover_score': 1,\n        'debt_cost_score': 0.7,\n        'eq_buyback_score': 0.6\n    },\n    'aapl': {\n        'fscore': 6.8,\n        'revenue_score': 0.8,\n        'ebitda_score': 0.7,\n        'eps_score': 0.6,\n        'roic_score': 1,\n        'croic_score': 1,\n        'beta_score': 0,\n        'ebitda_cover_score': 1,\n        'debt_cost_score': 1,\n        'eq_buyback_score': 0.7\n    }\n}\n\n\nclass TestGetFinancials:\n\n    def test_input_types(self):\n        # Wrong type input\n        with pytest.raises(TypeError):\n            Fundamental(12)\n\n        # Empty string\n        with pytest.raises(ValueError):\n            Fundamental('')\n\n        # Not Nasdaq 100 tickers\n        with pytest.raises(ValueError):\n            Fundamental('FP')\n\n        # Too many inputs\n        with pytest.raises(TypeError):\n            Fundamental('AAPL', 'tt')\n\n\nclass TestComputeFScoreSBUX:\n    def test_fscore(self):\n        assert sbux.fscore() == reference_scores['sbux']['fscore']\n\n    def test_revenue_score(self):\n        assert sbux.revenue_score(\n        ) == reference_scores['sbux']['revenue_score']\n\n    def test_ebitda_score(self):\n        assert sbux.ebitda_score() == reference_scores['sbux']['ebitda_score']\n\n    def test_eps_score(self):\n        assert sbux.eps_score() == reference_scores['sbux']['eps_score']\n\n    def test_croic_score(self):\n        assert sbux.croic_score() == reference_scores['sbux']['croic_score']\n\n    def test_roic_score(self):\n        assert sbux.roic_score() == reference_scores['sbux']['roic_score']\n\n    def test_debt_cost_score(self):\n        assert sbux.debt_cost_score(\n        ) == reference_scores['sbux']['debt_cost_score']\n\n    def test_eq_buybacks_score(self):\n        assert sbux.eq_buyback_score(\n        ) == reference_scores['sbux']['eq_buyback_score']\n\n    def test_ebitda_cover_score(self):\n        assert sbux.ebitda_cover_score(\n        ) == reference_scores['sbux']['ebitda_cover_score']\n\n\nclass TestComputeFScoreAAPL:\n    def test_fscore(self):\n        assert aapl.fscore() == reference_scores['aapl']['fscore']\n\n    def test_revenue_score(self):\n        assert aapl.revenue_score(\n        ) == reference_scores['aapl']['revenue_score']\n\n    def test_ebitda_score(self):\n        assert aapl.ebitda_score() == reference_scores['aapl']['ebitda_score']\n\n    def test_eps_score(self):\n        assert aapl.eps_score() == reference_scores['aapl']['eps_score']\n\n    def test_croic_score(self):\n        assert aapl.croic_score() == reference_scores['aapl']['croic_score']\n\n    def test_roic_score(self):\n        assert aapl.roic_score() == reference_scores['aapl']['roic_score']\n\n    def test_debt_cost_score(self):\n        assert aapl.debt_cost_score(\n        ) == reference_scores['aapl']['debt_cost_score']\n\n    def test_eq_buybacks_score(self):\n        assert aapl.eq_buyback_score(\n        ) == reference_scores['aapl']['eq_buyback_score']\n\n    def test_ebitda_cover_score(self):\n        assert aapl.ebitda_cover_score(\n        ) == reference_scores['aapl']['ebitda_cover_score']\n"""
valinvest/__init__.py,0,"b'\nfrom .config import NASDAQ_100_TICKERS, SP_500_TICKERS\nfrom .fundamentals import Fundamental\nfrom .main import get_tickers_scores\n'"
valinvest/__version__.py,0,"b'""""""\n __   __   ______     __         __     __   __     __   __   ______     ______     ______  \n/\\ \\ / /  /\\  __ \\   /\\ \\       /\\ \\   /\\ ""-.\\ \\   /\\ \\ / /  /\\  ___\\   /\\  ___\\   /\\__  _\\ \n\\ \\ \\\'/   \\ \\  __ \\  \\ \\ \\____  \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\\'/   \\ \\  __\\   \\ \\___  \\  \\/_/\\ \\/ \n \\ \\__|    \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_\\  \\ \\_\\\\""\\_\\  \\ \\__|    \\ \\_____\\  \\/\\_____\\    \\ \\_\\ \n  \\/_/      \\/_/\\/_/   \\/_____/   \\/_/   \\/_/ \\/_/   \\/_/      \\/_____/   \\/_____/     \\/_/ \n                                                                                            \n""""""\n__title__ = \'valinvest\'\n__description__ = \'A value investing tool based on Warren Buffett, Joseph Piotroski and Benjamin Graham thoughts\'\n__url__ = \'https://github.com/astro30/valinvest\'\n__version__ = \'0.0.1\'\n__author__ = \'Guillaume Rey\'\n__license__ = \'MIT\'\n__copyright__ = \'Copyright 2020 Guillaume Rey\'\n'"
valinvest/config.py,0,"b""NASDAQ_100_TICKERS = ['ATVI', 'ADBE', 'AMD', 'ALXN', 'ALGN', 'GOOG', 'AMZN', 'AAL', 'AMGN', 'ADI', 'ANSS', 'AAPL', 'AMAT', 'ASML', 'ADSK', 'ADP', 'BIDU', 'BIIB', 'BMRN', 'BKNG', 'AVGO', 'CDNS', 'CDW', 'CERN', 'CHTR', 'CHKP', 'CTAS', 'CSCO', 'CTXS', 'CTSH', 'CMCSA', 'CPRT', 'CSGP', 'COST', 'CSX', 'DLTR', 'EBAY', 'EA', 'EXC', 'EXPE', 'FB', 'FAST', 'FISV', 'FOX', 'FOXA', 'GILD', 'IDXX', 'ILMN', 'INCY', 'INTC',\n                      'INTU', 'ISRG', 'JD', 'KLAC', 'LRCX', 'LBTYA', 'LBTYK', 'LULU', 'MAR', 'MXIM', 'MELI', 'MCHP', 'MU', 'MSFT', 'MDLZ', 'MNST', 'NTAP', 'NTES', 'NFLX', 'NVDA', 'NXPI', 'ORLY', 'PCAR', 'PAYX', 'PYPL', 'PEP', 'QCOM', 'REGN', 'ROST', 'SGEN', 'SIRI', 'SWKS', 'SPLK', 'SBUX', 'SNPS', 'TMUS', 'TTWO', 'TSLA', 'TXN', 'KHC', 'TCOM', 'ULTA', 'UAL', 'VRSN', 'VRSK', 'VRTX', 'WBA', 'WDC', 'WLTW', 'WDAY', 'XEL', 'XLNX']\nSP_500_TICKERS = ['MMM', 'AOS', 'ABT', 'ABBV', 'ACN', 'ATVI', 'AYI', 'ADBE', 'AAP', 'AMD', 'AES', 'AET', 'AMG', 'AFL', 'A', 'APD', 'AKAM', 'ALK', 'ALB', 'ARE', 'ALXN', 'ALGN', 'ALLE', 'AGN', 'ADS', 'LNT', 'ALL', 'GOOG', 'MO', 'AMZN', 'AEE', 'AAL', 'AEP', 'AXP', 'AIG', 'AMT', 'AWK', 'AMP', 'ABC', 'AME', 'AMGN', 'APH', 'APC', 'ADI', 'ANDV', 'ANSS', 'ANTM', 'AON', 'APA', 'AIV', 'AAPL', 'AMAT', 'APTV', 'ADM', 'ARNC', 'AJG', 'AIZ', 'T', 'ADSK', 'ADP', 'AZO', 'AVB', 'AVY', 'BHGE', 'BLL', 'BAC', 'BAX', 'BBT', 'BDX', 'BRK.B', 'BBY', 'BIIB', 'BLK', 'HRB', 'BA', 'BWA', 'BXP', 'BSX', 'BHF', 'BMY', 'AVGO', 'BF.B', 'CHRW', 'CA', 'COG', 'CDNS', 'CPB', 'COF', 'CAH', 'KMX', 'CCL', 'CAT', 'CBOE', 'CBG', 'CBS', 'CELG', 'CNC', 'CNP', 'CTL', 'CERN', 'CF', 'SCHW', 'CHTR', 'CHK', 'CVX', 'CMG', 'CB', 'CHD', 'CI', 'XEC', 'CINF', 'CTAS', 'CSCO', 'C', 'CFG', 'CTXS', 'CME', 'CMS', 'KO', 'CTSH', 'CL', 'CMCSA', 'CMA', 'CAG', 'CXO', 'COP', 'ED', 'STZ', 'GLW', 'COST', 'COTY', 'CCI', 'CSRA', 'CSX', 'CMI', 'CVS', 'DHI', 'DHR', 'DRI', 'DVA', 'DE', 'DAL', 'XRAY', 'DVN', 'DLR', 'DFS', 'DISCA', 'DISCK', 'DISH', 'DG', 'DLTR', 'D', 'DOV', 'DWDP', 'DPS', 'DTE', 'DUK', 'DRE', 'DXC', 'ETFC', 'EMN', 'ETN', 'EBAY', 'ECL', 'EIX', 'EW', 'EA', 'EMR', 'ETR', 'EVHC', 'EOG', 'EQT', 'EFX', 'EQIX', 'EQR', 'ESS', 'EL', 'RE', 'ES', 'EXC', 'EXPE', 'EXPD', 'ESRX', 'EXR', 'XOM', 'FFIV', 'FB', 'FAST', 'FRT', 'FDX', 'FIS', 'FITB', 'FE', 'FISV', 'FLIR', 'FLS', 'FLR', 'FMC', 'FL', 'F', 'FTV', 'FBHS', 'BEN', 'FCX', 'GPS', 'GRMN', 'IT', 'GD', 'GE', 'GGP', 'GIS', 'GM', 'GPC', 'GILD', 'GPN', 'GS', 'GT', 'GWW', 'HAL', 'HBI', 'HOG', 'HRS', 'HIG', 'HAS', 'HCA', 'HCP', 'HP', 'HSIC', 'HES', 'HPE', 'HLT', 'HOLX', 'HD', 'HON', 'HRL', 'HST', 'HPQ', 'HUM', 'HBAN', 'HII', 'IDXX', 'INFO', 'ITW', 'ILMN', 'INCY', 'IR', 'INTC', 'ICE', 'IBM', 'IP',\n                  'IPG', 'IFF', 'INTU', 'ISRG', 'IVZ', 'IQV', 'IRM', 'JBHT', 'JEC', 'SJM', 'JNJ', 'JCI', 'JPM', 'JNPR', 'KSU', 'K', 'KEY', 'KMB', 'KIM', 'KMI', 'KLAC', 'KSS', 'KHC', 'KR', 'LB', 'LLL', 'LH', 'LRCX', 'LEG', 'LEN', 'LUK', 'LLY', 'LNC', 'LKQ', 'LMT', 'L', 'LOW', 'LYB', 'MTB', 'MAC', 'M', 'MRO', 'MPC', 'MAR', 'MMC', 'MLM', 'MAS', 'MA', 'MAT', 'MKC', 'MCD', 'MCK', 'MDT', 'MRK', 'MET', 'MTD', 'MGM', 'KORS', 'MCHP', 'MU', 'MSFT', 'MAA', 'MHK', 'TAP', 'MDLZ', 'MON', 'MNST', 'MCO', 'MS', 'MSI', 'MYL', 'NDAQ', 'NOV', 'NAVI', 'NTAP', 'NFLX', 'NWL', 'NFX', 'NEM', 'NWSA', 'NWS', 'NEE', 'NLSN', 'NKE', 'NI', 'NBL', 'JWN', 'NSC', 'NTRS', 'NOC', 'NCLH', 'NRG', 'NUE', 'NVDA', 'ORLY', 'OXY', 'OMC', 'OKE', 'ORCL', 'PCAR', 'PKG', 'PH', 'PDCO', 'PAYX', 'PYPL', 'PNR', 'PBCT', 'PEP', 'PKI', 'PRGO', 'PFE', 'PCG', 'PM', 'PSX', 'PNW', 'PXD', 'PNC', 'RL', 'PPG', 'PPL', 'PX', 'PCLN', 'PFG', 'PG', 'PGR', 'PLD', 'PRU', 'PEG', 'PSA', 'PHM', 'PVH', 'QRVO', 'QCOM', 'PWR', 'DGX', 'RRC', 'RJF', 'RTN', 'O', 'RHT', 'REG', 'REGN', 'RF', 'RSG', 'RMD', 'RHI', 'ROK', 'COL', 'ROP', 'ROST', 'RCL', 'SPGI', 'CRM', 'SBAC', 'SCG', 'SLB', 'SNI', 'STX', 'SEE', 'SRE', 'SHW', 'SIG', 'SPG', 'SWKS', 'SLG', 'SNA', 'SO', 'LUV', 'SWK', 'SBUX', 'STT', 'SRCL', 'SYK', 'STI', 'SYMC', 'SYF', 'SNPS', 'SYY', 'TROW', 'TPR', 'TGT', 'TEL', 'FTI', 'TXN', 'TXT', 'BK', 'CLX', 'COO', 'HSY', 'MOS', 'TRV', 'DIS', 'TMO', 'TIF', 'TWX', 'TJX', 'TMK', 'TSS', 'TSCO', 'TDG', 'TRIP', 'FOXA', 'FOX', 'TSN', 'USB', 'UDR', 'ULTA', 'UAA', 'UA', 'UNP', 'UAL', 'UNH', 'UPS', 'URI', 'UTX', 'UHS', 'UNM', 'VFC', 'VLO', 'VAR', 'VTR', 'VRSN', 'VRSK', 'VZ', 'VRTX', 'VIAB', 'V', 'VNO', 'VMC', 'WMT', 'WBA', 'WM', 'WAT', 'WEC', 'WFC', 'HCN', 'WDC', 'WU', 'WRK', 'WY', 'WHR', 'WMB', 'WLTW', 'WYN', 'WYNN', 'XEL', 'XRX', 'XLNX', 'XL', 'XYL', 'YUM', 'ZBH', 'ZION', 'ZTS']\n"""
valinvest/fundamentals.py,18,"b'import requests\nimport pandas as pd\nimport io\nimport re\nimport numpy as np\nfrom .config import SP_500_TICKERS, NASDAQ_100_TICKERS\n\nSTATEMENT_API_URL = ""https://financialmodelingprep.com/api/v3/financials/{statement}/{ticker}""\nBETA_API_URL = ""https://financialmodelingprep.com/api/v3/company/profile/{ticker}""\nINCOME_STATEMENT = ""income-statement""\nBALANCE_STATEMENT = ""balance-sheet-statement""\nCASH_FLOW_STATEMENT = ""cash-flow-statement""\n\n\nclass Fundamental:\n    """"""A Fundamental object contains fundamental financial data of a given ticker, \n    methods including computation of the custom F-Score.\n\n    Parameters\n    ----------\n    ticker : str\n        symbol of the company to analyse\n\n    Raises\n    ------\n    TypeError\n        raised when ticker is not a string\n    ValueError\n        raised when ticker is not listed on SP500 or NASDAQ100 markets.\n    """"""\n\n    def __init__(self, ticker):\n        self.statement_strings = [\n            INCOME_STATEMENT,\n            BALANCE_STATEMENT,\n            CASH_FLOW_STATEMENT,\n        ]\n\n        # Sanity check on tickers\n        if not isinstance(ticker, str):\n            raise TypeError(""Ticker should be a string."")\n\n        self.ticker = ticker.upper()\n\n        # Checks if ticker in SP500 or NASDAQ\n        if self.ticker not in NASDAQ_100_TICKERS and self.ticker not in SP_500_TICKERS:\n            raise ValueError(\n                ""Ticker should be a NASDAQ 100 ticker or SP 500 ticker"")\n\n        self.statements = self._get_financial_statements()\n\n    def _get_financial_statement(self, statement):\n        """""" Get financial statement from Financial Modeling Prep API. \n        This method can retrieve the three key financial reports, ie balance sheet, cash flow and income statements.\n\n        Parameters\n        ----------\n        statement : str\n            financial report to be retrieved. Should be either ""balance-sheet-statement"", ""cash-flow-statement"" or ""income-statement""\n\n        Returns\n        -------\n        pandas.DataFrame\n            DataFrame-shaped requested financial report.\n        """"""\n        url = STATEMENT_API_URL.format(\n            statement=statement,\n            ticker=self.ticker)\n\n        res = requests.get(url).json()\n\n        df = pd.json_normalize(res[""financials""])\n\n        df[""ticker""] = self.ticker\n        df[""statement""] = statement\n        df[""year""] = pd.to_datetime(df[""date""]).dt.year\n        df.columns = [column.replace(\' \', \'_\').lower()\n                      for column in df.columns]\n        del df[""date""]\n\n        df.set_index([""ticker"", ""statement"", ""year""], inplace=True)\n\n        financials_series = (df.stack()\n                             .replace(\'\', np.nan)\n                             .astype(np.float32))\n\n        financials_series.rename(\'amount\', inplace=True)\n\n        financials_series.index.set_names(\n            [\'ticker\', \'statement\', \'year\', \'header\'], inplace=True)\n\n        result = financials_series.reorder_levels(\n            [\'ticker\', \'statement\', \'header\', \'year\'])\n\n        return result.sort_index(level=3).reset_index()\n\n    def _get_financial_statements(self):\n        """"""Merge the three financials statements in one DataFrame.\n\n        Returns\n        -------\n        pandas.DataFrame\n            All three financial reports in a DataFrame format.\n        """"""\n        res = pd.DataFrame(\n            [], columns=[\'ticker\', \'statement\', \'header\', \'year\', \'amount\'])\n        for statement in self.statement_strings:\n            res = pd.concat([res, self._get_financial_statement(statement)])\n\n        res.loc[-1] = [self.ticker, ""beta"", ""beta"",\n                       res[""year""].max(), self.beta]\n\n        dates = pd.DataFrame(range(2009, 2020), columns=[\'year\'])\n        dates[\'key\'] = 1\n        headers_index = (res.groupby([\'ticker\', \'statement\', \'header\'])\n                            .size()\n                            .reset_index()[[\'ticker\', \'statement\', \'header\']])\n        headers_index[\'key\'] = 1\n\n        cartesian_step = pd.merge(dates, headers_index, on=\'key\')\n        del cartesian_step[\'key\']\n\n        res = pd.merge(cartesian_step, res, on=[\n                       \'year\', \'ticker\', \'statement\', \'header\'], how=\'left\')\n\n        res[\'amount\'].fillna(0, inplace=True)\n\n        return res.sort_values(by=[""ticker"", ""statement"", ""header"", ""year""]).reset_index(drop=True)\n\n    def _metric_growth(self, header, name):\n        """"""Returns if the obversed financial statement \'header\' value is growing from one year to another.\n        Compute growth (1 if increase else 0)\n\n        Parameters\n        ----------\n        header : str\n            Label of the financial statement header. Ex: EBITDA, Total liabilities, interest expense, etc.\n        name : str\n            Name of the metric\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if growth between year (Y) and year before (Y-1). First year is defaulted to 0.\n\n        Raises\n        ------\n        ValueError\n            Raised if header is not in the data.\n        """"""\n        if header not in self.statements[""header""].values:\n            raise ValueError(\n                ""Requested Company does not have {header} available."".format(\n                    header)\n            )\n\n        _header_df = self.statements[self.statements[""header""] == str(\n            header)][[""year"", ""amount""]].copy()\n        _header_df.set_index(""year"", inplace=True)\n        _header_df.sort_index(inplace=True)\n        _header = _header_df.squeeze()\n\n        _df = _header.pct_change().fillna(0)\n\n        res = pd.Series(np.where(_df > 0, 1, 0), index=_df.index)\n\n        return res.rename(name)\n\n    @property\n    def beta(self):\n        """"""Returns beta (volatility of the security vs market)\n\n        Returns\n        -------\n        float\n            Beta\n        """"""\n        url = BETA_API_URL.format(ticker=self.ticker)\n        res = requests.get(url).json()\n\n        beta = float(""inf"")\n        if res[""profile""][""beta""]:\n            beta = float(res[""profile""][""beta""])\n\n        return beta\n\n    @property\n    def eps_growth(self):\n        """"""Returns series of year on year growth of earnings per share.\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if growth between year (Y) and year before (Y-1). First year is defaulted to 0.\n        """"""\n        return self._metric_growth(""eps_diluted"", ""eps_g"")\n\n    @property\n    def revenue_growth(self):\n        """"""Returns series of year on year growth of revenue.\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if growth between year (Y) and year before (Y-1). First year is defaulted to 0.\n        """"""\n        return self._metric_growth(""revenue"", ""rev_g"")\n\n    @property\n    def ebitda_growth(self):\n        """"""Returns series of year on year growth of ebitda.\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if growth between year (Y) and year before (Y-1). First year is defaulted to 0.\n        """"""\n        return self._metric_growth(""ebitda"", ""ebt_g"")\n\n    @property\n    def roic_growth(self):\n        """"""Returns series of yearly ROIC (return on invested capital).\n        ROIC = NOPLAT / Invested Capital\n        Invested Capital = Debt + Equity\n        NOPLAT = net operating profit less adjusted taxes\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if ROIC > 10%.\n        """"""\n        stmt = self.statements\n\n        operating_income = stmt[\n            (stmt[""header""] == ""operating_income"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        operating_expenses = stmt[\n            (stmt[""header""] == ""operating_expenses"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        operating_profit = operating_income - operating_expenses\n\n        income_tax_expense = stmt[\n            (stmt[""header""] == ""income_tax_expense"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        earnings_before_tax = stmt[\n            (stmt[""header""] == ""earnings_before_tax"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        tax_rate_length_array = len(operating_profit)\n        tax_rate = np.array([float(\'1\')] * tax_rate_length_array)\n\n        np.divide(income_tax_expense,\n                  earnings_before_tax,\n                  out=tax_rate,\n                  where=earnings_before_tax != 0)\n\n        total_shareholders_equity = stmt[\n            (stmt[""header""] == ""total_shareholders_equity"")\n            & (stmt[""statement""] == ""balance-sheet-statement"")\n        ][""amount""].values\n\n        total_debt = stmt[\n            (stmt[""header""] == ""total_debt"")\n            & (stmt[""statement""] == ""balance-sheet-statement"")\n        ][""amount""].values\n\n        length_array = len(operating_profit)\n        value_array = np.array([float(\'0\')] * length_array)\n\n        np.divide(operating_profit * (1 - tax_rate),\n                  (total_shareholders_equity + total_debt),\n                  out=value_array,\n                  where=total_shareholders_equity + total_debt != 0)\n\n        index_array = (\n            stmt[stmt[""header""] == ""net_income""].groupby(\n                [""ticker"", ""year""]).sum().index\n        )\n\n        res = pd.Series(np.where(value_array > 0.10, 1, 0), index=index_array)\n\n        return res.rename(""roic"")\n\n    @property\n    def croic_growth(self):\n        """"""Returns series of yearly CROIC (cash return on invested capital).\n        CROIC = Free Cash Flow / Invested Capital\n        Invested Capital = Debt + Equity\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if CROIC > 10%.\n        """"""\n        stmt = self.statements\n\n        free_cash_flow = stmt[\n            (stmt[""header""] == ""free_cash_flow"")\n            & (stmt[""statement""] == ""cash-flow-statement"")\n        ][""amount""].values\n\n        total_shareholders_equity = stmt[\n            (stmt[""header""] == ""total_shareholders_equity"")\n            & (stmt[""statement""] == ""balance-sheet-statement"")\n        ][""amount""].values\n\n        total_debt = stmt[\n            (stmt[""header""] == ""total_debt"")\n            & (stmt[""statement""] == ""balance-sheet-statement"")\n        ][""amount""].values\n\n        length_array = len(free_cash_flow)\n        value_array = np.array([float(\'0\')] * length_array)\n\n        np.divide(free_cash_flow,\n                  (total_shareholders_equity + total_debt),\n                  out=value_array,\n                  where=total_shareholders_equity + total_debt != 0)\n\n        index_array = (\n            stmt[stmt[""header""] == ""net_income""].groupby(\n                [""ticker"", ""year""]).sum().index\n        )\n\n        res = pd.Series(np.where(value_array > 0.10, 1, 0), index=index_array)\n\n        return res.rename(""croic"")\n\n    @property\n    def ebitda_cover_growth(self):\n        """"""Returns series of yearly interest coverage by EBITDA ratio. Good if EBITDA > 6 * interest\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if coverage > 6.\n        """"""\n        stmt = self.statements\n\n        interest_expense = stmt[\n            (stmt[""header""] == ""interest_expense"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        ebitda = stmt[\n            (stmt[""header""] == ""ebitda"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        length_array = len(interest_expense)\n        value_array = np.array([float(\'inf\')] * length_array)\n\n        np.divide(ebitda,\n                  interest_expense,\n                  out=value_array,\n                  where=interest_expense != 0)\n\n        index_array = (\n            stmt[stmt[""header""] == ""net_income""].groupby(\n                [""ticker"", ""year""]).sum().index\n        )\n\n        res = pd.Series(np.where(value_array > 6, 1, 0), index=index_array)\n\n        return res.rename(""ebitda_cover"")\n\n    @property\n    def eq_buyback_growth(self):\n        """"""Returns year on year outstanding shares decrease. \n        If outstanding shares decrease, we suppose that the company is doing share buybacks, \n        which increase the EPS.\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if number of shares decreased.\n        """"""\n        _header_df = self.statements[self.statements[""header""] == ""weighted_average_shs_out_(dil)""][[\n            ""year"", ""amount""]].copy()\n        _header_df.set_index(""year"", inplace=True)\n        _header_df.sort_index(inplace=True)\n        _header = _header_df.squeeze()\n\n        _df = _header.pct_change().fillna(0)\n\n        res = pd.Series(np.where(_df < 0, 1, 0), index=_df.index)\n\n        return res.rename(""eq_buyback"")\n\n    @property\n    def debt_cost_growth(self):\n        """"""Returns cost of debt on a yearly basis, i.e. interest expense over total debt.\n\n        Returns\n        -------\n        pandas.Series\n            Serie of 0 and 1. 1 if cost of debt < 0.05.\n        """"""\n        stmt = self.statements\n\n        interest_expense = stmt[\n            (stmt[""header""] == ""interest_expense"")\n            & (stmt[""statement""] == ""income-statement"")\n        ][""amount""].values\n\n        total_debt = stmt[\n            (stmt[""header""] == ""total_debt"")\n            & (stmt[""statement""] == ""balance-sheet-statement"")\n        ][""amount""].values\n\n        length_array = len(interest_expense)\n        value_array = np.array([float(\'0\')] * length_array)\n\n        np.divide(interest_expense,\n                  total_debt,\n                  out=value_array,\n                  where=total_debt != 0)\n\n        index_array = (\n            stmt[stmt[""header""] == ""net_income""].groupby(\n                [""ticker"", ""year""]).sum().index\n        )\n\n        res = pd.Series(np.where(value_array < 0.05, 1, 0), index=index_array)\n\n        return res.rename(""debt_cost"")\n\n    def _score(self, property, years=10):\n        """"""Returns sum of Series created by xxx_growth properties on a timeframe defaulted to 10 years.\n\n        Parameters\n        ----------\n        property : differents xxx_growth properties of this object\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            Score for the given property on the given timeframe.\n\n        Raises\n        ------\n        TypeError\n            Raised if years is not an int\n        ValueError\n            Raised if years is not in ]0, 10] range.\n        """"""\n        if not isinstance(years, int):\n            raise TypeError(""\'years\' should be an integer"")\n        if years > 10 or years <= 0:\n            raise ValueError(""\'years\' should be between 0 and 10"")\n\n        return property[-years:].sum() / years\n\n    def eps_score(self, years=10):\n        """"""Returns EPS score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            EPS Score\n        """"""\n        return self._score(self.eps_growth, years)\n\n    def revenue_score(self, years=10):\n        """"""Returns revenue score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            Revenue score\n        """"""\n        return self._score(self.revenue_growth, years)\n\n    def ebitda_score(self, years=10):\n        """"""Returns EBITDA score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            EBITDA score\n        """"""\n        return self._score(self.ebitda_growth, years)\n\n    def roic_score(self, years=10):\n        """"""Returns ROIC score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            ROIC score\n        """"""\n        return self._score(self.roic_growth, years)\n\n    def croic_score(self, years=10):\n        """"""Returns CROIC score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            CROIC score\n        """"""\n        return self._score(self.croic_growth, years)\n\n    def debt_cost_score(self, years=10):\n        """"""Returns debt cost score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            Debt cost score\n        """"""\n        return self._score(self.debt_cost_growth, years)\n\n    def eq_buyback_score(self, years=10):\n        """"""Returns equity buyback score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            Equity buybacks score\n        """"""\n        return self._score(self.eq_buyback_growth, years)\n\n    def ebitda_cover_score(self, years=10):\n        """"""Returns EBITDA cover score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            EBITDA cover score\n        """"""\n        return self._score(self.ebitda_cover_growth, years)\n\n    def beta_score(self):\n        """"""Returns Beta score\n\n        Returns\n        -------\n        float\n            Beta score\n        """"""\n        return 1 if self.beta <= 1.0 else 0\n\n    def fscore(self, years=10):\n        """"""Returns the sum of all scores, also known as custom F-Score\n\n        Parameters\n        ----------\n        years : int, optional\n            timeframe, by default 10 years\n\n        Returns\n        -------\n        float\n            F score\n        """"""\n        return round(\n            self.ebitda_score(years) +\n            self.revenue_score(years) +\n            self.eps_score(years) +\n            self.beta_score() +\n            self.ebitda_cover_score(years) +\n            self.debt_cost_score(years) +\n            self.eq_buyback_score(years) +\n            self.roic_score(years) +\n            self.croic_score(years), 2)\n'"
valinvest/main.py,0,"b'from .fundamentals import Fundamental\nfrom .config import SP_500_TICKERS, NASDAQ_100_TICKERS\n\n\ndef get_tickers_scores(ticker_list=NASDAQ_100_TICKERS):\n    res = []\n    for ticker in ticker_list:\n        try:\n            score = Fundamental(ticker).fscore()\n            res.append([ticker, score])\n            print(ticker, score)\n        except Exception as e:\n            print(ticker, e)\n    return res\n'"
docs/source/conf.py,0,"b'# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full\n# list see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath(\'../..\'))\n\n\n# -- Project information -----------------------------------------------------\n\nproject = \'Valinvest\'\ncopyright = \'2020, Guillaume Rey\'\nauthor = \'Guillaume Rey\'\n\n# The full version, including alpha/beta/rc tags\nrelease = \'0.0.1\'\n\n\n# -- General configuration ---------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\'sphinx.ext.autodoc\', \'sphinx.ext.coverage\', \'sphinx.ext.napoleon\'\n              ]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \'alabaster\'\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n'"
