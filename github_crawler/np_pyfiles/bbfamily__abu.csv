file_path,api_count,code
abupy/__init__.py,0,"b""# -*- encoding:utf-8 -*-\nfrom __future__ import absolute_import\n\nfrom .CoreBu import *\nfrom .CheckBu import *\nfrom .FactorSellBu import *\nfrom .FactorBuyBu import *\nfrom .AlphaBu import *\nfrom .BetaBu import *\nfrom .DLBu import *\nfrom .IndicatorBu import *\nfrom .MLBu import *\nfrom .MetricsBu import *\nfrom .PickStockBu import *\nfrom .SlippageBu import *\nfrom .UtilBu import *\nfrom .TLineBu import *\nfrom .TradeBu import *\nfrom .UmpBu import *\nfrom .MarketBu import *\nfrom .SimilarBu import *\nfrom .WidgetBu import *\n\n__all__ = ['AlphaBu', 'BetaBu', 'CheckBu', 'UmpBu', 'FactorSellBu', 'FactorSell', 'IndicatorBu', 'MarketBu', 'UtilBu',\n           'SimilarBu', 'MetricsBu', 'SlippageBu', 'PickStockBu', 'CoreBu', 'TLineBu',\n           'MLBu', 'DLBu', 'TradeBu', 'WidgetBu']\n\n__version__ = '0.4.0'\n__author__ = '\xe9\x98\xbf\xe5\xb8\x83'\n__weixin__ = 'abu_quant'\n"""
abupy_ui/widget_base.py,0,"b""# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom contextlib import contextmanager\nimport os\nimport sys\nimport warnings\n\nsys.path.insert(0, os.path.abspath('../'))\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')\n\n\n@contextmanager\ndef show_ui_ct():\n    print('\xe6\xad\xa3\xe5\x9c\xa8\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x95\x8c\xe9\x9d\xa2\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x90\x8e...')\n    from abupy import ABuStrUtil\n    go_on = True\n\n    try:\n        if ABuStrUtil.str_is_cn(str(ABuStrUtil.__file__)):\n            # \xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\xad\xe5\x90\xab\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\xef\xbc\x8c\xe4\xb8\xa5\xe9\x87\x8d\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\xb0\x86\xe5\x87\xba\xe9\x94\x99\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe6\x96\x87\xe8\xad\xa6\xe5\x91\x8a\n            msg = u'\xe4\xb8\xa5\xe9\x87\x8d\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x81\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8cabu\xe5\xb0\x86\xe6\x97\xa0\xe6\xb3\x95\xe6\xad\xa3\xe5\xb8\xb8\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x81\xe8\xaf\xb7\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe6\x96\x87\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\xe7\xa7\xb0, \xe5\xbd\x93\xe5\x89\x8d\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\xba{}'.format(\n                ABuStrUtil.to_unicode(str(ABuStrUtil.__file__)))\n            import logging\n            logging.info(msg)\n            go_on = False\n    except:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x85\xb6\xe5\xae\x83\xe7\xbc\x96\xe7\xa0\x81\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe8\xb7\xaf\xe5\xbe\x84\xe4\xbc\x9a\xe8\xbf\x9b\xe5\x88\xb0\xe8\xbf\x99\xe9\x87\x8c\n        import logging\n        msg = 'error\xef\xbc\x81non English characters in the current running environment,abu will not work properly!'\n        logging.info(msg)\n        go_on = False\n    yield go_on\n\n    if go_on:\n        from IPython.display import clear_output\n        clear_output()\n        # import time\n        # \xe8\xbf\x99\xe9\x87\x8csleep(0.3)\xe9\x98\xb2\xe6\xad\xa2\xe6\x9c\x89\xe4\xba\x9b\xe7\x89\x88\xe6\x9c\xacclear_output\xe6\x8a\x8a\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xa6\x81\xe5\xb1\x95\xe7\xa4\xba\xe7\x9a\x84\xe6\xb8\x85\xe9\x99\xa4\xe4\xba\x86\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8clear_output\xe7\x9a\x84wait\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9b\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe5\x8d\xa1\xe6\xad\xbb\n        # time.sleep(0.3)\n"""
abupy_ui/widget_loop_back.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\n# \xe4\xb8\x8d\xe8\xa6\x81\xe5\x9c\xa8abupy\xe4\xb9\x8b\xe5\xa4\x96\xe5\x86\x8d\xe5\xbb\xba\xe7\xab\x8b\xe5\x8c\x85\xe7\xbb\x93\xe6\x9e\x84\n# noinspection PyUnresolvedReferences\nimport widget_base\n\n\ndef show_ui():\n    with widget_base.show_ui_ct() as go_on:\n        if not go_on:\n            return\n\n        import abupy\n        # check_cn=False\xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8a\xe6\x96\x87\xe5\xb7\xb2\xe7\xbb\x8fcheck\xe4\xba\x86\n        abupy.env.enable_example_env_ipython(check_cn=False)\n        from abupy import WidgetRunLoopBack\n        widget = WidgetRunLoopBack()\n    return widget()\n'
abupy_ui/widget_quant_tool.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\n# \xe4\xb8\x8d\xe8\xa6\x81\xe5\x9c\xa8abupy\xe4\xb9\x8b\xe5\xa4\x96\xe5\x86\x8d\xe5\xbb\xba\xe7\xab\x8b\xe5\x8c\x85\xe7\xbb\x93\xe6\x9e\x84\n# noinspection PyUnresolvedReferences\nimport widget_base\n\n\ndef show_ui():\n    with widget_base.show_ui_ct() as go_on:\n        if not go_on:\n            return\n\n        import abupy\n        # check_cn=False\xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8a\xe6\x96\x87\xe5\xb7\xb2\xe7\xbb\x8fcheck\xe4\xba\x86\n        abupy.env.enable_example_env_ipython(check_cn=False)\n        from abupy import WidgetQuantTool\n        widget = WidgetQuantTool()\n    return widget()\n'
abupy_ui/widget_stock_info.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\n# \xe4\xb8\x8d\xe8\xa6\x81\xe5\x9c\xa8abupy\xe4\xb9\x8b\xe5\xa4\x96\xe5\x86\x8d\xe5\xbb\xba\xe7\xab\x8b\xe5\x8c\x85\xe7\xbb\x93\xe6\x9e\x84\n# noinspection PyUnresolvedReferences\nimport widget_base\n\n\ndef show_ui():\n    with widget_base.show_ui_ct() as go_on:\n        if not go_on:\n            return\n        from abupy import WidgetSearchStockInfo\n        widget = WidgetSearchStockInfo()\n    return widget()\n'
abupy_ui/widget_update_ui.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\n# \xe4\xb8\x8d\xe8\xa6\x81\xe5\x9c\xa8abupy\xe4\xb9\x8b\xe5\xa4\x96\xe5\x86\x8d\xe5\xbb\xba\xe7\xab\x8b\xe5\x8c\x85\xe7\xbb\x93\xe6\x9e\x84\n# noinspection PyUnresolvedReferences\nimport widget_base\n\n\ndef show_ui():\n    with widget_base.show_ui_ct() as go_on:\n        if not go_on:\n            return\n        from abupy import WidgetUpdate\n        widget = WidgetUpdate()\n    return widget()\n'
abupy_ui/widget_verify_tool.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\n# \xe4\xb8\x8d\xe8\xa6\x81\xe5\x9c\xa8abupy\xe4\xb9\x8b\xe5\xa4\x96\xe5\x86\x8d\xe5\xbb\xba\xe7\xab\x8b\xe5\x8c\x85\xe7\xbb\x93\xe6\x9e\x84\n# noinspection PyUnresolvedReferences\nimport widget_base\n\n\ndef show_ui():\n    with widget_base.show_ui_ct() as go_on:\n        if not go_on:\n            return\n        from abupy import WidgetVerifyTool\n        widget = WidgetVerifyTool()\n    return widget()\n'
python/abu_local_env.py,0,"b""# -*- encoding:utf-8 -*-\nimport os\nimport sys\n\nsys.path.append(os.path.abspath('../'))\n"""
python/c10.py,10,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\n# import warnings\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import abu\nfrom abupy import ABuSymbolPd\n\nimport sklearn.preprocessing as preprocessing\n\n# warnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\n""""""\n    \xe7\xac\xac10\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe2\x80\x94\xe2\x80\x94\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe2\x80\xa2\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n""""""\n    10.2 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe7\x9a\x84\xe9\x87\x8f\xe5\x8c\x96\xe7\x8e\xaf\xe5\xa2\x83\n""""""\n\n""""""\n    \xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xafdate_week\xe5\x99\xaa\xe9\x9f\xb3, \xe5\xbc\x80\xe5\x90\xaf\xe8\xbf\x99\xe4\xb8\xaa\xe7\x9a\x84\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe8\xae\xa9\xe5\x88\x86\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe9\x99\x8d\xe4\xbd\x8e\xef\xbc\x8c\xe6\x8e\xa5\xe8\xbf\x91\xe7\x9c\x9f\xe5\xae\x9e\n""""""\ng_with_date_week_noise = False\n\n\ndef _gen_another_word_price(kl_another_word):\n    """"""\n    \xe7\x94\x9f\xe6\x88\x90\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9c\xa8\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\n    :param kl_another_word:\n    :return:\n    """"""\n    for ind in np.arange(2, kl_another_word.shape[0]):\n        # \xe5\x89\x8d\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\n        bf_yesterday = kl_another_word.iloc[ind - 2]\n        # \xe6\x98\xa8\xe5\xa4\xa9\n        yesterday = kl_another_word.iloc[ind - 1]\n        # \xe4\xbb\x8a\xe5\xa4\xa9\n        today = kl_another_word.iloc[ind]\n        # \xe7\x94\x9f\xe6\x88\x90\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n        kl_another_word.close[ind] = _gen_another_word_price_rule(\n            yesterday.close, yesterday.volume,\n            bf_yesterday.close, bf_yesterday.volume,\n            today.volume, today.date_week)\n\n\ndef _gen_another_word_price_rule(yesterday_close, yesterday_volume,\n                                 bf_yesterday_close,\n                                 bf_yesterday_volume,\n                                 today_volume, date_week):\n    """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe9\x87\x8f\xe4\xbb\xb7\xef\xbc\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe9\x87\x8f\xe4\xbb\xb7\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe9\x87\x8f\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xa8\xa1\xe5\x9e\x8b\n    """"""\n    # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8e\xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xb7\xae\n    price_change = yesterday_close - bf_yesterday_close\n    # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe4\xb8\x8e\xe5\x89\x8d\xe5\xa4\xa9\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe7\x9a\x84\xe9\x87\x8f\xe5\xb7\xae\n    volume_change = yesterday_volume - bf_yesterday_volume\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x87\x8f\xe5\x92\x8c\xe4\xbb\xb7\xe5\x8f\x98\xe5\x8a\xa8\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb6\xa8\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xb7\x8c\n    # \xe5\x8d\xb3\xe9\x87\x8f\xe4\xbb\xb7\xe9\xbd\x90\xe6\xb6\xa8\xef\xbc\x8d>\xe6\xb6\xa8, \xe9\x87\x8f\xe4\xbb\xb7\xe9\xbd\x90\xe8\xb7\x8c\xef\xbc\x8d>\xe6\xb6\xa8\xef\xbc\x8c\xe9\x87\x8f\xe4\xbb\xb7\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8d>\xe8\xb7\x8c\n    sign = 1.0 if price_change * volume_change > 0 else -1.0\n\n    # \xe9\x80\x9a\xe8\xbf\x87date_week\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xaa\xe9\x9f\xb3\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb9\x8b\xe5\x90\x8e\xe5\x88\x86\xe7\xb1\xbb100%\xe5\x88\x86\xe5\xaf\xb9\n    if g_with_date_week_noise:\n        # \xe9\x92\x88\xe5\xaf\xb9sign\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xaa\xe9\x9f\xb3\xef\xbc\x8c\xe5\x99\xaa\xe9\x9f\xb3\xe7\x9a\x84\xe7\x94\x9f\xe6\x95\x88\xe7\x9a\x84\xe5\x85\x88\xe5\x86\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x98\xaf\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe9\x87\x8f\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\x89\xe5\xa4\xa9\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\n        gen_noise = today_volume > np.max(\n            [yesterday_volume, bf_yesterday_volume])\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x87\x8f\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\x89\xe5\xa4\xa9\xe6\x9c\x80\xe5\xa4\xa7 \xe4\xb8\x94\xe6\x98\xaf\xe5\x91\xa8\xe4\xba\x94\xef\xbc\x8c\xe4\xb8\x8b\xe8\xb7\x8c\n        if gen_noise and date_week == 4:\n            sign = -1.0\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x87\x8f\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\x89\xe5\xa4\xa9\xe6\x9c\x80\xe5\xa4\xa7\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x91\xa8\xe4\xb8\x80\xef\xbc\x8c\xe4\xb8\x8a\xe6\xb6\xa8\n        elif gen_noise and date_week == 0:\n            sign = 1.0\n\n    # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe5\x9f\xba\xe7\xa1\x80\xe6\x98\xafprice_change\xef\xbc\x88\xe6\x98\xa8\xe5\xa4\xa9\xe5\x89\x8d\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xef\xbc\x89\n    price_base = abs(price_change)\n    # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe5\x8f\x98\xe5\x8a\xa8\xe5\x9b\xa0\xe7\xb4\xa0\xef\xbc\x9a\xe9\x87\x8f\xe6\xaf\x94\xef\xbc\x8c\n    # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f/\xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f \xe5\x92\x8c \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f/\xe5\x89\x8d\xe5\xa4\xa9\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f \xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\n    price_factor = np.mean([today_volume / yesterday_volume,\n                            today_volume / bf_yesterday_volume])\n\n    if abs(price_base * price_factor) < yesterday_close * 0.10:\n        # \xe5\xa6\x82\xe6\x9e\x9c \xe9\x87\x8f\xe6\xaf\x94 * price_base \xe6\xb2\xa1\xe8\xb6\x85\xe8\xbf\x8710%\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xae\xa1\xe7\xae\x97\n        today_price = yesterday_close + \\\n                      sign * price_base * price_factor\n    else:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xb6\x85\xe8\xbf\x8710%\xef\xbc\x8c\xe9\x99\x90\xe5\x88\xb6\xe4\xb8\x8a\xe9\x99\x90\xef\xbc\x8c\xe4\xb8\x8b\xe9\x99\x90\xe4\xb8\xba10%\n        today_price = yesterday_close + sign * yesterday_close * 0.10\n    return today_price\n\n\ndef change_real_to_another_word(symbol):\n    """"""\n    \xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9c\x9f\xe6\xad\xa3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x97\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe5\x89\x8d\xe4\xb8\xa4\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xef\xbc\x8c\xe5\x91\xa8\xe5\x87\xa0\xe5\x88\x97\xe5\xae\x8c\xe5\x85\xa8\xe4\xbf\x9d\xe7\x95\x99\n    \xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x97\xe5\x85\xb6\xe4\xbb\x96\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\xbf\xe7\x94\xa8_gen_another_word_price\xe5\x8f\x98\xe6\x88\x90\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xbb\xb7\xe6\xa0\xbc\n    :param symbol:\n    :return:\n    """"""\n    kl_pd = ABuSymbolPd.make_kl_df(symbol)\n    if kl_pd is not None:\n        # \xe5\x8e\x9f\xe5\xa7\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xb9\x9f\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe5\x91\xa8\xe5\x87\xa0\xef\xbc\x8c\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n        kl_pig_three = kl_pd.filter([\'close\', \'date_week\', \'volume\'])\n        # \xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xa4\xb4\xe4\xb8\xa4\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe5\x85\xb6\xe4\xbb\x96\xe7\x9a\x84\xe7\x9a\x84\xe9\x83\xbd\xe8\xb5\x8b\xe4\xba\x88nan\n        kl_pig_three[\'close\'][2:] = np.nan\n        # \xe5\xb0\x86\xe5\x85\xb6\xe4\xbb\x96nan\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe6\x88\x90\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\xbf\xe7\x94\xa8_gen_another_word_price\n        _gen_another_word_price(kl_pig_three)\n        return kl_pig_three\n\n\ndef sample_102(show=True):\n    """"""\n    10.2 \xe7\x94\x9f\xe6\x88\x90\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe7\x9a\x84\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe7\x9a\x84\xe6\x98\xa0\xe5\xb0\x84\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\n    :return:\n    """"""\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    another_word_dict = {}\n    real_dict = {}\n    for symbol in choice_symbols:\n        # \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xb8\x96\xe7\x95\x8c\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe5\xad\x97\xe5\x85\xb8\n        another_word_dict[symbol] = change_real_to_another_word(symbol)\n        # \xe7\x9c\x9f\xe5\xae\x9e\xe4\xb8\x96\xe7\x95\x8c\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe9\x97\xae\xe9\xa2\x98\n        real_dict[symbol] = ABuSymbolPd.make_kl_df(symbol)\n    if show:\n        # \xe8\xa1\xa810-1\xe6\x89\x80\xe7\xa4\xba\n        print(\'another_word_dict[usNOAH].head():\\n\', another_word_dict[\'usNOAH\'].head())\n\n        print(\'real_dict[usNOAH].head():\\n\', real_dict[\'usNOAH\'].head().filter([\'close\', \'date_week\', \'volume\']))\n\n        import itertools\n        # 4 \xef\xbc\x8a 2\n        _, axs = plt.subplots(nrows=4, ncols=2, figsize=(20, 15))\n        # \xe5\xb0\x86\xe7\x94\xbb\xe5\xb8\x83\xe5\xba\x8f\xe5\x88\x97\xe6\x8b\x89\xe5\xb9\xb3\n        axs_list = list(itertools.chain.from_iterable(axs))\n\n        for symbol, ax in zip(choice_symbols, axs_list):\n            # \xe7\xbb\x98\xe5\x88\xb6\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xb8\x96\xe7\x95\x8c\xe7\x9a\x84\xe8\x82\xa1\xe4\xbb\xb7\xe8\xb5\xb0\xe5\x8a\xbf\n            another_word_dict[symbol].close.plot(ax=ax)\n            # \xe5\x90\x8c\xe6\xa0\xb7\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9c\xa8\xe7\x9c\x9f\xe5\xae\x9e\xe4\xb8\x96\xe7\x95\x8c\xe7\x9a\x84\xe8\x82\xa1\xe4\xbb\xb7\xe8\xb5\xb0\xe5\x8a\xbf\n            real_dict[symbol].close.plot(ax=ax)\n            ax.set_title(symbol)\n        plt.show()\n    return another_word_dict\n\n\n""""""\n    10.3 \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\n""""""\n\n\ndef gen_pig_three_feature(kl_another_word):\n    """"""\n    \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe6\x9e\x84\xe5\xbb\xba\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x87\xbd\xe6\x95\xb0\n    :param kl_another_word: \xe5\x8d\xb3\xe4\xb8\x8a\xe4\xb8\x80\xe8\x8a\x82\xe4\xbd\xbf\xe7\x94\xa8_gen_another_word_price\n    \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84dataframe\xe6\x9c\x89\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xef\xbc\x8c\xe5\x91\xa8\xe5\x87\xa0\xef\xbc\x8c\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\x88\x97\n    :return:\n    """"""\n    # y\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8close.pct_change\xe5\x8d\xb3\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\n    kl_another_word[\'regress_y\'] = kl_another_word.close.pct_change()\n    # \xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    kl_another_word[\'bf_yesterday_close\'] = 0\n    # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    kl_another_word[\'yesterday_close\'] = 0\n    # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n    kl_another_word[\'yesterday_volume\'] = 0\n    # \xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n    kl_another_word[\'bf_yesterday_volume\'] = 0\n\n    # \xe5\xaf\xb9\xe9\xbd\x90\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8d\xb3\xe4\xb8\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe9\x94\x992\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x8c[2:] = [:-2]\n    kl_another_word[\'bf_yesterday_close\'][2:] = \\\n        kl_another_word[\'close\'][:-2]\n    # \xe5\xaf\xb9\xe9\xbd\x90\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x89\x8d\xe5\xa4\xa9\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n    kl_another_word[\'bf_yesterday_volume\'][2:] = \\\n        kl_another_word[\'volume\'][:-2]\n    # \xe5\xaf\xb9\xe9\xbd\x90\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe4\xb8\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe9\x94\x991\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x8c[1:] = [:-1]\n    kl_another_word[\'yesterday_close\'][1:] = \\\n        kl_another_word[\'close\'][:-1]\n    # \xe5\xaf\xb9\xe9\xbd\x90\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n    kl_another_word[\'yesterday_volume\'][1:] = \\\n        kl_another_word[\'volume\'][:-1]\n\n    # \xe7\x89\xb9\xe5\xbe\x811: \xe4\xbb\xb7\xe6\xa0\xbc\xe5\xb7\xae\n    kl_another_word[\'feature_price_change\'] = \\\n        kl_another_word[\'yesterday_close\'] - \\\n        kl_another_word[\'bf_yesterday_close\']\n\n    # \xe7\x89\xb9\xe5\xbe\x812: \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xb7\xae\n    kl_another_word[\'feature_volume_Change\'] = \\\n        kl_another_word[\'yesterday_volume\'] - \\\n        kl_another_word[\'bf_yesterday_volume\']\n\n    # \xe7\x89\xb9\xe5\xbe\x813: \xe6\xb6\xa8\xe8\xb7\x8csign\n    kl_another_word[\'feature_sign\'] = np.sign(\n        kl_another_word[\'feature_price_change\'] * kl_another_word[\n            \'feature_volume_Change\'])\n\n    # \xe7\x89\xb9\xe5\xbe\x814: \xe5\x91\xa8\xe5\x87\xa0\n    kl_another_word[\'feature_date_week\'] = kl_another_word[\n        \'date_week\']\n\n    """"""\n        \xe6\x9e\x84\xe5\xbb\xba\xe5\x99\xaa\xe9\x9f\xb3\xe7\x89\xb9\xe5\xbe\x81, \xe5\x9b\xa0\xe4\xb8\xba\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xb9\x9f\xe4\xb8\x8d\xe5\x8f\xaf\xe8\x83\xbd\xe5\x85\xa8\xe9\x83\xa8\xe5\x88\x86\xe6\x9e\x90\xe6\xad\xa3\xe7\xa1\xae\xe7\x9c\x9f\xe5\xae\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x9b\xa0\xe7\xb4\xa0\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\xbc\x95\xe5\x85\xa5\xe4\xb8\x80\xe4\xba\x9b\xe5\x99\xaa\xe9\x9f\xb3\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n    # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe4\xb9\x98\xe7\xa7\xaf\n    kl_another_word[\'feature_volume_noise\'] = \\\n        kl_another_word[\'yesterday_volume\'] * \\\n        kl_another_word[\'bf_yesterday_volume\']\n\n    # \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb9\x98\xe7\xa7\xaf\n    kl_another_word[\'feature_price_noise\'] = \\\n        kl_another_word[\'yesterday_close\'] * \\\n        kl_another_word[\'bf_yesterday_close\']\n\n    # \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\n    scaler = preprocessing.StandardScaler()\n    kl_another_word[\'feature_price_change\'] = scaler.fit_transform(\n        kl_another_word[\'feature_price_change\'].values.reshape(-1, 1))\n    kl_another_word[\'feature_volume_Change\'] = scaler.fit_transform(\n        kl_another_word[\'feature_volume_Change\'].values.reshape(-1, 1))\n    kl_another_word[\'feature_volume_noise\'] = scaler.fit_transform(\n        kl_another_word[\'feature_volume_noise\'].values.reshape(-1, 1))\n    kl_another_word[\'feature_price_noise\'] = scaler.fit_transform(\n        kl_another_word[\'feature_price_noise\'].values.reshape(-1, 1))\n\n    # \xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89feature_\xe5\xbc\x80\xe5\xa4\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x92\x8cregress_y\xef\xbc\x8c\xe6\x8a\x9b\xe5\xbc\x83\xe5\x89\x8d\xe4\xb8\xa4\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\xb3[2:]\n    kl_pig_three_feature = kl_another_word.filter(\n        regex=\'regress_y|feature_*\')[2:]\n    return kl_pig_three_feature\n\n\ndef sample_103_0(show=True):\n    """"""\n    10.3 \xe7\x94\x9f\xe6\x88\x90\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe7\xa4\xba\xe4\xbe\x8b\n    :return:\n    """"""\n    another_word_dict = sample_102(show=False)\n    pig_three_feature = None\n    for symbol in another_word_dict:\n        # \xe9\xa6\x96\xe5\x85\x88\xe6\x8b\xbf\xe5\x87\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\n        kl_another_word = another_word_dict[symbol]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe9\x80\x9a\xe8\xbf\x87gen_pig_three_feature\n        kl_feature = gen_pig_three_feature(kl_another_word)\n        # \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xe9\x83\xbd\xe6\x8b\xbc\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n        pig_three_feature = kl_feature if pig_three_feature is None \\\n            else pig_three_feature.append(kl_feature)\n\n    # Dataframe -> matrix\n    feature_np = pig_three_feature.as_matrix()\n    # x\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\n    train_x = feature_np[:, 1:]\n    # \xe5\x9b\x9e\xe5\xbd\x92\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe8\xbf\x9e\xe7\xbb\xad\xe5\x80\xbcy\n    train_y_regress = feature_np[:, 0]\n    # \xe5\x88\x86\xe7\xb1\xbb\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe7\xa6\xbb\xe6\x95\xa3\xe5\x80\xbcy\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe5\x88\x86\xe7\xb1\xbb\xe6\x8a\x80\xe6\x9c\xaf\xe4\xbd\xbf\xe7\x94\xa8\n    # noinspection PyTypeChecker\n    train_y_classification = np.where(train_y_regress > 0, 1, 0)\n\n    if show:\n        print(\'pig_three_feature.shape:\', pig_three_feature.shape)\n        print(\'pig_three_feature.tail():\\n\', pig_three_feature.tail())\n        print(\'train_x[:5], train_y_regress[:5], train_y_classification[:5]:\\n\', train_x[:5], train_y_regress[:5],\n              train_y_classification[:5])\n\n    return train_x, train_y_regress, train_y_classification, pig_three_feature\n\n\n""""""\n    \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7\n""""""\n\n\ndef sample_1031_1():\n    """"""\n    10.3.1_1 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7\xef\xbc\x9a\xe7\x94\x9f\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    :return:\n    """"""\n\n    # noinspection PyShadowingNames\n    def gen_feature_from_symbol(symbol):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85\xe7\x94\xb1\xe4\xb8\x80\xe4\xb8\xaasymbol\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe5\xba\x8f\xe5\x88\x97\xe5\x87\xbd\xe6\x95\xb0\n        :param symbol:\n        :return:\n        """"""\n        # \xe7\x9c\x9f\xe5\xae\x9e\xe4\xb8\x96\xe7\x95\x8c\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe5\x88\xb0\xe8\x80\x81\xe4\xb8\x89\xe7\x9a\x84\xe4\xb8\x96\xe7\x95\x8c\n        kl_another_word = change_real_to_another_word(symbol)\n        # \xe7\x94\xb1\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x89\xb9\xe5\xbe\x81dataframe\xe9\x80\x9a\xe8\xbf\x87gen_pig_three_feature\n        kl_another_word_feature_test = gen_pig_three_feature(kl_another_word)\n        # \xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbamatrix\n        feature_np_test = kl_another_word_feature_test.as_matrix()\n        # \xe4\xbb\x8ematrix\xe6\x8a\xbd\xe5\x8f\x96y\xe5\x9b\x9e\xe5\xbd\x92\n        test_y_regress = feature_np_test[:, 0]\n        # y\xe5\x9b\x9e\xe5\xbd\x92 \xef\xbc\x8d> y\xe5\x88\x86\xe7\xb1\xbb\n        # noinspection PyTypeChecker\n        test_y_classification = np.where(test_y_regress > 0, 1, 0)\n        # \xe4\xbb\x8ematrix\xe6\x8a\xbd\xe5\x8f\x96x\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\n        test_x = feature_np_test[:, 1:]\n        return test_x, test_y_regress, test_y_classification, kl_another_word_feature_test\n\n    # \xe7\x94\x9f\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    train_x, train_y_regress, train_y_classification, pig_three_feature = sample_103_0(show=False)\n    # \xe7\x94\x9f\xe6\x88\x90\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = gen_feature_from_symbol(\'usFB\')\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x9a{}, \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x9a{}\'.format(pig_three_feature.shape[0], kl_another_word_feature_test.shape[0]))\n\n    return train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n           test_x, test_y_regress, test_y_classification, kl_another_word_feature_test\n\n\ndef regress_process(estimator, train_x, train_y_regress, test_x,\n                    test_y_regress):\n    # \xe8\xae\xad\xe7\xbb\x83\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    estimator.fit(train_x, train_y_regress)\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84y\xef\xbc\x8c\xe5\x8d\xb3\xe6\xa0\xb9\xe6\x8d\xaeusFB\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe7\x89\xb9\xe5\xbe\x81\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\n    test_y_prdict_regress = estimator.predict(test_x)\n\n    # \xe7\xbb\x98\xe5\x88\xb6usFB\xe5\xae\x9e\xe9\x99\x85\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\n    plt.plot(test_y_regress.cumsum())\n    # \xe7\xbb\x98\xe5\x88\xb6\xe9\x80\x9a\xe8\xbf\x87\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe7\x9a\x84usFB\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\n    plt.plot(test_y_prdict_regress.cumsum())\n\n    # \xe9\x92\x88\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\x81\x9a\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\n    from abupy import cross_val_score\n    from abupy.CoreBu.ABuFixes import mean_squared_error_scorer\n    scores = cross_val_score(estimator, train_x,\n                             train_y_regress, cv=10,\n                             scoring=mean_squared_error_scorer)\n    # mse\xe5\xbc\x80\xe6\x96\xb9 -> rmse\n    mean_sc = -np.mean(np.sqrt(-scores))\n    print(\'{} RMSE: {}\'.format(estimator.__class__.__name__, mean_sc))\n\n\ndef sample_1031_2():\n    """"""\n    10.3.1_2 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7\xef\xbc\x9aLinearRegressio\n    :return:\n    """"""\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\xba\xbf\xe6\x80\xa7\xe5\x9b\x9e\xe5\xbd\x92\xe5\xaf\xb9\xe8\xb1\xa1estimator\n    from sklearn.linear_model import LinearRegression\n    estimator = LinearRegression()\n    # \xe5\xb0\x86\xe5\x9b\x9e\xe5\xbd\x92\xe6\xa8\xa1\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\xbf\x9e\xe7\xbb\xady\xe5\x80\xbc\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86x\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\xbf\x9e\xe7\xbb\xady\xe4\xbc\xa0\xe5\x85\xa5\n    regress_process(estimator, train_x, train_y_regress, test_x,\n                    test_y_regress)\n    plt.show()\n\n    from abupy import ABuMLExecute\n    ABuMLExecute.plot_learning_curve(estimator, train_x, train_y_regress, cv=10)\n\n\ndef sample_1031_3():\n    """"""\n    10.3.1_3 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7\xef\xbc\x9aPolynomialFeatures\n    :return:\n    """"""\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    from sklearn.pipeline import make_pipeline\n    from sklearn.preprocessing import PolynomialFeatures\n    from sklearn.linear_model import LinearRegression\n\n    # pipeline\xe5\xa5\x97\xe4\xb8\x8a degree=3 \xef\xbc\x8b LinearRegression\n    estimator = make_pipeline(PolynomialFeatures(degree=3),\n                              LinearRegression())\n    # \xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8regress_process\xef\xbc\x8c\xe5\x8c\xba\xe5\x88\xab\xe6\x98\xafestimator\xe5\x8f\x98\xe4\xba\x86\n    regress_process(estimator, train_x, train_y_regress, test_x,\n                    test_y_regress)\n    plt.show()\n\n\ndef sample_1031_4():\n    """"""\n    10.3.1_4 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe9\x9b\x86\xe6\x88\x90\xe5\xad\xa6\xe4\xb9\xa0\xe7\xae\x97\xe6\xb3\x95\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe4\xbb\xb7AdaBoost\xe4\xb8\x8eRandomForest\n    :return:\n    """"""\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    # AdaBoost\n    from sklearn.ensemble import AdaBoostRegressor\n\n    estimator = AdaBoostRegressor(n_estimators=100)\n    regress_process(estimator, train_x, train_y_regress, test_x,\n                    test_y_regress)\n    plt.show()\n    # RandomForest\n    from sklearn.ensemble import RandomForestRegressor\n\n    estimator = RandomForestRegressor(n_estimators=100)\n    regress_process(estimator, train_x, train_y_regress, test_x, test_y_regress)\n    plt.show()\n\n\n""""""\n    10.3.2 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\n""""""\n\n\ndef classification_process(estimator, train_x, train_y_classification,\n                           test_x, test_y_classification):\n    from sklearn import metrics\n    # \xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x88\x86\xe7\xb1\xbb\xe8\xa6\x81\xe6\x89\x80\xe4\xbb\xa5\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8y_classification\n    estimator.fit(train_x, train_y_classification)\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe6\xa8\xa1\xe5\x9e\x8b\xe9\xa2\x84\xe6\xb5\x8b\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84y\xef\xbc\x8c\xe5\x8d\xb3\xe6\xa0\xb9\xe6\x8d\xaeusFB\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe7\x89\xb9\xe5\xbe\x81\xe9\xa2\x84\xe6\xb5\x8b\xe6\xb6\xa8\xe8\xb7\x8c\n    test_y_prdict_classification = estimator.predict(test_x)\n    # \xe9\x80\x9a\xe8\xbf\x87metrics.accuracy_score\xe5\xba\xa6\xe9\x87\x8f\xe9\xa2\x84\xe6\xb5\x8b\xe6\xb6\xa8\xe8\xb7\x8c\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n    print(""{} accuracy = {:.2f}"".format(\n        estimator.__class__.__name__,\n        metrics.accuracy_score(test_y_classification,\n                               test_y_prdict_classification)))\n\n    from abupy import cross_val_score\n    # \xe9\x92\x88\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\x81\x9a\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81scoring=\'accuracy\'\xef\xbc\x8ccv\xef\xbc\x9d10\n    scores = cross_val_score(estimator, train_x,\n                             train_y_classification,\n                             cv=10,\n                             scoring=\'accuracy\')\n    # \xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe5\x88\x86\xe6\x95\xb0\xe5\x8f\x96\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n    mean_sc = np.mean(scores)\n    print(\'cross validation accuracy mean: {:.2f}\'.format(mean_sc))\n\n\ndef sample_1032_1():\n    """"""\n    10.3.2_1 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xef\xbc\x9aLogisticRegression\n    :return:\n    """"""\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    # \xe6\x97\xa0\xe5\x99\xaa\xe9\x9f\xb3\xe5\x88\x86\xe7\xb1\xbb\xe6\xad\xa3\xe7\xa1\xae100%\n    from sklearn.linear_model import LogisticRegression\n    estimator = LogisticRegression(C=1.0, penalty=\'l1\', tol=1e-6)\n    # \xe5\xb0\x86\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86y\xe5\x88\x86\xe5\x88\xab\xe4\xbc\xa0\xe5\x85\xa5\xe5\x87\xbd\xe6\x95\xb0\n    classification_process(estimator, train_x, train_y_classification,\n                           test_x, test_y_classification)\n\n    # \xe5\xbc\x80\xe5\x90\xaf\xe5\x99\xaa\xe9\x9f\xb3\xef\xbc\x8c\xe5\x86\x8d\xe6\x9d\xa5\xe4\xb8\x80\xe9\x81\x8d\xef\xbc\x8c\xe6\x9c\x89\xe5\x99\xaa\xe9\x9f\xb3\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x8793%, \xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe9\x83\xbd\xe5\xbc\x80\xe5\x90\xafg_with_date_week_noise\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n    classification_process(estimator, train_x, train_y_classification,\n                           test_x, test_y_classification)\n\n\ndef sample_1032_2():\n    """"""\n    10.3.2_2 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xef\xbc\x9asvm\n    :return:\n    """"""\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    from sklearn.svm import SVC\n\n    estimator = SVC(kernel=\'rbf\')\n    classification_process(estimator, train_x, train_y_classification,\n                           test_x, test_y_classification)\n\n\ndef sample_1032_3():\n    """"""\n    10.3.2_3 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xef\xbc\x9aRandomForestClassifier\n    :return:\n    """"""\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    from sklearn.ensemble import RandomForestClassifier\n\n    estimator = RandomForestClassifier(n_estimators=100)\n    classification_process(estimator, train_x, train_y_classification,\n                           test_x, test_y_classification)\n\n\ndef sample_1032_4(show=True):\n    """"""\n    10.3.2_4 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xef\xbc\x9atrain_test_split\n    :return:\n    """"""\n    from sklearn import metrics\n    from abupy import train_test_split\n\n    # noinspection PyShadowingNames\n    def train_test_split_xy(estimator, x, y, test_size=0.5,\n                            random_state=0):\n        # \xe9\x80\x9a\xe8\xbf\x87train_test_split\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe9\x9a\x8f\xe6\x9c\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xba\xe6\x96\xb0\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n        train_x, test_x, train_y, test_y = \\\n            train_test_split(x, y, test_size=test_size,\n                             random_state=random_state)\n\n        if show:\n            print(x.shape, y.shape)\n            print(train_x.shape, train_y.shape)\n            print(test_x.shape, test_y.shape)\n\n        clf = estimator.fit(train_x, train_y)\n        predictions = clf.predict(test_x)\n\n        if show:\n            # \xe5\xba\xa6\xe9\x87\x8f\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n            print(""accuracy = %.2f"" %\n                  (metrics.accuracy_score(test_y, predictions)))\n\n            # \xe5\xba\xa6\xe9\x87\x8f\xe6\x9f\xa5\xe5\x87\x86\xe7\x8e\x87\n            print(""precision_score = %.2f"" %\n                  (metrics.precision_score(test_y, predictions)))\n\n            # \xe5\xba\xa6\xe9\x87\x8f\xe5\x9b\x9e\xe6\x94\xb6\xe7\x8e\x87\n            print(""recall_score = %.2f"" %\n                  (metrics.recall_score(test_y, predictions)))\n\n        return test_y, predictions\n\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    from sklearn.ensemble import RandomForestClassifier\n    estimator = RandomForestClassifier(n_estimators=100)\n\n    test_y, predictions = train_test_split_xy(estimator, train_x, train_y_classification)\n    return estimator, train_x, train_y_classification, test_y, predictions\n\n\ndef sample_1032_5():\n    """"""\n    10.3.2_5 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe9\xa2\x84\xe6\xb5\x8b\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xef\xbc\x9a\xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\xe5\x92\x8croc\xe6\x9b\xb2\xe7\xba\xbf\n    :return:\n    """"""\n\n    from sklearn import metrics\n\n    # noinspection PyShadowingNames\n    def confusion_matrix_with_report(test_y, predictions):\n        confusion_matrix = metrics.confusion_matrix(test_y, predictions)\n        # print(""Confusion Matrix "", confusion_matrix)\n        print(""          Predicted"")\n        print(""         |  0  |  1  |"")\n        print(""         |-----|-----|"")\n        print(""       0 | %3d | %3d |"" % (confusion_matrix[0, 0],\n                                          confusion_matrix[0, 1]))\n        print(""Actual   |-----|-----|"")\n        print(""       1 | %3d | %3d |"" % (confusion_matrix[1, 0],\n                                          confusion_matrix[1, 1]))\n        print(""         |-----|-----|"")\n\n        print(metrics.classification_report(test_y, predictions))\n\n    estimator, train_x, train_y_classification, test_y, predictions = sample_1032_4(show=False)\n    confusion_matrix_with_report(test_y, predictions)\n    from abupy import ABuMLExecute\n    ABuMLExecute.plot_roc_estimator(estimator, train_x, train_y_classification)\n\n\ndef sample_1033_1():\n    """"""\n    10.3.3 \xe9\x80\x9a\xe8\xbf\x87\xe5\x86\xb3\xe7\xad\x96\xe6\xa0\x91\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe5\x87\xba\xe5\x86\xb3\xe7\xad\x96\xe5\x9b\xbe\n    \xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x89\xe8\xa3\x85dot graphviz\xef\xbc\x8c\xe6\x89\x8d\xe8\x83\xbd\xe9\x80\x9a\xe8\xbf\x87os.system(""dot -T png graphviz.dot -o graphviz.png"")\xe7\x94\x9f\xe6\x88\x90png\n    :return:\n    """"""\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn import tree\n    import os\n\n    estimator = DecisionTreeClassifier(max_depth=2, random_state=1)\n\n    # noinspection PyShadowingNames\n    def graphviz_tree(estimator, features, x, y):\n        if not hasattr(estimator, \'tree_\'):\n            print(\'only tree can graphviz!\')\n            return\n\n        estimator.fit(x, y)\n        # \xe5\xb0\x86\xe5\x86\xb3\xe7\xad\x96\xe6\xa8\xa1\xe5\x9e\x8b\xe5\xaf\xbc\xe5\x87\xbagraphviz.dot\xe6\x96\x87\xe4\xbb\xb6\n        tree.export_graphviz(estimator.tree_, out_file=\'graphviz.dot\',\n                             feature_names=features)\n        # \xe9\x80\x9a\xe8\xbf\x87dot\xe5\xb0\x86\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbb\x98\xe5\x88\xb6\xe5\x86\xb3\xe7\xad\x96\xe5\x9b\xbe\xef\xbc\x8c\xe4\xbf\x9d\xe5\xad\x98png\n        os.system(""dot -T png graphviz.dot -o graphviz.png"")\n\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    # \xe8\xbf\x99\xe9\x87\x8c\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\xb0\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\xe5\x88\x97pig_three_feature.columns[1:]\n    graphviz_tree(estimator, pig_three_feature.columns[1:], train_x,\n                  train_y_classification)\n\n    import PIL.Image\n    PIL.Image.open(\'graphviz.png\').show()\n\n\ndef sample_1033_2():\n    """"""\n    10.3.3 \xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x87\x8d\xe8\xa6\x81\xe6\x80\xa7\xe6\x8e\x92\xe5\xba\x8f\xe5\x8f\x8a\xe6\x94\xaf\xe6\x8c\x81\xe5\xba\xa6\xe8\xaf\x84\xe7\xba\xa7\n    :return:\n    """"""\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    # noinspection PyShadowingNames\n    def importances_coef_pd(estimator):\n        """"""\n            \xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x87\x8d\xe8\xa6\x81\xe6\x80\xa7\n        """"""\n        if hasattr(estimator, \'feature_importances_\'):\n            # \xe6\x9c\x89feature_importances_\xe7\x9a\x84\xe9\x80\x9a\xe8\xbf\x87sort_values\xe6\x8e\x92\xe5\xba\x8f\n            return pd.DataFrame(\n                {\'feature\': list(pig_three_feature.columns[1:]),\n                 \'importance\': estimator.feature_importances_}).sort_values(\'importance\')\n\n        elif hasattr(estimator, \'coef_\'):\n            # \xe6\x9c\x89coef_\xe7\x9a\x84\xe9\x80\x9a\xe8\xbf\x87coef\xe6\x8e\x92\xe5\xba\x8f\n            return pd.DataFrame(\n                {""columns"": list(pig_three_feature.columns)[1:], ""coef"": list(estimator.coef_.T)}).sort_values(\'coef\')\n        else:\n            print(\'estimator not hasattr feature_importances_ or coef_!\')\n\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe9\x9a\x8f\xe6\x9c\xba\xe6\xa3\xae\xe6\x9e\x97\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n    from sklearn.ensemble import RandomForestClassifier\n    estimator = RandomForestClassifier(n_estimators=100)\n    # \xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\x9e\x8b\n    estimator.fit(train_x, train_y_classification)\n    # \xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe5\x90\x8e\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x87\x8d\xe8\xa6\x81\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe5\xae\x9a\xef\xbc\x8c\xe9\x87\x8d\xe8\xa6\x81\xe7\xa8\x8b\xe5\xba\xa6\xe7\x94\xb1\xe5\xb0\x8f\xe5\x88\xb0\xe5\xa4\xa7\xef\xbc\x8c\xe8\xa1\xa810-4\xe6\x89\x80\xe7\xa4\xba\n    print(\'importances_coef_pd(estimator):\\n\', importances_coef_pd(estimator))\n\n    from sklearn.feature_selection import RFE\n\n    # noinspection PyShadowingNames\n    def feature_selection(estimator, x, y):\n        """"""\n            \xe6\x94\xaf\xe6\x8c\x81\xe5\xba\xa6\xe8\xaf\x84\xe7\xba\xa7\n        """"""\n        selector = RFE(estimator)\n        selector.fit(x, y)\n        print(\'RFE selection\')\n        print(pd.DataFrame(\n            {\'support\': selector.support_, \'ranking\': selector.ranking_},\n            index=pig_three_feature.columns[1:]))\n\n    print(\'feature_selection(estimator, train_x, train_y_classification):\\n\',\n          feature_selection(estimator, train_x, train_y_classification))\n\n\n""""""\n    10.4 \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\n""""""\n\n\ndef sample_1041():\n    """"""\n    10.4.1 \xe4\xbd\xbf\xe7\x94\xa8\xe9\x99\x8d\xe7\xbb\xb4\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\n    :return:\n    """"""\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    from sklearn.decomposition import PCA\n    from abupy import ABuMLExecute\n\n    # noinspection PyShadowingNames\n    def plot_decision_function(estimator, x, y):\n        # pca\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x992\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\n        pca_2n = PCA(n_components=2)\n        x = pca_2n.fit_transform(x)\n\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\n        estimator.fit(x, y)\n        plt.scatter(x[:, 0], x[:, 1], c=y, s=50, cmap=\'spring\')\n        ABuMLExecute.plot_decision_boundary(\n            lambda p_x: estimator.predict(p_x), x, y)\n\n    from sklearn.ensemble import RandomForestClassifier\n    estimator = RandomForestClassifier(n_estimators=100)\n    plot_decision_function(estimator, train_x, train_y_classification)\n\n\n# noinspection PyTypeChecker\ndef sample_1042():\n    """"""\n    10.4.2 \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xbd\xbf\xe7\x94\xa8\xe8\x81\x9a\xe7\xb1\xbb\xe7\xae\x97\xe6\xb3\x95\xe6\x8f\x90\xe9\xab\x98\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\n    :return:\n    """"""\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe9\x9a\x8f\xe6\x9c\xba\xe6\xa3\xae\xe6\x9e\x97\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n    from sklearn.ensemble import RandomForestClassifier\n    estimator = RandomForestClassifier(n_estimators=100)\n    estimator.fit(train_x, train_y_classification)\n    test_y_prdict_classification = estimator.predict(test_x)\n\n    from sklearn import metrics\n    print(""accuracy = %.2f"" % (\n        metrics.accuracy_score(test_y_classification,\n                               test_y_prdict_classification)))\n\n    # \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86feature\xe5\x8d\xb3usFB\xe7\x9a\x84kl feature\n    pig_three_kmean_feature = kl_another_word_feature_test\n    # \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9c\x9f\xe5\xae\x9e\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe7\xbb\x93\xe6\x9e\x9ctest_y_classification\n    pig_three_kmean_feature[\'y\'] = test_y_classification\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x9a\xe5\x88\x9a\xe7\x9a\x84\xe9\x9a\x8f\xe6\x9c\xba\xe6\xa3\xae\xe6\x9e\x97\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe7\x9a\x84\xe9\xa2\x84\xe6\xb5\x8b\xe6\xb6\xa8\xe8\xb7\x8c\xe7\xbb\x93\xe6\x9e\x9ctest_y_prdict_classification\n    pig_three_kmean_feature[\'y_prdict\'] = test_y_prdict_classification\n    # \xe5\x8d\xb3\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe5\x88\x97\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\xe8\xae\xb0\xe5\xbd\x95\xe9\xa2\x84\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe6\xad\xa3\xe7\xa1\xae\n    pig_three_kmean_feature[\'y_same\'] = np.where(\n        pig_three_kmean_feature[\'y\'] ==\n        pig_three_kmean_feature[\'y_prdict\'], 1, 0)\n    # \xe5\xb0\x86feature\xe4\xb8\xad\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe5\x88\x9a\xe5\x88\x9a\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84y_same\n    pig_three_kmean_feature = pig_three_kmean_feature.filter([\'y_same\'])\n\n    from sklearn.cluster import KMeans\n\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x9a\xe5\x88\x9a\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\x8f\xaa\xe6\x9c\x89y_same\xe5\x88\x97\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xb5\x8b\xe5\x80\xbcx_kmean\n    x_kmean = pig_three_kmean_feature.values\n    # n_clusters=2, \xe5\x8d\xb3\xe5\x8f\xaa\xe8\x81\x9a\xe4\xb8\xa4\xe7\xb1\xbb\xe6\x95\xb0\xe6\x8d\xae\n    kmean = KMeans(n_clusters=2)\n    kmean.fit(x_kmean)\n    # \xe5\xb0\x86\xe8\x81\x9a\xe7\xb1\xbb\xe6\xa0\x87\xe7\xad\xbe\xe8\xb5\x8b\xe4\xba\x88\xe6\x96\xb0\xe7\x9a\x84\xe4\xb8\x80\xe5\x88\x97cluster\n    pig_three_kmean_feature[\'cluster\'] = kmean.predict(x_kmean)\n    # \xe5\xb0\x86\xe5\x91\xa8\xe5\x87\xa0\xe8\xbf\x99\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x88\xe5\xb9\xb6\xe8\xbf\x87\xe6\x9d\xa5\n    pig_three_kmean_feature[\'feature_date_week\'] = \\\n        kl_another_word_feature_test[\'feature_date_week\']\n    # \xe8\xa1\xa810-5\xe6\x89\x80\xe7\xa4\xba\n    print(\'pig_three_kmean_feature.tail():\\n\', pig_three_kmean_feature.tail())\n\n    # \xe8\xa1\xa810-6\xe6\x89\x80\xe7\xa4\xba\n    print(\'pd.crosstab(pig_three_kmean_feature.feature_date_week, pig_three_kmean_feature.cluster):\\n\',\n          pd.crosstab(pig_three_kmean_feature.feature_date_week, pig_three_kmean_feature.cluster))\n\n\n""""""\n    10.5 \xe6\xa2\xa6\xe9\x86\x92\xe6\x97\xb6\xe5\x88\x86\n""""""\n\n\ndef sample_105_0():\n    """"""\n    10.5 AbuML\n    :return:\n    """"""\n    global g_with_date_week_noise\n    g_with_date_week_noise = True\n    train_x, train_y_regress, train_y_classification, pig_three_feature, \\\n    test_x, test_y_regress, test_y_classification, kl_another_word_feature_test = sample_1031_1()\n\n    from abupy import AbuML\n    # \xe9\x80\x9a\xe8\xbf\x87x, y\xe7\x9f\xa9\xe9\x98\xb5\xe5\x92\x8c\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbb\x84\xe6\x88\x90AbuML\n    ml = AbuML(train_x, train_y_classification, pig_three_feature)\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe9\x9a\x8f\xe6\x9c\xba\xe6\xa3\xae\xe6\x9e\x97\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n    _ = ml.estimator.random_forest_classifier()\n\n    # \xe4\xba\xa4\xe7\xbb\x87\xe9\xaa\x8c\xe8\xaf\x81\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\n    print(\'ml.cross_val_accuracy_score():\\n\', ml.cross_val_accuracy_score())\n    # \xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x80\x89\xe6\x8b\xa9\n    print(\'ml.feature_selection():\\n\', ml.feature_selection())\n\n\n""""""\n    \xe5\xa6\x82\xe4\xb8\x8b\xe5\x86\x85\xe5\xae\xb9\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe7\x8e\xaf\xe5\xa2\x83, \xe5\xbb\xba\xe8\xae\xae\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbb\xef\xbc\x9a\n        abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x8d\xe7\xac\xac\xe5\x8d\x81\xe4\xb9\x9d\xe8\x8a\x82 \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n        \xe7\xac\xac20\xe8\x8a\x82 \xe7\xbe\x8e\xe8\x82\xa1\xe4\xba\xa4\xe6\x98\x93UMP\xe5\x86\xb3\xe7\xad\x96\n""""""\n\n\ndef sample_1051_0():\n    """"""\n    10.5.1 \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x88\x87\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe6\x88\x90\xe4\xba\xa4\xe4\xb9\xb0\xe5\x8d\x95\xe5\xbf\xab\xe7\x85\xa7: \xe6\x95\xb0\xe6\x8d\xae\xe5\x87\x86\xe5\xa4\x87\n\n    \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x90\xe8\xa1\x8c\xe8\xbf\x87abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x8d\xe7\xac\xac\xe5\x8d\x81\xe4\xb9\x9d\xe8\x8a\x82 \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x9a\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x90\xe8\xa1\x8c\n    \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x90\xe8\xa1\x8c\xe8\xbf\x87\xe5\xb0\xb1\xe4\xb8\x8d\xe8\xa6\x81\xe9\x87\x8d\xe5\xa4\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe4\xba\x86\xef\xbc\x9a\n    """"""\n    from abupy import EMarketTargetType, EMarketSourceType, EDataCacheType\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n    abupy.env.disable_example_env_ipython()\n    abupy.env.g_market_source = EMarketSourceType.E_MARKET_SOURCE_tx\n    abupy.env.g_data_cache_type = EDataCacheType.E_DATA_CACHE_CSV\n    # \xe9\xa6\x96\xe9\x80\x89\xe8\xbf\x99\xe9\x87\x8c\xe9\xa2\x84\xe4\xb8\x8b\xe8\xbd\xbd\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x846\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae(\xe5\x81\x9a5\xe5\xb9\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe9\xa2\x84\xe5\x85\x88\xe4\xb8\x8b\xe8\xbd\xbd6\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae)\n    abu.run_kl_update(start=\'2011-08-08\', end=\'2017-08-08\', market=EMarketTargetType.E_MARKET_TARGET_US)\n\n\ndef sample_1051_1(from_cache=False, show=True):\n    """"""\n    10.5.1 \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x88\x87\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe6\x88\x90\xe4\xba\xa4\xe4\xb9\xb0\xe5\x8d\x95\xe5\xbf\xab\xe7\x85\xa7: \xe6\x95\xb0\xe6\x8d\xae\xe5\x87\x86\xe5\xa4\x87\n    :return:\n    """"""\n    from abupy import AbuMetricsBase\n    from abupy import AbuFactorBuyBreak\n    from abupy import AbuFactorAtrNStop\n    from abupy import AbuFactorPreAtrNStop\n    from abupy import AbuFactorCloseAtrNStop\n\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n    abupy.env.disable_example_env_ipython()\n    from abupy import EMarketDataFetchMode\n    # \xe5\x9b\xa0\xe4\xb8\xbasample_94_1\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xba\x86\xe9\xa2\x84\xe5\x85\x88\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xaeE_DATA_FETCH_FORCE_LOCAL\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8arun_kl_update\xe6\x9c\x80\xe5\x90\x8e\xe4\xbc\x9a\xe6\x8a\x8a\xe8\xae\xbe\xe7\xbd\xaeset\xe5\x88\xb0FORCE_LOCAL\n    abupy.env.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n    # \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8cNone\xe4\xb8\xba\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n    stock_pickers = None\n    # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xbe\x9d\xe7\x84\xb6\xe5\xbb\xb6\xe7\x94\xa8\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe5\x9b\xa0\xe5\xad\x90\n    buy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                   {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n\n    # \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe7\xab\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\n    sell_factors = [\n        {\'stop_loss_n\': 1.0, \'stop_win_n\': 3.0,\n         \'class\': AbuFactorAtrNStop},\n        {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.5},\n        {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n    ]\n\n    # \xe5\x9b\x9e\xe6\xb5\x8b\xe7\x94\x9f\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x89\xb9\xe5\xbe\x81\n    abupy.env.g_enable_ml_feature = True\n    # \xe5\x9b\x9e\xe6\xb5\x8b\xe5\xb0\x86symbols\xe5\x88\x87\xe5\x89\xb2\xe5\x88\x86\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    abupy.env.g_enable_train_test_split = True\n    # \xe4\xb8\x8b\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x87\xe5\x89\xb2\xe6\xaf\x94\xe4\xbe\x8b\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba10\xef\xbc\x8c\xe5\x8d\xb3\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xba10\xe4\xbb\xbd\xef\xbc\x8c9\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c1\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\n    # \xe7\x94\xb1\xe4\xba\x8e\xe7\xbe\x8e\xe8\x82\xa1\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\x9a\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x88\x87\xe5\x89\xb2\xe5\x88\x86\xe4\xb8\xba4\xe4\xbb\xbd\xef\xbc\x8c3\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c1\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n    abupy.env.g_split_tt_n_folds = 4\n\n    from abupy import EStoreAbu\n    if from_cache:\n        abu_result_tuple = \\\n            abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                      custom_name=\'train_us\')\n    else:\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91500\xe4\xb8\x87\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe4\xbe\x9d\xe7\x84\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4atr\n        read_cash = 5000000\n        # \xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9f\xba\xe6\x95\xb0\xe8\xb5\x84\xe9\x87\x91\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe4\xb8\x87\xe5\x88\x86\xe4\xb9\x8b15\n        abupy.beta.atr.g_atr_pos_base = 0.0015\n        # \xe4\xbd\xbf\xe7\x94\xa8run_loop_back\xe8\xbf\x90\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8\xe5\x92\x8c\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\n        # choice_symbols=None\xe4\xb8\xba\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c5\xe5\xb9\xb4\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae\xe5\x9b\x9e\xe6\xb5\x8b\n        abu_result_tuple, _ = abu.run_loop_back(read_cash,\n                                                buy_factors, sell_factors,\n                                                stock_pickers,\n                                                choice_symbols=None,\n                                                start=\'2012-08-08\', end=\'2017-08-08\')\n        # \xe6\x8a\x8a\xe8\xbf\x90\xe8\xa1\x8c\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe4\xbe\xbf\xe4\xb9\x8b\xe5\x90\x8e\xe5\x88\x86\xe6\x9e\x90\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe4\xbb\xa3\xe7\xa0\x81\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n        abu.store_abu_result_tuple(abu_result_tuple, n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                   custom_name=\'train_us\')\n\n    if show:\n        metrics = AbuMetricsBase(*abu_result_tuple)\n        metrics.fit_metrics()\n        metrics.plot_returns_cmp(only_show_returns=True)\n\n    ""\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a""\n    abupy.env.g_enable_train_test_split = False\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n    abupy.env.g_enable_last_split_test = True\n\n    from abupy import EStoreAbu\n    if from_cache:\n        abu_result_tuple_test = \\\n            abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                      custom_name=\'test_us\')\n    else:\n        read_cash = 5000000\n        abupy.beta.atr.g_atr_pos_base = 0.007\n        choice_symbols = None\n        abu_result_tuple_test, kl_pd_manager_test = abu.run_loop_back(read_cash,\n                                                                      buy_factors, sell_factors, stock_pickers,\n                                                                      choice_symbols=choice_symbols, start=\'2012-08-08\',\n                                                                      end=\'2017-08-08\')\n        abu.store_abu_result_tuple(abu_result_tuple_test, n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                   custom_name=\'test_us\')\n\n    if show:\n        metrics = AbuMetricsBase(*abu_result_tuple_test)\n        metrics.fit_metrics()\n        metrics.plot_returns_cmp(only_show_returns=True)\n        print(abu_result_tuple.orders_pd[abu_result_tuple.orders_pd.result != 0].head())\n\n    return abu_result_tuple, abu_result_tuple_test\n\n\n# noinspection PyUnresolvedReferences\ndef sample_1052():\n    """"""\n    10.5.2 \xe5\x9f\xba\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe9\xa2\x84\xe6\xb5\x8b\n    :return:\n    """"""\n    # \xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe8\xbf\x90\xe8\xa1\x8c\n    abu_result_tuple, _ = sample_1051_1(from_cache=True, show=False)\n\n    from abupy.UmpBu.ABuUmpMainMul import UmpMulFiter\n    mul = UmpMulFiter(orders_pd=abu_result_tuple.orders_pd, scaler=False)\n    print(\'mul.df.head():\\n\', mul.df.head())\n\n    # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8svm\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n    print(\'decision_tree_classifier cv please wait...\')\n    mul.estimator.decision_tree_classifier()\n    mul.cross_val_accuracy_score()\n\n    # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8svm\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n    print(\'knn_classifier cv please wait...\')\n    # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8svm\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8, \xe6\x94\xb9\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8knn\n    mul.estimator.knn_classifier()\n    mul.cross_val_accuracy_score()\n\n    from abupy.UmpBu.ABuUmpMainBase import UmpDegFiter\n    deg = UmpDegFiter(orders_pd=abu_result_tuple.orders_pd)\n    print(\'deg.df.head():\\n\', deg.df.head())\n\n    print(\'xgb_classifier cv please wait...\')\n    # \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8GradientBoosting\n    deg.estimator.xgb_classifier()\n    deg.cross_val_accuracy_score()\n\n    print(\'adaboost_classifier cv please wait...\')\n    # \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8adaboost\n    deg.estimator.adaboost_classifier(base_estimator=None)\n    deg.cross_val_accuracy_score()\n\n    print(\'train_test_split_xy please wait...\')\n    deg.train_test_split_xy()\n\n\nif __name__ == ""__main__"":\n    sample_102()\n    # sample_103_0()\n    # sample_1031_1()\n    # sample_1031_2()\n    # sample_1031_3()\n    # sample_1031_4()\n    # sample_1032_1()\n    # sample_1032_2()\n    # sample_1032_3()\n    # sample_1032_4()\n    # sample_1032_5()\n    # sample_1033_1()\n    # sample_1033_2()\n    # sample_1041()\n    # sample_1042()\n    # sample_105_0()\n    # sample_1051_0()\n    # sample_1051_1(from_cache=True)\n    # sample_1051_1(from_cache=False)\n    # sample_1052()\n'"
python/c11.py,1,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import metrics\nimport warnings\nimport ast\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import ml\nfrom abupy import AbuMetricsBase, EStoreAbu, abu\nfrom abupy import ABuMarketDrawing\n\nfrom abupy import AbuFactorBuyBreak\nfrom abupy import AbuFactorAtrNStop\nfrom abupy import AbuFactorPreAtrNStop\nfrom abupy import AbuFactorCloseAtrNStop\nfrom abupy import EMarketTargetType, EMarketDataFetchMode\nfrom abupy import AbuUmpMainDeg\nfrom abupy import AbuUmpMainJump\nfrom abupy import AbuUmpMainPrice\nfrom abupy import AbuUmpMainWave\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8cNone\xe4\xb8\xba\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\nstock_pickers = None\n# \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xbe\x9d\xe7\x84\xb6\xe5\xbb\xb6\xe7\x94\xa8\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe5\x9b\xa0\xe5\xad\x90\nbuy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n               {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n\n# \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe7\xab\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\nsell_factors = [\n    {\'stop_loss_n\': 1.0, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop},\n    {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.5},\n    {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n]\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n\n""""""\n    \xe7\xac\xac11\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f-\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe2\x80\xa2ABU\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n\n    * \xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\x80\xe4\xbb\xa5\xe6\x9c\xac\xe7\xab\xa0\xe6\x97\xa0\xe6\xb3\x95\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe3\x80\x8a\xe9\x87\x8f\xe5\x8c\x96\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\x8b\xe8\xb7\xaf\xe3\x80\x8b\xe4\xb8\xad\xe7\x9a\x84\xe5\x8e\x9f\xe5\xa7\x8b\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf\xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\xe6\x94\xb9\xe4\xb8\xba\xe4\xbd\xbf\xe7\x94\xa8A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe3\x80\x82\n    * \xe6\x9c\xac\xe8\x8a\x82\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe7\xac\xac20-23\xe8\x8a\x82\xe5\x86\x85\xe5\xae\xb9\n    * \xe6\x9c\xac\xe8\x8a\x82\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe6\x98\xaf\xe5\x9c\xa8abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe4\xb8\xad\xe7\xac\xac20\xe8\x8a\x82\xe5\x86\x85\xe5\xae\xb9\xe5\xae\x8c\xe6\x88\x90\xe8\xbf\x90\xe8\xa1\x8c\xe5\x90\x8e\xe6\x9c\x89A\xe8\x82\xa1\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\x92\x8cA\xe8\x82\xa1\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe4\xb9\x8b\xe5\x90\x8e\n""""""\n\n\ndef load_abu_result_tuple():\n    abupy.env.g_market_target = EMarketTargetType.E_MARKET_TARGET_CN\n    abupy.env.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n    abu_result_tuple_train = abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                                       custom_name=\'train_cn\')\n    abu_result_tuple_test = abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                                      custom_name=\'test_cn\')\n    metrics_train = AbuMetricsBase(*abu_result_tuple_train)\n    metrics_train.fit_metrics()\n    metrics_test = AbuMetricsBase(*abu_result_tuple_test)\n    metrics_test.fit_metrics()\n\n    return abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test\n\n\ndef sample_110():\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    metrics_train.plot_returns_cmp(only_show_returns=True)\n    metrics_test.plot_returns_cmp(only_show_returns=True)\n\n\ndef sample_111():\n    """"""\n    11.1 \xe6\x90\x9c\xe7\xb4\xa2\xe5\xbc\x95\xe6\x93\x8e\xe4\xb8\x8e\xe9\x87\x8f\xe5\x8c\x96\xe4\xba\xa4\xe6\x98\x93\n\n    \xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac16\xe8\x8a\x82 UMP\xe4\xb8\xbb\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n    :return:\n    """"""\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    orders_pd_train = abu_result_tuple_train.orders_pd\n\n    # \xe9\x80\x89\xe6\x8b\xa9\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe5\x89\x8d20\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\n    # \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe7\xa4\xba\xe4\xbe\x8b\xef\xbc\x8c\xe5\xae\x9e\xe6\x88\x98\xe4\xb8\xad\xe6\xa0\xb9\xe6\x8d\xae\xe9\x9c\x80\xe8\xa6\x81\xe6\x8c\x91\xe9\x80\x89\xef\xbc\x8crank\xe6\x88\x96\xe8\x80\x85\xe5\x85\xb6\xe4\xbb\x96\xe6\x96\xb9\xe5\xbc\x8f\n    plot_simple = orders_pd_train[orders_pd_train.profit_cg < 0][:20]\n    # save=True\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8~/abu/data/save_png/\xe4\xb8\xad\n    ABuMarketDrawing.plot_candle_from_order(plot_simple, save=True)\n\n\n""""""\n    11.2 \xe4\xb8\xbb\xe8\xa3\x81\n\n    \xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac15\xe8\x8a\x82 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n""""""\n\n\ndef sample_112():\n    """"""\n    11.2.1 \xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81, 11.2.2 \xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\xaf\xb9\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\n    :return:\n    """"""\n\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    orders_pd_train = abu_result_tuple_train.orders_pd\n    # \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xbaorders_pd\n    ump_deg = AbuUmpMainDeg(orders_pd_train)\n    # df\xe5\x8d\xb3\xe7\x94\xb1\xe4\xb9\x8b\xe5\x89\x8dump_main_make_xy\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe7\xb1\xbbdf\xef\xbc\x8c\xe8\xa1\xa811-1\xe6\x89\x80\xe7\xa4\xba\n    print(\'ump_deg.fiter.df.head():\\n\', ump_deg.fiter.df.head())\n\n    # \xe8\x80\x97\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\xa4\xa7\xe6\xa6\x82\xe9\x9c\x80\xe8\xa6\x8110\xe5\x87\xa0\xe5\x88\x86\xe9\x92\x9f\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe6\xa0\xb9\xe6\x8d\xae\xe7\x94\xb5\xe8\x84\x91\xe6\x80\xa7\xe8\x83\xbd\xef\xbc\x8ccpu\xe6\x83\x85\xe5\x86\xb5\n    _ = ump_deg.fit(brust_min=False)\n    print(\'ump_deg.cprs:\\n\', ump_deg.cprs)\n    max_failed_cluster = ump_deg.cprs.loc[ump_deg.cprs.lrs.argmax()]\n    print(\'\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87{0}, \xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe4\xb8\xba{1:.2f}%, \xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe6\x80\xbb\xe6\x95\xb0{2}, \xe7\xb0\x87\xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9{3:.2f}%\'.format(\n        ump_deg.cprs.lrs.argmax(), max_failed_cluster.lrs * 100, max_failed_cluster.lcs, max_failed_cluster.lms * 100))\n\n    cpt = int(ump_deg.cprs.lrs.argmax().split(\'_\')[0])\n    print(\'cpt:\\n\', cpt)\n    ump_deg.show_parse_rt(ump_deg.rts[cpt])\n\n    max_failed_cluster_orders = ump_deg.nts[ump_deg.cprs.lrs.argmax()]\n\n    print(\'max_failed_cluster_orders:\\n\', max_failed_cluster_orders)\n\n    ml.show_orders_hist(max_failed_cluster_orders,\n                        [\'buy_deg_ang21\', \'buy_deg_ang42\', \'buy_deg_ang60\', \'buy_deg_ang252\'])\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaddeg_ang60\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        max_failed_cluster_orders.buy_deg_ang60.mean()))\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaddeg_ang21\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        max_failed_cluster_orders.buy_deg_ang21.mean()))\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaddeg_ang42\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        max_failed_cluster_orders.buy_deg_ang42.mean()))\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaddeg_ang252\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        max_failed_cluster_orders.buy_deg_ang252.mean()))\n\n    ml.show_orders_hist(orders_pd_train, [\'buy_deg_ang21\', \'buy_deg_ang42\', \'buy_deg_ang60\', \'buy_deg_ang252\'])\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xaddeg_ang60\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        orders_pd_train.buy_deg_ang60.mean()))\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xaddeg_ang21\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        orders_pd_train.buy_deg_ang21.mean()))\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xaddeg_ang42\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        orders_pd_train.buy_deg_ang42.mean()))\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xaddeg_ang252\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        orders_pd_train.buy_deg_ang252.mean()))\n\n    """"""\n        11.2.2 \xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\xaf\xb9\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\n    """"""\n    brust_min = ump_deg.brust_min()\n    print(\'brust_min:\', brust_min)\n\n    llps = ump_deg.cprs[(ump_deg.cprs[\'lps\'] <= brust_min[0]) & (ump_deg.cprs[\'lms\'] <= brust_min[1]) & (\n        ump_deg.cprs[\'lrs\'] >= brust_min[2])]\n    print(\'llps:\\n\', llps)\n\n    print(ump_deg.choose_cprs_component(llps))\n    ump_deg.dump_clf(llps)\n\n\n""""""\n    11.2.3 \xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\n""""""\n\n\ndef sample_1123():\n    """"""\n    11.2.3 \xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\n    :return:\n    """"""\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    orders_pd_train = abu_result_tuple_train.orders_pd\n    ump_jump = AbuUmpMainJump.ump_main_clf_dump(orders_pd_train, save_order=False)\n    print(ump_jump.fiter.df.head())\n\n    print(\'\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87{0}\'.format(ump_jump.cprs.lrs.argmax()))\n    # \xe6\x8b\xbf\xe5\x87\xba\xe8\xb7\xb3\xe7\xa9\xba\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\n    max_failed_cluster_orders = ump_jump.nts[ump_jump.cprs.lrs.argmax()]\n    # \xe6\x98\xbe\xe7\xa4\xba\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xef\xbc\x8c\xe8\xa1\xa811-6\xe6\x89\x80\xe7\xa4\xba\n    print(\'max_failed_cluster_orders:\\n\', max_failed_cluster_orders)\n\n    ml.show_orders_hist(max_failed_cluster_orders, feature_columns=[\'buy_diff_up_days\', \'buy_jump_up_power\',\n                                                                    \'buy_diff_down_days\', \'buy_jump_down_power\'])\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xadjump_up_power\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\xef\xbc\x8c \xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe5\xb9\xb3\xe5\x9d\x87\xe5\xa4\xa9\xe6\x95\xb0{1:.2f}\'.format(\n        max_failed_cluster_orders.buy_jump_up_power.mean(), max_failed_cluster_orders.buy_diff_up_days.mean()))\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xadjump_down_power\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}, \xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe5\xb9\xb3\xe5\x9d\x87\xe5\xa4\xa9\xe6\x95\xb0{1:.2f}\'.format(\n        max_failed_cluster_orders.buy_jump_down_power.mean(), max_failed_cluster_orders.buy_diff_down_days.mean()))\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xadjump_up_power\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\xef\xbc\x8c\xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe5\xb9\xb3\xe5\x9d\x87\xe5\xa4\xa9\xe6\x95\xb0{1:.2f}\'.format(\n        orders_pd_train.buy_jump_up_power.mean(), orders_pd_train.buy_diff_up_days.mean()))\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xadjump_down_power\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}, \xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe5\xb9\xb3\xe5\x9d\x87\xe5\xa4\xa9\xe6\x95\xb0{1:.2f}\'.format(\n        orders_pd_train.buy_jump_down_power.mean(), orders_pd_train.buy_diff_down_days.mean()))\n\n\n""""""\n    11.2.4 \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\n""""""\n\n\ndef sample_1124():\n    """"""\n    11.2.4 \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\n    :return:\n    """"""\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    orders_pd_train = abu_result_tuple_train.orders_pd\n    ump_price = AbuUmpMainPrice.ump_main_clf_dump(orders_pd_train, save_order=False)\n    print(\'ump_price.fiter.df.head():\\n\', ump_price.fiter.df.head())\n\n    print(\'\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87{0}\'.format(ump_price.cprs.lrs.argmax()))\n\n    # \xe6\x8b\xbf\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\n    max_failed_cluster_orders = ump_price.nts[ump_price.cprs.lrs.argmax()]\n    # \xe8\xa1\xa811-8\xe6\x89\x80\xe7\xa4\xba\n    print(\'max_failed_cluster_orders:\\n\', max_failed_cluster_orders)\n\n\n""""""\n    11.2.5 \xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\n""""""\n\n\ndef sample_1125():\n    """"""\n    11.2.5 \xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\n    :return:\n    """"""\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    orders_pd_train = abu_result_tuple_train.orders_pd\n    # \xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8~/abu/data/save_png/\xe4\xb8\xad\n    ump_wave = AbuUmpMainWave.ump_main_clf_dump(orders_pd_train, save_order=True)\n    print(\'ump_wave.fiter.df.head():\\n\', ump_wave.fiter.df.head())\n\n    print(\'\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87{0}\'.format(ump_wave.cprs.lrs.argmax()))\n    # \xe6\x8b\xbf\xe5\x87\xba\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\n    max_failed_cluster_orders = ump_wave.nts[ump_wave.cprs.lrs.argmax()]\n    # \xe8\xa1\xa811-10\xe6\x89\x80\xe7\xa4\xba\n    print(\'max_failed_cluster_orders:\\n\', max_failed_cluster_orders)\n\n    ml.show_orders_hist(max_failed_cluster_orders, feature_columns=[\'buy_wave_score1\', \'buy_wave_score3\'])\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xadwave_score1\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        max_failed_cluster_orders.buy_wave_score1.mean()))\n\n    print(\'\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xadwave_score3\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        max_failed_cluster_orders.buy_wave_score3.mean()))\n\n    ml.show_orders_hist(orders_pd_train, feature_columns=[\'buy_wave_score1\', \'buy_wave_score1\'])\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xadwave_score1\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        orders_pd_train.buy_wave_score1.mean()))\n\n    print(\'\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xadwave_score3\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba{0:.2f}\'.format(\n        orders_pd_train.buy_wave_score1.mean()))\n\n\n""""""\n    11.2.6 \xe9\xaa\x8c\xe8\xaf\x81\xe4\xb8\xbb\xe8\xa3\x81\xe6\x98\xaf\xe5\x90\xa6\xe7\xa7\xb0\xe8\x81\x8c\n\n    \xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n""""""\n\n\ndef sample_1126():\n    """"""\n    11.2.6 \xe9\xaa\x8c\xe8\xaf\x81\xe4\xb8\xbb\xe8\xa3\x81\xe6\x98\xaf\xe5\x90\xa6\xe7\xa7\xb0\xe8\x81\x8c\n    :return:\n    """"""\n    """"""\n        \xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\x89\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe5\x8d\xb3\xe6\x9c\x89\xe6\x9c\xac\xe5\x9c\xb0\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xe4\xb8\x8b\xe4\xbb\xa3\xe7\xa0\x81\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe8\xbd\xbd\n    """"""\n    ump_deg = AbuUmpMainDeg(predict=True)\n    ump_jump = AbuUmpMainJump(predict=True)\n    ump_price = AbuUmpMainPrice(predict=True)\n    ump_wave = AbuUmpMainWave(predict=True)\n\n    def apply_ml_features_ump(order, predicter, need_hit_cnt):\n        if not isinstance(order.ml_features, dict):\n            # \xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xacpandas dict\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\xe4\xbc\x9a\xe6\x88\x90\xe4\xb8\xbastr\n            ml_features = ast.literal_eval(order.ml_features)\n        else:\n            ml_features = order.ml_features\n\n        return predicter.predict_kwargs(need_hit_cnt=need_hit_cnt, **ml_features)\n\n    abu_result_tuple_train, abu_result_tuple_test, metrics_train, metrics_test = load_abu_result_tuple()\n    # \xe9\x80\x89\xe5\x8f\x96\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xaeorder_has_result\n    order_has_result = abu_result_tuple_test.orders_pd[abu_result_tuple_test.orders_pd.result != 0]\n    # \xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\xe5\xbc\x80\xe5\xa7\x8b\xe8\xa3\x81\xe5\x86\xb3\n    order_has_result[\'ump_deg\'] = order_has_result.apply(apply_ml_features_ump, axis=1, args=(ump_deg, 2,))\n    # \xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\xe5\xbc\x80\xe5\xa7\x8b\xe8\xa3\x81\xe5\x86\xb3\n    order_has_result[\'ump_jump\'] = order_has_result.apply(apply_ml_features_ump, axis=1, args=(ump_jump, 2,))\n    # \xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\xe5\xbc\x80\xe5\xa7\x8b\xe8\xa3\x81\xe5\x86\xb3\n    order_has_result[\'ump_wave\'] = order_has_result.apply(apply_ml_features_ump, axis=1, args=(ump_wave, 2,))\n    # \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\xe5\xbc\x80\xe5\xa7\x8b\xe8\xa3\x81\xe5\x86\xb3\n    order_has_result[\'ump_price\'] = order_has_result.apply(apply_ml_features_ump, axis=1, args=(ump_price, 2,))\n\n    block_pd = order_has_result.filter(regex=\'^ump_*\')\n    block_pd[\'sum_bk\'] = block_pd.sum(axis=1)\n    block_pd[\'result\'] = order_has_result[\'result\']\n\n    block_pd = block_pd[block_pd.sum_bk > 0]\n    print(\'\xe5\x9b\x9b\xe4\xb8\xaa\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb4\xe4\xbd\x93\xe6\x8b\xa6\xe6\x88\xaa\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87{:.2f}%\'.format(\n        block_pd[block_pd.result == -1].result.count() / block_pd.result.count() * 100))\n    print(\'block_pd.tail():\\n\', block_pd.tail())\n\n    def sub_ump_show(block_name):\n        sub_block_pd = block_pd[(block_pd[block_name] == 1)]\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\xb1\xe8\xb4\xa5\xe5\xb0\xb1\xe6\xad\xa3\xe7\xa1\xae \xef\xbc\x8d1->1 1->0\n        # noinspection PyTypeChecker\n        sub_block_pd.result = np.where(sub_block_pd.result == -1, 1, 0)\n        return metrics.accuracy_score(sub_block_pd[block_name], sub_block_pd.result)\n\n    print(\'\xe8\xa7\x92\xe5\xba\xa6\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87{:.2f}%\'.format(sub_ump_show(\'ump_deg\') * 100))\n    print(\'\xe8\xb7\xb3\xe7\xa9\xba\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87{:.2f}%\'.format(sub_ump_show(\'ump_jump\') * 100))\n    print(\'\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87{:.2f}%\'.format(sub_ump_show(\'ump_wave\') * 100))\n    print(\'\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87{:.2f}%\'.format(sub_ump_show(\'ump_price\') * 100))\n\n\n""""""\n    11.2.7 \xe5\x9c\xa8abu\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\xbb\xe8\xa3\x81\xe6\x8b\xa6\xe6\x88\xaa\xe6\xa8\xa1\xe5\xbc\x8f\n\n    \xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n""""""\n\n""""""\n11.3.1 \xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe8\xa3\x81\n\xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac17\xe8\x8a\x82 UMP\xe8\xbe\xb9\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n11.3.2 \xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xb9\xe8\xa3\x81\n\xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac17\xe8\x8a\x82 UMP\xe8\xbe\xb9\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n11.3.3 \xe6\xb3\xa2\xe5\x8a\xa8\xe8\xbe\xb9\xe8\xa3\x81\n\xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac17\xe8\x8a\x82 UMP\xe8\xbe\xb9\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n11.3.4 \xe7\xbb\xbc\xe5\x90\x88\xe8\xbe\xb9\xe8\xa3\x81\n\xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac17\xe8\x8a\x82 UMP\xe8\xbe\xb9\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n11.3.5 \xe9\xaa\x8c\xe8\xaf\x81\xe8\xbe\xb9\xe8\xa3\x81\xe6\x98\xaf\xe5\x90\xa6\xe7\xa7\xb0\xe8\x81\x8c\n\n\xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n11.3.6 \xe5\x9c\xa8abu\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xe5\xbc\x80\xe5\x90\xaf\xe8\xbe\xb9\xe8\xa3\x81\xe6\x8b\xa6\xe6\x88\xaa\xe6\xa8\xa1\xe5\xbc\x8f\n\n\xe8\xaf\xb7\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbABU\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3 \xef\xbc\x9a\xe7\xac\xac21\xe8\x8a\x82 A\xe8\x82\xa1UMP\xe5\x86\xb3\xe7\xad\x96 \xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\n\n""""""\n\nif __name__ == ""__main__"":\n    sample_111()\n    # sample_112()\n    # sample_1123()\n    # sample_1124()\n    # sample_1125()\n    # sample_1126()\n'"
python/c2.py,4,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\n\nimport logging\nimport warnings\nfrom abc import ABCMeta, abstractmethod\nfrom collections import OrderedDict\nfrom collections import namedtuple\nimport itertools\n# noinspection PyCompatibility\nfrom concurrent.futures import ProcessPoolExecutor\n# noinspection PyCompatibility\nfrom concurrent.futures import ThreadPoolExecutor\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import six, xrange, range, reduce, map, filter, partial\nfrom abupy import ABuSymbolPd\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\n\n""""""\n    \xe7\xac\xac\xe4\xba\x8c\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe8\xaf\xad\xe8\xa8\x80\xe2\x80\x94\xe2\x80\x94Python\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_211():\n    """"""\n    \xe9\x87\x8f\xe5\x8c\x96\xe8\xaf\xad\xe8\xa8\x80-Python\n    :return:\n    """"""\n    price_str = \'30.14, 29.58, 26.36, 32.56, 32.82\'\n    print(\'type(price_str):\', type(price_str))\n\n    if not isinstance(price_str, str):\n        # not\xe4\xbb\xa3\xe8\xa1\xa8\xe9\x80\xbb\xe8\xbe\x91\xe2\x80\x98\xe9\x9d\x9e\xe2\x80\x99\xef\xbc\x8c \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        price_str = str(price_str)\n    if isinstance(price_str, int) and price_str > 0:\n        # and \xe4\xbb\xa3\xe8\xa1\xa8\xe9\x80\xbb\xe8\xbe\x91\xe2\x80\x98\xe4\xb8\x8e\xe2\x80\x99\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafint\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\x94\xe6\x98\xaf\xe6\xad\xa3\xe6\x95\xb0\n        price_str += 1\n    elif isinstance(price_str, float) or float(price_str[:4]) < 0:\n        # or \xe4\xbb\xa3\xe8\xa1\xa8\xe9\x80\xbb\xe8\xbe\x91\xe2\x80\x98\xe6\x88\x96\xe2\x80\x99\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaffloat\xe6\x88\x96\xe8\x80\x85\xe5\xb0\x8f\xe4\xba\x8e0\n        price_str += 1.0\n    else:\n        try:\n            raise TypeError(\'price_str is str type!\')\n        except TypeError:\n            print(\'raise, try except\')\n\n\ndef sample_212(show=True):\n    """"""\n    2.1.2 \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x92\x8c\xe5\xae\xb9\xe5\x99\xa8\n    :return:\n    """"""\n    show_func = print if show else lambda a: a\n    price_str = \'30.14, 29.58, 26.36, 32.56, 32.82\'\n    show_func(\'\xe6\x97\xa7\xe7\x9a\x84price_str id= {}\'.format(id(price_str)))\n    price_str = price_str.replace(\' \', \'\')\n    show_func(\'\xe6\x96\xb0\xe7\x9a\x84price_str id= {}\'.format(id(price_str)))\n    show_func(price_str)\n    # split\xe4\xbb\xa5\xe9\x80\x97\xe5\x8f\xb7\xe5\x88\x86\xe5\x89\xb2\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe7\xbb\x84price_array\n    price_array = price_str.split(\',\')\n    show_func(price_array)\n    # price_array\xe5\xb0\xbe\xe9\x83\xa8append\xe4\xb8\x80\xe4\xb8\xaa\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x8432.82\n    price_array.append(\'32.82\')\n    show_func(price_array)\n    show_func(set(price_array))\n    price_array.remove(\'32.82\')\n    show_func(price_array)\n\n    date_array = []\n    date_base = 20170118\n    # \xe8\xbf\x99\xe9\x87\x8c\xe7\x94\xa8for\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe8\xae\xa1\xe6\x95\xb0\xef\xbc\x8c\xe6\x97\xa0\xe7\x94\xa8\xe7\x9a\x84\xe5\x8f\x98\xe9\x87\x8fpython\xe5\xbb\xba\xe8\xae\xae\xe4\xbd\xbf\xe7\x94\xa8\'_\'\xe5\xa3\xb0\xe6\x98\x8e\n    for _ in xrange(0, len(price_array)):\n        date_array.append(str(date_base))\n        # \xe6\x9c\xac\xe8\x8a\x82\xe5\x8f\xaa\xe6\x98\xaf\xe7\xae\x80\xe5\x8d\x95\xe7\xa4\xba\xe4\xbe\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x97\xa5\xe6\x9c\x9f\xe7\x9a\x84\xe8\xbf\x9b\xe4\xbd\x8d\n        date_base += 1\n    show_func(date_array)\n\n    date_base = 20170118\n    date_array = [str(date_base + ind) for ind, _ in enumerate(price_array)]\n    show_func(date_array)\n\n    stock_tuple_list = [(date, price) for date, price in zip(date_array, price_array)]\n    # tuple\xe8\xae\xbf\xe9\x97\xae\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb4\xa2\xe5\xbc\x95\n    show_func(\'20170119\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x9a{}\'.format(stock_tuple_list[1][1]))\n    show_func(stock_tuple_list)\n\n    stock_namedtuple = namedtuple(\'stock\', (\'date\', \'price\'))\n    stock_namedtuple_list = [stock_namedtuple(date, price) for date, price in zip(date_array, price_array)]\n    # namedtuple\xe8\xae\xbf\xe9\x97\xae\xe4\xbd\xbf\xe7\x94\xa8price\n    show_func(\'20170119\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x9a{}\'.format(stock_namedtuple_list[1].price))\n    show_func(stock_namedtuple_list)\n\n    # \xe5\xad\x97\xe5\x85\xb8\xe6\x8e\xa8\xe5\xaf\xbc\xe5\xbc\x8f\xef\xbc\x9a{key: value for in}\n    stock_dict = {date: price for date, price in zip(date_array, price_array)}\n    show_func(\'20170119\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x9a{}\'.format(stock_dict[\'20170119\']))\n    show_func(stock_dict)\n\n    show_func(stock_dict.keys())\n\n    stock_dict = OrderedDict((date, price) for date, price in zip(date_array, price_array))\n    show_func(stock_dict.keys())\n    return stock_dict\n\n\ndef sample_221():\n    """"""\n    2.2.1 \xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe5\x92\x8c\xe5\xae\x9a\xe4\xb9\x89\n    :return:\n    """"""\n    stock_dict = sample_212(show=False)\n    print(\'min(stock_dict):\', min(stock_dict))\n    print(\'min(zip(stock_dict.values(), stock_dict.keys())):\', min(zip(stock_dict.values(), stock_dict.keys())))\n\n    def find_second_max(dict_array):\n        # \xe5\xaf\xb9\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84dict sorted\xe6\x8e\x92\xe5\xba\x8f\n        stock_prices_sorted = sorted(zip(dict_array.values(), dict_array.keys()))\n        # \xe7\xac\xac\xe4\xba\x8c\xe5\xa4\xa7\xe7\x9a\x84\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe5\x80\x92\xe6\x95\xb0\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\n        return stock_prices_sorted[-2]\n\n    # \xe7\xb3\xbb\xe7\xbb\x9f\xe5\x87\xbd\xe6\x95\xb0callable\xe9\xaa\x8c\xe8\xaf\x81\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\xafcall\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n    if callable(find_second_max):\n        print(\'find_second_max(stock_dict):\', find_second_max(stock_dict))\n\n\ndef sample_222():\n    """"""\n    2.2.2 lambda\xe5\x87\xbd\xe6\x95\xb0\n    :return:\n    """"""\n    stock_dict = sample_212(show=False)\n\n    find_second_max_lambda = lambda dict_array: sorted(zip(dict_array.values(), dict_array.keys()))[-2]\n    print(\'find_second_max_lambda(stock_dict):\', find_second_max_lambda(stock_dict))\n\n    def find_max_and_min(dict_array):\n        # \xe5\xaf\xb9\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84dict sorted\xe6\x8e\x92\xe5\xba\x8fR\n        stock_prices_sorted = sorted(zip(dict_array.values(), dict_array.keys()))\n        return stock_prices_sorted[0], stock_prices_sorted[-1]\n\n    print(\'find_max_and_min(stock_dict):\', find_max_and_min(stock_dict))\n\n\ndef sample_223(show=True):\n    """"""\n    2.2.3 \xe9\xab\x98\xe9\x98\xb6\xe5\x87\xbd\xe6\x95\xb0\n    :return:\n    """"""\n    stock_dict = sample_212(show=False)\n\n    show_func = print if show else lambda a: a\n\n    # \xe5\xb0\x86\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\x9a\x84\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x9a\xe8\xbf\x87\xe5\x88\x97\xe8\xa1\xa8\xe6\x8e\xa8\xe5\xaf\xbc\xe5\xbc\x8f\xe6\x98\xbe\xe7\xa4\xba\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbafloat\xe7\xb1\xbb\xe5\x9e\x8b\n    # \xe7\x94\xb1\xe4\xba\x8estock_dict\xe6\x98\xafOrderedDict\xe6\x89\x80\xe4\xbb\xa5\xe6\x89\x8d\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\n    # \xe4\xbd\xbf\xe7\x94\xa8stock_dict.values()\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x89\xe5\xba\x8f\xe6\x97\xa5\xe6\x9c\x9f\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    price_float_array = [float(price_str) for price_str in stock_dict.values()]\n    # \xe9\x80\x9a\xe8\xbf\x87\xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe5\xb9\xb3\xe7\xa7\xbb\xe5\xbd\xa2\xe6\x88\x90\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x94\x99\xe5\xbc\x80\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87zip\xe6\x89\x93\xe5\x8c\x85\xe6\x88\x90\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n    # \xe9\x80\x9a\xe8\xbf\x87[:-1]:\xe4\xbb\x8e\xe7\xac\xac0\xe4\xb8\xaa\xe5\x88\xb0\xe5\x80\x92\xe6\x95\xb0\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xef\xbc\x8c[1:]\xef\xbc\x9a\xe4\xbb\x8e\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\xb0\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa \xe9\x94\x99\xe5\xbc\x80\xe5\xbd\xa2\xe6\x88\x90\xe7\x9b\xb8\xe9\x82\xbb\n    # \xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xe7\x9b\xb8\xe9\x82\xbb\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    pp_array = [(price1, price2) for price1, price2 in zip(price_float_array[:-1], price_float_array[1:])]\n    show_func(pp_array)\n    # list for python3\n    change_array = list(map(lambda pp: reduce(lambda a, b: round((b - a) / a, 3), pp), pp_array))\n    # list insert\xe6\x8f\x92\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb0\x86\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba0\n    change_array.insert(0, 0)\n    show_func(change_array)\n\n    price_str = \'30.14, 29.58, 26.36, 32.56, 32.82\'\n    price_str = price_str.replace(\' \', \'\')\n    price_array = price_str.split(\',\')\n\n    date_base = 20170118\n    date_array = [str(date_base + ind) for ind, _ in enumerate(price_array)]\n\n    # \xe4\xbd\xbf\xe7\x94\xa8namedtuple\xe9\x87\x8d\xe6\x96\xb0\xe6\x9e\x84\xe5\xbb\xba\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\n    stock_namedtuple = namedtuple(\'stock\', (\'date\', \'price\', \'change\'))\n    # \xe9\x80\x9a\xe8\xbf\x87zip\xe5\x88\x86\xe5\x88\xab\xe4\xbb\x8edate_array\xef\xbc\x8cprice_array\xef\xbc\x8cchange_array\xe6\x8b\xbf\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x84\xe6\x88\x90\n    # stock_namedtuple\xe7\x84\xb6\xe5\x90\x8e\xe4\xbb\xa5date\xe5\x81\x9a\xe4\xb8\xbakey\xe7\xbb\x84\xe6\x88\x90OrderedDict\n    stock_dict = OrderedDict((date, stock_namedtuple(date, price, change)) for date, price, change in\n                             zip(date_array, price_array, change_array))\n    show_func(stock_dict)\n    # list for python3\n    up_days = list(filter(lambda day: day.change > 0, stock_dict.values()))\n    show_func(up_days)\n\n    def filter_stock(stock_array_dict, want_up=True, want_calc_sum=False):\n        if not isinstance(stock_array_dict, OrderedDict):\n            raise TypeError(\'stock_array_dict must be OrderedDict!\')\n\n        # python\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x89\xe7\x9b\xae\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\n        filter_func = (lambda p_day: p_day.change > 0) if want_up else (lambda p_day: p_day.change < 0)\n        # \xe4\xbd\xbf\xe7\x94\xa8filter_func\xe5\x81\x9a\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xbd\xe6\x95\xb0\n        want_days = list(filter(filter_func, stock_array_dict.values()))\n\n        if not want_calc_sum:\n            return want_days\n\n        # \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\x92\x8c\n        change_sum = 0.0\n        for day in want_days:\n            change_sum += day.change\n        return change_sum\n\n    # \xe5\x85\xa8\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\n    show_func(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x9a{}\'.format(filter_stock(stock_dict)))\n    # want_up=False\n    show_func(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x9a{}\'.format(filter_stock(stock_dict, want_up=False)))\n    # \xe8\xae\xa1\xe7\xae\x97\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe6\x80\xbb\xe4\xbc\x9a\n    show_func(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\xe5\x92\x8c\xef\xbc\x9a{}\'.format(filter_stock(stock_dict, want_calc_sum=True)))\n    # \xe8\xae\xa1\xe7\xae\x97\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe6\x80\xbb\xe4\xbc\x9a\n    show_func(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe8\xb7\x8c\xe5\xb9\x85\xe5\x92\x8c\xef\xbc\x9a{}\'.format(filter_stock(stock_dict, want_up=False, want_calc_sum=True)))\n    return stock_dict\n\n\ndef sample_224():\n    """"""\n    2.2.4 \xe5\x81\x8f\xe5\x87\xbd\xe6\x95\xb0\n    :return:\n    """"""\n    stock_dict = sample_223(show=False)\n\n    def filter_stock(stock_array_dict, want_up=True, want_calc_sum=False):\n        if not isinstance(stock_array_dict, OrderedDict):\n            raise TypeError(\'stock_array_dict must be OrderedDict!\')\n\n        # python\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x89\xe7\x9b\xae\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\n        filter_func = (lambda p_day: p_day.change > 0) if want_up else (lambda p_day: p_day.change < 0)\n        # \xe4\xbd\xbf\xe7\x94\xa8filter_func\xe5\x81\x9a\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xbd\xe6\x95\xb0\n        want_days = list(filter(filter_func, stock_array_dict.values()))\n\n        if not want_calc_sum:\n            return want_days\n\n        # \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\x92\x8c\n        change_sum = 0.0\n        for day in want_days:\n            change_sum += day.change\n        return change_sum\n\n    filter_stock_up_days = partial(filter_stock, want_up=True, want_calc_sum=False)\n    filter_stock_down_days = partial(filter_stock, want_up=False, want_calc_sum=False)\n    filter_stock_up_sums = partial(filter_stock, want_up=True, want_calc_sum=True)\n    filter_stock_down_sums = partial(filter_stock, want_up=False, want_calc_sum=True)\n\n    print(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x9a{}\'.format(filter_stock_up_days(stock_dict)))\n    print(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x9a{}\'.format(filter_stock_down_days(stock_dict)))\n    print(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\xe5\x92\x8c\xef\xbc\x9a{}\'.format(filter_stock_up_sums(stock_dict)))\n    print(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe8\xb7\x8c\xe5\xb9\x85\xe5\x92\x8c\xef\xbc\x9a{}\'.format(filter_stock_down_sums(stock_dict)))\n\n\n""""""\n    2.3 \xe9\x9d\xa2\xe5\x90\x91\xe5\xaf\xb9\xe8\xb1\xa1\n""""""\n\n\nclass StockTradeDays(object):\n    def __init__(self, price_array, start_date, date_array=None):\n        # \xe7\xa7\x81\xe6\x9c\x89\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n        self.__price_array = price_array\n        # \xe7\xa7\x81\xe6\x9c\x89\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n        self.__date_array = self._init_days(start_date, date_array)\n        # \xe7\xa7\x81\xe6\x9c\x89\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\x8f\xe5\x88\x97\n        self.__change_array = self.__init_change()\n        # \xe8\xbf\x9b\xe8\xa1\x8cOrderedDict\xe7\x9a\x84\xe7\xbb\x84\xe8\xa3\x85\n        self.stock_dict = self._init_stock_dict()\n\n    def __init_change(self):\n        """"""\n        \xe4\xbb\x8eprice_array\xe7\x94\x9f\xe6\x88\x90change_array\n        :return:\n        """"""\n        price_float_array = [float(price_str) for price_str in\n                             self.__price_array]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe5\xb9\xb3\xe7\xa7\xbb\xe5\xbd\xa2\xe6\x88\x90\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x94\x99\xe5\xbc\x80\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87zip\xe6\x89\x93\xe5\x8c\x85\xe6\x88\x90\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xe7\x9b\xb8\xe9\x82\xbb\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n        pp_array = [(price1, price2) for price1, price2 in\n                    zip(price_float_array[:-1], price_float_array[1:])]\n        # list for python3\n        change_array = list(map(lambda pp: reduce(lambda a, b: round((b - a) / a, 3), pp), pp_array))\n        # list insert\xe6\x8f\x92\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb0\x86\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba0\n        change_array.insert(0, 0)\n        return change_array\n\n    def _init_days(self, start_date, date_array):\n        """"""\n        protect\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\n        :param start_date: \xe5\x88\x9d\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f\n        :param date_array: \xe7\xbb\x99\xe5\xae\x9a\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n        if date_array is None:\n            # \xe7\x94\xb1start_date\xe5\x92\x8cself.__price_array\xe6\x9d\xa5\xe7\xa1\xae\xe5\xae\x9a\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            date_array = [str(start_date + ind) for ind, _ in\n                          enumerate(self.__price_array)]\n        else:\n            # \xe7\xa8\x8d\xe5\x90\x8e\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x96\xe9\x83\xa8\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x86date_array\xef\xbc\x8c\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbd\xac\xe6\x8d\xa2str\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xbb\x84\xe6\x88\x90\xe6\x96\xb0date_array\n            date_array = [str(date) for date in date_array]\n        return date_array\n\n    def _init_stock_dict(self):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8namedtuple\xef\xbc\x8cOrderedDict\xe5\xb0\x86\xe7\xbb\x93\xe6\x9e\x9c\xe5\x90\x88\xe5\xb9\xb6\n        :return:\n        """"""\n        stock_namedtuple = namedtuple(\'stock\',\n                                      (\'date\', \'price\', \'change\'))\n\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\xa5\xe8\xa2\xab\xe8\xb5\x8b\xe5\x80\xbc\xe7\x9a\x84__date_array\xe7\xad\x89\xe8\xbf\x9b\xe8\xa1\x8cOrderedDict\xe7\x9a\x84\xe7\xbb\x84\xe8\xa3\x85\n        stock_dict = OrderedDict(\n            (date, stock_namedtuple(date, price, change))\n            for date, price, change in\n            zip(self.__date_array, self.__price_array,\n                self.__change_array))\n        return stock_dict\n\n    def filter_stock(self, want_up=True, want_calc_sum=False):\n        """"""\n        \xe7\xad\x9b\xe9\x80\x89\xe7\xbb\x93\xe6\x9e\x9c\xe5\xad\x90\xe9\x9b\x86\n        :param want_up: \xe6\x98\xaf\xe5\x90\xa6\xe7\xad\x9b\xe9\x80\x89\xe4\xb8\x8a\xe6\xb6\xa8\n        :param want_calc_sum: \xe6\x98\xaf\xe5\x90\xa6\xe8\xae\xa1\xe7\xae\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\x92\x8c\n        :return:\n        """"""\n        # Python\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x89\xe7\x9b\xae\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\n        filter_func = (lambda p_day: p_day.change > 0) if want_up else (\n            lambda p_day: p_day.change < 0)\n        # \xe4\xbd\xbf\xe7\x94\xa8filter_func\xe5\x81\x9a\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xbd\xe6\x95\xb0\n        want_days = list(filter(filter_func, self.stock_dict.values()))\n\n        if not want_calc_sum:\n            return want_days\n\n        # \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\x92\x8c\n        change_sum = 0.0\n        for day in want_days:\n            change_sum += day.change\n        return change_sum\n\n    """"""\n        \xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84__str__\xef\xbc\x8c__iter__\xef\xbc\x8c __getitem__\xef\xbc\x8c __len__\xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xaf\xa6\xe7\xbb\x86\xe8\xae\xb2\xe8\xa7\xa3\xe4\xbd\x9c\n    """"""\n\n    def __str__(self):\n        return str(self.stock_dict)\n\n    __repr__ = __str__\n\n    def __iter__(self):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe4\xbb\xa3\xe7\x90\x86stock_dict\xe7\x9a\x84\xe8\xb7\x8c\xe5\x80\x92\xef\xbc\x8cyield\xe5\x85\x83\xe7\xb4\xa0\n        :return:\n        """"""\n        for key in self.stock_dict:\n            yield self.stock_dict[key]\n\n    def __getitem__(self, ind):\n        date_key = self.__date_array[ind]\n        return self.stock_dict[date_key]\n\n    def __len__(self):\n        return len(self.stock_dict)\n\n\ndef sample_231():\n    """"""\n    2.3.1 \xe7\xb1\xbb\xe7\x9a\x84\xe5\xb0\x81\xe8\xa3\x85\n    :return:\n    """"""\n    price_array = \'30.14,29.58,26.36,32.56,32.82\'.split(\',\')\n    date_base = 20170118\n    # \xe4\xbb\x8eStockTradeDays\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\x80\xe4\xb8\xaa\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1trade_days\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe8\xb0\x83\xe7\x94\xa8__init__\n    trade_days = StockTradeDays(price_array, date_base)\n    # \xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbf\xa1\xe6\x81\xaf\n    print(\'trade_days:\', trade_days)\n    print(\'trade_days\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba: {}\'.format(len(trade_days)))\n\n    from collections import Iterable\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaftrade_days\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\n    if isinstance(trade_days, Iterable):\n        for day in trade_days:\n            print(day)\n\n    print(trade_days.filter_stock())\n\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae to list\n    price_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).close.tolist()\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x97\xa5\xe6\x9c\x9f to list\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xbc\x94\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\n    date_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).date.tolist()\n    print(\'price_array[:5], date_array[:5]:\', price_array[:5], date_array[:5])\n    trade_days = StockTradeDays(price_array, date_base, date_array)\n    print(\'trade_days\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba: {}\'.format(len(trade_days)))\n    print(\'\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xba\xef\xbc\x9a{}\'.format(trade_days[-1]))\n\n\n""""""\n    2.3.2 \xe7\xbb\xa7\xe6\x89\xbf\xe5\x92\x8c\xe5\xa4\x9a\xe6\x80\x81\n""""""\n\n\nclass TradeStrategyBase(six.with_metaclass(ABCMeta, object)):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb\n    """"""\n\n    @abstractmethod\n    def buy_strategy(self, *args, **kwargs):\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9f\xba\xe7\xb1\xbb\n        pass\n\n    @abstractmethod\n    def sell_strategy(self, *args, **kwargs):\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x9f\xba\xe7\xb1\xbb\n        pass\n\n\nclass TradeStrategy1(TradeStrategyBase):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa51: \xe8\xbf\xbd\xe6\xb6\xa8\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xbd\x93\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe9\x98\x80\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba7%\xe6\x97\xb6\n        \xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb9\xb6\xe6\x8c\x81\xe6\x9c\x89s_keep_stock_threshold\xef\xbc\x8820\xef\xbc\x89\xe5\xa4\xa9\n    """"""\n    s_keep_stock_threshold = 20\n\n    def __init__(self):\n        self.keep_stock_day = 0\n        # 7%\xe4\xb8\x8a\xe6\xb6\xa8\xe5\xb9\x85\xe5\xba\xa6\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe9\x98\x80\xe5\x80\xbc\n        self.__buy_change_threshold = 0.07\n\n    def buy_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day == 0 and \\\n                        trade_day.change > self.__buy_change_threshold:\n\n            # \xe5\xbd\x93\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99self.keep_stock_day == 0 \xe5\xb9\xb6\xe4\xb8\x94\n            # \xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\n            self.keep_stock_day += 1\n        elif self.keep_stock_day > 0:\n            # self.keep_stock_day > 0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe9\x80\x92\xe5\xa2\x9e\n            self.keep_stock_day += 1\n\n    def sell_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day >= \\\n                TradeStrategy1.s_keep_stock_threshold:\n            # \xe5\xbd\x93\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe8\xb6\x85\xe8\xbf\x87\xe9\x98\x80\xe5\x80\xbcs_keep_stock_threshold\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8\n            self.keep_stock_day = 0\n\n    """"""\n        property\xe5\xb1\x9e\xe6\x80\xa7\xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xae\xb2\xe5\x88\xb0\n    """"""\n\n    @property\n    def buy_change_threshold(self):\n        return self.__buy_change_threshold\n\n    @buy_change_threshold.setter\n    def buy_change_threshold(self, buy_change_threshold):\n        if not isinstance(buy_change_threshold, float):\n            """"""\n                \xe4\xb8\x8a\xe6\xb6\xa8\xe9\x98\x80\xe5\x80\xbc\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xbafloat\xe7\xb1\xbb\xe5\x9e\x8b\n            """"""\n            raise TypeError(\'buy_change_threshold must be float!\')\n        # \xe4\xb8\x8a\xe6\xb6\xa8\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\xaa\xe5\x8f\x96\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\x90\x8e\xe4\xb8\xa4\xe4\xbd\x8d\n        self.__buy_change_threshold = round(buy_change_threshold, 2)\n\n\nclass TradeLoopBack(object):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xb3\xbb\xe7\xbb\x9f\n    """"""\n\n    def __init__(self, trade_days, trade_strategy):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe8\x8a\x82\xe5\xb0\x81\xe8\xa3\x85\xe7\x9a\x84StockTradeDays\xe7\xb1\xbb\xe5\x92\x8c\xe6\x9c\xac\xe8\x8a\x82\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe7\xb1\xbb\n        TradeStrategyBase\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\xa4\xe6\x98\x93\xe7\xb3\xbb\xe7\xbb\x9f\n        :param trade_days: StockTradeDays\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\n        :param trade_strategy: TradeStrategyBase\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\n        """"""\n        self.trade_days = trade_days\n        self.trade_strategy = trade_strategy\n        # \xe4\xba\xa4\xe6\x98\x93\xe7\x9b\x88\xe4\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n        self.profit_array = []\n\n    def execute_trade(self):\n        """"""\n        \xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\n        :return:\n        """"""\n        for ind, day in enumerate(self.trade_days):\n            """"""\n                \xe4\xbb\xa5\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\n            """"""\n            if self.trade_strategy.keep_stock_day > 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe5\x8a\xa0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\x88\xe4\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n                self.profit_array.append(day.change)\n\n            # hasattr: \xe7\x94\xa8\xe6\x9d\xa5\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x9e\xe7\x8e\xb0\xe6\x9f\x90\xe4\xb8\xaa\xe6\x96\xb9\xe6\xb3\x95\n            if hasattr(self.trade_strategy, \'buy_strategy\'):\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x89\xa7\xe8\xa1\x8c\n                self.trade_strategy.buy_strategy(ind, day,\n                                                 self.trade_days)\n\n            if hasattr(self.trade_strategy, \'sell_strategy\'):\n                # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x89\xa7\xe8\xa1\x8c\n                self.trade_strategy.sell_strategy(ind, day,\n                                                  self.trade_days)\n\n\ndef sample_232():\n    """"""\n    2.3.2 \xe7\xbb\xa7\xe6\x89\xbf\xe5\x92\x8c\xe5\xa4\x9a\xe6\x80\x81\n    :return:\n    """"""\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae to list\n    price_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).close.tolist()\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x97\xa5\xe6\x9c\x9f to list\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xbc\x94\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\n    date_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).date.tolist()\n    trade_days = StockTradeDays(price_array, 0, date_array)\n\n    trade_loop_back = TradeLoopBack(trade_days, TradeStrategy1())\n    trade_loop_back.execute_trade()\n    print(\'\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa51 \xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe4\xb8\xba\xef\xbc\x9a{}%\'.format(reduce(lambda a, b: a + b, trade_loop_back.profit_array) * 100))\n\n    plt.plot(np.array(trade_loop_back.profit_array).cumsum())\n    plt.show()\n\n\n""""""\n    2.3.3 \xe9\x9d\x99\xe6\x80\x81\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8eproperty\xe5\xb1\x9e\xe6\x80\xa7\n""""""\n\n\ndef sample_233_1():\n    """"""\n    2.3.3_1 property\xe5\xb1\x9e\xe6\x80\xa7\n    :return:\n    """"""\n    trade_strategy1 = TradeStrategy1()\n    # \xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\xe4\xbb\x8e0.07\xe4\xb8\x8a\xe5\x8d\x87\xe5\x88\xb00.1\n    trade_strategy1.buy_change_threshold = 0.1\n\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae to list\n    price_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).close.tolist()\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x97\xa5\xe6\x9c\x9f to list\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xbc\x94\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\n    date_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).date.tolist()\n    trade_days = StockTradeDays(price_array, 0, date_array)\n\n    trade_loop_back = TradeLoopBack(trade_days, trade_strategy1)\n    trade_loop_back.execute_trade()\n    print(\'\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa51 \xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe4\xb8\xba\xef\xbc\x9a{}%\'.format(reduce(lambda a, b: a + b, trade_loop_back.profit_array) * 100))\n    # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96profit_array\n    plt.plot(np.array(trade_loop_back.profit_array).cumsum())\n    plt.show()\n\n\nclass TradeStrategy2(TradeStrategyBase):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa52: \xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xbd\x93\xe8\x82\xa1\xe4\xbb\xb7\xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\n        \xe4\xb8\x94\xe4\xb8\x8b\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xb6\x85\xe8\xbf\x87\xe9\x98\x80\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4s_buy_change_threshold(-10%)\xef\xbc\x8c\n        \xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb9\xb6\xe6\x8c\x81\xe6\x9c\x89s_keep_stock_threshold\xef\xbc\x8810\xef\xbc\x89\xe5\xa4\xa9\n    """"""\n    # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe6\x9c\x89\xe5\xa4\xa9\xe6\x95\xb0\n    s_keep_stock_threshold = 10\n    # \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\n    s_buy_change_threshold = -0.10\n\n    def __init__(self):\n        self.keep_stock_day = 0\n\n    def buy_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day == 0 and trade_ind >= 1:\n            """"""\n                \xe5\xbd\x93\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99self.keep_stock_day == 0 \xe5\xb9\xb6\xe4\xb8\x94\n                trade_ind >= 1, \xe4\xb8\x8d\xe6\x98\xaf\xe4\xba\xa4\xe6\x98\x93\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81yesterday\xe6\x95\xb0\xe6\x8d\xae\n            """"""\n            # trade_day.change < 0 bool\xef\xbc\x9a\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c\n            today_down = trade_day.change < 0\n            # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c\n            yesterday_down = trade_days[trade_ind - 1].change < 0\n            # \xe4\xb8\xa4\xe5\xa4\xa9\xe6\x80\xbb\xe8\xb7\x8c\xe5\xb9\x85\n            down_rate = trade_day.change + trade_days[trade_ind - 1].change\n            if today_down and yesterday_down and down_rate < \\\n                    TradeStrategy2.s_buy_change_threshold:\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x88\x90\xe7\xab\x8b\xef\xbc\x9a\xe8\xbf\x9e\xe8\xb7\x8c\xe4\xb8\xa4\xe5\xa4\xa9\xef\xbc\x8c\xe8\xb7\x8c\xe5\xb9\x85\xe8\xb6\x85\xe8\xbf\x87s_buy_change_threshold\n                self.keep_stock_day += 1\n        elif self.keep_stock_day > 0:\n            # self.keep_stock_day > 0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe9\x80\x92\xe5\xa2\x9e\n            self.keep_stock_day += 1\n\n    def sell_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day >= \\\n                TradeStrategy2.s_keep_stock_threshold:\n            # \xe5\xbd\x93\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe8\xb6\x85\xe8\xbf\x87\xe9\x98\x80\xe5\x80\xbcs_keep_stock_threshold\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8\n            self.keep_stock_day = 0\n\n    """"""\n        \xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xaf\xa6\xe7\xbb\x86\xe8\xae\xb2\xe8\xa7\xa3classmethod\xef\xbc\x8cstaticmethod\n    """"""\n\n    @classmethod\n    def set_keep_stock_threshold(cls, keep_stock_threshold):\n        cls.s_keep_stock_threshold = keep_stock_threshold\n\n    @staticmethod\n    def set_buy_change_threshold(buy_change_threshold):\n        TradeStrategy2.s_buy_change_threshold = buy_change_threshold\n\n\ndef sample_233_2():\n    """"""\n    2.3.3_2 \xe9\x9d\x99\xe6\x80\x81\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95@classmethod\xe4\xb8\x8e@staticmethod\n    :return:\n    """"""\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae to list\n    price_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).close.tolist()\n    # \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x97\xa5\xe6\x9c\x9f to list\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xbc\x94\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\n    date_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).date.tolist()\n    trade_days = StockTradeDays(price_array, 0, date_array)\n\n    trade_strategy2 = TradeStrategy2()\n    trade_loop_back = TradeLoopBack(trade_days, trade_strategy2)\n    trade_loop_back.execute_trade()\n    print(\'\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa52 \xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe4\xb8\xba\xef\xbc\x9a{}%\'.format(reduce(lambda a, b: a + b, trade_loop_back.profit_array) * 100))\n    plt.plot(np.array(trade_loop_back.profit_array).cumsum())\n    plt.show()\n\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84TradeStrategy2\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\n    trade_strategy2 = TradeStrategy2()\n    # \xe4\xbf\xae\xe6\x94\xb9\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa820\xe5\xa4\xa9\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba10\xe5\xa4\xa9\n    TradeStrategy2.set_keep_stock_threshold(20)\n    # \xe4\xbf\xae\xe6\x94\xb9\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\xe4\xb8\xba-0.08\xef\xbc\x88\xe4\xb8\x8b\xe8\xb7\x8c8%\xef\xbc\x89\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba-0.10\xef\xbc\x88\xe4\xb8\x8b\xe8\xb7\x8c10%\xef\xbc\x89\n    TradeStrategy2.set_buy_change_threshold(-0.08)\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe6\x96\xb0\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xaf\xb9\xe8\xb1\xa1trade_loop_back\n    trade_loop_back = TradeLoopBack(trade_days, trade_strategy2)\n    # \xe6\x89\xa7\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\n    trade_loop_back.execute_trade()\n    print(\'\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa52 \xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe4\xb8\xba\xef\xbc\x9a{}%\'.format(reduce(lambda a, b: a + b, trade_loop_back.profit_array) * 100))\n    # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n    plt.plot(np.array(trade_loop_back.profit_array).cumsum())\n    plt.show()\n\n\n""""""\n    2.4 \xe6\x80\xa7\xe8\x83\xbd\xe6\x95\x88\xe7\x8e\x87\n""""""\n\n\ndef sample_241_1():\n    """"""\n    2.4.1_1 itertools\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n    :return:\n    """"""\n    items = [1, 2, 3]\n    for item in itertools.permutations(items):\n        print(item)\n\n    for item in itertools.combinations(items, 2):\n        print(item)\n\n    for item in itertools.combinations_with_replacement(items, 2):\n        print(item)\n\n    ab = [\'a\', \'b\']\n    cd = [\'c\', \'d\']\n    # \xe9\x92\x88\xe5\xaf\xb9ab\xef\xbc\x8ccd\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\x88\x97\xe7\xbb\x84\xe5\x90\x88\n    for item in itertools.product(ab, cd):\n        print(item)\n\n\n# \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae to list\ng_price_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).close.tolist()\n# \xe4\xb8\xa4\xe5\xb9\xb4\xe7\x9a\x84TSLA\xe6\x94\xb6\xe7\x9b\x98\xe6\x97\xa5\xe6\x9c\x9f to list\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xbc\x94\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\ng_date_array = ABuSymbolPd.make_kl_df(\'TSLA\', n_folds=2).date.tolist()\ng_trade_days = StockTradeDays(g_price_array, 0, g_date_array)\n\n\ndef calc(keep_stock_threshold, buy_change_threshold):\n    """"""\n    :param keep_stock_threshold: \xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\n    :param buy_change_threshold: \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\n    :return: \xe7\x9b\x88\xe4\xba\x8f\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0, \xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\n    """"""\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96TradeStrategy2\n    trade_strategy2 = TradeStrategy2()\n    # \xe9\x80\x9a\xe8\xbf\x87\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xbe\xe7\xbd\xae\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\n    TradeStrategy2.set_keep_stock_threshold(keep_stock_threshold)\n    # \xe9\x80\x9a\xe8\xbf\x87\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\n    TradeStrategy2.set_buy_change_threshold(buy_change_threshold)\n\n    # \xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\n    trade_loop_back = TradeLoopBack(g_trade_days, trade_strategy2)\n    trade_loop_back.execute_trade()\n    # \xe8\xae\xa1\xe7\xae\x97\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\x9b\x88\xe4\xba\x8f\xe5\x80\xbcprofit\n    profit = 0.0 if len(trade_loop_back.profit_array) == 0 else \\\n        reduce(lambda a, b: a + b, trade_loop_back.profit_array)\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbcprofit\xe5\x92\x8c\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\n    return profit, keep_stock_threshold, buy_change_threshold\n\n\ndef sample_241_2():\n    """"""\n    2.4.1_2 \xe7\xac\x9b\xe5\x8d\xa1\xe5\xb0\x94\xe7\xa7\xaf\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n    :return:\n    """"""\n    # range\xe9\x9b\x86\xe5\x90\x88\xef\xbc\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe4\xbb\x8e2\xe5\xa4\xa9\xef\xbc\x8d30\xe5\xa4\xa9\xef\xbc\x8c\xe9\x97\xb4\xe9\x9a\x94\xe4\xb8\xa4\xe5\xa4\xa9\n    keep_stock_list = list(range(2, 30, 2))\n    print(\'\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x9a{}\'.format(keep_stock_list))\n    # \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\xe4\xbb\x8e-0.05\xe5\x88\xb0-0.15\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e\xe4\xb8\x8b\xe8\xb7\x8c5%\xe5\x88\xb015%\n    buy_change_list = [buy_change / 100.0 for buy_change in xrange(-5, -16, -1)]\n    print(\'\xe4\xb8\x8b\xe8\xb7\x8c\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x9a{}\'.format(buy_change_list))\n\n    result = []\n    for keep_stock_threshold, buy_change_threshold in itertools.product(\n            keep_stock_list, buy_change_list):\n        # \xe4\xbd\xbf\xe7\x94\xa8calc\xe8\xae\xa1\xe7\xae\x97\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\x9b\x88\xe5\x88\xa9\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8a\xa0\xe5\x85\xa5result\xe5\xba\x8f\xe5\x88\x97\n        result.append(calc(keep_stock_threshold, buy_change_threshold))\n    print(\'\xe7\xac\x9b\xe5\x8d\xa1\xe5\xb0\x94\xe7\xa7\xaf\xe5\x8f\x82\xe6\x95\xb0\xe9\x9b\x86\xe5\x90\x88\xe6\x80\xbb\xe5\x85\xb1\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba\xef\xbc\x9a{}\xe4\xb8\xaa\'.format(len(result)))\n\n    # [::-1]\xe5\xb0\x86\xe6\x95\xb4\xe4\xb8\xaa\xe6\x8e\x92\xe5\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\x8d\xe8\xbd\xac\xef\xbc\x8c\xe5\x8f\x8d\xe8\xbd\xac\xe5\x90\x8e\xe7\x9b\x88\xe4\xba\x8f\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbb\x8e\xe6\x9c\x80\xe9\xab\x98\xe5\x90\x91\xe4\xbd\x8e\xe6\x8e\x92\xe5\xba\x8f\n    # [:10]\xe5\x8f\x96\xe5\x87\xba\xe6\x94\xb6\xe7\x9b\x8a\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84\xe5\x89\x8d10\xe4\xb8\xaa\xe7\xbb\x84\xe5\x90\x88\xe6\x9f\xa5\xe7\x9c\x8b\n    print(sorted(result)[::-1][:10])\n\n\ndef sample_242():\n    """"""\n    2.4.2 \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b vs \xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\n    :return:\n    """"""\n    # range\xe9\x9b\x86\xe5\x90\x88\xef\xbc\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe4\xbb\x8e2\xe5\xa4\xa9\xef\xbc\x8d30\xe5\xa4\xa9\xef\xbc\x8c\xe9\x97\xb4\xe9\x9a\x94\xe4\xb8\xa4\xe5\xa4\xa9\n    keep_stock_list = list(range(2, 30, 2))\n    print(\'\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x9a{}\'.format(keep_stock_list))\n    # \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\xe4\xbb\x8e-0.05\xe5\x88\xb0-0.15\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e\xe4\xb8\x8b\xe8\xb7\x8c5%\xe5\x88\xb015%\n    buy_change_list = [buy_change / 100.0 for buy_change in xrange(-1, -100, -1)]\n\n    print(\'\xe4\xb8\x8b\xe8\xb7\x8c\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x9a{}\'.format(buy_change_list))\n\n    result = []\n\n    # \xe5\x9b\x9e\xe8\xb0\x83\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87add_done_callback\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xe8\xb0\x83\xe7\x94\xa8\n    def when_done(r):\n        # when_done\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe8\xbf\x90\xe8\xa1\x8c\n        result.append(r.result())\n\n    """"""\n        with class_a() as a: \xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xef\xbc\x9a\xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe5\x85\xb7\xe4\xbd\x93\xe8\xae\xb2\xe8\xa7\xa3\n    """"""\n    with ProcessPoolExecutor() as pool:\n        for keep_stock_threshold, buy_change_threshold in \\\n                itertools.product(keep_stock_list, buy_change_list):\n            """"""\n                submit\xe6\x8f\x90\xe4\xba\xa4\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8calc\xe5\x87\xbd\xe6\x95\xb0\xe5\x92\x8c\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9a\xe8\xbf\x87submit\xe6\x8f\x90\xe4\xba\xa4\xe5\x88\xb0\xe7\x8b\xac\xe7\xab\x8b\xe8\xbf\x9b\xe7\xa8\x8b\n                \xe6\x8f\x90\xe4\xba\xa4\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe7\xae\x80\xe5\x8d\x95\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x81\xe9\x97\xad\xe5\x8c\x85\xe7\xad\x89\n                \xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe5\x92\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe5\xbf\x85\xe9\xa1\xbb\xe5\x85\xbc\xe5\xae\xb9pickle\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xef\xbc\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe7\x9a\x84\xe9\x80\x9a\xe4\xbf\xa1\xe9\x9c\x80\xe8\xa6\x81\n            """"""\n            future_result = pool.submit(calc, keep_stock_threshold,\n                                        buy_change_threshold)\n            # \xe5\xbd\x93\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xae\x8c\xe6\x88\x90\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x8d\xb3calc\xe8\xbf\x90\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\x9e\xe8\xb0\x83\xe5\x87\xbd\xe6\x95\xb0\n            future_result.add_done_callback(when_done)\n    print(\'Process sorted(result)[::-1][:10]:\\n\', sorted(result)[::-1][:10])\n\n    result = []\n\n    def when_done(r):\n        result.append(r.result())\n\n    with ThreadPoolExecutor(max_workers=8) as pool:\n        for keep_stock_threshold, buy_change_threshold in \\\n                itertools.product(keep_stock_list, buy_change_list):\n            future_result = pool.submit(calc, keep_stock_threshold,\n                                        buy_change_threshold)\n            future_result.add_done_callback(when_done)\n\n    print(\'Thread sorted(result)[::-1][:10]:\\n\', sorted(result)[::-1][:10])\n\n\ndef sample_243():\n    """"""\n    2.4.3 \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xaf\x91\xe5\xba\x93\xe6\x8f\x90\xe9\xab\x98\xe6\x80\xa7\xe8\x83\xbd\n    :return:\n    """"""\n    # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe6\x94\xbe\xe5\xa4\xa7\xe5\xaf\xbb\xe6\x89\xbe\xe8\x8c\x83\xe5\x9b\xb4 1 - 503 \xe5\xa4\xa9, \xe9\x97\xb4\xe9\x9a\x941\xe5\xa4\xa9\n    keep_stock_list = list(range(1, 504, 1))\n    # \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\xe5\xaf\xbb\xe6\x89\xbe\xe8\x8c\x83\xe5\x9b\xb4 -0.01 - -0.99 \xe5\x85\xb199\xe4\xb8\xaa\n\n    buy_change_list = [buy_change / 100.0 for buy_change in xrange(-1, -100, -1)]\n\n    def do_single_task():\n        task_list = list(itertools.product(keep_stock_list, buy_change_list))\n        print(\'\xe7\xac\x9b\xe5\x8d\xa1\xe5\xb0\x94\xe7\xa7\xaf\xe5\x8f\x82\xe6\x95\xb0\xe9\x9b\x86\xe5\x90\x88\xe6\x80\xbb\xe5\x85\xb1\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba\xef\xbc\x9a{}\xe4\xb8\xaa\'.format(len(task_list)))\n        for keep_stock_threshold, buy_change_threshold in task_list:\n            calc(keep_stock_threshold, buy_change_threshold)\n\n    import time\n\n    start_time = time.time()\n    do_single_task()\n    end_time = time.time()\n\n    print(\'{} cost {}s\'.format(do_single_task.__name__, round(end_time - start_time, 3)))\n\n    import numba as nb\n    do_single_task_nb = nb.jit(do_single_task)\n\n    start_time = time.time()\n    do_single_task_nb()\n    end_time = time.time()\n    print(\'{} cost {}s\'.format(do_single_task_nb.__name__, round(end_time - start_time, 3)))\n\n\ndef sample_25():\n    """"""\n    2.5 \xe4\xbb\xa3\xe7\xa0\x81\xe8\xb0\x83\xe8\xaf\x95\n    \xe4\xb9\xa6\xe4\xb8\xad\xe6\x9c\xac\xe7\xa4\xba\xe4\xbe\x8b\xe9\x92\x88\xe5\xaf\xb9python3\xe4\xb8\x8d\xe9\x80\x82\xe7\x94\xa8\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbapython3\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe9\x99\xa4\xe6\xb3\x95\xe5\xb0\xb1\xe6\x98\xaf\xe5\xb0\x8f\xe6\x95\xb0\n    :return:\n    """"""\n\n    # noinspection PyAugmentAssignment,PyUnusedLocal\n    def gen_buy_change_list():\n        buy_change_list = []\n        # \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\xe4\xbb\x8e-0.05\xe5\x88\xb0-0.15\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e\xe4\xb8\x8b\xe8\xb7\x8c5%\xe5\x88\xb015%\n        for buy_change in xrange(-5, -16, -1):\n            buy_change = buy_change / 100\n            buy_change_list.append(buy_change)\n        return buy_change_list\n\n    # noinspection PyAugmentAssignment,PyRedeclaration\n    def gen_buy_change_list():\n        buy_change_list = []\n        for buy_change in xrange(-5, -16, -1):\n            # 1. \xe5\x8e\x9f\xe5\xa7\x8bbuy_change\n            print(buy_change)\n            buy_change = buy_change / 100\n            # 2. buy_change/100\n            print(buy_change)\n            buy_change_list.append(buy_change)\n        return buy_change_list\n\n    print(gen_buy_change_list())\n\n    # 2. \xe5\xaf\xbc\xe5\x85\xa5future\xe5\xba\x93\xe7\x9a\x84division`from __future__ import division`\n    # from __future__ import division\n\n    # noinspection PyAugmentAssignment\n    def gen_buy_change_list():\n        buy_change_list = []\n        for buy_change in xrange(-5, -16, -1):\n            # 1. \xe9\x99\xa4\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe8\xa2\xab\xe9\x99\xa4\xe6\x95\xb0\xe5\x85\xb6\xe4\xb8\xad\xe4\xb8\x80\xe4\xb8\xaa\xe6\x98\xaffloat\xe7\xb1\xbb\xe5\x9e\x8b\n            buy_change = buy_change / 100.0\n            buy_change_list.append(buy_change)\n        return buy_change_list\n\n    print(gen_buy_change_list())\n\n    logging.basicConfig(level=logging.INFO)\n\n    # noinspection PyAugmentAssignment\n    def gen_buy_change_list():\n        # \xe4\xbc\x9a\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbainfo >= level=logging.INFO\n        logging.info(""gen_buy_change_list begin"")\n\n        buy_change_list = []\n        for buy_change in xrange(-5, -16, -1):\n            # \xe4\xb8\x8d\xe4\xbc\x9a\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8cdebug < level=logging.INFO\n            logging.debug(buy_change)\n            buy_change = buy_change / 100\n            # \xe4\xb8\x8d\xe4\xbc\x9a\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8cdebug < level=logging.INFO\n            logging.debug(buy_change)\n            buy_change_list.append(buy_change)\n        # \xe4\xbc\x9a\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbainfo >= level=logging.INFO\n        logging.info(""gen_buy_change_list end"")\n        return buy_change_list\n\n    _ = gen_buy_change_list()\n\n    import pdb\n\n    # noinspection PyAugmentAssignment\n    def gen_buy_change_list():\n        buy_change_list = []\n        for buy_change in xrange(-5, -16, -1):\n            # \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe5\xbe\xaa\xe7\x8e\xaf\xe6\x89\xa7\xe8\xa1\x8c\xe5\x88\xb0buy_change == -10\xef\xbc\x8c\xe4\xb8\xad\xe6\x96\xad\xe5\xbc\x80\xe5\xa7\x8b\xe8\xb0\x83\xe8\xaf\x95\n            if buy_change == -10:\n                # \xe6\x89\x93\xe6\x96\xad\xe7\x82\xb9\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87set_trace\n                pdb.set_trace()\n\n            buy_change = buy_change / 100\n            buy_change_list.append(buy_change)\n        # \xe6\x95\x85\xe6\x84\x8f\xe5\x90\x91\xe5\xa4\x96\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\n        raise RuntimeError(\'debug for pdb\')\n\n    try:\n        _ = gen_buy_change_list()\n    except Exception:\n        # \xe4\xbb\x8e\xe6\x8d\x95\xe8\x8e\xb7\xe5\xbc\x82\xe5\xb8\xb8\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9\xe5\xbc\x80\xe5\xa7\x8b\xe8\xb0\x83\xe8\xaf\x95\xef\xbc\x8c\xe7\xbb\x8f\xe5\xb8\xb8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xb0\x83\xe8\xaf\x95\xe6\x8a\x80\xe5\xb7\xa7\n        pdb.set_trace()\n\nif __name__ == ""__main__"":\n    sample_211()\n    # sample_212()\n    # sample_221()\n    # sample_222()\n    # sample_223()\n    # sample_224()\n    # sample_231()\n    # sample_232()\n    # sample_233_1()\n    # sample_233_2()\n    # sample_241_1()\n    # sample_241_2()\n    # sample_242()\n    # sample_243()\n    # sample_25()\n'"
python/c3.py,71,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\n\nimport warnings\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n\n\n""""""\n    \xe7\xac\xac\xe4\xb8\x89\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe5\xb7\xa5\xe5\x85\xb7\xe2\x80\x94\xe2\x80\x94NumPy\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_311():\n    """"""\n    3.1.1 \xe5\xb9\xb6\xe8\xa1\x8c\xe5\x8c\x96\xe6\x80\x9d\xe6\x83\xb3\n    :return:\n    """"""\n    # \xe6\xb3\xa8\xe6\x84\x8f * 3\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe8\xa2\xab\xe8\xbf\x90\xe8\xa1\x8c\xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\x8a\n    np_list = np.ones(5) * 3\n    print(\'np_list:\', np_list)\n    # \xe6\x99\xae\xe9\x80\x9a\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xe6\x8a\x8a*3\xe6\x93\x8d\xe4\xbd\x9c\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe6\x95\xb4\xe4\xbd\x93\xe6\x80\xa7\xe6\x93\x8d\xe4\xbd\x9c\n    normal_list = [1, 1, 1, 1, 1] * 3\n    print(\'normal_list:\', normal_list, len(normal_list))\n\n\n# 200\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\nstock_cnt = 200\n# 504\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\nview_days = 504\n# \xe7\x94\x9f\xe6\x88\x90\xe6\x9c\x8d\xe4\xbb\x8e\xe6\xad\xa3\xe6\x80\x81\xe5\x88\x86\xe5\xb8\x83\xef\xbc\x9a\xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x9f\xe6\x9c\x9b\xef\xbc\x9d0\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\xef\xbc\x9d1\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\nstock_day_change = np.random.standard_normal((stock_cnt, view_days))\ntry:\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe6\xb3\xa8\xe8\xa7\x86\xe6\x8e\x89\n    stock_day_change = np.load(\'../gen/stock_day_change.npy\')\nexcept Exception as e:\n    print(\'../gen/stock_day_change.npy load error:{}\'.format(e))\n\n\ndef sample_312():\n    """"""\n    3.1.2 \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n    :return:\n    """"""\n    np_list = np.arange(10000)\n\n    # 100\xe4\xb8\xaa0\n    print(\'np.zeros(100):\\n\', np.zeros(100))\n    # shape\xef\xbc\x9a3\xe8\xa1\x8c2\xe5\x88\x97 \xe5\x85\xa8\xe6\x98\xaf0\n    print(\'np.zeros((3, 2):\\n\', np.zeros((3, 2)))\n\n    # shape\xef\xbc\x9a 3\xe8\xa1\x8c2\xe5\x88\x97 \xe5\x85\xa8\xe6\x98\xaf1\n    print(\'np.ones((3, 2):\\n\', np.ones((3, 2)))\n    # shape\xef\xbc\x9ax=2, y=3, z=3 \xe5\x80\xbc\xe9\x9a\x8f\xe6\x9c\xba\n    print(\'np.empty((2, 3, 3):\\n\', np.empty((2, 3, 3)))\n\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8enp_list\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84shape\xef\xbc\x8c\xe5\x80\xbc\xe5\x85\xa8\xe4\xb8\xba1\n    print(\'np.ones_like(np_list):\\n\', np.ones_like(np_list))\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8enp_list\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84shape\xef\xbc\x8c\xe5\x80\xbc\xe5\x85\xa8\xe4\xb8\xba0\n    print(\'np.zeros_like(np_list):\\n\', np.zeros_like(np_list))\n    # eye\xe5\xbe\x97\xe5\x88\xb0\xe5\xaf\xb9\xe8\xa7\x92\xe7\xba\xbf\xe5\x85\xa8\xe4\xb8\xba1\xe7\x9a\x84\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\n    print(\'np.eye(3):\\n\', np.eye(3))\n\n    # \xe6\x89\x93\xe5\x8d\xb0shape (200, 504) 200\xe8\xa1\x8c504\xe5\x88\x97\n    print(\'stock_day_change.shape:\', stock_day_change.shape)\n    # \xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe7\xac\xac\xe4\xb8\x80\xe6\x94\xaf\xe5\x8f\xaa\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe5\xa4\xb4\xe4\xba\x94\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\x83\x85\xe5\x86\xb5\n    print(\'stock_day_change[0:1, :5]:\\n\', stock_day_change[0:1, :5])\n\n\n""""""\n    3.1.3 \xe7\xb4\xa2\xe5\xbc\x95\xe9\x80\x89\xe5\x8f\x96\xe5\x92\x8c\xe5\x88\x87\xe7\x89\x87\xe9\x80\x89\n""""""\n\n# tmp = a\ntmp = stock_day_change[0:2, 0:5].copy()\n# a = b\nstock_day_change[0:2, 0:5] = stock_day_change[-2:, -5:]\n# b = tmp\nstock_day_change[-2:, -5:] = tmp\n\n\ndef sample_313():\n    """"""\n    3.1.3 \xe7\xb4\xa2\xe5\xbc\x95\xe9\x80\x89\xe5\x8f\x96\xe5\x92\x8c\xe5\x88\x87\xe7\x89\x87\xe9\x80\x89\n    :return:\n    """"""\n    # 0:2\xe7\xac\xac\xe4\xb8\x80\xef\xbc\x8c\xe7\xac\xac\xe4\xba\x8c\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c0:5\xe5\xa4\xb4\xe4\xba\x94\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\x95\xb0\xe6\x8d\xae\n    print(\'stock_day_change[0:2, 0:5]:\\n\', stock_day_change[0:2, 0:5])\n\n    # -2:\xe5\x80\x92\xe6\x95\xb0\xe4\xb8\x80\xef\xbc\x8c\xe7\xac\xac\xe4\xba\x8c\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c-5:\xe6\x9c\x80\xe5\x90\x8e\xe4\xba\x94\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\x95\xb0\xe6\x8d\xae\n    print(\'stock_day_change[-2:, -5:]:\\n\', stock_day_change[-2:, -5:])\n\n    # view result\n    print(\'[0:2, 0:5], [-2:, -5:]:\\n\', stock_day_change[0:2, 0:5], stock_day_change[-2:, -5:])\n\n\ndef sample_314():\n    """"""\n    3.1.4 \xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\x8e\xe8\xa7\x84\xe6\x95\xb4\n    :return:\n    """"""\n    print(\'stock_day_change[0:2, 0:5]:\\n\', stock_day_change[0:2, 0:5])\n    print(\'[0:2, 0:5].astype(int):\\n\', stock_day_change[0:2, 0:5].astype(int))\n    # 2\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\xa4\xe4\xbd\x8d\xe5\xb0\x8f\xe6\x95\xb0\n    print(\'around 2:\\n\', np.around(stock_day_change[0:2, 0:5], 2))\n    # \xe4\xbd\xbf\xe7\x94\xa8copy\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\x8d\xe4\xbf\xae\xe6\x94\xb9\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\n    tmp_test = stock_day_change[0:2, 0:5].copy()\n    # \xe5\xb0\x86\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe6\x94\xb9\xe6\x88\x90nan\n    tmp_test[0][0] = np.nan\n    print(\'tmp_test:\\n\', tmp_test)\n\n\ndef sample_315():\n    """"""\n    3.1.5 \xe9\x80\xbb\xe8\xbe\x91\xe6\x9d\xa1\xe4\xbb\xb6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe7\xad\x9b\xe9\x80\x89\n    :return:\n    """"""\n    # \xe6\x89\xbe\xe5\x87\xba\xe4\xb8\x8a\xe8\xbf\xb0\xe5\x88\x87\xe7\x89\x87\xe5\x86\x85\xe6\xb6\xa8\xe5\xb9\x85\xe8\xb6\x85\xe8\xbf\x870.5\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe6\x97\xb6\xe6\xae\xb5, \xe9\x80\x9a\xe8\xbf\x87\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xa0\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xafboolean\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\n    mask = stock_day_change[0:2, 0:5] > 0.5\n    print(\'mask:\\n\', mask)\n    tmp_test = stock_day_change[0:2, 0:5].copy()\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe8\xbf\xb0\xe7\x9a\x84mask\xe6\x95\xb0\xe7\xbb\x84\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84, \xe5\x8d\xb3\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89mask\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94index\xe5\x80\xbc\xe4\xb8\xbaTrue\xe7\x9a\x84\n    print(\'tmp_test[mask]:\\n\', tmp_test[mask])\n\n    tmp_test[tmp_test > 0.5] = 1\n    print(\'tmp_test:\\n\', tmp_test)\n\n    tmp_test = stock_day_change[-2:, -5:]\n    print(\'tmp_test2:\\n\', tmp_test)\n    print(\'tmp_test[(tmp_test > 1) | (tmp_test < -1)]:\\n\', tmp_test[(tmp_test > 1) | (tmp_test < -1)])\n\n\n# noinspection PyTypeChecker\ndef sample_316():\n    """"""\n    3.1.6 \xe9\x80\x9a\xe7\x94\xa8\xe5\xba\x8f\xe5\x88\x97\xe5\x87\xbd\xe6\x95\xb0\n    :return:\n    """"""\n    # np.all\xe5\x88\xa4\xe6\x96\xad\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe5\x85\x83\xe7\xb4\xa0\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\xa8\xe9\x83\xa8\xe6\x98\xaftrue, \xe5\x8d\xb3\xe5\xaf\xb9bool\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8e\xe6\x93\x8d\xe4\xbd\x9c\n    # \xe6\x9c\xac\xe4\xbe\x8b\xe5\xae\x9e\xe9\x99\x85\xe5\x88\xa4\xe6\x96\xadstock_day_change[0:2, 0:5]\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\xa8\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\n    print(\'np.all(stock_day_change[0:2, 0:5] > 0):\\n\', np.all(stock_day_change[0:2, 0:5] > 0))\n\n    # np.any\xe5\x88\xa4\xe6\x96\xad\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xbatrue, \xe5\x8d\xb3\xe5\xaf\xb9bool\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x88\x96\xe6\x93\x8d\xe4\xbd\x9c\n    # \xe6\x9c\xac\xe4\xbe\x8b\xe5\xae\x9e\xe9\x99\x85\xe5\x88\xa4\xe6\x96\xadstock_day_change[0:2, 0:5]\xe4\xb8\xad\xe6\x98\xaf\xe8\x87\xb3\xe5\xb0\x91\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\n    print(\'np.any(stock_day_change[0:2, 0:5] > 0):\\n\', np.any(stock_day_change[0:2, 0:5] > 0))\n\n    # \xe5\xaf\xb9\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xa4\xe4\xb8\xa4\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8cmaximum\xe7\xbb\x93\xe6\x9e\x9c\xe9\x9b\x86\xe5\x8f\x96\xe5\xa4\xa7,\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xbd\xbf\xe7\x94\xa8minimum\xe4\xb8\xba\xe5\x8f\x96\xe5\xb0\x8f\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe9\x9b\x86\n    print(\'np.maximum(stock_day_change[0:2, 0:5], stock_day_change[-2:, -5:]):\\n\',\n          np.maximum(stock_day_change[0:2, 0:5], stock_day_change[-2:, -5:]))\n\n    change_int = stock_day_change[0:2, 0:5].astype(int)\n    print(\'change_int:\\n\', change_int)\n    # \xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x95\xb0\xe5\x80\xbc\xe5\x80\xbc\xe5\x94\xaf\xe4\xb8\x80\xe4\xb8\x94\xe4\xb8\x8d\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe5\x80\xbc\xe7\xbb\x84\xe6\x88\x90\xe6\x96\xb0\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n    print(\'np.unique(change_int):\\n\', np.unique(change_int))\n\n    # axis\xef\xbc\x9d1\n    print(\'np.diff(stock_day_change[0:2, 0:5]):\\n\', np.diff(stock_day_change[0:2, 0:5]))\n\n    # \xe5\x94\xaf\xe4\xb8\x80\xe5\x8c\xba\xe5\x88\xab axis=0\n    print(\'np.diff(stock_day_change[0:2, 0:5], axis=0):\\n\', np.diff(stock_day_change[0:2, 0:5], axis=0))\n\n    tmp_test = stock_day_change[-2:, -5:]\n    print(\'np.where(tmp_test > 0.5, 1, 0):\\n\', np.where(tmp_test > 0.5, 1, 0))\n    print(\'np.where(tmp_test > 0.5, 1, tmp_test):\\n\', np.where(tmp_test > 0.5, 1, tmp_test))\n\n    # \xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x80\xbc\xe5\xa4\xa7\xe4\xba\x8e0.5\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb0\x8f\xe4\xba\x8e1\xe7\x9a\x84\xe8\xb5\x8b\xe5\x80\xbc\xe4\xb8\xba1\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xb5\x8b\xe5\x80\xbc\xe4\xb8\xba0\n    print(\'np.where(np.logical_and(tmp_test > 0.5, tmp_test < 1), 1, 0):\\n\',\n          np.where(np.logical_and(tmp_test > 0.5, tmp_test < 1), 1, 0))\n\n    # \xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x80\xbc\xe5\xa4\xa7\xe4\xba\x8e0.5\xe6\x88\x96\xe8\x80\x85\xe5\xb0\x8f\xe4\xba\x8e\xef\xbc\x8d0.5\xe7\x9a\x84\xe8\xb5\x8b\xe5\x80\xbc\xe4\xb8\xba1\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xb5\x8b\xe5\x80\xbc\xe4\xb8\xba0\n    print(\'np.where(np.logical_or(tmp_test > 0.5, tmp_test < -0.5), 1, 0):\\n\',\n          np.where(np.logical_or(tmp_test > 0.5, tmp_test < -0.5), 1, 0))\n\n\n""""""\n    3.1.7 \xe6\x95\xb0\xe6\x8d\xae\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n""""""\nstock_day_change = np.load(\'../gen/stock_day_change.npy\')\nnp.save(\'../gen/stock_day_change\', stock_day_change)\n\n""""""\n    3.2 \xe7\xbb\x9f\xe8\xae\xa1\xe6\xa6\x82\xe5\xbf\xb5\xe4\xb8\x8e\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\n""""""\n\nstock_day_change_four = stock_day_change[:4, :4]\n\n\ndef sample_320():\n    """"""\n    3.2.0 \xe7\xbb\x9f\xe8\xae\xa1\xe6\xa6\x82\xe5\xbf\xb5\xe4\xb8\x8e\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\n    :return:\n    """"""\n    print(\'stock_day_change_four:\\n\', stock_day_change_four)\n\n\ndef sample_321():\n    """"""\n    3.2.1 \xe7\xbb\x9f\xe8\xae\xa1\xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\n    :return:\n    """"""\n    print(\'\xe6\x9c\x80\xe5\xa4\xa7\xe6\xb6\xa8\xe5\xb9\x85 {}\'.format(np.max(stock_day_change_four, axis=1)))\n\n    print(\'\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85 {}\'.format(np.min(stock_day_change_four, axis=1)))\n    print(\'\xe6\x8c\xaf\xe5\xb9\x85\xe5\xb9\x85\xe5\xba\xa6 {}\'.format(np.std(stock_day_change_four, axis=1)))\n    print(\'\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb6\xa8\xe8\xb7\x8c {}\'.format(np.mean(stock_day_change_four, axis=1)))\n\n    print(\'\xe6\x9c\x80\xe5\xa4\xa7\xe6\xb6\xa8\xe5\xb9\x85 {}\'.format(np.max(stock_day_change_four, axis=0)))\n\n    print(\'\xe6\x9c\x80\xe5\xa4\xa7\xe6\xb6\xa8\xe5\xb9\x85\xe8\x82\xa1\xe7\xa5\xa8{}\'.format(np.argmax(stock_day_change_four, axis=0)))\n    print(\'\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85\xe8\x82\xa1\xe7\xa5\xa8{}\'.format(np.argmin(stock_day_change_four, axis=0)))\n\n    print(\'\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85 {}\'.format(np.min(stock_day_change_four, axis=0)))\n    print(\'\xe6\x8c\xaf\xe5\xb9\x85\xe5\xb9\x85\xe5\xba\xa6 {}\'.format(np.std(stock_day_change_four, axis=0)))\n    print(\'\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb6\xa8\xe8\xb7\x8c {}\'.format(np.mean(stock_day_change_four, axis=0)))\n\n\ndef sample_322():\n    """"""\n    3.2.2 \xe7\xbb\x9f\xe8\xae\xa1\xe5\x9f\xba\xe7\xa1\x80\xe6\xa6\x82\xe5\xbf\xb5\n    :return:\n    """"""\n    a_investor = np.random.normal(loc=100, scale=50, size=(100, 1))\n    b_investor = np.random.normal(loc=100, scale=20, size=(100, 1))\n\n    # a\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\n    print(\'a\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe6\x9c\x9f\xe6\x9c\x9b{0:.2f}\xe5\x85\x83, \xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae{1:.2f}, \xe6\x96\xb9\xe5\xb7\xae{2:.2f}\'.format(\n        a_investor.mean(), a_investor.std(), a_investor.var()))\n\n    # b\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\n    print(\'b\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe6\x9c\x9f\xe6\x9c\x9b{0:.2f}\xe5\x85\x83, \xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae{1:.2f}, \xe6\x96\xb9\xe5\xb7\xae{2:.2f}\'.format(\n        b_investor.mean(), b_investor.std(), b_investor.var()))\n\n    # a\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe6\x9c\x9f\xe6\x9c\x9b\n    a_mean = a_investor.mean()\n    # a\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe6\xa0\x87\xe6\xb3\xa8\xe5\xb7\xae\n    a_std = a_investor.std()\n    # \xe6\x94\xb6\xe7\x9b\x8a\xe7\xbb\x98\xe5\x88\xb6\xe6\x9b\xb2\xe7\xba\xbf\n    plt.plot(a_investor)\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\x9b\xb4\xe7\xba\xbf \xe4\xb8\x8a\xe7\xba\xbf\n    plt.axhline(a_mean + a_std, color=\'r\')\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\x9b\xb4\xe7\xba\xbf \xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x9f\xe6\x9c\x9b\xe7\xba\xbf\n    plt.axhline(a_mean, color=\'y\')\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\x9b\xb4\xe7\xba\xbf \xe4\xb8\x8b\xe7\xba\xbf\n    plt.axhline(a_mean - a_std, color=\'g\')\n    plt.show()\n\n    b_mean = b_investor.mean()\n    b_std = b_investor.std()\n    # b\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe6\x94\xb6\xe7\x9b\x8a\xe7\xbb\x98\xe5\x88\xb6\xe6\x9b\xb2\xe7\xba\xbf\n    plt.plot(b_investor)\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\x9b\xb4\xe7\xba\xbf \xe4\xb8\x8a\xe7\xba\xbf\n    plt.axhline(b_mean + b_std, color=\'r\')\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\x9b\xb4\xe7\xba\xbf \xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x9f\xe6\x9c\x9b\xe7\xba\xbf\n    plt.axhline(b_mean, color=\'y\')\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\x9b\xb4\xe7\xba\xbf \xe4\xb8\x8b\xe7\xba\xbf\n    plt.axhline(b_mean - b_std, color=\'g\')\n    plt.show()\n\n\ndef sample_331():\n    """"""\n    3.3.1 \xe6\xad\xa3\xe6\x80\x81\xe5\x88\x86\xe5\xb8\x83\xe5\x9f\xba\xe7\xa1\x80\xe6\xa6\x82\xe5\xbf\xb5\n    :return:\n    """"""\n    import scipy.stats as scs\n\n    # \xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x9f\xe6\x9c\x9b\n    stock_mean = stock_day_change[0].mean()\n    # \xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n    stock_std = stock_day_change[0].std()\n    print(\'\xe8\x82\xa1\xe7\xa5\xa80 mean\xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x9f\xe6\x9c\x9b:{:.3f}\'.format(stock_mean))\n    print(\'\xe8\x82\xa1\xe7\xa5\xa80 std\xe6\x8c\xaf\xe5\xb9\x85\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae:{:.3f}\'.format(stock_std))\n\n    # \xe7\xbb\x98\xe5\x88\xb6\xe8\x82\xa1\xe7\xa5\xa80\xe7\x9a\x84\xe7\x9b\xb4\xe6\x96\xb9\xe5\x9b\xbe\n    plt.hist(stock_day_change[0], bins=50, normed=True)\n\n    # linspace\xe4\xbb\x8e\xe8\x82\xa1\xe7\xa5\xa80 \xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8d> \xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\n    fit_linspace = np.linspace(stock_day_change[0].min(),\n                               stock_day_change[0].max())\n\n    # \xe6\xa6\x82\xe7\x8e\x87\xe5\xaf\x86\xe5\xba\xa6\xe5\x87\xbd\xe6\x95\xb0(PDF\xef\xbc\x8cprobability density function)\n    # \xe7\x94\xb1\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8c\xe6\x96\xb9\xe5\xb7\xae\xef\xbc\x8c\xe6\x9d\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8scipy.stats.norm.pdf\xe7\x94\x9f\xe6\x88\x90\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\n    pdf = scs.norm(stock_mean, stock_std).pdf(fit_linspace)\n    print(pdf)\n    # plot x, y\n    plt.plot(fit_linspace, pdf, lw=2, c=\'r\')\n    plt.show()\n\n\ndef sample_332():\n    """"""\n    3.3.2 \xe5\xae\x9e\xe4\xbe\x8b1\xef\xbc\x9a\xe6\xad\xa3\xe6\x80\x81\xe5\x88\x86\xe5\xb8\x83\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\n    :return:\n    """"""\n    # \xe4\xbf\x9d\xe7\x95\x99\xe5\x90\x8e50\xe5\xa4\xa9\xe7\x9a\x84\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x9c\xe4\xb8\xba\xe7\xad\x96\xe7\x95\xa5\xe9\xaa\x8c\xe8\xaf\x81\xe6\x95\xb0\xe6\x8d\xae\n    keep_days = 50\n    # \xe7\xbb\x9f\xe8\xae\xa1\xe5\x89\x8d454, \xe5\x88\x87\xe7\x89\x87\xe5\x88\x87\xe5\x87\xba0-454day\xef\xbc\x8cview_days = 504\n    stock_day_change_test = stock_day_change[:stock_cnt, 0:view_days - keep_days]\n    # \xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe5\x89\x8d454\xe8\xb7\x8c\xe5\xb9\x85\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe4\xb8\x89\xe6\x94\xaf\xef\xbc\x8c\xe6\x80\xbb\xe8\xb7\x8c\xe5\xb9\x85\xe9\x80\x9a\xe8\xbf\x87np.sum\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8cnp.sort\xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe6\x8e\x92\xe5\xba\x8f\n    print(\'np.sort(np.sum(stock_day_change_test, axis=1))[:3]:\', np.sort(np.sum(stock_day_change_test, axis=1))[:3])\n    # \xe4\xbd\xbf\xe7\x94\xa8np.argsort\xe9\x92\x88\xe5\xaf\xb9\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xba\x8f\xe5\x8f\xb7\xef\xbc\x8c\xe5\x8d\xb3\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe5\xba\x8f\xe5\x8f\xb7\n    stock_lower_array = np.argsort(np.sum(stock_day_change_test, axis=1))[:3]\n    # \xe8\xbe\x93\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe5\xba\x8f\xe5\x8f\xb7\n    print(\'stock_lower_array:\', stock_lower_array)\n\n    def show_buy_lower(p_stock_ind):\n        """"""\n        :param p_stock_ind: \xe8\x82\xa1\xe7\xa5\xa8\xe5\xba\x8f\xe5\x8f\xb7,\xe5\x8d\xb3\xe5\x9c\xa8stock_day_change\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n        :return:\n        """"""\n        # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\xa4\xe5\x88\x97\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9b\xbe\xe8\xa1\xa8\n        _, axs = plt.subplots(nrows=1, ncols=2, figsize=(16, 5))\n        # view_days504 - keep_days50 = 454\n        # \xe7\xbb\x98\xe5\x88\xb6\xe5\x89\x8d454\xe5\xa4\xa9\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x9b\xbe\xef\xbc\x8cnp.cumsum()\xef\xbc\x9a\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9e\xe7\xbb\xad\xe6\xb1\x82\xe5\x92\x8c\n        axs[0].plot(np.arange(0, view_days - keep_days),\n                    stock_day_change_test[p_stock_ind].cumsum())\n\n        # [view_days504 - keep_days50 = 454 : view_days504]\n        # \xe4\xbb\x8e\xe7\xac\xac454\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x88\xb0504\xe5\xa4\xa9\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\n        cs_buy = stock_day_change[p_stock_ind][\n                 view_days - keep_days:view_days].cumsum()\n\n        # \xe7\xbb\x98\xe5\x88\xb6\xe4\xbb\x8e\xe7\xac\xac454\xe5\xa4\xa9\xe5\x88\xb0504\xe5\xa4\xa9\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x9b\xbe\n        axs[1].plot(np.arange(view_days - keep_days, view_days), cs_buy)\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe4\xbb\x8e\xe7\xac\xac454\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x88\xb0\xe7\xac\xac504\xe5\xa4\xa9\xe8\xae\xa1\xe7\xae\x97\xe7\x9b\x88\xe4\xba\x8f\xe7\x9a\x84\xe7\x9b\x88\xe4\xba\x8f\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc\n        return cs_buy[-1]\n\n    # \xe6\x9c\x80\xe5\x90\x8e\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94\xe4\xbe\x8b\n    profit = 0\n    # \xe8\xb7\x8c\xe5\xb9\x85\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe4\xb8\x89\xe6\x94\xaf\xe9\x81\x8d\xe5\x8e\x86\xe5\xba\x8f\xe5\x8f\xb7\n    for stock_ind in stock_lower_array:\n        # profit\xe5\x8d\xb3\xe4\xb8\x89\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\x8e\xe7\xac\xac454\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe7\x9b\xb4\xe5\x88\xb0\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94\xe4\xbe\x8b\n        profit += show_buy_lower(stock_ind)\n    plt.show()\n\n    # str.format \xe6\x94\xaf\xe6\x8c\x81{:.2f}\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\xa4\xe4\xbd\x8d\xe5\xb0\x8f\xe6\x95\xb0\n    print(\'\xe4\xb9\xb0\xe5\x85\xa5\xe7\xac\xac {} \xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe4\xbb\x8e\xe7\xac\xac454\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xbc\x80\xe5\xa7\x8b\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x88\xe4\xba\x8f:{:.2f}%\'.format(\n        stock_lower_array, profit))\n\n\ndef sample_342():\n    """"""\n    3.4.2 \xe5\xae\x9e\xe4\xbe\x8b2\xef\xbc\x9a\xe5\xa6\x82\xe4\xbd\x95\xe5\x9c\xa8\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbc\x98\xe5\x8a\xbf\n    :return:\n    """"""\n\n    # \xe8\xae\xbe\xe7\xbd\xae100\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\n    gamblers = 100\n\n    def casino(win_rate, win_once=1, loss_once=1, commission=0.01):\n        """"""\n            \xe8\xb5\x8c\xe5\x9c\xba\xef\xbc\x9a\xe7\xae\x80\xe5\x8d\x95\xe8\xae\xbe\xe5\xae\x9a\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\xe4\xb8\x80\xe5\x85\xb1\xe6\x9c\x891000000\xe4\xb8\x80\xe5\x85\xb1\xe6\x83\xb3\xe5\x9c\xa8\xe8\xb5\x8c\xe5\x9c\xba\xe7\x8e\xa910000000\xe6\xac\xa1\xef\xbc\x8c\n            \xe4\xbd\x86\xe6\x98\xaf\xe4\xbd\xa0\xe8\xa6\x81\xe6\x98\xaf\xe6\xb2\xa1\xe9\x92\xb1\xe4\xba\x86\xe4\xb9\x9f\xe5\x88\xab\xe6\x83\xb3\xe7\x8e\xa9\xe4\xba\x86\n            win_rate:   \xe8\xbe\x93\xe8\xb5\xa2\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\n            win_once:   \xe6\xaf\x8f\xe6\xac\xa1\xe8\xb5\xa2\xe7\x9a\x84\xe9\x92\xb1\xe6\x95\xb0\n            loss_once:  \xe6\xaf\x8f\xe6\xac\xa1\xe8\xbe\x93\xe7\x9a\x84\xe9\x92\xb1\xe6\x95\xb0\n            commission: \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xbf\x99\xe9\x87\x8c\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x860.01 1%\n        """"""\n        my_money = 1000000\n        play_cnt = 10000000\n        commission = commission\n        for _ in np.arange(0, play_cnt):\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xbc\xaf\xe5\x8a\xaa\xe5\x88\xa9\xe5\x88\x86\xe5\xb8\x83\xe6\xa0\xb9\xe6\x8d\xaewin_rate\xe6\x9d\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe8\xb5\xa2\n            w = np.random.binomial(1, win_rate)\n            if w:\n                # \xe8\xb5\xa2\xe4\xba\x86 +win_once\n                my_money += win_once\n            else:\n                # \xe8\xbe\x93\xe4\xba\x86 -loss_once\n                my_money -= loss_once\n            # \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n            my_money -= commission\n            if my_money <= 0:\n                # \xe6\xb2\xa1\xe9\x92\xb1\xe5\xb0\xb1\xe5\x88\xab\xe7\x8e\xa9\xe4\xba\x86\xef\xbc\x8c\xe4\xb8\x8d\xe8\xb5\x8a\xe8\xb4\xa6\n                break\n        return my_money\n\n    """"""\n        \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89numba\xe4\xbd\xbf\xe7\x94\xa8numba\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8a\xa0\xe9\x80\x9f, \xe8\xbf\x99\xe4\xb8\xaa\xe5\x8a\xa0\xe9\x80\x9f\xe6\x95\x88\xe6\x9e\x9c\xe9\x9d\x9e\xe5\xb8\xb8\xe6\x98\x8e\xe6\x98\xbe\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8numba\xe9\x9d\x9e\xe5\xb8\xb8\xe9\x9d\x9e\xe5\xb8\xb8\xe9\x9d\x9e\xe5\xb8\xb8\xe6\x85\xa2\n    """"""\n    import numba as nb\n    casino = nb.jit(casino)\n\n    print(\'heaven_moneys....\')\n    # 100\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\xe8\xbf\x9b\xe5\x9c\xba\xe5\xa4\xa9\xe5\xa0\x82\xe8\xb5\x8c\xe5\x9c\xba\xef\xbc\x8c\xe8\x83\x9c\xe7\x8e\x870.5\xef\xbc\x8c\xe8\xb5\x94\xe7\x8e\x871\xef\xbc\x8c\xe8\xbf\x98\xe6\xb2\xa1\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    heaven_moneys = [casino(0.5, commission=0) for _ in\n                     np.arange(0, gamblers)]\n\n    print(\'cheat_moneys....\')\n    # 100\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\xe8\xbf\x9b\xe5\x9c\xba\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe8\x83\x9c\xe7\x8e\x870.4\xef\xbc\x8c\xe8\xb5\x94\xe7\x8e\x871\xef\xbc\x8c\xe6\xb2\xa1\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    cheat_moneys = [casino(0.4, commission=0) for _ in\n                    np.arange(0, gamblers)]\n\n    print(\'commission_moneys....\')\n    # 100\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\xe8\xbf\x9b\xe5\x9c\xba\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe8\x83\x9c\xe7\x8e\x870.5\xef\xbc\x8c\xe8\xb5\x94\xe7\x8e\x871\xef\xbc\x8c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb90.01\n    commission_moneys = [casino(0.5, commission=0.01) for _ in\n                         np.arange(0, gamblers)]\n\n    print(\'casino(0.5, commission=0.01, win_once=1.02, loss_once=0.98.....\')\n    # 100\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\xe8\xbf\x9b\xe5\x9c\xba\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe8\x83\x9c\xe7\x8e\x870.5\xef\xbc\x8c\xe8\xb5\x94\xe7\x8e\x871.04\xef\xbc\x8c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb90.01\n    f1_moneys = [casino(0.5, commission=0.01, win_once=1.02, loss_once=0.98)\n                 for _ in np.arange(0, gamblers)]\n\n    print(\'casino(0.45, commission=0.01, win_once=1.02, loss_once=0.98.....\')\n    # 100\xe4\xb8\xaa\xe8\xb5\x8c\xe5\xbe\x92\xe8\xbf\x9b\xe5\x9c\xba\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe8\x83\x9c\xe7\x8e\x870.45\xef\xbc\x8c\xe8\xb5\x94\xe7\x8e\x871.04\xef\xbc\x8c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb90.01\n    f2_moneys = [casino(0.45, commission=0.01, win_once=1.02, loss_once=0.98)\n                 for _ in np.arange(0, gamblers)]\n\n    _ = plt.hist(heaven_moneys, bins=30)\n    plt.show()\n    _ = plt.hist(cheat_moneys, bins=30)\n    plt.show()\n    _ = plt.hist(commission_moneys, bins=30)\n    plt.show()\n    _ = plt.hist(f1_moneys, bins=30)\n    plt.show()\n    _ = plt.hist(f2_moneys, bins=30)\n    plt.show()\n\n\nif __name__ == ""__main__"":\n    sample_311()\n    # sample_312()\n    # sample_313()\n    # sample_314()\n    # sample_315()\n    # sample_316()\n    # sample_320()\n    # sample_321()\n    # sample_322()\n    # sample_331()\n    # sample_332()\n    # sample_342()\n'"
python/c4.py,14,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport warnings\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import ABuSymbolPd\nfrom abupy import xrange, pd_resample\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\nstock_day_change = np.load(\'../gen/stock_day_change.npy\')\n\n\n""""""\n    \xe7\xac\xac\xe5\x9b\x9b\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe5\xb7\xa5\xe5\x85\xb7\xe2\x80\x94\xe2\x80\x94pandas\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_411():\n    """"""\n    4.1.1 DataFrame\xe6\x9e\x84\xe5\xbb\xba\xe5\x8f\x8a\xe6\x96\xb9\xe6\xb3\x95\n    :return:\n    """"""\n    print(\'stock_day_change.shape:\', stock_day_change.shape)\n\n    # \xe4\xb8\x8b\xe9\x9d\xa2\xe4\xb8\x89\xe7\xa7\x8d\xe5\x86\x99\xe6\xb3\x95\xe8\xbe\x93\xe5\x87\xba\xe5\xae\x8c\xe5\x85\xa8\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe5\xa6\x82\xe8\xa1\xa84-1\xe6\x89\x80\xe7\xa4\xba\n    print(\'head():\\n\', pd.DataFrame(stock_day_change).head())\n    print(\'head(5):\\n\', pd.DataFrame(stock_day_change).head(5))\n    print(\'[:5]:\\n\', pd.DataFrame(stock_day_change)[:5])\n\n\ndef sample_412():\n    """"""\n    4.1.2 \xe7\xb4\xa2\xe5\xbc\x95\xe8\xa1\x8c\xe5\x88\x97\xe5\xba\x8f\xe5\x88\x97\n    :return:\n    """"""\n    # \xe8\x82\xa1\xe7\xa5\xa80 -> \xe8\x82\xa1\xe7\xa5\xa8stock_day_change.shape[0]\n    stock_symbols = [\'\xe8\x82\xa1\xe7\xa5\xa8 \' + str(x) for x in\n                     xrange(stock_day_change.shape[0])]\n    # \xe9\x80\x9a\xe8\xbf\x87\xe6\x9e\x84\xe9\x80\xa0\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xae\xbe\xe7\xbd\xaeindex\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8chead(2)\xe5\xb0\xb1\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe8\xa1\x8c\xef\xbc\x8c\xe8\xa1\xa84-2\xe6\x89\x80\xe7\xa4\xba\n    print(\'pd.DataFrame(stock_day_change, index=stock_symbols).head(2):\\n\',\n          pd.DataFrame(stock_day_change, index=stock_symbols).head(2))\n    # \xe4\xbb\x8e2017-1-1\xe5\x90\x91\xe4\xb8\x8a\xe6\x97\xb6\xe9\x97\xb4\xe9\x80\x92\xe8\xbf\x9b\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8dfreq=\'1d\'\xe5\x8d\xb31\xe5\xa4\xa9\n    days = pd.date_range(\'2017-1-1\',\n                         periods=stock_day_change.shape[1], freq=\'1d\')\n    # \xe8\x82\xa1\xe7\xa5\xa80 -> \xe8\x82\xa1\xe7\xa5\xa8stock_day_change.shape[0]\n    stock_symbols = [\'\xe8\x82\xa1\xe7\xa5\xa8 \' + str(x) for x in\n                     xrange(stock_day_change.shape[0])]\n    # \xe5\x88\x86\xe5\x88\xab\xe8\xae\xbe\xe7\xbd\xaeindex\xe5\x92\x8ccolumns\n    df = pd.DataFrame(stock_day_change, index=stock_symbols, columns=days)\n    # \xe8\xa1\xa84-3\xe6\x89\x80\xe7\xa4\xba\n    print(\'df.head(2):\\n\', df.head(2))\n\n\ndef sample_413():\n    """"""\n    4.1.3 \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :return:\n    """"""\n    days = pd.date_range(\'2017-1-1\',\n                         periods=stock_day_change.shape[1], freq=\'1d\')\n    stock_symbols = [\'\xe8\x82\xa1\xe7\xa5\xa8 \' + str(x) for x in\n                     xrange(stock_day_change.shape[0])]\n    df = pd.DataFrame(stock_day_change, index=stock_symbols, columns=days)\n\n    # df\xe5\x81\x9a\xe4\xb8\xaa\xe8\xbd\xac\xe7\xbd\xae\n    df = df.T\n    # \xe8\xa1\xa84-4\xe6\x89\x80\xe7\xa4\xba\n    print(\'df.head():\\n\', df.head())\n\n    df_20 = pd_resample(df, \'21D\', how=\'mean\')\n    # \xe8\xa1\xa84-5\xe6\x89\x80\xe7\xa4\xba\n    print(\'df_20.head():\\n\', df_20.head())\n\n\ndef sample_414():\n    """"""\n    4.1.4 Series\xe6\x9e\x84\xe5\xbb\xba\xe5\x8f\x8a\xe6\x96\xb9\xe6\xb3\x95\n    :return\n    """"""\n    days = pd.date_range(\'2017-1-1\',\n                         periods=stock_day_change.shape[1], freq=\'1d\')\n    stock_symbols = [\'\xe8\x82\xa1\xe7\xa5\xa8 \' + str(x) for x in\n                     xrange(stock_day_change.shape[0])]\n    df = pd.DataFrame(stock_day_change, index=stock_symbols, columns=days)\n    df = df.T\n\n    print(\'df.head():\\n\', df.head())\n    df_stock0 = df[\'\xe8\x82\xa1\xe7\xa5\xa8 0\']\n    # \xe6\x89\x93\xe5\x8d\xb0df_stock0\xe7\xb1\xbb\xe5\x9e\x8b\n    print(\'type(df_stock0):\', type(df_stock0))\n    # \xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xbaSeries\xe7\x9a\x84\xe5\x89\x8d5\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae, \xe4\xb8\x8eDataFrame\xe4\xb8\x80\xe8\x87\xb4\n    print(\'df_stock0.head():\\n\', df_stock0.head())\n\n    df_stock0.cumsum().plot()\n    plt.show()\n\n\ndef sample_415():\n    """"""\n    4.1.5 \xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe6\x95\xb0\xe6\x8d\xae\n    :return\n    """"""\n    days = pd.date_range(\'2017-1-1\',\n                         periods=stock_day_change.shape[1], freq=\'1d\')\n    stock_symbols = [\'\xe8\x82\xa1\xe7\xa5\xa8 \' + str(x) for x in\n                     xrange(stock_day_change.shape[0])]\n    df = pd.DataFrame(stock_day_change, index=stock_symbols, columns=days)\n    df = df.T\n    df_stock0 = df[\'\xe8\x82\xa1\xe7\xa5\xa8 0\']\n\n    # \xe4\xbb\xa55\xe5\xa4\xa9\xe4\xb8\xba\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x88\xe5\x91\xa8k\xef\xbc\x89\n    df_stock0_5 = pd_resample(df_stock0.cumsum(), \'5D\', how=\'ohlc\')\n    # \xe4\xbb\xa521\xe5\xa4\xa9\xe4\xb8\xba\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x88\xe6\x9c\x88k\xef\xbc\x89\xef\xbc\x8c\n    # noinspection PyUnusedLocal\n    df_stock0_20 = pd_resample(df_stock0.cumsum(), \'21D\', how=\'ohlc\')\n    # \xe6\x89\x93\xe5\x8d\xb05\xe5\xa4\xa9\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8b\xe8\xbe\x93\xe5\x87\xba2017-01-01, 2017-01-06, 2017-01-11, \xe8\xa1\xa84-6\xe6\x89\x80\xe7\xa4\xba\n    print(\'df_stock0_5.head():\\n\', df_stock0_5.head())\n\n    from abupy import ABuMarketDrawing\n    # \xe5\x9b\xbe4-2\xe6\x89\x80\xe7\xa4\xba\n    ABuMarketDrawing.plot_candle_stick(df_stock0_5.index,\n                                       df_stock0_5[\'open\'].values,\n                                       df_stock0_5[\'high\'].values,\n                                       df_stock0_5[\'low\'].values,\n                                       df_stock0_5[\'close\'].values,\n                                       np.random.random(len(df_stock0_5)),\n                                       None, \'stock\', day_sum=False,\n                                       html_bk=False, save=False)\n\n    print(\'type(df_stock0_5.open.values):\', type(df_stock0_5[\'open\'].values))\n    print(\'df_stock0_5.open.index:\\n\', df_stock0_5[\'open\'].index)\n    print(\'df_stock0_5.columns:\\n\', df_stock0_5.columns)\n\n\n""""""\n    4.2 \xe5\x9f\xba\xe6\x9c\xac\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe6\x9e\x90\xe7\xa4\xba\xe4\xbe\x8b\n""""""\n# n_folds=2\xe4\xb8\xa4\xe5\xb9\xb4\ntsla_df = ABuSymbolPd.make_kl_df(\'usTSLA\', n_folds=2)\n\n\ndef sample_420():\n    # \xe8\xa1\xa84-7\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df.tail():\\n\', tsla_df.tail())\n\n\ndef sample_421():\n    """"""\n    4.2.1 \xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb4\xe4\xbd\x93\xe5\x88\x86\xe6\x9e\x90\n    :return:\n    """"""\n    print(\'tsla_df.info():\\n\', tsla_df.info())\n    print(\'tsla_df.describe():\\n\', tsla_df.describe())\n\n    tsla_df[[\'close\', \'volume\']].plot(subplots=True, style=[\'r\', \'g\'], grid=True)\n    plt.show()\n\n\ndef sample_422():\n    """"""\n    4.2.2 \xe7\xb4\xa2\xe5\xbc\x95\xe9\x80\x89\xe5\x8f\x96\xe5\x92\x8c\xe5\x88\x87\xe7\x89\x87\xe9\x80\x89\xe6\x8b\xa9\n    :return:\n    """"""\n\n    # 2014-07-23\xe8\x87\xb32014-07-31 \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n    print(\'tsla_df.loc[x:x, x]\\n\', tsla_df.loc[\'2014-07-23\':\'2014-07-31\', \'open\'])\n\n    # 2014-07-23\xe8\x87\xb32014-07-31 \xe6\x89\x80\xe6\x9c\x89\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xa1\xa84-9\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df.loc[x:x]\\n\', tsla_df.loc[\'2014-07-23\':\'2014-07-31\'])\n\n    # [1:5]\xef\xbc\x9a(1\xef\xbc\x8c2\xef\xbc\x8c3\xef\xbc\x8c4)\xef\xbc\x8c[2:6]: (2, 3, 4, 5)\n    # \xe8\xa1\xa84-10\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df.iloc[1:5, 2:6]:\\n\', tsla_df.iloc[1:5, 2:6])\n\n    # \xe5\x88\x87\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe8\xa1\x8c[2:6]: (2, 3, 4, 5)\xe5\x88\x97\n    print(\'tsla_df.iloc[:, 2:6]:\\n\', tsla_df.iloc[:, 2:6])\n    # \xe9\x80\x89\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\x88\x97[35:37]:(35, 36)\xe8\xa1\x8c\xef\xbc\x8c\xe8\xa1\xa84-11\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df.iloc[35:37]:\\n\', tsla_df.iloc[35:37])\n\n    # \xe6\x8c\x87\xe5\xae\x9a\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\n    print(\'tsla_df.close[0:3]:\\n\', tsla_df.close[0:3])\n    # \xe9\x80\x9a\xe8\xbf\x87\xe7\xbb\x84\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8\xe9\x80\x89\xe6\x8b\xa9\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x88\x97\xef\xbc\x8c\xe8\xa1\xa84-12\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df[][0:3]:\\n\', tsla_df[[\'close\', \'high\', \'low\']][0:3])\n\n\ndef sample_423():\n    """"""\n    4.2.3 \xe9\x80\xbb\xe8\xbe\x91\xe6\x9d\xa1\xe4\xbb\xb6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe7\xad\x9b\xe9\x80\x89\n    :return:\n    """"""\n    # abs\xe4\xb8\xba\xe5\x8f\x96\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe7\x9a\x84\xe6\x84\x8f\xe6\x80\x9d\xef\xbc\x8c\xe4\xb8\x8d\xe6\x98\xaf\xe9\x98\xb2\xe6\x8a\xb1\xe6\xad\xbb\xef\xbc\x8c\xe8\xa1\xa84-13\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df[np.abs(tsla_df.p_change) > 8]:\\n\', tsla_df[np.abs(tsla_df.p_change) > 8])\n    print(\'tsla_df[(np.abs(tsla_df.p_change) > 8) & (tsla_df.volume > 2.5 * tsla_df.volume.mean())]:\\n\',\n          tsla_df[(np.abs(tsla_df.p_change) > 8) & (tsla_df.volume > 2.5 * tsla_df.volume.mean())])\n\n\ndef sample_424_1():\n    """"""\n    4.2.4_1 \xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\x8e\xe8\xa7\x84\xe6\x95\xb4\n    :return:\n    """"""\n    # \xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe6\x8e\x92\xe5\xba\x8f\n    print(\'tsla_df.sort_index(by=p_change)[:5]:\\n\', tsla_df.sort_index(by=\'p_change\')[:5])\n    print(\'tsla_df.sort_index(by=p_change, ascending=False)[:5]:\\n\',\n          tsla_df.sort_index(by=\'p_change\', ascending=False)[:5])\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe8\xa1\x8c\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe5\xad\x98\xe5\x9c\xa8na\xe5\xb0\xb1\xe5\x88\xa0\xe9\x99\xa4\xe8\xbf\x99\xe8\xa1\x8c\n    tsla_df.dropna()\n    # \xe9\x80\x9a\xe8\xbf\x87how\xe6\x8e\xa7\xe5\x88\xb6 \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe8\xa1\x8c\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe5\x85\xa8\xe9\x83\xa8\xe9\x83\xbd\xe6\x98\xafna\xe5\xb0\xb1\xe5\x88\xa0\xe9\x99\xa4\xe8\xbf\x99\xe8\xa1\x8c\n    tsla_df.dropna(how=\'all\')\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x8c\x87\xe5\xae\x9a\xe5\x80\xbc\xe5\xa1\xab\xe5\x85\x85na\xef\xbc\x8c inplace\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xb0\xb1\xe5\x9c\xb0\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe8\xbf\x94\xe5\x9b\x9e\xe6\x96\xb0\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe5\x9c\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8a\xe4\xbf\xae\xe6\x94\xb9\n    tsla_df.fillna(tsla_df.mean(), inplace=True)\n\n\ndef sample_424_2():\n    """"""\n    4.2.4_1 \xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe5\xa4\x84\xe7\x90\x86 pct_change\n    :return:\n    """"""\n    print(\'tsla_df.close[:3]:\\n\', tsla_df.close[:3])\n    print(\'tsla_df.close.pct_change()[:3]:\\n\', tsla_df.close.pct_change()[:3])\n    print(\'(223.54 - 222.49) / 222.49, (223.57 - 223.54) / 223.54:\', (223.54 - 222.49) / 222.49,\n          (223.57 - 223.54) / 223.54)\n\n    # pct_change\xe5\xaf\xb9\xe5\xba\x8f\xe5\x88\x97\xe4\xbb\x8e\xe7\xac\xac\xe4\xba\x8c\xe9\xa1\xb9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x90\x91\xe5\x89\x8d\xe5\x81\x9a\xe5\x87\x8f\xe6\xb3\x95\xe5\x9c\xa8\xe9\x99\xa4\xe4\xbb\xa5\xe5\x89\x8d\xe4\xb8\x80\xe9\xa1\xb9\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe7\x9a\x84\xe9\x92\x88\xe5\xaf\xb9close\xe5\x81\x9apct_change\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\xb1\xe6\x98\xaf\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\n    change_ratio = tsla_df.close.pct_change()\n    print(\'change_ratio.tail():\\n\', change_ratio.tail())\n\n    # \xe5\xb0\x86change_ratio\xe8\xbd\xac\xe5\x8f\x98\xe6\x88\x90\xe4\xb8\x8etsla_df.p_change\xe5\xad\x97\xe6\xae\xb5\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe7\x99\xbe\xe5\x88\x86\xe7\x99\xbe\xef\xbc\x8c\xe5\x90\x8c\xe6\xa0\xb7\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\xa4\xe4\xbd\x8d\xe5\xb0\x8f\xe6\x95\xb0\n    print(\'np.round(change_ratio[-5:] * 100, 2):\\n\', np.round(change_ratio[-5:] * 100, 2))\n\n    fmt = lambda x: \'%.2f\' % x\n    print(\'tsla_df.atr21.map(fmt).tail():\\n\', tsla_df.atr21.map(fmt).tail())\n\n\ndef sample_425():\n    """"""\n    4.2.5 \xe6\x95\xb0\xe6\x8d\xae\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n    :return:\n    """"""\n    tsla_df.to_csv(\'../gen/tsla_df.csv\', columns=tsla_df.columns, index=True)\n    tsla_df_load = pd.read_csv(\'../gen/tsla_df.csv\', parse_dates=True, index_col=0)\n    print(\'tsla_df_load.head():\\n\', tsla_df_load.head())\n\n\n""""""\n    4.3 \xe5\xae\x9e\xe4\xbe\x8b1\xef\xbc\x9a\xe5\xaf\xbb\xe6\x89\xbe\xe8\x82\xa1\xe7\xa5\xa8\xe5\xbc\x82\xe5\x8a\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe9\x98\x80\xe5\x80\xbc\n""""""\n\n\ndef sample_431():\n    """"""\n    4.3.1 \xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe7\xa6\xbb\xe6\x95\xa3\xe5\x8c\x96\n    :return:\n    """"""\n    tsla_df.p_change.hist(bins=80)\n    plt.show()\n\n    cats = pd.qcut(np.abs(tsla_df.p_change), 10)\n    print(\'cats.value_counts():\\n\', cats.value_counts())\n\n    # \xe5\xb0\x86\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\x95\xb0\xe6\x8d\xae\xe6\x89\x8b\xe5\xb7\xa5\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\xe5\x88\xb0\xef\xbc\x8d7\xef\xbc\x8c\xef\xbc\x8d5\xef\xbc\x8c\xef\xbc\x8d3\xef\xbc\x8c0\xef\xbc\x8c 3\xef\xbc\x8c 5\xef\xbc\x8c 7\xef\xbc\x8c\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\n    bins = [-np.inf, -7.0, -5, -3, 0, 3, 5, 7, np.inf]\n    cats = pd.cut(tsla_df.p_change, bins)\n    print(\'bins cats.value_counts():\\n\', cats.value_counts())\n\n    # cr_dummies\xe4\xb8\xba\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0\xe5\x89\x8d\xe7\xbc\x80\n    change_ration_dummies = pd.get_dummies(cats, prefix=\'cr_dummies\')\n    print(\'change_ration_dummies.head():\\n\', change_ration_dummies.head())\n\n\ndef sample_432():\n    """"""\n    4.3.2 concat, append, merge\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n    :return:\n    """"""\n    # \xe5\xb0\x86\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\x95\xb0\xe6\x8d\xae\xe6\x89\x8b\xe5\xb7\xa5\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\xe5\x88\xb0\xef\xbc\x8d7\xef\xbc\x8c\xef\xbc\x8d5\xef\xbc\x8c\xef\xbc\x8d3\xef\xbc\x8c0\xef\xbc\x8c 3\xef\xbc\x8c 5\xef\xbc\x8c 7\xef\xbc\x8c\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\n    bins = [-np.inf, -7.0, -5, -3, 0, 3, 5, 7, np.inf]\n    cats = pd.cut(tsla_df.p_change, bins)\n    change_ration_dummies = pd.get_dummies(cats, prefix=\'cr_dummies\')\n\n    # noinspection PyUnresolvedReferences\n    print(\'pd.concat([tsla_df, change_ration_dummies], axis=1).tail():\\n \',\n          pd.concat([tsla_df, change_ration_dummies], axis=1).tail())\n\n    # pd.concat\xe7\x9a\x84\xe8\xbf\x9e\xe6\x8e\xa5axis\xef\xbc\x9d0\xef\xbc\x9a\xe7\xba\xb5\xe5\x90\x91\xe8\xbf\x9e\xe6\x8e\xa5atr>14\xe7\x9a\x84df\xe5\x92\x8cp_change > 10\xe7\x9a\x84df\n    pd.concat([tsla_df[tsla_df.p_change > 10],\n               tsla_df[tsla_df.atr14 > 16]], axis=0)\n\n    # \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8DataFrame\xe5\xaf\xb9\xe8\xb1\xa1append\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\x8e\xe4\xb8\x8a\xe9\x9d\xa2pd.concat\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\x80\xe8\x87\xb4, \xe8\xa1\xa84-20\xe6\x89\x80\xe7\xa4\xba\n    print(\'tsla_df[tsla_df.p_change > 10].append(tsla_df[tsla_df.atr14 > 16]):\\n\',\n          tsla_df[tsla_df.p_change > 10].append(tsla_df[tsla_df.atr14 > 16]))\n\n\n""""""\n    4.4 \xe5\xae\x9e\xe4\xbe\x8b2 \xef\xbc\x9a\xe6\x98\x9f\xe6\x9c\x9f\xe5\x87\xa0\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe2\x80\x98\xe5\xa5\xbd\xe6\x97\xa5\xe5\xad\x90\xe2\x80\x99\n""""""\n\n\ndef sample_441():\n    """"""\n    4.4.1 \xe6\x9e\x84\xe5\xbb\xba\xe4\xba\xa4\xe5\x8f\x89\xe8\xa1\xa8\n    :return:\n    """"""\n    # noinspection PyTypeChecker\n    tsla_df[\'positive\'] = np.where(tsla_df.p_change > 0, 1, 0)\n    print(\'tsla_df.tail():\\n\', tsla_df.tail())\n    xt = pd.crosstab(tsla_df.date_week, tsla_df.positive)\n    print(\'xt:\\n\', xt)\n\n    xt_pct = xt.div(xt.sum(1).astype(float), axis=0)\n    print(\'xt_pct:\\n\', xt_pct)\n\n    xt_pct.plot(\n        figsize=(8, 5),\n        kind=\'bar\',\n        stacked=True,\n        title=\'date_week -> positive\')\n    plt.xlabel(\'date_week\')\n    plt.ylabel(\'positive\')\n    plt.show()\n\n\ndef sample_442():\n    """"""\n    4.4.2 \xe6\x9e\x84\xe5\xbb\xba\xe9\x80\x8f\xe8\xa7\x86\xe8\xa1\xa8\n    :return:\n    """"""\n    # noinspection PyTypeChecker\n    tsla_df[\'positive\'] = np.where(tsla_df.p_change > 0, 1, 0)\n    print(\'tsla_df.pivot_table([positive], index=[date_week]):\\n\',\n          tsla_df.pivot_table([\'positive\'], index=[\'date_week\']))\n    print(\'tsla_df.groupby([date_week, positive])[positive].count():\\n\',\n          tsla_df.groupby([\'date_week\', \'positive\'])[\'positive\'].count())\n\n\n""""""\n    4.5 \xe5\xae\x9e\xe4\xbe\x8b3 \xef\xbc\x9a\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\n""""""\n\njump_pd = pd.DataFrame()\njump_threshold = tsla_df.close.median() * 0.03\n\n\ndef judge_jump(p_today):\n    global jump_pd\n    if p_today.p_change > 0 and (p_today.low - p_today.pre_close) > jump_threshold:\n        """"""\n            \xe7\xac\xa6\xe5\x90\x88\xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\n        """"""\n        # jump\xe8\xae\xb0\xe5\xbd\x95\xe6\x96\xb9\xe5\x90\x91 1\xe5\x90\x91\xe4\xb8\x8a\n        p_today[\'jump\'] = 1\n        # \xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x9d\xef\xbc\x88\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x9c\x80\xe4\xbd\x8e \xef\xbc\x8d \xe6\x98\xa8\xe6\x94\xb6\xef\xbc\x89\xef\xbc\x8f \xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\n        p_today[\'jump_power\'] = (p_today.low - p_today.pre_close) / jump_threshold\n        jump_pd = jump_pd.append(p_today)\n    elif p_today.p_change < 0 and (p_today.pre_close - p_today.high) > jump_threshold:\n        """"""\n            \xe7\xac\xa6\xe5\x90\x88\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\n        """"""\n        # jump\xe8\xae\xb0\xe5\xbd\x95\xe6\x96\xb9\xe5\x90\x91 \xef\xbc\x8d1\xe5\x90\x91\xe4\xb8\x8b\n        p_today[\'jump\'] = -1\n        # \xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x9d\xef\xbc\x88\xe6\x98\xa8\xe6\x94\xb6 \xef\xbc\x8d \xe4\xbb\x8a\xe5\xa4\xa9\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x89\xef\xbc\x8f \xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\n        p_today[\'jump_power\'] = (p_today.pre_close - p_today.high) / jump_threshold\n        jump_pd = jump_pd.append(p_today)\n\n\ndef sample_45_1():\n    """"""\n    4.5 \xe5\xae\x9e\xe4\xbe\x8b3 \xef\xbc\x9a\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\n    :return:\n    """"""\n    for kl_index in np.arange(0, tsla_df.shape[0]):\n        # \xe9\x80\x9a\xe8\xbf\x87ix\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe4\xb8\xaa\xe6\x8b\xbf\n        today = tsla_df.ix[kl_index]\n        judge_jump(today)\n\n    # filter\xe6\x8c\x89\xe7\x85\xa7\xe9\xa1\xba\xe5\xba\x8f\xe5\x8f\xaa\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x99\xe4\xba\x9b\xe5\x88\x97, \xe8\xa1\xa84-26\xe6\x89\x80\xe7\xa4\xba\n    print(\'jump_pd.filter([jump, jump_power, close, date, p_change, pre_close]):\\n\',\n          jump_pd.filter([\'jump\', \'jump_power\', \'close\', \'date\', \'p_change\', \'pre_close\']))\n\n\ndef sample_45_2():\n    """"""\n    4.5 \xe5\xae\x9e\xe4\xbe\x8b3 \xef\xbc\x9a\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\n    :return:\n    """"""\n    # axis=1\xe5\x8d\xb3\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8ctsla_df\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe6\x9d\xa1\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe5\x8d\xb3\xe4\xb8\xba\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\n    tsla_df.apply(judge_jump, axis=1)\n    print(\'jump_pd:\\n\', jump_pd)\n\n    from abupy import ABuMarketDrawing\n    # view_indexs\xe4\xbc\xa0\xe5\x85\xa5jump_pd.index\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9c\xa8k\xe5\x9b\xbe\xe4\xb8\x8a\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\x86\xe6\x9d\xa5\xe6\xa0\x87\xe7\xa4\xba\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\n    ABuMarketDrawing.plot_candle_form_klpd(tsla_df, view_indexs=jump_pd.index)\n    plt.show()\n\n\n""""""\n    4.6 pandas\xe4\xb8\x89\xe7\xbb\xb4\xe9\x9d\xa2\xe6\x9d\xbf\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n""""""\n\n\ndef sample_46():\n    """"""\n    4.6 pandas\xe4\xb8\x89\xe7\xbb\xb4\xe9\x9d\xa2\xe6\x9d\xbf\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n    :return:\n    """"""\n    # disable_example_env_ipython\xe4\xb8\x8d\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\xb2\x99\xe7\x9b\x92\xe9\x87\x8c\xe9\x9d\xa2\xe6\xb2\xa1\xe6\x9c\x89\xe7\x9b\xb8\xe5\x85\xb3tsla\xe8\xa1\x8c\xe4\xb8\x9a\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x95\x8a\n    abupy.env.disable_example_env_ipython()\n\n    from abupy import ABuIndustries\n    r_symbol = \'usTSLA\'\n    # \xe8\xbf\x99\xe9\x87\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe4\xba\x86\xe5\x92\x8cTSLA\xe7\x94\xb5\xe5\x8a\xa8\xe8\xbd\xa6\xe5\xa4\x84\xe4\xba\x8e\xe5\x90\x8c\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\x9a\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe7\xbb\x84\xe6\x88\x90pandas\xe4\xb8\x89\xe7\xbb\xb4\xe9\x9d\xa2\xe6\x9d\xbfPanel\xe6\x95\xb0\xe6\x8d\xae\n    p_date, _ = ABuIndustries.get_industries_panel_from_target(r_symbol, show=False)\n    print(\'type(p_date):\', type(p_date))\n    print(\'p_date:\\n\', p_date)\n\n    print(\'p_date[usTTM].head():\\n\', p_date[\'usTTM\'].head())\n\n    p_data_it = p_date.swapaxes(\'items\', \'minor\')\n    print(\'p_data_it:\\n\', p_data_it)\n\n    p_data_it_close = p_data_it[\'close\'].dropna(axis=0)\n    print(\'p_data_it_close.tail():\\n\', p_data_it_close.tail())\n\n    from abupy import ABuScalerUtil\n    # ABuScalerUtil.scaler_std\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89close\xe7\x9a\x84\xe5\x88\x87\xe9\x9d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe5\x81\x9a(group - group.mean()) / group.std()\xe6\xa0\x87\xe7\xa4\xba\xe5\x8c\x96\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9c\xa8\xe5\x90\x8c\xe4\xb8\x80\xe8\x8c\x83\xe5\x9b\xb4\n    p_data_it_close = ABuScalerUtil.scaler_std(p_data_it_close)\n    p_data_it_close.plot()\n    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    plt.ylabel(\'Price\')\n    plt.xlabel(\'Time\')\n    plt.show()\n\n\nif __name__ == ""__main__"":\n    sample_411()\n    # sample_412()\n    # sample_413()\n    # sample_414()\n    # sample_415()\n    # sample_420()\n    # sample_421()\n    # sample_422()\n    # sample_423()\n    # sample_424_1()\n    # sample_424_2()\n    # sample_425()\n    # sample_431()\n    # sample_432()\n    # sample_441()\n    # sample_442()\n    # sample_45_1()\n    # sample_45_2()\n    # sample_46()\n'"
python/c5.py,27,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport warnings\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import ABuSymbolPd\nfrom abupy import pd_rolling_std, pd_ewm_std, pd_rolling_mean\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\ntsla_df = ABuSymbolPd.make_kl_df(\'usTSLA\', n_folds=2)\n\n""""""\n    \xe7\xac\xac\xe4\xba\x94\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe5\xb7\xa5\xe5\x85\xb7\xe2\x80\x94\xe2\x80\x94\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\n# noinspection PyUnresolvedReferences\ndef plot_demo(axs=None, just_series=False):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6tsla\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\n    :param axs: axs\xe4\xb8\xba\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xef\xbc\x8c\xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xaf\xa6\xe7\xbb\x86\xe8\xae\xb2\xe8\xa7\xa3\n    :param just_series: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x80\xe6\x9d\xa1\xe6\x94\xb6\xe7\x9b\x98\xe6\x9b\xb2\xe7\xba\xbf\xe4\xbd\xbf\xe7\x94\xa8series\xef\xbc\x8c\xe5\x90\x8e\xe9\x9d\xa2\xe4\xbc\x9a\xe7\x94\xa8\xe5\x88\xb0\n    :return:\n    """"""\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x82\xe6\x95\xb0\xe4\xbc\xa0\xe5\x85\xa5\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe4\xb8\x8b\xe4\xb8\x80\xe8\x8a\x82\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\n    drawer = plt if axs is None else axs\n    # Series\xe5\xaf\xb9\xe8\xb1\xa1tsla_df.close\xef\xbc\x8c\xe7\xba\xa2\xe8\x89\xb2\n    drawer.plot(tsla_df.close, c=\'r\')\n    if not just_series:\n        # \xe4\xb8\xba\xe6\x9b\xb2\xe7\xba\xbf\xe4\xb8\x8d\xe9\x87\x8d\xe5\x8f\xa0\xef\xbc\x8cy\xe5\x8f\x98\xe9\x87\x8f\xe5\x8a\xa0\xe4\xba\x8610\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8dtsla_df.close.values + 10\n        # numpy\xe5\xaf\xb9\xe8\xb1\xa1tsla_df.close.index \xef\xbc\x8b tsla_df.close.values\xef\xbc\x8c\xe7\xbb\xbf\xe8\x89\xb2\n        drawer.plot(tsla_df.close.index, tsla_df.close.values + 10,\n                    c=\'g\')\n        # \xe4\xb8\xba\xe6\x9b\xb2\xe7\xba\xbf\xe4\xb8\x8d\xe9\x87\x8d\xe5\x8f\xa0\xef\xbc\x8cy\xe5\x8f\x98\xe9\x87\x8f\xe5\x8a\xa0\xe4\xba\x8620\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\n        # list\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cnumpy.tolist()\xe5\xb0\x86numpy\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbalist\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\x93\x9d\xe8\x89\xb2\n        drawer.plot(tsla_df.close.index.tolist(),\n                    (tsla_df.close.values + 20).tolist(), c=\'b\')\n\n    plt.xlabel(\'time\')\n    plt.ylabel(\'close\')\n    plt.title(\'TSLA CLOSE\')\n    plt.grid(True)\n\n\ndef sample_511():\n    """"""\n    5.1.1 matplotlib\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\n    :return:\n    """"""\n    print(\'tsla_df.tail():\\n\', tsla_df.tail())\n\n    plot_demo()\n    plt.show()\n\n\ndef sample_512():\n    """"""\n    5.1.2 matplotlib\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe5\x8f\x8aloc\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n    :return:\n    """"""\n    _, axs = plt.subplots(nrows=2, ncols=2, figsize=(14, 10))\n    # \xe7\x94\xbb\xe5\xb8\x830\xef\xbc\x8cloc\xef\xbc\x9a0 plot_demo\xe4\xb8\xad\xe4\xbc\xa0\xe5\x85\xa5\xe7\x94\xbb\xe5\xb8\x83\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe7\x94\xbb\xe5\xb8\x83\xe7\xbb\x98\xe5\x88\xb6\n    drawer = axs[0][0]\n    plot_demo(drawer)\n    drawer.legend([\'Series\', \'Numpy\', \'List\'], loc=0)\n    # \xe7\x94\xbb\xe5\xb8\x831\xef\xbc\x8cloc\xef\xbc\x9a1\n    drawer = axs[0][1]\n    plot_demo(drawer)\n    drawer.legend([\'Series\', \'Numpy\', \'List\'], loc=1)\n    # \xe7\x94\xbb\xe5\xb8\x832\xef\xbc\x8cloc\xef\xbc\x9a2\n    drawer = axs[1][0]\n    plot_demo(drawer)\n    drawer.legend([\'Series\', \'Numpy\', \'List\'], loc=2)\n    # \xe7\x94\xbb\xe5\xb8\x833\xef\xbc\x8cloc\xef\xbc\x9a2\xef\xbc\x8c \xe8\xae\xbe\xe7\xbd\xaebbox_to_anchor\xef\xbc\x8c\xe5\x9c\xa8\xe7\x94\xbb\xe5\xb8\x83\xe5\xa4\x96\xe7\x9a\x84\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xbd\x8d\xe7\xbd\xae\xe7\xbb\x98\xe5\x88\xb6\n    drawer = axs[1][1]\n    plot_demo(drawer)\n    drawer.legend([\'Series\', \'Numpy\', \'List\'], bbox_to_anchor=(1.05, 1),\n                  loc=2,\n                  borderaxespad=0.)\n    plt.show()\n\n\ndef sample_513():\n    """"""\n    5.1.3 k\xe7\xba\xbf\xe5\x9b\xbe\xe7\x9a\x84\xe7\xbb\x98\xe5\x88\xb6\n    :return:\n    """"""\n    import matplotlib.finance as mpf\n\n    __colorup__ = ""red""\n    __colordown__ = ""green""\n    # \xe4\xb8\xba\xe4\xba\x86\xe7\xa4\xba\xe4\xbe\x8b\xe6\xb8\x85\xe6\x99\xb0\xef\xbc\x8c\xe5\x8f\xaa\xe6\x8b\xbf\xe5\x87\xba\xe5\x89\x8d30\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x98\xe5\x88\xb6\xe8\x9c\xa1\xe7\x83\x9b\xe5\x9b\xbe\xef\xbc\x8c\n    tsla_part_df = tsla_df[:30]\n    fig, ax = plt.subplots(figsize=(14, 7))\n    qutotes = []\n\n    for index, (d, o, c, h, l) in enumerate(\n            zip(tsla_part_df.index, tsla_part_df.open, tsla_part_df.close,\n                tsla_part_df.high, tsla_part_df.low)):\n        # \xe8\x9c\xa1\xe7\x83\x9b\xe5\x9b\xbe\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8matplotlib.finance.date2num\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x89\xb9\xe6\x9c\x89\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97\xe5\x80\xbc\n        d = mpf.date2num(d)\n        # \xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe5\xbc\x80\xe7\x9b\x98\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x98\xef\xbc\x8c\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x8c\xe6\x9c\x80\xe4\xbd\x8e\xe7\xbb\x84\xe6\x88\x90tuple\xe5\xaf\xb9\xe8\xb1\xa1val\n        val = (d, o, c, h, l)\n        # \xe5\x8a\xa0val\xe5\x8a\xa0\xe5\x85\xa5qutotes\n        qutotes.append(val)\n    # \xe4\xbd\xbf\xe7\x94\xa8mpf.candlestick_ochl\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x9c\xa1\xe7\x83\x9b\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8cochl\xe4\xbb\xa3\xe8\xa1\xa8\xef\xbc\x9aopen\xef\xbc\x8cclose\xef\xbc\x8chigh\xef\xbc\x8clow\n    mpf.candlestick_ochl(ax, qutotes, width=0.6, colorup=__colorup__,\n                         colordown=__colordown__)\n    ax.autoscale_view()\n    ax.xaxis_date()\n    plt.show()\n\n\ndef sample_52():\n    """"""\n    5.2 \xe4\xbd\xbf\xe7\x94\xa8bokeh\xe4\xba\xa4\xe4\xba\x92\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return:\n    """"""\n    from abupy import ABuMarketDrawing\n    ABuMarketDrawing.plot_candle_form_klpd(tsla_df, html_bk=True)\n\n\n""""""\n    5.3 \xe4\xbd\xbf\xe7\x94\xa8pandas\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\n""""""\n\n\ndef sample_531_1():\n    """"""\n    5.3.1_1 \xe7\xbb\x98\xe5\x88\xb6\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\xe5\x8f\x8a\xe6\x94\xb6\xe7\x9b\x8a\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x83\x85\xe5\x86\xb5 demo list\n    :return:\n    """"""\n    # \xe7\xa4\xba\xe4\xbe\x8b\xe5\xba\x8f\xe5\x88\x97\n    demo_list = np.array([2, 4, 16, 20])\n    # \xe4\xbb\xa5\xe4\xb8\x89\xe5\xa4\xa9\xe4\xb8\xba\xe5\x91\xa8\xe6\x9c\x9f\xe8\xae\xa1\xe7\xae\x97\xe6\xb3\xa2\xe5\x8a\xa8\n    demo_window = 3\n    # pd.rolling_std * np.sqrt\n    print(\'pd.rolling_std(demo_list, window=demo_window, center=False) * np.sqrt(demo_window):\\n\',\n          pd_rolling_std(demo_list, window=demo_window, center=False) * np.sqrt(demo_window))\n\n    print(\'pd.Series([2, 4, 16]).std() * np.sqrt(demo_window):\', pd.Series([2, 4, 16]).std() * np.sqrt(demo_window))\n    print(\'pd.Series([4, 16, 20]).std() * np.sqrt(demo_window):\', pd.Series([4, 16, 20]).std() * np.sqrt(demo_window))\n    print(\'np.sqrt(pd.Series([2, 4, 16]).var() * demo_window):\', np.sqrt(pd.Series([2, 4, 16]).var() * demo_window))\n\n\ndef sample_531_2():\n    """"""\n    5.3.1_2 \xe7\xbb\x98\xe5\x88\xb6\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\xe5\x8f\x8a\xe6\x94\xb6\xe7\x9b\x8a\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x83\x85\xe5\x86\xb5\n    :return:\n    """"""\n    tsla_df_copy = tsla_df.copy()\n    # \xe6\x8a\x95\xe8\xb5\x84\xe5\x9b\x9e\xe6\x8a\xa5\n    tsla_df_copy[\'return\'] = np.log(tsla_df[\'close\'] / tsla_df[\'close\'].shift(1))\n\n    # \xe7\xa7\xbb\xe5\x8a\xa8\xe6\x94\xb6\xe7\x9b\x8a\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n    tsla_df_copy[\'mov_std\'] = pd_rolling_std(tsla_df_copy[\'return\'],\n                                             window=20,\n                                             center=False) * np.sqrt(20)\n    # \xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x94\xb6\xe7\x9b\x8a\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\xef\xbc\x8c\xe4\xb8\x8e\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x94\xb6\xe7\x9b\x8a\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\xe5\x9f\xba\xe6\x9c\xac\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe5\x8f\xaa\xe4\xb8\x8d\xe8\xbf\x87\xe6\xa0\xb9\xe6\x8d\xae\xe6\x97\xb6\xe9\x97\xb4\xe6\x9d\x83\xe9\x87\x8d\xe8\xae\xa1\xe7\xae\x97std\n    tsla_df_copy[\'std_ewm\'] = pd_ewm_std(tsla_df_copy[\'return\'], span=20,\n                                         min_periods=20,\n                                         adjust=True) * np.sqrt(20)\n\n    tsla_df_copy[[\'close\', \'mov_std\', \'std_ewm\', \'return\']].plot(subplots=True, grid=True)\n    plt.show()\n\n\ndef sample_532():\n    """"""\n    5.3.2 \xe7\xbb\x98\xe5\x88\xb6\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8e\xe5\x9d\x87\xe7\xba\xbf\n    :return:\n    """"""\n    tsla_df.close.plot()\n    # ma 30\n    # pd_rolling_mean(tsla_df.close, window=30).plot()\n    pd_rolling_mean(tsla_df.close, window=30).plot()\n    # ma 60\n    # pd.rolling_mean(tsla_df.close, window=60).plot()\n    pd_rolling_mean(tsla_df.close, window=60).plot()\n    # ma 90\n    # pd.rolling_mean(tsla_df.close, window=90).plot()\n    pd_rolling_mean(tsla_df.close, window=90).plot()\n    # loc=\'best\'\xe5\x8d\xb3\xe8\x87\xaa\xe5\x8a\xa8\xe5\xaf\xbb\xe6\x89\xbe\xe9\x80\x82\xe5\x90\x88\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n    plt.legend([\'close\', \'30 mv\', \'60 mv\', \'90 mv\'], loc=\'best\')\n    plt.show()\n\n\ndef sample_533():\n    """"""\n    5.3.3 \xe5\x85\xb6\xe5\xae\x83pandas\xe7\xbb\x9f\xe8\xae\xa1\xe5\x9b\xbe\xe5\xbd\xa2\xe7\xa7\x8d\xe7\xb1\xbb\n    :return:\n    """"""\n    # iloc\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe4\xbd\x8e\xe5\xbc\x80\xe9\xab\x98\xe8\xb5\xb0\xe7\x9a\x84\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\xbb\x84\xe6\x88\x90low_to_high_df\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe6\x98\xaf\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n    # \xe6\x89\x80\xe4\xbb\xa5\xe8\xa6\x81\xe5\xaf\xb9\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x86\x8d\xe6\xac\xa1\xe9\x80\x9a\xe8\xbf\x87iloc\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5index\xe7\x94\xa8key.values + 1\n    # key\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x80\xbc\xe5\x8d\xb3\xe4\xb8\xba0-len(tsla_df), \xe5\x8d\xb3\xe4\xb8\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5index\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe6\x9f\xa5\xe9\x98\x85\xe6\x9c\xac\xe7\xab\xa0\xe5\x88\x9dtail\n    low_to_high_df = tsla_df.iloc[tsla_df[\n                                      (tsla_df.close > tsla_df.open) & (\n                                          tsla_df.key != tsla_df.shape[\n                                              0] - 1)].key.values + 1]\n\n    # \xe9\x80\x9a\xe8\xbf\x87where\xe5\xb0\x86\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe9\x80\x9a\xe8\xbf\x87ceil\xef\xbc\x8cfloor\xe5\x90\x91\xe4\xb8\x8a\xef\xbc\x8c\xe5\x90\x91\xe4\xb8\x8b\xe5\x8f\x96\xe6\x95\xb4\n    change_ceil_floor = np.where(low_to_high_df[\'p_change\'] > 0,\n                                 np.ceil(\n                                     low_to_high_df[\'p_change\']),\n                                 np.floor(\n                                     low_to_high_df[\'p_change\']))\n\n    # \xe4\xbd\xbf\xe7\x94\xa8pd.Series\xe5\x8c\x85\xe8\xa3\xb9\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbf\xe4\xb9\x8b\xe5\x90\x8e\xe7\xbb\x98\xe5\x88\xb6\n    change_ceil_floor = pd.Series(change_ceil_floor)\n    print(\'\xe4\xbd\x8e\xe5\xbc\x80\xe9\xab\x98\xe6\x94\xb6\xe7\x9a\x84\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe8\xb7\x8c\xe5\xb9\x85\xe5\x8f\x96\xe6\x95\xb4\xe5\x92\x8csum: \' + str(\n        change_ceil_floor[change_ceil_floor < 0].sum()))\n\n    print(\'\xe4\xbd\x8e\xe5\xbc\x80\xe9\xab\x98\xe6\x94\xb6\xe7\x9a\x84\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\xe5\x8f\x96\xe6\x95\xb4\xe5\x92\x8csum: \' + str(\n        change_ceil_floor[change_ceil_floor > 0].sum()))\n\n    # 2 * 2: \xe5\x9b\x9b\xe5\xbc\xa0\xe5\xad\x90\xe5\x9b\xbe\n    _, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 10))\n    # \xe7\xab\x96\xe7\x9b\xb4\xe6\x9f\xb1\xe7\x8a\xb6\xe5\x9b\xbe\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0-1\xe7\x9a\x84\xe6\x9f\xb1\xe5\xad\x90\xe6\x9c\x80\xe9\xab\x98, \xe5\x9b\xbe5-7\xe5\xb7\xa6\xe4\xb8\x8a\n    change_ceil_floor.value_counts().plot(kind=\'bar\', ax=axs[0][0])\n    # \xe6\xb0\xb4\xe5\xb9\xb3\xe6\x9f\xb1\xe7\x8a\xb6\xe5\x9b\xbe\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0-1\xe7\x9a\x84\xe6\x9f\xb1\xe5\xad\x90\xe6\x9c\x80\xe9\x95\xbf, \xe5\x9b\xbe5-7\xe5\x8f\xb3\xe4\xb8\x8a\n    change_ceil_floor.value_counts().plot(kind=\'barh\', ax=axs[0][1])\n    # \xe6\xa6\x82\xe7\x8e\x87\xe5\xaf\x86\xe5\xba\xa6\xe5\x9b\xbe\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe5\x90\x91\xe5\xb7\xa6\xe5\x81\x8f\xe7\xa7\xbb, \xe5\x9b\xbe5-7\xe5\xb7\xa6\xe4\xb8\x8b\n    change_ceil_floor.value_counts().plot(kind=\'kde\', ax=axs[1][0])\n    # \xe5\x9c\x86\xe9\xa5\xbc\xe5\x9b\xbe\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xef\xbc\x8d1\xe6\x89\x80\xe5\x8d\xa0\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe6\x9c\x80\xe9\xab\x98, -2\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb9\x9f\xe5\xa4\xa7\xe4\xba\x8e\xef\xbc\x8b2\xef\xbc\x8c\xe5\x9b\xbe5-7\xe5\x8f\xb3\xe4\xb8\x8b\n    change_ceil_floor.value_counts().plot(kind=\'pie\', ax=axs[1][1])\n    plt.show()\n\n\ndef sample_54_1():\n    """"""\n    5.4 \xe4\xbd\xbf\xe7\x94\xa8seaborn\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\n    :return:\n    """"""\n    sns.distplot(tsla_df[\'p_change\'], bins=80)\n    plt.show()\n\n    sns.boxplot(x=\'date_week\', y=\'p_change\', data=tsla_df)\n    plt.show()\n\n    sns.jointplot(tsla_df[\'high\'], tsla_df[\'low\'])\n    plt.show()\n\n\ndef sample_54_2():\n    """"""\n    5.4 \xe4\xbd\xbf\xe7\x94\xa8seaborn\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\n    :return:\n    """"""\n    change_df = pd.DataFrame({\'tsla\': tsla_df.p_change})\n    # join usGOOG\n    change_df = change_df.join(pd.DataFrame({\'goog\': ABuSymbolPd.make_kl_df(\'usGOOG\', n_folds=2).p_change}),\n                               how=\'outer\')\n    # join usAAPL\n    change_df = change_df.join(pd.DataFrame({\'aapl\': ABuSymbolPd.make_kl_df(\'usAAPL\', n_folds=2).p_change}),\n                               how=\'outer\')\n    # join usFB\n    change_df = change_df.join(pd.DataFrame({\'fb\': ABuSymbolPd.make_kl_df(\'usFB\', n_folds=2).p_change}),\n                               how=\'outer\')\n    # join usBIDU\n    change_df = change_df.join(pd.DataFrame({\'bidu\': ABuSymbolPd.make_kl_df(\'usBIDU\', n_folds=2).p_change}),\n                               how=\'outer\')\n\n    change_df = change_df.dropna()\n    # \xe8\xa1\xa85-2\xe6\x89\x80\xe7\xa4\xba\n    print(\'change_df.head():\\n\', change_df.head())\n\n    # \xe4\xbd\xbf\xe7\x94\xa8corr\xe8\xae\xa1\xe7\xae\x97\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\n    corr = change_df.corr()\n    _, ax = plt.subplots(figsize=(8, 5))\n    # sns.heatmap\xe7\x83\xad\xe5\x8a\x9b\xe5\x9b\xbe\xe5\xb1\x95\xe7\xa4\xba\xe6\xaf\x8f\xe7\xbb\x84\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\n    sns.heatmap(corr, ax=ax)\n    plt.show()\n\n\n""""""\n    5.5 \xe5\xae\x9e\xe4\xbe\x8b1:\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8c\xba\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\x9b\xa0\n""""""\n\n\ndef sample_55_1():\n    """"""\n    5.5 \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8c\xba\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\x9b\xa0\n    :return:\n    """"""\n\n    def plot_trade(buy_date, sell_date):\n        # \xe6\x89\xbe\xe5\x87\xba2014-07-28\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84index\xe4\xbd\x9c\xe4\xb8\xbastart\n        start = tsla_df[tsla_df.index == buy_date].key.values[0]\n        # \xe6\x89\xbe\xe5\x87\xba2014-09-05\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84index\xe4\xbd\x9c\xe4\xb8\xbaend\n        end = tsla_df[tsla_df.index == sell_date].key.values[0]\n\n        # \xe4\xbd\xbf\xe7\x94\xa85.1.1\xe5\xb0\x81\xe8\xa3\x85\xe7\x9a\x84\xe7\xbb\x98\xe5\x88\xb6tsla\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x87\xbd\xe6\x95\xb0plot_demo\n        # just_series\xef\xbc\x9dTrue, \xe5\x8d\xb3\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x80\xe6\x9d\xa1\xe6\x9b\xb2\xe7\xba\xbf\xe4\xbd\xbf\xe7\x94\xa8series\xe6\x95\xb0\xe6\x8d\xae\n        plot_demo(just_series=True)\n\n        # \xe5\xb0\x86\xe6\x95\xb4\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe9\x83\xbd\xe5\xa1\xab\xe5\x85\x85\xe4\xb8\x80\xe4\xb8\xaa\xe5\xba\x95\xe8\x89\xb2blue\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6alpha=0.08\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\n        # \xe4\xb9\x8b\xe5\x90\x8e\xe6\xa0\x87\xe6\xb3\xa8\xe5\x85\xb6\xe4\xbb\x96\xe5\x8c\xba\xe9\x97\xb4\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6\xe9\xab\x98\xe4\xba\x8e0.08\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xb8\x85\xe6\xa5\x9a\xe6\x98\xbe\xe7\xa4\xba\n        plt.fill_between(tsla_df.index, 0, tsla_df[\'close\'], color=\'blue\',\n                         alpha=.08)\n\n        # \xe6\xa0\x87\xe6\xb3\xa8\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8c\x81\xe6\x9c\x89\xe5\x91\xa8\xe6\x9c\x9f\xe7\xbb\xbf\xe8\x89\xb2\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8start\xe5\x92\x8cend\xe5\x88\x87\xe7\x89\x87\xe5\x91\xa8\xe6\x9c\x9f\n        # \xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6alpha=0.38 > 0.08\n        plt.fill_between(tsla_df.index[start:end], 0,\n                         tsla_df[\'close\'][start:end], color=\'green\',\n                         alpha=.38)\n\n        # \xe8\xae\xbe\xe7\xbd\xaey\xe8\xbd\xb4\xe7\x9a\x84\xe6\x98\xbe\xe7\xa4\xba\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeylim\xef\xbc\x8c\xe5\xb0\x86\xe4\xbb\x8e0\xe5\xbc\x80\xe5\xa7\x8b\xe4\xbd\x9c\xe4\xb8\xba\xe8\xb5\xb7\xe7\x82\xb9\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x8c\xe6\x95\x88\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xa5\xbd\n        plt.ylim(np.min(tsla_df[\'close\']) - 5,\n                 np.max(tsla_df[\'close\']) + 5)\n        # \xe4\xbd\xbf\xe7\x94\xa8loc=\'best\'\n        plt.legend([\'close\'], loc=\'best\')\n\n    # \xe6\xa0\x87\xe6\xb3\xa8\xe4\xba\xa4\xe6\x98\x93\xe5\x8c\xba\xe9\x97\xb42014-07-28\xe5\x88\xb02014-09-05, \xe5\x9b\xbe5-12\xe6\x89\x80\xe7\xa4\xba\n    plot_trade(\'2014-07-28\', \'2014-09-05\')\n    plt.show()\n\n    def plot_trade_with_annotate(buy_date, sell_date, annotate):\n        """"""\n        :param buy_date: \xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\n        :param sell_date: \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\n        :param annotate: \xe5\x8d\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\x9b\xa0\n        :return:\n        """"""\n        # \xe6\xa0\x87\xe6\xb3\xa8\xe4\xba\xa4\xe6\x98\x93\xe5\x8c\xba\xe9\x97\xb4buy_date\xe5\x88\xb0sell_date\n        plot_trade(buy_date, sell_date)\n        # annotate\xe6\x96\x87\xe5\xad\x97\xef\xbc\x8casof\xef\xbc\x9a\xe4\xbb\x8etsla_df[\'close\']\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0index:sell_date\xe5\xaf\xb9\xe5\xba\x94\xe5\x80\xbc\n        plt.annotate(annotate,\n                     xy=(sell_date, tsla_df[\'close\'].asof(sell_date)),\n                     arrowprops=dict(facecolor=\'yellow\'),\n                     horizontalalignment=\'left\', verticalalignment=\'top\')\n\n    plot_trade_with_annotate(\'2014-07-28\', \'2014-09-05\',\n                             \'sell for stop loss\')\n    plt.show()\n\n\ndef sample_55_2():\n    """"""\n    5.5 \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8c\xba\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\x9b\xa0\n    :return:\n    """"""\n\n    def plot_trade(buy_date, sell_date):\n        # \xe6\x89\xbe\xe5\x87\xba2014-07-28\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84index\xe4\xbd\x9c\xe4\xb8\xbastart\n        start = tsla_df[tsla_df.index == buy_date].key.values[0]\n        # \xe6\x89\xbe\xe5\x87\xba2014-09-05\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84index\xe4\xbd\x9c\xe4\xb8\xbaend\n        end = tsla_df[tsla_df.index == sell_date].key.values[0]\n        # \xe4\xbd\xbf\xe7\x94\xa85.1.1\xe5\xb0\x81\xe8\xa3\x85\xe7\x9a\x84\xe7\xbb\x98\xe5\x88\xb6tsla\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x87\xbd\xe6\x95\xb0plot_demo\n        # just_series\xef\xbc\x9dTrue, \xe5\x8d\xb3\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x80\xe6\x9d\xa1\xe6\x9b\xb2\xe7\xba\xbf\xe4\xbd\xbf\xe7\x94\xa8series\xe6\x95\xb0\xe6\x8d\xae\n        plot_demo(just_series=True)\n        # \xe5\xb0\x86\xe6\x95\xb4\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe9\x83\xbd\xe5\xa1\xab\xe5\x85\x85\xe4\xb8\x80\xe4\xb8\xaa\xe5\xba\x95\xe8\x89\xb2blue\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6alpha=0.08\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\n        # \xe4\xb9\x8b\xe5\x90\x8e\xe6\xa0\x87\xe6\xb3\xa8\xe5\x85\xb6\xe4\xbb\x96\xe5\x8c\xba\xe9\x97\xb4\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6\xe9\xab\x98\xe4\xba\x8e0.08\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xb8\x85\xe6\xa5\x9a\xe6\x98\xbe\xe7\xa4\xba\n        plt.fill_between(tsla_df.index, 0, tsla_df[\'close\'], color=\'blue\',\n                         alpha=.08)\n        # \xe6\xa0\x87\xe6\xb3\xa8\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8c\x81\xe6\x9c\x89\xe5\x91\xa8\xe6\x9c\x9f\xe7\xbb\xbf\xe8\x89\xb2\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8start\xe5\x92\x8cend\xe5\x88\x87\xe7\x89\x87\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6alpha=0.38 > 0.08\n        if tsla_df[\'close\'][end] < tsla_df[\'close\'][start]:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xb5\x94\xe9\x92\xb1\xe4\xba\x86\xe6\x98\xbe\xe7\xa4\xba\xe7\xbb\xbf\xe8\x89\xb2\n            plt.fill_between(tsla_df.index[start:end], 0,\n                             tsla_df[\'close\'][start:end], color=\'green\',\n                             alpha=.38)\n            is_win = False\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8c\xa3\xe9\x92\xb1\xe4\xba\x86\xe6\x98\xbe\xe7\xa4\xba\xe7\xba\xa2\xe8\x89\xb2\n            plt.fill_between(tsla_df.index[start:end], 0,\n                             tsla_df[\'close\'][start:end], color=\'red\',\n                             alpha=.38)\n            is_win = True\n\n        # \xe8\xae\xbe\xe7\xbd\xaey\xe8\xbd\xb4\xe7\x9a\x84\xe6\x98\xbe\xe7\xa4\xba\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeylim\xef\xbc\x8c\xe5\xb0\x86\xe4\xbb\x8e0\xe5\xbc\x80\xe5\xa7\x8b\xe4\xbd\x9c\xe4\xb8\xba\xe8\xb5\xb7\xe7\x82\xb9\xe6\x98\xbe\xe7\xa4\xba\n        plt.ylim(np.min(tsla_df[\'close\']) - 5,\n                 np.max(tsla_df[\'close\']) + 5)\n        # \xe4\xbd\xbf\xe7\x94\xa8loc=\'best\'\n        plt.legend([\'close\'], loc=\'best\')\n        # \xe5\xb0\x86\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\x88\xe5\x88\xa9\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\n        return is_win\n\n    def plot_trade_with_annotate(buy_date, sell_date):\n        """"""\n        :param buy_date: \xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\n        :param sell_date: \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\n        :return:\n        """"""\n        # \xe6\xa0\x87\xe6\xb3\xa8\xe4\xba\xa4\xe6\x98\x93\xe5\x8c\xba\xe9\x97\xb4buy_date\xe5\x88\xb0sell_date\n        is_win = plot_trade(buy_date, sell_date)\n        # \xe6\xa0\xb9\xe6\x8d\xaeis_win\xe6\x9d\xa5\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\xad\xa2\xe7\x9b\x88\xe8\xbf\x98\xe6\x98\xaf\xe6\xad\xa2\xe6\x8d\x9f\xe5\x8d\x96\xe5\x87\xba\n        plt.annotate(\n            \'sell for stop win\' if is_win else \'sell for stop loss\',\n            xy=(sell_date, tsla_df[\'close\'].asof(sell_date)),\n            arrowprops=dict(facecolor=\'yellow\'),\n            horizontalalignment=\'left\', verticalalignment=\'top\')\n\n    # \xe5\x8c\xba\xe9\x97\xb42014-07-28\xe5\x88\xb02014-09-05\n    plot_trade_with_annotate(\'2014-07-28\', \'2014-09-05\')\n    # \xe5\x8c\xba\xe9\x97\xb42015-01-28\xe5\x88\xb02015-03-11\n    plot_trade_with_annotate(\'2015-01-28\', \'2015-03-11\')\n    # \xe5\x8c\xba\xe9\x97\xb42015-04-10\xe5\x88\xb02015-07-10\n    plot_trade_with_annotate(\'2015-04-10\', \'2015-07-10\')\n    # \xe5\x8c\xba\xe9\x97\xb42015-10-2\xe5\x88\xb02015-10-14\n    plot_trade_with_annotate(\'2015-10-2\', \'2015-10-14\')\n    # \xe5\x8c\xba\xe9\x97\xb42016-02-10\xe5\x88\xb02016-04-11\n    plot_trade_with_annotate(\'2016-02-10\', \'2016-04-11\')\n    plt.show()\n\n\n""""""\n    5.6 \xe5\xae\x9e\xe4\xbe\x8b2:\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe8\xa7\x82\xe5\xaf\x9f\xe5\x91\xa8\xe6\x9c\x9f\n""""""\n\ngoog_df = ABuSymbolPd.make_kl_df(\'usGOOG\', n_folds=2)\n\n\ndef plot_two_stock(tsla, goog, axs=None):\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe4\xbc\xa0\xe9\x80\x92\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99plt\n    drawer = plt if axs is None else axs\n    # tsla red\n    drawer.plot(tsla, c=\'r\')\n    # google greeen\n    drawer.plot(goog, c=\'g\')\n    # \xe6\x98\xbe\xe7\xa4\xba\xe7\xbd\x91\xe6\xa0\xbc\n    drawer.grid(True)\n    # \xe5\x9b\xbe\xe4\xbe\x8b\xe6\xa0\x87\xe6\xb3\xa8\n    drawer.legend([\'tsla\', \'google\'], loc=\'best\')\n\n\ndef sample_56_1():\n    """"""\n    5.6 \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe8\xa7\x82\xe5\xaf\x9f\xe5\x91\xa8\xe6\x9c\x9f\n    :return:\n    """"""\n    # mean:\xe6\x89\x93\xe5\x8d\xb0\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8cmedian\xef\xbc\x9a\xe6\x89\x93\xe5\x8d\xb0\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0\n    print(round(goog_df.close.mean(), 2), round(goog_df.close.median(), 2))\n    # \xe8\xa1\xa85-3\xe6\x89\x80\xe7\xa4\xba\n    print(\'goog_df.tail():\\n\', goog_df.tail())\n\n    plot_two_stock(tsla_df.close, goog_df.close)\n    plt.title(\'TSLA and Google CLOSE\')\n    # x\xe8\xbd\xb4\xe6\x97\xb6\xe9\x97\xb4\n    plt.xlabel(\'time\')\n    # y\xe8\xbd\xb4\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    plt.ylabel(\'close\')\n    plt.show()\n\n\ndef sample_56_2():\n    """"""\n    5.6 \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe8\xa7\x82\xe5\xaf\x9f\xe5\x91\xa8\xe6\x9c\x9f\n    :return:\n    """"""\n\n    # noinspection PyShadowingNames\n    def two_mean_list(one, two, type_look=\'look_max\'):\n        """"""\n        \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe4\xbf\xa9\xe4\xb8\xaa\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\n        :param one:\n        :param two:\n        :param type_look:\n        :return:\n        """"""\n        one_mean = one.mean()\n        two_mean = two.mean()\n        if type_look == \'look_max\':\n            """"""\n                \xe5\x90\x91\xe8\xbe\x83\xe5\xa4\xa7\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\n            """"""\n            one, two = (one, one_mean / two_mean * two) \\\n                if one_mean > two_mean else (\n                one * two_mean / one_mean, two)\n        elif type_look == \'look_min\':\n            """"""\n                \xe5\x90\x91\xe8\xbe\x83\xe5\xb0\x8f\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\n            """"""\n            one, two = (one * two_mean / one_mean, two) \\\n                if one_mean > two_mean else (\n                one, two * one_mean / two_mean)\n        return one, two\n\n    def regular_std(group):\n        # z-score\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\xe4\xb9\x9f\xe7\xa7\xb0\xe9\x9b\xb6-\xe5\x9d\x87\xe5\x80\xbc\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\n        return (group - group.mean()) / group.std()\n\n    def regular_mm(group):\n        # \xe6\x9c\x80\xe5\xb0\x8f-\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\n        return (group - group.min()) / (group.max() - group.min())\n\n    # 2\xe8\xa1\x8c2\xe5\x88\x97\xef\xbc\x8c4\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\n    _, axs = plt.subplots(nrows=2, ncols=2, figsize=(14, 10))\n\n    # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaaregular_std, \xe5\xa6\x82\xe5\x9b\xbe5-16\xe5\xb7\xa6\xe4\xb8\x8a\xe6\x89\x80\xe7\xa4\xba\n    drawer = axs[0][0]\n    plot_two_stock(regular_std(tsla_df.close), regular_std(goog_df.close),\n                   drawer)\n    drawer.set_title(\'(group - group.mean()) / group.std()\')\n\n    # \xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaaregular_mm\xef\xbc\x8c\xe5\xa6\x82\xe5\x9b\xbe5-16\xe5\x8f\xb3\xe4\xb8\x8a\xe6\x89\x80\xe7\xa4\xba\n    drawer = axs[0][1]\n    plot_two_stock(regular_mm(tsla_df.close), regular_mm(goog_df.close),\n                   drawer)\n    drawer.set_title(\n        \'(group - group.min()) / (group.max() - group.min())\')\n\n    # \xe7\xac\xac\xe4\xb8\x89\xe4\xb8\xaa\xe5\x90\x91\xe8\xbe\x83\xe5\xa4\xa7\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\xef\xbc\x8c\xe5\xa6\x82\xe5\x9b\xbe5-16\xe5\xb7\xa6\xe4\xb8\x8a\xe6\x89\x80\xe7\xa4\xba\n    drawer = axs[1][0]\n    one, two = two_mean_list(tsla_df.close, goog_df.close,\n                             type_look=\'look_max\')\n    plot_two_stock(one, two, drawer)\n    drawer.set_title(\'two_mean_list type_look=look_max\')\n\n    # \xe7\xac\xac\xe5\x9b\x9b\xe4\xb8\xaa\xe5\x90\x91\xe8\xbe\x83\xe5\xb0\x8f\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\xef\xbc\x8c\xe5\xa6\x82\xe5\x9b\xbe5-16\xe5\x8f\xb3\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n    drawer = axs[1][1]\n    one, two = two_mean_list(tsla_df.close, goog_df.close,\n                             type_look=\'look_min\')\n    plot_two_stock(one, two, drawer)\n    drawer.set_title(\'two_mean_list type_look=look_min\')\n    plt.show()\n\n\ndef sample_56_3():\n    """"""\n    5.6 \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe8\xa7\x82\xe5\xaf\x9f\xe5\x91\xa8\xe6\x9c\x9f\n    :return:\n    """"""\n    _, ax1 = plt.subplots()\n    ax1.plot(tsla_df.close, c=\'r\', label=\'tsla\')\n    # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaaax\xe7\x9a\x84\xe6\xa0\x87\xe6\xb3\xa8\n    ax1.legend(loc=2)\n    ax1.grid(False)\n    # \xe5\x8f\x8d\xe5\x90\x91y\xe8\xbd\xb4 twinx\n    ax2 = ax1.twinx()\n    ax2.plot(goog_df.close, c=\'g\', label=\'google\')\n    # \xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaaax\xe7\x9a\x84\xe6\xa0\x87\xe5\xbf\x97\n    ax2.legend(loc=1)\n    plt.show()\n\n\n# noinspection PyTypeChecker\ndef sample_571_1():\n    """"""\n    5.7.1 \xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe7\x9a\x84\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe5\xbc\x8f\n    :return:\n    """"""\n    # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    cs_max = tsla_df.close.max()\n    # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n    cs_min = tsla_df.close.min()\n\n    sp382 = (cs_max - cs_min) * 0.382 + cs_min\n    sp618 = (cs_max - cs_min) * 0.618 + cs_min\n    print(\'\xe8\xa7\x86\xe8\xa7\x89\xe4\xb8\x8a\xe7\x9a\x84382: \' + str(round(sp382, 2)))\n    print(\'\xe8\xa7\x86\xe8\xa7\x89\xe4\xb8\x8a\xe7\x9a\x84618: \' + str(round(sp618, 2)))\n\n    sp382_stats = stats.scoreatpercentile(tsla_df.close, 38.2)\n    sp618_stats = stats.scoreatpercentile(tsla_df.close, 61.8)\n\n    print(\'\xe7\xbb\x9f\xe8\xae\xa1\xe4\xb8\x8a\xe7\x9a\x84382: \' + str(round(sp382_stats, 2)))\n    print(\'\xe7\xbb\x9f\xe8\xae\xa1\xe4\xb8\x8a\xe7\x9a\x84618: \' + str(round(sp618_stats, 2)))\n\n\n# noinspection PyTypeChecker\ndef sample_571_2():\n    """"""\n    5.7.1 \xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe7\x9a\x84\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe5\xbc\x8f\n    :return:\n    """"""\n    from collections import namedtuple\n\n    # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    cs_max = tsla_df.close.max()\n    # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n    cs_min = tsla_df.close.min()\n\n    sp382 = (cs_max - cs_min) * 0.382 + cs_min\n    sp618 = (cs_max - cs_min) * 0.618 + cs_min\n    sp382_stats = stats.scoreatpercentile(tsla_df.close, 38.2)\n    sp618_stats = stats.scoreatpercentile(tsla_df.close, 61.8)\n\n    def plot_golden():\n        # \xe4\xbb\x8e\xe8\xa7\x86\xe8\xa7\x89618\xe5\x92\x8c\xe7\xbb\x9f\xe8\xae\xa1618\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe6\x9b\xb4\xe5\xa4\xa7\xe7\x9a\x84\xe5\x80\xbc\n        above618 = np.maximum(sp618, sp618_stats)\n        # \xe4\xbb\x8e\xe8\xa7\x86\xe8\xa7\x89618\xe5\x92\x8c\xe7\xbb\x9f\xe8\xae\xa1618\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe6\x9b\xb4\xe5\xb0\x8f\xe7\x9a\x84\xe5\x80\xbc\n        below618 = np.minimum(sp618, sp618_stats)\n        # \xe4\xbb\x8e\xe8\xa7\x86\xe8\xa7\x89382\xe5\x92\x8c\xe7\xbb\x9f\xe8\xae\xa1382\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe6\x9b\xb4\xe5\xa4\xa7\xe7\x9a\x84\xe5\x80\xbc\n        above382 = np.maximum(sp382, sp382_stats)\n        # \xe4\xbb\x8e\xe8\xa7\x86\xe8\xa7\x89382\xe5\x92\x8c\xe7\xbb\x9f\xe8\xae\xa1382\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe6\x9b\xb4\xe5\xb0\x8f\xe7\x9a\x84\xe5\x80\xbc\n        below382 = np.minimum(sp382, sp382_stats)\n\n        # \xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\n        plt.plot(tsla_df.close)\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xe8\xa7\x86\xe8\xa7\x89382\n        plt.axhline(sp382, c=\'r\')\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xe7\xbb\x9f\xe8\xae\xa1382\n        plt.axhline(sp382_stats, c=\'m\')\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xe8\xa7\x86\xe8\xa7\x89618\n        plt.axhline(sp618, c=\'g\')\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xe7\xbb\x9f\xe8\xae\xa1618\n        plt.axhline(sp618_stats, c=\'k\')\n\n        # \xe5\xa1\xab\xe5\x85\x85618 red\n        plt.fill_between(tsla_df.index, above618, below618,\n                         alpha=0.5, color=""r"")\n        # \xe5\xa1\xab\xe5\x85\x85382 green\n        plt.fill_between(tsla_df.index, above382, below382,\n                         alpha=0.5, color=""g"")\n\n        # \xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8namedtuple\xe5\x8c\x85\xe8\xa3\x85\xe4\xb8\x8a\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbf\xe8\x8e\xb7\xe5\x8f\x96\n        return namedtuple(\'golden\', [\'above618\', \'below618\', \'above382\',\n                                     \'below382\'])(\n            above618, below618, above382, below382)\n\n    golden = plot_golden()\n\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe7\xbb\x98\xe5\x88\xb6\xe9\xa1\xba\xe5\xba\x8f\xe6\xa0\x87\xe6\xb3\xa8\xe5\x90\x8d\xe7\xa7\xb0\n    plt.legend([\'close\', \'sp382\', \'sp382_stats\', \'sp618\', \'sp618_stats\'],\n               loc=\'best\')\n    plt.show()\n\n    print(\'\xe7\x90\x86\xe8\xae\xba\xe4\xb8\x8a\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe7\x9b\x88\xe5\x88\xa9: {}\'.format(golden.above618 - golden.below382))\n\n    return golden\n\n\ndef sample_572():\n    """"""\n    5.7.2 \xe5\xa4\x9a\xe7\xbb\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x98\xe5\x88\xb6\xe7\xa4\xba\xe4\xbe\x8b\n    :return:\n    """"""\n    from itertools import product\n\n    buy_rate = [0.20, 0.25, 0.30]\n    sell_rate = [0.70, 0.80, 0.90]\n\n    def find_percent_point(percent, y_org, want_max):\n        """"""\n        :param percent: \xe6\xaf\x94\xe4\xbe\x8b\n        :param y_org: close\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n        :param want_max: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xa7\xe7\x9a\x84\xe5\x80\xbc\n        :return:\n        """"""\n        cs_max = y_org.max()\n        cs_min = y_org.min()\n\n        # \xe5\xa6\x82\xe6\x9e\x9cwant_max \xe5\xb0\xb1\xe4\xbd\xbf\xe7\x94\xa8maximum\xe5\x90\xa6\xe5\x88\x99minimum\n        maxmin_mum = np.maximum if want_max else np.minimum\n        # \xe6\xaf\x8f\xe6\xac\xa1\xe9\x83\xbd\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x9f\xe8\xae\xa1\xe4\xb8\x8a\xe5\x92\x8c\xe8\xa7\x86\xe8\xa7\x89\xe4\xb8\x8a\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaewant_max\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xa7\xe7\x9a\x84\xe5\x80\xbcabove\xef\xbc\x8c\xe6\x88\x96\xe5\xb0\x8f\xe7\x9a\x84\xe5\x80\xbcbelow\n        return maxmin_mum(\n            # \xe7\xbb\x9f\xe8\xae\xa1\xe4\xb8\x8a\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\n            stats.scoreatpercentile(y_org, np.round(percent * 100, 1)),\n            # \xe8\xa7\x86\xe8\xa7\x89\xe4\xb8\x8a\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\n            (cs_max - cs_min) * percent + cs_min)\n\n    # \xe5\xad\x98\xe5\x82\xa8\xe7\xbb\x93\xe6\x9e\x9clist\n    result = list()\n    # \xe5\x85\x88\xe5\xb0\x860.382, 0.618\xe8\xbf\x99\xe4\xb8\x80\xe7\xbb\x84\xe6\x94\xbe\xe5\x85\xa5\xe7\xbb\x93\xe6\x9e\x9c\xe9\x98\x9f\xe5\x88\x97\xe4\xb8\xad\n\n    golden = sample_571_2()\n    result.append(\n        (0.382, 0.618, round(golden.above618 - golden.below382, 2)))\n\n    # \xe5\xb0\x86buy_rate\xe5\x92\x8csell_rate\xe5\x81\x9a\xe7\xac\x9b\xe5\x8d\xa1\xe5\xb0\x94\xe7\xa7\xaf\xe6\x8e\x92\xe5\x88\x97\xe5\x90\x84\xe7\xa7\x8d\xe7\xbb\x84\xe5\x90\x88\n    for (buy, sell) in product(buy_rate, sell_rate):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe6\xaf\x94\xe4\xbe\x8bwant_max\xe4\xb8\xbaFalse\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8f\xaa\xe8\xae\xa1\xe7\xae\x97\xe7\x90\x86\xe8\xae\xba\xe6\x9c\x80\xe9\xab\x98\xe7\x9b\x88\xe5\x88\xa9\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\x80below\n        profit_below = find_percent_point(buy, tsla_df.close, False)\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8d\x96\xe5\x87\xba\xe6\xaf\x94\xe4\xbe\x8bwant_max\xe4\xb8\xbaTrue\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8f\xaa\xe8\xae\xa1\xe7\xae\x97\xe7\x90\x86\xe8\xae\xba\xe6\x9c\x80\xe9\xab\x98\xe7\x9b\x88\xe5\x88\xa9\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\x80above\n        profit_above = find_percent_point(sell, tsla_df.close, True)\n        # \xe6\x9c\x80\xe7\xbb\x88\xe5\xb0\x86\xe4\xb9\xb0\xe5\x85\xa5\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe7\x90\x86\xe8\xae\xba\xe6\x9c\x80\xe9\xab\x98\xe7\x9b\x88\xe5\x88\xa9append\n        result.append((buy, sell,\n                       round(profit_above - profit_below, 2)))\n    # \xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8np.array\xe5\xa5\x97\xe4\xb8\x8aresult\n    result = np.array(result)\n    print(\'result:\\n\', result)\n\n    # 1. \xe9\x80\x9a\xe8\xbf\x87scatter\xe7\x82\xb9\xe5\x9b\xbe\n    cmap = plt.get_cmap(\'jet\', 20)\n    cmap.set_under(\'gray\')\n    fig, ax = plt.subplots(figsize=(8, 5))\n    # scatter\xe7\x82\xb9\xe5\x9b\xbe\xef\xbc\x8cresult[:, 0]:x\xef\xbc\x8cresult[:, 1]:y, result[:, 2]:c\n    cax = ax.scatter(result[:, 0], result[:, 1], c=result[:, 2],\n                     cmap=cmap, vmin=np.min(result[:, 2]),\n                     vmax=np.max(result[:, 2]))\n    fig.colorbar(cax, label=\'max profit\', extend=\'min\')\n    plt.grid(True)\n    plt.xlabel(\'buy rate\')\n    plt.ylabel(\'sell rate\')\n    plt.show()\n\n    # 2. \xe9\x80\x9a\xe8\xbf\x87mpl_toolkits.mplot3d\n    # noinspection PyUnresolvedReferences\n    from mpl_toolkits.mplot3d import Axes3D\n\n    fig = plt.figure(figsize=(9, 6))\n    ax = fig.gca(projection=\'3d\')\n    ax.view_init(30, 60)\n    ax.scatter3D(result[:, 0], result[:, 1], result[:, 2], c=\'r\', s=50,\n                 cmap=\'spring\')\n    ax.set_xlabel(\'buy rate\')\n    ax.set_ylabel(\'sell rate\')\n    ax.set_zlabel(\'max profit\')\n    plt.show()\n\n\n# noinspection PyTypeChecker\ndef sample_581():\n    """"""\n    5.8.1 MACD\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return:\n    """"""\n    from abupy import nd\n    nd.macd.plot_macd_from_klpd(tsla_df)\n\n\ndef sample_582_1():\n    """"""\n    5.8.2_1 ATR\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96, \xe4\xbd\xbf\xe7\x94\xa8talib\n    :return:\n    """"""\n    from abupy import nd\n    nd.atr.plot_atr_from_klpd(tsla_df)\n\nif __name__ == ""__main__"":\n    sample_511()\n    # sample_512()\n    # sample_513()\n    # sample_52()\n    # sample_531_1()\n    # sample_531_2()\n    # sample_532()\n    # sample_533()\n    # sample_54_1()\n    # sample_54_2()\n    # sample_55_1()\n    # sample_55_2()\n    # sample_56_1()\n    # sample_56_2()\n    # sample_56_3()\n    # sample_571_1()\n    # sample_571_2()\n    # sample_572()\n    # sample_581()\n    # sample_582_1()\n'"
python/c6.py,37,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport warnings\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import ABuSymbolPd\nfrom abupy import six, xrange\n\nfrom abc import ABCMeta, abstractmethod\n\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\ntsla_close = ABuSymbolPd.make_kl_df(\'usTSLA\').close\n# x\xe5\xba\x8f\xe5\x88\x97: 0\xef\xbc\x8c1\xef\xbc\x8c2, ...len(tsla_close)\nx = np.arange(0, tsla_close.shape[0])\n# \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\ny = tsla_close.values\n\n\n""""""\n    \xe7\xac\xac\xe5\x85\xad\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe5\xb7\xa5\xe5\x85\xb7\xe2\x80\x94\xe2\x80\x94\xe6\x95\xb0\xe5\xad\xa6\xef\xbc\x9a\xe4\xbd\xa0\xe4\xb8\x80\xe7\x94\x9f\xe7\x9a\x84\xe8\xbf\xbd\xe6\xb1\x82\xe5\x88\xb0\xe5\xba\x95\xe8\x83\xbd\xe5\xb8\xa6\xe6\x9d\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe5\xb9\xb8\xe7\xa6\x8f\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_611_1(show=True):\n    """"""\n    6.1.1 \xe7\xba\xbf\xe6\x80\xa7\xe5\x9b\x9e\xe5\xbd\x92\n    :return:\n    """"""\n    import statsmodels.api as sm\n    from statsmodels import regression\n\n    def regress_y(_y):\n        _y = _y\n        # x\xe5\xba\x8f\xe5\x88\x97: 0\xef\xbc\x8c1\xef\xbc\x8c2, ...len(y)\n        _x = np.arange(0, len(_y))\n        _x = sm.add_constant(_x)\n        # \xe4\xbd\xbf\xe7\x94\xa8OLS\xe5\x81\x9a\xe6\x8b\x9f\xe5\x90\x88\n        _model = regression.linear_model.OLS(_y, _x).fit()\n        return _model\n\n    model = regress_y(y)\n    b = model.params[0]\n    k = model.params[1]\n    # y = kx + b\n    y_fit = k * x + b\n    if show:\n        plt.plot(x, y)\n        plt.plot(x, y_fit, \'r\')\n        plt.show()\n        # summary\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x8b\x9f\xe5\x90\x88\xe6\xa6\x82\xe8\xbf\xb0\xef\xbc\x8c\xe8\xa1\xa86-1\xe6\x89\x80\xe7\xa4\xba\n        print(model.summary())\n    return y_fit\n\n\n# noinspection PyPep8Naming\ndef sample_611_2():\n    """"""\n    6.1.1 \xe7\xba\xbf\xe6\x80\xa7\xe5\x9b\x9e\xe5\xbd\x92\n    :return:\n    """"""\n    y_fit = sample_611_1(show=False)\n\n    MAE = sum(np.abs(y - y_fit)) / len(y)\n    print(\'\xe5\x81\x8f\xe5\xb7\xae\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe4\xb9\x8b\xe5\x92\x8c(MAE)={}\'.format(MAE))\n    MSE = sum(np.square(y - y_fit)) / len(y)\n    print(\'\xe5\x81\x8f\xe5\xb7\xae\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe4\xb9\x8b\xe5\x92\x8c(MSE)={}\'.format(MSE))\n    RMSE = np.sqrt(sum(np.square(y - y_fit)) / len(y))\n    print(\'\xe5\x81\x8f\xe5\xb7\xae\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe4\xb9\x8b\xe5\x92\x8c(RMSE)={}\'.format(RMSE))\n\n    from sklearn import metrics\n    print(\'sklearn\xe5\x81\x8f\xe5\xb7\xae\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe4\xb9\x8b\xe5\x92\x8c(MAE)={}\'.format(metrics.mean_absolute_error(y, y_fit)))\n    print(\'sklearn\xe5\x81\x8f\xe5\xb7\xae\xe5\xb9\xb3\xe6\x96\xb9(MSE)={}\'.format(metrics.mean_squared_error(y, y_fit)))\n    print(\'sklearn\xe5\x81\x8f\xe5\xb7\xae\xe5\xb9\xb3\xe6\x96\xb9\xe5\x92\x8c\xe5\xbc\x80\xe5\xb9\xb3\xe6\x96\xb9(RMSE)={}\'.format(np.sqrt(metrics.mean_squared_error(y, y_fit))))\n\n\n# noinspection PyCallingNonCallable\ndef sample_612():\n    """"""\n    6.1.2 \xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x9b\x9e\xe5\xbd\x92\n    :return:\n    """"""\n    import itertools\n\n    # \xe7\x94\x9f\xe6\x88\x909\xe4\xb8\xaasubplots 3*3\n    _, axs = plt.subplots(nrows=3, ncols=3, figsize=(15, 15))\n\n    # \xe5\xb0\x86 3 * 3\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xbf\xe6\x80\xa7list\n    axs_list = list(itertools.chain.from_iterable(axs))\n    # 1-9\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x9b\x9e\xe5\xbd\x92\n    poly = np.arange(1, 10, 1)\n    for p_cnt, ax in zip(poly, axs_list):\n        # \xe4\xbd\xbf\xe7\x94\xa8polynomial.Chebyshev.fit\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\n        p = np.polynomial.Chebyshev.fit(x, y, p_cnt)\n        # \xe4\xbd\xbf\xe7\x94\xa8p\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xaf\xb9x\xe5\xba\x8f\xe5\x88\x97\xe4\xbb\xa3\xe4\xba\xba\xe5\x8d\xb3\xe5\xbe\x97\xe5\x88\xb0\xe6\x8b\x9f\xe5\x90\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n        y_fit = p(x)\n        # \xe5\xba\xa6\xe9\x87\x8fmse\xe5\x80\xbc\n        from sklearn import metrics\n        mse = metrics.mean_squared_error(y, y_fit)\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe5\x92\x8cmse\xe8\xaf\xaf\xe5\xb7\xae\xe5\xa4\xa7\xe5\xb0\x8f\xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe9\xa2\x98\n        ax.set_title(\'{} poly MSE={}\'.format(p_cnt, mse))\n        ax.plot(x, y, \'\', x, y_fit, \'r.\')\n    plt.show()\n\n\ndef sample_613():\n    """"""\n    6.1.3 \xe6\x8f\x92\xe5\x80\xbc\n    :return:\n    """"""\n    from scipy.interpolate import interp1d, splrep, splev\n\n    # \xe7\xa4\xba\xe4\xbe\x8b\xe4\xb8\xa4\xe7\xa7\x8d\xe6\x8f\x92\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f\n    _, axs = plt.subplots(nrows=1, ncols=2, figsize=(14, 5))\n\n    # \xe7\xba\xbf\xe6\x80\xa7\xe6\x8f\x92\xe5\x80\xbc\n    linear_interp = interp1d(x, y)\n    # axs[0]\xe5\xb7\xa6\xe8\xbe\xb9\xe7\x9a\x84\n    axs[0].set_title(\'interp1d\')\n    # \xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe5\x9d\x90\xe6\xa0\x87\xe7\xb3\xbb\xe4\xb8\x8b\xef\xbc\x8c\xe5\x90\x8c\xe6\xa0\xb7\xe7\x9a\x84x\xef\xbc\x8c\xe6\x8f\x92\xe5\x80\xbc\xe7\x9a\x84y\xe5\x80\xbc\xe4\xbd\xbfr.\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x88\xe7\xba\xa2\xe8\x89\xb2\xe7\x82\xb9\xef\xbc\x89\n    axs[0].plot(x, y, \'\', x, linear_interp(x), \'r.\')\n\n    # B-spline\xe6\x8f\x92\xe5\x80\xbc\n    splrep_interp = splrep(x, y)\n    # axs[1]\xe5\x8f\xb3\xe8\xbe\xb9\xe7\x9a\x84\n    axs[1].set_title(\'splrep\')\n    # #\xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe5\x9d\x90\xe6\xa0\x87\xe7\xb3\xbb\xe4\xb8\x8b\xef\xbc\x8c\xe5\x90\x8c\xe6\xa0\xb7\xe7\x9a\x84x\xef\xbc\x8c\xe6\x8f\x92\xe5\x80\xbc\xe7\x9a\x84y\xe5\x80\xbc\xe4\xbd\xbfg.\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x88\xe7\xbb\xbf\xe8\x89\xb2\xe7\x82\xb9\xef\xbc\x89\n    axs[1].plot(x, y, \'\', x, splev(x, splrep_interp), \'g.\')\n    plt.show()\n\n\n""""""\n    6.2 \xe8\x92\x99\xe7\x89\xb9\xe5\x8d\xa1\xe6\xb4\x9b\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8e\xe5\x87\xb8\xe4\xbc\x98\xe5\x8c\x96\n    6.2.1 \xe4\xbd\xa0\xe4\xb8\x80\xe7\x94\x9f\xe7\x9a\x84\xe8\xbf\xbd\xe6\xb1\x82\xe5\x88\xb0\xe5\xba\x95\xe8\x83\xbd\xe5\xb8\xa6\xe6\x9d\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe5\xb9\xb8\xe7\xa6\x8f\n""""""\n\n# \xe6\xaf\x8f\xe4\xb8\xaa\xe4\xba\xba\xe5\xb9\xb3\xe5\x9d\x87\xe5\xaf\xbf\xe5\x91\xbd\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x98\xaf75\xe5\xb9\xb4\xef\xbc\x8c\xe7\xba\xa675*365=27375\xe5\xa4\xa9\nK_INIT_LIVING_DAYS = 27375\n\n\nclass Person(object):\n    """"""\n        \xe4\xba\xba\xe7\xb1\xbb\n    """"""\n\n    def __init__(self):\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\xba\xe5\xb9\xb3\xe5\x9d\x87\xe8\x83\xbd\xe6\xb4\xbb\xe7\x9a\x84\xe5\xaf\xbf\xe5\x91\xbd\n        self.living = K_INIT_LIVING_DAYS\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\n        self.happiness = 0\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb4\xa2\xe5\xaf\x8c\xe5\x80\xbc\n        self.wealth = 0\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\n        self.fame = 0\n        # \xe6\xb4\xbb\xe7\x9d\x80\xe7\x9a\x84\xe7\xac\xac\xe5\x87\xa0\xe5\xa4\xa9\n        self.living_day = 0\n\n    def live_one_day(self, seek):\n        """"""\n        \xe6\xaf\x8f\xe5\xa4\xa9\xe5\x8f\xaa\xe8\x83\xbd\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x80\xe4\xb8\xaaseek\xef\xbc\x8c\xe8\xbf\x99\xe4\xb8\xaaseek\xe5\x86\xb3\xe5\xae\x9a\xe4\xba\x86\xe4\xbd\xa0\xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\x98\xaf\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\n        seek\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8b\xe9\x9d\xa2\xe5\xb0\x86\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84BaseSeekDay\n        :param seek:\n        :return:\n        """"""\n        # \xe8\xb0\x83\xe7\x94\xa8\xe6\xaf\x8f\xe4\xb8\xaa\xe7\x8b\xac\xe7\x89\xb9\xe7\x9a\x84BaseSeekDay\xe7\xb1\xbb\xe9\x83\xbd\xe4\xbc\x9a\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84do_seek_day\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe8\x8e\xb7\n        consume_living, happiness, wealth, fame = seek.do_seek_day()\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe8\xa6\x81\xe5\x87\x8f\xe5\x8e\xbb\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9bseek\xe5\x89\x8d\xe9\x9d\xa2\xe8\xbf\x98\xe4\xbc\x9a\xe5\xa2\x9e\xe5\x8a\xa0\xe7\x94\x9f\xe5\x91\xbd\n        self.living -= consume_living\n        # seek\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe7\xa7\xaf\xe7\xb4\xaf\n        self.happiness += happiness\n        # seek\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\n        self.wealth += wealth\n        # seek\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\xa7\xaf\xe7\xb4\xaf\n        self.fame += fame\n        # \xe6\xb4\xbb\xe5\xae\x8c\xe8\xbf\x99\xe4\xb8\x80\xe5\xa4\xa9\xe4\xba\x86\n        self.living_day += 1\n\n\nclass BaseSeekDay(six.with_metaclass(ABCMeta, object)):\n    def __init__(self):\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\n        self.living_consume = 0\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\n        self.happiness_base = 0\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\n        self.wealth_base = 0\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\n        self.fame_base = 0\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.living_factor = [0]\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.happiness_factor = [0]\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.wealth_factor = [0]\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.fame_factor = [0]\n\n        # \xe8\xbf\xbd\xe6\xb1\x82\xe4\xba\x86\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\xe4\xba\x86\xe8\xbf\x99\xe4\xb8\x80\xe7\x94\x9f\n        self.do_seek_day_cnt = 0\n        # \xe5\xad\x90\xe7\xb1\xbb\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb8\xb8\xe6\x95\xb0\xe5\x8f\x8a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\xe8\xae\xbe\xe7\xbd\xae\n        self._init_self()\n\n    @abstractmethod\n    def _init_self(self, *args, **kwargs):\n        # \xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xe7\xad\x89\xe5\xb8\xb8\xe6\x95\xb0\xe8\xae\xbe\xe7\xbd\xae\n        pass\n\n    @abstractmethod\n    def _gen_living_days(self, *args, **kwargs):\n        # \xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        pass\n\n    def do_seek_day(self):\n        """"""\n        \xe6\xaf\x8f\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe8\xbf\xbd\xe6\xb1\x82\xe5\x85\xb7\xe4\xbd\x93seek\n        :return:\n        """"""\n        # \xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97=living_consume:\xe6\xb6\x88\xe8\x80\x97\xe5\xb8\xb8\xe6\x95\xb0 * happiness_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.living_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.living_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaaliving_factor[-1]\n            consume_living = \\\n                self.living_factor[-1] * self.living_consume\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8aliving_factor\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\n            # HealthSeekDay\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xef\xbc\x8cliving_factor\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x80\xbc\xe5\x8d\xb3\xe7\x94\xb1\xe8\xb4\x9f\xe5\x80\xbc->\xe6\xad\xa3\xe5\x80\xbc\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x90\xe7\xb1\xbbliving_factor\xe4\xbc\x9a\xe6\x9c\x89\xe8\x87\xaa\xe5\xb7\xb1\xe7\x89\xb9\xe7\x82\xb9\xe7\x9a\x84\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\xe5\x8f\x8a\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4\xe6\xaf\x8f\xe4\xb8\xaa\n            # \xe8\xbf\xbd\xe6\xb1\x82\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe9\x9a\x8f\xe7\x9d\x80\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe5\x8f\x98\xe5\x8c\x96\xe4\xb8\x8d\xe4\xb8\x80\n            consume_living = self.living_factor[self.do_seek_day_cnt] \\\n                             * self.living_consume\n        # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0=happiness_base:\xe5\xb9\xb8\xe7\xa6\x8f\xe5\xb8\xb8\xe6\x95\xb0 * happiness_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.happiness_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.happiness_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            # \xe7\x94\xb1\xe4\xba\x8ehappiness_factor\xe5\x80\xbc\xe7\x94\xb1:n\xe2\x80\x94>0 \xe6\x89\x80\xe4\xbb\xa5happiness_factor[-1]=0\n            # \xe5\x8d\xb3\xe9\x9a\x8f\xe7\x9d\x80\xe8\xbf\xbd\xe6\xb1\x82\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\x8b\xe7\x89\xa9\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe8\xbf\x87\xe5\xa4\x9a\xe5\x90\x8e\xe4\xbc\x9a\xe5\x8f\x98\xe7\x9a\x84\xe6\xb2\xa1\xe6\x9c\x89\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\n            happiness = self.happiness_factor[\n                            -1] * self.happiness_base\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8ahappiness_factor\n            # happiness_factor\xe5\xad\x90\xe7\xb1\xbb\xe7\x9a\x84\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe8\x88\xac\xe6\x98\xaf\xe4\xbb\x8e\xe9\xab\x98\xef\xbc\x8d>\xe4\xbd\x8e\xe5\x8f\x98\xe5\x8c\x96\n            happiness = self.happiness_factor[\n                            self.do_seek_day_cnt] * self.happiness_base\n        # \xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf=wealth_base:\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0 * wealth_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.wealth_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.wealth_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            wealth = self.wealth_factor[-1] * self.wealth_base\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe8\xb4\xa2\xe5\xaf\x8c\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8awealth_factor\n            wealth = self.wealth_factor[\n                         self.do_seek_day_cnt] * self.wealth_base\n        # \xe6\x9d\x83\xe5\x88\xa9\xe7\xa7\xaf\xe7\xb4\xaf=fame_base:\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0 * fame_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.fame_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.fame_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            fame = self.fame_factor[-1] * self.fame_base\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8afame_factor\n            fame = self.fame_factor[\n                       self.do_seek_day_cnt] * self.fame_base\n        # \xe8\xbf\xbd\xe6\xb1\x82\xe4\xba\x86\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\xe4\xba\x86\xe8\xbf\x99\xe4\xb8\x80\xe7\x94\x9f + 1\n        self.do_seek_day_cnt += 1\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe8\xbf\x99\xe4\xb8\x80\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\xb9\xb8\xe7\xa6\x8f\xef\xbc\x8c\xe8\xb4\xa2\xe5\xaf\x8c\xef\xbc\x8c\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\n        return consume_living, happiness, wealth, fame\n\n\ndef regular_mm(group):\n    # \xe6\x9c\x80\xe5\xb0\x8f-\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\n    return (group - group.min()) / (group.max() - group.min())\n\n\n""""""\n    HealthSeekDay\n""""""\n\n\nclass HealthSeekDay(BaseSeekDay):\n    """"""\n        HealthSeekDay\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9:\n        \xe5\xbd\xa2\xe8\xb1\xa1\xef\xbc\x9a\xe5\x81\xa5\xe8\xba\xab\xef\xbc\x8c\xe6\x97\x85\xe6\xb8\xb8\xef\xbc\x8c\xe5\xa8\xb1\xe4\xb9\x90\xef\xbc\x8c\xe5\x81\x9a\xe6\x84\x9f\xe5\x85\xb4\xe8\xb6\xa3\xe7\x9a\x84\xe4\xba\x8b\xe6\x83\x85\xe3\x80\x82\n        \xe6\x8a\xbd\xe8\xb1\xa1\xef\xbc\x9a\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe3\x80\x82\n    """"""\n\n    def _init_self(self):\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d1\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa81\xe5\xa4\xa9\n        self.living_consume = 1\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d1\n        self.happiness_base = 1\n        # \xe8\xae\xbe\xe5\xae\x9a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self._gen_living_days()\n\n    def _gen_living_days(self):\n        # \xe5\x8f\xaa\xe7\x94\x9f\xe6\x88\x9012000\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84happiness_factor\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe7\x94\xb11\xef\xbc\x8d>0\n        # \xe6\x89\x80\xe4\xbb\xa5\xe5\xa4\xa7\xe4\xba\x8e12000\xe6\xac\xa1\xe7\x9a\x84\xe8\xbf\xbd\xe6\xb1\x82\xe9\x83\xbd\xe5\xb0\x86\xe5\x8f\xaa\xe6\x98\xaf\xe5\x8d\x95\xe7\xba\xaf\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x8d\xe5\xa2\x9e\xe5\x8a\xa0\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\n        # \xe5\x8d\xb3\xe9\x9a\x8f\xe7\x9d\x80\xe5\x81\x9a\xe4\xb8\x80\xe4\xbb\xb6\xe4\xba\x8b\xe6\x83\x85\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe8\xb6\x8a\xe6\x9d\xa5\xe8\xb6\x8a\xe5\xa4\x9a\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\xe8\xb6\x8a\xe6\x9d\xa5\xe8\xb6\x8a\xe4\xbd\x8e\xef\xbc\x8c\xe7\x9b\xb4\xe5\x88\xb0\xe5\xae\x8c\xe5\x85\xa8\xe4\xbd\x93\xe4\xbc\x9a\xe4\xb8\x8d\xe5\x88\xb0\xe5\xb9\xb8\xe7\xa6\x8f\n        days = np.arange(1, 12000)\n        # \xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe9\x80\x89\xe7\x94\xa8sqrt, \xe5\xbd\xb1\xe5\x93\x8d\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\n        living_days = np.sqrt(days)\n\n        """"""\n            \xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe7\x94\xb1-1->1, \xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe4\xb8\x80\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\n            \xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe4\xb8\xba\xe8\xb4\x9f\xe5\xa2\x9e\xe9\x95\xbf\xef\xbc\x8c\xe5\xbb\xb6\xe9\x95\xbf\xe4\xba\x86\xe7\x94\x9f\xe5\x91\xbd\xef\xbc\x8c\xe9\x9a\x8f\xe7\x9d\x80\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe4\xb8\x8d\xe6\x96\xad\xe5\xa2\x9e\xe5\xa4\x9a\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe8\xbd\xac\xe4\xb8\xba\xe6\xad\xa3\n            \xe6\x95\xb0\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8d\xb3\xe4\xbd\xbf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xba\xe5\xa4\xa9\xe5\xa4\xa9\xe9\x94\xbb\xe7\x82\xbc\xe8\xba\xab\xe4\xbd\x93\xef\xbc\x8c\xe5\xa4\xa9\xe5\xa4\xa9\xe5\x90\x83\xe8\x90\xa5\xe5\x85\xbb\xe5\x93\x81\xef\xbc\x8c\xe4\xb9\x9f\xe8\xbf\x98\xe6\x98\xaf\xe4\xbc\x9a\xe6\x9c\x89\xe8\x87\xaa\xe7\x84\xb6\xe6\xad\xbb\xe4\xba\xa1\xe7\x9a\x84\xe9\x82\xa3\n            \xe4\xb8\x80\xe5\xa4\xa9\n        """"""\n        # *2-1\xe7\x9a\x84\xe7\x9b\xae\xe7\x9a\x84:regular_mm\xe5\x9c\xa80-1\xe4\xb9\x8b\xe9\x97\xb4,HealthSeekDay\xe8\xa6\x81\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xef\xbc\x8d1\xef\xbc\x8c1\xe4\xb9\x8b\xe9\x97\xb4\n        self.living_factor = regular_mm(living_days) * 2 - 1\n        # \xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa81-0\xe4\xb9\x8b\xe9\x97\xb4 [::-1]: \xe5\xb0\x860->1\xe8\xbd\xac\xe6\x8d\xa2\xe5\x88\xb01->0\n        self.happiness_factor = regular_mm(days)[::-1]\n\n\ndef sample_621_1():\n    """"""\n    6.2.1_1 \xe4\xbd\xa0\xe4\xb8\x80\xe7\x94\x9f\xe7\x9a\x84\xe6\x95\x85\xe4\xba\x8b\xef\xbc\x9aHealthSeekDay\n    :return:\n    """"""\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x91\n    me = Person()\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\n    seek_health = HealthSeekDay()\n    while me.living > 0:\n        # \xe5\x8f\xaa\xe8\xa6\x81\xe8\xbf\x98\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xb0\xb1\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\n        me.live_one_day(seek_health)\n\n    print(\'\xe5\x8f\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\xe6\xb4\xbb\xe4\xba\x86{}\xe5\xb9\xb4\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0{},\xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb4\xa2\xe5\xaf\x8c{},\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b{}\'.format\n          (round(me.living_day / 365, 2), round(me.happiness, 2),\n           me.wealth, me.fame))\n\n    plt.plot(seek_health.living_factor * seek_health.living_consume)\n    plt.plot(seek_health.happiness_factor * seek_health.happiness_base)\n    plt.legend([\'living_factor\', \'happiness_factor\'], loc=\'best\')\n    plt.show()\n\n\n""""""\n    StockSeekDay\n""""""\n\n\nclass StockSeekDay(BaseSeekDay):\n    """"""\n        StockSeekDay\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9:\n        \xe5\xbd\xa2\xe8\xb1\xa1\xef\xbc\x9a\xe5\x81\x9a\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8a\x95\xe8\xb5\x84\xe8\xb5\x9a\xe9\x92\xb1\xe7\x9a\x84\xe4\xba\x8b\xe6\x83\x85\xe3\x80\x82\n        \xe6\x8a\xbd\xe8\xb1\xa1\xef\xbc\x9a\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\n    """"""\n\n    def _init_self(self, show=False):\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d2\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa82\xe5\xa4\xa9\n        self.living_consume = 2\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d0.5\n        self.happiness_base = 0.5\n        # \xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d10\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d0\n        self.wealth_base = 10\n        # \xe8\xae\xbe\xe5\xae\x9a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self._gen_living_days()\n\n    def _gen_living_days(self):\n        # \xe5\x8f\xaa\xe7\x94\x9f\xe6\x88\x9010000\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n        days = np.arange(1, 10000)\n        # \xe9\x92\x88\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97living_factor\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x98\xe6\x98\xafsqrt\n        living_days = np.sqrt(days)\n        # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x83\x8fHealthSeekDay\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5regular_mm \xe5\x8d\xb3:0->1\n        self.living_factor = regular_mm(living_days)\n\n        # \xe9\x92\x88\xe5\xaf\xb9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86np.power4\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\xe6\xaf\x94sqrt\xe5\xbf\xab\n        happiness_days = np.power(days, 4)\n        # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe4\xbc\x9a\xe5\xbf\xab\xe9\x80\x9f\xe9\x80\x92\xe5\x87\x8f\xe7\x94\xb11->0\n        self.happiness_factor = regular_mm(happiness_days)[::-1]\n\n        """"""\n            \xe8\xbf\x99\xe9\x87\x8c\xe7\xae\x80\xe5\x8d\x95\xe8\xae\xbe\xe5\xae\x9awealth_factor=living_factor\n            living_factor(0-1), \xe5\xaf\xbc\xe8\x87\xb4wealth_factor(0-1), \xe5\x8d\xb3\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb6\x8a\xe5\x88\xb0\n            \xe5\x90\x8e\xe9\x9d\xa2\xe8\xb6\x8a\xe6\x9c\x89\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe9\x80\x9f\xe5\xba\xa6\xe8\xb6\x8a\xe5\xbf\xab\xef\xbc\x8c\xe5\xa4\xb4\xe4\xb8\x80\xe4\xb8\xaa100\xe4\xb8\x87\xe6\x9c\x80\xe9\x9a\xbe\xe8\xb5\x9a\n        """"""\n        self.wealth_factor = self.living_factor\n\n\ndef sample_621_2():\n    """"""\n    6.2.1_2 \xe4\xbd\xa0\xe4\xb8\x80\xe7\x94\x9f\xe7\x9a\x84\xe6\x95\x85\xe4\xba\x8b\xef\xbc\x9aStockSeekDay\n    :return:\n    """"""\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x91\n    me = Person()\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\n    seek_stock = StockSeekDay()\n    while me.living > 0:\n        # \xe5\x8f\xaa\xe8\xa6\x81\xe8\xbf\x98\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xb0\xb1\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\n        me.live_one_day(seek_stock)\n\n    print(\'\xe5\x8f\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe6\xb4\xbb\xe4\xba\x86{}\xe5\xb9\xb4\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0{}, \xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb4\xa2\xe5\xaf\x8c{}, \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b{}\'.format\n          (round(me.living_day / 365, 2), round(me.happiness, 2),\n           round(me.wealth, 2), me.fame))\n    plt.plot(seek_stock.living_factor * seek_stock.living_consume)\n    plt.plot(seek_stock.happiness_factor * seek_stock.happiness_base)\n    plt.legend([\'living_factor\', \'happiness_factor\'], loc=\'best\')\n    plt.show()\n\n\n""""""\n    FameSeekDay\n""""""\n\n\nclass FameSeekDay(BaseSeekDay):\n    """"""\n        FameTask\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9:\n        \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\n    """"""\n\n    def _init_self(self):\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d3\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa83\xe5\xa4\xa9\n        self.living_consume = 3\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d0.6\n        self.happiness_base = 0.6\n        # \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d10\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d0\n        self.fame_base = 10\n        # \xe8\xae\xbe\xe5\xae\x9a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self._gen_living_days()\n\n    def _gen_living_days(self):\n        # \xe5\x8f\xaa\xe7\x94\x9f\xe6\x88\x9012000\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n        days = np.arange(1, 12000)\n        # \xe9\x92\x88\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97living_factor\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x98\xe6\x98\xafsqrt\n        living_days = np.sqrt(days)\n        # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x83\x8fHealthSeekDay\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5regular_mm \xe5\x8d\xb3:0->1\n        self.living_factor = regular_mm(living_days)\n\n        # \xe9\x92\x88\xe5\xaf\xb9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86np.power2\n        # \xe5\x8d\xb3\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\xe6\xaf\x94StockSeekDay\xe6\x85\xa2\xe4\xbd\x86\xe6\xaf\x94HealthSeekDay\xe5\xbf\xab\n        happiness_days = np.power(days, 2)\n        # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe9\x80\x92\xe5\x87\x8f\xe7\x94\xb11->0\n        self.happiness_factor = regular_mm(happiness_days)[::-1]\n\n        # \xe8\xbf\x99\xe9\x87\x8c\xe7\xae\x80\xe5\x8d\x95\xe8\xae\xbe\xe5\xae\x9afame_factor=living_factor\n        self.fame_factor = self.living_factor\n\n\ndef sample_621_3():\n    """"""\n    6.2.1_3 \xe4\xbd\xa0\xe4\xb8\x80\xe7\x94\x9f\xe7\x9a\x84\xe6\x95\x85\xe4\xba\x8b\xef\xbc\x9aFameSeekDay\n    :return:\n    """"""\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x91\n    me = Person()\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\n    seek_fame = FameSeekDay()\n    while me.living > 0:\n        # \xe5\x8f\xaa\xe8\xa6\x81\xe8\xbf\x98\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xb0\xb1\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\n        me.live_one_day(seek_fame)\n\n    print(\'\xe5\x8f\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe6\xb4\xbb\xe4\xba\x86{}\xe5\xb9\xb4\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0{}, \xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb4\xa2\xe5\xaf\x8c{}, \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b{}\'.format\n          (round(me.living_day / 365, 2), round(me.happiness, 2),\n           round(me.wealth, 2), round(me.fame, 2)))\n\n    plt.plot(seek_fame.living_factor * seek_fame.living_consume)\n    plt.plot(seek_fame.happiness_factor * seek_fame.happiness_base)\n    plt.legend([\'living_factor\', \'happiness_factor\'], loc=\'best\')\n    plt.show()\n\n\n""""""\n    6.2.2 \xe4\xbd\xbf\xe7\x94\xa8\xe8\x92\x99\xe7\x89\xb9\xe5\x8d\xa1\xe6\xb4\x9b\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xa1\xe7\xae\x97\xe6\x80\x8e\xe6\xa0\xb7\xe5\xba\xa6\xe8\xbf\x87\xe4\xb8\x80\xe7\x94\x9f\xe6\x9c\x80\xe5\xb9\xb8\xe7\xa6\x8f\n""""""\n\n\ndef my_life(weights):\n    """"""\n        \xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d:weights[0]\n        \xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d:weights[1]\n        \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d:weights[2]\n    """"""\n    # \xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\n    seek_health = HealthSeekDay()\n    # \xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\n    seek_stock = StockSeekDay()\n    # \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\n    seek_fame = FameSeekDay()\n\n    # \xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaalist\xe4\xb8\xad\xe5\xaf\xb9\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x8b\xe9\x9d\xa2np.random.choice\xe4\xb8\xad\xe7\x9a\x84index[0, 1, 2]\n    seek_list = [seek_health, seek_stock, seek_fame]\n\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x91\n    me = Person()\n    # \xe5\x8a\xa0\xe6\x9d\x83\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe3\x80\x8280000\xe5\xa4\xa9\xe8\x82\xaf\xe5\xae\x9a\xe5\xa4\x9f\xe4\xba\x86, 80000\xe5\xa4\xa9\xe5\xbf\xab220\xe5\xb9\xb4\xe4\xba\x86\xe3\x80\x82\xe3\x80\x82\xe3\x80\x82\n    seek_choice = np.random.choice([0, 1, 2], 80000, p=weights)\n\n    while me.living > 0:\n        # \xe8\xbf\xbd\xe6\xb1\x82\xe4\xbb\x8e\xe5\x8a\xa0\xe6\x9d\x83\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84\n        seek_ind = seek_choice[me.living_day]\n        seek = seek_list[seek_ind]\n        # \xe5\x8f\xaa\xe8\xa6\x81\xe8\xbf\x98\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xb0\xb1\xe8\xbf\xbd\xe6\xb1\x82\n        me.live_one_day(seek)\n    return round(me.living_day / 365, 2), round(me.happiness, 2), round(me.wealth, 2), round(me.fame, 2)\n\n\ndef sample_622():\n    """"""\n    6.2.2 \xe4\xbd\xbf\xe7\x94\xa8\xe8\x92\x99\xe7\x89\xb9\xe5\x8d\xa1\xe6\xb4\x9b\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xa1\xe7\xae\x97\xe6\x80\x8e\xe6\xa0\xb7\xe5\xba\xa6\xe8\xbf\x87\xe4\xb8\x80\xe7\x94\x9f\xe6\x9c\x80\xe5\xb9\xb8\xe7\xa6\x8f\n    :return:\n    """"""\n    living_day, happiness, wealth, fame = my_life([0.4, 0.3, 0.3])\n    print(\'\xe6\xb4\xbb\xe4\xba\x86{}\xe5\xb9\xb4\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0{}, \xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb4\xa2\xe5\xaf\x8c{}, \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b{}\'.format(\n        living_day, happiness, wealth, fame))\n\n    from abupy import AbuProgress\n    progress = AbuProgress(2000, 0, label=\'my_life...\')\n\n    result = []\n    for pos, _ in enumerate(xrange(2000)):\n        # 2000\xe6\xac\xa1\xe9\x9a\x8f\xe6\x9c\xba\xe6\x9d\x83\xe9\x87\x8d\xe5\x88\x86\xe9\x85\x8d\n        weights = np.random.random(3)\n        weights /= np.sum(weights)\n        # result\xe4\xb8\xad\xef\xbc\x9atuple[0]\xe6\x9d\x83\xe9\x87\x8dweights,\xef\xbc\x8ctuple[1]my_life\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n        result.append((weights, my_life(weights)))\n        progress.show(a_progress=pos + 1)\n\n    # result\xe4\xb8\xadtuple[1]=my_life\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c, my_life[1]=\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xef\xbc\x8cso->x[1][1]\n    sorted_scores = sorted(result, key=lambda p_x: p_x[1][1], reverse=True)\n    # \xe5\xb0\x86\xe6\x9c\x80\xe4\xbc\x98\xe6\x9d\x83\xe9\x87\x8dsorted_scores[0][0]\xe4\xbb\xa3\xe5\x85\xa5my_life\xe5\xbe\x97\xe5\x88\xb0\xe7\xbb\x93\xe6\x9e\x9c\n    living_day, happiness, wealth, fame = my_life(sorted_scores[0][0])\n\n    print(\'\xe6\xb4\xbb\xe4\xba\x86{}\xe5\xb9\xb4\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0{}, \xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb4\xa2\xe5\xaf\x8c{}, \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b{}\'.format\n          (living_day, happiness, wealth, fame))\n\n    print(\'\xe4\xba\xba\xe7\x94\x9f\xe6\x9c\x80\xe4\xbc\x98\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x9a\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7{:.3f},\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c{:.3f},\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b{:.3f}\'.format(\n        sorted_scores[0][0][0], sorted_scores[0][0][1],\n        sorted_scores[0][0][2]))\n\n    # noinspection PyUnresolvedReferences\n    from mpl_toolkits.mplot3d import Axes3D\n    """"""\n        result\xe4\xb8\xad: tuple[0]\xe6\x9d\x83\xe9\x87\x8dweights, tuple[1]my_life\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n        r[0][0]: \xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\n        r[0][1]: \xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\n        r[0][2]: \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\n        r[1][1]: my_life[1]=\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\n    """"""\n    result_show = np.array(\n        [[r[0][0], r[0][1], r[0][2], r[1][1]] for r in result])\n\n    fig = plt.figure(figsize=(9, 6))\n    ax = fig.gca(projection=\'3d\')\n    ax.view_init(30, 60)\n    """"""\n        x:\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d, y:\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\n        z:\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d, c:color \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0, \xe9\xa2\x9c\xe8\x89\xb2\xe8\xb6\x8a\xe6\xb7\xb1\xe8\xb6\x8a\xe5\xb9\xb8\xe7\xa6\x8f\n    """"""\n    ax.scatter3D(result_show[:, 0], result_show[:, 1], result_show[:, 2],\n                 c=result_show[:, 3], cmap=\'spring\')\n    ax.set_xlabel(\'health\')\n    ax.set_ylabel(\'stock\')\n    ax.set_zlabel(\'fame\')\n    plt.show()\n\n    # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\n    happiness_result = result_show[:, 3]\n    # \xe4\xbd\xbf\xe7\x94\xa8qcut\xe5\x88\x8610\xe4\xbb\xbd\n    print(\'pd.qcut(happiness_result, 10).value_counts():\\n\', pd.qcut(happiness_result, 10).value_counts())\n\n\n""""""\n    6.2.3 \xe5\x87\xb8\xe4\xbc\x98\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe6\xa6\x82\xe5\xbf\xb5\n""""""\n\n\n# noinspection PyTypeChecker\ndef sample_623():\n    """"""\n    6.2.3 \xe8\xb6\x8b\xe5\x8a\xbf\xe9\xaa\xa8\xe6\x9e\xb6\xe5\x9b\xbe\n    :return:\n    """"""\n    import scipy.optimize as sco\n    from scipy.interpolate import interp1d\n\n    # \xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8TSLA\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n    # interp1d\xe7\xba\xbf\xe6\x80\xa7\xe6\x8f\x92\xe5\x80\xbc\xe5\x87\xbd\xe6\x95\xb0\n    linear_interp = interp1d(x, y)\n    # \xe7\xbb\x98\xe5\x88\xb6\xe6\x8f\x92\xe5\x80\xbc\n    plt.plot(linear_interp(x))\n\n    # fminbound\xe5\xaf\xbb\xe6\x89\xbe\xe7\xbb\x99\xe5\xae\x9a\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x9a\xe5\x9c\xa8linear_inter\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe8\x8c\x83\xe5\x9b\xb41\xef\xbc\x8d504\n    global_min_pos = sco.fminbound(linear_interp, 1, 504)\n    # \xe7\xbb\x98\xe5\x88\xb6\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe7\x82\xb9\xef\xbc\x8c\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x82\xb9\xef\xbc\x8cr<\xef\xbc\x9a\xe7\xba\xa2\xe8\x89\xb2\xe4\xb8\x89\xe8\xa7\x92\n    plt.plot(global_min_pos, linear_interp(global_min_pos), \'r<\')\n\n    # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xe9\x83\xbd\xe5\x85\x88\xe7\x94\xbb\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xef\xbc\x8c\xe7\x94\xb1\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x82\xb9\xe8\xbf\x9e\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\xe5\xbd\xa2\xe6\x88\x90\xe8\x82\xa1\xe4\xbb\xb7\xe9\xaa\xa8\xe6\x9e\xb6\xe5\x9b\xbe\n    last_postion = None\n    # \xe6\xad\xa5\xe9\x95\xbf50\xef\xbc\x8c\xe6\xaf\x8f50\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xe6\xb1\x82\xe4\xb8\x80\xe6\xac\xa1\xe5\xb1\x80\xe9\x83\xa8\xe6\x9c\x80\xe5\xb0\x8f\n    for find_min_pos in np.arange(50, len(x), 50):\n        # fmin_bfgs\xe5\xaf\xbb\xe6\x89\xbe\xe7\xbb\x99\xe5\xae\x9a\xe5\x80\xbc\xe7\x9a\x84\xe5\xb1\x80\xe9\x83\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n        local_min_pos = sco.fmin_bfgs(linear_interp, find_min_pos, disp=0)\n        # \xe5\xbd\xa2\xe6\x88\x90\xe6\x9c\x80\xe5\xb0\x8f\xe7\x82\xb9\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbf\xa1\xe6\x81\xaf(x, y)\n        draw_postion = (local_min_pos, linear_interp(local_min_pos))\n        # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa50\xe5\x8d\x95\xe4\xbd\x8dlast_postion\xef\xbc\x9dnone, \xe4\xb9\x8b\xe5\x90\x8e\xe9\x83\xbd\xe6\x9c\x89\xe5\x80\xbc\n        if last_postion is not None:\n            # \xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xa4\xe4\xb8\xb4\xe8\xbf\x91\xe5\xb1\x80\xe9\x83\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x9b\xb8\xe8\xbf\x9e\xef\xbc\x8c\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x82\xb9\xe8\xbf\x9e\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\n            plt.plot([last_postion[0][0], draw_postion[0][0]],\n                     [last_postion[1][0], draw_postion[1][0]], \'o-\')\n        # \xe5\xb0\x86\xe8\xbf\x99\xe4\xb8\xaa\xe6\xad\xa5\xe9\x95\xbf\xe5\x8d\x95\xe4\xbd\x8d\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x82\xb9\xe8\xb5\x8b\xe4\xba\x88last_postion\n        last_postion = draw_postion\n    plt.show()\n\n\ndef sample_624():\n    """"""\n    6.2.4 \xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe6\xb1\x82\xe8\xa7\xa3\xe6\x80\x8e\xe6\xa0\xb7\xe5\xba\xa6\xe8\xbf\x87\xe4\xb8\x80\xe7\x94\x9f\xe6\x9c\x80\xe5\xb9\xb8\xe7\xa6\x8f\n    :return:\n    """"""\n    import scipy.optimize as sco\n\n    def minimize_happiness_global(weights):\n        if np.sum(weights) != 1:\n            # \xe8\xbf\x87\xe6\xbb\xa4\xe6\x9d\x83\xe9\x87\x8d\xe5\x92\x8c\xe4\xb8\x8d\xe7\xad\x89\xe4\xba\x8e1\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\xe7\xbb\x84\xe5\x90\x88\n            return 0\n        # \xe6\x9c\x80\xe4\xbc\x98\xe9\x83\xbd\xe6\x98\xaf\xe5\xaf\xbb\xe6\x89\xbe\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xa6\x81\xe5\xbe\x97\xe5\x88\xb0\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c\n        # \xe8\xbf\x94\xe5\x9b\x9e-my_life\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\x85\xb6\xe5\xae\x9e\xe6\x98\xaf\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\xe9\x85\x8d\xe6\xaf\x94\n        return -my_life(weights)[1]\n\n    opt_global = sco.brute(minimize_happiness_global,\n                           ((0, 1.1, 0.1), (0, 1.1, 0.1), (0, 1.1, 0.1)))\n    print(opt_global)\n\n    living_day, happiness, wealth, fame = my_life(opt_global)\n    print(\'\xe6\xb4\xbb\xe4\xba\x86{}\xe5\xb9\xb4\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0{}, \xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb4\xa2\xe5\xaf\x8c{}, \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b{}\'.format\n          (living_day, happiness, wealth, fame))\n\n\n# noinspection PyTypeChecker\ndef sample_625():\n    """"""\n    6.2.5 \xe9\x9d\x9e\xe5\x87\xb8\xe5\x87\xbd\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe6\x80\x8e\xe6\xa0\xb7\xe5\xba\xa6\xe8\xbf\x87\xe4\xb8\x80\xe7\x94\x9f\xe6\x9c\x80\xe5\xb9\xb8\xe7\xa6\x8f\n    :return:\n    """"""\n    import scipy.optimize as sco\n\n    method = \'SLSQP\'\n    # \xe6\x8f\x90\xe4\xbe\x9b\xe4\xb8\x80\xe4\xb8\xaa\xe5\x87\xbd\xe6\x95\xb0\xe6\x9d\xa5\xe8\xa7\x84\xe8\x8c\x83\xe5\x8f\x82\xe6\x95\xb0,np.sum(weights) = 1 -> np.sum(weights) - 1 = 0\n    constraints = ({\'type\': \'eq\', \'fun\': lambda p_x: np.sum(p_x) - 1})\n    # \xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe9\x80\x89\xe5\xae\x9a\n    bounds = tuple((0, 0.9) for _ in xrange(3))\n    print(\'bounds:\', bounds)\n\n    def minimize_happiness_local(weights):\n        # print(weights)\n        return -my_life(weights)[1]\n\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x8c\x9c\xe6\xb5\x8b\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8brute\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe7\x9a\x84\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\x9c\xe4\xb8\xbaguess\n    guess = [0.5, 0.2, 0.3]\n    opt_local = sco.minimize(minimize_happiness_local, guess,\n                             method=method, bounds=bounds,\n                             constraints=constraints)\n    print(\'opt_local:\', opt_local)\n\n\n# noinspection PyShadowingNames\ndef sample_626():\n    """"""\n    6.2.6 \xe6\xa0\x87\xe5\x87\x86\xe5\x87\xb8\xe5\x87\xbd\xe6\x95\xb0\xe6\xb1\x82\xe6\x9c\x80\xe4\xbc\x98\n    :return:\n    """"""\n    import scipy.optimize as sco\n\n    fig = plt.figure()\n    from mpl_toolkits.mplot3d import Axes3D\n    ax = Axes3D(fig)\n    x = np.arange(-10, 10, 0.5)\n    y = np.arange(-10, 10, 0.5)\n    x_grid, y_grid = np.meshgrid(x, y)\n    # z^2 = x^2 + y^2\n    z_grid = x_grid ** 2 + y_grid ** 2\n\n    ax.plot_surface(x_grid, y_grid, z_grid, rstride=1, cstride=1,\n                    cmap=\'hot\')\n    plt.show()\n\n    def convex_func(xy):\n        return xy[0] ** 2 + xy[1] ** 2\n\n    bounds = ((-10, 10), (-10, 10))\n    guess = [5, 5]\n    for method in [\'SLSQP\', \'TNC\', \'L-BFGS-B\']:\n        # \xe6\x89\x93\xe5\x8d\xb0start\n        print(method + \' start\')\n        # noinspection PyTypeChecker\n        ret = sco.minimize(convex_func, guess, method=method,\n                           bounds=bounds)\n        print(ret)\n        # \xe8\xbf\x99\xe9\x87\x8c\xe9\x80\x9a\xe8\xbf\x87np.allclose\xe5\x88\xa4\xe5\xae\x9a\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\x8d\xe6\x98\xaf\xef\xbc\x880\xef\xbc\x8c 0\xef\xbc\x89\n        print(\'result is (0, 0): {}\'.format(\n            np.allclose(ret[\'x\'], [0., 0.], atol=0.001)))\n        # \xe6\x89\x93\xe5\x8d\xb0end\n        print(method + \' end\')\n\n\n""""""\n    6.3 \xe7\xba\xbf\xe6\x80\xa7\xe4\xbb\xa3\xe6\x95\xb0\n""""""\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\x9a\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x84\xe6\x88\x90panel\nmy_stock_df = ABuSymbolPd.make_kl_df(\n    [\'usBIDU\', \'usGOOG\', \'usFB\', \'usAAPL\', \'us.IXIC\'], n_folds=2)\n# \xe5\x8f\x98\xe6\x8d\xa2\xe8\xbd\xb4\xe5\x90\x91\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90\xe6\x96\xb0\xe7\x9a\x84\xe5\x88\x87\xe9\x9d\xa2\nmy_stock_df = my_stock_df.swapaxes(\'items\', \'minor\')\nmy_stock_df_close = my_stock_df[\'close\'].dropna(axis=0)\n\n\ndef regular_std(group):\n    # z-score\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\xe4\xb9\x9f\xe7\xa7\xb0\xe9\x9b\xb6-\xe5\x9d\x87\xe5\x80\xbc\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\n    return (group - group.mean()) / group.std()\n\n\ndef sample_630():\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\x9a\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x84\xe6\x88\x90panel\n    :return:\n    """"""\n    print(\'my_stock_df_close.tail():\\n\', my_stock_df_close.tail())\n\n    my_stock_df_close_std = regular_std(my_stock_df_close)\n    my_stock_df_close_std.plot()\n    plt.show()\n\n\ndef sample_631():\n    """"""\n    6.3.1 \xe7\x9f\xa9\xe9\x98\xb5\xe5\x9f\xba\xe7\xa1\x80\xe7\x9f\xa5\xe8\xaf\x86\n    :return:\n    """"""\n    from scipy import linalg\n\n    # dataframe\xe8\xbd\xac\xe6\x8d\xa2matrix\xe9\x80\x9a\xe8\xbf\x87as_matrix\n    cs_matrix = my_stock_df_close.as_matrix()\n    # cs_matrix\xe6\x9c\xac\xe8\xba\xab\xe6\x9c\x895\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae(5\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8)\xef\xbc\x8c\xe8\xa6\x81\xe5\x8f\x98\xe6\x88\x90\xe6\x96\xb9\xe9\x98\xb5\xe5\x8d\xb3\xe4\xbf\x9d\xe7\x95\x995\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae0:5\n    cs_matrix = cs_matrix[0:5, :]\n    print(\'cs_matrix.shape:\', cs_matrix.shape)\n    print(\'cs_matrix:\\n\', cs_matrix)\n\n    eye5 = np.eye(5)\n    print(eye5)\n\n    cs_matrix_inv = linalg.inv(cs_matrix)\n    print(\'\xe9\x80\x86\xe7\x9f\xa9\xe9\x98\xb5: cs_matrix_inv\')\n    print(cs_matrix_inv)\n    # \xe4\xb8\x8a\xe9\x9d\xa2\xe6\x89\x93\xe5\x8d\xb0cs_matrix_inv\xe8\xbe\x93\xe5\x87\xba\xe4\xb8\x8a\xe5\xb9\xb6\xe9\x9d\x9e\xe7\xbb\x9d\xe5\xaf\xb9\xe6\xa0\x87\xe5\x87\x86\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe6\x98\xaf\xe5\xaf\xb9\xe8\xa7\x92\xe7\xba\xbf\xe5\x80\xbc\xe5\x85\x83\xe7\xb4\xa0\xe6\x8e\xa5\xe8\xbf\x91\xe4\xb8\x8e1\xef\xbc\x8c\xe9\x9d\x9e\xe5\xaf\xb9\n    # \xe8\xa7\x92\xe7\xba\xbf\xe5\x85\x83\xe7\xb4\xa0\xe6\x8e\xa5\xe8\xbf\x91\xe4\xb8\x8e0\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8np.allclose\xe6\x9d\xa5\xe7\xa1\xae\xe8\xae\xa4\xe7\xbb\x93\xe6\x9e\x9c\n    print(\'\xe7\x9b\xb8\xe4\xb9\x98\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x9a{}\'.format(\n        np.allclose(np.dot(cs_matrix, cs_matrix_inv), eye5)))\n\n\ndef sample_632():\n    """"""\n    6.3.2 \xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\x92\x8c\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\n    :return:\n    """"""\n    from scipy import mat, linalg\n\n    a = mat(\'[1.5 -0.5; -0.5 1.5]\')\n    u, d = linalg.eig(a)\n    print(\'\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x9a{}\'.format(u))\n    print(\'\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x88\xe5\x88\x97\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x89\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x9a{}\'.format(d))\n\n\ndef sample_634():\n    """"""\n    6.3.4 PCA\xe5\x92\x8cSVD\xe4\xbd\xbf\xe7\x94\xa8\xe5\xae\x9e\xe4\xbe\x8b\n    :return:\n    """"""\n    from sklearn.decomposition import PCA\n\n    my_stock_df_close_std = regular_std(my_stock_df_close)\n    # n_components=1\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\n    pca = PCA(n_components=1)\n    # \xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe6\x9c\x89\xe5\xb1\x95\xe7\xa4\xbafit_transform\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x85\xb3\xe9\x94\xae\xe6\xa0\xb8\xe5\xbf\x83\xe4\xbb\xa3\xe7\xa0\x81\xe6\x8a\xbd\xe5\x8f\x96\n    my_stock_df_trans_pca = \\\n        pca.fit_transform(my_stock_df_close_std.as_matrix())\n\n    plt.plot(my_stock_df_trans_pca)\n    plt.show()\n\n    # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\xb4\xe5\xba\xa6\xe5\x92\x8c\xe4\xb8\xbb\xe6\x88\x90\xe5\x88\x86\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0\xe7\xa9\xba\n    pca = PCA()\n    # \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8fit\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8fit_transform\n    pca.fit(my_stock_df_close_std)\n\n    # x:\xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6 y:\xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\xe4\xb8\x8b\xe7\x9a\x84\xe6\x96\xb9\xe5\xb7\xae\xe6\xaf\x94\xe6\x80\xbb\xe5\x92\x8c\xe5\x8d\xb3\xe4\xbf\x9d\xe7\x95\x99\xe4\xba\x86\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xbb\xe6\x88\x90\xe5\x88\x86\n    plt.plot(np.arange(1, len(pca.explained_variance_ratio_) + 1),\n             np.cumsum(pca.explained_variance_ratio_))\n    plt.xlabel(\'component\')\n    plt.ylabel(\'explained variance\')\n    plt.show()\n\n    # 0.95\xe5\x8d\xb3\xe4\xbf\x9d\xe7\x95\x9995%\xe4\xb8\xbb\xe6\x88\x90\xe5\x88\x86\n    pca = PCA(0.95)\n    # \xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe6\x9c\x89\xe5\xb1\x95\xe7\xa4\xbafit_transform\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x85\xb3\xe9\x94\xae\xe6\xa0\xb8\xe5\xbf\x83\xe4\xbb\xa3\xe7\xa0\x81\xe6\x8a\xbd\xe5\x8f\x96\n    my_stock_df_trans_pca = \\\n        pca.fit_transform(my_stock_df_close_std.as_matrix())\n    plt.plot(my_stock_df_trans_pca)\n    plt.show()\n\n    # noinspection PyPep8Naming\n    def my_pca(n_components=1):\n        from scipy import linalg\n\n        # svd\xe5\xa5\x87\xe5\xbc\x82\xe5\x80\xbc\xe5\x88\x86\xe8\xa7\xa3\n        U, S, V = linalg.svd(my_stock_df_close_std.as_matrix(),\n                             full_matrices=False)\n        # \xe9\x80\x9a\xe8\xbf\x87n_components\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\n        U = U[:, :n_components]\n        U *= S[:n_components]\n        # \xe7\xbb\x98\xe5\x88\xb6\xe9\x99\x8d\xe7\xbb\xb4\xe5\x90\x8e\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\n        plt.plot(U)\n\n    # \xe8\xbe\x93\xe5\x87\xba\xe5\xa6\x82\xe5\x9b\xbe6\xef\xbc\x8d19\xe6\x89\x80\xe7\xa4\xba\n    my_pca(n_components=3)\n    plt.show()\n\n\nif __name__ == ""__main__"":\n    sample_611_1()\n    # sample_611_2()\n    # sample_612()\n    # sample_613()\n    # sample_621_1()\n    # sample_621_2()\n    # sample_621_3()\n    # sample_622()\n    # sample_623()\n    # sample_624()\n    # sample_625()\n    # sample_626()\n    # sample_630()\n    # sample_631()\n    # sample_632()\n    # sample_634()\n'"
python/c7.py,33,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import division\n\n# import warnings\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import ABuSymbolPd\n\n# warnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\nkl_pd = ABuSymbolPd.make_kl_df(\'usTSLA\', n_folds=2)\n\n\n""""""\n    \xe7\xac\xac\xe4\xb8\x83\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe2\x80\x94\xe2\x80\x94\xe5\x85\xa5\xe9\x97\xa8\xef\xbc\x9a\xe4\xb8\x89\xe5\x8f\xaa\xe5\xb0\x8f\xe7\x8c\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8a\x95\xe8\xb5\x84\xe7\x9a\x84\xe6\x95\x85\xe4\xba\x8b\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_711():\n    """"""\n    7.1.1 \xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe8\xb8\xaa\xe5\x92\x8c\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x8d\xe5\x8f\xa0\xe6\x80\xa7\n    :return:\n    """"""\n\n    sns.set_context(rc={\'figure.figsize\': (14, 7)})\n    sns.regplot(x=np.arange(0, kl_pd.shape[0]), y=kl_pd.close.values, marker=\'+\')\n    plt.show()\n\n    from abupy import ABuRegUtil\n    deg = ABuRegUtil.calc_regress_deg(kl_pd.close.values)\n    plt.show()\n    print(\'\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6:\' + str(deg))\n\n    start = 0\n    # \xe5\x89\x8d1/4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n    end = int(kl_pd.shape[0] / 4)\n    # \xe5\xb0\x86x\xe4\xb9\x9f\xe4\xbd\xbf\xe7\x94\xa8arange\xe5\x88\x87\xe5\x89\xb2\n    x = np.arange(start, end)\n    # y\xe6\xa0\xb9\xe6\x8d\xaestart\xef\xbc\x8cend\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x87\xe7\x89\x87\n    y = kl_pd.close.values[start:end]\n    sns.regplot(x=x, y=y, marker=\'+\')\n    plt.show()\n\n    start = int(kl_pd.shape[0] / 4)\n    # \xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa81/4\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\n    end = start + int(kl_pd.shape[0] / 4)\n    sns.regplot(x=np.arange(start, end), y=kl_pd.close.values[start:end],\n                marker=\'+\')\n    plt.show()\n\n\ndef sample_712_1():\n    """"""\n    7.1.2 \xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\n    :return:\n    """"""\n    # \xe5\xa4\xb4\xe4\xb8\x80\xe5\xb9\xb4\xef\xbc\x88[:252]\xef\xbc\x89\xe4\xbd\x9c\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae, \xe7\xbe\x8e\xe8\x82\xa1\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x9c\x89252\xe5\xa4\xa9\n    train_kl = kl_pd[:252]\n    # \xe5\x90\x8e\xe4\xb8\x80\xe5\xb9\xb4\xef\xbc\x88[252:]\xef\xbc\x89\xe4\xbd\x9c\xe4\xb8\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\n    test_kl = kl_pd[252:]\n\n    # \xe5\x88\x86\xe5\x88\xab\xe7\x94\xbb\xe5\x87\xba\xe4\xb8\xa4\xe9\x83\xa8\xe5\x88\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\n    tmp_df = pd.DataFrame(\n        np.array([train_kl.close.values, test_kl.close.values]).T,\n        columns=[\'train\', \'test\'])\n\n    tmp_df[[\'train\', \'test\']].plot(subplots=True, grid=True,\n                                   figsize=(14, 7))\n    plt.show()\n\n\ndef sample_712_2(show=True):\n    """"""\n    7.1.2 \xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\n    :return:\n    """"""\n    train_kl = kl_pd[:252]\n    test_kl = kl_pd[252:]\n\n    # \xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9d\x87\xe5\x80\xbc\n    close_mean = train_kl.close.mean()\n    # \xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n    close_std = train_kl.close.std()\n\n    # \xe6\x9e\x84\xe9\x80\xa0\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc\n    sell_signal = close_mean + close_std / 3\n    # \xe6\x9e\x84\xe9\x80\xa0\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc\n    buy_signal = close_mean - close_std / 3\n\n    # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\x8a\xe5\x9d\x87\xe5\x80\xbc\xe7\xba\xbf\n    if show:\n        # \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        train_kl.close.plot()\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe7\xba\xbf, lw\xe4\xbb\xa3\xe8\xa1\xa8\xe7\xba\xbf\xe7\x9a\x84\xe7\xb2\x97\xe5\xba\xa6\n        plt.axhline(buy_signal, color=\'r\', lw=3)\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xef\xbc\x8c\xe5\x9d\x87\xe5\x80\xbc\xe7\xba\xbf\n        plt.axhline(close_mean, color=\'black\', lw=1)\n        # \xe6\xb0\xb4\xe5\xb9\xb3\xe7\xba\xbf\xef\xbc\x8c \xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe7\xba\xbf\n        plt.axhline(sell_signal, color=\'g\', lw=3)\n        plt.legend([\'train close\', \'buy_signal\', \'close_mean\', \'sell_signal\'],\n                   loc=\'best\')\n        plt.show()\n\n        # \xe5\xb0\x86\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc\xe4\xbb\xa3\xe5\x85\xa5\xe5\x9b\x9e\xe5\xbd\x92\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        plt.figure(figsize=(14, 7))\n        # \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        test_kl.close.plot()\n        # buy_signal\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\xa3\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\n        plt.axhline(buy_signal, color=\'r\', lw=3)\n        # \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\xa3\xe5\x85\xa5\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x9d\x87\xe5\x80\xbcclose\n        plt.axhline(close_mean, color=\'black\', lw=1)\n        # sell_signal\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\xa3\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n        plt.axhline(sell_signal, color=\'g\', lw=3)\n        # \xe6\x8c\x89\xe7\x85\xa7\xe4\xb8\x8a\xe8\xbf\xb0\xe7\xbb\x98\xe5\x88\xb6\xe9\xa1\xba\xe5\xba\x8f\xe6\xa0\x87\xe6\xb3\xa8\n        plt.legend([\'test close\', \'buy_signal\', \'close_mean\', \'sell_signal\'],\n                   loc=\'best\')\n        plt.show()\n\n        print(\'\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc:{} \xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x98\x80\xe5\x80\xbc:{}\'.format(buy_signal, sell_signal))\n    return train_kl, test_kl, buy_signal, sell_signal\n\n\ndef sample_712_3(show=True):\n    """"""\n    7.1.2 \xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\n    :return:\n    """"""\n    train_kl, test_kl, buy_signal, sell_signal = sample_712_2(show=False)\n\n    # \xe5\xaf\xbb\xe6\x89\xbe\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe6\xbb\xa1\xe8\xb6\xb3\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    buy_index = test_kl[test_kl[\'close\'] <= buy_signal].index\n\n    # \xe5\xb0\x86\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\xe7\xb3\xbb\xe5\x88\x97\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba1\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\n    test_kl.loc[buy_index, \'signal\'] = 1\n    # \xe8\xa1\xa87-2\xe6\x89\x80\xe7\xa4\xba\n    if show:\n        print(\'test_kl[52:57]:\\n\', test_kl[52:57])\n\n    # \xe5\xaf\xbb\xe6\x89\xbe\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe6\xbb\xa1\xe8\xb6\xb3\xe5\x8d\x96\xe5\x87\xba\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    sell_index = test_kl[test_kl[\'close\'] >= sell_signal].index\n\n    # \xe5\xb0\x86\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4\xe7\xb3\xbb\xe5\x88\x97\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba0\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\n    test_kl.loc[sell_index, \'signal\'] = 0\n    # \xe8\xa1\xa87-3\xe6\x89\x80\xe7\xa4\xba\n    if show:\n        print(\'test_kl[48:53]:\\n\', test_kl[48:53])\n\n    # \xe7\x94\xb1\xe4\xba\x8e\xe5\x81\x87\xe8\xae\xbe\xe9\x83\xbd\xe6\x98\xaf\xe5\x85\xa8\xe4\xbb\x93\xe6\x93\x8d\xe4\xbd\x9c\xe6\x89\x80\xe4\xbb\xa5signal\xef\xbc\x9dkeep\xef\xbc\x8c\xe5\x8d\xb31\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8c\x81\xe6\x9c\x89\xef\xbc\x8c0\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8d\x96\xe5\x87\xba\xe7\xa9\xba\xe4\xbb\x93\n    test_kl[\'keep\'] = test_kl[\'signal\']\n    # \xe5\xb0\x86keep\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84nan\xe4\xbd\xbf\xe7\x94\xa8\xe5\x90\x91\xe4\xb8\x8b\xe5\xa1\xab\xe5\x85\x85\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe5\xa1\xab\xe5\x85\x85\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xbfkeep\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x8c\x81\xe8\x82\xa1\xe7\x8a\xb6\xe6\x80\x81\n    test_kl[\'keep\'].fillna(method=\'ffill\', inplace=True)\n\n    # shift(1)\xe5\x8f\x8anp.log\xe4\xb8\x8b\xe9\x9d\xa2\xe4\xbc\x9a\xe6\x9c\x89\xe5\x86\x85\xe5\xae\xb9\xe8\xaf\xa6\xe7\xbb\x86\xe8\xae\xb2\xe8\xa7\xa3\n    test_kl[\'benchmark_profit\'] = \\\n        np.log(test_kl[\'close\'] / test_kl[\'close\'].shift(1))\n\n    # \xe4\xbb\x85\xe4\xbb\x85\xe4\xb8\xba\xe4\xba\x86\xe8\xaf\xb4\xe6\x98\x8enp.log\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86benchmark_profit2\xef\xbc\x8c\xe5\x8f\xaa\xe4\xb8\xba\xe5\xaf\xb9\xe6\xaf\x94\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x80\xe8\x87\xb4\n    test_kl[\'benchmark_profit2\'] = \\\n        test_kl[\'close\'] / test_kl[\'close\'].shift(1) - 1\n\n    if show:\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xaf\xb9\xe6\xaf\x94\xe4\xb8\xa4\xe7\xa7\x8d\xe6\x96\xb9\xe5\xbc\x8f\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe7\x9a\x84profit\xe6\x98\xaf\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\n        test_kl[[\'benchmark_profit\', \'benchmark_profit2\']].plot(subplots=True,\n                                                                grid=True,\n                                                                figsize=(\n                                                                    14, 7))\n        plt.show()\n\n    # test_kl[\'close\'].shift(1): test_kl[\'close\'] / test_kl[\'close\'].shift(1) = \xe4\xbb\x8a\xe6\x97\xa5\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8f\xe6\x98\xa8\xe6\x97\xa5\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n    print(\'test_kl[close][:5]:\\n\', test_kl[\'close\'][:5])\n    print(\'test_kl[close].shift(1)[:5]:\\n\', test_kl[\'close\'].shift(1)[:5])\n    # np.log\n    print(\'np.log(220 / 218), 220 / 218 - 1.0:\', np.log(220 / 218), 220 / 218 - 1.0)\n\n    return test_kl\n\n\ndef sample_712_4():\n    """"""\n    7.1.2 \xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\n    :return:\n    """"""\n    test_kl = sample_712_3(show=False)\n\n    test_kl[\'trend_profit\'] = test_kl[\'keep\'] * test_kl[\'benchmark_profit\']\n    test_kl[\'trend_profit\'].plot(figsize=(14, 7))\n    plt.show()\n\n    test_kl[[\'benchmark_profit\', \'trend_profit\']].cumsum().plot(grid=True,\n                                                                figsize=(\n                                                                    14, 7))\n    plt.show()\n\n    test_kl[[\'benchmark_profit\', \'trend_profit\']].cumsum().apply(\n        np.exp).plot(grid=True)\n    plt.show()\n\n\n# noinspection PyPep8Naming\ndef sample_713():\n    """"""\n    7.1.3 \xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe8\xb8\xaa\xe7\xad\x96\xe7\x95\xa5\n    :return:\n    """"""\n\n    # rolling_max\xe7\xa4\xba\xe4\xbe\x8b\xe5\xba\x8f\xe5\x88\x97\n    demo_list = np.array([1, 2, 1, 1, 100, 1000])\n    # \xe5\xaf\xb9\xe7\xa4\xba\xe4\xbe\x8b\xe5\xba\x8f\xe5\x88\x97\xe4\xbb\xa53\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe6\xaf\x8f\xe4\xb8\x80\xe7\xbb\x84\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    from abupy import pd_rolling_max\n    # print(\'pd.rolling_max(demo_list, window=3):\', pd.rolling_max(demo_list, window=3))\n    print(\'pd.rolling_max(demo_list, window=3):\', pd_rolling_max(demo_list, window=3))\n\n    from abupy import pd_expanding_max\n    # expanding_max\xe7\xa4\xba\xe4\xbe\x8b\xe5\xba\x8f\xe5\x88\x97\n    demo_list = np.array([1, 2, 1, 1, 100, 1000])\n    # print(\'pd.expanding_max(demo_list):\', pd.expanding_max(demo_list))\n    print(\'pd.expanding_max(demo_list):\', pd_expanding_max(demo_list))\n\n    # \xe5\xbd\x93\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb6\x85\xe8\xbf\x87N1\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\n    N1 = 42\n    # \xe5\xbd\x93\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb6\x85\xe8\xbf\x87N2\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n    N2 = 21\n    # \xe9\x80\x9a\xe8\xbf\x87rolling_max\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\x80\xe8\xbf\x91N1\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\n    # kl_pd[\'n1_high\'] = pd.rolling_max(kl_pd[\'high\'], window=N1)\n    kl_pd[\'n1_high\'] = pd_rolling_max(kl_pd[\'high\'], window=N1)\n    # \xe8\xa1\xa87-4\xe6\x89\x80\xe7\xa4\xba\n    print(\'kl_pd[0:5]:\\n\', kl_pd[0:5])\n\n    # expanding_max\n    # expan_max = pd.expanding_max(kl_pd[\'close\'])\n    expan_max = pd_expanding_max(kl_pd[\'close\'])\n    # fillna\xe4\xbd\xbf\xe7\x94\xa8\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84expan_max\n    kl_pd[\'n1_high\'].fillna(value=expan_max, inplace=True)\n    # \xe8\xa1\xa87-5\xe6\x89\x80\xe7\xa4\xba\n    print(\'kl_pd[0:5]:\\n\', kl_pd[0:5])\n\n    from abupy import pd_rolling_min, pd_expanding_min\n    # \xe9\x80\x9a\xe8\xbf\x87rolling_min\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\x80\xe8\xbf\x91N2\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\n    # rolling_min\xe4\xb8\x8erolling_max\xe7\xb1\xbb\xe4\xbc\xbc\n    # kl_pd[\'n2_low\'] = pd.rolling_min(kl_pd[\'low\'], window=N2)\n    kl_pd[\'n2_low\'] = pd_rolling_min(kl_pd[\'low\'], window=N2)\n    # expanding_min\xe4\xb8\x8eexpanding_max\xe7\xb1\xbb\xe4\xbc\xbc\n    # expan_min = pd.expanding_min(kl_pd[\'close\'])\n    expan_min = pd_expanding_min(kl_pd[\'close\'])\n    # fillna\xe4\xbd\xbf\xe7\x94\xa8\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84eexpan_min\n    kl_pd[\'n2_low\'].fillna(value=expan_min, inplace=True)\n\n    # \xe5\xbd\x93\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb6\x85\xe8\xbf\x87N\xe5\xa4\xa9\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\x88\x96\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7, \xe8\xb6\x85\xe8\xbf\x87\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8c\x81\xe6\x9c\x89\n    buy_index = kl_pd[kl_pd[\'close\'] > kl_pd[\'n1_high\'].shift(1)].index\n    kl_pd.loc[buy_index, \'signal\'] = 1\n\n    # \xe5\xbd\x93\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb6\x85\xe8\xbf\x87N\xe5\xa4\xa9\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\x88\x96\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7, \xe8\xb6\x85\xe8\xbf\x87\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n    sell_index = kl_pd[kl_pd[\'close\'] < kl_pd[\'n2_low\'].shift(1)].index\n    kl_pd.loc[sell_index, \'signal\'] = 0\n\n    kl_pd.signal.value_counts().plot(kind=\'pie\', figsize=(5, 5))\n    plt.show()\n\n    """"""\n        \xe5\xb0\x86\xe4\xbf\xa1\xe5\x8f\xb7\xe6\x93\x8d\xe4\xbd\x9c\xe5\xba\x8f\xe5\x88\x97\xe7\xa7\xbb\xe5\x8a\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe7\xac\xac\xe4\xba\x8c\xe5\xa4\xa9\xe5\x86\x8d\xe5\xb0\x86\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbf\xa1\xe5\x8f\xb7\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe5\xbe\x97\xe5\x88\xb0\xe6\x8c\x81\xe8\x82\xa1\xe7\x8a\xb6\xe6\x80\x81\n        \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8dshift(1)\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xbf\xa1\xe5\x8f\xb7\xe4\xba\xa7\xe7\x94\x9f\xe5\xbd\x93\xe5\xa4\xa9\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe7\x94\xb1\xe4\xba\x8e\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x98\xaf\xe5\x9c\xa8\xe6\x94\xb6\xe7\x9b\x98\xe5\x90\x8e\n        \xe6\x89\x8d\xe7\xa1\xae\xe5\xae\x9a\xe7\x9a\x84\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8shift(1)\xe6\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x91\xe7\x9c\x9f\xe5\xae\x9e\xe6\x83\x85\xe5\x86\xb5\n    """"""\n    kl_pd[\'keep\'] = kl_pd[\'signal\'].shift(1)\n    kl_pd[\'keep\'].fillna(method=\'ffill\', inplace=True)\n\n    # \xe8\xae\xa1\xe7\xae\x97\xe5\x9f\xba\xe5\x87\x86\xe6\x94\xb6\xe7\x9b\x8a\n    kl_pd[\'benchmark_profit\'] = np.log(\n        kl_pd[\'close\'] / kl_pd[\'close\'].shift(1))\n\n    # \xe8\xae\xa1\xe7\xae\x97\xe4\xbd\xbf\xe7\x94\xa8\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a\n    kl_pd[\'trend_profit\'] = kl_pd[\'keep\'] * kl_pd[\'benchmark_profit\']\n\n    # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe5\xaf\xb9\xe6\xaf\x94\n    kl_pd[[\'benchmark_profit\', \'trend_profit\']].cumsum().plot(grid=True,\n                                                              figsize=(\n                                                                  14, 7))\n    plt.show()\n\n\n""""""\n    7.2 \xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe5\x88\xb6\xe7\xae\xa1\xe7\x90\x86\xc2\xb6\n    \xe6\xb3\xa8\xe6\x84\x8f\xe4\xbb\xa5\xe4\xb8\x8b\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe6\x9c\x89\xe4\xbd\xbf\xe7\x94\xa8np.random.binomial\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x9a\x8f\xe6\x9c\xba\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\x8e\xe4\xb9\xa6\xe4\xb8\xad\xe7\x9a\x84\xe4\xbc\x9a\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\n""""""\n\n\ndef sample_722_1(show=True):\n    """"""\n    7.2.2 \xe4\xb8\x80\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xae\x80\xe5\x8f\xb2: \xe7\xac\xac\xe4\xb8\x80\xe9\x98\xb6\xe6\xae\xb5\n    :return:\n    """"""\n\n    # \xe8\xbf\x99\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\xac\xac\xe4\xb8\x80\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x87\xbd\xe6\x95\xb0gen_stock_price_array\n    def gen_stock_price_array():\n        # \xe7\xac\xac\xe4\xb8\x80\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe6\xb6\xb5\xe7\x9b\x96\xe8\x82\xa1\xe7\xa5\xa8\xe4\xb8\x8a\xe5\xb8\x82\xe5\x90\x8e\xe5\x89\x8d100\xe5\xa4\xa9\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x83\x85\xe5\x86\xb5\n        trade_day = 100\n        # \xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x98\xaf1\xe5\x85\x83\xe9\x92\xb1\xef\xbc\x8c\xe5\x8d\xb3\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96100\xe4\xb8\xaa\xe5\x88\x9d\xe5\xa7\x8b\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x98\xaf1\xe5\x85\x83\xe9\x92\xb1\xe7\x9a\x84np array\n        price_array = np.ones(trade_day)\n\n        # \xe4\xbb\xa5\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8100\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90100\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe8\xb5\xb0\xe5\x8a\xbf\n        for ind in np.arange(0, trade_day - 1):\n            if ind == 0:\n                # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa550%\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xafwin: win = np.random.binomial(1, 0.5)\n                # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5100%\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87win\n                win = np.random.binomial(1, 1)\n            else:\n                # \xe9\x9d\x9e\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xae\x83\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe4\xb8\x8e\xe5\x8f\xaa\xe4\xb8\x8e\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe7\x9b\xb8\xe5\x85\xb3,\xe5\xa6\x82\xe6\x9e\x9c\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\n                # \xe9\x82\xa3\xe4\xb9\x88\xe5\xae\x83\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xaf\xe6\xb6\xa8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\xae\x83\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe5\xae\x83\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xb0\xb1\xe6\x98\xaf\xe8\xb7\x8c\n                win = price_array[ind] > price_array[ind - 1]\n\n            if win:\n                # \xe6\xaf\x8f\xe6\xac\xa1\xe4\xb8\x8a\xe6\xb6\xa8\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\x8a\xe6\xb6\xa85%\n                price_array[ind + 1] = (1 + 0.05) * price_array[ind]\n            else:\n                # \xe6\xaf\x8f\xe6\xac\xa1\xe4\xb8\x8b\xe8\xb7\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\x8b\xe8\xb7\x8c5%\n                price_array[ind + 1] = (1 - 0.05) * price_array[ind]\n        return price_array\n\n    # \xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\xa4\xe6\xac\xa1\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\xa4\xe7\xa7\x8d\xe8\xb5\xb0\xe5\x8a\xbf\n    price_array1 = gen_stock_price_array()\n    price_array1_ex = gen_stock_price_array()\n\n    if show:\n        _, axs = plt.subplots(nrows=1, ncols=2, figsize=(14, 5))\n        # \xe5\x9b\xbe7-13 \xe5\xb7\xa6\xe5\x9b\xbe\n        axs[0].plot(price_array1)\n        # \xe5\x9b\xbe7-13 \xe5\x8f\xb3\xe5\x9b\xbe\n        axs[1].plot(price_array1_ex)\n        plt.show()\n    return price_array1\n\n\ndef sample_722_2(show=True):\n    """"""\n    7.2.2 \xe4\xb8\x80\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xae\x80\xe5\x8f\xb2: \xe7\xac\xac\xe4\xba\x8c\xe9\x98\xb6\xe6\xae\xb5\n    :return:\n    """"""\n    price_array1 = sample_722_1(show=False)\n\n    # \xe8\xbf\x99\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\xac\xac\xe4\xba\x8c\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x87\xbd\xe6\x95\xb0gen_stock_price_array2\n    # noinspection PyChainedComparisons\n    def gen_stock_price_array2():\n        # \xe7\xac\xac\xe4\xba\x8c\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x85\xb1\xe8\xa6\x86\xe7\x9b\x96\xe4\xba\x86252\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n        trade_day = 252\n        # np.concatenate\xe8\xbf\x9e\xe7\xbb\x93\xe4\xb9\x8b\xe5\x89\x8d100\xe5\xa4\xa9\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x92\x8c\xe6\x96\xb0\xe7\x9a\x84252\xe5\xa4\xa9\xe8\xb5\xb0\xe5\x8a\xbf\n        # np.ones(trade_day) * price_array1[-1]\xef\xbc\x9a\xe5\x8d\xb3\xe6\x96\xb0\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x9c\x80\xe5\x90\x8e\n        # \xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xbf\x99\xe4\xb8\xaa252\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x96\xb0\xe5\xba\x8f\xe5\x88\x97\n        price_array = np.concatenate(\n            (price_array1, np.ones(trade_day) * price_array1[-1]), axis=0)\n\n        # concatenate\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x9aprice_array\xe6\x9c\x89352\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\n        # len(price_array1) - 1\xef\xbc\x9a\xe5\x8d\xb3ind 99\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x94\x9f\xe6\x88\x90\xe7\xac\xac\xe4\xba\x8c\xe9\x98\xb6\xe6\xae\xb5\xe7\x9a\x84252\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        for ind in np.arange(len(price_array1) - 1, len(price_array) - 1):\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\xba\xe5\x9f\xba\xe5\x87\x86\xe7\x9a\x84\xe5\x9b\x9b\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\n            last4 = price_array[ind - 3:ind + 1]\n            if len(last4) == 4 and last4[-1] > last4[-2] and last4[-2] > last4[-3] and last4[-3] > last4[-4]:\n                # \xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\x8a\xe6\xb6\xa83\xe5\xa4\xa9, \xe7\xac\xac\xe5\x9b\x9b\xe5\x8f\x8a\xe4\xb9\x8b\xe5\x90\x8e\xe5\xa4\xa9\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe4\xb8\xba55%\n                win = np.random.binomial(1, 0.45)\n            elif len(last4) == 4 and last4[-1] < last4[-2] and last4[-2] < last4[-3] and last4[-3] < last4[-4]:\n                # \xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\x8b\xe8\xb7\x8c3\xe5\xa4\xa9, \xe7\xac\xac\xe5\x9b\x9b\xe5\x8f\x8a\xe4\xb9\x8b\xe5\x90\x8e\xe5\xa4\xa9\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe4\xb8\xba80%\n                win = np.random.binomial(1, 0.8)\n            else:\n                # \xe6\xb6\xa8\xe8\xb7\x8c\xe4\xb8\x8e\xe5\x8f\xaa\xe4\xb8\x8e\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe7\x9b\xb8\xe5\x85\xb3\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xef\xbc\x8c\n                # \xe9\x82\xa3\xe4\xb9\x88\xe5\xae\x83\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xaf\xe6\xb6\xa8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\xae\x83\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe5\xae\x83\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xb0\xb1\xe6\x98\xaf\xe8\xb7\x8c\n                win = price_array[ind] > price_array[ind - 1]\n\n            if win:\n                # \xe6\xaf\x8f\xe6\xac\xa1\xe4\xb8\x8a\xe6\xb6\xa8\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\x8a\xe6\xb6\xa85%\n                price_array[ind + 1] = (1 + 0.05) * price_array[ind]\n            else:\n                # \xe6\xaf\x8f\xe6\xac\xa1\xe4\xb8\x8b\xe8\xb7\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\x8b\xe8\xb7\x8c5%\n                price_array[ind + 1] = (1 - 0.05) * price_array[ind]\n        return price_array\n\n    if show:\n        import itertools\n        # \xe7\x94\x9f\xe6\x88\x909\xe4\xb8\xaa\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83 3*3\n        _, axs = plt.subplots(nrows=3, ncols=3, figsize=(15, 15))\n        # \xe5\xb0\x86 3 * 3\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xbf\xe6\x80\xa7list\n        axs_list = list(itertools.chain.from_iterable(axs))\n        for ax in axs_list:\n            # \xe4\xbd\xbf\xe7\x94\xa8gen_stock_price_array2\xe7\x94\x9f\xe6\x88\x909\xe7\xbb\x84\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x9b\xbe,\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe7\xbb\x98\xe5\x88\xb6\n            ax.plot(gen_stock_price_array2())\n        plt.show()\n\n    price_array2 = gen_stock_price_array2()\n    if show:\n        plt.plot(price_array2)\n        plt.show()\n\n    return price_array2\n\n\ndef sample_722_3(show=True):\n    """"""\n    7.2.2 \xe4\xb8\x80\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xae\x80\xe5\x8f\xb2: \xe7\xac\xac\xe4\xb8\x89\xe9\x98\xb6\xe6\xae\xb5\n    :return:\n    """"""\n    price_array2 = sample_722_2(show=False)\n\n    # \xe8\xbf\x99\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\xac\xac\xe4\xb8\x89\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x87\xbd\xe6\x95\xb0gen_stock_price_array3\n    def gen_stock_price_array3():\n        trade_day = 252 * 3\n        # np.concatenate\xe8\xbf\x9e\xe7\xbb\x93\xe4\xb9\x8b\xe5\x89\x8d352\xe5\xa4\xa9\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x92\x8c\xe6\x96\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe8\xb5\xb0\xe5\x8a\xbf\n        # np.ones(trade_day) * price_array2[-1]\xef\xbc\x9a\xe5\x8d\xb3\xe6\x96\xb0\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe9\x98\xb6\xe6\xae\xb5\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x9c\x80\xe5\x90\x8e\n        # \xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96len(trade_day)\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x96\xb0\xe5\xba\x8f\xe5\x88\x97\n        price_array = np.concatenate(\n            (price_array2, np.ones(trade_day) * price_array2[-1]), axis=0)\n\n        # concatenate\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x9aprice_array352+len(trade_day)\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\n        # len(price_array2) - 1\xef\xbc\x9a\xe5\x8d\xb3\xe4\xbb\x8eind 351\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x94\x9f\xe6\x88\x90\xe7\xac\xac\xe4\xb8\x89\xe9\x98\xb6\xe6\xae\xb5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\n        for ind in np.arange(len(price_array2) - 1, len(price_array) - 1):\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\xba\xe5\x9f\xba\xe5\x87\x86\xe7\x9a\x84\xe5\x9b\x9b\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\n            last4 = price_array[ind - 3:ind + 1]\n            # noinspection PyChainedComparisons\n            if len(last4) == 4 and last4[-1] >= last4[-2] \\\n                    and last4[-2] >= last4[-3] and last4[-3] >= last4[-4]:\n                # \xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\x8a\xe6\xb6\xa83\xe5\xa4\xa9, \xe7\xac\xac\xe5\x9b\x9b\xe5\x8f\x8a\xe4\xb9\x8b\xe5\x90\x8e\xe5\xa4\xa9\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe4\xb8\xba55%\n                win = np.random.binomial(1, 0.45)\n            elif len(last4) == 4 and last4[-1] < last4[-2] \\\n                    and last4[-2] < last4[-3] and last4[-3] < last4[-4]:\n\n                # \xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\x8b\xe8\xb7\x8c3\xe5\xa4\xa9, \xe7\xac\xac\xe5\x9b\x9b\xe5\x8f\x8a\xe4\xb9\x8b\xe5\x90\x8e\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe4\xb8\xba80%\n                win = np.random.binomial(1, 0.8)\n                if not win:\n                    # \xe5\x8f\x91\xe7\x94\x9f\xe4\xba\x86\xe7\x81\xbe\xe9\x9a\xbe\xe6\x80\xa7\xe7\x9a\x84\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c50%\n                    price_array[ind + 1] = (1 - 0.50) * price_array[ind]\n                    # \xe7\x9b\xb4\xe6\x8e\xa5continue\xe4\xba\x86\n                    continue\n            else:\n                # \xe6\xb6\xa8\xe8\xb7\x8c\xe4\xb8\x8e\xe5\x8f\xaa\xe4\xb8\x8e\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe7\x9b\xb8\xe5\x85\xb3\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\n                # \xe9\x82\xa3\xe4\xb9\x88\xe5\xae\x83\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xaf\xe6\xb6\xa8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\xae\x83\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe5\xae\x83\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xb0\xb1\xe6\x98\xaf\xe8\xb7\x8c\n                win = price_array[ind] >= price_array[ind - 1]\n\n            if win:\n                # \xe6\xaf\x8f\xe6\xac\xa1\xe4\xb8\x8a\xe6\xb6\xa8\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\x8a\xe6\xb6\xa85%\n                price_array[ind + 1] = (1 + 0.05) * price_array[ind]\n            else:\n                # \xe6\xaf\x8f\xe6\xac\xa1\xe4\xb8\x8b\xe8\xb7\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\x8b\xe8\xb7\x8c5%\n                price_array[ind + 1] = (1 - 0.05) * price_array[ind]\n\n            # \xe8\x82\xa1\xe4\xbb\xb7\xe5\xb0\x8f\xe4\xba\x8e0.1\xe5\x85\x83\xe8\x82\xa1\xe4\xbb\xb7\xe5\xbd\x920\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x80\xe5\xb8\x82\n            if price_array[ind + 1] <= 0.1:\n                price_array[ind + 1:] = 0\n                # \xe9\x80\x80\xe5\xb8\x82\n                break\n\n        return price_array\n\n    # price_array3\xe5\x8d\xb3\xe4\xb8\xba\xe7\xac\xac\xe4\xb8\x89\xe9\x98\xb6\xe6\xae\xb5\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\n    price_array3 = gen_stock_price_array3()\n    if show:\n        plt.plot(price_array3)\n        plt.show()\n    return price_array3\n\n\n""""""\n    7.2.3 \xe4\xb8\x89\xe5\x8f\xaa\xe5\xb0\x8f\xe7\x8c\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8a\x95\xe8\xb5\x84\xe7\x9a\x84\xe6\x95\x85\xe4\xba\x8b\n""""""\n\n\ndef sample_723():\n    """"""\n    7.2.3 \xe4\xb8\x89\xe5\x8f\xaa\xe5\xb0\x8f\xe7\x8c\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8a\x95\xe8\xb5\x84\xe7\x9a\x84\xe6\x95\x85\xe4\xba\x8b\n    :return:\n    """"""\n    price_array3 = sample_722_3(show=False)\n\n    # noinspection PyChainedComparisons,PyShadowingNames\n    def execute_trade(cash, buy_rate):\n        commission = 5  # \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n        stock_cnt = 0  # \xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\n        keep_day = 0  # \xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\n        # \xe8\xb5\x84\xe4\xba\xa7\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n        capital = []\n        # \xe4\xbb\x8e\xe7\xac\xac353\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eindex 353\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9b\xb4\xe5\x88\xb0\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xa4\xa9\n        for ind in np.arange(352, len(price_array3) - 1):\n            if stock_cnt > 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\n                keep_day += 1\n            if stock_cnt > 0 and keep_day == 3:\n                # \xe5\xbd\x93\xe8\xbf\x9e\xe7\xbb\xad\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe4\xb8\x89\xe5\xa4\xa9\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8\n                cash += price_array3[ind] * stock_cnt\n                cash -= commission  # \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n                if cash <= 0:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe9\x92\xb1\xe4\xba\x86\xef\xbc\x8c\xe4\xb8\x80\xe5\x88\x87\xe5\xb0\xb1\xe9\x83\xbd\xe7\xbb\x93\xe6\x9d\x9f\xe4\xba\x86\n                    capital.append(0)\n                    print(\'\xe7\x88\x86\xe4\xbb\x93\xe4\xba\x86!\')\n                    break\n                # \xe5\x8d\x96\xe5\x87\xba\xe5\x90\x8e\xe9\x87\x8d\xe7\xbd\xae\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe5\x92\x8c\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe9\x87\x8f\n                keep_day = 0\n                stock_cnt = 0\n\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\xba\xe5\x9f\xba\xe5\x87\x865\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c5\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc->4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe6\x83\x85\xe5\x86\xb5\n            last5 = price_array3[ind - 4:ind + 1]\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x9a\n            # example: last5 = [82.4 86.5 82.2 78.1 74.2]\n            # 1. \xe6\xb2\xa1\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x9astock_cnt == 0\n            # 2. last5\xe5\xba\x8f\xe5\x88\x97last5[1] > last5[0] 86.5 > 82.4, \xe5\x8d\xb3\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8a\xe6\xb6\xa8\n            # 3. last5\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x8e\xe4\xb8\x89\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\x8b\xe8\xb7\x8c[-1]<[-2],[-2]<[-3],[-3]<[-4]\n            if stock_cnt == 0 and len(last5) == 5 \\\n                    and last5[1] > last5[0] \\\n                    and last5[-1] < last5[-2] and last5[-2] < last5[-3] and last5[-3] < last5[-4]:\n                cash -= commission  # \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n                # \xe6\x8c\x89\xe7\x85\xa7\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86buy_rate\xe4\xb9\xb0\xe5\x85\xa5\n                buy_cash = (cash * buy_rate)\n                cash -= buy_cash\n                stock_cnt += buy_cash / price_array3[ind]\n\n                if stock_cnt < 1:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe9\x92\xb1\xe4\xba\x86\xef\xbc\x8c\xe4\xb8\x80\xe5\x88\x87\xe5\xb0\xb1\xe9\x83\xbd\xe7\xbb\x93\xe6\x9d\x9f\xe4\xba\x86\n                    capital.append(0)\n                    print(\'\xe7\x88\x86\xe4\xbb\x93\xe4\xba\x86!\')\n                    break\n                keep_day = 0\n\n            # \xe8\xb5\x84\xe4\xba\xa7\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\xe5\x8a\xa0\xe5\x85\xa5\xe5\xbd\x93\xe6\x97\xa5\xe7\xbb\x93\xe6\x9e\x9c\n            capital.append(cash + (stock_cnt * price_array3[ind]))\n        return capital\n\n    pig_one_cash = 10000\n    # 1.0\xe5\x85\xa8\xe4\xbb\x93\xe4\xb9\xb0\xe5\x85\xa5\n    buy_rate = 1.0\n    pig_one_capital = execute_trade(pig_one_cash, buy_rate)\n    print(\'\xe7\x8c\xaa\xe8\x80\x81\xe5\xa4\xa7\xe6\x9c\x80\xe7\xbb\x88\xe8\xb5\x84\xe4\xba\xa7\xef\xbc\x9a{}\'.format(pig_one_capital[-1]))\n    print(\'\xe7\x8c\xaa\xe8\x80\x81\xe5\xa4\xa7\xe8\xb5\x84\xe4\xba\xa7\xe6\x9c\x80\xe9\xab\x98\xe5\xb3\xb0\xe5\x80\xbc\xef\xbc\x9a{}\'.format(max(pig_one_capital)))\n    plt.plot(pig_one_capital)\n    plt.show()\n\n    pig_two_cash = 10000\n    # fwin0.8 -floss0.2 = 0.6 60%\xe4\xbb\x93\xe4\xbd\x8d\xe4\xb9\xb0\xe5\x85\xa5\n    buy_rate = 0.8 - 0.2\n    pig_two_capital = execute_trade(pig_two_cash, buy_rate)\n    print(\'\xe7\x8c\xaa\xe8\x80\x81\xe4\xba\x8c\xe6\x9c\x80\xe7\xbb\x88\xe8\xb5\x84\xe4\xba\xa7\xef\xbc\x9a{}\'.format(pig_two_capital[-1]))\n    print(\'\xe7\x8c\xaa\xe8\x80\x81\xe4\xba\x8c\xe8\xb5\x84\xe4\xba\xa7\xe6\x9c\x80\xe9\xab\x98\xe5\xb3\xb0\xe5\x80\xbc\xef\xbc\x9a{}\'.format(max(pig_two_capital)))\n    plt.plot(pig_two_capital)\n    plt.show()\n\n    pig_three_cash = 10000\n    # \xe6\x9c\x80\xe7\xbb\x88buy_rate\xef\xbc\x9d0.13\xe5\x8d\xb313%\xe4\xbb\x93\xe4\xbd\x8d\n    buy_rate = 0.8 - 0.2 / (0.15 / 0.5)\n    pig_three_capital = execute_trade(pig_three_cash, buy_rate)\n    print(\'\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe6\x9c\x80\xe7\xbb\x88\xe8\xb5\x84\xe4\xba\xa7\xef\xbc\x9a{}\'.format(pig_three_capital[-1]))\n    print(\'\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe8\xb5\x84\xe4\xba\xa7\xe6\x9c\x80\xe9\xab\x98\xe5\xb3\xb0\xe5\x80\xbc\xef\xbc\x9a{}\'.format(max(pig_three_capital)))\n    plt.plot(pig_three_capital)\n    plt.show()\n\n\nif __name__ == ""__main__"":\n    sample_711()\n    # sample_712_1()\n    # sample_712_2()\n    # sample_712_3()\n    # sample_712_4()\n    # sample_713()\n    # sample_722_1()\n    # sample_722_2()\n    # sample_722_3()\n    # sample_723()\n'"
python/c8.py,2,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport warnings\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\n\nimport abupy\nfrom abupy import AbuFactorBuyBreak\nfrom abupy import AbuFactorSellBreak\nfrom abupy import AbuFactorAtrNStop\nfrom abupy import AbuFactorPreAtrNStop\nfrom abupy import AbuFactorCloseAtrNStop\nfrom abupy import AbuBenchmark\nfrom abupy import AbuPickTimeWorker\nfrom abupy import AbuCapital\nfrom abupy import AbuKLManager\nfrom abupy import ABuTradeProxy\nfrom abupy import ABuTradeExecute\nfrom abupy import ABuPickTimeExecute\nfrom abupy import AbuMetricsBase\nfrom abupy import ABuMarket\nfrom abupy import AbuPickTimeMaster\nfrom abupy import ABuRegUtil\nfrom abupy import AbuPickRegressAngMinMax\nfrom abupy import AbuPickStockWorker\nfrom abupy import ABuPickStockExecute\nfrom abupy import AbuPickStockPriceMinMax\nfrom abupy import AbuPickStockMaster\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\n\n""""""\n    \xe7\xac\xac\xe5\x85\xab\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe2\x80\x94\xe2\x80\x94\xe5\xbc\x80\xe5\x8f\x91\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_811():\n    """"""\n    8.1.1 \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\n    :return:\n    """"""\n    # buy_factors 60\xe6\x97\xa5\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xef\xbc\x8c42\xe6\x97\xa5\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\n    buy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                   {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n    # \xe8\x8e\xb7\xe5\x8f\x96TSLA\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n    kl_pd = kl_pd_manager.get_pick_time_kl_pd(\'usTSLA\')\n    abu_worker = AbuPickTimeWorker(capital, kl_pd, benchmark, buy_factors, None)\n    abu_worker.fit()\n\n    orders_pd, action_pd, _ = ABuTradeProxy.trade_summary(abu_worker.orders, kl_pd, draw=True)\n\n    ABuTradeExecute.apply_action_to_capital(capital, action_pd, kl_pd_manager)\n    capital.capital_pd.capital_blance.plot()\n    plt.show()\n\n\ndef sample_812():\n    """"""\n    8.1.2 \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\n    :return:\n    """"""\n    # 120\xe5\xa4\xa9\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n    sell_factor1 = {\'xd\': 120, \'class\': AbuFactorSellBreak}\n    # \xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe8\xb8\xaa\xe7\xad\x96\xe7\x95\xa5\xe6\xad\xa2\xe7\x9b\x88\xe8\xa6\x81\xe5\xa4\xa7\xe4\xba\x8e\xe6\xad\xa2\xe6\x8d\x9f\xe8\xae\xbe\xe7\xbd\xae\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c0.5\xef\xbc\x8c3.0\n    sell_factor2 = {\'stop_loss_n\': 0.5, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop}\n    # \xe6\x9a\xb4\xe8\xb7\x8c\xe6\xad\xa2\xe6\x8d\x9f\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xbd\xa2\xe6\x88\x90dict\n    sell_factor3 = {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.0}\n    # \xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe6\x88\x90dict\n    sell_factor4 = {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n    # \xe5\x9b\x9b\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x90\x8c\xe6\x97\xb6\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe7\xbb\x84\xe6\x88\x90sell_factors\n    sell_factors = [sell_factor1, sell_factor2, sell_factor3, sell_factor4]\n    # buy_factors 60\xe6\x97\xa5\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xef\xbc\x8c42\xe6\x97\xa5\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\n    buy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                   {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n    benchmark = AbuBenchmark()\n\n    capital = AbuCapital(1000000, benchmark)\n    orders_pd, action_pd, _ = ABuPickTimeExecute.do_symbols_with_same_factors(\n        [\'usTSLA\'], benchmark, buy_factors, sell_factors, capital, show=True)\n\n\ndef sample_813():\n    """"""\n    8.1.3 \xe6\xbb\x91\xe7\x82\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe7\xa1\xae\xe5\xae\x9a\xe5\x8f\x8a\xe7\xad\x96\xe7\x95\xa5\xe5\xae\x9e\xe7\x8e\xb0\n    :return:\n    """"""\n    from abupy import AbuSlippageBuyBase\n\n    # \xe4\xbf\xae\xe6\x94\xb9g_open_down_rate\xe7\x9a\x84\xe5\x80\xbc\xe4\xb8\xba0.02\n    g_open_down_rate = 0.02\n\n    # noinspection PyClassHasNoInit\n    class AbuSlippageBuyMean2(AbuSlippageBuyBase):\n        def fit_price(self):\n            if (self.kl_pd_buy.open / self.kl_pd_buy.pre_close) < (\n                        1 - g_open_down_rate):\n                # \xe5\xbc\x80\xe7\x9b\x98\xe4\xb8\x8b\xe8\xb7\x8cK_OPEN_DOWN_RATE\xe4\xbb\xa5\xe4\xb8\x8a\xef\xbc\x8c\xe5\x8d\x95\xe5\xad\x90\xe5\xa4\xb1\xe6\x95\x88\n                print(self.factor_name + \'open down threshold\')\n                return np.inf\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba\xe5\xbd\x93\xe5\xa4\xa9\xe5\x9d\x87\xe4\xbb\xb7\n            self.buy_price = np.mean(\n                [self.kl_pd_buy[\'high\'], self.kl_pd_buy[\'low\']])\n            return self.buy_price\n\n    # \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb960\xe4\xbd\xbf\xe7\x94\xa8AbuSlippageBuyMean2\n    buy_factors2 = [{\'slippage\': AbuSlippageBuyMean2, \'xd\': 60, \'class\': AbuFactorBuyBreak},\n                    {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n\n    sell_factor1 = {\'xd\': 120, \'class\': AbuFactorSellBreak}\n    sell_factor2 = {\'stop_loss_n\': 0.5, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop}\n    sell_factor3 = {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.0}\n    sell_factor4 = {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n    sell_factors = [sell_factor1, sell_factor2, sell_factor3, sell_factor4]\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n    orders_pd, action_pd, _ = ABuPickTimeExecute.do_symbols_with_same_factors(\n        [\'usTSLA\'], benchmark, buy_factors2, sell_factors, capital, show=True)\n\n\ndef sample_814(show=True):\n    """"""\n    8.1.4 \xe5\xaf\xb9\xe5\xa4\x9a\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n    :return:\n    """"""\n\n    sell_factor1 = {\'xd\': 120, \'class\': AbuFactorSellBreak}\n    sell_factor2 = {\'stop_loss_n\': 0.5, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop}\n    sell_factor3 = {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.0}\n    sell_factor4 = {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n    sell_factors = [sell_factor1, sell_factor2, sell_factor3, sell_factor4]\n    benchmark = AbuBenchmark()\n    buy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                   {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n\n    choice_symbols = [\'usTSLA\', \'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\', \'usWUBA\', \'usVIPS\']\n    capital = AbuCapital(1000000, benchmark)\n    orders_pd, action_pd, all_fit_symbols_cnt = ABuPickTimeExecute.do_symbols_with_same_factors(choice_symbols,\n                                                                                                benchmark, buy_factors,\n                                                                                                sell_factors, capital,\n                                                                                                show=False)\n\n    metrics = AbuMetricsBase(orders_pd, action_pd, capital, benchmark)\n    metrics.fit_metrics()\n    if show:\n        print(\'orders_pd[:10]:\\n\', orders_pd[:10].filter(\n            [\'symbol\', \'buy_price\', \'buy_cnt\', \'buy_factor\', \'buy_pos\', \'sell_date\', \'sell_type_extra\', \'sell_type\',\n             \'profit\']))\n        print(\'action_pd[:10]:\\n\', action_pd[:10])\n        metrics.plot_returns_cmp(only_show_returns=True)\n    return metrics\n\n\ndef sample_815():\n    """"""\n    8.1.5 \xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\n    :return:\n    """"""\n    metrics = sample_814(False)\n    print(\'\\nmetrics.gains_mean:{}, -metrics.losses_mean:{}\'.format(metrics.gains_mean, -metrics.losses_mean))\n\n    from abupy import AbuKellyPosition\n    # 42d\xe4\xbd\xbf\xe7\x94\xa8AbuKellyPosition\xef\xbc\x8c60d\xe4\xbb\x8d\xe7\x84\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\n    buy_factors2 = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                    {\'xd\': 42, \'position\': AbuKellyPosition, \'win_rate\': metrics.win_rate,\n                     \'gains_mean\': metrics.gains_mean, \'losses_mean\': -metrics.losses_mean,\n                     \'class\': AbuFactorBuyBreak}]\n\n    sell_factor1 = {\'xd\': 120, \'class\': AbuFactorSellBreak}\n    sell_factor2 = {\'stop_loss_n\': 0.5, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop}\n    sell_factor3 = {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.0}\n    sell_factor4 = {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n    sell_factors = [sell_factor1, sell_factor2, sell_factor3, sell_factor4]\n    benchmark = AbuBenchmark()\n    choice_symbols = [\'usTSLA\', \'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\', \'usWUBA\', \'usVIPS\']\n    capital = AbuCapital(1000000, benchmark)\n    orders_pd, action_pd, all_fit_symbols_cnt = ABuPickTimeExecute.do_symbols_with_same_factors(choice_symbols,\n                                                                                                benchmark, buy_factors2,\n                                                                                                sell_factors, capital,\n                                                                                                show=False)\n    print(orders_pd[:10].filter([\'symbol\', \'buy_cnt\', \'buy_factor\', \'buy_pos\']))\n\n\ndef sample_816():\n    """"""\n    8.1.6 \xe5\xa4\x9a\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n    :return:\n    """"""\n    # \xe9\x80\x89\xe5\xae\x9anoah\xe5\x92\x8csfun\n    target_symbols = [\'usSFUN\', \'usNOAH\']\n    # \xe9\x92\x88\xe5\xaf\xb9sfun\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa842d\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\n    buy_factors_sfun = [{\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n    # \xe9\x92\x88\xe5\xaf\xb9sfun\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa860d\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\n    sell_factors_sfun = [{\'xd\': 60, \'class\': AbuFactorSellBreak}]\n\n    # \xe9\x92\x88\xe5\xaf\xb9noah\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa821d\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\n    buy_factors_noah = [{\'xd\': 21, \'class\': AbuFactorBuyBreak}]\n    # \xe9\x92\x88\xe5\xaf\xb9noah\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa842d\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\n    sell_factors_noah = [{\'xd\': 42, \'class\': AbuFactorSellBreak}]\n\n    factor_dict = dict()\n    # \xe6\x9e\x84\xe5\xbb\xbaSFUN\xe7\x8b\xac\xe7\xab\x8b\xe7\x9a\x84buy_factors\xef\xbc\x8csell_factors\xe7\x9a\x84dict\n    factor_dict[\'usSFUN\'] = {\'buy_factors\': buy_factors_sfun, \'sell_factors\': sell_factors_sfun}\n    # \xe6\x9e\x84\xe5\xbb\xbaNOAH\xe7\x8b\xac\xe7\xab\x8b\xe7\x9a\x84buy_factors\xef\xbc\x8csell_factors\xe7\x9a\x84dict\n    factor_dict[\'usNOAH\'] = {\'buy_factors\': buy_factors_noah, \'sell_factors\': sell_factors_noah}\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n    # \xe4\xbd\xbf\xe7\x94\xa8do_symbols_with_diff_factors\xe6\x89\xa7\xe8\xa1\x8c\n    orders_pd, action_pd, all_fit_symbols = ABuPickTimeExecute.do_symbols_with_diff_factors(\n        target_symbols, benchmark, factor_dict, capital)\n    print(\'pd.crosstab(orders_pd.buy_factor, orders_pd.symbol):\\n\', pd.crosstab(orders_pd.buy_factor, orders_pd.symbol))\n\n\ndef sample_817():\n    """"""\n    8.1.7 \xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x9d\xa5\xe6\x8f\x90\xe5\x8d\x87\xe6\x8b\xa9\xe6\x97\xb6\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\n    :return:\n    """"""\n    # \xe8\xa6\x81\xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\xb2\x99\xe7\x9b\x92\xe9\x87\x8c\xe5\xb0\xb1\xe9\x82\xa3\xe5\x87\xa0\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae, \xe4\xb8\x8b\xe9\x9d\xa2\xe8\xa6\x81\xe9\x9a\x8f\xe6\x9c\xba\xe5\x81\x9a50\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\n    from abupy import EMarketSourceType\n    abupy.env.g_market_source = EMarketSourceType.E_MARKET_SOURCE_tx\n\n    abupy.env.disable_example_env_ipython()\n\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe5\x90\x8e\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe5\x9f\xba\xe5\x87\x86\xe8\xa6\x81\xe4\xbb\x8e\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe7\x8e\xaf\xe5\xa2\x83\xe6\x8d\xa2\xe5\x8f\x96\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe4\xb8\x8d\xe9\xbd\x90\xef\xbc\x8c\xe6\x97\xa0\xe6\xb3\x95\xe6\xad\xa3\xe5\xb8\xb8\xe8\xbf\x90\xe8\xa1\x8c\n    benchmark = AbuBenchmark()\n    # \xe5\xbd\x93\xe4\xbc\xa0\xe5\x85\xa5choice_symbols\xe4\xb8\xbaNone\xe6\x97\xb6\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xaf\xb9\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\n    # noinspection PyUnusedLocal\n    choice_symbols = None\n    # \xe9\xa1\xba\xe5\xba\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\x82\xe5\x9c\xba\xe5\x90\x8e300\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\n    # noinspection PyUnusedLocal\n    choice_symbols = ABuMarket.all_symbol()[-50:]\n    # \xe9\x9a\x8f\xe6\x9c\xba\xe8\x8e\xb7\xe5\x8f\x96300\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\n    choice_symbols = ABuMarket.choice_symbols(50)\n    capital = AbuCapital(1000000, benchmark)\n\n    sell_factor1 = {\'xd\': 120, \'class\': AbuFactorSellBreak}\n    sell_factor2 = {\'stop_loss_n\': 0.5, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop}\n    sell_factor3 = {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.0}\n    sell_factor4 = {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n    sell_factors = [sell_factor1, sell_factor2, sell_factor3, sell_factor4]\n    buy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                   {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n\n    orders_pd, action_pd, _ = AbuPickTimeMaster.do_symbols_with_same_factors_process(\n        choice_symbols, benchmark, buy_factors, sell_factors,\n        capital)\n\n    metrics = AbuMetricsBase(orders_pd, action_pd, capital, benchmark)\n    metrics.fit_metrics()\n    metrics.plot_returns_cmp(only_show_returns=True)\n\n    abupy.env.enable_example_env_ipython()\n\n\n""""""\n    \xe6\xb3\xa8\xe6\x84\x8f\xe6\x89\x80\xe6\x9c\x89\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe6\x9e\x9c\xe7\xad\x89\xe7\xad\x89\xe4\xb8\x8e\xe4\xb9\xa6\xe4\xb8\xad\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xa6\x81\xe6\x8e\xa7\xe5\x88\xb6\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x93\xe7\xa7\xaf\xe5\xb0\x8f\xe4\xba\x8e50mb\xef\xbc\x8c \xe6\x89\x80\xe4\xbb\xa5\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\x9c\x89\xe4\xba\x9bsymbol\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe5\xb9\xb4\xe5\xa4\x9a\xe4\xb8\x80\xe7\x82\xb9\xef\xbc\x8c\xe4\xb8\x8e\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\n    \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbe\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe9\x80\x89\xe8\x82\xa1\xe7\x9a\x84min_xd\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xbf\x99\xe9\x87\x8c\xe5\x85\xb6\xe5\xae\x9e\xe5\x8f\xaf\xe4\xbb\xa5`abupy.env.disable_example_env_ipython()`\xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\x8a\xe7\x9c\x9f\xe5\xae\x9e\xe6\x95\xb0\xe6\x8d\xae\xe3\x80\x82\n""""""\n\n\ndef sample_821_1():\n    """"""\n    8.2.1_1 \xe9\x80\x89\xe8\x82\xa1\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\n    :return:\n    """"""\n    # \xe9\x80\x89\xe8\x82\xa1\xe6\x9d\xa1\xe4\xbb\xb6threshold_ang_min=0.0, \xe5\x8d\xb3\xe8\xa6\x81\xe6\xb1\x82\xe8\x82\xa1\xe7\xa5\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe5\x90\x91\xe4\xb8\x8a\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\n    stock_pickers = [{\'class\': AbuPickRegressAngMinMax,\n                      \'threshold_ang_min\': 0.0, \'reversed\': False}]\n\n    # \xe4\xbb\x8e\xe8\xbf\x99\xe5\x87\xa0\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe9\x87\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe6\xbc\x94\xe7\xa4\xba\xe6\x96\xb9\xe4\xbe\xbf\n    # \xe4\xb8\x80\xe8\x88\xac\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe9\x83\xbd\xe4\xbc\x9a\xe6\x98\xaf\xe6\x95\xb0\xe9\x87\x8f\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x9a\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe6\xaf\x94\xe5\xa6\x82\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n    stock_pick = AbuPickStockWorker(capital, benchmark, kl_pd_manager,\n                                    choice_symbols=choice_symbols,\n                                    stock_pickers=stock_pickers)\n    stock_pick.fit()\n    # \xe6\x89\x93\xe5\x8d\xb0\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe6\x9e\x9c\n    print(\'stock_pick.choice_symbols:\', stock_pick.choice_symbols)\n\n    # \xe4\xbb\x8ekl_pd_manager\xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x89\xe8\x82\xa1\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8fget_pick_stock_kl_pd\xe4\xb8\xba\xe9\x80\x89\xe8\x82\xa1\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cget_pick_time_kl_pd\xe4\xb8\xba\xe6\x8b\xa9\xe6\x97\xb6\n    kl_pd_noah = kl_pd_manager.get_pick_stock_kl_pd(\'usNOAH\')\n    # \xe7\xbb\x98\xe5\x88\xb6\xe5\xb9\xb6\xe8\xae\xa1\xe7\xae\x97\xe8\xa7\x92\xe5\xba\xa6\n    deg = ABuRegUtil.calc_regress_deg(kl_pd_noah.close)\n    print(\'noah \xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe8\xa7\x92\xe5\xba\xa6={}\'.format(round(deg, 3)))\n\n\ndef sample_821_2():\n    """"""\n    8.2.1_2 ABuPickStockExecute\n    :return:\n    """"""\n    stock_pickers = [{\'class\': AbuPickRegressAngMinMax,\n                      \'threshold_ang_min\': 0.0, \'threshold_ang_max\': 10.0,\n                      \'reversed\': False}]\n\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n\n    print(\'ABuPickStockExecute.do_pick_stock_work:\\n\', ABuPickStockExecute.do_pick_stock_work(choice_symbols, benchmark,\n                                                                                              capital, stock_pickers))\n\n    kl_pd_sfun = kl_pd_manager.get_pick_stock_kl_pd(\'usSFUN\')\n    print(\'sfun \xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe8\xa7\x92\xe5\xba\xa6={}\'.format(round(ABuRegUtil.calc_regress_deg(kl_pd_sfun.close), 3)))\n\n\ndef sample_821_3():\n    """"""\n    8.2.1_3 reversed\n    :return:\n    """"""\n    # \xe5\x92\x8c\xe4\xb8\x8a\xe9\x9d\xa2\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\xab\xe5\xb0\xb1\xe6\x98\xafreversed=True\n    stock_pickers = [{\'class\': AbuPickRegressAngMinMax,\n                      \'threshold_ang_min\': 0.0, \'threshold_ang_max\': 10.0, \'reversed\': True}]\n\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n\n    print(\'ABuPickStockExecute.do_pick_stock_work:\\n\',\n          ABuPickStockExecute.do_pick_stock_work(choice_symbols, benchmark, capital, stock_pickers))\n\n\ndef sample_822():\n    """"""\n    8.2.2 \xe5\xa4\x9a\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\n    :return:\n    """"""\n    # \xe9\x80\x89\xe8\x82\xa1list\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x90\x8c\xe6\x97\xb6\xe7\x94\x9f\xe6\x95\x88\n    stock_pickers = [{\'class\': AbuPickRegressAngMinMax,\n                      \'threshold_ang_min\': 0.0, \'reversed\': False},\n                     {\'class\': AbuPickStockPriceMinMax, \'threshold_price_min\': 50.0,\n                      \'reversed\': False}]\n\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n\n    print(\'ABuPickStockExecute.do_pick_stock_work:\\n\',\n          ABuPickStockExecute.do_pick_stock_work(choice_symbols, benchmark, capital, stock_pickers))\n\n\ndef sample_823():\n    """"""\n    8.2.3 \xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x9d\xa5\xe6\x8f\x90\xe5\x8d\x87\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\n    :return:\n    """"""\n    from abupy import EMarketSourceType\n    abupy.env.g_market_source = EMarketSourceType.E_MARKET_SOURCE_tx\n    abupy.env.disable_example_env_ipython()\n\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n\n    # \xe9\xa6\x96\xe5\x85\x88\xe9\x9a\x8f\xe6\x8a\xbd\xe5\x8f\x9650\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\n    choice_symbols = ABuMarket.choice_symbols(50)\n    # \xe8\x82\xa1\xe4\xbb\xb7\xe5\x9c\xa815-50\xe4\xb9\x8b\xe9\x97\xb4\n    stock_pickers = [\n        {\'class\': AbuPickStockPriceMinMax, \'threshold_price_min\': 15.0,\n         \'threshold_price_max\': 50.0, \'reversed\': False}]\n    cs = AbuPickStockMaster.do_pick_stock_with_process(capital, benchmark,\n                                                       stock_pickers,\n                                                       choice_symbols)\n    print(\'len(cs):\', len(cs))\n    print(\'cs:\\n\', cs)\n\n\nif __name__ == ""__main__"":\n    sample_811()\n    # sample_812()\n    # sample_813()\n    # sample_814()\n    # sample_815()\n    # sample_816()\n    # sample_817()\n\n    # sample_821_1()\n    # sample_821_2()\n    # sample_821_3()\n    # sample_822()\n    # sample_823()\n'"
python/c9.py,5,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\n\nimport abupy\n\nfrom abupy import AbuMetricsBase\n\nfrom abupy import AbuFactorBuyBreak\nfrom abupy import AbuFactorAtrNStop\nfrom abupy import AbuFactorPreAtrNStop\nfrom abupy import AbuFactorCloseAtrNStop\n# run_loop_back\xe7\xad\x89\xe4\xb8\x80\xe4\xba\x9b\xe5\xb8\xb8\xe7\x94\xa8\xe4\xb8\x94\xe6\x9c\x80\xe5\xa4\x96\xe5\xb1\x82\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\xae\x9a\xe4\xb9\x89\xe5\x9c\xa8abu\xe4\xb8\xad\nfrom abupy import abu\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\nabupy.env.enable_example_env_ipython()\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8cNone\xe4\xb8\xba\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\nstock_pickers = None\n# \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xbe\x9d\xe7\x84\xb6\xe5\xbb\xb6\xe7\x94\xa8\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe5\x9b\xa0\xe5\xad\x90\nbuy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n               {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n\n# \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe7\xab\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\nsell_factors = [\n    {\'stop_loss_n\': 1.0, \'stop_win_n\': 3.0,\n     \'class\': AbuFactorAtrNStop},\n    {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.5},\n    {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n]\n\n\n""""""\n    \xe7\xac\xac\xe4\xb9\x9d\xe7\xab\xa0 \xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe2\x80\x94\xe2\x80\x94\xe5\xba\xa6\xe9\x87\x8f\xe4\xb8\x8e\xe4\xbc\x98\xe5\x8c\x96\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n""""""\n\n\ndef sample_91(show=True):\n    """"""\n    9.1 \xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe5\x9f\xba\xe6\x9c\xac\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb9\xe6\xb3\x95\n    :return:\n    """"""\n    # \xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0\n    read_cash = 1000000\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    # \xe4\xbd\xbf\xe7\x94\xa8run_loop_back\xe8\xbf\x90\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\n    abu_result_tuple, kl_pd_manager = abu.run_loop_back(read_cash,\n                                                        buy_factors,\n                                                        sell_factors,\n                                                        stock_pickers,\n                                                        choice_symbols=choice_symbols, n_folds=2)\n    metrics = AbuMetricsBase(*abu_result_tuple)\n    metrics.fit_metrics()\n    if show:\n        metrics.plot_returns_cmp()\n    return metrics\n\n\ndef sample_922():\n    """"""\n    9.2.2 \xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return:\n    """"""\n    metrics = sample_91(show=False)\n\n    metrics.plot_sharp_volatility_cmp()\n    plt.show()\n\n    def sharpe(rets, ann=252):\n        return rets.mean() / rets.std() * np.sqrt(ann)\n\n    print(\'\xe7\xad\x96\xe7\x95\xa5sharpe\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xba\xef\xbc\x9d{}\'.format(sharpe(metrics.algorithm_returns)))\n\n    metrics.plot_effect_mean_day()\n    plt.show()\n\n    metrics.plot_keep_days()\n    plt.show()\n\n    metrics.plot_sell_factors()\n    plt.show()\n\n    metrics.plot_max_draw_down()\n    plt.show()\n\n\n""""""\n    9.3 \xe5\x9f\xba\xe4\xba\x8egrid search\xe5\xaf\xbb\xe6\x89\xbe\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n""""""\n\nstop_win_range = np.arange(2.0, 4.5, 0.5)\nstop_loss_range = np.arange(0.5, 2, 0.5)\n\nsell_atr_nstop_factor_grid = {\n    \'class\': [AbuFactorAtrNStop],\n    \'stop_loss_n\': stop_loss_range,\n    \'stop_win_n\': stop_win_range\n}\n\nclose_atr_range = np.arange(1.0, 4.0, 0.5)\npre_atr_range = np.arange(1.0, 3.5, 0.5)\n\nsell_atr_pre_factor_grid = {\n    \'class\': [AbuFactorPreAtrNStop],\n    \'pre_atr_n\': pre_atr_range\n}\n\nsell_atr_close_factor_grid = {\n    \'class\': [AbuFactorCloseAtrNStop],\n    \'close_atr_n\': close_atr_range\n}\n\n\ndef sample_931():\n    """"""\n    9.3.1 \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4\n    :return:\n    """"""\n    print(\'\xe6\xad\xa2\xe7\x9b\x88\xe5\x8f\x82\xe6\x95\xb0stop_win_n\xe8\xae\xbe\xe7\xbd\xae\xe8\x8c\x83\xe5\x9b\xb4:{}\'.format(stop_win_range))\n    print(\'\xe6\xad\xa2\xe6\x8d\x9f\xe5\x8f\x82\xe6\x95\xb0stop_loss_n\xe8\xae\xbe\xe7\xbd\xae\xe8\x8c\x83\xe5\x9b\xb4:{}\'.format(stop_loss_range))\n\n    print(\'\xe6\x9a\xb4\xe8\xb7\x8c\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe6\x8d\x9f\xe5\x8f\x82\xe6\x95\xb0pre_atr_n\xe8\xae\xbe\xe7\xbd\xae\xe8\x8c\x83\xe5\x9b\xb4:{}\'.format(pre_atr_range))\n    print(\'\xe7\x9b\x88\xe5\x88\xa9\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88\xe5\x8f\x82\xe6\x95\xb0close_atr_n\xe8\xae\xbe\xe7\xbd\xae\xe8\x8c\x83\xe5\x9b\xb4:{}\'.format(close_atr_range))\n\n\ndef sample_932(show=True):\n    """"""\n    9.3.2 \xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\x88\x97\xe7\xbb\x84\xe5\x90\x88\n    :return:\n    """"""\n\n    from abupy import ABuGridHelper\n\n    sell_factors_product = ABuGridHelper.gen_factor_grid(\n        ABuGridHelper.K_GEN_FACTOR_PARAMS_SELL,\n        [sell_atr_nstop_factor_grid, sell_atr_pre_factor_grid, sell_atr_close_factor_grid])\n\n    if show:\n        print(\'\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe5\x85\xb1\xe6\x9c\x89{}\xe7\xa7\x8d\xe7\xbb\x84\xe5\x90\x88\xe6\x96\xb9\xe5\xbc\x8f\'.format(len(sell_factors_product)))\n        print(\'\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x880\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\xba{}\'.format(sell_factors_product[0]))\n\n    buy_bk_factor_grid1 = {\n        \'class\': [AbuFactorBuyBreak],\n        \'xd\': [42]\n    }\n\n    buy_bk_factor_grid2 = {\n        \'class\': [AbuFactorBuyBreak],\n        \'xd\': [60]\n    }\n\n    buy_factors_product = ABuGridHelper.gen_factor_grid(\n        ABuGridHelper.K_GEN_FACTOR_PARAMS_BUY, [buy_bk_factor_grid1, buy_bk_factor_grid2])\n\n    if show:\n        print(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe5\x85\xb1\xe6\x9c\x89{}\xe7\xa7\x8d\xe7\xbb\x84\xe5\x90\x88\xe6\x96\xb9\xe5\xbc\x8f\'.format(len(buy_factors_product)))\n        print(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\xba{}\'.format(buy_factors_product))\n\n    return sell_factors_product, buy_factors_product\n\n\ndef sample_933():\n    """"""\n    9.3.3 GridSearch\xe5\xaf\xbb\xe6\x89\xbe\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n    :return:\n    """"""\n    from abupy import GridSearch\n\n    read_cash = 1000000\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                      \'usTSLA\', \'usWUBA\', \'usVIPS\']\n\n    sell_factors_product, buy_factors_product = sample_932(show=False)\n\n    grid_search = GridSearch(read_cash, choice_symbols,\n                             buy_factors_product=buy_factors_product,\n                             sell_factors_product=sell_factors_product)\n\n    from abupy import ABuFileUtil\n    """"""\n        \xe6\xb3\xa8\xe6\x84\x8f\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe8\xbf\x90\xe8\xa1\x8c\xe8\x80\x97\xe6\x97\xb6\xe5\xa4\xa7\xe7\xba\xa61\xe5\xb0\x8f\xe6\x97\xb6\xe5\xa4\x9a\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\x80\xe6\x9c\x89cpu\xe9\x83\xbd\xe7\x94\xa8\xe4\xb8\x8a\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xbe\xe7\xbd\xaen_jobs\xe4\xb8\xba < cpu\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\x80\xe8\xbe\xb9\xe5\x81\x9a\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe4\xb8\x80\xe8\xbe\xb9\xe8\xb7\x91\n    """"""\n    # \xe8\xbf\x90\xe8\xa1\x8cGridSearch n_jobs=-1\xe5\x90\xaf\xe5\x8a\xa8cpu\xe4\xb8\xaa\xe6\x95\xb0\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    scores, score_tuple_array = grid_search.fit(n_jobs=-1)\n\n    """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe8\xbf\x90\xe8\xa1\x8c\xe5\xae\x8c\xe6\x88\x90\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84score_tuple_array\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8dump_pickle\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe6\x96\xb9\xe4\xbe\xbf\xe4\xbf\xae\xe6\x94\xb9\xe5\x85\xb6\xe5\xae\x83\xe9\xaa\x8c\xe8\xaf\x81\xe6\x95\x88\xe6\x9e\x9c\xe3\x80\x82\n    """"""\n    ABuFileUtil.dump_pickle(score_tuple_array, \'../gen/score_tuple_array\')\n\n    print(\'\xe7\xbb\x84\xe5\x90\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe6\x95\xb0\xe9\x87\x8f{}\'.format(len(buy_factors_product) * len(sell_factors_product)))\n    print(\'\xe6\x9c\x80\xe7\xbb\x88\xe8\xaf\x84\xe5\x88\x86\xe7\xbb\x93\xe6\x9e\x9c\xe6\x95\xb0\xe9\x87\x8f{}\'.format(len(scores)))\n\n    best_score_tuple_grid = grid_search.best_score_tuple_grid\n    AbuMetricsBase.show_general(best_score_tuple_grid.orders_pd, best_score_tuple_grid.action_pd,\n                                best_score_tuple_grid.capital, best_score_tuple_grid.benchmark)\n\n\ndef sample_934():\n    """"""\n    9.3.4 \xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe8\xaf\x84\xe5\x88\x86\n    :return:\n    """"""\n    from abupy import ABuFileUtil\n    score_fn = \'../gen/score_tuple_array\'\n    if not ABuFileUtil.file_exist(score_fn):\n        print(\'../gen/score_tuple_array not exist! please execute sample_933 first!\')\n        return\n\n    """"""\n        \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    score_tuple_array = ABuFileUtil.load_pickle(score_fn)\n    from abupy import WrsmScorer\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe4\xb8\x80\xe4\xb8\xaa\xe8\xaf\x84\xe5\x88\x86\xe7\xb1\xbbWrsmScorer\xef\xbc\x8c\xe5\xae\x83\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xe4\xb9\x8b\xe5\x89\x8dGridSearch\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84score_tuple_array\xe5\xaf\xb9\xe8\xb1\xa1\n    scorer = WrsmScorer(score_tuple_array)\n    print(\'scorer.score_pd.tail():\\n\', scorer.score_pd.tail())\n\n    # score_tuple_array[658]\xe4\xb8\x8egrid_search.best_score_tuple_grid\xe6\x98\xaf\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\n    sfs = scorer.fit_score()\n    # \xe6\x89\x93\xe5\x8d\xb0\xe5\x89\x8d15\xe4\xb8\xaa\xe9\xab\x98\xe5\x88\x86\xe7\xbb\x84\xe5\x90\x88\n    print(\'sfs[::-1][:15]:\\n\', sfs[::-1][:15])\n\n\ndef sample_935_1():\n    """"""\n    9.3.5_1 \xe4\xb8\x8d\xe5\x90\x8c\xe6\x9d\x83\xe9\x87\x8d\xe7\x9a\x84\xe8\xaf\x84\xe5\x88\x86: \xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe6\x8a\x95\xe8\xb5\x84\xe5\x9b\x9e\xe6\x8a\xa5\xe6\x9d\xa5\xe8\xaf\x84\xe5\x88\x86\n    :return:\n    """"""\n    from abupy import ABuFileUtil\n    score_fn = \'../gen/score_tuple_array\'\n    if not ABuFileUtil.file_exist(score_fn):\n        print(\'../gen/score_tuple_array not exist! please execute sample_933 first!\')\n        return\n\n    """"""\n        \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    score_tuple_array = ABuFileUtil.load_pickle(score_fn)\n\n    from abupy import WrsmScorer\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96WrsmScorer\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0weights\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe7\xac\xac\xe4\xba\x8c\xe9\xa1\xb9\xe4\xb8\xba1\xef\xbc\x8c\xe5\x85\xb6\xe4\xbb\x96\xe9\x83\xbd\xe6\x98\xaf0\xef\xbc\x8c\n    # \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe6\x8a\x95\xe8\xb5\x84\xe5\x9b\x9e\xe6\x8a\xa5\xe6\x9d\xa5\xe8\xaf\x84\xe5\x88\x86\n    scorer = WrsmScorer(score_tuple_array, weights=[0, 1, 0, 0])\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe7\x9a\x84\xe9\x98\x9f\xe5\x88\x97\n    scorer_returns_max = scorer.fit_score()\n    # \xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\x80\x92\xe5\xba\x8f\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5index\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\xba\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n    best_score_tuple_grid = score_tuple_array[scorer_returns_max.index[-1]]\n    # \xe7\x94\xb1\xe4\xba\x8e\xe7\xaf\x87\xe5\xb9\x85\xef\xbc\x8c\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe6\x89\x93\xe5\x8d\xb0\xe6\x96\x87\xe5\xad\x97\xe4\xbf\xa1\xe6\x81\xaf\n    AbuMetricsBase.show_general(best_score_tuple_grid.orders_pd,\n                                best_score_tuple_grid.action_pd,\n                                best_score_tuple_grid.capital,\n                                best_score_tuple_grid.benchmark,\n                                only_info=True)\n\n    # \xe6\x9c\x80\xe5\x90\x8e\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe6\x8a\x95\xe8\xb5\x84\xe5\x9b\x9e\xe6\x8a\xa5\xe4\xb8\x8b\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\n    print(\'best_score_tuple_grid.buy_factors, best_score_tuple_grid.sell_factors:\\n\', best_score_tuple_grid.buy_factors,\n          best_score_tuple_grid.sell_factors)\n\n\ndef sample_935_2():\n    """"""\n    9.3.5_2 \xe4\xb8\x8d\xe5\x90\x8c\xe6\x9d\x83\xe9\x87\x8d\xe7\x9a\x84\xe8\xaf\x84\xe5\x88\x86: \xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe8\x83\x9c\xe7\x8e\x87\n    :return:\n    """"""\n    from abupy import ABuFileUtil\n    score_fn = \'../gen/score_tuple_array\'\n    if not ABuFileUtil.file_exist(score_fn):\n        print(\'../gen/score_tuple_array not exist! please execute sample_933 first!\')\n        return\n\n    """"""\n        \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    score_tuple_array = ABuFileUtil.load_pickle(score_fn)\n\n    from abupy import WrsmScorer\n    # \xe5\x8f\xaa\xe6\x9c\x89\xe7\xac\xac\xe4\xb8\x80\xe9\xa1\xb9\xe4\xb8\xba1\xef\xbc\x8c\xe5\x85\xb6\xe4\xbb\x96\xe9\x83\xbd\xe6\x98\xaf0\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe8\x83\x9c\xe7\x8e\x87\xe6\x9d\xa5\xe8\xaf\x84\xe5\x88\x86\n    scorer = WrsmScorer(score_tuple_array, weights=[1, 0, 0, 0])\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x8c\x89\xe7\x85\xa7\xe8\xaf\x84\xe5\x88\x86\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe7\x9a\x84\xe9\x98\x9f\xe5\x88\x97\n    scorer_returns_max = scorer.fit_score()\n    # index[-1]\xe4\xb8\xba\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe5\xba\x8f\xe5\x8f\xb7\n    best_score_tuple_grid = score_tuple_array[scorer_returns_max.index[-1]]\n    AbuMetricsBase.show_general(best_score_tuple_grid.orders_pd,\n                                best_score_tuple_grid.action_pd,\n                                best_score_tuple_grid.capital,\n                                best_score_tuple_grid.benchmark,\n                                only_info=False)\n\n    # \xe6\x9c\x80\xe5\x90\x8e\xe6\x89\x93\xe5\x8d\xb0\xe5\x87\xba\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe8\x83\x9c\xe7\x8e\x87\xe4\xb8\x8b\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\n    print(\'best_score_tuple_grid.buy_factors, best_score_tuple_grid.sell_factors:\\n\', best_score_tuple_grid.buy_factors,\n          best_score_tuple_grid.sell_factors)\n\n\n""""""\n    9.4 \xe8\xb5\x84\xe9\x87\x91\xe9\x99\x90\xe5\x88\xb6\xe5\xaf\xb9\xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe5\xbd\xb1\xe5\x93\x8d\n\n    \xe5\xa6\x82\xe4\xb8\x8b\xe5\x86\x85\xe5\xae\xb9\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe7\x8e\xaf\xe5\xa2\x83, \xe5\xbb\xba\xe8\xae\xae\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbb\xef\xbc\x9a\n        abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x8d\xe7\xac\xac\xe5\x8d\x81\xe4\xb9\x9d\xe8\x8a\x82 \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n        \xe7\xac\xac20\xe8\x8a\x82 \xe7\xbe\x8e\xe8\x82\xa1\xe4\xba\xa4\xe6\x98\x93UMP\xe5\x86\xb3\xe7\xad\x96\n""""""\n\n\ndef sample_94_1():\n    """"""\n    9.4_1 \xe4\xb8\x8b\xe8\xbd\xbd\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x846\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae,\n    \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x90\xe8\xa1\x8c\xe8\xbf\x87abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x8d\xe7\xac\xac\xe5\x8d\x81\xe4\xb9\x9d\xe8\x8a\x82 \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x9a\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x90\xe8\xa1\x8c\n    \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x90\xe8\xa1\x8c\xe8\xbf\x87\xe5\xb0\xb1\xe4\xb8\x8d\xe8\xa6\x81\xe9\x87\x8d\xe5\xa4\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe4\xba\x86\xef\xbc\x9a\n    """"""\n    from abupy import EMarketTargetType, EMarketSourceType, EDataCacheType\n\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n    abupy.env.disable_example_env_ipython()\n    abupy.env.g_market_source = EMarketSourceType.E_MARKET_SOURCE_tx\n    abupy.env.g_data_cache_type = EDataCacheType.E_DATA_CACHE_CSV\n    # \xe9\xa6\x96\xe9\x80\x89\xe8\xbf\x99\xe9\x87\x8c\xe9\xa2\x84\xe4\xb8\x8b\xe8\xbd\xbd\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x846\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae(\xe5\x81\x9a5\xe5\xb9\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe9\xa2\x84\xe5\x85\x88\xe4\xb8\x8b\xe8\xbd\xbd6\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae)\n    abu.run_kl_update(start=\'2011-08-08\', end=\'2017-08-08\', market=EMarketTargetType.E_MARKET_TARGET_US)\n\n\ndef sample_94_2(from_cache=False):\n    """"""\n    9.4_2 \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xb8\x94\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae, mac pro\xe9\xa1\xb6\xe9\x85\x8d\xe5\xa4\xa7\xe6\xa6\x82\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xb7\x91\xe4\xba\x864\xe4\xb8\xaa\xe5\xb0\x8f\xe6\x97\xb6\n    :return:\n    """"""\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n    abupy.env.disable_example_env_ipython()\n    from abupy import EMarketDataFetchMode\n    # \xe5\x9b\xa0\xe4\xb8\xbasample_94_1\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xba\x86\xe9\xa2\x84\xe5\x85\x88\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xaeE_DATA_FETCH_FORCE_LOCAL\n    abupy.env.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n    # \xe5\x9b\x9e\xe6\xb5\x8b\xe7\x94\x9f\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x89\xb9\xe5\xbe\x81\n    abupy.env.g_enable_ml_feature = True\n    # \xe5\x9b\x9e\xe6\xb5\x8b\xe5\xb0\x86symbols\xe5\x88\x87\xe5\x89\xb2\xe5\x88\x86\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    abupy.env.g_enable_train_test_split = True\n    # \xe4\xb8\x8b\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x87\xe5\x89\xb2\xe6\xaf\x94\xe4\xbe\x8b\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba10\xef\xbc\x8c\xe5\x8d\xb3\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xba10\xe4\xbb\xbd\xef\xbc\x8c9\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c1\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\n    # \xe7\x94\xb1\xe4\xba\x8e\xe7\xbe\x8e\xe8\x82\xa1\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\x9a\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x88\x87\xe5\x89\xb2\xe5\x88\x86\xe4\xb8\xba4\xe4\xbb\xbd\xef\xbc\x8c3\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c1\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n    abupy.env.g_split_tt_n_folds = 4\n\n    from abupy import EStoreAbu\n    if from_cache:\n        abu_result_tuple = \\\n            abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                      custom_name=\'train_us\')\n    else:\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91200\xe4\xb8\x87\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe4\xbe\x9d\xe7\x84\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4atr\n        read_cash = 5000000\n        # \xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9f\xba\xe6\x95\xb0\xe8\xb5\x84\xe9\x87\x91\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe4\xb8\x87\xe5\x88\x86\xe4\xb9\x8b15\n        abupy.beta.atr.g_atr_pos_base = 0.0015\n        # \xe4\xbd\xbf\xe7\x94\xa8run_loop_back\xe8\xbf\x90\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8\xe5\x92\x8c\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\n        # choice_symbols=None\xe4\xb8\xba\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c5\xe5\xb9\xb4\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae\xe5\x9b\x9e\xe6\xb5\x8b\n        # \xe4\xb8\x8d\xe5\x90\x8c\xe7\x94\xb5\xe8\x84\x91\xe8\xbf\x90\xe8\xa1\x8c\xe9\x80\x9f\xe5\xba\xa6\xe5\xb7\xae\xe5\xbc\x82\xe5\xa4\xa7\xef\xbc\x8cmac pro\xe9\xa1\xb6\xe9\x85\x8d\xe5\xa4\xa7\xe6\xa6\x82\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xb7\x91\xe4\xba\x864\xe5\xb0\x8f\xe6\x97\xb6\n        # choice_symbols=None\xe4\xb8\xba\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c5\xe5\xb9\xb4\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae\xe5\x9b\x9e\xe6\xb5\x8b\n        abu_result_tuple, _ = abu.run_loop_back(read_cash,\n                                                buy_factors, sell_factors,\n                                                stock_pickers,\n                                                choice_symbols=None,\n                                                start=\'2012-08-08\', end=\'2017-08-08\')\n        # \xe6\x8a\x8a\xe8\xbf\x90\xe8\xa1\x8c\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe4\xbe\xbf\xe4\xb9\x8b\xe5\x90\x8e\xe5\x88\x86\xe6\x9e\x90\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe4\xbb\xa3\xe7\xa0\x81\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n        abu.store_abu_result_tuple(abu_result_tuple, n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                   custom_name=\'train_us\')\n\n    print(\'abu_result_tuple.action_pd.deal.value_counts():\\n\', abu_result_tuple.action_pd.deal.value_counts())\n\n    metrics = AbuMetricsBase(*abu_result_tuple)\n    metrics.fit_metrics()\n    metrics.plot_returns_cmp(only_show_returns=True)\n\n\ndef sample_94_3(from_cache=False, show=True):\n    """"""\n    9.4_3 \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe5\xbf\xab\xef\xbc\x8cmac pro\xe9\xa1\xb6\xe9\x85\x8d\xe5\xa4\xa7\xe6\xa6\x82\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xb7\x91\xe4\xba\x86\xe5\x8d\x8a\xe4\xb8\xaa\xe5\xb0\x8f\xe6\x97\xb6\n    :return:\n    """"""\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n    abupy.env.disable_example_env_ipython()\n    from abupy import EMarketDataFetchMode\n    # \xe5\x9b\xa0\xe4\xb8\xbasample_94_1\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xba\x86\xe9\xa2\x84\xe5\x85\x88\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xaeE_DATA_FETCH_FORCE_LOCAL\n    abupy.env.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n    abupy.env.g_enable_train_test_split = False\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n    abupy.env.g_enable_last_split_test = True\n    # \xe5\x9b\x9e\xe6\xb5\x8b\xe7\x94\x9f\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x89\xb9\xe5\xbe\x81\n    abupy.env.g_enable_ml_feature = True\n\n    from abupy import EStoreAbu\n    if from_cache:\n        abu_result_tuple_test = \\\n            abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                      custom_name=\'test_us\')\n    else:\n        read_cash = 5000000\n        abupy.beta.atr.g_atr_pos_base = 0.007\n        choice_symbols = None\n        abu_result_tuple_test, kl_pd_manager_test = abu.run_loop_back(read_cash,\n                                                                      buy_factors, sell_factors, stock_pickers,\n                                                                      choice_symbols=choice_symbols, start=\'2012-08-08\',\n                                                                      end=\'2017-08-08\')\n        abu.store_abu_result_tuple(abu_result_tuple_test, n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                   custom_name=\'test_us\')\n\n    print(\'abu_result_tuple_test.action_pd.deal.value_counts():\\n\', abu_result_tuple_test.action_pd.deal.value_counts())\n\n    metrics = AbuMetricsBase(*abu_result_tuple_test)\n    metrics.fit_metrics()\n    if show:\n        metrics.plot_returns_cmp(only_show_returns=True)\n    return metrics\n\n\ndef sample_94_4(from_cache=False):\n    """"""\n    \xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\n    9.4_4 \xe3\x80\x8a\xe9\x87\x8f\xe5\x8c\x96\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\x8b\xe8\xb7\xaf\xe3\x80\x8b\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xe6\x8a\x8a\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xe6\x89\xa9\xe5\xa4\xa7\xe5\x88\xb0\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa4\xa7\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9f\xba\xe6\x95\xb0\xe5\x8d\xb4\xe4\xb8\x8d\xe5\xa2\x9e\xe9\xab\x98\xef\xbc\x8c\xe6\x9d\xa5\xe4\xbd\xbf\xe4\xba\xa4\xe6\x98\x93\xe5\x85\xa8\xe9\x83\xa8\xe9\x83\xbd\xe6\x88\x90\xe4\xba\xa4\xef\xbc\x8c\n    \xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe6\xaf\x94\xe8\xbe\x83\xe8\x80\x97\xe6\x97\xb6\xe3\x80\x82\n\n    \xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9b\xb4\xe6\x8e\xa5\xe7\xa4\xba\xe4\xbe\x8b\xe9\x80\x9a\xe8\xbf\x87AbuMetricsBase\xe4\xb8\xad\xe7\x9a\x84transform_to_full_rate_factor\xe6\x8e\xa5\xe5\x8f\xa3\xe5\xb0\x86\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\xa7\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n    :return:\n    """"""\n    metrics_test = sample_94_3(from_cache=True, show=False)\n\n    from abupy import EStoreAbu\n    if from_cache:\n        test_us_fr = abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                               custom_name=\'test_us_full_rate\')\n        # \xe6\x9c\xac\xe5\x9c\xb0\xe8\xaf\xbb\xe5\x8f\x96\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8AbuMetricsBase\xe6\x9e\x84\xe9\x80\xa0\xe5\xba\xa6\xe9\x87\x8f\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0enable_stocks_full_rate_factor=True, \xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\n        test_frm = AbuMetricsBase(test_us_fr.orders_pd, test_us_fr.action_pd, test_us_fr.capital, test_us_fr.benchmark,\n                                  enable_stocks_full_rate_factor=True)\n        test_frm.fit_metrics()\n    else:\n        test_frm = metrics_test.transform_to_full_rate_factor(n_process_kl=4, show=False)\n        # \xe8\xbd\xac\xe6\x8d\xa2\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe8\xb5\xb7\xe6\x9d\xa5\xef\xbc\x8c\xe4\xb8\x8b\xe6\xac\xa1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8\xe5\x86\x8d\xe8\xbd\xac\xe6\x8d\xa2\xe4\xba\x86\n        from abupy import AbuResultTuple\n        test_us_fr = AbuResultTuple(test_frm.orders_pd, test_frm.action_pd, test_frm.capital, test_frm.benchmark)\n        abu.store_abu_result_tuple(test_us_fr, n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                   custom_name=\'test_us_full_rate\')\n\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8test_frm\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe9\x83\xbd\xe9\xa1\xba\xe5\x88\xa9\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xaf\x94\xe4\xbe\x8b:100.0000%\xef\xbc\x8c\xe4\xbd\x86\xe8\xb5\x84\xe9\x87\x91\xe5\x88\xa9\xe7\x94\xa8\xe7\x8e\x87\xe6\x98\xbe\xe7\x84\xb6\xe8\xbf\x87\xe4\xbd\x8e\xef\xbc\x8c\n        \xe5\xae\x83\xe5\xaf\xbc\xe8\x87\xb4\xe5\x9f\xba\xe5\x87\x86\xe6\x94\xb6\xe7\x9b\x8a\xe6\x9b\xb2\xe7\xba\xbf\xe5\x92\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8a\xe6\x9b\xb2\xe7\xba\xbf\xe4\xb8\x8d\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe9\x87\x8f\xe7\xba\xa7\xe4\xb8\x8a\xef\xbc\x8c\xe6\x97\xa0\xe6\xb3\x95\xe6\x9c\x89\xe6\x95\x88\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xaf\xb9\xe6\xaf\x94\n    """"""\n    AbuMetricsBase.show_general(test_frm.orders_pd,\n                                test_frm.action_pd, test_frm.capital, test_frm.benchmark, only_show_returns=True)\n    """"""\xe8\xbd\xac\xe6\x8d\xa2\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84test_frm\xe5\x8d\xb3\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x8b\xe9\x9d\xa2\xe4\xbd\xbf\xe7\x94\xa8test_frm\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xbb\xa1\xe4\xbb\x93\xe5\xba\xa6\xe9\x87\x8f\xe5\x8d\xb3\xe5\x8f\xaf""""""\n    print(type(test_frm))\n    test_frm.plot_returns_cmp(only_show_returns=True)\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8e\xe5\x9f\xba\xe5\x87\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x8c\xe6\x9c\x80\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8plot_order_returns_cmp\n    metrics_test.plot_order_returns_cmp()\n\n""""""\n    \xe5\x85\xb6\xe5\xae\x83\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b, A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x85\xa8\xe5\xb1\x80\xe8\xae\xbe\xe7\xbd\xae\n\n    \xe8\xaf\xb7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe7\x9b\xb8\xe5\x85\xb3\xe7\xab\xa0\xe8\x8a\x82\n""""""\n\nif __name__ == ""__main__"":\n    sample_91()\n    # sample_922()\n    # sample_931()\n    # sample_932()\n    # \xe8\x80\x97\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\n    # sample_933()\n    # sample_934()\n    # sample_935_1()\n    # sample_935_2()\n    # sample_94_1()\n    # sample_94_2()\n    # sample_94_2(from_cache=True)\n    # sample_94_3()\n    # sample_94_3(from_cache=True)\n    # sample_94_4()\n    # sample_94_4(from_cache=True)\n'"
python/extA.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport seaborn as sns\nimport warnings\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import ABuSymbolPd\nfrom abupy import EMarketSourceType\nfrom abupy import EMarketDataFetchMode\nfrom abupy import AbuFactorBuyBreak\nfrom abupy import AbuFactorAtrNStop\nfrom abupy import AbuFactorPreAtrNStop\nfrom abupy import AbuFactorCloseAtrNStop\nfrom abupy import AbuMetricsBase\nfrom abupy import abu\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8cNone\xe4\xb8\xba\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\nstock_pickers = None\n# \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xbe\x9d\xe7\x84\xb6\xe5\xbb\xb6\xe7\x94\xa8\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe5\x9b\xa0\xe5\xad\x90\nbuy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n               {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n# \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe7\xab\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\nsell_factors = [\n    {\'stop_loss_n\': 1.0, \'stop_win_n\': 3.0,\n     \'class\': AbuFactorAtrNStop},\n    {\'class\': AbuFactorPreAtrNStop, \'pre_atr_n\': 1.5},\n    {\'class\': AbuFactorCloseAtrNStop, \'close_atr_n\': 1.5}\n]\n\n""""""\n    \xe9\x99\x84\xe5\xbd\x95A \xe9\x87\x8f\xe5\x8c\x96\xe7\x8e\xaf\xe5\xa2\x83\xe9\x83\xa8\xe7\xbd\xb2\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n\n    * \xe6\x9c\xac\xe8\x8a\x82\xe5\xbb\xba\xe8\xae\xae\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3: \xe7\xac\xac19\xe8\x8a\x82 \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n""""""\n\n\ndef sample_a21():\n    """"""\n    A.2.1 \xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe7\x9a\x84\xe5\x88\x87\xe6\x8d\xa2\n    :return:\n    """"""\n    # \xe8\xa1\xa8A-1\xe6\x89\x80\xe7\xa4\xba\n    print(ABuSymbolPd.make_kl_df(\'601398\').tail())\n\n    # \xe5\xb1\x80\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8enable_example_env_ipython\xef\xbc\x8c\xe7\xa4\xba\xe4\xbe\x8b\n    abupy.env.enable_example_env_ipython()\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\xac\xe5\x9c\xb0\xe6\x9c\x89\xe7\x9b\xb8\xe5\xba\x94\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82\xe4\xb8\x8b\xe4\xbb\xa3\xe7\xa0\x81\xe5\xbc\xba\xe5\x88\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\n    # abupy.env.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n    # \xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0\n    read_cash = 1000000\n\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\', \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    # \xe4\xbd\xbf\xe7\x94\xa8run_loop_back\xe8\xbf\x90\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\n    abu_result_tuple, _ = abu.run_loop_back(read_cash,\n                                            buy_factors, sell_factors, stock_pickers, choice_symbols=choice_symbols,\n                                            n_folds=2)\n    metrics = AbuMetricsBase(*abu_result_tuple)\n    metrics.fit_metrics()\n    metrics.plot_returns_cmp()\n\n    # *****************************************************************************************************************\n    # \xe5\x88\x87\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n    abupy.env.g_market_source = EMarketSourceType.E_MARKET_SOURCE_tx\n    # \xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n    abupy.env.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\n    choice_symbols = [\'601398\', \'600028\', \'601857\', \'601318\', \'600036\', \'000002\', \'600050\', \'600030\']\n    # \xe4\xbd\xbf\xe7\x94\xa8run_loop_back\xe8\xbf\x90\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\n    abu_result_tuple, _ = abu.run_loop_back(read_cash,\n                                            buy_factors, sell_factors, stock_pickers, choice_symbols=choice_symbols,\n                                            n_folds=2)\n\n    metrics = AbuMetricsBase(*abu_result_tuple)\n    metrics.fit_metrics()\n    metrics.plot_returns_cmp()\n\n\n""""""\n    A.2.2 \xe7\x9b\xae\xe6\xa0\x87\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x88\x87\xe6\x8d\xa2\n    A.2.3 A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xa4\xba\xe4\xbe\x8b\n\n    * \xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\xe8\xaf\xb7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x9a\xe7\xac\xac8\xe8\x8a\x82 A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c \xe7\xac\xac20\xe8\x8a\x82 A\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\n""""""\n\n""""""\n    A.2.4 \xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xa4\xba\xe4\xbe\x8b\n\n    * \xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\xe8\xaf\xb7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x9a\xe7\xac\xac9\xe8\x8a\x82 \xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\n""""""\n\nif __name__ == ""__main__"":\n    sample_a21()\n    # sample_a23_1()\n    # sample_a23_2()\n    # sample_a23_2(from_cache=True)\n    # sample_a24_1()\n    # sample_a24_2()\n    # sample_a24_2(from_cache=True)\n'"
python/extB.py,13,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport seaborn as sns\nimport warnings\nimport numpy as np\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nfrom abupy import tl\nfrom abupy import abu\nimport abupy\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n\n""""""\n    \xe9\x87\x8f\xe5\x8c\x96\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\x88\x86\xe6\x9e\x90\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n\n    \xe6\x9c\xac\xe8\x8a\x82\xe5\xbb\xba\xe8\xae\xae\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x9a\xe7\xac\xac14\xe8\x8a\x82 \xe9\x87\x8f\xe5\x8c\x96\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\x88\x86\xe6\x9e\x90\xe5\xba\x94\xe7\x94\xa8\n""""""\n\n\ndef sample_b0():\n    """"""\n    \xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\xe9\xbb\x98\xe8\xae\xa4\xe5\xbc\xba\xe5\x88\xb6\xe4\xbd\xbf\xe7\x94\xa8local\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x9c\xac\xe5\x9c\xb0\xe6\x97\xa0\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe8\xaf\xb7\xe5\x85\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\n\n    \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x90\xe8\xa1\x8c\xe8\xbf\x87abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x8d\xe7\xac\xac\xe5\x8d\x81\xe4\xb9\x9d\xe8\x8a\x82 \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x9a\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x90\xe8\xa1\x8c\n    \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x90\xe8\xa1\x8c\xe8\xbf\x87\xe5\xb0\xb1\xe4\xb8\x8d\xe8\xa6\x81\xe9\x87\x8d\xe5\xa4\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe4\xba\x86\xef\xbc\x9a\n    """"""\n    from abupy import EMarketTargetType, EMarketSourceType, EDataCacheType\n\n    # \xe5\x85\xb3\xe9\x97\xad\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n    abupy.env.disable_example_env_ipython()\n    abupy.env.g_market_source = EMarketSourceType.E_MARKET_SOURCE_tx\n    abupy.env.g_data_cache_type = EDataCacheType.E_DATA_CACHE_CSV\n    # \xe9\xa6\x96\xe9\x80\x89\xe8\xbf\x99\xe9\x87\x8c\xe9\xa2\x84\xe4\xb8\x8b\xe8\xbd\xbd\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x846\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae(\xe5\x81\x9a5\xe5\xb9\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe9\xa2\x84\xe5\x85\x88\xe4\xb8\x8b\xe8\xbd\xbd6\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae)\n    abu.run_kl_update(start=\'2011-08-08\', end=\'2017-08-08\', market=EMarketTargetType.E_MARKET_TARGET_US)\n\n\ndef sample_b1():\n    """"""\n    B1 \xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    :return:\n    """"""\n    arr1 = np.random.rand(10000)\n    arr2 = np.random.rand(10000)\n\n    corr = np.cov(arr1, arr2) / np.std(arr1) * np.std(arr2)\n    print(\'corr:\\n\', corr)\n    print(\'corr[0, 1]:\', corr[0, 1])\n\n    print(\'np.corrcoef(arr1, arr2)[0, 1]:\', np.corrcoef(arr1, arr2)[0, 1])\n\n\n# noinspection PyTypeChecker\ndef sample_b2():\n    """"""\n    B2 \xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\xa7\xa9\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    :return:\n    """"""\n    arr1 = np.random.rand(10000)\n    arr2 = arr1 + np.random.normal(0, .2, 10000)\n\n    print(\'np.corrcoef(arr1, arr2)[0, 1]:\', np.corrcoef(arr1, arr2)[0, 1])\n\n    import scipy.stats as stats\n    demo_list = [1, 2, 10, 100, 2, 1000]\n    print(\'\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97: \', demo_list)\n    print(\'\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe7\xa7\xa9: \', list(stats.rankdata(demo_list)))\n\n    # \xe5\xae\x9e\xe7\x8e\xb0\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\xa7\xa9\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    def spearmanr(a, b=None, axis=0):\n        a, outaxis = _chk_asarray(a, axis)\n        ar = np.apply_along_axis(stats.rankdata, outaxis, a)\n        br = None\n        if b is not None:\n            b, axisout = _chk_asarray(b, axis)\n            br = np.apply_along_axis(stats.rankdata, axisout, b)\n        return np.corrcoef(ar, br, rowvar=outaxis)\n\n    def _chk_asarray(a, axis):\n        if axis is None:\n            a = np.ravel(a)\n            outaxis = 0\n        else:\n            a = np.asarray(a)\n            outaxis = axis\n        if a.ndim == 0:\n            a = np.atleast_1d(a)\n        return a, outaxis\n\n    print(\'spearmanr(arr1, arr2)[0, 1]:\', spearmanr(arr1, arr2)[0, 1])\n\n    """"""\n        scipy.stats\xe4\xb8\xad\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\x81\xe8\xa3\x85\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\xa7\xa9\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe5\x87\xbd\xe6\x95\xb0stats.spearmanr()\xe5\x87\xbd\xe6\x95\xb0\n        \xe6\xb3\xa8\xe6\x84\x8f\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe9\x80\x9f\xe5\xba\xa6\xe6\xb2\xa1\xe6\x9c\x89\xe4\xb8\x8a\xe8\xbf\xb0\xe8\x87\xaa\xe5\xb7\xb1\xe5\xae\x9e\xe7\x8e\xb0\xe8\xae\xa1\xe7\xae\x97spearmanr\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\xbf\xab\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x99\x84\xe5\x8a\xa0\xe8\xae\xa1\xe7\xae\x97\xe4\xba\x86pvalue\n    """"""\n    print(\'stats.spearmanr(arr1, arr2):\', stats.spearmanr(arr1, arr2))\n\n\n""""""\n    B3 \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\n""""""\n\n""""""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b1\xe3\x80\x91\xe4\xbd\xbf\xe7\x94\xa8abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xe7\x9a\x84ABuSimilar.find_similar_with_xxx()\xe5\x87\xbd\xe6\x95\xb0\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\x8e\xe7\x9b\xae\xe6\xa0\x87\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9b\xb8\xe5\x85\xb3\xe7\xa8\x8b\xe5\xba\xa6\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n""""""\n\n\ndef sample_b3_1():\n    """"""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b1\xe3\x80\x91\xe4\xbd\xbf\xe7\x94\xa8abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xe7\x9a\x84ABuSimilar.find_similar_with_xxx()\xe5\x87\xbd\xe6\x95\xb0\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\x8e\xe7\x9b\xae\xe6\xa0\x87\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9b\xb8\xe5\x85\xb3\xe7\xa8\x8b\xe5\xba\xa6\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return:\n    """"""\n    # find_similar_with_cnt\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xb8\x8etsla\xe7\x9b\xb8\xe5\x85\xb3top10\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8atsla\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7dict\xef\xbc\x9acmp_cnt=252(252\xe5\xa4\xa9)\xef\xbc\x8c\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xef\xbc\x8cE_CORE_TYPE_PEARS(\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a)\n    from abupy import find_similar_with_cnt, ECoreCorrType\n    _ = find_similar_with_cnt(\'usTSLA\', cmp_cnt=252, show_cnt=10, rolling=True, show=True,\n                              corr_type=ECoreCorrType.E_CORE_TYPE_PEARS)\n\n    # find_similar_with_se\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xb8\x8etsla\xe7\x9b\xb8\xe5\x85\xb3top10\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8atsla\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7dict\xef\xbc\x9a\xe4\xbb\x8e\'2012-01-01\'\xe7\x9b\xb4\xe5\x88\xb0\'2017-01-01\'5\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\x9d\x9e\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xef\xbc\x8c\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\n    from abupy import find_similar_with_se\n    _ = find_similar_with_se(\'usTSLA\', start=\'2012-01-01\', end=\'2017-01-01\', show_cnt=10, rolling=False,\n                             show=True, corr_type=ECoreCorrType.E_CORE_TYPE_PEARS)\n\n    # find_similar_with_folds\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xb8\x8etsla\xe7\x9b\xb8\xe5\x85\xb3top10\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8atsla\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7dict\xef\xbc\x9an_folds=3(3\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae)\xef\xbc\x8c\n    # \xe9\x9d\x9e\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xef\xbc\x8cE_CORE_TYPE_SPERM\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\n    from abupy import find_similar_with_folds\n    _ = find_similar_with_folds(\'usTSLA\', n_folds=3, show_cnt=10, rolling=False, show=True,\n                                corr_type=ECoreCorrType.E_CORE_TYPE_SPERM)\n\n\n""""""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b2\xe3\x80\x91\xe4\xbd\xbf\xe7\x94\xa8abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xe7\x9a\x84ABuTLSimilar.calc_similar()\xe5\x87\xbd\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9b\xb8\xe5\xaf\xb9\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe8\xaf\x84\xe7\xba\xa7rank\n""""""\n\n\ndef sample_b3_2():\n    """"""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b2\xe3\x80\x91\xe4\xbd\xbf\xe7\x94\xa8abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xe7\x9a\x84ABuTLSimilar.calc_similar()\xe5\x87\xbd\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9b\xb8\xe5\xaf\xb9\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe8\xaf\x84\xe7\xba\xa7rank\n    :return:\n    """"""\n    # \xe4\xbb\xa5\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa7\x82\xe5\xaf\x9f\xe8\x80\x85\xef\xbc\x8cusTSLA\xe4\xb8\x8eusNOAH\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\n    rank_score, sum_rank = tl.similar.calc_similar(\'usNOAH\', \'usTSLA\')\n    print(\'rank_score\', rank_score)\n    from abupy import find_similar_with_cnt\n    net_cg_ret = find_similar_with_cnt(\'usTSLA\', cmp_cnt=252, show=False)\n\n    # \xe4\xbb\xa5usTSLA\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa7\x82\xe5\xaf\x9f\xe8\x80\x85\xef\xbc\x8c\xe5\xae\x83\xe4\xb8\x8eusNOAH\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe6\x95\xb0\xe5\x80\xbc\n    for ncr in net_cg_ret:\n        if ncr[0] == \'usNOAH\':\n            print(ncr[1])\n            break\n    """"""\n        \xe4\xbb\xa5\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa7\x82\xe5\xaf\x9f\xe8\x80\x85\xef\xbc\x8c\xe4\xb8\x8eusTSLA\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7TOP 10\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        \xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\x86calc_similar\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84sum_rank\xe4\xbc\xa0\xe5\x85\xa5calc_similar_top\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x94\xa8\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8\xe5\x86\x8d\xe8\xae\xa1\xe7\xae\x97\xe4\xba\x86\n    """"""\n    tl.similar.calc_similar_top(\'usTSLA\', sum_rank)\n\n\n""""""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b3\xe3\x80\x91\xe7\x9b\xb8\xe5\x85\xb3\xe4\xb8\x8e\xe5\x8d\x8f\xe6\x95\xb4\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe7\xae\x80\xe5\x8d\x95\xe9\x87\x8f\xe5\x8c\x96\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5, \xe4\xbd\xbf\xe7\x94\xa8\xe5\xb0\x81\xe8\xa3\x85\xe5\xa5\xbd\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0coint_similar()\n""""""\n\n\ndef sample_b3_3():\n    """"""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b3\xe3\x80\x91\xe7\x9b\xb8\xe5\x85\xb3\xe4\xb8\x8e\xe5\x8d\x8f\xe6\x95\xb4\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe7\xae\x80\xe5\x8d\x95\xe9\x87\x8f\xe5\x8c\x96\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5, \xe4\xbd\xbf\xe7\x94\xa8\xe5\xb0\x81\xe8\xa3\x85\xe5\xa5\xbd\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0coint_similar()\n    :return:\n    """"""\n    tl.similar.coint_similar(\'usTSLA\')\n\n\n""""""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b4\xe3\x80\x91abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe5\x90\x88\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xef\xbc\x8c\xe7\xbc\x96\xe5\x86\x99\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\n""""""\n\n\ndef sample_b3_4():\n    """"""\n    \xe3\x80\x90\xe7\xa4\xba\xe4\xbe\x8b4\xe3\x80\x91abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe5\x90\x88\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xef\xbc\x8c\xe7\xbc\x96\xe5\x86\x99\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\n    AbuPickSimilarNTop\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe8\xaf\xb7\xe8\x87\xaa\xe8\xa1\x8c\xe9\x98\x85\xe8\xaf\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe7\xae\x80\xe5\x8d\x95\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe3\x80\x82\n    :return:\n    """"""\n    from abupy import AbuPickSimilarNTop\n    from abupy import AbuPickStockWorker\n    from abupy import AbuBenchmark, AbuCapital, AbuKLManager\n\n    benchmark = AbuBenchmark()\n\n    # \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90AbuPickSimilarNTop\xef\xbc\x8c \xe5\xaf\xbb\xe6\x89\xbe\xe4\xb8\x8eusTSLA\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe4\xb8\x8d\xe4\xbd\x8e\xe4\xba\x8e0.95\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    # \xe8\xbf\x99\xe9\x87\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\xa5\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa7\x82\xe5\xaf\x9f\xe8\x80\x85\xe6\x96\xb9\xe5\xbc\x8f\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb40-1\n    stock_pickers = [{\'class\': AbuPickSimilarNTop,\n                      \'similar_stock\': \'usTSLA\', \'threshold_similar_min\': 0.95}]\n\n    # \xe4\xbb\x8e\xe8\xbf\x99\xe5\x87\xa0\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe9\x87\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe6\xbc\x94\xe7\xa4\xba\xe6\x96\xb9\xe4\xbe\xbf\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe9\x83\xbd\xe4\xbc\x9a\xe6\x98\xaf\xe6\x95\xb0\xe9\x87\x8f\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x9a\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe6\xaf\x94\xe5\xa6\x82\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\n    choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\', \'usTSLA\', \'usWUBA\', \'usVIPS\']\n\n    capital = AbuCapital(1000000, benchmark)\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n    stock_pick = AbuPickStockWorker(capital, benchmark, kl_pd_manager, choice_symbols=choice_symbols,\n                                    stock_pickers=stock_pickers)\n    stock_pick.fit()\n    print(\'stock_pick.choice_symbols:\\n\', stock_pick.choice_symbols)\n\n    """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90first_choice\xe5\xb1\x9e\xe6\x80\xa7\xe6\x89\xa7\xe8\xa1\x8c\xe6\x89\xb9\xe9\x87\x8f\xe4\xbc\x98\xe5\x85\x88\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe9\x98\x85\xe8\xaf\xbb\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\n    """"""\n    # \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90AbuPickSimilarNTop\xef\xbc\x8c \xe5\xaf\xbb\xe6\x89\xbe\xe4\xb8\x8eusTSLA\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe4\xb8\x8d\xe4\xbd\x8e\xe4\xba\x8e0.95\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    # \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xae\'first_choice\':True\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbc\x98\xe5\x85\x88\xe6\x89\xb9\xe9\x87\x8f\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x8e\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe9\x80\x89\xe8\x82\xa1\n    stock_pickers = [{\'class\': AbuPickSimilarNTop, \'first_choice\': True,\n                      \'similar_stock\': \'usTSLA\', \'threshold_similar_min\': 0.95}]\n    benchmark = AbuBenchmark()\n    capital = AbuCapital(1000000, benchmark)\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n    stock_pick = AbuPickStockWorker(capital, benchmark, kl_pd_manager, choice_symbols=None,\n                                    stock_pickers=stock_pickers)\n    stock_pick.fit()\n    print(\'stock_pick.choice_symbols:\\n\', stock_pick.choice_symbols)\n\nif __name__ == ""__main__"":\n    # sample_b0()\n    sample_b1()\n    # sample_b2()\n    # sample_b3_1()\n    # sample_b3_2()\n    # sample_b3_3()\n    # sample_b3_4()\n'"
python/extC.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nimport seaborn as sns\nimport warnings\n\n# noinspection PyUnresolvedReferences\nimport abu_local_env\nimport abupy\nfrom abupy import EStoreAbu, abu\nfrom abupy import ABuSymbolPd\nfrom abupy import tl\nfrom abupy import nd\nfrom abupy import ABuMarketDrawing\n\nwarnings.filterwarnings(\'ignore\')\nsns.set_context(rc={\'figure.figsize\': (14, 7)})\n\n""""""\n    \xe9\x99\x84\xe5\xbd\x95C-\xe9\x87\x8f\xe5\x8c\x96\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe5\x8f\x8a\xe6\x8c\x87\xe6\xa0\x87\xe5\xba\x94\xe7\x94\xa8\n\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9fgithub\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9ahttps://github.com/bbfamily/abu (\xe6\x82\xa8\xe7\x9a\x84star\xe6\x98\xaf\xe6\x88\x91\xe7\x9a\x84\xe5\x8a\xa8\xe5\x8a\x9b\xef\xbc\x81)\n    abu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xe6\x95\x99\xe7\xa8\x8bipython notebook\xef\xbc\x9ahttps://github.com/bbfamily/abu/tree/master/abupy_lecture\n\n    \xe6\x9c\xac\xe8\x8a\x82\xe5\x86\x85\xe5\xae\xb9\xe5\xbb\xba\xe8\xae\xae\xe5\xaf\xb9\xe7\x85\xa7\xe9\x98\x85\xe8\xaf\xbbabu\xe9\x87\x8f\xe5\x8c\x96\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x9a\xe7\xac\xac13\xe8\x8a\x82 \xe9\x87\x8f\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe5\xba\x94\xe7\x94\xa8\n""""""\n\n\ndef sample_c1():\n    """"""\n    C.1 \xe9\x87\x8f\xe5\x8c\x96\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe5\xba\x94\xe7\x94\xa8\n    :return:\n    """"""\n    tsla_df = ABuSymbolPd.make_kl_df(\'usTSLA\', n_folds=2)\n\n    jumps = tl.jump.calc_jump(tsla_df)\n    print(\'jumps:\\n\', jumps)\n\n    # sw[0]\xe4\xbb\xa3\xe8\xa1\xa8\xe9\x9d\x9e\xe6\x97\xb6\xe9\x97\xb4\xe5\x9b\xa0\xe7\xb4\xa0\xe7\x9a\x84jump_power\xef\xbc\x8csw[1]\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe5\x9b\xa0\xe7\xb4\xa0\xe7\x9a\x84jump_power\xef\xbc\x8c\xe5\xbd\x93sw[0]=1\xe6\x97\xb6\xe4\xb8\x8e\xe9\x9d\x9e\xe5\x8a\xa0\xe6\x9d\x83\xe6\x96\xb9\xe5\xbc\x8f\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe5\xae\x9e\xe7\x8e\xb0\xe8\xaf\xb7\xe5\x8f\x82\xe8\x80\x83\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\n    filter_jumps = tl.jump.calc_jump_line_weight(tsla_df, sw=(0.5, 0.5))\n    print(\'filter_jumps:\\n\', filter_jumps)\n\n    # tl.wave.calc_wave_abs()\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x83\x85\xe5\x86\xb5\n    tl.wave.calc_wave_abs(tsla_df, xd=21, show=True)\n\n\n""""""\n    C.2 \xe9\x87\x8f\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\xba\x94\xe7\x94\xa8: \xe5\xaf\xb9\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe5\xa4\xb1\xe8\xb4\xa5\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe4\xba\xba\xe5\xb7\xa5\xe5\x88\x86\xe6\x9e\x90\n""""""\n\n\ndef sample_c2():\n    """"""\n    C.2 \xe9\x87\x8f\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\xba\x94\xe7\x94\xa8: \xe5\xaf\xb9\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe5\xa4\xb1\xe8\xb4\xa5\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe4\xba\xba\xe5\xb7\xa5\xe5\x88\x86\xe6\x9e\x90\n    :return:\n    """"""\n    abupy.env.disable_example_env_ipython()\n\n    # \xe4\xbb\x8e\xe4\xb9\x8b\xe5\x89\x8d\xe7\xab\xa0\xe8\x8a\x82\xe7\x9a\x84\xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n    abu_result_tuple_train = abu.load_abu_result_tuple(n_folds=5, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                                       custom_name=\'train_cn\')\n    # \xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89orders\xe4\xb8\xad\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\n    has_result = abu_result_tuple_train.orders_pd[\n        abu_result_tuple_train.orders_pd.result == -1]\n\n    # \xe9\x9a\x8f\xe4\xbe\xbf\xe6\x8b\xbf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x9c\xe4\xb8\xba\xe7\xa4\xba\xe4\xbe\x8b\n    sample_order = has_result.ix[100]\n    _ = ABuMarketDrawing.plot_candle_from_order(sample_order)\n\n    nd.macd.plot_macd_from_order(sample_order, date_ext=252)\n    nd.boll.plot_boll_from_order(has_result.ix[100], date_ext=252)\n    nd.ma.plot_ma_from_order(has_result.ix[100], date_ext=252, time_period=[10, 20, 30, 60, 90, 120])\n\n\nif __name__ == ""__main__"":\n    sample_c1()\n    # sample_c2()\n'"
python/happy_life.py,12,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nfrom abc import ABCMeta, abstractmethod\nfrom abupy import six\n\n# \xe6\xaf\x8f\xe4\xb8\xaa\xe4\xba\xba\xe5\xb9\xb3\xe5\x9d\x87\xe5\xaf\xbf\xe5\x91\xbd\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x98\xaf75\xe5\xb9\xb4\xef\xbc\x8c\xe7\xba\xa675*365=27375\xe5\xa4\xa9\nK_INIT_LIVING_DAYS = 27375\n\n\nclass Person(object):\n    """"""\n        \xe4\xba\xba\xe7\xb1\xbb\n    """"""\n\n    def __init__(self):\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\xba\xe5\xb9\xb3\xe5\x9d\x87\xe8\x83\xbd\xe6\xb4\xbb\xe7\x9a\x84\xe5\xaf\xbf\xe5\x91\xbd\n        self.living = K_INIT_LIVING_DAYS\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\n        self.happiness = 0\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb4\xa2\xe5\xaf\x8c\xe5\x80\xbc\n        self.wealth = 0\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\n        self.fame = 0\n        # \xe6\xb4\xbb\xe7\x9d\x80\xe7\x9a\x84\xe7\xac\xac\xe5\x87\xa0\xe5\xa4\xa9\n        self.living_day = 0\n\n    def live_one_day(self, seek):\n        """"""\n        \xe6\xaf\x8f\xe5\xa4\xa9\xe5\x8f\xaa\xe8\x83\xbd\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x80\xe4\xb8\xaaseek\xef\xbc\x8c\xe8\xbf\x99\xe4\xb8\xaaseek\xe5\x86\xb3\xe5\xae\x9a\xe4\xba\x86\xe4\xbd\xa0\xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\x98\xaf\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\n        seek\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8b\xe9\x9d\xa2\xe5\xb0\x86\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84BaseSeekDay\n        :param seek:\n        :return:\n        """"""\n        # \xe8\xb0\x83\xe7\x94\xa8\xe6\xaf\x8f\xe4\xb8\xaa\xe7\x8b\xac\xe7\x89\xb9\xe7\x9a\x84BaseSeekDay\xe7\xb1\xbb\xe9\x83\xbd\xe4\xbc\x9a\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84do_seek_day\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe8\x8e\xb7\n        consume_living, happiness, wealth, fame = seek.do_seek_day()\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe8\xa6\x81\xe5\x87\x8f\xe5\x8e\xbb\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9bseek\xe5\x89\x8d\xe9\x9d\xa2\xe8\xbf\x98\xe4\xbc\x9a\xe5\xa2\x9e\xe5\x8a\xa0\xe7\x94\x9f\xe5\x91\xbd\n        self.living -= consume_living\n        # seek\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe7\xa7\xaf\xe7\xb4\xaf\n        self.happiness += happiness\n        # seek\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\n        self.wealth += wealth\n        # seek\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\xa7\xaf\xe7\xb4\xaf\n        self.fame += fame\n        # \xe6\xb4\xbb\xe5\xae\x8c\xe8\xbf\x99\xe4\xb8\x80\xe5\xa4\xa9\xe4\xba\x86\n        self.living_day += 1\n\n\nclass BaseSeekDay(six.with_metaclass(ABCMeta, object)):\n    def __init__(self):\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\n        self.living_consume = 0\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\n        self.happiness_base = 0\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\n        self.wealth_base = 0\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\n        self.fame_base = 0\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.living_factor = [0]\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.happiness_factor = [0]\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.wealth_factor = [0]\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe6\xaf\x8f\xe5\xa4\xa9\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self.fame_factor = [0]\n\n        # \xe8\xbf\xbd\xe6\xb1\x82\xe4\xba\x86\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\xe4\xba\x86\xe8\xbf\x99\xe4\xb8\x80\xe7\x94\x9f\n        self.do_seek_day_cnt = 0\n        # \xe5\xad\x90\xe7\xb1\xbb\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb8\xb8\xe6\x95\xb0\xe5\x8f\x8a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\xe8\xae\xbe\xe7\xbd\xae\n        self._init_self()\n\n    @abstractmethod\n    def _init_self(self, *args, **kwargs):\n        # \xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xe7\xad\x89\xe5\xb8\xb8\xe6\x95\xb0\xe8\xae\xbe\xe7\xbd\xae\n        pass\n\n    @abstractmethod\n    def _gen_living_days(self, *args, **kwargs):\n        # \xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        pass\n\n    def do_seek_day(self):\n        """"""\n        \xe6\xaf\x8f\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe8\xbf\xbd\xe6\xb1\x82\xe5\x85\xb7\xe4\xbd\x93seek\n        :return:\n        """"""\n        # \xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97=living_consume:\xe6\xb6\x88\xe8\x80\x97\xe5\xb8\xb8\xe6\x95\xb0 * happiness_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.living_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.living_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaaliving_factor[-1]\n            consume_living = \\\n                self.living_factor[-1] * self.living_consume\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8aliving_factor\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\n            # HealthSeekDay\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xef\xbc\x8cliving_factor\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x80\xbc\xe5\x8d\xb3\xe7\x94\xb1\xe8\xb4\x9f\xe5\x80\xbc->\xe6\xad\xa3\xe5\x80\xbc\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x90\xe7\xb1\xbbliving_factor\xe4\xbc\x9a\xe6\x9c\x89\xe8\x87\xaa\xe5\xb7\xb1\xe7\x89\xb9\xe7\x82\xb9\xe7\x9a\x84\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\xe5\x8f\x8a\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4\xe6\xaf\x8f\xe4\xb8\xaa\n            # \xe8\xbf\xbd\xe6\xb1\x82\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe9\x9a\x8f\xe7\x9d\x80\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe5\x8f\x98\xe5\x8c\x96\xe4\xb8\x8d\xe4\xb8\x80\n            consume_living = self.living_factor[self.do_seek_day_cnt] \\\n                             * self.living_consume\n        # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0=happiness_base:\xe5\xb9\xb8\xe7\xa6\x8f\xe5\xb8\xb8\xe6\x95\xb0 * happiness_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.happiness_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.happiness_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            # \xe7\x94\xb1\xe4\xba\x8ehappiness_factor\xe5\x80\xbc\xe7\x94\xb1:n\xe2\x80\x94>0 \xe6\x89\x80\xe4\xbb\xa5happiness_factor[-1]=0\n            # \xe5\x8d\xb3\xe9\x9a\x8f\xe7\x9d\x80\xe8\xbf\xbd\xe6\xb1\x82\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\x8b\xe7\x89\xa9\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe8\xbf\x87\xe5\xa4\x9a\xe5\x90\x8e\xe4\xbc\x9a\xe5\x8f\x98\xe7\x9a\x84\xe6\xb2\xa1\xe6\x9c\x89\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\n            happiness = self.happiness_factor[\n                            -1] * self.happiness_base\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8ahappiness_factor\n            # happiness_factor\xe5\xad\x90\xe7\xb1\xbb\xe7\x9a\x84\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe8\x88\xac\xe6\x98\xaf\xe4\xbb\x8e\xe9\xab\x98\xef\xbc\x8d>\xe4\xbd\x8e\xe5\x8f\x98\xe5\x8c\x96\n            happiness = self.happiness_factor[\n                            self.do_seek_day_cnt] * self.happiness_base\n        # \xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf=wealth_base:\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0 * wealth_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.wealth_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.wealth_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            wealth = self.wealth_factor[-1] * self.wealth_base\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe8\xb4\xa2\xe5\xaf\x8c\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8awealth_factor\n            wealth = self.wealth_factor[\n                         self.do_seek_day_cnt] * self.wealth_base\n        # \xe6\x9d\x83\xe5\x88\xa9\xe7\xa7\xaf\xe7\xb4\xaf=fame_base:\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0 * fame_factor:\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\n        if self.do_seek_day_cnt >= len(self.fame_factor):\n            # \xe8\xb6\x85\xe5\x87\xbalen(self.fame_factor), \xe5\xb0\xb1\xe5\x8f\x96\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            fame = self.fame_factor[-1] * self.fame_base\n        else:\n            # \xe6\xaf\x8f\xe4\xb8\xaa\xe7\xb1\xbb\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8afame_factor\n            fame = self.fame_factor[\n                       self.do_seek_day_cnt] * self.fame_base\n        # \xe8\xbf\xbd\xe6\xb1\x82\xe4\xba\x86\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\xe4\xba\x86\xe8\xbf\x99\xe4\xb8\x80\xe7\x94\x9f + 1\n        self.do_seek_day_cnt += 1\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe8\xbf\x99\xe4\xb8\x80\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe5\xb9\xb8\xe7\xa6\x8f\xef\xbc\x8c\xe8\xb4\xa2\xe5\xaf\x8c\xef\xbc\x8c\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\n        return consume_living, happiness, wealth, fame\n\n\ndef regular_mm(group):\n    # \xe6\x9c\x80\xe5\xb0\x8f-\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\n    return (group - group.min()) / (group.max() - group.min())\n\n\nclass HealthSeekDay(BaseSeekDay):\n    """"""\n        HealthSeekDay\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9:\n        \xe5\xbd\xa2\xe8\xb1\xa1\xef\xbc\x9a\xe5\x81\xa5\xe8\xba\xab\xef\xbc\x8c\xe6\x97\x85\xe6\xb8\xb8\xef\xbc\x8c\xe5\xa8\xb1\xe4\xb9\x90\xef\xbc\x8c\xe5\x81\x9a\xe6\x84\x9f\xe5\x85\xb4\xe8\xb6\xa3\xe7\x9a\x84\xe4\xba\x8b\xe6\x83\x85\xe3\x80\x82\n        \xe6\x8a\xbd\xe8\xb1\xa1\xef\xbc\x9a\xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe3\x80\x82\n    """"""\n\n    def _init_self(self):\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d1\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa81\xe5\xa4\xa9\n        self.living_consume = 1\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d1\n        self.happiness_base = 1\n        # \xe8\xae\xbe\xe5\xae\x9a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self._gen_living_days()\n\n    def _gen_living_days(self):\n        # \xe5\x8f\xaa\xe7\x94\x9f\xe6\x88\x9012000\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84happiness_factor\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe7\x94\xb11\xef\xbc\x8d>0\n        # \xe6\x89\x80\xe4\xbb\xa5\xe5\xa4\xa7\xe4\xba\x8e12000\xe6\xac\xa1\xe7\x9a\x84\xe8\xbf\xbd\xe6\xb1\x82\xe9\x83\xbd\xe5\xb0\x86\xe5\x8f\xaa\xe6\x98\xaf\xe5\x8d\x95\xe7\xba\xaf\xe6\xb6\x88\xe8\x80\x97\xe7\x94\x9f\xe5\x91\xbd\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x8d\xe5\xa2\x9e\xe5\x8a\xa0\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\n        # \xe5\x8d\xb3\xe9\x9a\x8f\xe7\x9d\x80\xe5\x81\x9a\xe4\xb8\x80\xe4\xbb\xb6\xe4\xba\x8b\xe6\x83\x85\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe8\xb6\x8a\xe6\x9d\xa5\xe8\xb6\x8a\xe5\xa4\x9a\xef\xbc\x8c\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\xe8\xb6\x8a\xe6\x9d\xa5\xe8\xb6\x8a\xe4\xbd\x8e\xef\xbc\x8c\xe7\x9b\xb4\xe5\x88\xb0\xe5\xae\x8c\xe5\x85\xa8\xe4\xbd\x93\xe4\xbc\x9a\xe4\xb8\x8d\xe5\x88\xb0\xe5\xb9\xb8\xe7\xa6\x8f\n        days = np.arange(1, 12000)\n        # \xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe9\x80\x89\xe7\x94\xa8sqrt, \xe5\xbd\xb1\xe5\x93\x8d\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\n        living_days = np.sqrt(days)\n\n        """"""\n            \xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe7\x94\xb1-1->1, \xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\xaa\xe8\xbf\xbd\xe6\xb1\x82\xe4\xb8\x80\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\n            \xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe4\xb8\xba\xe8\xb4\x9f\xe5\xa2\x9e\xe9\x95\xbf\xef\xbc\x8c\xe5\xbb\xb6\xe9\x95\xbf\xe4\xba\x86\xe7\x94\x9f\xe5\x91\xbd\xef\xbc\x8c\xe9\x9a\x8f\xe7\x9d\x80\xe8\xbf\xbd\xe6\xb1\x82\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe4\xb8\x8d\xe6\x96\xad\xe5\xa2\x9e\xe5\xa4\x9a\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe7\x9a\x84\xe6\xb6\x88\xe8\x80\x97\xe8\xbd\xac\xe4\xb8\xba\xe6\xad\xa3\n            \xe6\x95\xb0\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8d\xb3\xe4\xbd\xbf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xba\xe5\xa4\xa9\xe5\xa4\xa9\xe9\x94\xbb\xe7\x82\xbc\xe8\xba\xab\xe4\xbd\x93\xef\xbc\x8c\xe5\xa4\xa9\xe5\xa4\xa9\xe5\x90\x83\xe8\x90\xa5\xe5\x85\xbb\xe5\x93\x81\xef\xbc\x8c\xe4\xb9\x9f\xe8\xbf\x98\xe6\x98\xaf\xe4\xbc\x9a\xe6\x9c\x89\xe8\x87\xaa\xe7\x84\xb6\xe6\xad\xbb\xe4\xba\xa1\xe7\x9a\x84\xe9\x82\xa3\n            \xe4\xb8\x80\xe5\xa4\xa9\n        """"""\n        # *2-1\xe7\x9a\x84\xe7\x9b\xae\xe7\x9a\x84:regular_mm\xe5\x9c\xa80-1\xe4\xb9\x8b\xe9\x97\xb4,HealthSeekDay\xe8\xa6\x81\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xef\xbc\x8d1\xef\xbc\x8c1\xe4\xb9\x8b\xe9\x97\xb4\n        self.living_factor = regular_mm(living_days) * 2 - 1\n        # \xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa81-0\xe4\xb9\x8b\xe9\x97\xb4 [::-1]: \xe5\xb0\x860->1\xe8\xbd\xac\xe6\x8d\xa2\xe5\x88\xb01->0\n        self.happiness_factor = regular_mm(days)[::-1]\n\n\nclass StockSeekDay(BaseSeekDay):\n    """"""\n        StockSeekDay\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9:\n        \xe5\xbd\xa2\xe8\xb1\xa1\xef\xbc\x9a\xe5\x81\x9a\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8a\x95\xe8\xb5\x84\xe8\xb5\x9a\xe9\x92\xb1\xe7\x9a\x84\xe4\xba\x8b\xe6\x83\x85\xe3\x80\x82\n        \xe6\x8a\xbd\xe8\xb1\xa1\xef\xbc\x9a\xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\n    """"""\n\n    def _init_self(self, show=False):\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d2\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa82\xe5\xa4\xa9\n        self.living_consume = 2\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d0.5\n        self.happiness_base = 0.5\n        # \xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d10\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d0\n        self.wealth_base = 10\n        # \xe8\xae\xbe\xe5\xae\x9a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self._gen_living_days()\n\n    def _gen_living_days(self):\n        # \xe5\x8f\xaa\xe7\x94\x9f\xe6\x88\x9010000\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n        days = np.arange(1, 10000)\n        # \xe9\x92\x88\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97living_factor\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x98\xe6\x98\xafsqrt\n        living_days = np.sqrt(days)\n        # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x83\x8fHealthSeekDay\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5regular_mm \xe5\x8d\xb3:0->1\n        self.living_factor = regular_mm(living_days)\n\n        # \xe9\x92\x88\xe5\xaf\xb9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86np.power4\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\xe6\xaf\x94sqrt\xe5\xbf\xab\n        happiness_days = np.power(days, 4)\n        # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe4\xbc\x9a\xe5\xbf\xab\xe9\x80\x9f\xe9\x80\x92\xe5\x87\x8f\xe7\x94\xb11->0\n        self.happiness_factor = regular_mm(happiness_days)[::-1]\n\n        """"""\n            \xe8\xbf\x99\xe9\x87\x8c\xe7\xae\x80\xe5\x8d\x95\xe8\xae\xbe\xe5\xae\x9awealth_factor=living_factor\n            living_factor(0-1), \xe5\xaf\xbc\xe8\x87\xb4wealth_factor(0-1), \xe5\x8d\xb3\xe8\xb4\xa2\xe5\xaf\x8c\xe7\xa7\xaf\xe7\xb4\xaf\xe8\xb6\x8a\xe5\x88\xb0\n            \xe5\x90\x8e\xe9\x9d\xa2\xe8\xb6\x8a\xe6\x9c\x89\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe9\x80\x9f\xe5\xba\xa6\xe8\xb6\x8a\xe5\xbf\xab\xef\xbc\x8c\xe5\xa4\xb4\xe4\xb8\x80\xe4\xb8\xaa100\xe4\xb8\x87\xe6\x9c\x80\xe9\x9a\xbe\xe8\xb5\x9a\n        """"""\n        self.wealth_factor = self.living_factor\n\n\nclass FameSeekDay(BaseSeekDay):\n    """"""\n        FameTask\xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\x9a\x84\xe4\xb8\x80\xe5\xa4\xa9:\n        \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\n    """"""\n\n    def _init_self(self):\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d3\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa83\xe5\xa4\xa9\n        self.living_consume = 3\n        # \xe6\xaf\x8f\xe5\xa4\xa9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d0.6\n        self.happiness_base = 0.6\n        # \xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x88\xa9\xe7\xa7\xaf\xe7\xb4\xaf\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x9d10\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d0\n        self.fame_base = 10\n        # \xe8\xae\xbe\xe5\xae\x9a\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\n        self._gen_living_days()\n\n    def _gen_living_days(self):\n        # \xe5\x8f\xaa\xe7\x94\x9f\xe6\x88\x9012000\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n        days = np.arange(1, 12000)\n        # \xe9\x92\x88\xe5\xaf\xb9\xe7\x94\x9f\xe5\x91\xbd\xe6\xb6\x88\xe8\x80\x97living_factor\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x98\xe6\x98\xafsqrt\n        living_days = np.sqrt(days)\n        # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x83\x8fHealthSeekDay\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5regular_mm \xe5\x8d\xb3:0->1\n        self.living_factor = regular_mm(living_days)\n\n        # \xe9\x92\x88\xe5\xaf\xb9\xe5\xb9\xb8\xe7\xa6\x8f\xe6\x84\x9f\xe5\x8f\xaf\xe5\x8f\x98\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86np.power2\n        # \xe5\x8d\xb3\xe5\x8f\x98\xe5\x8c\x96\xe9\x80\x9f\xe5\xba\xa6\xe6\xaf\x94StockSeekDay\xe6\x85\xa2\xe4\xbd\x86\xe6\xaf\x94HealthSeekDay\xe5\xbf\xab\n        happiness_days = np.power(days, 2)\n        # \xe5\xb9\xb8\xe7\xa6\x8f\xe6\x8c\x87\xe6\x95\xb0\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe7\xb4\xa0\xe9\x80\x92\xe5\x87\x8f\xe7\x94\xb11->0\n        self.happiness_factor = regular_mm(happiness_days)[::-1]\n\n        # \xe8\xbf\x99\xe9\x87\x8c\xe7\xae\x80\xe5\x8d\x95\xe8\xae\xbe\xe5\xae\x9afame_factor=living_factor\n        self.fame_factor = self.living_factor\n\n\ndef my_life(weights):\n    """"""\n        \xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d:weights[0]\n        \xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d:weights[1]\n        \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d:weights[2]\n    """"""\n    # \xe8\xbf\xbd\xe6\xb1\x82\xe5\x81\xa5\xe5\xba\xb7\xe9\x95\xbf\xe5\xaf\xbf\xe5\xbf\xab\xe4\xb9\x90\n    seek_health = HealthSeekDay()\n    # \xe8\xbf\xbd\xe6\xb1\x82\xe8\xb4\xa2\xe5\xaf\x8c\xe9\x87\x91\xe9\x92\xb1\n    seek_stock = StockSeekDay()\n    # \xe8\xbf\xbd\xe6\xb1\x82\xe5\x90\x8d\xe6\x9c\x9b\xe6\x9d\x83\xe5\x8a\x9b\n    seek_fame = FameSeekDay()\n\n    # \xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaalist\xe4\xb8\xad\xe5\xaf\xb9\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x8b\xe9\x9d\xa2np.random.choice\xe4\xb8\xad\xe7\x9a\x84index[0, 1, 2]\n    seek_list = [seek_health, seek_stock, seek_fame]\n\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x91\n    me = Person()\n    # \xe5\x8a\xa0\xe6\x9d\x83\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe3\x80\x8280000\xe5\xa4\xa9\xe8\x82\xaf\xe5\xae\x9a\xe5\xa4\x9f\xe4\xba\x86, 80000\xe5\xa4\xa9\xe5\xbf\xab220\xe5\xb9\xb4\xe4\xba\x86\xe3\x80\x82\xe3\x80\x82\xe3\x80\x82\n    seek_choice = np.random.choice([0, 1, 2], 80000, p=weights)\n\n    while me.living > 0:\n        # \xe8\xbf\xbd\xe6\xb1\x82\xe4\xbb\x8e\xe5\x8a\xa0\xe6\x9d\x83\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84\n        seek_ind = seek_choice[me.living_day]\n        seek = seek_list[seek_ind]\n        # \xe5\x8f\xaa\xe8\xa6\x81\xe8\xbf\x98\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xb0\xb1\xe8\xbf\xbd\xe6\xb1\x82\n        me.live_one_day(seek)\n    return round(me.living_day / 365, 2), round(me.happiness, 2), round(me.wealth, 2), round(me.fame, 2)\n'"
python/stock_days.py,0,"b'# -*- encoding:utf-8 -*-\nfrom abc import ABCMeta, abstractmethod\nfrom collections import OrderedDict\nfrom collections import namedtuple\n\nfrom abupy import six, reduce, map, filter\n\n\nclass StockTradeDays(object):\n    def __init__(self, price_array, start_date, date_array=None):\n        # \xe7\xa7\x81\xe6\x9c\x89\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n        self.__price_array = price_array\n        # \xe7\xa7\x81\xe6\x9c\x89\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n        self.__date_array = self._init_days(start_date, date_array)\n        # \xe7\xa7\x81\xe6\x9c\x89\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\x8f\xe5\x88\x97\n        self.__change_array = self.__init_change()\n        # \xe8\xbf\x9b\xe8\xa1\x8cOrderedDict\xe7\x9a\x84\xe7\xbb\x84\xe8\xa3\x85\n        self.stock_dict = self._init_stock_dict()\n\n    def __init_change(self):\n        """"""\n        \xe4\xbb\x8eprice_array\xe7\x94\x9f\xe6\x88\x90change_array\n        :return:\n        """"""\n        price_float_array = [float(price_str) for price_str in\n                             self.__price_array]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe5\xb9\xb3\xe7\xa7\xbb\xe5\xbd\xa2\xe6\x88\x90\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x94\x99\xe5\xbc\x80\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87zip\xe6\x89\x93\xe5\x8c\x85\xe6\x88\x90\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xe7\x9b\xb8\xe9\x82\xbb\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n        pp_array = [(price1, price2) for price1, price2 in\n                    zip(price_float_array[:-1], price_float_array[1:])]\n        change_array = list(map(lambda pp: reduce(lambda a, b: round((b - a) / a, 3), pp), pp_array))\n        # list insert\xe6\x8f\x92\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb0\x86\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba0\n        change_array.insert(0, 0)\n        return change_array\n\n    def _init_days(self, start_date, date_array):\n        """"""\n        protect\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\n        :param start_date: \xe5\x88\x9d\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f\n        :param date_array: \xe7\xbb\x99\xe5\xae\x9a\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n        if date_array is None:\n            # \xe7\x94\xb1start_date\xe5\x92\x8cself.__price_array\xe6\x9d\xa5\xe7\xa1\xae\xe5\xae\x9a\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            date_array = [str(start_date + ind) for ind, _ in\n                          enumerate(self.__price_array)]\n        else:\n            # \xe7\xa8\x8d\xe5\x90\x8e\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x96\xe9\x83\xa8\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x86date_array\xef\xbc\x8c\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbd\xac\xe6\x8d\xa2str\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xbb\x84\xe6\x88\x90\xe6\x96\xb0date_array\n            date_array = [str(date) for date in date_array]\n        return date_array\n\n    def _init_stock_dict(self):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8namedtuple\xef\xbc\x8cOrderedDict\xe5\xb0\x86\xe7\xbb\x93\xe6\x9e\x9c\xe5\x90\x88\xe5\xb9\xb6\n        :return:\n        """"""\n        stock_namedtuple = namedtuple(\'stock\',\n                                      (\'date\', \'price\', \'change\'))\n\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\xa5\xe8\xa2\xab\xe8\xb5\x8b\xe5\x80\xbc\xe7\x9a\x84__date_array\xe7\xad\x89\xe8\xbf\x9b\xe8\xa1\x8cOrderedDict\xe7\x9a\x84\xe7\xbb\x84\xe8\xa3\x85\n        stock_dict = OrderedDict(\n            (date, stock_namedtuple(date, price, change))\n            for date, price, change in\n            zip(self.__date_array, self.__price_array,\n                self.__change_array))\n        return stock_dict\n\n    def filter_stock(self, want_up=True, want_calc_sum=False):\n        """"""\n        \xe7\xad\x9b\xe9\x80\x89\xe7\xbb\x93\xe6\x9e\x9c\xe5\xad\x90\xe9\x9b\x86\n        :param want_up: \xe6\x98\xaf\xe5\x90\xa6\xe7\xad\x9b\xe9\x80\x89\xe4\xb8\x8a\xe6\xb6\xa8\n        :param want_calc_sum: \xe6\x98\xaf\xe5\x90\xa6\xe8\xae\xa1\xe7\xae\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\x92\x8c\n        :return:\n        """"""\n        # Python\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x89\xe7\x9b\xae\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\n        filter_func = (lambda p_day: p_day.change > 0) if want_up else (\n            lambda p_day: p_day.change < 0)\n        # \xe4\xbd\xbf\xe7\x94\xa8filter_func\xe5\x81\x9a\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xbd\xe6\x95\xb0\n        want_days = list(filter(filter_func, self.stock_dict.values()))\n\n        if not want_calc_sum:\n            return want_days\n\n        # \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\x92\x8c\n        change_sum = 0.0\n        for day in want_days:\n            change_sum += day.change\n        return change_sum\n\n    """"""\n        \xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84__str__\xef\xbc\x8c__iter__\xef\xbc\x8c __getitem__\xef\xbc\x8c __len__\xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xaf\xa6\xe7\xbb\x86\xe8\xae\xb2\xe8\xa7\xa3\xe4\xbd\x9c\n    """"""\n\n    def __str__(self):\n        return str(self.stock_dict)\n\n    __repr__ = __str__\n\n    def __iter__(self):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe4\xbb\xa3\xe7\x90\x86stock_dict\xe7\x9a\x84\xe8\xb7\x8c\xe5\x80\x92\xef\xbc\x8cyield\xe5\x85\x83\xe7\xb4\xa0\n        :return:\n        """"""\n        for key in self.stock_dict:\n            yield self.stock_dict[key]\n\n    def __getitem__(self, ind):\n        date_key = self.__date_array[ind]\n        return self.stock_dict[date_key]\n\n    def __len__(self):\n        return len(self.stock_dict)\n\n\nclass TradeStrategyBase(six.with_metaclass(ABCMeta, object)):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb\n    """"""\n\n    @abstractmethod\n    def buy_strategy(self, *args, **kwargs):\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9f\xba\xe7\xb1\xbb\n        pass\n\n    @abstractmethod\n    def sell_strategy(self, *args, **kwargs):\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x9f\xba\xe7\xb1\xbb\n        pass\n\n\nclass TradeStrategy1(TradeStrategyBase):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa51: \xe8\xbf\xbd\xe6\xb6\xa8\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xbd\x93\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe9\x98\x80\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba7%\xe6\x97\xb6\n        \xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb9\xb6\xe6\x8c\x81\xe6\x9c\x89s_keep_stock_threshold\xef\xbc\x8820\xef\xbc\x89\xe5\xa4\xa9\n    """"""\n    s_keep_stock_threshold = 20\n\n    def __init__(self):\n        self.keep_stock_day = 0\n        # 7%\xe4\xb8\x8a\xe6\xb6\xa8\xe5\xb9\x85\xe5\xba\xa6\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe9\x98\x80\xe5\x80\xbc\n        self.__buy_change_threshold = 0.07\n\n    def buy_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day == 0 and \\\n                        trade_day.change > self.__buy_change_threshold:\n\n            # \xe5\xbd\x93\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99self.keep_stock_day == 0 \xe5\xb9\xb6\xe4\xb8\x94\n            # \xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\n            self.keep_stock_day += 1\n        elif self.keep_stock_day > 0:\n            # self.keep_stock_day > 0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe9\x80\x92\xe5\xa2\x9e\n            self.keep_stock_day += 1\n\n    def sell_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day >= \\\n                TradeStrategy1.s_keep_stock_threshold:\n            # \xe5\xbd\x93\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe8\xb6\x85\xe8\xbf\x87\xe9\x98\x80\xe5\x80\xbcs_keep_stock_threshold\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8\n            self.keep_stock_day = 0\n\n    """"""\n        property\xe5\xb1\x9e\xe6\x80\xa7\xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xae\xb2\xe5\x88\xb0\n    """"""\n\n    @property\n    def buy_change_threshold(self):\n        return self.__buy_change_threshold\n\n    @buy_change_threshold.setter\n    def buy_change_threshold(self, buy_change_threshold):\n        if not isinstance(buy_change_threshold, float):\n            """"""\n                \xe4\xb8\x8a\xe6\xb6\xa8\xe9\x98\x80\xe5\x80\xbc\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xbafloat\xe7\xb1\xbb\xe5\x9e\x8b\n            """"""\n            raise TypeError(\'buy_change_threshold must be float!\')\n        # \xe4\xb8\x8a\xe6\xb6\xa8\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\xaa\xe5\x8f\x96\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\x90\x8e\xe4\xb8\xa4\xe4\xbd\x8d\n        self.__buy_change_threshold = round(buy_change_threshold, 2)\n\n\nclass TradeLoopBack(object):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xb3\xbb\xe7\xbb\x9f\n    """"""\n\n    def __init__(self, trade_days, trade_strategy):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe8\x8a\x82\xe5\xb0\x81\xe8\xa3\x85\xe7\x9a\x84StockTradeDays\xe7\xb1\xbb\xe5\x92\x8c\xe6\x9c\xac\xe8\x8a\x82\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe7\xb1\xbb\n        TradeStrategyBase\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xba\xa4\xe6\x98\x93\xe7\xb3\xbb\xe7\xbb\x9f\n        :param trade_days: StockTradeDays\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\n        :param trade_strategy: TradeStrategyBase\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\n        """"""\n        self.trade_days = trade_days\n        self.trade_strategy = trade_strategy\n        # \xe4\xba\xa4\xe6\x98\x93\xe7\x9b\x88\xe4\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n        self.profit_array = []\n\n    def execute_trade(self):\n        """"""\n        \xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\n        :return:\n        """"""\n        for ind, day in enumerate(self.trade_days):\n            """"""\n                \xe4\xbb\xa5\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\n            """"""\n            if self.trade_strategy.keep_stock_day > 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe5\x8a\xa0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\x88\xe4\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n                self.profit_array.append(day.change)\n\n            # hasattr: \xe7\x94\xa8\xe6\x9d\xa5\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x9e\xe7\x8e\xb0\xe6\x9f\x90\xe4\xb8\xaa\xe6\x96\xb9\xe6\xb3\x95\n            if hasattr(self.trade_strategy, \'buy_strategy\'):\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x89\xa7\xe8\xa1\x8c\n                self.trade_strategy.buy_strategy(ind, day,\n                                                 self.trade_days)\n\n            if hasattr(self.trade_strategy, \'sell_strategy\'):\n                # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x89\xa7\xe8\xa1\x8c\n                self.trade_strategy.sell_strategy(ind, day,\n                                                  self.trade_days)\n\n\nclass TradeStrategy2(TradeStrategyBase):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa52: \xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xbd\x93\xe8\x82\xa1\xe4\xbb\xb7\xe8\xbf\x9e\xe7\xbb\xad\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\n        \xe4\xb8\x94\xe4\xb8\x8b\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xb6\x85\xe8\xbf\x87\xe9\x98\x80\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4s_buy_change_threshold(-10%)\xef\xbc\x8c\n        \xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb9\xb6\xe6\x8c\x81\xe6\x9c\x89s_keep_stock_threshold\xef\xbc\x8810\xef\xbc\x89\xe5\xa4\xa9\n    """"""\n    # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe6\x9c\x89\xe5\xa4\xa9\xe6\x95\xb0\n    s_keep_stock_threshold = 10\n    # \xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe9\x98\x80\xe5\x80\xbc\n    s_buy_change_threshold = -0.10\n\n    def __init__(self):\n        self.keep_stock_day = 0\n\n    def buy_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day == 0 and trade_ind >= 1:\n            """"""\n                \xe5\xbd\x93\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99self.keep_stock_day == 0 \xe5\xb9\xb6\xe4\xb8\x94\n                trade_ind >= 1, \xe4\xb8\x8d\xe6\x98\xaf\xe4\xba\xa4\xe6\x98\x93\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81yesterday\xe6\x95\xb0\xe6\x8d\xae\n            """"""\n            # trade_day.change < 0 bool\xef\xbc\x9a\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c\n            today_down = trade_day.change < 0\n            # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\x82\xa1\xe4\xbb\xb7\xe4\xb8\x8b\xe8\xb7\x8c\n            yesterday_down = trade_days[trade_ind - 1].change < 0\n            # \xe4\xb8\xa4\xe5\xa4\xa9\xe6\x80\xbb\xe8\xb7\x8c\xe5\xb9\x85\n            down_rate = trade_day.change + trade_days[trade_ind - 1].change\n            if today_down and yesterday_down and down_rate < \\\n                    TradeStrategy2.s_buy_change_threshold:\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x88\x90\xe7\xab\x8b\xef\xbc\x9a\xe8\xbf\x9e\xe8\xb7\x8c\xe4\xb8\xa4\xe5\xa4\xa9\xef\xbc\x8c\xe8\xb7\x8c\xe5\xb9\x85\xe8\xb6\x85\xe8\xbf\x87s_buy_change_threshold\n                self.keep_stock_day += 1\n        elif self.keep_stock_day > 0:\n            # self.keep_stock_day > 0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe9\x80\x92\xe5\xa2\x9e\n            self.keep_stock_day += 1\n\n    def sell_strategy(self, trade_ind, trade_day, trade_days):\n        if self.keep_stock_day >= \\\n                TradeStrategy2.s_keep_stock_threshold:\n            # \xe5\xbd\x93\xe6\x8c\x81\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe5\xa4\xa9\xe6\x95\xb0\xe8\xb6\x85\xe8\xbf\x87\xe9\x98\x80\xe5\x80\xbcs_keep_stock_threshold\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8\n            self.keep_stock_day = 0\n\n    """"""\n        \xe7\xa8\x8d\xe5\x90\x8e\xe4\xbc\x9a\xe8\xaf\xa6\xe7\xbb\x86\xe8\xae\xb2\xe8\xa7\xa3classmethod\xef\xbc\x8cstaticmethod\n    """"""\n\n    @classmethod\n    def set_keep_stock_threshold(cls, keep_stock_threshold):\n        cls.s_keep_stock_threshold = keep_stock_threshold\n\n    @staticmethod\n    def set_buy_change_threshold(buy_change_threshold):\n        TradeStrategy2.s_buy_change_threshold = buy_change_threshold\n'"
python/stock_dream_ml.py,5,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\xa2\xa6\xe6\x83\xb3\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\n""""""\nimport numpy as np\nfrom abupy import ABuSymbolPd\nimport sklearn.preprocessing as preprocessing\n\n""""""\n    \xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xafdate_week\xe5\x99\xaa\xe9\x9f\xb3\n""""""\ng_with_date_week_noise = True\n\n\ndef _gen_another_word_price(kl_another_word):\n    """"""\n    \xe7\x94\x9f\xe6\x88\x90\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9c\xa8\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\n    :param kl_another_word:\n    :return:\n    """"""\n    for ind in np.arange(2, kl_another_word.shape[0]):\n        # \xe5\x89\x8d\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\n        bf_yesterday = kl_another_word.iloc[ind - 2]\n        # \xe6\x98\xa8\xe5\xa4\xa9\n        yesterday = kl_another_word.iloc[ind - 1]\n        # \xe4\xbb\x8a\xe5\xa4\xa9\n        today = kl_another_word.iloc[ind]\n        # \xe7\x94\x9f\xe6\x88\x90\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n        kl_another_word.close[ind] = _gen_another_word_price_rule(yesterday.close, yesterday.volume,\n                                                                  bf_yesterday.close, bf_yesterday.volume,\n                                                                  today.volume, today.date_week)\n\n\ndef _gen_another_word_price_rule(yesterday_close, yesterday_volume, bf_yesterday_close, bf_yesterday_volume,\n                                 today_volume, date_week):\n    """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe9\x87\x8f\xe4\xbb\xb7\xef\xbc\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe9\x87\x8f\xe4\xbb\xb7\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe9\x87\x8f\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xa8\xa1\xe5\x9e\x8b\n    """"""\n    price_change = yesterday_close - bf_yesterday_close\n    volume_change = yesterday_volume - bf_yesterday_volume\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x87\x8f\xe5\x92\x8c\xe4\xbb\xb7\xe5\x8f\x98\xe5\x8a\xa8\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb6\xa8\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xb7\x8c\n    sign = 1.0 if price_change * volume_change > 0 else -1.0\n\n    # \xe9\x80\x9a\xe8\xbf\x87date_week\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xaa\xe9\x9f\xb3\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb9\x8b\xe5\x90\x8e\xe5\x88\x86\xe7\xb1\xbb100%\xe5\x88\x86\xe5\xaf\xb9\n    if g_with_date_week_noise:\n        # \xe5\x99\xaa\xe9\x9f\xb3\xe7\x9a\x84\xe5\x85\x88\xe5\x86\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x98\xaf\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe9\x87\x8f\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\x89\xe5\xa4\xa9\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\n        gen_noise = today_volume > np.max([yesterday_volume, bf_yesterday_volume])\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x91\xa8\xe4\xba\x94\xef\xbc\x8c\xe4\xb8\x8b\xe8\xb7\x8c\n        if gen_noise and date_week == 4:\n            sign = -1.0\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x91\xa8\xe4\xb8\x80\xef\xbc\x8c\xe4\xb8\x8a\xe6\xb6\xa8\n        elif gen_noise and date_week == 0:\n            sign = 1.0\n\n    # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe5\x9f\xba\xe7\xa1\x80\xe6\x98\xafprice_change\xef\xbc\x88\xe6\x98\xa8\xe5\xa4\xa9\xe5\x89\x8d\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xef\xbc\x89\n    price_base = abs(price_change)\n    # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe5\x8f\x98\xe5\x8a\xa8\xe5\x9b\xa0\xe7\xb4\xa0\n    price_factor = np.mean([today_volume / yesterday_volume, today_volume / bf_yesterday_volume])\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xb6\x85\xe8\xbf\x8710%\xef\xbc\x8c\xe9\x99\x90\xe5\x88\xb6\xe4\xb8\x8a\xe9\x99\x90\xef\xbc\x8c\xe4\xb8\x8b\xe9\x99\x90\xe4\xb8\xba10%\n    if abs(price_base * price_factor) < yesterday_close * 0.10:\n        today_price = yesterday_close + sign * price_base * price_factor\n    else:\n        today_price = yesterday_close + sign * yesterday_close * 0.10\n    return today_price\n\n\ndef change_real_to_another_word(symbol):\n    """"""\n    \xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9c\x9f\xe6\xad\xa3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe5\xa4\xb4\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c\xe9\x87\x8f\xef\xbc\x8c\xe5\x91\xa8\xe5\x87\xa0\xef\xbc\x8c\xe5\xb0\x86\xe5\x85\xb6\xe5\xae\x83\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\xbf\xe7\x94\xa8_gen_another_word_price\xe5\x8f\x98\xe6\x88\x90\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xbb\xb7\xe6\xa0\xbc\n    :param symbol:\n    :return:\n    """"""\n    kl_pd = ABuSymbolPd.make_kl_df(symbol)\n    if kl_pd is not None:\n        kl_dream = kl_pd.filter([\'close\', \'date_week\', \'volume\'])\n        # \xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xa4\xb4\xe4\xb8\xa4\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n        kl_dream[\'close\'][2:] = np.nan\n        # \xe5\xb0\x86\xe5\x85\xb6\xe5\xae\x83\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe6\x88\x90\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x96\xe7\x95\x8c\xe4\xb8\xad\xe4\xbb\xb7\xe6\xa0\xbc\n        _gen_another_word_price(kl_dream)\n        return kl_dream\n\n\ndef gen_pig_three_feature(kl_another_word):\n    """"""\n        \xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe6\x9e\x84\xe5\xbb\xba\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x87\xbd\xe6\x95\xb0\n    """"""\n    # \xe5\x9b\x9e\xe9\xa1\xbe\xe9\xa2\x84\xe6\xb5\x8b\xe7\x9a\x84y\xe5\x80\xbc\n    kl_another_word[\'regress_y\'] = kl_another_word.close.pct_change()\n    # \xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    kl_another_word[\'bf_yesterday_close\'] = 0\n    # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    kl_another_word[\'yesterday_close\'] = 0\n    # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n    kl_another_word[\'yesterday_volume\'] = 0\n    # \xe5\x89\x8d\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n    kl_another_word[\'bf_yesterday_volume\'] = 0\n\n    # \xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f, \xe4\xb8\x8d\xe7\x94\xa8\xe4\xba\x86\xe7\x94\xa8\xe4\xba\x86\xe4\xb9\x8b\xe5\x90\x8e\xe6\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x91\xe5\xae\x8c\xe7\xbe\x8e\xef\xbc\x8c\xe4\xbd\x86\xe4\xb9\x9f\xe7\xae\x97\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe6\x9c\xaa\xe6\x9d\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\x99\xbd\xe7\x84\xb6\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x8b\xa1\xe8\xbe\xa9\xe8\xaf\xb4\xe4\xb8\xba\xe5\xbf\xab\xe6\x94\xb6\xe7\x9b\x98\xe6\x97\xb6\xe5\x80\x99\xe4\xb9\xb0\xe5\x85\xa5\n    # kl_deram[\'feature_today_volume\'] = kl_deram[\'volume\']\n\n    # \xe5\xaf\xb9\xe5\x85\xb6\xe7\x89\xb9\xe5\xbe\x81\n    kl_another_word[\'bf_yesterday_close\'][2:] = kl_another_word[\'close\'][:-2]\n    kl_another_word[\'bf_yesterday_volume\'][2:] = kl_another_word[\'volume\'][:-2]\n    kl_another_word[\'yesterday_close\'][1:] = kl_another_word[\'close\'][:-1]\n    kl_another_word[\'yesterday_volume\'][1:] = kl_another_word[\'volume\'][:-1]\n\n    # \xe7\x89\xb9\xe5\xbe\x811: \xe4\xbb\xb7\xe6\xa0\xbc\xe5\xb7\xae\n    kl_another_word[\'feature_price_change\'] = kl_another_word[\'yesterday_close\'] - kl_another_word[\'bf_yesterday_close\']\n    # \xe7\x89\xb9\xe5\xbe\x812: \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xb7\xae\n    kl_another_word[\'feature_volume_Change\'] = kl_another_word[\'yesterday_volume\'] - kl_another_word[\n        \'bf_yesterday_volume\']\n\n    # \xe7\x89\xb9\xe5\xbe\x813: \xe6\xb6\xa8\xe8\xb7\x8csign\n    kl_another_word[\'feature_sign\'] = np.sign(\n        kl_another_word[\'feature_price_change\'] * kl_another_word[\'feature_volume_Change\'])\n\n    # \xe4\xb8\xba\xe4\xb9\x8b\xe5\x90\x8ekmena\xe5\xae\x9e\xe4\xbe\x8b\xe5\x87\x86\xe5\xa4\x87\xe6\x95\xb0\xe6\x8d\xae\n    kmean_date_week = kl_another_word[\'date_week\']\n\n    # \xe6\x9e\x84\xe5\xbb\xba\xe5\x99\xaa\xe9\x9f\xb3\xe7\x89\xb9\xe5\xbe\x81, \xe5\x9b\xa0\xe4\xb8\xba\xe7\x8c\xaa\xe8\x80\x81\xe4\xb8\x89\xe4\xb9\x9f\xe4\xb8\x8d\xe5\x8f\xaf\xe8\x83\xbd\xe5\x85\xa8\xe9\x83\xa8\xe5\x88\x86\xe6\x9e\x90\xe6\xad\xa3\xe7\xa1\xae\xe7\x9c\x9f\xe5\xae\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x9b\xa0\xe7\xb4\xa0\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\xbc\x95\xe5\x85\xa5\xe4\xb8\x80\xe4\xba\x9b\xe5\x99\xaa\xe9\x9f\xb3\xe7\x89\xb9\xe5\xbe\x81\n    # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe4\xb9\x98\xe7\xa7\xaf\n    kl_another_word[\'feature_volume_noise\'] = kl_another_word[\'yesterday_volume\'] * kl_another_word[\n        \'bf_yesterday_volume\']\n    # \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb9\x98\xe7\xa7\xaf\n    kl_another_word[\'feature_price_noise\'] = kl_another_word[\'yesterday_close\'] * kl_another_word[\'bf_yesterday_close\']\n\n    # \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\n    scaler = preprocessing.StandardScaler()\n    kl_another_word[\'feature_price_change\'] = scaler.fit_transform(\n        kl_another_word[\'feature_price_change\'].values.reshape(-1, 1))\n    kl_another_word[\'feature_volume_Change\'] = scaler.fit_transform(\n        kl_another_word[\'feature_volume_Change\'].values.reshape(-1, 1))\n    kl_another_word[\'feature_volume_noise\'] = scaler.fit_transform(\n        kl_another_word[\'feature_volume_noise\'].values.reshape(-1, 1))\n    kl_another_word[\'feature_price_noise\'] = scaler.fit_transform(\n        kl_another_word[\'feature_price_noise\'].values.reshape(-1, 1))\n\n    # \xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89feature_\xe5\xbc\x80\xe5\xa4\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x92\x8cregress_y\n    kl_pig_three_feature = kl_another_word.filter(regex=\'regress_y|feature_*\')[2:]\n    return kl_pig_three_feature, kmean_date_week[2:]\n'"
abupy/AlphaBu/ABuAlpha.py,0,"b'from __future__ import absolute_import\n\n# noinspection PyUnresolvedReferences\nfrom .ABuPickStockExecute import do_pick_stock_work\n# noinspection PyUnresolvedReferences\nfrom .ABuPickTimeExecute import do_symbols_with_same_factors, do_symbols_with_diff_factors\n# noinspection all\nfrom . import ABuPickTimeWorker as pick_time_worker\n'"
abupy/AlphaBu/ABuPickBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8b\xa9\xe6\x97\xb6\xe4\xb8\x8e\xe9\x80\x89\xe8\x82\xa1\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom abc import ABCMeta, abstractmethod\n\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu.ABuBase import AbuParamBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuPickTimeWorkBase(six.with_metaclass(ABCMeta, AbuParamBase)):\n    """"""\xe6\x8b\xa9\xe6\x97\xb6\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    @abstractmethod\n    def fit(self, *args, **kwargs):\n        """"""\n        fit\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\xa1\xb9\xe7\x9b\xae\xe4\xb8\xad\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89\xe4\xb8\xba\xe5\xbc\x80\xe5\xa7\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x80\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\n        \xe5\xaf\xb9\xe4\xba\x8e\xe6\x8b\xa9\xe6\x97\xb6\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8d\xb3\xe4\xb8\xba\xe5\xbc\x80\xe5\xa7\x8b\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe4\xbb\x8e\xe5\xad\x97\xe9\x9d\xa2\xe7\x90\x86\xe8\xa7\xa3\n        \xe5\xbc\x80\xe5\xa7\x8b\xe9\x92\x88\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\x9f\xe5\x90\x88\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\n        """"""\n        pass\n\n    @abstractmethod\n    def init_sell_factors(self, *args, **kwargs):\n        """"""\n        \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\n        """"""\n        pass\n\n    @abstractmethod\n    def init_buy_factors(self, *args, **kwargs):\n        """"""\n        \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\n        """"""\n        pass\n\n\nclass AbuPickStockWorkBase(six.with_metaclass(ABCMeta, AbuParamBase)):\n    """"""\xe9\x80\x89\xe8\x82\xa1\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba""""""\n\n    @abstractmethod\n    def fit(self, *args, **kwargs):\n        """"""\n        fit\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\xa1\xb9\xe7\x9b\xae\xe4\xb8\xad\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89\xe4\xb8\xba\xe5\xbc\x80\xe5\xa7\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x80\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\n        \xe5\xaf\xb9\xe4\xba\x8e\xe9\x80\x89\xe8\x82\xa1\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8d\xb3\xe4\xb8\xba\xe5\xbc\x80\xe5\xa7\x8b\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe4\xbb\x8e\xe5\xad\x97\xe9\x9d\xa2\xe7\x90\x86\xe8\xa7\xa3\n        \xe5\xbc\x80\xe5\xa7\x8b\xe9\x92\x88\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\n        """"""\n        pass\n\n    @abstractmethod\n    def init_stock_pickers(self, *args, **kwargs):\n        """"""\n        \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n        """"""\n        pass\n'"
abupy/AlphaBu/ABuPickStockExecute.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8c\x85\xe8\xa3\x85\xe9\x80\x89\xe8\x82\xa1worker\xe8\xbf\x9b\xe8\xa1\x8c\xef\xbc\x8c\xe5\xae\x8c\xe5\x96\x84\xe5\x89\x8d\xe5\x90\x8e\xe5\xb7\xa5\xe4\xbd\x9c\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuPickStockWorker import AbuPickStockWorker\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig\nfrom ..MarketBu.ABuMarket import split_k_market\nfrom ..TradeBu.ABuKLManager import AbuKLManager\nfrom ..CoreBu.ABuFixes import ThreadPoolExecutor\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n@add_process_env_sig\ndef do_pick_stock_work(choice_symbols, benchmark, capital, stock_pickers):\n    """"""\n    \xe5\x8c\x85\xe8\xa3\x85AbuPickStockWorker\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\n    :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n    :param stock_pickers: \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n    :return:\n    """"""\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n    stock_pick = AbuPickStockWorker(capital, benchmark, kl_pd_manager, choice_symbols=choice_symbols,\n                                    stock_pickers=stock_pickers)\n    stock_pick.fit()\n    return stock_pick.choice_symbols\n\n\n@add_process_env_sig\ndef do_pick_stock_thread_work(choice_symbols, benchmark, capital, stock_pickers, n_thread):\n    """"""\xe5\x8c\x85\xe8\xa3\x85AbuPickStockWorker\xe5\x90\xaf\xe5\x8a\xa8\xe7\xba\xbf\xe7\xa8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1""""""\n    result = []\n\n    def when_thread_done(r):\n        result.extend(r.result())\n\n    with ThreadPoolExecutor(max_workers=n_thread) as pool:\n        thread_symbols = split_k_market(n_thread, market_symbols=choice_symbols)\n        for symbols in thread_symbols:\n            future_result = pool.submit(do_pick_stock_work, symbols, benchmark, capital, stock_pickers)\n            future_result.add_done_callback(when_thread_done)\n\n    return result\n'"
abupy/AlphaBu/ABuPickStockMaster.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xb0\x83\xe5\xba\xa6\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport itertools\nimport logging\n\n\nfrom .ABuPickStockExecute import do_pick_stock_work, do_pick_stock_thread_work\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketDataFetchMode\nfrom ..CoreBu.ABuEnvProcess import AbuEnvProcess\nfrom ..MarketBu.ABuMarket import split_k_market, all_symbol\nfrom ..MarketBu import ABuMarket\nfrom ..CoreBu.ABuFixes import partial\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..CoreBu.ABuDeprecated import AbuDeprecated\n\n\nclass AbuPickStockMaster(object):\n    """"""\xe9\x80\x89\xe8\x82\xa1\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xb0\x83\xe5\xba\xa6\xe7\xb1\xbb""""""\n\n    @classmethod\n    def do_pick_stock_with_process(cls, capital, benchmark, stock_pickers, choice_symbols=None,\n                                   n_process_pick_stock=ABuEnv.g_cpu_cnt,\n                                   callback=None):\n        """"""\n        \xe9\x80\x89\xe8\x82\xa1\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\n        :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param stock_pickers: \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param n_process_pick_stock: \xe6\x8e\xa7\xe5\x88\xb6\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe5\xb0\x91\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\n        :param callback: \xe5\xb9\xb6\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\xb7\xa5\xe4\xbd\x9c\xe5\x87\xbd\xe6\x95\xb0\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        input_choice_symbols = True\n        if choice_symbols is None or len(choice_symbols) == 0:\n            choice_symbols = all_symbol()\n            input_choice_symbols = False\n\n        if n_process_pick_stock <= 0:\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xa6\x81n_process > 1\xe5\x81\x9a\xe5\x88\xa4\xe6\x96\xad\xe8\x80\x8c\xe4\xb8\x94\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaen_process_pick_stock\xe6\x9d\xa5split_k_market\n            n_process_pick_stock = ABuEnv.g_cpu_cnt\n        if stock_pickers is not None:\n\n            # TODO \xe9\x9c\x80\xe8\xa6\x81\xe5\x8c\xba\xe5\x88\x86hdf5\xe5\x92\x8ccsv\xe4\xb8\x8d\xe5\x90\x8c\xe5\xad\x98\xe8\xb4\xae\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8ccsv\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xb9\xb6\xe8\xa1\x8c\xe8\xaf\xbb\xe5\x86\x99\n            # \xe5\x8f\xaa\xe6\x9c\x89E_DATA_FETCH_FORCE_LOCAL\xe6\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x9b\x9e\xe6\xbb\x9a\xe5\x88\xb0\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe6\xa8\xa1\xe5\xbc\x8fn_process = 1\n            if n_process_pick_stock > 1 and ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n                # 1. hdf5\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xae\xb9\xe6\x98\x93\xe5\x86\x99\xe5\x9d\x8f\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xaa\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe4\xb8\x8d\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x86\x99\xe5\x85\xa5\n                # 2. MAC OS 10.9 \xe4\xb9\x8b\xe5\x90\x8e\xe5\xb9\xb6\xe8\xa1\x8c\xe8\x81\x94\xe7\xbd\x91\xef\xbc\x8bnumpy \xe7\xb3\xbb\xe7\xbb\x9fbug crash\xef\xbc\x8c\xe5\x8d\xa1\xe6\xad\xbb\xe7\xad\x89\xe9\x97\xae\xe9\xa2\x98\n                logging.info(\'batch get only support E_DATA_FETCH_FORCE_LOCAL for Parallel!\')\n                n_process_pick_stock = 1\n\n            # \xe6\xa0\xb9\xe6\x8d\xae\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84choice_symbols\xe5\x92\x8c\xe8\xa6\x81\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x86\xe9\x85\x8dsymbol\xe5\x88\xb0n_process_pick_stock\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\n            process_symbols = split_k_market(n_process_pick_stock, market_symbols=choice_symbols)\n\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xbc\x9a\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe6\x8d\xa2\xe4\xb8\xba\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0, \xe5\x8d\xb332 -> 33 16 -> 17\n            if n_process_pick_stock > 1:\n                n_process_pick_stock = len(process_symbols)\n\n            parallel = Parallel(\n                n_jobs=n_process_pick_stock, verbose=0, pre_dispatch=\'2*n_jobs\')\n\n            if callback is None:\n                callback = do_pick_stock_work\n\n            # do_pick_stock_work\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8add_process_env_sig\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe5\x86\x85\xe5\xad\x98\xe6\x8b\xb7\xe8\xb4\x9d\xe5\xaf\xb9\xe8\xb1\xa1AbuEnvProcess\n            p_nev = AbuEnvProcess()\n            # \xe5\xbc\x80\xe5\xa7\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x89\xa7\xe8\xa1\x8c\n            out_choice_symbols = parallel(delayed(callback)(choice_symbols, benchmark,\n                                                            capital,\n                                                            stock_pickers, env=p_nev)\n                                          for choice_symbols in process_symbols)\n\n            # \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x88\xe5\xb9\xb6\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n            choice_symbols = list(itertools.chain.from_iterable(out_choice_symbols))\n\n        """"""\n            \xe5\xa6\x82\xe4\xb8\x8b\xe9\x80\x9a\xe8\xbf\x87env\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe6\x9d\xa5\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\n            \xe6\xb3\xa8\xe6\x84\x8f\xe7\x8e\xb0\xe5\x9c\xa8\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\x89\xe4\xbc\x98\xe5\x85\x88\xe7\xba\xa7\xef\xbc\x8c\xe5\x8d\xb3g_enable_last_split_test > g_enable_last_split_train > g_enable_train_test_split\n            TODO: \xe4\xbd\xbf\xe7\x94\xa8enum\xe6\x9b\xbf\xe6\x8d\xa2g_enable_last_split_test\xef\xbc\x8c g_enable_last_split_train\xef\xbc\x8c g_enable_train_test_split\xe8\xae\xbe\xe7\xbd\xae\n        """"""\n        if not input_choice_symbols and ABuEnv.g_enable_last_split_test:\n            # \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n            choice_symbols = ABuMarket.market_last_split_test()\n        elif not input_choice_symbols and ABuEnv.g_enable_last_split_train:\n            # \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n            choice_symbols = ABuMarket.market_last_split_train()\n        elif ABuEnv.g_enable_train_test_split:\n            # \xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n            choice_symbols = ABuMarket.market_train_test_split(ABuEnv.g_split_tt_n_folds, choice_symbols)\n\n        return choice_symbols\n\n    @classmethod\n    @AbuDeprecated(\'hdf5 store mode will crash or dead!\')\n    def do_pick_stock_with_process_mix_thread(cls, capital, benchmark, stock_pickers, choice_symbols=None, n_process=8,\n                                              n_thread=10):\n        """"""Deprecated\xe4\xb8\x8d\xe5\xba\x94\xe8\xaf\xa5\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\xbb\x98\xe8\xae\xa4hdf5\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe8\xaf\xbb\xe5\x8f\x96\xe4\xbc\x9a\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98""""""\n        callback = partial(do_pick_stock_thread_work, n_thread=n_thread)\n        return cls.do_pick_stock_with_process(capital, benchmark, stock_pickers, choice_symbols=choice_symbols,\n                                              n_process_pick_stock=n_process, callback=callback)\n'"
abupy/AlphaBu/ABuPickStockWorker.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe5\x85\xb7\xe4\xbd\x93\xe5\xb7\xa5\xe4\xbd\x9c\xe8\x80\x85\xef\xbc\x8c\xe6\x95\xb4\xe5\x90\x88\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbb\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\x8a\xe8\xbf\xad\xe4\xbb\xa3\xe5\x88\x9d\xe5\xa7\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n    \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\x93\x8d\xe4\xbd\x9c\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport copy\n\nfrom .ABuPickBase import AbuPickStockWorkBase\nfrom ..MarketBu.ABuMarket import all_symbol\nfrom ..PickStockBu.ABuPickStockBase import AbuPickStockBase\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuPickStockWorker(AbuPickStockWorkBase):\n    """"""\xe9\x80\x89\xe8\x82\xa1\xe7\xb1\xbb""""""\n\n    def __init__(self, capital, benchmark, kl_pd_manager, choice_symbols=None, stock_pickers=None):\n        """"""\n        :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd_manager: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuKLManager\xe5\xae\x9e\xe4\xbe\x8b\n        :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param stock_pickers: \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        self.capital = capital\n        self.benchmark = benchmark\n        self.choice_symbols = choice_symbols\n        self.kl_pd_manager = kl_pd_manager\n        self.stock_pickers = []\n        self.first_stock_pickers = []\n        self.init_stock_pickers(stock_pickers)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9a\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8b\xe9\x80\x89\xe8\x82\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1""""""\n        return \'stock_pickers:{}\\nchoice_symbols:{}\'.format(self.stock_pickers, self.choice_symbols)\n\n    __repr__ = __str__\n\n    def init_stock_pickers(self, stock_pickers):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87stock_pickers\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x84\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n        :param stock_pickers:list\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xbadict\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaadict\xe4\xb8\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe5\xa6\x82class\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\x89\n        :return:\n        """"""\n        if stock_pickers is not None:\n            for picker_class in stock_pickers:\n                if picker_class is None:\n                    continue\n\n                if \'class\' not in picker_class:\n                    # \xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n                    raise ValueError(\'picker_class class key must name class !!!\')\n\n                picker_class_cp = copy.deepcopy(picker_class)\n                # pop\xe5\x87\xba\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe9\x83\xbd\xe4\xb8\xba\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n                class_fac = picker_class_cp.pop(\'class\')\n                # \xe6\x95\xb4\xe5\x90\x88capital\xef\xbc\x8cbenchmark\xe7\xad\x89\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\n                picker = class_fac(self.capital, self.benchmark, **picker_class_cp)\n\n                if not isinstance(picker, AbuPickStockBase):\n                    # \xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\xe6\xa3\x80\xe6\xb5\x8b\n                    raise TypeError(\'factor must base AbuPickStockBase\')\n\n                if \'first_choice\' in picker_class and picker_class[\'first_choice\']:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xbe\xe7\xbd\xaefirst_choice\xe4\xb8\x94\xe6\x98\xafTrue, \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0first_stock_pickers\xe9\x80\x89\xe8\x82\xa1\xe5\xba\x8f\xe5\x88\x97\n                    self.first_stock_pickers.append(picker)\n                else:\n                    self.stock_pickers.append(picker)\n        if self.choice_symbols is None or len(self.choice_symbols) == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xbanone, \xe4\xbb\x8e\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe6\x9f\xa5\xe9\x98\x85all_symbol\n            self.choice_symbols = all_symbol()\n\n    def fit(self):\n        """"""\n        \xe9\x80\x89\xe8\x82\xa1\xe5\xbc\x80\xe5\xa7\x8b\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\x8e\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe6\x98\xaf\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\x9a\xe5\xaf\xb9\xe5\xa4\x9a\xef\xbc\x8c\n        \xe5\x8d\xb3\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe9\x85\x8d\xe5\x90\x88\xe8\xb5\x84\xe9\x87\x91\xe5\x9f\xba\xe5\x87\x86\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\xe5\xb7\xa5\xe4\xbd\x9c\n        :return:\n        """"""\n\n        def _first_batch_fit():\n            """"""\n            first_choice\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x9a\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x87\xe9\x80\x89\xe6\xb1\xa0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84fit_first_choice\xe6\x96\xb9\xe6\xb3\x95\n            \xe5\x8d\xb3\xe5\x9b\xa0\xe5\xad\x90\xe5\x86\x85\xe9\x83\xa8\xe6\x8f\x90\xe4\xbe\x9b\xe6\x89\xb9\xe9\x87\x8f\xe9\x80\x89\xe8\x82\xa1\xe9\xab\x98\xe6\x95\x88\xe7\x9a\x84\xe9\xa6\x96\xe9\x80\x89\xe6\x96\xb9\xe6\xb3\x95\n            :return:\n            """"""\n            if self.first_stock_pickers is None or len(self.first_stock_pickers) == 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89first_stock_picker\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9eself.choice_symbols\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8a\x95\xe4\xbb\xbb\xe4\xbd\x95\xe5\x8f\x8d\xe5\xaf\xb9\xe7\xa5\xa8\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe9\x80\x9a\xe8\xbf\x87\n                return self.choice_symbols\n\n            # \xe9\xa6\x96\xe9\x80\x89\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe5\xa4\x87\xe9\x80\x89\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xb5\x8b\xe4\xba\x88inner_first_choice_symbols\n            inner_first_choice_symbols = self.choice_symbols\n            with AbuMulPidProgress(len(self.first_stock_pickers), \'pick first_choice stocks complete\') as progress:\n                for epoch, first_choice in enumerate(self.first_stock_pickers):\n                    progress.show(epoch + 1)\n                    # \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe9\x80\x9a\xe8\xbf\x87fit_first_choice\xe5\xaf\xb9inner_first_choice_symbols\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x8c\xe6\xbb\xa4\xe7\xbd\x91\xe4\xb8\x80\xe5\xb1\x82\xe4\xb8\x80\xe5\xb1\x82\xe8\xbf\x87\xe6\xbb\xa4\n                    inner_first_choice_symbols = first_choice.fit_first_choice(self, inner_first_choice_symbols)\n            return inner_first_choice_symbols\n\n        def _batch_fit():\n            """"""\n            \xe6\x99\xae\xe9\x80\x9a\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x9a\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x87\xe9\x80\x89\xe6\xb1\xa0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3\xe5\x88\x9d\xe5\xa7\x8b\xe9\x80\x89\xe8\x82\xa1\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x9c\xa8\xe8\xbf\xad\xe4\xbb\xa3\xe4\xb8\xad\xe5\x86\x8d\xe8\xbf\xad\xe4\xbb\xa3\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9\n            symbol\xe6\x8a\x95\xe5\x87\xba\xe5\x8f\x8d\xe5\xaf\xb9\xe7\xa5\xa8\xef\xbc\x8c\xe4\xb8\x80\xe6\x97\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe6\x8a\x95\xe5\x87\xba\xe5\x8f\x8d\xe5\xaf\xb9\xe7\xa5\xa8\xef\xbc\x8c\xe5\x8d\xb3\xe7\xad\x9b\xe5\x87\xba\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe7\xa5\xa8\xe5\x90\xa6\xe5\x86\xb3\n            :return:\n            """"""\n            if self.stock_pickers is None or len(self.stock_pickers) == 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89stock_pickers\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9eself.choice_symbols\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8a\x95\xe4\xbb\xbb\xe4\xbd\x95\xe5\x8f\x8d\xe5\xaf\xb9\xe7\xa5\xa8\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe9\x80\x9a\xe8\xbf\x87\n                return self.choice_symbols\n\n            with AbuMulPidProgress(len(self.choice_symbols), \'pick stocks complete\') as progress:\n                # \xe5\x90\xaf\xe5\x8a\xa8\xe9\x80\x89\xe8\x82\xa1\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\n                inner_choice_symbols = []\n                for epoch, target_symbol in enumerate(self.choice_symbols):\n                    progress.show(epoch + 1)\n\n                    add = True\n                    for picker in self.stock_pickers:\n                        kl_pd = self.kl_pd_manager.get_pick_stock_kl_pd(target_symbol, picker.xd, picker.min_xd)\n                        if kl_pd is None:\n                            # \xe6\xb3\xa8\xe6\x84\x8fget_pick_stock_kl_pd\xe5\x86\x85\xe9\x83\xa8\xe5\xaf\xb9\xe9\x80\x89\xe8\x82\xa1\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\xaa\xe5\xb0\x91\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85get_pick_stock_kl_pd\n                            add = False\n                            break\n                        sub_add = picker.fit_pick(kl_pd, target_symbol)\n                        if sub_add is False:\n                            # \xe5\x8f\xaa\xe8\xa6\x81\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe6\x8a\x95\xe4\xba\x86\xe5\x8f\x8d\xe5\xaf\xb9\xe7\xa5\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe5\x88\xb7\xe5\x87\xba\n                            add = False\n                            break\n                    if add:\n                        inner_choice_symbols.append(target_symbol)\n                return inner_choice_symbols\n\n        # \xe7\xad\x9b\xe9\x80\x89\xe5\x90\x84\xe4\xb8\xaa\xe5\x9b\xa0first_choice\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x99self.choice_symbols\xef\xbc\x8c_batch_fit\xe7\xbb\xa7\xe7\xbb\xad\xe6\x99\x92\n        self.choice_symbols = _first_batch_fit()\n        # \xe9\x80\x9a\xe8\xbf\x87\xe4\xb8\xa4\xe6\xac\xa1\xe8\xbf\xad\xe4\xbb\xa3\xe7\xbb\xa7\xe7\xbb\xad\xe7\xad\x9b\xe9\x80\x89\n        self.choice_symbols = _batch_fit()\n'"
abupy/AlphaBu/ABuPickTimeExecute.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xa4\x9a\xe6\x94\xaf\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xe5\xb0\x81\xe8\xa3\x85\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe9\x80\x9a\xe8\xbf\x87AbuPickTimeWorker\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe5\x8c\x85\xe8\xa3\x85\xe5\xae\x8c\xe5\x96\x84\xe5\x89\x8d\xe5\x90\x8e\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe5\x8c\x85\xe6\x8b\xac\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x8c\xe9\x94\x99\xe8\xaf\xaf\xe5\xa4\x84\xe7\x90\x86\xe6\x8d\x95\xe8\x8e\xb7\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\n    \xe5\xa4\x84\xe7\x90\x86\xe7\xad\x89\xe4\xba\x8b\xe5\x8a\xa1\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport logging\n\nimport numpy as np\nimport pandas as pd\nfrom enum import Enum\n\nfrom .ABuPickTimeWorker import AbuPickTimeWorker\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig\nfrom ..TradeBu import ABuTradeExecute\nfrom ..TradeBu import ABuTradeProxy\nfrom ..TradeBu.ABuKLManager import AbuKLManager\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass EFitError(Enum):\n    """"""\n        \xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\n    """"""\n\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xe6\xad\xa3\xe5\xb8\xb8\xe5\xae\x8c\xe6\x88\x90\xef\xbc\x8c\xe4\xb8\x94\xe8\x87\xb3\xe5\xb0\x91\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaaorder\n    FIT_OK = 0\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x99\xe8\xaf\xaf\n    NET_ERROR = 1\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\xb0\xe6\x8d\xae\xe9\x94\x99\xe8\xaf\xaf\n    DATE_ERROR = 2\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xe6\xad\xa3\xe5\xb8\xb8\xe5\xae\x8c\xe6\x88\x90\xef\xbc\x8c\xe4\xbd\x86\xe6\xb2\xa1\xe6\x9c\x89\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaaorder\n    NO_ORDER_GEN = 3\n    # \xe5\x85\xb6\xe5\xae\x83\xe9\x94\x99\xe8\xaf\xaf\n    OTHER_ERROR = 4\n\n\ndef _do_pick_time_work(capital, buy_factors, sell_factors, kl_pd, benchmark, draw=False,\n                       show_info=False, show_pg=False):\n    """"""\n    \xe5\x86\x85\xe9\x83\xa8\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\xe5\x8c\x85\xe8\xa3\x85AbuPickTimeWorker\xe8\xbf\x9b\xe8\xa1\x8cfit\xef\xbc\x8c\xe5\x88\x86\xe9\x85\x8d\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87trade_summary\xe7\x94\x9f\xe6\x88\x90orders_pd\xef\xbc\x8caction_pd\n    :param capital: AbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n    :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param draw: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8a\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\n    :param show_info: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8a\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\n    :param show_pg: \xe6\x98\xaf\xe5\x90\xa6\xe6\x8b\xa9\xe6\x97\xb6\xe5\x86\x85\xe9\x83\xa8\xe5\x90\xaf\xe5\x8a\xa8\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe9\x80\x82\xe5\x90\x88\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x88\x96\xe8\x80\x85\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x87\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaasymbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n    :return:\n    """"""\n    if kl_pd is None or kl_pd.shape[0] == 0:\n        return None, EFitError.NET_ERROR\n\n    pick_timer_worker = AbuPickTimeWorker(capital, kl_pd, benchmark, buy_factors, sell_factors)\n    if show_pg:\n        pick_timer_worker.enable_task_pg()\n    pick_timer_worker.fit()\n\n    if len(pick_timer_worker.orders) == 0:\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x8b\x9f\xe5\x90\x88\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8e\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbb\xbb\xe4\xbd\x95order\xe7\x94\x9f\xe6\x88\x90\n        return None, EFitError.NO_ORDER_GEN\n\n    # \xe7\x94\x9f\xe6\x88\x90\xe5\x85\xb3\xe9\x94\xae\xe7\x9a\x84orders_pd\xe4\xb8\x8eaction_pd\n    orders_pd, action_pd, _ = ABuTradeProxy.trade_summary(pick_timer_worker.orders, kl_pd, draw=draw,\n                                                          show_info=show_info)\n\n    # \xe6\x9c\x80\xe5\x90\x8e\xe7\x94\x9f\xe6\x88\x90list\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xbatuple\xe6\x97\xa0\xe6\xb3\x95\xe4\xbf\xae\xe6\x94\xb9\xe5\xaf\xbc\xe8\x87\xb4\xe4\xb9\x8b\xe5\x90\x8e\xe4\xb8\x8d\xe8\x83\xbd\xe7\x81\xb5\xe6\xb4\xbb\xe5\xa4\x84\xe7\x90\x86\n    return [orders_pd, action_pd], EFitError.FIT_OK\n\n\n@add_process_env_sig\ndef do_symbols_with_same_factors(target_symbols, benchmark, buy_factors, sell_factors, capital,\n                                 apply_capital=True, kl_pd_manager=None,\n                                 show=False, back_target_symbols=None, func_factors=None, show_progress=True):\n    """"""\n    \xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\xba\xe5\xa4\x9a\xe4\xb8\xaa\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\x8a\xe5\xae\x9e\xe6\x96\xbd\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\n    :param target_symbols: \xe5\xa4\x9a\xe4\xb8\xaa\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n    :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n    :param capital: AbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param apply_capital: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe8\x9e\x8d\xe5\x90\x88\xef\xbc\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe5\xb0\x86\xe6\x98\xafFalse\n    :param kl_pd_manager: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuKLManager\xe5\xae\x9e\xe4\xbe\x8b\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\xaf\x8f\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x86\xe8\x8a\x82\n    :param back_target_symbols:  \xe8\xa1\xa5\xe4\xbd\x8dtargetSymbols\xe4\xb8\xba\xe4\xba\x86\xe5\xbf\xbd\xe7\x95\xa5\xe7\xbd\x91\xe7\xbb\x9c\xe9\x97\xae\xe9\xa2\x98\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe8\xb6\xb3\xe5\xaf\xbc\xe8\x87\xb4\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\n    :param func_factors: funcFactors\xe5\x9c\xa8\xe5\x86\x85\xe5\xb1\x82\xe8\xa7\xa3\xe5\xbc\x80factors dicts\xe4\xb8\xba\xe4\xba\x86do_symbols_with_diff_factors\n    :param show_progress: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n    """"""\n    if kl_pd_manager is None:\n        kl_pd_manager = AbuKLManager(benchmark, capital)\n\n    def _batch_symbols_with_same_factors(p_buy_factors, p_sell_factors):\n        r_orders_pd = None\n        r_action_pd = None\n        r_all_fit_symbols_cnt = 0\n        # \xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xbaAbuMulPidProgress\n        with AbuMulPidProgress(len(target_symbols), \'pick times complete\', show_progress=show_progress) as progress:\n            for epoch, target_symbol in enumerate(target_symbols):\n                # \xe5\xa6\x82\xe6\x9e\x9csymbol\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb0\xb1\xe4\xb8\x8dshow\xe4\xba\x86\xef\xbc\x8c\xe7\x95\x99\xe7\xbb\x99\xe4\xb8\x8b\xe9\x9d\xa2_do_pick_time_work\xe4\xb8\xadshow_pg\xe5\x86\x85\xe9\x83\xa8\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\n                if len(target_symbols) > 1:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xa6\x81\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x86\xe8\x8a\x82\xe5\xb0\xb1\xe4\xb8\x8d\xe8\xa6\x81clear\xe4\xba\x86\n                    progress.show(epoch + 1, clear=not show)\n\n                if func_factors is not None and callable(func_factors):\n                    # \xe9\x92\x88\xe5\xaf\xb9do_symbols_with_diff_factors mul factors\xe7\xad\x89\xe6\x83\x85\xe5\x86\xb5\xe5\xb5\x8c\xe5\x85\xa5\xe5\x8f\xaf\xe5\x8f\x98\xe5\x9b\xa0\xe5\xad\x90\n                    p_buy_factors, p_sell_factors = func_factors(target_symbol)\n                try:\n                    kl_pd = kl_pd_manager.get_pick_time_kl_pd(target_symbol)\n                    ret, fit_error = _do_pick_time_work(capital, p_buy_factors, p_sell_factors, kl_pd, benchmark,\n                                                        draw=show, show_info=show,\n                                                        show_pg=(len(target_symbols) == 1 and show_progress))\n                except Exception as e:\n                    logging.exception(e)\n                    continue\n\n                if ret is None and back_target_symbols is not None:\n                    # \xe6\x8b\xa9\xe6\x97\xb6\xe7\xbb\x93\xe6\x9e\x9c\xe9\x94\x99\xe8\xaf\xaf\xe6\x88\x96\xe8\x80\x85\xe6\xb2\xa1\xe6\x9c\x89order\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\xa1\xa5\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\x8b\xa9\xe4\xbb\x8e\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xadpop\xe5\x87\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa1\xa5\xe4\xbd\x8d\n                    if fit_error is not None and fit_error == EFitError.NO_ORDER_GEN:\n                        # \xe6\xb2\xa1\xe6\x9c\x89order\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xa6\x81\xe7\xbb\x9f\xe8\xae\xa1\xe8\xbf\x9b\xe5\x8e\xbb\n                        r_all_fit_symbols_cnt += 1\n                    while True:\n                        if len(back_target_symbols) <= 0:\n                            break\n                        # pop\xe5\x87\xba\xe6\x9d\xa5\xe4\xbb\xa3\xe6\x9b\xbf\xe5\x8e\x9f\xe5\x85\x88\xe7\x9a\x84target\n                        target_symbol = back_target_symbols.pop()\n                        kl_pd = kl_pd_manager.get_pick_time_kl_pd(target_symbol)\n                        ret, fit_error = _do_pick_time_work(capital, p_buy_factors, p_sell_factors, kl_pd, benchmark,\n                                                            draw=show, show_info=show)\n                        if fit_error == EFitError.NO_ORDER_GEN:\n                            r_all_fit_symbols_cnt += 1\n                        if ret is not None:\n                            break\n                if ret is None:\n                    continue\n                r_all_fit_symbols_cnt += 1\n                # \xe8\xbf\x9e\xe6\x8e\xa5\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe5\x92\x8caction_pd\n                r_orders_pd = ret[0] if r_orders_pd is None else pd.concat([r_orders_pd, ret[0]])\n                r_action_pd = ret[1] if r_action_pd is None else pd.concat([r_action_pd, ret[1]])\n        return r_orders_pd, r_action_pd, r_all_fit_symbols_cnt\n\n    orders_pd, action_pd, all_fit_symbols_cnt = _batch_symbols_with_same_factors(buy_factors, sell_factors)\n    if orders_pd is not None and action_pd is not None:\n\n        # \xe8\xa6\x81sort\'Date\', \'action\'\xe4\xb8\xa4\xe9\xa1\xb9\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe8\xa1\x8capply_action_to_capital\xe5\x90\x8e\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98\n        # noinspection PyUnresolvedReferences\n        action_pd = action_pd.sort_values([\'Date\', \'action\'])\n        action_pd.index = np.arange(0, action_pd.shape[0])\n        # noinspection PyUnresolvedReferences\n        orders_pd = orders_pd.sort_values([\'buy_date\'])\n        if apply_capital:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9d\x9e\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe5\xbc\x80\xe5\xa7\x8b\xe8\x9e\x8d\xe5\x90\x88\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1\n            ABuTradeExecute.apply_action_to_capital(capital, action_pd, kl_pd_manager, show_progress=show_progress)\n\n    return orders_pd, action_pd, all_fit_symbols_cnt\n\n\ndef do_symbols_with_diff_factors(target_symbols, benchmark, factor_dict, capital, apply_capital=True,\n                                 kl_pd_manager=None,\n                                 show=False,\n                                 back_target_symbols=None):\n    """"""\n        \xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\xba\xe5\xa4\x9a\xe4\xb8\xaa\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x89\xe5\xb1\x9e\xe4\xba\x8e\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\n        \xe5\x9c\xa8factor_dict\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x94\xaf\xe4\xb8\x80\xe6\xa0\x87\xe8\xaf\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8f\x90\xe5\x8f\x96\n    """"""\n\n    def _func_factors(target_symbol):\n        """"""\n            \xe5\xae\x9a\xe4\xb9\x89do_symbols_with_same_factors\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\xa0\xe5\xad\x90dict\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\xa3\xe5\x8c\x85\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        sub_dict = factor_dict[target_symbol]\n        buy_factors = sub_dict[\'buy_factors\']\n        sell_factors = sub_dict[\'sell_factors\']\n        return buy_factors, sell_factors\n\n    # \xe9\x80\x9a\xe8\xbf\x87funcFactors\xe5\x9c\xa8\xe5\x86\x85\xe5\xb1\x82\xe8\xa7\xa3\xe5\xbc\x80factors dict\n    return do_symbols_with_same_factors(target_symbols, benchmark, None, None, capital, apply_capital=apply_capital,\n                                        kl_pd_manager=kl_pd_manager,\n                                        show=show,\n                                        back_target_symbols=back_target_symbols,\n                                        func_factors=_func_factors)\n'"
abupy/AlphaBu/ABuPickTimeMaster.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8b\xa9\xe6\x97\xb6\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xb0\x83\xe5\xba\xa6\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nimport pandas as pd\n\nfrom .ABuPickTimeExecute import do_symbols_with_same_factors\nfrom ..CoreBu.ABuEnvProcess import AbuEnvProcess\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketDataFetchMode\nfrom ..MarketBu.ABuMarket import split_k_market\nfrom ..TradeBu import ABuTradeExecute\nfrom ..TradeBu.ABuKLManager import AbuKLManager\nfrom ..CoreBu.ABuParallel import delayed, Parallel\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuPickTimeMaster(object):\n    """"""\xe6\x8b\xa9\xe6\x97\xb6\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xb0\x83\xe5\xba\xa6\xe7\xb1\xbb""""""\n\n    @classmethod\n    def do_symbols_with_same_factors_process(cls, target_symbols, benchmark, buy_factors, sell_factors, capital,\n                                             kl_pd_manager=None,\n                                             n_process_kl=ABuEnv.g_cpu_cnt * 2 if ABuEnv.g_is_mac_os\n                                             else ABuEnv.g_cpu_cnt,\n                                             n_process_pick_time=ABuEnv.g_cpu_cnt,\n                                             show_progress=True):\n        """"""\n        \xe5\xb0\x86\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x8b\x86\xe8\xa7\xa3\xe4\xb8\xba\xe5\xa4\x9a\xe4\xbb\xbd\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x8b\xa9\xe6\x97\xb6\xe5\xb7\xa5\xe4\xbd\x9c\n        :param target_symbols: \xe5\xa4\x9a\xe4\xb8\xaa\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        :param capital: AbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd_manager: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuKLManager\xe5\xae\x9e\xe4\xbe\x8b\n        :param n_process_kl: \xe6\x8e\xa7\xe5\x88\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x86\x85\xe9\x83\xa8\xe5\x90\xaf\xe5\x8a\xa8n_process_kl\xe8\xbf\x9b\xe7\xa8\x8b\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param n_process_pick_time: \xe6\x8e\xa7\xe5\x88\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\n        :param show_progress: \xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0do_symbols_with_same_factors\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        """"""\n\n        if kl_pd_manager is None:\n            kl_pd_manager = AbuKLManager(benchmark, capital)\n            # \xe4\xb8\x80\xe6\xac\xa1\xe6\x80\xa7\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe6\x89\xa7\xe8\xa1\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\x8e\xb7\xe5\x8f\x96k\xe7\xba\xbf\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe6\x94\xbe\xe5\x85\xa5kl_pd_manager\xe4\xb8\xad\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe5\x90\xaf\xe5\x8a\xa8n_process_kl\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\n            kl_pd_manager.batch_get_pick_time_kl_pd(target_symbols, n_process=n_process_kl, show_progress=show_progress)\n\n        if n_process_pick_time <= 0:\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaen_process_pick_time\xe6\x9d\xa5split_k_market\n            n_process_pick_time = ABuEnv.g_cpu_cnt\n\n        # \xe5\xb0\x86target_symbols\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xban_process_pick_time\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xa4\x84\xe7\x90\x86\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        process_symbols = split_k_market(n_process_pick_time, market_symbols=target_symbols)\n\n        # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xbc\x9a\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe6\x8d\xa2\xe4\xb8\xba\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0, \xe5\x8d\xb332 -> 33 16 -> 17\n        n_process_pick_time = len(process_symbols)\n\n        parallel = Parallel(\n            n_jobs=n_process_pick_time, verbose=0, pre_dispatch=\'2*n_jobs\')\n\n        tmp_fetch_mode = ABuEnv.g_data_fetch_mode\n        if n_process_pick_time > 1:\n            # TODO \xe9\x9c\x80\xe8\xa6\x81\xe5\x8c\xba\xe5\x88\x86hdf5\xe5\x92\x8ccsv\xe4\xb8\x8d\xe5\x90\x8c\xe5\xad\x98\xe8\xb4\xae\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8ccsv\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xb9\xb6\xe8\xa1\x8c\xe8\xaf\xbb\xe5\x86\x99\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8a\xe9\x9d\xa2\xe5\xb7\xb2\xe7\xbb\x8f\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x87\xe9\x9b\x86kl_pd_manager\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\xb9\xb6\xe8\xa1\x8c\xef\xbc\x8c\xe4\xb8\xba\xe7\xa1\xae\xe4\xbf\x9dhdf5\xe4\xb8\x8d\xe4\xbc\x9a\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xaf\xbb\xe5\x86\x99\xe8\xae\xbe\xe7\xbd\xaeLOCAL\n            ABuEnv.g_data_fetch_mode == EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n        # do_symbols_with_same_factors\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8add_process_env_sig\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe5\x86\x85\xe5\xad\x98\xe6\x8b\xb7\xe8\xb4\x9d\xe5\xaf\xb9\xe8\xb1\xa1AbuEnvProcess\n        p_nev = AbuEnvProcess()\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x80\x9a\xe8\xbf\x87do_symbols_with_same_factors\xe5\x8f\x8a\xe8\x87\xaa\xe5\xb7\xb1\xe7\x8b\xac\xe7\xab\x8b\xe7\x9a\x84\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x8b\xac\xe7\xab\x8b\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8fkl_pd_manager\xe8\xa3\x85\xe8\xbd\xbd\xe4\xba\x86\xe6\x89\x80\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        out = parallel(delayed(do_symbols_with_same_factors)(choice_symbols, benchmark, buy_factors, sell_factors,\n                                                             capital, apply_capital=False,\n                                                             kl_pd_manager=kl_pd_manager, env=p_nev,\n                                                             show_progress=show_progress)\n                       for choice_symbols in process_symbols)\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe5\xb9\xb6\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe5\x90\x8e\xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n        ABuEnv.g_data_fetch_mode = tmp_fetch_mode\n        orders_pd = None\n        action_pd = None\n        all_fit_symbols_cnt = 0\n        for sub_out in out:\n            # \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x88\xe5\xb9\xb6\n            sub_orders_pd, sub_action_pd, sub_all_fit_symbols_cnt = sub_out\n            orders_pd = sub_orders_pd if orders_pd is None else pd.concat([orders_pd, sub_orders_pd])\n            action_pd = sub_action_pd if action_pd is None else pd.concat([action_pd, sub_action_pd])\n            all_fit_symbols_cnt += sub_all_fit_symbols_cnt\n\n        if orders_pd is not None and action_pd is not None:\n            # \xe5\xb0\x86\xe5\x90\x88\xe5\xb9\xb6\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x8c\x89\xe7\x85\xa7\xe6\x97\xb6\xe9\x97\xb4\xe5\x8f\x8a\xe8\xa1\x8c\xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f\n            # noinspection PyUnresolvedReferences\n            action_pd = action_pd.sort_values([\'Date\', \'action\'])\n            action_pd.index = np.arange(0, action_pd.shape[0])\n            # noinspection PyUnresolvedReferences\n            orders_pd = orders_pd.sort_values([\'buy_date\'])\n            # \xe6\x9c\x80\xe5\x90\x8e\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84action\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe8\xb5\x84\xe9\x87\x91\xe4\xb8\x8a\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe5\xba\x8f\xef\xbc\x8c\xe5\x8f\x8a\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe4\xb9\xb0\xe5\x85\xa5\n            ABuTradeExecute.apply_action_to_capital(capital, action_pd, kl_pd_manager, show_progress=show_progress)\n\n        return orders_pd, action_pd, all_fit_symbols_cnt\n'"
abupy/AlphaBu/ABuPickTimeWorker.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8b\xa9\xe6\x97\xb6\xe5\x85\xb7\xe4\xbd\x93\xe5\xb7\xa5\xe4\xbd\x9c\xe8\x80\x85\xef\xbc\x8c\xe6\x95\xb4\xe5\x90\x88\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbb\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xbb\xa5\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\x8b\xe4\xbb\xb6\xe7\x9a\x84\xe5\x8f\x91\xe7\x94\x9f\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport copy\n\nimport numpy as np\n\nfrom ..MarketBu import ABuSymbolPd\nfrom ..FactorBuyBu.ABuFactorBuyBase import AbuFactorBuyBase\nfrom ..FactorSellBu.ABuFactorSellBase import AbuFactorSellBase\nfrom .ABuPickBase import AbuPickTimeWorkBase\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\n    \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe7\x84\xb6\xe5\x91\xa8\xef\xbc\x8c\xe8\x87\xaa\xe7\x84\xb6\xe6\x9c\x88\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\xbc\x80\xe5\x90\xaf\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe5\x85\xb3\xe9\x97\xad\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe9\x9d\xa2\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x9a\n    abupy.alpha.pick_time_worker.g_natural_long_task = False\n""""""\ng_natural_long_task = True\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuPickTimeWorker(AbuPickTimeWorkBase):\n    """"""\xe6\x8b\xa9\xe6\x97\xb6\xe7\xb1\xbb""""""\n\n    def __init__(self, cap, kl_pd, benchmark, buy_factors, sell_factors):\n        """"""\n        :param cap: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xbadict\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaadict\xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\n        :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xbadict\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaadict\xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\n        """"""\n        self.capital = cap\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe9\x98\xb6\xe6\xae\xb5kl\n        self.kl_pd = kl_pd\n        # \xe5\x90\x88\xe5\xb9\xb6\xe5\x8a\xa0\xe4\xb8\x8a\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\n        self.combine_kl_pd = ABuSymbolPd.combine_pre_kl_pd(self.kl_pd, n_folds=1)\n        # \xe5\xa6\x82\xe7\x89\xb9\xe5\x88\xab\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe6\x80\xa7\xe8\x83\xbd\xef\xbc\x8c\xe6\x89\x93\xe5\xbc\x80\xe4\xb8\x8b\xe9\x9d\xa2\xe6\xb3\xa8\xe9\x87\x8a\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8f\xaa\xe5\x9c\xa8g_enable_ml_feature\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe5\xbc\x80\xe5\x90\xaf, \xe6\xb3\xa8\xe9\x87\x8a\xe4\xb8\x8a\xe4\xb8\x80\xe8\xa1\x8c\n        # self.combine_kl_pd = ABuSymbolPd.combine_pre_kl_pd(self.kl_pd,\n        #                                                    n_folds=1) if ABuEnv.g_enable_ml_feature else None\n        # \xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99\xe5\x9b\xa0\xe5\xad\x90\xe7\xb3\xbb\xe5\x88\x97\xef\xbc\x8c\xe5\x9b\xa0\xe5\xad\x90\xe5\x86\x85\xe9\x83\xa8\xe5\x8f\xaf\xe6\x9c\x89\xe9\x80\x89\xe6\x8b\xa9\xe6\x80\xa7\xe4\xbd\xbf\xe7\x94\xa8\n        self.benchmark = benchmark\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x97\xe8\xa1\xa8\n        self.init_buy_factors(buy_factors)\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x97\xe8\xa1\xa8\n        self.init_sell_factors(sell_factors)\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe5\x91\xa8\xef\xbc\x8c\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\x91\xa8\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe5\x9c\xa8\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x97\xb6\xe5\x81\x9a\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xe6\x95\x88\xe7\x8e\x87\n        self.filter_long_task_factors()\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe6\x9c\x80\xe7\xbb\x88\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xba\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe5\x88\x97\xe8\xa1\xa8\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x83\xbd\xe4\xb8\xbaAbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        self.orders = list()\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\xa9\xba, \xe5\x8d\xb3\xe4\xb8\x8d\xe6\x89\x93\xe5\xbc\x80\xef\xbc\x8c\xe4\xb8\x8d\xe6\x98\xbe\xe7\xa4\xba\xe6\x8b\xa9\xe6\x97\xb6\xe8\xbf\x9b\xe5\xba\xa6\n        self.task_pg = None\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8b\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x97\xe8\xa1\xa8""""""\n        return \'buy_factors:{}\\nsell_factors:{}\'.format(self.buy_factors, self.sell_factors)\n\n    __repr__ = __str__\n\n    def enable_task_pg(self):\n        """"""\xe5\x90\xaf\xe5\x8a\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\x86\x85\xe9\x83\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1""""""\n        if self.kl_pd is not None and hasattr(self.kl_pd, \'name\') and len(self.kl_pd) > 120:\n            self.task_pg = AbuMulPidProgress(len(self.kl_pd), \'pick {} times\'.format(self.kl_pd.name))\n            self.task_pg.init_ui_progress()\n            self.task_pg.display_step = 42\n\n    def _week_task(self, today):\n        """"""\n        \xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8self.week_buy_factors\xef\xbc\x8cself.week_sell_factors\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\xad\xe4\xbb\xa3\n        \xe4\xb8\x8d\xe9\x9c\x80\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8hasattr\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe5\x88\xa4\xe6\x96\xadfit_week\n        """"""\n        # \xe4\xbc\x98\xe5\x85\x88\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe5\x8d\xb3\xe4\xbd\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe8\xa2\xab\xe9\x94\x81\xe4\xbd\x86\xe9\x99\x84\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe4\xb8\x8d\xe8\x83\xbd\xe9\x94\x81\n        self._task_attached_sell(today, how=\'week\')\n\n        # \xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xad\xe4\xb8\x8d\xe5\xbb\xba\xe8\xae\xae\xe7\x94\x9f\xe6\x88\x90\xe4\xb9\xb0\xe5\x8d\x95\xef\xbc\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8d\x96\xe5\x8d\x95\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe5\x9c\xa8\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xae\x8c\xe6\x88\x90\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe5\x88\xa4\xe6\x96\xad\xe9\x80\x9a\xe8\xbf\x87today.exec_week\xef\xbc\x8ctoday.exec_month\n        for sell_factor in self.week_sell_factors:\n            sell_factor.fit_week(today, self.orders)\n\n        # \xe6\x89\xa7\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x86\xb3\xe7\xad\x96\xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x81\xe9\x94\x81\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe4\xbb\x8eself.buy_factors\xe9\x81\x8d\xe5\x8e\x86\xe4\xb8\x8d\xe6\x98\xafself.week_buy_factors\n        self._task_attached_ps(today, is_week=True)\n\n        for buy_factor in self.week_buy_factors:\n            if not buy_factor.lock_factor:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\xb2\xa1\xe6\x9c\x89\xe8\xa2\xab\xe5\xb0\x81\xe9\x94\x81\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\n                buy_factor.fit_week(today)\n\n    def _month_task(self, today):\n        """"""\n        \xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8self.month_buy_factors\xef\xbc\x8cself.month_sell_factors\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\xad\xe4\xbb\xa3\n        \xe4\xb8\x8d\xe9\x9c\x80\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8hasattr\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe5\x88\xa4\xe6\x96\xadfit_month\n        """"""\n        # \xe4\xbc\x98\xe5\x85\x88\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe5\x8d\xb3\xe4\xbd\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe8\xa2\xab\xe9\x94\x81\xe4\xbd\x86\xe9\x99\x84\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe4\xb8\x8d\xe8\x83\xbd\xe9\x94\x81\n        self._task_attached_sell(today, how=\'month\')\n\n        # \xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xad\xe4\xb8\x8d\xe5\xbb\xba\xe8\xae\xae\xe7\x94\x9f\xe6\x88\x90\xe4\xb9\xb0\xe5\x8d\x95\xef\xbc\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe5\x8d\x96\xe5\x8d\x95\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe5\x9c\xa8\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xae\x8c\xe6\x88\x90\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe5\x88\xa4\xe6\x96\xad\xe9\x80\x9a\xe8\xbf\x87today.exec_week\xef\xbc\x8ctoday.exec_month\n        for sell_factor in self.month_sell_factors:\n            sell_factor.fit_month(today, self.orders)\n\n        # \xe6\x89\xa7\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x86\xb3\xe7\xad\x96\xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x81\xe9\x94\x81\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe4\xbb\x8eself.buy_factors\xe9\x81\x8d\xe5\x8e\x86\xe4\xb8\x8d\xe6\x98\xafself.month_buy_factors\n        self._task_attached_ps(today, is_week=False)\n\n        # \xe6\x89\xa7\xe8\xa1\x8c\xe5\xb8\xa6\xe6\x9c\x89fit_month\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\n        for buy_factor in self.month_buy_factors:\n            if not buy_factor.lock_factor:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\xb2\xa1\xe6\x9c\x89\xe8\xa2\xab\xe5\xb0\x81\xe9\x94\x81\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\n                buy_factor.fit_month(today)\n\n    def _day_task(self, today):\n        """"""\n        \xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe8\xbf\xad\xe4\xbb\xa3\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n        :param today: \xe4\xbb\x8a\xe6\x97\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        # \xe4\xbc\x98\xe5\x85\x88\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8f\x97\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe9\x94\x81\xe7\x9a\x84\xe5\xbd\xb1\xe5\x93\x8d\n        self._task_attached_sell(today, how=\'day\')\n\n        # \xe6\xb3\xa8\xe6\x84\x8f\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe5\xa7\x8b\xe7\xbb\x88\xe9\x9d\x9e\xe9\xab\x98\xe9\xa2\x91\xef\xbc\x8c\xe9\x9d\x9e\xe5\xbd\x93\xe6\x97\xa5\xe4\xb9\xb0\xe5\x8d\x96\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8c\xba\xe5\x88\x86\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe8\xa6\x81\xe5\x85\x88\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\n        for sell_factor in self.sell_factors:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe4\xbb\x8a\xe6\x97\xa5\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x89\x80\xe4\xbb\xa5\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n            sell_factor.read_fit_day(today, self.orders)\n\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe8\xa1\x8c\xe4\xb8\xba\xe8\xa6\x81\xe5\x9c\xa8\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x8b\xe9\x9d\xa2\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\xba\xe9\xab\x98\xe9\xa2\x91\xe6\x97\xa5\xe4\xba\xa4\xe6\x98\x93\xe6\xa8\xa1\xe5\xbc\x8f\n        for buy_factor in self.buy_factors:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\xb2\xa1\xe6\x9c\x89\xe8\xa2\xab\xe5\xb0\x81\xe9\x94\x81\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\n            if not buy_factor.lock_factor:\n                # \xe8\xbf\xad\xe4\xbb\xa3\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe9\x83\xbd\xe5\xaf\xb9\xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90order\xe5\x8a\xa0\xe5\x85\xa5self.orders\n                order = buy_factor.read_fit_day(today)\n                if order and order.order_deal:\n                    self.orders.append(order)\n\n    def _task_attached_sell(self, today, how):\n        """"""\xe4\xb8\x93\xe5\xb1\x9e\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c \xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90""""""\n\n        for buy_factor in self.buy_factors:\n            # \xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe5\x8d\x95\xe5\xad\x90, \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8buy_factor_class\xe4\xb8\x8d\xe6\x98\xafbuy_factor\xef\xbc\x8cbuy_factor\xe5\xb8\xa6\xe5\x8f\x82\xe6\x95\xb0\xe5\x81\x9a\xe4\xb8\xba\xe5\x94\xaf\xe4\xb8\x80\xe6\xa0\x87\xe7\xa4\xba\n            factor_orders = list(filter(lambda order: order.buy_factor_class == buy_factor.__class__.__name__,\n                                        self.orders))\n            if len(factor_orders) == 0:\n                # \xe5\xbd\x93\xe5\x89\x8d\xe5\x9b\xa0\xe5\xad\x90\xe6\xb2\xa1\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\x8d\x95\xe5\xad\x90\n                continue\n\n            # TODO \xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xbf\x9b\xe8\xa1\x8ceq\xe6\xaf\x94\xe5\xaf\xb9\n            for sell_factor in buy_factor.sell_factors:\n                if how == \'day\':\n                    # \xe6\x89\x80\xe6\x9c\x89\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x83\xbd\xe8\xa6\x81\xe7\x94\xa8read_fit_day\xef\xbc\x8c\xe4\xb8\x94\xe4\xb8\x80\xe5\xae\x9a\xe5\xad\x98\xe5\x9c\xa8\n                    sell_factor.read_fit_day(today, factor_orders)\n                elif how == \'week\' and hasattr(sell_factor, \'fit_week\'):\n                    # \xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\n                    sell_factor.fit_week(today, factor_orders)\n                elif how == \'month\'and hasattr(sell_factor, \'fit_month\'):\n                    # \xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\n                    sell_factor.fit_month(today, factor_orders)\n\n    def _task_attached_ps(self, today, is_week):\n        """"""\xe4\xb8\x93\xe5\xb1\x9e\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90""""""\n        for buy_factor in self.buy_factors:\n            # \xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8today.exec_week\xe6\x88\x96\xe8\x80\x85today.exec_month\xe6\x9d\xa5\xe5\x88\xa4\xe5\xae\x9a\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe9\x83\xbd\xe6\x97\xb6true\n            buy_factor.fit_ps_week(today) if is_week else buy_factor.fit_ps_month(today)\n\n    def _task_loop(self, today):\n        """"""\n        \xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\n        \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe7\x84\xb6\xe5\x91\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe4\xbc\x9a\xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x91\xa8\xe4\xba\x94\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\n        \xe8\x87\xaa\xe7\x84\xb6\xe6\x9c\x88\xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x9c\x88\xe6\x9c\xab\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xa4\xa9\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\xb0\xb1\xe4\xbb\xa5\n        \xe5\xa4\xa9\xe6\x95\xb0\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa7\xa6\xe5\x8f\x91\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbf\x99\xe4\xb8\xaa\xe6\x97\xb6\xe5\x80\x99\xe5\xae\x9a\xe6\x80\xa7\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x9c\xac\xe8\xba\xab\xe7\x9a\x84\xe6\x80\xa7\xe8\xb4\xa8\n        \xe5\x8f\xaa\xe6\x98\xaf\xe4\xbb\xa5\xe6\x97\xb6\xe9\x97\xb4\xe8\xb7\xa8\xe5\xba\xa6\xe4\xbd\x9c\xe4\xb8\xba\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe8\xa7\xa6\xe5\x8f\x91\xe6\x9d\xa1\xe4\xbb\xb6\n        :param today: \xe5\xaf\xb9self.kl_pd apply\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\x94axis\xef\xbc\x9d1\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        if self.task_pg is not None:\n            self.task_pg.show()\n\n        day_cnt = today.key\n        # \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xa7\xe8\xa1\x8c\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1, \xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe8\xb5\x8b\xe4\xba\x88today\xe5\xaf\xb9\xe8\xb1\xa1\n        today.exec_week = today.week_task == 1 if g_natural_long_task else day_cnt % 5 == 0\n        # \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xa7\xe8\xa1\x8c\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1, \xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe8\xb5\x8b\xe4\xba\x88today\xe5\xaf\xb9\xe8\xb1\xa1\n        today.exec_month = today.month_task == 1 if g_natural_long_task else day_cnt % 20 == 0\n\n        if day_cnt == 0 and not today.exec_week:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe6\x8b\xa9\xe6\x97\xb6\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe4\xb8\x94\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8c\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x80\x89\xe8\x82\xa1\xe6\xb1\xa0\xe5\xad\x90\n            self._task_attached_ps(today, is_week=True)\n        if day_cnt == 0 and not today.exec_month:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe6\x8b\xa9\xe6\x97\xb6\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe4\xb8\x94\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8c\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x80\x89\xe8\x82\xa1\xe6\xb1\xa0\xe5\xad\x90\n            self._task_attached_ps(today, is_week=False)\n\n        if today.exec_month:\n            # \xe6\x89\xa7\xe8\xa1\x8c\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\n            self._month_task(today)\n        if today.exec_week:\n            # \xe6\x89\xa7\xe8\xa1\x8c\xe5\x9b\xa0\xe5\xad\x90\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\n            self._week_task(today)\n        # \xe6\x89\xa7\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\n        self._day_task(today)\n\n    # noinspection PyTypeChecker\n    def fit(self, *args, **kwargs):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x89\xe8\xbe\x93\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x8b\x9f\xe5\x90\x88\xe6\x8b\xa9\xe6\x97\xb6\n        """"""\n        if g_natural_long_task:\n            """"""\xe5\xa6\x82\xe6\x9e\x9c\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x87\xaa\xe7\x84\xb6\xe5\x91\xa8\xef\xbc\x8c\xe8\x87\xaa\xe7\x84\xb6\xe6\x9c\x88\xe6\x8b\xa9\xe6\x97\xb6\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8kl_pd\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe8\x87\xaa\xe7\x84\xb6\xe5\x91\xa8\xef\xbc\x8c\xe8\x87\xaa\xe7\x84\xb6\xe6\x9c\x88\xe6\xa0\x87\xe8\xae\xb0""""""\n            # \xe8\x87\xaa\xe7\x84\xb6\xe5\x91\xa8: \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x91\xa8\xe4\xba\x94\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe8\xae\xb0\n            self.kl_pd[\'week_task\'] = np.where(self.kl_pd.date_week == 4, 1, 0)\n            """"""\n                \xe8\x87\xaa\xe7\x84\xb6\xe6\x9c\x88: \xe5\x8d\xb3\xe5\x89\x8d\xe5\x90\x8e\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe7\x9b\xb8\xe4\xba\x92\xe5\x87\x8f\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe6\x95\xb0 > 60 \xe5\xbf\x85\xe7\x84\xb6\xe4\xb8\xba\xe6\x9c\x88\xe6\x9c\xab\xef\xbc\x8c20140801 - 20140731\n                \xe6\xb2\xa1\xe6\x9c\x89\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4api\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xbf\x99\xe6\xa0\xb7\xe5\x81\x9a\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe5\xbf\xab\n                self.kl_pd.shift(-1)[\'date\'] - self.kl_pd[\'date\']\n                ->\n                >>>>\n                2014-07-28     1.0\n                2014-07-29     1.0\n                2014-07-30     1.0\n                2014-07-31    70.0\n                2014-08-01     3.0\n                2014-08-04     1.0\n                2014-08-05     1.0\n                >>>\n                2014-08-22     3.0\n                2014-08-25     1.0\n                2014-08-26     1.0\n                2014-08-27     1.0\n                2014-08-28     1.0\n                2014-08-29    73.0\n                2014-09-02     1.0\n                2014-09-03     1.0\n                >>>>\n            """"""\n            self.kl_pd[\'month_task\'] = np.where(self.kl_pd.shift(-1)[\'date\'] - self.kl_pd[\'date\'] > 60, 1, 0)\n        # \xe9\x80\x9a\xe8\xbf\x87pandas apply\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x80\x92\xe8\xbf\x9b\xe6\x8b\xa9\xe6\x97\xb6\n        self.kl_pd.apply(self._task_loop, axis=1)\n\n        if self.task_pg is not None:\n            self.task_pg.close_ui_progress()\n\n    def init_sell_factors(self, sell_factors):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87sell_factors\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\n        :param sell_factors: list\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xbadict\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaadict\xe4\xb8\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe5\xa6\x82class\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\x89\n        :return:\n        """"""\n        self.sell_factors = list()\n\n        if sell_factors is None:\n            return\n\n        for factor_class in sell_factors:\n            if factor_class is None:\n                continue\n            if \'class\' not in factor_class:\n                # \xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n                raise ValueError(\'factor class key must name class !!!\')\n\n            factor_class_cp = copy.deepcopy(factor_class)\n            # pop\xe5\x87\xba\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe9\x83\xbd\xe4\xb8\xba\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            class_fac = factor_class_cp.pop(\'class\')\n            # \xe6\x95\xb4\xe5\x90\x88capital\xef\xbc\x8ckl_pd\xe7\xad\x89\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\n            factor = class_fac(self.capital, self.kl_pd, self.combine_kl_pd, self.benchmark, **factor_class_cp)\n\n            if not isinstance(factor, AbuFactorSellBase):\n                # \xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\xe6\xa3\x80\xe6\xb5\x8b\n                raise TypeError(\'factor must base AbuFactorSellBase\')\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n            self.sell_factors.append(factor)\n\n    def init_buy_factors(self, buy_factors):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87buy_factors\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x84\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\n        :param buy_factors: list\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xbadict\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaadict\xe4\xb8\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe5\xa6\x82class\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\x89\n        :return:\n        """"""\n        self.buy_factors = list()\n\n        if buy_factors is None:\n            return\n\n        for factor_class in buy_factors:\n            if factor_class is None:\n                continue\n\n            if \'class\' not in factor_class:\n                # \xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n                raise ValueError(\'factor class key must name class !!!\')\n\n            factor_class_cp = copy.deepcopy(factor_class)\n            # pop\xe5\x87\xba\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe9\x83\xbd\xe4\xb8\xba\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            class_fac = factor_class_cp.pop(\'class\')\n            # \xe6\x95\xb4\xe5\x90\x88capital\xef\xbc\x8ckl_pd\xe7\xad\x89\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\n            factor = class_fac(self.capital, self.kl_pd, self.combine_kl_pd, self.benchmark, **factor_class_cp)\n\n            if not isinstance(factor, AbuFactorBuyBase):\n                # \xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\xe6\xa3\x80\xe6\xb5\x8b\n                raise TypeError(\'factor must base AbuFactorBuyBase\')\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n            self.buy_factors.append(factor)\n\n    def filter_long_task_factors(self):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89fit_week\xe7\xad\x9b\xe9\x80\x89\xe5\x91\xa8\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x9b\xa0\xe5\xad\x90\n        \xe6\xa0\xb9\xe6\x8d\xae\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89fit_month\xe7\xad\x9b\xe9\x80\x89\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x9b\xa0\xe5\xad\x90\n        \xe5\x9c\xa8\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x97\xb6\xe5\xae\x8c\xe6\x88\x90\xe7\xad\x9b\xe9\x80\x89\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe5\x9c\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe8\xbf\xad\xe4\xbb\xa3\n        \xe4\xb8\x8d\xe6\x96\xad\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8chasattr\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\n        """"""\n        self.week_buy_factors = list(filter(lambda buy_factor: hasattr(buy_factor, \'fit_week\'),\n                                            self.buy_factors))\n        self.month_buy_factors = list(filter(lambda buy_factor: hasattr(buy_factor, \'fit_month\'),\n                                             self.buy_factors))\n\n        self.week_sell_factors = list(filter(lambda sell_factor: hasattr(sell_factor, \'fit_week\'),\n                                             self.sell_factors))\n        self.month_sell_factors = list(filter(lambda sell_factor: hasattr(sell_factor, \'fit_month\'),\n                                              self.sell_factors))\n'"
abupy/AlphaBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuPickBase import AbuPickTimeWorkBase, AbuPickStockWorkBase\n\nfrom .ABuPickStockMaster import AbuPickStockMaster\nfrom .ABuPickStockWorker import AbuPickStockWorker\n\nfrom .ABuPickTimeWorker import AbuPickTimeWorker\nfrom .ABuPickTimeMaster import AbuPickTimeMaster\n\nfrom . import ABuPickStockExecute\nfrom . import ABuPickTimeExecute\n# noinspection all\nfrom . import ABuAlpha as alpha\n\n__all__ = [\n    'AbuPickTimeWorkBase',\n    'AbuPickStockWorkBase',\n    'AbuPickStockMaster',\n    'AbuPickStockWorker',\n    'AbuPickTimeWorker',\n    'AbuPickTimeMaster',\n\n    'ABuPickStockExecute',\n    'ABuPickTimeExecute',\n    'alpha'\n]\n"""
abupy/BetaBu/ABuAtrPosition.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xa4\xba\xe4\xbe\x8b\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x9aatr\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nfrom .ABuPositionBase import AbuPositionBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\n    \xe9\xbb\x98\xe8\xae\xa40.1\xe5\x8d\xb310% \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xef\xbc\x9aabupy.beta.atr.g_atr_pos_base = 0.01\xe4\xbf\xae\xe6\x94\xb9\xe4\xbb\x93\xe4\xbd\x8d\xe5\x9f\xba\xe7\xa1\x80\xe9\x85\x8d\xe6\xaf\x94\n    \xe9\x9c\x80\xe8\xa6\x81\xe6\xb3\xa8\xe6\x84\x8f\xe5\xa4\x96\xe9\x83\xa8\xe5\x85\xb6\xe5\xae\x83\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe4\xb8\x8d\xe8\xa6\x81\xe9\x9a\x8f\xe6\x84\x8f\xe4\xbd\xbf\xe7\x94\xa8\xe6\xa8\xa1\xe5\x9d\x97\xe5\x85\xa8\xe5\xb1\x80\xe5\x8f\x98\xe9\x87\x8f\xef\xbc\x8cAbuAtrPosition\xe7\x89\xb9\xe6\xae\x8a\xe5\x9b\xa0\xe4\xb8\xba\xe6\xb3\xa8\xe5\x86\x8c\n    \xe5\x9c\xa8ABuEnvProcess\xe4\xb8\xad\xe5\x9c\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x90\xaf\xe5\x8a\xa8\xe6\x97\xb6\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xba\x86\xe6\xa8\xa1\xe5\x9d\x97\xe5\x85\xa8\xe5\xb1\x80\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\x85\xe5\xad\x98\n""""""\ng_atr_pos_base = 0.1\n\n\nclass AbuAtrPosition(AbuPositionBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8batr\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb""""""\n\n    s_atr_base_price = 15  # best fit wide: 12-20\n    s_std_atr_threshold = 0.5  # best fit wide: 0.3-0.65\n\n    def fit_position(self, factor_object):\n        """"""\n        fit_position\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        \xe8\xae\xa1\xe7\xae\x97\xef\xbc\x9a\xef\xbc\x88\xe5\xb8\xb8\xe6\x95\xb0\xe4\xbb\xb7\xe6\xa0\xbc \xef\xbc\x8f \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x89\xef\xbc\x8a \xe5\xbd\x93\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5atr21\n        :param factor_object: ABuFactorBuyBases\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        """"""\n        std_atr = (self.atr_base_price / self.bp) * self.kl_pd_buy[\'atr21\']\n\n        """"""\n            \xe5\xaf\xb9atr \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x90\xe5\x88\xb6 \xe9\x81\xbf\xe5\x85\x8d\xe7\x94\xb1\xe4\xba\x8e\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xbf\x87\xe5\xb0\x8f\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4\n            atr\xe5\xb0\x8f\xef\xbc\x8c\xe4\xba\xa7\xe7\x94\x9f\xe5\xa4\xa7\xe9\x87\x8f\xe4\xb9\xb0\xe5\x8d\x95\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe9\x92\x88\xe5\xaf\xb9\xe8\xbf\x99\xe7\xa7\x8d\xe6\xb3\xa2\xe5\x8a\xa8\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x88\xe8\xbf\x87\xe5\xb0\x8f\xef\xbc\x8c\xe8\xbf\x87\xe5\xa4\xa7\xef\xbc\x89\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n            \xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\x89\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe7\xad\x9b\xe9\x80\x89\xe8\xbf\x87\xe6\xbb\xa4\xe7\xad\x96\xe7\x95\xa5, \xe9\x80\x89\xe8\x82\xa1\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe5\x8f\x960.5\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe6\x9c\x80\xe5\xa4\xa7\xe5\x8f\x96\xe4\xb8\xa4\xe5\x80\x8dg_atr_pos_base\n        """"""\n        atr_wv = self.std_atr_threshold if std_atr < self.std_atr_threshold else std_atr\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe4\xbb\x93\xe4\xbd\x8d\xe6\xaf\x94\xe4\xbe\x8b\n        atr_pos = self.atr_pos_base / atr_wv\n        # \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe9\x99\x90\xe5\x88\xb6\n        atr_pos = self.pos_max if atr_pos > self.pos_max else atr_pos\n        # \xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        return self.read_cash * atr_pos / self.bp * self.deposit_rate\n\n    def _init_self(self, **kwargs):\n        """"""atr\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe5\x88\xb6\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xae\xbe\xe7\xbd\xae""""""\n        self.atr_base_price = kwargs.pop(\'atr_base_price\', AbuAtrPosition.s_atr_base_price)\n        self.std_atr_threshold = kwargs.pop(\'std_atr_threshold\', AbuAtrPosition.s_std_atr_threshold)\n        self.atr_pos_base = kwargs.pop(\'atr_pos_base\', g_atr_pos_base)\n'"
abupy/BetaBu/ABuBeta.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import absolute_import\n\n# noinspection all\nfrom . import ABuPositionBase as position\n# noinspection all\nfrom . import ABuAtrPosition as atr\n# noinspection all\nfrom . import ABuKellyPosition as kelly\n'
abupy/BetaBu/ABuKellyPosition.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x9akelly\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nfrom .ABuPositionBase import AbuPositionBase\n\n\nclass AbuKellyPosition(AbuPositionBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8bkelly\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb""""""\n\n    def fit_position(self, factor_object):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87kelly\xe5\x85\xac\xe5\x8f\xb8\xe8\xae\xa1\xe7\xae\x97\xe4\xbb\x93\xe4\xbd\x8d, fit_position\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        :param factor_object: ABuFactorBuyBases\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :return:\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        """"""\n        # \xe8\xb4\xa5\xe7\x8e\x87\n        loss_rate = 1 - self.win_rate\n        # kelly\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe4\xbb\x93\xe4\xbd\x8d\xe6\xaf\x94\xe4\xbe\x8b\n        kelly_pos = self.win_rate - loss_rate / (self.gains_mean / self.losses_mean)\n        # \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8c\xe4\xbe\x9d\xe7\x84\xb6\xe5\x8f\x97\xe4\xb8\x8a\xe5\xb1\x82\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe5\x88\xb6\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8ceg\xef\xbc\x9a\xe5\xa6\x82\xe6\x9e\x9ckelly\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe5\x85\xa8\xe4\xbb\x93\xef\xbc\x8c\xe4\xbe\x9d\xe7\x84\xb6\xe4\xbc\x9a\xe5\x87\x8f\xe5\xb0\x91\xe5\x88\xb075%\xef\xbc\x8c\xe5\xa6\x82\xe4\xbf\xae\xe6\x94\xb9\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe5\x80\xbc\n        kelly_pos = self.pos_max if kelly_pos > self.pos_max else kelly_pos\n        # \xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        return self.read_cash * kelly_pos / self.bp * self.deposit_rate\n\n    def _init_self(self, **kwargs):\n        """"""kelly\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe5\x88\xb6\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xae\xbe\xe7\xbd\xae""""""\n\n        # \xe9\xbb\x98\xe8\xae\xa4kelly\xe4\xbb\x93\xe4\xbd\x8d\xe8\x83\x9c\xe7\x8e\x870.50\n        self.win_rate = kwargs.pop(\'win_rate\', 0.50)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b0.10\n        self.gains_mean = kwargs.pop(\'gains_mean\', 0.10)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b0.05\n        self.losses_mean = kwargs.pop(\'losses_mean\', 0.05)\n\n        """"""\xe4\xbb\xa5\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xaekelly\xe6\xa0\xb9\xe6\x8d\xae\xe8\xae\xa1\xe7\xae\x970.5 - 0.5 / (0.10 / 0.05) \xe4\xbb\x93\xe4\xbd\x8d\xe5\xb0\x86\xe6\x98\xaf0.25\xe5\x8d\xb325%""""""\n'"
abupy/BetaBu/ABuPositionBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\xa3\x8e\xe9\x99\xa9\xe6\x8e\xa7\xe5\x88\xb6\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe5\x9f\xba\xe7\xa1\x80\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import ABCMeta, abstractmethod\n\nfrom ..CoreBu.ABuFixes import six\nfrom ..MarketBu.ABuMarket import MarketMixin\n\n""""""\xe6\xaf\x8f\xe4\xb8\x80\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe6\xaf\x94\xe4\xbe\x8b\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xef\xbc\x9aabupy.beta.position.g_pos_max = 0.5\xe4\xbf\xae\xe6\x94\xb9\xe6\x9c\x80\xe5\xa4\xa7\xe6\xaf\x8f\xe4\xb8\x80\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa475%""""""\ng_pos_max = 0.75\n""""""\n    \xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\x9c\x80\xe5\xb0\x8f\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe8\x9e\x8d\xe8\xb5\x84\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe8\xa7\xa6\xe5\x8f\x91Margin Call\n    \xe5\x9c\xa8\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe6\x9c\x89\xe6\xaf\x8f\xe7\xa7\x8d\xe5\x95\x86\xe5\x93\x81\xe6\x9c\x80\xe5\xb0\x91\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xbe\xe7\xbd\xae\n    \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xef\xbc\x9aabupy.beta.position.g_deposit_rate = 0.5\n""""""\ng_deposit_rate = 1\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x85\xa8\xe5\xb1\x80\xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8AbuAtrPosition\xe4\xbd\x9c\xe4\xb8\xba\xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb.\n\n    \xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xaf\xb9\xe5\xba\x94\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\n    \xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaa\xe8\x83\xbd\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\x85\xa8\xe5\xb1\x80\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe9\x92\x88\xe5\xaf\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe7\x8b\xac\xe6\x9c\x89\xe9\x99\x84\xe5\xb1\x9e\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\n    \xe7\xb1\xbb\n""""""\ng_default_pos_class = None\n\n\nclass AbuPositionBase(six.with_metaclass(ABCMeta, MarketMixin)):\n    """"""\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    def __init__(self, kl_pd_buy, factor_name, symbol_name, bp, read_cash, **kwargs):\n        """"""\n        :param kl_pd_buy: \xe4\xba\xa4\xe6\x98\x93\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        :param factor_name: \xe5\x9b\xa0\xe5\xad\x90\xe5\x90\x8d\xe7\xa7\xb0\n        :param symbol_name: symbol\xe4\xbb\xa3\xe7\xa0\x81\n        :param bp: \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\n        :param read_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\n        :param deposit_rate: \xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\xaf\x94\xe4\xbe\x8b\n        """"""\n        self.kl_pd_buy = kl_pd_buy\n        self.factor_name = factor_name\n        self.symbol_name = symbol_name\n        self.bp = bp\n        self.read_cash = read_cash\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe8\xae\xbe\xe7\xbd\xae\xe5\x9f\xba\xe7\xb1\xbb\xe8\xb4\x9f\xe8\xb4\xa3\xe5\xbc\xb9\xe5\x87\xba\n        self.pos_max = kwargs.pop(\'pos_max\', g_pos_max)\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\x85\xa8\xe5\xb1\x80\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\x9c\x80\xe5\xb0\x8f\xe6\xaf\x94\xe4\xbe\x8b\xe8\xae\xbe\xe7\xbd\xae\xe5\x9f\xba\xe7\xb1\xbb\xe8\xb4\x9f\xe8\xb4\xa3\xe5\xbc\xb9\xe5\x87\xba\n        self.deposit_rate = kwargs.pop(\'deposit_rate\', g_deposit_rate)\n\n        # \xe5\xad\x90\xe7\xb1\xbb\xe7\xbb\xa7\xe7\xbb\xad\xe5\xae\x8c\xe6\x88\x90\xe8\x87\xaa\xe6\x9c\x89\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\n        self._init_self(**kwargs)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, factor_name, symbol_name, read_cash, deposit_rate""""""\n        return \'{}: factor_name:{}, symbol_name:{}, read_cash:{}, deposit_rate:{}\'.format(self.__class__.__name__,\n                                                                                          self.factor_name,\n                                                                                          self.symbol_name,\n                                                                                          self.read_cash,\n                                                                                          self.deposit_rate)\n\n    __repr__ = __str__\n\n    @abstractmethod\n    def _init_self(self, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe9\x92\x88\xe5\xaf\xb9\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def fit_position(self, factor_object):\n        """"""\n        fit_position\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\xe5\x85\xb7\xe4\xbd\x93\xe8\xae\xa1\xe7\xae\x97\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n        :param factor_object: ABuFactorBuyBases\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :return:\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        """"""\n        pass\n'"
abupy/BetaBu/ABuPtPosition.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x9a\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbb\x93\xe4\xbd\x8d\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nfrom scipy import stats\n\nfrom .ABuPositionBase import AbuPositionBase\n\n\nclass AbuPtPosition(AbuPositionBase):\n    """"""\n        \xe7\xa4\xba\xe4\xbe\x8b\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xef\xbc\x9a\n\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa8\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe6\x9d\xa5\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\x93\xe4\xbd\x8d\xe5\xa4\xa7\xe5\xb0\x8f\n\n        \xe5\x81\x87\xe8\xae\xbe\xe8\xbf\x87\xe5\x8e\xbb\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n        \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba2\xe5\x85\x83\xef\xbc\x9a\xe5\x88\x99\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe9\x85\x8d\xe6\xaf\x94\xe5\xbe\x88\xe9\xab\x98(\xe8\xae\xa4\xe4\xb8\xba\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe6\x9c\x89\xe5\xbe\x88\xe5\xa4\xa7\xe5\x90\x91\xe4\xb8\x8a\xe7\xa9\xba\xe9\x97\xb4)\n        \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba9\xe5\x85\x83\xef\xbc\x9a\xe5\x88\x99\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe9\x85\x8d\xe6\xaf\x94\xe5\xbe\x88\xe4\xbd\x8e(\xe8\xae\xa4\xe4\xb8\xba\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe5\x90\x91\xe4\xb8\x8a\xe7\xa9\xba\xe9\x97\xb4\xe6\xaf\x94\xe8\xbe\x83\xe5\xb0\x8f)\n    """"""\n\n    def fit_position(self, factor_object):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x9a\n        \xe6\xa0\xb9\xe6\x8d\xae\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa8\xe8\xbf\x87\xe5\x8e\xbb\xe4\xb8\x80\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbcrank\xe4\xbd\x8d\xe7\xbd\xae\xe6\x9d\xa5\xe5\x86\xb3\xe5\xae\x9a\xe4\xbb\x93\xe4\xbd\x8d\n        fit_position\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        :param factor_object: ABuFactorBuyBases\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :return:\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        """"""\n\n        # self.kl_pd_buy\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe5\xbd\x93\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84past_day_cnt\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\n        last_kl = factor_object.past_today_kl(self.kl_pd_buy, self.past_day_cnt)\n        if last_kl is None or last_kl.empty:\n            precent_pos = self.pos_base\n        else:\n            # \xe4\xbd\xbf\xe7\x94\xa8percentileofscore\xe8\xae\xa1\xe7\xae\x97\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa8\xe8\xbf\x87\xe5\x8e\xbb\xe7\x9a\x84past_day_cnt\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\n            precent_pos = stats.percentileofscore(last_kl.close, self.bp)\n            precent_pos = (1 + (self.mid_precent - precent_pos) / 100) * self.pos_base\n        # \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8c\xe4\xbe\x9d\xe7\x84\xb6\xe5\x8f\x97\xe4\xb8\x8a\xe5\xb1\x82\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe5\x88\xb6\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8ceg\xef\xbc\x9a\xe5\xa6\x82\xe6\x9e\x9c\xe7\xae\x97\xe5\x87\xba\xe5\x85\xa8\xe4\xbb\x93\xef\xbc\x8c\xe4\xbe\x9d\xe7\x84\xb6\xe4\xbc\x9a\xe5\x87\x8f\xe5\xb0\x91\xe5\x88\xb075%\xef\xbc\x8c\xe5\xa6\x82\xe4\xbf\xae\xe6\x94\xb9\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\x93\xe4\xbd\x8d\xe5\x80\xbc\n        precent_pos = self.pos_max if precent_pos > self.pos_max else precent_pos\n        # \xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x88\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x8b\xef\xbc\x8c\xe9\xa1\xbf\xef\xbc\x8c\xe5\x90\x88\xe7\xba\xa6\xef\xbc\x89\n        return self.read_cash * precent_pos / self.bp * self.deposit_rate\n\n    def _init_self(self, **kwargs):\n        """"""\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe5\x88\xb6\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xae\xbe\xe7\xbd\xae""""""\n        # \xe9\xbb\x98\xe8\xae\xa4\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbb\x93\xe4\xbd\x8d\xe6\xaf\x94\xe4\xbe\x8b0.10\xef\xbc\x8c\xe5\x8d\xb310%\n        self.pos_base = kwargs.pop(\'pos_base\', 0.10)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb9\x8b\xe5\x89\x8d\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x95\xbf\xe7\x9f\xad\xe6\x95\xb0\xe9\x87\x8f\n        self.past_day_cnt = kwargs.pop(\'past_day_cnt\', 20)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xad\xe5\x80\xbc\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\n        self.mid_precent = kwargs.pop(\'mid_precent\', 50.0)\n'"
abupy/BetaBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuPositionBase import AbuPositionBase\nfrom .ABuAtrPosition import AbuAtrPosition\nfrom .ABuKellyPosition import AbuKellyPosition\nfrom .ABuPtPosition import AbuPtPosition\n# noinspection all\nfrom . import ABuBeta as beta\n\n__all__ = [\n    'AbuPositionBase',\n    'AbuAtrPosition',\n    'AbuKellyPosition',\n    'AbuPtPosition',\n    'beta'\n]\n"""
abupy/CheckBu/ABuChecker.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\xa3\x80\xe6\x9f\xa5\xe7\xb1\xbb\xef\xbc\x8c\xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe3\x80\x81\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe3\x80\x81\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom toolz import valmap\nfrom functools import wraps\n\nfrom ..CheckBu.ABuFuncUtil import *\nfrom ..CheckBu.ABuChecks import *\nfrom ..CheckBu.ABuProcessor import arg_process, return_process\n\n__author__ = \'\xe5\xa4\x9c\xe7\x8c\xab\'\n__weixin__ = \'abu_quant\'\n\n\nclass _NoInstances(six.with_metaclass(ABCMeta, type)):\n    """"""\xe9\x98\xbb\xe6\xad\xa2\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96""""""\n\n    def __call__(cls, *args, **kwargs):\n        raise TypeError(""Can\'t instantiate directly"")\n\n\nclass FuncChecker(six.with_metaclass(ABCMeta, _NoInstances)):\n    """"""\xe5\x87\xbd\xe6\x95\xb0\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe6\xa3\x80\xe6\x9f\xa5\xe7\xb1\xbb""""""\n\n    @staticmethod\n    def check_iscallable(func):\n        """"""\n        \xe6\xa3\x80\xe6\x9f\xa5\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9b\xe4\xb8\x8d\xe6\x98\xaf\xe5\x87\xbd\xe6\x95\xb0raise CheckError\n        :param func: \xe4\xbc\xa0\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if not callable(func):\n            raise CheckError(\'%s is not callable\' % get_func_name(func))\n\n\nclass ArgChecker(six.with_metaclass(ABCMeta, _NoInstances)):\n    """"""\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe6\xa3\x80\xe6\x9f\xa5\xe7\xb1\xbb""""""\n\n    @staticmethod\n    def check_type(*ty_args, **ty_kwargs):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param ty_args: \xe7\xb1\xbb\xe5\x9e\x8btuple\n        :param ty_kwargs: \xe7\xb1\xbb\xe5\x9e\x8bdict\n        :return: \n        """"""\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x88\xe8\xa7\x84\xe7\x9a\x84tuple\xe5\x8f\x82\xe6\x95\xb0\n        for ty in ty_args:\n            if not isinstance(ty, (type, tuple)):\n                raise TypeError(\n                    ""check_type() expected a type or tuple of types""\n                    "", but got {type_} instead."".format(\n                        type_=ty,\n                    )\n                )\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x88\xe8\xa7\x84\xe7\x9a\x84dict\xe5\x8f\x82\xe6\x95\xb0\n        for name, ty in six.iteritems(ty_kwargs):\n            if not isinstance(ty, (type, tuple)):\n                raise TypeError(\n                    ""check_type() expected a type or tuple of types for ""\n                    ""argument \'{name}\', but got {type_} instead."".format(\n                        name=name, type_=ty,\n                    )\n                )\n        # \xe5\xb0\x86type_check\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8a\n        return arg_process(*map(type_check, list(ty_args)), **valmap(type_check, ty_kwargs))\n\n    @staticmethod\n    def check_bound(*bd_args, **bd_kwargs):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe6\x9f\x90\xe4\xb8\x80\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        \xe4\xbc\xa0\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xba\x94\xe4\xb8\xba`` (min_value, max_value)``.\n        ``None`` \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\x9c\xe4\xb8\xba ``min_value`` \xe6\x88\x96 ``max_value``\xef\xbc\x8c\xe7\x9b\xb8\xe5\xbd\x93\xe4\xba\x8e\xe6\xad\xa3\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\n        :param bd_args: tuple\xe8\x8c\x83\xe5\x9b\xb4\xe5\x8f\x82\xe6\x95\xb0\n        :param bd_kwargs: dict\xe8\x8c\x83\xe5\x9b\xb4\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n        # \xe5\xb0\x86bound_valid_and_check\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8a\n        return arg_process(*map(bound_valid_and_check, list(bd_args)),\n                           **valmap(bound_valid_and_check, bd_kwargs))\n\n    @staticmethod\n    def _check_default(check_no, *names, **_unused):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe6\x88\x96\xe8\x80\x85\xe6\xb2\xa1\xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param staticmethod: \xe6\xa3\x80\xe6\x9f\xa5\xe6\x9c\x89 or \xe6\xb2\xa1\xe6\x9c\x89\n        :param names: \xe5\xbe\x85\xe6\xa3\x80\xe6\x9f\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\n        :param _unused: \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n        # \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        if _unused:\n            raise TypeError(""_check_default() doesn\'t accept dict processors"")\n        check_err_msg = \'\' if check_no else \'no \'\n\n        def decorate(func):\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\xe5\xad\x97\xe5\x85\xb8\n            arg_defaults = get_arg_defaults(func)\n            for name in names:\n                if name not in arg_defaults:\n                    # \xe4\xbc\xa0\xe5\x85\xa5\xe4\xba\x86\xe5\xb9\xb6\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\x8d\n                    raise TypeError(get_func_name(func) + \' has no argument named \' + name)\n                if bool(check_no) != (isinstance(arg_defaults[name], ArgNoDefault)):\n                    # \xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5\n                    raise CheckError(\n                        \'In \' + get_func_name(func) + \' argument {} has {}default\'.format(name, check_err_msg))\n\n            @wraps(func)\n            def wrapper(*args, **kwargs):\n                # \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe7\xbb\x93\xe6\x9e\x9c\n                return func(*args, **kwargs)\n\n            return wrapper\n\n        return decorate\n\n    @staticmethod\n    def check_hasdefault(*names, **_unused):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param names: \xe5\xbe\x85\xe6\xa3\x80\xe6\x9f\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\n        :param _unused: \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n\n        return ArgChecker._check_default(False, *names, **_unused)\n\n    @staticmethod\n    def check_nodefault(*names, **_unused):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\xb2\xa1\xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param names: \xe5\xbe\x85\xe6\xa3\x80\xe6\x9f\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\n        :param _unused: \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n\n        return ArgChecker._check_default(True, *names, **_unused)\n\n    @staticmethod\n    def check_hasargs(func):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89*args\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param func: \xe4\xbc\xa0\xe5\x85\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \n        """"""\n        # \xe8\xa7\xa3\xe5\x8c\x85\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x8a\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\n        argspec = getargspec(func)\n        spec_args = argspec.args if argspec.args else []\n        defaults = argspec.defaults if argspec.defaults else ()\n        if len(spec_args) - len(defaults) == 0:\n            # \xe5\x87\xbd\xe6\x95\xb0\xe6\xb2\xa1\xe6\x9c\x89tuple\xe5\x8f\x82\xe6\x95\xb0\n            raise CheckError(get_func_name(func) + \' has no args\')\n\n        @wraps(func)\n        def wrapper(*args_inner, **kwargs):\n            # \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe7\xbb\x93\xe6\x9e\x9c\n            return func(*args_inner, **kwargs)\n\n        return wrapper\n\n    @staticmethod\n    def check_haskwargs(func):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\n        \xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89**kwargs\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param func: \xe4\xbc\xa0\xe5\x85\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \n        """"""\n        # \xe8\xa7\xa3\xe5\x8c\x85\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x8a\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\n        argspec = getargspec(func)\n        defaults = argspec.defaults if argspec.defaults else ()\n        if not defaults:\n            # \xe5\x87\xbd\xe6\x95\xb0\xe6\xb2\xa1\xe6\x9c\x89dict\xe5\x8f\x82\xe6\x95\xb0\n            raise CheckError(get_func_name(func) + \' has no kwargs\')\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe7\xbb\x93\xe6\x9e\x9c\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    @staticmethod\n    def check_subset(*ss_args, **ss_kwargs):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\x9f\x90\xe4\xb8\x80\xe9\x9b\x86\xe5\x90\x88\xe7\x9a\x84\xe5\xad\x90\xe9\x9b\x86\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param ss_args: \xe5\x8f\x82\xe6\x95\xb0\xe9\x9b\x86\xe5\x90\x88tuple\n        :param ss_kwargs: \xe5\x8f\x82\xe6\x95\xb0\xe9\x9b\x86\xe5\x90\x88dict\n        :return: \n        """"""\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x88\xe8\xa7\x84\xe7\x9a\x84tuple\xe5\x8f\x82\xe6\x95\xb0\n        for ss in ss_args:\n            if not isinstance(ss, (list, set, type(None))):\n                raise TypeError(\n                    ""check_subset() expected a list or set or None of values""\n                    "", but got {subset_} or tuple instead."".format(\n                        subset_=str(type(ss)),\n                    )\n                )\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x88\xe8\xa7\x84\xe7\x9a\x84dict\xe5\x8f\x82\xe6\x95\xb0\n        for name, ss in six.iteritems(ss_kwargs):\n            if not isinstance(ss, (list, set, type(None))):\n                raise TypeError(\n                    ""check_subset() expected a list or set of values for ""\n                    ""argument \'{name_}\', but got {subset_} or tuple instead."".format(\n                        name_=name, subset_=str(type(ss)),\n                    )\n                )\n        # \xe5\xb0\x86subset_check\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8a\n        return arg_process(*map(subset_check, list(ss_args)), **valmap(subset_check, ss_kwargs))\n\n\nclass ReturnChecker(six.with_metaclass(ABCMeta, _NoInstances)):\n    """"""\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe6\xa3\x80\xe6\x9f\xa5\xe7\xb1\xbb""""""\n\n    @staticmethod\n    def check_type(*types, **_unused):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param types: \xe7\xb1\xbb\xe5\x9e\x8btuple\n        :param _unused: \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n        # \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        if _unused:\n            raise TypeError(""check_type() doesn\'t accept dict processors"")\n\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x88\xe6\xa0\xbc\xe7\x9a\x84tuple\xe5\x8f\x82\xe6\x95\xb0\n        for type_ in types:\n            if not isinstance(type_, (type, tuple, type(None))):  # tuple or \xe5\x86\x85\xe7\xbd\xae\xe7\xb1\xbb\xe5\x9e\x8b\n                raise TypeError(\n                    ""check_return_type() expected a type or tuple of types, but got {type_msg} instead."".format(\n                        type_msg=type_,\n                    )\n                )\n        # \xe5\xb0\x86type_check\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8a\n        return return_process(*map(type_check, list(types)))\n\n    @staticmethod\n    def check_bound(*bounds, **_unused):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe6\x9f\x90\xe4\xb8\x80\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        \xe4\xbc\xa0\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xba\x94\xe4\xb8\xba`` (min_value, max_value)``.\n        ``None`` \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\x9c\xe4\xb8\xba ``min_value`` \xe6\x88\x96 ``max_value``\xef\xbc\x8c\xe7\x9b\xb8\xe5\xbd\x93\xe4\xba\x8e\xe6\xad\xa3\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\n        :param bounds: tuple\xe8\x8c\x83\xe5\x9b\xb4\xe5\x8f\x82\xe6\x95\xb0\n        :param _unused: \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n        # \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        if _unused:\n            raise TypeError(""check_bound() doesn\'t accept dict processors"")\n        # \xe5\xb0\x86bound_valid_and_check\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8a\n        return return_process(*map(bound_valid_and_check, list(bounds)))\n\n    @staticmethod\n    def check_subset(*ss_args, **_unused):\n        """"""\n        \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\x9f\x90\xe4\xb8\x80\xe9\x9b\x86\xe5\x90\x88\xe7\x9a\x84\xe5\xad\x90\xe9\x9b\x86\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        :param ss_args: \xe5\x8f\x82\xe6\x95\xb0\xe9\x9b\x86\xe5\x90\x88tuple\n        :param _unused: \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        :return: \n        """"""\n        # \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n        if _unused:\n            raise TypeError(""check_subset() doesn\'t accept dict processors"")\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84tuple\xe5\x8f\x82\xe6\x95\xb0\n        for ss in ss_args:\n            if not isinstance(ss, (list, set, type(None))):\n                raise TypeError(\n                    ""check_subset() expected a list or set or None of values""\n                    "", but got {subset_} or tuple instead."".format(\n                        subset_=str(type(ss)),\n                    )\n                )\n        # \xe5\xb0\x86subset_check\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8a\n        return return_process(*map(subset_check, list(ss_args)))\n'"
abupy/CheckBu/ABuChecks.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\xa3\x80\xe6\x9f\xa5\xe8\x8c\x83\xe5\x9b\xb4\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport numpy as np\nfrom abc import ABCMeta\n\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe5\xa4\x9c\xe7\x8c\xab\'\n__weixin__ = \'abu_quant\'\n\n\nclass CheckError(six.with_metaclass(ABCMeta, TypeError)):\n    """"""Check\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84Error\xe7\xb1\xbb\xe5\x9e\x8b""""""\n    pass\n\n\ndef bound_check(bound):\n    """"""\n    \xe5\x88\xb6\xe4\xbd\x9c\xe6\xa3\x80\xe6\x9f\xa5\xe6\x95\xb0\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4\xe7\x9a\x84check_fail\xe5\x87\xbd\xe6\x95\xb0\n    """"""\n    (min_val, max_val) = bound\n    # \xe8\xbd\xac\xe6\x8d\xa2None\xe5\x88\xb0inf\n    min_val = -np.inf if min_val is None else min_val\n    max_val = np.inf if max_val is None else max_val\n    # \xe5\x87\x86\xe5\xa4\x87\xe9\x94\x99\xe8\xaf\xafmessage\n    error_msg = ""function expected a return value inclusively between %s and %s"" % (min_val, max_val)\n\n    def _check(value):\n        """"""\xe8\x8c\x83\xe5\x9b\xb4\xe6\xa3\x80\xe6\x9f\xa5\xe9\x80\xbb\xe8\xbe\x91""""""\n        return not (min_val <= value <= max_val)\n\n    def _bound_check(val):\n        """"""\n        \xe6\xa3\x80\xe6\x9f\xa5\xe6\x95\xb0\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        """"""\n        if _check(val):\n            raise CheckError(error_msg)\n        else:\n            return val\n\n    return _bound_check\n\n\ndef bound_valid_and_check(bound):\n    """"""\n    \xe6\xa3\x80\xe6\x9f\xa5bound\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x9b\xe5\xa4\xb1\xe8\xb4\xa5raise TypeError\n    \xe4\xbc\xa0\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xba\x94\xe4\xb8\xba`` (min_value, max_value)``.\n    """"""\n\n    def valid_bound(t):\n        # \xe6\xa3\x80\xe6\x9f\xa5bound\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe6\xa0\xbc\xe5\xbc\x8f\n        return (\n            isinstance(t, tuple)\n            and len(t) == 2\n            and t != (None, None)\n        )\n\n    if not valid_bound(bound):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe6\xa0\xbc\xe5\xbc\x8f\xe9\x94\x99\xe8\xaf\xaf\n        raise TypeError(\n            ""function expected a tuple of bounds,""\n            ""but got {} instead."".format(bound)\n        )\n    return bound_check(bound)\n\n\ndef subset_check(subset):\n    """"""\n    \xe5\x88\xb6\xe4\xbd\x9c\xe6\xa3\x80\xe6\x9f\xa5\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x90\xe9\x9b\x86\xe7\x9a\x84check\xe5\x87\xbd\xe6\x95\xb0\n    """"""\n\n    def _check(arg_val):\n        """"""\n        \xe6\xa3\x80\xe6\x9f\xa5\xe6\x95\xb0\xe5\x80\xbc\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x90\xe9\x9b\x86\xe7\x9a\x84check\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        """"""\n        if subset is not None and arg_val not in set(subset):\n            raise CheckError(\n                \'Value {} is not the subset of {}\'.format(arg_val, str(subset))\n            )\n        return arg_val\n\n    return _check\n\n\ndef type_check(arg_ty):\n    """"""\n    \xe5\x88\xb6\xe4\xbd\x9c\xe6\xa3\x80\xe6\x9f\xa5\xe6\x95\xb0\xe5\x80\xbc\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84check\xe5\x87\xbd\xe6\x95\xb0\n    """"""\n\n    def _check(arg_val):\n        """"""\n        \xe6\xa3\x80\xe6\x9f\xa5\xe6\x95\xb0\xe5\x80\xbc\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84check\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9b\xe6\xa3\x80\xe6\x9f\xa5\xe5\xa4\xb1\xe8\xb4\xa5raise CheckError\n        """"""\n        if arg_ty and not isinstance(arg_val, arg_ty):\n            raise CheckError(\n                \'Value {} is not {}\'.format(arg_val, arg_ty)\n            )\n        return arg_val\n\n    return _check\n'"
abupy/CheckBu/ABuFuncUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x87\xbd\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\xb7\xa5\xe5\x85\xb7\xe7\xb1\xbb\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom collections import OrderedDict\nfrom abc import ABCMeta\n\nfrom ..CoreBu.ABuFixes import six\n\ntry:\n    from inspect import getfullargspec as getargspec\nexcept ImportError:\n\n    from inspect import getargspec\n\n__author__ = \'\xe5\xa4\x9c\xe7\x8c\xab\'\n__weixin__ = \'abu_quant\'\n\n\nclass ArgNoDefault(six.with_metaclass(ABCMeta, TypeError)):\n    """"""\xe6\xb2\xa1\xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1""""""\n    pass\n\n\ndef get_func_name(func):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\n    :param func: \xe4\xbc\xa0\xe5\x85\xa5\xe5\x87\xbd\xe6\x95\xb0\n    :return: \n    """"""\n    try:\n        func_name = str(func.__name__) + \'()\'\n    except AttributeError:\n        func_name = str(func)\n    return func_name\n\n\ndef get_arg_defaults(func):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x9b\xe6\xb2\xa1\xe6\x9c\x89\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe6\x97\xb6\xe5\xaf\xb9\xe5\xba\x94NoDefaultArg\xe5\xaf\xb9\xe8\xb1\xa1\n    :param func: \xe4\xbc\xa0\xe5\x85\xa5\xe5\x87\xbd\xe6\x95\xb0\n    :return: \xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\x8d\xef\xbc\x9a\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\n    """"""\n    # \xe8\xa7\xa3\xe5\x8c\x85\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x8a\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\n    argspec = getargspec(func)\n    spec_args = argspec.args if argspec.args else []\n    defaults = argspec.defaults if argspec.defaults else ()\n    # \xe6\x8b\xbc\xe8\xa3\x85\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbcdict\n    no_defaults = (ArgNoDefault(),) * (len(spec_args) - len(defaults))\n    args_defaults = dict(zip(spec_args, no_defaults + defaults))\n    return args_defaults\n\n\ndef check_bind(func, *args, **kwargs):\n    """"""\n    \xe6\xa3\x80\xe6\x9f\xa5\xe8\xa6\x81bind\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x92\x8c\xe5\x8e\x9f\xe5\x87\xbd\xe6\x95\xb0func\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9\xe9\xbd\x90\xef\xbc\x9b\xe5\xaf\xb9\xe9\xbd\x90\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x8craise TypeError\n    :param func:  \xe5\x8e\x9f\xe5\x87\xbd\xe6\x95\xb0\n    :param args: \xe8\xa6\x81bind\xe7\x9a\x84tuple\xe5\xaf\xb9\xe8\xb1\xa1\n    :param kwargs: \xe8\xa6\x81bind\xe7\x9a\x84dict\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \n    """"""\n    argspec = getargspec(func)\n    spec_args = argspec.args if argspec.args else []\n    # \xe6\xa3\x80\xe6\x9f\xa5 kwargs \xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\x8d\n    bad_names = set(kwargs.keys()) - set(spec_args)\n    if bad_names:\n        raise TypeError(\n            ""Got unknown arguments: {}"".format(str(bad_names))\n        )\n    # \xe6\xa3\x80\xe6\x9f\xa5args\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x87\xe9\x95\xbf\n    l_arg_len = len(args)\n    if len(spec_args) < l_arg_len + len(kwargs):\n        raise TypeError(\n            ""Function with {} arguments, but got {} arguments to bind"".format(len(spec_args),\n                                                                              l_arg_len + len(kwargs))\n        )\n    # \xe6\xa3\x80\xe6\x9f\xa5 kwargs \xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x92\x8c args\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x86\xb2\xe7\xaa\x81\n    arg_inds = OrderedDict(zip(spec_args, range(len(spec_args))))\n    for k, v in six.iteritems(kwargs):\n        if l_arg_len > arg_inds[k]:\n            raise TypeError(\n                ""dict argument crash on tuple argument:  {}"".format(str(k))\n            )\n\n\ndef bind_partial(func, *args, **kwargs):\n    """"""\n    \xe7\xbb\x91\xe5\xae\x9afunc\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\n    :param func: \xe5\x8e\x9f\xe5\x87\xbd\xe6\x95\xb0\n    :param args: \xe8\xa6\x81bind\xe7\x9a\x84tuple\xe5\xaf\xb9\xe8\xb1\xa1\n    :param kwargs: \xe8\xa6\x81bind\xe7\x9a\x84dict\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe7\xbb\x91\xe5\xae\x9a\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\n    """"""\n    # \xe8\xa7\xa3\xe5\x8c\x85\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\n    argspec = getargspec(func)\n    spec_args = argspec.args if argspec.args else []\n\n    # \xe6\x8b\xbc\xe8\xa3\x85\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xb1\xa1\n    bind_dict = OrderedDict(zip(spec_args, [None] * len(spec_args)))\n    for k, v in six.iteritems(kwargs):\n        bind_dict[k] = v\n    for k, v in zip(six.iterkeys(bind_dict), args):\n        bind_dict[k] = v\n\n    return bind_dict\n'"
abupy/CheckBu/ABuProcessor.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\xa2\x84\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe6\x88\x96\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom functools import wraps\n\nfrom ..CoreBu.ABuFixes import zip\nfrom ..CheckBu.ABuFuncUtil import *\n\ntry:\n    from ..ExtBu.six.moves import zip_longest\nexcept ImportError:\n    from six.moves import zip_longest\n\n__author__ = \'\xe5\xa4\x9c\xe7\x8c\xab\'\n__weixin__ = \'abu_quant\'\n\n\ndef arg_process(*arg_funcs, **kwarg_funcs):\n    """"""\n    \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n    \xe5\xb0\x86funcs\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x8e\x9f\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8a\xef\xbc\x9bfunc\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\xaa\xe5\x8c\x85\xe6\x8b\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0: return_val.\n    :param arg_funcs: func\xe5\x87\xbd\xe6\x95\xb0tuple\xe3\x80\x82\n    :param kwarg_funcs: func\xe5\x87\xbd\xe6\x95\xb0dict\n    :return: \n    """"""\n\n    def _decorator(func):\n        # \xe6\xa3\x80\xe6\x9f\xa5\xe5\xbe\x85bind\xe5\x8f\x82\xe6\x95\xb0\n        check_bind(func, *arg_funcs, **kwarg_funcs)\n        # \xe6\x8f\x90\xe5\x8f\x96funcs\xe5\xad\x97\xe5\x85\xb8\n        funcs = bind_partial(func, *arg_funcs, **kwarg_funcs)\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # \xe6\x8b\xbc\xe8\xa3\x85\xe7\xbb\x8f\xe8\xbf\x87\xe5\x87\xbd\xe6\x95\xb0\xe5\xa4\x84\xe7\x90\x86\xe5\x90\x8e\xe7\x9a\x84\xe6\x96\xb0\xe5\x8f\x82\xe6\x95\xb0\n            args_new = [f(arg) if f else arg for arg, f in zip(args, six.itervalues(funcs))]\n            kwargs_new = {k: funcs[k](arg) if k in funcs and funcs[k] else arg\n                          for k, arg in six.iteritems(kwargs)}\n            # \xe8\xb0\x83\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\n            return func(*args_new, **kwargs_new)\n\n        return wrapper\n\n    return _decorator\n\n\ndef return_process(*funcs, **_unused):\n    """"""\n    \xe3\x80\x90\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe3\x80\x91\n    \xe5\xb0\x86funcs\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8a\n    :param funcs: \xe4\xb8\x80\xe4\xb8\xaa\xe6\x88\x96\xe8\x80\x85\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xa4\x84\xe7\x90\x86\xe5\xaf\xb9\xe5\xba\x94\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84func\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaafunc\xe5\x87\xbd\xe6\x95\xb0\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe5\x92\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe6\x95\xb0\xe9\x87\x8f\xe5\xaf\xb9\xe9\xbd\x90\xef\xbc\x9bfunc\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\xaa\xe5\x8c\x85\xe6\x8b\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0: return_val\n    :param _unused: \xe7\x94\xa8\xe6\x9d\xa5\xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe8\xa2\xabfuncs\xe5\x87\xbd\xe6\x95\xb0\xe5\xa4\x84\xe7\x90\x86\xe8\xbf\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n    """"""\n    # \xe5\xb1\x8f\xe8\x94\xbddict\xe5\x8f\x82\xe6\x95\xb0\n    if _unused:\n        raise TypeError(""return_process() doesn\'t accept dict processors"")\n\n    def _decorator(f):\n        def wrapper(*args, **kw):\n            # \xe6\x8b\xbf\xe5\x88\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n            return_vals = f(*args, **kw)\n            # \xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xa4\x84\xe7\x90\x86\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n            return _apply_funcs(return_vals, funcs)\n\n        return wrapper\n\n    return _decorator\n\n\ndef _apply_funcs(return_vals, funcs):\n    """"""\n    \xe5\xb0\x86func\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8a\n    """"""\n    # \xe6\xa3\x80\xe6\x9f\xa5iterable\n    if not isinstance(return_vals, tuple):\n        return_vals = (return_vals,)\n    try:\n        iter(funcs)\n    except TypeError:\n        funcs = (funcs,) if funcs else ()\n\n    # \xe6\xa3\x80\xe6\x9f\xa5\xe5\x87\xbd\xe6\x95\xb0\n    if not funcs:\n        return return_vals\n\n    # \xe5\x87\xbd\xe6\x95\xb0\xe5\x92\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8d\xe5\xaf\xb9\xe9\xbd\x90\n    if 1 < len(return_vals) < len(funcs):\n        raise TypeError(\n            ""In _apply_funcs(), len(funcs) == {} more than len(return_vals) == {}"".format(\n                len(funcs), len(return_vals)\n            )\n        )\n    # \xe5\x87\xbd\xe6\x95\xb0\xe5\xa4\x9a\xe4\xba\x8e\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n    if 1 == len(return_vals) < len(funcs):\n        raise TypeError(\n            ""In _apply_funcs(), only 1 return value with len(processors) == {}"".format(len(funcs),\n                                                                                       len(return_vals))\n        )\n\n    # \xe5\xb0\x86\xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8a\n    return tuple([f(v) if f else v for v, f in zip_longest(return_vals, funcs)])\n'"
abupy/CheckBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuProcessor import arg_process, return_process\nfrom .ABuChecker import FuncChecker, ArgChecker, ReturnChecker\n\n__all__ = [\n    'arg_process',\n    'return_process',\n    'FuncChecker',\n    'ArgChecker',\n    'ReturnChecker',\n]\n"""
abupy/CoreBu/ABu.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\n\nfrom ..AlphaBu.ABuPickStockMaster import AbuPickStockMaster\nfrom ..AlphaBu.ABuPickTimeMaster import AbuPickTimeMaster\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu import ABuStore\nfrom ..CoreBu.ABuStore import EStoreAbu\nfrom ..CoreBu.ABuEnv import EMarketDataFetchMode\nfrom ..CoreBu.ABuStore import AbuResultTuple\nfrom ..MarketBu.ABuMarket import all_symbol\nfrom ..MarketBu.ABuSymbolPd import kl_df_dict_parallel\nfrom ..TradeBu.ABuBenchmark import AbuBenchmark\nfrom ..TradeBu.ABuCapital import AbuCapital\nfrom ..TradeBu.ABuKLManager import AbuKLManager\nfrom ..UtilBu import ABuDateUtil\nfrom ..UtilBu import ABuProgress\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef run_loop_back(read_cash, buy_factors, sell_factors, stock_picks=None, choice_symbols=None, n_folds=2,\n                  start=None,\n                  end=None,\n                  commission_dict=None,\n                  n_process_kl=None,\n                  n_process_pick=None):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85\xe6\x89\xa7\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\x9e\xe6\xb5\x8b\xe3\x80\x82\n\n    \xe6\x8e\xa8\xe8\x8d\x90\xe5\x9c\xa8\xe4\xbd\xbf\xe7\x94\xa8abu.run_loop_back()\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x89\x8d\xe4\xbd\xbf\xe7\x94\xa8abu.run_kl_update()\xe5\x87\xbd\xe6\x95\xb0\xe9\xa6\x96\xe5\x85\x88\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\n    \xe5\x9c\xa8run_kl_update()\xe4\xb8\xad\xe5\xae\x83\xe4\xbc\x9a\xe9\xa6\x96\xe9\x80\x89\xe5\xbc\xba\xe5\x88\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe5\x9c\xa8\xe6\x9b\xb4\xe6\x96\xb0\xe5\xae\x8c\xe6\xaf\x95\xe5\x90\x8e\xef\xbc\x8c\xe6\x9b\xb4\xe6\x94\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\xe4\xb8\xba\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8abu.run_kl_update()\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x8e\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x88\x86\xe7\xa6\xbb\xef\xbc\x8c\xe5\x9c\xa8\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe5\x8f\x8a\xe9\x97\xae\xe9\xa2\x98\xe6\x8e\x92\xe6\x9f\xa5\xe4\xb8\x8a\xe9\x83\xbd\xe4\xbc\x9a\xe5\xb8\xa6\xe6\x9d\xa5\xe6\xad\xa3\xe9\x9d\xa2\xe7\x9a\x84\xe6\x8f\x90\xe5\x8d\x87\n\n    :param read_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe9\xa2\x9d\xe5\xba\xa6\xef\xbc\x8ceg\xef\xbc\x9a1000000\n    :param buy_factors: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                    eg\xef\xbc\x9a\n                        buy_factors = [{\'xd\': 60, \'class\': AbuFactorBuyBreak},\n                                       {\'xd\': 42, \'class\': AbuFactorBuyBreak}]\n    :param sell_factors: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                    eg:\n                        sell_factors = [{\'stop_loss_n\': 0.5, \'stop_win_n\': 3.0, \'class\': AbuFactorAtrNStop},\n                                        {\'pre_atr_n\': 1.0, \'class\': AbuFactorPreAtrNStop},\n                                        {\'close_atr_n\': 1.5, \'class\': AbuFactorCloseAtrNStop},]\n    :param stock_picks: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x9a\n                    eg:\n                        stock_pickers = [{\'class\': AbuPickRegressAngMinMax,\n                                          \'threshold_ang_min\': 0.0, \'reversed\': False},\n                                         {\'class\': AbuPickStockPriceMinMax,\n                                          \'threshold_price_min\': 50.0,\n                                          \'reversed\': False}]\n    :param choice_symbols: \xe5\xa4\x87\xe9\x80\x89\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0, \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8abupy.env.g_market_target\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\n                           \xe4\xb8\xbaNone\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xb8\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n                    eg:\n                        choice_symbols = [\'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\',\n                                          \'usTSLA\', \'usWUBA\', \'usVIPS\']\n    :param n_folds: int, \xe5\x9b\x9e\xe6\xb5\x8bn_folds\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae\n    :param start: \xe5\x9b\x9e\xe6\xb5\x8b\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4, str\xe5\xaf\xb9\xe8\xb1\xa1, eg: \'2013-07-10\'\n    :param end: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4, str\xe5\xaf\xb9\xe8\xb1\xa1 eg: \'2016-07-26\'\n    :param commission_dict: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99AbuCapital\xef\xbc\x8c\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe6\x97\xb6\xe5\x80\x99\xe3\x80\x82\n                    eg\xef\xbc\x9a\n                        def free_commission(trade_cnt, price):\n                            # \xe5\x85\x8d\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n                            return 0\n                        commission_dict = {\'buy_commission_func\': free_commission,\n                                         \'sell_commission_func\': free_commission}\n                        AbuCapital(read_cash, benchmark, user_commission_dict=commission_dict)\n\n    :param n_process_kl: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe5\x90\xaf\xe5\x8a\xa8\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None, \xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaecpu\xe6\x95\xb0\xe9\x87\x8f\xe5\x88\x86\xe9\x85\x8d\n    :param n_process_pick: \xe6\x8b\xa9\xe6\x97\xb6\xe4\xb8\x8e\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\xaf\xe5\x8a\xa8\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None, \xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaecpu\xe6\x95\xb0\xe9\x87\x8f\xe5\x88\x86\xe9\x85\x8d\n    :return: (AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1, AbuKLManager\xe5\xaf\xb9\xe8\xb1\xa1)\n    """"""\n    if start is not None and end is not None and ABuDateUtil.date_str_to_int(end) - ABuDateUtil.date_str_to_int(\n            start) <= 0:\n        logging.info(\'end date <= start date!!\')\n        return None, None\n\n    benchmark = AbuBenchmark(n_folds=n_folds, start=start, end=end)\n    # \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n    capital = AbuCapital(read_cash, benchmark, user_commission_dict=commission_dict)\n\n    """"""\n         win_to_one:\n         1. \xe5\xa6\x82\xe6\x9e\x9csymbol\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x91\xe4\xba\x8e20\n         2. \xe5\xb9\xb6\xe4\xb8\x94\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe6\x98\xafwindows\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbawindows\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xbc\x80\xe8\xbe\x9f\xe9\x94\x80\xe6\xaf\x81\xe5\xbc\x80\xe9\x94\x80\xe9\x83\xbd\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa4\xa7\xef\xbc\x8c\n         3. \xe5\x88\xa4\xe6\x96\xadcpu\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbe\x88\xe5\xbf\xab\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe9\x80\x9a\xe8\xbf\x87cpu\xe6\x95\xb0\xe9\x87\x8f\xe5\x81\x9a\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c4\xe6\xa0\xb8\xe8\xae\xa4\xe4\xb8\xba\xe9\x80\x9f\xe5\xba\xa6\xe4\xb8\x80\xe8\x88\xac\n         \xe8\xbf\x99\xe7\xa7\x8d\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xb8\x8d\xe5\x86\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x90\xe8\xa1\x8c\xe6\x89\x80\xe6\x9c\x89\xe6\x8b\xa9\xe6\x97\xb6\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\n\n         TODO\xef\xbc\x9a\xe4\xb8\x8d\xe8\x83\xbd\xe5\x8f\xaa\xe4\xbb\xa5symbol\xe6\x95\xb0\xe9\x87\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\xe7\xbb\x93\xe5\x90\x88\xe7\xad\x96\xe7\x95\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\xbc\xe5\x90\x88\xe5\x88\xa4\xe6\x96\xad\n    """"""\n    win_to_one = choice_symbols is not None and len(\n        choice_symbols) < 20 and not ABuEnv.g_is_mac_os and ABuEnv.g_cpu_cnt <= 4\n\n    if n_process_pick is None:\n        # \xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe7\xad\x89\xe4\xba\x8ecpu\xe6\x95\xb0\xe9\x87\x8f, win_to_one\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b1\xe4\xb8\xaa\n        n_process_pick = 1 if win_to_one else ABuEnv.g_cpu_cnt\n    if n_process_kl is None:\n        # mac\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\x8b\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe5\x90\xaf\xe5\x8a\xa8\xe4\xb8\xa4\xe5\x80\x8d\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0, windows\xe5\x8f\xaa\xe6\x98\xaf\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8cwin_to_one\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b1\xe4\xb8\xaa\n        n_process_kl = 1 if win_to_one else ABuEnv.g_cpu_cnt * 2 if ABuEnv.g_is_mac_os else ABuEnv.g_cpu_cnt\n\n    # \xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x96\xb9\xe5\xbc\x8f\n    choice_symbols = AbuPickStockMaster.do_pick_stock_with_process(capital, benchmark,\n                                                                   stock_picks, choice_symbols=choice_symbols,\n                                                                   n_process_pick_stock=n_process_pick)\n\n    if choice_symbols is None or len(choice_symbols) == 0:\n        logging.info(\'pick stock result is zero!\')\n        return None, None\n    # kl\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n    kl_pd_manager = AbuKLManager(benchmark, capital)\n    # \xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xa9\xe6\x97\xb6kl\xe6\x95\xb0\xe6\x8d\xae\n    kl_pd_manager.batch_get_pick_time_kl_pd(choice_symbols, n_process=n_process_kl)\n\n    # \xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\x8b\xe5\x89\x8d\xe6\xb8\x85\xe7\x90\x86\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbe\x93\xe5\x87\xba, \xe4\xb8\x8d\xe8\x83\xbdwait, windows\xe4\xb8\x8a\xe4\xb8\x80\xe4\xba\x9b\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe4\xbc\x9a\xe5\x8d\xa1\xe6\xad\xbb\n    ABuProgress.do_clear_output(wait=False)\n\n    # \xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x96\xb9\xe5\xbc\x8f\n    orders_pd, action_pd, all_fit_symbols_cnt = AbuPickTimeMaster.do_symbols_with_same_factors_process(\n        choice_symbols, benchmark,\n        buy_factors, sell_factors, capital, kl_pd_manager=kl_pd_manager, n_process_kl=n_process_kl,\n        n_process_pick_time=n_process_pick)\n\n    # \xe9\x83\xbd\xe5\xae\x8c\xe4\xba\x8b\xe6\x97\xb6\xe6\xa3\x80\xe6\xb5\x8b\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbf\x98\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    ABuProgress.do_check_process_is_dead()\n\n    # \xe8\xbf\x94\xe5\x9b\x9enamedtuple\xef\xbc\x8c (\'orders_pd\', \'action_pd\', \'capital\', \'benchmark\')\n    abu_result = AbuResultTuple(orders_pd, action_pd, capital, benchmark)\n    # store_abu_result_tuple(abu_result, n_folds)\n    return abu_result, kl_pd_manager\n\n\ndef run_kl_update(n_folds=2, start=None, end=None, market=None, n_jobs=16, how=\'thread\'):\n    """"""\n    \xe6\x8e\xa8\xe8\x8d\x90\xe5\x9c\xa8\xe4\xbd\xbf\xe7\x94\xa8abu.run_loop_back()\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x89\x8d\xe4\xbd\xbf\xe7\x94\xa8abu.run_kl_update()\xe5\x87\xbd\xe6\x95\xb0\xe9\xa6\x96\xe5\x85\x88\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\n    \xe5\x9c\xa8run_kl_update()\xe4\xb8\xad\xe5\xae\x83\xe4\xbc\x9a\xe9\xa6\x96\xe9\x80\x89\xe5\xbc\xba\xe5\x88\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe5\x9c\xa8\xe6\x9b\xb4\xe6\x96\xb0\xe5\xae\x8c\xe6\xaf\x95\xe5\x90\x8e\xef\xbc\x8c\xe6\x9b\xb4\xe6\x94\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\xe4\xb8\xba\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\n    \xe5\x9c\xa8run_kl_update\xe5\xae\x9e\xe7\x8e\xb0\xe6\xa0\xb9\xe6\x8d\xaeEMarketTargetType\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x8d\xb3\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x9a\xe8\xbf\x9b\n    \xe7\xa8\x8b\xe6\x88\x96\xe8\x80\x85\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe5\xaf\xb9\xe5\xa4\x96\xe6\x89\xa7\xe8\xa1\x8c\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe3\x80\x82\n\n    \xe4\xbd\xbf\xe7\x94\xa8abu.run_kl_update()\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x8e\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x88\x86\xe7\xa6\xbb\xef\xbc\x8c\xe5\x9c\xa8\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe5\x8f\x8a\xe9\x97\xae\xe9\xa2\x98\xe6\x8e\x92\xe6\x9f\xa5\xe4\xb8\x8a\xe9\x83\xbd\xe4\xbc\x9a\xe5\xb8\xa6\xe6\x9d\xa5\xe6\xad\xa3\xe9\x9d\xa2\xe7\x9a\x84\xe6\x8f\x90\xe5\x8d\x87\n\n    eg\xef\xbc\x9a\n        from abupy import abu\xef\xbc\x8cEMarketTargetType\n        # \xe6\xb8\xaf\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x8e\xb7\xe5\x8f\x96\n        abupy.env.g_market_target = EMarketTargetType.E_MARKET_TARGET_HK\n        # \xe6\x9b\xb4\xe6\x96\xb06\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        abu.run_kl_update(n_folds=6)\n\n        # A\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x8e\xb7\xe5\x8f\x96\n        abupy.env.g_market_target = EMarketTargetType.E_MARKET_TARGET_CN\n        # 2013-07-10\xe7\x9b\xb4\xe5\x88\xb02016-07-26\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        abu.run_kl_update(start=\'2013-07-10\', end=\'2016-07-26\')\n\n    :param n_folds: \xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xaeint\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1, eg: \'2013-07-10\'\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1 eg: \'2016-07-26\'\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe7\xba\xbf\xe7\xa8\x8b\xe4\xbb\xa3\xe8\xa1\xa8\xe7\xba\xbf\xe7\xa8\x8b\xe6\x95\xb0\n    :param how: process\xef\xbc\x9a\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8cthread\xef\xbc\x9a\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xef\xbc\x8cmain\xef\xbc\x9a\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8d\x95\xe7\xba\xbf\xe7\xa8\x8b\n    """"""\n\n    pre_market = None\n    if market is not None:\n        # \xe4\xb8\xb4\xe6\x97\xb6\xe7\xbc\x93\xe5\xad\x98\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        pre_market = ABuEnv.g_market_target\n        ABuEnv.g_market_target = market\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\xba\xe5\x88\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9b\xb4\xe6\x96\xb0\n    ABuEnv.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET\n    # index=True, \xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae\n    symbols = all_symbol(index=True)\n    _ = kl_df_dict_parallel(symbols, n_folds=n_folds, start=start, end=end, n_jobs=n_jobs, how=how)\n    # \xe5\xae\x8c\xe6\x88\x90\xe6\x9b\xb4\xe6\x96\xb0\xe5\x90\x8e\xe6\x89\x80\xe6\x9c\x89\xe8\xae\xa4\xe4\xb8\xba\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\n    ABuEnv.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n    if market is not None and pre_market is not None:\n        # \xe8\xbf\x98\xe5\x8e\x9f\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        ABuEnv.g_market_target = pre_market\n\n\ndef store_abu_result_tuple(abu_result_tuple, n_folds=None, store_type=EStoreAbu.E_STORE_NORMAL,\n                           custom_name=None):\n    """"""\n    \xe4\xbf\x9d\xe5\xad\x98abu.run_loop_back\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9cAbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaen_folds\xef\xbc\x8cstore_type\xe5\x8f\x82\xe6\x95\xb0\n    \xe6\x9d\xa5\xe5\xae\x9a\xe4\xb9\x89\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8ABuStore.store_abu_result_tuple\xe6\x89\xa7\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\n\n    :param abu_result_tuple: AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\n    :param n_folds: \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\x86\xe5\x87\xa0\xe5\xb9\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe5\xad\x98\xe8\xb4\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param store_type: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbf\x9d\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8bEStoreAbu\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe5\xad\x98\xe8\xb4\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param custom_name: \xe5\xa6\x82\xe6\x9e\x9cstore_type=EStoreAbu.E_STORE_CUSTOM_NAME\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    """"""\n    ABuStore.store_abu_result_tuple(abu_result_tuple, n_folds, store_type=store_type, custom_name=custom_name)\n\n\ndef load_abu_result_tuple(n_folds=None, store_type=EStoreAbu.E_STORE_NORMAL, custom_name=None):\n    """"""\n    \xe8\xaf\xbb\xe5\x8f\x96\xe4\xbd\xbf\xe7\x94\xa8store_abu_result_tuple\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaen_folds\xef\xbc\x8cstore_type\xe5\x8f\x82\xe6\x95\xb0\n    \xe6\x9d\xa5\xe5\xae\x9a\xe4\xb9\x89\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xaf\xbb\xe5\x8f\x96orders_pd\xef\xbc\x8caction_pd\xef\xbc\x8ccapital\xef\xbc\x8cbenchmark\xe5\x90\x8e\xe6\x9e\x84\xe9\x80\xa0\n    AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8ABuStore.load_abu_result_tuple\xe6\x89\xa7\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\n\n    :param n_folds: \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\x86\xe5\x87\xa0\xe5\xb9\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param store_type: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbf\x9d\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8bEStoreAbu\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param custom_name: \xe5\xa6\x82\xe6\x9e\x9cstore_type=EStoreAbu.E_STORE_CUSTOM_NAME\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :return: AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return ABuStore.load_abu_result_tuple(n_folds, store_type, custom_name=custom_name)\n\n\n# noinspection PyUnusedLocal\ndef gen_buy_from_chinese(*args, **kwargs):\n    """"""\n    \xe6\x8a\xb1\xe6\xad\x89\xef\xbc\x81\xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\xad\xe6\x96\x87\xe7\x94\x9f\xe6\x88\x90\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xb9\x9f\xe9\x9c\x80\xe8\xa6\x81\xe9\x81\xb5\xe5\xbe\xaa\xe4\xb8\x80\xe5\xae\x9a\xe7\x9a\x84\xe8\xaf\xad\xe6\xb3\x95\xe5\x92\x8c\xe5\x8f\xa5\xe5\xbc\x8f\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe7\x86\x9f\xe6\x82\x89\xe7\xbc\x96\xe7\xa8\x8b\xe7\x9a\x84\xe4\xba\xba\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe4\xba\xa7\xe7\x94\x9f\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\'\n          \'\xe9\x80\xa0\xe6\x88\x90\xe6\x97\xa0\xe8\xb0\x93\xe7\x9a\x84\xe7\xbb\x8f\xe6\xb5\x8e\xe6\x8d\x9f\xe5\xa4\xb1\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\xad\xe6\x96\x87\xe8\x87\xaa\xe5\x8a\xa8\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe6\xa8\xa1\xe5\x9d\x97\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe5\xbc\x80\xe6\x94\xbe\xe6\x8e\xa5\xe5\x8f\xa3\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x81\n    """"""\n\n    print(\'\xe6\x8a\xb1\xe6\xad\x89\xef\xbc\x81\xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\xad\xe6\x96\x87\xe7\x94\x9f\xe6\x88\x90\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xb9\x9f\xe9\x9c\x80\xe8\xa6\x81\xe9\x81\xb5\xe5\xbe\xaa\xe4\xb8\x80\xe5\xae\x9a\xe7\x9a\x84\xe8\xaf\xad\xe6\xb3\x95\xe5\x92\x8c\xe5\x8f\xa5\xe5\xbc\x8f\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe7\x86\x9f\xe6\x82\x89\xe7\xbc\x96\xe7\xa8\x8b\xe7\x9a\x84\xe4\xba\xba\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe4\xba\xa7\xe7\x94\x9f\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\'\n          \'\xe9\x80\xa0\xe6\x88\x90\xe6\x97\xa0\xe8\xb0\x93\xe7\x9a\x84\xe7\xbb\x8f\xe6\xb5\x8e\xe6\x8d\x9f\xe5\xa4\xb1\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\xad\xe6\x96\x87\xe8\x87\xaa\xe5\x8a\xa8\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe6\xa8\xa1\xe5\x9d\x97\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe5\xbc\x80\xe6\x94\xbe\xe6\x8e\xa5\xe5\x8f\xa3\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x81\')\n'"
abupy/CoreBu/ABuBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xb1\xbb\xe5\x9f\xba\xe7\xa1\x80\xe9\x80\x9a\xe7\x94\xa8\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport sys\nimport logging\n\nimport pandas as pd\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import signature, Parameter, pickle\nfrom ..CoreBu import ABuEnv\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass FreezeAttrMixin(object):\n    """"""\xe5\x86\xbb\xe7\xbb\x93\xe5\xaf\xb9\xe5\xa4\x96\xe8\xae\xbe\xe7\xbd\xae\xe5\xb1\x9e\xe6\x80\xa7\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x8a\x9b\xe5\xbc\x82\xe5\xb8\xb8""""""\n\n    def _freeze(self):\n        """"""\xe5\x86\xbb\xe7\xbb\x93\xe5\xb1\x9e\xe6\x80\xa7\xe8\xae\xbe\xe7\xbd\xae\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        object.__setattr__(self, ""__frozen"", True)\n\n    def __setattr__(self, key, value):\n        if getattr(self, ""__frozen"", False) and not (key in type(self).__dict__ or key == ""_cache""):\n            raise AttributeError(""You cannot add any new attribute \'{key}\'"".format(key=key))\n        object.__setattr__(self, key, value)\n\n\nclass PickleStateMixin(object):\n    """"""\xe6\xb7\xb7\xe5\x85\xa5\xe6\x9c\x89\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe9\x9c\x80\xe6\xb1\x82\xe7\x9a\x84\xe7\xb1\xbb""""""\n\n    # pickle\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe6\x94\xaf\xe6\x8c\x81\xe7\x89\x88\xe6\x9c\xac\n    _pickle_highest_protocol = pickle.HIGHEST_PROTOCOL\n    # python\xe7\x89\x88\xe6\x9c\xac\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe7\xae\x80\xe5\x8d\x95\xe4\xbd\xbf\xe7\x94\xa8\xe6\x98\xaf\xe5\x90\xa6py3\n    _python_version = str(sys.version_info)\n    # windows or mac os\n    _is_mac_os = ABuEnv.g_is_mac_os\n    # \xe6\x98\xaf\xe5\x90\xa6\xe8\x80\x83\xe8\x99\x91\xe6\x9c\xac\xe8\xba\xab\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xacversion, \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xef\xbc\x8c\xe5\xbf\xbd\xe7\x95\xa5abupy\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7\n    skip_abupy_version = True\n\n    def __getstate__(self):\n        from .. import __version__\n        _abupy_version = __version__\n        self.pick_extend_work()\n        return dict(self.__dict__.items(), _abupy_version=_abupy_version,\n                    _pickle_highest_protocol=self._pickle_highest_protocol,\n                    _python_version=self._python_version,\n                    _is_mac_os=self._is_mac_os)\n\n    def __setstate__(self, state):\n        """"""\xe5\xbc\x80\xe5\xa7\x8b\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapython\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3unpick""""""\n\n        # \xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84pickle\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe6\x94\xaf\xe6\x8c\x81\xe7\x89\x88\xe6\x9c\xac, \xe9\xbb\x98\xe8\xae\xa40\n        pickle_highest_protocol = state.pop(""_pickle_highest_protocol"", 0)\n        # \xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84abupy\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7, \xe9\xbb\x98\xe8\xae\xa40.0.1\n        old_abupy_version = state.pop(""_abupy_version"", \'0.0.1\')\n        # \xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84python\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7, \xe9\xbb\x98\xe8\xae\xa42.7.0\n        python_version = state.pop(""_python_version"", \'2.7.0\')\n        # \xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe5\xb9\xb3\xe5\x8f\xb0\xe4\xbf\xa1\xe6\x81\xaf, \xe9\xbb\x98\xe8\xae\xa4False\xef\xbc\x8c\xe5\x8d\xb3windows\n        platform_version = state.pop(""_is_mac_os"", False)\n\n        if self.skip_abupy_version:\n            # \xe5\xbf\xbd\xe7\x95\xa5abupy\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7\n            _abupy_version = old_abupy_version\n        else:\n            from .. import __version__\n            _abupy_version = __version__\n\n        if self._pickle_highest_protocol != pickle_highest_protocol \\\n                or _abupy_version != old_abupy_version or self._python_version != python_version \\\n                or self._is_mac_os != platform_version:\n            """"""\xe5\x8f\xaa\xe8\xa6\x81\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe6\x89\x93\xe5\x8d\xb0info\xef\xbc\x8c\xe5\x8d\xb3\xe6\x9c\x89\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe8\xaf\xbb\xe5\x8f\x96\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe5\x8f\xaf\xe8\x83\xbd""""""\n            logging.info(\n                ""unpickle {} : ""\n                ""old pickle_highest_protocol={},""\n                ""now pickle_highest_protocol={}, ""\n                ""old abupy_version={}, ""\n                ""now abupy_version={}, ""\n                ""old python_version={}, ""\n                ""now python_version={}, ""\n                ""old platform_version={}, ""\n                ""now platform_version={}, "".format(\n                    self.__class__.__name__,\n                    pickle_highest_protocol, self._pickle_highest_protocol,\n                    old_abupy_version, _abupy_version,\n                    python_version, self._python_version,\n                    platform_version, self._is_mac_os))\n\n        self.__dict__.update(state)\n        # \xe6\xb7\xb7\xe5\x85\xa5\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\xaf\xe8\xa6\x86\xe7\x9b\x96unpick_extend_work\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe6\x9c\x89\xe7\x9a\x84unpick\xe5\xb7\xa5\xe4\xbd\x9c\n        self.unpick_extend_work(state)\n\n    # noinspection PyMethodMayBeStatic\n    def pick_extend_work(self):\n        """"""\xe6\xb7\xb7\xe5\x85\xa5\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\xaf\xe8\xa6\x86\xe7\x9b\x96pick_extend_work\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe6\x9c\x89\xe7\x9a\x84__getstate__\xe5\xb7\xa5\xe4\xbd\x9c""""""\n        pass\n\n    def unpick_extend_work(self, state):\n        """"""\xe6\xb7\xb7\xe5\x85\xa5\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\xaf\xe8\xa6\x86\xe7\x9b\x96unpick_extend_work\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe6\x9c\x89\xe7\x9a\x84__setstate__\xe5\xb7\xa5\xe4\xbd\x9c""""""\n        pass\n\n\nclass AbuParamBase(object):\n    """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe6\x89\x93\xe5\x8d\xb0\xef\xbc\x8c\xe8\xb0\x83\xe8\xaf\x95\xe6\x9f\xa5\xe7\x9c\x8b\xe6\x8e\xa5\xe5\x8f\xa3""""""\n\n    @classmethod\n    def get_params(cls):\n        # init\xe4\xb8\xad\xe7\x89\xb9\xe6\x84\x8f\xe6\x89\xbe\xe4\xba\x86\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe6\x9b\xbf\xe6\x8d\xa2\xe4\xba\x86\xe7\x9a\x84deprecated_original\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8e\x9f\xe5\xa7\x8binit\xe6\x96\xb9\xe6\xb3\x95\n        init = getattr(cls.__init__, \'deprecated_original\', cls.__init__)\n        if init is object.__init__:\n            # \xe9\x9d\x9e\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89init\xe8\xbf\x94\xe5\x9b\x9e\xe7\xa9\xba\n            return list()\n        # \xe8\x8e\xb7\xe5\x8f\x96init\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\xbe\xe5\x90\x8d\n        init_signature = signature(init)\n        # \xe8\xbf\x87\xe6\xbb\xa4self\xe5\x92\x8cfunc(*args), \xe5\x92\x8cfunc(**kwargs)\n        parameters = [p for p in init_signature.parameters.values()\n                      if p.name != \'self\' and p.kind != Parameter.VAR_KEYWORD and p.kind != Parameter.VAR_POSITIONAL]\n        return sorted([p.name for p in parameters])\n\n    def _filter_attr(self, user):\n        """"""\xe6\xa0\xb9\xe6\x8d\xaeuser\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\x89\x80\xe6\x9c\x89\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7key\xe6\x88\x96\xe8\x80\x85\xe7\x94\xa8\xe6\x88\xb7\xe5\xae\x9a\xe4\xb9\x89\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7key""""""\n        if not user:\n            return self.__dict__.keys()\n\n        # \xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89\xe7\x94\xa8\xe6\x88\xb7\xe5\xae\x9a\xe4\xb9\x89\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7key\n        user_attr = list(filter(\n            lambda attr: not attr.startswith(\'_\'), self.__dict__.keys()))\n        return user_attr\n\n    def to_dict(self, user=True):\n        """"""for debug show dict""""""\n        return {attr: self.__dict__[attr] for attr in self._filter_attr(user)}\n\n    def to_series(self, user=True):\n        """"""for notebook debug show series""""""\n        return pd.Series(self.to_dict(user))\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, params""""""\n        class_name = self.__class__.__name__\n        return \'%s(%s)\' % (class_name, self.get_params())\n\n    __repr__ = __str__\n'"
abupy/CoreBu/ABuDeprecated.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    Deprecated\xe8\xad\xa6\xe5\x91\x8a\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nimport warnings\n\nfrom ..CoreBu.ABuFixes import six\n\n\nclass AbuDeprecated(object):\n    """"""\xe6\x94\xaf\xe6\x8c\x81\xe8\xa3\x85\xe9\xa5\xb0\xe7\xb1\xbb\xe6\x88\x96\xe8\x80\x85\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x9c\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe6\x88\x96\xe8\x80\x85\xe6\x96\xb9\xe6\xb3\x95\xe6\x97\xb6\xe8\xad\xa6\xe5\x91\x8aDeprecated\xe4\xbf\xa1\xe6\x81\xaf""""""\n\n    def __init__(self, tip_info=\'\'):\n        # \xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xad\xa6\xe5\x91\x8a\xe4\xbf\xa1\xe6\x81\xaftip_info\n        self.tip_info = tip_info\n\n    def __call__(self, obj):\n        if isinstance(obj, six.class_types):\n            # \xe9\x92\x88\xe5\xaf\xb9\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\n            return self._decorate_class(obj)\n        else:\n            # \xe9\x92\x88\xe5\xaf\xb9\xe6\x96\xb9\xe6\xb3\x95\xe8\xa3\x85\xe9\xa5\xb0\n            return self._decorate_fun(obj)\n\n    def _decorate_class(self, cls):\n        """"""\xe5\xae\x9e\xe7\x8e\xb0\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe8\xad\xa6\xe5\x91\x8aDeprecated\xe4\xbf\xa1\xe6\x81\xaf""""""\n\n        msg = ""class {} is deprecated"".format(cls.__name__)\n        if self.tip_info:\n            msg += ""; {}"".format(self.tip_info)\n        # \xe5\x8f\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\xa7\x8binit\n        init = cls.__init__\n\n        def wrapped(*args, **kwargs):\n            warnings.warn(msg, category=DeprecationWarning)\n            return init(*args, **kwargs)\n\n        cls.__init__ = wrapped\n\n        wrapped.__name__ = \'__init__\'\n        wrapped.__doc__ = self._update_doc(init.__doc__)\n        # init\xe6\x88\x90\xe4\xb8\xbadeprecated_original\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\xb1\x9e\xe6\x80\xa7\xe5\x90\x8d\xe5\xad\x97\xef\xbc\x8c\xe5\x9c\xa8\xe5\x85\xb6\xe5\xae\x83\xe5\x9c\xb0\xe6\x96\xb9\xef\xbc\x8c\xe5\xa6\x82AbuParamBase\xe4\xbc\x9a\xe5\xaf\xbb\xe6\x89\xbe\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x96\xb9\xe6\xb3\x95\xe6\x89\xbe\xe5\xae\x83\n        wrapped.deprecated_original = init\n\n        return cls\n\n    def _decorate_fun(self, fun):\n        """"""\xe5\xae\x9e\xe7\x8e\xb0\xe6\x96\xb9\xe6\xb3\x95\xe8\xa3\x85\xe9\xa5\xb0\xe8\xad\xa6\xe5\x91\x8aDeprecated\xe4\xbf\xa1\xe6\x81\xaf""""""\n\n        msg = ""func {} is deprecated"".format(fun.__name__)\n        if self.tip_info:\n            msg += ""; {}"".format(self.tip_info)\n\n        def wrapped(*args, **kwargs):\n            warnings.warn(msg, category=DeprecationWarning)\n            return fun(*args, **kwargs)\n\n        # \xe6\x9b\xb4\xe6\x96\xb0func\xe5\x8f\x8a\xe6\x96\x87\xe6\xa1\xa3\xe4\xbf\xa1\xe6\x81\xaf\n        wrapped.__name__ = fun.__name__\n        wrapped.__dict__ = fun.__dict__\n        wrapped.__doc__ = self._update_doc(fun.__doc__)\n\n        return wrapped\n\n    def _update_doc(self, func_doc):\n        """"""\xe6\x9b\xb4\xe6\x96\xb0\xe6\x96\x87\xe6\xa1\xa3\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe6\x8a\x8a\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe6\x96\x87\xe6\xa1\xa3\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x88\xe5\xb9\xb6\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96, \xe5\x8d\xb3\xe7\xac\xac\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\xbadeprecated_doc(Deprecated: tip_info)\xef\xbc\x8c\xe4\xb8\x8b\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8e\x9f\xe5\xa7\x8bfunc_doc""""""\n        deprecated_doc = ""Deprecated""\n        if self.tip_info:\n            """"""\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89tip format tip""""""\n            deprecated_doc = ""{}: {}"".format(deprecated_doc, self.tip_info)\n        if func_doc:\n            # \xe6\x8a\x8a\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe6\x96\x87\xe6\xa1\xa3\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x88\xe5\xb9\xb6\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96, \xe5\x8d\xb3\xe7\xac\xac\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\xbadeprecated_doc\xef\xbc\x8c\xe4\xb8\x8b\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8e\x9f\xe5\xa7\x8bfunc_doc\n            func_doc = ""{}\\n{}"".format(deprecated_doc, func_doc)\n        return func_doc\n'"
abupy/CoreBu/ABuEnv.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x85\xa8\xe5\xb1\x80\xe7\x8e\xaf\xe5\xa2\x83\xe9\x85\x8d\xe7\xbd\xae\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport os\nimport re\nimport platform\nimport sys\nimport warnings\nfrom enum import Enum\nfrom os import path\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81windows\xe5\x92\x8cmac os\xef\xbc\x8c\xe4\xb8\x8d\xe6\x98\xafwindows\xe5\xb0\xb1\xe6\x98\xafmac os\xef\xbc\x88\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8Darwin\xe5\x81\x9a\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x89\xef\xbc\x8clinux\xe4\xb8\x8b\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x8c\xe6\x95\xb4\xe6\xb5\x8b\xe8\xaf\x95""""""\ng_is_mac_os = platform.system().lower().find(""windows"") < 0 and sys.platform != ""win32""\n""""""python\xe7\x89\x88\xe6\x9c\xac\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6python3""""""\ng_is_py3 = six.PY3\n""""""ipython\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6ipython\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83""""""\ng_is_ipython = True\n""""""\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8bpid\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x97\xb6\xe7\x94\xb1\xe4\xba\x8eABuEnvProcess\xe4\xbc\x9a\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe6\xb3\xa8\xe5\x86\x8c\xe4\xba\x86\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x94\xa8g_main_pid\xe6\x9d\xa5\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b""""""\ng_main_pid = os.getpid()\n\ntry:\n    # noinspection PyUnresolvedReferences\n    __IPYTHON__\nexcept NameError:\n    g_is_ipython = False\n\n# noinspection PyBroadException\ntry:\n    # noinspection PyUnresolvedReferences\n    import psutil\n\n    """"""\xe6\x9c\x89psutil\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8psutil.cpu_count\xe8\xae\xa1\xe7\xae\x97cpu\xe4\xb8\xaa\xe6\x95\xb0""""""\n    g_cpu_cnt = psutil.cpu_count(logical=True) * 1\nexcept ImportError:\n    if g_is_py3:\n        # noinspection PyUnresolvedReferences\n        g_cpu_cnt = os.cpu_count()\n    else:\n        import multiprocessing as mp\n\n        g_cpu_cnt = mp.cpu_count()\nexcept:\n    # \xe8\x8e\xb7\xe5\x8f\x96cpu\xe4\xb8\xaa\xe6\x95\xb0\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa44\xe4\xb8\xaa\n    g_cpu_cnt = 4\n\n""""""pandas\xe5\xbf\xbd\xe7\x95\xa5\xe8\xb5\x8b\xe5\x80\xbc\xe8\xad\xa6\xe5\x91\x8a""""""\npd.options.mode.chained_assignment = None\n\n""""""numpy\xef\xbc\x8cpandas\xe6\x98\xbe\xe7\xa4\xba\xe6\x8e\xa7\xe5\x88\xb6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\xbc\x80\xe5\x90\xaf""""""\ng_display_control = True\nif g_display_control:\n    # pandas DataFrame\xe8\xa1\xa8\xe6\xa0\xbc\xe6\x9c\x80\xe5\xa4\xa7\xe6\x98\xbe\xe7\xa4\xba\xe8\xa1\x8c\xe6\x95\xb0\n    pd.options.display.max_rows = 20\n    # pandas DataFrame\xe8\xa1\xa8\xe6\xa0\xbc\xe6\x9c\x80\xe5\xa4\xa7\xe6\x98\xbe\xe7\xa4\xba\xe5\x88\x97\xe6\x95\xb0\n    pd.options.display.max_columns = 20\n    # pandas\xe7\xb2\xbe\xe5\xba\xa6\xe6\xb5\xae\xe7\x82\xb9\xe6\x95\xb0\xe6\x98\xbe\xe7\xa4\xba4\xe4\xbd\x8d\n    pd.options.display.precision = 4\n    # numpy\xe7\xb2\xbe\xe5\xba\xa6\xe6\xb5\xae\xe7\x82\xb9\xe6\x95\xb0\xe6\x98\xbe\xe7\xa4\xba4\xe4\xbd\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa7\x91\xe5\xad\xa6\xe8\xae\xa1\xe6\x95\xb0\xe6\xb3\x95\n    np.set_printoptions(precision=4, suppress=True)\n\n""""""\xe5\xbf\xbd\xe7\x95\xa5\xe6\x89\x80\xe6\x9c\x89\xe8\xad\xa6\xe5\x91\x8a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xad""""""\ng_ignore_all_warnings = False\n""""""\xe5\xbf\xbd\xe7\x95\xa5\xe5\xba\x93\xe8\xad\xa6\xe5\x91\x8a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x89\x93\xe5\xbc\x80""""""\ng_ignore_lib_warnings = True\nif g_ignore_lib_warnings:\n    # noinspection PyBroadException\n    try:\n        import matplotlib\n\n        matplotlib.warnings.filterwarnings(\'ignore\')\n        matplotlib.warnings.simplefilter(\'ignore\')\n        import sklearn\n\n        sklearn.warnings.filterwarnings(\'ignore\')\n        sklearn.warnings.simplefilter(\'ignore\')\n    except:\n        pass\nif g_ignore_all_warnings:\n    warnings.filterwarnings(\'ignore\')\n    warnings.simplefilter(\'ignore\')\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a \xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xae\xe5\xbd\x95 start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n""""""\n    abu \xe6\x96\x87\xe4\xbb\xb6\xe7\x9b\xae\xe5\xbd\x95\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\n    windows\xe5\xba\x94\xe8\xaf\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa3\x81\xe7\x9b\x98\xe7\xa9\xba\xe9\x97\xb4\xe6\xaf\x94\xe8\xbe\x83\xe5\x85\x85\xe8\xb6\xb3\xe7\x9a\x84\xe7\x9b\x98\xe7\xac\xa6\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xef\xbc\x9ad://, e:/, f:///\n\n    eg:\n    root_drive = \'d://\'\n    root_drive = \'e://\'\n    root_drive = \'f://\'\n""""""\n\n\ndef str_is_cn(a_str):\n    """"""\n        str_is_cn\xe5\x8e\x9f\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae: UtilBu.ABuStrUtil\n        \xe4\xb8\xba\xe4\xbf\x9d\xe6\x8c\x81env\xe4\xb8\xba\xe6\x9c\x80\xe5\x88\x9d\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\x8d\xe5\xbc\x95\xe5\x85\xa5\xe5\x85\xb6\xe5\xae\x83\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\xb4\xe6\x97\xb6\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xbd\xbf\xe7\x94\xa8\n        \xe9\x80\x9a\xe8\xbf\x87\xe6\xad\xa3\xe5\x88\x99\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe5\x88\xa4\xe6\x96\xad\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x90\xab\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\n        \xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6search\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xbaNone, \xe4\xb8\x8d\xe8\xbf\x94\xe5\x9b\x9e\xe5\x85\xb7\xe4\xbd\x93\xe5\x8c\xb9\xe9\x85\x8d\xe7\xbb\x93\xe6\x9e\x9c\n        eg:\n            K_CN_RE.search(a_str)(\'abc\') is None\n            return False\n            K_CN_RE.search(a_str)(\'abc\xe5\x93\x88\xe5\x93\x88\') -> <_sre.SRE_Match object; span=(3, 5), match=\'\xe5\x93\x88\xe5\x93\x88\'>\n            return True\n    """"""\n\n    def to_unicode(text, encoding=None, errors=\'strict\'):\n        """"""\n        to_unicode\xe5\x8e\x9f\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae: UtilBu.ABuStrUtil\xef\xbc\x8c\xe4\xb8\xba\xe4\xbf\x9d\xe6\x8c\x81env\xe4\xb8\xba\xe6\x9c\x80\xe5\x88\x9d\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\x8d\xe5\xbc\x95\xe5\x85\xa5\xe5\x85\xb6\xe5\xae\x83\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\xb4\xe6\x97\xb6\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xbd\xbf\xe7\x94\xa8\n        """"""\n        if isinstance(text, six.text_type):\n            return text\n        if not isinstance(text, (bytes, six.text_type)):\n            raise TypeError(\'to_unicode must receive a bytes, str or unicode \'\n                            \'object, got %s\' % type(text).__name__)\n        if encoding is None:\n            encoding = \'utf-8\'\n        try:\n            decode_text = text.decode(encoding, errors)\n        except:\n            # \xe5\x88\x87\xe6\x8d\xa2\xe8\xaf\x95\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa1\x8c\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8a\xe5\xb1\x82\xe5\xa4\x84\xe7\x90\x86\n            decode_text = text.decode(\'gbk\' if encoding == \'utf-8\' else \'utf-8\', errors)\n        return decode_text\n\n    cn_re = re.compile(u\'[\\u4e00-\\u9fa5]+\')\n    try:\n        is_cn_path = cn_re.search(to_unicode(a_str)) is not None\n    except:\n        # \xe9\x9d\x9egbk\xef\xbc\x8cutf8\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe7\xbc\x96\xe7\xa0\x81\xe4\xbc\x9a\xe8\xbf\x9b\xe5\x85\xa5\xe8\xbf\x99\xe9\x87\x8c\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\n        is_cn_path = True\n    return is_cn_path\n\n\nroot_drive = path.expanduser(\'~\')\n# root_drive = os.path.join(root_drive, u\'\xe6\xb5\x8b\xe8\xaf\x95\')\n# noinspection PyTypeChecker\n\nif str_is_cn(root_drive):\n    """"""\n        \xe5\xa6\x82\xe6\x9e\x9c\xe7\x94\xa8\xe6\x88\xb7\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xb8\xad\xe6\x96\x87\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe6\x8b\xa9\xe6\x94\xbe\xe5\xbc\x83\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xac\xe5\x85\xb1\xe7\xbc\x93\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9,\n        windows\xe4\xb8\x8b\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe6\x96\x87\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe4\xbc\x9a\xe5\xaf\xbc\xe8\x87\xb4pandas\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe5\x86\x99\xe5\x85\xa5\n        csv\xef\xbc\x8chdf5\xe5\x87\xba\xe7\x8e\xb0\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x80\xe6\x97\xa6\xe5\x8f\x91\xe7\x8e\xb0\xe7\x94\xa8\xe6\x88\xb7\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\xba\xe4\xb8\xad\xe6\x96\x87\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe6\x94\xb9\xe5\x8f\x98\n        \xe7\xbc\x93\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\xbaabupy\xe6\xa0\xb9\xe4\xbb\xa3\xe7\xa0\x81\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n    abupy_source_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(str(__file__))), os.path.pardir))\n    # \xe6\x94\xb9\xe5\x8f\x98\xe7\xbc\x93\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\xbaabupy\xe6\xa0\xb9\xe4\xbb\xa3\xe7\xa0\x81\xe8\xb7\xaf\xe5\xbe\x84\n    root_drive = abupy_source_dir\n    print(\'root_drive is change to {}\'.format(root_drive))\n\n""""""abu\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xbb\xe7\x9b\xae\xe5\xbd\x95\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9""""""\ng_project_root = path.join(root_drive, \'abu\')\n""""""abu\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9 ~/abu/data""""""\ng_project_data_dir = path.join(g_project_root, \'data\')\n""""""abu\xe6\x97\xa5\xe5\xbf\x97\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9 ~/abu/log""""""\ng_project_log_dir = path.join(g_project_root, \'log\')\n""""""abu\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9 ~/abu/db""""""\ng_project_db_dir = path.join(g_project_root, \'db\')\n""""""abu\xe7\xbc\x93\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9 ~/abu/cache""""""\ng_project_cache_dir = path.join(g_project_data_dir, \'cache\')\n""""""abu\xe9\xa1\xb9\xe7\x9b\xae\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xbb\xe6\x96\x87\xe4\xbb\xb6\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x8c\xe5\x8d\xb3\xe9\xa1\xb9\xe7\x9b\xae\xe4\xb8\xad\xe7\x9a\x84RomDataBu\xe4\xbd\x8d\xe7\xbd\xae""""""\ng_project_rom_data_dir = path.join(path.dirname(path.abspath(path.realpath(__file__))), \'../RomDataBu\')\n\n""""""abu\xe6\x97\xa5\xe5\xbf\x97\xe6\x96\x87\xe4\xbb\xb6 ~/abu/log/info.log""""""\ng_project_log_info = path.join(g_project_log_dir, \'info.log\')\n\n""""""hdf5\xe5\x81\x9a\xe4\xb8\xba\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84""""""\ng_project_kl_df_data = path.join(g_project_data_dir, \'df_kl.h5\')\n\n_p_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.path.pardir))\n\n# \xe4\xb8\x8d\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8hdf5\xe5\x81\x9a\xe4\xb8\xba\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x8c\xe6\x9c\x89windows\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84hdf5\xe7\x8e\xaf\xe5\xa2\x83\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98\n""""""\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb9\xa6\xe4\xb8\xad\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8cRomDataBu/csv\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x96\x87\xe4\xbb\xb6""""""\n# g_project_kl_df_data_example = os.path.join(_p_dir, \'RomDataBu/df_kl.h5\')\ng_project_kl_df_data_example = os.path.join(_p_dir, \'RomDataBu/csv\')\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a \xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xae\xe5\xbd\x95 end \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n\n#  \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90 start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a CrawlBu end \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n""""""\nchrome \xe9\xa9\xb1\xe5\x8a\xa8\n""""""\ng_crawl_chrome_driver = None\n\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a CrawlBu start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n\n# TODO \xe7\xbc\xa9\xe7\x9f\xad E_MARKET_SOURCE_bd\xef\xbc\x8d>BD\nclass EMarketSourceType(Enum):\n    """"""\n        \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe5\xbd\x93\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8d\xe5\x8f\xaf\xe9\x9d\xa0\xe6\x97\xb6\xef\xbc\x8c\xe5\x8f\xaf\xe5\xb0\x9d\xe8\xaf\x95\xe5\x88\x87\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x9b\xb4\xe5\x8f\xaf\xe8\xbf\x9e\xe6\x8e\xa5\xe7\xa7\x81\xe6\x9c\x89\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n    """"""\n    """"""\xe7\x99\xbe\xe5\xba\xa6 a\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1""""""\n    E_MARKET_SOURCE_bd = 0\n    """"""\xe8\x85\xbe\xe8\xae\xaf a\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1""""""\n    E_MARKET_SOURCE_tx = 1\n    """"""\xe7\xbd\x91\xe6\x98\x93 a\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1""""""\n    E_MARKET_SOURCE_nt = 2\n    """"""\xe6\x96\xb0\xe6\xb5\xaa \xe7\xbe\x8e\xe8\x82\xa1""""""\n    E_MARKET_SOURCE_sn_us = 3\n\n    """"""\xe6\x96\xb0\xe6\xb5\xaa \xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7""""""\n    E_MARKET_SOURCE_sn_futures = 100\n    """"""\xe6\x96\xb0\xe6\xb5\xaa \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7""""""\n    E_MARKET_SOURCE_sn_futures_gb = 101\n\n    """"""\xe7\x81\xab\xe5\xb8\x81 \xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81""""""\n    E_MARKET_SOURCE_hb_tc = 200\n\n\n""""""\xe9\xbb\x98\xe8\xae\xa4\xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe4\xbd\xbf\xe7\x94\xa8E_MARKET_SOURCE_bd""""""\ng_market_source = EMarketSourceType.E_MARKET_SOURCE_bd\n\n""""""\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\xe7\xa7\x81\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe7\xb1\xbb\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None""""""\ng_private_data_source = None\n\n\n# TODO \xe7\xbc\xa9\xe7\x9f\xad E_MARKET_TARGET_US\xef\xbc\x8d>US\nclass EMarketTargetType(Enum):\n    """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe5\x93\x81\xe7\xa7\x8d\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\n        eg. \xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba, A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba, \xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba, \xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba,\n            \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xe5\xb8\x82\xe5\x9c\xba, TC\xe5\xb8\x81\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xad\x89\n    """"""\n    """"""\xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba""""""\n    E_MARKET_TARGET_US = \'us\'\n    """"""A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba""""""\n    E_MARKET_TARGET_CN = \'hs\'\n    """"""\xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba""""""\n    E_MARKET_TARGET_HK = \'hk\'\n\n    """"""\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba""""""\n    E_MARKET_TARGET_FUTURES_CN = \'futures_cn\'\n    """"""\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba""""""\n    E_MARKET_TARGET_FUTURES_GLOBAL = \'futures_global\'\n    """"""\xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xe5\xb8\x82\xe5\x9c\xba""""""\n    E_MARKET_TARGET_OPTIONS_US = \'options_us\'\n\n    """"""TC\xe5\xb8\x81\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xad\x89\xef\xbc\x89""""""\n    E_MARKET_TARGET_TC = \'tc\'\n\n\nclass EMarketSubType(Enum):\n    """"""\n        \xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xef\xbc\x89\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xae\x9a\xe4\xb9\x89\n    """"""\n\n    """"""\xe7\xbe\x8e\xe8\x82\xa1\xe7\xba\xbd\xe4\xba\xa4\xe6\x89\x80NYSE""""""\n    US_N = \'NYSE\'\n    """"""\xe7\xbe\x8e\xe8\x82\xa1\xe7\xba\xb3\xe6\x96\xaf\xe8\xbe\xbe\xe5\x85\x8bNASDAQ""""""\n    US_OQ = \'NASDAQ\'\n    """"""\xe7\xbe\x8e\xe8\x82\xa1\xe7\xb2\x89\xe5\x8d\x95\xe5\xb8\x82\xe5\x9c\xba""""""\n    US_PINK = \'PINK\'\n    """"""\xe7\xbe\x8e\xe8\x82\xa1OTCMKTS""""""\n    US_OTC = \'OTCMKTS\'\n    """"""\xe7\xbe\x8e\xe5\x9b\xbd\xe8\xaf\x81\xe5\x88\xb8\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80""""""\n    US_AMEX = \'AMEX\'\n    """"""\xe6\x9c\xaa\xe4\xb8\x8a\xe5\xb8\x82""""""\n    US_PREIPO = \'PREIPO\'\n\n    """"""\xe6\xb8\xaf\xe8\x82\xa1hk""""""\n    HK = \'hk\'\n\n    """"""\xe4\xb8\x8a\xe8\xaf\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80sh""""""\n    SH = \'sh\'\n    """"""\xe6\xb7\xb1\xe5\x9c\xb3\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80sz""""""\n    SZ = \'sz\'\n\n    """"""\xe5\xa4\xa7\xe8\xbf\x9e\xe5\x95\x86\xe5\x93\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80DCE\'""""""\n    DCE = \'DCE\'\n    """"""\xe9\x83\x91\xe5\xb7\x9e\xe5\x95\x86\xe5\x93\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80ZZCE\'""""""\n    ZZCE = \'ZZCE\'\n    """"""\xe4\xb8\x8a\xe6\xb5\xb7\xe6\x9c\x9f\xe8\xb4\xa7\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80SHFE\'""""""\n    SHFE = \'SHFE\'\n\n    """"""\xe4\xbc\xa6\xe6\x95\xa6\xe9\x87\x91\xe5\xb1\x9e\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80""""""\n    LME = \'LME\'\n    """"""\xe8\x8a\x9d\xe5\x8a\xa0\xe5\x93\xa5\xe5\x95\x86\xe5\x93\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80""""""\n    CBOT = \'CBOT\'\n    """"""\xe7\xba\xbd\xe7\xba\xa6\xe5\x95\x86\xe5\x93\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80""""""\n    NYMEX = \'NYMEX\'\n\n    """"""\xe5\xb8\x81\xe7\xb1\xbb\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xbaCOIN\'""""""\n    COIN = \'COIN\'\n\n\n""""""\xe5\x88\x87\xe6\x8d\xa2\xe7\x9b\xae\xe6\xa0\x87\xe6\x93\x8d\xe4\xbd\x9c\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa7\xef\xbc\x8c\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xad\x89\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba""""""\ng_market_target = EMarketTargetType.E_MARKET_TARGET_US\n\n""""""\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad1\xe5\xb9\xb4\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4250\xe6\x97\xa5""""""\ng_market_trade_year = 250\nif g_market_target == EMarketTargetType.E_MARKET_TARGET_US:\n    # \xe7\xbe\x8e\xe8\x82\xa1252\xe5\xa4\xa9\n    g_market_trade_year = 252\nif g_market_target == EMarketTargetType.E_MARKET_TARGET_TC:\n    # \xe9\xbb\x98\xe8\xae\xa4\xe8\xae\xbe\xe7\xbd\xae\xe5\xb8\x81\xe7\xb1\xbb\xe6\xaf\x8f\xe5\xa4\xa9\xe9\x83\xbd\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xba\xa4\xe6\x98\x93\n    g_market_trade_year = 365\n\n\n# TODO EMarketDataSplitMode\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0\xe5\xb8\x82\xe5\x9c\xba\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9b\xb8\xe5\x85\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\nclass EMarketDataSplitMode(Enum):\n    """"""\n        ABuSymbolPd\xe4\xb8\xad\xe8\xaf\xb7\xe6\xb1\x82\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x85\xb3\xe4\xba\x8e\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8e\xe5\x9f\xba\xe5\x87\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe9\xbd\x90\xe5\x88\x87\xe5\x89\xb2\n    """"""\n    """"""\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8f\x96\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89data\xef\xbc\x8c\xe4\xb8\x8d\xe5\x88\x87\xe5\x89\xb2\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa4\x96\xe9\x83\xa8\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\x87\xe5\x89\xb2""""""\n    E_DATA_SPLIT_UNDO = 0\n    """"""\xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaestart\xef\xbc\x8cend\xe5\x8f\x96\xe5\x88\x87\xe5\x89\xb2data""""""\n    E_DATA_SPLIT_SE = 1\n\n\n# TODO \xe7\xbc\xa9\xe7\x9f\xad E_DATA_FETCH_NORMAL\xef\xbc\x8d>NORMAL\nclass EMarketDataFetchMode(Enum):\n    """"""\n        \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n    """"""\n    """"""\xe6\x99\xae\xe9\x80\x9a\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\xb0\xbd\xe9\x87\x8f\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe6\xbb\xa1\xe8\xb6\xb3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\xb7\xe6\xb1\x82""""""\n    E_DATA_FETCH_NORMAL = 0\n    """"""\xe5\xbc\xba\xe5\x88\xb6\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe6\xbb\xa1\xe8\xb6\xb3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eNone""""""\n    E_DATA_FETCH_FORCE_LOCAL = 1\n    """"""\xe5\xbc\xba\xe5\x88\xb6\xe4\xbb\x8e\xe7\xbd\x91\xe7\xbb\x9c\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x8d\xe7\xae\xa1\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe6\xbb\xa1\xe8\xb6\xb3""""""\n    E_DATA_FETCH_FORCE_NET = 2\n\n\n""""""\n    \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9d\x97\xe8\xae\xbe\xe7\xbd\xaeg_data_fetch_mode\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaE_DATA_FETCH_NORMAL\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe5\xbb\xba\xe8\xae\xae\n    \xe4\xb8\xbaE_DATA_FETCH_FORCE_LOCAL\xef\xbc\x8c\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\x8f\x90\xe5\x89\x8d\xe4\xbd\xbf\xe7\x94\xa8ABu.run_kl_update\xe5\xae\x8c\xe6\x88\x90updtae\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\n    \xe5\x8e\x9f\xe5\x9b\xa0\xef\xbc\x9a\n    1. mac os 10.9 later \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b \xef\xbc\x8b numpy\xe6\x9c\x89\xe7\xb3\xbb\xe7\xbb\x9fbug\n    2. hdf5\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xae\xb9\xe6\x98\x93\xe5\x86\x99\xe5\x9d\x8f\xe6\x96\x87\xe4\xbb\xb6\n    3. \xe6\x89\xa7\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe6\x9b\xb4\xe9\xab\x98\n    4. \xe5\x88\x86\xe5\xbc\x80\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8e\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xb5\x81\xe7\xa8\x8b\xef\xbc\x8c\xe6\x9b\xb4\xe5\xae\xb9\xe6\x98\x93\xe9\x97\xae\xe9\xa2\x98\xe5\x88\x86\xe6\x9e\x90\n""""""\ng_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_NORMAL\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xafipython example \xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\n_g_enable_example_env_ipython = False\n\n\ndef enable_example_env_ipython(show_log=True, check_cn=True):\n    """"""\n    \xe5\x8f\xaa\xe4\xb8\xba\xe5\x9c\xa8ipython example \xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\xad\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x8e\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\xb3\xe8\xaf\xbb\xe5\x8f\x96RomDataBu/csv\xe4\xb8\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n\n    \xe5\x88\x9d\xe5\xa7\x8b\xe5\x86\x85\xe7\xbd\xae\xe5\x9c\xa8RomDataBu/csv.zip\xe4\xb8\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\xaa\xe6\x9c\x89zip\xe5\x8e\x8b\xe7\xbc\xa9\xe5\x8c\x85\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbagit\xe4\xb8\x8a\xe9\x9d\xa2\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe6\x9c\x80\xe5\xa5\xbd\xe4\xb8\x8d\xe8\xa6\x81\xe8\xb6\x85\xe8\xbf\x8750m\xef\xbc\x8c\n    \xe5\x86\x85\xe7\xbd\xae\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8c\x85\xe6\x8b\xac\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa7\xef\xbc\x8c\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x9c\xa8csv.zip\xe4\xb8\xad\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe8\xa7\xa3\xe5\x8e\x8bzip\n    \xe4\xb9\x8b\xe5\x90\x8e\xe5\xb0\x86\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xbacsv(\xe8\x80\x81\xe7\x89\x88\xe6\x9c\xac\xe9\x83\xbd\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8hdf5\xef\xbc\x8c\xe4\xbd\x86windows\xe7\x94\xa8\xe6\x88\xb7\xe6\x9c\x89\xe4\xba\x9bhdf5\xe7\x8e\xaf\xe5\xa2\x83\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98)\n    show_log: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbaenable example env will only read RomDataBu/df_kl.h5\n    check_cn: \xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8b\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n\n    if not os.path.exists(g_project_kl_df_data_example):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x98\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\xa3\xe5\x8e\x8b\xef\xbc\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe8\xa7\xa3\xe5\x8e\x8bcsv.zip\n        data_example_zip = os.path.join(_p_dir, \'RomDataBu/csv.zip\')\n        try:\n            from zipfile import ZipFile\n            zip_csv = ZipFile(data_example_zip, \'r\')\n            unzip_dir = os.path.join(_p_dir, \'RomDataBu/\')\n            for csv in zip_csv.namelist():\n                zip_csv.extract(csv, unzip_dir)\n            zip_csv.close()\n        except Exception as e:\n            # \xe8\xa7\xa3\xe5\x8e\x8b\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xaezip\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x8c\xe5\xb0\xb1\xe4\xb8\x8d\xe5\xbc\x80\xe5\x90\xaf\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xba\x86\n            print(\'example env failed! e={}\'.format(e))\n            return\n\n    global _g_enable_example_env_ipython, g_data_fetch_mode\n    _g_enable_example_env_ipython = True\n    g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n    if check_cn:\n        try:\n            from ..UtilBu.ABuStrUtil import str_is_cn, to_unicode\n            if str_is_cn(str(__file__)):\n                # \xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xe8\xb7\xaf\xe5\xbe\x84\xe4\xb8\xad\xe5\x90\xab\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\xef\xbc\x8c\xe4\xb8\xa5\xe9\x87\x8d\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\xb0\x86\xe5\x87\xba\xe9\x94\x99\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe6\x96\x87\xe8\xad\xa6\xe5\x91\x8a\n                msg = u\'\xe4\xb8\xa5\xe9\x87\x8d\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x81\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8cabu\xe5\xb0\x86\xe6\x97\xa0\xe6\xb3\x95\xe6\xad\xa3\xe5\xb8\xb8\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x81\xe8\xaf\xb7\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe6\x96\x87\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\xe7\xa7\xb0, \xe5\xbd\x93\xe5\x89\x8d\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\xba{}\'.format(\n                    to_unicode(str(__file__)))\n                logging.info(msg)\n                return\n        except:\n            # \xe6\xb2\xa1\xe6\x9c\x89\xe5\xbf\x85\xe8\xa6\x81\xe6\x98\xbe\xe7\xa4\xbalog\xe7\xbb\x99\xe7\x94\xa8\xe6\x88\xb7\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x85\xb6\xe5\xae\x83\xe7\xbc\x96\xe7\xa0\x81\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe8\xb7\xaf\xe5\xbe\x84\xe4\xbc\x9a\xe8\xbf\x9b\xe5\x88\xb0\xe8\xbf\x99\xe9\x87\x8c\n            # logging.exception(e)\n            msg = \'error\xef\xbc\x81non English characters in the current running environment,abu will not work properly!\'\n            logging.info(msg)\n    if show_log:\n        logging.info(\'enable example env will only read RomDataBu/csv\')\n\n\ndef disable_example_env_ipython(show_log=True):\n    """"""\n    \xe5\x8f\xaa\xe4\xb8\xba\xe5\x9c\xa8ipython example \xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\xad\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x8e\xe4\xb9\xa6\xe4\xb8\xad\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe3\x80\x82\xef\xbc\x8c\xe5\x8d\xb3\xe8\xaf\xbb\xe5\x8f\x96RomDataBu/df_kl.h5\xe4\xb8\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n    show_log: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbadisable example env\n    """"""\n    global _g_enable_example_env_ipython, g_data_fetch_mode\n    _g_enable_example_env_ipython = False\n    g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_NORMAL\n    if show_log:\n        logging.info(\'disable example env\')\n\n\nclass EDataCacheType(Enum):\n    """"""\n        \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x93\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8b\n    """"""\n\n    """"""\xe8\xaf\xbb\xe5\x8f\x96\xe5\x8f\x8a\xe5\x86\x99\xe5\x85\xa5\xe6\x9c\x80\xe5\xbf\xab \xe4\xbd\x86\xe9\x9d\x9e\xe5\x9b\xba\xe6\x80\x81\xe7\xa1\xac\xe7\x9b\x98\xe5\x86\x99\xe5\x85\xa5\xe6\x85\xa2\xef\xbc\x8c\xe5\xad\x98\xe8\xb4\xae\xe7\xa9\xba\xe9\x97\xb4\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7""""""\n    E_DATA_CACHE_HDF5 = 0\n    """"""\xe8\xaf\xbb\xe5\x8f\x96\xe5\x8f\x8a\xe5\x86\x99\xe5\x85\xa5\xe6\x9c\x80\xe6\x85\xa2 \xe4\xbd\x86\xe9\x9d\x9e\xe5\x9b\xba\xe6\x80\x81\xe7\xa1\xac\xe7\x9b\x98\xe5\x86\x99\xe9\x80\x9f\xe5\xba\xa6\xe8\xbf\x98\xe5\x8f\xaf\xe4\xbb\xa5\xef\xbc\x8c\xe5\xad\x98\xe8\xb4\xae\xe7\xa9\xba\xe9\x97\xb4\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x8f""""""\n    E_DATA_CACHE_CSV = 1\n    """"""\xe9\x80\x82\xe5\x90\x88\xe5\x88\x86\xe5\xb8\x83\xe5\xbc\x8f\xe6\x89\xa9\xe5\xb1\x95\xef\xbc\x8c\xe5\xad\x98\xe8\xb4\xae\xe7\xa9\xba\xe9\x97\xb4\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7""""""\n    E_DATA_CACHE_MONGODB = 2\n\n\n# """"""\xe9\xbb\x98\xe8\xae\xa4\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x93\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xbaHDF5\xef\xbc\x8c\xe5\x8d\x95\xe6\x9c\xba\xe5\x9b\xba\xe6\x80\x81\xe7\xa1\xac\xe7\x9b\x98\xe6\x8e\xa8\xe8\x8d\x90HDF5\xef\xbc\x8c\xe9\x9d\x9e\xe5\x9b\xba\xe6\x80\x81\xe7\xa1\xac\xe7\x9b\x98\xe4\xbd\xbf\xe7\x94\xa8CSV\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe9\x87\x8f\xe5\xa4\xa7\xe5\x90\x8ehdf5\xe5\x86\x99\xe5\x85\xa5\xe9\x80\x9f\xe5\xba\xa6\xe6\x97\xa0\xe6\xb3\x95\xe6\x8e\xa5\xe5\x8f\x97""""""\n# g_data_cache_type = EDataCacheType.E_DATA_CACHE_HDF5\n""""""\xe5\xaf\xb9\xe5\xa4\x96\xe7\x89\x88\xe6\x9c\xac\xe7\x94\xb1\xe4\xba\x8e\xe7\x94\xa8\xe6\x88\xb7\xe7\x94\xb5\xe8\x84\x91\xe6\x80\xa7\xe8\x83\xbd\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe7\xa9\xba\xe9\x97\xb4\xe4\xb8\x94winodws\xe7\x94\xa8\xe6\x88\xb7\xef\xbc\x8cpython2\xe7\x94\xa8\xe6\x88\xb7\xe5\xa4\x9a\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x9b\xb4\xe6\x94\xb9\xe9\xbb\x98\xe8\xae\xa4\xe5\xad\x98\xe5\x82\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xbacsv""""""\ng_data_cache_type = EDataCacheType.E_DATA_CACHE_CSV\n\n""""""csv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\x9a\x84\xe5\xad\x98\xe5\x82\xa8\xe8\xb7\xaf\xe5\xbe\x84""""""\ng_project_kl_df_data_csv = path.join(g_project_data_dir, \'csv\')\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90 end   \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xe7\x89\xb9\xe5\xbe\x81\xe5\xbf\xab\xe7\x85\xa7\xe5\x88\x87\xe5\x89\xb2 start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe7\x89\xb9\xe5\xbe\x81\xe6\x94\xb6\xe9\x9b\x86, \xe5\xbc\x80\xe5\x90\xaf\xe5\x90\x8e\xe9\x80\x9f\xe5\xba\xa6\xe4\xbc\x9a\xe6\x85\xa2\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ml_feature = False\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe8\xae\xa2\xe5\x8d\x95\xe5\x89\x8d\xe7\x94\x9f\xe6\x88\x90k\xe7\xba\xbf\xe5\x9b\xbe\xe5\xbf\xab\xe7\x85\xa7\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_take_kl_snapshot = False\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe9\x80\x89\xe8\x82\xa1\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_train_test_split = False\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe9\x80\x89\xe8\x82\xa1\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xae\x8c\xe6\x88\x90\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_last_split_test = False\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe9\x80\x89\xe8\x82\xa1\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xae\x8c\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_last_split_train = False\n\n""""""\xe9\x80\x89\xe8\x82\xa1\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\x82\xa1\xe7\xa5\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x87\xe5\x89\xb2\xe5\x8f\x82\xe6\x95\xb0n_folds\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410""""""\ng_split_tt_n_folds = 10\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xe7\x89\xb9\xe5\xbe\x81\xe5\xbf\xab\xe7\x85\xa7\xe5\x88\x87\xe5\x89\xb2 end \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xe4\xb8\xbb\xe8\xa3\x81 start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n# TODO \xe5\x86\x85\xe7\xbd\xaeump\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xaemove\xe5\x88\xb0ABuUmpManager\xe4\xb8\xad\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe4\xb8\xbb\xe8\xa3\x81deg\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_main_deg_block = False\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe4\xb8\xbb\xe8\xa3\x81jump\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_main_jump_block = False\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe4\xb8\xbb\xe8\xa3\x81price\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_main_price_block = False\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe4\xb8\xbb\xe8\xa3\x81wave\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_main_wave_block = False\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xe4\xb8\xbb\xe8\xa3\x81 end \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xe8\xbe\xb9\xe8\xa3\x81 start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe8\xbe\xb9\xe8\xa3\x81deg\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_edge_deg_block = False\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe8\xbe\xb9\xe8\xa3\x81price\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_edge_price_block = False\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe8\xbe\xb9\xe8\xa3\x81wave\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_edge_wave_block = False\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xa3\x81\xe5\x88\xa4\xe6\x8b\xa6\xe6\x88\xaa\xe6\x9c\xba\xe5\x88\xb6: \xe8\xbe\xb9\xe8\xa3\x81full\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xadFalse""""""\ng_enable_ump_edge_full_block = False\n\n\n# \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xe8\xbe\xb9\xe8\xa3\x81 end \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\n\n#  \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a \xe6\x97\xa5\xe5\xbf\x97 start \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n# TODO \xe5\xb0\x86log\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe4\xbb\x8eenv\xe4\xb8\xad\ndef init_logging():\n    """"""\n    logging\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe9\x85\x8d\xe7\xbd\xaelog\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x86\x99\xe5\x85\xa5\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe6\xa0\xbc\xe5\xbc\x8f\n    """"""\n    if g_is_ipython and not g_is_py3:\n        """"""ipython\xe5\x9c\xa8python2\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe7\x89\x88\xe6\x9c\xac\xe9\x9c\x80\xe8\xa6\x81reload logging\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe6\x98\xbe\xe7\xa4\xbalog\xe4\xbf\xa1\xe6\x81\xaf""""""\n        # noinspection PyUnresolvedReferences, PyCompatibility\n        reload(logging)\n        # pass\n\n    if not os.path.exists(g_project_log_dir):\n        # \xe5\x88\x9b\xe5\xbb\xbalog\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\n        os.makedirs(g_project_log_dir)\n\n    # \xe8\xbe\x93\xe5\x87\xba\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xa7\x84\xe8\x8c\x83\n    # file_handler = logging.FileHandler(g_project_log_info, \'a\', \'utf-8\')\n    logging.basicConfig(level=logging.DEBUG,\n                        format=\'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s\',\n                        datefmt=\'%a, %d %b %Y %H:%M:%S\',\n                        filename=g_project_log_info,\n                        filemode=\'a\'\n                        # handlers=[file_handler]\n                        )\n\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    # \xe5\xb1\x8f\xe5\xb9\x95\xe6\x89\x93\xe5\x8d\xb0\xe5\x8f\xaa\xe6\x98\xbe\xe7\xa4\xbamessage\n    formatter = logging.Formatter(\'%(message)s\')\n    console.setFormatter(formatter)\n    logging.getLogger(\'\').addHandler(console)\n\n\ninit_logging()\n\n#  \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a \xe6\x97\xa5\xe5\xbf\x97 end \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\ng_plt_figsize = (14, 7)\n\n\ndef init_plot_set():\n    """"""\xe5\x85\xa8\xe5\xb1\x80plot\xe8\xae\xbe\xe7\xbd\xae""""""\n    import seaborn as sns\n    sns.set_context(\'notebook\', rc={\'figure.figsize\': g_plt_figsize})\n    sns.set_style(""darkgrid"")\n\n    import matplotlib\n    # conda 5.0\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x8d\x95\xe7\x8b\xacmatplotlib\xe7\x9a\x84figure\xe8\xae\xbe\xe7\xbd\xae\xe5\x90\xa6\xe5\x88\x99pandas\xe7\x9a\x84plot size\xe4\xb8\x8d\xe7\x94\x9f\xe6\x95\x88\n    matplotlib.rcParams[\'figure.figsize\'] = g_plt_figsize\n\n\ninit_plot_set()\n'"
abupy/CoreBu/ABuEnvProcess.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8b\xb7\xe8\xb4\x9d\xe8\xb7\x9f\xe9\x9a\x8f\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xae\xbe\xe7\xbd\xae\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport functools\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..CoreBu.ABuFixes import signature, Parameter\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef add_process_env_sig(func):\n    """"""\n    \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe6\x97\xb6\xe7\xbb\x99\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe6\xb7\xbb\xe5\x8a\xa0env\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x9c\xa8wrapper\xe4\xb8\xad\xe5\xb0\x86env\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8bcopy\n    \xe7\x94\xb1\xe4\xba\x8e\xe8\xa6\x81\xe6\x94\xb9\xe6\x96\xb9\xe6\xb3\x95\xe7\xad\xbe\xe5\x90\x8d\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaa\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe8\xa6\x81\xe6\x94\xbe\xe5\x9c\xa8\xe6\x9c\x80\xe4\xb8\x8b\xe9\x9d\xa2\n    :param func:\n    :return:\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        # env = kwargs.pop(\'env\', None)\n        if \'env\' in kwargs:\n            """"""\n                \xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8alinux, mac os\xe4\xb8\x8a\xe5\xb9\xb6\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe6\xa8\xa1\xe5\x9d\x97\xe5\x86\x85\xe5\xad\x98\xe6\x8b\xb7\xe8\xb4\x9d\xef\xbc\x8c\n                \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8bfork\xe5\x90\x8e\xe6\x90\xba\xe5\xb8\xa6\xe4\xba\x86\xe7\x88\xb6\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe5\x86\x85\xe5\xad\x98\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8cwin\xe4\xb8\x8a\xe6\x98\xaf\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xef\xbc\x8c\n                \xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe5\x81\x9a\xe5\x8c\xba\xe5\x88\x86\xef\xbc\x8c\xe9\x83\xbd\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x86\x85\xe5\xad\x98\xe6\x8b\xb7\xe8\xb4\x9d\xef\xbc\x8c\xe5\xa6\x82\xe7\x89\xb9\xe5\x88\xab\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe7\x9a\x84\n                \xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x9f\xba\xe4\xba\x8elinux\xe7\xb3\xbb\xe7\xbb\x9f\xef\xbc\x8cmac os\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe6\x8b\xb7\xe8\xb4\x9d\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                if kwargs[\'env\'] is not None and not ABuEnv.g_is_mac_os:\n                    # \xe5\x8f\xaa\xe6\x9c\x89windows\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\x85\xe5\xad\x98\xe8\xae\xbe\xe7\xbd\xae\xe6\x8b\xb7\xe8\xb4\x9d\n                    env.copy_process_env()\n            """"""\n            # if kwargs[\'env\'] is not None and not ABuEnv.g_is_mac_os:\n            env = kwargs.pop(\'env\', None)\n            if env is not None:\n                # \xe5\xb0\x86\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84env\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x88\xb0\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\n                env.copy_process_env()\n        return func(*args, **kwargs)\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\xbe\xe5\x90\x8d\xef\xbc\x8c\xe7\xbb\x99\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x96\xb9\xe6\xb3\x95\xe6\xb7\xbb\xe5\x8a\xa0env\xe5\x8f\x82\xe6\x95\xb0\n    sig = signature(func)\n\n    if \'env\' not in list(sig.parameters.keys()):\n        parameters = list(sig.parameters.values())\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xbc\xba\xe5\x88\xb6\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe7\xbb\x99\xe6\x96\xb9\xe6\xb3\x95\xe5\x8a\xa0\xe4\xb8\x8aenv\n        parameters.append(Parameter(\'env\', Parameter.KEYWORD_ONLY, default=None))\n        # wrapper\xe7\x9a\x84__signature__\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xbf\xe6\x8d\xa2\n        wrapper.__signature__ = sig.replace(parameters=parameters)\n\n    return wrapper\n\n\nclass AbuEnvProcess(object):\n    """"""\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x86\x85\xe5\xad\x98\xe8\xae\xbe\xe7\xbd\xae\xe6\x8b\xb7\xe8\xb4\x9d\xe6\x89\xa7\xe8\xa1\x8c\xe8\x80\x85\xe7\xb1\xbb""""""\n\n    def __init__(self):\n        """"""\xe8\xbf\xad\xe4\xbb\xa3\xe6\xb3\xa8\xe5\x86\x8c\xe4\xba\x86\xe7\x9a\x84\xe9\x9c\x80\xe8\xa6\x81\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x86\x85\xe5\xad\x98\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe7\xad\x9b\xe9\x80\x89\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe4\xbb\xa5g_\xe6\x88\x96\xe8\x80\x85_g_\xe5\xbc\x80\xe5\xa4\xb4\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe5\xb0\x86\xe8\xbf\x99\xe4\xba\x9b\xe5\xb1\x9e\xe6\x80\xa7\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xb8\xba\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xe5\x8f\x98\xe9\x87\x8f""""""\n        for module in self.register_module():\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe6\xb3\xa8\xe5\x86\x8c\xe4\xba\x86\xe7\x9a\x84\xe9\x9c\x80\xe8\xa6\x81\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x86\x85\xe5\xad\x98\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97, \xe7\xad\x9b\xe9\x80\x89\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe4\xbb\xa5g_\xe6\x88\x96\xe8\x80\x85_g_\xe5\xbc\x80\xe5\xa4\xb4\xe7\x9a\x84, \xe4\xb8\x94\xe4\xb8\x8d\xe8\x83\xbdcallable\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe6\x98\xaf\xe6\x96\xb9\xe6\xb3\x95\n            sig_env = list(filter(\n                lambda _sig: not callable(_sig) and (_sig.startswith(\'g_\') or _sig.startswith(\'_g_\')), dir(module)))\n\n            module_name = module.__name__\n            # map(lambda sig: setattr(self, \'{}_{}\'.format(module_name, sig), module.__dict__[sig]), sig_env)\n            for sig in sig_env:\n                # \xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xb8\xba\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xe5\x8f\x98\xe9\x87\x8f\xef\xbc\x8ckey\xef\xbc\x9dmodule_name_sig\n                setattr(self, \'{}_{}\'.format(module_name, sig), module.__dict__[sig])\n\n    # noinspection PyMethodMayBeStatic\n    def register_module(self):\n        """"""\n        \xe6\xb3\xa8\xe5\x86\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x86\x85\xe5\xad\x98\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe5\x85\xa8\xe5\xb1\x80\xe6\xa8\xa1\xe5\x9d\x97\xe6\xb3\xa8\xe5\x86\x8c\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\xbe\x88\xe5\xa4\x9a\xe4\xba\xa4\xe5\x8f\x89\xe5\xbc\x95\xe7\x94\xa8\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\xa6\x81\xe5\x81\x9a\xe4\xb8\xba\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe5\xad\x98\xe5\x82\xa8\xe5\x90\xa6\xe5\x88\x99\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbc\xa0\xe9\x80\x92pickle\xe6\x97\xb6\xe4\xbc\x9a\xe5\x87\xba\xe9\x94\x99\n        :return:\n        """"""\n        from ..BetaBu import ABuAtrPosition, ABuPositionBase\n        from ..CoreBu import ABuEnv\n        from ..SimilarBu import ABuCorrcoef\n        from ..SlippageBu import ABuSlippageBuyMean, ABuSlippageBuyBase, ABuSlippageSellBase\n        from ..TradeBu import ABuMLFeature\n        from ..UmpBu import ABuUmpManager, ABuUmpMainBase, ABuUmpEdgeBase\n        from ..TLineBu import ABuTLSimilar\n        from ..MarketBu import ABuMarket\n        from ..AlphaBu import ABuPickTimeWorker\n        from ..FactorSellBu import ABuFactorCloseAtrNStop, ABuFactorPreAtrNStop\n        from ..PickStockBu import ABuPickSimilarNTop\n        from ..UtilBu import ABuProgress\n\n        # TODO \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe5\x85\xa8\xe5\xb1\x80\xe8\xae\xbe\xe7\xbd\xae\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xe9\x85\x8d\xe7\xbd\xae\xe4\xbb\xa3\xe7\xa0\x81\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe6\xa8\xa1\xe5\x9d\x97\xe9\x85\x8d\xe7\xbd\xae\xe4\xbb\xa3\xe7\xa0\x81\xe6\x96\x87\xe4\xbb\xb6\xe5\x8a\xa0\xe8\xbd\xbd\n        return [ABuAtrPosition, ABuPositionBase, ABuEnv, ABuCorrcoef, ABuProgress,\n                ABuSlippageBuyMean, ABuSlippageSellBase, ABuSlippageBuyBase, ABuUmpMainBase, ABuUmpEdgeBase,\n                ABuMLFeature, ABuUmpManager, ABuTLSimilar, ABuPickTimeWorker,\n                ABuFactorCloseAtrNStop, ABuMarket, ABuFactorPreAtrNStop, ABuPickSimilarNTop]\n\n    def copy_process_env(self):\n        """"""\xe4\xb8\xba\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x9c\xa8add_process_env_sig\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe4\xb8\x8d\xe5\xba\x94\xe4\xb8\xbb\xe5\x8a\xa8\xe4\xbd\xbf\xe7\x94\xa8""""""\n        for module in self.register_module():\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe6\xb3\xa8\xe5\x86\x8c\xe4\xba\x86\xe7\x9a\x84\xe9\x9c\x80\xe8\xa6\x81\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x86\x85\xe5\xad\x98\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97, \xe7\xad\x9b\xe9\x80\x89\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe4\xbb\xa5g_\xe6\x88\x96\xe8\x80\x85_g_\xe5\xbc\x80\xe5\xa4\xb4\xe7\x9a\x84, \xe4\xb8\x94\xe4\xb8\x8d\xe8\x83\xbdcallable\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe6\x98\xaf\xe6\x96\xb9\xe6\xb3\x95\n            sig_env = list(filter(\n                lambda sig: not callable(sig) and (sig.startswith(\'g_\') or sig.startswith(\'_g_\')), dir(module)))\n            module_name = module.__name__\n            for _sig in sig_env:\n                # \xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe6\xa8\xa1\xe5\x9d\x97\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84key\n                name = \'{}_{}\'.format(module_name, _sig)\n                # \xe6\xa0\xb9\xe6\x8d\xae\xe5\xba\x94\xe6\xa8\xa1\xe5\x9d\x97\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84key\xef\xbc\x88name\xef\xbc\x89getattr\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb1\x9e\xe6\x80\xa7\xe5\x80\xbc\n                val = getattr(self, name)\n                # \xe4\xb8\xba\xe5\xad\x90\xe6\xa8\xa1\xe5\x9d\x97\xe5\x86\x85\xe5\xad\x98\xe5\x8f\x98\xe9\x87\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x80\xbc\xe6\x8b\xb7\xe8\xb4\x9d\n                module.__dict__[_sig] = val\n                # print(name, val)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9a\xe6\xb3\xa8\xe5\x86\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x8b\xb7\xe8\xb4\x9d\xe5\x86\x85\xe5\xad\x98\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe5\x9c\xa8AbuEnvProcess\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84\xe6\x98\xa0\xe5\xb0\x84key\xe5\x80\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8avalue\xe5\x80\xbc""""""\n\n        str_dict = dict()\n        for module in self.register_module():\n            sig_env = list(filter(\n                lambda sig: not callable(sig) and (sig.startswith(\'g_\') or sig.startswith(\'_g_\')), dir(module)))\n            module_name = module.__name__\n            for _sig in sig_env:\n                # format\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84\xe6\x98\xa0\xe5\xb0\x84key\xe5\x80\xbc\n                name = \'{}_{}\'.format(module_name, _sig)\n                # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xa0\xe5\xb0\x84key\xe5\x80\xbcgetattr\xe5\x87\xbavalue\xe5\x80\xbc\n                attr_str = getattr(self, name)\n                str_dict[name] = attr_str\n        return str(str_dict)\n\n    __repr__ = __str__\n'"
abupy/CoreBu/ABuFixes.py,21,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xaf\xb9\xe5\x90\x84\xe4\xb8\xaa\xe4\xbe\x9d\xe8\xb5\x96\xe5\xba\x93\xe4\xb8\x8d\xe5\x90\x8c\xe7\x89\x88\xe6\x9c\xac\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\x8c\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe8\xa7\x84\xe8\x8c\x83\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x97\xae\xe9\xa2\x98\xe4\xbf\xae\xe6\xad\xa3\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport functools\nimport numbers\nimport sys\n\nimport matplotlib\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport sklearn as skl\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef _parse_version(version_string):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xae\xe5\xba\x93\xe4\xb8\xad\xe7\x9a\x84__version__\xe5\xad\x97\xe6\xae\xb5\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbatuple\xef\xbc\x8ceg. \'1.11.3\'->(1, 11, 3)\n    :param version_string: __version__\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: tuple \xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    version = []\n    for x in version_string.split(\'.\'):\n        try:\n            version.append(int(x))\n        except ValueError:\n            version.append(x)\n    return tuple(version)\n\n\n""""""numpy \xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7tuple""""""\nnp_version = _parse_version(np.__version__)\n""""""sklearn \xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7tuple""""""\nskl_version = _parse_version(skl.__version__)\n""""""pandas \xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7tuple""""""\npd_version = _parse_version(pd.__version__)\n""""""scipy \xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7tuple""""""\nsp_version = _parse_version(scipy.__version__)\n""""""matplotlib \xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7tuple""""""\nmpl_version = _parse_version(matplotlib.__version__)\n\ntry:\n    from inspect import signature, Parameter\nexcept ImportError:\n    try:\n        from funcsigs import signature, Parameter\n    except ImportError:\n        from ..ExtBu.funcsigs import signature, Parameter\n\ntry:\n    # noinspection PyCompatibility\n    from concurrent.futures import ThreadPoolExecutor\nexcept ImportError:\n    from ..ExtBu.futures.thread import ThreadPoolExecutor\n\ntry:\n    from ..ExtBu import six\nexcept ImportError:\n    import six as six\n\n# try:\n#     from six.moves import zip, xrange, range, reduce, map, filter\n# except ImportError:\n#     # noinspection PyUnresolvedReferences\n#     from ..ExtBu.six.moves import zip, xrange, range, reduce, map, filter\n# noinspection PyUnresolvedReferences\ntry:\n    from ..ExtBu.six.moves import zip, xrange, range, reduce, map, filter\nexcept ImportError:\n    # noinspection PyUnresolvedReferences\n    from six.moves import zip, xrange, range, reduce, map, filter\n\ntry:\n    # noinspection all\n    from six.moves import cPickle as pickle\nexcept ImportError:\n    # noinspection all\n    from six.moves import cPickle as pickle\n\nif six.PY3:\n    # noinspection PyProtectedMember\n    Unpickler = pickle._Unpickler\n    # noinspection PyProtectedMember\n    Pickler = pickle._Pickler\nelse:\n    Unpickler = pickle.Unpickler\n    Pickler = pickle.Pickler\n\nif six.PY3:\n    def as_bytes(s):\n        if isinstance(s, bytes):\n            return s\n        return s.encode(\'latin1\')\nelse:\n    as_bytes = str\n\ntry:\n    if six.PY3:\n        from functools import lru_cache\n    else:\n        from functools32 import lru_cache\nexcept ImportError:\n    # noinspection PyUnusedLocal\n    def lru_cache(maxsize=100):\n        def decorate(func):\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n\n            return wrapper\n\n        return decorate\n\ntry:\n    from itertools import combinations_with_replacement\nexcept ImportError:\n    # Backport of itertools.combinations_with_replacement for Python 2.6,\n    # from Python 3.4 documentation (http://tinyurl.com/comb-w-r), copyright\n    # Python Software Foundation (https://docs.python.org/3/license.html)\n    def combinations_with_replacement(iterable, r):\n        # combinations_with_replacement(\'ABC\', 2) --> AA AB AC BB BC CC\n        pool = tuple(iterable)\n        n = len(pool)\n        if not n and r:\n            return\n        indices = [0] * r\n        yield tuple(pool[i] for i in indices)\n        while True:\n            for i in reversed(range(r)):\n                if indices[i] != n - 1:\n                    break\n            else:\n                return\n            indices[i:] = [indices[i] + 1] * (r - i)\n            yield tuple(pool[i] for i in indices)\n\nif sys.version_info < (2, 7, 0):\n    # partial cannot be pickled in Python 2.6\n    # http://bugs.python.org/issue1398\n    # noinspection PyPep8Naming\n    class partial(object):\n        def __init__(self, func, *args, **keywords):\n            functools.update_wrapper(self, func)\n            self.func = func\n            self.args = args\n            self.keywords = keywords\n\n        def __call__(self, *args, **keywords):\n            args = self.args + args\n            kwargs = self.keywords.copy()\n            kwargs.update(keywords)\n            return self.func(*args, **kwargs)\nelse:\n    # noinspection PyUnresolvedReferences\n    from functools import partial\n\n""""""\n    matplotlib fixes\n""""""\n# \xe5\x85\x88\xe5\x88\xab\xe5\x8a\xa0\xe4\xba\x86\xef\xbc\x8c\xe7\x94\xa8\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9\xe5\x86\x85\xe9\x83\xa8try\xe5\x90\xa7\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6waring\xe5\xa4\xaa\xe5\xa4\x9a\n# try:\n#     # noinspection PyUnresolvedReferences, PyDeprecation\n#     import matplotlib.finance as mpf\n# except ImportError:\n#     # 2.2 \xe6\x89\x8d\xe4\xbc\x9a\xe6\x9c\x89\n#     # noinspection PyUnresolvedReferences, PyDeprecation\n#     import matplotlib.mpl_finance as mpf\n\n""""""\n    urlencode\n""""""\nif six.PY3:\n    # noinspection PyUnresolvedReferences, PyCompatibility\n    from urllib.parse import urlencode\nelse:\n    # noinspection PyUnresolvedReferences\n    from urllib import urlencode\n\n""""""\n    sklearn fixes\n""""""\n\n\n# noinspection PyProtectedMember,PyUnresolvedReferences\ndef check_random_state(seed):\n    if seed is None or seed is np.random:\n        return np.random.mtrand._rand\n    if isinstance(seed, (numbers.Integral, np.integer)):\n        return np.random.RandomState(seed)\n    if isinstance(seed, np.random.RandomState):\n        return seed\n    raise ValueError(\'%r cannot be used to seed a numpy.random.RandomState\'\n                     \' instance\' % seed)\n\n\ntry:\n    skl_ver_big = skl_version >= (0, 18, 0)\nexcept:\n    skl_ver_big = True\n\nif skl_ver_big:\n    mean_squared_error_scorer = \'neg_mean_squared_error\'\n    mean_absolute_error_scorer = \'neg_mean_absolute_error\'\n    median_absolute_error_scorer = \'neg_median_absolute_error\'\n    log_loss = \'neg_log_loss\'\n\n    try:\n        from sklearn.model_selection import train_test_split\n        from sklearn.model_selection import learning_curve\n        from sklearn.model_selection import cross_val_score\n        from sklearn.model_selection import GridSearchCV\n        # noinspection PyPep8Naming\n        from sklearn.mixture import GaussianMixture as GMM\n\n\n        class KFold(object):\n            """"""\n                sklearn\xe5\xb0\x86KFold\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0\xe4\xba\x86model_selection\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe6\x94\xb9\xe5\x8f\x98\xe4\xba\x86\xe7\x94\xa8\xe6\xb3\x95\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\n                \xe8\xbf\x99\xe4\xb9\x88\xe5\xa4\x8d\xe6\x9d\x82\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x8c\xe5\xb0\x86sklearn\xe4\xb8\xad\xe5\x85\xb3\xe9\x94\xae\xe4\xbb\xa3\xe7\xa0\x81\xe7\xae\x80\xe5\x8d\x95\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe4\xb8\x8dfrom sklearn.model_selection import KFold\n            """"""\n\n            def __init__(self, n, n_folds=3, shuffle=False, random_state=None):\n                if abs(n - int(n)) >= np.finfo(\'f\').eps:\n                    raise ValueError(""n must be an integer"")\n                self.n = int(n)\n\n                if abs(n_folds - int(n_folds)) >= np.finfo(\'f\').eps:\n                    raise ValueError(""n_folds must be an integer"")\n                self.n_folds = n_folds = int(n_folds)\n\n                if n_folds <= 1:\n                    raise ValueError(\n                        ""k-fold cross validation requires at least one""\n                        "" train / test split by setting n_folds=2 or more,""\n                        "" got n_folds={0}."".format(n_folds))\n                if n_folds > self.n:\n                    raise ValueError(\n                        (""Cannot have number of folds n_folds={0} greater""\n                         "" than the number of samples: {1}."").format(n_folds, n))\n\n                if not isinstance(shuffle, bool):\n                    raise TypeError(""shuffle must be True or False;""\n                                    "" got {0}"".format(shuffle))\n                self.shuffle = shuffle\n                self.random_state = random_state\n\n                self.idxs = np.arange(n)\n                if shuffle:\n                    rng = check_random_state(self.random_state)\n                    rng.shuffle(self.idxs)\n\n            def __iter__(self):\n                ind = np.arange(self.n)\n                for test_index in self._iter_test_masks():\n                    train_index = np.logical_not(test_index)\n                    train_index = ind[train_index]\n                    test_index = ind[test_index]\n                    yield train_index, test_index\n\n            def _iter_test_masks(self):\n                for test_index in self._iter_test_indices():\n                    test_mask = self._empty_mask()\n                    test_mask[test_index] = True\n                    yield test_mask\n\n            def _empty_mask(self):\n                return np.zeros(self.n, dtype=np.bool)\n\n            def _iter_test_indices(self):\n                n = self.n\n                n_folds = self.n_folds\n                fold_sizes = (n // n_folds) * np.ones(n_folds, dtype=np.int)\n                fold_sizes[:n % n_folds] += 1\n                current = 0\n                for fold_size in fold_sizes:\n                    start, stop = current, current + fold_size\n                    yield self.idxs[start:stop]\n                    current = stop\n\n            def __repr__(self):\n                return \'%s.%s(n=%i, n_folds=%i, shuffle=%s, random_state=%s)\' % (\n                    self.__class__.__module__,\n                    self.__class__.__name__,\n                    self.n,\n                    self.n_folds,\n                    self.shuffle,\n                    self.random_state,\n                )\n\n            def __len__(self):\n                return self.n_folds\n\n    except ImportError:\n        from sklearn.cross_validation import train_test_split\n        from sklearn.cross_validation import KFold\n        from sklearn.cross_validation import cross_val_score\n        from sklearn.learning_curve import learning_curve\n        from sklearn import cross_validation\n        from sklearn.grid_search import GridSearchCV\n        from sklearn.mixture import GMM\nelse:\n    mean_squared_error_scorer = \'mean_squared_error\'\n    mean_absolute_error_scorer = \'mean_absolute_error\'\n    median_absolute_error_scorer = \'median_absolute_error\'\n    log_loss = \'log_loss\'\n\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn.cross_validation import train_test_split\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn.cross_validation import KFold\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn.cross_validation import cross_val_score\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn.learning_curve import learning_curve\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn import cross_validation\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn.grid_search import GridSearchCV\n    # noinspection PyUnresolvedReferences, PyDeprecation\n    from sklearn.mixture import GMM\n\ntry:\n    if np_version < (1, 8, 1):\n        def array_equal(a1, a2):\n            # copy-paste from numpy 1.8.1\n            try:\n                a1, a2 = np.asarray(a1), np.asarray(a2)\n            except:\n                return False\n            if a1.shape != a2.shape:\n                return False\n            return bool(np.asarray(a1 == a2).all())\n    else:\n        from numpy import array_equal\nexcept:\n    from numpy import array_equal\n\ntry:\n    if sp_version < (0, 13, 0):\n        def rankdata(a, method=\'average\'):\n            if method not in (\'average\', \'min\', \'max\', \'dense\', \'ordinal\'):\n                raise ValueError(\'unknown method ""{0}""\'.format(method))\n\n            arr = np.ravel(np.asarray(a))\n            algo = \'mergesort\' if method == \'ordinal\' else \'quicksort\'\n            sorter = np.argsort(arr, kind=algo)\n\n            inv = np.empty(sorter.size, dtype=np.intp)\n            inv[sorter] = np.arange(sorter.size, dtype=np.intp)\n\n            if method == \'ordinal\':\n                return inv + 1\n\n            arr = arr[sorter]\n            obs = np.r_[True, arr[1:] != arr[:-1]]\n            dense = obs.cumsum()[inv]\n\n            if method == \'dense\':\n                return dense\n\n            # cumulative counts of each unique value\n            # noinspection PyUnresolvedReferences\n            count = np.r_[np.nonzero(obs)[0], len(obs)]\n\n            if method == \'max\':\n                return count[dense]\n\n            if method == \'min\':\n                return count[dense - 1] + 1\n\n            # average method\n            return .5 * (count[dense] + count[dense - 1] + 1)\n    else:\n        # noinspection PyUnresolvedReferences\n        from scipy.stats import rankdata\nexcept:\n    # noinspection PyUnresolvedReferences\n    from scipy.stats import rankdata\n'"
abupy/CoreBu/ABuParallel.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xb9\xb6\xe8\xa1\x8c\xe5\xb0\x81\xe8\xa3\x85\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x8d\xe5\x90\x8c\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x9a\n\n    windows \xe4\xb8\x8a\xe4\xbd\xbf\xe7\x94\xa8joblib\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x95\xbf\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe5\xa6\x82\xe8\xb6\x85\xe8\xbf\x8710\xe5\xb0\x8f\xe6\x97\xb6\xe4\xbb\xa5\xe4\xb8\x8a\xe6\x97\xb6\xef\xbc\x8c\xe5\x9c\xa8\xe4\xbb\xbb\xe4\xbd\x95\xe6\x9c\x80\xe5\x90\x8e\xe6\x9c\x89\xe7\xb3\xbb\xe7\xbb\x9fpop\xe4\xbb\xbb\xe5\x8a\xa1\n    \xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5windows\xe4\xb8\x8a\xe4\xbd\xbf\xe7\x94\xa8ProcessPoolExecutor\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe5\xa5\x97\xe4\xb8\x8aParallel\xe5\x92\x8cdelayed\xe4\xbf\x9d\xe6\x8c\x81\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x9a\x84\n    \xe9\x80\x9a\xe7\x94\xa8\xe6\x80\xa7\xe5\x8f\x8a\xe8\xa7\x84\xe8\x8c\x83\xe7\xbb\x9f\xe4\xb8\x80\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport functools\n\nfrom ..CoreBu import ABuEnv\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n# if ABuEnv.g_is_mac_os:\nif False:\n    """"""\n        \xe5\xaf\xb9\xe5\xa4\x96\xe7\x89\x88\xe6\x9c\xac\xe4\xb8\x8d\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8joblib\xe9\x81\xbf\xe5\x85\x8dpython2\xef\xbc\x8cpython3\xef\xbc\x8cmac, windows\xe7\xad\x89joblib\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84pop\xe4\xb8\x80\xe7\x9b\xb4\xe5\x87\xba\xe4\xb8\x8d\xe6\x9d\xa5\xe7\x9a\x84bug\xef\xbc\x8c\n        \xe6\x9c\x89\xe8\x83\xbd\xe5\x8a\x9b\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe6\x89\x93\xe5\xbc\x80\xef\xbc\x8c\xe5\x9c\xa8mac\xe4\xb8\x8bpython3\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x94cpu\xe8\xb6\xb3\xe5\xa4\x9f\xe5\xbf\xab\xe5\xbb\xba\xe8\xae\xae\xe6\x89\x93\xe5\xbc\x80\n    """"""\n    # MAC \xe7\x9b\xb4\xe6\x8e\xa5import Parallel, delayed\n    # noinspection PyUnresolvedReferences\n    from ..ExtBu.joblib import Parallel, delayed\nelse:\n    # windows\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8ProcessPoolExecutor\n    try:\n        # noinspection PyCompatibility\n        from concurrent.futures import ProcessPoolExecutor\n    except ImportError:\n        from ..ExtBu.futures import ProcessPoolExecutor\n\n\n    def delayed(function):\n        """"""\n        \xe5\xb0\x86function\xe9\x80\x9a\xe8\xbf\x87functools.wraps\xe5\x8f\x8adelayed_function\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe7\x95\x99\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\x8d\xe6\x89\xa7\xe8\xa1\x8c\n        :param function:\n        :return:\n        """"""\n        def delayed_function(*args, **kwargs):\n            """"""\xe5\xb0\x86function\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\xbatuple\xef\xbc\x8ctuple[0]\xe4\xb8\xba\xe5\x8e\x9f\xe5\xa7\x8bfunction""""""\n            return function, args, kwargs\n\n        try:\n            delayed_function = functools.wraps(function)(delayed_function)\n        except AttributeError:\n            raise TypeError(\'wraps fails on some callable objects\')\n        return delayed_function\n\n\n    # noinspection PyUnusedLocal\n    class Parallel(object):\n        """"""\xe5\xb0\x81\xe8\xa3\x85ProcessPoolExecutor\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x89\xa7\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c""""""\n\n        def __init__(self, n_jobs=1, backend=\'multiprocessing\', verbose=0,\n                     pre_dispatch=\'2 * n_jobs\', batch_size=\'auto\',\n                     temp_folder=None, max_nbytes=\'1M\', mmap_mode=\'r\'):\n            """"""\n            :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe5\x90\xaf\xe5\x8a\xa8\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\n            :param backend: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            :param verbose: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            :param pre_dispatch: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            :param batch_size: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            :param temp_folder: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            :param max_nbytes: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            :param mmap_mode: \xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe4\xb8\x8ejoblib.Parallel\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            """"""\n            self.n_jobs = n_jobs\n\n        def __call__(self, iterable):\n            """"""\xe4\xb8\xba\xe4\xb8\x8ejoblib\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8ProcessPoolExecutor\xe5\xbc\x80\xe5\xa7\x8b\xe5\xb7\xa5\xe4\xbd\x9c""""""\n\n            result = []\n\n            def when_done(r):\n                """"""ProcessPoolExecutor\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe5\x90\x8e\xe7\xbb\x93\xe6\x9e\x9cappend\xe5\x88\xb0result\xe4\xb8\xad""""""\n                result.append(r.result())\n\n            if self.n_jobs <= 0:\n                # \xe4\xb8\xbb\xe8\xa6\x81\xe4\xb8\xba\xe4\xba\x86\xe9\x80\x82\xe9\x85\x8d n_jobs = -1\xef\xbc\x8cjoblib\xe4\xb8\xad\xe5\x90\xaf\xe5\x8a\xa8cpu\xe4\xb8\xaa\xe6\x95\xb0\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\n                self.n_jobs = ABuEnv.g_cpu_cnt\n\n            if self.n_jobs == 1:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe5\xbc\x80\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\x8f\xaa\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b(\xe6\x88\x96\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe7\x9a\x84\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b)\xe9\x87\x8c\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbfpdb debug\xe4\xb8\x94\xe4\xb8\x8ejoblib\xe8\xbf\x90\xe8\xa1\x8c\xe6\x96\xb9\xe5\xbc\x8f\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\n                for jb in iterable:\n                    result.append(jb[0](*jb[1], **jb[2]))\n            else:\n                with ProcessPoolExecutor(max_workers=self.n_jobs) as pool:\n                    for jb in iterable:\n                        # \xe8\xbf\x99\xe9\x87\x8citerable\xe9\x87\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe6\x98\xafdelayed.delayed_function\xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84tuple\n                        future_result = pool.submit(jb[0], *jb[1], **jb[2])\n                        future_result.add_done_callback(when_done)\n            return result\n\n\ndef run_in_thread(func, *args, **kwargs):\n    """"""\n    \xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8a\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe7\xad\x89\xe7\xbb\x86\xe8\x8a\x82\xe5\xa4\x84\xe7\x90\x86\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\n    :param func: \xe8\xa2\xab\xe7\xba\xbf\xe7\xa8\x8b\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n    :return: \xe8\xbf\x94\xe5\x9b\x9eThread\xe7\xba\xbf\xe7\xa8\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    from threading import Thread\n    thread = Thread(target=func, args=args, kwargs=kwargs)\n    thread.daemon = True\n    thread.start()\n    return thread\n\n\ndef run_in_subprocess(func, *args, **kwargs):\n    """"""\n    \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8a\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe7\xad\x89\xe7\xbb\x86\xe8\x8a\x82\xe5\xa4\x84\xe7\x90\x86\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\n    :param func: \xe8\xa2\xab\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n    :return: \xe8\xbf\x94\xe5\x9b\x9emultiprocessing\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    from multiprocessing import Process\n    process = Process(target=func, args=args, kwargs=kwargs)\n    process.daemon = True\n    process.start()\n    return process\n'"
abupy/CoreBu/ABuPdHelper.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xb0\x81\xe8\xa3\x85pandas\xe4\xb8\xad\xe7\x89\x88\xe6\x9c\xac\xe5\x85\xbc\xe5\xae\xb9\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xbf\x9d\xe6\x8c\x81\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe8\xad\xa6\xe5\x91\x8a\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport functools\nfrom collections import Iterable\n\nimport pandas as pd\nfrom ..CoreBu.ABuFixes import partial\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\ntry:\n    # noinspection PyUnresolvedReferences\n    from pandas.tseries.resample import DatetimeIndexResampler\n    g_pandas_has_resampler = True\nexcept ImportError:\n    try:\n        # noinspection PyUnresolvedReferences\n        from pandas.core.resample import DatetimeIndexResampler\n        g_pandas_has_resampler = True\n    except ImportError:\n        g_pandas_has_resampler = False\n\ntry:\n    # noinspection PyUnresolvedReferences\n    from pandas.core.window import EWM\n    g_pandas_has_ewm = True\nexcept ImportError:\n    g_pandas_has_ewm = False\n\ntry:\n    # noinspection PyUnresolvedReferences\n    from pandas.core.window import Rolling\n    g_pandas_has_rolling = True\nexcept ImportError:\n    g_pandas_has_rolling = False\n\ntry:\n    # noinspection PyUnresolvedReferences\n    from pandas.core.window import Expanding\n    g_pandas_has_expanding = True\nexcept ImportError:\n    g_pandas_has_expanding = False\n\n\ndef __pd_object_covert_start(iter_obj):\n    """"""\n    _pd_object_covert\xe4\xb8\xad\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x82\xe6\x95\xb0\xe6\xa3\x80\xe6\xb5\x8b\xe5\x8f\x8a\xe8\xbd\xac\xe6\x8d\xa2\n    :param iter_obj: \xe5\xb0\x86\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :return: \xe6\x93\x8d\xe4\xbd\x9c\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\n    """"""\n    if isinstance(iter_obj, (pd.Series, pd.DataFrame)):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\xac\xe8\xba\xab\xe5\xb0\xb1\xe6\x98\xaf(pd.Series, pd.DataFrame)\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe5\x8d\xb3False\n        return iter_obj, False\n    # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n    if isinstance(iter_obj, Iterable) and not isinstance(iter_obj, six.string_types):\n        # \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbd\xbf\xe7\x94\xa8pd.Series\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe4\xb8\x94\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\xef\xbc\x8c\xe5\x8d\xb3True\n        return pd.Series(iter_obj), True\n    raise TypeError(\'pd_object must support Iterable!!!\')\n\n\ndef _pd_object_covert(func):\n    """"""\xe9\x92\x88\xe5\xaf\xb9\xe5\x8f\x82\xe6\x95\xb0\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8cpandas\xe5\xa4\x84\xe7\x90\x86\xe7\x9a\x84\xe4\xba\x8b\xe5\x89\x8d\xef\xbc\x8c\xe4\xba\x8b\xe5\x90\x8e\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8""""""\n\n    @functools.wraps(func)\n    def wrapper(pd_object, pd_object_cm, how, *args, **kwargs):\n        """"""\xe4\xba\x8b\xe5\x89\x8d\xe8\xa3\x85\xe9\xa5\xb0\xe5\xb7\xa5\xe4\xbd\x9c__pd_object_covert_start\xef\xbc\x8c\xe4\xba\x8b\xe5\x90\x8e\xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\xe5\xb7\xa5\xe4\xbd\x9c""""""\n        # \xe4\xba\x8b\xe5\x89\x8d\xe8\xa3\x85\xe9\xa5\xb0\xe5\xb7\xa5\xe4\xbd\x9c__pd_object_covert_start\n        pd_object, ret_covert = __pd_object_covert_start(pd_object)\n        ret = func(pd_object, pd_object_cm, how, *args, **kwargs)\n        # \xe4\xba\x8b\xe5\x90\x8e\xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\xe5\xb7\xa5\xe4\xbd\x9c\n        if ret is not None and ret_covert:\n            return ret.values\n        return ret\n\n    return wrapper\n\n\n@_pd_object_covert\ndef _pd_rolling(pd_object, pd_object_cm, how, *args, **kwargs):\n    """"""\n    \xe8\xa2\xab_pd_object_covert\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xaf\xb9pandas\xe4\xb8\xad\xe7\x9a\x84rolling\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaepandas version\xe7\x89\x88\xe6\x9c\xac\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xe8\xb0\x83\xe7\x94\xa8\xe6\x96\xb9\xe5\xbc\x8f\n    :param pd_object: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series, pd.DataFrame\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaa\xe6\x98\xafIterable\n    :param pd_object_cm: \xe4\xb8\x8epd_object\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapandas\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85\xe5\xba\x8f\xe5\x88\x97\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\xa6\x82corr\xef\xbc\x8ccov\xe7\xad\x89\n    :param how: \xe4\xbb\xa3\xe8\xa1\xa8\xe6\x96\xb9\xe6\xb3\x95\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8ceg. mean, std, var\n    :return:\n    """"""\n    if g_pandas_has_rolling:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe9\xab\x98\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd_object.rolling\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xb0\x83\xe7\x94\xa8""""""\n        rolling_obj = pd_object.rolling(*args, **kwargs)\n        if hasattr(rolling_obj, how):\n            if pd_object_cm is None:\n                return getattr(rolling_obj, how)()\n            # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapd_object\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c, getattr(rolling_obj, how)(pd_object_cm)\n            return getattr(rolling_obj, how)(pd_object_cm)\n    else:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe4\xbd\x8e\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd.rolling_mean\xe6\x96\xb9\xe6\xb3\x95\xe8\xb0\x83\xe7\x94\xa8""""""\n        how_func = \'rolling_{}\'.format(how)\n        if hasattr(pd, how_func):\n            if pd_object_cm is None:\n                return getattr(pd, how_func)(pd_object, *args, **kwargs)\n            # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapd_object\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8cgetattr(pd, how_func)(pd_object, pd_object_cm, *args, **kwargs)\n            return getattr(pd, how_func)(pd_object, pd_object_cm, *args, **kwargs)\n    raise RuntimeError(\'_pd_rolling {} getattr error\'.format(how))\n\n\n""""""\xe6\xb2\xa1\xe6\x9c\x89\xe5\x85\xa8\xe9\x83\xa8\xe5\xaf\xbc\xe5\x87\xba\xef\xbc\x8c\xe5\x8f\xaa\xe5\xaf\xbc\xe5\x87\xba\xe5\xb8\xb8\xe7\x94\xa8\xe7\x9a\x84""""""\npd_rolling_mean = partial(_pd_rolling, how=\'mean\', pd_object_cm=None)\npd_rolling_median = partial(_pd_rolling, how=\'median\', pd_object_cm=None)\npd_rolling_std = partial(_pd_rolling, how=\'std\', pd_object_cm=None)\npd_rolling_var = partial(_pd_rolling, how=\'var\', pd_object_cm=None)\npd_rolling_max = partial(_pd_rolling, how=\'max\', pd_object_cm=None)\npd_rolling_min = partial(_pd_rolling, how=\'min\', pd_object_cm=None)\npd_rolling_sum = partial(_pd_rolling, how=\'sum\', pd_object_cm=None)\npd_rolling_kurt = partial(_pd_rolling, how=\'kurt\', pd_object_cm=None)\npd_rolling_skew = partial(_pd_rolling, how=\'skew\', pd_object_cm=None)\npd_rolling_corr = partial(_pd_rolling, how=\'corr\')\npd_rolling_cov = partial(_pd_rolling, how=\'cov\')\n\n\n@_pd_object_covert\ndef _pd_ewm(pd_object, pd_object_cm, how, *args, **kwargs):\n    """"""\n    \xe8\xa2\xab_pd_object_covert\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xaf\xb9pandas\xe4\xb8\xad\xe7\x9a\x84ewm\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaepandas version\xe7\x89\x88\xe6\x9c\xac\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xe8\xb0\x83\xe7\x94\xa8\xe6\x96\xb9\xe5\xbc\x8f\n    :param pd_object: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series, pd.DataFrame\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaa\xe6\x98\xafIterable\n    :param pd_object_cm: \xe4\xb8\x8epd_object\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapandas\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85\xe5\xba\x8f\xe5\x88\x97\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\xa6\x82corr\xef\xbc\x8ccov\xe7\xad\x89\n    :param how: \xe4\xbb\xa3\xe8\xa1\xa8\xe6\x96\xb9\xe6\xb3\x95\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8ceg. mean, std, var\n    :return:\n    """"""\n    if g_pandas_has_ewm:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe9\xab\x98\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd_object.ewm\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xb0\x83\xe7\x94\xa8""""""\n        ewm_obj = pd_object.ewm(*args, **kwargs)\n        if hasattr(ewm_obj, how):\n            if pd_object_cm is None:\n                return getattr(ewm_obj, how)()\n            # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapd_object\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\n            return getattr(ewm_obj, how)(pd_object_cm)\n    else:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe4\xbd\x8e\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd.ewmstd\xe6\x96\xb9\xe6\xb3\x95\xe8\xb0\x83\xe7\x94\xa8""""""\n        if how == \'mean\':\n            # pd.ewma\xe7\x89\xb9\xe6\xae\x8a\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8a\xe6\x9b\xbf\xe6\x8d\xa2mean\n            how = \'a\'\n        how_func = \'ewm{}\'.format(how)\n        if hasattr(pd, how_func):\n            if pd_object_cm is None:\n                return getattr(pd, how_func)(pd_object, *args, **kwargs)\n            # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapd_object\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\n            return getattr(pd, how_func)(pd_object, pd_object_cm, *args, **kwargs)\n    raise RuntimeError(\'_pd_ewm {} getattr error\'.format(how))\n\n\n""""""\xe6\xb2\xa1\xe6\x9c\x89\xe5\x85\xa8\xe9\x83\xa8\xe5\xaf\xbc\xe5\x87\xba\xef\xbc\x8c\xe5\x8f\xaa\xe5\xaf\xbc\xe5\x87\xba\xe5\xb8\xb8\xe7\x94\xa8\xe7\x9a\x84""""""\npd_ewm_mean = partial(_pd_ewm, how=\'mean\', pd_object_cm=None)\npd_ewm_std = partial(_pd_ewm, how=\'std\', pd_object_cm=None)\npd_ewm_var = partial(_pd_ewm, how=\'var\', pd_object_cm=None)\npd_ewm_corr = partial(_pd_ewm, how=\'corr\')\npd_ewm_cov = partial(_pd_ewm, how=\'cov\')\n\n\n@_pd_object_covert\ndef _pd_expanding(pd_object, pd_object_cm, how, *args, **kwargs):\n    """"""\n    \xe5\xaf\xb9pandas\xe4\xb8\xad\xe7\x9a\x84expanding\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaepandas version\xe7\x89\x88\xe6\x9c\xac\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xe8\xb0\x83\xe7\x94\xa8\xe6\x96\xb9\xe5\xbc\x8f\n    :param pd_object: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series, pd.DataFrame\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaa\xe6\x98\xafIterable\n    :param pd_object_cm: \xe4\xb8\x8epd_object\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapandas\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85\xe5\xba\x8f\xe5\x88\x97\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\xa6\x82corr\xef\xbc\x8ccov\xe7\xad\x89\n    :param how: \xe4\xbb\xa3\xe8\xa1\xa8\xe6\x96\xb9\xe6\xb3\x95\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8ceg. mean, std, var\n    :return:\n    """"""\n    if g_pandas_has_expanding:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe9\xab\x98\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd_object.expanding\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xb0\x83\xe7\x94\xa8""""""\n        rolling_obj = pd_object.expanding(*args, **kwargs)\n        if hasattr(rolling_obj, how):\n            if pd_object_cm is None:\n                return getattr(rolling_obj, how)()\n            else:\n                # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapd_object\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\n                return getattr(rolling_obj, how)(pd_object_cm)\n    else:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe4\xbd\x8e\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd.expanding_mean\xe6\x96\xb9\xe6\xb3\x95\xe8\xb0\x83\xe7\x94\xa8""""""\n        how_func = \'expanding_{}\'.format(how)\n        if hasattr(pd, how_func):\n            if pd_object_cm is None:\n                return getattr(pd, how_func)(pd_object, *args, **kwargs)\n            else:\n                # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaapd_object\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\n                return getattr(pd, how_func)(pd_object, pd_object_cm, *args, **kwargs)\n    raise RuntimeError(\'_pd_expanding {} getattr error\'.format(how))\n\n\n""""""\xe6\xb2\xa1\xe6\x9c\x89\xe5\x85\xa8\xe9\x83\xa8\xe5\xaf\xbc\xe5\x87\xba\xef\xbc\x8c\xe5\x8f\xaa\xe5\xaf\xbc\xe5\x87\xba\xe5\xb8\xb8\xe7\x94\xa8\xe7\x9a\x84""""""\npd_expanding_mean = partial(_pd_expanding, how=\'mean\', pd_object_cm=None)\npd_expanding_median = partial(_pd_expanding, how=\'median\', pd_object_cm=None)\npd_expanding_std = partial(_pd_expanding, how=\'std\', pd_object_cm=None)\npd_expanding_var = partial(_pd_expanding, how=\'var\', pd_object_cm=None)\npd_expanding_max = partial(_pd_expanding, how=\'max\', pd_object_cm=None)\npd_expanding_min = partial(_pd_expanding, how=\'min\', pd_object_cm=None)\npd_expanding_sum = partial(_pd_expanding, how=\'sum\', pd_object_cm=None)\npd_expanding_kurt = partial(_pd_expanding, how=\'kurt\', pd_object_cm=None)\npd_expanding_skew = partial(_pd_expanding, how=\'skew\', pd_object_cm=None)\npd_expanding_corr = partial(_pd_expanding, how=\'corr\')\npd_expanding_cov = partial(_pd_expanding, how=\'cov\')\n\n\ndef pd_resample(pd_object, rule, *args, **kwargs):\n    """"""\n    \xe5\xaf\xb9pandas\xe4\xb8\xad\xe7\x9a\x84resample\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaepandas version\xe7\x89\x88\xe6\x9c\xac\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xe8\xb0\x83\xe7\x94\xa8\xe6\x96\xb9\xe5\xbc\x8f\n    :param pd_object: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series, pd.DataFrame\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaa\xe6\x98\xafIterable\n    :param rule: \xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84resample\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0 eg. 21D, \xe5\x8d\xb3\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe5\x80\xbc\n    :return:\n    """"""\n    if g_pandas_has_resampler:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe9\xab\x98\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd_object.resample(\'21D\').mean()\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xb0\x83\xe7\x94\xa8""""""\n        how = kwargs.pop(\'how\', \'\')\n        rep_obj = pd_object.resample(rule)\n        if hasattr(rep_obj, how):\n            return getattr(rep_obj, how)()\n        print(\'rep_obj how is error set!!!\')\n        return rep_obj\n    else:\n        """"""pandas\xe7\x89\x88\xe6\x9c\xac\xe4\xbd\x8e\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82pd_object.resample(\'21D\').how\xe6\x96\xb9\xe6\xb3\x95\xe8\xb0\x83\xe7\x94\xa8, \xe4\xb9\x9f\xe5\xb0\xb1\xe4\xb8\x8d\xe7\x94\xa8kwargs.pop(\'how\', \'\')\xe4\xba\x86""""""\n        return pd_object.resample(rule, *args, **kwargs)\n'"
abupy/CoreBu/ABuStore.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x92\x88\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe5\xad\x98\xe5\x82\xa8\xef\xbc\x8c\xe8\xaf\xbb\xe5\x8f\x96\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nimport os\nfrom collections import namedtuple\nfrom enum import Enum\nimport datetime\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu import ABuFileUtil\n\n\n# noinspection PyClassHasNoInit\nclass AbuResultTuple(namedtuple(\'AbuResultTuple\',\n                                (\'orders_pd\',\n                                 \'action_pd\',\n                                 \'capital\',\n                                 \'benchmark\'))):\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8abu.run_loop_back\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84nametuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x9a\n\n        orders_pd\xef\xbc\x9a\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        action_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        capital:   \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    __slots__ = ()\n\n    def __repr__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aorders_pd.info, action_pd.info, capital, benchmark""""""\n        return ""orders_pd:{}\\naction_pd:{}\\ncapital:{}\\nbenchmark:{}"".format(\n            self.orders_pd.info(),\n            self.action_pd.info(),\n            self.capital, self.benchmark)\n\n\nclass EStoreAbu(Enum):\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84enum\xe7\xb1\xbb\xe5\x9e\x8b""""""\n\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe6\x99\xae\xe9\x80\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\xba\xe7\xa9\xba""""""\n    E_STORE_NORMAL = 0\n\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\xbatrain""""""\n    E_STORE_TRAIN = 1\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\xbatest""""""\n    E_STORE_TEST = 2\n\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xbb\xe8\xa3\x81ump\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\xbatest_ump""""""\n    E_STORE_TEST_UMP = 3\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xbb\xe8\xa3\x81\xef\xbc\x8b\xe8\xbe\xb9\xe8\xa3\x81ump\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\xbatest_ump_with_edge""""""\n    E_STORE_TEST_UMP_WITH_EDGE = 4\n\n    """"""\xe4\xbf\x9d\xe5\xad\x98\xe6\xb5\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\xba\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2""""""\n    E_STORE_CUSTOM_NAME = 5\n\n\ndef dump_custom_abu_index_csv(custom_name, custom_desc):\n    """"""\n    \xe5\xb0\x86\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe6\x96\x87\xe4\xbb\xb6\xe5\x81\x9aindex\xe6\x8f\x8f\xe8\xbf\xb0\xe8\xae\xb0\xe5\xbd\x95\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe7\x89\xb9\xe5\xae\x9a\xe4\xbf\x9d\xe5\xad\x98\xe5\xb7\xb2custom_name\xe4\xb8\xba\xe7\xb4\xa2\xe5\xbc\x95index\xef\xbc\x8c\n    custom_desc\xe4\xb8\xba\xe5\x86\x85\xe5\xae\xb9\xe7\x9a\x84\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\x80\xe5\x88\x97\xe7\x9a\x84DataFrame\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8cache\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\xad\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\xbacsv\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x96\x87\xe4\xbb\xb6custom_abu_index.csv\n    :param custom_name: custom_name\xe4\xb8\xba\xe7\xb4\xa2\xe5\xbc\x95index\n    :param custom_desc: \xe6\x9e\x84\xe6\x88\x90DataFrame\xe6\x95\xb0\xe6\x8d\xaecustom_desc\xe4\xb8\xba\xe5\x86\x85\xe5\xae\xb9\n    """"""\n    # \xe6\x97\xa0\xe6\x8f\x8f\xe8\xbf\xb0\xe6\x98\xbe\xe7\xa4\xbaNo description\n    custom_desc = \'No description\' if custom_desc is None else custom_desc\n    # \xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\xe4\xb8\x80\xe8\xa1\x8c\xe4\xb8\x80\xe5\x88\x97\xe7\x9a\x84DataFrame\xe6\x95\xb0\xe6\x8d\xae\n    index_path = np.array([custom_desc]).reshape(1, 1)\n    # custom_name\xe4\xb8\xba\xe7\xb4\xa2\xe5\xbc\x95index\xef\xbc\x8ccustom_desc\xe4\xb8\xba\xe5\x86\x85\xe5\xae\xb9\n    index_df = pd.DataFrame(index_path, index=[custom_name],\n                            columns=[\'description\'])\n\n    # \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8cache\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\xad\n    index_csv_path = os.path.join(ABuEnv.g_project_data_dir, \'cache\', \'custom_abu_index.csv\')\n    ABuFileUtil.ensure_dir(index_csv_path)\n\n    index_csv_df = ABuFileUtil.load_df_csv(index_csv_path)\n    if index_csv_df is not None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe7\xb4\xa2\xe5\xbc\x95\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe4\xb8\x8d\xe5\x86\x8d\xe5\x86\x99\xe5\x85\xa5\n        if custom_name in index_csv_df.index:\n            return\n        index_csv_df = index_csv_df.append(index_df)\n    else:\n        index_csv_df = index_df\n    # \xe6\x9c\x80\xe7\xbb\x88dump\xe4\xb8\xbacsv\xe6\x96\x87\xe4\xbb\xb6\n    ABuFileUtil.dump_df_csv(index_csv_path, index_csv_df)\n\n\ndef dump_custom_ump_index_csv(custom_name, ump_unique, is_main_ump, custom_desc):\n    """"""\n    \xe5\xb0\x86ump\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\x81\x9aindex\xe6\x8f\x8f\xe8\xbf\xb0\xe8\xae\xb0\xe5\xbd\x95\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe7\x89\xb9\xe5\xae\x9a\xe4\xbf\x9d\xe5\xad\x98\xe5\xb7\xb2custom_name + ump_unique\xe4\xb8\xba\xe7\xb4\xa2\xe5\xbc\x95index\xef\xbc\x8c\n    custom_desc, is_main_ump, ump_unique\xe4\xb8\xba\xe5\x86\x85\xe5\xae\xb9\xe7\x9a\x84\xe4\xb8\x80\xe8\xa1\x8c3\xe5\x88\x97\xe7\x9a\x84DataFrame\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8ump\xe7\xbc\x93\xe5\xad\x98\xe7\x9b\xae\xe5\xbd\x95\n    \xe4\xb8\xad\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\xbacsv\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x96\x87\xe4\xbb\xb6custom_ump_index.csv\n    :param custom_name: custom_name + ump_unique\xe4\xb8\xba\xe7\xb4\xa2\xe5\xbc\x95index\n    :param ump_unique: ump\xe7\xb1\xbb\xe7\x9a\x84\xe6\xa0\x87\xe8\xaf\x86str\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8cump.class_unique_id()\n    :param is_main_ump: \xe6\x98\xaf\xe4\xb8\xbb\xe8\xa3\x81\xe8\xbf\x98\xe6\x98\xaf\xe8\xbe\xb9\xe8\xa3\x81\xe6\xa0\x87\xe8\xaf\x86str\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8ceg\xef\xbc\x9amain or edge\n    :param custom_desc: ump\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x8f\x8f\xe8\xbf\xb0str\n    """"""\n    # \xe6\x97\xa0\xe6\x8f\x8f\xe8\xbf\xb0\xe6\x98\xbe\xe7\xa4\xbaNo description\n    custom_desc = \'No description\' if custom_desc is None else custom_desc\n    # \xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\xe4\xb8\x80\xe8\xa1\x8c3\xe5\x88\x97\xe7\x9a\x84DataFrame\xe6\x95\xb0\xe6\x8d\xae\n    index_path = np.array([custom_desc, ump_unique, is_main_ump]).reshape(1, 3)\n    # custom_desc, is_main_ump, ump_unique\xe4\xb8\xba\xe5\x86\x85\xe5\xae\xb9\xe7\x9a\x84\xe4\xb8\x80\xe8\xa1\x8c3\xe5\x88\x97\xe7\x9a\x84DataFrame\xe6\x95\xb0\xe6\x8d\xae\n    index_df = pd.DataFrame(index_path, index=[\'{}:{}\'.format(ump_unique, custom_name)],\n                            columns=[\'description\', \'ump_unique\', \'is_main_ump\'])\n\n    # \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8ump\xe7\xbc\x93\xe5\xad\x98\xe7\x9b\xae\xe5\xbd\x95\n    index_csv_path = os.path.join(ABuEnv.g_project_data_dir, \'ump\', \'custom_ump_index.csv\')\n    ABuFileUtil.ensure_dir(index_csv_path)\n\n    index_csv_df = ABuFileUtil.load_df_csv(index_csv_path)\n    if index_csv_df is not None:\n        if custom_name in index_csv_df.index:\n            return\n        index_csv_df = index_csv_df.append(index_df)\n    else:\n        index_csv_df = index_df\n    # \xe6\x9c\x80\xe7\xbb\x88dump\xe4\xb8\xbacsv\xe6\x96\x87\xe4\xbb\xb6\n    ABuFileUtil.dump_df_csv(index_csv_path, index_csv_df)\n\n\ndef _load_custom_index(*paths):\n    """"""\xe6\x89\xa7\xe8\xa1\x8c\xe8\xaf\xbb\xe5\x8f\x96csv\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87abu\xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xae\xe5\xbd\x95 + *paths\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe6\x88\x90\xe8\xaf\xbb\xe5\x8f\x96\xe8\xb7\xaf\xe5\xbe\x84""""""\n    index_csv_path = os.path.join(ABuEnv.g_project_data_dir, *paths)\n    index_csv_df = ABuFileUtil.load_df_csv(index_csv_path)\n    return index_csv_df\n\n\ndef load_custom_abu_index():\n    """"""\xe8\xaf\xbb\xe5\x8f\x96\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87abu\xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xae\xe5\xbd\x95 + cache + custom_abu_index.csv\xe6\x9e\x84\xe6\x88\x90\xe8\xaf\xbb\xe5\x8f\x96\xe8\xb7\xaf\xe5\xbe\x84""""""\n    return _load_custom_index(\'cache\', \'custom_abu_index.csv\')\n\n\ndef load_custom_ump_index():\n    """"""\xe8\xaf\xbb\xe5\x8f\x96\xe8\xa3\x81\xe5\x88\xa4ump\xe8\xae\xad\xe7\xbb\x83\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87abu\xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xae\xe5\xbd\x95 + ump + custom_ump_index.csv\xe6\x9e\x84\xe6\x88\x90\xe8\xaf\xbb\xe5\x8f\x96\xe8\xb7\xaf\xe5\xbe\x84""""""\n    return _load_custom_index(\'ump\', \'custom_ump_index.csv\')\n\n\ndef _del_custom_index(custom_name, *paths):\n    """"""\xe6\x89\xa7\xe8\xa1\x8c\xe5\x88\xa0\xe9\x99\xa4\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xe4\xb8\xad\xe6\x9f\x90\xe4\xb8\x80\xe7\x89\xb9\xe5\xae\x9a\xe8\xa1\x8c\xef\xbc\x8ccustom_name\xe4\xb8\xba\xe8\xa1\x8c\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8cdrop""""""\n    index_csv_path = os.path.join(ABuEnv.g_project_data_dir, *paths)\n    index_csv_df = ABuFileUtil.load_df_csv(index_csv_path)\n\n    if custom_name in index_csv_df.index:\n        index_csv_df.drop(custom_name, inplace=True)\n        ABuFileUtil.dump_df_csv(index_csv_path, index_csv_df)\n\n\ndef del_custom_abu_index(custom_name):\n    """"""\xe5\x88\xa0\xe9\x99\xa4\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xe4\xb8\xad\xe6\x9f\x90\xe4\xb8\x80\xe7\x89\xb9\xe5\xae\x9a\xe8\xa1\x8c\xef\xbc\x8ccustom_name\xe4\xb8\xba\xe8\xa1\x8c\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8cdrop""""""\n    return _del_custom_index(custom_name, \'cache\', \'custom_abu_index.csv\')\n\n\ndef del_custom_ump_index(custom_name):\n    """"""\xe5\x88\xa0\xe9\x99\xa4\xe8\xa3\x81\xe5\x88\xa4ump\xe8\xae\xad\xe7\xbb\x83\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xe4\xb8\xad\xe6\x9f\x90\xe4\xb8\x80\xe7\x89\xb9\xe5\xae\x9a\xe8\xa1\x8c\xef\xbc\x8ccustom_name\xe4\xb8\xba\xe8\xa1\x8c\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8cdrop""""""\n    return _del_custom_index(custom_name, \'ump\', \'custom_ump_index.csv\')\n\n\ndef _cache_abu_result_path(n_folds, store_type, custom_name):\n    """"""\xe7\x94\xb1\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe6\x89\x80\xe6\x9c\x89\xe5\x8d\x95\xe5\xad\x90\xe5\xad\x98\xe8\xb4\xae\xe8\xb7\xaf\xe5\xbe\x84""""""\n    fn_root = ABuEnv.g_project_cache_dir\n    fn_head = \'\' if n_folds is None else \'n{}_\'.format(n_folds)\n\n    # \xe6\xa0\xb9\xe6\x8d\xaeEStoreAbu\xe6\x9d\xa5\xe5\x86\xb3\xe5\xae\x9afn_head\n    if store_type == EStoreAbu.E_STORE_TEST:\n        fn_head += \'test\'\n    elif store_type == EStoreAbu.E_STORE_TEST_UMP:\n        fn_head += \'test_ump\'\n    elif store_type == EStoreAbu.E_STORE_TEST_UMP_WITH_EDGE:\n        fn_head += \'test_ump_with_edge\'\n    elif store_type == EStoreAbu.E_STORE_TRAIN:\n        fn_head += \'train\'\n    elif store_type == EStoreAbu.E_STORE_CUSTOM_NAME:\n        fn_head += custom_name\n    elif store_type != EStoreAbu.E_STORE_NORMAL:\n        raise ValueError(\'store_type error!!!\')\n\n    # eg: n2_test_orders_pd\n    orders_key = fn_head + \'_orders_pd\'\n    orders_path = os.path.join(fn_root, orders_key)\n    # \xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81ensure_dir\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xba\x86\n    ABuFileUtil.ensure_dir(orders_path)\n\n    # eg: n2_test_action_pd\n    action_key = fn_head + \'_action_pd\'\n    action_path = os.path.join(fn_root, action_key)\n\n    # eg: n2_test_capital\n    capital_path = os.path.join(fn_root, fn_head + \'_capital\')\n\n    # eg: n2_test_benchmark\n    benchmark_path = os.path.join(fn_root, fn_head + \'_benchmark\')\n\n    return orders_path, orders_key, action_path, action_key, capital_path, benchmark_path\n\n\ndef store_abu_result_tuple(abu_result_tuple, n_folds=None, store_type=EStoreAbu.E_STORE_NORMAL,\n                           custom_name=None):\n    """"""\n    \xe4\xbf\x9d\xe5\xad\x98abu.run_loop_back\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9cAbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaen_folds\xef\xbc\x8cstore_type\xe5\x8f\x82\xe6\x95\xb0\n    \xe6\x9d\xa5\xe5\xae\x9a\xe4\xb9\x89\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n\n    :param abu_result_tuple: AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\n    :param n_folds: \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\x86\xe5\x87\xa0\xe5\xb9\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe5\xad\x98\xe8\xb4\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param store_type: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbf\x9d\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8bEStoreAbu\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe5\xad\x98\xe8\xb4\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param custom_name: \xe5\xa6\x82\xe6\x9e\x9cstore_type=EStoreAbu.E_STORE_CUSTOM_NAME\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    """"""\n    orders_path, orders_key, action_path, action_key, capital_path, benchmark_path = _cache_abu_result_path(\n        n_folds, store_type, custom_name)\n    # abu_result_tuple.orders_pd\xe4\xbd\xbf\xe7\x94\xa8dump_hdf5\xe5\xad\x98\xe5\x82\xa8\n    ABuFileUtil.dump_hdf5(orders_path, abu_result_tuple.orders_pd, orders_key)\n    # abu_result_tuple.action_pd\xe4\xbd\xbf\xe7\x94\xa8dump_hdf5\xe5\xad\x98\xe5\x82\xa8\n    ABuFileUtil.dump_hdf5(action_path, abu_result_tuple.action_pd, action_key)\n    # abu_result_tuple.capital\xe4\xbd\xbf\xe7\x94\xa8dump_pickle\xe5\xad\x98\xe5\x82\xa8AbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\n    ABuFileUtil.dump_pickle(abu_result_tuple.capital, capital_path)\n    # abu_result_tuple.benchmark\xe4\xbd\xbf\xe7\x94\xa8dump_pickle\xe5\xad\x98\xe5\x82\xa8AbuBenchmark\xe5\xaf\xb9\xe8\xb1\xa1\n    ABuFileUtil.dump_pickle(abu_result_tuple.benchmark, benchmark_path)\n\n\ndef load_abu_result_tuple(n_folds=None, store_type=EStoreAbu.E_STORE_NORMAL, custom_name=None):\n    """"""\n    \xe8\xaf\xbb\xe5\x8f\x96\xe4\xbd\xbf\xe7\x94\xa8store_abu_result_tuple\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaen_folds\xef\xbc\x8cstore_type\xe5\x8f\x82\xe6\x95\xb0\n    \xe6\x9d\xa5\xe5\xae\x9a\xe4\xb9\x89\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xaf\xbb\xe5\x8f\x96orders_pd\xef\xbc\x8caction_pd\xef\xbc\x8ccapital\xef\xbc\x8cbenchmark\xe5\x90\x8e\xe6\x9e\x84\xe9\x80\xa0\n    AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x94\xe5\x9b\x9e\n\n    :param n_folds: \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\x86\xe5\x87\xa0\xe5\xb9\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param store_type: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbf\x9d\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8bEStoreAbu\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param custom_name: \xe5\xa6\x82\xe6\x9e\x9cstore_type=EStoreAbu.E_STORE_CUSTOM_NAME\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :return: AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    orders_path, orders_key, action_path, action_key, capital_path, benchmark_path = _cache_abu_result_path(\n        n_folds, store_type, custom_name)\n    # load_hdf5\xe8\xaf\xbb\xe5\x8f\x96pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1orders_pd\n    orders_pd = ABuFileUtil.load_hdf5(orders_path, orders_key)\n    # load_hdf5\xe8\xaf\xbb\xe5\x8f\x96pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1action_pd\n    action_pd = ABuFileUtil.load_hdf5(action_path, action_key)\n    # load_pickle\xe8\xaf\xbb\xe5\x8f\x96AbuCapital\xe5\xaf\xb9\xe8\xb1\xa1capital\xef\xbc\x8cAbuCapital\xe6\xb7\xb7\xe5\x85\xa5\xe4\xba\x86\xe7\xb1\xbbPickleStateMixin\n    capital = ABuFileUtil.load_pickle(capital_path)\n    # load_pickle\xe8\xaf\xbb\xe5\x8f\x96AbuBenchmark\xe5\xaf\xb9\xe8\xb1\xa1benchmark\xef\xbc\x8cAbuBenchmark\xe6\xb7\xb7\xe5\x85\xa5\xe4\xba\x86\xe7\xb1\xbbPickleStateMixin\n    benchmark = ABuFileUtil.load_pickle(benchmark_path)\n    # \xe6\x9e\x84\xe5\xbb\xba\xe8\xbf\x94\xe5\x9b\x9eAbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\n    return AbuResultTuple(orders_pd, action_pd, capital, benchmark)\n\n\ndef delete_abu_result_tuple(n_folds=None, store_type=EStoreAbu.E_STORE_NORMAL, custom_name=None, del_index=False):\n    """"""\n    \xe5\x88\xa0\xe9\x99\xa4\xe6\x9c\xac\xe5\x9c\xb0store_abu_result_tuple\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaen_folds\xef\xbc\x8cstore_type\xe5\x8f\x82\xe6\x95\xb0\n    \xe6\x9d\xa5\xe5\xae\x9a\xe4\xb9\x89\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xaf\xbb\xe5\x8f\x96orders_pd\xef\xbc\x8caction_pd\xef\xbc\x8ccapital\xef\xbc\x8cbenchmark\xe5\x90\x8e\xe6\x9e\x84\xe9\x80\xa0\n    AbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x94\xe5\x9b\x9e\n\n    :param n_folds: \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe4\xba\x86\xe5\x87\xa0\xe5\xb9\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param store_type: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbf\x9d\xe5\xad\x98\xe7\xb1\xbb\xe5\x9e\x8bEStoreAbu\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param custom_name: \xe5\xa6\x82\xe6\x9e\x9cstore_type=EStoreAbu.E_STORE_CUSTOM_NAME\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :param del_index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x88\xa0\xe9\x99\xa4index csv\n    """"""\n\n    orders_path, _, action_path, _, capital_path, benchmark_path = _cache_abu_result_path(\n        n_folds, store_type, custom_name)\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x8d\x95\xe5\xad\x90\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8e\xe4\xbe\x9d\xe6\xac\xa1\xe5\x88\xa0\xe9\x99\xa4\n    ABuFileUtil.del_file(orders_path)\n    ABuFileUtil.del_file(action_path)\n    ABuFileUtil.del_file(capital_path)\n    ABuFileUtil.del_file(benchmark_path)\n\n    if del_index:\n        # \xe5\x88\xa0\xe9\x99\xa4\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8f\x8f\xe8\xbf\xb0\xe6\x96\x87\xe4\xbb\xb6\xe7\xb4\xa2\xe5\xbc\x95\xe8\xa1\x8c\n        del_custom_abu_index(custom_name)\n\n\ndef store_abu_result_out_put(abu_result_tuple, show_log=True):\n    """"""\n    \xe4\xbf\x9d\xe5\xad\x98abu.run_loop_back\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9cAbuResultTuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\xe4\xbf\x9d\xe5\xad\x98\xe6\x9d\xa5\xe5\xae\x9a\xe4\xb9\x89\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\n    \xe4\xb8\x8d\xe5\x90\x8c\xe4\xba\x8e\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8cache\xe4\xb8\xad\xef\xbc\x8c\xe5\xb0\x86\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8out_put\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\xad\xef\xbc\x8c\xe4\xb8\x94\xe6\x89\x80\xe6\x9c\x89\xe5\x8d\x95\xe5\xad\x90\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8csv\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8hdf5\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98\n    \xe4\xbf\x9d\xe8\xaf\x81\xe5\xa4\x96\xe9\x83\xa8\xe7\x9a\x84\xe5\x8f\xaf\xe8\xaf\xbb\xe6\x80\xa7\n    1. \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95: orders.csv\n    2. \xe8\xa1\x8c\xe5\x8a\xa8\xe5\x8d\x95: actions.csv\n    3. \xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95: capital.csv\n    4. \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9: commission.csv\n    """"""\n    base_dir = \'out_put\'\n    # \xe6\x97\xb6\xe9\x97\xb4\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    date_dir = datetime.datetime.now().strftime(""%Y_%m_%d_%H_%M_%S_%f"")\n    fn = os.path.join(ABuEnv.g_project_data_dir, base_dir, date_dir, \'orders.csv\')\n    ABuFileUtil.ensure_dir(fn)\n\n    fn = os.path.join(ABuEnv.g_project_data_dir, base_dir, date_dir, \'actions.csv\')\n    ABuFileUtil.dump_df_csv(fn, abu_result_tuple.action_pd)\n    if show_log:\n        print(\'save {} suc!\'.format(fn))\n\n    fn = os.path.join(ABuEnv.g_project_data_dir, base_dir, date_dir, \'capital.csv\')\n    ABuFileUtil.dump_df_csv(fn, abu_result_tuple.capital.capital_pd)\n    if show_log:\n        print(\'save {} suc!\'.format(fn))\n\n    fn = os.path.join(ABuEnv.g_project_data_dir, base_dir, date_dir, \'commission.csv\')\n    ABuFileUtil.dump_df_csv(fn, abu_result_tuple.capital.commission.commission_df)\n    if show_log:\n        print(\'save {} suc!\'.format(fn))\n'"
abupy/CoreBu/__init__.py,0,"b""# IN ABu LIST __all__\nfrom __future__ import absolute_import\n\nfrom .ABuFixes import *\nfrom .ABuPdHelper import *\nfrom . import ABuEnv as env\nfrom . import ABu as abu\nfrom .ABuEnv import EMarketSourceType, EMarketTargetType, EMarketSubType, \\\n    EMarketDataSplitMode, EMarketDataFetchMode, EDataCacheType\nfrom .ABuBase import AbuParamBase, FreezeAttrMixin, PickleStateMixin\nfrom .ABuParallel import Parallel, delayed\nfrom .ABuStore import AbuResultTuple, EStoreAbu\n\n__all__ = [\n    'abu',\n    'AbuResultTuple',\n    'EStoreAbu',\n    'env',\n    'AbuParamBase',\n    'FreezeAttrMixin',\n    'PickleStateMixin',\n    'Parallel',\n    'delayed',\n    'EMarketSourceType',\n    'EMarketTargetType',\n    'EMarketSubType',\n    'EMarketDataSplitMode',\n    'EMarketDataFetchMode',\n    'EDataCacheType',\n\n    'train_test_split',\n    'KFold',\n    'learning_curve',\n    'cross_val_score',\n    'GridSearchCV',\n\n    'signature',\n    'Parameter',\n\n    'ThreadPoolExecutor',\n    'six',\n    'zip',\n    'xrange',\n    'range',\n    'reduce',\n    'map',\n    'filter',\n    'pickle',\n    'Pickler',\n    'Unpickler',\n    'partial',\n\n    'pd_rolling_mean',\n    'pd_rolling_std',\n    'pd_rolling_var',\n    'pd_rolling_median',\n    'pd_rolling_max',\n    'pd_rolling_min',\n    'pd_rolling_corr',\n    'pd_rolling_cov',\n    'pd_rolling_sum',\n    'pd_rolling_kurt',\n    'pd_rolling_skew',\n\n    'pd_ewm_mean',\n    'pd_ewm_corr',\n    'pd_ewm_std',\n    'pd_ewm_cov',\n    'pd_ewm_var',\n\n    'pd_expanding_mean',\n    'pd_expanding_std',\n    'pd_expanding_var',\n    'pd_expanding_median',\n    'pd_expanding_max',\n    'pd_expanding_min',\n    'pd_expanding_corr',\n    'pd_expanding_cov',\n    'pd_expanding_sum',\n    'pd_expanding_kurt',\n    'pd_expanding_skew',\n\n    'pd_resample'\n]\n"""
abupy/CrawlBu/ABuXqApi.py,0,"b""# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport time\n\nfrom ..CoreBu import ABuFixes\n\n__author__ = '\xe5\xb0\x8f\xe9\x9d\x92\xe8\x9b\x99'\n__weixin__ = 'abu_quant'\n\nBASE_XQ_URL = 'https://xueqiu.com'\n\nBASE_XQ_HQ_URL = BASE_XQ_URL + '/hq'\n\nBASE_XQ_STOCK_INFO = BASE_XQ_URL + '/S/'\n\nBASE_XQ_HQ_EXCHANGE_URL = BASE_XQ_HQ_URL + '#exchange={}'\n\nCN_INDUSTRY_LIST = 'https://xueqiu.com/industry/quote_order.json?' \\\n                   'size=100&order=asc&orderBy=code&exchange=CN&'\nHK_INDUSTRY_LIST = 'https://xueqiu.com/stock/cata/stocklist.json?' \\\n                   'size=100&order=asc&orderby=code&exchange=HK&'\nUS_INDUSTRY_LIST = 'https://xueqiu.com/stock/cata/stocklist.json?' \\\n                   'size=100&order=asc&orderby=code&exchange=US&'\n\nCN_STOCK_LIST = 'https://xueqiu.com/stock/cata/stocklist.json?' \\\n                'size=100&order=asc&orderby=code&type=11%2C12&'\nHK_STOCK_LIST = 'https://xueqiu.com/stock/cata/stocklist.json?' \\\n                'size=100&order=asc&orderby=code&type=30%2C31&'\nUS_STOCK_LIST = 'https://xueqiu.com/stock/cata/stocklist.json?' \\\n                'size=100&order=asc&orderby=code&type=0%2C1%2C2%2C3&isdelay=1&'\n\nLOGIN_URL = 'https://xueqiu.com/user/login'\n\n# \xe9\x9b\xaa\xe7\x90\x83url\xe4\xb8\xadtype\xe5\x80\xbc\nTYPE_INFO = {\n    0: 'us_stock',  # \xe7\xbe\x8e\xe8\x82\xa1(\xe4\xb8\x8d\xe5\x8c\x85\xe5\x90\xab\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8c\xba)\n    1: 'us_a_stock_NASDAQ',  # \xe5\x9c\xa8\xe6\x8b\x89\xe6\x96\xaf\xe8\xbe\xbe\xe5\x85\x8b\xe4\xb8\x8a\xe5\xb8\x82\xe7\x9a\x84\xe4\xb8\xad\xe5\x9b\xbd\xe8\x82\xa1\xe7\xa5\xa8\n    2: 'us_a_stock_NYSE',  # \xe5\x9c\xa8\xe7\xba\xbd\xe4\xba\xa4\xe6\x89\x80\xe4\xb8\x8a\xe5\xb8\x82\xe7\x9a\x84\xe4\xb8\xad\xe5\x9b\xbd\xe8\x82\xa1\xe7\xa5\xa8\n    3: 'us_index',  # \xe7\xbe\x8e\xe5\x9b\xbd\xe6\x8c\x87\xe6\x95\xb0\n    11: 'a_stock',  # A\xe8\x82\xa1\n    12: 'a_index',  # A\xe8\x82\xa1\xe6\x8c\x87\xe6\x95\xb0\n    30: 'hk_stock',  # \xe6\xb8\xaf\xe8\x82\xa1\n    31: 'hk_index',  # \xe6\xb8\xaf\xe8\x82\xa1\xe6\x8c\x87\xe6\x95\xb0\n}\n\n\nclass IndustryUrl(object):\n    def __init__(self, market, **kwargs):\n        self.market = market\n        self.kwargs = kwargs\n        self._base_url = None\n        self.init_base_url()\n\n    def init_base_url(self):\n        if 'CN' == self.market:\n            self._base_url = CN_INDUSTRY_LIST\n        elif 'HK' == self.market:\n            self._base_url = HK_INDUSTRY_LIST\n        elif 'US' == self.market:\n            self._base_url = US_INDUSTRY_LIST\n        else:\n            raise RuntimeError('only support {}'.format(['US', 'CN', 'HK']))\n\n    @property\n    def url(self):\n        param = dict(self.kwargs)\n        param['_'] = time.time()\n\n        return self._base_url + ABuFixes.urlencode(param)\n\n\nclass StockListUrl(IndustryUrl):\n    def init_base_url(self):\n        if 'CN' == self.market:\n            self._base_url = CN_STOCK_LIST\n        elif 'HK' == self.market:\n            self._base_url = HK_STOCK_LIST\n        elif 'US' == self.market:\n            self._base_url = US_STOCK_LIST\n        else:\n            raise RuntimeError('only support {}'.format(['US', 'CN', 'HK']))\n\n\ndef test():\n    print(IndustryUrl('CN', plate='\xe4\xbf\x9d\xe9\x99\xa9\xe4\xb8\x9a', page=1, level2code='J68').url)\n    print(IndustryUrl('US', plate='\xe9\x87\x91\xe8\x9e\x8d', page=1).url)\n    print(IndustryUrl('HK', plate='\xe4\xbf\x9d\xe9\x99\xa9', page=1).url)\n"""
abupy/CrawlBu/ABuXqConsts.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\n__author__ = \'\xe5\xb0\x8f\xe9\x9d\x92\xe8\x9b\x99\'\n__weixin__ = \'abu_quant\'\n\n""""""\ns:static\nd:dynamic\nco: company\npb: price book ratio\npe: price earning ratio\nps: price sales ratio\nasset : net_asset_value_per_share\noo:organization_ownership\ncc:circulation_capital\nmv:market_value\nsc:short_covering\n""""""\ncolumns_map = {\n    ""symbol"": \'symbol\',\n    ""market"": \'market\',\n    ""exchange"": \'exchange\',\n\n    ""industry"": \'industry\',\n    ""name"": \'co_name\',\n    ""\xe5\x85\xac\xe5\x8f\xb8\xe7\xbd\x91\xe7\xab\x99:"": \'co_site\',\n    ""\xe5\x85\xac\xe5\x8f\xb8\xe7\x94\xb5\xe8\xaf\x9d\xef\xbc\x9a"": \'co_tel\',\n    ""\xe5\x85\xac\xe5\x8f\xb8\xe5\x9c\xb0\xe5\x9d\x80\xef\xbc\x9a"": \'co_addr\',\n    ""\xe4\xb8\x9a\xe5\x8a\xa1:"": \'co_business\',\n    ""\xe7\xae\x80\xe4\xbb\x8b:"": \'co_intro\',\n\n    ""\xe5\xb8\x82\xe7\x9b\x88\xe7\x8e\x87(\xe9\x9d\x99)/(\xe5\x8a\xa8)\xef\xbc\x9a"": \'pe_s_d\',\n    ""\xe5\xb8\x82\xe5\x87\x80\xe7\x8e\x87(\xe5\x8a\xa8)\xef\xbc\x9a"": \'pb_d\',\n    ""\xe5\xb8\x82\xe5\x87\x80\xe7\x8e\x87MRQ\xef\xbc\x9a"": \'pb_MRQ\',\n    ""\xe5\xb8\x82\xe9\x94\x80\xe7\x8e\x87(\xe5\x8a\xa8)\xef\xbc\x9a"": \'ps_d\',\n    ""\xe5\xb8\x82\xe9\x94\x80\xe7\x8e\x87\xef\xbc\x9a"": \'ps\',\n    ""\xe5\xb8\x82\xe7\x9b\x88\xe7\x8e\x87(\xe9\x9d\x99)\xef\xbc\x9a"": \'pe_s\',\n    ""\xe6\x8d\xa2\xe6\x89\x8b\xe7\x8e\x87\xef\xbc\x9a"": \'turnover\',\n\n    ""\xe6\xaf\x8f\xe8\x82\xa1\xe5\x87\x80\xe8\xb5\x84\xe4\xba\xa7\xef\xbc\x9a"": \'asset\',\n    ""\xe6\xb5\x81\xe9\x80\x9a\xe8\x82\xa1\xe6\x9c\xac\xef\xbc\x9a"": \'cc\',\n    ""\xe6\x8c\xaf\xe5\xb9\x85\xef\xbc\x9a"": \'amplitude\',\n    ""\xe7\xa9\xba\xe5\xa4\xb4\xe8\xa1\xa5\xe5\x9b\x9e\xe5\xa4\xa9\xe6\x95\xb0\xef\xbc\x9a"": \'sc\',\n    ""\xe6\x8b\x9b\xe8\x82\xa1\xe8\xaf\xb4\xe6\x98\x8e\xe4\xb9\xa6\xef\xbc\x9a"": \'prospectus\',\n    ""\xe6\x80\xbb\xe8\x82\xa1\xe6\x9c\xac\xef\xbc\x9a"": \'equity\',\n    ""\xe6\x80\xbb\xe5\xb8\x82\xe5\x80\xbc\xef\xbc\x9a"": \'mv\',\n    ""\xe6\x9c\xba\xe6\x9e\x84\xe6\x8c\x81\xe8\x82\xa1\xef\xbc\x9a"": \'oo\',\n    ""\xe6\xb8\xaf\xe8\x82\xa1\xe8\x82\xa1\xe6\x9c\xac\xef\xbc\x9a"": \'hk_equity\'\n}\n'"
abupy/CrawlBu/ABuXqCrawl.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport pandas as pd\n\nimport math\nimport logging\n\nfrom os import path\n\nfrom abupy.CrawlBu import ABuXqFile\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig\nfrom ..CrawlBu.ABuXqFile import map_stock_list\nfrom .ABuXqCrawlImp import StockInfoListBrower, StockListCrawlBrower\nfrom .ABuXqCrawlImp import NavHQCrawlBrower\n\nfrom ..CoreBu.ABuEnv import g_project_rom_data_dir\nfrom ..CoreBu.ABuParallel import Parallel, delayed\nfrom ..UtilBu import ABuDTUtil\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import map, reduce, filter\n\n__author__ = \'\xe5\xb0\x8f\xe9\x9d\x92\xe8\x9b\x99\'\n__weixin__ = \'abu_quant\'\n\n_NAV_PATH = path.join(g_project_rom_data_dir, \'hq_nav.txt\')\n\n\n@add_process_env_sig\ndef __crawl_stock_parallel(market, url):\n    with StockListCrawlBrower(url) as crawler:\n        name, symbol = crawler.crawl()\n        df = pd.DataFrame({\'name\': name, \'symbol\': symbol})\n        if market == \'CN\':\n            # \xe7\xa1\xae\xe4\xbf\x9d\xe9\x83\xbd\xe6\x98\xafA\xe8\x82\xa1\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84symbol\n            df = df.loc[\n                list(\n                    map(lambda s: (s[:2] in [\'SZ\', \'SH\', \'sz\', \'sh\']) and str(s[2:]).isdigit(), df[\'symbol\'].tolist()))]\n            df[\'market\'] = df[\'symbol\'].map(lambda s: s[:2])\n        else:\n            df[\'market\'] = market\n\n        df.to_csv(map_stock_list(market), index=False)\n\n\n@add_process_env_sig\ndef __crawl_stock_info_parallel(market, symbols, process):\n    with StockInfoListBrower(market, symbols) as stockInfo:\n        rest = stockInfo.crawl(process=process)\n        print(rest)\n\n\ndef hq_nav():\n    """"""\n    :return: dict\n    \xe4\xb8\x80\xe7\xba\xa7\xe8\x8f\x9c\xe5\x8d\x95\xef\xbc\x9a\xe7\xb1\xbb\xe5\x88\xab\xef\xbc\x8c\xe5\xa6\x82\xe3\x80\x82\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe6\xb2\xaa\xe6\xb7\xb1\xef\xbc\x8c\xe5\x9f\xba\xe9\x87\x91\xef\xbc\x8c\xe5\x80\xba\xe5\x88\xb8\xe7\xad\x89\n    \xe4\xba\x8c\xe7\xba\xa7\xe8\x8f\x9c\xe5\x8d\x95\xef\xbc\x9a\xe5\xa6\x82\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xe4\xb8\x80\xe8\xa7\x88\xe7\xad\x89\n    \xe4\xb8\x89\xe7\xba\xa7\xe8\x8f\x9c\xe5\x8d\x95\xef\xbc\x9a\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe6\x9c\x89(,\xe6\xaf\x94\xe5\xa6\x82\xe8\xa1\x8c\xe4\xb8\x9a\xe5\xb0\xb1\xe9\x9c\x80\xe7\xbb\x86\xe5\x88\x86)\n    """"""\n    with NavHQCrawlBrower() as nav:\n        return nav.crawl()\n\n\n@ABuDTUtil.warnings_filter\ndef crawl_stock_code(markets=(\'CN\', \'HK\', \'US\')):\n    """"""\n    \xe4\xbb\x8e\xe9\x9b\xaa\xe7\x90\x83\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe5\xb8\x82\xe4\xbb\xa3\xe7\xa0\x81\n    :param markets: \xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\n    """"""\n    nav = hq_nav()\n    urls = dict()\n    for market_nav in nav:\n        for first_menu in nav[market_nav]:\n            if first_menu in [u\'\xe6\xb2\xaa\xe6\xb7\xb1\xe4\xb8\x80\xe8\xa7\x88\'] and \'CN\' in markets:\n                urls[\'CN\'] = nav[market_nav][first_menu]\n            if first_menu in [u\'\xe6\xb8\xaf\xe8\x82\xa1\xe4\xb8\x80\xe8\xa7\x88\'] and \'HK\' in markets:\n                urls[\'HK\'] = nav[market_nav][first_menu]\n            if first_menu in [u\'\xe7\xbe\x8e\xe8\x82\xa1\xe4\xb8\x80\xe8\xa7\x88\'] and \'US\' in markets:\n                urls[\'US\'] = nav[market_nav][first_menu]\n\n    Parallel(n_jobs=-1)(delayed(__crawl_stock_parallel)(m, urls[m]) for m in urls)\n\n\ndef crawl_stock_info(markets):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x8c\xe8\x82\xa1\xe5\xb8\x82\xe7\xae\x80\xe4\xbb\x8b\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\x9a\xef\xbc\x8c\xe5\xb8\x82\xe5\x80\xbc\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\n    :param markets:\n    """"""\n    _markets = []\n    _parts = []\n    for m in markets:\n        symbols = ABuXqFile.read_stock_symbol_list(m)\n        interval = 1000\n\n        # \xe5\xb0\x86 symbols \xe5\x88\x92\xe5\x88\x86\xe6\x88\x90\xe4\xb8\x80\xe7\xbb\x841000\xe4\xb8\xaa\n        for s in range(int(math.ceil(len(symbols) / interval))):\n            st = s * interval\n            en = (s + 1) * interval if (s + 1) * interval <= len(symbols) else len(symbols)\n            _parts.append(symbols[st:en])\n            _markets.append(m)\n    # \xe5\xbc\x80\xe5\x90\xaflen(_parts)\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x90\x8c\xe6\x97\xb6\n    print(\'\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0{}\'.format(len(_parts)))\n\n    parallel = Parallel(n_jobs=-1)\n    parallel(delayed(__crawl_stock_info_parallel)(m, p, i)\n             for i, (m, p) in enumerate(zip(_markets, _parts)))\n\n\ndef ensure_symbol(symbol):\n    """"""\n    \xe4\xbf\x9d\xe8\xaf\x81\xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84\xe8\x82\xa1\xe5\xb8\x82\xe4\xbb\xa3\xe7\xa0\x81\xe5\xba\x93\xe7\xba\xaf\xe5\x9c\xa8\xe8\xaf\xa5symbol\xe6\x89\x8d\xe8\x83\xbd\xe6\x9f\xa5\xe7\x9c\x8bstock info\n    A \xe8\x82\xa1 sh\xe3\x80\x81sz\xe5\xbc\x80\xe5\xa4\xb4 + 6\xe4\xbd\x8d\xe6\x95\xb0\xe5\xad\x97\n    HK \xe8\x82\xa1 5\xe4\xbd\x8d\xe6\x95\xb0\xe5\xad\x97\n    UK \xe8\x82\xa1 \xe8\x8b\xb1\xe6\x96\x87\xe4\xbb\xa3\xe7\xa0\x81\n    :param symbol:\n    :return:\n    """"""\n    symbol = str(symbol).upper()\n    if (len(symbol) == 6 and str(symbol).isdigit()) or (\n                        len(symbol) == 8 and symbol[:2] in [\'SZ\', \'SH\'] and str(symbol[2:]).isdigit()):\n        market = \'CN\'\n    elif (len(symbol) == 5 and str(symbol).isdigit()) or (\n                        len(symbol) == 7 and symbol[:2] in [\'HK\'] and str(symbol[2:]).isdigit()):\n        market = \'HK\'\n    else:\n        market = \'US\'\n    stock_list = ABuXqFile.read_stock_symbol_list(market)\n\n    if market in [\'CN\']:\n        # symbol\xe8\x87\xaa\xe5\xb8\xa6 sh\xe6\x88\x96sz\n        if len(symbol) == 8:\n            return market, symbol\n        # \xe6\xad\xa4\xe5\x88\xbb symbol\xe6\x98\xaf6\xe4\xbd\x8d\xe6\x95\xb0\xe5\xad\x97\n        sh_code = \'SH{}\'.format(symbol)\n        sz_code = \'SZ{}\'.format(symbol)\n        is_sh = sh_code in stock_list\n        is_sz = sz_code in stock_list\n\n        if is_sz and is_sh:\n            # \xe5\x8d\xb3\xe4\xbd\xbf \xe4\xb8\x8a\xe8\xaf\x81\xe5\x8f\x88\xe6\x98\xaf\xe6\xb7\xb1\xe5\x9c\xb3\xe8\x82\xa1\n            sh_name = ABuXqFile.read_stock_symbol_name(market, sh_code)\n            sz_name = ABuXqFile.read_stock_symbol_name(market, sz_code)\n            logging.error(\n                \'\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x85\xb3\xe4\xba\x8e{}\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8{}({}),{}({}),\xe8\xaf\xb7\xe6\x94\xb9\xe5\x86\x99{}\xe6\x88\x90{}\xe6\x88\x96{}\'.format(\n                    symbol, sh_code, sh_name, sz_code, sz_name, symbol, sz_code, sh_code))\n            return market, None\n        elif is_sh:\n            return market, sh_code\n        elif is_sz:\n            return sz_code\n        else:\n            pass\n    elif market in [\'US\', \'HK\']:\n        if symbol in stock_list:\n            return market, symbol\n\n    logging.error(\'\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\xbe\xe5\x88\xb0{}\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\'.format(symbol))\n    return market, None\n\n\ndef update_all(markets=(\'US\', \'CN\', \'HK\')):\n    crawl_stock_code(markets)\n    crawl_stock_info(markets)\n    ABuXqFile.merge_stock_info_to_stock_list(markets)\n    ABuXqFile.fix_xq_columns_name()\n\n\ndef query_symbol_info(symbol):\n    m, symbol = ensure_symbol(symbol)\n    return None if symbol is None else ABuXqFile.query_a_stock(m, symbol)\n'"
abupy/CrawlBu/ABuXqCrawlImp.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom abc import ABCMeta, abstractmethod\n\nimport logging\nimport time\n\nfrom . import ABuXqFile\n\nfrom ..CoreBu import env\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import map, reduce, filter\nfrom .ABuXqApi import BASE_XQ_HQ_URL\nfrom .ABuXqApi import BASE_XQ_STOCK_INFO\nfrom ..ExtBu import six\n\n__author__ = \'\xe5\xb0\x8f\xe9\x9d\x92\xe8\x9b\x99\'\n__weixin__ = \'abu_quant\'\n\n\ndef _bs4_html(content):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8BeautifulSoup\xe8\xa7\xa3\xe6\x9e\x90html\n    :param content: html\n    :return: BeautifulSoup\n    """"""\n    from bs4 import BeautifulSoup\n    return BeautifulSoup(content, \'lxml\')\n\n\ndef _xpath(content):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8xpath\xe8\xa7\xa3\xe6\x9e\x90html \n    :param content:\n    :return:\n    """"""\n    from lxml import etree\n    selector = etree.HTML(content)\n    return selector\n\n\nclass BaseXQCrawlBrower(six.with_metaclass(ABCMeta, object)):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8chrome\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe7\x9a\x84\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe6\xb5\x8b\xe8\xaf\x95\xe9\xa9\xb1\xe5\x8a\xa8\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbd\x91\xe9\xa1\xb5\xe6\x95\xb0\xe6\x8d\xae\n    """"""\n\n    def __init__(self, base_url):\n        self._base_url = base_url\n        if env.g_crawl_chrome_driver is not None:\n            self.driver_path = env.g_crawl_chrome_driver\n        else:\n            raise RuntimeError(\'driver_path error!!!, abupy.CoreBu.ABuEnv.g_crawl_chrome_driver must be right\')\n\n        # noinspection PyUnresolvedReferences\n        from selenium.webdriver.support import ui\n        # noinspection PyUnresolvedReferences\n        from selenium import webdriver\n        self.driver = webdriver.Chrome(self.driver_path)\n        self.wait = ui.WebDriverWait(self.driver, 10)\n\n    @abstractmethod\n    def _crawl_imp(self, *args, **kwargs):\n        pass\n\n    def get(self, url):\n        self.driver.get(url)\n\n    @property\n    def content(self):\n        return self.driver.page_source\n\n    def crawl(self, *args, **kwargs):\n        """"""\n        \xe6\x89\xa7\xe8\xa1\x8c\xe5\xae\x8c\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x98\xaf\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x80\xe5\x87\xba\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe5\x8d\xa0\xe7\x94\xa8\xe8\xb5\x84\xe6\xba\x90\xef\xbc\x8c\xe5\x9c\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x88\xac\xe6\x97\xb6\xe4\xbc\x9a\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xb8\xaachrome\xe5\xae\x9e\xe4\xbe\x8b\n        :param args:\n        :param kwargs:\n        :return: crawl_imp\n        """"""\n        ret = None\n        try:\n            self.driver.get(self._base_url)\n            self.driver.maximize_window()\n            ret = self._crawl_imp(*args, **kwargs)\n        except Exception as e:\n            logging.exception(e)\n        return ret\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.driver.quit()\n\n    def _scroll_to_bottom(self, element):\n        loc = element.location\n        self.driver.execute_script(\'window.scrollBy({},{})\'.format(loc[\'x\'], loc[\'y\']))\n\n\nclass BaseHQCrawlBrower(BaseXQCrawlBrower):\n    def _crawl_imp(self, *args, **kwargs):\n        pass\n\n    def __init__(self, url):\n        super(BaseHQCrawlBrower, self).__init__(BASE_XQ_HQ_URL)\n        self._base_url = self._base_url + url\n\n\nclass NavHQCrawlBrower(BaseHQCrawlBrower):\n    def _crawl_imp(self, *args, **kwargs):\n        return _parse_nav(self.driver.page_source)\n\n    def __init__(self):\n        super(NavHQCrawlBrower, self).__init__(\'\')\n\n\nclass StockListCrawlBrower(BaseHQCrawlBrower):\n    def _ensure_max_page_size(self):\n        """"""\n        \xe4\xbd\xbf\xe6\xaf\x8f\xe9\xa1\xb5\xe5\xb1\x95\xe7\xa4\xba\xe7\x9a\x84stock\xe6\x95\xb0\xe6\x9c\x80\xe5\xa4\x9a\xef\xbc\x8c\xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0\xe5\x8f\x98\xe5\xb0\x91\xef\xbc\x8c\xe4\xbd\xbf\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\xb7\xe6\xb1\x82\xe6\x95\xb0\xe5\x8f\x98\xe5\xb0\x91\n        """"""\n        max_page_tag = self.driver.find_element_by_xpath(\'//*[@id=""stockList-header""]/div[2]/a[3]\')\n        max_page_tag.click()\n        time_out = 30\n        while time_out:\n            time.sleep(1)\n            time_out -= 1\n            _, total = self._curr_total_page()\n            #  \xe7\x9b\xb4\xe5\x88\xb0 \xe6\x9c\x80\xe5\xa4\xa7size\xe7\x94\x9f\xe6\x95\x88\n            if total == 1 or self._curr_page_counts() == int(max_page_tag.text):\n                break\n\n    def _curr_page_counts(self):\n        selector = _xpath(self.content)\n        items = selector.xpath(\'//*[@id=""stockList""]/div[1]/table/tbody/tr\')\n        return len(items)\n\n    def _curr_total_page(self):\n\n        selector = _xpath(self.content)\n        pages = selector.xpath(\'//*[@id=""pageList""]/div/ul/li/a/text()\')\n        cur_page = selector.xpath(\'//*[@id=""pageList""]/div/ul/li[@class=""active""]/a/text()\')\n\n        # \xe5\xad\x98\xe5\x9c\xa8pages\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99cur\xe5\x92\x8ctotal\xe9\x83\xbd\xe6\x98\xaf1\n        if len(pages):\n            return int(cur_page[0]), int(pages[-1])\n        else:\n            return 1, 1\n\n    def _curr_page_items(self):\n        selector = _xpath(self.content)\n        # code = selector.xpath(\'//*[@id=""stockList""]/div[1]/table/tbody/tr/td[1]/a/text()\')\n        # name = selector.xpath(\'//*[@id=""stockList""]/div[1]/table/tbody/tr/td[2]/a/text()\')\n        # a\xe6\xa0\x87\xe7\xad\xbe\xe4\xb8\x8b\xe7\x9a\x84text() \xe5\x8f\xaf\xe8\x83\xbd\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe8\x80\x8cxpath\xe4\xbc\x9a\xe6\x8a\x8a\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe8\xbf\x87\xe6\xbb\xa4\xe6\x8e\x89\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4code\xef\xbc\x8c\xe5\x92\x8cname\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe4\xba\xa7\xe7\x94\x9f\xe9\x94\x99\xe4\xbd\x8d\xef\xbc\x8c\xe6\x95\x85\xe5\x85\x88\xe6\x89\xbe\xe5\x88\xb0a\xef\xbc\x8ca\xe3\x80\x82text\xe4\xb8\xbakong\xe4\xb9\x9f\xe5\x8d\xa0\xe4\xbd\x8d\xef\xbc\x8c\xe5\xb0\xb1\xe8\x83\xbd\xe4\xb8\x80\xe4\xb8\x80\xe5\xaf\xb9\xe5\xba\x94\n        code = selector.xpath(\'//*[@id=""stockList""]/div[1]/table/tbody/tr/td[1]/a\')\n        name = selector.xpath(\'//*[@id=""stockList""]/div[1]/table/tbody/tr/td[2]/a\')\n        code = list(map(lambda a: a.text, code))\n        name = list(map(lambda a: a.text, name))\n        return name, code\n\n    def _goto_next_page(self):\n        next_page = self.driver.find_element_by_xpath(\'//*[@id=""pageList""]/div/ul/li[@class=""next""]/a\')\n        if next_page is not None:\n            # \xe6\xbb\x9a\xe5\x8a\xa8\xe5\x88\xb0next_page \xe6\xa0\x87\xe7\xad\xbe\xe6\x98\xbe\xe7\xa4\xba\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99click\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe6\x8a\xa5\xe9\x94\x99\n            self.wait.until(lambda dr: next_page.is_enabled())\n            self.driver.execute_script(\'arguments[0].click()\', next_page)\n            time.sleep(1)\n\n    def _crawl_imp(self, *args, **kwargs):\n        self._ensure_max_page_size()\n\n        cur_page, total_page = self._curr_total_page()\n        names = []\n        symbols = []\n        # page index start 1\n        for page in range(1, total_page + 1):\n            self.wait.until(lambda dr: dr.find_element_by_xpath(\'//*[@id=""stockList""]/div[1]/table\').is_displayed())\n            cur_page, _ = self._curr_total_page()\n            temp_names, temp_symbols = self._curr_page_items()\n            names += temp_names\n            symbols += temp_symbols\n            if page < total_page:\n                self._goto_next_page()\n            else:\n                break\n\n        return names, symbols\n\n    def __init__(self, url):\n        super(StockListCrawlBrower, self).__init__(url)\n\n\ndef _parse_nav(content):\n    soup = _bs4_html(content)\n    nav_tags = soup.select(\'.industry-nav > div\')\n\n    def parse_nav_tag(tag):\n        nav = {}\n        first_nav = tag.select(\'.first-nav > span\')\n        if len(first_nav) > 0:\n            second_nav = tag.select(\'.second-nav > li\')\n            nav[first_nav[0].string] = {}\n            for nav_2 in second_nav:\n                a_tag = nav_2.select(\'a\')\n                if len(a_tag) <= 0:\n                    continue\n                third_nav = nav_2.select(\'.third-nav\')\n                if len(third_nav) > 0:\n                    second_nav_name = str(nav_2).replace(\'<li><i class=""list-style""></i>\', \'\')\n                    second_nav_name = second_nav_name[: second_nav_name.index(\'<i\')]\n                    nav[first_nav[0].string][second_nav_name] = list(map(lambda a: {a.get(\'title\'): a.get(\'href\')},\n                                                                         a_tag))\n                else:\n                    nav[first_nav[0].string][a_tag[0].get(\'title\')] = a_tag[0].get(\'href\')\n        return nav\n\n    def merge(dict1, dict2):\n        return dict(dict1, **dict2)\n\n    return reduce(lambda d1, d2: merge(d1, d2), map(lambda tag: parse_nav_tag(tag), nav_tags))\n\n\nclass StockInfoListBrower(BaseXQCrawlBrower):\n    def __init__(self, market, symbols):\n        super(StockInfoListBrower, self).__init__(BASE_XQ_STOCK_INFO)\n\n        self._market = market\n        self._symbols = symbols\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self._market = None\n        self._symbols = None\n        super(StockInfoListBrower, self).__exit__(exc_type, exc_val, exc_tb)\n\n    def _parse_stock_info(self):\n        selector = _xpath(self.content)\n        # \xe7\x89\xb9\xe6\x96\xaf\xe6\x8b\x89(NASDAQ:TSLA)\n        stock_name = selector.xpath(\'//*[@id=""center""]/div[2]/div[2]/div[1]/div[1]/span[1]/strong/text()\')\n        company_info_p = selector.xpath(\'//*[@id=""center""]/div[3]/div/div[2]/div/p\')\n        company_industry = selector.xpath(\'//*[@id=""relatedIndustry""]/h2/a/text()\')\n\n        quate_items = selector.xpath(\'//*[@id=""center""]/div[2]/div[2]/div[2]/table/tbody/tr/td\')\n\n        info = {}\n        if len(stock_name):\n            stock_name_info = stock_name[0]\n            st = stock_name_info.rfind(\'(\')\n            en = stock_name_info.rfind(\')\')\n            market_symbol = stock_name_info[st + 1:en]\n            sp_result = market_symbol.split(\':\')\n            if len(sp_result) == 2:\n                company_name = stock_name_info[:st]\n                exchange_name = sp_result[0]\n                company_symbol = sp_result[1]\n                info[\'name\'] = company_name\n                info[\'exchange\'] = exchange_name\n                info[\'symbol\'] = company_symbol\n\n        if len(company_info_p):\n            last_key = None\n            for p in company_info_p:\n                for child in p.getchildren():\n                    if child.tag == \'strong\':\n                        info[child.text] = child.tail\n                        last_key = child.text\n                    if child.tag == \'a\':\n                        info[last_key] = child.get(\'href\')\n        if len(quate_items):\n            for item in quate_items:\n                if len(item.getchildren()) == 1:\n                    info[item.text] = item.getchildren()[0].text\n\n        if len(company_industry):\n            info[\'industry\'] = company_industry[0]\n\n        return info\n\n    def _crawl_imp(self, *args, **kwargs):\n        for index, symbol in enumerate(self._symbols):\n            try:\n                if not ABuXqFile.exist_stock_info(self._market, symbol) or (\'replace\' in kwargs and kwargs[\'replace\']):\n                    self.get(self._base_url + symbol)\n                    stock_info = self._parse_stock_info()\n                    ABuXqFile.save_cache_stock_info(stock_info, self._market, symbol)\n                if (index + 1) % 200 == 0:\n                    print(\n                        \'{}: {} {}  {}/{}\'.format(kwargs[\'process\'], self._market, symbol, index + 1,\n                                                  len(self._symbols)))\n            except Exception as e:\n                # \xe8\xae\xb0\xe5\xbd\x95\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84symbol\n                ABuXqFile.error_stock_info(self._market, symbol, e)\n                logging.exception(e)\n        return \'Done\'\n'"
abupy/CrawlBu/ABuXqFile.py,0,"b'# -*- encoding:utf-8 -*-\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom os import path\nimport os\nfrom ..CoreBu.ABuEnv import g_project_data_dir\nfrom ..CoreBu.ABuEnv import g_project_cache_dir\nfrom ..CoreBu.ABuEnv import g_project_rom_data_dir\nfrom ..UtilBu import ABuFileUtil\nfrom ..UtilBu.ABuProgress import AbuProgress\n\nfrom .ABuXqConsts import columns_map\n\nimport pandas as pd\n\n__author__ = \'\xe5\xb0\x8f\xe9\x9d\x92\xe8\x9b\x99\'\n__weixin__ = \'abu_quant\'\n\n# \xe4\xbf\x9d\xe5\xad\x98\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbf\xa1\xe6\x81\xaf\nSTOCK_INFO_DIR = path.join(g_project_data_dir, \'stock_info\')\n# \xe4\xbf\x9d\xe5\xad\x98\xe7\x88\xac\xe5\x8f\x96\xe5\xbe\x97\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbf\xa1\xe6\x81\xaf\nSTOCK_INFO_CACHE_DIR = path.join(g_project_cache_dir, \'stock_info\')\nSTOCK_INFO_ERROR_DIR = path.join(g_project_cache_dir, \'stock_info/error\')\n\nABuFileUtil.ensure_dir(STOCK_INFO_DIR)\nABuFileUtil.ensure_dir(STOCK_INFO_CACHE_DIR)\nABuFileUtil.ensure_dir(STOCK_INFO_ERROR_DIR)\n\n\ndef map_stock_list_rom(market):\n    return path.join(g_project_rom_data_dir, \'stock_code_{}.csv\'.format(market))\n\n\ndef map_stock_list(market):\n    return path.join(STOCK_INFO_DIR, \'stock_code_{}.csv\'.format(market))\n\n\ndef map_cache_stock_info(market, symbol):\n    """"""\n    \xe4\xb8\xb4\xe6\x97\xb6\xe5\xad\x98\xe5\x8f\x96 stock info\n    :param market:\n    :param symbol:\n    :return:\n    """"""\n    p = path.join(STOCK_INFO_CACHE_DIR, \'{}_{}.txt\'.format(market, symbol))\n    return p\n\n\ndef save_cache_stock_info(stock_info, market, symbol):\n    if stock_info is not None:\n        df = pd.DataFrame.from_dict(stock_info, orient=\'index\')\n        df.to_csv(map_cache_stock_info(market, symbol))\n\n\ndef exist_stock_info(market, symbol):\n    return ABuFileUtil.file_exist(map_cache_stock_info(market, symbol))\n\n\ndef read_stock_symbol_list(market):\n    return pd.read_csv(map_stock_list(market))[\'symbol\'].tolist()\n\n\ndef read_stock_symbol_name(market, symbol):\n    df = pd.read_csv(map_stock_list(market))\n    item = df.loc[df.symbol == symbol]\n    return None if item is None else item.name.tolist()[0]\n\n\ndef error_stock_info(market, symbol, error_info):\n    """"""\n    \xe6\x8a\x93\xe5\x8f\x96stock info \xe5\xa4\xb1\xe8\xb4\xa5 \xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0\xe7\xa3\x81\xe7\x9b\x98\xef\xbc\x8c\xe4\xbb\xa5\xe4\xbe\xbf\xef\xbc\x8c\xe4\xb8\x8b\xe6\xac\xa1\xe6\x9f\xa5\xe7\x9c\x8b\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe5\x8e\x9f\xe5\x9b\xa0\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe9\x94\x99\xe5\x8d\xa0\xe7\x94\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xba\xe6\x96\x87\xe4\xbb\xb6,\xe9\x81\xbf\xe5\x85\x8d\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x85\xb1\xe4\xba\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x8f\xaf\xe8\x83\xbd\xe5\x87\xba\xe9\x94\x99\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\n    :param error_info:\n    :param market:\n    :param symbol:\n    :return:\n    """"""\n    p = path.join(STOCK_INFO_ERROR_DIR, \'{}_{}\'.format(market, symbol))\n    ABuFileUtil.save_file(error_info, p)\n    return p\n\n\ndef read_all_error_stock_info_symbol():\n    """"""\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe6\x8a\x93\xe5\x8f\x96stock info\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84symbol\xe5\x88\x97\xe8\xa1\xa8\n    """"""\n    error_symbols = os.listdir(STOCK_INFO_ERROR_DIR)\n    return map(lambda error: error.split(\'_\'), error_symbols)\n\n\ndef query_a_stock(market, symbol):\n    stock_df = pd.read_csv(map_stock_list(market))\n    return stock_df.loc[stock_df.symbol == symbol]\n\n\ndef _create_a_column(info, columns, size):\n    """"""\n    \xe5\x88\x9b\xe5\xbb\xbasize\xe5\xa4\xa7\xe5\xb0\x8f\xe7\x9a\x84None\xe6\x95\xb0\xe7\xbb\x84\n    :param info:\n    :param columns:\n    :param size:\n    """"""\n    for c in columns:\n        if c not in info.keys():\n            info[c] = [None] * size\n\n\ndef merge_stock_info_to_stock_list(market=(\'US\', \'HK\', \'CN\')):\n    for m in market:\n        stock_df = pd.read_csv(map_stock_list(m), dtype=str)\n        extra_info = {}\n        # 08012\n        progess = AbuProgress(stock_df.shape[0], 0, \'merging {}\'.format(m))\n        for i, symbol in enumerate(stock_df[\'symbol\']):\n            progess.show(i + 1)\n            if ABuFileUtil.file_exist(map_cache_stock_info(m, symbol)):\n                a_stock_info = pd.read_csv(map_cache_stock_info(m, symbol), dtype=str)\n\n                if a_stock_info is not None and not a_stock_info.empty:\n                    keys = a_stock_info.ix[:, 0].tolist()\n                    _create_a_column(extra_info, keys, stock_df.shape[0])\n                    values = a_stock_info.ix[:, 1].tolist()\n                    for k, v in zip(keys, values):\n                        extra_info[k][i] = v\n\n        for key in extra_info:\n            stock_df[key] = extra_info[key]\n\n        stock_df.fillna(\'-\', inplace=True)\n        # \xe6\x9f\x90\xe4\xba\x9bsymbol\xe7\x9a\x84stockinfo\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xef\xbc\x8cstockinfp\xe4\xb8\xba\xe7\xa9\xba\xe7\x9a\x84\xe5\x8e\x9f\xe5\x9b\xa0\xe6\x98\xafstockinfo\xe9\xa1\xb5\xe9\x9d\xa2404\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xa2\xe5\xbc\x83\n        valid_df = stock_df.loc[stock_df.symbol != \'-\']\n        valid_df.to_csv(map_stock_list_rom(m), index=False, encoding=\'utf-8\')\n\n\ndef del_columns(df, columns):\n    old_c = df.columns.tolist()\n    for col in filter(lambda x: x in old_c, columns):\n        df.drop(col, axis=1, inplace=True)\n\n\ndef drop_nuisance(df):\n    del_columns(df, [\'percent\', \'pettm\', \'marketcapital\', \'volume\', \'low52w\', \'low\', \'high52w\', \'high\', \'hasexist\',\n                     \'current\', \'amount\', \'change\', \'pe_ttm\', \'open\', \'last_close\', \'chg\', \'market_capital\',\n                     \'code\'])\n    return df\n\n\ndef fix_xq_columns_name():\n    """"""\n    \xe9\x9b\xaa\xe7\x90\x83\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84key\xe9\x83\xbd\xe6\x98\xaf\xe4\xb8\xad\xe6\x96\x87\xef\xbc\x8cdataframe\xe7\x9a\x84columns\xe4\xb8\x8d\xe5\x8f\x98\xe4\xb8\x8e\xe7\x94\xa8\xe4\xb8\xad\xe6\x96\x87\n    """"""\n    for m in (\'US\', \'CN\', \'HK\'):\n        stock_df = pd.read_csv(map_stock_list_rom(m), dtype=str)\n        unnecessary_columns = stock_df.columns.difference(columns_map.keys())\n        columns_intersection = stock_df.columns & columns_map.keys()\n        del_columns(stock_df, unnecessary_columns)\n\n        stock_df.rename(columns={c: columns_map[c] for c in columns_intersection}, inplace=True)\n        stock_df.to_csv(map_stock_list_rom(m), index=True, encoding=\'utf-8\')\n'"
abupy/CrawlBu/__init__.py,0,b''
abupy/DLBu/ABuDL.py,0,b'from __future__ import absolute_import\n\n# noinspection PyUnresolvedReferences\nfrom .ABuDLImgStd import *\n# noinspection PyUnresolvedReferences\nfrom .ABuDLTVSplit import *\n'
abupy/DLBu/ABuDLImgStd.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe4\xb8\xbacaffe\xe7\xad\x89\xe5\xb7\xa5\xe5\x85\xb7\xe5\xba\x93\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\xbc\xe5\xbc\x8f\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport glob\nimport imghdr\nimport os\n\nimport PIL.Image\nfrom PIL import ImageFile\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import map\n\nfrom ..UtilBu import ABuFileUtil\n\n__all__ = [\'std_img_from_root_dir\',\n           \'covert_to_jpeg\',\n           \'find_img_by_ext\',\n           \'change_to_real_type\'\n           ]\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n# \xe4\xb8\xba\xe4\xba\x86im.convert(\'RGB\')\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xaeImageFile.LOAD_TRUNCATED_IMAGES = True\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n\ndef std_img_from_root_dir(root_dir, a_ext):\n    """"""\n    \xe6\x89\xbe\xe5\x88\xb0root_dir\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89.ext\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe9\x83\xbd\xe8\xbd\xac\xe6\x8d\xa2\xe5\x85\xb6\xe7\x9c\x9f\xe5\xae\x9e\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x90\x8e\xef\xbc\x8c\n    \xe5\xb0\x86\xe4\xb8\x8d\xe6\x98\xafjpeg\xe7\x9a\x84\xe5\x85\xa8\xe9\x83\xa8\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbajpeg\xef\xbc\x8c\xe5\x8d\xb3\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x9b\xbe\xe5\x83\x8f\xe6\xa0\xbc\xe5\xbc\x8f\n    :param root_dir: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe4\xbf\xa1\xe6\x81\xaf\n    :param a_ext: \xe5\x9b\xbe\xe5\x83\x8f\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xef\xbc\x8ceg. png\xef\xbc\x8cjpg\n    """"""\n\n    # root_dir\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe5\x8f\x8a\xe4\xb8\x80\xe7\xba\xa7\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89.ext\xe5\x90\x8e\xe7\xbc\x80\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x85\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe8\xbf\x94\xe5\x9b\x9e\n    img_list = find_img_by_ext(a_ext, root_dir)\n    # img_list\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\x85\xb6\xe7\x9c\x9f\xe5\xae\x9e\xe7\xb1\xbb\xe5\x9e\x8b\n    all_type = change_to_real_type(img_list)\n    for ext in all_type:\n        # \xe8\xbf\xad\xe4\xbb\xa3change_to_real_type\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x9b\x86\xe5\x90\x88\n        if ext != \'jpeg\':\n            # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x89\x80\xe6\x9c\x89\xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe5\xb0\x86\xe4\xb8\x8d\xe6\x98\xafjpeg\xe7\x9a\x84\xe9\x83\xbd\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbajpeg\n            if ext is None:\n                ext = a_ext\n            # \xe6\x89\xbe\xe5\x88\xb0\xe9\x9d\x9e\xe6\xa0\x87\xe5\x87\x86\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97sub_img_list\n            sub_img_list = find_img_by_ext(ext, root_dir)\n            # \xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\n            _ = list(map(lambda img: covert_to_jpeg(img), sub_img_list))\n            # \xe7\x84\xb6\xe5\x90\x8e\xe5\x86\x8d\xe6\xac\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe5\x85\xb6\xe7\x9c\x9f\xe5\xae\x9e\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n            change_to_real_type(sub_img_list)\n\n\ndef covert_to_jpeg(org_img, dst_img=None):\n    """"""\n    \xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5img\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaRGB\xe7\x9a\x84jpeg\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x9b\xbe\xe5\x83\x8f\n    :param org_img: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x9b\xbe\xe5\x83\x8f\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param dst_img: \xe8\xbd\xac\xe6\x8d\xa2\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\xbe\xe5\x83\x8f\xe8\xb7\xaf\xe5\xbe\x84\xe8\xbe\x93\xe5\x87\xba\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4=None\xe5\xb0\x86\xe8\xa6\x86\xe7\x9b\x96org_img\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n    im = PIL.Image.open(org_img)\n    if dst_img is None:\n        # \xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9c\xa8\xe8\xbe\x93\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8a\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xa6\x86\xe7\x9b\x96\n        dst_img = org_img\n    im.convert(\'RGB\').save(dst_img, \'JPEG\')\n\n\ndef find_img_by_ext(ext, root_dir):\n    """"""\n    \xe5\xb0\x86root_dir\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe5\x8f\x8a\xe4\xb8\x80\xe7\xba\xa7\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89.ext\xe5\x90\x8e\xe7\xbc\x80\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x85\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe8\xbf\x94\xe5\x9b\x9e,\n    \xe6\xb3\xa8\xe6\x84\x8f\xe5\x8f\xaa\xe9\x81\x8d\xe5\x8e\x86\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\xe5\x8f\x8a\xe4\xb8\x80\xe7\xba\xa7\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\n    :param ext: str\xe5\xaf\xb9\xe8\xb1\xa1 \xe5\x9b\xbe\xe5\x83\x8f\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xef\xbc\x8ceg. png\xef\xbc\x8cjpg\n    :param root_dir: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe4\xbf\xa1\xe6\x81\xaf\n    :return: list\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    # \xe9\x81\x8d\xe5\x8e\x86\xe4\xb8\x80\xe7\xba\xa7\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\n    dirs = [root_dir + name for name in os.listdir(root_dir) if os.path.isdir(os.path.join(root_dir, name))]\n    # \xe5\xbd\xa2\xe6\x88\x90\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\xe5\x8f\x8a\xe4\xb8\x80\xe7\xba\xa7\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\n    dirs.append(root_dir)\n    img_list = list()\n    for dr in dirs:\n        # \xe9\x81\x8d\xe5\x8e\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87glob\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x89\x80\xe6\x9c\x89.ext\xe6\x96\x87\xe4\xbb\xb6\n        sub_list = glob.glob(\'{}/*.{}\'.format(dr, ext))\n        img_list.extend(sub_list)\n    return img_list\n\n\ndef change_to_real_type(img_list):\n    """"""\n    \xe5\xb0\x86img\xe7\x9a\x84\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\x85\xb6\xe7\x9c\x9f\xe5\xae\x9e\xe7\xb1\xbb\xe5\x9e\x8b\n        eg. a.png \xe5\xa6\x82\xe6\x9e\x9c a.png\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe6\x98\xafjpeg\xef\xbc\x8c\xe5\x88\x99\xe5\xb0\x86\xe5\x90\x8e\xe7\xbc\x80\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8d> a.jpeg\n    :param img_list:\n    :return:\n    """"""\n    # \xe7\xb1\xbb\xe5\x9e\x8b\xe8\xae\xb0\xe5\xbd\x95\xe9\x9b\x86\xe5\x90\x88\n    record_type = set()\n    for img in img_list:\n        if not ABuFileUtil.file_exist(img):\n            # \xe8\xbf\x87\xe6\xbb\xa4\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n            continue\n\n        # \xe4\xbd\xbf\xe7\x94\xa8imghdr\xe8\xaf\x86\xe5\x88\xab\xe5\x9b\xbe\xe5\x83\x8f\xe7\x9c\x9f\xe5\xae\x9e\xe7\xb1\xbb\xe5\x9e\x8b\n        real_type = imghdr.what(img)\n        # \xe5\xb0\x86img_list\xe6\x9c\x89\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x81\x9a\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8cadd\xe5\x88\xb0\xe9\x9b\x86\xe5\x90\x88\xe4\xb8\xad\n        record_type.add(real_type)\n        if real_type is None:\n            # \xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x8d\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe5\xb0\xb1\xe6\x98\xaf\xe6\xae\x8b\xe5\x9b\xbe\xef\xbc\x8c\xe8\xbf\x87\xe6\xbb\xa4\n            continue\n        # \xe4\xbf\xae\xe6\x94\xb9\xe6\x88\x90\xe7\x9c\x9f\xe5\xae\x9e\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\n        real_name = img[:img.rfind(\'.\')] + \'.\' + real_type\n        os.rename(img, real_name)\n    return record_type\n'"
abupy/DLBu/ABuDLTVSplit.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe4\xb8\xbacaffe\xe5\xb7\xa5\xe5\x85\xb7\xe5\xba\x93\xe5\x81\x9a\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe5\x87\x86\xe5\xa4\x87\xef\xbc\x8c\n    \xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom collections import defaultdict\nimport itertools\nimport os\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n__all__ = [\'train_val_split\']\n\n\ndef train_val_split(train_path, n_folds=10):\n    """"""\xe5\xb0\x86caffe\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe6\x96\x87\xe4\xbb\xb6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x87\xe5\x89\xb2\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe4\xba\xa4\xe5\x8f\x89\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6""""""\n\n    if n_folds <= 1:\n        raise ValueError(\'n_folds must > 1\')\n\n    with open(train_path, \'r\') as f:\n        lines = f.readlines()\n        class_dict = defaultdict(list)\n        for line in lines:\n            cs = line[line.rfind(\' \'):]\n            class_dict[cs].append(line)\n\n    train = list()\n    val = list()\n    for cs in class_dict:\n        cs_len = len(class_dict[cs])\n        val_cnt = int(cs_len / n_folds)\n        val.append(class_dict[cs][:val_cnt])\n        train.append(class_dict[cs][val_cnt:])\n    val = list(itertools.chain.from_iterable(val))\n    train = list(itertools.chain.from_iterable(train))\n    test = [t.split(\' \')[0] + \'\\n\' for t in val]\n\n    # \xe5\x9c\xa8\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84train_path\xe5\x90\x8c\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe5\x86\x99train_split.txt\n    fn = os.path.dirname(train_path) + \'/train_split.txt\'\n    with open(fn, \'wb\') as f:\n        f.writelines(train)\n    # \xe5\x9c\xa8\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84train_path\xe5\x90\x8c\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe5\x86\x99val_split.txt\n    fn = os.path.dirname(train_path) + \'/val_split.txt\'\n    with open(fn, \'wb\') as f:\n        f.writelines(val)\n    # \xe5\x9c\xa8\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84train_path\xe5\x90\x8c\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe5\x86\x99/test_split.txt\n    fn = os.path.dirname(train_path) + \'/test_split.txt\'\n    with open(fn, \'wb\') as f:\n        f.writelines(test)\n'"
abupy/DLBu/__init__.py,0,"b""from __future__ import absolute_import\n\n# import ABuDLImgStd\n# import ABuDLTVSplit\nfrom . import ABuDL as dl\n\n__all__ = [\n    'dl',\n]\n"""
abupy/ExtBu/__init__.py,0,"b'\n""""""\nExternal, bundled dependencies.\n\n""""""\n'"
abupy/ExtBu/funcsigs.py,0,"b'# Copyright 2001-2013 Python Software Foundation; All Rights Reserved\n""""""Function signature objects for callables\n\nBack port of Python 3.3\'s function signature tools from the inspect module,\nmodified to be compatible with Python 2.6, 2.7 and 3.2+.\n""""""\nfrom __future__ import absolute_import, division, print_function\nimport itertools\nimport functools\nimport re\nimport types\n\ntry:\n    from collections import OrderedDict\nexcept ImportError:\n    from .odict import OrderedDict\n\n__version__ = ""0.4""\n\n__all__ = [\'BoundArguments\', \'Parameter\', \'Signature\', \'signature\']\n\n\n_WrapperDescriptor = type(type.__call__)\n_MethodWrapper = type(all.__call__)\n\n_NonUserDefinedCallables = (_WrapperDescriptor,\n                            _MethodWrapper,\n                            types.BuiltinFunctionType)\n\n\ndef formatannotation(annotation, base_module=None):\n    if isinstance(annotation, type):\n        if annotation.__module__ in (\'builtins\', \'__builtin__\', base_module):\n            return annotation.__name__\n        return annotation.__module__+\'.\'+annotation.__name__\n    return repr(annotation)\n\n\ndef _get_user_defined_method(cls, method_name, *nested):\n    try:\n        if cls is type:\n            return\n        meth = getattr(cls, method_name)\n        for name in nested:\n            meth = getattr(meth, name, meth)\n    except AttributeError:\n        return\n    else:\n        if not isinstance(meth, _NonUserDefinedCallables):\n            # Once \'__signature__\' will be added to \'C\'-level\n            # callables, this check won\'t be necessary\n            return meth\n\n\ndef signature(obj):\n    \'\'\'Get a signature object for the passed callable.\'\'\'\n\n    if not callable(obj):\n        raise TypeError(\'{0!r} is not a callable object\'.format(obj))\n\n    if isinstance(obj, types.MethodType):\n        sig = signature(obj.__func__)\n        if obj.__self__ is None:\n            # Unbound method: the first parameter becomes positional-only\n            if sig.parameters:\n                first = sig.parameters.values()[0].replace(\n                    kind=_POSITIONAL_ONLY)\n                return sig.replace(\n                    parameters=(first,) + tuple(sig.parameters.values())[1:])\n            else:\n                return sig\n        else:\n            # In this case we skip the first parameter of the underlying\n            # function (usually `self` or `cls`).\n            return sig.replace(parameters=tuple(sig.parameters.values())[1:])\n\n    try:\n        sig = obj.__signature__\n    except AttributeError:\n        pass\n    else:\n        if sig is not None:\n            return sig\n\n    try:\n        # Was this function wrapped by a decorator?\n        wrapped = obj.__wrapped__\n    except AttributeError:\n        pass\n    else:\n        return signature(wrapped)\n\n    if isinstance(obj, types.FunctionType):\n        return Signature.from_function(obj)\n\n    if isinstance(obj, functools.partial):\n        sig = signature(obj.func)\n\n        new_params = OrderedDict(sig.parameters.items())\n\n        partial_args = obj.args or ()\n        partial_keywords = obj.keywords or {}\n        try:\n            ba = sig.bind_partial(*partial_args, **partial_keywords)\n        except TypeError as ex:\n            msg = \'partial object {0!r} has incorrect arguments\'.format(obj)\n            raise ValueError(msg)\n\n        for arg_name, arg_value in ba.arguments.items():\n            param = new_params[arg_name]\n            if arg_name in partial_keywords:\n                # We set a new default value, because the following code\n                # is correct:\n                #\n                #   >>> def foo(a): print(a)\n                #   >>> print(partial(partial(foo, a=10), a=20)())\n                #   20\n                #   >>> print(partial(partial(foo, a=10), a=20)(a=30))\n                #   30\n                #\n                # So, with \'partial\' objects, passing a keyword argument is\n                # like setting a new default value for the corresponding\n                # parameter\n                #\n                # We also mark this parameter with \'_partial_kwarg\'\n                # flag.  Later, in \'_bind\', the \'default\' value of this\n                # parameter will be added to \'kwargs\', to simulate\n                # the \'functools.partial\' real call.\n                new_params[arg_name] = param.replace(default=arg_value,\n                                                     _partial_kwarg=True)\n\n            elif (param.kind not in (_VAR_KEYWORD, _VAR_POSITIONAL) and\n                            not param._partial_kwarg):\n                new_params.pop(arg_name)\n\n        return sig.replace(parameters=new_params.values())\n\n    sig = None\n    if isinstance(obj, type):\n        # obj is a class or a metaclass\n\n        # First, let\'s see if it has an overloaded __call__ defined\n        # in its metaclass\n        call = _get_user_defined_method(type(obj), \'__call__\')\n        if call is not None:\n            sig = signature(call)\n        else:\n            # Now we check if the \'obj\' class has a \'__new__\' method\n            new = _get_user_defined_method(obj, \'__new__\')\n            if new is not None:\n                sig = signature(new)\n            else:\n                # Finally, we should have at least __init__ implemented\n                init = _get_user_defined_method(obj, \'__init__\')\n                if init is not None:\n                    sig = signature(init)\n    elif not isinstance(obj, _NonUserDefinedCallables):\n        # An object with __call__\n        # We also check that the \'obj\' is not an instance of\n        # _WrapperDescriptor or _MethodWrapper to avoid\n        # infinite recursion (and even potential segfault)\n        call = _get_user_defined_method(type(obj), \'__call__\', \'im_func\')\n        if call is not None:\n            sig = signature(call)\n\n    if sig is not None:\n        # For classes and objects we skip the first parameter of their\n        # __call__, __new__, or __init__ methods\n        return sig.replace(parameters=tuple(sig.parameters.values())[1:])\n\n    if isinstance(obj, types.BuiltinFunctionType):\n        # Raise a nicer error message for builtins\n        msg = \'no signature found for builtin function {0!r}\'.format(obj)\n        raise ValueError(msg)\n\n    raise ValueError(\'callable {0!r} is not supported by signature\'.format(obj))\n\n\nclass _void(object):\n    \'\'\'A private marker - used in Parameter & Signature\'\'\'\n\n\nclass _empty(object):\n    pass\n\n\nclass _ParameterKind(int):\n    def __new__(self, *args, **kwargs):\n        obj = int.__new__(self, *args)\n        obj._name = kwargs[\'name\']\n        return obj\n\n    def __str__(self):\n        return self._name\n\n    def __repr__(self):\n        return \'<_ParameterKind: {0!r}>\'.format(self._name)\n\n\n_POSITIONAL_ONLY        = _ParameterKind(0, name=\'POSITIONAL_ONLY\')\n_POSITIONAL_OR_KEYWORD  = _ParameterKind(1, name=\'POSITIONAL_OR_KEYWORD\')\n_VAR_POSITIONAL         = _ParameterKind(2, name=\'VAR_POSITIONAL\')\n_KEYWORD_ONLY           = _ParameterKind(3, name=\'KEYWORD_ONLY\')\n_VAR_KEYWORD            = _ParameterKind(4, name=\'VAR_KEYWORD\')\n\n\nclass Parameter(object):\n    \'\'\'Represents a parameter in a function signature.\n\n    Has the following public attributes:\n\n    * name : str\n        The name of the parameter as a string.\n    * default : object\n        The default value for the parameter if specified.  If the\n        parameter has no default value, this attribute is not set.\n    * annotation\n        The annotation for the parameter if specified.  If the\n        parameter has no annotation, this attribute is not set.\n    * kind : str\n        Describes how argument values are bound to the parameter.\n        Possible values: `Parameter.POSITIONAL_ONLY`,\n        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,\n        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.\n    \'\'\'\n\n    __slots__ = (\'_name\', \'_kind\', \'_default\', \'_annotation\', \'_partial_kwarg\')\n\n    POSITIONAL_ONLY         = _POSITIONAL_ONLY\n    POSITIONAL_OR_KEYWORD   = _POSITIONAL_OR_KEYWORD\n    VAR_POSITIONAL          = _VAR_POSITIONAL\n    KEYWORD_ONLY            = _KEYWORD_ONLY\n    VAR_KEYWORD             = _VAR_KEYWORD\n\n    empty = _empty\n\n    def __init__(self, name, kind, default=_empty, annotation=_empty,\n                 _partial_kwarg=False):\n\n        if kind not in (_POSITIONAL_ONLY, _POSITIONAL_OR_KEYWORD,\n                        _VAR_POSITIONAL, _KEYWORD_ONLY, _VAR_KEYWORD):\n            raise ValueError(""invalid value for \'Parameter.kind\' attribute"")\n        self._kind = kind\n\n        if default is not _empty:\n            if kind in (_VAR_POSITIONAL, _VAR_KEYWORD):\n                msg = \'{0} parameters cannot have default values\'.format(kind)\n                raise ValueError(msg)\n        self._default = default\n        self._annotation = annotation\n\n        if name is None:\n            if kind != _POSITIONAL_ONLY:\n                raise ValueError(""None is not a valid name for a ""\n                                 ""non-positional-only parameter"")\n            self._name = name\n        else:\n            name = str(name)\n            if kind != _POSITIONAL_ONLY and not re.match(r\'[a-z_]\\w*$\', name, re.I):\n                msg = \'{0!r} is not a valid parameter name\'.format(name)\n                raise ValueError(msg)\n            self._name = name\n\n        self._partial_kwarg = _partial_kwarg\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def default(self):\n        return self._default\n\n    @property\n    def annotation(self):\n        return self._annotation\n\n    @property\n    def kind(self):\n        return self._kind\n\n    def replace(self, name=_void, kind=_void, annotation=_void,\n                default=_void, _partial_kwarg=_void):\n        \'\'\'Creates a customized copy of the Parameter.\'\'\'\n\n        if name is _void:\n            name = self._name\n\n        if kind is _void:\n            kind = self._kind\n\n        if annotation is _void:\n            annotation = self._annotation\n\n        if default is _void:\n            default = self._default\n\n        if _partial_kwarg is _void:\n            _partial_kwarg = self._partial_kwarg\n\n        return type(self)(name, kind, default=default, annotation=annotation,\n                          _partial_kwarg=_partial_kwarg)\n\n    def __str__(self):\n        kind = self.kind\n\n        formatted = self._name\n        if kind == _POSITIONAL_ONLY:\n            if formatted is None:\n                formatted = \'\'\n            formatted = \'<{0}>\'.format(formatted)\n\n        # Add annotation and default value\n        if self._annotation is not _empty:\n            formatted = \'{0}:{1}\'.format(formatted,\n                                       formatannotation(self._annotation))\n\n        if self._default is not _empty:\n            formatted = \'{0}={1}\'.format(formatted, repr(self._default))\n\n        if kind == _VAR_POSITIONAL:\n            formatted = \'*\' + formatted\n        elif kind == _VAR_KEYWORD:\n            formatted = \'**\' + formatted\n\n        return formatted\n\n    def __repr__(self):\n        return \'<{0} at {1:#x} {2!r}>\'.format(self.__class__.__name__,\n                                           id(self), self.name)\n\n    def __hash__(self):\n        msg = ""unhashable type: \'{0}\'"".format(self.__class__.__name__)\n        raise TypeError(msg)\n\n    def __eq__(self, other):\n        return (issubclass(other.__class__, Parameter) and\n                self._name == other._name and\n                self._kind == other._kind and\n                self._default == other._default and\n                self._annotation == other._annotation)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n\nclass BoundArguments(object):\n    \'\'\'Result of `Signature.bind` call.  Holds the mapping of arguments\n    to the function\'s parameters.\n\n    Has the following public attributes:\n\n    * arguments : OrderedDict\n        An ordered mutable mapping of parameters\' names to arguments\' values.\n        Does not contain arguments\' default values.\n    * signature : Signature\n        The Signature object that created this instance.\n    * args : tuple\n        Tuple of positional arguments values.\n    * kwargs : dict\n        Dict of keyword arguments values.\n    \'\'\'\n\n    def __init__(self, signature, arguments):\n        self.arguments = arguments\n        self._signature = signature\n\n    @property\n    def signature(self):\n        return self._signature\n\n    @property\n    def args(self):\n        args = []\n        for param_name, param in self._signature.parameters.items():\n            if (param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY) or\n                                                    param._partial_kwarg):\n                # Keyword arguments mapped by \'functools.partial\'\n                # (Parameter._partial_kwarg is True) are mapped\n                # in \'BoundArguments.kwargs\', along with VAR_KEYWORD &\n                # KEYWORD_ONLY\n                break\n\n            try:\n                arg = self.arguments[param_name]\n            except KeyError:\n                # We\'re done here. Other arguments\n                # will be mapped in \'BoundArguments.kwargs\'\n                break\n            else:\n                if param.kind == _VAR_POSITIONAL:\n                    # *args\n                    args.extend(arg)\n                else:\n                    # plain argument\n                    args.append(arg)\n\n        return tuple(args)\n\n    @property\n    def kwargs(self):\n        kwargs = {}\n        kwargs_started = False\n        for param_name, param in self._signature.parameters.items():\n            if not kwargs_started:\n                if (param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY) or\n                                                param._partial_kwarg):\n                    kwargs_started = True\n                else:\n                    if param_name not in self.arguments:\n                        kwargs_started = True\n                        continue\n\n            if not kwargs_started:\n                continue\n\n            try:\n                arg = self.arguments[param_name]\n            except KeyError:\n                pass\n            else:\n                if param.kind == _VAR_KEYWORD:\n                    # **kwargs\n                    kwargs.update(arg)\n                else:\n                    # plain keyword argument\n                    kwargs[param_name] = arg\n\n        return kwargs\n\n    def __hash__(self):\n        msg = ""unhashable type: \'{0}\'"".format(self.__class__.__name__)\n        raise TypeError(msg)\n\n    def __eq__(self, other):\n        return (issubclass(other.__class__, BoundArguments) and\n                self.signature == other.signature and\n                self.arguments == other.arguments)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n\nclass Signature(object):\n    \'\'\'A Signature object represents the overall signature of a function.\n    It stores a Parameter object for each parameter accepted by the\n    function, as well as information specific to the function itself.\n\n    A Signature object has the following public attributes and methods:\n\n    * parameters : OrderedDict\n        An ordered mapping of parameters\' names to the corresponding\n        Parameter objects (keyword-only arguments are in the same order\n        as listed in `code.co_varnames`).\n    * return_annotation : object\n        The annotation for the return type of the function if specified.\n        If the function has no annotation for its return type, this\n        attribute is not set.\n    * bind(*args, **kwargs) -> BoundArguments\n        Creates a mapping from positional and keyword arguments to\n        parameters.\n    * bind_partial(*args, **kwargs) -> BoundArguments\n        Creates a partial mapping from positional and keyword arguments\n        to parameters (simulating \'functools.partial\' behavior.)\n    \'\'\'\n\n    __slots__ = (\'_return_annotation\', \'_parameters\')\n\n    _parameter_cls = Parameter\n    _bound_arguments_cls = BoundArguments\n\n    empty = _empty\n\n    def __init__(self, parameters=None, return_annotation=_empty,\n                 __validate_parameters__=True):\n        \'\'\'Constructs Signature from the given list of Parameter\n        objects and \'return_annotation\'.  All arguments are optional.\n        \'\'\'\n\n        if parameters is None:\n            params = OrderedDict()\n        else:\n            if __validate_parameters__:\n                params = OrderedDict()\n                top_kind = _POSITIONAL_ONLY\n\n                for idx, param in enumerate(parameters):\n                    kind = param.kind\n                    if kind < top_kind:\n                        msg = \'wrong parameter order: {0} before {1}\'\n                        msg = msg.format(top_kind, param.kind)\n                        raise ValueError(msg)\n                    else:\n                        top_kind = kind\n\n                    name = param.name\n                    if name is None:\n                        name = str(idx)\n                        param = param.replace(name=name)\n\n                    if name in params:\n                        msg = \'duplicate parameter name: {0!r}\'.format(name)\n                        raise ValueError(msg)\n                    params[name] = param\n            else:\n                params = OrderedDict(((param.name, param)\n                                                for param in parameters))\n\n        self._parameters = params\n        self._return_annotation = return_annotation\n\n    @classmethod\n    def from_function(cls, func):\n        \'\'\'Constructs Signature for the given python function\'\'\'\n\n        if not isinstance(func, types.FunctionType):\n            raise TypeError(\'{0!r} is not a Python function\'.format(func))\n\n        Parameter = cls._parameter_cls\n\n        # Parameter information.\n        func_code = func.__code__\n        pos_count = func_code.co_argcount\n        arg_names = func_code.co_varnames\n        positional = tuple(arg_names[:pos_count])\n        keyword_only_count = getattr(func_code, \'co_kwonlyargcount\', 0)\n        keyword_only = arg_names[pos_count:(pos_count + keyword_only_count)]\n        annotations = getattr(func, \'__annotations__\', {})\n        defaults = func.__defaults__\n        kwdefaults = getattr(func, \'__kwdefaults__\', None)\n\n        if defaults:\n            pos_default_count = len(defaults)\n        else:\n            pos_default_count = 0\n\n        parameters = []\n\n        # Non-keyword-only parameters w/o defaults.\n        non_default_count = pos_count - pos_default_count\n        for name in positional[:non_default_count]:\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_POSITIONAL_OR_KEYWORD))\n\n        # ... w/ defaults.\n        for offset, name in enumerate(positional[non_default_count:]):\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_POSITIONAL_OR_KEYWORD,\n                                        default=defaults[offset]))\n\n        # *args\n        if func_code.co_flags & 0x04:\n            name = arg_names[pos_count + keyword_only_count]\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_VAR_POSITIONAL))\n\n        # Keyword-only parameters.\n        for name in keyword_only:\n            default = _empty\n            if kwdefaults is not None:\n                default = kwdefaults.get(name, _empty)\n\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_KEYWORD_ONLY,\n                                        default=default))\n        # **kwargs\n        if func_code.co_flags & 0x08:\n            index = pos_count + keyword_only_count\n            if func_code.co_flags & 0x04:\n                index += 1\n\n            name = arg_names[index]\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_VAR_KEYWORD))\n\n        return cls(parameters,\n                   return_annotation=annotations.get(\'return\', _empty),\n                   __validate_parameters__=False)\n\n    @property\n    def parameters(self):\n        try:\n            return types.MappingProxyType(self._parameters)\n        except AttributeError:\n            return OrderedDict(self._parameters.items())\n\n    @property\n    def return_annotation(self):\n        return self._return_annotation\n\n    def replace(self, parameters=_void, return_annotation=_void):\n        \'\'\'Creates a customized copy of the Signature.\n        Pass \'parameters\' and/or \'return_annotation\' arguments\n        to override them in the new copy.\n        \'\'\'\n\n        if parameters is _void:\n            parameters = self.parameters.values()\n\n        if return_annotation is _void:\n            return_annotation = self._return_annotation\n\n        return type(self)(parameters,\n                          return_annotation=return_annotation)\n\n    def __hash__(self):\n        msg = ""unhashable type: \'{0}\'"".format(self.__class__.__name__)\n        raise TypeError(msg)\n\n    def __eq__(self, other):\n        if (not issubclass(type(other), Signature) or\n                    self.return_annotation != other.return_annotation or\n                    len(self.parameters) != len(other.parameters)):\n            return False\n\n        other_positions = dict((param, idx)\n                           for idx, param in enumerate(other.parameters.keys()))\n\n        for idx, (param_name, param) in enumerate(self.parameters.items()):\n            if param.kind == _KEYWORD_ONLY:\n                try:\n                    other_param = other.parameters[param_name]\n                except KeyError:\n                    return False\n                else:\n                    if param != other_param:\n                        return False\n            else:\n                try:\n                    other_idx = other_positions[param_name]\n                except KeyError:\n                    return False\n                else:\n                    if (idx != other_idx or\n                                    param != other.parameters[param_name]):\n                        return False\n\n        return True\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def _bind(self, args, kwargs, partial=False):\n        \'\'\'Private method.  Don\'t use directly.\'\'\'\n\n        arguments = OrderedDict()\n\n        parameters = iter(self.parameters.values())\n        parameters_ex = ()\n        arg_vals = iter(args)\n\n        if partial:\n            # Support for binding arguments to \'functools.partial\' objects.\n            # See \'functools.partial\' case in \'signature()\' implementation\n            # for details.\n            for param_name, param in self.parameters.items():\n                if (param._partial_kwarg and param_name not in kwargs):\n                    # Simulating \'functools.partial\' behavior\n                    kwargs[param_name] = param.default\n\n        while True:\n            # Let\'s iterate through the positional arguments and corresponding\n            # parameters\n            try:\n                arg_val = next(arg_vals)\n            except StopIteration:\n                # No more positional arguments\n                try:\n                    param = next(parameters)\n                except StopIteration:\n                    # No more parameters. That\'s it. Just need to check that\n                    # we have no `kwargs` after this while loop\n                    break\n                else:\n                    if param.kind == _VAR_POSITIONAL:\n                        # That\'s OK, just empty *args.  Let\'s start parsing\n                        # kwargs\n                        break\n                    elif param.name in kwargs:\n                        if param.kind == _POSITIONAL_ONLY:\n                            msg = \'{arg!r} parameter is positional only, \' \\\n                                  \'but was passed as a keyword\'\n                            msg = msg.format(arg=param.name)\n                            raise TypeError(msg)\n                        parameters_ex = (param,)\n                        break\n                    elif (param.kind == _VAR_KEYWORD or\n                                                param.default is not _empty):\n                        # That\'s fine too - we have a default value for this\n                        # parameter.  So, lets start parsing `kwargs`, starting\n                        # with the current parameter\n                        parameters_ex = (param,)\n                        break\n                    else:\n                        if partial:\n                            parameters_ex = (param,)\n                            break\n                        else:\n                            msg = \'{arg!r} parameter lacking default value\'\n                            msg = msg.format(arg=param.name)\n                            raise TypeError(msg)\n            else:\n                # We have a positional argument to process\n                try:\n                    param = next(parameters)\n                except StopIteration:\n                    raise TypeError(\'too many positional arguments\')\n                else:\n                    if param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY):\n                        # Looks like we have no parameter for this positional\n                        # argument\n                        raise TypeError(\'too many positional arguments\')\n\n                    if param.kind == _VAR_POSITIONAL:\n                        # We have an \'*args\'-like argument, let\'s fill it with\n                        # all positional arguments we have left and move on to\n                        # the next phase\n                        values = [arg_val]\n                        values.extend(arg_vals)\n                        arguments[param.name] = tuple(values)\n                        break\n\n                    if param.name in kwargs:\n                        raise TypeError(\'multiple values for argument \'\n                                        \'{arg!r}\'.format(arg=param.name))\n\n                    arguments[param.name] = arg_val\n\n        # Now, we iterate through the remaining parameters to process\n        # keyword arguments\n        kwargs_param = None\n        for param in itertools.chain(parameters_ex, parameters):\n            if param.kind == _POSITIONAL_ONLY:\n                # This should never happen in case of a properly built\n                # Signature object (but let\'s have this check here\n                # to ensure correct behaviour just in case)\n                raise TypeError(\'{arg!r} parameter is positional only, \'\n                                \'but was passed as a keyword\'. \\\n                                format(arg=param.name))\n\n            if param.kind == _VAR_KEYWORD:\n                # Memorize that we have a \'**kwargs\'-like parameter\n                kwargs_param = param\n                continue\n\n            param_name = param.name\n            try:\n                arg_val = kwargs.pop(param_name)\n            except KeyError:\n                # We have no value for this parameter.  It\'s fine though,\n                # if it has a default value, or it is an \'*args\'-like\n                # parameter, left alone by the processing of positional\n                # arguments.\n                if (not partial and param.kind != _VAR_POSITIONAL and\n                                                    param.default is _empty):\n                    raise TypeError(\'{arg!r} parameter lacking default value\'. \\\n                                    format(arg=param_name))\n\n            else:\n                arguments[param_name] = arg_val\n\n        if kwargs:\n            if kwargs_param is not None:\n                # Process our \'**kwargs\'-like parameter\n                arguments[kwargs_param.name] = kwargs\n            else:\n                raise TypeError(\'too many keyword arguments\')\n\n        return self._bound_arguments_cls(self, arguments)\n\n    def bind(self, *args, **kwargs):\n        \'\'\'Get a BoundArguments object, that maps the passed `args`\n        and `kwargs` to the function\'s signature.  Raises `TypeError`\n        if the passed arguments can not be bound.\n        \'\'\'\n        return self._bind(args, kwargs)\n\n    def bind_partial(self, *args, **kwargs):\n        \'\'\'Get a BoundArguments object, that partially maps the\n        passed `args` and `kwargs` to the function\'s signature.\n        Raises `TypeError` if the passed arguments can not be bound.\n        \'\'\'\n        return self._bind(args, kwargs, partial=True)\n\n    def __str__(self):\n        result = []\n        render_kw_only_separator = True\n        for idx, param in enumerate(self.parameters.values()):\n            formatted = str(param)\n\n            kind = param.kind\n            if kind == _VAR_POSITIONAL:\n                # OK, we have an \'*args\'-like parameter, so we won\'t need\n                # a \'*\' to separate keyword-only arguments\n                render_kw_only_separator = False\n            elif kind == _KEYWORD_ONLY and render_kw_only_separator:\n                # We have a keyword-only parameter to render and we haven\'t\n                # rendered an \'*args\'-like parameter before, so add a \'*\'\n                # separator to the parameters list (""foo(arg1, *, arg2)"" case)\n                result.append(\'*\')\n                # This condition should be only triggered once, so\n                # reset the flag\n                render_kw_only_separator = False\n\n            result.append(formatted)\n\n        rendered = \'({0})\'.format(\', \'.join(result))\n\n        if self.return_annotation is not _empty:\n            anno = formatannotation(self.return_annotation)\n            rendered += \' -> {0}\'.format(anno)\n\n        return rendered\n'"
abupy/ExtBu/odict.py,0,"b'# Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.\n# Passes Python2.7\'s test suite and incorporates all the latest updates.\n# Copyright 2009 Raymond Hettinger\n# http://code.activestate.com/recipes/576693/\n""Ordered dictionary""\n\ntry:\n    from thread import get_ident as _get_ident\nexcept ImportError:\n    try:\n        from dummy_thread import get_ident as _get_ident\n    except ImportError:\n        # Ensure that this module is still importable under Pythhon3 to avoid\n        # crashing code-inspecting tools like nose.\n        from _dummy_thread import get_ident as _get_ident\n\ntry:\n    from _abcoll import KeysView, ValuesView, ItemsView\nexcept ImportError:\n    pass\n\n\nclass OrderedDict(dict):\n    \'Dictionary that remembers insertion order\'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as for regular dictionaries.\n\n    # The internal self.__map dictionary maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].\n\n    def __init__(self, *args, **kwds):\n        \'\'\'Initialize an ordered dictionary.  Signature is the same as for\n        regular dictionaries, but keyword arguments are not recommended\n        because their insertion order is arbitrary.\n\n        \'\'\'\n        if len(args) > 1:\n            raise TypeError(\'expected at most 1 arguments, got %d\' % len(args))\n        try:\n            self.__root\n        except AttributeError:\n            self.__root = root = []                     # sentinel node\n            root[:] = [root, root, None]\n            self.__map = {}\n        self.__update(*args, **kwds)\n\n    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):\n        \'od.__setitem__(i, y) <==> od[i]=y\'\n        # Setting a new item creates a new link which goes at the end of the linked\n        # list, and the inherited dictionary is updated with the new key/value pair.\n        if key not in self:\n            root = self.__root\n            last = root[0]\n            last[1] = root[0] = self.__map[key] = [last, root, key]\n        dict_setitem(self, key, value)\n\n    def __delitem__(self, key, dict_delitem=dict.__delitem__):\n        \'od.__delitem__(y) <==> del od[y]\'\n        # Deleting an existing item uses self.__map to find the link which is\n        # then removed by updating the links in the predecessor and successor nodes.\n        dict_delitem(self, key)\n        link_prev, link_next, key = self.__map.pop(key)\n        link_prev[1] = link_next\n        link_next[0] = link_prev\n\n    def __iter__(self):\n        \'od.__iter__() <==> iter(od)\'\n        root = self.__root\n        curr = root[1]\n        while curr is not root:\n            yield curr[2]\n            curr = curr[1]\n\n    def __reversed__(self):\n        \'od.__reversed__() <==> reversed(od)\'\n        root = self.__root\n        curr = root[0]\n        while curr is not root:\n            yield curr[2]\n            curr = curr[0]\n\n    def clear(self):\n        \'od.clear() -> None.  Remove all items from od.\'\n        try:\n            for node in self.__map.itervalues():\n                del node[:]\n            root = self.__root\n            root[:] = [root, root, None]\n            self.__map.clear()\n        except AttributeError:\n            pass\n        dict.clear(self)\n\n    def popitem(self, last=True):\n        \'\'\'od.popitem() -> (k, v), return and remove a (key, value) pair.\n        Pairs are returned in LIFO order if last is true or FIFO order if false.\n\n        \'\'\'\n        if not self:\n            raise KeyError(\'dictionary is empty\')\n        root = self.__root\n        if last:\n            link = root[0]\n            link_prev = link[0]\n            link_prev[1] = root\n            root[0] = link_prev\n        else:\n            link = root[1]\n            link_next = link[1]\n            root[1] = link_next\n            link_next[0] = root\n        key = link[2]\n        del self.__map[key]\n        value = dict.pop(self, key)\n        return key, value\n\n    # -- the following methods do not depend on the internal structure --\n\n    def keys(self):\n        \'od.keys() -> list of keys in od\'\n        return list(self)\n\n    def values(self):\n        \'od.values() -> list of values in od\'\n        return [self[key] for key in self]\n\n    def items(self):\n        \'od.items() -> list of (key, value) pairs in od\'\n        return [(key, self[key]) for key in self]\n\n    def iterkeys(self):\n        \'od.iterkeys() -> an iterator over the keys in od\'\n        return iter(self)\n\n    def itervalues(self):\n        \'od.itervalues -> an iterator over the values in od\'\n        for k in self:\n            yield self[k]\n\n    def iteritems(self):\n        \'od.iteritems -> an iterator over the (key, value) items in od\'\n        for k in self:\n            yield (k, self[k])\n\n    def update(*args, **kwds):\n        \'\'\'od.update(E, **F) -> None.  Update od from dict/iterable E and F.\n\n        If E is a dict instance, does:           for k in E: od[k] = E[k]\n        If E has a .keys() method, does:         for k in E.keys(): od[k] = E[k]\n        Or if E is an iterable of items, does:   for k, v in E: od[k] = v\n        In either case, this is followed by:     for k, v in F.items(): od[k] = v\n\n        \'\'\'\n        if len(args) > 2:\n            raise TypeError(\'update() takes at most 2 positional \'\n                            \'arguments (%d given)\' % (len(args),))\n        elif not args:\n            raise TypeError(\'update() takes at least 1 argument (0 given)\')\n        self = args[0]\n        # Make progressively weaker assumptions about ""other""\n        other = ()\n        if len(args) == 2:\n            other = args[1]\n        if isinstance(other, dict):\n            for key in other:\n                self[key] = other[key]\n        elif hasattr(other, \'keys\'):\n            for key in other.keys():\n                self[key] = other[key]\n        else:\n            for key, value in other:\n                self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    __update = update  # let subclasses override update without breaking __init__\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        \'\'\'od.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised.\n\n        \'\'\'\n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\n    def setdefault(self, key, default=None):\n        \'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od\'\n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n\n    def __repr__(self, _repr_running={}):\n        \'od.__repr__() <==> repr(od)\'\n        call_key = id(self), _get_ident()\n        if call_key in _repr_running:\n            return \'...\'\n        _repr_running[call_key] = 1\n        try:\n            if not self:\n                return \'%s()\' % (self.__class__.__name__,)\n            return \'%s(%r)\' % (self.__class__.__name__, self.items())\n        finally:\n            del _repr_running[call_key]\n\n    def __reduce__(self):\n        \'Return state information for pickling\'\n        items = [[k, self[k]] for k in self]\n        inst_dict = vars(self).copy()\n        for k in vars(OrderedDict()):\n            inst_dict.pop(k, None)\n        if inst_dict:\n            return (self.__class__, (items,), inst_dict)\n        return self.__class__, (items,)\n\n    def copy(self):\n        \'od.copy() -> a shallow copy of od\'\n        return self.__class__(self)\n\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        \'\'\'OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S\n        and values equal to v (which defaults to None).\n\n        \'\'\'\n        d = cls()\n        for key in iterable:\n            d[key] = value\n        return d\n\n    def __eq__(self, other):\n        \'\'\'od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n        while comparison to a regular mapping is order-insensitive.\n\n        \'\'\'\n        if isinstance(other, OrderedDict):\n            return len(self)==len(other) and self.items() == other.items()\n        return dict.__eq__(self, other)\n\n    def __ne__(self, other):\n        return not self == other\n\n    # -- the following methods are only used in Python 2.7 --\n\n    def viewkeys(self):\n        ""od.viewkeys() -> a set-like object providing a view on od\'s keys""\n        return KeysView(self)\n\n    def viewvalues(self):\n        ""od.viewvalues() -> an object providing a view on od\'s values""\n        return ValuesView(self)\n\n    def viewitems(self):\n        ""od.viewitems() -> a set-like object providing a view on od\'s items""\n        return ItemsView(self)\n'"
abupy/ExtBu/six.py,0,"b'""""""Utilities for writing code that runs on Python 2 and 3""""""\n\n# Copyright (c) 2010-2013 Benjamin Peterson\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the ""Software""), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nimport operator\nimport sys\nimport types\n\n__author__ = ""Benjamin Peterson <benjamin@python.org>""\n__version__ = ""1.4.1""\n\n\n# Useful for very coarse version differentiation.\nPY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\n\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,\n    text_type = str\n    binary_type = bytes\n\n    MAXSIZE = sys.maxsize\nelse:\n    string_types = basestring,\n    integer_types = (int, long)\n    class_types = (type, types.ClassType)\n    text_type = unicode\n    binary_type = str\n\n    if sys.platform.startswith(""java""):\n        # Jython always uses 32 bits.\n        MAXSIZE = int((1 << 31) - 1)\n    else:\n        # It\'s possible to have sizeof(long) != sizeof(Py_ssize_t).\n        class X(object):\n            def __len__(self):\n                return 1 << 31\n        try:\n            len(X())\n        except OverflowError:\n            # 32-bit\n            MAXSIZE = int((1 << 31) - 1)\n        else:\n            # 64-bit\n            MAXSIZE = int((1 << 63) - 1)\n        del X\n\n\ndef _add_doc(func, doc):\n    """"""Add documentation to a function.""""""\n    func.__doc__ = doc\n\n\ndef _import_module(name):\n    """"""Import module, returning the module after the last dot.""""""\n    __import__(name)\n    return sys.modules[name]\n\n\nclass _LazyDescr(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def __get__(self, obj, tp):\n        result = self._resolve()\n        setattr(obj, self.name, result)\n        # This is a bit ugly, but it avoids running this again.\n        delattr(tp, self.name)\n        return result\n\n\nclass MovedModule(_LazyDescr):\n\n    def __init__(self, name, old, new=None):\n        super(MovedModule, self).__init__(name)\n        if PY3:\n            if new is None:\n                new = name\n            self.mod = new\n        else:\n            self.mod = old\n\n    def _resolve(self):\n        return _import_module(self.mod)\n\n\nclass MovedAttribute(_LazyDescr):\n\n    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):\n        super(MovedAttribute, self).__init__(name)\n        if PY3:\n            if new_mod is None:\n                new_mod = name\n            self.mod = new_mod\n            if new_attr is None:\n                if old_attr is None:\n                    new_attr = name\n                else:\n                    new_attr = old_attr\n            self.attr = new_attr\n        else:\n            self.mod = old_mod\n            if old_attr is None:\n                old_attr = name\n            self.attr = old_attr\n\n    def _resolve(self):\n        module = _import_module(self.mod)\n        return getattr(module, self.attr)\n\n\n\nclass _MovedItems(types.ModuleType):\n    """"""Lazy loading of moved objects""""""\n\n\n_moved_attributes = [\n    MovedAttribute(""cStringIO"", ""cStringIO"", ""io"", ""StringIO""),\n    MovedAttribute(""filter"", ""itertools"", ""builtins"", ""ifilter"", ""filter""),\n    MovedAttribute(""filterfalse"", ""itertools"", ""itertools"", ""ifilterfalse"", ""filterfalse""),\n    MovedAttribute(""input"", ""__builtin__"", ""builtins"", ""raw_input"", ""input""),\n    MovedAttribute(""map"", ""itertools"", ""builtins"", ""imap"", ""map""),\n    MovedAttribute(""range"", ""__builtin__"", ""builtins"", ""xrange"", ""range""),\n    MovedAttribute(""reload_module"", ""__builtin__"", ""imp"", ""reload""),\n    MovedAttribute(""reduce"", ""__builtin__"", ""functools""),\n    MovedAttribute(""StringIO"", ""StringIO"", ""io""),\n    MovedAttribute(""UserString"", ""UserString"", ""collections""),\n    MovedAttribute(""xrange"", ""__builtin__"", ""builtins"", ""xrange"", ""range""),\n    MovedAttribute(""zip"", ""itertools"", ""builtins"", ""izip"", ""zip""),\n    MovedAttribute(""zip_longest"", ""itertools"", ""itertools"", ""izip_longest"", ""zip_longest""),\n\n    MovedModule(""builtins"", ""__builtin__""),\n    MovedModule(""configparser"", ""ConfigParser""),\n    MovedModule(""copyreg"", ""copy_reg""),\n    MovedModule(""http_cookiejar"", ""cookielib"", ""http.cookiejar""),\n    MovedModule(""http_cookies"", ""Cookie"", ""http.cookies""),\n    MovedModule(""html_entities"", ""htmlentitydefs"", ""html.entities""),\n    MovedModule(""html_parser"", ""HTMLParser"", ""html.parser""),\n    MovedModule(""http_client"", ""httplib"", ""http.client""),\n    MovedModule(""email_mime_multipart"", ""email.MIMEMultipart"", ""email.mime.multipart""),\n    MovedModule(""email_mime_text"", ""email.MIMEText"", ""email.mime.text""),\n    MovedModule(""email_mime_base"", ""email.MIMEBase"", ""email.mime.base""),\n    MovedModule(""BaseHTTPServer"", ""BaseHTTPServer"", ""http.server""),\n    MovedModule(""CGIHTTPServer"", ""CGIHTTPServer"", ""http.server""),\n    MovedModule(""SimpleHTTPServer"", ""SimpleHTTPServer"", ""http.server""),\n    MovedModule(""cPickle"", ""cPickle"", ""pickle""),\n    MovedModule(""queue"", ""Queue""),\n    MovedModule(""reprlib"", ""repr""),\n    MovedModule(""socketserver"", ""SocketServer""),\n    MovedModule(""tkinter"", ""Tkinter""),\n    MovedModule(""tkinter_dialog"", ""Dialog"", ""tkinter.dialog""),\n    MovedModule(""tkinter_filedialog"", ""FileDialog"", ""tkinter.filedialog""),\n    MovedModule(""tkinter_scrolledtext"", ""ScrolledText"", ""tkinter.scrolledtext""),\n    MovedModule(""tkinter_simpledialog"", ""SimpleDialog"", ""tkinter.simpledialog""),\n    MovedModule(""tkinter_tix"", ""Tix"", ""tkinter.tix""),\n    MovedModule(""tkinter_constants"", ""Tkconstants"", ""tkinter.constants""),\n    MovedModule(""tkinter_dnd"", ""Tkdnd"", ""tkinter.dnd""),\n    MovedModule(""tkinter_colorchooser"", ""tkColorChooser"",\n                ""tkinter.colorchooser""),\n    MovedModule(""tkinter_commondialog"", ""tkCommonDialog"",\n                ""tkinter.commondialog""),\n    MovedModule(""tkinter_tkfiledialog"", ""tkFileDialog"", ""tkinter.filedialog""),\n    MovedModule(""tkinter_font"", ""tkFont"", ""tkinter.font""),\n    MovedModule(""tkinter_messagebox"", ""tkMessageBox"", ""tkinter.messagebox""),\n    MovedModule(""tkinter_tksimpledialog"", ""tkSimpleDialog"",\n                ""tkinter.simpledialog""),\n    MovedModule(""urllib_parse"", __name__ + "".moves.urllib_parse"", ""urllib.parse""),\n    MovedModule(""urllib_error"", __name__ + "".moves.urllib_error"", ""urllib.error""),\n    MovedModule(""urllib"", __name__ + "".moves.urllib"", __name__ + "".moves.urllib""),\n    MovedModule(""urllib_robotparser"", ""robotparser"", ""urllib.robotparser""),\n    MovedModule(""winreg"", ""_winreg""),\n]\nfor attr in _moved_attributes:\n    setattr(_MovedItems, attr.name, attr)\ndel attr\n\nmoves = sys.modules[__name__ + "".moves""] = _MovedItems(__name__ + "".moves"")\n\n\n\nclass Module_six_moves_urllib_parse(types.ModuleType):\n    """"""Lazy loading of moved objects in six.moves.urllib_parse""""""\n\n\n_urllib_parse_moved_attributes = [\n    MovedAttribute(""ParseResult"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""parse_qs"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""parse_qsl"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""urldefrag"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""urljoin"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""urlparse"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""urlsplit"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""urlunparse"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""urlunsplit"", ""urlparse"", ""urllib.parse""),\n    MovedAttribute(""quote"", ""urllib"", ""urllib.parse""),\n    MovedAttribute(""quote_plus"", ""urllib"", ""urllib.parse""),\n    MovedAttribute(""unquote"", ""urllib"", ""urllib.parse""),\n    MovedAttribute(""unquote_plus"", ""urllib"", ""urllib.parse""),\n    MovedAttribute(""urlencode"", ""urllib"", ""urllib.parse""),\n]\nfor attr in _urllib_parse_moved_attributes:\n    setattr(Module_six_moves_urllib_parse, attr.name, attr)\ndel attr\n\nsys.modules[__name__ + "".moves.urllib_parse""] = Module_six_moves_urllib_parse(__name__ + "".moves.urllib_parse"")\nsys.modules[__name__ + "".moves.urllib.parse""] = Module_six_moves_urllib_parse(__name__ + "".moves.urllib.parse"")\n\n\nclass Module_six_moves_urllib_error(types.ModuleType):\n    """"""Lazy loading of moved objects in six.moves.urllib_error""""""\n\n\n_urllib_error_moved_attributes = [\n    MovedAttribute(""URLError"", ""urllib2"", ""urllib.error""),\n    MovedAttribute(""HTTPError"", ""urllib2"", ""urllib.error""),\n    MovedAttribute(""ContentTooShortError"", ""urllib"", ""urllib.error""),\n]\nfor attr in _urllib_error_moved_attributes:\n    setattr(Module_six_moves_urllib_error, attr.name, attr)\ndel attr\n\nsys.modules[__name__ + "".moves.urllib_error""] = Module_six_moves_urllib_error(__name__ + "".moves.urllib_error"")\nsys.modules[__name__ + "".moves.urllib.error""] = Module_six_moves_urllib_error(__name__ + "".moves.urllib.error"")\n\n\nclass Module_six_moves_urllib_request(types.ModuleType):\n    """"""Lazy loading of moved objects in six.moves.urllib_request""""""\n\n\n_urllib_request_moved_attributes = [\n    MovedAttribute(""urlopen"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""install_opener"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""build_opener"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""pathname2url"", ""urllib"", ""urllib.request""),\n    MovedAttribute(""url2pathname"", ""urllib"", ""urllib.request""),\n    MovedAttribute(""getproxies"", ""urllib"", ""urllib.request""),\n    MovedAttribute(""Request"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""OpenerDirector"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPDefaultErrorHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPRedirectHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPCookieProcessor"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""ProxyHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""BaseHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPPasswordMgr"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPPasswordMgrWithDefaultRealm"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""AbstractBasicAuthHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPBasicAuthHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""ProxyBasicAuthHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""AbstractDigestAuthHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPDigestAuthHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""ProxyDigestAuthHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPSHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""FileHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""FTPHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""CacheFTPHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""UnknownHandler"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""HTTPErrorProcessor"", ""urllib2"", ""urllib.request""),\n    MovedAttribute(""urlretrieve"", ""urllib"", ""urllib.request""),\n    MovedAttribute(""urlcleanup"", ""urllib"", ""urllib.request""),\n    MovedAttribute(""URLopener"", ""urllib"", ""urllib.request""),\n    MovedAttribute(""FancyURLopener"", ""urllib"", ""urllib.request""),\n]\nfor attr in _urllib_request_moved_attributes:\n    setattr(Module_six_moves_urllib_request, attr.name, attr)\ndel attr\n\nsys.modules[__name__ + "".moves.urllib_request""] = Module_six_moves_urllib_request(__name__ + "".moves.urllib_request"")\nsys.modules[__name__ + "".moves.urllib.request""] = Module_six_moves_urllib_request(__name__ + "".moves.urllib.request"")\n\n\nclass Module_six_moves_urllib_response(types.ModuleType):\n    """"""Lazy loading of moved objects in six.moves.urllib_response""""""\n\n\n_urllib_response_moved_attributes = [\n    MovedAttribute(""addbase"", ""urllib"", ""urllib.response""),\n    MovedAttribute(""addclosehook"", ""urllib"", ""urllib.response""),\n    MovedAttribute(""addinfo"", ""urllib"", ""urllib.response""),\n    MovedAttribute(""addinfourl"", ""urllib"", ""urllib.response""),\n]\nfor attr in _urllib_response_moved_attributes:\n    setattr(Module_six_moves_urllib_response, attr.name, attr)\ndel attr\n\nsys.modules[__name__ + "".moves.urllib_response""] = Module_six_moves_urllib_response(__name__ + "".moves.urllib_response"")\nsys.modules[__name__ + "".moves.urllib.response""] = Module_six_moves_urllib_response(__name__ + "".moves.urllib.response"")\n\n\nclass Module_six_moves_urllib_robotparser(types.ModuleType):\n    """"""Lazy loading of moved objects in six.moves.urllib_robotparser""""""\n\n\n_urllib_robotparser_moved_attributes = [\n    MovedAttribute(""RobotFileParser"", ""robotparser"", ""urllib.robotparser""),\n]\nfor attr in _urllib_robotparser_moved_attributes:\n    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)\ndel attr\n\nsys.modules[__name__ + "".moves.urllib_robotparser""] = Module_six_moves_urllib_robotparser(__name__ + "".moves.urllib_robotparser"")\nsys.modules[__name__ + "".moves.urllib.robotparser""] = Module_six_moves_urllib_robotparser(__name__ + "".moves.urllib.robotparser"")\n\n\nclass Module_six_moves_urllib(types.ModuleType):\n    """"""Create a six.moves.urllib namespace that resembles the Python 3 namespace""""""\n    parse = sys.modules[__name__ + "".moves.urllib_parse""]\n    error = sys.modules[__name__ + "".moves.urllib_error""]\n    request = sys.modules[__name__ + "".moves.urllib_request""]\n    response = sys.modules[__name__ + "".moves.urllib_response""]\n    robotparser = sys.modules[__name__ + "".moves.urllib_robotparser""]\n\n\nsys.modules[__name__ + "".moves.urllib""] = Module_six_moves_urllib(__name__ + "".moves.urllib"")\n\n\ndef add_move(move):\n    """"""Add an item to six.moves.""""""\n    setattr(_MovedItems, move.name, move)\n\n\ndef remove_move(name):\n    """"""Remove item from six.moves.""""""\n    try:\n        delattr(_MovedItems, name)\n    except AttributeError:\n        try:\n            del moves.__dict__[name]\n        except KeyError:\n            raise AttributeError(""no such move, %r"" % (name,))\n\n\nif PY3:\n    _meth_func = ""__func__""\n    _meth_self = ""__self__""\n\n    _func_closure = ""__closure__""\n    _func_code = ""__code__""\n    _func_defaults = ""__defaults__""\n    _func_globals = ""__globals__""\n\n    _iterkeys = ""keys""\n    _itervalues = ""values""\n    _iteritems = ""items""\n    _iterlists = ""lists""\nelse:\n    _meth_func = ""im_func""\n    _meth_self = ""im_self""\n\n    _func_closure = ""func_closure""\n    _func_code = ""func_code""\n    _func_defaults = ""func_defaults""\n    _func_globals = ""func_globals""\n\n    _iterkeys = ""iterkeys""\n    _itervalues = ""itervalues""\n    _iteritems = ""iteritems""\n    _iterlists = ""iterlists""\n\n\ntry:\n    advance_iterator = next\nexcept NameError:\n    def advance_iterator(it):\n        return it.next()\nnext = advance_iterator\n\n\ntry:\n    callable = callable\nexcept NameError:\n    def callable(obj):\n        return any(""__call__"" in klass.__dict__ for klass in type(obj).__mro__)\n\n\nif PY3:\n    def get_unbound_function(unbound):\n        return unbound\n\n    create_bound_method = types.MethodType\n\n    Iterator = object\nelse:\n    def get_unbound_function(unbound):\n        return unbound.im_func\n\n    def create_bound_method(func, obj):\n        return types.MethodType(func, obj, obj.__class__)\n\n    class Iterator(object):\n\n        def next(self):\n            return type(self).__next__(self)\n\n    callable = callable\n_add_doc(get_unbound_function,\n         """"""Get the function out of a possibly unbound function"""""")\n\n\nget_method_function = operator.attrgetter(_meth_func)\nget_method_self = operator.attrgetter(_meth_self)\nget_function_closure = operator.attrgetter(_func_closure)\nget_function_code = operator.attrgetter(_func_code)\nget_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\n\n\ndef iterkeys(d, **kw):\n    """"""Return an iterator over the keys of a dictionary.""""""\n    return iter(getattr(d, _iterkeys)(**kw))\n\ndef itervalues(d, **kw):\n    """"""Return an iterator over the values of a dictionary.""""""\n    return iter(getattr(d, _itervalues)(**kw))\n\ndef iteritems(d, **kw):\n    """"""Return an iterator over the (key, value) pairs of a dictionary.""""""\n    return iter(getattr(d, _iteritems)(**kw))\n\ndef iterlists(d, **kw):\n    """"""Return an iterator over the (key, [values]) pairs of a dictionary.""""""\n    return iter(getattr(d, _iterlists)(**kw))\n\n\nif PY3:\n    def b(s):\n        return s.encode(""latin-1"")\n    def u(s):\n        return s\n    unichr = chr\n    if sys.version_info[1] <= 1:\n        def int2byte(i):\n            return bytes((i,))\n    else:\n        # This is about 2x faster than the implementation above on 3.2+\n        int2byte = operator.methodcaller(""to_bytes"", 1, ""big"")\n    byte2int = operator.itemgetter(0)\n    indexbytes = operator.getitem\n    iterbytes = iter\n    import io\n    StringIO = io.StringIO\n    BytesIO = io.BytesIO\nelse:\n    def b(s):\n        return s\n    def u(s):\n        return unicode(s, ""unicode_escape"")\n    unichr = unichr\n    int2byte = chr\n    def byte2int(bs):\n        return ord(bs[0])\n    def indexbytes(buf, i):\n        return ord(buf[i])\n    def iterbytes(buf):\n        return (ord(byte) for byte in buf)\n    import StringIO\n    StringIO = BytesIO = StringIO.StringIO\n_add_doc(b, """"""Byte literal"""""")\n_add_doc(u, """"""Text literal"""""")\n\n\nif PY3:\n    import builtins\n    exec_ = getattr(builtins, ""exec"")\n\n\n    def reraise(tp, value, tb=None):\n        if value.__traceback__ is not tb:\n            raise value.with_traceback(tb)\n        raise value\n\n\n    print_ = getattr(builtins, ""print"")\n    del builtins\n\nelse:\n    def exec_(_code_, _globs_=None, _locs_=None):\n        """"""Execute code in a namespace.""""""\n        if _globs_ is None:\n            frame = sys._getframe(1)\n            _globs_ = frame.f_globals\n            if _locs_ is None:\n                _locs_ = frame.f_locals\n            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(""""""exec _code_ in _globs_, _locs_"""""")\n\n\n    exec_(""""""def reraise(tp, value, tb=None):\n    raise tp, value, tb\n"""""")\n\n\n    def print_(*args, **kwargs):\n        """"""The new-style print function.""""""\n        fp = kwargs.pop(""file"", sys.stdout)\n        if fp is None:\n            return\n        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(""sep"", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(""sep must be None or a string"")\n        end = kwargs.pop(""end"", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(""end must be None or a string"")\n        if kwargs:\n            raise TypeError(""invalid keyword arguments to print()"")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(""\\n"")\n            space = unicode("" "")\n        else:\n            newline = ""\\n""\n            space = "" ""\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)\n\n_add_doc(reraise, """"""Reraise an exception."""""")\n\n\ndef with_metaclass(meta, *bases):\n    """"""Create a base class with a metaclass.""""""\n    return meta(""NewBase"", bases, {})\n\ndef add_metaclass(metaclass):\n    """"""Class decorator for creating a class with a metaclass.""""""\n    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        orig_vars.pop(\'__dict__\', None)\n        orig_vars.pop(\'__weakref__\', None)\n        for slots_var in orig_vars.get(\'__slots__\', ()):\n            orig_vars.pop(slots_var)\n        return metaclass(cls.__name__, cls.__bases__, orig_vars)\n    return wrapper\n'"
abupy/FactorBuyBu/ABuBuyFactorWrap.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom ..CoreBu.ABuFixes import six\nfrom ..TLineBu.ABuTL import AbuTLine\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuLeastPolyWrap(object):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xb0\x81\xe8\xa3\x85show_least_valid_poly\xe5\xaf\xb9\xe5\xa4\xa7\xe7\x9b\x98\xe9\x9c\x87\xe8\x8d\xa1\xe5\xa4\xa7\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\xb0\x81\xe9\x94\x81\xe4\xba\xa4\xe6\x98\x93""""""\n\n    def __call__(self, cls):\n        """"""\xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe7\xb1\xbb\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8""""""\n\n        if isinstance(cls, six.class_types):\n            # \xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xba\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\n\n            init_self = cls._init_self\n            org_fit_day = cls.fit_day\n\n            # fit_month\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\n            org_fit_month = getattr(cls, \'fit_month\', None)\n\n            def init_self_wrapped(*args, **kwargs):\n                # \xe6\x8b\xbf\xe5\x87\xba\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84self\xe5\xaf\xb9\xe8\xb1\xa1\n                warp_self = args[0]\n                # \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xbe\xe7\xbd\xaepoly\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cself.poly\xe5\x9c\xa8fit_month\xe4\xb8\xad\xe5\x92\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe5\xa4\xa7\xe7\x9b\x98\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84poly\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8c\n                # \xe8\x8b\xa5\xe6\x98\xaf\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9a\x84poly\xe5\xa4\xa7\xe4\xba\x8epoly\xe8\xae\xa4\xe4\xb8\xba\xe8\xb5\xb0\xe5\x8a\xbf\xe9\x9c\x87\xe8\x8d\xa1\n                warp_self.poly = kwargs.pop(\'poly\', 2)\n                # \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x81\xe9\x94\x81\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\xa4\xe6\x98\x93\n                warp_self.lock = False\n                # \xe8\xb0\x83\xe7\x94\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9a\x84_init_self\n                init_self(*args, **kwargs)\n\n            def fit_day_wrapped(*args, **kwargs):\n                # \xe6\x8b\xbf\xe5\x87\xba\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84self\xe5\xaf\xb9\xe8\xb1\xa1\n                warp_self = args[0]\n                if warp_self.lock:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xb0\x81\xe9\x94\x81\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n                    return None\n                return org_fit_day(*args, **kwargs)\n\n            def fit_month_wrapped(*args, **kwargs):\n                warp_self = args[0]\n                today = args[1]\n                # fit_month\xe5\x8d\xb3\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n                # \xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe6\x8b\xa5\xe6\x9c\x89self.benchmark\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cbenchmark.kl_pd\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\n                benchmark_df = warp_self.benchmark.kl_pd\n                # \xe6\x8b\xbf\xe5\x87\xba\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9a\x84\xe4\xbb\x8a\xe5\xa4\xa9\n                benchmark_today = benchmark_df[benchmark_df.date == today.date]\n                if benchmark_today.empty:\n                    return 0\n                # \xe8\xa6\x81\xe6\x8b\xbf\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\x87\x86\xe5\xa4\x87\xe5\x88\x87\xe7\x89\x87\xe7\x9a\x84start\xef\xbc\x8cend\n                end_key = int(benchmark_today.iloc[0].key)\n                start_key = end_key - 20\n                if start_key < 0:\n                    return 0\n\n                # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe7\x89\x87\xe5\x88\x87\xe5\x87\xba\xe4\xbb\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x90\x91\xe5\x89\x8d20\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n                benchmark_month = benchmark_df[start_key:end_key + 1]\n                # \xe9\x80\x9a\xe8\xbf\x87\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0AbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n                benchmark_month_line = AbuTLine(benchmark_month.close, \'benchmark month line\')\n                # \xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x99\xe4\xb8\xaa\xe6\x9c\x88\xe6\x9c\x80\xe5\xb0\x91\xe9\x9c\x80\xe8\xa6\x81\xe5\x87\xa0\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x89\x8d\xe8\x83\xbd\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\n                least = benchmark_month_line.show_least_valid_poly(show=False)\n\n                if least >= warp_self.poly:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\xb0\x91\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcself.poly\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x88\x90\xe7\xab\x8b\xef\xbc\x8c\xe5\xa4\xa7\xe7\x9b\x98\xe9\x9d\x9e\xe9\x9c\x87\xe8\x8d\xa1\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe8\xa7\xa3\xe9\x94\x81\xe4\xba\xa4\xe6\x98\x93\n                    warp_self.lock = False\n                else:\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\xb0\x91\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe5\xb0\x8f\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcself.poly\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe5\xa4\xa7\xe7\x9b\x98\xe5\xa4\x84\xe4\xba\x8e\xe9\x9c\x87\xe8\x8d\xa1\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\xb0\x81\xe9\x94\x81\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\n                    warp_self.lock = True\n\n                if org_fit_month is not None:\n                    return org_fit_month(*args, **kwargs)\n\n            cls._init_self = init_self_wrapped\n            init_self_wrapped.__name__ = \'_init_self\'\n\n            cls.fit_day = fit_day_wrapped\n            fit_day_wrapped.__name__ = \'fit_day\'\n\n            cls.fit_month = fit_month_wrapped\n            fit_month_wrapped.__name__ = \'fit_month\'\n\n            return cls\n        else:\n            raise TypeError(\'AbuLeastPolyWrap just for class warp\')\n'"
abupy/FactorBuyBu/ABuFactorBuyBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport copy\nfrom abc import ABCMeta, abstractmethod\n\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu.ABuDeprecated import AbuDeprecated\nfrom ..BetaBu.ABuAtrPosition import AbuAtrPosition\nfrom ..BetaBu import ABuPositionBase\nfrom ..TradeBu.ABuOrder import AbuOrder\nfrom ..TradeBu.ABuMLFeature import AbuMlFeature\nfrom ..CoreBu.ABuBase import AbuParamBase\nfrom ..SlippageBu.ABuSlippageBuyMean import AbuSlippageBuyMean\nfrom ..UtilBu.ABuLazyUtil import LazyFunc\nfrom ..UmpBu.ABuUmpManager import AbuUmpManager\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass BuyCallMixin(object):\n    """"""\n        \xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe6\xb6\xa8\xef\xbc\x8c\xe4\xb8\x8d\xe5\xae\x8c\xe5\x85\xa8\xe6\x98\xaf\xe6\x9c\x9f\xe6\x9d\x83\xe4\xb8\xadbuy call\xe7\x9a\x84\xe6\xa6\x82\xe5\xbf\xb5\xef\xbc\x8c\n        \xe5\x8f\xaa\xe4\xbb\xa3\xe8\xa1\xa8\xe7\x9c\x8b\xe6\xb6\xa8\xe6\xad\xa3\xe5\x90\x91\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x8d\xb3\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8a\xe6\xb6\xa8\xef\xbc\x8c\xe4\xb8\x8a\xe6\xb6\xa8\xe5\xb8\xa6\xe6\x9d\xa5\xe6\x94\xb6\xe7\x9b\x8a\n    """"""\n\n    @LazyFunc\n    def buy_type_str(self):\n        """"""\xe7\x94\xa8\xe6\x9d\xa5\xe5\x8c\xba\xe5\x88\xab\xe4\xb9\xb0\xe5\x85\xa5\xe7\xb1\xbb\xe5\x9e\x8bunique \xe5\x80\xbc\xe4\xb8\xbacall""""""\n        return ""call""\n\n    @LazyFunc\n    def expect_direction(self):\n        """"""\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8a\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c1.0\xe5\x8d\xb3\xe6\xad\xa3\xe5\x90\x91\xe6\x9c\x9f\xe6\x9c\x9b""""""\n        return 1.0\n\n\nclass BuyPutMixin(object):\n    """"""\n        \xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe8\xb7\x8c\xef\xbc\x8c\xe5\xba\x94\xe7\x94\xa8\xe5\x9c\xba\xe6\x99\xaf\xe5\x9c\xa8\xe4\xba\x8e\xe6\x9c\x9f\xe6\x9d\x83\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa7\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xef\xbc\x8c\n        \xe4\xb8\x8d\xe5\xae\x8c\xe5\x85\xa8\xe6\x98\xaf\xe6\x9c\x9f\xe6\x9d\x83\xe4\xb8\xadbuy put\xe7\x9a\x84\xe6\xa6\x82\xe5\xbf\xb5\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbb\xa3\xe7\x9c\x8b\xe8\xb7\x8c\xe5\x8f\x8d\xe5\x90\x91\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe4\xb8\x8b\xe8\xb7\x8c\xe5\xb8\xa6\xe6\x9d\xa5\xe6\x94\xb6\xe7\x9b\x8a\n    """"""\n\n    @LazyFunc\n    def buy_type_str(self):\n        """"""\xe7\x94\xa8\xe6\x9d\xa5\xe5\x8c\xba\xe5\x88\xab\xe4\xb9\xb0\xe5\x85\xa5\xe7\xb1\xbb\xe5\x9e\x8bunique \xe5\x80\xbc\xe4\xb8\xbaput""""""\n        return ""put""\n\n    @LazyFunc\n    def expect_direction(self):\n        """"""\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8a\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c1.0\xe5\x8d\xb3\xe5\x8f\x8d\xe5\x90\x91\xe6\x9c\x9f\xe6\x9c\x9b""""""\n        return -1.0\n\n\nclass AbuFactorBuyBase(six.with_metaclass(ABCMeta, AbuParamBase)):\n    """"""\n        \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x9f\xba\xe7\xb1\xbb\xef\xbc\x9a\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xa7\xe6\x89\xbfAbuFactorBuyBase\xe7\x9a\x84\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe6\xb7\xb7\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91\xe7\xb1\xbb\xef\xbc\x8c\n        \xe4\xb8\x94\xe5\x8f\xaa\xe8\x83\xbd\xe6\xb7\xb7\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8d\xb3\xe5\x85\xb7\xe4\xbd\x93\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\x8e\xe7\xa1\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe4\xb8\x94\xe5\x8f\xaa\xe8\x83\xbd\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\n        \xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x8d\xe8\x83\xbd\xe5\x90\x8c\xe4\xb8\x8a\xe5\x8f\x88\xe7\x9c\x8b\xe6\xb6\xa8\xe5\x8f\x88\xe7\x9c\x8b\xe8\xb7\x8c\xef\xbc\x8c\n\n        \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x86\x85\xe9\x83\xa8\xe5\x8f\xaf\xe5\xae\xb9\xe7\xba\xb3\xe4\xb8\x93\xe5\xb1\x9e\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x92\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\xb3\xe5\x80\xbc\xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\xac\xe6\xba\x90\xe7\x94\x9f\xe6\x95\x88\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x92\x8c\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\n        \xe4\xb8\x94\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8a\xa8\xe6\x80\x81\xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe6\xaf\x8f\xe6\x9c\x88\xe6\x88\x96\xe8\x80\x85\xe6\xaf\x8f\xe5\x91\xa8\xe6\xa0\xb9\xe6\x8d\xae\xe7\xad\x96\xe7\x95\xa5\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xe3\x80\x82\n    """"""\n\n    def __init__(self, capital, kl_pd, combine_kl_pd, benchmark, **kwargs):\n        """"""\n        :param capital:\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd:\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param combine_kl_pd:\xe5\x90\x88\xe5\xb9\xb6\xe4\xba\x86\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe5\xb9\xb4\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaf\xe6\x9c\x89\xe9\x80\x89\xe6\x8b\xa9\xe6\x80\xa7\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe5\xa4\xa7\xe7\x9b\x98\xe5\xaf\xb9\xe6\xaf\x94\xe7\xad\x89\xe5\x8a\x9f\xe8\x83\xbd\n        """"""\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\n        self.kl_pd = kl_pd\n        # \xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xe6\x9e\x84\xe5\xbb\xba\xe9\x9c\x80\xe8\xa6\x81\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe8\xa7\x81make_buy_order_ml_feature\xe4\xb8\xad\xe6\x9e\x84\xe9\x80\xa0\xe7\x89\xb9\xe5\xbe\x81\xe4\xbd\xbf\xe7\x94\xa8\n        self.combine_kl_pd = combine_kl_pd\n        # \xe8\xb5\x84\xe9\x87\x91\xe6\x83\x85\xe5\x86\xb5\xe6\x95\xb0\xe6\x8d\xae\n        self.capital = capital\n        # \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaf\xe6\x9c\x89\xe9\x80\x89\xe6\x8b\xa9\xe6\x80\xa7\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe5\xa4\xa7\xe7\x9b\x98\xe5\xaf\xb9\xe6\xaf\x94\xe7\xad\x89\xe5\x8a\x9f\xe8\x83\xbd\n        self.benchmark = benchmark\n\n        # \xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4AbuSlippageBuyMean\n        self._slippage_class_init(**kwargs)\n        # \xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4AbuAtrPosition\n        self._position_class_init(**kwargs)\n\n        # \xe6\x9e\x84\xe9\x80\xa0ump\xe5\xaf\xb9\xe5\xa4\x96\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe5\xaf\xb9\xe8\xb1\xa1UmpManager\n        self.ump_manger = AbuUmpManager(self)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84factor_name\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe9\x80\x9a\xe8\xbf\x87_init_self\xe5\x8f\xaf\xe8\xa6\x86\xe7\x9b\x96\xe6\x9b\xb4\xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.factor_name = \'{}\'.format(self.__class__.__name__)\n\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\n        self.skip_days = 0\n        # \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x81\xe9\x94\x81\xe6\x9c\xac\xe6\xba\x90\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe6\xad\xa4\xe5\x80\xbc\xe5\x8f\xaa\xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\xac\xe6\xba\x90\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe9\x99\x84\xe5\xb1\x9e\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb9\xe5\x8f\x98\n        self.lock_factor = False\n        # kwargs\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe5\x85\xb6\xe5\xae\x83\xe8\xae\xbe\xe7\xbd\xae\xe8\xb5\x8b\xe4\xba\x88\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n        self._other_kwargs_init(**kwargs)\n\n        # \xe5\xad\x90\xe7\xb1\xbb\xe7\xbb\xa7\xe7\xbb\xad\xe5\xae\x8c\xe6\x88\x90\xe8\x87\xaa\xe6\x9c\x89\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\n        self._init_self(**kwargs)\n\n    def _position_class_init(self, **kwargs):\n        """"""\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe6\x9e\x84\xe5\xbb\xba""""""\n\n        # \xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4AbuAtrPosition\n        if ABuPositionBase.g_default_pos_class is None:\n            self.position_class = AbuAtrPosition\n            # \xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe6\x9e\x84\xe5\xbb\xba\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\xbb\x98\xe8\xae\xa4\xe7\xa9\xba\xe5\xad\x97\xe5\x85\xb8\n            self.position_kwargs = dict()\n        else:\n            # \xe5\x90\xa6\xe5\x88\x99\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x86\xe5\x85\xa8\xe5\xb1\x80\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xbc\xb9\xe5\x87\xbaclass\n            default_pos_class = copy.deepcopy(ABuPositionBase.g_default_pos_class)\n            self.position_class = default_pos_class.pop(\'class\')\n            # \xe5\xbc\xb9\xe5\x87\xbaclass\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe5\xb0\xb1\xe4\xb8\xba\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n            self.position_kwargs = default_pos_class\n\n        if \'position\' in kwargs:\n            position = kwargs.pop(\'position\', AbuAtrPosition)\n            if isinstance(position, six.class_types):\n                # \xe5\xa6\x82\xe6\x9e\x9cposition\xe9\x87\x8c\xe9\x9d\xa2\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaaclass\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xbc\xb9\xe5\x87\xba\n                self.position_class = position\n            elif isinstance(position, dict):\n                # \xe6\x94\xaf\xe6\x8c\x81\xe8\xb5\x8b\xe4\xba\x88\xe5\xad\x97\xe5\x85\xb8\xe7\xbb\x93\xe6\x9e\x84 eg: {\'class\': AbuAtrPosition, \'atr_base_price\': 20, \'atr_pos_base\': 0.5}\n                if \'class\' not in position:\n                    # \xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n                    raise ValueError(\'position class key must name class !!!\')\n                position_cp = copy.deepcopy(position)\n                # pop\xe5\x87\xba\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe9\x83\xbd\xe4\xb8\xba\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n                self.position_class = position_cp.pop(\'class\')\n                # pop\xe5\x87\xbaclass\xe4\xb9\x8b\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe5\xb0\xb1class\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                self.position_kwargs = position_cp\n            else:\n                raise TypeError(\'_position_class_init position type is {}\'.format(type(position)))\n\n    def _slippage_class_init(self, **kwargs):\n        """"""\xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\xe6\x9e\x84\xe5\xbb\xba""""""\n        # \xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4AbuSlippageBuyMean\n        self.slippage_class = kwargs.pop(\'slippage\', AbuSlippageBuyMean)\n        # TODO \xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\xe5\xae\x8c\xe5\x96\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x89\xe9\x9c\x80\xe6\xb1\x82\n\n    def _other_kwargs_init(self, **kwargs):\n        """"""\n            kwargs\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe5\x85\xb6\xe5\xae\x83\xe8\xae\xbe\xe7\xbd\xae\xe8\xb5\x8b\xe4\xba\x88\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n            \xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0win_rate\xef\xbc\x9a\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x88\xe5\x8f\xaf\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\xbe\x97\xe5\x87\xba\xef\xbc\x89\n            \xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0gains_mean\xef\xbc\x9a\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x88\xe5\x8f\xaf\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\xbe\x97\xe5\x87\xba\xef\xbc\x89\n            \xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0gains_mean\xef\xbc\x9a\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xba\x8f\xe6\x8d\x9f\xef\xbc\x88\xe5\x8f\xaf\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xae\xa1\xe7\xae\x97\xe5\xbe\x97\xe5\x87\xba\xef\xbc\x89\n\n            \xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0stock_pickers\xef\xbc\x9a\xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xba\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n            \xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0sell_factors\xef\xbc\x9a \xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\n        """"""\n\n        # \xe5\x85\x88\xe5\xa4\x84\xe7\x90\x86\xe8\xbf\x87\xe6\x97\xb6\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        self._deprecated_kwargs_init(**kwargs)\n\n        # \xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\n        self.ps_week = []\n        # \xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe6\x9c\x88\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\n        self.ps_month = []\n        # \xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n        stock_pickers = kwargs.pop(\'stock_pickers\', [])\n        for picker_class in stock_pickers:\n            if picker_class is None:\n                continue\n            if \'class\' not in picker_class:\n                # \xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n                raise ValueError(\'picker_class class key must name class !!!\')\n            picker_class_cp = copy.deepcopy(picker_class)\n            # pop\xe5\x87\xba\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe9\x83\xbd\xe4\xb8\xba\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            class_fac = picker_class_cp.pop(\'class\')\n            # \xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x8b\xac\xe6\x9c\x89\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\x94\x9f\xe6\x95\x88\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xaeweek\xe4\xb8\xba\xe4\xb8\x80\xe5\x91\xa8\n            pick_period = picker_class_cp.pop(\'pick_period\', \'month\')\n            # \xe6\x95\xb4\xe5\x90\x88capital\xef\xbc\x8cbenchmark\xe7\xad\x89\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\n            picker = class_fac(self.capital, self.benchmark, **picker_class_cp)\n            if pick_period == \'month\':\n                self.ps_month.append(picker)\n            elif pick_period == \'week\':\n                self.ps_week.append(picker)\n            else:\n                raise ValueError(\'pick_period just support month|week!\')\n\n        # \xe4\xb8\x93\xe5\xb1\x9e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\xac\xe6\xba\x90\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x94\x9f\xe6\x95\x88\n        self.sell_factors = []\n        sell_factors = kwargs.pop(\'sell_factors\', [])\n        for factor_class in sell_factors:\n            if factor_class is None:\n                continue\n            if \'class\' not in factor_class:\n                # \xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n                raise ValueError(\'factor class key must name class !!!\')\n            factor_class_cp = copy.deepcopy(factor_class)\n            # pop\xe5\x87\xba\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\xe5\x90\x8e\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84\xe9\x83\xbd\xe4\xb8\xba\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n            class_fac = factor_class_cp.pop(\'class\')\n            # \xe6\x95\xb4\xe5\x90\x88capital\xef\xbc\x8ckl_pd\xe7\xad\x89\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\n            factor = class_fac(self.capital, self.kl_pd, self.combine_kl_pd, self.benchmark, **factor_class_cp)\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe6\x9c\xac\xe6\xba\x90\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n            self.sell_factors.append(factor)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, slippage, position, kl_pd.info""""""\n        return \'{}: slippage:{}, position:{} \\nkl:\\n{}\'.format(self.__class__.__name__,\n                                                               self.slippage_class, self.position_class,\n                                                               self.kl_pd.info())\n\n    __repr__ = __str__\n\n    def make_buy_order(self, day_ind=-1):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\n        \xe5\x86\xb3\xe7\xad\x96\xe4\xba\xa4\xe6\x98\x93\xe6\x98\xaf\xe5\x90\xa6\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\xa6\xe4\xb9\xa0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9eorder\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa2\xe5\x8d\x95\xe7\x94\x9f\xe6\x95\x88\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        """"""\n        if day_ind == -1:\n            # \xe9\xbb\x98\xe8\xae\xa4\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe9\x9d\x9e\xe9\xab\x98\xe9\xa2\x91\xef\xbc\x8c\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x8f\x91\xe5\x87\xba\xe5\x90\x8e\xef\xbc\x8c\xe6\x98\x8e\xe5\xa4\xa9\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\n            day_ind = self.today_ind\n\n        order = AbuOrder()\n        # AbuOrde\xe5\xaf\xb9\xe8\xb1\xa1\xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\n        order.fit_buy_order(day_ind, self)\n\n        if order.order_deal:\n            # \xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90\n            ml_feature_dict = self.make_buy_order_ml_feature(day_ind)\n            # \xe5\x86\xb3\xe7\xad\x96\xe4\xba\xa4\xe6\x98\x93\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xabump\xe6\x8b\xa6\xe6\x88\xaa\xe8\xbf\x98\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x94\xbe\xe8\xa1\x8c\n            block = self.make_ump_block_decision(ml_feature_dict)\n            if block:\n                return None\n\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\xb3\xe5\xb0\x86\xe6\x88\x90\xe4\xba\xa4\xef\xbc\x8c\xe5\xb0\x86\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\x86\x99\xe5\x85\xa5order\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\x97\xe6\xae\xb5ml_features\xe4\xb8\xad\xef\xbc\x8c\xe4\xb8\xba\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe8\xae\xa1\xe7\xae\x97\xe5\xad\xa6\xe4\xb9\xa0\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83ump\n            if order.ml_features is None:\n                order.ml_features = ml_feature_dict\n            else:\n                order.ml_features.update(ml_feature_dict)\n        # \xe8\xbf\x94\xe5\x9b\x9eorder\xef\xbc\x8c\xe8\xae\xa2\xe5\x8d\x95\xe7\x94\x9f\xe6\x95\x88\n        return order\n\n    def make_ump_block_decision(self, ml_feature_dict):\n        """"""\n        \xe8\xbe\x93\xe5\x85\xa5\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe9\x80\x9a\xe8\xbf\x87ump\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe5\xaf\xb9\xe5\xa4\x96manager\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\n        \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x8b\xa6\xe6\x88\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe6\x94\xbe\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe3\x80\x82\xe5\xad\x90\xe7\xb1\xbb\xe5\x8f\xaf\xe5\xa4\x8d\xe5\x86\x99\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe7\xb1\xbb\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xae\x9e\xe7\x8e\xb0\n        \xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe4\xbb\xbb\xe6\x84\x8fump\xe7\xbb\x84\xe5\x90\x88\xe6\x8b\xa6\xe6\x88\xaa\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe6\xaf\x94\xe4\xbe\x8b\xe9\x9c\x80\xe8\xa6\x81\xe7\xad\x89\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\xe7\xa1\xae\xe5\xae\x9aump\xe5\x85\xb7\xe4\xbd\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\n        \xe4\xb8\x94\xe5\xaf\xb9\xe4\xba\x8e\xe5\xa4\x9a\xe7\xa7\x8d\xe7\xad\x96\xe7\x95\xa5\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\xac\xe8\xba\xab\xe5\xae\x9a\xe5\x88\xb6\xe9\x80\x82\xe5\x90\x88\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe7\x81\xb5\xe6\xb4\xbb\xe5\xba\xa6\n        :param ml_feature_dict: \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81dict\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n        return self.ump_manger.ump_block(ml_feature_dict)\n\n    def make_buy_order_ml_feature(self, day_ind):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xe6\x9e\x84\xe9\x80\x9a\xe8\xbf\x87AbuMlFeature\xe6\x9e\x84\xe5\xbb\xba\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84\xe5\x90\x84\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :return:\n        """"""\n        return AbuMlFeature().make_feature_dict(self.kl_pd, self.combine_kl_pd, day_ind, buy_feature=True)\n\n    @abstractmethod\n    def _init_self(self, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    def read_fit_day(self, today):\n        """"""\n        \xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6worker\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\xe5\x81\x9a\xe6\x97\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x90\x86\xe8\xa7\xa3\xe4\xb8\xba\xe7\x9b\x98\xe5\x89\x8d\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe5\x86\xb3\xe7\xad\x96\xe4\xba\x8b\xe4\xbb\xb6\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n        \xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe8\xb0\x83\xe7\x94\xa8\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84fit_day\xe5\x87\xbd\xe6\x95\xb0\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if self.skip_days > 0:\n            self.skip_days -= 1\n            return None\n\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\x99\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\xba\x8f\xe5\x8f\xb7\n        self.today_ind = int(today.key)\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\xbb\x98\xe8\xae\xa4\xe5\xbf\xbd\xe7\x95\xa5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        if self.today_ind >= self.kl_pd.shape[0] - 1:\n            return None\n\n        return self.fit_day(today)\n\n    def buy_tomorrow(self):\n        """"""\n        \xe6\x98\x8e\xe5\xa4\xa9\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe7\xaa\x81\xe7\xa0\xb4\xe7\xad\x96\xe7\x95\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\x91\xe5\x87\xba\xe4\xba\x86\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\n        \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x98\x8e\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\n        :return \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.make_buy_order(self.today_ind)\n\n    def buy_today(self):\n        """"""\n        \xe4\xbb\x8a\xe5\xa4\xa9\xe5\x8d\xb3\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae\xe7\xad\x89\xe5\x81\x9a\xe4\xb8\xbafit_day\xe4\xb8\xad\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\n        \xe9\x80\x82\xe5\x90\x88\xe5\xa6\x82\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe9\x9d\x9e\xe6\x98\x8e\xe7\xa1\xae\xe4\xb8\x80\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\x96\xe8\x80\x85\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\n        :return \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.make_buy_order(self.today_ind - 1)\n\n    def _fit_pick_stock(self, today, pick_array):\n        """"""\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x91\xe5\x87\xba\xe6\xb2\xa1\xe6\x9c\x89\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x81\xe9\x94\x81\xe6\x9c\xac\xe6\xba\x90\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n\n        for picker in pick_array:\n            pick_kl = self.past_today_kl(today, picker.xd)\n\n            if pick_kl.empty or not picker.fit_pick(pick_kl, self.kl_pd.name):\n                # \xe5\x8f\xaa\xe8\xa6\x81\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x91\xe5\x87\xba\xe6\xb2\xa1\xe6\x9c\x89\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x81\xe9\x94\x81\xe6\x9c\xac\xe6\xba\x90\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n                self.lock_factor = True\n                return\n            # \xe9\x81\x8d\xe5\x8e\x86\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x93\xe5\xb1\x9e\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x90\x8e\xef\xbc\x8c\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8f\x91\xe5\x87\xba\xe5\xb0\x81\xe9\x94\x81\xe5\x9b\xa0\xe5\xad\x90\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\xb0\xb1\xe6\x89\x93\xe5\xbc\x80\xe5\x9b\xa0\xe5\xad\x90\n            self.lock_factor = False\n\n    def fit_ps_week(self, today):\n        """"""\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\'\xe5\x91\xa8\'\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x91\xe5\x87\xba\xe6\xb2\xa1\xe6\x9c\x89\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x81\xe9\x94\x81\xe6\x9c\xac\xe6\xba\x90\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n        self._fit_pick_stock(today, self.ps_week)\n\n    def fit_ps_month(self, today):\n        """"""\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x93\xe5\xb1\x9e\'\xe6\x9c\x88\'\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x91\xe5\x87\xba\xe6\xb2\xa1\xe6\x9c\x89\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\xb0\xb1\xe5\xb0\x81\xe9\x94\x81\xe6\x9c\xac\xe6\xba\x90\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n        self._fit_pick_stock(today, self.ps_month)\n\n    @abstractmethod\n    def fit_day(self, today):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe4\xb8\xbb\xe8\xa6\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5""""""\n        pass\n\n    def past_today_kl(self, today, past_day_cnt):\n        """"""\n            \xe5\x9c\xa8fit_day, fit_month, fit_week\xe7\xad\x89\xe6\x97\xb6\xe9\x97\xb4\xe9\xa9\xb1\xe5\x8a\xa8\xe7\xbb\x8f\xe8\xbf\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xe4\xbc\xa0\xe9\x80\x92\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n            \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x87\xe5\x8e\xbbpast_day_cnt\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\xbapd.DataFram\xe6\x95\xb0\xe6\x8d\xae\n            :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n            :param past_day_cnt: int\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\x8b\xe5\x89\x8d\xe8\xbf\x87\xe5\x8e\xbbpast_day_cnt\xe5\xa4\xa9\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        end_ind = self.combine_kl_pd[self.combine_kl_pd.date == today.date].key.values[0]\n        start_ind = end_ind - past_day_cnt if end_ind - past_day_cnt > 0 else 0\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe5\xbd\x93\xe5\x89\x8d\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe5\x88\x87\xe7\x89\x87\xe8\xbf\x87\xe5\x8e\xbb\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        return self.combine_kl_pd.iloc[start_ind:end_ind]\n\n    def past_today_one_month(self, today):\n        """"""\xe5\xa5\x97\xe6\x8e\xa5past_today_kl\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\x8b\xe5\x89\x8d1\xe4\xb8\xaa\xe6\x9c\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae""""""\n        # TODO \xe8\xbf\x99\xe9\x87\x8c\xe5\x9b\xba\xe5\xae\x9a\xe4\xba\x86\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xa6\x82\xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\xe7\xad\x89\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\n        return self.past_today_kl(today, 20)\n\n    def past_today_one_week(self, today):\n        """"""\xe5\xa5\x97\xe6\x8e\xa5past_today_kl\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\x8b\xe5\x89\x8d1\xe5\x91\xa8\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae""""""\n        # TODO \xe8\xbf\x99\xe9\x87\x8c\xe5\x9b\xba\xe5\xae\x9a\xe4\xba\x86\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xa6\x82\xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\xe7\xad\x89\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\n        return self.past_today_kl(today, 5)\n\n    def past_today_one_year(self, today):\n        """"""\xe5\xa5\x97\xe6\x8e\xa5past_today_kl\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae""""""\n        # TODO \xe8\xbf\x99\xe9\x87\x8c\xe5\x9b\xba\xe5\xae\x9a\xe4\xba\x86\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xa6\x82\xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\xe7\xad\x89\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\n        return self.past_today_kl(today, 250)\n\n    def _deprecated_kwargs_init(self, **kwargs):\n        """"""\xe5\xa4\x84\xe7\x90\x86\xe8\xbf\x87\xe6\x97\xb6\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        if \'win_rate\' in kwargs and \'gains_mean\' in kwargs and \'losses_mean\' in kwargs:\n            self._do_kelly_deprecated(**kwargs)\n\n    @AbuDeprecated(\'kelly object now use dict to build, it will be remove next version!\')\n    def _do_kelly_deprecated(self, **kwargs):\n        """"""\xe9\x92\x88\xe5\xaf\xb9kelly\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe8\xbf\x87\xe6\x97\xb6\xe6\x96\xb9\xe6\xb3\x95\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86""""""\n\n        """"""\n            \xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe6\xa0\xb9\xe6\x8d\xae\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xae\xbe\xe7\xbd\xae\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x8c\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xba\x8f\xe6\x8d\x9f\xef\xbc\x8c\n            \xe6\xaf\x94\xe5\xa6\x82\xe4\xbd\xbf\xe7\x94\xa8AbuKellyPosition\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x8c\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\n            \xe6\x9c\x9f\xe6\x9c\x9b\xe4\xba\x8f\xe6\x8d\x9f\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'a\', None)\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\n            \xe6\x9a\x82\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8hasattr\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe5\xb1\x9e\xe6\x80\xa7\n        """"""\n        # \xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8e\x86\xe5\x8f\xb2\xe8\x83\x9c\xe7\x8e\x87win_rate, \xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8e\x86\xe5\x8f\xb2\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8agains_mean, \xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8e\x86\xe5\x8f\xb2\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xba\x8f\xe6\x8d\x9flosses_mean\n        self.position_kwargs = {\'win_rate\': kwargs[\'win_rate\'], \'gains_mean\': kwargs[\'gains_mean\'],\n                                \'losses_mean\': kwargs[\'losses_mean\']}\n\n    """"""TODO: \xe4\xbd\xbf\xe7\x94\xa8check support\xe6\x96\xb9\xe5\xbc\x8f\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81fit_week\xef\xbc\x8cfit_month\xef\xbc\x8c\xe4\xb8\x8a\xe5\xb1\x82\xe4\xb8\x8d\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8hasattr\xe5\x8e\xbb\xe5\x88\xa4\xe6\x96\xad""""""\n    # def fit_week(self, *args, **kwargs):\n    #     pass\n\n    # def fit_month(self, *args, **kwargs):\n    #     pass\n\n\nclass AbuFactorBuyTD(AbuFactorBuyBase):\n    """"""\xe5\xbe\x88\xe5\xa4\x9a\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe5\x9c\xa8fit_day\xe4\xb8\xad\xe4\xb8\x8d\xe4\xbb\x85\xe4\xbb\x85\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\xbb\x8f\xe5\xb8\xb8\xe4\xbd\xbf\xe7\x94\xa8\xe6\x98\xa8\xe5\xa4\xa9\xef\xbc\x8c\xe5\x89\x8d\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbf\xe8\x8e\xb7\xe5\x8f\x96\xe6\x98\xa8\xe5\xa4\xa9\xef\xbc\x8c\xe5\x89\x8d\xe5\xa4\xa9\xe7\x9a\x84\xe5\xb0\x81\xe8\xa3\x85""""""\n\n    def read_fit_day(self, today):\n        """"""\n        \xe8\xa6\x86\xe7\x9b\x96base\xe5\x87\xbd\xe6\x95\xb0\xe5\xae\x8c\xe6\x88\x90:\n        1. \xe4\xb8\xbafit_day\xe4\xb8\xad\xe6\x88\xaa\xe5\x8f\x96\xe6\x98\xa8\xe5\xa4\xa9self.yesterday\n        2. \xe4\xb8\xbafit_day\xe4\xb8\xad\xe6\x88\xaa\xe5\x8f\x96\xe5\x89\x8d\xe5\xa4\xa9self.bf_yesterday\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if self.skip_days > 0:\n            self.skip_days -= 1\n            return None\n\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\x99\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\xba\x8f\xe5\x8f\xb7\n        self.today_ind = int(today.key)\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\xbb\x98\xe8\xae\xa4\xe5\xbf\xbd\xe7\x95\xa5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        if self.today_ind >= self.kl_pd.shape[0] - 1:\n            return None\n\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe5\xa4\xa9\xef\xbc\x88\xe7\xbb\x9f\xe8\xae\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe5\x89\x8d2\xe5\xa4\xa9\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xa8\xe5\xa4\xa9\xe5\x92\x8c\xe5\x89\x8d\xe5\xa4\xa9\xef\xbc\x89\n        if self.today_ind < 2:\n            return None\n\n        # \xe4\xb8\xbafit_day\xe4\xb8\xad\xe6\x88\xaa\xe5\x8f\x96\xe6\x98\xa8\xe5\xa4\xa9\n        self.yesterday = self.kl_pd.iloc[self.today_ind - 1]\n        # \xe4\xb8\xbafit_day\xe4\xb8\xad\xe6\x88\xaa\xe5\x8f\x96\xe5\x89\x8d\xe5\xa4\xa9\n        self.bf_yesterday = self.kl_pd.iloc[self.today_ind - 2]\n\n        return self.fit_day(today)\n\n    def _init_self(self, **kwargs):\n        """"""raise NotImplementedError""""""\n        raise NotImplementedError(\'NotImplementedError _init_self\')\n\n    def fit_day(self, today):\n        """"""raise NotImplementedError""""""\n        raise NotImplementedError(\'NotImplementedError fit_day\')\n\n\nclass AbuFactorBuyXD(AbuFactorBuyBase):\n    """"""\xe4\xbb\xa5\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xba\xe9\x87\x8d\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8cxd\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8f\x82\xe6\x95\xb0\'\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\'\xe5\xa6\x82\xe5\xb7\xb2\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe7\xbb\xa7\xe6\x89\xbf\xe4\xbd\xbf\xe7\x94\xa8""""""\n\n    def read_fit_day(self, today):\n        """"""\n        \xe8\xa6\x86\xe7\x9b\x96base\xe5\x87\xbd\xe6\x95\xb0\xe5\xae\x8c\xe6\x88\x90\xe8\xbf\x87\xe6\xbb\xa4\xe7\xbb\x9f\xe8\xae\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe5\x89\x8dxd\xe5\xa4\xa9\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xb8\xbafit_day\xe4\xb8\xad\xe5\x88\x87\xe7\x89\x87\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if self.skip_days > 0:\n            self.skip_days -= 1\n            return None\n\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\x99\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\xba\x8f\xe5\x8f\xb7\n        self.today_ind = int(today.key)\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\xbb\x98\xe8\xae\xa4\xe5\xbf\xbd\xe7\x95\xa5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        if self.today_ind >= self.kl_pd.shape[0] - 1:\n            return None\n\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe5\xa4\xa9\xef\xbc\x88\xe7\xbb\x9f\xe8\xae\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe5\x89\x8dxd\xe5\xa4\xa9\xef\xbc\x89\n        if self.today_ind < self.xd - 1:\n            return None\n\n        # \xe5\xae\x8c\xe6\x88\x90\xe4\xb8\xbafit_day\xe4\xb8\xad\xe5\x88\x87\xe7\x89\x87\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        self.xd_kl = self.kl_pd[self.today_ind - self.xd + 1:self.today_ind + 1]\n\n        return self.fit_day(today)\n\n    def buy_tomorrow(self):\n        """"""\n        \xe8\xa6\x86\xe7\x9b\x96base\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe6\x98\x8e\xe5\xa4\xa9\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe7\xaa\x81\xe7\xa0\xb4\xe7\xad\x96\xe7\x95\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\x91\xe5\x87\xba\xe4\xba\x86\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\n        \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x98\x8e\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x91\xa8\xe6\x9c\x9f\xe5\x8f\x82\xe6\x95\xb0xd\xe8\xb5\x8b\xe4\xba\x88skip_days\n        :return \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        self.skip_days = self.xd\n        return self.make_buy_order(self.today_ind)\n\n    def buy_today(self):\n        """"""\n        \xe8\xa6\x86\xe7\x9b\x96base\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x8d\xb3\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae\xe7\xad\x89\xe5\x81\x9a\xe4\xb8\xbafit_day\xe4\xb8\xad\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\n        \xe9\x80\x82\xe5\x90\x88\xe5\xa6\x82\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe9\x9d\x9e\xe6\x98\x8e\xe7\xa1\xae\xe4\xb8\x80\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\x96\xe8\x80\x85\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x91\xa8\xe6\x9c\x9f\xe5\x8f\x82\xe6\x95\xb0xd\xe8\xb5\x8b\xe4\xba\x88skip_days\n        :return \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        self.skip_days = self.xd\n        return self.make_buy_order(self.today_ind - 1)\n\n    def _init_self(self, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        # \xe7\xaa\x81\xe7\xa0\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe5\x8f\x82\xe6\x95\xb0 xd\xef\xbc\x8c \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4, \xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'xd\', 20), \xe6\x98\x8e\xe7\xa1\xae\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0xq\n        self.xd = kwargs[\'xd\']\n        # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.factor_name = \'{}:{}\'.format(self.__class__.__name__, self.xd)\n\n    def fit_day(self, today):\n        """"""raise NotImplementedError""""""\n        raise NotImplementedError(\'NotImplementedError fit_day\')\n'"
abupy/FactorBuyBu/ABuFactorBuyBreak.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorBuyBase import AbuFactorBuyBase, AbuFactorBuyXD, BuyCallMixin, BuyPutMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuFactorBuyBreak(AbuFactorBuyBase, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe6\xad\xa3\xe5\x90\x91\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyCallMixin\xef\xbc\x8c\xe5\x8d\xb3\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe8\xa7\xa6\xe5\x8f\x91\xe4\xb9\xb0\xe5\x85\xa5event""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe5\x8c\x85\xe5\x90\xab: \xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0xd \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4""""""\n        # \xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0 xd\xef\xbc\x8c \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4, \xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'xd\', 20), \xe6\x98\x8e\xe7\xa1\xae\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0xq\n        self.xd = kwargs[\'xd\']\n        # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.factor_name = \'{}:{}\'.format(self.__class__.__name__, self.xd)\n\n    def fit_day(self, today):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x8b\x9f\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9c\xba\xe4\xbc\x9a\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe5\xa4\xa9\xef\xbc\x88\xe7\xbb\x9f\xe8\xae\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe5\x89\x8dxd\xe5\xa4\xa9\xef\xbc\x89\n        if self.today_ind < self.xd - 1:\n            return None\n\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xbe\xe5\x88\xb0xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x99\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\n        if today.close == self.kl_pd.close[self.today_ind - self.xd + 1:self.today_ind + 1].max():\n            # \xe6\x8a\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe6\x96\xb0\xe9\xab\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xb5\x8b\xe5\x80\xbcskip_days\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe8\x80\x83\xe8\x99\x91make_buy_order\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb0\xe5\x8d\x95\xe6\x88\x90\xe7\xab\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\xa6\x82\xe6\x9e\x9c\xe5\x81\x9c\xe7\x9b\x98\xe5\xa4\xaa\xe9\x95\xbf\xe6\x97\xb6\xe9\x97\xb4\xe7\xad\x89\xe4\xb9\x9f\xe4\xb8\x8d\xe5\xa5\xbd\n            self.skip_days = self.xd\n            # \xe7\x94\x9f\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe8\xae\xa2\xe5\x8d\x95, \xe7\x94\xb1\xe4\xba\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe7\xad\x96\xe7\x95\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x8f\x91\xe5\x87\xba\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe6\x98\x8e\xe5\xa4\xa9\xe4\xb9\xb0\n            return self.buy_tomorrow()\n        return None\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuFactorBuyXDBK(AbuFactorBuyXD, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe7\xbb\xa7\xe6\x89\xbfAbuFactorBuyXD\xe5\xae\x8c\xe6\x88\x90\xe6\xad\xa3\xe5\x90\x91\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xb1\xbb""""""\n    def fit_day(self, today):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x8b\x9f\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9c\xba\xe4\xbc\x9a\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xbe\xe5\x88\xb0xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x99\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\n        if today.close == self.xd_kl.close.max():\n            return self.buy_tomorrow()\n        return None\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuFactorBuyPutBreak(AbuFactorBuyBase, BuyPutMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x8f\x8d\xe5\x90\x91\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyPutMixin\xef\xbc\x8c\xe5\x8d\xb3\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe8\xa7\xa6\xe5\x8f\x91\xe4\xb9\xb0\xe5\x85\xa5event\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe8\xaf\xb7\xe6\x9f\xa5\xe9\x98\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xa4\xba\xe4\xbe\x8bdemo""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe5\x8c\x85\xe5\x90\xab: \xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0xd \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4""""""\n\n        # \xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0 xd\xef\xbc\x8c \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4, \xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'xd\', 20), \xe6\x98\x8e\xe7\xa1\xae\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0xq\n        self.xd = kwargs[\'xd\']\n        self.factor_name = \'{}:{}\'.format(self.__class__.__name__, self.xd)\n\n    def fit_day(self, today):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x8b\x9f\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9c\xba\xe4\xbc\x9a\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe5\xa4\xa9\xef\xbc\x88\xe7\xbb\x9f\xe8\xae\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe5\x89\x8dxd\xe5\xa4\xa9\xef\xbc\x89\n        if self.today_ind < self.xd - 1:\n            return None\n        """"""\n            \xe4\xb8\x8eAbuFactorBuyBreak\xe5\x8c\xba\xe5\x88\xab\xe5\xb0\xb1\xe6\x98\xaf\xe4\xb9\xb0\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe7\x9a\x84\xef\xbc\x8c\xe5\x8d\xb3min()\n        """"""\n        if today.close == self.kl_pd.close[self.today_ind - self.xd + 1:self.today_ind + 1].min():\n            self.skip_days = self.xd\n            return self.buy_tomorrow()\n        return None\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuFactorBuyPutXDBK(AbuFactorBuyXD, BuyPutMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe7\xbb\xa7\xe6\x89\xbfAbuFactorBuyXD\xe5\xae\x8c\xe6\x88\x90\xe5\x8f\x8d\xe5\x90\x91\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xb1\xbb""""""\n    def fit_day(self, today):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x8b\x9f\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9c\xba\xe4\xbc\x9a\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        # \xe4\xb8\x8eAbuFactorBuyBreak\xe5\x8c\xba\xe5\x88\xab\xe5\xb0\xb1\xe6\x98\xaf\xe4\xb9\xb0\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe7\x9a\x84\xef\xbc\x8c\xe5\x8d\xb3min()\n        if today.close == self.xd_kl.close.min():\n            return self.buy_tomorrow()\n        return None\n'"
abupy/FactorBuyBu/ABuFactorBuyDM.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe5\x8a\xa8\xe6\x80\x81\xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe7\xad\x96\xe7\x95\xa5\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport math\n\nimport numpy as np\n\nfrom .ABuFactorBuyBase import AbuFactorBuyXD, BuyCallMixin\nfrom ..IndicatorBu.ABuNDMa import calc_ma_from_prices\nfrom ..CoreBu.ABuPdHelper import pd_resample\nfrom ..TLineBu.ABuTL import AbuTLine\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuDoubleMaBuy(AbuFactorBuyXD, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8a\xa8\xe6\x80\x81\xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe7\xad\x96\xe7\x95\xa5""""""\n\n    def _init_self(self, **kwargs):\n        """"""\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9afast: \xe5\x9d\x87\xe7\xba\xbf\xe5\xbf\xab\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8a\xa8\xe6\x80\x81\xe5\xbf\xab\xe7\xba\xbf\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9aslow: \xe5\x9d\x87\xe7\xba\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9aresample_max: \xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4100\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe6\x9c\x80\xe5\xa4\xa7100\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9aresample_min: \xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe6\x9c\x80\xe5\xb0\x8f10\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9achange_threshold\xef\xbc\x9a\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x85\xa2\xe7\xba\xbf\xe7\x9a\x84\xe9\x80\x89\xe5\x8f\x96\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.12\n        """"""\n\n        # \xe5\x9d\x87\xe7\xba\xbf\xe5\xbf\xab\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa85\xe5\xa4\xa9\xe5\x9d\x87\xe7\xba\xbf\n        self.ma_fast = kwargs.pop(\'fast\', -1)\n        self.dynamic_fast = False\n        if self.ma_fast == -1:\n            self.ma_fast = 5\n            self.dynamic_fast = True\n\n        # \xe5\x9d\x87\xe7\xba\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa860\xe5\xa4\xa9\xe5\x9d\x87\xe7\xba\xbf\n        self.ma_slow = kwargs.pop(\'slow\', -1)\n        self.dynamic_slow = False\n        if self.ma_slow == -1:\n            self.ma_slow = 60\n            self.dynamic_slow = True\n        # \xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa490\n        self.resample_max = kwargs.pop(\'resample_max\', 100)\n        # \xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n        self.resample_min = kwargs.pop(\'resample_min\', 10)\n        # \xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x85\xa2\xe7\xba\xbf\xe7\x9a\x84\xe9\x80\x89\xe5\x8f\x96\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.12\n        self.change_threshold = kwargs.pop(\'change_threshold\', 0.12)\n\n        if self.ma_fast >= self.ma_slow:\n            # \xe6\x85\xa2\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe5\xbf\x85\xe9\xa1\xbb\xe5\xa4\xa7\xe4\xba\x8e\xe5\xbf\xab\xe7\xba\xbf\n            raise ValueError(\'ma_fast >= self.ma_slow !\')\n\n        # xd\xe5\x91\xa8\xe6\x9c\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9c\x80\xe8\xa6\x81\xe6\xaf\x94ma_slow\xe5\xa4\xa7\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe8\xae\xa1\xe7\xae\x97ma\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8b\xbf\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x92\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe4\xb8\xa4\xe5\xa4\xa9\xe7\x9a\x84ma\xef\xbc\x8c\xe7\x94\xa8\xe6\x9d\xa5\xe5\x88\xa4\xe6\x96\xad\xe9\x87\x91\xe5\x8f\x89\xef\xbc\x8c\xe6\xad\xbb\xe5\x8f\x89\n        kwargs[\'xd\'] = self.ma_slow + 1\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xa5\xbdxd\xe5\x90\x8e\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9f\xba\xe7\xb1\xbb\xe9\x92\x88\xe5\xaf\xb9xd\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        super(AbuDoubleMaBuy, self)._init_self(**kwargs)\n\n        # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.factor_name = \'{}:fast={},slow={}\'.format(self.__class__.__name__, self.ma_fast, self.ma_slow)\n\n    def _dynamic_calc_fast(self, today):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xae\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe8\xb5\xb0\xe5\x8a\xbf\xe9\x9c\x87\xe8\x8d\xa1\xe7\xa8\x8b\xe5\xba\xa6\xef\xbc\x8c\xe5\x8a\xa8\xe6\x80\x81\xe5\x86\xb3\xe7\xad\x96\xe5\xbf\xab\xe7\xba\xbf\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe8\xa7\x84\xe5\x88\x99\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n            \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n                    \xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.05 eg: slow=60->fast=60*0.05=3\n                    \xe4\xba\x8c\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.15 eg: slow=60->fast=60*0.15=9\n                    \xe4\xb8\x89\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.3 eg: slow=60->fast=60*0.3=18\n                    \xe5\x9b\x9b\xe6\xac\xa1\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8a\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.5 eg: slow=60->fast=60*0.5=30\n        """"""\n        # \xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe6\x8b\xa5\xe6\x9c\x89self.benchmark\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cbenchmark.kl_pd\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\n        benchmark_df = self.benchmark.kl_pd\n        # \xe6\x8b\xbf\xe5\x87\xba\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9a\x84\xe4\xbb\x8a\xe5\xa4\xa9\n        benchmark_today = benchmark_df[benchmark_df.date == today.date]\n        if benchmark_today.empty:\n            # \xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xba\xe6\x85\xa2\xe7\xba\xbf\xe7\x9a\x840.15\n            return math.ceil(self.ma_slow * 0.15)\n\n        # \xe8\xa6\x81\xe6\x8b\xbf\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\x87\x86\xe5\xa4\x87\xe5\x88\x87\xe7\x89\x87\xe7\x9a\x84start\xef\xbc\x8cend\n        end_key = int(benchmark_today.iloc[0].key)\n        start_key = end_key - 20\n        if start_key < 0:\n            # \xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xba\xe6\x85\xa2\xe7\xba\xbf\xe7\x9a\x840.15\n            return math.ceil(self.ma_slow * 0.15)\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe7\x89\x87\xe5\x88\x87\xe5\x87\xba\xe4\xbb\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x90\x91\xe5\x89\x8d20\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        benchmark_month = benchmark_df[start_key:end_key + 1]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0AbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n        benchmark_month_line = AbuTLine(benchmark_month.close, \'benchmark month line\')\n        # \xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x99\xe4\xb8\xaa\xe6\x9c\x88\xe6\x9c\x80\xe5\xb0\x91\xe9\x9c\x80\xe8\xa6\x81\xe5\x87\xa0\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x89\x8d\xe8\x83\xbd\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\n        least = benchmark_month_line.show_least_valid_poly(show=False)\n        if least == 1:\n            # \xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.05 eg: slow=60->fast=60*0.05=3\n            return math.ceil(self.ma_slow * 0.05)\n        elif least == 2:\n            # \xe4\xba\x8c\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.15 eg: slow=60->fast=60*0.15=9\n            return math.ceil(self.ma_slow * 0.15)\n        elif least == 3:\n            # \xe4\xb8\x89\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.3 eg: slow=60->fast=60*0.3=18\n            return math.ceil(self.ma_slow * 0.3)\n        else:\n            # \xe5\x9b\x9b\xe6\xac\xa1\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8a\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa1\xa8\xe8\xbe\xbe\xef\xbc\x9afast\xef\xbc\x9dslow * 0.5 eg: slow=60->fast=60*0.5=30\n            return math.ceil(self.ma_slow * 0.5)\n\n    def _dynamic_calc_slow(self, today):\n        """"""\n            \xe5\x8a\xa8\xe6\x80\x81\xe5\x86\xb3\xe7\xad\x96\xe6\x85\xa2\xe7\xba\xbf\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe8\xa7\x84\xe5\x88\x99\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n            \xe5\x88\x87\xe7\x89\x87\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xaf\xb9\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x98\xe6\x8d\xa2\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\n            \xe5\xaf\xb9\xe9\x87\x8d\xe6\x96\xb0\xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8cpct_change\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xaf\xb9pct_change\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x96abs\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xef\xbc\x8c\n            \xe5\xaf\xb9pct_change\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x96\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x8c\xe5\x8d\xb3\xe7\xae\x97\xe5\x87\xba\xe9\x87\x8d\xe6\x96\xb0\xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x8f\x98\xe5\x8c\x96\xe5\xb9\x85\xe5\xba\xa6\xef\xbc\x8c\n\n            \xe4\xb8\x8a\xe8\xbf\xb0\xe7\x9a\x84\xe5\x8f\x98\xe6\x8d\xa2\xe5\x91\xa8\xe6\x9c\x9f\xe7\x94\xb110\xef\xbc\x8c 15\xef\xbc\x8c20\xef\xbc\x8c30....\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\xad\xe4\xbb\xa3, \xe7\x9b\xb4\xe5\x88\xb0\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe9\x87\x8d\xe6\x96\xb0\n            \xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x8f\x98\xe5\x8c\x96\xe5\xb9\x85\xe5\xba\xa6 > 0.12\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe5\x81\x9a\xe4\xb8\xbaslow\xe7\x9a\x84\xe5\x8f\x96\xe5\x80\xbc\n        """"""\n        last_kl = self.past_today_kl(today, self.resample_max)\n        if last_kl.empty:\n            # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x85\xa2\xe7\xba\xbf\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc60\n            return 60\n\n        for slow in np.arange(self.resample_min, self.resample_max, 5):\n            rule = \'{}D\'.format(slow)\n            change = abs(pd_resample(last_kl.close, rule, how=\'mean\').pct_change()).mean()\n            """"""\n                eg: pd_resample(last_kl.close, rule, how=\'mean\')\n\n                    2014-07-23    249.0728\n                    2014-09-03    258.3640\n                    2014-10-15    240.8663\n                    2014-11-26    220.1552\n                    2015-01-07    206.0070\n                    2015-02-18    198.0932\n                    2015-04-01    217.9791\n                    2015-05-13    251.3640\n                    2015-06-24    266.4511\n                    2015-08-05    244.3334\n                    2015-09-16    236.2250\n                    2015-10-28    222.0441\n                    2015-12-09    222.0574\n                    2016-01-20    177.2303\n                    2016-03-02    226.8766\n                    2016-04-13    230.6000\n                    2016-05-25    216.7596\n                    2016-07-06    222.6420\n\n                    abs(pd_resample(last_kl.close, rule, how=\'mean\').pct_change())\n\n                    2014-09-03    0.037\n                    2014-10-15    0.068\n                    2014-11-26    0.086\n                    2015-01-07    0.064\n                    2015-02-18    0.038\n                    2015-04-01    0.100\n                    2015-05-13    0.153\n                    2015-06-24    0.060\n                    2015-08-05    0.083\n                    2015-09-16    0.033\n                    2015-10-28    0.060\n                    2015-12-09    0.000\n                    2016-01-20    0.202\n                    2016-03-02    0.280\n                    2016-04-13    0.016\n                    2016-05-25    0.060\n                    2016-07-06    0.027\n\n                    abs(pd_resample(last_kl.close, rule, how=\'mean\').pct_change()).mean():\n\n                    0.080\n            """"""\n            if change > self.change_threshold:\n                """"""\n                    \xe8\xbf\x94\xe5\x9b\x9e\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe4\xba\x8echange_threshold\xe7\x9a\x84slow,\n                    change_threshold\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba0.12\xef\xbc\x8c\xe4\xbb\xa5\xe5\x91\xa8\xe6\x9c\x9f\xe7\xaa\x81\xe7\xa0\xb4\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\x80\xe8\x88\xac\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa80.08\xe4\xbb\xa5\xe4\xb8\x8a\xef\xbc\x8c0.12\xe6\x98\xaf\xe4\xb8\xba\xe5\xbf\xab\xe7\xba\xbf\xe7\x95\x99\xe5\x87\xba\xe5\xa5\x97\xe5\x88\xa9\xe7\xa9\xba\xe9\x97\xb4\n                """"""\n                return slow\n        # \xe8\xbf\xad\xe4\xbb\xa3np.arange(min, max, 5)\xe9\x83\xbd\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe5\xb0\xb1\xe8\xbf\x94\xe5\x9b\x9emax\n        return self.resample_max\n\n    def fit_month(self, today):\n        # fit_month\xe5\x8d\xb3\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        if self.dynamic_slow:\n            # \xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe5\x85\x88\xe5\x8a\xa8\xe6\x80\x81\xe7\xae\x97ma_slow\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8a\xa8\xe6\x80\x81\xe8\xae\xa1\xe7\xae\x97fast\xe4\xbe\x9d\xe8\xb5\x96slow\n            self.ma_slow = self._dynamic_calc_slow(today)\n        if self.dynamic_fast:\n            # \xe5\x8a\xa8\xe6\x80\x81\xe8\xae\xa1\xe7\xae\x97\xe5\xbf\xab\xe7\xba\xbf\n            self.ma_fast = self._dynamic_calc_fast(today)\n        # \xe5\x8a\xa8\xe6\x80\x81\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97\xe5\x90\x8e\xef\xbc\x8c\xe6\x94\xb9\xe5\x8f\x98\xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.factor_name = \'{}:fast={},slow={}\'.format(self.__class__.__name__, self.ma_fast, self.ma_slow)\n        # import logging\n        # logging.debug(\'{}:{}-fast={}|slow={}\'.format(self.kl_pd.name, today.date, self.ma_fast, self.ma_slow))\n\n    def fit_day(self, today):\n        """"""\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8a\xe7\xa9\xbf\xe6\x85\xa2\xe8\xa1\x8c\xe5\xbd\xa2\xe6\x88\x90\xe9\x87\x91\xe5\x8f\x89\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7""""""\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\xbf\xab\xe7\xba\xbf\n        fast_line = calc_ma_from_prices(self.xd_kl.close, int(self.ma_fast), min_periods=1)\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\x85\xa2\xe7\xba\xbf\n        slow_line = calc_ma_from_prices(self.xd_kl.close, int(self.ma_slow), min_periods=1)\n\n        if len(fast_line) >= 2 and len(slow_line) >= 2:\n            # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe5\xbf\xab\xe7\xba\xbf\xe5\x80\xbc\n            fast_today = fast_line[-1]\n            # \xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe5\xbf\xab\xe7\xba\xbf\xe5\x80\xbc\n            fast_yesterday = fast_line[-2]\n            # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x85\xa2\xe7\xba\xbf\xe5\x80\xbc\n            slow_today = slow_line[-1]\n            # \xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe6\x85\xa2\xe7\xba\xbf\xe5\x80\xbc\n            slow_yesterday = slow_line[-2]\n\n            if slow_yesterday >= fast_yesterday and fast_today > slow_today:\n                # \xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8a\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf, \xe5\xbd\xa2\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe9\x87\x91\xe5\x8f\x89\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe6\x98\x8e\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\n                return self.buy_tomorrow()\n\n    """"""\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xa6\x86\xe7\x9b\x96AbuFactorBuyXD\xe4\xb8\xad\xe7\x9a\x84buy_tomorrow\xe6\x9d\xa5\xe5\xa2\x9e\xe5\xa4\xa7\xe4\xba\xa4\xe6\x98\x93\xe9\xa2\x91\xe7\x8e\x87\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x9f\xba\xe7\xb1\xbb\xe4\xb8\xadself.skip_days = self.xd\xe9\x99\x8d\xe4\xbd\x8e\xe4\xba\x86\xe9\xa2\x91\xe7\x8e\x87""""""\n    # def buy_tomorrow(self):\n    #     return self.make_buy_order(self.today_ind)\n'"
abupy/FactorBuyBu/ABuFactorBuyDemo.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xa4\xba\xe4\xbe\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport numpy as np\nimport pandas as pd\n\nfrom .ABuFactorBuyBase import AbuFactorBuyBase, AbuFactorBuyXD, AbuFactorBuyTD, BuyCallMixin\nfrom .ABuFactorBuyBreak import AbuFactorBuyBreak\nfrom ..TLineBu.ABuTL import AbuTLine\nfrom ..FactorBuyBu.ABuBuyFactorWrap import AbuLeastPolyWrap\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuSDBreak(AbuFactorBuyXD, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a \xe5\x9c\xa8AbuFactorBuyBreak\xe5\x9f\xba\xe7\xa1\x80\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe4\xbd\x8e\xe4\xba\xa4\xe6\x98\x93\xe9\xa2\x91\xe7\x8e\x87\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe7\xa8\xb3\xe5\xae\x9a\xe6\x80\xa7\xe5\xa4\x84\xe7\x90\x86""""""\n\n    def _init_self(self, **kwargs):\n        """"""\n        :param kwargs: kwargs\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0poly\xe5\x80\xbc\xef\xbc\x8cpoly\xe5\x9c\xa8fit_month\xe4\xb8\xad\xe5\x92\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe5\xa4\xa7\xe7\x9b\x98\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84poly\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8c\n        \xe8\x8b\xa5\xe6\x98\xaf\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9a\x84poly\xe5\xa4\xa7\xe4\xba\x8epoly\xe8\xae\xa4\xe4\xb8\xba\xe8\xb5\xb0\xe5\x8a\xbf\xe9\x9c\x87\xe8\x8d\xa1\xef\xbc\x8cpoly\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba2\n        """"""\n        super(AbuSDBreak, self)._init_self(**kwargs)\n        # poly\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cself.poly\xe5\x9c\xa8fit_month\xe4\xb8\xad\xe5\x92\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe5\xa4\xa7\xe7\x9b\x98\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84poly\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8c\xe8\x8b\xa5\xe6\x98\xaf\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9a\x84poly\xe5\xa4\xa7\xe4\xba\x8epoly\xe8\xae\xa4\xe4\xb8\xba\xe8\xb5\xb0\xe5\x8a\xbf\xe9\x9c\x87\xe8\x8d\xa1\n        self.poly = kwargs.pop(\'poly\', 2)\n        # \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x81\xe9\x94\x81\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe4\xba\xa4\xe6\x98\x93\n        self.lock = False\n\n    def fit_month(self, today):\n        # fit_month\xe5\x8d\xb3\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        # \xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe6\x8b\xa5\xe6\x9c\x89self.benchmark\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cbenchmark.kl_pd\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\n        benchmark_df = self.benchmark.kl_pd\n        # \xe6\x8b\xbf\xe5\x87\xba\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9a\x84\xe4\xbb\x8a\xe5\xa4\xa9\n        benchmark_today = benchmark_df[benchmark_df.date == today.date]\n        if benchmark_today.empty:\n            return 0\n        # \xe8\xa6\x81\xe6\x8b\xbf\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\x87\x86\xe5\xa4\x87\xe5\x88\x87\xe7\x89\x87\xe7\x9a\x84start\xef\xbc\x8cend\n        end_key = int(benchmark_today.iloc[0].key)\n        start_key = end_key - 20\n        if start_key < 0:\n            return False\n\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x87\xe7\x89\x87\xe5\x88\x87\xe5\x87\xba\xe4\xbb\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbc\x80\xe5\xa7\x8b\xe5\x90\x91\xe5\x89\x8d20\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        benchmark_month = benchmark_df[start_key:end_key + 1]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xa4\xa7\xe7\x9b\x98\xe6\x9c\x80\xe8\xbf\x91\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0AbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n        benchmark_month_line = AbuTLine(benchmark_month.close, \'benchmark month line\')\n        # \xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x99\xe4\xb8\xaa\xe6\x9c\x88\xe6\x9c\x80\xe5\xb0\x91\xe9\x9c\x80\xe8\xa6\x81\xe5\x87\xa0\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x89\x8d\xe8\x83\xbd\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\n        least = benchmark_month_line.show_least_valid_poly(show=False)\n\n        if least >= self.poly:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\xb0\x91\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcself.poly\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x88\x90\xe7\xab\x8b\xef\xbc\x8c\xe5\xa4\xa7\xe7\x9b\x98\xe9\x9d\x9e\xe9\x9c\x87\xe8\x8d\xa1\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe8\xa7\xa3\xe9\x94\x81\xe4\xba\xa4\xe6\x98\x93\n            self.lock = False\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\xb0\x91\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe5\xb0\x8f\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcself.poly\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe5\xa4\xa7\xe7\x9b\x98\xe5\xa4\x84\xe4\xba\x8e\xe9\x9c\x87\xe8\x8d\xa1\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\xb0\x81\xe9\x94\x81\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\n            self.lock = True\n\n    def fit_day(self, today):\n        if self.lock:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xb0\x81\xe9\x94\x81\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\n            return None\n\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xbe\xe5\x88\xb0xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x99\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\n        if today.close == self.xd_kl.close.max():\n            return self.buy_tomorrow()\n\n\n@AbuLeastPolyWrap()\nclass AbuTwoDayBuy(AbuFactorBuyTD, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8bAbuLeastPolyWrap\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyCallMixin\xef\xbc\x8c\xe5\x8d\xb3\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe8\xa7\xa6\xe5\x8f\x91\xe4\xb9\xb0\xe5\x85\xa5event""""""\n\n    def _init_self(self, **kwargs):\n        """"""\xe7\xae\x80\xe5\x8d\x95\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbb\x80\xe4\xb9\x88\xe9\x83\xbd\xe4\xb8\x8d\xe7\xbc\x96\xe5\x86\x99\xe4\xba\x86""""""\n        pass\n\n    def fit_day(self, today):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x8b\x9f\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe6\xb6\xa8\xef\xbc\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe6\xb6\xa8\xe5\xb0\xb1\xe4\xb9\xb0\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :return:\n        """"""\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\n        td_change = today.p_change\n        # \xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\n        yd_change = self.yesterday.p_change\n\n        if td_change > 0 and 0 < yd_change < td_change:\n            # \xe8\xbf\x9e\xe7\xbb\xad\xe6\xb6\xa8\xe4\xb8\xa4\xe5\xa4\xa9, \xe4\xb8\x94\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\xe6\xaf\x94\xe6\x98\xa8\xe5\xa4\xa9\xe8\xbf\x98\xe9\xab\x98 \xef\xbc\x8d>\xe4\xb9\xb0\xe5\x85\xa5, \xe7\x94\xa8\xe5\x88\xb0\xe4\xba\x86\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe6\x98\x8e\xe5\xa4\xa9\xe4\xb9\xb0\n            return self.buy_tomorrow()\n        return None\n\n\nclass AbuWeekMonthBuy(AbuFactorBuyBase, BuyCallMixin):\n    """"""\xe7\xad\x96\xe7\x95\xa5\xe7\xa4\xba\xe4\xbe\x8b\xe6\xaf\x8f\xe5\x91\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1\xe6\x88\x96\xe8\x80\x85\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9ais_buy_month\xef\xbc\x8cbool\xe9\xbb\x98\xe8\xae\xa4True\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1, False\xe4\xb8\x80\xe5\x91\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1""""""\n        self.is_buy_month = kwargs.pop(\'is_buy_month\', True)\n\n    def fit_day(self, today):\n        """"""\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        if self.is_buy_month and today.exec_month or not self.is_buy_month and today.exec_week:\n            # \xe6\xb2\xa1\xe6\x9c\x89\xe7\x94\xa8\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\xb0\xe5\x85\xa5\n            return self.buy_today()\n\n\nclass AbuFactorBuyBreakUmpDemo(AbuFactorBuyBreak):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe7\xbb\x84\xe7\xbb\x87\xe8\xa3\x81\xe5\x88\xa4\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe5\xa4\x8d\xe6\x9d\x82\xe7\x9a\x84\xe7\xbb\xbc\xe5\x90\x88\xe8\xa3\x81\xe5\x86\xb3 \xe6\x89\xa9\xe5\xb1\x95AbuFactorBuyBreak\xe7\xbb\x84\xe7\xbb\x87\xe8\xa3\x81\xe5\x88\xa4\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe5\xa4\x8d\xe6\x9d\x82\xe7\x9a\x84\xe7\xbb\xbc\xe5\x90\x88\xe8\xa3\x81\xe5\x86\xb3""""""\n\n    def make_ump_block_decision(self, ml_feature_dict):\n        """"""\n        \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa3\x81\xe5\x88\xa4\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe9\x85\x8d\xe5\x90\x88, \xe7\xae\x80\xe5\x8d\x95\xe7\xa4\xba\xe4\xbe\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe5\x8a\xa0\xe8\xb5\xb7\xe6\x9d\xa5\xe5\xa4\xa7\xe4\xba\x8e2\xe4\xb8\xaa\xe5\xb0\xb1\xe7\xae\x97\xe9\x85\x8d\xe5\x90\x88\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        :param ml_feature_dict: \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81dict\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n\n        ump = self.ump_manger\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        deg_hit_cnt = ump.ump_main_deg.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        jump_hit_cnt = ump.ump_main_jump.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        wave_hit_cnt = ump.ump_main_wave.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        price_hit_cnt = ump.ump_main_price.predict_hit_kwargs(**ml_feature_dict)\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa3\x81\xe5\x88\xa4\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe9\x85\x8d\xe5\x90\x88, \xe7\xae\x80\xe5\x8d\x95\xe7\xa4\xba\xe4\xbe\x8b\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe5\x8a\xa0\xe8\xb5\xb7\xe6\x9d\xa5\xe5\xa4\xa7\xe4\xba\x8e2\xe4\xb8\xaa\xe5\xb0\xb1\xe7\xae\x97\xe9\x85\x8d\xe5\x90\x88\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        if deg_hit_cnt + jump_hit_cnt + wave_hit_cnt + price_hit_cnt > 2:\n            return True\n        return False\n\n\nclass AbuFactorBuyBreakReocrdHitDemo(AbuFactorBuyBreak):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe8\xae\xa9\xe8\xa3\x81\xe5\x88\xa4\xe8\x87\xaa\xe5\xb7\xb1\xe5\xad\xa6\xe4\xb9\xa0\xe6\x80\x8e\xe4\xb9\x88\xe9\x85\x8d\xe5\x90\x88\xef\xbc\x8c\xe8\x87\xaa\xe5\xb7\xb1\xe5\x81\x9a\xe5\x87\xba\xe6\x9c\x80\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad""""""\n\n    def make_ump_block_decision(self, ml_feature_dict):\n        """"""\n        \xe5\x8d\xb3\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x86\x8d\xe6\xac\xa1\xe6\xa0\xb9\xe6\x8d\xae\xe8\xa3\x81\xe5\x88\xa4\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe9\x85\x8d\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\xe8\xae\xa9\xe8\xa3\x81\xe5\x88\xa4\xe8\x87\xaa\xe5\xb7\xb1\xe5\xad\xa6\xe4\xb9\xa0\xe6\x80\x8e\xe4\xb9\x88\xe9\x85\x8d\xe5\x90\x88\xef\xbc\x8c\xe8\x87\xaa\xe5\xb7\xb1\xe5\x81\x9a\xe5\x87\xba\xe6\x9c\x80\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\n        \xe8\x80\x8c\xe4\xb8\x8d\xe6\x98\xaf\xe5\x83\x8f\xe4\xb8\x8a\xe9\x9d\xa2\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\xba\xe5\xae\x9a\xe5\x80\xbc3\xe6\x9d\xa5\xe5\x81\x9a\xe4\xb8\xba\xe8\xa3\x81\xe5\x86\xb3\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cAbuFactorBuyBreakReocrdHitDemo\xe7\xb1\xbb\xe4\xbc\xbc\n        AbuFactorBuyBreakUmpDemo\xe4\xbd\x86\xe6\x98\xaf\xe4\xb8\x8d\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe6\x8a\x8a\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0\xe5\x9c\xa8\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8c\n        :param ml_feature_dict: \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81dict\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n        ump = self.ump_manger\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        deg_hit_cnt = ump.ump_main_deg.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        jump_hit_cnt = ump.ump_main_jump.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        wave_hit_cnt = ump.ump_main_wave.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        price_hit_cnt = ump.ump_main_price.predict_hit_kwargs(**ml_feature_dict)\n\n        ml_feature_dict.update({\'deg_hit_cnt\': deg_hit_cnt, \'jump_hit_cnt\': jump_hit_cnt,\n                                \'wave_hit_cnt\': wave_hit_cnt, \'price_hit_cnt\': price_hit_cnt})\n\n        return False\n\n\nclass AbuFactorBuyBreakHitPredictDemo(AbuFactorBuyBreak):\n    """"""\n        \xe7\xbb\xa7\xe7\xbb\xad\xe7\xbb\xa7\xe6\x89\xbfAbuFactorBuyBreak\xe5\xa4\x8d\xe5\x86\x99make_ump_block_decision\xef\xbc\x8c\n        \xe5\x8c\xba\xe5\x88\xab\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8AbuFactorBuyBreakReocrdHitDemo\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe6\x88\x90\xe6\x9e\x9chit_ml\n        \xe5\xaf\xb9\xe5\x87\xa0\xe4\xb8\xaa\xe8\xa3\x81\xe5\x88\xa4\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\xe7\xbb\x84\xe6\x88\x90\xe7\x9f\xa2\xe9\x87\x8f\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8cpredict\xef\xbc\x8c\n        \xe6\x8b\xa6\xe6\x88\xaa\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba-1\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\n    """"""\n\n    def _init_self(self, **kwargs):\n        """"""\n            \xe4\xb8\x8eAbuFactorBuyBreak\xe5\x9f\xba\xe6\x9c\xac\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe5\x94\xaf\xe4\xb8\x80\xe5\x8c\xba\xe5\x88\xab\xe6\x98\xaf\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe9\x80\x9a\xe8\xbf\x87AbuFactorBuyBreakUmpDemo\xe8\xae\xb0\xe5\xbd\x95\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe5\x99\xa8\n            self.hit_ml = kwargs[\'hit_ml\']\n        """"""\n        super(AbuFactorBuyBreakHitPredictDemo, self)._init_self(**kwargs)\n        # \xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe9\x80\x9a\xe8\xbf\x87AbuFactorBuyBreakUmpDemo\xe8\xae\xb0\xe5\xbd\x95\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe5\x99\xa8\n        self.hit_ml = kwargs[\'hit_ml\']\n\n    def make_ump_block_decision(self, ml_feature_dict):\n        """"""\n        \xe7\x94\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe5\x90\x8e\xe5\x86\x8d\xe6\xac\xa1\xe5\x8f\x8d\xe8\xbf\x87\xe6\x9d\xa5\xe6\x8c\x87\xe5\xaf\xbc\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe6\xb2\xa1\xe6\x9c\x89\xe6\x84\x8f\xe4\xb9\x89\xe7\x9a\x84\xef\xbc\x8c\n        \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe5\xae\xb9\xe6\x98\x93\xe7\x90\x86\xe8\xa7\xa3\xe4\xbb\x80\xe4\xb9\x88\xe5\x8f\xab\xe5\x81\x9a\xef\xbc\x9a\xe8\xae\xa9\xe8\xa3\x81\xe5\x88\xa4\xe8\x87\xaa\xe5\xb7\xb1\xe5\xad\xa6\xe4\xb9\xa0\xe6\x80\x8e\xe4\xb9\x88\xe9\x85\x8d\xe5\x90\x88\xef\xbc\x8c\n        \xe8\x87\xaa\xe5\xb7\xb1\xe5\x81\x9a\xe5\x87\xba\xe6\x9c\x80\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\xe6\x9b\xb4\xe8\xaf\xa6\xe7\xbb\x86\xe5\xae\x8c\xe6\x95\xb4\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbc\x9a\xe5\x9c\xa8\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe7\xab\xa0\xe8\x8a\x82\xe4\xb8\xad\xe7\xa4\xba\xe4\xbe\x8b\xe8\xae\xb2\xe8\xa7\xa3\xef\xbc\x8c\n        \xe8\xaf\xb7\xe5\x85\xb3\xe6\xb3\xa8\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7\xe7\x9a\x84\xe6\x9b\xb4\xe6\x96\xb0\xe6\x8f\x90\xe9\x86\x92\n        :param ml_feature_dict: \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81dict\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n        ump = self.ump_manger\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        deg_hit_cnt = ump.ump_main_deg.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        jump_hit_cnt = ump.ump_main_jump.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        wave_hit_cnt = ump.ump_main_wave.predict_hit_kwargs(**ml_feature_dict)\n        # \xe7\xbb\x9f\xe8\xae\xa1\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe6\xac\xa1\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xbd\xe4\xb8\xad\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xaa\xe6\x95\xb0\n        price_hit_cnt = ump.ump_main_price.predict_hit_kwargs(**ml_feature_dict)\n\n        result = self.hit_ml.predict([deg_hit_cnt, jump_hit_cnt, wave_hit_cnt, price_hit_cnt])[0]\n        if result == -1:\n            return True\n        return False\n\n\nclass AbuBTCDayBuy(AbuFactorBuyBase, BuyCallMixin):\n    """"""\n        \xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe6\x97\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\n\n        1. \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb61: \xe5\xbd\x93\xe6\x97\xa5\xe8\xbf\x99100\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa860%\xe4\xbb\xa5\xe4\xb8\x8a\xe9\x83\xbd\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\n        2. \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb62: \xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\xa8\xe7\xac\xac12\xe8\x8a\x82\xef\xbc\x9a\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe4\xb8\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xa4\xba\xe4\xbe\x8b\xe4\xb8\xad\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84\xef\xbc\x9a\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x8f\x91\xe5\x87\xba\xe4\xbb\x8a\xe5\xa4\xa9\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe4\xbc\x9a\xe6\x9c\x89\xe5\xa4\xa7\xe8\xa1\x8c\xe6\x83\x85\n    """"""\n\n    def _init_self(self, **kwargs):\n        from ..MarketBu import ABuSymbolPd\n\n        # \xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe4\xb8\x8ebtc\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84top\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\n        self.btc_similar_top = kwargs.pop(\'btc_similar_top\')\n        # \xe8\xb6\x85\xe8\xbf\x87\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\x8a\xe5\xa4\xa9\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9b\xb8\xe5\x90\x8c\xe5\xb0\xb1\xe4\xb9\xb0\xe5\x85\xa5\n        self.btc_vote_val = kwargs.pop(\'btc_vote_val\', 0.60)\n\n        def _collect_kl(sim_line):\n            """"""\xe5\x9c\xa8\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\xad\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9b\xb8\xe5\x85\xb3\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84k\xe7\xba\xbf\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb6\xe9\x9b\x86""""""\n            start = self.kl_pd.iloc[0].date\n            end = self.kl_pd.iloc[-1].date\n            kl = ABuSymbolPd.make_kl_df(sim_line.symbol, start=start, end=end)\n            self.kl_dict[sim_line.symbol] = kl\n\n        self.kl_dict = {}\n        # k\xe7\xba\xbf\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb6\xe9\x9b\x86\xe5\x88\xb0\xe7\xb1\xbb\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1self.kl_dict\xe4\xb8\xad\n        self.btc_similar_top.apply(_collect_kl, axis=1)\n\n    # noinspection PyUnresolvedReferences\n    def fit_day(self, today):\n        """"""\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe5\xa4\xa9\xef\xbc\x88\xe7\xbb\x9f\xe8\xae\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe5\x89\x8d\xe4\xb8\xa4\xe5\xa4\xa9, \xe5\x9b\xa0\xe4\xb8\xbabtc\xe7\x9a\x84\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe7\x89\xb9\xe8\xaf\x81\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x89\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x89\n        if self.today_ind < 2:\n            return None\n\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xef\xbc\x8c\xe6\x98\xa8\xe5\xa4\xa9\xef\xbc\x8c\xe5\x89\x8d\xe5\xa4\xa9\xe4\xb8\x89\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe8\xaf\x81\xe8\xbd\xac\xe6\x8d\xa2\n        btc = self.kl_pd[self.today_ind - 2:self.today_ind + 1]\n        # \xe4\xb8\x89\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0btc_today_x\n        btc_today_x = self.make_btc_today(btc)\n\n        # btc_ml\xe5\xb9\xb6\xe6\xb2\xa1\xe6\x9c\x89\xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xe4\xbc\xa0\xe5\x85\xa5\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe5\xa6\x82\xe6\x9e\x9c\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8\xe7\x9a\x84btc_ml\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\x90\x8e\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb62: \xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\xa8\xe7\xac\xac12\xe8\x8a\x82\xef\xbc\x9a\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe4\xb8\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xa4\xba\xe4\xbe\x8b\xe4\xb8\xad\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84\xef\xbc\x9a\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x8f\x91\xe5\x87\xba\xe4\xbb\x8a\xe5\xa4\xa9\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe4\xbc\x9a\xe6\x9c\x89\xe5\xa4\xa7\xe8\xa1\x8c\xe6\x83\x85\n        if btc_ml.predict(btc_today_x):\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb61: \xe5\xbd\x93\xe6\x97\xa5\xe8\xbf\x99100\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa860%\xe4\xbb\xa5\xe4\xb8\x8a\xe9\x83\xbd\xe6\x98\xaf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\n            vote_val = self.similar_predict(today.date)\n            if vote_val > self.btc_vote_val:\n                # \xe6\xb2\xa1\xe6\x9c\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\xbd\x93\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84close\xe7\xad\x89\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x94btc_ml\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x98\xaf\xe5\xbd\x93\xe6\x97\xa5\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xbd\x93\xe6\x97\xa5\xe4\xb9\xb0\xe5\x85\xa5\n                return self.buy_today()\n\n    # noinspection PyUnresolvedReferences\n    def make_btc_today(self, sib_btc):\n        """"""\xe6\x9e\x84\xe9\x80\xa0\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe4\xb8\x89\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\xe7\x89\xb9\xe8\xaf\x81""""""\n        from ..UtilBu import ABuScalerUtil\n\n        sib_btc[\'big_wave\'] = (sib_btc.high - sib_btc.low) / sib_btc.pre_close > 0.55\n        sib_btc[\'big_wave\'] = sib_btc[\'big_wave\'].astype(int)\n        sib_btc_scale = ABuScalerUtil.scaler_std(\n            sib_btc.filter([\'open\', \'close\', \'high\', \'low\', \'volume\', \'pre_close\',\n                            \'ma5\', \'ma10\', \'ma21\', \'ma60\', \'atr21\', \'atr14\']))\n        # \xe6\x8a\x8a\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84\xe5\x92\x8cbig_wave\xef\xbc\x8cdate_week\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\n        sib_btc_scale = pd.concat([sib_btc[\'big_wave\'], sib_btc_scale, sib_btc[\'date_week\']], axis=1)\n\n        # \xe6\x8a\xbd\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe7\xac\xac\xe4\xba\x8c\xe5\xa4\xa9\xe7\x9a\x84\xe5\xa4\xa7\xe5\xa4\x9a\xe6\x95\xb0\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x86\xe5\x88\xab\xe6\x94\xb9\xe5\x90\x8d\xe5\xad\x97\xe4\xbb\xa5one\xef\xbc\x8ctwo\xe4\xb8\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x89\x8d\xe7\xbc\x80\xef\xbc\x8c\xe5\xa6\x82\xef\xbc\x9aone_open\xef\xbc\x8cone_close\xef\xbc\x8ctwo_ma5\xef\xbc\x8ctwo_high.....\n        a0 = sib_btc_scale.iloc[0].filter([\'open\', \'close\', \'high\', \'low\', \'volume\', \'pre_close\',\n                                           \'ma5\', \'ma10\', \'ma21\', \'ma60\', \'atr21\', \'atr14\', \'date_week\'])\n        a0.rename(index={\'open\': \'one_open\', \'close\': \'one_close\', \'high\': \'one_high\', \'low\': \'one_low\',\n                         \'volume\': \'one_volume\', \'pre_close\': \'one_pre_close\',\n                         \'ma5\': \'one_ma5\', \'ma10\': \'one_ma10\', \'ma21\': \'one_ma21\',\n                         \'ma60\': \'one_ma60\', \'atr21\': \'one_atr21\', \'atr14\': \'one_atr14\',\n                         \'date_week\': \'one_date_week\'}, inplace=True)\n\n        a1 = sib_btc_scale.iloc[1].filter([\'open\', \'close\', \'high\', \'low\', \'volume\', \'pre_close\',\n                                           \'ma5\', \'ma10\', \'ma21\', \'ma60\', \'atr21\', \'atr14\', \'date_week\'])\n        a1.rename(index={\'open\': \'two_open\', \'close\': \'two_close\', \'high\': \'two_high\', \'low\': \'two_low\',\n                         \'volume\': \'two_volume\', \'pre_close\': \'two_pre_close\',\n                         \'ma5\': \'two_ma5\', \'ma10\': \'two_ma10\', \'ma21\': \'two_ma21\',\n                         \'ma60\': \'two_ma60\', \'atr21\': \'two_atr21\', \'atr14\': \'two_atr14\',\n                         \'date_week\': \'two_date_week\'}, inplace=True)\n        # \xe7\xac\xac\xe4\xb8\x89\xe5\xa4\xa9\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\'open\', \'low\', \'pre_close\', \'date_week\'\xef\xbc\x8c\xe8\xaf\xa5\xe5\x90\x8d\xe5\x89\x8d\xe7\xbc\x80today\xef\xbc\x8c\xe5\xa6\x82today_open\xef\xbc\x8ctoday_date_week\n        a2 = sib_btc_scale.iloc[2].filter([\'big_wave\', \'open\', \'low\', \'pre_close\', \'date_week\'])\n        a2.rename(index={\'open\': \'today_open\', \'low\': \'today_low\',\n                         \'pre_close\': \'today_pre_close\',\n                         \'date_week\': \'today_date_week\'}, inplace=True)\n        # \xe5\xb0\x86\xe6\x8a\xbd\xe5\x8f\x96\xe6\x94\xb9\xe5\x90\x8d\xe5\xad\x97\xe5\x90\x8e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\xe7\xbb\x84\xe5\x90\x88\xe6\x88\x90\xe4\xb8\xba\xe4\xb8\x80\xe6\x9d\xa1\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\xb33\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8d>1\xe6\x9d\xa1\xe6\x96\xb0\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        btc_today = pd.DataFrame(pd.concat([a0, a1, a2], axis=0)).T\n\n        # \xe5\xbc\x80\xe5\xa7\x8b\xe5\xb0\x86\xe5\x91\xa8\xe5\x87\xa0\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xa6\xbb\xe6\x95\xa3\xe5\xa4\x84\xe7\x90\x86\n        dummies_week_col = btc_ml.df.filter(regex=\'(^one_date_week_|^two_date_week_|^today_date_week_)\').columns\n        dummies_week_df = pd.DataFrame(np.zeros((1, len(dummies_week_col))), columns=dummies_week_col)\n\n        # \xe6\x89\x8b\xe5\x8a\xa8\xe4\xbf\xae\xe6\x94\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x84one hot\n        one_day_key = \'one_date_week_{}\'.format(btc_today.one_date_week.values[0])\n        dummies_week_df[one_day_key] = 1\n        two_day_key = \'two_date_week_{}\'.format(btc_today.two_date_week.values[0])\n        dummies_week_df[two_day_key] = 1\n        today_day_key = \'today_date_week_{}\'.format(btc_today.today_date_week.values[0])\n        dummies_week_df[today_day_key] = 1\n        btc_today.drop([\'one_date_week\', \'two_date_week\', \'today_date_week\'], inplace=True, axis=1)\n        btc_today = pd.concat([btc_today, dummies_week_df], axis=1)\n        return btc_today.as_matrix()[:, 1:]\n\n    def similar_predict(self, today_date):\n        """"""\xe4\xb8\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe5\x9c\xa8\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84top100\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb7\xb2\xe5\x90\x84\xe8\x87\xaa\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8a\x95\xe7\xa5\xa8""""""\n\n        def _predict_vote(sim_line, _today_date):\n            kl = self.kl_dict[sim_line.symbol]\n            if kl is None:\n                return -1 * sim_line.vote_direction > 0\n            kl_today = kl[kl.date == _today_date]\n            if kl_today is None or kl_today.empty:\n                return -1 * sim_line.vote_direction > 0\n            # \xe9\x9c\x80\xe8\xa6\x81 * sim_line.vote_direction\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xb4\x9f\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe5\xad\x98\xe5\x9c\xa8\n            return kl_today.p_change.values[0] * sim_line.vote_direction > 0\n\n        vote_result = self.btc_similar_top.apply(_predict_vote, axis=1, args={today_date, })\n        # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe6\x8a\x95\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x9f\xe8\xae\xa1\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xb8\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\xbf\x99top100\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x8a\x95\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x9c\n        vote_val = 1 - vote_result.value_counts()[False] / vote_result.value_counts().sum()\n        return vote_val\n'"
abupy/FactorBuyBu/ABuFactorBuyTrend.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe9\x95\xbf\xe7\xba\xbf\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe8\xb8\xaa\xe4\xb8\x8e\xe7\x9f\xad\xe7\xba\xbf\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\x9a\x84\xe9\x85\x8d\xe5\x90\x88\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom ..TLineBu.ABuTLine import AbuTLine\nfrom ..TLineBu.ABuTLGolden import calc_golden\nfrom .ABuFactorBuyBase import AbuFactorBuyXD, BuyCallMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuUpDownTrend(AbuFactorBuyXD, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe9\x95\xbf\xe7\xba\xbf\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe7\x9f\xad\xe7\xba\xbf\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyCallMixin""""""\n\n    def _init_self(self, **kwargs):\n        """"""\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xabxd: \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa420\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xabpast_factor: \xe4\xbb\xa3\xe8\xa1\xa8\xe9\x95\xbf\xe7\xba\xbf\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa44\xef\xbc\x8clong = xd * past_factor->eg: long = 20 * 4\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xabup_deg_threshold: \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe9\x95\xbf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\xe5\xa4\x9a\xe5\xb0\x91\xe5\x86\xb3\xe7\xad\x96\xe4\xb8\xba\xe4\xb8\x8a\xe6\xb6\xa8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa43\n        """"""\n        if \'xd\' not in kwargs:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x83\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaexd\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\xbb\x99\xe4\xb8\x80\xe4\xb8\xaa30\n            kwargs[\'xd\'] = 20\n        super(AbuUpDownTrend, self)._init_self(**kwargs)\n        # \xe4\xbb\xa3\xe8\xa1\xa8\xe9\x95\xbf\xe7\xba\xbf\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa44\xef\xbc\x8clong = xd * past_factor->eg: long = 30 * 4\n        self.past_factor = kwargs.pop(\'past_factor\', 4)\n        # \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe9\x95\xbf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\xe5\xa4\x9a\xe5\xb0\x91\xe5\x86\xb3\xe7\xad\x96\xe4\xb8\xba\xe4\xb8\x8a\xe6\xb6\xa8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa44\n        self.up_deg_threshold = kwargs.pop(\'up_deg_threshold\', 3)\n\n    def fit_day(self, today):\n        """"""\n        \xe9\x95\xbf\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\xba\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe7\x9f\xad\xe7\xba\xbf\xe5\xaf\xbb\xe6\x89\xbe\xe8\xbf\x91\xe6\x9c\x9f\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe5\x90\x91\xe4\xb8\x8b\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x98\xaf\xe6\x8c\x81\xe7\xbb\xad\xe4\xb9\x8b\xe5\x89\x8d\xe9\x95\xbf\xe7\x9b\xb8\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\n            1. \xe9\x80\x9a\xe8\xbf\x87past_today_kl\xe8\x8e\xb7\xe5\x8f\x96\xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87AbuTLine\xe4\xb8\xad\xe7\x9a\x84is_up_trend\xe5\x88\xa4\xe6\x96\xad\n            \xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\xef\xbc\x8c\n            2. \xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe4\xb8\xba\xe6\x9c\x80\xe8\xbf\x91xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xb8\x94\xe7\x9f\xad\xe7\xba\xbfxd\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\n            3. \xe6\xbb\xa1\xe8\xb6\xb31\xef\xbc\x8c2\xe5\x8f\x91\xe5\x87\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        long_kl = self.past_today_kl(today, self.past_factor * self.xd)\n        tl_long = AbuTLine(long_kl.close, \'long\')\n        # \xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\n        if tl_long.is_up_trend(up_deg_threshold=self.up_deg_threshold, show=False):\n            if today.close == self.xd_kl.close.min() and AbuTLine(\n                    self.xd_kl.close, \'short\').is_down_trend(down_deg_threshold=-self.up_deg_threshold, show=False):\n                # \xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe4\xb8\xba\xe6\x9c\x80\xe8\xbf\x91xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xb8\x94\xe7\x9f\xad\xe7\xba\xbfxd\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\n                return self.buy_tomorrow()\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuUpDownGolden(AbuUpDownTrend, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe9\x95\xbf\xe7\xba\xbf\xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe7\x9f\xad\xe7\xba\xbf\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe5\x85\xb3\xe9\x94\xae\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyCallMixin""""""\n\n    def fit_day(self, today):\n        """"""\n        \xe9\x95\xbf\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe9\x80\x89\xe6\x8b\xa9\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\xba\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe7\x9f\xad\xe7\xba\xbf\xe5\xaf\xbb\xe6\x89\xbe\xe8\xbf\x91\xe6\x9c\x9f\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe5\x90\x91\xe4\xb8\x8b\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x98\xaf\xe6\x8c\x81\xe7\xbb\xad\xe4\xb9\x8b\xe5\x89\x8d\xe9\x95\xbf\xe7\x9b\xb8\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\n            1. \xe9\x80\x9a\xe8\xbf\x87past_today_kl\xe8\x8e\xb7\xe5\x8f\x96\xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87AbuTLine\xe4\xb8\xad\xe7\x9a\x84is_up_trend\xe5\x88\xa4\xe6\x96\xad\n            \xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\xef\xbc\x8c\n            2. \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe5\x9c\xa80.382\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa80.382\xe4\xb8\x8a\xef\xbc\x8c\xe4\xb8\x94\xe7\x9f\xad\xe7\xba\xbfxd\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\n            3. \xe6\xbb\xa1\xe8\xb6\xb31\xef\xbc\x8c2\xe5\x8f\x91\xe5\x87\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        long_kl = self.past_today_kl(today, self.past_factor * self.xd)\n        tl_long = AbuTLine(long_kl.close, \'long\')\n        # \xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\n        if tl_long.is_up_trend(up_deg_threshold=self.up_deg_threshold, show=False):\n            # calc_golden\xe8\xae\xa1\xe7\xae\x97\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2+\xe5\x85\xb3\xe9\x94\xae\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n            golden = calc_golden(self.xd_kl, show=False)\n            if today.pre_close < golden.below382 < today.close and AbuTLine(\n                    self.xd_kl.close, \'short\').is_down_trend(down_deg_threshold=-self.up_deg_threshold,\n                                                             show=False):\n                # \xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe5\x9c\xa80.382\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa80.382\xe4\xb8\x8a\xef\xbc\x8c\xe4\xb8\x94\xe7\x9f\xad\xe7\xba\xbfxd\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\n                return self.buy_tomorrow()\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuDownUpTrend(AbuFactorBuyXD, BuyCallMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe9\x95\xbf\xe7\xba\xbf\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe7\x9f\xad\xe7\xba\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x8d\xe8\xbd\xac\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyCallMixin\xef\xbc\x8c\xe5\x8d\xb3\xe5\x90\x91\xe4\xb8\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe8\xa7\xa6\xe5\x8f\x91\xe4\xb9\xb0\xe5\x85\xa5event""""""\n\n    def _init_self(self, **kwargs):\n        """"""\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xabxd: \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa420\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xabpast_factor: \xe4\xbb\xa3\xe8\xa1\xa8\xe9\x95\xbf\xe7\xba\xbf\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa44\xef\xbc\x8clong = xd * past_factor->eg: long = 20 * 4\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xabdown_deg_threshold: \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe9\x95\xbf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\xe5\xa4\x9a\xe5\xb0\x91\xe5\x86\xb3\xe7\xad\x96\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-3\n        """"""\n        if \'xd\' not in kwargs:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x83\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaexd\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\xbb\x99\xe4\xb8\x80\xe4\xb8\xaa20\n            kwargs[\'xd\'] = 20\n\n        super(AbuDownUpTrend, self)._init_self(**kwargs)\n        # \xe4\xbb\xa3\xe8\xa1\xa8\xe9\x95\xbf\xe7\xba\xbf\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa44\xef\xbc\x8clong = xd * past_factor->eg: long = 20 * 4\n        self.past_factor = kwargs.pop(\'past_factor\', 4)\n        # \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe9\x95\xbf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\xe5\xa4\x9a\xe5\xb0\x91\xe5\x86\xb3\xe7\xad\x96\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-3\n        self.down_deg_threshold = kwargs.pop(\'down_deg_threshold\', -3)\n\n    def fit_day(self, today):\n        """"""\n        \xe9\x95\xbf\xe7\xba\xbf\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe7\x9f\xad\xe7\xba\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x8d\xe8\xbd\xac\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\n            1. \xe9\x80\x9a\xe8\xbf\x87past_today_kl\xe8\x8e\xb7\xe5\x8f\x96\xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87AbuTLine\xe4\xb8\xad\xe7\x9a\x84is_down_trend\xe5\x88\xa4\xe6\x96\xad\n            \xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\xef\xbc\x8c\n            2. \xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe4\xb8\xba\xe6\x9c\x80\xe8\xbf\x91xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xb8\x94\xe7\x9f\xad\xe7\xba\xbfxd\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\n            3. \xe6\xbb\xa1\xe8\xb6\xb31\xef\xbc\x8c2\xe5\x8f\x91\xe5\x87\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        long_kl = self.past_today_kl(today, self.past_factor * self.xd)\n        tl_long = AbuTLine(long_kl.close, \'long\')\n        # \xe5\x88\xa4\xe6\x96\xad\xe9\x95\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\n        if tl_long.is_down_trend(down_deg_threshold=self.down_deg_threshold, show=False):\n            if today.close == self.xd_kl.close.max() and AbuTLine(\n                    self.xd_kl.close, \'short\').is_up_trend(up_deg_threshold=-self.down_deg_threshold, show=False):\n                # \xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe4\xb8\xba\xe6\x9c\x80\xe8\xbf\x91xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xb8\x94\xe7\x9f\xad\xe7\xba\xbfxd\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\n                return self.buy_tomorrow()\n'"
abupy/FactorBuyBu/ABuFactorBuyWD.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe6\x97\xa5\xe8\x83\x9c\xe7\x8e\x87\xe5\x9d\x87\xe5\x80\xbc\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorBuyBase import AbuFactorBuyTD, BuyCallMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuFactorBuyWD(AbuFactorBuyTD, BuyCallMixin):\n    """"""\n        \xe7\xa4\xba\xe4\xbe\x8b\xe7\x9f\xad\xe7\xba\xbf\xef\xbc\x9a\xe6\x97\xa5\xe8\x83\x9c\xe7\x8e\x87\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\n\n        1. \xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\xa540\xe5\xa4\xa9\xe4\xb8\xba\xe5\x91\xa8\xe6\x9c\x9f(8\xe5\x91\xa8)\xe7\xbb\x93\xe5\x90\x88\xe6\xb6\xa8\xe8\xb7\x8c\xe9\x98\x80\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe5\x87\xa0\xe9\x80\x82\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\n        2. \xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe6\x9c\x88\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\xac\xa1\xe4\xb8\x8a\xe8\xbf\xb0\xe7\x9a\x84\xe5\x91\xa8\xe5\x87\xa0\xe9\x80\x82\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\n        3. \xe5\x9c\xa8\xe7\xad\x96\xe7\x95\xa5\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xad\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe4\xb8\xba\xef\xbc\x9a\xe6\x98\xa8\xe5\xa4\xa9\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbc\x80\xe7\x9b\x98\xe4\xb9\x9f\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe4\xb8\x94\xe6\x98\x8e\xe5\xa4\xa9\xe6\x98\xaf\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe4\xb8\x8a\xe6\xb6\xa8\xe6\xa6\x82\xe7\x8e\x87\xe5\xa4\xa7\xe7\x9a\x84\'\xe5\x91\xa8\xe5\x87\xa0\'\n    """"""\n\n    def _init_self(self, **kwargs):\n        """"""\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9abuy_dw:    \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x91\xa8\xe6\x9c\x9f\xe8\x83\x9c\xe7\x8e\x87\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.55\xe5\x8d\xb355%\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9abuy_dwm:   \xe4\xbb\xa3\xe8\xa1\xa8\xe6\xb6\xa8\xe5\xb9\x85\xe6\xaf\x94\xe4\xbe\x8b\xe9\x98\x80\xe5\x80\xbc\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.618\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9adw_period: \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\x86\xe6\x9e\x90dw\xef\xbc\x8cdwm\xe6\x89\x80\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa440\xe5\xa4\xa9\xe5\x91\xa8\xe6\x9c\x9f(8\xe5\x91\xa8)\n        """"""\n        self.buy_dw = kwargs.pop(\'buy_dw\', 0.55)\n        self.buy_dwm = kwargs.pop(\'buy_dwm\', 0.618)\n        self.dw_period = kwargs.pop(\'dw_period\', 40)\n\n        # combine_kl_pd\xe4\xb8\xad\xe5\x8c\x85\xe5\x90\xab\xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8e\xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\x8b\xe5\x89\x8d\xe5\x91\xa8\xe6\x9c\x9f\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x95\xb0\xe6\x8d\xae, \xe5\x85\x88\xe5\x8f\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe6\x95\xb0\xe6\x8d\xae\n        last_kl = self.combine_kl_pd.loc[:self.kl_pd.index[0]]\n        if last_kl.shape[0] > self.dw_period:\n            last_kl = last_kl[-self.dw_period:]\n        # \xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe5\x87\xa0\xe4\xb9\xb0\xef\xbc\x8c_make_buy_date\xe6\x8a\x8a\xe7\xbb\x93\xe6\x9e\x9c\xe8\xa2\xab\xe6\x94\xbe\xe5\x9c\xa8self.buy_date_week\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\n        self._make_buy_date(last_kl)\n\n    def fit_month(self, today):\n        """"""\xe6\x9c\x88\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe9\x87\x8d\xe6\x96\xb0\xe5\x8f\x96\xe4\xb9\x8b\xe5\x89\x8d\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe9\x81\x8d\'\xe5\x91\xa8\xe5\x87\xa0\xe4\xb9\xb0\'""""""\n        last_kl = self.past_today_kl(today, self.dw_period)\n        # \xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe9\x81\x8d\'\xe5\x91\xa8\xe5\x87\xa0\xe4\xb9\xb0\'\n        self._make_buy_date(last_kl)\n\n    def fit_day(self, today):\n        """"""\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x9a\xe6\x98\xa8\xe5\xa4\xa9\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbc\x80\xe7\x9b\x98\xe4\xb9\x9f\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x98\xaf\xe5\x91\xa8\xe5\x87\xa0\xef\xbc\x8c\xe5\x9c\xa8\xe4\xb8\x8d\xe5\x9c\xa8\xe5\xba\x8f\xe5\x88\x97self.buy_date_week\xe4\xb8\xad\xe5\x86\xb3\xe5\xae\x9a\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb9\xb0\xe4\xb8\x8d\xe4\xb9\xb0""""""\n        if self.yesterday.p_change < 0 and today.open < self.yesterday.close \\\n                and int(today.date_week) in self.buy_date_week:\n            # \xe7\x94\xb1\xe4\xba\x8e\xe6\xb2\xa1\xe6\x9c\x89\xe7\x94\xa8\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe7\xad\x89\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8buy_today\n            return self.buy_today()\n        return None\n\n    # noinspection PyProtectedMember\n    def _make_buy_date(self, last_kl):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x87\xe7\x89\x87\xe5\x85\xb7\xe4\xbd\x93\xe8\xae\xa1\xe7\xae\x97\'\xe5\x91\xa8\xe5\x87\xa0\'\xe4\xb9\xb0\xe4\xb8\x8a\xe6\xb6\xa8\xe6\xa6\x82\xe7\x8e\x87\xe5\xa4\xa7\n\n        :param last_kl: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x87\xe7\x89\x87\xef\xbc\x8cpd.DataFrame\n        """"""\n        from ..UtilBu import ABuKLUtil\n\n        self.buy_date_week = []\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xef\xbc\x8c\xe5\x91\xa8\xe6\x9c\x9f\xe7\x9a\x84\xe8\x83\x9c\xe7\x8e\x87\n        last_dw = ABuKLUtil.date_week_win(last_kl)\n        # \xe6\x91\x98\xe5\x8f\x96\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcself.buy_dw\xe7\x9a\x84\'\xe5\x91\xa8\xe5\x87\xa0\'\xef\xbc\x8cbuy_dw\xe9\xbb\x98\xe8\xae\xa40.55\n        last_dw_vd = last_dw[last_dw.win >= self.buy_dw]\n        """"""\n            eg: last_dw_vd\n                       0  1   win\n            date_week\n            \xe5\x91\xa8\xe5\x9b\x9b         3  5  0.62\n            \xe5\x91\xa8\xe4\xba\x94         2  6  0.75\n        """"""\n        if len(last_dw_vd) > 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\x83\x9c\xe7\x8e\x87\xe6\x9c\x89\xe7\xac\xa6\xe5\x90\x88\xe8\xa6\x81\xe6\xb1\x82\xe7\x9a\x84\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x91\xa8\xe5\x87\xa0\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb6\xa8\xe5\xb9\x85\xe8\xae\xa1\xe7\xae\x97date_week_mean\n            last_dwm = ABuKLUtil.date_week_mean(last_kl)\n            # \xe6\x91\x98\xe5\x8f\x96\xe6\xbb\xa1\xe8\xb6\xb3\xe8\x83\x9c\xe7\x8e\x87\xe7\x9a\x84last_dw_vd\n            last_dwm_vd = last_dwm.loc[last_dw_vd.index]\n            """"""\n                eg: last_dwm_vd\n                           _p_change\n                date_week\n                \xe5\x91\xa8\xe5\x9b\x9b              1.55\n                \xe5\x91\xa8\xe4\xba\x94              1.12\n            """"""\n            # \xe9\x98\x80\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f1\n            dwm1 = abs(last_dwm.sum()).values[0] / self.buy_dwm\n            # \xe9\x98\x80\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f2\n            dwm2 = abs(last_dwm._p_change).mean() / self.buy_dwm\n            # \xe5\xa6\x82\xe6\x9e\x9csymbol\xe5\xa4\x9a\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8&\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\n            dm_effect = (last_dwm_vd._p_change > dwm1) | (last_dwm_vd._p_change > dwm2)\n            buy_date_loc = last_dwm_vd[dm_effect].index\n            """"""\n                eg: buy_date_loc\n                Index([\'\xe5\x91\xa8\xe5\x9b\x9b\', \'\xe5\x91\xa8\xe4\xba\x94\'], dtype=\'object\', name=\'date_week\')\n            """"""\n            if len(buy_date_loc) > 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe9\x98\x80\xe5\x80\xbc\xe4\xb9\x9f\xe6\xbb\xa1\xe8\xb6\xb3\xef\xbc\x8ctolist\xef\xbc\x8ceg\xef\xbc\x9a[\'\xe5\x91\xa8\xe4\xb8\x80\', \'\xe5\x91\xa8\xe4\xba\x8c\', \'\xe5\x91\xa8\xe4\xb8\x89\', \'\xe5\x91\xa8\xe5\x9b\x9b\', \'\xe5\x91\xa8\xe4\xba\x94\']\n                dw_index = last_dw.index.tolist()\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\x80\xe5\x91\xa85\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe5\xb0\xb1\xe6\x98\xaf4\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xad\x897\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe5\xb0\xb1\xe6\x98\xaf6\n                max_ind = len(dw_index) - 1\n                for bdl in buy_date_loc:\n                    sell_ind = dw_index.index(bdl)\n                    buy_ind = sell_ind - 1 if sell_ind > 0 else max_ind\n                    self.buy_date_week.append(buy_ind)\n'"
abupy/FactorBuyBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuFactorBuyBase import AbuFactorBuyBase, AbuFactorBuyXD, AbuFactorBuyTD, BuyCallMixin, BuyPutMixin\nfrom .ABuFactorBuyBreak import AbuFactorBuyBreak, AbuFactorBuyPutBreak\nfrom .ABuFactorBuyWD import AbuFactorBuyWD\nfrom .ABuFactorBuyDemo import AbuSDBreak, AbuTwoDayBuy, AbuWeekMonthBuy, AbuFactorBuyBreakUmpDemo\nfrom .ABuFactorBuyDemo import AbuFactorBuyBreakReocrdHitDemo, AbuFactorBuyBreakHitPredictDemo\nfrom .ABuFactorBuyDM import AbuDoubleMaBuy\nfrom .ABuFactorBuyTrend import AbuUpDownTrend, AbuDownUpTrend, AbuUpDownGolden\n\n__all__ = [\n    'AbuFactorBuyBase',\n    'AbuFactorBuyXD',\n    'AbuFactorBuyTD',\n    'BuyCallMixin',\n    'BuyPutMixin',\n    'AbuFactorBuyBreak',\n    'AbuFactorBuyWD',\n    'AbuFactorBuyPutBreak',\n    'AbuFactorBuyBreakUmpDemo',\n    'AbuFactorBuyBreakReocrdHitDemo',\n    'AbuFactorBuyBreakHitPredictDemo',\n    'AbuSDBreak',\n    'AbuTwoDayBuy',\n    'AbuWeekMonthBuy',\n    'AbuDoubleMaBuy',\n    'AbuUpDownTrend',\n    'AbuDownUpTrend',\n    'AbuUpDownGolden'\n]\n"""
abupy/FactorSellBu/ABuFS.py,0,b'from __future__ import absolute_import\n\n# noinspection PyUnresolvedReferences\nfrom . import ABuFactorCloseAtrNStop as close\n# noinspection PyUnresolvedReferences\nfrom . import ABuFactorPreAtrNStop as pre\n'
abupy/FactorSellBu/ABuFactorAtrNStop.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9an\xe5\x80\x8datr(\xe6\xad\xa2\xe7\x9b\x88\xe6\xad\xa2\xe6\x8d\x9f)\xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorSellBase import AbuFactorSellBase, ESupportDirection\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuFactorAtrNStop(AbuFactorSellBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8bn\xe5\x80\x8datr(\xe6\xad\xa2\xe7\x9b\x88\xe6\xad\xa2\xe6\x8d\x9f)\xe5\x9b\xa0\xe5\xad\x90""""""\n\n    def _init_self(self, **kwargs):\n        """"""\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0stop_loss_n: \xe6\xad\xa2\xe6\x8d\x9f\xe7\x9a\x84atr\xe5\x80\x8d\xe6\x95\xb0\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0stop_win_n: \xe6\xad\xa2\xe7\x9b\x88\xe7\x9a\x84atr\xe5\x80\x8d\xe6\x95\xb0\n        """"""\n\n        if \'stop_loss_n\' in kwargs:\n            # \xe8\xae\xbe\xe7\xbd\xae\xe6\xad\xa2\xe6\x8d\x9f\xe7\x9a\x84atr\xe5\x80\x8d\xe6\x95\xb0\n            self.stop_loss_n = kwargs[\'stop_loss_n\']\n            # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xad\x89\xe7\xad\x89\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n            self.sell_type_extra_loss = \'{}:stop_loss={}\'.format(self.__class__.__name__, self.stop_loss_n)\n\n        if \'stop_win_n\' in kwargs:\n            # \xe8\xae\xbe\xe7\xbd\xae\xe6\xad\xa2\xe7\x9b\x88\xe7\x9a\x84atr\xe5\x80\x8d\xe6\x95\xb0\n            self.stop_win_n = kwargs[\'stop_win_n\']\n            # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xad\x89\xe7\xad\x89\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n            self.sell_type_extra_win = \'{}:stop_win={}\'.format(self.__class__.__name__, self.stop_win_n)\n\n    def support_direction(self):\n        """"""n\xe5\x80\x8datr(\xe6\xad\xa2\xe7\x9b\x88\xe6\xad\xa2\xe6\x8d\x9f)\xe5\x9b\xa0\xe5\xad\x90\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value, ESupportDirection.DIRECTION_PUT.value]\n\n    def fit_day(self, today, orders):\n        """"""\n        \xe6\xad\xa2\xe7\x9b\x88event\xef\xbc\x9a\xe6\x88\xaa\xe6\xad\xa2\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9b\xb8\xe6\xaf\x94\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a * \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe7\x9a\x84\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x96\xb9\xe5\x90\x91 > n\xe5\x80\x8datr\n        \xe6\xad\xa2\xe6\x8d\x9fevent\xef\xbc\x9a\xe6\x88\xaa\xe6\xad\xa2\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9b\xb8\xe6\xaf\x94\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a * \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe7\x9a\x84\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x96\xb9\xe5\x90\x91 < -n\xe5\x80\x8datr\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n\n        for order in orders:\n            """"""\n                today.close - order.buy_price\xef\xbc\x9a\xe6\x88\xaa\xe6\xad\xa2\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9b\xb8\xe6\xaf\x94\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\n                order.expect_direction\xef\xbc\x9a\xe4\xb9\xb0\xe5\x8d\x95\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8a\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x9d\xe5\xae\x9e\xe9\x99\x85\xe6\x94\xb6\xe7\x9b\x8a\n            """"""\n            profit = (today.close - order.buy_price) * order.expect_direction\n            # atr\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe7\xa4\xba\xe4\xbe\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84atr21\xe4\xb8\x8eatr14\xe5\x92\x8c\xe4\xbd\x9c\xe4\xb8\xbaatr\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe4\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe5\xae\x83\xe7\xbb\x84\xe5\x90\x88\xe5\xb8\xb8\xe9\x87\x8f\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\n            stop_base = today.atr21 + today.atr14\n            if hasattr(self, \'stop_win_n\') and profit > 0 and profit > self.stop_win_n * stop_base:\n                # \xe6\xbb\xa1\xe8\xb6\xb3\xe6\xad\xa2\xe7\x9b\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8, \xe5\x8d\xb3\xe6\x94\xb6\xe7\x9b\x8a(profit) > n\xe5\x80\x8datr\n                self.sell_type_extra = self.sell_type_extra_win\n                # \xe7\x94\xb1\xe4\xba\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe5\xbd\x93\xe5\xa4\xa9\xe7\x9a\x84close\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x98\x8e\xe5\xa4\xa9\xe6\x89\x8d\xe8\x83\xbd\xe5\x8d\x96\xe5\x87\xba\n                self.sell_tomorrow(order)\n\n            if hasattr(self, \'stop_loss_n\') and profit < 0 and profit < -self.stop_loss_n * stop_base:\n                # \xe6\xbb\xa1\xe8\xb6\xb3\xe6\xad\xa2\xe6\x8d\x9f\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8, \xe5\x8d\xb3\xe6\x94\xb6\xe7\x9b\x8a(profit) < -n\xe5\x80\x8datr\n                self.sell_type_extra = self.sell_type_extra_loss\n                order.fit_sell_order(self.today_ind, self)\n                # \xe7\x94\xb1\xe4\xba\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe5\xbd\x93\xe5\xa4\xa9\xe7\x9a\x84close\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x98\x8e\xe5\xa4\xa9\xe6\x89\x8d\xe8\x83\xbd\xe5\x8d\x96\xe5\x87\xba\n                self.sell_tomorrow(order)\n'"
abupy/FactorSellBu/ABuFactorCloseAtrNStop.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a \xe8\xbe\x83\xe5\xb0\x8f\xe5\x88\xa9\xe6\xb6\xa6\xe5\x80\xbc < \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbb\xb7\xe6\xa0\xbc - \xe4\xbb\x8a\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc < \xe8\xbe\x83\xe5\xa4\xa7\xe5\x88\xa9\xe6\xb6\xa6\xe5\x80\xbc \xef\xbc\x8d> \xe6\xad\xa2\xe7\x9b\x88\xe5\x8d\x96\xe5\x87\xba\n    \xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xba\xe5\x8d\x95\xe8\xbe\xb9\xe6\xad\xa2\xe7\x9b\x88\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe4\xbd\x9c\xe4\xb8\xba\xe5\x88\xa9\xe6\xb6\xa6\xe4\xbf\x9d\xe6\x8a\xa4\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorSellBase import AbuFactorSellBase, ESupportDirection\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n""""""\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xef\xbc\x9aabupy.fs.close.g_default_close_atr_n = 2.5\xe6\x9d\xa5\xe4\xbf\xae\xe6\x94\xb9\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc""""""\ng_default_close_atr_n = 3\n\n\nclass AbuFactorCloseAtrNStop(AbuFactorSellBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x88\xa9\xe6\xb6\xa6\xe4\xbf\x9d\xe6\x8a\xa4\xe5\x9b\xa0\xe5\xad\x90(\xe6\xad\xa2\xe7\x9b\x88)\xe5\x9b\xa0\xe5\xad\x90""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0close_atr_n: \xe4\xbf\x9d\xe6\x8a\xa4\xe5\x88\xa9\xe6\xb6\xa6\xe6\xad\xa2\xe8\xb5\xa2\xe5\x80\x8d\xe6\x95\xb0""""""\n\n        self.close_atr_n = g_default_close_atr_n\n        if \'close_atr_n\' in kwargs:\n            # \xe8\xae\xbe\xe7\xbd\xae\xe4\xbf\x9d\xe6\x8a\xa4\xe5\x88\xa9\xe6\xb6\xa6\xe6\xad\xa2\xe8\xb5\xa2\xe5\x80\x8d\xe6\x95\xb0\n            self.close_atr_n = kwargs[\'close_atr_n\']\n            self.sell_type_extra = \'{}:close_atr_n={}\'.format(self.__class__.__name__, self.close_atr_n)\n\n    def support_direction(self):\n        """"""\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85n\xe5\x80\x8datr(\xe6\xad\xa2\xe6\x8d\x9f)\xe5\x9b\xa0\xe5\xad\x90\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value, ESupportDirection.DIRECTION_PUT.value]\n\n    def fit_day(self, today, orders):\n        """"""\n        \xe6\xad\xa2\xe7\x9b\x88event\xef\xbc\x9a \xe8\xbe\x83\xe5\xb0\x8f\xe5\x88\xa9\xe6\xb6\xa6\xe5\x80\xbc < \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbb\xb7\xe6\xa0\xbc - \xe4\xbb\x8a\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc < \xe8\xbe\x83\xe5\xa4\xa7\xe5\x88\xa9\xe6\xb6\xa6\xe5\x80\xbc\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n\n        for order in orders:\n            # \xe9\x80\x9a\xe8\xbf\x87order\xe4\xb8\xad\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe8\xae\xa1\xe7\xae\x97\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97kl_pd\xe4\xb8\xad\xe7\x9a\x84index\n            mask_date = self.kl_pd[\'date\'] == order.buy_date\n            start_ind = int(self.kl_pd[mask_date][\'key\'].values)\n            end_ind = self.today_ind + 1\n\n            """"""\n                \xe4\xbb\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe5\xad\x90\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbe\x97\xe5\x88\xb0\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x9c\xe4\xb8\xbamax_close\xef\xbc\x8c\n                \xe6\xb3\xa8\xe6\x84\x8f\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafcall\xe6\x89\xbe\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8cput\xe6\x89\xbe\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            """"""\n            max_close = self.kl_pd.iloc[start_ind:end_ind, :].close.max() if order.buy_type_str == \'call\' \\\n                else self.kl_pd.iloc[start_ind:end_ind, :].close.min()\n\n            """"""\n                max_close - order.buy_price * \xe6\x96\xb9\xe5\x90\x91 > today[\'atr21\']\xef\xbc\x9a\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\x89\xe4\xb8\x80\xe5\xae\x9a\xe7\x9b\x88\xe5\x88\xa9\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\x8d\xb3 > \xe8\xbe\x83\xe5\xb0\x8f\xe5\x88\xa9\xe6\xb6\xa6\xe5\x80\xbc\n                max_close - today.close * \xe6\x96\xb9\xe5\x90\x91 > today[\'atr21\'] * self.close_atr_n\xef\xbc\x9a\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xba\x86\xe4\xb8\x80\xe5\xae\x9a\xe5\x80\xbc\xe6\xad\xa2\xe7\x9b\x88\xe9\x80\x80\xe5\x87\xba, \xe5\x8d\xb3 < \xe8\xbe\x83\xe5\xa4\xa7\xe5\x88\xa9\xe6\xb6\xa6\xe5\x80\xbc\n            """"""\n            if (max_close - order.buy_price) * order.expect_direction > today[\'atr21\'] \\\n                    and (max_close - today.close) * order.expect_direction > today[\'atr21\'] * self.close_atr_n:\n                # \xe7\x94\xb1\xe4\xba\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe5\xbd\x93\xe5\xa4\xa9\xe7\x9a\x84close\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x98\x8e\xe5\xa4\xa9\xe6\x89\x8d\xe8\x83\xbd\xe5\x8d\x96\xe5\x87\xba\n                self.sell_tomorrow(order)\n'"
abupy/FactorSellBu/ABuFactorPreAtrNStop.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85n\xe5\x80\x8datr\xe6\xad\xa2\xe6\x8d\x9f\n    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8d\x95\xe8\xbe\xb9\xe6\xad\xa2\xe6\x8d\x9f\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe4\xbd\x9c\xe4\xb8\xba\xe9\xa3\x8e\xe9\x99\xa9\xe6\x8e\xa7\xe5\x88\xb6\xe4\xbf\x9d\xe6\x8a\xa4\xe5\x9b\xa0\xe5\xad\x90\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorSellBase import AbuFactorSellBase, ESupportDirection\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xef\xbc\x9aabupy.fs.pre.g_default_pre_atr_n = 2.5\xe6\x9d\xa5\xe4\xbf\xae\xe6\x94\xb9\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc""""""\ng_default_pre_atr_n = 1.5\n\n\nclass AbuFactorPreAtrNStop(AbuFactorSellBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85n\xe5\x80\x8datr(\xe6\xad\xa2\xe6\x8d\x9f)\xe9\xa3\x8e\xe9\x99\xa9\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0pre_atr_n: \xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85\xe6\xad\xa2\xe6\x8d\x9f\xe7\x9a\x84atr\xe5\x80\x8d\xe6\x95\xb0""""""\n\n        self.pre_atr_n = g_default_pre_atr_n\n        if \'pre_atr_n\' in kwargs:\n            # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8b\xe8\xb7\x8c\xe6\xad\xa2\xe6\x8d\x9f\xe5\x80\x8d\xe6\x95\xb0\n            self.pre_atr_n = kwargs[\'pre_atr_n\']\n            self.sell_type_extra = \'{}:pre_atr={}\'.format(self.__class__.__name__, self.pre_atr_n)\n\n    def support_direction(self):\n        """"""\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85n\xe5\x80\x8datr(\xe6\xad\xa2\xe6\x8d\x9f)\xe5\x9b\xa0\xe5\xad\x90\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value, ESupportDirection.DIRECTION_PUT.value]\n\n    def fit_day(self, today, orders):\n        """"""\n        \xe6\xad\xa2\xe6\x8d\x9fevent\xef\xbc\x9a\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9b\xb8\xe6\xaf\x94\xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a * \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe7\x9a\x84\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x96\xb9\xe5\x90\x91 > today.atr21 * pre_atr_n\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n\n        for order in orders:\n            if (today.pre_close - today.close) * order.expect_direction > today.atr21 * self.pre_atr_n:\n                # \xe5\x8f\xaa\xe8\xa6\x81\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xaf\x94\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xb7\xae\xe5\xa4\xa7\xe4\xba\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb7\xae\xe5\x80\xbc\xe5\xb0\xb1\xe6\xad\xa2\xe6\x8d\x9f\xe5\x8d\x96\xe5\x87\xba, \xe4\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe5\xae\x83\xe8\xae\xa1\xe7\xae\x97\xe5\xb7\xae\xe5\x80\xbc\xe6\x96\xb9\xe5\xbc\x8f\n                self.sell_tomorrow(order)\n'"
abupy/FactorSellBu/ABuFactorSellBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom enum import Enum\nfrom abc import ABCMeta, abstractmethod\n\nfrom ..CoreBu.ABuFixes import six\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..CoreBu.ABuBase import AbuParamBase\nfrom ..SlippageBu.ABuSlippageSellMean import AbuSlippageSellMean\nfrom ..TradeBu.ABuMLFeature import AbuMlFeature\nfrom ..UmpBu.ABuUmpManager import AbuUmpManager\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass ESupportDirection(Enum):\n    """"""\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe5\x9c\xa8support_direction\xe4\xb8\xad\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xe6\x95\xb0\xe5\x80\xbc\xe5\xae\x9a\xe4\xb9\x89""""""\n    DIRECTION_CAll = 1.0\n    DIRECTION_PUT = -1.0\n\n\nclass AbuFactorSellBase(six.with_metaclass(ABCMeta, AbuParamBase)):\n    """"""\n        \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x9f\xba\xe7\xb1\xbb\xef\xbc\x9a\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\x9f\xba\xe7\xb1\xbb\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9f\xba\xe7\xb1\xbb\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\n        \xe5\xbf\x85\xe9\xa1\xbb\xe6\xb7\xb7\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe6\xb6\xa8\xe8\xbf\x98\xe6\x98\xaf\xe4\xb9\xb0\xe8\xb7\x8c\xef\xbc\x8c\xe4\xb8\x94\xe5\x8f\xaa\xe8\x83\xbd\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\n        \xe5\x8f\xaf\xe4\xbb\xa5\xe5\x90\x8c\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe6\xb6\xa8\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91\n    """"""\n\n    def __init__(self, capital, kl_pd, combine_kl_pd, benchmark, **kwargs):\n        """"""\n        :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param combine_kl_pd:\xe5\x90\x88\xe5\xb9\xb6\xe4\xba\x86\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe5\xb9\xb4\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaf\xe6\x9c\x89\xe9\x80\x89\xe6\x8b\xa9\xe6\x80\xa7\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe5\xa4\xa7\xe7\x9b\x98\xe5\xaf\xb9\xe6\xaf\x94\xe7\xad\x89\xe5\x8a\x9f\xe8\x83\xbd\n        """"""\n\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\n        self.kl_pd = kl_pd\n        # \xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xe6\x9e\x84\xe5\xbb\xba\xe9\x9c\x80\xe8\xa6\x81\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe8\xa7\x81make_sell_order_ml_feature\xe4\xb8\xad\xe6\x9e\x84\xe9\x80\xa0\xe7\x89\xb9\xe5\xbe\x81\xe4\xbd\xbf\xe7\x94\xa8\n        self.combine_kl_pd = combine_kl_pd\n        # \xe8\xb5\x84\xe9\x87\x91\xe6\x83\x85\xe5\x86\xb5\xe6\x95\xb0\xe6\x8d\xae\n        self.capital = capital\n        # \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaf\xe6\x9c\x89\xe9\x80\x89\xe6\x8b\xa9\xe6\x80\xa7\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe5\xa4\xa7\xe7\x9b\x98\xe5\xaf\xb9\xe6\xaf\x94\xe7\xad\x89\xe5\x8a\x9f\xe8\x83\xbd\n        self.benchmark = benchmark\n\n        # \xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4AbuSlippageSellMean\n        self.slippage_class = kwargs.pop(\'slippage\', AbuSlippageSellMean)\n\n        # \xe6\x9e\x84\xe9\x80\xa0ump\xe5\xaf\xb9\xe5\xa4\x96\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe5\xaf\xb9\xe8\xb1\xa1UmpManager\n        self.ump_manger = AbuUmpManager(self)\n\n        # \xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe9\x80\x9a\xe8\xbf\x87_init_self\xe5\x8f\xaf\xe8\xa6\x86\xe7\x9b\x96\xe6\x9b\xb4\xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.sell_type_extra = \'{}\'.format(self.__class__.__name__)\n\n        # \xe5\xad\x90\xe7\xb1\xbb\xe7\xbb\xa7\xe7\xbb\xad\xe5\xae\x8c\xe6\x88\x90\xe8\x87\xaa\xe6\x9c\x89\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\n        self._init_self(**kwargs)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, slippage, kl_pd.info""""""\n        return \'{}: slippage:{}, \\nkl:\\n{}\'.format(self.__class__.__name__, self.slippage_class, self.kl_pd.info())\n\n    __repr__ = __str__\n\n    def read_fit_day(self, today, orders):\n        """"""\n        \xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6worker\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\xe5\x81\x9a\xe6\x97\xa5\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x90\x86\xe8\xa7\xa3\xe4\xb8\xba\xe7\x9b\x98\xe5\x89\x8d\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe5\x86\xb3\xe7\xad\x96\xe4\xba\x8b\xe4\xbb\xb6\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n        \xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe8\xb0\x83\xe7\x94\xa8\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84fit_day\xe5\x87\xbd\xe6\x95\xb0\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n         :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        :return: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\x99\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\xba\x8f\xe5\x8f\xb7\n        self.today_ind = int(today.key)\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\xbb\x98\xe8\xae\xa4\xe5\xbf\xbd\xe7\x95\xa5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        if self.today_ind >= self.kl_pd.shape[0] - 1:\n            return\n\n        """"""\n            \xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe6\x94\xaf\xe6\x8c\x81\xe6\xad\xa3\xe5\x90\x91\xef\xbc\x8c\xe5\x8f\x8d\xe5\x90\x91\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91\xe9\x83\xbd\xe6\x94\xaf\xe6\x8c\x81\xef\xbc\x8c\n            \xe9\x92\x88\xe5\xaf\xb9order\xe4\xb8\xad\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8cfilter\xe7\xad\x96\xe7\x95\xa5,\n            \xe6\xa0\xb9\xe6\x8d\xaeorder\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe5\xbd\x93\xe5\x89\x8d\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xaf\xe6\x8c\x81\xe8\x8c\x83\xe5\x9b\xb4\xe6\x9d\xa5\xe7\xad\x9b\xe9\x80\x89order\n        """"""\n        orders = list(filter(lambda order: order.expect_direction in self.support_direction(), orders))\n        return self.fit_day(today, orders)\n\n    def sell_tomorrow(self, order):\n        """"""\n        \xe6\x98\x8e\xe5\xa4\xa9\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe7\xaa\x81\xe7\xa0\xb4\xe7\xad\x96\xe7\x95\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\x91\xe5\x87\xba\xe4\xba\x86\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\n        \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\n        :param order\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        order.fit_sell_order(self.today_ind, self)\n\n    def sell_today(self, order):\n        """"""\n        \xe4\xbb\x8a\xe5\xa4\xa9\xe5\x8d\xb3\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\xb0\xe6\x8d\xae\xe7\xad\x89\xe5\x81\x9a\xe4\xb8\xbafit_day\xe4\xb8\xad\xe4\xbf\xa1\xe5\x8f\xb7\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x8c\n        \xe9\x80\x82\xe5\x90\x88\xe5\xa6\x82\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe9\x9d\x9e\xe6\x98\x8e\xe7\xa1\xae\xe4\xb8\x80\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\x96\xe8\x80\x85\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n        :param order\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        order.fit_sell_order(self.today_ind - 1, self)\n\n    @abstractmethod\n    def _init_self(self, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def fit_day(self, today, orders):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe4\xb8\xbb\xe8\xa6\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5""""""\n        pass\n\n    @abstractmethod\n    def support_direction(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xbe\xe8\xa7\x86\xe6\xb3\xa8\xe6\x98\x8e\xe8\x87\xaa\xe5\xb7\xb1\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x96\xb9\xe5\x90\x91""""""\n        pass\n\n    def make_sell_order(self, order, day_ind):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xef\xbc\x9a\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\n        \xe5\x86\xb3\xe7\xad\x96\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x98\xaf\xe5\x90\xa6\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\xa6\xe4\xb9\xa0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9e\xe6\x98\xaf\xe5\x90\xa6order\xe6\x88\x90\xe4\xba\xa4\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa2\xe5\x8d\x95\xe7\x94\x9f\xe6\x95\x88\n        :param order: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\n        :param day_ind: \xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :return:\n        """"""\n\n        # \xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90\n        ml_feature_dict = self.make_sell_order_ml_feature(day_ind)\n        # \xe5\x86\xb3\xe7\xad\x96\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x98\xaf\xe5\x90\xa6\xe6\x8b\xa6\xe6\x88\xaa\n        block = self.make_ump_block_decision(ml_feature_dict)\n        if block:\n            return False\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\x8d\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\xa6\xe4\xb9\xa0\xe6\x95\xb0\xe6\x8d\xae\n        if order.ml_features is None:\n            order.ml_features = ml_feature_dict\n        else:\n            order.ml_features.update(ml_feature_dict)\n        return True\n\n    # noinspection PyUnusedLocal\n    def make_ump_block_decision(self, ml_feature_dict):\n        """"""\n        \xe8\xbe\x93\xe5\x85\xa5\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe9\x80\x9a\xe8\xbf\x87ump\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe5\xaf\xb9\xe5\xa4\x96manager\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\n        \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x8b\xa6\xe6\x88\xaa\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe6\x94\xbe\xe8\xa1\x8c\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe3\x80\x82\xe5\xad\x90\xe7\xb1\xbb\xe5\x8f\xaf\xe5\xa4\x8d\xe5\x86\x99\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe7\xb1\xbb\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\xae\x9e\xe7\x8e\xb0\n        \xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe4\xbb\xbb\xe6\x84\x8fump\xe7\xbb\x84\xe5\x90\x88\xe6\x8b\xa6\xe6\x88\xaa\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe6\xaf\x94\xe4\xbe\x8b\xe9\x9c\x80\xe8\xa6\x81\xe7\xad\x89\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\xe7\xa1\xae\xe5\xae\x9aump\xe5\x85\xb7\xe4\xbd\x93\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\n        \xe4\xb8\x94\xe5\xaf\xb9\xe4\xba\x8e\xe5\xa4\x9a\xe7\xa7\x8d\xe7\xad\x96\xe7\x95\xa5\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\xac\xe8\xba\xab\xe5\xae\x9a\xe5\x88\xb6\xe9\x80\x82\xe5\x90\x88\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe7\x81\xb5\xe6\xb4\xbb\xe5\xba\xa6\n        :param ml_feature_dict: \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe5\x88\xbb\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81dict\n        :return:\n        """"""\n        return self.ump_manger.ump_block(ml_feature_dict)\n\n    def make_sell_order_ml_feature(self, day_ind):\n        """"""\n         \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xe6\x9e\x84\xe9\x80\x9a\xe8\xbf\x87AbuMlFeature\xe6\x9e\x84\xe5\xbb\xba\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84\xe5\x90\x84\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\n         :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n         :return:\n         """"""\n        return AbuMlFeature().make_feature_dict(self.kl_pd, self.combine_kl_pd, day_ind, buy_feature=False)\n\n    """"""TODO: \xe4\xbd\xbf\xe7\x94\xa8check support\xe6\x96\xb9\xe5\xbc\x8f\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81fit_week\xef\xbc\x8cfit_month\xef\xbc\x8c\xe4\xb8\x8a\xe5\xb1\x82\xe4\xb8\x8d\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8hasattr\xe5\x8e\xbb\xe5\x88\xa4\xe6\x96\xad""""""\n    # def fit_week(self, *args, **kwargs):\n    #     pass\n\n    # def fit_month(self, *args, **kwargs):\n    #     pass\n\n\nclass AbuFactorSellXD(AbuFactorSellBase):\n    """"""\xe4\xbb\xa5\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xba\xe9\x87\x8d\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8cxd\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8f\x82\xe6\x95\xb0\'\xe5\xa4\x9a\xe5\xb0\x91\xe5\xa4\xa9\'\xe5\xa6\x82\xe5\xb7\xb2\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe7\xbb\xa7\xe6\x89\xbf\xe4\xbd\xbf\xe7\x94\xa8 """"""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe5\x8c\x85\xe5\x90\xab: \xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0xd \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4""""""\n        # \xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0 xd\xef\xbc\x8c \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4\n        self.xd = kwargs[\'xd\']\n        # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.sell_type_extra = \'{}:{}\'.format(self.__class__.__name__, self.xd)\n\n    def read_fit_day(self, today, orders):\n        """"""\n        \xe8\xa6\x86\xe7\x9b\x96base\xe5\x87\xbd\xe6\x95\xb0, \xe4\xb8\xbafit_day\xe4\xb8\xad\xe5\x88\x87\xe7\x89\x87\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        :return: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe8\xbf\x99\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\xba\x8f\xe5\x8f\xb7\n        self.today_ind = int(today.key)\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\xbb\x98\xe8\xae\xa4\xe5\xbf\xbd\xe7\x95\xa5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        if self.today_ind >= self.kl_pd.shape[0] - 1:\n            return\n        orders = list(filter(lambda order: order.expect_direction in self.support_direction(), orders))\n\n        # \xe5\xae\x8c\xe6\x88\x90\xe4\xb8\xbafit_day\xe4\xb8\xad\xe5\x88\x87\xe7\x89\x87\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        self.xd_kl = self.kl_pd[self.today_ind - self.xd + 1:self.today_ind + 1]\n\n        return self.fit_day(today, orders)\n\n    def support_direction(self):\n        """"""raise NotImplementedError""""""\n        raise NotImplementedError(\'NotImplementedError support_direction\')\n\n    def fit_day(self, today, orders):\n        """"""raise NotImplementedError""""""\n        raise NotImplementedError(\'NotImplementedError fit_day\')\n'"
abupy/FactorSellBu/ABuFactorSellBreak.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorSellBase import AbuFactorSellBase, AbuFactorSellXD, ESupportDirection\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuFactorSellBreak(AbuFactorSellBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe5\x8c\x85\xe5\x90\xab: \xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0xd \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4""""""\n\n        # \xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0 xd\xef\xbc\x8c \xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9...\xe7\xaa\x81\xe7\xa0\xb4\n        self.xd = kwargs[\'xd\']\n        # \xe5\x9c\xa8\xe8\xbe\x93\xe5\x87\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84orders_pd\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\n        self.sell_type_extra = \'{}:{}\'.format(self.__class__.__name__, self.xd)\n\n    def support_direction(self):\n        """"""\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe6\xad\xa3\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value]\n\n    def fit_day(self, today, orders):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\x9c\xe4\xb8\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8d\x96\xe5\x87\xba\xe9\xa9\xb1\xe5\x8a\xa8event\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xbe\xe5\x88\xb0xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x99\xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\n        if today.close == self.kl_pd.close[self.today_ind - self.xd + 1:self.today_ind + 1].min():\n            for order in orders:\n                self.sell_tomorrow(order)\n\n\nclass AbuFactorSellXDBK(AbuFactorSellXD):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe7\xbb\xa7\xe6\x89\xbfAbuFactorBuyXD, \xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n\n    def support_direction(self):\n        """"""\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe6\xad\xa3\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value]\n\n    def fit_day(self, today, orders):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x91\xe4\xb8\x8b\xe7\xaa\x81\xe7\xa0\xb4\xe4\xbd\x9c\xe4\xb8\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8d\x96\xe5\x87\xba\xe9\xa9\xb1\xe5\x8a\xa8event\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xbe\xe5\x88\xb0xd\xe5\xa4\xa9\xe5\x86\x85\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x88\x99\xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\n        if today.close == self.xd_kl.close.min():\n            for order in orders:\n                self.sell_tomorrow(order)\n'"
abupy/FactorSellBu/ABuFactorSellDM.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe7\xad\x96\xe7\x95\xa5\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorSellBase import AbuFactorSellXD, ESupportDirection\nfrom ..IndicatorBu.ABuNDMa import calc_ma_from_prices\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuDoubleMaSell(AbuFactorSellXD):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x8d\x96\xe5\x87\xba\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90""""""\n\n    def _init_self(self, **kwargs):\n        """"""\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9afast: \xe5\x9d\x87\xe7\xba\xbf\xe5\xbf\xab\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa85\n            kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9aslow: \xe5\x9d\x87\xe7\xba\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa860\n        """"""\n\n        # TODO \xe9\x87\x8d\xe6\x9e\x84\xe4\xb8\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe9\x87\x8d\xe5\xa4\x8d\xe4\xbb\xa3\xe7\xa0\x81\xe6\x8a\xbd\xe5\x8f\x96\n        # \xe5\x9d\x87\xe7\xba\xbf\xe5\xbf\xab\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa85\xe5\xa4\xa9\xe5\x9d\x87\xe7\xba\xbf\n        self.ma_fast = kwargs.pop(\'fast\', 5)\n        # \xe5\x9d\x87\xe7\xba\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa860\xe5\xa4\xa9\xe5\x9d\x87\xe7\xba\xbf\n        self.ma_slow = kwargs.pop(\'slow\', 60)\n\n        if self.ma_fast >= self.ma_slow:\n            # \xe6\x85\xa2\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xe5\xbf\x85\xe9\xa1\xbb\xe5\xa4\xa7\xe4\xba\x8e\xe5\xbf\xab\xe7\xba\xbf\n            raise ValueError(\'ma_fast >= self.ma_slow !\')\n\n        # xd\xe5\x91\xa8\xe6\x9c\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9c\x80\xe8\xa6\x81\xe6\xaf\x94ma_slow\xe5\xa4\xa7\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe8\xae\xa1\xe7\xae\x97ma\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8b\xbf\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x92\x8c\xe6\x98\xa8\xe5\xa4\xa9\xe4\xb8\xa4\xe5\xa4\xa9\xe7\x9a\x84ma\xef\xbc\x8c\xe7\x94\xa8\xe6\x9d\xa5\xe5\x88\xa4\xe6\x96\xad\xe9\x87\x91\xe5\x8f\x89\xef\xbc\x8c\xe6\xad\xbb\xe5\x8f\x89\n        kwargs[\'xd\'] = self.ma_slow + 1\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xa5\xbdxd\xe5\x90\x8e\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9f\xba\xe7\xb1\xbb\xe9\x92\x88\xe5\xaf\xb9xd\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        super(AbuDoubleMaSell, self)._init_self(**kwargs)\n\n    def support_direction(self):\n        """"""\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe5\x9b\xa0\xe5\xad\x90\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value, ESupportDirection.DIRECTION_PUT.value]\n\n    def fit_day(self, today, orders):\n        """"""\n            \xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\n            call\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x9a\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8b\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\xbd\xa2\xe6\x88\x90\xe6\xad\xbb\xe5\x8f\x89\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n            put\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x9a \xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8a\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\x81\x9a\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n        """"""\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\xbf\xab\xe7\xba\xbf\n        fast_line = calc_ma_from_prices(self.xd_kl.close, self.ma_fast, min_periods=1)\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\x85\xa2\xe7\xba\xbf\n        slow_line = calc_ma_from_prices(self.xd_kl.close, self.ma_slow, min_periods=1)\n\n        if len(fast_line) >= 2 and len(slow_line) >= 2:\n            # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe5\xbf\xab\xe7\xba\xbf\xe5\x80\xbc\n            fast_today = fast_line[-1]\n            # \xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe5\xbf\xab\xe7\xba\xbf\xe5\x80\xbc\n            fast_yesterday = fast_line[-2]\n            # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x85\xa2\xe7\xba\xbf\xe5\x80\xbc\n            slow_today = slow_line[-1]\n            # \xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe6\x85\xa2\xe7\xba\xbf\xe5\x80\xbc\n            slow_yesterday = slow_line[-2]\n\n            for order in orders:\n                if order.expect_direction == 1 \\\n                        and fast_yesterday >= slow_yesterday and fast_today < slow_today:\n                    # call\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x9a\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8b\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xe7\xba\xbf\xe5\xbd\xa2\xe6\x88\x90\xe6\xad\xbb\xe5\x8f\x89\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n                    self.sell_tomorrow(order)\n                elif order.expect_direction == -1 \\\n                        and slow_yesterday >= fast_yesterday and fast_today > slow_today:\n                    # put\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x9a\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8a\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xe5\x81\x9a\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\n                    self.sell_tomorrow(order)\n'"
abupy/FactorSellBu/ABuFactorSellNDay.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9an\xe6\x97\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe7\xae\xa1\xe4\xbb\x80\xe4\xb9\x88\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8f\xaa\xe6\x8c\x81\xe6\x9c\x89N\xe5\xa4\xa9\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nfrom .ABuFactorSellBase import AbuFactorSellBase, ESupportDirection\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuFactorSellNDay(AbuFactorSellBase):\n    """"""n\xe6\x97\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe7\xae\xa1\xe4\xba\xa4\xe6\x98\x93\xe7\x8e\xb0\xe5\x9c\xa8\xe4\xbb\x80\xe4\xb9\x88\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8f\xaa\xe6\x8c\x81\xe6\x9c\x89N\xe5\xa4\xa9""""""\n\n    def _init_self(self, **kwargs):\n        """"""kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x85\xe5\x90\xab: \xe5\x8f\x82\xe6\x95\xb0sell_n\xef\xbc\x9a\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x8c\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41\xe5\xa4\xa9""""""\n        self.sell_n = kwargs.pop(\'sell_n\', 1)\n        self.is_sell_today = kwargs.pop(\'is_sell_today\', False)\n        self.sell_type_extra = \'{}:sell_n={}\'.format(self.__class__.__name__, self.sell_n)\n\n    def support_direction(self):\n        """"""\xe5\x9b\xa0\xe5\xad\x90\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\xb9\xe5\x90\x91""""""\n        return [ESupportDirection.DIRECTION_CAll.value, ESupportDirection.DIRECTION_PUT.value]\n\n    def fit_day(self, today, orders):\n        """"""\n        :param today: \xe5\xbd\x93\xe5\x89\x8d\xe9\xa9\xb1\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        :param orders: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n        for order in orders:\n            # \xe5\xb0\x86\xe5\x8d\x95\xe5\xad\x90\xe7\x9a\x84\xe6\x8c\x81\xe6\x9c\x89\xe5\xa4\xa9\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa2\x9e\xe5\x8a\xa0\n            order.keep_days += 1\n            if order.keep_days >= self.sell_n:\n                # \xe5\x8f\xaa\xe8\xa6\x81\xe8\xb6\x85\xe8\xbf\x87self.sell_n\xe5\x8d\xb3\xe5\x8d\x96\xe5\x87\xba\n                self.sell_today(order) if self.is_sell_today else self.sell_tomorrow(order)\n'"
abupy/FactorSellBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuFactorSellBase import AbuFactorSellBase, AbuFactorSellXD, ESupportDirection\nfrom .ABuFactorPreAtrNStop import AbuFactorPreAtrNStop\nfrom .ABuFactorAtrNStop import AbuFactorAtrNStop\nfrom .ABuFactorCloseAtrNStop import AbuFactorCloseAtrNStop\nfrom .ABuFactorSellBreak import AbuFactorSellBreak\nfrom .ABuFactorSellNDay import AbuFactorSellNDay\nfrom .ABuFactorSellDM import AbuDoubleMaSell\n\n# noinspection all\nfrom . import ABuFS as fs\n\n__all__ = [\n    'AbuFactorSellBase',\n    'AbuFactorSellXD',\n    'ESupportDirection',\n    'AbuFactorPreAtrNStop',\n    'AbuFactorAtrNStop',\n    'AbuFactorCloseAtrNStop',\n    'AbuFactorSellBreak',\n    'AbuFactorSellNDay',\n    'AbuDoubleMaSell',\n    'fs'\n]\n"""
abupy/IndicatorBu/ABuND.py,0,"b""from __future__ import absolute_import\n\nfrom . import ABuNDAtr as atr\nfrom . import ABuNDBoll as boll\nfrom . import ABuNDMa as ma\nfrom . import ABuNDMacd as macd\nfrom . import ABuNDRsi as rsi\n\n__all__ = [\n    'atr',\n    'boll',\n    'ma',\n    'macd',\n    'rsi'\n]\n"""
abupy/IndicatorBu/ABuNDAtr.py,36,"b'# -*- encoding:utf-8 -*-\n""""""\nATR\n\nATR\xe5\x8f\x88\xe7\xa7\xb0 Average true range\xe5\xb9\xb3\xe5\x9d\x87\xe7\x9c\x9f\xe5\xae\x9e\xe6\xb3\xa2\xe5\x8a\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe7\xae\x80\xe7\xa7\xb0ATR\xe6\x8c\x87\xe6\xa0\x87\xef\xbc\x8c\xe6\x98\xaf\xe7\x94\xb1J.Welles Wilder \xe5\x8f\x91\xe6\x98\x8e\xe7\x9a\x84\xef\xbc\x8cATR\xe6\x8c\x87\xe6\xa0\x87\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xe7\x94\xa8\xe6\x9d\xa5\xe8\xa1\xa1\xe9\x87\x8f\xe5\xb8\x82\xe5\x9c\xba\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x9a\x84\xe5\xbc\xba\xe7\x83\x88\xe5\xba\xa6\xef\xbc\x8c\n\xe5\x8d\xb3\xe4\xb8\xba\xe4\xba\x86\xe6\x98\xbe\xe7\xa4\xba\xe5\xb8\x82\xe5\x9c\xba\xe5\x8f\x98\xe5\x8c\x96\xe7\x8e\x87\xe7\x9a\x84\xe6\x8c\x87\xe6\xa0\x87\xe3\x80\x82\n\n\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\n1. TR=\xe2\x88\xa3\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7-\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe2\x88\xa3\xef\xbc\x8c\xe2\x88\xa3\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7-\xe6\x98\xa8\xe6\x94\xb6\xe2\x88\xa3\xef\xbc\x8c\xe2\x88\xa3\xe6\x98\xa8\xe6\x94\xb6-\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe2\x88\xa3\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n2. \xe7\x9c\x9f\xe5\xae\x9e\xe6\xb3\xa2\xe5\xb9\x85\xef\xbc\x88ATR\xef\xbc\x89= MA(TR,N)\xef\xbc\x88TR\xe7\x9a\x84N\xe6\x97\xa5\xe7\xae\x80\xe5\x8d\x95\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x89\n3. \xe5\xb8\xb8\xe7\x94\xa8\xe5\x8f\x82\xe6\x95\xb0N\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba14\xe6\x97\xa5\xe6\x88\x96\xe8\x80\x8521\xe6\x97\xa5\n\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom ..CoreBu.ABuPdHelper import pd_ewm_mean\nfrom ..UtilBu import ABuScalerUtil\nfrom .ABuNDBase import plot_from_order, g_calc_type, ECalcType\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnresolvedReferences\ndef _calc_atr_from_ta(high, low, close, time_period=14):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8talib\xe8\xae\xa1\xe7\xae\x97atr\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x8f\xe4\xbc\xa0talib.ATR\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: atr\xe7\x9a\x84N\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc14\xef\xbc\x8cint\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    import talib\n    if isinstance(high, pd.Series):\n        high = high.values\n    if isinstance(low, pd.Series):\n        low = low.values\n    if isinstance(close, pd.Series):\n        close = close.values\n\n    atr = talib.ATR(high, low, close, timeperiod=time_period)\n    return atr\n\n\ndef _calc_atr_from_pd(high, low, close, time_period=14):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87atr\xe5\x85\xac\xe5\xbc\x8f\xe6\x89\x8b\xe5\x8a\xa8\xe8\xae\xa1\xe7\xae\x97atr\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: atr\xe7\x9a\x84N\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc14\xef\xbc\x8cint\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if isinstance(close, pd.Series):\n        # shift(1)\xe6\x9e\x84\xe6\x88\x90\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n        pre_close = close.shift(1).values\n    else:\n        from scipy.ndimage.interpolation import shift\n        # \xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x9a\x82\xe6\x97\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.Series\xe8\xbf\x9b\xe8\xa1\x8cshift\n        pre_close = shift(close, 1)\n    pre_close[0] = pre_close[1]\n\n    if isinstance(high, pd.Series):\n        high = high.values\n    if isinstance(low, pd.Series):\n        low = low.values\n\n    # \xe2\x88\xa3\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7 - \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe2\x88\xa3\n    tr_hl = np.abs(high - low)\n    # \xe2\x88\xa3\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7 - \xe6\x98\xa8\xe6\x94\xb6\xe2\x88\xa3\n    tr_hc = np.abs(high - pre_close)\n    # \xe2\x88\xa3\xe6\x98\xa8\xe6\x94\xb6 - \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe2\x88\xa3\n    tr_cl = np.abs(pre_close - low)\n    # TR =\xe2\x88\xa3\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7 - \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe2\x88\xa3\xef\xbc\x8c\xe2\x88\xa3\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7 - \xe6\x98\xa8\xe6\x94\xb6\xe2\x88\xa3\xef\xbc\x8c\xe2\x88\xa3\xe6\x98\xa8\xe6\x94\xb6 - \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe2\x88\xa3\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    tr = np.maximum(np.maximum(tr_hl, tr_hc), tr_cl)\n    # \xef\xbc\x88ATR\xef\xbc\x89= MA(TR, N)\xef\xbc\x88TR\xe7\x9a\x84N\xe6\x97\xa5\xe7\xae\x80\xe5\x8d\x95\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x89, \xe8\xbf\x99\xe9\x87\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x8c\xe5\x85\xa8\xe6\x8c\x89\xe7\x85\xa7\xe6\xa0\x87\xe5\x87\x86\xe5\x85\xac\xe5\xbc\x8f\xe4\xbd\xbf\xe7\x94\xa8\xe7\xae\x80\xe5\x8d\x95\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86pd_ewm_mean\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\n    atr = pd_ewm_mean(pd.Series(tr), span=time_period, min_periods=1)\n    # \xe8\xbf\x94\xe5\x9b\x9eatr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    return atr.values\n\n""""""\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8ABuNDBase\xe4\xb8\xad\xe5\xb0\x9d\xe8\xaf\x95import talib\xe6\x9d\xa5\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f""""""\ncalc_atr = _calc_atr_from_pd if g_calc_type == ECalcType.E_FROM_PD else _calc_atr_from_ta\n\n\ndef atr14(high, low, close):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87high, low, close\xe8\xae\xa1\xe7\xae\x97atr14\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    atr = calc_atr(high, low, close, 14)\n    return atr\n\n\ndef atr21(high, low, close):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87high, low, close\xe8\xae\xa1\xe7\xae\x97atr21\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    atr = calc_atr(high, low, close, 21)\n    return atr\n\n\ndef atr14_min(high, low, close):\n    """"""\n    \xe7\xa1\xae\xe5\xae\x9a\xe5\xb8\xb8\xe6\x95\xb0\xe9\x98\x80\xe5\x80\xbc\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87high, low, close\xe8\xae\xa1\xe7\xae\x97atr14\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9catr14\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8catr14\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    _atr14 = atr14(high, low, close)\n    _atr14 = pd.Series(_atr14)\n    _atr14.fillna(method=\'bfill\', inplace=True)\n    _atr14 = _atr14.min()\n    return _atr14\n\n\ndef atr14_max(high, low, close):\n    """"""\n    \xe7\xa1\xae\xe5\xae\x9a\xe5\xb8\xb8\xe6\x95\xb0\xe9\x98\x80\xe5\x80\xbc\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87high, low, close\xe8\xae\xa1\xe7\xae\x97atr14\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9catr14\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8catr14\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    _atr14 = atr14(high, low, close)\n    _atr14 = pd.Series(_atr14)\n    _atr14.fillna(method=\'bfill\', inplace=True)\n    _atr14 = _atr14.max()\n    return _atr14\n\n\ndef atr21_min(high, low, close):\n    """"""\n    \xe7\xa1\xae\xe5\xae\x9a\xe5\xb8\xb8\xe6\x95\xb0\xe9\x98\x80\xe5\x80\xbc\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87high, low, close\xe8\xae\xa1\xe7\xae\x97atr21\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9catr21\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8catr21\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    _atr21 = atr21(high, low, close)\n    _atr21 = pd.Series(_atr21)\n    _atr21.fillna(method=\'bfill\', inplace=True)\n    _atr21 = _atr21.min()\n    return _atr21\n\n\ndef atr21_max(high, low, close):\n    """"""\n    \xe7\xa1\xae\xe5\xae\x9a\xe5\xb8\xb8\xe6\x95\xb0\xe9\x98\x80\xe5\x80\xbc\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87high, low, close\xe8\xae\xa1\xe7\xae\x97atr21\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9catr21\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :return: atr\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8catr21\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    _atr21 = atr21(high, low, close)\n    _atr21 = pd.Series(_atr21)\n    _atr21.fillna(method=\'bfill\', inplace=True)\n    _atr21 = _atr21.max()\n    return _atr21\n\n\ndef plot_atr_from_klpd(kl_pd, with_points=None, with_points_ext=None, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85plot_atr\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8catr\xe6\x9b\xb2\xe7\xba\xbf\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ctime_period, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_atr\n    """"""\n    plot_atr(kl_pd.high, kl_pd.low, kl_pd.close, kl_pd.index,\n             with_points=with_points, with_points_ext=with_points_ext, **kwargs)\n\n\ndef plot_atr_from_order(order, date_ext=120, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85ABuNDBase\xe4\xb8\xad\xe7\x9a\x84plot_from_order\xe4\xb8\x8e\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\x8a\xe6\xa0\x87\xe6\xb3\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\x82\xb9\xe4\xbd\x8d\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ctime_period, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_atr\n    """"""\n    return plot_from_order(plot_atr_from_klpd, order, date_ext, **kwargs)\n\n\ndef plot_atr(high, low, close, kl_index, with_points=None, with_points_ext=None, time_period=14):\n    """"""\n    \xe5\x88\x86\xe5\x88\xab\xe5\x9c\xa8\xe4\xb8\x8a\xe4\xb8\x8b\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84atr\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89with_points\xe7\x82\xb9\xe4\xbd\x8d\xe6\xa0\x87\xe6\xb3\xa8\xef\xbc\x8c\n    \xe5\x88\x99\xe5\x8f\xaa\xe7\x94\xbb\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xef\xbc\x8c\xe4\xb8\x94\xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\x80\xbc\xe7\xba\xa7\xe5\x88\xab\n    :param high: \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param low: \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param close: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param kl_index: pd.Index\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param time_period: atr\xe7\x9a\x84N\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc14\xef\xbc\x8cint\n    """"""\n    atr = calc_atr(high, low, close, time_period)\n\n    plt.figure(figsize=(14, 7))\n    if with_points is not None or with_points_ext is not None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\x87\xe5\x87\x86\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\x82\xb9\xef\xbc\x8c\xe5\xb0\xb1\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\n        p1 = plt.subplot(111)\n        p2 = p1\n        # \xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a, \xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\x80\xbc\xe7\xba\xa7\xe5\x88\xab\n        matrix = ABuScalerUtil.scaler_matrix([atr, close])\n        atr, close = matrix[matrix.columns[0]], matrix[matrix.columns[1]]\n\n        # with_points\xe5\x92\x8cwith_points_ext\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n        if with_points is not None:\n            p1.axvline(with_points, color=\'green\', linestyle=\'--\')\n\n        if with_points_ext is not None:\n            p1.axvline(with_points_ext, color=\'red\')\n    else:\n        # \xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xe9\x9d\xa2\n        p1 = plt.subplot(211)\n        p2 = plt.subplot(212)\n\n    p1.plot(kl_index, close, ""b-"", label=""close"")\n    p2.plot(kl_index, atr, ""r-."", label=""period={} atr"".format(time_period), lw=2)\n    p1.grid(True)\n    p1.legend()\n    p2.grid(True)\n    p2.legend()\n\n    plt.show()\n'"
abupy/IndicatorBu/ABuNDBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport logging\n\nimport pandas as pd\nfrom enum import Enum\n\nfrom ..UtilBu import ABuDateUtil\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass ECalcType(Enum):\n    """"""\n        \xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe6\x8a\x80\xe6\x9c\xaf\xe6\x96\xb9\xe5\xbc\x8f\xe7\xb1\xbb\n    """"""\n    """"""\xe4\xbd\xbf\xe7\x94\xa8talib\xe9\x80\x8f\xe4\xbc\xa0\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97""""""\n    E_FROM_TA = 0\n    """"""\xe4\xbd\xbf\xe7\x94\xa8pandas\xe7\xad\x89\xe5\xba\x93\xe5\xae\x9e\xe7\x8e\xb0\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97""""""\n    E_FROM_PD = 1\n\n\n# try:\n#     # \xe4\xb8\x8d\xe5\xbc\xba\xe5\x88\xb6\xe8\xa6\x81\xe6\xb1\x82talib\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe5\xb1\x80\xe9\x83\xa8\xe5\xbc\x95\xe7\x94\xa8\n#     # noinspection PyUnresolvedReferences\n#     import talib\n#     g_calc_type = ECalcType.E_FROM_TA\n# except ImportError:\n#     # \xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x89\xe8\xa3\x85talib\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8E_FROM_PD\n#     g_calc_type = ECalcType.E_FROM_PD\n""""""\xe5\xbd\xbb\xe5\xba\x95\xe4\xb8\x8d\xe7\x94\xa8talib\xef\xbc\x8c\xe5\xae\x8c\xe5\x85\xa8\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xb7\xb1\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x8c\x87\xe6\xa0\x87\xe7\xbb\x93\xe6\x9e\x9c""""""\ng_calc_type = ECalcType.E_FROM_PD\n\n\ndef plot_from_order(plot_nd_func, order, date_ext, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85\xe5\x9c\xa8\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe4\xb8\x8a\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93order\xe4\xbf\xa1\xe5\x8f\xb7\xe9\x80\x9a\xe7\x94\xa8\xe6\xb5\x81\xe7\xa8\x8b\n    :param plot_nd_func: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\xae\x9e\xe7\x8e\xb0\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbbcallable\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param kwargs: plot_nd_func\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_nd_func\n    """"""\n    if not callable(plot_nd_func):\n        # plot_nd_func\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xafcallable\n        raise TypeError(\'plot_nd_func must callable!!\')\n\n    if not isinstance(order, (pd.DataFrame, pd.Series)) and order.shape[0] > 0:\n        # order\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xafpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1 \xe4\xb8\x94 \xe5\x8d\x95\xe5\xad\x90\xe6\x95\xb0\xe9\x87\x8f\xe8\xa6\x81 > 0\n        raise TypeError(\'order must DataFrame here!!\')\n\n    is_df = isinstance(order, pd.DataFrame)\n\n    if is_df and order.shape[0] == 1:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8f\xaa\xe6\x9c\x891\xe8\xa1\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x88\x99\xe5\x8f\x98\xe6\x88\x90pd.Series\n        is_df = False\n        # \xe9\x80\x9a\xe8\xbf\x87iloc\xe5\x8d\xb3\xe5\x8f\x98\xe6\x88\x90pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n        # noinspection PyUnresolvedReferences\n        order = order.iloc[0]\n\n    def plot_from_series(p_order):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84symbol\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8adate_ext\xe5\xae\x8c\xe6\x88\x90\xe9\x80\x9a\xe8\xbf\x87ABuSymbolPd.make_kl_df\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n        \xe5\x9c\xa8\xe6\x88\x90\xe5\x8a\x9f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8plot_nd_func\xe5\xae\x8c\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\xbb\x98\xe5\x88\xb6\n        :param p_order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        # \xe7\xa1\xae\xe5\xae\x9a\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n        target_symbol = p_order[\'symbol\']\n        # \xe5\x8d\x95\xe5\xad\x90\xe9\x83\xbd\xe5\xbf\x85\xe9\xa1\xbb\xe6\x9c\x89\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\n        buy_index = pd.to_datetime(str(p_order[\'buy_date\']))\n        sell_index = None\n\n        start = ABuDateUtil.fmt_date(p_order[\'buy_date\'])\n        # \xe9\x80\x9a\xe8\xbf\x87date_ext\xe7\xa1\xae\xe5\xae\x9astart\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb9\xb0\xe4\xba\xba\xe5\x8d\x95\xe5\xad\x90\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8date_ext\xe5\xa4\xa9\n        start = ABuDateUtil.begin_date(date_ext, date_str=start, fix=False)\n        if p_order[\'sell_type\'] != \'keep\':\n            sell_index = pd.to_datetime(str(p_order[\'sell_date\']))\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe9\x80\x9a\xe8\xbf\x87sell_date\xef\xbc\x8cdate_ext\xe7\xa1\xae\xe5\xae\x9aend\xe6\x97\xb6\xe9\x97\xb4\n            end = ABuDateUtil.fmt_date(p_order[\'sell_date\'])\n            # -date_ext \xe5\x90\x91\xe5\x89\x8d\n            end = ABuDateUtil.begin_date(-date_ext, date_str=end, fix=False)\n        else:\n            end = None\n        from ..MarketBu import ABuSymbolPd\n        # \xe7\xbb\x84\xe7\xbb\x87\xe5\xa5\xbd\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe7\xa1\xae\xe5\xae\x9a\xe4\xba\x86\xe8\xaf\xb7\xe6\xb1\x82\xe8\x8c\x83\xe5\x9b\xb4\xe5\x90\x8e\xe5\xbc\x80\xe5\xa7\x8b\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n        kl_pd = ABuSymbolPd.make_kl_df(target_symbol, start=start, end=end)\n        if kl_pd is None or kl_pd.shape[0] == 0:\n            logging.debug(target_symbol + \': has net error in data\')\n            return\n        # \xe4\xbd\xbf\xe7\x94\xa8plot_nd_func\xe5\xae\x8c\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\xbb\x98\xe5\x88\xb6\n        return plot_nd_func(kl_pd, with_points=buy_index, with_points_ext=sell_index, **kwargs)\n\n    if not is_df:\n        return plot_from_series(order)\n    else:\n        # \xe5\xa4\x9a\xe4\xb8\xaaorder, apply\xe8\xbf\xad\xe4\xbb\xa3\xe6\x89\xa7\xe8\xa1\x8cplot_from_series\n        order = order[order[\'result\'] != 0]\n        return order.apply(plot_from_series, axis=1)\n'"
abupy/IndicatorBu/ABuNDBoll.py,4,"b'# -*- encoding:utf-8 -*-\n\n""""""\n\xe8\x82\xa1\xe4\xbb\xb7\xe7\x9a\x84\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\xe5\x8f\x8a\xe5\x85\xb6\xe4\xbf\xa1\xe8\xb5\x96\xe5\x8c\xba\xe9\x97\xb4\xef\xbc\x8c\xe4\xbb\x8e\xe8\x80\x8c\xe7\xa1\xae\xe5\xae\x9a\xe8\x82\xa1\xe4\xbb\xb7\xe7\x9a\x84\xe6\xb3\xa2\xe5\x8a\xa8\xe8\x8c\x83\xe5\x9b\xb4\xe5\x8f\x8a\xe6\x9c\xaa\xe6\x9d\xa5\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\x88\xa9\xe7\x94\xa8\xe6\xb3\xa2\xe5\xb8\xa6\xe6\x98\xbe\xe7\xa4\xba\xe8\x82\xa1\xe4\xbb\xb7\xe7\x9a\x84\xe5\xae\x89\xe5\x85\xa8\xe9\xab\x98\xe4\xbd\x8e\xe4\xbb\xb7\xe4\xbd\x8d\xef\xbc\x8c\xe5\x9b\xa0\xe8\x80\x8c\xe4\xb9\x9f\xe8\xa2\xab\xe7\xa7\xb0\xe4\xb8\xba\xe5\xb8\x83\xe6\x9e\x97\xe5\xb8\xa6\xe3\x80\x82\n\xe5\x85\xb6\xe4\xb8\x8a\xe4\xb8\x8b\xe9\x99\x90\xe8\x8c\x83\xe5\x9b\xb4\xe4\xb8\x8d\xe5\x9b\xba\xe5\xae\x9a\xef\xbc\x8c\xe9\x9a\x8f\xe8\x82\xa1\xe4\xbb\xb7\xe7\x9a\x84\xe6\xbb\x9a\xe5\x8a\xa8\xe8\x80\x8c\xe5\x8f\x98\xe5\x8c\x96\xe3\x80\x82\xe5\xb8\x83\xe6\x9e\x97\xe6\x8c\x87\xe6\xa0\x87\xe5\x92\x8c\xe9\xba\xa6\xe5\x85\x8b\xe6\x8c\x87\xe6\xa0\x87MIKE\xe4\xb8\x80\xe6\xa0\xb7\xe5\x90\x8c\xe5\xb1\x9e\xe8\xb7\xaf\xe5\xbe\x84\xe6\x8c\x87\xe6\xa0\x87\xef\xbc\x8c\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb3\xa2\xe5\x8a\xa8\xe5\x9c\xa8\xe4\xb8\x8a\xe9\x99\x90\xe5\x92\x8c\xe4\xb8\x8b\xe9\x99\x90\xe7\x9a\x84\xe5\x8c\xba\xe9\x97\xb4\xe4\xb9\x8b\xe5\x86\x85\xef\xbc\x8c\n\xe8\xbf\x99\xe6\x9d\xa1\xe5\xb8\xa6\xe7\x8a\xb6\xe5\x8c\xba\xe7\x9a\x84\xe5\xae\xbd\xe7\xaa\x84\xef\xbc\x8c\xe9\x9a\x8f\xe7\x9d\x80\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb3\xa2\xe5\x8a\xa8\xe5\xb9\x85\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xe8\x80\x8c\xe5\x8f\x98\xe5\x8c\x96\xef\xbc\x8c\xe8\x82\xa1\xe4\xbb\xb7\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe5\x8a\xa0\xe5\xa4\xa7\xe6\x97\xb6\xef\xbc\x8c\xe5\xb8\xa6\xe7\x8a\xb6\xe5\x8c\xba\xe5\x8f\x98\xe5\xae\xbd\xef\xbc\x8c\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe7\x8b\xad\xe5\xb0\x8f\xe7\x9b\x98\xe6\x95\xb4\xe6\x97\xb6\xef\xbc\x8c\xe5\xb8\xa6\xe7\x8a\xb6\xe5\x8c\xba\xe5\x88\x99\xe5\x8f\x98\xe7\xaa\x84\n\n\xe8\xae\xa1\xe7\xae\x97\xe5\x85\xac\xe5\xbc\x8f\n\xe4\xb8\xad\xe8\xbd\xa8\xe7\xba\xbf=N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\n\xe4\xb8\x8a\xe8\xbd\xa8\xe7\xba\xbf=\xe4\xb8\xad\xe8\xbd\xa8\xe7\xba\xbf+nb_dev * N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n\xe4\xb8\x8b\xe8\xbd\xa8\xe7\xba\xbf=\xe4\xb8\xad\xe8\xbd\xa8\xe7\xba\xbf\xef\xbc\x8dnb_dev * N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n\xef\xbc\x88nb_dev\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe6\xa0\xb9\xe6\x8d\xae\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe7\x89\xb9\xe6\x80\xa7\xe6\x9d\xa5\xe5\x81\x9a\xe7\x9b\xb8\xe5\xba\x94\xe7\x9a\x84\xe8\xb0\x83\xe6\x95\xb4\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe9\xbb\x98\xe4\xb8\xba2\xef\xbc\x89\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom .ABuNDBase import plot_from_order, g_calc_type, ECalcType\nfrom ..CoreBu.ABuPdHelper import pd_rolling_mean, pd_rolling_std\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnresolvedReferences\ndef _calc_boll_from_ta(prices, time_period=20, nb_dev=2):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8talib\xe8\xae\xa1\xe7\xae\x97boll, \xe5\x8d\xb3\xe9\x80\x8f\xe4\xbc\xa0talib.BBANDS\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: boll\xe7\x9a\x84N\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc20\xef\xbc\x8cint\n    :param nb_dev: boll\xe7\x9a\x84nb_dev\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc2\xef\xbc\x8cint\n    :return: tuple(upper, middle, lower)\n    """"""\n    import talib\n    if isinstance(prices, pd.Series):\n        prices = prices.values\n\n    upper, middle, lower = talib.BBANDS(\n        prices,\n        timeperiod=time_period,\n        nbdevup=nb_dev,\n        nbdevdn=nb_dev,\n        matype=0)\n\n    return upper, middle, lower\n\n\ndef _calc_boll_from_pd(prices, time_period=20, nb_dev=2):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87boll\xe5\x85\xac\xe5\xbc\x8f\xe6\x89\x8b\xe5\x8a\xa8\xe8\xae\xa1\xe7\xae\x97boll\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: boll\xe7\x9a\x84N\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc20\xef\xbc\x8cint\n    :param nb_dev: boll\xe7\x9a\x84nb_dev\xe5\x80\xbc\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc2\xef\xbc\x8cint\n    :return: tuple(upper, middle, lower)\n    """"""\n    # \xe4\xb8\xad\xe8\xbd\xa8\xe7\xba\xbf = N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\n    middle = pd_rolling_mean(prices, window=time_period, min_periods=time_period)\n    # N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n    n_std = pd_rolling_std(prices, window=20, center=False)\n    # \xe4\xb8\x8a\xe8\xbd\xa8\xe7\xba\xbf=\xe4\xb8\xad\xe8\xbd\xa8\xe7\xba\xbf+nb_dev * N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n    upper = middle + nb_dev * n_std\n    # \xe4\xb8\x8b\xe8\xbd\xa8\xe7\xba\xbf = \xe4\xb8\xad\xe8\xbd\xa8\xe7\xba\xbf\xef\xbc\x8dnb_dev * N\xe6\x97\xa5\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe6\xa0\x87\xe5\x87\x86\xe5\xb7\xae\n    lower = middle - nb_dev * n_std\n\n    # noinspection PyUnresolvedReferences\n    return upper.values, middle.values, lower.values\n\n\n""""""\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8ABuNDBase\xe4\xb8\xad\xe5\xb0\x9d\xe8\xaf\x95import talib\xe6\x9d\xa5\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f, \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\x8f\xaa\xe5\xba\x94\xe8\xaf\xa5\xe4\xbd\xbf\xe7\x94\xa8calc_boll""""""\ncalc_boll = _calc_boll_from_pd if g_calc_type == ECalcType.E_FROM_PD else _calc_boll_from_ta\n\n\ndef plot_boll_from_klpd(kl_pd, with_points=None, with_points_ext=None, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85plot_boll\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8cboll\xef\xbc\x88upper, middle, lower\xef\xbc\x89\xe6\x9b\xb2\xe7\xba\xbf\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cime_period, nb_dev, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_boll\n    """"""\n    plot_boll(kl_pd.close, kl_pd.index, with_points=with_points, with_points_ext=with_points_ext, **kwargs)\n\n\ndef plot_boll_from_order(order, date_ext=120, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85ABuNDBase\xe4\xb8\xad\xe7\x9a\x84plot_from_order\xe4\xb8\x8e\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\x8a\xe6\xa0\x87\xe6\xb3\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\x82\xb9\xe4\xbd\x8d\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cime_period, nb_dev, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_boll\n    """"""\n    return plot_from_order(plot_boll_from_klpd, order, date_ext, **kwargs)\n\n\ndef plot_boll(prices, kl_index, with_points=None, with_points_ext=None, time_period=20, nb_dev=2):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84boll\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89with_points\xe7\x82\xb9\xe4\xbd\x8d\xe6\xa0\x87\xe6\xb3\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param kl_index: pd.Index\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param time_period: \xe8\xae\xa1\xe7\xae\x97boll\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84n\xe6\x97\xa5\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa420\n    :param nb_dev: \xe8\xae\xa1\xe7\xae\x97boll\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84nb_dev\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa42\n    :return:\n    """"""\n    upper, middle, lower = np.array(calc_boll(prices, time_period, nb_dev))\n\n    plt.figure(figsize=[14, 7])\n\n    plt.plot(kl_index, prices, label=\'close price\')\n    plt.plot(kl_index, upper, label=\'upper\')\n    plt.plot(kl_index, middle, label=\'middle\')\n    plt.plot(kl_index, lower, label=\'lower\')\n\n    # with_points\xe5\x92\x8cwith_points_ext\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n    if with_points is not None:\n        plt.axvline(with_points, color=\'green\', linestyle=\'--\')\n\n    if with_points_ext is not None:\n        plt.axvline(with_points_ext, color=\'red\')\n\n    plt.grid(True)\n    plt.legend(loc=\'best\')\n    plt.show()\n'"
abupy/IndicatorBu/ABuNDMa.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8cMoving Average\xef\xbc\x8c\xe7\xae\x80\xe7\xa7\xb0MA\xef\xbc\x8c\xe5\x8e\x9f\xe6\x9c\xac\xe7\x9a\x84\xe6\x84\x8f\xe6\x80\x9d\xe6\x98\xaf\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\x86\xe5\x85\xb6\xe5\x88\xb6\xe4\xbd\x9c\xe6\x88\x90\xe7\xba\xbf\xe5\xbd\xa2\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x80\xe8\x88\xac\xe7\xa7\xb0\xe4\xb9\x8b\xe4\xb8\xba\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe7\xae\x80\xe7\xa7\xb0\xe5\x9d\x87\xe7\xba\xbf\xe3\x80\x82\n    \xe5\xae\x83\xe6\x98\xaf\xe5\xb0\x86\xe6\x9f\x90\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe4\xb9\x8b\xe5\x92\x8c\xe9\x99\xa4\xe4\xbb\xa5\xe8\xaf\xa5\xe5\x91\xa8\xe6\x9c\x9f\xe3\x80\x82 \xe6\xaf\x94\xe5\xa6\x82\xe6\x97\xa5\xe7\xba\xbfMA5\xe6\x8c\x875\xe5\xa4\xa9\xe5\x86\x85\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe9\x99\xa4\xe4\xbb\xa55 \xe3\x80\x82\n    \xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xe6\x98\xaf\xe7\x94\xb1\xe8\x91\x97\xe5\x90\x8d\xe7\x9a\x84\xe7\xbe\x8e\xe5\x9b\xbd\xe6\x8a\x95\xe8\xb5\x84\xe4\xb8\x93\xe5\xae\xb6Joseph E.Granville\xef\xbc\x88\xe8\x91\x9b\xe5\x85\xb0\xe7\xa2\xa7\xef\xbc\x8c\xe5\x8f\x88\xe8\xaf\x91\xe4\xb8\xba\xe6\xa0\xbc\xe5\x85\xb0\xe5\xa8\x81\xe5\xb0\x94\xef\xbc\x89\xe4\xba\x8e20\xe4\xb8\x96\xe7\xba\xaa\xe4\xb8\xad\xe6\x9c\x9f\xe6\x8f\x90\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe3\x80\x82\n    \xe5\x9d\x87\xe7\xba\xbf\xe7\x90\x86\xe8\xae\xba\xe6\x98\xaf\xe5\xbd\x93\xe4\xbb\x8a\xe5\xba\x94\xe7\x94\xa8\xe6\x9c\x80\xe6\x99\xae\xe9\x81\x8d\xe7\x9a\x84\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe4\xb9\x8b\xe4\xb8\x80\xef\xbc\x8c\xe5\xae\x83\xe5\xb8\xae\xe5\x8a\xa9\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe7\xa1\xae\xe8\xae\xa4\xe7\x8e\xb0\xe6\x9c\x89\xe8\xb6\x8b\xe5\x8a\xbf\xe3\x80\x81\xe5\x88\xa4\xe6\x96\xad\xe5\xb0\x86\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe3\x80\x81\xe5\x8f\x91\xe7\x8e\xb0\xe8\xbf\x87\xe5\xba\xa6\xe5\xbb\xb6\xe7\x94\x9f\xe5\x8d\xb3\xe5\xb0\x86\xe5\x8f\x8d\xe8\xbd\xac\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\n""""""\n\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nfrom collections import Iterable\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom enum import Enum\n\nfrom .ABuNDBase import plot_from_order, g_calc_type, ECalcType\nfrom ..CoreBu.ABuPdHelper import pd_rolling_mean, pd_ewm_mean\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu.ABuDTUtil import catch_error\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass EMACalcType(Enum):\n    """"""\xe8\xae\xa1\xe7\xae\x97\xe7\xa7\xbb\xe5\x8a\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95""""""\n    """"""\xe7\xae\x80\xe5\x8d\x95\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf""""""\n    E_MA_MA = 0\n    """"""\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf""""""\n    E_MA_EMA = 1\n\n\n# noinspection PyUnresolvedReferences\ndef _calc_ma_from_ta(prices, time_period=10, from_calc=EMACalcType.E_MA_MA):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8talib\xe8\xae\xa1\xe7\xae\x97ma\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x8f\xe4\xbc\xa0talib.MA or talib.EMA\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: \xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\x9a\x84N\xe5\x80\xbc\xef\xbc\x8cint\n    :param from_calc: EMACalcType enum\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n\n    import talib\n    if isinstance(prices, pd.Series):\n        prices = prices.values\n\n    if from_calc == EMACalcType.E_MA_MA:\n        ma = talib.MA(prices, timeperiod=time_period)\n    else:\n        ma = talib.EMA(prices, timeperiod=time_period)\n    return ma\n\n\ndef _calc_ma_from_pd(prices, time_period=10, from_calc=EMACalcType.E_MA_MA):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87pandas\xe8\xae\xa1\xe7\xae\x97ma\xe6\x88\x96\xe8\x80\x85ema\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: \xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\x9a\x84N\xe5\x80\xbc\xef\xbc\x8cint\n    :param from_calc: EMACalcType enum\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n\n    if isinstance(prices, pd.Series):\n        prices = prices.values\n\n    if from_calc == EMACalcType.E_MA_MA:\n        ma = pd_rolling_mean(prices, window=time_period, min_periods=time_period)\n    else:\n        ma = pd_ewm_mean(prices, span=time_period, min_periods=time_period)\n    return ma\n\n\ndef calc_ma_from_prices(prices, time_period=10, min_periods=None, from_calc=EMACalcType.E_MA_MA):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87pandas\xe8\xae\xa1\xe7\xae\x97ma\xe6\x88\x96\xe8\x80\x85ema, \xe6\xb7\xbb\xe5\x8a\xa0min_periods\xe5\x8f\x82\xe6\x95\xb0\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: \xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\x9a\x84N\xe5\x80\xbc\xef\xbc\x8cint\n    :param min_periods: int\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8time_period\n    :param from_calc: EMACalcType enum\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n\n    if isinstance(prices, pd.Series):\n        prices = prices.values\n\n    min_periods = time_period if min_periods is None else min_periods\n    if from_calc == EMACalcType.E_MA_MA:\n        ma = pd_rolling_mean(prices, window=time_period, min_periods=min_periods)\n    else:\n        ma = pd_ewm_mean(prices, span=time_period, min_periods=min_periods)\n    return ma\n\n\n""""""\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8ABuNDBase\xe4\xb8\xad\xe5\xb0\x9d\xe8\xaf\x95import talib\xe6\x9d\xa5\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f, \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\x8f\xaa\xe5\xba\x94\xe8\xaf\xa5\xe4\xbd\xbf\xe7\x94\xa8calc_ma""""""\ncalc_ma = _calc_ma_from_pd if g_calc_type == ECalcType.E_FROM_PD else _calc_ma_from_ta\n\n\ndef plot_ma_from_order(order, date_ext=120, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85ABuNDBase\xe4\xb8\xad\xe7\x9a\x84plot_from_order\xe4\xb8\x8e\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\x8a\xe6\xa0\x87\xe6\xb3\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\x82\xb9\xe4\xbd\x8d\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ctime_period\xef\xbc\x8cfrom_calc, with_price\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_ma\n    """"""\n    return plot_from_order(plot_ma_from_klpd, order, date_ext, **kwargs)\n\n\ndef plot_ma_from_klpd(kl_pd, with_points=None, with_points_ext=None, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85plot_ma\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xa4\x9a\xe6\x9d\xa1\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ctime_period\xef\xbc\x8cfrom_calc, with_price\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_ma\n    """"""\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x83\xa8\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8cpop\xe7\x9a\x84default\xe4\xb8\xba[30, 60, 90]\n    time_period = kwargs.pop(\'time_period\', [30, 60, 90])\n    plot_ma(kl_pd.close, kl_pd.index, time_period, with_points=with_points,\n            with_points_ext=with_points_ext)\n\n\ndef plot_ma(prices, kl_index, time_period, from_calc=EMACalcType.E_MA_MA,\n            with_points=None, with_points_ext=None, with_price=True):\n    """"""\n    \xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xa4\x9a\xe6\x9d\xa1\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89with_points\xe7\x82\xb9\xe4\xbd\x8d\xe6\xa0\x87\xe6\xb3\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param kl_index: pd.Index\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param time_period: \xe6\xb3\xa8\xe6\x84\x8f\xe6\x98\xafIterable\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb9\x9f\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82[10]\xe5\x8c\x85\xe8\xa3\xb9\n    :param from_calc: EMACalcType enum\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe7\xae\x80\xe5\x8d\x95\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param with_price:  \xe5\xb0\x86\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x80\xe8\xb5\xb7\xe7\xbb\x98\xe5\x88\xb6\n    :return:\n    """"""\n    # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n    if not isinstance(time_period, Iterable) or isinstance(time_period, six.string_types):\n        raise TypeError(\'MA CALC time_period MUST PASS Iterable!!!\')\n\n    calc_type_func = calc_ma\n    # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xae\xa1\xe7\xae\x97\xe5\xa4\x9a\xe6\x9d\xa1\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8from_calc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xa1\xe7\xae\x97\n    ma_array = [calc_type_func(prices, period, from_calc) for period in time_period]\n\n    plt.figure(figsize=[14, 7])\n\n    for ind, ma in enumerate(ma_array):\n        # ind\xe7\x9a\x84\xe4\xbd\x9c\xe7\x94\xa8\xe6\x98\xaf\xe7\xb4\xa2\xe5\xbc\x95\xe5\x9c\xa8\xe5\x8e\x9f\xe5\xa7\x8btime_period\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94label\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\n        # noinspection PyUnresolvedReferences\n        plt.plot(kl_index, ma, label=\'ma {}\'.format(time_period[ind]))\n\n    if with_price:\n        plt.plot(kl_index, prices, label=\'prices\')\n\n    @catch_error(return_val=None, log=False)\n    def plot_with_point(points, co, cc):\n        """"""\n        \xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\x86\xe7\x82\xb9\xef\xbc\x8b\xe7\xab\x96\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe6\xb3\xa8\n        :param points: \xe7\x82\xb9\xe4\xbd\x8d\xe5\x9d\x90\xe6\xa0\x87\xe5\xba\x8f\xe5\x88\x97\n        :param co: \xe7\x82\xb9\xe9\xa2\x9c\xe8\x89\xb2 eg. \'go\' \'ro\'\n        :param cc: markeredgecolor\xe5\x92\x8c\xe7\xab\x96\xe7\xba\xbfaxvline\xe9\xa2\x9c\xe8\x89\xb2 eg. \'green\' \'red\'\n        """"""\n        v_index_num = kl_index.tolist().index(points)\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89ma\xe7\xba\xbf\xef\xbc\x8cy\xe7\x82\xb9\xe5\x81\x9a\xe7\x9b\xae\xe6\xa0\x87\xe7\x94\xbb\xe5\x9c\xa8\xe7\xac\xac\xe4\xb8\x80\xe6\xa0\xb9ma\xe7\xba\xbf\xe4\xb8\x8a\xe5\x90\xa6\xe5\x88\x99\xe7\x94\xbb\xe5\x9c\xa8\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8a\xe9\x9d\xa2\n        y_array = ma_array[0] if len(ma_array) > 0 else prices\n        plt.plot(points, y_array[v_index_num], co, markersize=12, markeredgewidth=3.0,\n                 markerfacecolor=\'None\', markeredgecolor=cc)\n        plt.axvline(points, color=cc)\n\n    # with_points\xe5\x92\x8cwith_points_ext\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n    if with_points is not None:\n        # plt.axvline(with_points, color=\'green\', linestyle=\'--\')\n        plot_with_point(with_points, \'go\', \'green\')\n\n    if with_points_ext is not None:\n        # plt.axvline(with_points_ext, color=\'red\')\n        plot_with_point(with_points_ext, \'ro\', \'red\')\n\n    plt.grid(True)\n    plt.legend(loc=\'best\')\n    plt.show()\n'"
abupy/IndicatorBu/ABuNDMacd.py,5,"b'# -*- encoding:utf-8 -*-\n\n""""""\nMACD\n\nMACD\xe7\xa7\xb0\xe4\xb8\xba\xe6\x8c\x87\xe6\x95\xb0\xe5\xb9\xb3\xe6\xbb\x91\xe5\xbc\x82\xe5\x8a\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe6\x98\xaf\xe4\xbb\x8e\xe5\x8f\x8c\xe6\x8c\x87\xe6\x95\xb0\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xe5\x8f\x91\xe5\xb1\x95\xe8\x80\x8c\xe6\x9d\xa5\xe7\x9a\x84\xef\xbc\x8c\xe7\x94\xb1\xe5\xbf\xab\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x88EMA12\xef\xbc\x89\xe5\x87\x8f\xe5\x8e\xbb\xe6\x85\xa2\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x88EMA26\xef\xbc\x89\n\xe5\xbe\x97\xe5\x88\xb0DIF\xef\xbc\x8c\xe5\x86\x8d\xe7\x94\xa8DIF - (\xe5\xbf\xab\xe7\xba\xbf-\xe6\x85\xa2\xe7\xba\xbf\xe7\x9a\x849\xe6\x97\xa5\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbfDEA\xef\xbc\x89\xe5\xbe\x97\xe5\x88\xb0MACD\xe6\x9f\xb1\xe3\x80\x82MACD\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89\xe5\x92\x8c\xe5\x8f\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xe5\x9f\xba\xe6\x9c\xac\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe5\x8d\xb3\xe7\x94\xb1\xe5\xbf\xab\xe3\x80\x81\xe6\x85\xa2\xe5\x9d\x87\xe7\xba\xbf\xe7\x9a\x84\xe7\xa6\xbb\xe6\x95\xa3\xe3\x80\x81\n\xe8\x81\x9a\xe5\x90\x88\xe8\xa1\xa8\xe5\xbe\x81\xe5\xbd\x93\xe5\x89\x8d\xe7\x9a\x84\xe5\xa4\x9a\xe7\xa9\xba\xe7\x8a\xb6\xe6\x80\x81\xe5\x92\x8c\xe8\x82\xa1\xe4\xbb\xb7\xe5\x8f\xaf\xe8\x83\xbd\xe7\x9a\x84\xe5\x8f\x91\xe5\xb1\x95\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf\xef\xbc\x8c\xe4\xbd\x86\xe9\x98\x85\xe8\xaf\xbb\xe8\xb5\xb7\xe6\x9d\xa5\xe6\x9b\xb4\xe6\x96\xb9\xe4\xbe\xbf\xe3\x80\x82\xe5\xbd\x93MACD\xe4\xbb\x8e\xe8\xb4\x9f\xe6\x95\xb0\xe8\xbd\xac\xe5\x90\x91\xe6\xad\xa3\xe6\x95\xb0\xef\xbc\x8c\xe6\x98\xaf\xe4\xb9\xb0\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xe3\x80\x82\xe5\xbd\x93MACD\xe4\xbb\x8e\xe6\xad\xa3\xe6\x95\xb0\xe8\xbd\xac\xe5\x90\x91\xe8\xb4\x9f\xe6\x95\xb0\xef\xbc\x8c\n\xe6\x98\xaf\xe5\x8d\x96\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xe3\x80\x82\xe5\xbd\x93MACD\xe4\xbb\xa5\xe5\xa4\xa7\xe8\xa7\x92\xe5\xba\xa6\xe5\x8f\x98\xe5\x8c\x96\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe5\xbf\xab\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xe5\x92\x8c\xe6\x85\xa2\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xe7\x9a\x84\xe5\xb7\xae\xe8\xb7\x9d\xe9\x9d\x9e\xe5\xb8\xb8\xe8\xbf\x85\xe9\x80\x9f\xe7\x9a\x84\xe6\x8b\x89\xe5\xbc\x80\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe5\xa4\xa7\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe8\xbd\xac\xe5\x8f\x98\xe3\x80\x82\n\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom .ABuNDBase import plot_from_order, g_calc_type, ECalcType\nfrom ..UtilBu import ABuScalerUtil\nfrom ..UtilBu.ABuDTUtil import catch_error\nfrom ..CoreBu.ABuPdHelper import pd_ewm_mean\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnresolvedReferences\ndef _calc_macd_from_ta(price, fast_period=12, slow_period=26, signal_period=9):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8talib\xe8\xae\xa1\xe7\xae\x97macd, \xe5\x8d\xb3\xe9\x80\x8f\xe4\xbc\xa0talib.MACD\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\n    :param price: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param fast_period: \xe5\xbf\xab\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\xe7\xba\xbf, \xe9\xbb\x98\xe8\xae\xa412\xef\xbc\x8c\xe5\x8d\xb3EMA12\n    :param slow_period: \xe6\x85\xa2\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf, \xe9\xbb\x98\xe8\xae\xa426\xef\xbc\x8c\xe5\x8d\xb3EMA26\n    :param signal_period: dif\xe7\x9a\x84\xe6\x8c\x87\xe6\x95\xb0\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa49\n    """"""\n\n    import talib\n    if isinstance(price, pd.Series):\n        price = price.values\n\n    dif, dea, bar = talib.MACD(price,\n                               fastperiod=fast_period,\n                               slowperiod=slow_period,\n                               signalperiod=signal_period)\n    return dif, dea, bar\n\n\ndef _calc_macd_from_pd(price, fast_period=12, slow_period=26, signal_period=9):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87macd\xe5\x85\xac\xe5\xbc\x8f\xe6\x89\x8b\xe5\x8a\xa8\xe8\xae\xa1\xe7\xae\x97macd\n    :param price: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param fast_period: \xe5\xbf\xab\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\xe7\xba\xbf, \xe9\xbb\x98\xe8\xae\xa412\xef\xbc\x8c\xe5\x8d\xb3EMA12\n    :param slow_period: \xe6\x85\xa2\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf, \xe9\xbb\x98\xe8\xae\xa426\xef\xbc\x8c\xe5\x8d\xb3EMA26\n    :param signal_period: dif\xe7\x9a\x84\xe6\x8c\x87\xe6\x95\xb0\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa49\n    """"""\n\n    if isinstance(price, pd.Series):\n        price = price.values\n\n    # \xe5\xbf\xab\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\n    ewma_fast = pd_ewm_mean(price, span=fast_period)\n    # \xe6\x85\xa2\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\n    ewma_slow = pd_ewm_mean(price, span=slow_period)\n    # dif = \xe5\xbf\xab\xe7\xba\xbf - \xe6\x85\xa2\xe7\xba\xbf\n    dif = ewma_fast - ewma_slow\n    # dea = dif\xe7\x9a\x849\xe6\x97\xa5\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\n    dea = pd_ewm_mean(dif, span=signal_period)\n    bar = (dif - dea)\n    return dif, dea, bar\n\n\n""""""\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8ABuNDBase\xe4\xb8\xad\xe5\xb0\x9d\xe8\xaf\x95import talib\xe6\x9d\xa5\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f""""""\ncalc_macd = _calc_macd_from_pd if g_calc_type == ECalcType.E_FROM_PD else _calc_macd_from_ta\n\n\ndef plot_macd_from_klpd(kl_pd, with_points=None, with_points_ext=None, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85plot_macd\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8cmacd\xef\xbc\x88dif, dea, bar\xef\xbc\x89\xe6\x9b\xb2\xe7\xba\xbf\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0with_price, fast_period, slow_period, signal_period, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_macd\n    """"""\n    plot_macd(kl_pd.close, kl_pd.index, with_points=with_points, with_points_ext=with_points_ext, **kwargs)\n\n\ndef plot_macd_from_order(order, date_ext=120, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85ABuNDBase\xe4\xb8\xad\xe7\x9a\x84plot_from_order\xe4\xb8\x8e\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\x8a\xe6\xa0\x87\xe6\xb3\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\x82\xb9\xe4\xbd\x8d\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0with_price, fast_period, slow_period, signal_period, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_macd\n    """"""\n    return plot_from_order(plot_macd_from_klpd, order, date_ext, **kwargs)\n\n\ndef plot_macd(prices, kl_index, with_points=None, with_points_ext=None,\n              with_price=True,\n              fast_period=12, slow_period=26, signal_period=9):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84macd\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89with_points\xe7\x82\xb9\xe4\xbd\x8d\xe6\xa0\x87\xe6\xb3\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param kl_index: pd.Index\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param with_price: \xe5\xb0\x86\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x80\xe8\xb5\xb7\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xa6\x81\xe5\x81\x9a\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\n    :param fast_period: \xe5\xbf\xab\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf\xe7\xba\xbf, \xe9\xbb\x98\xe8\xae\xa412\xef\xbc\x8c\xe5\x8d\xb3EMA12\n    :param slow_period: \xe6\x85\xa2\xe7\x9a\x84\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe7\xba\xbf, \xe9\xbb\x98\xe8\xae\xa426\xef\xbc\x8c\xe5\x8d\xb3EMA26\n    :param signal_period: dif\xe7\x9a\x84\xe6\x8c\x87\xe6\x95\xb0\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa49\n    :return:\n    """"""\n    dif, dea, bar = calc_macd(\n        prices, fast_period=fast_period, slow_period=slow_period, signal_period=signal_period)\n\n    plt.figure(figsize=[14, 7])\n    plt.plot(kl_index, dif, label=\'macd dif\')\n    plt.plot(kl_index, dea, label=\'signal dea\')\n\n    if with_price:\n        plt.plot(kl_index, ABuScalerUtil.scaler_std(prices), label=\'close price\')\n\n    # \xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xa2\xe7\xbb\xbfmacd\xe7\x9a\x84bar\n    # noinspection PyTypeChecker\n    bar_red = np.where(bar > 0, bar, 0)\n    # noinspection PyTypeChecker\n    bar_green = np.where(bar < 0, bar, 0)\n    plt.bar(kl_index, bar_red, facecolor=\'red\', label=\'hist bar\')\n    plt.bar(kl_index, bar_green, facecolor=\'green\', label=\'hist bar\')\n\n    @catch_error(return_val=None, log=False)\n    def plot_with_point(points, co, cc):\n        """"""\n        \xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\x86\xe7\x82\xb9\xef\xbc\x8b\xe7\xab\x96\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe6\xb3\xa8\n        :param points: \xe7\x82\xb9\xe4\xbd\x8d\xe5\x9d\x90\xe6\xa0\x87\xe5\xba\x8f\xe5\x88\x97\n        :param co: \xe7\x82\xb9\xe9\xa2\x9c\xe8\x89\xb2 eg. \'go\' \'ro\'\n        :param cc: markeredgecolor\xe5\x92\x8c\xe7\xab\x96\xe7\xba\xbfaxvline\xe9\xa2\x9c\xe8\x89\xb2 eg. \'green\' \'red\'\n        """"""\n        v_index_num = kl_index.tolist().index(points)\n        plt.plot(points, dif[v_index_num], co, markersize=12, markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=cc)\n        plt.axvline(points, color=cc)\n\n    # with_points\xe5\x92\x8cwith_points_ext\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\x86\xe7\x82\xb9\xef\xbc\x8b\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\xef\xbc\x8cplot_with_point\xe6\x96\xb9\xe6\xb3\x95\n    if with_points is not None:\n        plot_with_point(with_points, \'go\', \'green\')\n\n    if with_points_ext is not None:\n        plot_with_point(with_points_ext, \'ro\', \'red\')\n\n    plt.grid(True)\n    plt.legend(loc=\'best\')\n    plt.show()\n'"
abupy/IndicatorBu/ABuNDRsi.py,6,"b'# -*- encoding:utf-8 -*-\n\n""""""\n\xe7\x9b\xb8\xe5\xaf\xb9\xe5\xbc\xba\xe5\xbc\xb1\xe6\x8c\x87\xe6\x95\xb0\xef\xbc\x88RSI\xef\xbc\x89\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87\xe6\xaf\x94\xe8\xbe\x83\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe6\x9c\x9f\xe5\x86\x85\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x98\xe6\xb6\xa8\xe6\x95\xb0\xe5\x92\x8c\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x98\xe8\xb7\x8c\xe6\x95\xb0\xe6\x9d\xa5\xe5\x88\x86\xe6\x9e\x90\xe5\xb8\x82\xe5\x9c\xba\xe4\xb9\xb0\xe6\xb2\xbd\xe7\x9b\x98\xe7\x9a\x84\xe6\x84\x8f\xe5\x90\x91\xe5\x92\x8c\xe5\xae\x9e\xe5\x8a\x9b\xef\xbc\x8c\n\xe4\xbb\x8e\xe8\x80\x8c\xe4\xbd\x9c\xe5\x87\xba\xe6\x9c\xaa\xe6\x9d\xa5\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n\n\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\n\n\xe5\x85\xb7\xe4\xbd\x93\xe8\xae\xa1\xe7\xae\x97\xe5\xae\x9e\xe7\x8e\xb0\xe5\x8f\xaf\xe9\x98\x85\xe8\xaf\xbb\xe4\xbb\xa3\xe7\xa0\x81\xe4\xb8\xad_calc_rsi_from_pd()\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\n1. \xe6\xa0\xb9\xe6\x8d\xae\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xae\xa1\xe7\xae\x97\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8diff()\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8pct_change()\n2. \xe5\x88\x86\xe5\x88\xab\xe7\xad\x9b\xe9\x80\x89gain\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xe5\xba\x8f\xe5\x88\x97gain\xef\xbc\x8c\xe5\x92\x8closs\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xe5\xba\x8f\xe5\x88\x97loss\n3. \xe5\x88\x86\xe5\x88\xab\xe8\xae\xa1\xe7\xae\x97gain\xe5\x92\x8closs\xe7\x9a\x84N\xe6\x97\xa5\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\n4. rs = gain_mean / loss_mean\n5. rsi = 100 - 100 / (1 + rs)\n\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom .ABuNDBase import plot_from_order, g_calc_type, ECalcType\nfrom ..UtilBu import ABuScalerUtil\nfrom ..CoreBu.ABuPdHelper import pd_rolling_mean\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""_calc_rsi_from_pd\xe8\xae\xa1\xe7\xae\x97rs\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8gain\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8change""""""\ng_rsi_gain = True\n\n\n# noinspection PyUnresolvedReferences\ndef _calc_rsi_from_ta(prices, time_period=14):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8talib\xe8\xae\xa1\xe7\xae\x97rsi, \xe5\x8d\xb3\xe9\x80\x8f\xe4\xbc\xa0talib.RSI\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: rsi\xe7\x9a\x84N\xe6\x97\xa5\xe5\x8f\x82\xe6\x95\xb0, \xe9\xbb\x98\xe8\xae\xa414\n    """"""\n\n    import talib\n    if isinstance(prices, pd.Series):\n        prices = prices.values\n    rsi = talib.RSI(prices, timeperiod=time_period)\n    return rsi\n\n\n# noinspection PyTypeChecker\ndef _calc_rsi_from_pd(prices, time_period=14):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87rsi\xe5\x85\xac\xe5\xbc\x8f\xe6\x89\x8b\xe5\x8a\xa8\xe8\xae\xa1\xe7\xae\x97rsi\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param time_period: rsi\xe7\x9a\x84N\xe6\x97\xa5\xe5\x8f\x82\xe6\x95\xb0, \xe9\xbb\x98\xe8\xae\xa414\n    """"""\n\n    if not isinstance(prices, pd.Series):\n        prices = pd.Series(prices)\n\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xae\xa1\xe7\xae\x97\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8diff()\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8pct_change()\n    if g_rsi_gain:\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x89\x8d\xe5\x90\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8gain\n        diff_price = prices.diff()\n    else:\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x89\x8d\xe5\x90\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8change\xe6\xaf\x94\xe4\xbe\x8b\n        diff_price = prices.pct_change()\n    diff_price[0] = 0\n\n    # \xe5\x88\x86\xe5\x88\xab\xe7\xad\x9b\xe9\x80\x89gain\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xe5\xba\x8f\xe5\x88\x97gain\xef\xbc\x8c\xe5\x92\x8closs\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\xe5\xba\x8f\xe5\x88\x97loss\n    gain = np.where(diff_price > 0, diff_price, 0)\n    loss = np.where(diff_price < 0, abs(diff_price), 0)\n    # \xe5\x88\x86\xe5\x88\xab\xe8\xae\xa1\xe7\xae\x97gain\xe5\x92\x8closs\xe7\x9a\x84N\xe6\x97\xa5\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\n    gain_mean = pd_rolling_mean(gain, window=time_period)\n    loss_mean = pd_rolling_mean(loss, window=time_period)\n    # rsi = 100 - 100 / (1 +  gain_mean / loss_mean)\n    rs = gain_mean / loss_mean\n    rsi = 100 - 100 / (1 + rs)\n    return rsi\n\n\n""""""\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8ABuNDBase\xe4\xb8\xad\xe5\xb0\x9d\xe8\xaf\x95import talib\xe6\x9d\xa5\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a\xe6\x8c\x87\xe6\xa0\x87\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe5\xbc\x8f, \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\x8f\xaa\xe5\xba\x94\xe8\xaf\xa5\xe4\xbd\xbf\xe7\x94\xa8calc_rsi""""""\ncalc_rsi = _calc_rsi_from_pd if g_calc_type == ECalcType.E_FROM_PD else _calc_rsi_from_ta\n\n\ndef plot_rsi_from_order(order, date_ext=120, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85ABuNDBase\xe4\xb8\xad\xe7\x9a\x84plot_from_order\xe4\xb8\x8e\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\x8a\xe6\xa0\x87\xe6\xb3\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\x82\xb9\xe4\xbd\x8d\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ctime_period, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_rsi\n    """"""\n    return plot_from_order(plot_rsi_from_klpd, order, date_ext, **kwargs)\n\n\ndef plot_rsi_from_klpd(kl_pd, with_points=None, with_points_ext=None, **kwargs):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85plot_rsi\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8crsi\xe6\x9b\xb2\xe7\xba\xbf\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param kwargs: \xe7\xbb\x98\xe5\x88\xb6\xe6\x8a\x80\xe6\x9c\xaf\xe6\x8c\x87\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ctime_period, \xe6\x9c\x80\xe7\xbb\x88\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99plot_rsi\n    """"""\n\n    plot_rsi(kl_pd.close, kl_pd.index, with_points=with_points, with_points_ext=with_points_ext,\n             **kwargs)\n\n\ndef plot_rsi(prices, kl_index, with_points=None, with_points_ext=None, with_price=True, time_period=14):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84macd\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89with_points\xe7\x82\xb9\xe4\xbd\x8d\xe6\xa0\x87\xe6\xb3\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n    :param prices: \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe6\x88\x96\xe8\x80\x85np.array\n    :param kl_index: pd.Index\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param with_points: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5order, with_points=buy_index=pd.to_datetime(orders[\'buy_date\']))\n    :param with_points_ext: \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe5\xb8\xb8\xe8\xa7\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe4\xbc\xa0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xbaorder, with_points_ext=sell_index=pd.to_datetime(orders[\'sell_date\']))\n    :param with_price: \xe5\xb0\x86\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x80\xe8\xb5\xb7\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\x80\xbc\xe7\xba\xa7\xe5\x88\xab\n    :param time_period: rsi\xe7\x9a\x84N\xe6\x97\xa5\xe5\x8f\x82\xe6\x95\xb0, \xe9\xbb\x98\xe8\xae\xa414\n    :return:\n    """"""\n    # noinspection PyTypeChecker\n    rsi = np.array(calc_rsi(prices, time_period))\n\n    plt.figure(figsize=[16, 8])\n    plt.axes([0.025, 0.025, 0.95, 0.95])\n\n    if with_price:\n        # \xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a, \xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\x80\xbc\xe7\xba\xa7\xe5\x88\xab\n        matrix = ABuScalerUtil.scaler_matrix([rsi, prices])\n        rsi, prices = matrix[matrix.columns[0]], matrix[matrix.columns[1]]\n        plt.plot(kl_index, prices, label=\'close price\')\n\n    plt.plot(kl_index, rsi, label=\'rsi\')\n\n    # with_points\xe5\x92\x8cwith_points_ext\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xab\x96\xe7\xba\xbf\xe6\xa0\x87\xe6\xb3\xa8\n    if with_points is not None:\n        plt.axvline(with_points, color=\'green\', linestyle=\'--\')\n\n    if with_points_ext is not None:\n        plt.axvline(with_points_ext, color=\'red\')\n\n    plt.grid(True)\n    plt.legend(loc=\'best\')\n    plt.show()\n'"
abupy/IndicatorBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom . import ABuND as nd\n\n__all__ = [\n    'nd'\n]\n"""
abupy/MLBu/ABuML.py,54,"b'# -*- encoding:utf-8 -*-\n""""""\n\xe4\xb8\xad\xe9\x97\xb4\xe5\xb1\x82\xef\xbc\x8c\xe4\xbb\x8e\xe4\xb8\x8a\xe5\xb1\x82\xe6\x8b\xbf\xe5\x88\xb0x\xef\xbc\x8cy\xef\xbc\x8cdf\n\xe6\x8b\xa5\xe6\x9c\x89create estimator\n\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport os\nimport functools\nfrom enum import Enum\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.base import TransformerMixin, ClassifierMixin, RegressorMixin, clone\nfrom sklearn import metrics\nfrom sklearn.datasets import load_iris\nfrom sklearn.feature_selection import RFE, VarianceThreshold\nfrom sklearn.preprocessing import label_binarize, StandardScaler, binarize\n\nfrom . import ABuMLExecute\nfrom .ABuMLCreater import AbuMLCreater\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuFixes import train_test_split, cross_val_score, mean_squared_error_scorer, six\nfrom ..UtilBu import ABuFileUtil\nfrom ..UtilBu.ABuProgress import AbuProgress\nfrom ..UtilBu.ABuDTUtil import warnings_filter\nfrom ..UtilBu.ABuDTUtil import params_to_numpy\nfrom ..CoreBu.ABuFixes import signature\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\np_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.path.pardir))\nML_TEST_FILE = os.path.join(p_dir, \'RomDataBu/ml_test.csv\')\n\n\nclass _EMLScoreType(Enum):\n    """"""\xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x94\xaf\xe6\x8c\x81enum""""""\n\n    """"""\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\xba\xa6\xe9\x87\x8f\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87""""""\n    E_SCORE_ACCURACY = \'accuracy\'\n    """"""\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\xba\xa6\xe9\x87\x8fmse""""""\n    E_SCORE_MSE = mean_squared_error_scorer\n    """"""\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\xba\xa6\xe9\x87\x8froc_auc""""""\n    E_SCORE_ROC_AUC = \'roc_auc\'\n\n\nclass EMLFitType(Enum):\n    """"""\xe6\x94\xaf\xe6\x8c\x81\xe5\xb8\xb8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\xb1\xbb\xe5\x88\xabenum""""""\n\n    """"""\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x9a\xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaey\xe7\x9a\x84label\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c> 10\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb""""""\n    E_FIT_AUTO = \'auto\'\n    """"""\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x9a\xe5\x9b\x9e\xe5\xbd\x92""""""\n    E_FIT_REG = \'reg\'\n    """"""\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x9a\xe5\x88\x86\xe7\xb1\xbb""""""\n    E_FIT_CLF = \'clf\'\n\n    """"""\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x9aHMM""""""\n    E_FIT_HMM = \'hmm\'\n    """"""\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x9aPCA""""""\n    E_FIT_PCA = \'pca\'\n    """"""\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x9aKMEAN""""""\n    E_FIT_KMEAN = \'kmean\'\n\n\ndef entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG, EMLFitType.E_FIT_HMM,\n                           EMLFitType.E_FIT_PCA, EMLFitType.E_FIT_KMEAN)):\n    """"""\n    \xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xb9\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84fiter_type\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xef\xbc\x8ceg\xef\xbc\x8cfiter_type\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\'clf\'\xef\xbc\x8c \xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaEMLFitType(fiter_type)\n    \xe8\xb5\x8b\xe4\xba\x88self.fiter_type\xef\xbc\x8c\xe6\xa3\x80\xe6\xb5\x8b\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe4\xb8\x8d\xe5\x9c\xa8support\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe4\xb8\x8d\xe6\x89\xa7\xe8\xa1\x8c\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84func\xe5\x87\xbd\xe6\x95\xb0\xe4\xba\x86\xef\xbc\x8c\xe6\x89\x93\xe4\xb8\xaalog\xe8\xbf\x94\xe5\x9b\x9e\n\n    :param support: \xe9\xbb\x98\xe8\xae\xa4 support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG, EMLFitType.E_FIT_HMM,\n                           EMLFitType.E_FIT_PCA, EMLFitType.E_FIT_KMEAN)\n                    \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x89\x80\xe6\x9c\x89\xef\xbc\x8c\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe6\xa0\xb9\xe6\x8d\xae\xe8\x87\xaa\xe8\xba\xab\xe7\x89\xb9\xe6\x80\xa7\xe9\x80\x89\xe6\x8b\xa9\xe8\xa3\x85\xe9\xa5\xb0\xe5\x8f\x82\xe6\x95\xb0\n    """"""\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            org_fiter_type = self.fiter_type\n            if \'fiter_type\' in kwargs:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe4\xba\x86fiter_type\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cpop\xe5\x87\xba\xe6\x9d\xa5\n                fiter_type = kwargs.pop(\'fiter_type\')\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84fiter_type\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xafstr\xef\xbc\x8ceg\xef\xbc\x9a\'clf\'\xef\xbc\x8c \xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaEMLFitType(fiter_type)\n                if isinstance(fiter_type, six.string_types):\n                    fiter_type = EMLFitType(fiter_type)\n                self.fiter_type = fiter_type\n\n            check_support = self.fiter_type\n            if self.fiter_type == EMLFitType.E_FIT_AUTO:\n                # \xe6\x8a\x8aauto\xe7\x9a\x84\xe5\xbd\x92\xe5\x88\xb0\xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe6\x88\x96\xe8\x80\x85\xe5\x9b\x9e\xe5\xbd\x92\n                check_y = self.y\n                if \'y\' in kwargs:\n                    check_y = kwargs[\'y\']\n                check_support = EMLFitType.E_FIT_CLF if len(np.unique(check_y)) <= 10 else EMLFitType.E_FIT_REG\n            if check_support not in support:\n                # \xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe4\xb8\x8d\xe5\x9c\xa8support\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe4\xb8\x8d\xe6\x89\xa7\xe8\xa1\x8c\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84func\xe5\x87\xbd\xe6\x95\xb0\xe4\xba\x86\xef\xbc\x8c\xe6\x89\x93\xe4\xb8\xaalog\xe8\xbf\x94\xe5\x9b\x9e\n                self.log_func(\'{} not support {}!\'.format(func.__name__, check_support.value))\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe8\x83\xbd\xe6\x88\x90\xe5\x8a\x9f\xe6\x89\xa7\xe8\xa1\x8c\xe6\x8a\x8a\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x86\x8d\xe5\x88\x87\xe6\x8d\xa2\xe5\x9b\x9e\xe6\x9d\xa5\n                self.fiter_type = org_fiter_type\n                return\n\n            return func(self, *args, **kwargs)\n\n        return wrapper\n\n    return decorate\n\n\n# noinspection PyUnresolvedReferences\nclass AbuML(object):\n    """"""\xe5\xb0\x81\xe8\xa3\x85\xe6\x9c\x89\xe7\xae\x80\xe5\x8d\x95\xe5\xad\xa6\xe4\xb9\xa0\xe5\x8f\x8a\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe6\x96\xb9\xe6\xb3\x95\xe4\xbb\xa5\xe5\x8f\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb1\xbb""""""\n\n    @classmethod\n    def create_test_fiter(cls):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8iris\xe6\x95\xb0\xe6\x8d\xae\xe6\x9e\x84\xe9\x80\xa0AbuML\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe7\xae\x80\xe5\x8d\x95iris\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe6\x96\xb9\xe6\xb3\x95\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81\n        iris\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe5\xb0\x8f\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe6\x9b\xb4\xe5\xa4\x9a\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\xa5\xe5\x8f\xa3\xe6\xb5\x8b\xe8\xaf\x95\xe5\x8f\xaf\xe4\xbd\xbf\xe7\x94\xa8create_test_more_fiter\xe6\x8e\xa5\xe5\x8f\xa3\n\n        eg: iris_abu = AbuML.create_test_fiter()\n\n        :return: AbuML(x, y, df)\xef\xbc\x8c\n                    eg: df\n                         y   x0   x1   x2   x3\n                    0    0  5.1  3.5  1.4  0.2\n                    1    0  4.9  3.0  1.4  0.2\n                    2    0  4.7  3.2  1.3  0.2\n                    3    0  4.6  3.1  1.5  0.2\n                    4    0  5.0  3.6  1.4  0.2\n                    ..  ..  ...  ...  ...  ...\n                    145  2  6.7  3.0  5.2  2.3\n                    146  2  6.3  2.5  5.0  1.9\n                    147  2  6.5  3.0  5.2  2.0\n                    148  2  6.2  3.4  5.4  2.3\n                    149  2  5.9  3.0  5.1  1.8\n        """"""\n        iris = load_iris()\n        x = iris.data\n        """"""\n            eg: iris.data\n            array([[ 5.1,  3.5,  1.4,  0.2],\n                   [ 4.9,  3. ,  1.4,  0.2],\n                   [ 4.7,  3.2,  1.3,  0.2],\n                   [ 4.6,  3.1,  1.5,  0.2],\n                   [ 5. ,  3.6,  1.4,  0.2],\n                    ....... ....... .......\n                   [ 6.7,  3. ,  5.2,  2.3],\n                   [ 6.3,  2.5,  5. ,  1.9],\n                   [ 6.5,  3. ,  5.2,  2. ],\n                   [ 6.2,  3.4,  5.4,  2.3],\n                   [ 5.9,  3. ,  5.1,  1.8]])\n        """"""\n        y = iris.target\n        """"""\n            eg: y\n            array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                   0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                   1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n                   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n                   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n        """"""\n        x_df = pd.DataFrame(x, columns=[\'x0\', \'x1\', \'x2\', \'x3\'])\n        y_df = pd.DataFrame(y, columns=[\'y\'])\n        df = y_df.join(x_df)\n        return AbuML(x, y, df)\n\n    @classmethod\n    def load_ttn_raw_df(cls):\n        """"""\n        \xe8\xaf\xbb\xe5\x8f\x96\xe6\xb3\xb0\xe5\x9d\xa6\xe5\xb0\xbc\xe5\x85\x8b\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n        :return: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cfrom\xe6\x8e\xa5\xe5\x8f\xa3pd.read_csv(train_csv_path)\n        """"""\n        train_csv_path = ML_TEST_FILE\n        if not ABuFileUtil.file_exist(train_csv_path):\n            # \xe6\xb3\xb0\xe5\x9d\xa6\xe5\xb0\xbc\xe5\x85\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8RuntimeError\n            raise RuntimeError(\'{} not exist, please down a ml_test.csv!\'.format(train_csv_path))\n        # \xe8\xae\xad\xe7\xbb\x83\xe6\x96\x87\xe4\xbb\xb6\xe4\xbd\xbf\xe7\x94\xa8read_csv\xe4\xbb\x8e\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x8f\x96\n        return pd.read_csv(train_csv_path)\n\n    @classmethod\n    @warnings_filter\n    def create_test_more_fiter(cls):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb3\xb0\xe5\x9d\xa6\xe5\xb0\xbc\xe5\x85\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x9e\x84\xe9\x80\xa0AbuML\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\xaf\xb9\xe6\x96\xb9\xe6\xb3\x95\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xad\x96\xe7\x95\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81 \xe6\xaf\x94iris\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\x9a\n                eg: ttn_abu = AbuML.create_test_more_fiter()\n\n        :return: AbuML(x, y, df)\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0AbuML\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe6\xb3\xb0\xe5\x9d\xa6\xe5\xb0\xbc\xe5\x85\x8b\xe6\x95\xb0\xe6\x8d\xae\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xef\xbc\x9a\n\n                eg: df\n                                 Survived  SibSp  Parch  Cabin_No  Cabin_Yes  Embarked_C  Embarked_Q  \\\n                    0           0      1      0         1          0           0           0\n                    1           1      1      0         0          1           1           0\n                    2           1      0      0         1          0           0           0\n                    3           1      1      0         0          1           0           0\n                    4           0      0      0         1          0           0           0\n                    5           0      0      0         1          0           0           1\n                    6           0      0      0         0          1           0           0\n                    7           0      3      1         1          0           0           0\n                    8           1      0      2         1          0           0           0\n                    9           1      1      0         1          0           1           0\n                    ..        ...    ...    ...       ...        ...         ...         ...\n\n                         Embarked_S  Sex_female  Sex_male  Pclass_1  Pclass_2  Pclass_3  \\\n                    0             1           0         1         0         0         1\n                    1             0           1         0         1         0         0\n                    2             1           1         0         0         0         1\n                    3             1           1         0         1         0         0\n                    4             1           0         1         0         0         1\n                    5             0           0         1         0         0         1\n                    6             1           0         1         1         0         0\n                    7             1           0         1         0         0         1\n                    8             1           1         0         0         0         1\n                    9             0           1         0         0         1         0\n                    ..          ...         ...       ...       ...       ...       ...\n                         Age_scaled  Fare_scaled\n                    0       -0.5614      -0.5024\n                    1        0.6132       0.7868\n                    2       -0.2677      -0.4889\n                    3        0.3930       0.4207\n                    4        0.3930      -0.4863\n                    5       -0.4271      -0.4781\n                    6        1.7877       0.3958\n                    7       -2.0295      -0.2241\n                    8       -0.1943      -0.4243\n                    ..          ...         ...\n        """"""\n        raw_df = cls.load_ttn_raw_df()\n\n        def set_missing_ages(p_df):\n            """"""\n            \xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe7\xbc\xba\xe5\xa4\xb1\xe7\x9a\x84\xe5\xb9\xb4\xe9\xbe\x84\xe4\xbd\xbf\xe7\x94\xa8RandomForestRegressor\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa1\xab\xe5\x85\x85\n            """"""\n            from sklearn.ensemble import RandomForestRegressor\n            age_df = p_df[[\'Age\', \'Fare\', \'Parch\', \'SibSp\', \'Pclass\']]\n            known_age = age_df[age_df.Age.notnull()].as_matrix()\n            unknown_age = age_df[age_df.Age.isnull()].as_matrix()\n            y_inner = known_age[:, 0]\n            x_inner = known_age[:, 1:]\n            rfr_inner = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)\n            rfr_inner.fit(x_inner, y_inner)\n            predicted_ages = rfr_inner.predict(unknown_age[:, 1::])\n            p_df.loc[(p_df.Age.isnull()), \'Age\'] = predicted_ages\n            return p_df, rfr_inner\n\n        def set_cabin_type(p_df):\n            """"""\n            \xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe7\xbc\xba\xe5\xa4\xb1\xe7\x9a\x84Cabin\xe5\xa4\x84\xe7\x90\x86\n            """"""\n            p_df.loc[(p_df.Cabin.notnull()), \'Cabin\'] = ""Yes""\n            p_df.loc[(p_df.Cabin.isnull()), \'Cabin\'] = ""No""\n            return p_df\n\n        raw_df, rfr = set_missing_ages(raw_df)\n        raw_df = set_cabin_type(raw_df)\n\n        # \xe5\xaf\xb9\xe5\xa4\x9alabel\xe4\xbd\xbf\xe7\x94\xa8get_dummies\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xa6\xbb\xe6\x95\xa3\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n        dummies_cabin = pd.get_dummies(raw_df[\'Cabin\'], prefix=\'Cabin\')\n        """"""\n            eg:\n                data_train[\'Cabin\']:\n                        0       No\n                        1      Yes\n                        2       No\n                        3      Yes\n                        4       No\n                        5       No\n                        6      Yes\n                        7       No\n                        8       No\n                        9       No\n                              ...\n                dummies_cabin:\n                                Cabin_No  Cabin_Yes\n                        0           1          0\n                        1           0          1\n                        2           1          0\n                        3           0          1\n                        4           1          0\n                        5           1          0\n                        6           0          1\n                        7           1          0\n                        8           1          0\n                        9           1          0\n                        ..        ...        ...\n        """"""\n        dummies__embarked = pd.get_dummies(raw_df[\'Embarked\'], prefix=\'Embarked\')\n        dummies__sex = pd.get_dummies(raw_df[\'Sex\'], prefix=\'Sex\')\n        dummies__pclass = pd.get_dummies(raw_df[\'Pclass\'], prefix=\'Pclass\')\n        # \xe5\xb0\x86\xe7\xa6\xbb\xe6\x95\xa3\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84dummies\xe5\x92\x8cdata\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xbc\xe6\x8e\xa5\n        df = pd.concat([raw_df, dummies_cabin, dummies__embarked, dummies__sex, dummies__pclass], axis=1)\n        # \xe5\x88\xa0\xe9\x99\xa4\xe4\xb9\x8b\xe5\x89\x8d\xe9\x9d\x9e\xe7\xa6\xbb\xe6\x95\xa3\xe4\xba\x8c\xe5\x80\xbc\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        # noinspection PyUnresolvedReferences\n        df.drop([\'Pclass\', \'Name\', \'Sex\', \'Ticket\', \'Cabin\', \'Embarked\'], axis=1, inplace=True)\n        # \xe4\xbd\xbf\xe7\x94\xa8StandardScaler\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n        scaler = StandardScaler()\n        # noinspection PyUnresolvedReferences\n        df[\'Age_scaled\'] = scaler.fit_transform(df[\'Age\'].values.reshape(-1, 1))\n        """"""\n            eg:\n                df[\'Age\']\n                    0      22.000\n                    1      38.000\n                    2      26.000\n                    3      35.000\n                    4      35.000\n                    5      23.829\n                    6      54.000\n                    7       2.000\n                    8      27.000\n                    9      14.000\n                            ...\n\n                df[\'Age_scaled\']\n                    0     -0.5614\n                    1      0.6132\n                    2     -0.2677\n                    3      0.3930\n                    4      0.3930\n                    5     -0.4271\n                    6      1.7877\n                    7     -2.0295\n                    8     -0.1943\n                    9     -1.1486\n                            ...\n        """"""\n        # noinspection PyUnresolvedReferences\n        df[\'Fare_scaled\'] = scaler.fit_transform(df[\'Fare\'].values.reshape(-1, 1))\n        # noinspection PyUnresolvedReferences\n        df = df.filter(regex=\'Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*\')\n        train_np = df.as_matrix()\n        y = train_np[:, 0]\n        x = train_np[:, 1:]\n        return AbuML(x, y, df)\n\n    def __init__(self, x, y, df, fiter_type=EMLFitType.E_FIT_AUTO):\n        """"""\n        AbuML\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\xad\xe9\x97\xb4\xe5\xb1\x82\xe9\x9c\x80\xe8\xa6\x81\xe6\x89\x80\xe6\x9c\x89\xe5\x8e\x9f\xe6\x96\x99\xe9\x83\xbd\xe9\x85\x8d\xe9\xbd\x90\xef\xbc\x8cx, y, df\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe6\x96\xb9\xe5\xbc\x8f\xe5\x8f\x82\xe8\x80\x83\n        create_test_fiter\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe7\x9a\x84\xe5\xae\x9e\xe8\xa1\x8c\xe6\xb5\x81\xe7\xa8\x8b\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param df: \xe6\x8b\x86\xe5\x88\x86x\xef\xbc\x8cy\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param fiter_type: \xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8E_FIT_AUTO\xe5\x8d\xb3\xe6\xa0\xb9\xe6\x8d\xaey\xe7\x9a\x84label\xe6\x95\xb0\xe9\x87\x8f\xe9\x80\x89\xe6\x8b\xa9\xe5\x88\x86\xe7\xb1\xbb\xe6\x88\x96\xe8\x80\x85\xe5\x9b\x9e\xe5\xbd\x92\n        """"""\n        self.estimator = AbuMLCreater()\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\xe7\x9a\x84\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaEMLFitType\n        if isinstance(fiter_type, six.string_types):\n            fiter_type = EMLFitType(fiter_type)\n        self.x = x\n        self.y = y\n        self.df = df\n        # ipython notebook\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8logging.info\n        self.log_func = logging.info if ABuEnv.g_is_ipython else print\n        self.fiter_type = fiter_type\n\n    def is_supervised_learning(self):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9eself.fiter_type\xe6\x89\x80\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe8\xbf\x98\xe6\x98\xaf\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\n        :return: bool\xef\xbc\x8cTrue: \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xef\xbc\x8cFalse: \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\n        """"""\n        return self.fiter_type == EMLFitType.E_FIT_REG or self.fiter_type == EMLFitType.E_FIT_CLF or \\\n            self.fiter_type == EMLFitType.E_FIT_AUTO\n\n    def echo_info(self, fiter=None):\n        """"""\n        \xe6\x98\xbe\xe7\xa4\xbafiter class\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8cself.df\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8c\x85\xe6\x8b\xac\xef\xbc\x8chead\xef\xbc\x8ctail\xef\xbc\x8cdescribe\n        eg\xef\xbc\x9a\n            fiter class is: DecisionTreeClassifier(class_weight=None, criterion=\'gini\', max_depth=None,\n                max_features=None, max_leaf_nodes=None,\n                min_impurity_split=1e-07, min_samples_leaf=1,\n                min_samples_split=2, min_weight_fraction_leaf=0.0,\n                presort=False, random_state=None, splitter=\'best\')\n            describe:\n                          y        x0        x1        x2        x3\n            count  150.0000  150.0000  150.0000  150.0000  150.0000\n            mean     1.0000    5.8433    3.0540    3.7587    1.1987\n            std      0.8192    0.8281    0.4336    1.7644    0.7632\n            min      0.0000    4.3000    2.0000    1.0000    0.1000\n            25%      0.0000    5.1000    2.8000    1.6000    0.3000\n            50%      1.0000    5.8000    3.0000    4.3500    1.3000\n            75%      2.0000    6.4000    3.3000    5.1000    1.8000\n            max      2.0000    7.9000    4.4000    6.9000    2.5000\n        :param fiter:\n        :return:\n        """"""\n        if fiter is None:\n            fiter = self.get_fiter()\n        self.log_func(\'fiter class is: {}\'.format(fiter))\n        self.log_func(\'describe:\\n{}\'.format(self.df.describe()))\n        self.log_func(\'head:\\n{}\'.format(self.df.head()))\n        self.log_func(\'tail:\\n{}\'.format(self.df.tail()))\n\n    def get_fiter(self):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xaeself.fiter_type\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\x8eself.estimator\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n\n        self.fiter_type == EMLFitType.E_FIT_AUTO\xef\xbc\x9a\n            \xe8\x87\xaa\xe5\x8a\xa8\xe9\x80\x89\xe6\x8b\xa9\xe6\x9c\x89\xe7\xae\x80\xe5\x8d\x95\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\xe5\xbd\x93y\xe7\x9a\x84label\xe6\x95\xb0\xe9\x87\x8f < 10\xe4\xb8\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbbself.estimator.clf\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x9b\x9e\xe5\xbd\x92self.estimator.reg\n        self.fiter_type == EMLFitType.E_FIT_REG:\n            \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92self.estimator.reg\n        self.fiter_type == EMLFitType.E_FIT_CLF:\n            \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbbself.estimator.clf\n        self.fiter_type == EMLFitType.E_FIT_HMM:\n            \xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0hmm\xef\xbc\x8cself.estimator.hmm\n        self.fiter_type == EMLFitType.E_FIT_PCA:\n            \xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0pca\xef\xbc\x8cself.estimator.pca\n        self.fiter_type == EMLFitType.E_FIT_KMEAN:\n            \xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0kmean\xef\xbc\x8cself.estimator.kmean\n        :return: \xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if self.fiter_type == EMLFitType.E_FIT_AUTO:\n            if len(np.unique(self.y)) <= 10:\n                # \xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e10\xe4\xb8\xaaclass\xe7\x9a\x84y\xe5\xb0\xb1\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe8\xa6\x81\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe4\xba\x86\n                fiter = self.estimator.clf\n            else:\n                fiter = self.estimator.reg\n        elif self.fiter_type == EMLFitType.E_FIT_REG:\n            fiter = self.estimator.reg\n        elif self.fiter_type == EMLFitType.E_FIT_CLF:\n            fiter = self.estimator.clf\n        elif self.fiter_type == EMLFitType.E_FIT_HMM:\n            if self.estimator.hmm is None:\n                self.estimator.hmm_gaussian()\n            fiter = self.estimator.hmm\n        elif self.fiter_type == EMLFitType.E_FIT_PCA:\n            if self.estimator.pca is None:\n                self.estimator.pca_decomposition()\n            fiter = self.estimator.pca\n        elif self.fiter_type == EMLFitType.E_FIT_KMEAN:\n            if self.estimator.kmean is None:\n                self.estimator.kmean_cluster()\n            fiter = self.estimator.kmean\n        else:\n            raise TypeError(\'self.fiter_type = {}, is error type\'.format(self.fiter_type))\n\n        return fiter\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\n    def cross_val_accuracy_score(self, cv=10, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8cross_val_score\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8caccuracy\xe5\xba\xa6\xe9\x87\x8f\n        :param cv: \xe9\x80\x8f\xe4\xbc\xa0cross_val_score\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\xa0\xe9\x80\x92self._do_cross_val_score\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0x\xef\xbc\x8cy\xef\xbc\x8c\n                       \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.cross_val_accuracy_score(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: cross_val_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84score\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                 eg: array([ 1.  ,  0.9 ,  1.  ,  0.9 ,  1.  ,  0.9 ,  1.  ,  0.9 ,  0.95,  1.  ])\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        return self._do_cross_val_score(x, y, cv, _EMLScoreType.E_SCORE_ACCURACY.value)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\n    def cross_val_prob_accuracy_score(self, pb_threshold, cv=10, show=True, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe6\x8b\x86\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe5\xaf\xb9\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1predict_proba\n        \xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x88\xe5\x85\xb7\xe4\xbd\x93\xe9\x98\x85\xe8\xaf\xbbABuMLExecute.run_prob_cv_estimator\xef\xbc\x89\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe6\xa0\xb9\xe6\x8d\xae\n        pb_threshold\xe7\x9a\x84\xe5\x80\xbc\xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe6\xa6\x82\xe7\x8e\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe5\x80\xbc\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8cpb_threshold\xe7\x9a\x84\xe5\x9d\x87\xe8\xa1\xa1\xe5\xaf\xb9\xe5\xbd\xb1\xe5\x93\x8d\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\n        \xe5\x87\x86\xe7\xa1\xae\xe5\xba\xa6\xe7\xad\x89\n                eg:\n                    in: ttn_abu = AbuML.create_test_more_fiter()\n                        ttn_abu.estimator.svc(probability=True)\n                        ttn_abu.cross_val_prob_accuracy_score(pb_threshold=0.60)\n                    out:\n                        threshold=0.6 prob accuracy=0.83, effect cnt=870, effect rate=0.98, score=0.81\n                    \xe9\x98\x80\xe5\x80\xbc0.6\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x870.83\xef\xbc\x8c\xe7\x94\x9f\xe6\x95\x88\xe6\xaf\x94\xe4\xbe\x8b0.98\xef\xbc\x8c\xe5\x88\x86\xe6\x95\xb00.81\n\n                    in:\n                        ttn_abu.cross_val_prob_accuracy_score(pb_threshold=0.80)\n                    out:\n                        threshold=0.8 prob accuracy=0.87, effect cnt=718, effect rate=0.81, score=0.70\n                    \xe9\x98\x80\xe5\x80\xbc0.8\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x870.87 \xe6\x8f\x90\xe9\xab\x98\xef\xbc\x8c\xe7\x94\x9f\xe6\x95\x88\xe6\xaf\x94\xe4\xbe\x8b0.81 \xe9\x99\x8d\xe4\xbd\x8e\xef\xbc\x8c\xe5\x88\x86\xe6\x95\xb00.70 \xe9\x99\x8d\xe4\xbd\x8e\n\n                    in:\n                        ttn_abu.cross_val_prob_accuracy_score(pb_threshold=0.85)\n                    out:\n                        threshold=0.85 prob accuracy=0.89, effect cnt=337, effect rate=0.38, score=0.34\n                    \xe9\x98\x80\xe5\x80\xbc0.85\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x870.89 \xe5\x86\x8d\xe6\xac\xa1\xe6\x8f\x90\xe9\xab\x98\xef\xbc\x8c\xe7\x94\x9f\xe6\x95\x88\xe6\xaf\x94\xe4\xbe\x8b0.38 \xe5\xbe\x88\xe4\xbd\x8e\xef\xbc\x8c\xe5\x88\x86\xe6\x95\xb00.34 \xe9\x99\x8d\xe4\xbd\x8e\n\n        \xe5\x8d\xb3\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x88\xe9\x80\x82\xe7\x9a\x84prob\xe5\x80\xbc\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84predict_prob\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xbf\x85\xe7\x84\xb6\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\n        \xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\x8f\xaa\xe5\xaf\xb9\xe6\x9c\x89\xe5\xbe\x88\xe5\xa4\xa7\xe6\xa6\x82\xe7\x8e\x87\xe7\x9a\x84\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n\n        :param pb_threshold: binarize(y_prob, threshold=pb_threshold)\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xba\x8c\xe5\x88\x86\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cfloat\xef\xbc\x880-1\xef\xbc\x89\n        :param cv: \xe9\x80\x8f\xe4\xbc\xa0ABuMLExecute.run_prob_cv_estimator\xe4\xb8\xad\xe7\x9a\x84cv\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\xef\xbc\x8cint\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x98\xbe\xe7\xa4\xba\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\xa0\xe9\x80\x92self._do_cross_val_score\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0x\xef\xbc\x8cy\n                       \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\n        :return: accuracy, effect_cnt, effect_rate, score\n        """"""\n        if pb_threshold < 0.0 or pb_threshold > 1:\n            self.log_func(\'pb_threshold must > 0 and < 1! now={}\'.format(pb_threshold))\n            return\n\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n\n        y_prob = ABuMLExecute.run_prob_cv_estimator(fiter, x, y, n_folds=cv)\n        """"""\n            eg: y_prob\n            array([[ 0.8726,  0.1274],\n                   [ 0.0925,  0.9075],\n                   [ 0.2485,  0.7515],\n                   ...,\n                   [ 0.3881,  0.6119],\n                   [ 0.7472,  0.2528],\n                   [ 0.8555,  0.1445]])\n        """"""\n        y_prob_binarize = binarize(y_prob, threshold=pb_threshold)\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xadpb_threshold\xe7\x9a\x84\xe5\x80\xbc\xe5\xaf\xb9y_prob\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xef\xbc\x8c\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xad\xe6\x9c\x89\xe4\xb8\x80\xe8\xa1\x8c\xe5\x85\xa8\xe6\x98\xaf1\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x85\xa8\xe6\x98\xaf0\xe7\x9a\x84\xef\xbc\x8c\n            pb_threshold\xe7\x9a\x84\xe5\x80\xbc\xe8\xb6\x8a\xe6\x98\xaf\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xad\xe5\x85\xa8\xe6\x98\xaf1\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x85\xa8\xe6\x98\xaf0\xe7\x9a\x84\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xb6\x8a\xe5\xa4\x9a\xef\xbc\x8c\xe5\xba\xa6\xe9\x87\x8f\xe5\x87\x86\xe7\xa1\xae\xe6\x80\xa7\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe8\xbf\x99\xe4\xba\x9b\xe9\x83\xbd\n            \xe6\x98\xaf\xe6\x9c\x9f\xe6\x9d\x83\xe7\xa5\xa8\n            eg: y_prob_binarize\n            array([[ 1.,  0.],\n                   [ 0.,  1.],\n                   [ 1.,  1.],\n                   ...,\n                   [ 0.,  0.],\n                   [ 1.,  0.],\n                   [ 1.,  0.]])\n        """"""\n        # y_unique eg: array([ 0.,  1.])\n        y_unique = np.unique(y)\n        y_label_binarize_df = pd.get_dummies(y, prefix=\'true\')\n        """"""\n            eg: y_label_binarize_df\n                 true_0.0  true_1.0\n            0           1         0\n            1           0         1\n            2           0         1\n            3           0         1\n            4           1         0\n            5           1         0\n            6           1         0\n            7           1         0\n            8           0         1\n            9           0         1\n            ..        ...       ...\n            881         1         0\n            882         1         0\n            883         1         0\n            884         1         0\n            885         1         0\n            886         1         0\n            887         0         1\n            888         1         0\n            889         0         1\n            890         1         0\n        """"""\n        y_prob_df = pd.DataFrame(y_prob_binarize, columns=[\'prob_{}\'.format(y_label) for y_label in y_unique])\n        """"""\n            eg: y_prob_df\n                 prob_0.0  prob_1.0\n            0         1.0       0.0\n            1         0.0       1.0\n            2         0.0       1.0\n            3         0.0       1.0\n            4         1.0       0.0\n            5         1.0       0.0\n            6         1.0       0.0\n            7         1.0       0.0\n            8         0.0       0.0\n            9         0.0       1.0\n            ..        ...       ...\n            881       1.0       0.0\n            882       0.0       1.0\n            883       1.0       0.0\n            884       1.0       0.0\n            885       1.0       0.0\n            886       1.0       0.0\n            887       0.0       1.0\n            888       0.0       0.0\n            889       1.0       0.0\n            890       1.0       0.0\n        """"""\n        # \xe6\x8a\x8a\xe4\xb8\xa4\xe4\xb8\xaadf\xe5\x90\x88\xe5\xb9\xb6\xe8\xb5\xb7\xe6\x9d\xa5\n        true_prob_df = pd.concat([y_label_binarize_df, y_prob_df], axis=1)\n        """"""\n            eg: true_prob_df\n                 true_0.0  true_1.0  prob_0.0  prob_1.0\n            0           1         0       1.0       0.0\n            1           0         1       0.0       1.0\n            2           0         1       0.0       1.0\n            3           0         1       0.0       1.0\n            4           1         0       1.0       0.0\n            5           1         0       1.0       0.0\n            6           1         0       1.0       0.0\n            7           1         0       1.0       0.0\n            8           0         1       0.0       0.0\n            9           0         1       0.0       1.0\n            ..        ...       ...       ...       ...\n            881         1         0       1.0       0.0\n            882         1         0       0.0       1.0\n            883         1         0       1.0       0.0\n            884         1         0       1.0       0.0\n            885         1         0       1.0       0.0\n            886         1         0       1.0       0.0\n            887         0         1       0.0       1.0\n            888         1         0       0.0       0.0\n            889         0         1       1.0       0.0\n            890         1         0       1.0       0.0\n        """"""\n\n        # \xe5\x8d\xb3\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe9\x98\x80\xe5\x80\xbc\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x9c\x89\xe6\x95\x88\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe8\xa1\x8cindex\n        vote_index = (y_prob_df.sum(axis=1) > 0) & (y_prob_df.sum(axis=1) < 2)\n        """"""\n            \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x87\xe6\xbb\xa4\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe9\x98\x80\xe5\x80\xbc\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\xa6\x82pb_threshold = 0.1\xef\xbc\x8c\xe9\x83\xbd\xe6\x8a\x95\xe4\xba\x861\n            \xe5\x92\x8c\xe5\xa6\x82pb_threshold = 0.9\xef\xbc\x8c\xe9\x83\xbd\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8a\x95\xe7\xa5\xa8\xef\xbc\x88\xe5\x85\xa8\xe6\x98\xaf0\xef\xbc\x89\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n            eg: pb_threshold = 0.1\n                 prob_0.0  prob_1.0\n            0         1.0       1.0\n            1         1.0       1.0\n            2         1.0       1.0\n            3         1.0       1.0\n            4         1.0       1.0\n            5         1.0       1.0\n            ..        ...       ...\n            eg: pb_threshold = 0.9\n                 prob_0.0  prob_1.0\n            0         0.0       0.0\n            1         0.0       0.0\n            2         0.0       0.0\n            3         0.0       0.0\n            4         0.0       0.0\n            5         0.0       0.0\n            ..        ...       ...\n        """"""\n\n        # \xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\x86\xe5\xbc\x80\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaevote_index\n        # noinspection PyUnresolvedReferences\n        true_df = true_prob_df[vote_index].filter(regex=\'true*\')\n        # noinspection PyUnresolvedReferences\n        prob_df = true_prob_df[vote_index].filter(regex=\'prob*\')\n        """"""\n            prob_df\xe5\x8d\xb3\xe6\x98\xafy_prob_df\xe4\xb8\xad\xe6\x8b\xa5\xe6\x9c\x89\xe6\x9c\x89\xe6\x95\x88\xe6\x8a\x95\xe7\xa5\xa8\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8ctrue_df\xe5\xaf\xb9\xe5\xba\x94prob_df\xe7\x9a\x84index\n            eg\xef\xbc\x9aprob_df\n                 prob_0.0  prob_1.0\n            0         1.0       0.0\n            1         0.0       1.0\n            2         0.0       1.0\n            3         0.0       1.0\n            4         1.0       0.0\n            5         1.0       0.0\n            6         1.0       0.0\n            7         1.0       0.0\n            9         0.0       1.0\n            10        0.0       1.0\n            ..        ...       ...\n            880       0.0       1.0\n            881       1.0       0.0\n            882       0.0       1.0\n            883       1.0       0.0\n            884       1.0       0.0\n            885       1.0       0.0\n            886       1.0       0.0\n            887       0.0       1.0\n            889       1.0       0.0\n            890       1.0       0.0\n        """"""\n\n        # \xe7\x94\x9f\xe6\x95\x88\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe6\x8a\x95\xe7\xa5\xa8\xe4\xb8\x8d\xe5\x90\x88\xe6\xa0\xbc\xe7\x9a\x84\xe4\xb8\x8d\xe5\x81\x9a\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe7\xbb\x9f\xe8\xae\xa1\n        effect_cnt = prob_df.shape[0]\n        # \xe7\x94\x9f\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x9aeffect_cnt / y.shape[0]\n        effect_rate = effect_cnt / y.shape[0]\n        # \xe7\x94\x9f\xe6\x95\x88\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n        accuracy = 0.0\n        if effect_cnt > 0:\n            accuracy = metrics.accuracy_score(true_df, prob_df)\n        # \xe5\x88\x86\xe6\x95\xb0\xef\xbc\x9a\xe7\x94\x9f\xe6\x95\x88\xe6\xaf\x94\xe4\xbe\x8b \xef\xbc\x8a \xe7\x94\x9f\xe6\x95\x88\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xef\xbc\x880-1\xef\xbc\x89\n        score = effect_rate * accuracy\n        if show:\n            self.log_func(\n                \'threshold={} prob accuracy={:.2f}, effect cnt={}, effect rate={:.2f}, score={:.2f}\'.format(\n                    pb_threshold,\n                    accuracy,\n                    effect_cnt,\n                    effect_rate,\n                    score))\n        return accuracy, effect_cnt, effect_rate, score\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_KMEAN,))\n    def cross_val_silhouette_score(self, cv=10, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_KMEAN, ))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8d\xb3\n        \xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0kmean\xe7\x9a\x84cv\xe9\xaa\x8c\xe8\xaf\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8silhouette_score\xe5\xaf\xb9\xe8\x81\x9a\xe7\xb1\xbb\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9clabels_\n        \xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xe4\xbd\xbf\xe7\x94\xa8silhouette_score\n        :param cv: \xe9\x80\x8f\xe4\xbc\xa0run_silhouette_cv_estimator\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                       \xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\xa0\xe9\x80\x92ABuMLExecute.run_silhouette_cv_estimator\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0x\n                       \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n                            eg\xef\xbc\x9attn_abu.cross_val_silhouette_score(fiter_type=ml.EMLFitType.E_FIT_KMEAN)\n        :return: run_silhouette_cv_estimator\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84score\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                 eg: array([ 0.6322,  0.6935,  0.7187,  0.6887,  0.6699,  0.703 ,  0.6922,\n                            0.7049,  0.6462,  0.6755])\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        fiter = self.get_fiter()\n\n        scores = ABuMLExecute.run_silhouette_cv_estimator(fiter, x, n_folds=cv)\n        scores = np.array(scores)\n        self.log_func(\'{} score mean: {}\'.format(fiter.__class__.__name__, scores.mean()))\n        return scores\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\n    def cross_val_mean_squared_score(self, cv=10, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x92\x8c\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8cross_val_score\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8crmse\xe5\xba\xa6\xe9\x87\x8f\n        :param cv: \xe9\x80\x8f\xe4\xbc\xa0cross_val_score\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\xa0\xe9\x80\x92self._do_cross_val_score\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0x\xef\xbc\x8cy\xef\xbc\x8c\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.cross_val_roc_auc_score(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: cross_val_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84score\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                 eg: array([-0.1889, -0.1667, -0.2135, -0.1348, -0.1573, -0.2022, -0.1798,\n                            -0.2022, -0.1348, -0.1705])\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        return self._do_cross_val_score(x, y, cv, _EMLScoreType.E_SCORE_MSE.value)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\n    def cross_val_roc_auc_score(self, cv=10, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8cross_val_score\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8croc_auc\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84y\xe7\x9a\x84\n        label\xe6\xa0\x87\xe7\xad\xbe > 2\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87label_binarize\xe5\xb0\x86label\xe6\xa0\x87\xe7\xad\xbe\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n        \xe4\xbe\x9d\xe6\xac\xa1\xe8\xae\xa1\xe7\xae\x97\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xe7\x9a\x84\xe5\x88\x97\xe7\x9a\x84roc_auc\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9escore\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\xa6\xe9\x87\x8f\n        :param cv: \xe9\x80\x8f\xe4\xbc\xa0cross_val_score\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\xa0\xe9\x80\x92self._do_cross_val_score\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0x\xef\xbc\x8cy\xef\xbc\x8c\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.cross_val_roc_auc_score(fiter_type=ml.EMLFitType.E_FIT_REG)\n        :return: cross_val_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84score\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                 eg: array([ 1.  ,  0.9 ,  1.  ,  0.9 ,  1.  ,  0.9 ,  1.  ,  0.9 ,  0.95,  1.  ])\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        return self._do_cross_val_score(x, y, cv, _EMLScoreType.E_SCORE_ROC_AUC.value)\n\n    @entry_wrapper()\n    def feature_selection(self, show=True, **kwargs):\n        """"""\n            \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper()\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\n            \xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe9\x80\x9a\xe8\xbf\x87sklern\xe4\xb8\xad\xe7\x9a\x84RFE\xe5\x8c\x85\xe8\xa3\x85\xe6\x8b\x9f\xe5\x90\x88\xe5\x99\xa8\xe8\xbf\x9b\xe8\xa1\x8cfit(x, y)\xef\xbc\x8c\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8cranking\xe5\x92\x8csupport\xe8\xaf\x84\xe5\xae\x9a\n\n            eg\xef\xbc\x9a\n                RFE selection\n                             ranking support\n                SibSp              1    True\n                Parch              1    True\n                Cabin_No           1    True\n                Cabin_Yes          7   False\n                Embarked_C         2   False\n                Embarked_Q         3   False\n                Embarked_S         5   False\n                Sex_female         8   False\n                Sex_male           1    True\n                Pclass_1           4   False\n                Pclass_2           6   False\n                Pclass_3           1    True\n                Age_scaled         1    True\n                Fare_scaled        1    True\n\n            \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe9\x80\x9a\xe8\xbf\x87sklern\xe4\xb8\xad\xe7\x9a\x84VarianceThreshold\xe8\xbf\x9b\xe8\xa1\x8cfit(x)\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaex\xe7\x9a\x84\xe6\x96\xb9\xe5\xb7\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe8\xaf\x84\xe5\xae\x9a\n            eg:\n                unsupervised VarianceThreshold\n                            support\n                SibSp          True\n                Parch          True\n                Cabin_No       True\n                Cabin_Yes      True\n                Embarked_C     True\n                Embarked_Q     True\n                Embarked_S     True\n                Sex_female     True\n                Sex_male       True\n                Pclass_1       True\n                Pclass_2       True\n                Pclass_3       True\n                Age_scaled     True\n                Fare_scaled    True\n\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe8\xbe\x93\xe5\x87\xba\xe6\x89\x93\xe5\x8d\xb0\xe7\xbb\x93\xe6\x9e\x9c\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\xa0\xe9\x80\x92self._do_cross_val_score\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0x\xef\xbc\x8cy\xef\xbc\x8c\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.feature_selection(fiter_type=ml.EMLFitType.E_FIT_REG)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n\n        if self.is_supervised_learning():\n            selector = RFE(fiter)\n            selector.fit(x, y)\n            feature_df = pd.DataFrame({\n                \'support\': selector.support_, \'ranking\': selector.ranking_}, index=self.df.columns[1:])\n            if show:\n                self.log_func(\'RFE selection\')\n                self.log_func(feature_df)\n        else:\n            selector = VarianceThreshold()\n            selector.fit(x)\n            feature_df = pd.DataFrame({\n                \'support\': selector.get_support()}, index=self.df.columns[1:])\n            if show:\n                self.log_func(\'unsupervised VarianceThreshold\')\n                self.log_func(feature_df)\n        return feature_df\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\n    def importances_coef_pd(self, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x92\x8c\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaefit\xe5\x90\x8e\xe7\x9a\x84feature_importances_\xe6\x88\x96\xe8\x80\x85coef_\xe5\x92\x8c\xe5\x8e\x9f\xe5\xa7\x8bself.df.columns\n        \xe7\xbb\x84\xe6\x88\x90pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x94\xe5\x9b\x9e\n            eg\xef\xbc\x9a\n                    feature\t    importance\n                7\tSex_female\t0.0000\n                10\tPclass_2\t0.0018\n                3\tCabin_Yes\t0.0033\n                5\tEmbarked_Q\t0.0045\n                9\tPclass_1\t0.0048\n                4\tEmbarked_C\t0.0098\n                6\tEmbarked_S\t0.0105\n                1\tParch\t0.0154\n                2\tCabin_No\t0.0396\n                0\tSibSp\t0.0506\n                11\tPclass_3\t0.0790\n                13\tFare_scaled\t0.1877\n                12\tAge_scaled\t0.2870\n                8\tSex_male\t0.3060\n\n                    coef\t            columns\n                0\t[-0.344229036121]\tSibSp\n                1\t[-0.1049314305]\tParch\n                2\t[0.0]\tCabin_No\n                3\t[0.902140498996]\tCabin_Yes\n                4\t[0.0]\tEmbarked_C\n                5\t[0.0]\tEmbarked_Q\n                6\t[-0.417254399259]\tEmbarked_S\n                7\t[1.95656682017]\tSex_female\n                8\t[-0.677432099492]\tSex_male\n                9\t[0.3411515052]\tPclass_1\n                10\t[0.0]\tPclass_2\n                11\t[-1.19413332987]\tPclass_3\n                12\t[-0.523782082975]\tAge_scaled\n                13\t[0.0844326510536]\tFare_scaled\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.importances_coef_pd(fiter_type=ml.EMLFitType.E_FIT_REG)\n        :return: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if not hasattr(self, \'df\'):\n            raise ValueError(\'please make a df func first!\')\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n\n        fiter = self.get_fiter()\n        # \xe8\xae\xad\xe7\xbb\x83\xe5\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8cclone(fiter)\n        fiter = clone(fiter)\n        fiter.fit(x, y)\n\n        # self.echo_info(fiter)\n        if hasattr(fiter, \'feature_importances_\'):\n            return pd.DataFrame(\n                {\'feature\': list(self.df.columns)[1:], \'importance\': fiter.feature_importances_}).sort_values(\n                \'importance\')\n        elif hasattr(fiter, \'coef_\'):\n            return pd.DataFrame({""columns"": list(self.df.columns)[1:], ""coef"": list(fiter.coef_.T)})\n\n        else:\n            self.log_func(\'fiter not hasattr feature_importances_ or coef_!\')\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\n    def train_test_split_xy(self, test_size=0.1, random_state=0, **kwargs):\n        """"""\n            \xe8\xa2\xabentry_wrapper(support=(EMLFitType.E_FIT_CLF, ))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe5\x88\x86\xe7\xb1\xbb\n            \xe9\xa6\x96\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8train_test_split\xe5\xb0\x86x\xef\xbc\x8cy\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0test_size\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\n            \xe6\x98\xbe\xe7\xa4\xba\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\n            \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86x\xe8\xbf\x9b\xe8\xa1\x8cpredict\xef\xbc\x8c\xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe5\x88\x86\xe5\x88\xab\xe4\xbd\xbf\xe7\x94\xa8metrics.accuracy_score,\n            metrics.precision_score, metrics.recall_score\xe5\xba\xa6\xe9\x87\x8f\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xef\xbc\x8c\xe6\x9f\xa5\xe5\x87\x86\xe7\x8e\x87\xef\xbc\x8c\n            \xe5\x92\x8c\xe5\x8f\xac\xe5\x9b\x9e\xe7\x8e\x87\xef\xbc\x8c\xe5\xa4\x9alabel\xe7\x9a\x84\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8average = \'macro\'\xe5\xaf\xb9precision_score\xe5\x92\x8c\n            recall_score\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe6\x98\xbe\xe7\xa4\xba\xe5\x88\x86\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c\xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\xe4\xbb\xa5\xe5\x8f\x8ametrics.classification_report\n            \xe6\x83\x85\xe5\x86\xb5\n\n            eg:\n                x-y:(891, 14)-(891,)\n                train_x-train_y:(801, 14)-(801,)\n                test_x-test_y:(90, 14)-(90,)\n                accuracy = 0.77\n                precision_score = 0.74\n                recall_score = 0.72\n                          Predicted\n                         |  0  |  1  |\n                         |-----|-----|\n                       0 |  41 |  10 |\n                Actual   |-----|-----|\n                       1 |  11 |  28 |\n                         |-----|-----|\n                             precision    recall  f1-score   support\n\n                        0.0       0.79      0.80      0.80        51\n                        1.0       0.74      0.72      0.73        39\n\n                avg / total       0.77      0.77      0.77        90\n\n        :param test_size: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8d\xa0\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8cfloat\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.1\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x8610\xe4\xbb\xbd\xef\xbc\x8c\xe4\xb8\x80\xe4\xbb\xbd\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n        :param random_state: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99train_test_split\xe7\x9a\x84\xe9\x9a\x8f\xe6\x9c\xba\xe5\x8f\x82\xe6\x95\xb0\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.train_test_split_xy(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        train_x, test_x, train_y, test_y = train_test_split(x,\n                                                            y,\n                                                            test_size=test_size,\n                                                            random_state=random_state)\n        self.log_func(\'x-y:{}-{}\'.format(x.shape, y.shape))\n        self.log_func(\'train_x-train_y:{}-{}\'.format(train_x.shape, train_y.shape))\n        self.log_func(\'test_x-test_y:{}-{}\'.format(test_x.shape, test_y.shape))\n\n        fiter = self.get_fiter()\n        # \xe8\xae\xad\xe7\xbb\x83\xe5\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8cclone(fiter)\n        fiter = clone(fiter)\n        # \xe9\x92\x88\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\n        clf = fiter.fit(train_x, train_y)\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86x\xe8\xbf\x9b\xe8\xa1\x8cpredict\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9cy_predict\n        y_predict = clf.predict(test_x)\n\n        # \xe5\xba\xa6\xe9\x87\x8f\xe5\x88\x86\xe7\xb1\xbb\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n        self.log_func(""accuracy = %.2f"" % (metrics.accuracy_score(test_y, y_predict)))\n        # precision_score\xe5\x92\x8cpredictions\xe5\x9c\xa8\xe4\xba\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8binary\n        average = \'binary\'\n        if len(np.unique(y)) != 2:\n            # \xe2\x80\x9cmicro\xe8\xa1\xa8\xe7\xa4\xba\xe5\x9c\xa8\xe5\xa4\x9a\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xe7\x9a\x84\xe5\xaf\xb9\xe6\x89\x80\xe6\x9c\x89label\xe8\xbf\x9b\xe8\xa1\x8caveraging\xe8\xae\xa1\xe7\xae\x97\xe5\xb9\xb3\xe5\x9d\x87precision\xef\xbc\x8crecall\xe4\xbb\xa5\xe5\x8f\x8aF\xe5\x80\xbc\xe7\xad\x89\xe5\xba\xa6\xe9\x87\x8f\n            average = \'macro\'\n        # \xe5\xba\xa6\xe9\x87\x8f\xe5\x88\x86\xe7\xb1\xbb\xe6\x9f\xa5\xe5\x87\x86\xe7\x8e\x87\n        self.log_func(""precision_score = %.2f"" % (metrics.precision_score(test_y, y_predict, average=average)))\n        # \xe5\xba\xa6\xe9\x87\x8f\xe5\x88\x86\xe7\xb1\xbb\xe5\x8f\xac\xe5\x9b\x9e\xe7\x8e\x87\n        self.log_func(""recall_score = %.2f"" % (metrics.recall_score(test_y, y_predict, average=average)))\n        # \xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\xe4\xbb\xa5\xe5\x8f\x8ametrics.classification_report\n        self._confusion_matrix_with_report(test_y, y_predict, labels=np.unique(y))\n\n    def train_test_split_df(self, test_size=0.1, random_state=0, **kwargs):\n        """"""\n        \xe5\xa5\x97\xe6\x8e\xa5\xe5\xb0\x81\xe8\xa3\x85train_test_split_xy\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe4\xbc\xa0\xe9\x80\x92pd.DataFrame\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\n        :param test_size: \xe9\x80\x8f\xe4\xbc\xa0\xe5\x8f\x82\xe6\x95\xb0train_test_split_xy\n        :param random_state: \xe9\x80\x8f\xe4\xbc\xa0\xe5\x8f\x82\xe6\x95\xb0train_test_split_xy\n        :param kwargs: \xe9\x80\x9a\xe8\xbf\x87 df = kwargs.pop(\'df\', self.df)\xe5\xbc\xb9\xe5\x87\xba\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8cx\xef\xbc\x8cy\xe5\x88\x86\xe8\xa7\xa3\n                       y = matrix[:, 0]\xef\xbc\x8c\xe5\x8d\xb3\xe7\xa1\xac\xe7\xbc\x96\xe7\xa0\x81\xe5\x88\x86\xe7\xb1\xbby\xe5\x9c\xa8\xe7\xac\xac\xe4\xb8\x80\xe5\x88\x97\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84df\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x9c\x80\xe8\xa6\x81\xe9\x81\xb5\xe5\xbe\xaa\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.train_test_split_df(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        df = kwargs.pop(\'df\', self.df)\n        matrix = df.as_matrix()\n        y = matrix[:, 0]\n        x = matrix[:, 1:]\n        self.train_test_split_xy(test_size=test_size, random_state=random_state, x=x, y=y, **kwargs)\n\n    @entry_wrapper()\n    def fit(self, **kwargs):\n        """"""\n        \xe5\x8c\x85\xe8\xa3\x85fit\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe6\x9d\xa5\xe5\x8c\xba\xe5\x88\xab\n        \xe4\xbd\xbf\xe7\x94\xa8fit(x, y)\xe8\xbf\x98\xe6\x98\xaffit(x)\n\n            eg:\n               in:   iris_abu.estimator.random_forest_classifier()\n                     iris_abu.fit()\n               out:\n                     RandomForestClassifier(bootstrap=True, class_weight=None, criterion=\'gini\',\n                                            max_depth=None, max_features=\'auto\', max_leaf_nodes=None,\n                                            min_impurity_split=1e-07, min_samples_leaf=1,\n                                            min_samples_split=2, min_weight_fraction_leaf=0.0,\n                                            n_estimators=100, n_jobs=1, oob_score=False, random_state=None,\n                                            verbose=0, warm_start=False)\n        :param kwargs:\n        :return: fit(x, y)\xe6\x88\x96\xe8\x80\x85fit(x)\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n        if hasattr(fiter, \'fit\'):\n            if self.is_supervised_learning():\n                fit_self = fiter.fit(x, y)\n            else:\n                fit_self = fiter.fit(x)\n            return fit_self\n        else:\n            self.log_func(\'{} not support fit\'.format(fiter))\n\n    @entry_wrapper()\n    def fit_transform(self, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8@entry_wrapper()\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\n        \xe5\x86\x85\xe9\x83\xa8\xe9\x80\x9a\xe8\xbf\x87\xe6\xa3\x80\xe6\xb5\x8bisinstance(fiter, TransformerMixin) or hasattr(fiter, \'fit_transform\')\n        \xe6\x9d\xa5\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe4\xbb\xa5fit_transform\n\n        eg\xef\xbc\x9a\n            input:  ttn_abu.x.shape\n            output: (891, 14)\n\n            input:  ttn_abu.fit_transform(fiter_type=ml.EMLFitType.E_FIT_PCA).shape\n            output: (891, 4)\n\n            input:  ttn_abu.fit_transform(fiter_type=ml.EMLFitType.E_FIT_KMEAN).shape\n            output: (891, 2)\n\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                       \xe4\xbb\xa5\xe5\x8f\x8a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.fit_transform(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: fit_transform\xe5\x90\x8e\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\n        """"""\n        fiter = self.get_fiter()\n        if isinstance(fiter, TransformerMixin) or hasattr(fiter, \'fit_transform\'):\n            x = kwargs.pop(\'x\', self.x)\n            y = kwargs.pop(\'y\', self.y)\n            if self.is_supervised_learning():\n                trans = fiter.fit_transform(x, y)\n            else:\n                trans = fiter.fit_transform(x)\n            return trans\n        else:\n            self.log_func(\'{} not support fit_transform\'.format(fiter))\n\n    def predict(self, x, pre_fit=True, **kwargs):\n        """"""\n        call\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9a\x84predict\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5self._predict_callback\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x85\xb6\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xb0\x86predict\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x98\xe6\x88\x90numpy\xef\xbc\x8c\n        \xe5\x8d\xb3\xe7\xbb\x9f\xe4\xb8\x80\xe5\xb0\x86x\xe8\xbd\xac\xe6\x8d\xa2numpy\xe5\xba\x8f\xe5\x88\x97,\n            eg:\n                test_input = pd.DataFrame.from_dict({\'x0\': 6.8, \'x1\': 3.5,  \'x2\': 5.4, \'x3\': 2.2}, orient=\'index\')\n                test_input:\n                                0\n                            x0\t6.8\n                            x1\t3.5\n                            x2\t5.4\n                            x3\t2.2\n\n                iris_abu.predict(test_input)\n\n                params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x90\x8e\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84x\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xef\xbc\x9aarray([[ 6.8,  3.5,  5.4,  2.2]]) numpy array\n\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper()\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\n        :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2numpy\n        :param pre_fit: bool\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4pre_fit True, \xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe6\xac\xa1predict\xe5\x89\x8d\xe5\x85\x88fit\xef\xbc\x8c\n                        \xe5\xa6\x82\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8\xe5\x85\x88fit\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0pre_fit\xe7\xbd\xaeFalse\n        :param kwargs: \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.predict(test_input, fiter_type=ml.EMLFitType.E_FIT_KMEAN)\n        :return: eg: array([2])\n        """"""\n        return self._predict_callback(\'predict\', x, pre_fit=pre_fit, **kwargs)\n\n    def predict_proba(self, x, pre_fit=True, **kwargs):\n        """"""\n        call\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9a\x84predict_proba\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5self._predict_callback\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x85\xb6\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xb0\x86predict\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x98\xe6\x88\x90numpy\xef\xbc\x8c\n        \xe5\x8d\xb3\xe7\xbb\x9f\xe4\xb8\x80\xe5\xb0\x86x\xe8\xbd\xac\xe6\x8d\xa2numpy\xe5\xba\x8f\xe5\x88\x97,\n            eg:\n                test_input = pd.DataFrame.from_dict({\'x0\': 6.8, \'x1\': 3.5,  \'x2\': 5.4, \'x3\': 2.2}, orient=\'index\')\n                test_input:\n                                0\n                            x0\t6.8\n                            x1\t3.5\n                            x2\t5.4\n                            x3\t2.2\n\n                iris_abu.predict_proba(test_input, fiter_type=ml.EMLFitType.E_FIT_CLF)\n\n                params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x90\x8e\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84x\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xef\xbc\x9aarray([[ 6.8,  3.5,  5.4,  2.2]]) numpy array\n\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper()\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\n        :param x: \xe9\x80\x9a\xe8\xbf\x87params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2numpy\n        :param pre_fit: bool\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4pre_fit True, \xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe6\xac\xa1predict\xe5\x89\x8d\xe5\x85\x88fit\xef\xbc\x8c\n                        \xe5\xa6\x82\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8\xe5\x85\x88fit\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0pre_fit\xe7\xbd\xaeFalse\n        :param kwargs: \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9airis_abu.predict_proba(test_input, fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: eg: array([[ 0.2,  0.3,  0.5]])\n        """"""\n        return self._predict_callback(\'predict_proba\', x, pre_fit=pre_fit, **kwargs)\n\n    def predict_proba_threshold(self, x, threshold, default_ret, pre_fit=True, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            in:  ttn_abu = AbuML.create_test_more_fiter()\n            in:  ttn_abu.estimator.svc(probability=True)\n            in\xef\xbc\x9a ttn_abu.search_match_pos_threshold(0.85, 0.80, fiter_type=ml.EMLFitType.E_FIT_CLF)\n            out: 0.770 satisfy require, accuracy:0.850, effect_rate:0.854\n\n            \xe5\x8d\xb3\xe9\x80\x9a\xe8\xbf\x87search_match_pos_threshold\xe8\x8e\xb7\xe5\x8f\x96\xe4\xba\x86predict_proba\xe7\x9a\x84\xe4\xba\x8c\xe5\x88\x86\xe9\x98\x80\xe5\x80\xbc\xe4\xb8\xba0.77\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe8\xbe\xbe\xe5\x88\xb00.85\xef\xbc\x8c \xe4\xb8\x94\xe8\xa6\x86\xe7\x9b\x9680%\xe6\xa0\xb7\xe6\x9c\xac\n\n            in:  test = np.array([ 1.    ,  0.    ,  0.    ,  1.    ,  1.    ,  0.    ,  0.    ,1.    ,  0.    ,  1.\n                                ,  0.    ,  0.    ,  0.8132,  0.5868])\n            in:  ttn_abu.predict_proba(test)\n            out: array([[ 0.106,  0.894]])\n            \xe4\xbd\xbf\xe7\x94\xa8predict_proba\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe6\x98\xaf\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\n\n            in:  ttn_abu.predict_proba_threshold(test, threshold=0.77 ,default_ret=0)\n            out: 1\n            \xe4\xbd\xbf\xe7\x94\xa8predict_proba_threshold\xe5\xb0\x86\xe9\x98\x80\xe5\x80\xbcthreshold\xe8\xae\xbe\xe5\xae\x9a0.77\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xbe\x97\xe5\x88\xb0\xe8\xbe\x93\xe5\x87\xba\xe4\xb8\xba1\xef\xbc\x8c\xe5\x8d\xb3\xe6\xa6\x82\xe7\x8e\x87 0.894 > 0.77, \xe6\xa0\x87\xe7\xad\xbe1\xe5\x88\x86\xe7\xb1\xbb\xe6\x88\x90\xe7\xab\x8b\n\n            in:  test2 = np.array([ 0.    ,  1.    ,  1.    ,  0.    ,  1.    ,  1.    ,  0.    ,1.    ,  0.    ,  0.\n                                ,  0.    ,  1.    ,  0.7832,  0.2868])\n            in:  ttn_abu.predict_proba(test2)\n            out: array([[ 0.2372,  0.7628]])\n\n            in:  ttn_abu.predict_proba_threshold(test2, threshold=0.77 ,default_ret=0)\n            out: 0\n            \xe5\xaf\xb9test2\xe5\x81\x9apredict_proba_threshold\xe8\xbf\x94\xe5\x9b\x9e0\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba0.7628 < 0.77, \xe6\xa0\x87\xe7\xad\xbe1\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\x8d\xe6\x88\x90\xe7\xab\x8b\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9edefault_ret\n\n            \xe5\xba\x94\xe7\x94\xa8\xe5\x9c\xba\xe6\x99\xaf\xef\xbc\x9a\xe6\xaf\x94\xe5\xa6\x82\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe5\xae\x9e\xe8\xa1\x8c\xe9\xab\x98\xe6\x94\xbe\xe8\xa1\x8c\xe7\x8e\x87\xef\xbc\x8c\xe4\xbd\x8e\xe6\x8b\xa6\xe6\x88\xaa\xe7\x8e\x87\xef\xbc\x8c0\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x94\xbe\xe8\xa1\x8c\xef\xbc\x8c1\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\n                    \xe4\xb8\x8a\xe8\xbf\xb0predict_proba_threshold(test2, threshold=0.77 ,default_ret=0)\n                    \xe5\x8d\xb3\xe5\x8f\xaf\xe5\xae\x9e\xe8\xa1\x8c\xe5\xaf\xb9\xe8\xbe\x83\xe5\xa4\xa7\xe6\xa6\x82\xe7\x8e\x87\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe5\x8d\xb3\xe6\x8a\x8a\xe6\x8f\xa1\xe5\xa4\xa7\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe6\x8a\x8a\xe6\x8f\xa1\xe4\xb8\x8d\xe5\xa4\xa7\xe7\x9a\x84\xe9\xbb\x98\xe8\xae\xa4\xe9\x80\x89\xe6\x8b\xa9\xe6\x94\xbe\xe8\xa1\x8c\n        :param x: \xe5\x9c\xa8predict_proba\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2numpy\n        :param threshold: \xe5\xaf\xb9predict_proba\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc eg\xef\xbc\x9a threshold=0.77\n        :param default_ret: \xe4\xbd\xbf\xe7\x94\xa8predict_proba\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x9f\xa2\xe9\x87\x8f\xe5\x92\x8c\xe4\xb8\x8d\xe7\xad\x89\xe4\xba\x8e1\xe6\x97\xb6\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9c\x89\xe6\x95\x88\xe6\x8a\x95\xe7\xa5\xa8\xe6\x97\xb6\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x9a\n                            eg\xef\xbc\x9a\n                                    proba = np.where(proba >= threshold, 1, 0)\n                                    if proba.sum() != 1:\n                                        # eg: proba = array([[ 0.2328,  0.7672]])->array([[0, 0]])\n                                        return default_ret\n        :param pre_fit: bool\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4pre_fit True, \xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe6\xac\xa1predict\xe5\x89\x8d\xe5\x85\x88fit\xef\xbc\x8c\n                        \xe5\xa6\x82\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8\xe5\x85\x88fit\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0pre_fit\xe7\xbd\xaeFalse\n        :param kwargs: \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n                        eg\xef\xbc\x9airis_abu.predict_proba_threshold(test_input, , threshold=0.77 ,default_ret=0\n                                                            fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: int\xef\xbc\x8cdefault_ret or proba.argmax()\n        """"""\n        # \xe5\xa5\x97\xe6\x8e\xa5self.predict_proba\xe5\xaf\xb9x\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa6\x82\xe7\x8e\x87proba\n        proba = self.predict_proba(x, pre_fit=pre_fit, **kwargs)\n        # eg\xef\xbc\x9aarray([[ 0.1063,  0.8937]]) -> array([[0, 1]])\n        # noinspection PyTypeChecker\n        proba = np.where(proba >= threshold, 1, 0)\n        if proba.sum() != 1:\n            # eg: proba = array([[ 0.2328,  0.7672]])->array([[0, 0]])\n            return default_ret\n        # \xe5\x94\xaf\xe4\xb8\x80\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe5\xb0\xb1\xe6\x98\xaf\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe4\xb8\xba1\xe7\x9a\x84\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87argmax\xe8\x8e\xb7\xe5\x8f\x96index\xef\xbc\x8c\xe5\x8d\xb3y label\n        return proba.argmax()\n\n    @params_to_numpy\n    @entry_wrapper()\n    def _predict_callback(self, callback, x, pre_fit=True, **kwargs):\n        """"""\n        \xe7\xbb\x9f\xe4\xb8\x80\xe5\xb0\x81\xe8\xa3\x85predict\xe5\x92\x8cpredict\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\xb5\x81\xe7\xa8\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8callback\xe5\x81\x9a\xe4\xb8\xba\xe5\x85\xb7\xe4\xbd\x93\xe5\xae\x9e\xe7\x8e\xb0\n        :param callback: str\xe5\xad\x97\xe7\xac\xa6\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe6\x98\xafcallable\xe7\xb1\xbb\xe5\x9e\x8b\n        :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87params_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2numpy\n        :param pre_fit: bool\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4pre_fit True, \xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe6\xac\xa1predict\xe5\x89\x8d\xe5\x85\x88fit\xef\xbc\x8c\n                        \xe5\xa6\x82\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8\xe5\x85\x88fit\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0pre_fit\xe7\xbd\xaeFalse\n        :param kwargs: \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8ceg\xef\xbc\x9attn_abu.predict(test_input, fiter_type=ml.EMLFitType.E_FIT_KMEAN)\n        :return: eg: array([2])\n        """"""\n        # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe8\xbe\x93\xe5\x85\xa5x\n        x = x.reshape(1, -1)\n        if self.x[0].reshape(1, -1).shape != x.shape:\n            # predict\xe4\xb8\xad\xe6\x9c\x89check_input=True\xe4\xb9\x9fcheck\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe5\x81\x9a\xe4\xb8\xbainput x\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\n            self.log_func(\'input x must similar with {}\'.format(self.x[0]))\n            return\n\n        if pre_fit:\n            # \xe9\xbb\x98\xe8\xae\xa4pre_fit True, \xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe6\xac\xa1predict\xe5\x89\x8d\xe5\x85\x88fit\xef\xbc\x8c\xe5\xa6\x82\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8\xe5\x85\x88fit\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0pre_fit\xe7\xbd\xaeFalse\n            self.fit(**kwargs)\n\n        fiter = self.get_fiter()\n        if not isinstance(callback, six.string_types):\n            # callback\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\n            self.log_func(\'callback must str, not {}\'.format(type(callback)))\n            return\n\n        if hasattr(fiter, callback):\n            if \'check_input\' in list(signature(fiter.predict).parameters.keys()):\n                # \xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\x89check_input\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xef\xbc\x8ccheck_input True, \xe5\x9b\xa0\xe4\xb8\xba\xe5\x89\x8d\xe9\x9d\xa2X.dtype np.float32\xe7\xad\x89\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe9\x97\xae\xe9\xa2\x98\n                return getattr(fiter, callback)(x, check_input=True)\n            else:\n                return getattr(fiter, callback)(x)\n        else:\n            self.log_func(\'{} not support {}\'.format(fiter, callback))\n\n    # TODO \xe9\x9c\x80\xe8\xa6\x81\xe9\x87\x8d\xe6\x9e\x84\xe8\xbf\x99\xe4\xb8\xaa\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa4\xaa\xe9\x95\xbf\xe4\xba\x86\n\n    def search_match_neg_threshold(self, accuracy_match=0, effect_rate_match=0, neg_num=50, **kwargs):\n        """"""\n        \xe5\xa5\x97\xe6\x8e\xa5self.cross_val_prob_accuracy_score\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87np.linspace(0.01, 0.50, num=neg_num)[::-1]\xe7\x94\x9f\xe6\x88\x90\n        pb_threshold\xe5\x8f\x82\xe6\x95\xb0\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8clinspace\xe7\x9a\x84start\xe4\xbb\x8e0.01\xe8\x87\xb30.50\xe5\x90\x8e[::-1]\xe5\x80\x92\xe5\xba\x8f\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xbf\xad\xe4\xbb\xa3\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\x82\xe6\x95\xb0\n        \xef\xbc\x8c\xe5\xbd\x93cross_val_prob_accuracy_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xadaccuracy_match\xe4\xb8\x94\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x94\x9f\xe6\x95\x88\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84effect_rate_match\xef\xbc\x8c\n        \xe5\x8c\xb9\xe9\x85\x8d\xe5\xaf\xbb\xe6\x89\xbe\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe4\xb8\xad\xe6\x96\xad\xe8\xbf\xad\xe4\xbb\xa3\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xe5\xba\x94\xe7\x94\xa8\xe5\x9c\xba\xe6\x99\xaf\xe9\x98\x85\xe8\xaf\xbbpredict_proba_threshold\xe5\x87\xbd\xe6\x95\xb0\n\n            eg:\n                in:  ttn_abu.search_match_neg_threshold(0.85, 0.80, fiter_type=ml.EMLFitType.E_FIT_CLF)\n                out: 0.220 satisfy require, accuracy:0.852, effect_rate:0.844\n\n        :param accuracy_match: \xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\x80\xe5\x80\xbc\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xbd\x93cross_val_prob_accuracy_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8eaccuracy_match\xef\xbc\x8c\n                               float\xef\xbc\x8c \xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x880-1\xef\xbc\x89\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc0\n        :param effect_rate_match: \xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\x80\xe5\x80\xbc\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xbd\x93cross_val_prob_accuracy_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x94\x9f\xe6\x95\x88\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8eeffect_rate_match\xef\xbc\x8c\n                               float\xef\xbc\x8c \xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x880-1\xef\xbc\x89\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc0\n        :param neg_num: \xe9\x80\x8f\xe4\xbc\xa0neg_thresholds = np.linspace(0.01, 0.50, num=neg_num)[::-1]\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa450\n        :param kwargs: \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n                    eg: iris_abu.search_match_neg_threshold(0.85, 0.80, fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cfloat\n        """"""\n        neg_thresholds = np.linspace(0.01, 0.50, num=neg_num)[::-1]\n        """"""\n            eg: neg_thresholds\n                array([ 0.5 ,  0.49,  0.48,  0.47,  0.46,  0.45,  0.44,  0.43,  0.42,\n            0.41,  0.4 ,  0.39,  0.38,  0.37,  0.36,  0.35,  0.34,  0.33,\n            0.32,  0.31,  0.3 ,  0.29,  0.28,  0.27,  0.26,  0.25,  0.24,\n            0.23,  0.22,  0.21,  0.2 ,  0.19,  0.18,  0.17,  0.16,  0.15,\n            0.14,  0.13,  0.12,  0.11,  0.1 ,  0.09,  0.08,  0.07,  0.06,\n            0.05,  0.04,  0.03,  0.02,  0.01])\n        """"""\n        with AbuProgress(len(neg_thresholds), 0, \'search neg threshold\') as search_neg_progress:\n            for neg in neg_thresholds:\n                accuracy, _, effect_rate, _ = self.cross_val_prob_accuracy_score(neg, show=False, **kwargs)\n                search_neg_progress.show(ext=\'threshold:{:.2f} accuracy:{:.2f}, effect_rate:{:.2f}\'.format(\n                    neg, accuracy, effect_rate))\n                if accuracy >= accuracy_match and effect_rate >= effect_rate_match:\n                    # eg: 0.500 satisfy require, accuracy:0.940, effect_rate:1.000\n                    self.log_func(\'{:.3f} satisfy require, accuracy:{:.3f}, effect_rate:{:.3f}\'.format(\n                        neg, accuracy, effect_rate))\n                    # \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\n                    return neg\n        # \xe8\xbf\xad\xe4\xbb\xa3\xe5\xae\x8c\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89neg_thresholds\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\xbe\xe5\x88\xb0\xe7\xac\xa6\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe9\x9c\x80\xe6\xb1\x82\xe7\x9a\x84\xe4\xba\x8c\xe5\x88\x86\xe9\x98\x80\xe5\x80\xbc\n        self.log_func(\'neg_thresholds no satisfy require, search failed!\')\n\n    def search_match_pos_threshold(self, accuracy_match=0, effect_rate_match=0, pos_num=50, **kwargs):\n        """"""\n        \xe5\xa5\x97\xe6\x8e\xa5self.cross_val_prob_accuracy_score\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87np.linspace(0.50, 0.99, num=neg_num)\xe7\x94\x9f\xe6\x88\x90\n        pb_threshold\xe5\x8f\x82\xe6\x95\xb0\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8clinspace\xe7\x9a\x84start\xe4\xbb\x8e0.50\xe8\x87\xb30.99\xe6\xad\xa3\xe5\xba\x8f\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe8\xbf\xad\xe4\xbb\xa3\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xe5\x8f\x82\xe6\x95\xb0\n        \xef\xbc\x8c\xe5\xbd\x93cross_val_prob_accuracy_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xadaccuracy_match\xe4\xb8\x94\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x94\x9f\xe6\x95\x88\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84effect_rate_match\xef\xbc\x8c\n        \xe5\x8c\xb9\xe9\x85\x8d\xe5\xaf\xbb\xe6\x89\xbe\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe4\xb8\xad\xe6\x96\xad\xe8\xbf\xad\xe4\xbb\xa3\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xe5\xba\x94\xe7\x94\xa8\xe5\x9c\xba\xe6\x99\xaf\xe9\x98\x85\xe8\xaf\xbbpredict_proba_threshold\xe5\x87\xbd\xe6\x95\xb0\n\n                eg:\n                    in: ttn_abu.search_match_pos_threshold(0.85, 0.80, fiter_type=ml.EMLFitType.E_FIT_CLF)\n                    out: 0.770 satisfy require, accuracy:0.850, effect_rate:0.854\n\n        :param accuracy_match: \xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\x80\xe5\x80\xbc\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xbd\x93cross_val_prob_accuracy_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8eaccuracy_match\xef\xbc\x8c\n                               float\xef\xbc\x8c \xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x880-1\xef\xbc\x89\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc0\n        :param effect_rate_match: \xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\x80\xe5\x80\xbc\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xbd\x93cross_val_prob_accuracy_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x94\x9f\xe6\x95\x88\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8eeffect_rate_match\xef\xbc\x8c\n                               float\xef\xbc\x8c \xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x880-1\xef\xbc\x89\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc0\n        :param pos_num: \xe9\x80\x8f\xe4\xbc\xa0neg_thresholds = np.linspace(0.50, 0.99, num=neg_num)\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa450\n        :param kwargs: \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n                    eg: iris_abu.search_match_pos_threshold(0.85, 0.80, fiter_type=ml.EMLFitType.E_FIT_CLF)\n        :return: \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cfloat\n        """"""\n        pos_thresholds = np.linspace(0.50, 0.99, num=pos_num)\n        """"""\n            eg: array([ 0.5 ,  0.51,  0.52,  0.53,  0.54,  0.55,  0.56,  0.57,  0.58,\n                0.59,  0.6 ,  0.61,  0.62,  0.63,  0.64,  0.65,  0.66,  0.67,\n                0.68,  0.69,  0.7 ,  0.71,  0.72,  0.73,  0.74,  0.75,  0.76,\n                0.77,  0.78,  0.79,  0.8 ,  0.81,  0.82,  0.83,  0.84,  0.85,\n                0.86,  0.87,  0.88,  0.89,  0.9 ,  0.91,  0.92,  0.93,  0.94,\n                0.95,  0.96,  0.97,  0.98,  0.99])\n        """"""\n        with AbuProgress(len(pos_thresholds), 0, \'search pos threshold\') as search_pos_progress:\n            for neg in pos_thresholds:\n                accuracy, _, effect_rate, _ = self.cross_val_prob_accuracy_score(neg, show=False, **kwargs)\n                search_pos_progress.show(ext=\'threshold:{:.2f} accuracy:{:.2f}, effect_rate:{:.2f}\'.format(\n                    neg, accuracy, effect_rate))\n                if accuracy >= accuracy_match and effect_rate >= effect_rate_match:\n                    # eg: 0.500 satisfy require, accuracy:0.940, effect_rate:1.000\n                    self.log_func(\'{:.3f} satisfy require, accuracy:{:.3f}, effect_rate:{:.3f}\'.format(\n                        neg, accuracy, effect_rate))\n                    # \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\n                    return neg\n        # \xe8\xbf\xad\xe4\xbb\xa3\xe5\xae\x8c\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89pos_thresholds\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\xbe\xe5\x88\xb0\xe7\xac\xa6\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe9\x9c\x80\xe6\xb1\x82\xe7\x9a\x84\xe4\xba\x8c\xe5\x88\x86\xe9\x98\x80\xe5\x80\xbc\n        self.log_func(\'pos_thresholds no satisfy require, search failed!\')\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\n    def plot_learning_curve(self, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x92\x8c\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe5\xbd\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x9a\x84y\xe6\xa0\x87\xe7\xad\xbelabel\xe9\x9d\x9e2\xe5\x88\x86\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\n        \xe4\xbd\xbf\xe7\x94\xa8OneVsOneClassifier\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\n        :param kwargs:\n                    \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                    \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n                    eg:\n                        ttn_abu = AbuML.create_test_more_fiter()\n                        ttn_abu.plot_learning_curve(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n\n        fiter = self.get_fiter()\n        if self.fiter_type == EMLFitType.E_FIT_CLF and len(np.unique(y)) != 2:\n            # \xe5\xa4\x9a\xe6\xa0\x87\xe7\xad\xbe\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8OneVsOneClassifier\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8conevsreset_classifier\xe5\x8f\x82\xe6\x95\xb0assign\xe9\xbb\x98\xe8\xae\xa4\xe6\x98\xaffalse\n            fiter = self.estimator.onevsreset_classifier(fiter)\n        ABuMLExecute.plot_learning_curve(fiter, x, y)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\n    def plot_graphviz_tree(self, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x92\x8c\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe5\x86\xb3\xe7\xad\x96\xe6\xa0\x91\xe6\x88\x96\xe8\x80\x85core\xe5\x9f\xba\xe4\xba\x8e\xe6\xa0\x91\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe5\x9b\x9e\xe5\xbd\x92\xe7\xae\x97\xe6\xb3\x95\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe7\xa4\xba\xe6\x84\x8f\xe5\x9b\xbe\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe6\x9f\xa5\xe7\x9c\x8b\n        \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe6\x9c\xac\xe8\xba\xabhasattr(fiter, \'tree_\')\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89tree_\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbd\xbf\xe7\x94\xa8\xe5\x86\xb3\xe7\xad\x96\xe6\xa0\x91\xe6\x9b\xbf\xe6\x8d\xa2\n\n        :param kwargs:  \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                                x = kwargs.pop(\'x\', self.x)\n                                y = kwargs.pop(\'y\', self.y)\n                        \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n                        eg:\n                            ttn_abu = AbuML.create_test_more_fiter()\n                            ttn_abu.plot_graphviz_tree(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n\n        if not hasattr(fiter, \'tree_\'):\n            self.log_func(\'{} not hasattr tree_, use decision tree replace\'.format(\n                fiter.__class__.__name__))\n\n            if isinstance(fiter, ClassifierMixin):\n                # FIXME \xe6\x9c\x80\xe5\xa5\xbd\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8ClassifierMixin\xe5\x88\xa4\xe5\xae\x9a\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x99\x90\xe5\xae\x9a\xe4\xba\x86sklearn\n                fiter = self.estimator.decision_tree_classifier(assign=False)\n            elif isinstance(fiter, RegressorMixin):\n                # # FIXME \xe6\x9c\x80\xe5\xa5\xbd\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8RegressorMixin, AbuMLCreater\xe4\xb8\xad\xe5\xbc\x95\xe7\x94\xa8\xe4\xba\x86hmmlearn\xef\xbc\x8cxgboost\xe7\xad\x89\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe5\xba\x93\n                fiter = self.estimator.decision_tree_regressor(assign=False)\n            else:\n                fiter = self.estimator.decision_tree_classifier(assign=False)\n        # \xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86self.df.columns\xe5\x81\x9a\xe4\xb8\xba\xe5\x90\x8d\xe5\xad\x97\xe4\xbc\xa0\xe5\x85\xa5\n        return ABuMLExecute.graphviz_tree(fiter, self.df.columns, x, y)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\n    def plot_visualize_tree(self, use_pca=True, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x92\x8c\xe5\x88\x86\xe7\xb1\xbb, \xe7\xbb\x98\xe5\x88\xb6\xe7\x89\xb9\xe5\xbe\x81\xe5\xb9\xb3\xe9\x9d\xa2\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\xb9\xb3\xe9\x9d\xa2\xe9\x9c\x80\xe8\xa6\x81x\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\xe5\x8f\xaa\xe8\x83\xbd\xe6\x98\xaf2\xe7\xbb\xb4\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xaf\xb9\n        x\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xa4\x9a\xe4\xba\x8e\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8pca\xef\xbc\x8c\xe8\xbf\x98\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x89\xe6\x8b\xa9\xe6\xa0\xb9\xe6\x8d\xae\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x87\x8d\xe8\xa6\x81, \xe7\xa8\x8b\xe5\xba\xa6\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\xa4\xe4\xb8\xaaimportances\n        \xe6\x9c\x80\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe5\xb9\xb3\xe9\x9d\xa2\xe7\xbb\x98\xe5\x88\xb6\n\n        :param use_pca: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8pca\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xef\xbc\x8cbool\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                        x = kwargs.pop(\'x\', self.x)\n                        y = kwargs.pop(\'y\', self.y)\n            \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n            eg:\n                ttn_abu = AbuML.create_test_more_fiter()\n                ttn_abu.plot_visualize_tree(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\n        x = self._decomposition_2x(x, use_pca=use_pca)\n        ABuMLExecute.visualize_tree(fiter, x, y)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\n    def plot_decision_function(self, use_pca=True, **kwargs):\n        """"""\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8entry_wrapper(support=(EMLFitType.E_FIT_CLF, EMLFitType.E_FIT_REG))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n        \xe5\x8d\xb3\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x92\x8c\xe5\x88\x86\xe7\xb1\xbb\n        :param use_pca: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8pca\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xef\xbc\x8cbool\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                        x = kwargs.pop(\'x\', self.x)\n                        y = kwargs.pop(\'y\', self.y)\n            \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n            eg:\n                ttn_abu = AbuML.create_test_more_fiter()\n                ttn_abu.plot_decision_function(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\n        x = self._decomposition_2x(x, use_pca=use_pca)\n        # \xe8\xae\xad\xe7\xbb\x83\xe5\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8cclone(fiter)\n        fiter = clone(fiter)\n        fiter.fit(x, y)\n        ABuMLExecute.plot_decision_boundary(lambda p_x: fiter.predict(p_x), x, y)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\n    def plot_roc_estimator(self, pos_label=None, **kwargs):\n        """"""\n        \xe8\xa2\xabentry_wrapper(support=(EMLFitType.E_FIT_CLF, ))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe5\x88\x86\xe7\xb1\xbb\n        \xe8\xae\xa1\xe7\xae\x97fpr, tpr, thresholds\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe7\xbb\x98\xe5\x88\xb6roc_auc\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n\n        :param pos_label:\n        :param kwargs: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                        x = kwargs.pop(\'x\', self.x)\n                        y = kwargs.pop(\'y\', self.y)\n            \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n            eg:\n                ttn_abu = AbuML.create_test_more_fiter()\n                ttn_abu.plot_roc_estimator(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n        fiter = self.get_fiter()\n        ABuMLExecute.plot_roc_estimator(fiter, x, y, pos_label=pos_label)\n\n    @entry_wrapper(support=(EMLFitType.E_FIT_CLF,))\n    def plot_confusion_matrices(self, **kwargs):\n        """"""\n        \xe8\xa2\xabentry_wrapper(support=(EMLFitType.E_FIT_CLF, ))\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe5\x88\x86\xe7\xb1\xbb\n        \xe5\xa5\x97\xe6\x8e\xa5plot_confusion_matrices\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x8b\x86\xe5\xb0\x81\xe5\x88\x86\xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x94\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        \xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\n\n        :param \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbc\xa0\xe9\x80\x92x, y, \xe9\x80\x9a\xe8\xbf\x87\n                        x = kwargs.pop(\'x\', self.x)\n                        y = kwargs.pop(\'y\', self.y)\n            \xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84fiter_type\xef\xbc\x8c\n            eg:\n                ttn_abu = AbuML.create_test_more_fiter()\n                ttn_abu.plot_confusion_matrices(fiter_type=ml.EMLFitType.E_FIT_CLF)\n        """"""\n        x = kwargs.pop(\'x\', self.x)\n        y = kwargs.pop(\'y\', self.y)\n\n        fiter = self.get_fiter()\n        ABuMLExecute.plot_confusion_matrices(fiter, x, y)\n\n    def bagging_classifier_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            bagging_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n            ttn_abu.bagging_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n            out: BaggingClassifier(max_samples=4, n_estimators=100)\n\n            bagging_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.bagging_classifier_best()\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84BaggingClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        return self.estimator.bagging_classifier_best(self.x, self.y, **kwargs)\n\n    def bagging_regressor_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            bagging_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n            ttn_abu.bagging_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: BaggingRegressor(max_samples=4, n_estimators=250)\n\n            bagging_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.bagging_regressor_best()\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84BaggingRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.bagging_regressor_best(self.x, self.y, **kwargs)\n\n    def adaboost_regressor_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            adaboost_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2), \'n_estimators\': np.arange(10, 100, 10)}\n            ttn_abu.adaboost_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: AdaBoostRegressor(learning_rate=0.8, n_estimators=40)\n\n            adaboost_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.adaboost_regressor_best()\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2),\n                                         \'n_estimators\': np.arange(10, 100, 10)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84AdaBoostRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.adaboost_regressor_best(self.x, self.y, **kwargs)\n\n    def adaboost_classifier_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n             adaboost_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             param_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2), \'n_estimators\': np.arange(10, 100, 10)}\n             ttn_abu.adaboost_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n             out: AdaBoostClassifier(learning_rate=0.6, n_estimators=70)\n\n             adaboost_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.adaboost_classifier_best()\n\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2),\n                                          \'n_estimators\': np.arange(10, 100, 10)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84AdaBoostClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.adaboost_classifier_best(self.x, self.y, **kwargs)\n\n    def random_forest_classifier_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            random_forest_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'n_estimators\': np.arange(50, 200, 20)}\n            ttn_abu.random_forest_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n            out: RandomForestClassifier(max_features=\'sqrt\', n_estimators=190)\n\n            random_forest_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.random_forest_classifier_best()\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                         \'n_estimators\': np.arange(10, 150, 15)}\n\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84RandomForestClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.random_forest_classifier_best(self.x, self.y, **kwargs)\n\n    def random_forest_regressor_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            random_forest_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.random_forest_regressor_best()\n\n            random_forest_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'n_estimators\': np.arange(10, 150, 15)}\n            ttn_abu.random_forest_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: RandomForestRegressor(max_features=\'log2\', n_estimators=115)\n\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                         \'n_estimators\': np.arange(10, 150, 15)}\n\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.random_forest_regressor_best(self.x, self.y, **kwargs)\n\n    def xgb_classifier_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n             xgb_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             param_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05), \'n_estimators\': np.arange(50, 200, 10)}\n             ttn_abu.xgb_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n             out: GradientBoostingClassifier(learning_rate=0.1, n_estimators=160)\n             xgb_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.xgb_classifier_best()\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05),\n                                          \'n_estimators\': np.arange(50, 200, 10)}\n\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84GradientBoostingClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.xgb_classifier_best(self.x, self.y, **kwargs)\n\n    def xgb_regressor_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n             xgb_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             param_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05), \'n_estimators\': np.arange(10, 100, 10)}\n             ttn_abu.xgb_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n             out: GradientBoostingRegressor(learning_rate=0.2, n_estimators=70)\n\n\n             xgb_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.xgb_regressor_best()\n\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05),\n                                          \'n_estimators\': np.arange(10, 100, 10)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84GradientBoostingRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.xgb_regressor_best(self.x, self.y, **kwargs)\n\n    def decision_tree_classifier_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            decision_tree_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.decision_tree_classifier_best()\n\n            decision_tree_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'max_depth\': np.arange(1, 10, 1)}\n            ttn_abu.decision_tree_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n            out: DecisionTreeClassifier(max_features=\'sqrt\', max_depth=7)\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                         \'max_depth\': np.arange(1, 10, 1)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84DecisionTreeClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.decision_tree_classifier_best(self.x, self.y, **kwargs)\n\n    def decision_tree_regressor_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n            decision_tree_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.decision_tree_regressor_best()\n\n            decision_tree_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'max_depth\': np.arange(1, 10, 1)}\n            ttn_abu.decision_tree_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: DecisionTreeRegressor(max_features=\'sqrt\', max_depth=3)\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                          \'max_depth\': np.arange(1, 10, 1)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84DecisionTreeRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.decision_tree_regressor_best(self.x, self.y, **kwargs)\n\n    def knn_classifier_best(self, **kwargs):\n        """"""\n        eg\xef\xbc\x9a\n          knn_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n          param_grid = {\'algorithm\': [\'ball_tree\', \'kd_tree\', \'brute\'], \'n_neighbors\': np.arange(1, 26, 1)}\n          ttn_abu.knn_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n          out: KNeighborsClassifier(algorithm=\'ball_tree\', n_neighbors=14)\n\n          knn_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n          from abupy import AbuML, ml\n          ttn_abu = AbuML.create_test_more_fiter()\n          ttn_abu.knn_classifier_best()\n\n        :param kwargs: \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n                        eg\xef\xbc\x9aparam_grid = {\'algorithm\': [\'ball_tree\', \'kd_tree\', \'brute\'],\n                                         \'n_neighbors\': np.arange(1, 26, 1)}\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84KNeighborsClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self.estimator.knn_classifier_best(self.x, self.y, **kwargs)\n\n    def _confusion_matrix_with_report(self, y_true, y_predict, labels=None):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85metrics.confusion_matrix\xe4\xb8\x8emetrics.classification_report\xef\xbc\x8c\xe5\xaf\xb9\xe5\x88\x86\xe7\xb1\xbb\n        \xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\n        :param y_true: \xe5\x8e\x9f\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe7\x9a\x84y\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\n        :param y_predict: \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8predict\xe7\x9a\x84y\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\n        :param labels: y\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84lable\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        confusion_matrix = metrics.confusion_matrix(y_true, y_predict, labels=labels)\n        if len(labels) == 2:\n            # \xe5\x8f\xaa\xe6\x9c\x89\xe4\xba\x8c\xe5\x88\x86\xe9\x97\xae\xe9\xa2\x98Actual/Predicted\n            self.log_func(""          Predicted"")\n            self.log_func(""         |  0  |  1  |"")\n            self.log_func(""         |-----|-----|"")\n            self.log_func(""       0 | %3d | %3d |"" % (confusion_matrix[0, 0],\n                                                      confusion_matrix[0, 1]))\n            self.log_func(""Actual   |-----|-----|"")\n            self.log_func(""       1 | %3d | %3d |"" % (confusion_matrix[1, 0],\n                                                      confusion_matrix[1, 1]))\n            self.log_func(""         |-----|-----|"")\n        else:\n            # \xe9\x9d\x9e\xe4\xba\x8c\xe5\x88\x86\xe9\x97\xae\xe9\xa2\x98\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x98\xbe\xe7\xa4\xbaconfusion_matrix\n            self.log_func(""Confusion Matrix: \\n{}"".format(confusion_matrix))\n\n        self.log_func(metrics.classification_report(y_true, y_predict))\n\n    def _decomposition_2x(self, x, use_pca):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87pca\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xe6\x88\x96\xe8\x80\x85\xe9\x80\x89\xe4\xb8\xad\xe4\xb8\xa4\xe4\xb8\xaaimportances\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xb0\x86\n        x\xe5\x8f\x98\xe6\x88\x90\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\n        :param x: \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\n        :param use_pca: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8pca\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe9\x99\x8d\xe7\xbb\xb4\n        :return: \xe9\x99\x8d\xe7\xbb\xb4\xe5\x90\x8e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe9\x99\x8d\xe7\xbb\xb4\xe5\x90\x8e\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\n        """"""\n        if use_pca:\n            # \xe6\x9e\x84\xe9\x80\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\xb4\xe6\x97\xb6\xe7\x9a\x84pca\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe7\xbb\xb4\xef\xbc\x8cn_components=2\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\n            pca_2n = self.estimator.pca_decomposition(n_components=2, assign=False)\n            x = pca_2n.fit_transform(x)\n            """"""\n                eg:\n                x before fit_transform:\n                array([[ 1.    ,  0.    ,  1.    , ...,  1.    , -0.5614, -0.5024],\n                       [ 1.    ,  0.    ,  0.    , ...,  0.    ,  0.6132,  0.7868],\n                       [ 0.    ,  0.    ,  1.    , ...,  1.    , -0.2677, -0.4889],\n                       ...,\n                       [ 1.    ,  2.    ,  1.    , ...,  1.    , -0.9924, -0.1763],\n                       [ 0.    ,  0.    ,  0.    , ...,  0.    , -0.2677, -0.0444],\n                       [ 0.    ,  0.    ,  1.    , ...,  1.    ,  0.1727, -0.4924]])\n                x fit_transform:\n                array([[ 0.3805, -1.0005],\n                       [ 0.0586,  1.7903],\n                       [-0.3162, -0.7404],\n                       ...,\n                       [ 1.6132, -0.5185],\n                       [-0.5952,  0.6252],\n                       [-0.7428, -0.7119]])\n            """"""\n        else:\n            # \xe9\x80\x89\xe4\xb8\xad\xe4\xb8\xa4\xe4\xb8\xaaimportances\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x8e\xbb\xe7\x94\xbb\xe5\x86\xb3\xe7\xad\x96\xe8\xbe\xb9\xe7\x95\x8c\n            importances = self.importances_coef_pd()\n            """"""\n                        feature  importance\n                0         SibSp      0.0000\n                1         Parch      0.0000\n                3     Cabin_Yes      0.0000\n                4    Embarked_C      0.0000\n                5    Embarked_Q      0.0000\n                6    Embarked_S      0.0000\n                7    Sex_female      0.0000\n                9      Pclass_1      0.0000\n                10     Pclass_2      0.0000\n                12   Age_scaled      0.0000\n                13  Fare_scaled      0.0000\n                2      Cabin_No      0.0831\n                11     Pclass_3      0.1836\n                8      Sex_male      0.7333\n            """"""\n            if importances is None:\n                self.log_func(\'self.importances_coef_pd() importances is None!!!\')\n                return\n            # \xe6\xa0\xb9\xe6\x8d\xaeimportance\xe6\x8e\x92\xe5\xba\x8f\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x8d\xe8\xa6\x81\xe7\xa8\x8b\xe5\xba\xa6\xef\xbc\x8c\xe6\x8b\xbf\xe5\x87\xba\xe6\x9c\x80\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6index\xe5\xba\x8f\xe5\x88\x97, eg: most_two=[8, 11]\n            most_two = sorted(importances.sort_values(\'importance\').index[-2:].tolist())\n            # \xe4\xbb\x8ex\xe4\xb8\xad\xe6\xa0\xb9\xe6\x8d\xaemost_two\xe6\x8b\xbc\xe6\x8e\xa5\xe5\x87\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\n            x = np.concatenate((x[:, most_two[0]][:, np.newaxis],\n                                x[:, most_two[1]][:, np.newaxis]), axis=1)\n\n        return x\n\n    def _do_cross_val_score(self, x, y, cv, scoring):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85sklearn\xe4\xb8\xadcross_val_score\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c \xe5\x8f\x82\xe6\x95\xb0x, y, cv, scoring\xe9\x80\x8f\xe4\xbc\xa0cross_val_score\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param cv: \xe9\x80\x8f\xe4\xbc\xa0cross_val_score\xef\xbc\x8ccv\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cint\n        :param scoring: \xe9\x80\x8f\xe4\xbc\xa0cross_val_score, \xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\n        :return: cross_val_score\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84score\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n                 eg: array([ 1.  ,  0.9 ,  1.  ,  0.9 ,  1.  ,  0.9 ,  1.  ,  0.9 ,  0.95,  1.  ])\n        """"""\n        fiter = self.get_fiter()\n        """"""\n            eg: fiter\n            DecisionTreeClassifier(class_weight=None, criterion=\'gini\', max_depth=None,\n                                    max_features=None, max_leaf_nodes=None,\n                                    min_impurity_split=1e-07, min_samples_leaf=1,\n                                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                                    presort=False, random_state=None, splitter=\'best\')\n        """"""\n        if scoring == _EMLScoreType.E_SCORE_ROC_AUC.value and len(np.unique(y)) != 2:\n            # roc auc\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe4\xb8\x8b\xe4\xb8\x94y\xe7\x9a\x84label\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\x8d\xe6\x98\xaf2\xe9\xa1\xb9\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8label_binarize\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\n            y_label_binarize = label_binarize(y, classes=np.unique(y))\n            """"""\n                eg\xef\xbc\x9a\n                    np.unique(y) \xef\xbc\x9d array([0, 1, 2])\n                    y_label_binarize:\n                    array([[1, 0, 0],\n                           [1, 0, 0],\n                           [1, 0, 0],\n                           [1, 0, 0],\n                           [1, 0, 0],\n                           .........\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           [0, 1, 0],\n                           .........\n                           [0, 0, 1],\n                           [0, 0, 1],\n                           [0, 0, 1],\n                           [0, 0, 1],\n                           [0, 0, 1],\n                           [0, 0, 1]])\n            """"""\n            label_cnt = len(np.unique(y))\n            # one vs rest\xe7\x9a\x84score\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe7\x9a\x84\xe5\x92\x8c\n            mean_sum = 0\n            # one vs rest\xe4\xb8\xad\xe7\x9a\x84\xe6\x9c\x80\xe5\xa5\xbdscore\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n            best_mean = 0\n            # \xe6\x9c\x80\xe5\xa5\xbdscore\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc(best_mean)\xe7\x9a\x84score\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\n            scores = list()\n            for ind in np.arange(0, label_cnt):\n                # \xe5\xbc\x80\xe5\xa7\x8b one vs rest\n                _y = y_label_binarize[:, ind]\n                """"""\n                    eg: _y\n                    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                           1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n                """"""\n                tmp_scores = cross_val_score(fiter, x, _y, cv=cv, scoring=scoring)\n                tmp_mean = np.mean(tmp_scores)\n                # one vs rest\xe7\x9a\x84score\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xa0\xe5\x8a\xa0sum\n                mean_sum += tmp_mean\n                if len(scores) == 0 or tmp_mean > best_mean:\n                    scores = tmp_scores\n            # one vs rest\xe7\x9a\x84score\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe7\x9a\x84\xe5\x92\x8c / label_cnt\n            mean_sc = mean_sum / label_cnt\n        else:\n            scores = cross_val_score(fiter, x, y, cv=cv, scoring=scoring)\n            # \xe8\xae\xa1\xe7\xae\x97\xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84score\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbalog\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xafscores\n            mean_sc = -np.mean(np.sqrt(-scores)) if scoring == mean_squared_error_scorer \\\n                else np.mean(scores)\n        self.log_func(\'{} score mean: {}\'.format(fiter.__class__.__name__, mean_sc))\n\n        return scores\n'"
abupy/MLBu/ABuMLApi.py,0,"b'from __future__ import absolute_import\n\n# noinspection PyUnresolvedReferences\nfrom .ABuMLBinsCs import *\n# noinspection PyUnresolvedReferences\nfrom .ABuMLExecute import *\n# noinspection PyUnresolvedReferences\nfrom .ABuMLGrid import *\n# noinspection PyUnresolvedReferences\nfrom .ABuML import EMLFitType\n# noinspection PyUnresolvedReferences\nfrom .ABuMLPd import BtcBigWaveClf, ClosePredict\n'"
abupy/MLBu/ABuMLBinsCs.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\x9b\xb4\xe8\xa7\x82\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\xb6\xe4\xbd\x9cqcut\xe7\x9a\x84bins\xe7\x82\xb9""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport math\nimport logging\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport itertools\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\n\n__all__ = [\'show_orders_hist\']\n\n\ndef show_orders_hist(df, feature_columns, show=True, only_hist=True, show_pie=False):\n    """"""\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x9f\xe8\xae\xa1feature_columns\xe5\xba\x8f\xe5\x88\x97\xe6\x89\x80\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x9c\xa8df\xe4\xb8\xad\xe7\x9a\x84\xe7\x9b\xb4\xe6\x96\xb9\xe5\x9b\xbe\xe6\x88\x96\xe8\x80\x85\xe9\xa5\xbc\xe7\x8a\xb6\xe5\x9b\xbe\xef\xbc\x8c\n    \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0only_hist\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cpd.qcut\xe7\xbb\x9f\xe8\xae\xa1\xe8\xbe\x93\xe5\x87\xba\n\n    eg:\n        from abupy import AbuML, ml\n        ttn_raw = AbuML.load_ttn_raw_df()\n        ml.show_orders_hist(ttn_raw, [\'Age\', \'Fare\', \'Pclass\'])\n\n    :param df: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param feature_columns: \xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x8d\xe7\xa7\xb0\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8ceg\xef\xbc\x9a[\'Age\', \'Fare\', \'Pclass\']\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb4\xe6\x96\xb9\xe5\x9b\xbe\xe6\x88\x96\xe8\x80\x85\xe9\xa5\xbc\xe7\x8a\xb6\xe5\x9b\xbe\n    :param show_pie: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbc\x98\xe5\x85\x88\xe8\x80\x83\xe8\x99\x91\xe7\xbb\x98\xe5\x88\xb6\xe9\xa5\xbc\xe7\x8a\xb6\xe5\x9b\xbe\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4false\n    :param only_hist: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cpd.qcut\xe7\xbb\x9f\xe8\xae\xa1\xe8\xbe\x93\xe5\x87\xba\n    """"""\n    if not isinstance(df, pd.DataFrame):\n        logging.info(\'df must pd.DataFrame, not type {}\'.format(type(df)))\n        return\n\n    # \xe7\xac\xac\xe4\xb8\x80\xe6\xad\xa5\xe8\xbf\x87\xe6\xbb\xa4\xe4\xb8\x8d\xe5\x9c\xa8\xe5\x9c\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84feature_columns\xe5\x85\x83\xe7\xb4\xa0\n    feature_columns = list(filter(lambda x: df.columns.tolist().count(x) > 0, feature_columns))\n    # \xe7\xac\xac\xe4\xba\x8c\xe6\xad\xa5\xe8\xbf\x87\xe6\xbb\xa4feature_columns\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xad\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\x8d\xe6\x98\xafint\xe6\x88\x96\xe8\x80\x85float\xe7\x9a\x84\n    feature_columns = list(\n        filter(\n            lambda x: df[x].dtype == int or df[x].dtype == float or df[x].dtype == np.uint or df[x].dtype == np.uint8,\n            feature_columns))\n    # \xe7\xac\xac\xe4\xb8\x89\xe6\xad\xa5\xe8\xbf\x87\xe6\xbb\xa4feature_columns\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xad\xe6\x89\x80\xe6\x8c\x87\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe4\xb8\xadunique==1\xe7\x9a\x84\xef\xbc\x8ceg\xef\xbc\x9a1\xe5\x88\x97\xe5\x85\xa8\xe6\x98\xaf1\xef\xbc\x8c\xe5\x85\xa8\xe6\x98\xaf0\xef\xbc\x8c\xe6\xb2\xa1\xe5\x8a\x9e\xe6\xb3\x95\xe5\x81\x9abin\n    feature_columns = list(filter(lambda x: len(np.unique(df[x])) > 1, feature_columns))\n\n    axs_list = None\n    if len(feature_columns) == 0:\n        # \xe6\x99\x92\xe6\xb2\xa1\xe4\xba\x86\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n        logging.info(\'{}\\n{}\\nnot exist! or unique==1!, or dtype != int or float\'.format(\n            df.columns, df.dtypes))\n        return\n\n    if show:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb4\xe6\x96\xb9\xe5\x9b\xbe\xef\xbc\x8c\xe5\x85\x88\xe7\xa1\xae\xe5\xae\x9a\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe5\x88\x97\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\x80\xe8\xa1\x8c\xe6\x94\xbe\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c\xe5\x8f\x96math.ceil\xef\xbc\x8ceg\xef\xbc\x9a3 \xef\xbc\x8f2 \xef\xbc\x9d 2\n        n_rows = int(math.ceil(len(feature_columns) / 2))\n        # \xe8\xa1\x8c\xe9\xab\x98\xe5\x8f\x965\xef\xbc\x8c\xe6\x80\xbb\xe9\xab\x98\xe5\xba\xa6\xef\xbc\x9an_rows * 5\n        fig_h = n_rows * 5\n        # plt.subplots\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\n        _, axs = plt.subplots(nrows=n_rows, ncols=2, figsize=(14, fig_h))\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xa4\x9a\xe4\xba\x8e1\xe4\xb8\xaa\xe7\x9a\x84\xe5\x8d\xb3\xe5\xb1\x95\xe5\xbc\x80\xe5\xad\x97\xe7\x94\xbb\xe6\x9c\xac\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xba1d\xe5\xba\x8f\xe5\x88\x97\n        axs_list = axs if n_rows == 1 else list(itertools.chain.from_iterable(axs))\n\n    for ind, feature in enumerate(feature_columns):\n        feature_unique = len(np.unique(df[feature]))\n        ax = None\n        if axs_list is not None:\n            ax = axs_list[ind]\n            ax.set_title(feature)\n        if show_pie and feature_unique < 10:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe5\x80\xbcunique < 10\xe4\xb8\xaa\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87value_counts\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x94\xbb\xe9\xa5\xbc\xe5\x9b\xbe\n            df[feature].value_counts().plot(ax=ax, kind=\'pie\')\n        else:\n            # \xe7\x94\xbb\xe7\x9b\xb4\xe6\x96\xb9\xe5\x9b\xbe\n            bins = int(feature_unique / 50) if feature_unique / 50 > 10 else 10\n            df[feature].hist(ax=ax, bins=bins)\n\n        if only_hist:\n            # \xe5\x8f\xaa\xe5\x81\x9a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xb0\xb1continue\n            continue\n\n        try:\n            # qcut\xe5\x88\x87\xe5\x88\x8610\xe7\xad\x89\xe4\xbb\xbd\n            cats = pd.qcut(df[feature], 10)\n        except Exception:\n            # \xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe8\xb6\x85\xe5\x87\xbaq\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe5\xaf\xbc\xe8\x87\xb4\xe6\x97\xa0\xe6\xb3\x95\xe5\x88\x86\n            import pandas.core.algorithms as algos\n            bins = algos.quantile(np.unique(df[feature]), np.linspace(0, 1, 10 + 1))\n            # noinspection PyProtectedMember,PyUnresolvedReferences\n            cats = pd.tools.tile._bins_to_cuts(df[feature], bins, include_lowest=True)\n\n        logging.info(\'{0} show hist and qcuts\'.format(feature))\n        """"""\n            Age show hist and qcuts\n            (31.8, 36]    91\n            (14, 19]      87\n            (41, 50]      78\n            [0.42, 14]    77\n            (22, 25]      70\n            (19, 22]      67\n            (28, 31.8]    66\n            (50, 80]      64\n            (25, 28]      61\n            (36, 41]      53\n            Name: Age, dtype: int64\n        """"""\n        logging.info(cats.value_counts())\n'"
abupy/MLBu/ABuMLCreater.py,26,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xb0\x81\xe8\xa3\x85\xe5\xb8\xb8\xe7\x94\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\xb5\x81\xe7\xa8\x8b\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\n# noinspection PyPep8Naming\nfrom sklearn.ensemble import GradientBoostingClassifier as GBC\n# noinspection PyPep8Naming\nfrom sklearn.ensemble import GradientBoostingRegressor as GBR\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.multiclass import OneVsOneClassifier, OneVsRestClassifier\n\nfrom ..CoreBu.ABuFixes import GMM\nfrom ..MLBu import ABuMLGrid\n\n# TODO \xe5\xaf\xb9\xe5\xa4\x96\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9a\x82\xe6\x97\xb6\xe5\x85\xa8\xe9\x83\xa8\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8sklearn\xe4\xb8\x8d\xe4\xbb\x8e\xe5\x85\xb6\xe5\xae\x83\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe5\xba\x93import\xef\xbc\x8c\xe5\xa2\x9e\xe5\x8a\xa0\xe5\x8f\xaf\xe9\x80\x89\xe5\xbc\x80\xe5\x85\xb3\xe7\xad\x89\xe8\xae\xbe\xe7\xbd\xae\n# try:\n#     # noinspection PyPep8Naming\n#     from xgboost.sklearn import XGBClassifier as GBC\n#     # noinspection PyPep8Naming\n#     from xgboost.sklearn import XGBRegressor as GBR\n# except ImportError:\n#     # noinspection PyPep8Naming\n#     from sklearn.ensemble import GradientBoostingClassifier as GBC\n#     # noinspection PyPep8Naming\n#     from sklearn.ensemble import GradientBoostingRegressor as GBR\n# try:\n#     # noinspection PyPep8Naming\n#     from hmmlearn.hmm import GaussianHMM as GMM\n# except ImportError:\n#     from ..CoreBu.ABuFixes import GMM\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuMLCreater(object):\n    """"""\xe5\xb0\x81\xe8\xa3\x85\xe5\xb8\xb8\xe7\x94\xa8\xe6\x9c\x89\xe7\xae\x80\xe5\x8d\x95\xe5\x92\x8c\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\xb1\xbb""""""\n\n    def __init__(self):\n        """"""\n        \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe7\xba\xbf\xe6\x80\xa7\xe5\x9b\x9e\xe5\xbd\x92\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8:\n            self.reg = self.linear_regression()\n        \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb8\xa6\xe6\xa6\x82\xe7\x8e\x87\xe4\xbc\xb0\xe8\xae\xa1\xe7\x9a\x84svm\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8:\n            self.clf = self.svc(probability=True)\n\n        \xe9\xbb\x98\xe8\xae\xa4\xe6\x97\xa0\xe7\xae\x80\xe5\x8d\x95\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xef\xbc\x9ahmm\xef\xbc\x8cpca\xef\xbc\x8ckeman\xe5\x85\xa8\xe9\x83\xa8\xe5\x88\x9d\xe5\xa7\x8bNone\xe5\x80\xbc\n        """"""\n\n        # \xe6\x9c\x89\xe7\xae\x80\xe5\x8d\x95\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\xe5\x88\x86\xe7\xb1\xbb\xe5\x9b\x9e\xe5\xbd\x92\n        self.reg = self.linear_regression()\n        self.clf = self.svc(probability=True)\n        # \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8cpca\xef\xbc\x8c\xe8\x81\x9a\xe7\xb1\xbb\xef\xbc\x8chmm, \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        self.hmm = None\n        self.pca = None\n        self.kmean = None\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9areg, clf, hmm, pca, kmean""""""\n        return \'reg: {}\\nclf: {}\\nhmm: {}\\npca: {}\\nkmean: {}\\n\'.format(self.reg, self.clf, self.hmm, self.pca,\n                                                                        self.kmean)\n\n    __repr__ = __str__\n\n    def pca_decomposition(self, assign=True, **kwargs):\n        """"""\n        \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96PCA\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8pca = PCA(0.95)\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\n        \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0PCA\xef\xbc\x8c\xe5\x8d\xb3PCA(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84PCA\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.pca = pca\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: PCA(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: pca = PCA(0.95)\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84PCA\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            pca = PCA(**kwargs)\n        else:\n            # \xe6\xb2\xa1\xe5\x8f\x82\xe6\x95\xb0\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xa6\x81\xe4\xbf\x9d\xe7\x95\x9995%\n            pca = PCA(0.95)\n        if assign:\n            self.pca = pca\n\n        return pca\n\n    def kmean_cluster(self, assign=True, **kwargs):\n        """"""\n        \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96KMeans\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8KMeans(n_clusters=2, random_state=0)\xef\xbc\x8c\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0KMeans\xef\xbc\x8c\xe5\x8d\xb3KMeans(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84kmean\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.kmean = kmean\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: KMeans(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: KMeans(n_clusters=2, random_state=0)\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84KMeans\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            kmean = KMeans(**kwargs)\n        else:\n            # \xe9\xbb\x98\xe8\xae\xa4\xe4\xb9\x9f\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaan_clusters\n            kmean = KMeans(n_clusters=2, random_state=0)\n        if assign:\n            self.kmean = kmean\n        return kmean\n\n    def hmm_gaussian(self, assign=True, **kwargs):\n        """"""\n        \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96GMM\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8GMM(n_components=2)\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\n        \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0GMM\xef\xbc\x8c\xe5\x8d\xb3GMM(**kwargs)\n\n        \xe5\xaf\xbc\xe5\x85\xa5\xe6\xa8\xa1\xe5\x9d\x97\xe4\xbd\xbf\xe7\x94\xa8\n            try:\n                from hmmlearn.hmm import GaussianHMM as GMM\n            except ImportError:\n                from ..CoreBu.ABuFixes import GMM\n        \xe5\x8d\xb3\xe4\xbc\x98\xe5\x85\x88\xe9\x80\x89\xe7\x94\xa8hmmlearn\xe4\xb8\xad\xe7\x9a\x84GaussianHMM\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x89\xe8\xa3\x85\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8sklearn\xe4\xb8\xad\xe7\x9a\x84GMM\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84hmm\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.hmm = hmm\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: GMM(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: GMM(n_components=2)\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84GMM\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            hmm = GMM(**kwargs)\n        else:\n            # \xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\xaa\xe6\x9c\x89n_components=2, \xe4\xb8\xa4\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\n            hmm = GMM(n_components=2)\n        if assign:\n            self.hmm = hmm\n        return hmm\n\n    # noinspection PyMethodMayBeStatic\n    def _estimators_prarms_best(self, create_func, x, y, param_grid, assign, n_jobs, show,\n                                grid_callback=ABuMLGrid.grid_search_init_n_estimators):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85\xe4\xbd\xbf\xe7\x94\xa8ABuMLGrid\xe5\xaf\xbb\xe6\x89\xbe\xe9\x92\x88\xe5\xaf\xb9\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe5\x80\xbc\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x8d\xe5\x90\x8c\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xef\xbc\x8c\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\n        \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe5\x81\x9a\xe6\x9c\x80\xe4\xbc\x98\xe6\x90\x9c\xe7\xb4\xa2\xef\xbc\x8c\xe5\xb0\x86\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe5\x81\x9a\xe4\xb8\xba**kwargs\xe7\x94\xa8\xe6\x9d\xa5\xe9\x87\x8d\xe6\x96\xb0\xe6\x9e\x84\xe9\x80\xa0\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\n\n        :param create_func: callable, \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xef\xbc\x8ceg\xef\xbc\x9aself.adaboost_classifier\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8grid_search_mul_init_kwargs\xe5\xaf\xbb\xe6\x89\xbe\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe5\x80\xbc\xef\xbc\x9a\n                        eg: _, best_params = ABuMLGrid.grid_search_mul_init_kwargs(estimator, x, y,\n                                                       param_grid=param_grid, n_jobs=n_jobs, show=show)\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0create_func\xef\xbc\x8c\xe7\x94\xa8\xe6\x9d\xa5\xe6\xa0\xb9\xe6\x8d\xae\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe9\x87\x8d\xe6\x96\xb0\xe6\x9e\x84\xe9\x80\xa0\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\n                        eg: create_func(assign=assign, **best_params)\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :param grid_callback: \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9c\x89\xe4\xbc\xa0\xe9\x80\x92\xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0param_grid\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84grid_callback\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe6\x90\x9c\xe7\xb4\xa2\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n                              \xe9\xbb\x98\xe8\xae\xa4ABuMLGrid.grid_search_init_n_estimators\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg: create_func(assign=assign, **best_params)\n        """"""\n        # \xe9\x80\x9a\xe8\xbf\x87create_func\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa4\xba\xe4\xbe\x8b\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xef\xbc\x8cassign=False\n        estimator = create_func(assign=False)\n        if param_grid is not None and isinstance(param_grid, dict):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe4\xbc\xa0\xe9\x80\x92\xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8grid_search_mul_init_kwargs\xe5\xaf\xbb\xe6\x89\xbe\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe5\x80\xbc\n            _, best_params = ABuMLGrid.grid_search_mul_init_kwargs(estimator, x, y,\n                                                                   param_grid=param_grid, n_jobs=n_jobs, show=show)\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9c\x89\xe4\xbc\xa0\xe9\x80\x92\xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84grid_callback\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4ABuMLGrid.grid_search_init_n_estimators\n            _, best_params = grid_callback(estimator, x, y, show=show)\n\n        if best_params is not None:\n            # \xe5\xb0\x86\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0best_params\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe9\x87\x8d\xe6\x96\xb0\xe4\xbc\xa0\xe9\x80\x92create_func(assign=assign, **best_params)\n            return create_func(assign=assign, **best_params)\n\n    def bagging_classifier(self, assign=True, base_estimator=DecisionTreeClassifier(), **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96BaggingClassifier\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            BaggingClassifier(base_estimator=base_estimator, n_estimators=200,\n                              bootstrap=True, oob_score=True, random_state=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0BaggingClassifier\xef\xbc\x8c\xe5\x8d\xb3:\n            BaggingClassifier(**kwargs)\n\n        :param base_estimator: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8DecisionTreeClassifier()\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84BaggingClassifier\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: BaggingClassifier(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: BaggingClassifier(base_estimator=base_estimator, n_estimators=200,\n                                                           bootstrap=True, oob_score=True, random_state=1)\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84BaggingClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            if \'base_estimator\' not in kwargs:\n                kwargs[\'base_estimator\'] = base_estimator\n            clf = BaggingClassifier(**kwargs)\n        else:\n            clf = BaggingClassifier(base_estimator=base_estimator, n_estimators=200,\n                                    bootstrap=True, oob_score=True, random_state=1)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def bagging_classifier_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeBaggingClassifier\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadbagging_classifier_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            bagging_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.bagging_classifier_best()\n\n            bagging_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n            ttn_abu.bagging_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n            out: BaggingClassifier(max_samples=4, n_estimators=100)\n\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                        eg\xef\xbc\x9aparam_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84BaggingClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.bagging_classifier, x, y, param_grid, assign, n_jobs, show)\n\n    def bagging_regressor(self, assign=True, base_estimator=DecisionTreeRegressor(), **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96BaggingRegressor\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            BaggingRegressor(base_estimator=base_estimator, n_estimators=200,\n                             bootstrap=True, oob_score=True, random_state=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0BaggingRegressor\xef\xbc\x8c\xe5\x8d\xb3:\n            BaggingRegressor(**kwargs)\n\n        :param base_estimator: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8DecisionTreeRegressor()\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84BaggingRegressor\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: BaggingRegressor(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: BaggingRegressor(base_estimator=base_estimator, reg_core, n_estimators=200,\n                                                          bootstrap=True, oob_score=True, random_state=1)\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84BaggingRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            if \'base_estimator\' not in kwargs:\n                kwargs[\'base_estimator\'] = base_estimator\n            reg = BaggingRegressor(**kwargs)\n        else:\n            reg = BaggingRegressor(base_estimator=base_estimator, n_estimators=200,\n                                   bootstrap=True, oob_score=True, random_state=1)\n\n        if assign:\n            self.reg = reg\n        return reg\n\n    def bagging_regressor_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeBaggingRegressor\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadbagging_regressor_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            bagging_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.bagging_regressor_best()\n\n            bagging_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n            ttn_abu.bagging_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: BaggingRegressor(max_samples=4, n_estimators=250)\n\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                        eg\xef\xbc\x9aparam_grid = {\'max_samples\': np.arange(1, 5), \'n_estimators\': np.arange(100, 300, 50)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84BaggingRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.bagging_regressor, x, y, param_grid, assign, n_jobs, show)\n\n    def adaboost_regressor(self, assign=True, base_estimator=DecisionTreeRegressor(), **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96AdaBoostRegressor\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            AdaBoostRegressor(base_estimator=base_estimator, n_estimators=100, random_state=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0AdaBoostRegressor\xef\xbc\x8c\xe5\x8d\xb3:\n            AdaBoostRegressor(**kwargs)\n\n        :param base_estimator: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8DecisionTreeRegressor()\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84AdaBoostRegressor\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: AdaBoostRegressor(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: AdaBoostRegressor(n_estimators=100, random_state=1)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84AdaBoostRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            if \'base_estimator\' not in kwargs:\n                kwargs[\'base_estimator\'] = base_estimator\n            reg = AdaBoostRegressor(**kwargs)\n        else:\n            reg = AdaBoostRegressor(base_estimator=base_estimator, n_estimators=100, random_state=1)\n\n        if assign:\n            self.reg = reg\n\n        return reg\n\n    def adaboost_regressor_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeAdaBoostRegressor\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadadaboost_regressor_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            adaboost_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.adaboost_regressor_best()\n\n            adaboost_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2), \'n_estimators\': np.arange(10, 100, 10)}\n            ttn_abu.adaboost_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: AdaBoostRegressor(learning_rate=0.8, n_estimators=40)\n\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                        eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2),\n                                         \'n_estimators\': np.arange(10, 100, 10)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84AdaBoostRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.adaboost_regressor, x, y, param_grid, assign, n_jobs, show)\n\n    def adaboost_classifier(self, assign=True, base_estimator=DecisionTreeClassifier(), **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96AdaBoostClassifier\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            AdaBoostClassifier(base_estimator=base_estimator, n_estimators=100, random_state=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0AdaBoostClassifier\xef\xbc\x8c\xe5\x8d\xb3:\n            AdaBoostClassifier(**kwargs)\n\n        :param base_estimator: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8DecisionTreeClassifier()\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84AdaBoostClassifier\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: AdaBoostClassifier(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: AdaBoostClassifier(n_estimators=100, random_state=1)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84AdaBoostClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            if \'base_estimator\' not in kwargs:\n                kwargs[\'base_estimator\'] = base_estimator\n            clf = AdaBoostClassifier(**kwargs)\n        else:\n            clf = AdaBoostClassifier(base_estimator=base_estimator, n_estimators=100, random_state=1)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def adaboost_classifier_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeAdaBoostClassifier\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadadaboost_classifier_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n             adaboost_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.adaboost_classifier_best()\n\n             adaboost_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             param_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2), \'n_estimators\': np.arange(10, 100, 10)}\n             ttn_abu.adaboost_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n             out: AdaBoostClassifier(learning_rate=0.6, n_estimators=70)\n\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.2, 1.2, 0.2),\n                                       \'n_estimators\': np.arange(10, 100, 10)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84AdaBoostClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.adaboost_classifier, x, y, param_grid, assign, n_jobs, show)\n\n    def xgb_regressor(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n                        GBR(n_estimators=100)\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0GBR(**kwargs)\xef\xbc\x8c\xe5\x8d\xb3:\n                        GBR(**kwargs)\n\n        \xe6\xb3\xa8\xe6\x84\x8f\xe5\xaf\xbc\xe5\x85\xa5\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            try:\n                from xgboost.sklearn import XGBRegressor as GBR\n            except ImportError:\n                from sklearn.ensemble import GradientBoostingRegressor as GBR\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: GBR(n_estimators=100)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: GBR(**kwargs)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84GBR\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            reg = GBR(**kwargs)\n        else:\n            reg = GBR(n_estimators=100)\n        if assign:\n            self.reg = reg\n        return reg\n\n    def xgb_regressor_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeGradientBoostingRegressor\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadxgb_regressor_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n             xgb_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.xgb_regressor_best()\n\n             xgb_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             param_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05), \'n_estimators\': np.arange(10, 100, 10)}\n             ttn_abu.xgb_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n             out: GradientBoostingRegressor(learning_rate=0.2, n_estimators=70)\n\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05),\n                                      \'n_estimators\': np.arange(10, 100, 10)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84GradientBoostingRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.xgb_regressor, x, y, param_grid, assign, n_jobs, show)\n\n    def xgb_classifier(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n                        GBC(n_estimators=100)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0GBC(**kwargs)\xef\xbc\x8c\xe5\x8d\xb3:\n                        GBC(**kwargs)\n\n        \xe6\xb3\xa8\xe6\x84\x8f\xe5\xaf\xbc\xe5\x85\xa5\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            try:\n                from xgboost.sklearn import XGBClassifier as GBC\n            except ImportError:\n                from sklearn.ensemble import GradientBoostingClassifier as GBC\n\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: GBC(n_estimators=100)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: GBC(**kwargs)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84GBC\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            clf = GBC(**kwargs)\n        else:\n            clf = GBC(n_estimators=100)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def xgb_classifier_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeGradientBoostingClassifier\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadxgb_classifier_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n             xgb_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.xgb_classifier_best()\n\n             xgb_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             param_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05), \'n_estimators\': np.arange(50, 200, 10)}\n             ttn_abu.xgb_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n             out: GradientBoostingClassifier(learning_rate=0.1, n_estimators=160)\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'learning_rate\': np.arange(0.1, 0.5, 0.05),\n                                      \'n_estimators\': np.arange(50, 200, 10)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84GradientBoostingClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.xgb_classifier, x, y, param_grid, assign, n_jobs, show)\n\n    def random_forest_regressor(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96RandomForestRegressor\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            RandomForestRegressor(n_estimators=100)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0RandomForestRegressor\xef\xbc\x8c\xe5\x8d\xb3:\n            RandomForestRegressor(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: RandomForestRegressor(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: RandomForestRegressor(n_estimators=100)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            reg = RandomForestRegressor(**kwargs)\n        else:\n            reg = RandomForestRegressor(n_estimators=100)\n        if assign:\n            self.reg = reg\n        return reg\n\n    def random_forest_regressor_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeRandomForestRegressor\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadrandom_forest_regressor_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n             random_forest_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n             from abupy import AbuML, ml\n             ttn_abu = AbuML.create_test_more_fiter()\n             ttn_abu.random_forest_regressor_best()\n\n             random_forest_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'n_estimators\': np.arange(10, 150, 15)}\n            ttn_abu.random_forest_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n             out: RandomForestRegressor(max_features=\'sqrt\', n_estimators=115)\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                      \'n_estimators\': np.arange(10, 150, 15)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.random_forest_regressor, x, y, param_grid, assign, n_jobs, show)\n\n    def random_forest_classifier(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96RandomForestClassifier\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            RandomForestRegressor(n_estimators=100)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0RandomForestRegressor\xef\xbc\x8c\xe5\x8d\xb3:\n            RandomForestRegressor(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: RandomForestRegressor(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: RandomForestRegressor(n_estimators=100)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            clf = RandomForestClassifier(**kwargs)\n        else:\n            clf = RandomForestClassifier(n_estimators=100)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def random_forest_classifier_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeRandomForestClassifier\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadrandom_forest_classifier_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            random_forest_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.random_forest_classifier_best()\n\n            random_forest_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'n_estimators\': np.arange(50, 200, 20)}\n            ttn_abu.random_forest_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n            out: RandomForestClassifier(max_features=\'sqrt\', n_estimators=190)\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                      \'n_estimators\': np.arange(50, 200, 20)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84RandomForestClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.random_forest_classifier, x, y, param_grid, assign, n_jobs, show)\n\n    def svc(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96SVC\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            SVC(kernel=\'rbf\', probability=True)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0SVC\xef\xbc\x8c\xe5\x8d\xb3:\n            SVC(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84RandomForestRegressor\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: SVC(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: SVC(kernel=\'rbf\', probability=True)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84SVC\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            clf = SVC(**kwargs)\n        else:\n            clf = SVC(kernel=\'rbf\', probability=True)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def decision_tree_regressor(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96DecisionTreeRegressor\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            DecisionTreeRegressor(max_depth=2, random_state=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0DecisionTreeRegressor\xef\xbc\x8c\xe5\x8d\xb3:\n            DecisionTreeRegressor(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84DecisionTreeRegressor\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: DecisionTreeRegressor(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: DecisionTreeRegressor(max_depth=2, random_state=1)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84DecisionTreeRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if kwargs is not None and len(kwargs) > 0:\n            reg = DecisionTreeRegressor(**kwargs)\n        else:\n            reg = DecisionTreeRegressor(max_depth=2, random_state=1)\n        if assign:\n            self.reg = reg\n        return reg\n\n    def decision_tree_regressor_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeDecisionTreeRegressor\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xaddecision_tree_regressor_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            decision_tree_regressor_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.decision_tree_regressor_best()\n\n            decision_tree_regressor_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'max_depth\': np.arange(1, 10, 1)}\n            ttn_abu.decision_tree_regressor_best(param_grid=param_grid, n_jobs=-1)\n\n            out: DecisionTreeRegressor(max_features=\'sqrt\', max_depth=3)\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                      \'n_estimators\': np.arange(50, 200, 20)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84DecisionTreeRegressor\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.decision_tree_regressor, x, y, param_grid, assign, n_jobs, show,\n                                            grid_callback=ABuMLGrid.grid_search_init_max_depth)\n\n    def decision_tree_classifier(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96DecisionTreeClassifier\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            DecisionTreeClassifier(max_depth=2, random_state=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0DecisionTreeClassifier\xef\xbc\x8c\xe5\x8d\xb3:\n            DecisionTreeClassifier(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84DecisionTreeClassifier\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: DecisionTreeClassifier(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: DecisionTreeClassifier(max_depth=2, random_state=1)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84DecisionTreeClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if kwargs is not None and len(kwargs) > 0:\n            clf = DecisionTreeClassifier(**kwargs)\n        else:\n            clf = DecisionTreeClassifier(max_depth=2, random_state=1)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def decision_tree_classifier_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeDecisionTreeClassifier\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xaddecision_tree_classifier_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            decision_tree_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            from abupy import AbuML, ml\n            ttn_abu = AbuML.create_test_more_fiter()\n            ttn_abu.decision_tree_classifier_best()\n\n            decision_tree_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n            param_grid = {\'max_features\': [\'sqrt\', \'log2\', ], \'max_depth\': np.arange(1, 10, 1)}\n            ttn_abu.decision_tree_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n            out: DecisionTreeClassifier(max_features=\'sqrt\', max_depth=7)\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                     eg\xef\xbc\x9aparam_grid = {\'max_features\': [\'sqrt\', \'log2\', ],\n                                      \'n_estimators\': np.arange(50, 200, 20)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84DecisionTreeClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.decision_tree_classifier, x, y, param_grid, assign, n_jobs, show,\n                                            grid_callback=ABuMLGrid.grid_search_init_max_depth)\n\n    def knn_classifier(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96KNeighborsClassifier\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            KNeighborsClassifier(n_neighbors=1)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0KNeighborsClassifier\xef\xbc\x8c\xe5\x8d\xb3:\n            KNeighborsClassifier(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84KNeighborsClassifier\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: KNeighborsClassifier(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: KNeighborsClassifier(n_neighbors=1)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84KNeighborsClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if kwargs is not None and len(kwargs) > 0:\n            clf = KNeighborsClassifier(**kwargs)\n        else:\n            clf = KNeighborsClassifier(n_neighbors=1)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def knn_classifier_best(self, x, y, param_grid=None, assign=True, n_jobs=-1, show=True):\n        """"""\n        \xe5\xaf\xbb\xe6\x89\xbeKNeighborsClassifier\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\n\n        \xe4\xb8\x8a\xe5\xb1\x82AbuML\xe4\xb8\xadknn_classifier_best\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe4\xb8\xad\xe7\x9a\x84x\xef\xbc\x8cy\xe6\x95\xb0\xe6\x8d\xae\xe8\xb0\x83\xe7\x94\xa8\n        eg\xef\xbc\x9a\n          knn_classifier_best\xe6\x97\xa0param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n          from abupy import AbuML, ml\n          ttn_abu = AbuML.create_test_more_fiter()\n          ttn_abu.knn_classifier_best()\n\n          knn_classifier_best\xe6\x9c\x89param_grid\xe5\x8f\x82\xe6\x95\xb0\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x9a\n\n          param_grid = {\'algorithm\': [\'ball_tree\', \'kd_tree\', \'brute\'], \'n_neighbors\': np.arange(1, 26, 1)}\n          ttn_abu.knn_classifier_best(param_grid=param_grid, n_jobs=-1)\n\n          out: KNeighborsClassifier(algorithm=\'ball_tree\', n_neighbors=14)\n\n        :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n        :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n        :param param_grid: \xe6\x9c\x80\xe4\xbc\x98\xe5\xad\x97\xe5\x85\xb8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n                   eg\xef\xbc\x9aparam_grid = {\'algorithm\': [\'ball_tree\', \'kd_tree\', \'brute\'],\n                                    \'n_neighbors\': np.arange(1, 26, 1)}\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\n        :return: \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84KNeighborsClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return self._estimators_prarms_best(self.knn_classifier, x, y, param_grid, assign, n_jobs, show,\n                                            grid_callback=ABuMLGrid.grid_search_init_n_neighbors)\n\n    def logistic_classifier(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96LogisticRegression\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            LogisticRegression(C=1.0, penalty=\'l1\', tol=1e-6)\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0LogisticRegression\xef\xbc\x8c\xe5\x8d\xb3:\n            LogisticRegression(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84LogisticRegression\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.clf = clf\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: LogisticRegression(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: LogisticRegression(C=1.0, penalty=\'l1\', tol=1e-6)\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84LogisticRegression\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            clf = LogisticRegression(**kwargs)\n        else:\n            clf = LogisticRegression(C=1.0, penalty=\'l1\', tol=1e-6)\n        if assign:\n            self.clf = clf\n        return clf\n\n    def linear_regression(self, assign=True, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96LinearRegression\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            LinearRegression()\n\n        \xe9\x80\x9a\xe8\xbf\x87**kwargs\xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0LinearRegression\xef\xbc\x8c\xe5\x8d\xb3:\n            LinearRegression(**kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84LinearRegression\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param kwargs: \xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: LinearRegression(**kwargs)\n                       \xe6\x97\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96: LinearRegression()\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84LinearRegression\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kwargs is not None and len(kwargs) > 0:\n            reg = LinearRegression(**kwargs)\n        else:\n            reg = LinearRegression()\n        if assign:\n            self.reg = reg\n        return reg\n\n    def polynomial_regression(self, assign=True, degree=2, **kwargs):\n        """"""\n        \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n            make_pipeline(PolynomialFeatures(degree), LinearRegression(**kwargs))\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84LinearRegression\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\xef\xbc\x8cself.reg = reg\n        :param degree: \xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa42\n        :param kwargs: \xe7\x94\xb1make_pipeline(PolynomialFeatures(degree), LinearRegression(**kwargs))\n                       \xe5\x8d\xb3\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0**kwargs\xe5\x85\xa8\xe9\x83\xa8\xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99LinearRegression\xe5\x81\x9a\xe4\xb8\xba\xe6\x9e\x84\xe9\x80\xa0\xe5\x8f\x82\xe6\x95\xb0\n\n        :return: \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84\xe5\x9b\x9e\xe5\xbd\x92\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        reg = make_pipeline(PolynomialFeatures(degree), LinearRegression(**kwargs))\n        if assign:\n            self.reg = reg\n        return reg\n\n    def onevsone_classifier(self, assign=False, **kwargs):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8OneVsOneClassifier\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9alabel\xe7\x9a\x84\n        \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xba\x8c\xe6\xac\xa1\xe5\xb0\x81\xe8\xa3\x85\xef\xbc\x8c\xe5\x8d\xb3\xef\xbc\x9a\n             OneVsOneClassifier(self.clf, **kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84\xe4\xba\x8c\xe6\xac\xa1\xe5\xb0\x81\xe8\xa3\x85\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x8e\xe5\x85\xb6\xe5\xae\x83\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\n                       \xe9\xbb\x98\xe8\xae\xa4False\xef\xbc\x8c\xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe7\xb1\xbb\xe4\xb8\xad\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n        :param kwargs: \xe9\x80\x8f\xe4\xbc\xa0OneVsOneClassifier\xe5\x81\x9a\xe4\xb8\xba\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n        :return: OneVsOneClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        onevsone = OneVsOneClassifier(self.clf, **kwargs)\n        if assign:\n            self.clf = onevsone\n        return onevsone\n\n    def onevsreset_classifier(self, assign=False, **kwargs):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8OneVsRestClassifier\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9alabel\xe7\x9a\x84\n        \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xba\x8c\xe6\xac\xa1\xe5\xb0\x81\xe8\xa3\x85\xef\xbc\x8c\xe5\x8d\xb3\xef\xbc\x9a\n             OneVsRestClassifier(self.clf, **kwargs)\n\n        :param assign: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x9e\xe4\xbe\x8b\xe5\x90\x8e\xe7\x9a\x84\xe4\xba\x8c\xe6\xac\xa1\xe5\xb0\x81\xe8\xa3\x85\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x8e\xe5\x85\xb6\xe5\xae\x83\xe6\x9e\x84\xe9\x80\xa0\xe5\x99\xa8\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\n                       \xe9\xbb\x98\xe8\xae\xa4False\xef\xbc\x8c\xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe7\xb1\xbb\xe4\xb8\xad\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n        :param kwargs: \xe9\x80\x8f\xe4\xbc\xa0OneVsRestClassifier\xe5\x81\x9a\xe4\xb8\xba\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\n        :return: OneVsRestClassifier\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        onevsreset = OneVsRestClassifier(self.clf, **kwargs)\n        if assign:\n            self.clf = onevsreset\n        return onevsreset\n'"
abupy/MLBu/ABuMLExecute.py,26,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\xb0\x81\xe8\xa3\x85\xe5\xb8\xb8\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe6\x9e\x90\xe6\x96\xb9\xe5\xbc\x8f\xe5\x8f\x8a\xe6\xb5\x81\xe7\xa8\x8b\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport os\n\nimport matplotlib.cbook as cbook\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import interp\nfrom sklearn import metrics\nfrom sklearn import tree\nfrom sklearn.base import ClusterMixin, clone\nfrom sklearn.metrics import roc_curve, auc\n\nfrom ..CoreBu.ABuFixes import KFold, learning_curve\nfrom ..UtilBu.ABuDTUtil import warnings_filter\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import range\nfrom ..UtilBu.ABuFileUtil import file_exist\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n__all__ = [\n           \'run_silhouette_cv_estimator\',\n           \'run_prob_cv_estimator\',\n           \'run_cv_estimator\',\n           \'plot_learning_curve\',\n           \'plot_decision_boundary\',\n           \'plot_confusion_matrices\',\n           \'plot_roc_estimator\',\n           \'graphviz_tree\',\n           \'visualize_tree\'\n           ]\n\n\n# noinspection PyUnresolvedReferences\ndef run_silhouette_cv_estimator(estimator, x, n_folds=10):\n    """"""\n    \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9kmean\xe7\x9a\x84cv\xe9\xaa\x8c\xe8\xaf\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8silhouette_score\xe5\xaf\xb9\xe8\x81\x9a\xe7\xb1\xbb\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9clabels_\n    \xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xe4\xbd\xbf\xe7\x94\xa8silhouette_score\xef\xbc\x8ckmean\xe7\x9a\x84cv\xe9\xaa\x8c\xe8\xaf\x81\xe5\x8f\xaa\xe6\x98\xaf\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe9\x80\x9a\xe8\xbf\x87np.random.choice\n    \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x9a\x8f\xe6\x9c\xba\xe7\xad\x9b\xe9\x80\x89x\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x81\x9a\xe7\xb1\xbb\xe7\x9a\x84silhouette_score\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8a\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n    :param estimator: keman\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x8c\x81estimator.labels_, \xe5\x8f\xaa\xe9\x80\x9a\xe8\xbf\x87if not isinstance(estimator, ClusterMixin)\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\n    :param x: x\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\n    :param n_folds: int\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0KFold\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :return: eg: array([ 0.693 ,  0.652 ,  0.6845,  0.6696,  0.6732,  0.6874,  0.668 ,\n                         0.6743,  0.6748,  0.671 ])\n    """"""\n\n    if not isinstance(estimator, ClusterMixin):\n        print(\'estimator must be ClusterMixin\')\n        return\n\n    silhouette_list = list()\n    # eg: n_folds = 10, len(x) = 150 -> 150 * 0.9 = 135\n    choice_cnt = int(len(x) * ((n_folds - 1) / n_folds))\n    choice_source = np.arange(0, x.shape[0])\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8cfit\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8clone\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\n    estimator = clone(estimator)\n    for _ in np.arange(0, n_folds):\n        # \xe5\x8f\xaa\xe6\x98\xaf\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe9\x80\x9a\xe8\xbf\x87np.random.choice\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x9a\x8f\xe6\x9c\xba\xe7\xad\x9b\xe9\x80\x89x\xe6\x95\xb0\xe6\x8d\xae\n        choice_index = np.random.choice(choice_source, choice_cnt)\n        x_choice = x[choice_index]\n        estimator.fit(x_choice)\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe8\x81\x9a\xe7\xb1\xbb\xe7\x9a\x84silhouette_score\xe5\xba\xa6\xe9\x87\x8f\n        silhouette_score = metrics.silhouette_score(x_choice, estimator.labels_, metric=\'euclidean\')\n        silhouette_list.append(silhouette_score)\n    return silhouette_list\n\n\ndef run_prob_cv_estimator(estimator, x, y, n_folds=10):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87KFold\xe5\x92\x8c\xe5\x8f\x82\xe6\x95\xb0n_folds\xe6\x8b\x86\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\n    np.zeros((len(y), len(np.unique(y))))\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96prob\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\n    \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xad\xe7\xbb\x83estimator.fit(x_train, y_train)\xe5\x90\x8e\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\n    predict_proba\xe5\xb0\x86y_prob\xe4\xb8\xad\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe5\xa1\xab\xe6\x95\xb0\xe6\x8d\xae\n\n    :param estimator: \xe6\x94\xaf\xe6\x8c\x81predict_proba\xe7\x9a\x84\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0, \xe5\x8f\xaa\xe9\x80\x9a\xe8\xbf\x87hasattr(estimator, \'predict_proba\')\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param n_folds: int\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0KFold\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :return: eg: y_prob\n                array([[ 0.8726,  0.1274],\n                       [ 0.0925,  0.9075],\n                       [ 0.2485,  0.7515],\n                       ...,\n                       [ 0.3881,  0.6119],\n                       [ 0.7472,  0.2528],\n                       [ 0.8555,  0.1445]])\n\n    """"""\n    if not hasattr(estimator, \'predict_proba\'):\n        print(\'estimator must has predict_proba\')\n        return\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8cfit\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8clone\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\n    estimator = clone(estimator)\n    kf = KFold(len(y), n_folds=n_folds, shuffle=True)\n    y_prob = np.zeros((len(y), len(np.unique(y))))\n    """"""\n        \xe6\xa0\xb9\xe6\x8d\xaey\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe4\xbb\xa5\xe5\x8f\x8ay\xe7\x9a\x84label\xe6\x95\xb0\xe9\x87\x8f\xe6\x9e\x84\xe9\x80\xa0\xe5\x85\xa8\xe6\x98\xaf0\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\n        eg: y_prob\n        array([[ 0.,  0.,  0.],\n               [ 0.,  0.,  0.],\n               [ 0.,  0.,  0.],\n                ..............\n               [ 0.,  0.,  0.],\n               [ 0.,  0.,  0.],\n               [ 0.,  0.,  0.],\n    """"""\n\n    for train_index, test_index in kf:\n        x_train, x_test = x[train_index], x[test_index]\n        y_train = y[train_index]\n\n        # clf = clone(estimator)\n        estimator.fit(x_train, y_train)\n        # \xe4\xbd\xbf\xe7\x94\xa8predict_proba\xe5\xb0\x86y_prob\xe4\xb8\xad\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe5\xa1\xab\xe6\x95\xb0\xe6\x8d\xae\n        y_prob[test_index] = estimator.predict_proba(x_test)\n\n    return y_prob\n\n\ndef run_cv_estimator(estimator, x, y, n_folds=10):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87KFold\xe5\x92\x8c\xe5\x8f\x82\xe6\x95\xb0n_folds\xe6\x8b\x86\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\n    y.copy()\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96y_pred\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\n    \xe4\xb8\x8d\xe6\x96\xad\xe9\x80\x9a\xe8\xbf\x87 estimator.predict(x_test)\xe5\xb0\x86y_pred\xe4\xb8\xad\xe7\x9a\x84\xe5\x80\xbc\xe9\x80\x90\xe6\xad\xa5\xe6\x9b\xbf\xe6\x8d\xa2\n\n    :param estimator: \xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param n_folds: int\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0KFold\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :return: y_pred\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    if not hasattr(estimator, \'predict\'):\n        print(\'estimator must has predict\')\n        return\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8cfit\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8clone\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\n    estimator = clone(estimator)\n    kf = KFold(len(y), n_folds=n_folds, shuffle=True)\n    # \xe9\xa6\x96\xe5\x85\x88copy\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe6\x91\xb8\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84y\n    y_pred = y.copy()\n    """"""\n        eg: y_pred\n        array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n               0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n               1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n               2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n               2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    """"""\n\n    for train_index, test_index in kf:\n        x_train, x_test = x[train_index], x[test_index]\n        y_train = y[train_index]\n        estimator.fit(x_train, y_train)\n        # \xe9\x80\x9a\xe8\xbf\x87 estimator.predict(x_test)\xe5\xb0\x86y_pred\xe4\xb8\xad\xe7\x9a\x84\xe5\x80\xbc\xe9\x80\x90\xe6\xad\xa5\xe6\x9b\xbf\xe6\x8d\xa2\n        y_pred[test_index] = estimator.predict(x_test)\n    return y_pred\n\n\n# warnings_filter\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x9a\xe6\xa0\x87\xe7\xad\xbe\xe4\xbd\xbf\xe7\x94\xa8OneVsRestClassifier\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe8\xad\xa6\xe5\x91\x8a\n@warnings_filter\ndef plot_learning_curve(estimator, x, y, cv=5, n_jobs=1,\n                        train_sizes=np.linspace(.05, 1., 20)):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe5\xad\xa6\xe4\xb9\xa0\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8ctrain_sizes\xe4\xbd\xbf\xe7\x94\xa8np.linspace(.05, 1., 20)\xe5\x8d\xb3\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xbb\x8e5%\xef\xbc\x8d100%\xe9\x80\x92\xe8\xbf\x9b\n\n            np.linspace(.05, 1., 20)\n            array([ 0.05,  0.1 ,  0.15,  0.2 ,  0.25,  0.3 ,  0.35,  0.4 ,  0.45,\n                    0.5 ,  0.55,  0.6 ,  0.65,  0.7 ,  0.75,  0.8 ,  0.85,  0.9 ,\n                    0.95,  1.  ])\n\n    \xe5\xa5\x97\xe6\x8e\xa5sklern\xe4\xb8\xadlearning_curve\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbc\xa0\xe9\x80\x92estimator\xef\xbc\x8ccv\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0learning_curve\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param cv: \xe9\x80\x8f\xe4\xbc\xa0learning_curve\xef\xbc\x8ccv\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa45\xef\xbc\x8cint\n    :param n_jobs: \xe9\x80\x8f\xe4\xbc\xa0learning_curve\xef\xbc\x8c\xe5\xb9\xb6\xe8\xa1\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\n    :param train_sizes: train_sizes\xe4\xbd\xbf\xe7\x94\xa8np.linspace(.05, 1., 20)\xe5\x8d\xb3\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xbb\x8e5%\xef\xbc\x8d100%\xe9\x80\x92\xe8\xbf\x9b\n    """"""\n\n    # \xe5\xa5\x97\xe6\x8e\xa5learning_curve\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84score\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84size\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, x, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    """"""\n        eg:  train_scores shape = (20, 5)\n        array([[ 0.8571,  0.9143,  0.9143,  0.9143,  0.9143],\n               [ 0.8169,  0.8732,  0.8732,  0.8732,  0.8732],\n               [ 0.8208,  0.8396,  0.8396,  0.8396,  0.8396],\n               [ 0.8028,  0.8099,  0.8099,  0.8099,  0.8099],\n               [ 0.8146,  0.8202,  0.8146,  0.8146,  0.8146],\n               [ 0.8263,  0.8263,  0.8216,  0.8216,  0.8216],\n               [ 0.8153,  0.8273,  0.8112,  0.8112,  0.8112],\n               [ 0.8063,  0.8169,  0.7993,  0.7993,  0.7993],\n               [ 0.8156,  0.8281,  0.8063,  0.8063,  0.8063],\n               [ 0.8169,  0.8254,  0.8254,  0.8254,  0.8254],\n               [ 0.8184,  0.8235,  0.8261,  0.8312,  0.8312],\n               [ 0.815 ,  0.822 ,  0.8197,  0.822 ,  0.822 ],\n               [ 0.816 ,  0.8203,  0.8203,  0.8182,  0.8182],\n               [ 0.8133,  0.8173,  0.8173,  0.8253,  0.8253],\n               [ 0.8109,  0.8127,  0.8146,  0.8202,  0.8221],\n               [ 0.8155,  0.819 ,  0.8172,  0.8207,  0.8225],\n               [ 0.8149,  0.8248,  0.8231,  0.8248,  0.8198],\n               [ 0.8187,  0.8281,  0.825 ,  0.8328,  0.8219],\n               [ 0.8254,  0.8299,  0.8284,  0.8343,  0.8166],\n               [ 0.8272,  0.8315,  0.8301,  0.8343,  0.8174]])\n    """"""\n    train_scores_mean = np.mean(train_scores, axis=1)\n    """"""\n        eg: train_scores_mean\n            array([ 0.9029,  0.862 ,  0.8358,  0.8085,  0.8157,  0.8235,  0.8153,\n            0.8042,  0.8125,  0.8237,  0.8261,  0.8201,  0.8186,  0.8197,\n            0.8161,  0.819 ,  0.8215,  0.8253,  0.8269,  0.8281])\n    """"""\n    train_scores_std = np.std(train_scores, axis=1)\n\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    """"""\n         eg: test_scores_std\n            array([ 0.0751,  0.0607,  0.0314,  0.0059,  0.0047,  0.0066,  0.0074,\n                    0.0051,  0.0107,  0.0115,  0.0107,  0.012 ,  0.0142,  0.018 ,\n                    0.0134,  0.0167,  0.0167,  0.0127,  0.0128,  0.0113])\n    """"""\n    # \xe5\xbc\x80\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xad\xa6\xe4\xb9\xa0\xe6\x9b\xb2\xe7\xba\xbf\n    plt.figure()\n    plt.title(\'learning curve\')\n    plt.xlabel(""train sizes"")\n    plt.ylabel(""scores"")\n    plt.gca().invert_yaxis()\n    plt.grid()\n    # \xe5\xaf\xb9train_scores\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe5\x92\x8c\xe6\x96\xb9\xe5\xb7\xae\xe5\x8c\xba\xe5\x9f\x9f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa1\xab\xe5\x85\x85\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std,\n                     alpha=0.1, color=""g"")\n    # \xe5\xaf\xb9test_scores\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe5\x92\x8c\xe6\x96\xb9\xe5\xb7\xae\xe5\x8c\xba\xe5\x9f\x9f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa1\xab\xe5\x85\x85\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std,\n                     alpha=0.1, color=""r"")\n    # \xe6\x8a\x8atrain_scores_mean\xe6\xa0\x87\xe6\xb3\xa8\xe5\x9c\x86\xe5\x9c\x88\n    plt.plot(train_sizes, train_scores_mean, \'o-\', color=""g"", label=""train scores"")\n    # \xe6\x8a\x8attest_scores_mean\xe6\xa0\x87\xe6\xb3\xa8\xe5\x9c\x86\xe5\x9c\x88\n    plt.plot(train_sizes, test_scores_mean, \'o-\', color=""r"", label=""test scores"")\n    plt.legend(loc=""best"")\n    plt.draw()\n    plt.gca().invert_yaxis()\n    plt.show()\n\n\ndef graphviz_tree(estimator, features, x, y):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe5\x86\xb3\xe7\xad\x96\xe6\xa0\x91\xe6\x88\x96\xe8\x80\x85core\xe5\x9f\xba\xe4\xba\x8e\xe6\xa0\x91\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe5\x9b\x9e\xe5\xbd\x92\xe7\xae\x97\xe6\xb3\x95\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe7\xa4\xba\xe6\x84\x8f\xe5\x9b\xbe\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe6\x9f\xa5\xe7\x9c\x8b\n    \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe6\x9c\xac\xe8\xba\xabhasattr(fiter, \'tree_\')\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89tree_\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8clone(estimator)\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\n    \xe5\x90\x8e\xe5\x86\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8sklearn\xe4\xb8\xadtree.export_graphvizd\xe5\xaf\xbc\xe5\x87\xbagraphviz.dot\xe6\x96\x87\xe4\xbb\xb6\n    \xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9dot\xe5\xb7\xa5\xe5\x85\xb7\xe5\xb0\x86graphviz.dot\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2graphviz.png\xef\xbc\x8c\xe5\x8d\xb3\xe5\x86\x85\xe9\x83\xa8\xe5\xae\x9e\xe8\xa1\x8c\xe4\xbd\xbf\xe7\x94\xa8\n    \xe8\xbf\x90\xe8\xa1\x8c\xe5\x91\xbd\xe4\xbb\xa4\xe8\xa1\x8c\xef\xbc\x9a\n                os.system(""dot -T png graphviz.dot -o graphviz.png"")\n    \xe6\x9c\x80\xe5\x90\x8e\xe8\xaf\xbb\xe5\x8f\x96\xe5\x86\xb3\xe7\xad\x96\xe7\xa4\xba\xe6\x84\x8f\xe5\x9b\xbe\xe6\x98\xbe\xe7\xa4\xba\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0learning_curve\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param features: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xe5\x88\x97\xe7\x89\xb9\xe5\xbe\x81\xe6\x89\x80\xe9\x98\x9f\xe5\x91\x98\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if not hasattr(estimator, \'tree_\'):\n        logging.info(\'only tree can graphviz!\')\n        return\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8cfit\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8clone\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\n    estimator = clone(estimator)\n    estimator.fit(x, y)\n    # TODO out_file path\xe6\x94\xbe\xe5\x80\x92cache\xe4\xb8\xad\n    tree.export_graphviz(estimator.tree_, out_file=\'graphviz.dot\', feature_names=features)\n    os.system(""dot -T png graphviz.dot -o graphviz.png"")\n\n    \'\'\'\n        !open $path\n        \xe8\xa6\x81\xe6\x98\xaf\xe6\x96\xb9\xe4\xbe\xbf\xe7\x94\xa8notebook\xe7\x9b\xb4\xe6\x8e\xa5open\xe5\x85\xb6\xe5\xae\x9e\xe6\x98\xbe\xe7\xa4\xba\xe6\x95\x88\xe6\x9e\x9c\xe5\xa5\xbd\xef\xbc\x8cplt\xef\xbc\x8cshow\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\x8d\xe5\xa5\xbd\xe8\xb0\x83\xe6\x95\xb4\n    \'\'\'\n    graphviz = os.path.join(os.path.abspath(\'.\'), \'graphviz.png\')\n\n    # path = graphviz\n    # !open $path\n    if not file_exist(graphviz):\n        logging.info(\'{} not exist! please install dot util!\'.format(graphviz))\n        return\n\n    image_file = cbook.get_sample_data(graphviz)\n    image = plt.imread(image_file)\n    image_file.close()\n    plt.imshow(image)\n    plt.axis(\'off\')  # clear x- and y-axes\n    plt.show()\n\n\ndef visualize_tree(estimator, x, y, boundaries=True):\n    """"""\n    \xe9\x9c\x80\xe8\xa6\x81x\xe7\x9f\xa9\xe9\x98\xb5\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaex\xef\xbc\x8cy\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87meshgrid\xe6\x9e\x84\xe9\x80\xa0\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\xb9\xb3\xe9\x9d\xa2\xe7\x89\xb9\xe5\xbe\x81\n    \xe9\x80\x9a\xe8\xbf\x87z = estimator.predict(np.c_[xx.ravel(), yy.ravel()])\xe5\xaf\xb9\xe7\x89\xb9\xe5\xbe\x81\xe5\xb9\xb3\xe9\x9d\xa2\n    \xe8\xbf\x9b\xe8\xa1\x8cpredict\xe7\x94\x9f\xe6\x88\x90z\xe8\xbd\xb4\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96meshgrid\xe6\x9e\x84\xe9\x80\xa0\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\xb9\xb3\xe9\x9d\xa2\xe7\x89\xb9\xe5\xbe\x81\xe4\xbd\xbf\xe7\x94\xa8\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84z\xe7\x94\x9f\xe6\x88\x90\n    pcolormesh\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8clone(estimator)\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param boundaries: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe5\x86\xb3\xe7\xad\x96\xe8\xbe\xb9\xe7\x95\x8c\n\n    """"""\n    if x.shape[1] != 2:\n        logging.info(\'be sure x shape[1] == 2!\')\n        return\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8cfit\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8clone\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\n    estimator = clone(estimator)\n    estimator.fit(x, y)\n\n    xlim = (x[:, 0].min() - 0.1, x[:, 0].max() + 0.1)\n    ylim = (x[:, 1].min() - 0.1, x[:, 1].max() + 0.1)\n    x_min, x_max = xlim\n    y_min, y_max = ylim\n    # \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xadx\xe7\x9a\x84min\xe5\x92\x8cmax\xef\xbc\x8cy\xe7\x9a\x84min\xef\xbc\x8cmax\xe6\x9e\x84\xe6\x88\x90meshgrid\n    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),\n                         np.linspace(y_min, y_max, 100))\n    # \xe6\x91\x8a\xe5\xb9\xb3xx\xef\xbc\x8cyy\xe8\xbf\x9b\xe8\xa1\x8cz\xe8\xbd\xb4\xe7\x9a\x84predict\n    z = estimator.predict(np.c_[xx.ravel(), yy.ravel()])\n    # z\xe7\x9a\x84shape\xe8\xb7\x9f\xe9\x9a\x8fxx\n    z = z.reshape(xx.shape)\n    plt.figure()\n    plt.pcolormesh(xx, yy, z, alpha=0.2, cmap=\'rainbow\')\n    plt.clim(y.min(), y.max())\n\n    # \xe5\xb0\x86\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8cscatter\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe9\xa2\x9c\xe8\x89\xb2\xe4\xbd\xbf\xe7\x94\xa8y\xe5\x81\x9a\xe5\x8c\xba\xe5\x88\x86\n    plt.scatter(x[:, 0], x[:, 1], c=y, s=50, cmap=\'rainbow\')\n    plt.axis(\'off\')\n\n    plt.xlim(x_min, x_max)\n    plt.ylim(y_min, y_max)\n    plt.clim(y.min(), y.max())\n\n    def plot_boundaries(i, p_xlim, p_ylim):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\x89tree_\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\xbb\x98\xe5\x88\xb6\xe5\x86\xb3\xe7\xad\x96\xe8\xbe\xb9\xe7\x95\x8c\n        :param i: \xe5\x86\x85\xe9\x83\xa8\xe9\x80\x92\xe5\xbd\x92\xe8\xb0\x83\xe7\x94\xa8\xe4\xbd\xbf\xe7\x94\xa8ree_inner.children_left[i]\xe5\x92\x8ctree_inner.children_right[i]\n        :param p_xlim: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8plt.xlim()\n        :param p_ylim: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8plt.ylim()\n        """"""\n        if i < 0:\n            return\n        # \xe6\x8b\xbf\xe5\x88\xb0tree_\xe4\xbd\xbf\xe7\x94\xa8plot_boundaries\xe7\xbb\xa7\xe7\xbb\xad\xe9\x80\x92\xe5\xbd\x92\xe7\xbb\x98\xe5\x88\xb6\n        tree_inner = estimator.tree_\n\n        if tree_inner.feature[i] == 0:\n            # \xe7\xbb\x98\xe5\x88\xb60\xe7\x9a\x84\xe8\xbe\xb9\xe7\x95\x8c\n            plt.plot([tree_inner.threshold[i], tree_inner.threshold[i]], p_ylim, \'-k\')\n            # \xe5\x8d\xb3x\xe8\xbd\xb4\xe5\x9b\xba\xe5\xae\x9ap_ylim\xef\xbc\x8cxlim=[p_xlim[0], tree_inner.threshold[i]], [tree_inner.threshold[i], p_xlim[1]]\n            plot_boundaries(tree_inner.children_left[i],\n                            [p_xlim[0], tree_inner.threshold[i]], p_ylim)\n            plot_boundaries(tree_inner.children_right[i],\n                            [tree_inner.threshold[i], p_xlim[1]], p_ylim)\n        elif tree_inner.feature[i] == 1:\n            # \xe7\xbb\x98\xe5\x88\xb61\xe7\x9a\x84\xe8\xbe\xb9\xe7\x95\x8c\n            plt.plot(p_xlim, [tree_inner.threshold[i], tree_inner.threshold[i]], \'-k\')\n            # \xe5\x8d\xb3y\xe8\xbd\xb4\xe5\x9b\xba\xe5\xae\x9ap_xlim\xef\xbc\x8cylim=[p_ylim[0], tree_inner.threshold[i]], [tree_inner.threshold[i], p_ylim[1]]\n            plot_boundaries(tree_inner.children_left[i], p_xlim,\n                            [p_ylim[0], tree_inner.threshold[i]])\n            plot_boundaries(tree_inner.children_right[i], p_xlim,\n                            [tree_inner.threshold[i], p_ylim[1]])\n\n    if boundaries and hasattr(estimator, \'tree_\'):\n        # \xe7\xae\x80\xe5\x8d\x95\xe5\x86\xb3\xe7\xad\x96\xe6\xa0\x91\xe6\x89\x8d\xe5\x8e\xbb\xe7\x94\xbb\xe5\x86\xb3\xe7\xad\x96\xe8\xbe\xb9\xe7\x95\x8c\n        plot_boundaries(0, plt.xlim(), plt.ylim())\n\n\ndef plot_decision_boundary(pred_func, x, y):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87x\xef\xbc\x8cy\xe4\xbb\xa5\xe6\x9e\x84\xe5\xbb\xbameshgrid\xe5\xb9\xb3\xe9\x9d\xa2\xe5\x8c\xba\xe5\x9f\x9f\xef\xbc\x8c\xe8\xa6\x81x\xe7\x9f\xa9\xe9\x98\xb5\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8c\xba\xe5\x9f\x9f\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x96\xe9\x83\xa8\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\n    pred_func\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cz\xe8\xbd\xb4\xe7\x9a\x84predict\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87contourf\xe7\xbb\x98\xe5\x88\xb6\xe7\x89\xb9\xe5\xbe\x81\xe5\xb9\xb3\xe9\x9d\xa2\xe5\x8c\xba\xe5\x9f\x9f\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\n    plt.scatter(x[:, 0], x[:, 1], c=y, cmap=plt.cm.Spectral)\xe5\x9c\xa8\xe5\xb9\xb3\xe9\x9d\xa2\xe5\x8c\xba\xe5\x9f\x9f\xe4\xb8\x8a\xe5\xa1\xab\xe5\x85\x85\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x89\xb9\xe5\xbe\x81\n    \xe7\x82\xb9\n\n    :param pred_func: callable\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8ceg\xef\xbc\x9apred_func: lambda p_x: fiter.predict(p_x), x, y\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    xlim = (x[:, 0].min() - 0.1, x[:, 0].max() + 0.1)\n    ylim = (x[:, 1].min() - 0.1, x[:, 1].max() + 0.1)\n    x_min, x_max = xlim\n    y_min, y_max = ylim\n    # \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xadx\xe7\x9a\x84min\xe5\x92\x8cmax\xef\xbc\x8cy\xe7\x9a\x84min\xef\xbc\x8cmax\xe6\x9e\x84\xe6\x88\x90meshgrid\n    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 200),\n                         np.linspace(y_min, y_max, 200))\n    # \xe6\x91\x8a\xe5\xb9\xb3xx\xef\xbc\x8cyy\xe8\xbf\x9b\xe8\xa1\x8cz\xe8\xbd\xb4\xe7\x9a\x84predict, pred_func: lambda p_x: fiter.predict(p_x), x, y\n    z = pred_func(np.c_[xx.ravel(), yy.ravel()])\n    # z\xe7\x9a\x84shape\xe8\xb7\x9f\xe9\x9a\x8fxx\n    z = z.reshape(xx.shape)\n    # \xe4\xbd\xbf\xe7\x94\xa8contourf\xe7\xbb\x98\xe5\x88\xb6xx, yy, z\xef\xbc\x8c\xe5\x8d\xb3\xe7\x89\xb9\xe5\xbe\x81\xe5\xb9\xb3\xe9\x9d\xa2\xe5\x8c\xba\xe5\x9f\x9f\xe4\xbb\xa5\xe5\x8f\x8az\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xe5\x8c\xba\xe5\x88\xab\n    # noinspection PyUnresolvedReferences\n    plt.contourf(xx, yy, z, cmap=plt.cm.Spectral)\n    # noinspection PyUnresolvedReferences\n    # \xe5\x9c\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\x8c\xba\xe5\x9f\x9f\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe4\xb8\x8a\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xef\xbc\x8c\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe4\xbd\xbf\xe7\x94\xa8scatter\xe7\xbb\x98\xe5\x88\xb6\xe4\xbb\xa5y\xe4\xb8\xba\xe9\xa2\x9c\xe8\x89\xb2\xe7\x9a\x84\xe7\x82\xb9\n    plt.scatter(x[:, 0], x[:, 1], c=y, cmap=plt.cm.Spectral)\n    plt.show()\n\n\ndef plot_roc_estimator(estimator, x, y, pos_label=None):\n    """"""\n    \xe5\x9b\xba\xe5\xae\x9an_folds=10\xe9\x80\x9a\xe8\xbf\x87kf = KFold(len(y), n_folds=10, shuffle=True)\xe6\x8b\x86\xe5\x88\x86\n    \xe8\xae\xad\xe7\xbb\x83\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8estimator.predict_proba\xe5\xaf\xb9\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa6\x82\xe7\x8e\x87\xe7\xbb\x9f\xe8\xae\xa1\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\n    sklearn\xe4\xb8\xad\xe7\x9a\x84roc_curve\xe5\x88\x86\xe5\x88\xab\xe5\xaf\xb9\xe5\xa4\x9a\xe7\xbb\x84\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\xae\xa1\xe7\xae\x97fpr, tpr, thresholds\xef\xbc\x8c\xe5\xb9\xb6\xe8\xae\xa1\xe7\xae\x97roc_auc\n    \xe6\x9c\x80\xe5\x90\x8e\xe7\xbb\x98\xe5\x88\xb6roc_auc\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n\n    :param estimator: \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8clone(estimator)\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param pos_label: \xe5\xaf\xb9y\xe5\xa4\xa7\xe4\xba\x8e2\xe4\xb8\xaalabel\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8croc_curve\xe9\x9c\x80\xe8\xa6\x81\xe6\x8c\x87\xe5\xae\x9apos_label\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x8c\x87\xe5\xae\x9a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8y\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaalabel\xe5\x80\xbc\n    """"""\n\n    if not hasattr(estimator, \'predict_proba\'):\n        # \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89predict_proba\xe6\x96\xb9\xe6\xb3\x95\n        logging.info(\'estimator must has predict_proba!\')\n        return\n\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x89\xa7\xe8\xa1\x8cfit\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8clone\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84\n    estimator = clone(estimator)\n    estimator.fit(x, y)\n\n    # eg: y_unique = [0, 1]\n    y_unique = np.unique(y)\n    kf = KFold(len(y), n_folds=10, shuffle=True)\n    y_prob = np.zeros((len(y), len(y_unique)))\n    """"""\n        eg:  y_prob\n            array([[ 0.,  0.],\n                   [ 0.,  0.],\n                   [ 0.,  0.],\n                   ...,\n                   [ 0.,  0.],\n                   [ 0.,  0.],\n                   [ 0.,  0.]])\n    """"""\n    mean_tpr = 0.0\n    # 0-1\xe5\x88\x86\xe5\xb8\x83100\xe4\xb8\xaa\n    mean_fpr = np.linspace(0, 1, 100)\n    for i, (train_index, test_index) in enumerate(kf):\n        x_train, x_test = x[train_index], x[test_index]\n        y_train = y[train_index]\n        estimator.fit(x_train, y_train)\n        y_prob[test_index] = estimator.predict_proba(x_test)\n        """"""\n            eg: y_prob[test_index]\n            array([[ 0.8358,  0.1642],\n                   [ 0.4442,  0.5558],\n                   [ 0.1351,  0.8649],\n                   [ 0.8567,  0.1433],\n                   [ 0.6953,  0.3047],\n                   ..................\n                   [ 0.1877,  0.8123],\n                   [ 0.8465,  0.1535],\n                   [ 0.1916,  0.8084],\n                   [ 0.8421,  0.1579]])\n\n        """"""\n        if len(y_unique) != 2 and pos_label is None:\n            # \xe5\xaf\xb9y\xe5\xa4\xa7\xe4\xba\x8e2\xe4\xb8\xaalabel\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8croc_curve\xe9\x9c\x80\xe8\xa6\x81\xe6\x8c\x87\xe5\xae\x9apos_label\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x8c\x87\xe5\xae\x9a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8y\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaalabel\xe5\x80\xbc\n            pos_label = y_unique[0]\n            logging.info(\'y label count > 2 and param pos_label is None, so choice y_unique[0]={} for pos_label!\'.\n                         format(pos_label))\n\n        fpr, tpr, thresholds = roc_curve(y[test_index], y_prob[test_index, 1], pos_label=pos_label)\n        """"""\n            eg:\n                fpr\n                array([ 0.    ,  0.0169,  0.0169,  0.0339,  0.0339,  0.0508,  0.0508,\n                        0.0847,  0.0847,  0.1017,  0.1017,  0.1186,  0.1186,  0.2034,\n                        0.2034,  0.2542,  0.2542,  0.5254,  0.5254,  0.5763,  0.5763,  1.    ])\n                tpr\n                array([ 0.0323,  0.0323,  0.4839,  0.4839,  0.5484,  0.5484,  0.6452,\n                        0.6452,  0.7419,  0.7419,  0.7742,  0.7742,  0.8387,  0.8387,\n                        0.9032,  0.9032,  0.9355,  0.9355,  0.9677,  0.9677,  1.    ,  1.    ])\n\n                thresholds\n                array([ 0.9442,  0.9288,  0.8266,  0.8257,  0.8123,  0.8122,  0.8032,\n                        0.7647,  0.7039,  0.5696,  0.5558,  0.4854,  0.4538,  0.2632,\n                        0.2153,  0.2012,  0.1902,  0.1616,  0.1605,  0.1579,  0.1561,\n                        0.1301])\n        """"""\n\n        # interp\xe7\xba\xbf\xe6\x80\xa7\xe6\x8f\x92\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\n        mean_tpr += interp(mean_fpr, fpr, tpr)\n        # \xe6\x8a\x8a\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc\xe5\x9b\xba\xe5\xae\x9a0\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8mean_tpr[-1] = 1.0\xe6\x8a\x8a\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xba\xe5\xae\x9a1.0\n        mean_tpr[0] = 0.0\n        # \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8 sklearn\xe4\xb8\xad\xe7\x9a\x84metrics.auc\xe8\xae\xa1\xe7\xae\x97\n        roc_auc = auc(fpr, tpr)\n        plt.plot(fpr, tpr, lw=1, label=\'ROC fold %d (area = %0.2f)\' % (i, roc_auc))\n\n    mean_tpr /= len(kf)\n    # \xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xba\xe5\xae\x9a1.0\n    mean_tpr[-1] = 1.0\n    mean_auc = auc(mean_fpr, mean_tpr)\n    plt.plot(mean_fpr, mean_tpr, \'k--\', label=\'Mean ROC (area = %0.2f)\' % mean_auc, lw=2)\n\n    plt.plot([0, 1], [0, 1], \'--\', color=(0.6, 0.6, 0.6), label=\'Random\')\n    plt.xlim([-0.05, 1.05])\n    plt.ylim([-0.05, 1.05])\n    plt.xlabel(\'False Positive Rate\')\n    plt.ylabel(\'True Positive Rate\')\n    plt.title(\'Receiver operating characteristic\')\n    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    plt.show()\n\n\ndef plot_confusion_matrices(estimator, x, y, n_folds=10):\n    """"""\n    \xe5\xa5\x97\xe6\x8e\xa5run_cv_estimator\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x9a\xe8\xbf\x87\xe5\x8f\x82\xe6\x95\xb0n_folds\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x8b\x86\xe5\xb0\x81\n    \xe4\xbd\xbf\xe7\x94\xa8y_pred\xe5\x92\x8cy\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99metrics.confusion_matrix\xe5\x87\xbd\xe6\x95\xb0\n    \xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87ax.matshow\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\n\n    :param estimator: \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8clone(estimator)\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param n_folds: \xe9\x80\x8f\xe4\xbc\xa0KFold\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\n    """"""\n    y_pred = run_cv_estimator(estimator, x, y, n_folds=n_folds)\n    """"""\n        eg: y_pred\n        array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n           0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n           1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n           1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2,\n           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    """"""\n    y_unique = np.unique(y)\n\n    confusion_matrix = metrics.confusion_matrix(y, y_pred)\n    """"""\n        eg: confusion_matrix\n         [[50  0  0]\n         [ 0 47  3]\n         [ 0  1 49]]\n    """"""\n    logging.info(confusion_matrix)\n\n    fig = plt.figure()\n    # \xe9\xa2\x9c\xe8\x89\xb2\xe6\x9d\xa1\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xe6\x95\xb0\xe9\x87\x8f\xe8\xae\xbe\xe7\xbd\xae\xe4\xbd\xbf\xe7\x94\xa8len(y_unique) * len(y_unique)\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa6\x82\xe6\x9e\x9cy\xe6\x98\xaf3\xe4\xb8\xaalabel->9\xe9\xa2\x9c\xe8\x89\xb2\xe3\x80\x822->4\n    cmap = plt.get_cmap(\'jet\', len(y_unique) * len(y_unique))\n    cmap.set_under(\'gray\')\n    ax = fig.add_subplot(111)\n    # ax.matshow\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8c\x96\xe6\xb7\xb7\xe6\xb7\x86\xe7\x9f\xa9\xe9\x98\xb5\n    cax = ax.matshow(confusion_matrix, cmap=cmap,\n                     vmin=confusion_matrix.min(),\n                     vmax=confusion_matrix.max())\n    plt.title(\'Confusion matrix for %s\' % estimator.__class__.__name__)\n    # \xe8\xbe\x85\xe5\x8a\xa9\xe9\xa2\x9c\xe8\x89\xb2\xe8\xbe\xb9bar\xe6\x98\xbe\xe7\xa4\xba\n    fig.colorbar(cax)\n    # noinspection PyTypeChecker\n    ax.set_xticklabels(\'x: \'.format(y_unique))\n    # noinspection PyTypeChecker\n    ax.set_yticklabels(\'y: \'.format(y_unique))\n    plt.xlabel(\'Predicted\')\n    plt.ylabel(\'True\')\n    plt.show()\n'"
abupy/MLBu/ABuMLGrid.py,17,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\xb0\x81\xe8\xa3\x85grid search\xe7\x9b\xb8\xe5\x85\xb3\xe6\x93\x8d\xe4\xbd\x9c\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport logging\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.base import ClassifierMixin, RegressorMixin\nfrom sklearn.metrics import explained_variance_score, make_scorer\n\nfrom ..CoreBu.ABuFixes import signature, six\nfrom ..CoreBu.ABuFixes import GridSearchCV\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n__all__ = [\n    \'grid_search_init_kwargs\',\n    \'grid_search_mul_init_kwargs\',\n    \'grid_search_init_n_estimators\',\n    \'grid_search_init_n_components\',\n    \'grid_search_init_max_depth\',\n    \'grid_search_init_n_neighbors\'\n]\n\n\ndef _scoring_grid(estimator, scoring):\n    """"""\n    \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\x89\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe8\xbf\x87\xe6\xbb\xa4\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\xe5\xaf\xb9scoring\xe6\x9c\xaa\xe8\xb5\x8b\xe4\xba\x88\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe6\xa0\xb9\xe6\x8d\xae\n    \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param scoring: \xe5\xba\xa6\xe9\x87\x8f\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe6\x9c\xaa\xe8\xb5\x8b\xe4\xba\x88\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe6\xa0\xb9\xe6\x8d\xae\n                    \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8explained_variance_score\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\n    :return: scoring\n    """"""\n\n    if not isinstance(estimator, (ClassifierMixin, RegressorMixin)):\n        logging.info(\'only support supervised learning\')\n        # TODO \xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9a\x84scoring\xe5\xba\xa6\xe9\x87\x8f\xe4\xbb\xa5\xe5\x8f\x8aGridSearchCV\n        return None\n\n    if scoring is None:\n        if isinstance(estimator, ClassifierMixin):\n            # \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\n            return \'accuracy\'\n        elif isinstance(estimator, RegressorMixin):\n            # \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n            """"""\n                make_scorer\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87greater_is_better\xe5\xaf\xb9\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xad\xa3\xe8\xb4\x9f\xe5\x88\x86\xe9\x85\x8d\n                eg: sign = 1 if greater_is_better else -1\n            """"""\n            return make_scorer(explained_variance_score, greater_is_better=True)\n        return None\n    return scoring\n\n\ndef grid_search_init_kwargs(estimator, x, y, param_name, param_range, cv=10, n_jobs=-1, scoring=None, show=True):\n    """"""\n    \xe5\xaf\xb9GridSearchCV\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb0\x81\xe8\xa3\x85\xef\xbc\x8c\xe5\xaf\xb9\xe5\x8d\x95\xe4\xb8\xaa\xe7\x9b\xae\xe6\xa0\x87\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cgrid search\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe5\xaf\xbb\n        eg\xef\xbc\x9a\'n_estimators\'\xef\xbc\x8c \'max_depth\'\n        eg\xef\xbc\x9aparam_range=np.arange(100, 500, 50))\xe5\xaf\xb9\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xaf\xbb\xe6\x89\xbe\n\n    eg:\n        from abupy import AbuML, ml\n        ttn_abu = AbuML.create_test_more_fiter()\n        ttn_abu.estimator.random_forest_classifier()\n        ml.grid_search_init_kwargs(ttn_abu.estimator.clf, ttn_abu.x, ttn_abu.y,\n                           param_name=\'n_estimators\', param_range=np.arange(100, 500, 50))\n\n        \xe5\x8f\xaf\xe6\x89\xbe\xe5\x88\xb0n_estimators\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe4\xb8\xba\xef\xbc\x9a(0.81930415263748602, {\'n_estimators\': 300})\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param param_name: \xe5\x81\x9a\xe4\xb8\xbagrid\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ceg\xef\xbc\x9a\'n_estimators\'\xef\xbc\x8c \'max_depth\'\n    :param param_range: \xe5\x81\x9a\xe4\xb8\xbagrid\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84grid\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8ceg\xef\xbc\x9aparam_range=np.arange(100, 500, 50))\n    :param cv: int\xef\xbc\x8cGridSearchCV\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    :param scoring: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone, None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\n                    \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: eg\xef\xbc\x9a(0.81930415263748602, {\'n_estimators\': 300})\n    """"""\n\n    if not isinstance(param_name, six.string_types):\n        # param_name\xe5\x8f\x82\xe6\x95\xb0\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\n        logging.info(\'param_name is str, not {}, eg: \\\'n_estimators\\\'\'.format(param_name))\n        return None, None\n\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x88\x86\xe7\xb1\xbb\xe5\x9b\x9e\xe5\xbd\x92\xe5\xbe\x97\xe5\x88\xb0\xe9\x9d\x9eNone\xe7\x9a\x84score\n    scoring = _scoring_grid(estimator, scoring)\n    if scoring is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c_scoring_grid\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xafNone, \xe8\xaf\xb4\xe6\x98\x8e\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\n        return None, None\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\x9a\x84init\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8getattr\n    init = getattr(estimator.__class__.__init__, \'deprecated_original\', estimator.__class__.__init__)\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0\xe7\xad\xbe\xe5\x90\x8d\n    init_signature = signature(init)\n    """"""\n        eg\xef\xbc\x9ainit_signature\n            [\'self\', \'base_estimator\', \'n_estimators\', \'max_samples\', \'max_features\', \'bootstrap\',\n            \'bootstrap_features\', \'oob_score\', \'warm_start\', \'n_jobs\', \'random_state\', \'verbose\']\n    """"""\n\n    if param_name not in init_signature.parameters.keys():\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81grid\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0param_name\xe4\xb8\x8d\xe5\x9c\xa8init\xe5\x87\xbd\xe6\x95\xb0\xe7\xad\xbe\xe5\x90\x8d\xe4\xb8\xad\xef\xbc\x8c\xe6\x89\x93log\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\n        logging.info(\'check init signature {} not in **kwargs\\ninit_signature:{}\'.format(\n            param_name, init_signature.parameters.keys()))\n        return None, None\n\n    param_grid = {param_name: param_range}\n    grid = GridSearchCV(estimator, param_grid, cv=cv, scoring=scoring, n_jobs=n_jobs)\n    print(\'start grid search please wait...\')\n    grid.fit(x, y)\n\n    if show:\n        if hasattr(grid, \'cv_results_\'):\n            # 0.18\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89cv_results_\xef\xbc\x8c\xe6\x8b\xbf\xe5\x87\xba\xe6\xaf\x8f\xe4\xb8\x80\xe6\xac\xa1\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83score\xe7\x9a\x84mean\xe5\xbd\xa2\xe6\x88\x90grid_scores\n            cv_results = grid.cv_results_\n            grid_scores = cv_results[\'mean_test_score\']\n        else:\n            # 0.18\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\n            cv_results = grid.grid_scores_\n            grid_scores = [result.mean_validation_score for result in cv_results]\n            """"""\n                cv_results\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba_CVScoreTuple namedtuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n\n                class _CVScoreTuple (namedtuple(\'_CVScoreTuple\',\n                                    (\'parameters\',\n                                     \'mean_validation_score\',\n                                     \'cv_validation_scores\'))):\n            """"""\n\n        # FIXME \xe8\xbf\x99\xe9\x87\x8c\xe5\x81\x87\xe5\xae\x9a\xe4\xba\x86\xe6\x89\x80\xe6\x9c\x89param_range\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe7\xb1\xbb\xe5\x9e\x8b\xe9\x83\xbd\xe6\x98\xaf\xe6\x95\xb0\xe5\x80\xbc\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa4\xe5\xae\x9a\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe6\xa0\xb9\xe6\x8d\xae\xe6\x83\x85\xe5\x86\xb5\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe6\x8e\x92\xe5\xba\x8f\n        plt.plot(param_range, grid_scores)\n        # \xe6\x8a\x8a\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe7\xba\xa2\xe5\x9c\x88\xe6\xa0\x87\xe8\xae\xb0\xe5\x87\xba\xe6\x9d\xa5\n        plt.plot(grid.best_params_[param_name], grid.best_score_, \'ro\', markersize=12, markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=\'r\')\n        plt.title(\'search {}, best is {}\'.format(param_name, grid.best_params_[param_name]))\n        plt.show()\n    return grid.best_score_, grid.best_params_\n\n\ndef grid_search_mul_init_kwargs(estimator, x, y, param_grid, cv=10, n_jobs=-1, scoring=None, show=True):\n    """"""\n    \xe5\xaf\xb9GridSearchCV\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb0\x81\xe8\xa3\x85\xef\xbc\x8c\xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe7\x9b\xae\xe6\xa0\x87\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cgrid search\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe6\x90\x9c\xe5\xaf\xbb\n\n    eg:\n        from abupy import AbuML, ml\n        ttn_abu = AbuML.create_test_more_fiter()\n        ttn_abu.estimator.random_forest_classifier()\n\n        param_grid = {\'max_depth\': np.arange(2, 5), \'n_estimators\': np.arange(100, 300, 50)}\n        ml.grid_search_mul_init_kwargs(ttn_abu.estimator.clf, ttn_abu.x, ttn_abu.y, param_grid=param_grid)\n\n        out: (0.81593714927048255, {\'max_depth\': 4, \'n_estimators\': 250})\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param param_grid: eg\xef\xbc\x9aparam_grid = {\'max_depth\': np.arange(2, 5), \'n_estimators\': np.arange(100, 300, 50)}\n    :param cv: int\xef\xbc\x8cGridSearchCV\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    :param scoring: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone, None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\n                    \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: eg: (0.81593714927048255, {\'max_depth\': 4, \'n_estimators\': 250})\n    """"""\n\n    if not isinstance(param_grid, dict):\n        # param_grid\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xafdict\xe5\xaf\xb9\xe8\xb1\xa1\n        logging.info(\'param_grid is dict object, not {}}\'.format(param_grid))\n        return None, None\n\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x88\x86\xe7\xb1\xbb\xe5\x9b\x9e\xe5\xbd\x92\xe5\xbe\x97\xe5\x88\xb0\xe9\x9d\x9eNone\xe7\x9a\x84score\n    scoring = _scoring_grid(estimator, scoring)\n    if scoring is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c_scoring_grid\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xafNone, \xe8\xaf\xb4\xe6\x98\x8e\xe6\x97\xa0\xe7\x9b\x91\xe7\x9d\xa3\xe5\xad\xa6\xe4\xb9\xa0\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\n        return None, None\n\n    for param_name in param_grid.keys():\n        # \xe8\xbf\xad\xe4\xbb\xa3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaakey\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe7\x9c\x8binit\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe7\x9a\x84\xe7\xad\xbe\xe5\x90\x8d\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe8\xaf\xa5\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe7\x9a\x84init\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8getattr\n        init = getattr(estimator.__class__.__init__, \'deprecated_original\', estimator.__class__.__init__)\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0\xe7\xad\xbe\xe5\x90\x8d\n        init_signature = signature(init)\n        if param_name not in init_signature.parameters.keys():\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81grid\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0param_name\xe4\xb8\x8d\xe5\x9c\xa8init\xe5\x87\xbd\xe6\x95\xb0\xe7\xad\xbe\xe5\x90\x8d\xe4\xb8\xad\xef\xbc\x8c\xe6\x89\x93log\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\n            logging.info(\'check init signature {} not in **kwargs\\ninit_signature:{}\'.format(\n                param_name, init_signature.parameters.keys()))\n            return None, None\n\n    grid = GridSearchCV(estimator, param_grid, cv=cv, scoring=scoring, n_jobs=n_jobs)\n    print(\'start grid search please wait...\')\n    grid.fit(x, y)\n\n    if show:\n        if hasattr(grid, \'cv_results_\'):\n            # 0.18\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89cv_results_\xef\xbc\x8c\xe6\x8b\xbf\xe5\x87\xba\xe6\xaf\x8f\xe4\xb8\x80\xe6\xac\xa1\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83score\xe7\x9a\x84mean\xe5\xbd\xa2\xe6\x88\x90grid_scores\n            cv_results = grid.cv_results_\n            grid_scores = cv_results[\'mean_test_score\']\n            """"""\n                eg\xef\xbc\x9agrid_scores\n                [0.77890011223344557, 0.79349046015712688, 0.77553310886644222, 0.77441077441077444,\n                0.80920314253647585, 0.80920314253647585, 0.80808080808080807, 0.81032547699214363,\n                0.80695847362514028, 0.81144781144781142, 0.80471380471380471, 0.81593714927048255]\n            """"""\n            grid_params = cv_results[\'params\']\n            """"""\n                eg\xef\xbc\x9agrid_params\n                [{\'max_depth\': 2, \'n_estimators\': 100}, {\'max_depth\': 2, \'n_estimators\': 150},\n                {\'max_depth\': 2, \'n_estimators\': 200}, {\'max_depth\': 2, \'n_estimators\': 250},\n                {\'max_depth\': 3, \'n_estimators\': 100}, {\'max_depth\': 3, \'n_estimators\': 150},\n                {\'max_depth\': 3, \'n_estimators\': 200}, {\'max_depth\': 3, \'n_estimators\': 250},\n                {\'max_depth\': 4, \'n_estimators\': 100}, {\'max_depth\': 4, \'n_estimators\': 150},\n                {\'max_depth\': 4, \'n_estimators\': 200}, {\'max_depth\': 4, \'n_estimators\': 250}]\n            """"""\n        else:\n            cv_results = grid.grid_scores_\n            """"""\n                cv_results\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba_CVScoreTuple namedtuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n\n                class _CVScoreTuple (namedtuple(\'_CVScoreTuple\',\n                                    (\'parameters\',\n                                     \'mean_validation_score\',\n                                     \'cv_validation_scores\'))):\n            """"""\n            grid_scores = [result.mean_validation_score for result in cv_results]\n            grid_params = [result.parameters for result in cv_results]\n\n        # \xe4\xb8\x8egrid_search_init_kwargs\xe4\xb8\x8d\xe5\x90\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96grid_scores\xe7\xbb\x98\xe5\x88\xb6\xe6\x9b\xb2\xe7\xba\xbfy\xef\xbc\x8cx\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8index\n        plt.plot(grid_scores)\n        cmap = plt.get_cmap(\'jet\', len(grid_scores))\n        cmap.set_under(\'gray\')\n        for grid_index in np.arange(0, len(grid_scores)):\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe6\x95\xb0\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe7\x82\xb9\xe5\x9c\xa8\xe6\x9b\xb2\xe7\xba\xbf\xe4\xb8\x8a\xe6\xa0\xb9\xe6\x8d\xae\xe5\x88\x86\xe6\x95\xb0\xe7\x94\xa8\xe9\xa2\x9c\xe8\x89\xb2\xe5\x8c\xba\xe5\x88\x86\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8label\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe6\xb3\xa8\n            plt.scatter(grid_index, grid_scores[grid_index], s=50, cmap=cmap,\n                        vmin=np.min(grid_scores),\n                        vmax=np.max(grid_scores),\n                        label=\'{}: {:.2f}\'.format(grid_params[grid_index], grid_scores[grid_index]))\n        plt.title(\'best params is {}\'.format(grid.best_params_))\n        # \xe5\xb0\x86label\xe6\xa0\x87\xe6\xb3\xa8\xe6\x96\x87\xe5\xad\x97\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe5\xa4\x96\xe9\x9d\xa2\n        plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n        plt.show()\n    return grid.best_score_, grid.best_params_\n\n\ndef grid_search_init_n_estimators(estimator, x, y, n_estimators_range=None, cv=10, n_jobs=-1,\n                                  scoring=None, show=True):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85grid search\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\'n_estimators\'\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe6\x90\x9c\xe7\xb4\xa2\xef\xbc\x8c\n    \xe4\xb8\xbaAbuMLCreater\xe4\xb8\xad_estimators_prarms_best\xe6\x8f\x90\xe4\xbe\x9bcallback\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\n    \xe5\x85\xb7\xe4\xbd\x93\xe9\x98\x85\xe8\xaf\xbb\n            AbuMLCreater._estimators_prarms_best()\n            + AbuMLCreater.random_forest_classifier_best()\n\n    eg:\n        from abupy import AbuML, ml\n        ttn_abu = AbuML.create_test_more_fiter()\n        ttn_abu.estimator.random_forest_classifier()\n        ml.grid_search_init_n_estimators(ttn_abu.estimator.clf, ttn_abu.x, ttn_abu.y)\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param n_estimators_range: \xe9\xbb\x98\xe8\xae\xa4None, None\xe5\x88\x99\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8 n_estimators_range = np.arange(50, 500, 10)\n    :param cv: int\xef\xbc\x8cGridSearchCV\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    :param scoring: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone, None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\n                    \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: eg: (0.82154882154882158, {\'n_estimators\': 310})\n    """"""\n\n    if n_estimators_range is None:\n        n_estimators_range = np.arange(50, 500, 10)\n\n    return grid_search_init_kwargs(estimator, x, y, \'n_estimators\', n_estimators_range,\n                                   cv=cv, n_jobs=n_jobs, scoring=scoring, show=show)\n\n\ndef grid_search_init_max_depth(estimator, x, y, max_depth_range=None, cv=10, n_jobs=-1,\n                               scoring=None, show=True):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85grid search\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\'n_components\'\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe6\x90\x9c\xe7\xb4\xa2\xef\xbc\x8c\n    \xe4\xb8\xbaAbuMLCreater\xe4\xb8\xad_estimators_prarms_best\xe6\x8f\x90\xe4\xbe\x9bcallback\xe5\x87\xbd\xe6\x95\xb0\n\n    \xe5\x85\xb7\xe4\xbd\x93\xe9\x98\x85\xe8\xaf\xbb\n            AbuMLCreater._estimators_prarms_best()\n            + AbuMLCreater.decision_tree_classifier_best()\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param max_depth_range: \xe9\xbb\x98\xe8\xae\xa4None, None\xe5\x88\x99\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8:\n            max_depth_range = np.arange(2, np.maximum(10, int(x.shape[1]) - 1), 1)\n\n    :param cv: int\xef\xbc\x8cGridSearchCV\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    :param scoring: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone, None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\n                    \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: eg: (0.82154882154882158, {\'max_depth\': 3})\n    """"""\n\n    if max_depth_range is None:\n        max_depth_range = np.arange(2, np.maximum(10, int(x.shape[1]) - 1), 1)\n\n    return grid_search_init_kwargs(estimator, x, y, \'max_depth\', max_depth_range,\n                                   cv=cv, n_jobs=n_jobs, scoring=scoring, show=show)\n\n\ndef grid_search_init_n_neighbors(estimator, x, y, n_neighbors_range=None, cv=10, n_jobs=-1,\n                                 scoring=None, show=True):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85grid search\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\'n_components\'\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe6\x90\x9c\xe7\xb4\xa2\xef\xbc\x8c\n    \xe4\xb8\xbaAbuMLCreater\xe4\xb8\xad_estimators_prarms_best\xe6\x8f\x90\xe4\xbe\x9bcallback\xe5\x87\xbd\xe6\x95\xb0\n\n    \xe5\x85\xb7\xe4\xbd\x93\xe9\x98\x85\xe8\xaf\xbb\n            AbuMLCreater._estimators_prarms_best()\n            + AbuMLCreater.knn_classifier_best()\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param n_neighbors_range: \xe9\xbb\x98\xe8\xae\xa4None, None\xe5\x88\x99\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8:\n            n_estimators_range = np.arange(2, np.maximum(10, int(x.shape[1]) - 1), 1)\n\n    :param cv: int\xef\xbc\x8cGridSearchCV\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    :param scoring: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone, None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\n                    \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: eg: (0.82154882154882158, {\'n_components\': 10})\n    """"""\n\n    if n_neighbors_range is None:\n        # \xe9\x82\xbb\xe5\xb1\x85\xe6\x8a\x95\xe7\xa5\xa8\xe8\x80\x85\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa81-np.minimum(26, \xe6\x80\xbb\xe6\x95\xb0\xe7\x9a\x841/3\xef\xbc\x89\n        n_neighbors_range = np.arange(1, np.minimum(26, int(x.shape[0] / 3)), 1)\n\n    return grid_search_init_kwargs(estimator, x, y, \'n_neighbors\', n_neighbors_range,\n                                   cv=cv, n_jobs=n_jobs, scoring=scoring, show=show)\n\n\ndef grid_search_init_n_components(estimator, x, y, n_components_range=None, cv=10, n_jobs=-1,\n                                  scoring=None, show=True):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85grid search\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\'n_components\'\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x9c\x80\xe4\xbc\x98\xe6\x90\x9c\xe7\xb4\xa2\xef\xbc\x8c\n    \xe4\xb8\xbaAbuMLCreater\xe4\xb8\xad_estimators_prarms_best\xe6\x8f\x90\xe4\xbe\x9bcallback\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n    \xe5\x85\xb7\xe4\xbd\x93\xe9\x98\x85\xe8\xaf\xbbAbuMLCreater._estimators_prarms_best()\n\n    :param estimator: \xe5\xad\xa6\xe4\xb9\xa0\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param x: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\n    :param y: \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86y\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnumpy\xe5\xba\x8f\xe5\x88\x97\n    :param n_components_range: \xe9\xbb\x98\xe8\xae\xa4None, None\xe5\x88\x99\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8:\n            n_estimators_range = np.arange(2, np.maximum(10, int(x.shape[1]) - 1), 1)\n\n    :param cv: int\xef\xbc\x8cGridSearchCV\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\xbc\x80\xe5\x90\xaf\xe4\xb8\x8ecpu\xe7\x9b\xb8\xe5\x90\x8c\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n    :param scoring: \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone, None\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8accuracy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\n                    \xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\xaf\xe9\x87\x8a\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbcexplained_variance_score\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8make_scorer\xe5\xaf\xb9\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cscore\xe5\xb0\x81\xe8\xa3\x85\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: eg: (0.82154882154882158, {\'n_components\': 10})\n    """"""\n    if n_components_range is None:\n        n_components_range = np.arange(2, np.maximum(10, int(x.shape[1]) - 1), 1)\n\n    return grid_search_init_kwargs(estimator, x, y, \'n_components\', n_components_range,\n                                   cv=cv, n_jobs=n_jobs, scoring=scoring, show=show)\n'"
abupy/MLBu/ABuMLPd.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\xb0\x81\xe8\xa3\x85AbuML\xe4\xb8\xba\xe4\xb8\x9a\xe5\x8a\xa1\xe9\x80\xbb\xe8\xbe\x91\xe5\xb1\x82\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\x84\xe8\x8c\x83\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom abc import ABCMeta, abstractmethod\n\nimport pandas as pd\nimport numpy as np\n\nfrom .ABuML import AbuML\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu import ABuEnv\nfrom ..MarketBu import ABuSymbolPd\nfrom ..IndicatorBu import ABuNDMa\nfrom ..UtilBu import ABuScalerUtil\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuMLPd(six.with_metaclass(ABCMeta, object)):\n    """"""\xe5\xb0\x81\xe8\xa3\x85AbuML\xe7\x9a\x84\xe4\xb8\x8a\xe5\xb1\x82\xe5\x85\xb7\xe4\xbd\x93\xe4\xb8\x9a\xe5\x8a\xa1\xe9\x80\xbb\xe8\xbe\x91\xe7\xb1\xbb""""""\n\n    def __init__(self, **kwarg):\n        """"""\n        \xe4\xbb\x8ekwarg\xe4\xb8\xad\xe8\xbe\x93\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xe6\x88\x96\xe8\x80\x85\xef\xbc\x8cmake_xy\xe4\xb8\xad\xe6\x9c\xac\xe8\xba\xab\xe7\x94\x9f\xe4\xba\xa7\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9c\xa8\xe5\x81\x9a\xe5\xae\x8c\n        make_xy\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x8c\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe6\x9c\x89x\xef\xbc\x8cy\xe5\x92\x8cdf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8AbuML\xe7\xbb\xa7\xe7\xbb\xad\n        \xe6\x9e\x84\xe9\x80\xa0self.fiter\n        :param kwarg: \xe7\x9b\xb4\xe6\x8e\xa5\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99make_xy\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n        """"""\n        self.make_xy(**kwarg)\n        if not hasattr(self, \'x\') or not hasattr(self, \'y\') \\\n                or not hasattr(self, \'df\'):\n            raise ValueError(\'make_xy failed! x, y not exist!\')\n        # noinspection PyUnresolvedReferences\n        self.fiter = AbuML(self.x, self.y, self.df)\n\n    @abstractmethod\n    def make_xy(self, **kwarg):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x8c\xe6\x88\x90\xe7\x9a\x84abstractmethod\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\x8e**kwarg\xe4\xb8\xad\xe5\xbe\x97\xe5\x88\xb0\xe6\x95\xb0\xe6\x8d\xae\n        \xe6\x88\x96\xe8\x80\x85make_xy\xe4\xb8\xad\xe6\x9c\xac\xe8\xba\xab\xe7\x94\x9f\xe4\xba\xa7\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\x86\xe5\x9c\xa8make_xy\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x8c\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe6\x9c\x89\n        x\xef\xbc\x8cy\xe5\x92\x8cdf\n        """"""\n        pass\n\n    def __getattr__(self, item):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8ABuML\xe5\xaf\xb9\xe8\xb1\xa1self.fiter\xe5\x81\x9a\xe4\xb8\xba\xe6\x96\xb9\xe6\xb3\x95\xe4\xbb\xa3\xe7\x90\x86:\n            return getattr(self.fiter, item)\n        \xe5\x8d\xb3AbuMLPd\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuML\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\xe4\xbb\xbb\xe4\xbd\x95\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        if item.startswith(\'__\'):\n            # noinspection PyUnresolvedReferences\n            return super().__getattr__(item)\n        return getattr(self.fiter, item)\n\n    def __call__(self):\n        """"""\n        \xe6\x96\xb9\xe4\xbe\xbf\xe5\xa4\x96\xe9\x9d\xa2\xe7\x9b\xb4\xe6\x8e\xa5call\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8\xe6\xaf\x8f\xe6\xac\xa1\xe5\x8e\xbbget\n        :return: self.fiter\n        """"""\n        return self.fiter\n\n\n# noinspection PyAttributeOutsideInit\nclass ClosePredict(AbuMLPd):\n    """"""\n        \xe7\xa4\xba\xe4\xbe\x8bAbuMLPd\xe5\x9f\xba\xe6\x9c\xac\xe4\xbd\xbf\xe7\x94\xa8:\n\n        \xe8\x8e\xb7\xe5\x8f\x96usTSLA\xe7\x9a\x84\xe6\xb2\x99\xe7\x9b\x92\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb0\x86\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xbay\xef\xbc\x8c\n        \xe5\xbc\x80\xe7\x9b\x98\xef\xbc\x8c\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x8c\xe6\x9c\x80\xe4\xbd\x8e\xef\xbc\x8c\xe6\x98\xa8\xe6\x94\xb6\xef\xbc\x8c\xe5\x91\xa8\xe5\x87\xa0\xe7\xbb\x84\xe6\x88\x90x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\n        \xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n    """"""\n\n    def make_xy(self, **kwarg):\n        """"""\n            make_xy\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96usTSLA\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\'open\', \'high\', \'low\', \'pre_close\', \'date_week\'\n            \xe5\x81\x9a\xe4\xb8\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97x\xef\xbc\x8cclose\xe5\x8d\xb3\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbay\xef\xbc\x8c\xe6\x9b\xb4\xe5\xa4\x9aAbuMLPd\xe4\xbd\xbf\xe7\x94\xa8\xe9\x98\x85\xe8\xaf\xbbAbuUmpMainDeg\xe7\xad\x89ump\xe7\xb1\xbb\xe5\xae\x9e\xe8\xa1\x8c\n        """"""\n\n        # \xe4\xbb\x8e\xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n        ABuEnv.enable_example_env_ipython()\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuEnv.disable_example_env_ipython()\n\n        # \xe7\x95\x99\xe4\xba\x94\xe4\xb8\xaa\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe9\x83\xbd\xe5\x81\x9a\xe8\xae\xad\xe7\xbb\x83\n        train_df = tsla[:-5]\n        # make_xy\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe5\xae\x9aself.df\n        self.df = train_df.filter([\'close\', \'open\', \'high\', \'low\', \'pre_close\', \'date_week\'])\n        tsla_matrix = self.df.as_matrix()\n        # close\xe5\x88\x97\xe5\x81\x9a\xe4\xb8\xbay\xef\xbc\x8cmake_xy\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe5\xae\x9aself.y\n        self.y = tsla_matrix[:, 0]\n        # \'open\', \'high\', \'low\', \'pre_close\', \'date_week\'\xe5\x81\x9a\xe4\xb8\xbax\n        self.x = tsla_matrix[:, 1:]\n\n        # \xe6\x9c\x80\xe5\x90\x8e5\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae, \xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xbaAbuMLPd\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\n        test_df = tsla[-5:]\n        tsla_matrix = test_df.filter([\'close\', \'open\', \'high\', \'low\', \'pre_close\', \'date_week\']).as_matrix()\n        self.y_test = tsla_matrix[:, 0]\n        self.x_test = tsla_matrix[:, 1:]\n\n\ndef test_close_predict():\n    """"""\n        \xe7\xa4\xba\xe4\xbe\x8b\xe9\x80\x9a\xe8\xbf\x87ClosePredict\xe4\xbb\xa5\xe5\x8f\x8aAbuMLPd\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8:\n        eg:\n            from abupy.MLBu.ABuMLPd import test_close_predict\n            test_close_predict()\n    """"""\n\n    close_predict = ClosePredict()\n    # ClosePredict\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xba\xe8\xbf\x9e\xe7\xbb\xad\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb1\x9e\xe4\xba\x8e\xe5\x9b\x9e\xe5\xbd\x92\xef\xbc\x8cABuML\xe4\xb8\xad\xe8\x87\xaa\xe5\x8a\xa8\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\x9e\xe5\xbd\x92\xe5\x99\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8adaboost_regressor_best\n    close_predict.adaboost_regressor_best()\n    """"""\n        AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion=\'mse\', max_depth=None, max_features=None,\n           max_leaf_nodes=None, min_impurity_split=1e-07,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n           splitter=\'best\'),\n         learning_rate=1.0, loss=\'linear\', n_estimators=450,\n         random_state=None)\n    """"""\n    # \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuML\xe4\xb8\xad\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbaAbuMLPd\xe4\xbd\xbf\xe7\x94\xa8__getattr__\xe5\x81\x9a\xe4\xba\x86\xe6\x96\xb9\xe6\xb3\x95\xe4\xbb\xa3\xe7\x90\x86\n    close_predict.plot_decision_function()\n    close_predict.plot_graphviz_tree()\n    # \xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\n    close_predict.fit()\n\n    for test_ind in np.arange(0, 5):\n        predict = close_predict.predict(close_predict.x_test[test_ind])\n        print(\'predict close is {:.3f}, actual close is {:.3f}\'.format(predict[0], close_predict.y_test[test_ind]))\n        """"""\n            predict close is 228.100, actual close is 228.360\n            predict close is 223.430, actual close is 220.500\n            predict close is 220.690, actual close is 222.270\n            predict close is 228.920, actual close is 230.010\n            predict close is 228.280, actual close is 225.930\n        """"""\n\n    close_predict.feature_selection()\n    """"""\n        eg:\n            RFE selection\n                   ranking support\n        open             2   False\n        high             1    True\n        low              1    True\n        pre_close        3   False\n        date_week        4   False\n    """"""\n\n\n# noinspection PyAttributeOutsideInit,PyUnresolvedReferences,PyTypeChecker\nclass BtcBigWaveClf(AbuMLPd):\n    """"""\n        \xe4\xbb\xbb\xe4\xbd\x95\xe5\xa4\xa7\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe5\x85\xb6\xe5\xae\x9e\xe9\x83\xbd\xe6\x98\xaf\xe7\x94\xb1\xe5\xbe\x88\xe5\xa4\x9a\xe7\x9c\x8b\xe6\x9e\x81\xe8\xb5\xb7\xe6\x9d\xa5\xe6\x9e\x81\xe4\xb8\x8d\xe8\xb5\xb7\xe7\x9c\xbc\xe7\x9a\x84\xe5\xb0\x8f\xe4\xba\x8b\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x88\x91\xe4\xbb\xac\xe6\x98\xaf\xe5\x81\x9a\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe6\x97\xa5\xe5\x86\x85\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe4\xbd\xa0\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa4\xe6\x96\xad\xe4\xbb\x8a\xe5\xa4\xa9\xe9\x80\x82\xe4\xb8\x8d\xe9\x80\x82\xe5\x90\x88\xe5\x81\x9a\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\n        \xe5\x81\x9a\xe5\x87\xba\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe4\xbe\x9d\xe6\x8d\xae\xe9\x87\x8c\xe6\x9c\x89\xe4\xb8\x80\xe6\x9d\xa1\xe5\x8d\xb3\xe6\x98\xaf\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\xb3\xa2\xe5\x8a\xa8\xe9\x9c\x80\xe8\xa6\x81\xe8\xb6\xb3\xe5\xa4\x9f\xe5\xa4\xa7\n    """"""\n\n    def __init__(self, **kwarg):\n        """"""\n            \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe4\xba\x86btc\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe4\xb8\x8d\xe6\x98\xaf\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x9a\n            12-\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe4\xb8\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xa4\xba\xe4\xbe\x8b(ABU\xe9\x87\x8f\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3)\n        """"""\n        self.btc = kwarg.pop(\'btc\', None)\n        super(BtcBigWaveClf, self).__init__(**kwarg)\n\n    def make_xy(self, **kwarg):\n        if self.btc is None:\n            # \xe4\xbb\x8e\xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\xad\xe8\xaf\xbb\xe5\x8f\x96\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\n            ABuEnv.enable_example_env_ipython()\n            btc = ABuSymbolPd.make_kl_df(\'btc\', start=\'2013-09-01\', end=\'2017-07-26\')\n            ABuEnv.disable_example_env_ipython()\n        else:\n            btc = self.btc\n        # .055\xe7\x9a\x84\xe6\x97\xa5\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x88\x90\xe5\x81\x9a\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe6\x9d\xa5\xe8\xaf\xb4\xef\xbc\x8c\xe4\xb8\x8b\xe9\x9d\xa2\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\xb0\xe5\x88\x97big_wave\n        btc[\'big_wave\'] = (btc.high - btc.low) / btc.pre_close > 0.055\n        btc[\'big_wave\'] = btc[\'big_wave\'].astype(int)\n\n        if self.btc is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf12-\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe4\xb8\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe7\xa4\xba\xe4\xbe\x8b(ABU\xe9\x87\x8f\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\x87\xe6\xa1\xa3)\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x9960\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\n            # \xe9\xa6\x96\xe5\x85\x88\xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe6\x9c\x80\xe5\x90\x8e60\xe5\xa4\xa9\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\xe5\x81\x9a\xe4\xb8\xba\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n            btc_train_raw = btc[:-60]\n            btc_test_raw = btc[-60:]\n        else:\n            btc_train_raw = btc\n            btc_test_raw = None\n\n        # \xe4\xb8\x8b\xe9\x9d\xa2\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe9\x83\xbd\xe5\x8a\xa0\xe4\xb8\x8a5\xef\xbc\x8c10\xef\xbc\x8c21\xef\xbc\x8c60\xe6\x97\xa5\xe5\x9d\x87\xe7\xba\xbf\xe7\x89\xb9\xe5\xbe\x81\n        def calc_ma(tc, p_ma):\n            ma_key = \'p_ma{}\'.format(p_ma)\n            tc[ma_key] = ABuNDMa.calc_ma_from_prices(tc.close, p_ma, min_periods=1)\n\n        for ma in [5, 10, 21, 60]:\n            calc_ma(btc_train_raw, ma)\n            if btc_test_raw is not None:\n                calc_ma(btc_test_raw, ma)\n        # \xe4\xb8\x8b\xe9\x9d\xa2\xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xaebtc_train_raw\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe6\x8a\xbd\xe5\x8f\x96\xe7\xbb\x84\xe5\x90\x88\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe7\xbb\x84\xe5\x90\x88\xe5\xa5\xbd\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\n        btc_train0 = self.btc_siblings_df(btc_train_raw)\n        # \xe7\x94\xb1\xe4\xba\x8e\xe6\xaf\x8f3\xe6\x9d\xa1\xe8\xbf\x9e\xe7\xbb\xad\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x84\xe5\x90\x88\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe5\x90\x91\xe5\x89\x8d\xe8\xb7\xb3\xe4\xb8\x80\xe6\x9d\xa1\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe7\xbb\x84\xe5\x90\x88\xe6\x8a\xbd\xe5\x8f\x96\xe5\x8d\xb3\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xbe\x97\xe5\x88\xb0\xe5\x8f\xa6\xe4\xb8\x80\xe7\xbb\x84\xe6\x96\xb0\xe7\x89\xb9\xe5\xbe\x81\n        btc_train1 = self.btc_siblings_df(btc_train_raw[1:])\n        btc_train2 = self.btc_siblings_df(btc_train_raw[2:])\n\n        # \xe6\x8a\x8a\xe5\x91\xa8\xe5\x87\xa0\xe8\xbf\x99\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe4\xbd\xbf\xe7\x94\xa8pd.get_dummies\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xa6\xbb\xe6\x95\xa3\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe4\xbd\xbf\xe5\xbe\x97\xe6\x89\x80\xe6\x9c\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe9\x83\xbd\xe5\x9c\xa80-1\xe4\xb9\x8b\xe9\x97\xb4\n        btc_train = pd.concat([btc_train0, btc_train1, btc_train2])\n        btc_train.index = np.arange(0, btc_train.shape[0])\n        dummies_one_week = pd.get_dummies(btc_train[\'one_date_week\'], prefix=\'one_date_week\')\n        dummies_two_week = pd.get_dummies(btc_train[\'two_date_week\'], prefix=\'two_date_week\')\n        dummies_today_week = pd.get_dummies(btc_train[\'today_date_week\'], prefix=\'today_date_week\')\n        btc_train.drop([\'one_date_week\', \'two_date_week\', \'today_date_week\'], inplace=True, axis=1)\n        # make_xy\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe5\xae\x9aself.df\n        self.df = pd.concat([btc_train, dummies_one_week, dummies_two_week, dummies_today_week], axis=1)\n        # make_xy\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe5\xae\x9ax, y\n        train_matrix = self.df.as_matrix()\n        self.y = train_matrix[:, 0]\n        self.x = train_matrix[:, 1:]\n\n        if btc_test_raw is not None:\n            # \xe4\xb8\x8b\xe9\x9d\xa2\xe5\xb0\x86\xe5\x89\x8d\xe9\x9d\xa2\xe4\xbf\x9d\xe7\x95\x99\xe5\x88\x87\xe5\x89\xb2\xe7\x9a\x8460\xe6\x9d\xa1\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe6\x8a\xbd\xe5\x8f\x96\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe6\x96\xb9\xe5\xbc\x8f\xe5\x92\x8c\xe6\x8a\xbd\xe5\x8f\x96\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x97\xb6\xe4\xb8\x80\xe6\xa0\xb7\n            btc_test0 = self.btc_siblings_df(btc_test_raw)\n            btc_test1 = self.btc_siblings_df(btc_test_raw[1:])\n            btc_test2 = self.btc_siblings_df(btc_test_raw[2:])\n            btc_test = pd.concat([btc_test0, btc_test1, btc_test2])\n            btc_test.index = np.arange(0, btc_test.shape[0])\n            dummies_one_week = pd.get_dummies(btc_test[\'one_date_week\'], prefix=\'one_date_week\')\n            dummies_two_week = pd.get_dummies(btc_test[\'two_date_week\'], prefix=\'two_date_week\')\n            dummies_today_week = pd.get_dummies(btc_test[\'today_date_week\'], prefix=\'today_date_week\')\n            btc_test.drop([\'one_date_week\', \'two_date_week\', \'today_date_week\'], inplace=True, axis=1)\n            self.btc_test = pd.concat([btc_test, dummies_one_week, dummies_two_week, dummies_today_week], axis=1)\n            # \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x9e\x84\xe5\xbb\xba\n            matrix_test = self.btc_test.as_matrix()\n            self.y_test = matrix_test[:, 0]\n            self.x_test = matrix_test[:, 1:]\n\n    # noinspection PyMethodMayBeStatic\n    def btc_siblings_df(self, btc_raw):\n        """"""\n        * \xe9\xa6\x96\xe5\x85\x88\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbb\xa53\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe6\x88\x90\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90df\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90df\xe4\xb8\xad\xe6\x9c\x893\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        * \xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xb0\x86\xe8\xbf\x9e\xe7\xbb\xad3\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\xad\xe7\x9a\x84\xe8\xbf\x9e\xe7\xbb\xad\xe6\x95\xb0\xe5\x80\xbc\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n        * \xe6\x8a\xbd\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe7\xac\xac\xe4\xba\x8c\xe5\xa4\xa9\xe7\x9a\x84\xe5\xa4\xa7\xe5\xa4\x9a\xe6\x95\xb0\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x86\xe5\x88\xab\xe6\x94\xb9\xe5\x90\x8d\xe5\xad\x97\xe4\xbb\xa5one\xef\xbc\x8ctwo\xe4\xb8\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x89\x8d\xe7\xbc\x80\xef\xbc\x8c\xe5\xa6\x82\xef\xbc\x9aone_open\xef\xbc\x8cone_close\xef\xbc\x8ctwo_ma5\xef\xbc\x8ctwo_high.....,\n        * \xe7\xac\xac\xe4\xb8\x89\xe5\xa4\xa9\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\'open\', \'low\', \'pre_close\', \'date_week\'\xef\xbc\x8c\xe8\xaf\xa5\xe5\x90\x8d\xe5\x89\x8d\xe7\xbc\x80today\xef\xbc\x8c\xe5\xa6\x82today_open\xef\xbc\x8ctoday_date_week\n        * \xe7\xac\xac\xe4\xb8\x89\xe5\xa4\xa9\xe7\x9a\x84\xe6\x8a\xbd\xe5\x8f\x96\xe4\xba\x86\'big_wave\'\xef\xbc\x8c\xe5\x85\xb6\xe5\xb0\x86\xe5\x9c\xa8\xe4\xb9\x8b\xe5\x90\x8e\xe5\x81\x9a\xe4\xb8\xbay\n        * \xe5\xb0\x86\xe6\x8a\xbd\xe5\x8f\x96\xe6\x94\xb9\xe5\x90\x8d\xe5\xad\x97\xe5\x90\x8e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\xe7\xbb\x84\xe5\x90\x88\xe6\x88\x90\xe4\xb8\xba\xe4\xb8\x80\xe6\x9d\xa1\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\xb33\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8d>1\xe6\x9d\xa1\xe6\x96\xb0\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n\n        :param btc_raw: btc\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe9\x87\x8d\xe6\x96\xb0\xe7\xbb\x84\xe5\x90\x88\xe5\xa5\xbd\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbb\xa53\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe6\x88\x90\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90df\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90df\xe4\xb8\xad\xe6\x9c\x893\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        btc_siblings = [btc_raw.iloc[sib_ind * 3:(sib_ind + 1) * 3, :]\n                        for sib_ind in np.arange(0, int(btc_raw.shape[0] / 3))]\n\n        btc_df = pd.DataFrame()\n        for sib_btc in btc_siblings:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xb0\x86\xe8\xbf\x9e\xe7\xbb\xad3\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\xad\xe7\x9a\x84\xe8\xbf\x9e\xe7\xbb\xad\xe6\x95\xb0\xe5\x80\xbc\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n            sib_btc_scale = ABuScalerUtil.scaler_std(\n                sib_btc.filter([\'open\', \'close\', \'high\', \'low\', \'volume\', \'pre_close\',\n                                \'ma5\', \'ma10\', \'ma21\', \'ma60\', \'atr21\', \'atr14\']))\n            # \xe6\x8a\x8a\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84\xe5\x92\x8cbig_wave\xef\xbc\x8cdate_week\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\n            sib_btc_scale = pd.concat([sib_btc[\'big_wave\'], sib_btc_scale, sib_btc[\'date_week\']], axis=1)\n\n            # \xe6\x8a\xbd\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe7\xac\xac\xe4\xba\x8c\xe5\xa4\xa9\xe7\x9a\x84\xe5\xa4\xa7\xe5\xa4\x9a\xe6\x95\xb0\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x86\xe5\x88\xab\xe6\x94\xb9\xe5\x90\x8d\xe5\xad\x97\xe4\xbb\xa5one\xef\xbc\x8ctwo\xe4\xb8\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x89\x8d\xe7\xbc\x80\xef\xbc\x8c\xe5\xa6\x82\xef\xbc\x9aone_open\xef\xbc\x8cone_close\xef\xbc\x8ctwo_ma5\xef\xbc\x8ctwo_high.....\n            a0 = sib_btc_scale.iloc[0].filter([\'open\', \'close\', \'high\', \'low\', \'volume\', \'pre_close\',\n                                               \'ma5\', \'ma10\', \'ma21\', \'ma60\', \'atr21\', \'atr14\', \'date_week\'])\n            a0.rename(index={\'open\': \'one_open\', \'close\': \'one_close\', \'high\': \'one_high\', \'low\': \'one_low\',\n                             \'volume\': \'one_volume\', \'pre_close\': \'one_pre_close\',\n                             \'ma5\': \'one_ma5\', \'ma10\': \'one_ma10\', \'ma21\': \'one_ma21\',\n                             \'ma60\': \'one_ma60\', \'atr21\': \'one_atr21\', \'atr14\': \'one_atr14\',\n                             \'date_week\': \'one_date_week\'}, inplace=True)\n\n            a1 = sib_btc_scale.iloc[1].filter([\'open\', \'close\', \'high\', \'low\', \'volume\', \'pre_close\',\n                                               \'ma5\', \'ma10\', \'ma21\', \'ma60\', \'atr21\', \'atr14\', \'date_week\'])\n            a1.rename(index={\'open\': \'two_open\', \'close\': \'two_close\', \'high\': \'two_high\', \'low\': \'two_low\',\n                             \'volume\': \'two_volume\', \'pre_close\': \'two_pre_close\',\n                             \'ma5\': \'two_ma5\', \'ma10\': \'two_ma10\', \'ma21\': \'two_ma21\',\n                             \'ma60\': \'two_ma60\', \'atr21\': \'two_atr21\', \'atr14\': \'two_atr14\',\n                             \'date_week\': \'two_date_week\'}, inplace=True)\n            # \xe7\xac\xac\xe4\xb8\x89\xe5\xa4\xa9\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\'open\', \'low\', \'pre_close\', \'date_week\'\xef\xbc\x8c\xe8\xaf\xa5\xe5\x90\x8d\xe5\x89\x8d\xe7\xbc\x80today\xef\xbc\x8c\xe5\xa6\x82today_open\xef\xbc\x8ctoday_date_week\n            a2 = sib_btc_scale.iloc[2].filter([\'big_wave\', \'open\', \'low\', \'pre_close\', \'date_week\'])\n            a2.rename(index={\'open\': \'today_open\', \'low\': \'today_low\',\n                             \'pre_close\': \'today_pre_close\',\n                             \'date_week\': \'today_date_week\'}, inplace=True)\n            # \xe5\xb0\x86\xe6\x8a\xbd\xe5\x8f\x96\xe6\x94\xb9\xe5\x90\x8d\xe5\xad\x97\xe5\x90\x8e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\xe7\xbb\x84\xe5\x90\x88\xe6\x88\x90\xe4\xb8\xba\xe4\xb8\x80\xe6\x9d\xa1\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\xb33\xe5\xa4\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8d>1\xe6\x9d\xa1\xe6\x96\xb0\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n            btc_df = btc_df.append(pd.concat([a0, a1, a2], axis=0), ignore_index=True)\n        return btc_df\n'"
abupy/MLBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuML import AbuML\nfrom .ABuMLCreater import AbuMLCreater\nfrom .ABuMLPd import AbuMLPd\nfrom . import ABuMLExecute\nfrom . import ABuMLGrid\n\nfrom . import ABuMLApi as ml\n\n__all__ = [\n    'AbuML',\n    'AbuMLCreater',\n    'AbuMLPd',\n    'ABuMLExecute',\n    'ABuMLGrid',\n\n    'ml'\n]\n"""
abupy/MarketBu/ABuDataBase.py,0,"b'# coding=utf-8\n""""""\n    \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import ABCMeta, abstractmethod\n\nfrom ..MarketBu.ABuSymbol import Symbol\nfrom ..CoreBu.ABuEnv import EMarketTargetType\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu import ABuDateUtil\n\n\n# noinspection PyUnresolvedReferences\nclass SupportMixin(object):\n    """"""\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xa3\x80\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe5\xb8\x82\xe5\x9c\xba""""""\n\n    def _support_market(self):\n        """"""\xe5\xa3\xb0\xe6\x98\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\xa3\xb0\xe6\x98\x8e\xe6\x94\xaf\xe6\x8c\x81\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1""""""\n        return [EMarketTargetType.E_MARKET_TARGET_US, EMarketTargetType.E_MARKET_TARGET_HK,\n                EMarketTargetType.E_MARKET_TARGET_CN]\n\n    def check_support(self, symbol=None, rs=True):\n        """"""\n        \xe6\xa3\x80\xe6\xb5\x8b\xe5\x8f\x82\xe6\x95\xb0symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85\xe5\x86\x85\xe9\x83\xa8self._symbol\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x94\xaf\xe6\x8c\x81\n        :param symbol: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe6\xa3\x80\xe6\xb5\x8bsymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cEMarketTargetType\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        :param rs: \xe5\xa6\x82\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x8a\x9b\xe5\x87\xba\n        :return: \xe8\xbf\x94\xe5\x9b\x9e\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81 bool\n        """"""\n        if symbol is None:\n            symbol = self._symbol\n\n        if isinstance(symbol, six.string_types):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafstr\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8_support_market\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84value\xe7\xbb\x84\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\n            if symbol in [market.value for market in self._support_market()]:\n                return True\n        else:\n            if isinstance(symbol, Symbol):\n                # Symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\x96market\n                market = symbol.market\n            elif isinstance(symbol, EMarketTargetType):\n                market = symbol\n            else:\n                raise TypeError(\'symbol type is Symbol or str!!\')\n            # _support_market\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\n            if market in self._support_market():\n                return True\n\n        if rs:\n            #  \xe6\xa0\xb9\xe6\x8d\xaers\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xef\xbc\x8c\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\n            raise TypeError(\'{} don\\\'t support {}!\'.format(self.__class__.__name__, symbol))\n        return False\n\n\nclass BaseMarket(object):\n    """"""\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe5\x9f\xba\xe7\xa1\x80\xe5\xb8\x82\xe5\x9c\xba\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    # \xe9\xa2\x84\xe5\x85\x88\xe8\xae\xbe\xe7\xbd\xae\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x89\x8b\xe6\x9c\xba\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84device\n    K_DEV_MODE_LIST = [""A0001"", ""OPPOR9"", ""OPPOR9"", ""VIVOX5"",\n                       ""VIVOX6"", ""VIVOX6PLUS"", ""VIVOX9"", ""VIVOX9PLUS""]\n    # \xe9\xa2\x84\xe5\x85\x88\xe8\xae\xbe\xe7\xbd\xae\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x89\x8b\xe6\x9c\xba\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84os version\n    K_OS_VERSION_LIST = [""4.3"", ""4.2.2"", ""4.4.2"", ""5.1.1""]\n    # \xe9\xa2\x84\xe5\x85\x88\xe8\xae\xbe\xe7\xbd\xae\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x89\x8b\xe6\x9c\xba\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xb1\x8f\xe5\xb9\x95\xe5\xa4\xa7\xe5\xb0\x8f\n    K_PHONE_SCREEN = [[1080, 1920]]\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if not isinstance(symbol, Symbol):\n            raise TypeError(\'symbol is not type Symbol\')\n\n        self._symbol = symbol\n\n    # noinspection PyMethodMayBeStatic\n    def req_time(self):\n        """"""\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xb6\xe9\x97\xb4seconds\xe6\xa8\xa1\xe6\x8b\x9f""""""\n        tm = int(ABuDateUtil.time_seconds() * 1000)\n        return tm\n\n    @classmethod\n    def _fix_kline_pd_se(cls, kl_df, n_folds, start=None, end=None):\n        """"""\n        \xe5\x88\xa0\xe9\x99\xa4\xe5\xa4\x9a\xe4\xbd\x99\xe8\xaf\xb7\xe6\xb1\x82\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\xb3\xe9\x87\x8d\xe6\x96\xb0\xe6\xa0\xb9\xe6\x8d\xaestart\xef\xbc\x8cend\xe6\x88\x96n_folds\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe5\x89\xb2\n        :param kl_df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe5\x89\xb2pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param n_folds: n_folds\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        :return: \xe5\x88\xa0\xe9\x99\xa4\xe5\xa4\x9a\xe4\xbd\x99\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xa7\x84\xe5\x88\x99\xe5\x90\x8e\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if kl_df is None:\n            return kl_df\n\n        # \xe4\xbb\x8estart\xe5\x92\x8cend\xe4\xb8\xad\xe5\x88\x87\xe7\x89\x87\n        if start is not None:\n            # \xe6\x9c\x89start\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaint\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_df\xe4\xb8\xad\xe7\x9a\x84date\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\x88\x87\xe5\x89\xb2\n            start = ABuDateUtil.date_str_to_int(start)\n            kl_df = kl_df[kl_df.date >= start]\n            if end is not None:\n                # \xe6\x9c\x89end\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaint\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_df\xe4\xb8\xad\xe7\x9a\x84date\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\x88\x87\xe5\x89\xb2\n                end = ABuDateUtil.date_str_to_int(end)\n                kl_df = kl_df[kl_df.date <= end]\n        else:\n            # \xe6\xa0\xb9\xe6\x8d\xaen_folds\xe6\x9e\x84\xe9\x80\xa0\xe5\x88\x87\xe7\x89\x87\xe7\x9a\x84start\n            start = ABuDateUtil.begin_date(365 * n_folds)\n            start = ABuDateUtil.date_str_to_int(start)\n            # \xe4\xbd\xbf\xe7\x94\xa8kl_df\xe4\xb8\xad\xe7\x9a\x84date\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\x88\x87\xe5\x89\xb2\n            kl_df = kl_df[kl_df.date >= start]\n        return kl_df\n\n    @classmethod\n    def _fix_kline_pd_zero(cls, kl_df):\n        """"""\n        \xe4\xbf\xae\xe5\xa4\x8d\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe4\xb8\xad\xe7\x9a\x84\xe5\xbc\x82\xe5\xb8\xb8\xe7\x82\xb9\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba0\xe7\x9a\x84\xe7\x82\xb9\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe5\x8f\xaa\xe8\x83\xbd\xe7\x94\xa8\xe5\x9c\xa8\xe7\xa1\xae\xe5\xae\x9a\xe4\xbc\x9a\xe6\x9c\x89\xe5\xbc\x82\xe5\xb8\xb8\xe7\x82\xb9\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\n        \xe6\xaf\x94\xe5\xa6\x82\xe6\x9c\x9f\xe6\x9d\x83\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba\xe8\xbf\x9b\xe5\x85\xa5\xe4\xba\xa4\xe5\x89\xb2\xe6\x97\xa5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe8\x83\xbd\xe9\x9a\x8f\xe6\x84\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\xae\xe5\xa4\x8d\n        :param kl_df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe5\x89\xb2pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe4\xbf\xae\xe5\xa4\x8d\xe5\x90\x8e\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if kl_df is None:\n            return kl_df\n\n        def fix_zero(trade_day):\n            """"""\xe5\xaf\xb9\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe4\xb8\xba0\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe6\x98\xa8\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xbf\xe6\x8d\xa2""""""\n            if trade_day.close == 0:\n                # \xe6\x94\xb6\xe7\x9b\x98\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84low\xe8\xbf\x98\xe6\x98\xaf>0\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8low\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                trade_day.close = trade_day.low if trade_day.low > 0 else trade_day.pre_close\n\n            # \xe7\x94\xb1\xe4\xba\x8e\xe5\xb7\xb2fix\xe4\xba\x86trade_day.close\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5high\xef\xbc\x8clow\xef\xbc\x8copen\xe4\xbd\xbf\xe7\x94\xa8trade_day.close fix\n            if trade_day.high == 0:\n                trade_day.high = trade_day.close\n            if trade_day.low == 0:\n                trade_day.low = trade_day.close\n            if trade_day.open == 0:\n                trade_day.open = trade_day.close\n            return trade_day\n\n        kl_df = kl_df.apply(fix_zero, axis=1)\n\n        return kl_df\n\n\nclass StockBaseMarket(six.with_metaclass(ABCMeta, BaseMarket)):\n    """"""\xe5\x9f\xba\xe4\xba\x8e\xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    @abstractmethod\n    def minute(self, *args, **kwargs):\n        """"""\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        pass\n\n    @abstractmethod\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        pass\n\n    @classmethod\n    def _fix_kline_pd(cls, kl_df, n_folds, start=None, end=None):\n        """"""\xe4\xbf\xae\xe5\xa4\x8dkline\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97""""""\n        return cls._fix_kline_pd_se(kl_df, n_folds, start=start, end=end)\n\n\nclass FuturesBaseMarket(six.with_metaclass(ABCMeta, BaseMarket)):\n    """"""\xe5\x9f\xba\xe4\xba\x8e\xe6\x9c\x9f\xe8\xb4\xa7\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    @abstractmethod\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        pass\n\n    @classmethod\n    def _fix_kline_pd(cls, kl_df, n_folds, start=None, end=None):\n        """"""\xe4\xbf\xae\xe5\xa4\x8dkline\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97""""""\n        kl_df = cls._fix_kline_pd_se(kl_df, n_folds, start=start, end=end)\n        # \xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\xa6\x81\xe4\xbf\xae\xe5\xa4\x8d\xe4\xba\xa4\xe5\x89\xb20 close\xe7\x9a\x84bar\n        return cls._fix_kline_pd_zero(kl_df)\n\n\nclass TCBaseMarket(six.with_metaclass(ABCMeta, BaseMarket)):\n    """"""\xe5\x9f\xba\xe4\xba\x8e\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\xe7\xad\x89\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    @abstractmethod\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        pass\n\n    @abstractmethod\n    def minute(self, *args, **kwargs):\n        """"""\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe9\x87\x8f\xe5\x8c\x96\xe6\x97\xa5\xe5\x86\x85\xe7\x9f\xad\xe7\xba\xbf\xe9\xa2\x91\xe7\xb9\x81\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9a\xe5\x88\xb6\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe6\x97\xa5\xe5\x86\x85\xe7\xad\x96\xe7\x95\xa5""""""\n        pass\n\n    @classmethod\n    def _fix_kline_pd(cls, kl_df, n_folds, start=None, end=None):\n        """"""\xe4\xbf\xae\xe5\xa4\x8dkline\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97""""""\n        return cls._fix_kline_pd_se(kl_df, n_folds, start=start, end=end)\n'"
abupy/MarketBu/ABuDataCache.py,0,"b'# coding=utf-8\n""""""\n    \xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x87\xe9\x9b\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x98\xe5\x82\xa8\xef\xbc\x8c\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0merge\xe7\xad\x96\xe7\x95\xa5\xe7\xad\x89\xe5\xae\x9e\xe7\x8e\xb0\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\nimport pandas as pd\n\nfrom ..CoreBu.ABuEnv import EDataCacheType, EMarketTargetType, EMarketSubType\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu.ABuFileUtil import load_df_csv, load_hdf5, ensure_dir, file_exist, del_file, dump_df_csv, \\\n    dump_del_hdf5\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange, range, filter\nfrom ..UtilBu.ABuProgress import AbuProgress\n\ntry:\n    from tables import HDF5ExtError\nexcept ImportError:\n    class HDF5ExtError(RuntimeError):\n        """"""\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89HDF5\xe7\x8e\xaf\xe5\xa2\x83\xe5\x8f\xaa\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe5\xae\x83\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f""""""\n        pass\n\n# \xe6\xa8\xa1\xe5\x9d\x97\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x97\xb6\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe4\xbf\x9d\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe4\xb8\x8d\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x86\x85\xe9\x83\xa8ensure_dir\nensure_dir(ABuEnv.g_project_kl_df_data)\n\n\ndef _kl_unique_key(symbol, start, end):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87symbol\xe4\xbb\xa5\xe5\x8f\x8astart, end\xe4\xbf\xa1\xe6\x81\xaf\xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x82\xa8\xe5\x94\xaf\xe4\xb8\x80id\n    :param symbol: Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    :param start: str\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1 eg 2015-02-14\n    :param end: str\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1 eg 2017-02-14\n    :return: e.g : \'usTSLA_2015-02-14_2017-02-14\'\n    """"""\n    return ""{}_{}_{}"".format(symbol.value, start, end)\n\n\ndef rm_data_from_symbol(symbol):\n    """"""\n    \xe5\x88\xa0\xe9\x99\xa4\xe7\x89\xb9\xe5\xae\x9asymbol\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\n    :param symbol: Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    :return:\n    """"""\n\n    # TODO \xe5\x8f\xaa\xe5\xae\x9e\xe7\x8e\xb0\xe4\xba\x86\xe9\x92\x88\xe5\xaf\xb9hdf5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\xa0\xe9\x99\xa4\xef\xbc\x8c\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x85\xb6\xe5\xae\x83\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\xa0\xe9\x99\xa4\n    target_hdf5 = ABuEnv.g_project_kl_df_data\n    with pd.HDFStore(target_hdf5) as h5s:\n\n        if symbol in h5s:\n            ind_key = h5s[symbol].values[0]\n            if ind_key in h5s:\n                # \xe5\x88\xa0\xe9\x99\xa4\xe7\xbc\x93\xe5\xad\x98\xe5\xae\x9e\xe4\xbd\x93\xe6\x95\xb0\xe6\x8d\xae\n                del h5s[ind_key]\n            # \xe5\x88\xa0\xe9\x99\xa4\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xaeindex\n            del h5s[symbol]\n\n\ndef load_all_kline(want_df=True, market=None, all_market=False):\n    """"""\n    \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0want_df\xe5\x86\xb3\xe5\xae\x9a\xe8\xaf\xbb\xe5\x8f\x96hdf5\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84index symbol\xe6\x95\xb0\xe6\x8d\xae\xe6\x88\x96\xe8\x80\x85\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe6\x95\xb0\xe6\x8d\xae\n    :param want_df: \xe6\x98\xaf\xe8\xa6\x81\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x98\xe6\x98\xaf\xe7\xb4\xa2\xe5\xbc\x95symbol\xe6\x95\xb0\xe6\x8d\xae\n    :param market: \xe9\xbb\x98\xe8\xae\xa4None\xef\xbc\x8c\xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n    :param all_market: \xe9\xbb\x98\xe8\xae\xa4False, \xe5\xa6\x82\xe6\x9e\x9cTrue\xe5\x88\x99\xe4\xb8\x8d\xe8\xbf\x87\xe6\xbb\xa4\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\xb3\xe5\xbf\xbd\xe7\x95\xa5market\xe5\x8f\x82\xe6\x95\xb0\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\n    :return:\n    """"""\n    if ABuEnv.g_data_cache_type != EDataCacheType.E_DATA_CACHE_HDF5:\n        raise RuntimeError(\'only support hdf5 cache mode!\')\n\n    # noinspection PyProtectedMember\n    target_hdf5 = ABuEnv.g_project_kl_df_data\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84key\xef\xbc\x8ckey\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe6\x9c\x80\xe5\xb0\x91\xe8\xa6\x81\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f 8 \xef\xbc\x8a 2 \xef\xbc\x8b \xe5\xb8\x82\xe5\x9c\xba\xe5\x89\x8d\xe7\xbc\x80 \xef\xbc\x8b 2  \xef\xbc\x8b \xe6\x9c\x80\xe5\xb0\x8fsymbol\xe9\x95\xbf \xef\xbc\x8b 2\n    k_min_index_key_len = 20  # 8 * 2 + 2 + 2\n    with pd.HDFStore(target_hdf5) as h5s:\n\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0want_df\xe4\xbd\xbf\xe7\x94\xa8k_min_index_key_len\xe8\xbf\x87\xe6\xbb\xa4\xe5\x87\xba\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        keys = list(filter(\n            lambda p_key: len(p_key) >= k_min_index_key_len if want_df else len(p_key) < k_min_index_key_len,\n            h5s.keys()))\n\n        if not all_market:\n            # \xe9\x9d\x9e\xe6\x89\x80\xe6\x9c\x89\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\xb3\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaemarket\xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x87\xe6\xbb\xa4\n            if market is None:\n                market = ABuEnv.g_market_target\n\n            k_market_map = {EMarketTargetType.E_MARKET_TARGET_US: [EMarketTargetType.E_MARKET_TARGET_US.value],\n                            EMarketTargetType.E_MARKET_TARGET_HK: [EMarketTargetType.E_MARKET_TARGET_HK.value],\n                            EMarketTargetType.E_MARKET_TARGET_CN: [EMarketSubType.SZ.value, EMarketSubType.SH.value]}\n\n            # \xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84head\n            market_head_list = k_market_map[market]\n\n            def filter_market_key(p_key):\n                """"""\xe6\xa3\x80\xe6\xb5\x8bp_key\xe6\x98\xaf\xe5\x90\xa6startswith\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xbamarket_head_list""""""\n                for mh in market_head_list:\n                    # key[0] = \'/\'\n                    if p_key[1:].startswith(mh):\n                        return True\n                return False\n            # \xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x8c\x87\xe5\xae\x9a\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84key\n            keys = list(filter(lambda p_key: filter_market_key(p_key), keys))\n        # \xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x85\x83\xe7\xb4\xa0\xe7\x94\xb1\xef\xbc\x88(key, h5s[key]) \xe6\x9e\x84\xe6\x88\x90\n        return [(key, h5s[key]) for key in keys]\n\n\ndef covert_hdf_to_csv():\n    """"""\xe8\xbd\xac\xe6\x8d\xa2hdf5\xe4\xb8\x8b\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89cache\xe7\xbc\x93\xe5\xad\x98\xe8\x87\xb3csv\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe8\xb4\xae\xe6\xa0\xbc\xe5\xbc\x8f""""""\n\n    # \xe8\x8e\xb7\xe5\x8f\x96hdf5\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\n    dfs = load_all_kline(all_market=True)\n\n    # \xe4\xb8\xb4\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f\n    tmp_cache = ABuEnv.g_data_cache_type\n    ABuEnv.g_data_cache_type = EDataCacheType.E_DATA_CACHE_CSV\n    with AbuProgress(len(dfs), 0, \'csv covert\') as pg:\n        for symbol, dump_df in dfs:\n            pg.show()\n            # eg: usTSLA\n            symbol_key = symbol.split(\'_\')[0][1:]\n            # eg: usTSLA_20110808_20170808\n            date_key = symbol[1:]\n            # \xe5\xb0\x86df\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbacsv\xe6\xa0\xbc\xe5\xbc\x8f\n            dump_kline_df(dump_df, symbol_key, date_key)\n    # \xe8\xbf\x98\xe5\x8e\x9f\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f\n    ABuEnv.g_data_cache_type = tmp_cache\n\n\ndef load_kline_df(symbol_key):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85\xe4\xb8\x8d\xe5\x90\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaesymbol_key\xe8\xaf\xbb\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\xb0\xe6\x8d\xae\n    :param symbol_key: str\xe5\xaf\xb9\xe8\xb1\xa1symbol\n    :return: (\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe7\xb4\xa2\xe5\xbc\x95date_key\xe4\xb8\xadstart\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xa5\xe6\x9c\x9fint\xef\xbc\x8c\xe7\xb4\xa2\xe5\xbc\x95date_key\xe4\xb8\xadend\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xa5\xe6\x9c\x9fint)\n    """"""\n\n    """"""\xe8\x80\x81\xe7\x89\x88\xe6\x9c\xac\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe4\xb8\xbahdf5\xef\xbc\x8cwindows\xe7\x94\xa8\xe6\x88\xb7\xe6\x9c\x89hdf5\xe7\x8e\xaf\xe5\xa2\x83\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe6\x94\xb9\xe4\xb8\xba\xe9\xa6\x96\xe5\x85\x88csv""""""\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe9\xbb\x98\xe8\xae\xa4\xe8\xaf\xbb\xe5\x8f\x96\xe6\x97\xa5k\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\xbf\xe7\x94\xa8_load_kline_csv\xe6\x96\xb9\xe6\xb3\x95\n    load_kline_func = _load_kline_csv\n    # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe9\xbb\x98\xe8\xae\xa4\xe8\xaf\xbb\xe5\x8f\x96\xe6\x97\xa5k\xe6\x95\xb0\xe6\x8d\xaekey\xe4\xbd\xbf\xe7\x94\xa8_load_csv_key\xe6\x96\xb9\xe6\xb3\x95\n    load_kline_key = _load_csv_key\n    # noinspection PyProtectedMember\n    if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5 and \\\n            not ABuEnv._g_enable_example_env_ipython:\n        # \xe8\xaf\xbb\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\xe6\x98\xafHDF5\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe4\xb8\x8d\xe6\x98\xaf\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x88\x87\xe6\x8d\xa2load_kline_func\xef\xbc\x8cload_kline_key\xe4\xb8\xbaHDF5\xe8\xaf\xbb\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0\n        load_kline_func = _load_kline_hdf5\n        load_kline_key = _load_hdf5_key\n\n    # noinspection PyUnusedLocal\n    date_key = None\n    try:\n        # \xe9\xa6\x96\xe5\x85\x88\xe9\x80\x9a\xe8\xbf\x87symbol_key\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe7\xb4\xa2\xe5\xbc\x95date_key\n        date_key = load_kline_key(symbol_key)\n    except HDF5ExtError as e:\n        # r_s = False\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8chdf5\xe7\x89\xa9\xe7\x90\x86\xe6\x80\xa7\xe9\x94\x99\xe8\xaf\xaf\xe5\xb0\xb1\xe5\x88\xa0\xe9\x99\xa4\xe4\xba\x86\xef\xbc\x8c\xe9\x87\x8d\xe6\x9d\xa5\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84hdf5\xe9\x9c\x80\xe8\xa6\x81\xe6\x89\x8b\xe5\x8a\xa8\xe5\xa4\x87\xe4\xbb\xbd.\n        r_s = True\n        raise RuntimeError(\'hdf5 load error!! err={} \'.format(e)) if r_s else os.remove(ABuEnv.g_project_kl_df_data)\n\n    if date_key is not None:\n        # \xe5\x9c\xa8\xe7\xb4\xa2\xe5\xbc\x95date_key\xe5\xad\x98\xe5\x9c\xa8\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xae\x9e\xe4\xbd\x93\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\n        df = load_kline_func(date_key[0])\n        if df is not None:\n            df[\'key\'] = list(range(0, len(df)))\n            # \xe7\xb4\xa2\xe5\xbc\x95date_key\xe4\xb8\xad\xe8\xbd\xac\xe6\x8d\xa2df_req_start\n            df_req_start = int(date_key[0][-17: -9])\n            # \xe7\xb4\xa2\xe5\xbc\x95date_key\xe4\xb8\xad\xe8\xbd\xac\xe6\x8d\xa2df_req_end\n            df_req_end = int(date_key[0][-8:])\n            return df, df_req_start, df_req_end\n    return None, 0, 0\n\n\ndef _load_kline_csv(date_key):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9csv\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0cache\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param date_key: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xb4\xa2\xe5\xbc\x95key\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe5\xaf\xb9csv\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\xe7\x9b\xae\xe6\xa0\x87csv\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    """"""\n    # noinspection PyProtectedMember\n    csv_dir = ABuEnv.g_project_kl_df_data_example if ABuEnv._g_enable_example_env_ipython \\\n        else ABuEnv.g_project_kl_df_data_csv\n\n    # \xe9\x80\x9a\xe8\xbf\x87\xe8\xbf\x9e\xe6\x8e\xa5date_key\xe5\x92\x8ccsv\xe5\xad\x98\xe5\x82\xa8\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe7\x9b\xae\xe6\xa0\x87csv\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    csv_fn = os.path.join(csv_dir, date_key)\n    df = load_df_csv(csv_fn)\n    # \xe8\xbf\x99\xe9\x87\x8c\xe8\xa6\x81\xe6\x8a\x8a\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbatime\n    df.index = pd.to_datetime(df.index)\n    return df\n\n\ndef _load_kline_hdf5(date_key):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9hdf5\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0cache\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param date_key: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xb4\xa2\xe5\xbc\x95key\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe5\xaf\xb9hdf5\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\xe7\x9b\xae\xe6\xa0\x87\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9f\xa5\xe8\xaf\xa2key\n    """"""\n    target_hdf5 = ABuEnv.g_project_kl_df_data\n    return load_hdf5(target_hdf5, date_key)\n\n\ndef check_csv_local(symbol_key):\n    """"""\n    \xe5\xa5\x97\xe7\xbb\x93_load_csv_key\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\x8d\xe8\xbf\x94\xe5\x9b\x9ekey\xe5\x85\xb7\xe4\xbd\x93\xe5\x80\xbc\xef\xbc\x8c\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84symbol\xe6\x98\xaf\xe5\x90\xa6\n    \xe5\xad\x98\xe5\x9c\xa8csv\xe7\xbc\x93\xe5\xad\x98\n    :param symbol_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA\n    :return: bool, symbol\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8csv\xe7\xbc\x93\xe5\xad\x98\n    """"""\n    return _load_csv_key(symbol_key) is not None\n\n\ndef _load_csv_key(symbol_key):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9csv\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87symbol_key\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x89\xbe\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84csv\xe5\x85\xb7\xe4\xbd\x93\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\n    \xe5\xa6\x82\xe4\xbb\x8eusTSLA->\xe6\x89\xbe\xe5\x88\xb0usTSLA_2014-7-26_2016_7_26\xe8\xbf\x99\xe4\xb8\xaa\xe5\x85\xb7\xe4\xbd\x93csv\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    :param symbol_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA\n    """"""\n    # noinspection PyProtectedMember\n    csv_dir = ABuEnv.g_project_kl_df_data_example if ABuEnv._g_enable_example_env_ipython \\\n        else ABuEnv.g_project_kl_df_data_csv\n\n    if file_exist(csv_dir):\n        for name in os.listdir(csv_dir):\n            # \xe4\xbb\x8ecsv\xe7\xbc\x93\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2\xe9\x80\x9a\xe8\xbf\x87fnmatch\xe5\x8c\xb9\xe9\x85\x8d\xe5\x85\xb7\xe4\xbd\x93csv\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8ceg. usTSLA->usTSLA_2014-7-26_2016_7_26\n            # if fnmatch(name, \'{}*\'.format(symbol_key)):\n            """"""\n                \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe6\xa8\xa1\xe7\xb3\x8a\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbc\x9a\xe5\x9b\xa0\xe4\xb8\xbaTSL\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x8aTSLA\xe5\xaf\xbc\xe8\x87\xb4\xe5\x88\xa0\xe9\x99\xa4\xe5\x8e\x9f\xe6\x9c\x89\xe7\x9a\x84symbol\n                \xe8\x80\x8c\xe4\xb8\x94\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe5\x8a\xa0\'_\'\xe5\x81\x9a\xe4\xb8\xbasymbol\xe7\xbb\x93\xe6\x9d\x9f\xe5\x8c\xb9\xe9\x85\x8d\xe6\xa0\x87\xe8\xae\xb0\n            """"""\n            if name.startswith(symbol_key + \'_\'):\n                # []\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe9\x85\x8d\xe5\x90\x88\xe5\xa4\x96\xe9\x9d\xa2\xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x8d\xe5\x90\x8cstore\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbd\xbf\xe7\x94\xa8key[0]\n                return [name]\n    return None\n\n\ndef _load_hdf5_key(symbol_key):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9hdf5\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87symbol_key\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x89\xbe\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x9c\xa8hdf5\xe4\xb8\xad\xe7\x9a\x84\xe5\xae\x9e\xe4\xbd\x93\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\n    \xe5\xba\x8f\xe5\x88\x97\xe5\xae\x9e\xe4\xbd\x93\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\xe5\xba\x8f\xe5\x88\x97\n    :param symbol_key: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xb4\xa2\xe5\xbc\x95key\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe5\xaf\xb9hdf5\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\xe7\x9b\xae\xe6\xa0\x87\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9f\xa5\xe8\xaf\xa2key\n    """"""\n    # noinspection PyProtectedMember\n    target_hdf5 = ABuEnv.g_project_kl_df_data\n    return load_hdf5(target_hdf5, symbol_key)\n\n\ndef dump_kline_df(dump_df, symbol_key, date_key):\n    """"""\n    \xe5\xb0\x81\xe8\xa3\x85\xe4\xb8\x8d\xe5\x90\x8c\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaesymbol_key\xef\xbc\x8cdate_key\xe5\xad\x98\xe5\x82\xa8dump_df\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    \xe5\x82\xa8\xe5\xad\x98\xe6\x96\xb9\xe6\xb3\x95 symbol_key->date_key->dump_df\n\n    eg  : usTSLA->usTSLA_20100214_20170214->tsla_df\n\n    :param dump_df: \xe9\x9c\x80\xe8\xa6\x81\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA\n    :param date_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA_20100214_20170214 \xe5\x8c\x85\xe5\x90\xab\xe4\xba\x86df\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\x8e\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe4\xbe\xbf\xe4\xba\x8e\xe8\xae\xa1\xe7\xae\x97\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xae\xb5\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe6\xad\xa4\xe4\xb9\x8b\xe9\x97\xb4\n\n    """"""\n    # \xe9\xbb\x98\xe8\xae\xa4csv\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x86\xe9\x85\x8d\xe5\xb7\xa5\xe4\xbd\x9c\xe5\x87\xbd\xe6\x95\xb0\n    dump_kline_func = _dump_kline_csv\n    load_kline_key = _load_csv_key\n    load_kline_func = _load_kline_csv\n    # hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x86\xe9\x85\x8d\xe5\xb7\xa5\xe4\xbd\x9c\xe5\x87\xbd\xe6\x95\xb0\n    if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5:\n        load_kline_key = _load_hdf5_key\n        dump_kline_func = _dump_kline_hdf5\n        load_kline_func = _load_kline_hdf5\n\n    _start = int(date_key[-17: -9])\n    _end = int(date_key[-8:])\n\n    # \xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98symbol_key\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\xe5\xaf\xb9\xe8\xb1\xa1df_date_key\n    df_date_key = load_kline_key(symbol_key)\n    if df_date_key is not None:\n        # \xe5\x8d\xb3\xe4\xb9\x8b\xe5\x89\x8d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81merge\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n\n        # \xe4\xb9\x8b\xe5\x89\x8d\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f\n        df_end = int(df_date_key[0][-8:])\n        # \xe4\xb9\x8b\xe5\x89\x8d\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f\n        df_start = int(df_date_key[0][-17: -9])\n        if _start <= df_start and df_end <= _end:\n            """"""\n                \xe6\x96\xb0\xe8\xaf\xb7\xe6\xb1\x82\xe5\x9b\x9e\xe6\x9d\xa5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xae\x8c\xe5\x85\xa8\xe5\x8c\x85\xe8\xa3\xb9\xe4\xba\x86\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xad\x98\xe5\x82\xa8\xe5\x8d\xb3\xe5\x8f\xaf\n                       _start o------------------o _end\n                       df_start   o--------o df_end\n\n            result:    _start o------------------o _end\n            """"""\n            dump_kline_func(symbol_key, date_key, dump_df, delete_key=df_date_key)\n        elif _start < df_start and df_end >= _end:\n            """"""\n                \xe6\x96\xb0\xe8\xaf\xb7\xe6\xb1\x82\xe5\x9b\x9e\xe6\x9d\xa5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xaf\x94\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe8\xa6\x81\xe8\x80\x83\xe5\x89\x8d\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe8\xbf\x9c\n                       _start o------------------o _end\n                       df_start   o-----------------o df_end\n\n            result:    _start o---------------------o df_end\n            """"""\n            date_key = \'{}_{}_{}\'.format(symbol_key, _start, df_end)\n            # \xe9\xa6\x96\xe5\x85\x88\xe8\xaf\xbb\xe5\x8f\x96\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            h5_df = load_kline_func(df_date_key[0])\n            # [_start, df_start)\n            # \xe9\x80\x89\xe5\x8f\x96dump_df.date < df_start\xe9\x83\xa8\xe5\x88\x86\n            new_df = dump_df[dump_df.date < df_start]\n            # concat\xe8\xbf\x9e\xe8\xb5\xb7\xe6\x9d\xa5\xe4\xb8\xa4\xe9\x83\xa8\xe5\x88\x86\n            new_df = pd.concat([new_df, h5_df])\n            # \xe6\x9c\x80\xe7\xbb\x88\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe4\xb8\xbanew_df\n            dump_kline_func(symbol_key, date_key, new_df, delete_key=df_date_key)\n        elif _start >= df_start and df_end < _end:\n            """"""\n                \xe6\x96\xb0\xe8\xaf\xb7\xe6\xb1\x82\xe5\x9b\x9e\xe6\x9d\xa5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xaf\x94\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe6\x99\x9a\xef\xbc\x8c\xe4\xbd\x86\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\xe4\xb9\x9f\xe6\xaf\x94\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe6\x99\x9a\n                            _start o------------------o _end\n                       df_start o-------------o df_end\n\n            result:    df_start o---------------------o _end\n            """"""\n            date_key = \'{}_{}_{}\'.format(symbol_key, df_start, _end)\n            # \xe9\xa6\x96\xe5\x85\x88\xe8\xaf\xbb\xe5\x8f\x96\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            h5_df = load_kline_func(df_date_key[0])\n            # \xe9\x80\x89\xe5\x8f\x96dump_df.date > df_end\xe9\x83\xa8\xe5\x88\x86\n            new_df = dump_df[dump_df.date > df_end]\n            # concat\xe8\xbf\x9e\xe8\xb5\xb7\xe6\x9d\xa5\xe4\xb8\xa4\xe9\x83\xa8\xe5\x88\x86\n            new_df = pd.concat([h5_df, new_df])\n            # \xe6\x9c\x80\xe7\xbb\x88\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe4\xb8\xbanew_df\n            dump_kline_func(symbol_key, date_key, new_df, delete_key=df_date_key)\n        else:\n            # \xe5\xae\x8c\xe5\x85\xa8\xe5\x8c\x85\xe8\xa3\xb9\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe6\x9b\xb4\xe6\x96\xb0\xe6\x9c\x80\xe6\x96\xb0\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xb8\x8b\xe6\x9d\xa5\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xbf\xe6\x8d\xa2\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\xb1\xbb\xe4\xbc\xbc\xe6\x9b\xb4\xe6\x96\xb0\xe6\x93\x8d\xe4\xbd\x9c\n            # \xe9\xa6\x96\xe5\x85\x88\xe8\xaf\xbb\xe5\x8f\x96\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            # date_key \xe5\x8f\x96\xe5\x92\x8c\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe6\x91\xb8\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\n\n            date_key = \'{}_{}_{}\'.format(symbol_key, df_start, df_end)\n            local_df = load_kline_func(df_date_key[0])\n            local_df_st = local_df[local_df.date < _start]\n            local_df_ed = local_df[local_df.date > _end]\n            # concat\xe8\xbf\x9e\xe8\xb5\xb7\xe6\x9d\xa5\xe4\xb8\x89\xe4\xb8\xaa\xe9\x83\xa8\xe5\x88\x86\n            new_df = pd.concat([local_df_st, dump_df, local_df_ed])\n            # \xe6\x9c\x80\xe7\xbb\x88\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe4\xb8\xbanew_df\n            dump_kline_func(symbol_key, date_key, new_df, delete_key=df_date_key)\n    else:\n        # \xe5\x8d\xb3\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xad\x98\xe5\x82\xa8\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe5\x8d\xb3\xe5\x8f\xaf\n        dump_kline_func(symbol_key, date_key, dump_df)\n\n\n# noinspection PyUnusedLocal\ndef _dump_kline_csv(symbol_key, date_key, dump_df, delete_key=None):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9csv\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaesymbol_key\xef\xbc\x8cdate_key\xe5\xad\x98\xe5\x82\xa8dump_df\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param symbol_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8ecsv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xef\xbc\x8c\xe5\x8f\xaa\xe4\xb8\xba\xe4\xbf\x9d\xe6\x8c\x81\xe6\x8e\xa5\xe5\x8f\xa3\xe7\xbb\x9f\xe4\xb8\x80\n    :param date_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA_20100214_20170214\xef\xbc\x8ccsv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe4\xb8\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\n    :param dump_df: \xe9\x9c\x80\xe8\xa6\x81\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param delete_key: \xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84csv\xe6\x96\x87\xe4\xbb\xb6\n    :return:\n    """"""\n    # \xe5\x85\x88\xe5\x88\xa0\xe5\x90\x8e\xe5\x90\x8e\xe5\x86\x99\xe5\x85\xa5\n    if delete_key is not None:\n        delete_key = delete_key[0]\n        del_fn = os.path.join(ABuEnv.g_project_kl_df_data_csv, delete_key)\n        if file_exist(del_fn):\n            del_file(del_fn)\n\n    csv_fn = os.path.join(ABuEnv.g_project_kl_df_data_csv, date_key)\n    dump_df_csv(csv_fn, dump_df)\n\n\ndef _dump_kline_hdf5(symbol_key, date_key, dump_df, delete_key=None):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9hdf5\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaesymbol_key\xef\xbc\x8cdate_key\xe5\xad\x98\xe5\x82\xa8dump_df\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param symbol_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA\xef\xbc\x8chdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe4\xb8\xba\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95key\n    :param date_key: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. usTSLA_20100214_20170214\xef\xbc\x8chdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe4\xb8\xba\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xae\x9e\xe4\xbd\x93key\n    :param dump_df: \xe9\x9c\x80\xe8\xa6\x81\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param delete_key: \xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84csv\xe6\x96\x87\xe4\xbb\xb6\n    :return:\n    """"""\n\n    # \xe9\x9c\x80\xe8\xa6\x81dump\xe7\x9a\x84dict\n    dump_dict = {symbol_key: pd.Series(date_key), date_key: dump_df}\n    # \xe9\x9c\x80\xe8\xa6\x81delete\xe7\x9a\x84dict\n    del_array = [symbol_key]\n    if delete_key is not None:\n        del_array.append(delete_key)\n    """"""\n        dump\xe4\xb8\xad\xe7\x9a\x84target_hdf5\xe5\x8f\xaa\xe8\x83\xbd\xe6\x98\xafABuEnv.g_project_kl_df_data\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe5\x9c\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xef\xbc\x8c\n        \xe5\x9c\xa8dump_del_hdf5\xe4\xb8\xad\xe5\x88\x86\xe5\x88\xab\xe8\xbf\xad\xe4\xbb\xa3dump_dict\xef\xbc\x8cdel_array\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xaf\xa6\xe9\x98\x85dump_del_hdf5\n    """"""\n    dump_del_hdf5(ABuEnv.g_project_kl_df_data, dump_dict, del_array)\n\n\ndef save_kline_df(df, temp_symbol, start_int, end_int):\n    """"""\n    \xe7\x8b\xac\xe7\xab\x8b\xe5\xaf\xb9\xe5\xa4\x96\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98kl\xe6\x95\xb0\xe6\x8d\xae\xe6\x8e\xa5\xe5\x8f\xa3\n    :param df: \xe9\x9c\x80\xe8\xa6\x81\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xae\x9e\xe4\xbd\x93pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param temp_symbol: Symbbol\xe5\xaf\xb9\xe8\xb1\xa1\n    :param start_int: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9fint\n    :param end_int: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9fint\n    :return:\n    """"""\n    if df is not None:\n        # \xe9\x80\x9a\xe8\xbf\x87emp_symbol, start_int, end_int\xe6\x8b\xbc\xe6\x8e\xa5\xe5\x94\xaf\xe4\xb8\x80\xe4\xbf\x9d\xe5\xad\x98df_key\n        df_key = _kl_unique_key(temp_symbol, start_int, end_int)\n        dump_kline_df(df, temp_symbol.value, df_key)\n\n\ndef load_kline_df_net(source, temp_symbol, n_folds, start, end, start_int, end_int, save):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\xb7\xe6\xb1\x82\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96temp_symbol\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param source: \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90BaseMarket\xe7\x9a\x84\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe9\x9d\x9e\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n    :param temp_symbol: Symbol\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_folds: \xe9\x9c\x80\xe8\xa6\x81\xe8\x8e\xb7\xe5\x8f\x96\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cint\n    :param start: \xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe7\xbb\x93\xe6\x9d\x9f\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param start_int: \xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8cint\n    :param end_int: \xe7\xbb\x93\xe6\x9d\x9f\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8cint\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbb\x8e\xe7\xbd\x91\xe7\xbb\x9c\xe6\x88\x90\xe5\x8a\x9f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8e\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\n    """"""\n    df = None\n    # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe5\xaf\xb9\xe8\xb1\xa1\n    data_source = source(temp_symbol)\n\n    if data_source.check_support():\n        # \xe9\x80\x9a\xe8\xbf\x87\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\xb7\xb7\xe5\x85\xa5\xe7\x9a\x84SupportMixin\xe7\xb1\xbb\xe6\xa3\x80\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81temp_symbol\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae\n        df = data_source.kline(n_folds=n_folds, start=start, end=end)\n\n    if df is not None and save:\n        """"""\n            \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84start_int\xef\xbc\x8c end_int\xe4\xbc\x9a\xe8\xae\xb0\xe4\xbd\x9c\xe4\xb8\x8b\xe6\xac\xa1\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84df_req_start, df_req_end\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\xb1\xe6\x98\xaf\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x8c\xe6\x95\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x8a\xef\xbc\x8c\n            \xe5\x8d\xb3\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x88\x9a\xe5\x88\x9a\xe8\xaf\xb7\xe6\xb1\x82\xe4\xba\x86\xe7\x9b\xb4\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xb8\xba\xe6\xad\xa2\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\xb2\xa1\xe6\x9c\x89\xe8\xbf\x94\xe5\x9b\x9e\xe5\x88\xb0\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe8\xbf\x98\xe6\xb2\xa1\xe6\x9c\x89\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe7\x94\xb1\xe4\xba\x8e\xe8\xae\xb0\xe5\xbd\x95\xe4\xba\x86end_int\xe4\xb8\xba\xe4\xbb\x8a\xe5\xa4\xa9\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\n            \xe5\x86\x8d\xe6\xac\xa1\xe5\x8f\x91\xe8\xb5\xb7\xe8\xaf\xb7\xe6\xb1\x82\xe6\x97\xb6\xe4\xb8\x8d\xe4\xbc\x9a\xe8\xb5\xb0\xe7\xbd\x91\xe7\xbb\x9c\xef\xbc\x8c\xe4\xbc\x9a\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        df_key = _kl_unique_key(temp_symbol, start_int, end_int)\n        dump_kline_df(df, temp_symbol.value, df_key)\n    return df\n'"
abupy/MarketBu/ABuDataCheck.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe7\x9b\x91\xe6\xb5\x8b\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\nimport logging\nimport math\n\nfrom ..UtilBu import ABuFileUtil\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EDataCacheType, EMarketTargetType, EMarketDataFetchMode\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter, partial\nfrom ..MarketBu.ABuMarket import is_in_sand_box\nfrom ..UtilBu.ABuOsUtil import show_msg\nfrom ..MarketBu.ABuSymbolPd import check_symbol_in_local_csv\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe5\x9f\xba\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x8f\x90\xe7\xa4\xba\xe6\xa1\x86\xe4\xbd\xbf\xe7\x94\xa8partial\xe5\x8c\x85\xe8\xa3\x85title\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x98\xbe\xe7\xa4\xbalog""""""\nshow_msg_toast_func = partial(show_msg, u\'\xe6\x8f\x90\xe7\xa4\xba\', log=True)\n\n\ndef browser_down_csv_zip(open_browser=False):\n    """"""\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8\xe6\x89\x93\xe5\xbc\x80\xe6\x95\x99\xe7\xa8\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84csv\xe6\x95\xb0\xe6\x8d\xae\xe7\x99\xbe\xe5\xba\xa6\xe4\xba\x91\xe5\x9c\xb0\xe5\x9d\x80""""""\n    try:\n        if open_browser:\n            import webbrowser\n            webbrowser.open(\'https://pan.baidu.com/s/1geNZgqf\', new=0, autoraise=True)\n            show_msg_toast_func(u\'\xe6\x8f\x90\xe5\x8f\x96\xe5\xaf\x86\xe7\xa0\x81: gvtr\')\n    except:\n        pass\n    finally:\n        logging.info(u\'\xe5\xbb\xba\xe8\xae\xae\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\x8e\xe7\x99\xbe\xe5\xba\xa6\xe4\xba\x91\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x95\x99\xe7\xa8\x8b\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84csv\xe6\xa0\xbc\xe5\xbc\x8f\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe5\xb8\x81\xe7\xb1\xbb\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa76\xe5\xb9\xb4\xe6\x97\xa5k\xe6\x95\xb0\xe6\x8d\xae: \')\n        logging.info(u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9c\xb0\xe5\x9d\x80: https://pan.baidu.com/s/1geNZgqf\')\n        logging.info(u\'\xe6\x8f\x90\xe5\x8f\x96\xe5\xaf\x86\xe7\xa0\x81: gvtr\')\n        logging.info(u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xe8\xa7\xa3\xe5\x8e\x8bzip\xe5\xbe\x97\xe5\x88\xb0\\\'csv\\\'\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\x88\xb0\\\'{}\\\'\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\'.format(ABuEnv.g_project_data_dir))\n\n\n# noinspection PyProtectedMember\ndef check_symbol_data_mode(choice_symbols):\n    """"""\xe5\x9c\xa8\xe8\x80\x83\xe8\x99\x91choice_symbols\xe4\xb8\xbaNone, \xe5\x8f\xaf\xe4\xbb\xa5\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\xb7\xa5\xe4\xbd\x9c\xe6\x97\xb6\xef\xbc\x8c\xe6\xa3\x80\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe6\x8f\x90\xe7\xa4\xba\xe4\xb8\x8b\xe8\xbd\xbdcsv\xe6\x95\xb0\xe6\x8d\xae\xe6\x88\x96\xe8\x80\x85\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c""""""\n    if ABuEnv._g_enable_example_env_ipython and choice_symbols is not None:\n        # \xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b and choice_symbols\xe4\xb8\x8d\xe6\x98\xafnone\n        not_in_sb_list = list(filter(lambda symbol: not is_in_sand_box(symbol), choice_symbols))\n        if len(not_in_sb_list) > 0:\n            logging.info(\n                u\'\xe5\xbd\x93\xe5\x89\x8d\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\\\'\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe6\x97\xa0{}\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n                u\'\xe8\xaf\xb7\xe5\x9c\xa8\\\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\xe5\x88\x87\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xb9\xb6\xe7\xa1\xae\xe8\xae\xa4\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x81\'\n                u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xbb\xba\xe8\xae\xae\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\'\n                u\'\xe4\xb9\x8b\xe5\x90\x8e\xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\\\'\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xef\xbc\x8c\xe8\x81\x94\xe7\xbd\x91\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\'.format(not_in_sb_list))\n            browser_down_csv_zip()\n            return False\n\n    is_stock_market = \\\n        ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN or \\\n        ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_US or \\\n        ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_HK\n\n    if is_stock_market and not ABuEnv._g_enable_example_env_ipython and choice_symbols is None:\n        # \xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe8\xa6\x81\xe5\x81\x9a\xe5\x85\xa8\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\n        if ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n            logging.info(\n                u\'\xe6\x9c\xaa\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\xbb\xe4\xbd\x95\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\x94\xe5\x9c\xa8\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\'\n                u\'\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe8\xaf\xb7\xe5\xb0\x86\xe8\x81\x94\xe7\xbd\x91\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xbf\xae\xe6\x94\xb9\xe4\xb8\xba\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\'\n                u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\')\n            browser_down_csv_zip()\n            return False\n        else:\n            if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_CSV:\n                # csv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\n                if not ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data_csv):\n                    # \xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\xb2\xa1\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\n                    logging.info(\n                        u\'\xe6\x9c\xaa\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\xbb\xe4\xbd\x95\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\x94\xe5\x9c\xa8\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\'\n                        u\'\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87, \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n                        u\'\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\'\n                        u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\')\n                    browser_down_csv_zip()\n                    return False\n                elif len(os.listdir(ABuEnv.g_project_kl_df_data_csv)) < 100:\n                    # \xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe8\xb6\xb3\n                    logging.info(\n                        u\'\xe6\x9c\xaa\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\xbb\xe4\xbd\x95\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\x94\xe5\x9c\xa8\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\'\n                        u\'\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87, \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe8\xb6\xb3\xef\xbc\x8c\'\n                        u\'\xe5\x8f\xaa\xe6\x9c\x89{}\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\xa1\xe6\x81\xaf\'\n                        u\'\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\'\n                        u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\'.format(\n                            len(os.listdir(ABuEnv.g_project_kl_df_data_csv))))\n                    browser_down_csv_zip()\n                    return False\n            elif ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5 \\\n                    and not ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data):\n                # hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\n                logging.info(\n                    u\'\xe6\x9c\xaa\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\xbb\xe4\xbd\x95\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\x94\xe5\x9c\xa8\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\'\n                    u\'\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87, \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\'\n                    u\'hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0hdf5\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n                    u\'\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\'\n                    u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\')\n                browser_down_csv_zip()\n                return False\n    return True\n\n\ndef check_symbol_data(choice_symbols):\n    """"""\xe5\x9c\xa8choice_symbols\xe4\xb8\x8d\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xbaNone, \xe4\xb8\x8d\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\xb7\xa5\xe4\xbd\x9c\xe6\x97\xb6\xef\xbc\x8c\xe6\xa3\x80\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe6\x8f\x90\xe7\xa4\xba\xe4\xb8\x8b\xe8\xbd\xbdcsv\xe6\x95\xb0\xe6\x8d\xae\xe6\x88\x96\xe8\x80\x85\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c""""""\n\n    # noinspection PyProtectedMember\n    if ABuEnv._g_enable_example_env_ipython and choice_symbols is not None:\n        # \xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b and choice_symbols\xe4\xb8\x8d\xe6\x98\xafnone\n        not_in_sb_list = list(filter(lambda symbol: not is_in_sand_box(symbol), choice_symbols))\n        if len(not_in_sb_list) > 0:\n            logging.info(\n                u\'\xe5\xbd\x93\xe5\x89\x8d\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\\\'\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe6\x97\xa0{}\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n                u\'\xe8\xaf\xb7\xe5\x9c\xa8\\\'\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\xe5\x88\x87\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xb9\xb6\xe7\xa1\xae\xe8\xae\xa4\xe6\x95\xb0\xe6\x8d\xae\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x81\'\n                u\'\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search\xe6\x9a\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x81\'\n                u\'\xe6\x89\x80\xe4\xbb\xa5\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\'.format(not_in_sb_list))\n            browser_down_csv_zip()\n            return False\n    else:\n        # \xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\n        if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_CSV:\n            # csv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaacsv\xe6\x95\xb0\xe6\x8d\xae\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\n            if not ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data_csv):\n                # \xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\xb2\xa1\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\n                logging.info(\n                    u\'\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search\xe6\x9a\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x81\'\n                    u\'\xe6\x89\x80\xe4\xbb\xa5\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\')\n                browser_down_csv_zip()\n                return False\n            elif len(os.listdir(ABuEnv.g_project_kl_df_data_csv)) < 100:\n                # \xe6\x9c\xaa\xe4\xb8\x8b\xe8\xbd\xbd\xe4\xba\x91\xe7\x9b\x98\xe4\xb8\x8a\xe7\x9a\x84csv\xe4\xb8\xba\xe5\x89\x8d\xe6\x8f\x90\xe6\x9d\xa1\xe4\xbb\xb6\n                not_in_local_csv = list(filter(lambda symbol:\n                                               not check_symbol_in_local_csv(symbol), choice_symbols))\n                # \xe9\x9c\x80\xe8\xa6\x81grid search\xe7\x9a\x84symbol\xe4\xb8\xad\xe6\x9c\x8930%\xe4\xbb\xa5\xe4\xb8\x8a\xe4\xb8\x8d\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xad\xe6\x8f\x90\xe7\xa4\xba\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x95\xb0\xe6\x8d\xae\n                if not_in_local_csv > math.ceil(len(choice_symbols) * 0.3):\n                    logging.info(\n                        u\'{}\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search\xe6\x9a\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x81\'\n                        u\'\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\'.format(not_in_local_csv))\n                    browser_down_csv_zip()\n                    return False\n\n        elif ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5 \\\n                and not ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data):\n            # hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\n            logging.info(\n                u\'\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search\xe6\x9a\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x81\'\n                u\'\xe6\x89\x80\xe4\xbb\xa5\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\')\n            browser_down_csv_zip()\n            return False\n    return True\n\n\ndef all_market_env_check():\n    """"""\xe7\xa1\xae\xe5\xae\x9a\xe8\xa6\x81\xe5\x81\x9a\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\xa3\x80\xe6\xb5\x8b\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6""""""\n    # noinspection PyProtectedMember\n    if ABuEnv._g_enable_example_env_ipython:\n        # \xe6\xb2\x99\xe7\x9b\x92\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe6\xa3\x80\xe6\xb5\x8b\n        return True\n\n    if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_CSV:\n        # csv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\n        if not ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data_csv):\n            # \xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\xb2\xa1\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\n            logging.info(\n                u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87, \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n                u\'\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\'\n                u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\')\n            browser_down_csv_zip()\n            return False\n        elif len(os.listdir(ABuEnv.g_project_kl_df_data_csv)) < 30:\n            # \xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xbd\x86\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe8\xb6\xb3, \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\x9630\n            logging.info(\n                u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87, \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\x8f\x91\xe7\x8e\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe8\xb6\xb3\xef\xbc\x8c\'\n                u\'\xe5\x8f\xaa\xe6\x9c\x89{}\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe5\x8e\x86\xe5\x8f\xb2\xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\xa1\xe6\x81\xaf\'\n                u\'\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\'\n                u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\'.format(\n                    len(os.listdir(ABuEnv.g_project_kl_df_data_csv))))\n            browser_down_csv_zip()\n            return False\n    elif ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5 \\\n            and not ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data):\n        # hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\n        logging.info(\n            u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe4\xb8\xba\xe4\xba\x86\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87, \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\'\n            u\'hdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0hdf5\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n            u\'\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\'\n            u\'\xe8\xaf\xb7\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x81\')\n        browser_down_csv_zip()\n        return False\n    return True\n'"
abupy/MarketBu/ABuDataFeed.py,2,"b'# coding=utf-8\n""""""\n    \xe5\x86\x85\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe7\xa4\xba\xe4\xbe\x8b\xe5\xae\x9e\xe7\x8e\xb0\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x9a\n\n    \xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\x8e\xa5\xe5\x8f\xa3\xe4\xbb\x85\xe4\xbe\x9b\xe5\xad\xa6\xe4\xb9\xa0\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9c\x80\xe5\x9f\xba\xe6\x9c\xac\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe8\xaf\xb7\xe8\xb4\xad\xe4\xb9\xb0\xe6\x95\xb0\xe6\x8d\xae\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport os\n\nimport random\nimport math\nimport sqlite3 as sqlite\n\nimport pandas as pd\n\nfrom ..CoreBu.ABuEnv import EMarketTargetType, EMarketSubType\nfrom ..CoreBu import ABuEnv\nfrom ..MarketBu import ABuNetWork\nfrom ..MarketBu.ABuDataBase import StockBaseMarket, SupportMixin, FuturesBaseMarket, TCBaseMarket\nfrom ..MarketBu.ABuDataParser import BDParser, TXParser, NTParser, SNUSParser\nfrom ..MarketBu.ABuDataParser import SNFuturesParser, SNFuturesGBParser, HBTCParser\nfrom ..UtilBu import ABuStrUtil, ABuDateUtil, ABuMd5\nfrom ..UtilBu.ABuDTUtil import catch_error\nfrom ..CoreBu.ABuDeprecated import AbuDeprecated\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange, range, filter\n\n""""""\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\xb7\xe6\xb1\x82\xef\xbc\x88\xe8\xbf\x9e\xe6\x8e\xa510\xe7\xa7\x92\xef\xbc\x8c\xe6\x8e\xa5\xe6\x94\xb660\xe7\xa7\x92\xef\xbc\x89\xe8\xb6\x85\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4""""""\nK_TIME_OUT = (10, 60)\n\n\ndef random_from_list(array):\n    """"""\xe4\xbb\x8e\xe5\x8f\x82\xe6\x95\xb0array\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0""""""\n    # \xe5\x9c\xa8array\xe9\x95\xbf\xe5\xba\xa6\xe7\x9f\xad\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe6\xaf\x94np.random.choice\xe6\x95\x88\xe7\x8e\x87\xe8\xa6\x81\xe9\xab\x98\n    return array[random.randrange(0, len(array))]\n\n\n@AbuDeprecated(\'only read old symbol db, miss update!!!\')\ndef query_symbol_sub_market(symbol):\n    path = TXApi.K_SYMBOLS_DB\n    conn = sqlite.connect(path)\n    cur = conn.cursor()\n    symbol = symbol.lower()\n    query = ""select {} from {} where {} like \\\'{}.%\\\'"".format(TXApi.K_DB_TABLE_SN, TXApi.K_DB_TABLE_NAME,\n                                                              TXApi.K_DB_TABLE_SN, symbol)\n    cur.execute(query)\n    results = cur.fetchall()\n    conn.close()\n    sub_market = \'\'\n    if results is not None and len(results) > 0:\n        try:\n            if results[0][0].find(\'.\') > 0:\n                sub_market = \'.\' + results[0][0].split(\'.\')[1].upper()\n        except:\n            logging.info(results)\n    return sub_market\n\n\n@catch_error(return_val=None, log=False)\ndef query_symbol_from_pinyin(pinyin):\n    """"""\xe9\x80\x9a\xe8\xbf\x87\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xaf\xb9symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2""""""\n    path = TXApi.K_SYMBOLS_DB\n    conn = sqlite.connect(path)\n    cur = conn.cursor()\n    pinyin = pinyin.lower()\n    query = ""select stockCode from {} where pinyin=\\\'{}\\\'"".format(TXApi.K_DB_TABLE_NAME, pinyin)\n    cur.execute(query)\n    results = cur.fetchall()\n    conn.close()\n    if len(results) > 0:\n        code = results[0][0]\n        # \xe6\x9f\xa5\xe8\xaf\xa2\xe5\x88\xb0\xe7\x9a\x84stcok code eg\xef\xbc\x9ash111111\xef\xbc\x8cusabcd.n\n        start = 2\n        end = len(code)\n        if \'.\' in code:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe7\xbe\x8e\xe8\x82\xa1\xe8\xa6\x81\xe6\x88\xaa\xe5\x8f\x96.\n            end = code.find(\'.\')\n        return code[start:end]\n\n\nclass BDApi(StockBaseMarket, SupportMixin):\n    """"""bd\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1""""""\n\n    K_NET_CONNECT_START = \'&start=\'\n    K_NET_DAY = \'http://gp.baidu.com:80/stocks/stockkline?from=android&os_ver=21&format=json&vv=3.3.0\' \\\n                \'&uid=&BDUSS=&cuid=%s&channel=default_channel&device=%s&logid=%s&actionid=%s&device_net_type\' \\\n                \'=wifi&period=day&stock_code=%s&fq_type=front\'\n\n    MINUTE_NET_5D = \'http://gp.baidu.com:80/stocks/stocktimelinefive?from=android&os_ver=21&format=json\' \\\n                    \'&vv=3.3&uid=&BDUSS=&cuid=%s&channel=default_channel&device=%s&logid=%s&actionid=%s\' \\\n                    \'&device_net_type=wifi&stock_code=%s&step=10\'\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(BDApi, self).__init__(symbol)\n        self._action_id = int(ABuDateUtil.time_seconds())\n        self._version2_log_cnt = 0\n        self.data_parser_cls = BDParser\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        self._version2_log_cnt += 1\n        log_id = self._action_id + self._version2_log_cnt * 66\n        cuid = ABuStrUtil.create_random_with_num_low(40)\n        device = random_from_list(StockBaseMarket.K_DEV_MODE_LIST)\n        url = BDApi.K_NET_DAY % (cuid, device, str(log_id), str(self._action_id), self._symbol.value)\n        # logging.info(url)\n        next_start = None\n        kl_df = None\n        if start:\n            # \xe9\x9c\x80\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97n_fold\n            days = ABuDateUtil.diff(start, ABuDateUtil.current_str_date(), check_order=False)\n            # \xe6\xaf\x8f\xe6\xac\xa1\xe8\xbf\x94\xe5\x9b\x9e300\xe6\x9d\xa1\xe6\x95\xb0\xe6\x8d\xae\n            n_folds = int(days / 300.0)\n\n        for _ in xrange(0, n_folds):\n            if next_start:\n                url = url + BDApi.K_NET_CONNECT_START + str(next_start)\n            # logging.info(url)\n            data = ABuNetWork.get(url=url, timeout=K_TIME_OUT)\n            temp_df = None\n            if data is not None:\n                temp_df = self.data_parser_cls(self._symbol, data.json()).df\n\n            if temp_df is not None:\n                next_start = int(temp_df.loc[temp_df.index[0], [\'date\']].values[0])\n            kl_df = temp_df if kl_df is None else pd.concat([temp_df, kl_df])\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe4\xbb\x8e\xe5\x89\x8d\xe5\x90\x91\xe5\x90\x8e\xe8\xaf\xb7\xe6\xb1\x82\xef\xbc\x8c\xe4\xb8\x94\xe4\xb8\x8e\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa0\xe5\x85\xb3\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x9c\xa8for\xe9\x87\x8c\xe9\x9d\xa2\xe4\xb8\xad\xe6\x96\xad\n            if kl_df is None:\n                return None\n\n            """"""\xe7\x94\xb1\xe4\xba\x8e\xe6\xaf\x8f\xe6\xac\xa1\xe6\x94\xbe\xe5\x9b\x9e300\xe6\x9d\xa1>1\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xb6\x85\xe5\x87\xba\xe6\x80\xbb\xe6\x95\xb0\xe5\xb0\xb1\xe4\xb8\x8d\xe5\x86\x8d\xe8\xaf\xb7\xe6\xb1\x82\xe4\xb8\x8b\xe4\xb8\x80\xe7\xbb\x84""""""\n            if kl_df.shape[0] > ABuEnv.g_market_trade_year * n_folds:\n                break\n\n        return StockBaseMarket._fix_kline_pd(kl_df, n_folds, start, end)\n\n    def minute(self, n_folds=5, *args, **kwargs):\n        self._version2_log_cnt += 1\n        cuid = ABuStrUtil.create_random_with_num_low(40)\n        log_id = self._action_id + self._version2_log_cnt * 66\n        device = random_from_list(StockBaseMarket.K_DEV_MODE_LIST)\n        url = BDApi.MINUTE_NET_5D % (cuid, device, str(log_id), str(self._action_id), self._symbol.value)\n\n        return ABuNetWork.get(url=url, timeout=K_TIME_OUT).json()\n\n\nclass TXApi(StockBaseMarket, SupportMixin):\n    """"""tx\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1""""""\n\n    K_NET_BASE = ""http://ifzq.gtimg.cn/appstock/app/%sfqkline/get?p=1&param=%s,day,,,%d,"" \\\n                 ""qfq&_appName=android&_dev=%s&_devId=%s&_mid=%s&_md5mid=%s&_appver=4.2.2&_ifChId=303&_screenW=%d"" \\\n                 ""&_screenH=%d&_osVer=%s&_uin=10000&_wxuin=20000&__random_suffix=%d""\n\n    K_NET_HK_MNY = \'http://proxy.finance.qq.com/ifzqgtimg/stock/corp/hkmoney/sumary?\' \\\n                   \'symbol=%s&type=sum&jianjie=1&_appName=android\' \\\n                   \'&_dev=%s&_devId=%s&_mid=%s&_md5mid=%s&_appver=5.5.0&_ifChId=277\' \\\n                   \'&_screenW=%d&_screenH=%d&_osVer=%s&_uin=10000&_wxuin=20000&_net=WIFI&__random_suffix=%d\'\n\n    K_DB_TABLE_NAME = ""values_table""\n    K_DB_TABLE_SN = ""stockCode""\n    p_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.path.pardir))\n    K_SYMBOLS_DB = os.path.join(p_dir, \'RomDataBu/symbols_db.db\')\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(TXApi, self).__init__(symbol)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\n        self.data_parser_cls = TXParser\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        cuid = ABuStrUtil.create_random_with_num_low(40)\n        cuid_md5 = ABuMd5.md5_from_binary(cuid)\n        random_suffix = ABuStrUtil.create_random_with_num(5)\n        dev_mod = random_from_list(StockBaseMarket.K_DEV_MODE_LIST)\n        os_ver = random_from_list(StockBaseMarket.K_OS_VERSION_LIST)\n        screen = random_from_list(StockBaseMarket.K_PHONE_SCREEN)\n\n        days = ABuEnv.g_market_trade_year * n_folds + 1\n        # start \xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xe6\x97\xb6\xe8\xae\xa1\xe7\xae\x97 \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\xa9\xe6\x95\xb0\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x82\xaf\xe5\xae\x9a\xe6\xaf\x94\xe9\xa2\x84\xe6\x9c\x9f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\x9a\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x90\x8c\xe4\xb8\x80\xe6\x97\xb6\xe9\x97\xb4\xe5\x86\x85\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\xe4\xb8\x80\xe5\xae\x9a\xe4\xb8\x8d\xe6\xaf\x94\xe5\xae\x9e\xe9\x99\x85\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\xe5\xa4\x9a\n        if start:\n            temp_end = ABuDateUtil.current_str_date()\n            days = ABuDateUtil.diff(start, temp_end, check_order=False)\n\n        sub_market = None\n        if self._symbol.market == EMarketTargetType.E_MARKET_TARGET_US:\n            # sub_market = self.query_symbol_sub_market(self._symbol.value)\n            market = self._symbol.market.value\n            if \'.\' in self._symbol.value:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x9c\x89.\xe4\xba\x86\xe8\xaf\xb4\xe6\x98\x8e\xe6\x98\xaf\xe5\xa4\xa7\xe7\x9b\x98\xef\xbc\x8c\xe5\xa4\xa7\xe7\x9b\x98\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aus.IXIC\n                sub_market = \'\'\n            else:\n                # \xe8\xbf\x99\xe9\x87\x8ctx\xe7\x9a\x84source\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81US_PINK, US_OTC, US_PREIPO\n                sub_market_map = {EMarketSubType.US_N.value: \'n\',\n\n                                  EMarketSubType.US_PINK.value: \'n\',\n                                  EMarketSubType.US_OTC.value: \'n\',\n                                  EMarketSubType.US_PREIPO.value: \'n\',\n                                  EMarketSubType.US_AMEX.value: \'n\',\n\n                                  EMarketSubType.US_OQ.value: \'oq\'}\n                sub_market = \'.{}\'.format(sub_market_map[self._symbol.sub_market.value])\n            url = TXApi.K_NET_BASE % (\n                market, self._symbol.value + sub_market, days,\n                dev_mod, cuid, cuid, cuid_md5, screen[0], screen[1], os_ver, int(random_suffix, 10))\n        elif self._symbol.market == EMarketTargetType.E_MARKET_TARGET_HK:\n            market = self._symbol.market.value\n            url = TXApi.K_NET_BASE % (\n                market, self._symbol.value, days,\n                dev_mod, cuid, cuid, cuid_md5, screen[0], screen[1], os_ver, int(random_suffix, 10))\n        else:\n            market = \'\'\n            url = TXApi.K_NET_BASE % (\n                market, self._symbol.value, days,\n                dev_mod, cuid, cuid, cuid_md5, screen[0], screen[1], os_ver, int(random_suffix, 10))\n\n        data = ABuNetWork.get(url, timeout=K_TIME_OUT)\n        if data is not None:\n            kl_pd = self.data_parser_cls(self._symbol, sub_market, data.json()).df\n        else:\n            return None\n\n        return StockBaseMarket._fix_kline_pd(kl_pd, n_folds, start, end)\n\n    def hkmoney(self):\n        """"""\xe6\xb8\xaf\xe8\x82\xa1\xe6\xa6\x82\xe8\xa6\x81\xe4\xbf\xa1\xe6\x81\xaf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        if self._symbol.market != EMarketTargetType.E_MARKET_TARGET_HK:\n            raise TypeError(\'hkmoney only support hk!!\')\n\n        cuid = ABuStrUtil.create_random_with_num_low(40)\n        cuid_md5 = ABuMd5.md5_from_binary(cuid)\n        random_suffix = ABuStrUtil.create_random_with_num(5)\n        dev_mod = random_from_list(StockBaseMarket.K_DEV_MODE_LIST)\n        os_ver = random_from_list(StockBaseMarket.K_OS_VERSION_LIST)\n        screen = random_from_list(StockBaseMarket.K_PHONE_SCREEN)\n\n        url = TXApi.K_NET_HK_MNY % (self._symbol.value, dev_mod, cuid, cuid, cuid_md5, screen[0], screen[1], os_ver,\n                                    int(random_suffix, 10))\n        return ABuNetWork.get(url, timeout=K_TIME_OUT)\n\n    def minute(self, n_fold=5, *args, **kwargs):\n        """"""\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        raise NotImplementedError(\'TXApi minute NotImplementedError!\')\n\n\nclass NTApi(StockBaseMarket, SupportMixin):\n    """"""nt\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1""""""\n\n    K_NET_BASE = ""http://img1.money.126.net/data/%s/kline/day/history/%d/%s.json""\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(NTApi, self).__init__(symbol)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\n        self.data_parser_cls = NTParser\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        kl_df = None\n        if start is None or end is None:\n            end_year = int(ABuDateUtil.current_str_date()[:4])\n            start_year = end_year - n_folds + 1\n        else:\n            start_year = int(start[:4])\n            end_year = int(end[:4])\n        req_year = list(range(start_year, end_year + 1))\n\n        if self._symbol.market == EMarketTargetType.E_MARKET_TARGET_US:\n            market = self._symbol.market.value\n            symbol = self._symbol.symbol_code.upper()\n            if self._symbol.is_us_index():\n                # ntes \xe9\x9c\x80\xe8\xa6\x81\xe5\x81\x9a\xe6\x98\xa0\xe5\xb0\x84\xe5\x8c\xb9\xe9\x85\x8d\xe5\xa4\xa7\xe7\x9b\x98symbol\n                index_dict = {\'.DJI\': \'DOWJONES\', \'.IXIC\': \'NASDAQ\', \'.INX\': \'SP500\'}\n                symbol = index_dict[symbol]\n        elif self._symbol.market == EMarketTargetType.E_MARKET_TARGET_HK:\n            market = self._symbol.market.value\n            symbol = self._symbol.symbol_code.upper()\n        elif self._symbol.market == EMarketTargetType.E_MARKET_TARGET_CN:\n            market = self._symbol.market.value\n            symbol = self._symbol.symbol_code\n            if self._symbol.is_sz_stock():\n                symbol = \'1{}\'.format(symbol)\n            else:\n                symbol = \'0{}\'.format(symbol)\n        else:\n            raise TypeError(\'NTApi dt support {}\'.format(self._symbol.market))\n\n        for year in req_year:\n            url = NTApi.K_NET_BASE % (market, year, symbol)\n            data = ABuNetWork.get(url=url, retry=1, timeout=K_TIME_OUT)\n            temp_df = None\n            if data is not None:\n                temp_df = self.data_parser_cls(self._symbol, data.json()).df\n            if temp_df is not None:\n                kl_df = temp_df if kl_df is None else kl_df.append(temp_df)\n        if kl_df is None:\n            return None\n        return StockBaseMarket._fix_kline_pd(kl_df, n_folds, start, end)\n\n    def minute(self, n_fold=5, *args, **kwargs):\n        """"""\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        raise NotImplementedError(\'NTApi minute NotImplementedError!\')\n\n\nclass SNUSApi(StockBaseMarket, SupportMixin):\n    """"""snus\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe7\xbe\x8e\xe8\x82\xa1""""""\n    K_NET_BASE = ""http://stock.finance.sina.com.cn/usstock/api/json_v2.php/US_MinKService.getDailyK?"" \\\n                 ""symbol=%s&___qn=3n""\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(SNUSApi, self).__init__(symbol)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\n        self.data_parser_cls = SNUSParser\n\n    def _support_market(self):\n        """"""\xe5\xa3\xb0\xe6\x98\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x94\xaf\xe6\x8c\x81\xe7\xbe\x8e\xe8\x82\xa1""""""\n        return [EMarketTargetType.E_MARKET_TARGET_US]\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        url = SNUSApi.K_NET_BASE % self._symbol.symbol_code\n        data = ABuNetWork.get(url=url, timeout=K_TIME_OUT).json()\n        kl_df = self.data_parser_cls(self._symbol, data).df\n        if kl_df is None:\n            return None\n        return StockBaseMarket._fix_kline_pd(kl_df, n_folds, start, end)\n\n    def minute(self, n_fold=5, *args, **kwargs):\n        """"""\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        raise NotImplementedError(\'SNUSApi minute NotImplementedError!\')\n\n\nclass SNFuturesApi(FuturesBaseMarket, SupportMixin):\n    """"""sn futures\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7""""""\n\n    K_NET_BASE = ""http://stock.finance.sina.com.cn/futures/api/json_v2.php/"" \\\n                 ""IndexService.getInnerFuturesDailyKLine?symbol=%s""\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(SNFuturesApi, self).__init__(symbol)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\n        self.data_parser_cls = SNFuturesParser\n\n    def _support_market(self):\n        """"""\xe5\xa3\xb0\xe6\x98\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae""""""\n        return [EMarketTargetType.E_MARKET_TARGET_FUTURES_CN]\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        url = SNFuturesApi.K_NET_BASE % self._symbol.symbol_code\n        data = ABuNetWork.get(url=url, timeout=K_TIME_OUT).json()\n        kl_df = self.data_parser_cls(self._symbol, data).df\n        if kl_df is None:\n            return None\n        return FuturesBaseMarket._fix_kline_pd(kl_df, n_folds, start, end)\n\n\nclass SNFuturesGBApi(FuturesBaseMarket, SupportMixin):\n    """"""sn futures\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7""""""\n\n    K_NET_BASE = ""http://stock2.finance.sina.com.cn/futures/api/jsonp.php/"" \\\n                 ""var %s%s=/GlobalFuturesService.getGlobalFuturesDailyKLine?symbol=%s&_=%s""\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(SNFuturesGBApi, self).__init__(symbol)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\n        self.data_parser_cls = SNFuturesGBParser\n\n    def _support_market(self):\n        """"""\xe5\xa3\xb0\xe6\x98\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x94\xaf\xe6\x8c\x81\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae, \xe6\x94\xaf\xe6\x8c\x81\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba""""""\n        return [EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL]\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        today = ABuDateUtil.current_str_date().replace(\'-\', \'_\')\n        url = SNFuturesGBApi.K_NET_BASE % (self._symbol.symbol_code, today, self._symbol.symbol_code, today)\n        data = ABuNetWork.get(url=url, timeout=(10, 60))\n        text = data.text\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xafJavascript\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xa7\xa3\xe6\x9e\x90\xe5\x87\xbadict\n        js_dict = ABuNetWork.parse_js(text[text.find(\'=(\') + 2:text.rfind(\')\')])\n        kl_df = self.data_parser_cls(self._symbol, js_dict).df\n        if kl_df is None:\n            return None\n        return FuturesBaseMarket._fix_kline_pd(kl_df, n_folds, start, end)\n\n\nclass HBApi(TCBaseMarket, SupportMixin):\n    """"""hb\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe5\xb8\x81\xe7\xb1\xbb\xef\xbc\x8c\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81""""""\n\n    K_NET_BASE = \'https://www.huobi.com/qt/staticmarket/%s_kline_100_json.js?length=%d\'\n\n    def __init__(self, symbol):\n        """"""\n        :param symbol: Symbol\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        super(HBApi, self).__init__(symbol)\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\n        self.data_parser_cls = HBTCParser\n\n    def _support_market(self):\n        """"""\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba""""""\n        return [EMarketTargetType.E_MARKET_TARGET_TC]\n\n    def kline(self, n_folds=2, start=None, end=None):\n        """"""\xe6\x97\xa5k\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        req_cnt = n_folds * ABuEnv.g_market_trade_year\n        if start is not None and end is not None:\n            # \xe5\x90\x91\xe4\xb8\x8a\xe5\x8f\x96\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\x8b\xe9\x9d\xa2\xe4\xbd\xbf\xe7\x94\xa8_fix_kline_pd\xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x89\xaa\xe8\xa3\x81, \xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8current_str_date\xe4\xb8\x8d\xe8\x83\xbd\xe6\x98\xafend\n            folds = math.ceil(ABuDateUtil.diff(ABuDateUtil.date_str_to_int(start),\n                                               ABuDateUtil.current_str_date()) / 365)\n            req_cnt = folds * ABuEnv.g_market_trade_year\n\n        url = HBApi.K_NET_BASE % (self._symbol.symbol_code, req_cnt)\n        data = ABuNetWork.get(url=url, timeout=K_TIME_OUT).json()\n        kl_df = self.data_parser_cls(self._symbol, data).df\n        if kl_df is None:\n            return None\n        return TCBaseMarket._fix_kline_pd(kl_df, n_folds, start, end)\n\n    def minute(self, *args, **kwargs):\n        """"""\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        raise NotImplementedError(\'HBApi minute NotImplementedError!\')\n'"
abupy/MarketBu/ABuDataParser.py,4,"b'# coding=utf-8\n""""""\n    \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe6\xa8\xa1\xe5\x9d\x97\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xa4\xba\xe4\xbe\x8b\xe5\x86\x85\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe7\x9a\x84\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\n\nimport numpy as np\nimport pandas as pd\n\nfrom .ABuSymbol import EMarketTargetType\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu import ABuDateUtil\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef del_columns(df, columns):\n    """"""\n    \xe4\xbb\x8edf\xe4\xb8\xad\xe5\x88\xa0\xe9\x99\xa4\xe5\x8f\x82\xe6\x95\xb0columns\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe6\x95\xb4\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n    :param df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe5\x89\xb2pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param columns: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84\xe6\x8c\x87\xe5\xae\x9a\xe5\x88\x97\n    :return:\n    """"""\n    old_c = df.columns.tolist()\n    for col in filter(lambda x: x in old_c, columns):\n        df.drop(col, axis=1, inplace=True)\n\n\nclass AbuDataParseWrap(object):\n    """"""\n        \xe5\x81\x9a\xe4\xb8\xba\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xb0\x81\xe8\xa3\x85\xe6\x9b\xbf\xe6\x8d\xa2\xe8\xa7\xa3\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x9f\xe4\xb8\x80\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xa3\x85\xe9\xa5\xb0\xe6\x9b\xbf\xe6\x8d\xa2init\n    """"""\n\n    def __call__(self, cls):\n        """"""\xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xba\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe5\xb0\x81\xe8\xa3\x85\xe9\x80\x9a\xe7\x94\xa8\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xa7\xa3\xe6\x9e\x90\xe8\xa7\x84\xe8\x8c\x83\xe5\x8f\x8a\xe6\xb5\x81\xe7\xa8\x8b""""""\n        if isinstance(cls, six.class_types):\n            # \xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xba\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\n            init = cls.__init__\n\n            def wrapped(*args, **kwargs):\n                try:\n                    # \xe6\x8b\xbf\xe5\x87\xba\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84self\xe5\xaf\xb9\xe8\xb1\xa1\n                    warp_self = args[0]\n                    warp_self.df = None\n                    # \xe8\xb0\x83\xe7\x94\xa8\xe5\x8e\x9f\xe5\xa7\x8binit\n                    init(*args, **kwargs)\n                    symbol = args[1]\n                    # \xe5\xbc\x80\xe5\xa7\x8b\xe6\x95\xb0\xe6\x8d\xae\xe8\xa7\xa3\xe6\x9e\x90\n                    self._gen_warp_df(warp_self, symbol)\n                except Exception as e:\n                    logging.exception(e)\n\n            # \xe4\xbd\xbf\xe7\x94\xa8wrapped\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x8e\x9f\xe5\xa7\x8binit\n            cls.__init__ = wrapped\n\n            wrapped.__name__ = \'__init__\'\n            # \xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9a\x84init\xe8\xb5\x8b\xe4\xba\x88deprecated_original\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\xb1\x9e\xe6\x80\xa7\xe5\x90\x8d\xe5\xad\x97\xef\xbc\x8c\xe5\x9c\xa8\xe5\x85\xb6\xe5\xae\x83\xe5\x9c\xb0\xe6\x96\xb9\xef\xbc\x8c\xe5\xa6\x82AbuParamBase\xe4\xbc\x9a\xe5\xaf\xbb\xe6\x89\xbe\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x96\xb9\xe6\xb3\x95\xe6\x89\xbe\xe5\xae\x83\n            wrapped.deprecated_original = init\n            return cls\n        else:\n            raise TypeError(\'AbuDataParseWrap just for class warp\')\n\n    # noinspection PyMethodMayBeStatic\n    def _gen_warp_df(self, warp_self, symbol):\n        """"""\n        \xe5\xb0\x81\xe8\xa3\x85\xe9\x80\x9a\xe7\x94\xa8\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xa7\xa3\xe6\x9e\x90\xe8\xa7\x84\xe8\x8c\x83\xe5\x8f\x8a\xe6\xb5\x81\xe7\xa8\x8b\n        :param warp_self: \xe8\xa2\xab\xe5\xb0\x81\xe8\xa3\x85\xe7\xb1\xbbinit\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84self\xe5\xaf\xb9\xe8\xb1\xa1\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :return:\n        """"""\n\n        # \xe8\xa7\x84\xe8\x8c\x83\xe5\x8e\x9f\xe5\xa7\x8binit\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xba\xe7\xb1\xbb\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe5\xa6\x82\xe4\xb8\x8b\xe5\xb1\x9e\xe6\x80\xa7\n        must_col = [\'open\', \'close\', \'high\', \'low\', \'volume\', \'date\']\n        # \xe6\xa3\x80\xe6\xb5\x8b\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe9\x83\xbd\xe6\x9c\x89\n        all_has = all([hasattr(warp_self, col) for col in must_col])\n        # raise RuntimeError(\'df.columns must have |date|open|close|high|volume| \')\n        if all_has:\n            # \xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd\xe6\x97\xb6\xe9\x97\xb4\n            dates_pd = pd.to_datetime(warp_self.date)\n            # \xe6\x9e\x84\xe5\xbb\xbadf\xef\xbc\x8cindex\xe4\xbd\xbf\xe7\x94\xa8dates_pd\n            warp_self.df = pd.DataFrame(index=dates_pd)\n            for col in must_col:\n                # \xe6\x89\x80\xe4\xbb\xa5\xe5\xbf\x85\xe9\xa1\xbb\xe6\x9c\x89\xe7\x9a\x84\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\xe8\xae\xbe\xe7\xbd\xae\xe7\xbb\x99df\xe7\x9a\x84\xe5\x88\x97\n                warp_self.df[col] = getattr(warp_self, col)\n\n            # \xe4\xbb\x8e\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97shift\xe5\x87\xba\xe6\x98\xa8\xe6\x94\xb6\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            warp_self.df[\'pre_close\'] = warp_self.df[\'close\'].shift(1)\n            warp_self.df[\'pre_close\'].fillna(warp_self.df[\'open\'], axis=0, inplace=True)\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe6\x97\xa5\xe6\x9c\x9fint\xe5\x88\x97\n            warp_self.df[\'date\'] = warp_self.df[\'date\'].apply(lambda x: ABuDateUtil.date_str_to_int(str(x)))\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x91\xa8\xe5\x87\xa0\xe5\x88\x97date_week\xef\xbc\x8c\xe5\x80\xbc\xe4\xb8\xba0-4\xef\xbc\x8c\xe5\x88\x86\xe5\x88\xab\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x91\xa8\xe4\xb8\x80\xe5\x88\xb0\xe5\x91\xa8\xe4\xba\x94\n            warp_self.df[\'date_week\'] = warp_self.df[\'date\'].apply(\n                lambda x: ABuDateUtil.week_of_date(str(x), \'%Y%m%d\'))\n\n            # \xe7\xb1\xbb\xe5\x9e\x8b\xe8\xbd\xac\xe6\x8d\xa2\n            warp_self.df[\'close\'] = warp_self.df[\'close\'].astype(float)\n            warp_self.df[\'high\'] = warp_self.df[\'high\'].astype(float)\n            warp_self.df[\'low\'] = warp_self.df[\'low\'].astype(float)\n            warp_self.df[\'open\'] = warp_self.df[\'open\'].astype(float)\n            warp_self.df[\'volume\'] = warp_self.df[\'volume\'].astype(float)\n            warp_self.df[\'volume\'] = warp_self.df[\'volume\'].astype(np.int64)\n            warp_self.df[\'date\'] = warp_self.df[\'date\'].astype(int)\n            warp_self.df[\'pre_close\'] = warp_self.df[\'pre_close\'].astype(float)\n            # \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8df[\'close\'].pct_change\xe8\xae\xa1\xe7\xae\x97\n            # noinspection PyTypeChecker\n            warp_self.df[\'p_change\'] = np.where(warp_self.df[\'pre_close\'] == 0, 0,\n                                                (warp_self.df[\'close\'] - warp_self.df[\'pre_close\']) / warp_self.df[\n                                                    \'pre_close\'] * 100)\n\n            warp_self.df[\'p_change\'] = warp_self.df[\'p_change\'].apply(lambda x: round(x, 3))\n            # \xe7\xbb\x99df\xe5\x8a\xa0\xe4\xb8\x8aname\n            warp_self.df.name = symbol\n\n\n@AbuDataParseWrap()\nclass TXParser(object):\n    """"""tx\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0""""""\n\n    def __init__(self, symbol, sub_market, json_dict):\n        """"""\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param sub_market: \xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xef\xbc\x89\xe7\xb1\xbb\xe5\x9e\x8b\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        if json_dict[\'code\'] == 0:\n            if symbol.market == EMarketTargetType.E_MARKET_TARGET_US:\n                data = json_dict[\'data\'][symbol.value + sub_market]\n            else:\n                data = json_dict[\'data\'][symbol.value]\n\n            if \'qfqday\' in data.keys():\n                data = data[\'qfqday\']\n            else:\n                data = data[\'day\']\n\n            # \xe4\xb8\xbaAbuDataParseWrap\xe5\x87\x86\xe5\xa4\x87\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\n            if len(data) > 0:\n                # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\xbc\xe5\xbc\x8f\xe4\xb8\xba2017-07-26\xe6\xa0\xbc\xe5\xbc\x8f\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n                self.date = [item[0] for item in data]\n                # \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n                self.open = [item[1] for item in data]\n                # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n                self.close = [item[2] for item in data]\n                # \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n                self.high = [item[3] for item in data]\n                # \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n                self.low = [item[4] for item in data]\n                # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\n                self.volume = [item[5] for item in data]\n\n\n@AbuDataParseWrap()\nclass NTParser(object):\n    """"""nt\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0""""""\n\n    # noinspection PyUnusedLocal\n    def __init__(self, symbol, json_dict):\n        """"""\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        data = json_dict[\'data\']\n        # \xe4\xb8\xbaAbuDataParseWrap\xe5\x87\x86\xe5\xa4\x87\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\n        if len(data) > 0:\n            # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            self.date = [item[0] for item in data]\n            # \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.open = [item[1] for item in data]\n            # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.close = [item[2] for item in data]\n            # \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.high = [item[3] for item in data]\n            # \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.low = [item[4] for item in data]\n            # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\n            self.volume = [item[5] for item in data]\n\n\n@AbuDataParseWrap()\nclass SNUSParser(object):\n    """"""snus\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0""""""\n\n    # noinspection PyUnusedLocal\n    def __init__(self, symbol, json_dict):\n        """"""\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        data = json_dict\n        # \xe4\xb8\xbaAbuDataParseWrap\xe5\x87\x86\xe5\xa4\x87\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\n        if len(data) > 0:\n            # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            self.date = [item[\'d\'] for item in data]\n            # \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.open = [item[\'o\'] for item in data]\n            # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.close = [item[\'c\'] for item in data]\n            # \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.high = [item[\'h\'] for item in data]\n            # \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.low = [item[\'l\'] for item in data]\n            # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\n            self.volume = [item[\'v\'] for item in data]\n\n\n@AbuDataParseWrap()\nclass SNFuturesParser(object):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0""""""\n\n    # noinspection PyUnusedLocal\n    def __init__(self, symbol, json_dict):\n        """"""\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        data = json_dict\n        # \xe4\xb8\xbaAbuDataParseWrap\xe5\x87\x86\xe5\xa4\x87\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\n        if len(data) > 0:\n            # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            self.date = [item[0] for item in data]\n            # \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.open = [item[1] for item in data]\n            # \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.high = [item[2] for item in data]\n            # \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.low = [item[3] for item in data]\n            # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.close = [item[4] for item in data]\n            # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\n            self.volume = [item[5] for item in data]\n\n\n@AbuDataParseWrap()\nclass SNFuturesGBParser(object):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0""""""\n    # noinspection PyUnusedLocal\n    def __init__(self, symbol, json_dict):\n        """"""\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x88\x96\xe8\x80\x85dict\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        data = json_dict\n        # \xe4\xb8\xbaAbuDataParseWrap\xe5\x87\x86\xe5\xa4\x87\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\n        if len(data) > 0:\n            # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            self.date = [item[\'date\'] for item in data]\n            # \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.open = [item[\'open\'] for item in data]\n            # \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.high = [item[\'high\'] for item in data]\n            # \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.low = [item[\'low\'] for item in data]\n            # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.close = [item[\'close\'] for item in data]\n            # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\n            self.volume = [item[\'volume\'] for item in data]\n\n\n@AbuDataParseWrap()\nclass HBTCParser(object):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0""""""\n\n    # noinspection PyUnusedLocal\n    def __init__(self, symbol, json_dict):\n        """"""\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n\n        data = json_dict\n        # \xe4\xb8\xbaAbuDataParseWrap\xe5\x87\x86\xe5\xa4\x87\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\xb1\x9e\xe6\x80\xa7\xe5\xba\x8f\xe5\x88\x97\n        if len(data) > 0:\n            # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xba\x8f\xe5\x88\x97\n            self.date = [item[0] for item in data]\n            # \xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.open = [item[1] for item in data]\n            # \xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.high = [item[2] for item in data]\n            # \xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.low = [item[3] for item in data]\n            # \xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            self.close = [item[4] for item in data]\n            # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\n            self.volume = [item[5] for item in data]\n\n            # \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbd\xac\xe5\x8c\x96\xef\xbc\x8c\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\xa6\x822017-07-26\xe6\xa0\xbc\xe5\xbc\x8f\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n            self.date = list(map(lambda date: ABuDateUtil.fmt_date(date), self.date))\n\n\nclass BDParser(object):\n    """"""bd\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb""""""\n\n    data_keys = [\'data\', \'dataMash\']\n    s_calc_dm = True\n\n    def __init__(self, symbol, json_dict):\n        """"""\n        \xe6\xb2\xa1\xe6\x9c\x89\xe4\xbd\xbf\xe7\x94\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9a\x84\xe8\xa7\xa3\xe6\x9e\x90\xe6\xb5\x81\xe7\xa8\x8b\xe7\xb1\xbb\xef\xbc\x8c\n        \xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe8\xa7\xa3\xe6\x9e\x90\xe7\xb1\xbb\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8AbuDataParseWrap\xe8\xa3\x85\xe9\xa5\xb0\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa7\xa3\xe6\x9e\x90\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\x8d\xe5\x81\x9a\xe5\xa4\x9a\xe6\xb3\xa8\xe8\xa7\xa3\xef\xbc\x8c\n        \xe8\xaf\xa6\xe9\x98\x85\xe8\xaf\xbbAbuDataParseWrap\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\n        :param symbol: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param json_dict: \xe8\xaf\xb7\xe6\xb1\x82\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84json\xe6\x95\xb0\xe6\x8d\xae\n        """"""\n        try:\n            if BDParser.data_keys[0] in json_dict.keys():\n                self.data = json_dict[BDParser.data_keys[0]][::-1]\n            elif BDParser.data_keys[1] in json_dict.keys():\n                self.data = json_dict[BDParser.data_keys[1]][::-1]\n            else:\n                raise ValueError(\'content not json format\')\n\n            dates = [mash[\'date\'] for mash in self.data]\n            klines = [mash[\'kline\'] for mash in self.data]\n\n            self.df = None\n            if len(klines) > 0 and len(dates) > 0:\n                dates_fmt = list(map(lambda date: ABuDateUtil.fmt_date(date), dates))\n                dates_pd = pd.to_datetime(dates_fmt)\n\n                self.df = pd.DataFrame(klines, index=dates_pd)\n                self.df[\'date\'] = dates\n                self.df[\'date_week\'] = self.df[\'date\'].apply(lambda x: ABuDateUtil.week_of_date(str(x), \'%Y%m%d\'))\n\n                self.df[\'close\'] = self.df[\'close\'].astype(float)\n                self.df[\'high\'] = self.df[\'high\'].astype(float)\n                self.df[\'low\'] = self.df[\'low\'].astype(float)\n                self.df[\'open\'] = self.df[\'open\'].astype(float)\n                self.df[\'volume\'] = self.df[\'volume\'].astype(np.int64)\n                self.df[\'date\'] = self.df[\'date\'].astype(int)\n                self.df[\'netChangeRatio\'] = self.df[\'netChangeRatio\'].map(lambda x: x[:-1]).astype(float)\n                self.df[\'preClose\'] = self.df[\'preClose\'].astype(float)\n                self.df.rename(columns={\'preClose\': \'pre_close\', \'netChangeRatio\': \'p_change\'}, inplace=True)\n                del_columns(self.df, [\'amount\'])\n                if BDParser.s_calc_dm:\n                    self.df[\'pre_close\'] = self.df[\'close\'].shift(1)\n                    self.df[\'pre_close\'].fillna(self.df[\'open\'], axis=0, inplace=True)\n                    # \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8df[\'close\'].pct_change\xe8\xae\xa1\xe7\xae\x97\n                    # noinspection PyTypeChecker\n                    self.df[\'p_change\'] = np.where(self.df[\'pre_close\'] == 0, 0,\n                                                   (self.df[\'close\'] - self.df[\'pre_close\']) / self.df[\n                                                       \'pre_close\'] * 100)\n                    self.df[\'p_change\'] = self.df[\'p_change\'].apply(lambda x: round(x, 3))\n\n                self.df.name = symbol\n\n        except Exception as e:\n            logging.exception(e)\n'"
abupy/MarketBu/ABuDataSource.py,1,"b'# coding=utf-8\n""""""\n    \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\n\nimport numpy as np\n\nfrom ..MarketBu.ABuDataBase import BaseMarket\nfrom ..MarketBu.ABuDataFeed import BDApi, TXApi, NTApi, HBApi, SNUSApi, SNFuturesApi, SNFuturesGBApi\nfrom .ABuSymbol import Symbol\nfrom .ABuSymbol import code_to_symbol\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode, EMarketDataFetchMode\nfrom ..CoreBu.ABuEnv import EMarketSourceType\nfrom ..MarketBu.ABuDataCache import load_kline_df, load_kline_df_net\nfrom ..UtilBu import ABuDateUtil\n\ntry:\n    from tables import HDF5ExtError\nexcept ImportError:\n    class HDF5ExtError(RuntimeError):\n        """"""\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89HDF5\xe7\x8e\xaf\xe5\xa2\x83\xe5\x8f\xaa\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe5\xae\x83\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f""""""\n        pass\n\n\n""""""\xe5\x86\x85\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90source_dict""""""\nsource_dict = {EMarketSourceType.E_MARKET_SOURCE_bd.value: BDApi,\n               EMarketSourceType.E_MARKET_SOURCE_tx.value: TXApi,\n               EMarketSourceType.E_MARKET_SOURCE_nt.value: NTApi,\n               EMarketSourceType.E_MARKET_SOURCE_sn_us.value: SNUSApi,\n               EMarketSourceType.E_MARKET_SOURCE_sn_futures.value: SNFuturesApi,\n               EMarketSourceType.E_MARKET_SOURCE_sn_futures_gb.value: SNFuturesGBApi,\n               EMarketSourceType.E_MARKET_SOURCE_hb_tc.value: HBApi}\n\n\ndef _calc_start_end_date(df, force_local, n_folds, start, end):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97start\xef\xbc\x8cend\n    :param df: \xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param force_local: \xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\n    :param n_folds: \xe9\x9c\x80\xe8\xa6\x81\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n    :param start: \xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\n    :param end: \xe7\xbb\x93\xe6\x9d\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\n    :return:\n    """"""\n\n    # \xe5\xbd\x93\xe5\x89\x8d\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n    today = ABuDateUtil.timestamp_to_str(df.index[-1]) if force_local else ABuDateUtil.current_str_date()\n    if end is None:\n        # \xe6\xb2\xa1\xe6\x9c\x89end\xe4\xb9\x9f\xe6\xb2\xa1start\xef\xbc\x8cend\xef\xbc\x9dtoday\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8n_folds\xe8\xae\xa1\xe7\xae\x97end\n        end = today if start is None else ABuDateUtil.begin_date(-365 * n_folds, date_str=start, fix=False)\n    # int\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84end, today\xe8\xbd\xac\xe6\x8d\xa2\n    end_int = ABuDateUtil.date_str_to_int(end)\n    today_int = ABuDateUtil.date_str_to_int(today)\n    if end_int > today_int:\n        end_int = today_int\n\n    if start is None:\n        if force_local:\n            end_ss = df[df.date >= end_int]\n            if end_ss is None or end_ss.empty:\n                ind = 0\n            else:\n                # +1\xe8\xa1\xa5\xe4\xb8\x8a\n                ind = end_ss.key.values[0] - (ABuEnv.g_market_trade_year * n_folds) + 1\n            if ind < 0:\n                ind = 0\n            # \xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xbb\x8e\xe7\xac\xac\xe5\x87\xa0\xe4\xb8\xaaind\xe5\xbc\x80\xe5\xa7\x8b\xe5\x8f\x96df\xe6\x95\xb0\xe6\x8d\xae\n            start = ABuDateUtil.timestamp_to_str(df.index[ind])\n        else:\n            # \xe9\x9d\x9e\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8n_folds\xe5\xb9\xb4\xe6\x95\xb0\xef\xbc\x8c\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8\xe8\xae\xa1\xe7\xae\x97start\n            start = ABuDateUtil.begin_date(365 * n_folds, date_str=end, fix=False)\n    start_int = ABuDateUtil.date_str_to_int(start)\n\n    df_end_int = 0\n    # \xe7\xbb\x99\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84start_int >= df_start_int\n    df_start_int = np.inf\n\n    if df is not None and df.shape[0] > 0:\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98df\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xef\xbc\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbb\xa5\xe5\x8f\x8aint\xe5\x80\xbc\n        try:\n            df_end = ABuDateUtil.timestamp_to_str(df.index[-1])\n            df_end_int = ABuDateUtil.date_str_to_int(df_end)\n\n            df_start = ABuDateUtil.timestamp_to_str(df.index[0])\n            df_start_int = ABuDateUtil.date_str_to_int(df_start)\n        except Exception as e:\n            logging.exception(e)\n\n    return end, end_int, df_end_int, start, start_int, df_start_int\n\n\ndef kline_pd(symbol, data_mode, n_folds=2, start=None, end=None, save=True):\n    """"""\n    \xe7\xbb\x9f\xe4\xb8\x80\xe8\xb0\x83\xe5\xba\xa6\xe9\x80\x89\xe6\x8b\xa9\xe5\x86\x85\xe9\x83\xa8\xe6\x88\x96\xe8\x80\x85\xe5\xa4\x96\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe5\x86\xb3\xe7\xad\x96\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb8\x8d\n    \xe5\x90\x8c\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe8\xb0\x83\xe6\x95\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe9\x80\x89\xe6\x8b\xa9\xe8\x8c\x83\xe5\x9b\xb4\n\n    eg: n_fold=2, start=None, end=None \xef\xbc\x8c\xe4\xbb\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe8\xb5\xb7\xe5\xbe\x80\xe5\x89\x8d\xe6\x95\xb0\xe4\xb8\xa4\xe5\xb9\xb4\n        n_fold=2, start=\'2015-02-14\', end=None\xef\xbc\x8c \xe4\xbb\x8e2015-02-14\xe5\x88\xb0\xe7\x8e\xb0\xe5\x9c\xa8\xef\xbc\x8cn_fold\xe6\x97\xa0\xe6\x95\x88\n        n_fold=2, start=None, end=\'2016-02-14\'\xef\xbc\x8c\xe4\xbb\x8e2016-02-14\xe8\xb5\xb7\xe5\xbe\x80\xe5\x89\x8d\xe6\x95\xb0\xe4\xb8\xa4\xe5\xb9\xb4\n        n_fold=2, start=\'2015-02-14\', end=\'2016-02-14\'\xef\xbc\x8c\xe4\xbb\x8estart\xe5\x88\xb0end\n\n    :param data_mode: EMarketDataSplitMode enum\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: string or Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n                   e.g. \'sz300104\'\n                   e.g. Symbol(MType.SZ, \'300104\')\n    :param n_folds: \xe5\xb9\xb4, \xe5\xa6\x82\xe6\x9e\x9cstart\xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\x88\x99n_fold\xe5\xa4\xb1\xe6\x95\x88\n    :param start: \xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4 start\xe4\xb8\xbaNone\xe6\x97\xb6\xef\xbc\x8cstart\xe4\xbc\x9a\xe6\xa0\xb9\xe6\x8d\xaeend\xe5\x92\x8cn_fold\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param save: \xe4\xbb\x8e\xe7\xbd\x91\xe7\xbb\x9c\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x90\x8e\xe6\x98\xaf\xe5\x90\xa6\xe7\xbc\x93\xe5\xad\x98\xe5\x88\xb0\xe6\x9c\xac\xe5\x9c\xb0\n    """"""\n    try:\n        if isinstance(symbol, Symbol):\n            temp_symbol = symbol\n        elif isinstance(symbol, six.string_types):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87code_to_symbol\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1\n            temp_symbol = code_to_symbol(symbol)\n        else:\n            raise TypeError(\'symbol must like as ""usTSLA"" or ""TSLA"" or Symbol(MType.US, ""TSLA"")\')\n        if ABuEnv.g_private_data_source is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe7\xa7\x81\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\x86\x85\xe7\xbd\xae\xe7\xa4\xba\xe4\xbe\x8b\xe6\xb5\x8b\xe8\xaf\x95\xe6\xba\x90\n            source = source_dict[ABuEnv.g_market_source.value]\n        else:\n            # \xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe7\xa7\x81\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\n            source = ABuEnv.g_private_data_source\n            # \xe7\xa7\x81\xe6\x9c\x89\xe6\xba\x90\xe9\xa6\x96\xe5\x85\x88\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xafclass\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xafBaseMarket\xe7\x9a\x84\xe5\xad\x90\xe7\xb1\xbb\n            if not isinstance(source, six.class_types):\n                raise TypeError(\'g_private_data_source must be a class type!!!\')\n            if not issubclass(ABuEnv.g_private_data_source, BaseMarket):\n                raise TypeError(\'g_private_data_source must be a subclass of BaseMarket!!!\')\n        temp_symbol.source = source\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x83\xa8\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81save_kl_key\xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\n        save_kl_key = (temp_symbol, None, None)\n\n        # symbol\xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84pd.DataFrame\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x93\xe5\xad\x98\n        df = None\n        # \xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84pd.DataFrame\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f int\xe7\xb1\xbb\xe5\x9e\x8b\n        df_req_start = 0\n        # \xe6\x9c\xac\xe5\x9c\xb0\xe7\x9a\x84pd.DataFrame\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f int\xe7\xb1\xbb\xe5\x9e\x8b\n        df_req_end = 0\n\n        if ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET:\n            # \xe5\xa6\x82\xe6\x9e\x9cenv\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe5\xb9\xb6\xe9\x9d\x9e\xe5\xbc\xba\xe5\x88\xb6\xe4\xbb\x8e\xe7\xbd\x91\xe7\xbb\x9c\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xb0\xb1\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe5\xb0\x9d\xe8\xaf\x95\xe8\xaf\xbb\xe5\x8f\x96df, df_req_start\n            df, df_req_start, df_req_end = load_kline_df(temp_symbol.value)\n        # \xe7\xa1\xae\xe5\xae\x9aenv\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\xba\xe5\x88\xb6\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\n        force_local = (ABuEnv.g_data_fetch_mode == EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL)\n\n        if force_local and df is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xe4\xb8\x94df\xe6\x98\xaf\xe7\xa9\xba\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n            return df, save_kl_key\n\n        if data_mode == EMarketDataSplitMode.E_DATA_SPLIT_UNDO and force_local:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xe4\xb8\x94\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xbaE_DATA_SPLIT_UNDO\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe4\xbe\x9d\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x87\xe5\x89\xb2df\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n            return df, save_kl_key\n\n        # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84start\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8ceg 2016-7-26 \xef\xbc\x8d> 2016-07-26\n        start = ABuDateUtil.fix_date(start)\n        # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84end\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8ceg 2016-7-26 \xef\xbc\x8d> 2016-07-26\n        end = ABuDateUtil.fix_date(end)\n        # \xe6\xa0\xb9\xe6\x8d\xaen_folds\xef\xbc\x8cstart\xef\xbc\x8cend\xe8\xae\xa1\xe7\xae\x97\xe9\x9c\x80\xe8\xa6\x81\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84start\xef\xbc\x8cend\n        end, end_int, df_end_int, start, start_int, df_start_int = _calc_start_end_date(df, force_local, n_folds, start,\n                                                                                        end)\n        save_kl_key = (temp_symbol, start_int, end_int)\n        if ABuEnv.g_data_fetch_mode == EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe7\xbd\x91\xe7\xbb\x9c\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xaf\xb7\xe6\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8load_kline_df_net\n            return load_kline_df_net(source, temp_symbol, n_folds=n_folds, start=start, end=end, start_int=start_int,\n                                     end_int=end_int, save=save), save_kl_key\n\n        # \xe6\xa3\x80\xe6\xb5\x8b\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe6\xbb\xa1\xe8\xb6\xb3\xe9\x9c\x80\xe8\xa6\x81\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x9c\xa8\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe4\xb9\x8b\xe9\x97\xb4\xef\xbc\x8c\xe5\x88\x99\xe5\x8f\xaf\xe5\x88\x87\xe7\x89\x87\xe6\x94\xbe\xe5\x9b\x9e\n        match = False\n        if start_int >= df_start_int and end_int <= df_end_int:\n            match = True\n        elif start_int >= df_start_int and force_local:\n            match = True\n        elif start_int >= df_req_start and end_int <= df_req_end:\n            match = True\n\n        if match:\n            if data_mode == EMarketDataSplitMode.E_DATA_SPLIT_SE:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xbb\xa1\xe8\xb6\xb3\xef\xbc\x8c\xe4\xb8\x94\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xae\xe5\x88\x87\xe5\x89\xb2df\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x87\xe5\x89\xb2\xe7\xad\x9b\xe9\x80\x89\n                df = df[(start_int <= df.date) & (df.date <= end_int)]\n        elif not force_local:\n            # \xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe6\xbb\xa1\xe8\xb6\xb3\xef\xbc\x8c\xe4\xbd\x86\xe9\x9d\x9e\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe8\xb5\xb0\xe7\xbd\x91\xe7\xbb\x9c\n            df = load_kline_df_net(source, temp_symbol, n_folds, start=start, end=end, start_int=start_int,\n                                   end_int=end_int, save=save)\n            if data_mode == EMarketDataSplitMode.E_DATA_SPLIT_UNDO:\n                # SPLIT_UNDO\xe9\x9c\x80\xe8\xa6\x81\xe8\xaf\xbb\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe5\x88\x87\xe5\x89\xb2\xe8\xbf\x94\xe5\x9b\x9e\n                df, _, _ = load_kline_df(temp_symbol.value)\n        return df, save_kl_key\n    except HDF5ExtError:\n        # hdf5 bug\n        logging.debug(\'{} HDF5ExtError\'.format(symbol))\n    except Exception as e:\n        logging.info(\'Exception kline_pd symbol:{} e:{}\'.format(symbol, e))\n    return None, None\n'"
abupy/MarketBu/ABuHkUnit.py,0,"b'# coding=utf-8\n""""""\n    \xe6\xb8\xaf\xe8\x82\xa1\xe6\xaf\x8f\xe4\xb8\x80\xe6\x89\x8b\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\n\nimport pandas as pd\n\nfrom ..CoreBu.ABuBase import FreezeAttrMixin\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu.ABuDTUtil import singleton\nfrom ..MarketBu.ABuSymbol import Symbol\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n_rom_dir = ABuEnv.g_project_rom_data_dir\n""""""\xe6\x96\x87\xe4\xbb\xb6\xe5\xae\x9a\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe7\x88\xac\xe5\x8f\x96\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0""""""\n_hk_unit_csv = os.path.join(_rom_dir, \'hk_unit.csv\')\n""""""\xe9\xbb\x98\xe8\xae\xa4\xe6\xaf\x8f\xe4\xb8\x80\xe6\x89\x8b\xe8\x82\xa1\xe6\x95\xb01000""""""\nK_DEFAULT_UNIT = 1000\n\n\n@singleton\nclass AbuHkUnit(FreezeAttrMixin):\n    """"""AbuHkUnit\xe5\x8d\x95\xe4\xbe\x8b\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5FreezeAttrMixin\xe5\x9c\xa8__init__\xe4\xb8\xad\xe5\x86\xbb\xe7\xbb\x93\xe4\xba\x86\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaa\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\xbb\xe5\x8f\x96""""""\n\n    def __init__(self):\n        """"""\n            self.hk_unit_df\xe8\xa1\xa8\xe7\xbb\x93\xe6\x9e\x84\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97unit\xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe4\xb8\x80\xe6\x89\x8b\xe8\x82\xa1\xe6\x95\xb0\xef\xbc\x8c\xe8\xa1\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\xb8\xaf\xe8\x82\xa1symbol\n                    unit\n            hk02011\t2000\n            hk01396\t2000\n            hk08112\t4800\n            hk08198\t4000\n            hk01143\t4000\n            ............\n        """"""\n        # \xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0csv\xe5\x88\xb0\xe5\x86\x85\xe5\xad\x98\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8eAbuHkUnit\xe5\x8d\x95\xe4\xbe\x8b\xe5\x8f\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1\n        self.hk_unit_df = pd.read_csv(_hk_unit_csv, index_col=0)\n        # __init__\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8FreezeAttrMixin._freeze\xe5\x86\xbb\xe7\xbb\x93\xe4\xba\x86\xe6\x8e\xa5\xe5\x8f\xa3\n        self._freeze()\n\n    def query_unit(self, symbol):\n        """"""\n        \xe5\xaf\xb9\xe5\xa4\x96\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe5\xba\x94symbol\xe6\xaf\x8f\xe4\xb8\x80\xe6\x89\x8b\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\n        :param symbol: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafsymbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if isinstance(symbol, Symbol):\n            # Symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\n            symbol = symbol.value\n        elif isinstance(symbol, six.string_types) and symbol.isdigit():\n            # symbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2, \xe4\xbd\x86\xe6\x98\xaf\xe6\xb2\xa1\xe6\x9c\x89hk\xef\xbc\x8c\xe5\x88\x99\xe5\x8a\xa0\xe4\xb8\x8a\n            symbol = \'hk{}\'.format(symbol)\n\n        # noinspection PyBroadException\n        try:\n            unit = self.hk_unit_df.loc[symbol].values[0]\n        except:\n            # \xe6\x9f\xa5\xe8\xaf\xa2\xe5\xa4\xb1\xe8\xb4\xa5\xe8\xb5\x8b\xe4\xba\x88\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\n            unit = K_DEFAULT_UNIT\n        return unit\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9ahk_unit_df.info\xef\xbc\x8c hk_unit_df.describe""""""\n        return \'info:\\n{}\\ndescribe:\\n{}\'.format(self.hk_unit_df.info(),\n                                                 self.hk_unit_df.describe())\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9ahk_unit_df.shape[0]\xef\xbc\x8c\xe5\x8d\xb3\xe8\xa1\x8c\xe6\x95\xb0""""""\n        return self.hk_unit_df.shape[0]\n\n    def __contains__(self, item):\n        """"""\n        \xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9a\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96item\xe5\x90\x8e\xe6\xa3\x80\xe6\xb5\x8bitem\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8self.hk_unit_df.index\xe4\xb8\xad\n        :param item: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafsymbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if isinstance(item, Symbol):\n            item = item.value\n        elif isinstance(item, six.string_types) and item.isdigit():\n            item = \'hk{}\'.format(item)\n\n        return item in self.hk_unit_df.index\n\n    def __getitem__(self, key):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe5\xa5\x97\xe6\x8e\xa5self.query_unit(key)""""""\n        return self.query_unit(key)\n\n    def __setitem__(self, key, value):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8a\x9b\xe5\x87\xba\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c \xe5\x8d\xb3\xe4\xb8\x8d\xe5\x87\x86\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae""""""\n        raise AttributeError(""AbuHkUnit set value!!!"")\n\n\n""""""\xe7\x94\xb1\xe4\xba\x8e\xe5\xb0\x81\xe8\xa3\x85\xe5\xaf\xb9\xe5\xa4\x96\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\xa8\xa1\xe5\x9d\x97\xe5\x8d\x95\xe4\xbe\x8b""""""\n# """"""\xe6\xa8\xa1\xe5\x9d\x97\xe5\x8d\x95\xe4\xbe\x8b""""""\n# single_hk_unit = AbuHkUnit()\n'"
abupy/MarketBu/ABuIndustries.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe4\xbb\x85\xe6\x94\xaf\xe6\x8c\x81\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom collections import Iterable\nimport logging\nfrom fnmatch import fnmatch\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom ..MarketBu import ABuSymbolPd\nfrom ..UtilBu.ABuStrUtil import to_unicode\nfrom ..UtilBu import ABuScalerUtil\nfrom ..MarketBu.ABuSymbolStock import AbuSymbolUS, AbuSymbolCN, AbuSymbolHK\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode, EMarketTargetType\nfrom ..CoreBu import ABuEnv\n\n\ndef industries_df(target_symbol):\n    """"""\n    \xe5\x88\x86\xe5\x88\xab\xe6\x9f\xa5\xe8\xaf\xa2target_symbol\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xe4\xb8\xad\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x88\xb0\n    \xe8\xbf\x94\xe5\x9b\x9e\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9cindustries\xef\xbc\x88pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x89\xe4\xbb\xa5\xe5\x8f\x8a \xe6\x89\x80\xe5\xb1\x9esymbol\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8d\xb3\n    AbuSymbolStockBase\xe5\xad\x90\xe7\xb1\xbb\n    :param target_symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xef\xbc\x88\xe8\xbf\x94\xe5\x9b\x9e\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9cindustries: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, \xe6\x89\x80\xe5\xb1\x9esymbol\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb: AbuSymbolStockBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x89\n    """"""\n    industries = AbuSymbolUS().query_industry_symbols(target_symbol)\n    if industries is not None:\n        # \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9f\xa5\xe5\x88\xb0\xe4\xba\x86\xe6\x9c\x89\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c\n        return industries, AbuSymbolUS()\n\n    industries = AbuSymbolCN().query_industry_symbols(target_symbol)\n    if industries is not None:\n        # a\xe8\x82\xa1\xe6\x9f\xa5\xe5\x88\xb0\xe4\xba\x86\xe6\x9c\x89\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c\n        return industries, AbuSymbolCN()\n\n    industries = AbuSymbolHK().query_industry_symbols(target_symbol)\n    if industries is not None:\n        # \xe6\xb8\xaf\xe8\x82\xa1\xe6\x9f\xa5\xe5\x88\xb0\xe4\xba\x86\xe6\x9c\x89\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c\n        return industries, AbuSymbolHK()\n    # \xe9\x83\xbd\xe6\xb2\xa1\xe6\x9f\xa5\xe5\x88\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eNone, None\n    return None, None\n\n\ndef industries_factorize(market=None):\n    """"""\n    \xe6\x9f\xa5\xe8\xaf\xa2market\xe6\x89\x80\xe5\x9c\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xa6\xbb\xe6\x95\xa3\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4market=None\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8ABuEnv.g_market_target\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe5\xaf\xb9\xe5\xba\x94market\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xae\x80\xe8\xbf\xb0\xe5\x92\x8cfactorize\xe5\x80\xbc\xef\xbc\x8cpd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n            eg\xef\xbc\x9a\n                1      \xe4\xb8\xad\xe5\x9b\xbd\xe9\xa3\x9f\xe5\x93\x81\xe3\x80\x81\xe9\xa5\xae\xe6\x96\x99\xe4\xb8\x8e\xe7\x83\x9f\xe8\x8d\x89\n                2        \xe6\xb2\xb9\xe6\xb0\x94/\xe9\x92\xbb\xe5\xad\x94\xe4\xb8\x8e\xe6\x8e\xa2\xe6\xb5\x8b\n                3          \xe5\x87\xba\xe7\x89\x88\xe4\xb8\x9a/\xe6\x8a\xa5\xe7\xba\xb8\n                4            \xe7\x94\x9f\xe7\x89\xa9\xe6\x8a\x80\xe6\x9c\xaf\n                5          \xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x82\xa8\xe8\xae\xbe\xe5\xa4\x87\n                6            \xe6\x95\x99\xe8\x82\xb2\xe5\x9f\xb9\xe8\xae\xad\n                7              \xe7\x94\xb5\xe8\xa7\x86\n                8          \xe4\xb8\xad\xe5\x9b\xbd\xe7\xbd\x91\xe7\xbb\x9c\xe6\xb8\xb8\xe6\x88\x8f\n                9           \xe4\xb8\xad\xe5\x9b\xbd\xe6\x96\xb0\xe8\x83\xbd\xe6\xba\x90\n                          ...\n                249       \xe9\xa3\x9f\xe5\x93\x81\xe5\xa4\x9a\xe6\xa0\xb7\xe5\x8c\x96\xe7\xbb\x8f\xe8\x90\xa5\n                250       \xe7\x94\xb5\xe5\xbd\xb1\xe5\x88\xb6\xe4\xbd\x9c\xe5\x8f\x8a\xe5\xbd\xb1\xe9\x99\xa2\n                251           \xe5\x86\x9c\xe4\xba\xa7\xe5\x93\x81\n                252       \xe7\x83\x9f\xe8\x8d\x89\xe5\x88\xb6\xe5\x93\x81\xe5\x8f\x8a\xe5\x85\xb6\xe5\xae\x83\n                253             \xe9\x93\x9d\n                254       \xe6\xb1\xbd\xe8\xbd\xa6\xe9\x85\x8d\xe4\xbb\xb6\xe6\x89\xb9\xe5\x8f\x91\xe5\x95\x86\n                255         \xe5\xae\xb6\xe5\x85\xb7\xe8\xa3\x85\xe9\xa5\xb0\xe5\xba\x97\n                256          \xe4\xb9\xb3\xe9\x85\xaa\xe4\xba\xa7\xe5\x93\x81\n                257          \xe5\x8c\xbb\xe8\x8d\xaf\xe7\x94\x9f\xe7\x89\xa9\n                258        \xe4\xb8\xad\xe5\x9b\xbd\xe9\x85\x92\xe5\xba\x97\xe9\xa4\x90\xe9\xa5\xae\n           eg\xef\xbc\x9a\xe6\x9f\xa5\xe8\xaf\xa2A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe8\xa1\x8c\xe4\xb8\x9a\xef\xbc\x9a\n                input\xef\xbc\x9a\n                        ABuIndustries.industries_factorize(market=EMarketTargetType.E_MARKET_TARGET_CN)\n                output\xef\xbc\x9a\n                        1     \xe5\x95\x86\xe4\xb8\x9a\xe8\xb4\xb8\xe6\x98\x93\n                        2     \xe6\x9c\x89\xe8\x89\xb2\xe9\x87\x91\xe5\xb1\x9e\n                        3     \xe7\x94\xb5\xe6\xb0\x94\xe8\xae\xbe\xe5\xa4\x87\n                        4     \xe5\xae\xb6\xe7\x94\xa8\xe7\x94\xb5\xe5\x99\xa8\n                        5     \xe5\xbb\xba\xe7\xad\x91\xe8\xa3\x85\xe9\xa5\xb0\n                        6      \xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\n                        7     \xe8\xbd\xbb\xe5\xb7\xa5\xe5\x88\xb6\xe9\x80\xa0\n                        8     \xe6\x9c\xba\xe6\xa2\xb0\xe8\xae\xbe\xe5\xa4\x87\n                        9     \xe5\x8c\xbb\xe8\x8d\xaf\xe7\x94\x9f\xe7\x89\xa9\n                              ...\n                        25    \xe5\x9b\xbd\xe9\x98\xb2\xe5\x86\x9b\xe5\xb7\xa5\n                        26    A\xe8\x82\xa1\xe6\x8c\x87\xe6\x95\xb0\n                        27    \xe9\x9d\x9e\xe9\x93\xb6\xe9\x87\x91\xe8\x9e\x8d\n                        28    \xe5\xbb\xba\xe7\xad\x91\xe5\xbb\xba\xe6\x9d\x90\n                        29      \xe9\x93\xb6\xe8\xa1\x8c\n                        30    \xe4\xbf\xa1\xe6\x81\xaf\xe8\xae\xbe\xe5\xa4\x87\n                        31      \xe9\x92\xa2\xe9\x93\x81\n                        32    \xe4\xba\xa4\xe8\xbf\x90\xe8\xae\xbe\xe5\xa4\x87\n                        33    \xe9\xa4\x90\xe9\xa5\xae\xe6\x97\x85\xe6\xb8\xb8\n                        34    \xe9\xbb\x91\xe8\x89\xb2\xe9\x87\x91\xe5\xb1\x9e\n    """"""\n    if market is None:\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n\n    if market == EMarketTargetType.E_MARKET_TARGET_US:\n        return AbuSymbolUS().industry_factorize_name_series\n    elif market == EMarketTargetType.E_MARKET_TARGET_CN:\n        return AbuSymbolCN().industry_factorize_name_series\n    elif market == EMarketTargetType.E_MARKET_TARGET_HK:\n        return AbuSymbolHK().industry_factorize_name_series\n    # \xe4\xbb\x85\xe6\x94\xaf\xe6\x8c\x81\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8ca\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\n    raise TypeError(\'JUST SUPPORT US, CN, HK!\')\n\n\ndef industries_market(market=None):\n    """"""\n    \xe6\x9f\xa5\xe8\xaf\xa2market\xe6\x89\x80\xe5\x9c\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x8f\xa5\xe6\x9f\x84\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3\xef\xbc\x9a\n        \xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xbaE_MARKET_TARGET_US\xef\xbc\x9aAbuSymbolUS\xe5\xaf\xb9\xe8\xb1\xa1\n        a\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xbaE_MARKET_TARGET_CN\xef\xbc\x9aAbuSymbolCN\xe5\xaf\xb9\xe8\xb1\xa1\n        \xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xbaE_MARKET_TARGET_HK\xef\xbc\x9aAbuSymbolHK\xe5\xaf\xb9\xe8\xb1\xa1\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: AbuSymbolUS\xe5\xaf\xb9\xe8\xb1\xa1 or AbuSymbolCN\xe5\xaf\xb9\xe8\xb1\xa1 or AbuSymbolHK\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if market is None:\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n\n    if market == EMarketTargetType.E_MARKET_TARGET_US:\n        industries_market_op = AbuSymbolUS()\n    elif market == EMarketTargetType.E_MARKET_TARGET_CN:\n        industries_market_op = AbuSymbolCN()\n    elif market == EMarketTargetType.E_MARKET_TARGET_HK:\n        industries_market_op = AbuSymbolHK()\n    else:\n        raise TypeError(\'JUST SUPPORT US, CN, HK!\')\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\x8f\xa5\xe6\x9f\x84\xe6\x93\x8d\xe4\xbd\x9c\xe5\xaf\xb9\xe8\xb1\xa1\n    return industries_market_op\n\n\ndef match_industries_factorize(match, market=None):\n    """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2market\xe6\x89\x80\xe5\x9c\xa8\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xadmatch\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x89\x80\xe7\xa4\xba\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe8\xa1\x8c\xe4\xb8\x9afactorize\xef\xbc\x8c\n        \xe8\x8e\xb7\xe5\x8f\x96factorize\xe5\x90\x8e\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87query_factorize_industry_df\xe5\xb0\x86factorize\n        \xe6\x89\x80\xe7\xa4\xba\xe8\xa1\x8c\xe4\xb8\x9a\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x8e\xb7\xe5\x8f\x96\n        eg\xef\xbc\x9a\n        input\xef\xbc\x9a\n                ABuIndustries.match_industries_factorize(\'\xe4\xb8\xad\xe5\x9b\xbd\')\n        output\xef\xbc\x9a\n                [(1, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\xa3\x9f\xe5\x93\x81\xe3\x80\x81\xe9\xa5\xae\xe6\x96\x99\xe4\xb8\x8e\xe7\x83\x9f\xe8\x8d\x89\'),\n                 (8, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xbd\x91\xe7\xbb\x9c\xe6\xb8\xb8\xe6\x88\x8f\'),\n                 (9, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x96\xb0\xe8\x83\xbd\xe6\xba\x90\'),\n                 (22, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\xb1\xbd\xe8\xbd\xa6\xe4\xb8\x8e\xe6\xb1\xbd\xe8\xbd\xa6\xe9\x9b\xb6\xe9\x83\xa8\xe4\xbb\xb6\'),\n                 (31, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x88\xb6\xe8\x8d\xaf\xe3\x80\x81\xe7\x94\x9f\xe7\x89\xa9\xe7\xa7\x91\xe6\x8a\x80\xe5\x92\x8c\xe7\x94\x9f\xe5\x91\xbd\xe7\xa7\x91\xe5\xad\xa6\'),\n                 (32, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x87\x91\xe8\x9e\x8d\'),\n                 (33, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9c\x8d\xe5\x8a\xa1\'),\n                 (41, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x87\x91\xe5\xb1\x9e\xe4\xb8\x8e\xe9\x87\x87\xe7\x9f\xbf\'),\n                 (54, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\xbb\xba\xe7\xad\x91\xe6\x9d\x90\xe6\x96\x99\'),\n                 (66, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xa1\xac\xe4\xbb\xb6\xe3\x80\x81\xe5\x8d\x8a\xe5\xaf\xbc\xe4\xbd\x93\xe4\xb8\x8e\xe8\xae\xbe\xe5\xa4\x87\'),\n                 (79, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x90\xe8\xbe\x93\'),\n                 (81, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8c\x96\xe5\xad\xa6\xe5\x88\xb6\xe5\x93\x81\'),\n                 (114, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9c\x8d\xe5\x8a\xa1\'),\n                 (169, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x88\xbf\xe5\x9c\xb0\xe4\xba\xa7\'),\n                 (195, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\x94\xb5\xe5\xad\x90\xe5\x95\x86\xe5\x8a\xa1\'),\n                 (212, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x80\x90\xe7\x94\xa8\xe6\xb6\x88\xe8\xb4\xb9\xe5\x93\x81\xe4\xb8\x8e\xe6\x9c\x8d\xe8\xa3\x85\'),\n                 (214, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xb8\x80\xe8\x88\xac\xe5\x88\xb6\xe9\x80\xa0\xe4\xb8\x9a\'),\n                 (216, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\xaa\x92\xe4\xbd\x93\'),\n                 (217, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x97\xa5\xe6\xb6\x88\xe5\x93\x81\xe9\x9b\xb6\xe5\x94\xae\'),\n                 (220, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbd\xaf\xe4\xbb\xb6\xe4\xb8\x8e\xe6\x9c\x8d\xe5\x8a\xa1\'),\n                 (223, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xbc\xa0\xe7\xbb\x9f\xe8\x83\xbd\xe6\xba\x90\'),\n                 (224, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x83\xbd\xe6\xba\x90\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8e\xe6\x9c\x8d\xe5\x8a\xa1\'),\n                 (228, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xba\xb8\xe4\xb8\x9a\xe4\xb8\x8e\xe5\x8c\x85\xe8\xa3\x85\'),\n                 (232, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x95\x86\xe4\xb8\x9a\xe4\xb8\x8e\xe4\xb8\x93\xe4\xb8\x9a\xe6\x9c\x8d\xe5\x8a\xa1\'),\n                 (237, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x95\x99\xe8\x82\xb2\xe5\x9f\xb9\xe8\xae\xad\'),\n                 (238, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8c\xbb\xe7\x96\x97\xe4\xbf\x9d\xe5\x81\xa5\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8e\xe6\x9c\x8d\xe5\x8a\xa1\'),\n                 (240, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x9d\x9e\xe6\x97\xa5\xe6\xb6\x88\xe5\x93\x81\xe9\x9b\xb6\xe5\x94\xae\'),\n                 (258, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x85\x92\xe5\xba\x97\xe9\xa4\x90\xe9\xa5\xae\')]\n    :param match: \xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe9\x80\x9a\xe9\x85\x8d\xe7\xac\xa6\xef\xbc\x8ceg\xef\xbc\x9a\'\xe5\x8c\xbb\xe8\x8d\xaf*\'\xef\xbc\x8c \'*\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91*\', \'*\xe7\xa7\x91\xe6\x8a\x80\'\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84list\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba(factorize, \xe6\x9c\xac\xe5\x9c\xb0\xe6\x8f\x8f\xe8\xbf\xb0)\xef\xbc\x8ceg\xef\xbc\x9a(33, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9c\x8d\xe5\x8a\xa1\')\n    """"""\n    match = to_unicode(match)\n    _industries_factorize = industries_factorize(market=market)\n    if u\'*\' not in match:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xb8\xa6\xef\xbc\x8a\xe9\x82\xa3\xe5\xb0\xb1\xe5\x89\x8d\xe5\x90\x8e\xe5\x8a\xa0\xef\xbc\x8a\xe8\xbf\x9b\xe8\xa1\x8cmatch\n        match = u\'*{}*\'.format(match)\n    match_list = list()\n    for factorize, industries in enumerate(_industries_factorize):\n        if fnmatch(to_unicode(industries), match):\n            # \xe4\xbd\xbf\xe7\x94\xa8fnmatch\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\xb9\xe9\x85\x8d\n            match_list.append((factorize, industries))\n\n    match = match.replace(u\'*\', u\'\')\n    if len(match_list) == 0 and len(match) > 1:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9f\xa5\xe5\x88\xb0\xef\xbc\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8ceg\xef\xbc\x9a*\xe6\x95\x99\xe8\x82\xb2*\xef\xbc\x8d>*\xe6\x95\x99*\xef\xbc\x8d>*\xe8\x82\xb2*\n        for match_pos in np.arange(0, len(match)):\n            # \xe4\xbc\xaa\xe9\x80\x92\xe5\xbd\x92\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3\xe9\x80\x92\xe5\xbd\x92\xe6\x96\xb9\xe6\xb3\x95\xe9\x87\x8c\xe9\x9d\xa2\xe7\x94\xb1\xe4\xba\x8ematch = match.replace(\'*\', \'\')\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe6\xbb\xa1\xe8\xb6\xb3\xe8\xbf\xad\xe4\xbb\xa3\xe5\x86\x8d\xe6\xac\xa1\xe9\x80\x92\xe5\xbd\x92\xe7\x9a\x84\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x9alen(match) > 1\n            match_list = match_industries_factorize(match[match_pos], market=market)\n            if len(match_list) > 0:\n                # \xe4\xb8\x80\xe6\x97\xa6\xe5\x85\xb6\xe4\xb8\xad\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\x9a\x84\xe5\xad\x90\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9f\xa5\xe5\x88\xb0\xe4\xba\x86\xef\xbc\x8c\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9eeg\xef\xbc\x9a*\xe6\x95\x99*\n                break\n\n    # TODO: \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x98\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9f\xa5\xe5\x88\xb0\xef\xbc\x8c\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x8c\x89\xe7\x85\xa7\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xad\x89\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x8c\xb9\xe9\x85\x8d\xe6\x96\xb9\xe5\xbc\x8f\n    return match_list\n\n\ndef query_match_industries_df(match, market=None):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2market\xe6\x89\x80\xe5\x9c\xa8\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xadmatch\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x89\x80\xe7\xa4\xba\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe8\xa1\x8c\xe4\xb8\x9a\xe4\xbf\xa1\xe6\x81\xaf\xe7\xbb\x84\xe8\xa3\x85\xe6\x88\x90pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param match: \xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe9\x80\x9a\xe9\x85\x8d\xe7\xac\xa6\xef\xbc\x8ceg\xef\xbc\x9a\'\xe5\x8c\xbb\xe8\x8d\xaf*\'\xef\xbc\x8c \'*\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91*\', \'*\xe7\xa7\x91\xe6\x8a\x80\'\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe8\xa1\x8c\xe4\xb8\x9a\xe7\xbb\x84\xe5\x90\x88pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x9f\xa5\xe8\xaf\xa2factorize\xe5\xba\x8f\xe5\x88\x97\n    match_list = match_industries_factorize(match, market=market)\n    # \xe9\x80\x9a\xe8\xbf\x87industries_market\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe6\x93\x8d\xe4\xbd\x9c\xe5\x8f\xa5\xe6\x9f\x84industries_market_op\n    industries_market_op = industries_market(market=market)\n\n    industry_df = None\n    for factorize, _ in match_list:\n        # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x88\xb0\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8cpd.DtaFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\n        query_industry = industries_market_op.query_industry_factorize(factorize)\n        industry_df = query_industry if industry_df is None else pd.concat([query_industry, industry_df])\n    if industry_df is not None:\n        # \xe5\x8e\xbb\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82a\xe5\x9c\xa8\xe8\xa1\x8c\xe4\xb8\x9ab\xef\xbc\x8c\xe5\x8f\x88\xe5\x9c\xa8\xe8\xa1\x8c\xe4\xb8\x9ac\n        # noinspection PyUnresolvedReferences\n        industry_df.drop_duplicates(inplace=True)\n\n    return industry_df\n\n\ndef query_factorize_industry_df(factorize_arr, market=None):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8match_industries_factorize\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x88\xb0\xe8\xa1\x8c\xe4\xb8\x9a\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84factorize\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8factorize\xe5\xba\x8f\xe5\x88\x97\xe5\x8d\xb3\xe7\xbb\x84\xe6\x88\x90\xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xa1\x8c\xe4\xb8\x9a\xe7\xbb\x84\xe5\x90\x88pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    eg: \xe4\xbb\x8e\xe7\xbe\x8e\xe8\x82\xa1\xe6\x89\x80\xe6\x9c\x89\xe8\xa1\x8c\xe4\xb8\x9a\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\xad\xe5\x9b\xbd\xe4\xbc\x81\xe4\xb8\x9a\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\n        input\xef\xbc\x9aABuIndustries.match_industries_factorize(\'\xe4\xb8\xad\xe5\x9b\xbd\', market=EMarketTargetType.E_MARKET_TARGET_US)\n        output\xef\xbc\x9a\n            [(1, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\xa3\x9f\xe5\x93\x81\xe3\x80\x81\xe9\xa5\xae\xe6\x96\x99\xe4\xb8\x8e\xe7\x83\x9f\xe8\x8d\x89\'),\n             (8, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xbd\x91\xe7\xbb\x9c\xe6\xb8\xb8\xe6\x88\x8f\'),\n             (9, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x96\xb0\xe8\x83\xbd\xe6\xba\x90\'),\n             (22, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\xb1\xbd\xe8\xbd\xa6\xe4\xb8\x8e\xe6\xb1\xbd\xe8\xbd\xa6\xe9\x9b\xb6\xe9\x83\xa8\xe4\xbb\xb6\'),\n             (31, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x88\xb6\xe8\x8d\xaf\xe3\x80\x81\xe7\x94\x9f\xe7\x89\xa9\xe7\xa7\x91\xe6\x8a\x80\xe5\x92\x8c\xe7\x94\x9f\xe5\x91\xbd\xe7\xa7\x91\xe5\xad\xa6\'),\n             (32, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x87\x91\xe8\x9e\x8d\'),\n             (33, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9c\x8d\xe5\x8a\xa1\'),\n             (41, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x87\x91\xe5\xb1\x9e\xe4\xb8\x8e\xe9\x87\x87\xe7\x9f\xbf\'),\n             (54, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\xbb\xba\xe7\xad\x91\xe6\x9d\x90\xe6\x96\x99\'),\n             (66, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xa1\xac\xe4\xbb\xb6\xe3\x80\x81\xe5\x8d\x8a\xe5\xaf\xbc\xe4\xbd\x93\xe4\xb8\x8e\xe8\xae\xbe\xe5\xa4\x87\'),\n             (79, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x90\xe8\xbe\x93\'),\n             (81, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8c\x96\xe5\xad\xa6\xe5\x88\xb6\xe5\x93\x81\'),\n             (114, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9c\x8d\xe5\x8a\xa1\'),\n             (169, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x88\xbf\xe5\x9c\xb0\xe4\xba\xa7\'),\n             (195, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\x94\xb5\xe5\xad\x90\xe5\x95\x86\xe5\x8a\xa1\'),\n             (212, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x80\x90\xe7\x94\xa8\xe6\xb6\x88\xe8\xb4\xb9\xe5\x93\x81\xe4\xb8\x8e\xe6\x9c\x8d\xe8\xa3\x85\'),\n             (214, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xb8\x80\xe8\x88\xac\xe5\x88\xb6\xe9\x80\xa0\xe4\xb8\x9a\'),\n             (216, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\xaa\x92\xe4\xbd\x93\'),\n             (217, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x97\xa5\xe6\xb6\x88\xe5\x93\x81\xe9\x9b\xb6\xe5\x94\xae\'),\n             (220, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbd\xaf\xe4\xbb\xb6\xe4\xb8\x8e\xe6\x9c\x8d\xe5\x8a\xa1\'),\n             (223, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xbc\xa0\xe7\xbb\x9f\xe8\x83\xbd\xe6\xba\x90\'),\n             (224, \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x83\xbd\xe6\xba\x90\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8e\xe6\x9c\x8d\xe5\x8a\xa1\'),\n             (228, \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xba\xb8\xe4\xb8\x9a\xe4\xb8\x8e\xe5\x8c\x85\xe8\xa3\x85\'),\n             (232, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x95\x86\xe4\xb8\x9a\xe4\xb8\x8e\xe4\xb8\x93\xe4\xb8\x9a\xe6\x9c\x8d\xe5\x8a\xa1\'),\n             (237, \'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x95\x99\xe8\x82\xb2\xe5\x9f\xb9\xe8\xae\xad\'),\n             (238, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8c\xbb\xe7\x96\x97\xe4\xbf\x9d\xe5\x81\xa5\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8e\xe6\x9c\x8d\xe5\x8a\xa1\'),\n             (240, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x9d\x9e\xe6\x97\xa5\xe6\xb6\x88\xe5\x93\x81\xe9\x9b\xb6\xe5\x94\xae\'),\n             (258, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x85\x92\xe5\xba\x97\xe9\xa4\x90\xe9\xa5\xae\')]\n\n        \xe7\x84\xb6\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8ABuIndustries.query_factorize_industry_df((31, 32, 33))\xe5\x8d\xb3\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\xb0\n             (31, \'\xe4\xb8\xad\xe5\x9b\xbd\xe5\x88\xb6\xe8\x8d\xaf\xe3\x80\x81\xe7\x94\x9f\xe7\x89\xa9\xe7\xa7\x91\xe6\x8a\x80\xe5\x92\x8c\xe7\x94\x9f\xe5\x91\xbd\xe7\xa7\x91\xe5\xad\xa6\'),\n             (32, \'\xe4\xb8\xad\xe5\x9b\xbd\xe9\x87\x91\xe8\x9e\x8d\'),\n             (33, \'\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91\xe8\xbd\xaf\xe4\xbb\xb6\xe6\x9c\x8d\xe5\x8a\xa1\'),\n        \xe8\xa1\x8c\xe4\xb8\x9a\xe4\xb8\xad\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n\n    :param factorize_arr: eg\xef\xbc\x9a(31, 32, 33) or [31, 32, 33] or 31\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe8\xa1\x8c\xe4\xb8\x9a\xe7\xbb\x84\xe5\x90\x88pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if not isinstance(factorize_arr, Iterable):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaafactorize\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbf\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\n        factorize_arr = [factorize_arr]\n    # \xe9\x80\x9a\xe8\xbf\x87industries_market\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe6\x93\x8d\xe4\xbd\x9c\xe5\x8f\xa5\xe6\x9f\x84industries_market_op\n    industries_market_op = industries_market(market=market)\n\n    industry_df = None\n    for ind in factorize_arr:\n        query_industry = industries_market_op.query_industry_factorize(ind)\n        # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x88\xb0\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8cpd.DtaFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\n        industry_df = query_industry if industry_df is None else pd.concat([query_industry, industry_df])\n    if industry_df is not None:\n        # \xe5\x8e\xbb\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82a\xe5\x9c\xa8\xe8\xa1\x8c\xe4\xb8\x9ab\xef\xbc\x8c\xe5\x8f\x88\xe5\x9c\xa8\xe8\xa1\x8c\xe4\xb8\x9ac\n        # noinspection PyUnresolvedReferences\n        industry_df.drop_duplicates(inplace=True)\n\n    return industry_df\n\n\ndef query_factorize_industry_symbol(factorize, market=None):\n    """"""\n    \xe5\xa5\x97\xe6\x8e\xa5query_factorize_industry_df\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9edf\xe5\x9c\xa8\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x9a\n        query_factorize_industry_df(factorize, market=market).symbol\n    :param factorize: factorize_arr: eg\xef\xbc\x9a(31, 32, 33) or [31, 32, 33] or 31\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n            eg\xef\xbc\x9a\n                1. \xe9\xa6\x96\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8industries_factorize\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x88\xb0outputa\xe8\x82\xa1\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\n                input\xef\xbc\x9a\n                    ABuIndustries.industries_factorize(market=EMarketTargetType.E_MARKET_TARGET_CN)\n                output\xef\xbc\x9a\n                1     \xe5\x95\x86\xe4\xb8\x9a\xe8\xb4\xb8\xe6\x98\x93\n                2     \xe6\x9c\x89\xe8\x89\xb2\xe9\x87\x91\xe5\xb1\x9e\n                3     \xe7\x94\xb5\xe6\xb0\x94\xe8\xae\xbe\xe5\xa4\x87\n                4     \xe5\xae\xb6\xe7\x94\xa8\xe7\x94\xb5\xe5\x99\xa8\n                5     \xe5\xbb\xba\xe7\xad\x91\xe8\xa3\x85\xe9\xa5\xb0\n                6      \xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\n                7     \xe8\xbd\xbb\xe5\xb7\xa5\xe5\x88\xb6\xe9\x80\xa0\n                8     \xe6\x9c\xba\xe6\xa2\xb0\xe8\xae\xbe\xe5\xa4\x87\n                9     \xe5\x8c\xbb\xe8\x8d\xaf\xe7\x94\x9f\xe7\x89\xa9\n                      ...\n                29      \xe9\x93\xb6\xe8\xa1\x8c\n                30    \xe4\xbf\xa1\xe6\x81\xaf\xe8\xae\xbe\xe5\xa4\x87\n                31      \xe9\x92\xa2\xe9\x93\x81\n                32    \xe4\xba\xa4\xe8\xbf\x90\xe8\xae\xbe\xe5\xa4\x87\n                33    \xe9\xa4\x90\xe9\xa5\xae\xe6\x97\x85\xe6\xb8\xb8\n                34    \xe9\xbb\x91\xe8\x89\xb2\xe9\x87\x91\xe5\xb1\x9e\n\n                2. \xe4\xbd\xbf\xe7\x94\xa8query_factorize_industry_symbol((6, 9, 29))\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xef\xbc\x8c\xe5\x8c\xbb\xe8\x8d\xaf\xe7\x94\x9f\xe7\x89\xa9\xef\xbc\x8c\xe9\x93\xb6\xe8\xa1\x8c\xe8\xa1\x8c\xe4\xb8\x9asymbool\n                input\xef\xbc\x9a\n                    ABuIndustries.query_factorize_industry_symbol((6, 9, 29),\n                                  market=EMarketTargetType.E_MARKET_TARGET_CN)\n                output\xef\xbc\x9a\n                    [\'sh601939\',\n                     \'sh601398\',\n                     \'sh601288\',\n                     \'sh601328\',\n                     \'sh601009\',\n                     ..........\n                     ..........\n                     \'sz300513\',\n                     \'sz002236\',\n                     \'sz300044\',\n                     \'sz300302\',\n                     \'sh600756\']\n    """"""\n    factorize_df = query_factorize_industry_df(factorize, market=market)\n    if factorize_df is not None:\n        # \xe9\x80\x9a\xe8\xbf\x87industries_market\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe6\x93\x8d\xe4\xbd\x9c\xe5\x8f\xa5\xe6\x9f\x84industries_market_op\n        industries_market_op = industries_market(market=market)\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xaf\xb9\xe8\xb1\xa1op\xe8\x87\xaa\xe5\xb7\xb1\xe5\x8e\xbb\xe4\xbb\x8efactorize_df\xe4\xb8\xad\xe7\xbb\x84\xe8\xa3\x85symbol\xe5\xba\x8f\xe5\x88\x97\n        return industries_market_op.symbol_func(factorize_df)\n    # factorize\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x8a\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe7\xa9\xba\xe5\xba\x8f\xe5\x88\x97\n    return list()\n\n\ndef query_match_industries_symbol(match, market=None):\n    """"""\n    \xe5\xa5\x97\xe6\x8e\xa5query_match_industries_df\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9edf\xe5\x9c\xa8\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x9a\n        query_match_industries_df(factorize, market=market).symbol\n    :param match: \xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe9\x80\x9a\xe9\x85\x8d\xe7\xac\xa6\xef\xbc\x8ceg\xef\xbc\x9a\'\xe5\x8c\xbb\xe8\x8d\xaf*\'\xef\xbc\x8c \'*\xe4\xba\x92\xe8\x81\x94\xe7\xbd\x91*\', \'*\xe7\xa7\x91\xe6\x8a\x80\'\n    :param market: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return:\n            eg\xef\xbc\x9a\n                input\xef\xbc\x9aABuIndustries.query_match_industries_symbol(\'\xe5\x8c\xbb\xe7\x96\x97\', market=EMarketTargetType.E_MARKET_TARGET_CN)\n                output\xef\xbc\x9a\n                        [\'sz002826\',\n                         \'sh600645\',\n                         \'sz300534\',\n                         \'sh600080\',\n                         \'sz300595\',\n                         ..........\n                         ..........\n                         \'sh600518\',\n                         \'sh900904\',\n                         \'sh600993\',\n                         \'sh600332\',\n                         \'sz002589\']\n    """"""\n    match_df = query_match_industries_df(match, market=market)\n    if match_df is not None:\n        # \xe9\x80\x9a\xe8\xbf\x87industries_market\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe6\x93\x8d\xe4\xbd\x9c\xe5\x8f\xa5\xe6\x9f\x84industries_market_op\n        industries_market_op = industries_market(market=market)\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xaf\xb9\xe8\xb1\xa1op\xe8\x87\xaa\xe5\xb7\xb1\xe5\x8e\xbb\xe4\xbb\x8efactorize_df\xe4\xb8\xad\xe7\xbb\x84\xe8\xa3\x85symbol\xe5\xba\x8f\xe5\x88\x97\n        return industries_market_op.symbol_func(match_df)\n    # match\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x8a\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xe7\xa9\xba\xe5\xba\x8f\xe5\x88\x97\n    return list()\n\n\ndef get_industries_panel_from_target(target_symbol, show=False, n_folds=2):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96target_symbol\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe7\xbb\x84\xe6\x88\x90\xe4\xb8\x89\xe7\xbb\xb4pd.Panel\xe5\xaf\xb9\xe8\xb1\xa1\n    :param target_symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param n_folds: \xe8\x8e\xb7\xe5\x8f\x96n_folds\xe5\xb9\xb4\xe5\x8e\x86\xe5\x8f\xb2\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n    :return: (pd.Panel\xe5\xaf\xb9\xe8\xb1\xa1, p_date.swapaxes(\'items\', \'minor\'))\n    """"""\n    df, s_obj = industries_df(target_symbol)\n    if df is not None:\n        # \xe9\x80\x9a\xe8\xbf\x87symbol_func\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuSymbolPd.make_kl_df\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84target_symbols\xe5\xba\x8f\xe5\x88\x97\n        target_symbols = s_obj.symbol_func(df)\n\n        from ..TradeBu.ABuBenchmark import AbuBenchmark\n        # \xe4\xbb\xa5target_symbol\xe5\x81\x9a\xe4\xb8\xba\xe6\xa0\x87\xe5\xb0\xba\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96benchmark\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xbamake_kl_df\xe5\x81\x9a\xe5\x87\x86\xe5\xa4\x87\n        benchmark = AbuBenchmark(target_symbol, n_folds=n_folds)\n        # \xe4\xbc\xa0\xe9\x80\x92\xe5\xba\x8f\xe5\x88\x97target_symbols\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84p_date\xe6\x98\xafpd.Panel\xe5\xaf\xb9\xe8\xb1\xa1\n        p_date = ABuSymbolPd.make_kl_df(target_symbols, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO,\n                                        benchmark=benchmark, n_folds=n_folds)\n        # \xe5\x86\x85\xe9\x83\xa8\xe5\x81\x9a\xe4\xb8\xaa\xe8\xbd\xac\xe8\xbd\xb4\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbf\xe5\xa4\x96\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8\n        p_data_it = p_date.swapaxes(\'items\', \'minor\')\n        if show:\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe8\xa1\x8c\xe4\xb8\x9a\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            data = p_data_it[\'close\']\n            data = ABuScalerUtil.scaler_std(data)\n            data.plot()\n            plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n            plt.ylabel(\'Price\')\n            plt.xlabel(\'Time\')\n        return p_date, p_data_it\n    else:\n        logging.info(\'Industries targetSymbols len = 0\')\n        return None, None\n'"
abupy/MarketBu/ABuMarket.py,5,"b'# coding=utf-8\n""""""\n    \xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x87\xe5\x89\xb2\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe7\xad\x89\xe6\x93\x8d\xe4\xbd\x9c\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\nimport datetime\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..UtilBu import ABuFileUtil\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuDeprecated import AbuDeprecated\nfrom ..CoreBu.ABuEnv import EMarketTargetType, EMarketSubType\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter, zip\nfrom ..CoreBu.ABuFixes import KFold, six\nfrom ..UtilBu.ABuLazyUtil import LazyFunc\nfrom ..MarketBu.ABuSymbol import Symbol, code_to_symbol\nfrom ..MarketBu.ABuSymbolFutures import AbuFuturesCn, AbuFuturesGB\nfrom ..MarketBu.ABuSymbolStock import AbuSymbolCN, AbuSymbolUS, AbuSymbolHK\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n# TODO \xe5\x9c\xa8\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe8\xae\xbe\xe7\xbd\xaeg_use_env_market_set=True\n""""""\xe9\xbb\x98\xe8\xae\xa4False\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xbe\xe7\xbd\xaeTrue, \xe9\x85\x8d\xe5\x90\x88LazyFunc\xe6\x8f\x90\xe9\xab\x98\xe6\x95\x88\xe7\x8e\x87""""""\ng_use_env_market_set = False\n\n""""""\xe5\x9c\xa8market_train_test_split\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93symbol\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\xad\x98\xe5\x82\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d""""""\nK_MARKET_TEST_FN_BASE = os.path.join(ABuEnv.g_project_cache_dir, \'market_test_symbols\')\n""""""\xe5\x9c\xa8market_train_test_split\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xef\xbc\x8c\xe5\x88\x87\xe5\x89\xb2\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93symbol\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\xad\x98\xe5\x82\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d""""""\nK_MARKET_TRAIN_FN_BASE = os.path.join(ABuEnv.g_project_cache_dir, \'market_train_symbols\')\n\n# TODO \xe4\xbb\x8e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe9\x87\x8c\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb9\x8b\xe5\x90\x8e\xe6\x9c\x89\xe5\x8f\x98\xe5\x8a\xa8\xe8\xbf\x98\xe9\x9c\x80\xe8\xa6\x81\xe8\xb7\x9f\xe7\x9d\x80\xe6\x94\xb9\nK_SAND_BOX_US = [\'usTSLA\', \'usNOAH\', \'usSFUN\', \'usBIDU\', \'usAAPL\', \'usGOOG\', \'usWUBA\', \'usVIPS\']\nK_SAND_BOX_CN = [\'sz002230\', \'sz300104\', \'sz300059\', \'sh601766\', \'sh600085\', \'sh600036\',\n                 \'sh600809\', \'sz000002\', \'sz002594\', \'sz002739\']\nK_SAND_BOX_HK = [\'hk03333\', \'hk00700\', \'hk02333\', \'hk01359\', \'hk00656\', \'hk03888\', \'hk02318\']\n\n\n# noinspection PyUnresolvedReferences\nclass MarketMixin(object):\n    """"""\n        \xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x8c\xe8\xa2\xab\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xaeself.symbol_name\xef\xbc\x8c\n        \xe9\x80\x9a\xe8\xbf\x87code_to_symbol\xe5\xb0\x86symbol\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1, \xe9\x80\x9a\xe8\xbf\x87Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n        \xe6\x9f\xa5\xe8\xaf\xa2market\xe5\x92\x8csub_market\n    """"""\n\n    @LazyFunc\n    def _symbol(self):\n        """"""\xe9\x80\x9a\xe8\xbf\x87code_to_symbol\xe5\xb0\x86symbol\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1 LazyFunc""""""\n        if not hasattr(self, \'symbol_name\'):\n            # \xe8\xa2\xab\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xaeself.symbol_name\n            raise NameError(\'must name symbol_name!!\')\n        # \xe9\x80\x9a\xe8\xbf\x87code_to_symbol\xe5\xb0\x86symbol\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1\n        return code_to_symbol(self.symbol_name)\n\n    @LazyFunc\n    def symbol_market(self):\n        """"""\xe6\x9f\xa5\xe8\xaf\xa2self.symbol_name\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b LazyFunc""""""\n        return self._symbol.market\n\n    @LazyFunc\n    def symbol_sub_market(self):\n        """"""\xe6\x9f\xa5\xe8\xaf\xa2self.symbol_name\xe7\x9a\x84\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe4\xbf\xa1\xe6\x81\xaf LazyFunc""""""\n        return self._symbol.sub_market\n\n\ndef split_k_market(k_split, market_symbols=None, market=None):\n    """"""\n    \xe5\xb0\x86market_symbols\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe5\x88\x86\xe6\x88\x90k_split\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n    :param k_split: \xe5\x88\x87\xe5\x88\x86\xe6\x88\x90\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xaa\xe6\x95\xb0int\n    :param market_symbols: \xe5\xbe\x85\xe5\x88\x87\xe5\x89\xb2\xe7\x9a\x84\xe5\x8e\x9f\xe5\xa7\x8bsymbols\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cnone, \xe5\xb0\x86\xe5\x8f\x96market\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe6\x89\x80\xe6\x9c\x89symbol\n    :param market: \xe9\xbb\x98\xe8\xae\xa4None\xef\xbc\x8c\xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n    :return: list\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe9\x83\xbd\xe6\x98\xaf\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe5\xad\x90symbol\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    if market is None:\n        # \xe5\x8f\x96env\xe4\xb8\xad\xe7\x9a\x84ABuEnv.g_market_target\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n    if market_symbols is None:\n        # \xe5\x8f\x96market\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe6\x89\x80\xe6\x9c\x89symbol\n        market_symbols = all_symbol(market=market)\n    if len(market_symbols) < k_split:\n        # \xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8ceg\xef\xbc\x9ak_split\xef\xbc\x9d100\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaflen(market_symbols)\xef\xbc\x9d50\xef\xbc\x8c\xe5\xb0\xb1\xe4\xb8\x8d\xe5\x88\x87\xe5\x89\xb2\xe4\xba\x86\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n        return [[symbol] for symbol in market_symbols]\n\n    # \xe8\xae\xa1\xe7\xae\x97\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x89\xbf\xe8\xbd\xbd\xe7\x9a\x84symbol\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb3eg\xef\xbc\x9a100 \xef\xbc\x8f 5 \xef\xbc\x9d 20\n    sub_symbols_cnt = int(len(market_symbols) / k_split)\n    group_adjacent = lambda a, k: zip(*([iter(a)] * k))\n    # \xe4\xbd\xbf\xe7\x94\xa8lambda\xe5\x87\xbd\xe6\x95\xb0group_adjacent\xe5\xb0\x86market_symbols\xe5\x88\x87\xe5\x89\xb2\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x90\xe7\xb3\xbb\xe5\x88\x97sub_symbols_cnt\xe4\xb8\xaa\n    symbols = list(group_adjacent(market_symbols, sub_symbols_cnt))\n    # \xe5\xb0\x86\xe4\xb8\x8d\xe8\x83\xbd\xe6\x95\xb4\xe9\x99\xa4\xe7\x9a\x84\xe4\xbd\x99\xe6\x95\xb0symbol\xe4\xb8\xaa\xe5\x86\x8d\xe6\x94\xbe\xe8\xbf\x9b\xe5\x8e\xbb\n    residue_ind = -(len(market_symbols) % sub_symbols_cnt) if sub_symbols_cnt > 0 else 0\n    if residue_ind < 0:\n        # \xe6\x89\x80\xe4\xbb\xa5\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\x83\xbd\xe9\x99\xa4\xe5\xb0\xbd\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe5\x88\x87\xe5\x89\xb2\xe7\x9a\x84\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbak_split+1, \xe5\xa4\x96\xe9\x83\xa8\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe8\xae\xa4\xe4\xb8\xba\xe5\xb9\xb6\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\xaf\xe6\xa0\xb9\xe6\x8d\xae\xe6\x9c\x80\xe7\xbb\x88\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe9\x87\x8d\xe5\x88\x86\xe9\x85\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\n        symbols.append(market_symbols[residue_ind:])\n    return symbols\n\n\ndef choice_symbols(count, market_symbols=None, market=None):\n    """"""\n    \xe5\x9c\xa8market_symbols\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe9\x80\x89\xe6\x8b\xa9count\xe4\xb8\xaasymbol\xef\xbc\x8c\xe4\xb8\x8d\xe6\x94\xbe\xe5\x9b\x9e\xe9\x9a\x8f\xe6\x9c\xba\xe7\x9a\x84\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\n    :param count: \xe9\x80\x89\xe6\x8b\xa9count\xe4\xb8\xaa(int)\n    :param market_symbols: \xe5\xa4\x87\xe9\x80\x89symbols\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cNone, \xe5\x88\x99\xe4\xbb\x8e\xe5\x8f\x82\xe6\x95\xb0market\xe9\x80\x89\xe6\x8b\xa9\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x81\x9a\xe4\xb8\xba\xe5\xa4\x87\xe9\x80\x89\n    :param market: \xe9\xbb\x98\xe8\xae\xa4None\xef\xbc\x8c\xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n    :return: \xe9\x9a\x8f\xe6\x9c\xba\xe9\x80\x89\xe6\x8b\xa9count\xe4\xb8\xaasymbol\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    if market is None:\n        # \xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n    if market_symbols is None:\n        # \xe4\xbb\x8e\xe5\x8f\x82\xe6\x95\xb0market\xe9\x80\x89\xe6\x8b\xa9\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x81\x9a\xe4\xb8\xba\xe5\xa4\x87\xe9\x80\x89\n        market_symbols = all_symbol(market=market)\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8d\xe6\x94\xbe\xe5\x9b\x9e\xe9\x9a\x8f\xe6\x9c\xba\xe7\x9a\x84\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\n    return np.random.choice(market_symbols, count, replace=False)\n\n\ndef choice_symbols_with_replace(count, market_symbols=None, market=None):\n    """"""\n    \xe5\x9c\xa8market_symbols\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe9\x80\x89\xe6\x8b\xa9count\xe4\xb8\xaasymbol\xef\xbc\x8c\xe6\x9c\x89\xe6\x94\xbe\xe5\x9b\x9e\xe9\x9a\x8f\xe6\x9c\xba\xe7\x9a\x84\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\n    :param count: \xe9\x80\x89\xe6\x8b\xa9count\xe4\xb8\xaa(int)\n    :param market_symbols: \xe5\xa4\x87\xe9\x80\x89symbols\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cNone, \xe5\x88\x99\xe4\xbb\x8e\xe5\x8f\x82\xe6\x95\xb0market\xe9\x80\x89\xe6\x8b\xa9\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x81\x9a\xe4\xb8\xba\xe5\xa4\x87\xe9\x80\x89\n    :param market: \xe9\xbb\x98\xe8\xae\xa4None\xef\xbc\x8c\xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n    :return: \xe9\x9a\x8f\xe6\x9c\xba\xe9\x80\x89\xe6\x8b\xa9count\xe4\xb8\xaasymbol\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\n    """"""\n\n    if market is None:\n        market = ABuEnv.g_market_target\n    if market_symbols is None:\n        market_symbols = all_symbol(market=market)\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x89\xe6\x94\xbe\xe5\x9b\x9e\xe9\x9a\x8f\xe6\x9c\xba\xe7\x9a\x84\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8d\xb3replace=True\n    return np.random.choice(market_symbols, count, replace=True)\n\n\ndef _all_us_symbol(index=False):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87AbuSymbolUS().all_symbol\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbe\x8e\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\n    :return:\n    """"""\n\n    # noinspection PyProtectedMember\n    if ABuEnv._g_enable_example_env_ipython:\n        return K_SAND_BOX_US\n    return AbuSymbolUS().all_symbol(index=index)\n\n\ndef _all_cn_symbol(index=False):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87AbuSymbolCN().all_symbol\xe8\x8e\xb7\xe5\x8f\x96A\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\n    :return:\n    """"""\n    # noinspection PyProtectedMember\n    if ABuEnv._g_enable_example_env_ipython:\n        return K_SAND_BOX_CN\n    return AbuSymbolCN().all_symbol(index=index)\n\n\ndef _all_hk_symbol(index=False):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87AbuSymbolHK().all_symbol\xe8\x8e\xb7\xe5\x8f\x96A\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\n    :return:\n    """"""\n    # noinspection PyProtectedMember\n    if ABuEnv._g_enable_example_env_ipython:\n        return K_SAND_BOX_HK\n    return AbuSymbolHK().all_symbol(index=index)\n\n\ndef _all_futures_cn():\n    """"""\n    AbuFuturesCn().symbol\xe8\x8e\xb7\xe5\x8f\x96\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe5\x8f\x96\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x88\xe7\xba\xa6\xe4\xbb\xa3\xe7\xa0\x81\n    :return:\n    """"""\n    return AbuFuturesCn().symbol\n\n\ndef _all_futures_gb():\n    """"""\n    AbuFuturesGB().symbol\xe8\x8e\xb7\xe5\x8f\x96\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x8cLME\xef\xbc\x8cCBOT\xef\xbc\x8cCOMEX\n    :return:\n    """"""\n    return AbuFuturesGB().symbol\n\n\ndef _all_tc_symbol():\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\x81\xe7\xb1\xbbsymbol\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe5\x8f\x96\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe4\xb8\x8e\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe6\x89\xa9\xe5\xb1\x95\xe5\x85\xb6\xe5\xae\x83\xe5\xb8\x81\xe7\xa7\x8d\n    :return:\n    """"""\n    return [\'btc\', \'ltc\']\n\n\ndef all_symbol(market=None, ss=False, index=False, value=True):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xae\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe4\xbb\xa3\xe7\xa0\x81\n    :param market: \xe9\xbb\x98\xe8\xae\xa4None\xef\xbc\x8c\xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n    :param ss: \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x86\xe8\xbf\x94\xe5\x9b\x9e\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8pd.Series\xe5\x8c\x85\xe8\xa3\x85\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\xe5\xa4\xa7\xe7\x9b\x98symbol\n    :param value: \xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa6\x82\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cSymbol\xe8\xbd\xac\xe6\x8d\xa2\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :return:\n    """"""\n    if market is None:\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n\n    if market == EMarketTargetType.E_MARKET_TARGET_US:\n        symbols = _all_us_symbol(index)\n    elif market == EMarketTargetType.E_MARKET_TARGET_CN:\n        symbols = _all_cn_symbol(index)\n    elif market == EMarketTargetType.E_MARKET_TARGET_HK:\n        symbols = _all_hk_symbol(index)\n    elif market == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN:\n        symbols = _all_futures_cn()\n    elif market == EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL:\n        symbols = _all_futures_gb()\n    elif market == EMarketTargetType.E_MARKET_TARGET_TC:\n        symbols = _all_tc_symbol()\n    else:\n        raise TypeError(\'JUST SUPPORT EMarketTargetType!\')\n\n    # \xe5\x9c\xa8\xe5\x87\xba\xe5\x8f\xa3\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe4\xbf\x9d\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7, \xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x86\x85\xe9\x83\xa8_all_xx_symbol\xe4\xb8\xad\xe4\xb9\x9f\xe8\xa6\x81\xe5\xb0\xbd\xe9\x87\x8f\xe4\xbf\x9d\xe8\xaf\x81\xe5\x94\xaf\xe4\xb8\x80\n    symbols = list(set(symbols))\n\n    if value:\n        """"""\n            \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafSymbol\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe8\xbf\x98\xe5\x8e\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x8c\xe5\xb0\xbd\xe9\x87\x8f\xe5\x9c\xa8\xe4\xb8\x8a\xe9\x9d\xa2\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84symbols\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\n            \xe4\xb8\x8d\xe8\xa6\x81\xe5\x9c\xa8\xe4\xb8\x8a\xe9\x9d\xa2\xe6\x9e\x84\xe9\x80\xa0symbol\xef\xbc\x8c\xe6\xb5\xaa\xe8\xb4\xb9\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbc\x9a\xe5\x9c\xa8\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe9\x80\xbb\xe8\xbe\x91\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87code_to_symbol\n            \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\n        """"""\n        symbols = [sb.value if isinstance(sb, Symbol) else sb for sb in symbols]\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0ss\xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x86\xe8\xbf\x94\xe5\x9b\x9e\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8pd.Series\xe5\x8c\x85\xe8\xa3\x85\n    return pd.Series(symbols) if ss else symbols\n\n\ndef query_symbol_market(target_symbol):\n    """"""\n    \xe6\x9f\xa5\xe8\xaf\xa2target_symbol\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xaf\xb9\xe8\xb1\xa1EMarketTargetType\n    :param target_symbol: \xe6\x94\xaf\xe6\x8c\x81Symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x92\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\n    :return: EMarketTargetType\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    symbol_obj = None\n    if target_symbol is None:\n        symbol_obj = None\n    elif isinstance(target_symbol, Symbol):\n        symbol_obj = target_symbol\n    elif isinstance(target_symbol, six.string_types):\n        try:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe9\x80\x9a\xe8\xbf\x87code_to_symbol\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb\xe5\x9e\x8b\n            symbol_obj = code_to_symbol(target_symbol)\n        except:\n            return None\n    if symbol_obj is not None:\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\n        return symbol_obj.market\n    return None\n\n\ndef market_train_test_split(n_folds, market_symbols, market=None):\n    """"""\n    \xe5\x88\x87\xe5\x89\xb2\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe8\xae\xad\xe7\xbb\x83\xe5\x8c\x96\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n    :param n_folds: \xe5\x88\x87\xe5\x89\xb2\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0KFold\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n    :param market_symbols: \xe5\xbe\x85\xe5\x88\x87\xe5\x88\x86\xe7\x9a\x84\xe6\x80\xbbmarket_symbols\n    :param market: \xe5\xbe\x85\xe5\x88\x87\xe5\x88\x86\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86symbols\xe6\x95\xb0\xe6\x8d\xae\n    """"""\n    market_symbols, test_symbols = _do_market_train_test_split(n_folds=n_folds, market_symbols=market_symbols)\n\n    if market is None:\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n    market_name = market.value\n    # \xe5\x8c\xb9\xe9\x85\x8d\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe7\xbb\x84\xe6\x88\x90\xe5\xb8\x82\xe5\x9c\xba\xe5\x90\x8d\xe7\xa7\xb0\n    last_path_train = \'{}_{}\'.format(K_MARKET_TRAIN_FN_BASE, market_name)\n    last_path_test = \'{}_{}\'.format(K_MARKET_TEST_FN_BASE, market_name)\n\n    tt = datetime.datetime.now().strftime(\'%Y_%m_%d_%H_%M_%S_%f\')\n    if ABuFileUtil.file_exist(last_path_train):\n        # \xe4\xb9\x8b\xe5\x89\x8d\xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x98\xe5\x9c\xa8\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x88\x87\xe5\x89\xb2\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\x81\x9a\xe8\xae\xb0\xe5\x8f\xb7\xef\xbc\x8c\xe5\x8f\xa6\xe4\xbf\x9d\xe5\xad\x98\xe8\xb5\xb7\xe6\x9d\xa5\n        store_train_name = \'{}_{}\'.format(last_path_train, tt)\n        os.rename(last_path_train, store_train_name)\n    if ABuFileUtil.file_exist(last_path_test):\n        # \xe4\xb9\x8b\xe5\x89\x8d\xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x98\xe5\x9c\xa8\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\x88\x87\xe5\x89\xb2\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\x81\x9a\xe8\xae\xb0\xe5\x8f\xb7\xef\xbc\x8c\xe5\x8f\xa6\xe4\xbf\x9d\xe5\xad\x98\xe8\xb5\xb7\xe6\x9d\xa5\n        store_test_name = \'{}_{}\'.format(last_path_test, tt)\n        os.rename(last_path_test, store_test_name)\n\n    # \xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    ABuFileUtil.dump_pickle(test_symbols, last_path_test)\n    # \xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\n    ABuFileUtil.dump_pickle(market_symbols, last_path_train)\n    # \xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86symbols\xe6\x95\xb0\xe6\x8d\xae\n    return market_symbols\n\n\ndef market_last_split_test(market=None):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86symbols\xe6\x95\xb0\xe6\x8d\xae\n    :param market: \xe5\xbe\x85\xe8\x8e\xb7\xe5\x8f\x96\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86symbols\xe6\x95\xb0\xe6\x8d\xae\n    """"""\n    if market is None:\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n    market_name = market.value\n    # \xe5\x8c\xb9\xe9\x85\x8d\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe7\xbb\x84\xe6\x88\x90\xe5\xb8\x82\xe5\x9c\xba\xe5\x90\x8d\xe7\xa7\xb0\n    last_path_test = \'{}_{}\'.format(K_MARKET_TEST_FN_BASE, market_name)\n\n    if not ABuFileUtil.file_exist(last_path_test):\n        raise RuntimeError(\'g_enable_last_split_test not fileExist(fn)!\')\n    market_symbols = ABuFileUtil.load_pickle(last_path_test)\n    return market_symbols\n\n\ndef market_last_split_train(market=None):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86symbols\xe6\x95\xb0\xe6\x8d\xae\n    :param market: \xe5\xbe\x85\xe8\x8e\xb7\xe5\x8f\x96\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8ceg\xef\xbc\x9aEMarketTargetType.E_MARKET_TARGET_US\n    :return: \xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\xac\xa1\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86symbols\xe6\x95\xb0\xe6\x8d\xae\n    """"""\n    if market is None:\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n    market_name = market.value\n    # \xe5\x8c\xb9\xe9\x85\x8d\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe7\xbb\x84\xe6\x88\x90\xe5\xb8\x82\xe5\x9c\xba\xe5\x90\x8d\xe7\xa7\xb0\n    last_path_train = \'{}_{}\'.format(K_MARKET_TRAIN_FN_BASE, market_name)\n\n    if not ABuFileUtil.file_exist(last_path_train):\n        raise RuntimeError(\'g_enable_last_split_train not ZCommonUtil.fileExist(fn)!\')\n    market_symbols = ABuFileUtil.load_pickle(last_path_train)\n    return market_symbols\n\n\ndef _do_market_train_test_split(n_folds=10, market_symbols=None, shuffle=True, market=None):\n    """"""\n    \xe5\x88\x86\xe5\x89\xb2\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n    :param market_symbols\xef\xbc\x8c\xe5\xa4\x87\xe9\x80\x89symbols\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cNone, \xe5\x88\x99\xe4\xbb\x8e\xe5\x8f\x82\xe6\x95\xb0market\xe9\x80\x89\xe6\x8b\xa9\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x81\x9a\xe4\xb8\xba\xe5\xa4\x87\xe9\x80\x89\n    :param n_folds: \xe5\x88\x87\xe5\x89\xb2\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8cKFold\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n    :param shuffle: \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe6\x89\x93\xe4\xb9\xb1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n    :param market: \xe9\xbb\x98\xe8\xae\xa4None\xef\xbc\x8c\xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n    :return:\n    """"""\n    if market is None:\n        # \xe5\xa6\x82None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        market = ABuEnv.g_market_target\n\n    if market_symbols is None:\n        # \xe5\xa6\x82\xe6\x9e\x9cNone, \xe5\x88\x99\xe4\xbb\x8e\xe5\x8f\x82\xe6\x95\xb0market\xe9\x80\x89\xe6\x8b\xa9\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x81\x9a\xe4\xb8\xba\xe5\xa4\x87\xe9\x80\x89\n        market_symbols = all_symbol(market=market, ss=True)\n\n    if not isinstance(market_symbols, np.ndarray):\n        # \xe4\xbd\xbf\xe7\x94\xa8np.array\xe5\x8c\x85\xe8\xa3\x85\n        market_symbols = np.array(market_symbols)\n\n    n_folds = n_folds if len(market_symbols) > n_folds else len(market_symbols)\n    # \xe4\xbd\xbf\xe7\x94\xa8KFold\xe5\xaf\xb9market_symbols\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x8b\x86\xe5\x88\x86\n    kf = KFold(len(market_symbols), n_folds=n_folds, shuffle=shuffle)\n    train = None\n    test = None\n    for train_index, test_index in kf:\n        train, test = market_symbols[train_index], market_symbols[test_index]\n        # \xe6\x9a\x82\xe6\x97\xb6\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe7\xbb\x84\xe5\xb0\xb1\xe5\xa4\x9f\xe4\xba\x86\xef\xbc\x8c\xe5\xa4\x9a\xe5\xb1\x82\xe7\xba\xa7\xe5\x88\x87\xe5\x89\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x98\xe6\x9c\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbb\xa3\xe7\xa0\x81\xe8\xbf\x81\xe7\xa7\xbb\n        break\n    if train is not None and test is not None:\n        # noinspection PyUnresolvedReferences\n        return train.tolist(), test.tolist()\n    return list(), list()\n\n\ndef is_in_sand_box(symbol):\n    """"""\xe5\x88\xa4\xe5\xae\x9asymbol\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xaf\xe6\x8c\x81\xe9\x87\x8c\xe9\x9d\xa2""""""\n    cs = code_to_symbol(symbol, rs=False)\n    if cs is None:\n        return False\n    if cs.is_futures() or cs.is_tc():\n        # \xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x8c\xe6\x95\xb4\xe6\x9c\x9f\xe8\xb4\xa7\xe5\x92\x8c\xe7\x94\xb5\xe5\xad\x90\xe8\xb4\xa7\xe5\xb8\x81\xe5\xb8\x82\xe5\x9c\xba\n        return True\n    if symbol in K_SAND_BOX_CN \\\n            or symbol in K_SAND_BOX_US \\\n            or symbol in K_SAND_BOX_HK:\n        # A\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\n        return True\n    return False\n\n\n""""""\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8aDeprecated \xe6\x97\xa7\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a""""""\n_rom_dir = ABuEnv.g_project_rom_data_dir\n_stock_code_cn = os.path.join(_rom_dir, \'stock_code_cn.txt\')\n_stock_code_us = os.path.join(_rom_dir, \'stock_code_us.txt\')\n_stock_code_hk = os.path.join(_rom_dir, \'stock_code_hk.txt\')\n\n\n@AbuDeprecated()\ndef _parse_code(line, index):\n    if ABuEnv.g_is_py3:\n        line = line.decode()\n    _slice = line.split(\'|\')\n    market = _slice[0]\n    is_index = _slice[1] == 4\n    code = _slice[2]\n    if market == \'us\':\n        m_type = AbuSymbolUS().query_symbol_sub_market(code)\n    else:\n        m_type = EMarketSubType(market)\n    if m_type is not None and not (not index and is_index):\n        return Symbol(ABuEnv.g_market_target, m_type, code)\n\n\n@AbuDeprecated(\'only read old symbol, miss update!!!\')\ndef _all_us_symbol_deprecated(index=False):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbe\x8e\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\n    :return:\n    """"""\n    with open(_stock_code_us, \'rb\') as us_f:\n        return list(filter(lambda x: x is not None, [_parse_code(line, index) for line in us_f.readlines()]))\n\n\n@AbuDeprecated(\'only read old symbol, miss update!!!\')\ndef _all_cn_symbol_deprecated(index=False):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96A\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\n    :return:\n    """"""\n    with open(_stock_code_cn, \'rb\') as cn_f:\n        return list(filter(lambda x: x is not None, [_parse_code(line, index) for line in cn_f.readlines()]))\n\n\n@AbuDeprecated(\'only read old symbol, miss update!!!\')\ndef _all_hk_symbol_deprecated(index=False):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe6\xb8\xaf\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\n    :param index: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe6\x8c\x87\xe6\x95\xb0\n    :return:\n    """"""\n    with open(_stock_code_hk, \'rb\') as hk_f:\n        return list(filter(lambda x: x is not None, [_parse_code(line, index) for line in hk_f.readlines()]))\n'"
abupy/MarketBu/ABuMarketDrawing.py,17,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x98\xe5\x88\xb6\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport itertools\nimport logging\nimport os\nfrom collections import Iterable\nfrom math import pi\n\nimport bokeh.plotting as bp\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom ..CoreBu import ABuEnv\nfrom ..MarketBu import ABuSymbolPd\nfrom ..UtilBu import ABuDateUtil\nfrom ..UtilBu import ABuFileUtil\nfrom ..UtilBu import ABuScalerUtil\nfrom ..CoreBu.ABuFixes import partial\n\n# TODO \xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe7\xba\xa2\xe6\xb6\xa8\xe7\xbb\xbf\xe8\xb7\x8c\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe7\xbb\xbf\xe6\xb6\xa8\xe7\xba\xa2\xe8\xb7\x8c\n__colorup__ = ""red""\n__colordown__ = ""green""\n\n""""""\xe9\xa2\x84\xe5\xa4\x87\xe9\xa2\x9c\xe8\x89\xb2\xe5\xba\x8f\xe5\x88\x97\xe9\x9b\x86\xef\xbc\x8c\xe8\xb6\x85\xe5\x87\xba\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe9\x87\x8f\xe5\xba\x94\xe4\xbd\xbf\xe7\x94\xa8itertools.cycle\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x98\xe5\x88\xb6""""""\nK_PLT_MAP_STYLE = [\n    \'b\', \'c\', \'g\', \'k\', \'m\', \'r\', \'y\', \'w\']\n\n""""""\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96png\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84""""""\nK_SAVE_CACHE_PNG_ROOT = os.path.join(ABuEnv.g_project_data_dir, \'save_png\')\n""""""\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96html\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84""""""\nK_SAVE_CACHE_HTML_ROOT = os.path.join(ABuEnv.g_project_data_dir, \'save_html\')\n\n""""""\xe6\x9a\x82\xe6\x97\xb6\xe5\x8f\xaa\xe5\x81\x9a\xe5\x85\xa8\xe6\x8d\xae\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xbb\xe9\x87\x8f\xe5\x8f\xaa\xe7\x94\xbb\xe4\xbb\xb7\xe6\xa0\xbc""""""\ng_only_draw_price = False\n\n\ndef plot_candle_from_order(order, date_ext=120, day_sum=False, html_bk=False, save=False):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaeorder\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe5\x9c\xa8\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8a\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\n    :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param date_ext: int\xe5\xaf\xb9\xe8\xb1\xa1 eg. \xe5\xa6\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa82015-06-01\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\xa6\x82date_ext\xef\xbc\x9d120\xef\xbc\x8c\xe6\x8b\xa9start\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8120\xe5\xa4\xa9\xef\xbc\x8cend\xe5\x90\x91\xe5\x90\x8e\xe6\x8e\xa8120\xe5\xa4\xa9\n    :param day_sum: \xe7\xab\xaf\xe7\xba\xbf\xe5\x9b\xbe matplotlib\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89\xe4\xba\x9b\xe6\x9c\x89bug\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\x8d\xe5\xaf\xb9\n    :param html_bk: \xe4\xbd\xbf\xe7\x94\xa8bk\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84k\xe5\x9b\xbe\xef\xbc\x8c\xe5\x9c\xa8\xe7\xbd\x91\xe9\xa1\xb5\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe4\xba\x92\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n    :return:\n    """"""\n    if not isinstance(order, (pd.DataFrame, pd.Series)) and order.shape[0] > 0:\n        # order\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xafpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1or pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n        raise TypeError(\'order must DataFrame here!!\')\n\n    is_df = isinstance(order, pd.DataFrame)\n    if is_df and order.shape[0] == 1:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8f\xaa\xe6\x9c\x891\xe8\xa1\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x88\x99\xe5\x8f\x98\xe6\x88\x90pd.Series\n        is_df = False\n        # \xe9\x80\x9a\xe8\xbf\x87iloc\xe5\x8d\xb3\xe5\x8f\x98\xe6\x88\x90pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n        # noinspection PyUnresolvedReferences\n        order = order.iloc[0]\n\n    def plot_from_series(p_order, p_want_df):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xaeorder\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\n        :param p_order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n        :param p_want_df: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x94\xe5\x9b\x9e\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\n        """"""\n\n        # \xe7\xa1\xae\xe5\xae\x9a\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n        target_symbol_inner = p_order[\'symbol\']\n        view_index_inner = None\n        # \xe5\x8d\x95\xe5\xad\x90\xe9\x83\xbd\xe5\xbf\x85\xe9\xa1\xbb\xe6\x9c\x89\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\n        start = ABuDateUtil.fmt_date(p_order[\'buy_date\'])\n        # \xe9\x80\x9a\xe8\xbf\x87date_ext\xe7\xa1\xae\xe5\xae\x9astart\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb9\xb0\xe4\xba\xba\xe5\x8d\x95\xe5\xad\x90\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8date_ext\xe5\xa4\xa9\n        start = ABuDateUtil.begin_date(date_ext, date_str=start, fix=False)\n        if p_order[\'sell_type\'] != \'keep\':\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe9\x80\x9a\xe8\xbf\x87sell_date\xef\xbc\x8cdate_ext\xe7\xa1\xae\xe5\xae\x9aend\xe6\x97\xb6\xe9\x97\xb4\n            view_index_inner = [pd.to_datetime(str(p_order[\'buy_date\'])), pd.to_datetime(str(p_order[\'sell_date\']))]\n            end = ABuDateUtil.fmt_date(p_order[\'sell_date\'])\n            # -date_ext \xe5\x90\x91\xe5\x89\x8d\n            end = ABuDateUtil.begin_date(-date_ext, date_str=end, fix=False)\n        else:\n            end = None\n\n        try:\n            df = plot_candle_from_symbol(target_symbol_inner, start=start, end=end, day_sum=day_sum,\n                                         html_bk=html_bk,\n                                         view_index=view_index_inner, save=save)\n        except Exception as e:\n            logging.exception(e)\n            df = None\n        if p_want_df:\n            return df\n\n    if not is_df:\n        return plot_from_series(order, p_want_df=True)\n    else:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xa4\x9a\xe4\xb8\xaaorder\xef\xbc\x8c\xe6\x8e\x92\xe6\x9f\xa5\xe4\xb8\x80\xe4\xb8\x8b\xe6\xb2\xa1\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\n        order = order[order[\'result\'] != 0]\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe6\x9c\x891\xe4\xb8\xaaorder\xef\xbc\x8c\xe4\xbb\x8d\xe7\x84\xb6\xe8\xbf\x94\xe5\x9b\x9eplot_from_series\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\x8c\x83\xe5\x9b\xb4\xe6\x95\xb0\xe6\x8d\xae\n        want_df = len(order) == 1\n        # \xe5\xa4\x9a\xe4\xb8\xaaorder\xe8\xbf\xad\xe4\xbb\xa3\xe6\x89\xa7\xe8\xa1\x8cplot_from_series\n        keep_df = order.apply(plot_from_series, axis=1, args=(want_df,))\n        if want_df:\n            return keep_df\n\n\ndef plot_candle_from_symbol(target_symbol, n_folds=2, start=None, end=None, day_sum=False, html_bk=False,\n                            view_index=None, save=False):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaetarget_symbol\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe5\x9c\xa8\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8a\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\n    :param target_symbol: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb8\x80\xe4\xb8\xaasymbol\n    :param n_folds: \xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xaeint\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param day_sum: \xe7\xab\xaf\xe7\xba\xbf\xe5\x9b\xbe matplotlib\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89\xe4\xba\x9b\xe6\x9c\x89bug\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\x8d\xe5\xaf\xb9\n    :param html_bk: \xe4\xbd\xbf\xe7\x94\xa8bk\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84k\xe5\x9b\xbe\xef\xbc\x8c\xe5\x9c\xa8\xe7\xbd\x91\xe9\xa1\xb5\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe4\xba\x92\n    :param view_index: \xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9b\xbe\xe4\xb8\xad\xe9\x87\x8d\xe7\x82\xb9\xe6\xa0\x87\xe8\xae\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\n        eg. view_index_inner = [pd.to_datetime(str(p_order[\'buy_date\'])), pd.to_datetime(str(p_order[\'sell_date\']))]\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n    :return:\n    """"""\n    # \xe9\x80\x9a\xe8\xbf\x87make_kl_df\xe8\x8e\xb7\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\n    kl_pd = ABuSymbolPd.make_kl_df(target_symbol, n_folds=n_folds, start=start, end=end)\n    if kl_pd is None or kl_pd.shape[0] == 0:\n        logging.debug(target_symbol + \': has net error in data\')\n        return\n    # \xe7\xbb\x98\xe5\x88\xb6\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9a\x84kl_pd\xe5\xaf\xb9\xe8\xb1\xa1\n    plot_candle_form_klpd(kl_pd, day_sum, html_bk, view_index, save=save)\n\n    if isinstance(view_index, Iterable) and len(view_index) == 2:\n        """"""\n            \xe5\x8d\xb3\xe5\xbd\xa2\xe5\xa6\x82[pd.to_datetime(str(p_order[\'buy_date\'])), pd.to_datetime(str(p_order[\'sell_date\']))]\n            \xe6\x88\xaa\xe5\x8f\x96\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9b\xb4\xe5\x88\xb0\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x96\xe5\x87\xba\xe8\xbf\x99\xe4\xb8\x80\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        # noinspection PyUnresolvedReferences\n        return kl_pd.loc[view_index[0]:view_index[1]]\n\n    return kl_pd\n\n\n# \xe5\x81\x8f\xe5\x87\xbd\xe6\x95\xb0\xe6\x9e\x84\xe6\x88\x90\xe5\x8f\xaf\xe4\xba\xa4\xe6\x8d\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x96\xb9\xe6\xb3\x95\nplot_html_symbol = partial(plot_candle_from_symbol, html_bk=True)\n# \xe5\x81\x8f\xe5\x87\xbd\xe6\x95\xb0\xe6\x9e\x84\xe6\x88\x90\xe4\xb8\x8d\xe5\x8f\xaf\xe4\xba\xa4\xe6\x8d\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x96\xb9\xe6\xb3\x95\nplot_symbol = partial(plot_candle_from_symbol, html_bk=False)\n\n\ndef plot_candle_form_klpd(kl_pd, day_sum=False, html_bk=False, view_indexs=None, save=False, name=None):\n    """"""\n\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param day_sum: \xe7\xab\xaf\xe7\xba\xbf\xe5\x9b\xbe matplotlib\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89\xe4\xba\x9b\xe6\x9c\x89bug\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\x8d\xe5\xaf\xb9\n    :param html_bk: \xe4\xbd\xbf\xe7\x94\xa8bk\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84k\xe5\x9b\xbe\xef\xbc\x8c\xe5\x9c\xa8\xe7\xbd\x91\xe9\xa1\xb5\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe4\xba\x92\n    :param view_indexs: \xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9b\xbe\xe4\xb8\xad\xe9\x87\x8d\xe7\x82\xb9\xe6\xa0\x87\xe8\xae\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\n        eg. view_index_inner = [pd.to_datetime(str(p_order[\'buy_date\'])), pd.to_datetime(str(p_order[\'sell_date\']))]\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n    :param name: \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xaename\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96titile\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x96kl_pd.name\xef\xbc\x8c\xe5\x8d\xb3symbol name\n    """"""\n    fn = name if name else kl_pd.name if hasattr(kl_pd, \'name\') else \'stock\'\n    plot_candle_stick(kl_pd.index, kl_pd[\'open\'].values, kl_pd[\'high\'].values, kl_pd[\'low\'].values,\n                      kl_pd[\'close\'].values, kl_pd[\'volume\'].values, view_indexs,\n                      fn, day_sum, html_bk, save)\n\n\ndef plot_candle_stick(date, p_open, high, low, close, volume, view_index, symbol, day_sum, html_bk, save, minute=False):\n    """"""\n    \xe5\xb1\x95\xe5\xbc\x80\xe5\x90\x84\xe4\xb8\xaak\xe5\x9b\xbe\xe7\xbb\x98\xe5\x88\xb6\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x98\xe5\x88\xb6\n    :param date: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8cpd.DataFrame.index\xe5\xaf\xb9\xe8\xb1\xa1\n    :param p_open: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param high: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param low: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param close: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param volume: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param view_index: \xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9b\xbe\xe4\xb8\xad\xe9\x87\x8d\xe7\x82\xb9\xe6\xa0\x87\xe8\xae\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\n        eg. view_index_inner = [pd.to_datetime(str(p_order[\'buy_date\'])), pd.to_datetime(str(p_order[\'sell_date\']))]\n    :param symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param day_sum: \xe7\xab\xaf\xe7\xba\xbf\xe5\x9b\xbe matplotlib\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89\xe4\xba\x9b\xe6\x9c\x89bug\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\x8d\xe5\xaf\xb9\n    :param html_bk: \xe4\xbd\xbf\xe7\x94\xa8bk\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84k\xe5\x9b\xbe\xef\xbc\x8c\xe5\x9c\xa8\xe7\xbd\x91\xe9\xa1\xb5\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe4\xba\x92\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n    :param minute: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe7\xbb\x98\xe5\x88\xb6\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe5\x9b\xbe\n    """"""\n    if html_bk is False:\n        # \xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x8d\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84\n        _do_plot_candle(date, p_open, high, low, close, volume, view_index, symbol, day_sum, save, minute)\n    else:\n        # \xe9\x80\x9a\xe8\xbf\x87bk\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84\n        _do_plot_candle_html(date, p_open, high, low, close, symbol, save)\n\n\ndef _do_plot_candle_html(date, p_open, high, low, close, symbol, save):\n    """"""\n    bk\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84k\xe7\xba\xbf\xe5\x9b\xbe\n    :param date: \xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8cpd.DataFrame.index\xe5\xaf\xb9\xe8\xb1\xa1\n    :param p_open: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param high: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param low: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param close: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n    """"""\n    mids = (p_open + close) / 2\n    spans = abs(close - p_open)\n\n    inc = close > p_open\n    dec = p_open > close\n\n    w = 24 * 60 * 60 * 1000\n\n    t_o_o_l_s = ""pan,wheel_zoom,box_zoom,reset,save""\n\n    p = bp.figure(x_axis_type=""datetime"", tools=t_o_o_l_s, plot_width=1280, title=symbol)\n    p.xaxis.major_label_orientation = pi / 4\n    p.grid.grid_line_alpha = 0.3\n\n    p.segment(date.to_datetime(), high, date.to_datetime(), low, color=""black"")\n    # noinspection PyUnresolvedReferences\n    p.rect(date.to_datetime()[inc], mids[inc], w, spans[inc], fill_color=__colorup__, line_color=__colorup__)\n    # noinspection PyUnresolvedReferences\n    p.rect(date.to_datetime()[dec], mids[dec], w, spans[dec], fill_color=__colordown__, line_color=__colordown__)\n\n    bp.show(p)\n    if save:\n        save_dir = os.path.join(K_SAVE_CACHE_HTML_ROOT, ABuDateUtil.current_str_date())\n        html_name = os.path.join(save_dir, symbol + "".html"")\n        ABuFileUtil.ensure_dir(html_name)\n        bp.output_file(html_name, title=symbol)\n\n\ndef _do_plot_candle(date, p_open, high, low, close, volume, view_index, symbol, day_sum, save, minute):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x8d\xe5\x8f\xaf\xe4\xba\xa4\xe4\xba\x92\xe7\x9a\x84k\xe7\xba\xbf\xe5\x9b\xbe\n    param date: \xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8cpd.DataFrame.index\xe5\xaf\xb9\xe8\xb1\xa1\n    :param p_open: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param high: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param low: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param close: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param volume: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cnp.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param day_sum: \xe7\xab\xaf\xe7\xba\xbf\xe5\x9b\xbe matplotlib\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe6\x9c\x89\xe4\xba\x9b\xe6\x9c\x89bug\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\x8d\xe5\xaf\xb9\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n    :param minute: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe7\xbb\x98\xe5\x88\xb6\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe5\x9b\xbe\n    """"""\n\n    # \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x85\xe9\x83\xa8import\xe4\xb8\x8d\xe7\x84\xb6\xe6\xaf\x8f\xe6\xac\xa1import abupy\xe9\x83\xbd\xe6\x9c\x89warning\xef\xbc\x8c\xe7\x89\xb9\xe5\x88\xab\xe6\x98\xaf\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xbe\x88\xe7\x83\xa6\xe4\xba\xba\n    try:\n        # noinspection PyUnresolvedReferences, PyDeprecation\n        import matplotlib.finance as mpf\n    except ImportError:\n        # 2.2 \xe6\x89\x8d\xe4\xbc\x9a\xe6\x9c\x89\n        # noinspection PyUnresolvedReferences, PyDeprecation\n        import matplotlib.mpl_finance as mpf\n\n    if not g_only_draw_price:\n        # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x83\xbd\xe7\xbb\x98\xe5\x88\xb6\n        # noinspection PyTypeChecker\n        fig, (ax1, ax2) = plt.subplots(2, sharex=True, figsize=(20, 12))\n    else:\n        # \xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe4\xbb\xb7\xe6\xa0\xbc\n        fig, ax1 = plt.subplots(figsize=(6, 6))\n    if day_sum:\n        # \xe7\xab\xaf\xe7\xba\xbf\xe5\x9b\xbe\xe7\xbb\x98\xe5\x88\xb6\n        qutotes = []\n        for index, (d, o, c, l, h) in enumerate(zip(date, p_open, close, low, high)):\n            d = index if minute else mpf.date2num(d)\n            val = (d, o, c, l, h)\n            qutotes.append(val)\n        # plot_day_summary_oclh\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe4\xb8\x8empf.candlestick_ochl\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe5\x8d\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\xa1\xba\xe5\xba\x8f\xe4\xb8\xba\xe5\xbc\x80\xe6\x94\xb6\xe4\xbd\x8e\xe9\xab\x98\n        mpf.plot_day_summary_oclh(ax1, qutotes, ticksize=5, colorup=__colorup__, colordown=__colordown__)\n    else:\n        # k\xe7\xba\xbf\xe5\x9b\xbe\xe7\xbb\x98\xe5\x88\xb6\n        qutotes = []\n        for index, (d, o, c, h, l) in enumerate(zip(date, p_open, close, high, low)):\n            d = index if minute else mpf.date2num(d)\n            val = (d, o, c, h, l)\n            qutotes.append(val)\n        # mpf.candlestick_ochl\xe5\x8d\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\xa1\xba\xe5\xba\x8f\xe4\xb8\xba\xe5\xbc\x80\xe6\x94\xb6\xe9\xab\x98\xe4\xbd\x8e\n        mpf.candlestick_ochl(ax1, qutotes, width=0.6, colorup=__colorup__, colordown=__colordown__)\n\n    if not g_only_draw_price:\n        # \xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x98\xe5\x88\xb6\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n        ax1.set_title(symbol)\n        ax1.set_ylabel(\'ochl\')\n        ax1.grid(True)\n        if not minute:\n            ax1.xaxis_date()\n        if view_index is not None:\n            # \xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x98\xe5\x88\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe9\x87\x8d\xe7\x82\xb9\xe7\xaa\x81\xe5\x87\xba\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\n            e_list = date.tolist()\n            # itertools.cycle\xe5\xbe\xaa\xe7\x8e\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x87\xe9\x80\x89\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\n            for v, csColor in zip(view_index, itertools.cycle(K_PLT_MAP_STYLE)):\n                try:\n                    v_ind = e_list.index(v)\n                except Exception as e:\n                    # logging.exception(e)\n                    logging.debug(e)\n                    # \xe5\x90\x91\xe5\x89\x8d\xe5\x80\x92\xe4\xb8\x80\xe4\xb8\xaa\n                    v_ind = len(close) - 1\n                label = symbol + \': \' + str(date[v_ind])\n                ax1.plot(v, close[v_ind], \'ro\', markersize=12, markeredgewidth=4.5,\n                         markerfacecolor=\'None\', markeredgecolor=csColor, label=label)\n\n                # \xe5\x9b\xa0\xe4\xb8\xbacandlestick_ochl \xe4\xb8\x8d\xe8\x83\xbdlabel\xe4\xba\x86\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe6\x98\xbe\xe7\xa4\xba\xe6\x96\x87\xe5\xad\x97\n                # noinspection PyUnboundLocalVariable\n                ax2.plot(v, 0, \'ro\', markersize=12, markeredgewidth=0.5,\n                         markerfacecolor=\'None\', markeredgecolor=csColor, label=label)\n            plt.legend(loc=\'best\')\n\n        # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe6\x9f\xb1\xe5\xad\x90\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc > \xe5\xbc\x80\xe7\x9b\x98\xef\xbc\x8c\xe5\x8d\xb3\xe7\xba\xa2\xe8\x89\xb2\n        # noinspection PyTypeChecker\n        bar_red = np.where(close >= p_open, volume, 0)\n        # \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe6\x9f\xb1\xe5\xad\x90\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe5\xbc\x80\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc > \xe6\x94\xb6\xe7\x9b\x98\xe3\x80\x82\xe5\x8d\xb3\xe7\xbb\xbf\xe8\x89\xb2\n        # noinspection PyTypeChecker\n        bar_green = np.where(p_open > close, volume, 0)\n\n        date = date if not minute else np.arange(0, len(date))\n        ax2.bar(date, bar_red, facecolor=__colorup__)\n        ax2.bar(date, bar_green, facecolor=__colordown__)\n\n        ax2.set_ylabel(\'volume\')\n        ax2.grid(True)\n        ax2.autoscale_view()\n        plt.setp(plt.gca().get_xticklabels(), rotation=30)\n    else:\n        ax1.grid(False)\n\n    if save:\n        # \xe4\xbf\x9d\xe5\xad\x98\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n        from pylab import savefig\n        save_dir = os.path.join(K_SAVE_CACHE_PNG_ROOT, ABuDateUtil.current_str_date())\n        png_dir = os.path.join(save_dir, symbol)\n        ABuFileUtil.ensure_dir(png_dir)\n        r_cnt = 0\n        while True:\n            png_name = \'{}{}.png\'.format(png_dir, \'\' if r_cnt == 0 else \'-{}\'.format(r_cnt))\n            if not ABuFileUtil.file_exist(png_name):\n                break\n            r_cnt += 1\n        # noinspection PyUnboundLocalVariable\n        savefig(png_name)\n        fig.clf()\n        plt.close(fig)\n    else:\n        """"""\n            save \xe4\xba\x86\xe5\xb0\xb1\xe4\xb8\x8dshow\xe4\xba\x86\n        """"""\n        plt.show()\n\n\ndef save_dir_name(html=False):\n    """"""\n    \xe5\xa4\x96\xe9\x83\xa8\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe7\x9a\x84\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    :param html: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xbahtml\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    r_dir = K_SAVE_CACHE_HTML_ROOT if html else K_SAVE_CACHE_PNG_ROOT\n    save_dir = os.path.join(r_dir, ABuDateUtil.current_str_date())\n    return save_dir\n\n\ndef plot_simple_multi_stock(multi_kl_pd):\n    """"""\n    \xe5\xb0\x86\xe5\xa4\x9a\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb0\xb4\xe5\xb9\xb3\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\n    :param multi_kl_pd: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    rg_ret = ABuScalerUtil.scaler_matrix([kl_pd.close for kl_pd in multi_kl_pd])\n    for i, kl_pd in enumerate(multi_kl_pd):\n        plt.plot(kl_pd.index, rg_ret[i])\n    plt.show()\n\n\ndef plot_simple_two_stock(two_stcok_dict):\n    """"""\n    \xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb0\xb4\xe5\xb9\xb3\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8a\xa8\n    :param two_stcok_dict: \xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8ckey\xe5\xb0\x86\xe5\x81\x9a\xe4\xb8\xbalable\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    if not isinstance(two_stcok_dict, dict) or len(two_stcok_dict) != 2:\n        print(\'two_stcok_dict type must dict! or len(two_stcok_dict) != 2\')\n        return\n\n    label_arr = [s_name for s_name in two_stcok_dict.keys()]\n    x, y = ABuScalerUtil.scaler_xy(two_stcok_dict[label_arr[0]].close, two_stcok_dict[label_arr[1]].close)\n    plt.plot(x, label=label_arr[0])\n    plt.plot(y, label=label_arr[1])\n    plt.legend(loc=2)\n    plt.show()\n'"
abupy/MarketBu/ABuNetWork.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xbd\x91\xe7\xbb\x9c\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\nimport requests\nimport time\nimport ast\n\nfrom requests.packages.urllib3.exceptions import ReadTimeoutError\n\n""""""g_enable_lru_cache\xe9\x92\x88\xe5\xaf\xb9lru_cache\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xef\xbc\x8c\xe8\x80\x83\xe8\x99\x91\xe5\x88\xb0\xe7\x9b\xae\xe5\x89\x8d\xe7\x88\xac\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xaefetch url\xe9\x83\xbd\xe4\xbc\x9a\xe6\x9c\x89\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\xe7\xad\x89\xe5\x8f\xaf\xe5\x8f\x98\xe5\xad\x97\xe6\xae\xb5\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xad""""""\ng_enable_lru_cache = False\ng_lru_cache_max = 300\nif g_enable_lru_cache:\n    # \xe5\xbc\x80\xe5\x90\xafimport lru_cache\n    from ..CoreBu.ABuFixes import lru_cache\nelse:\n    # \xe5\xaf\xbc\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xba\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8as lru_cache\n    from ..UtilBu.ABuDTUtil import empty_wrapper_with_params as lru_cache\n# \xe8\xae\xbe\xe7\xbd\xaerequests\xe5\xba\x93\xe7\x9a\x84\xe6\x97\xa5\xe5\xbf\x97\xe7\xba\xa7\xe5\x88\xab\nlogging.getLogger(""requests"").setLevel(logging.WARNING)\n\n\n@lru_cache(maxsize=g_lru_cache_max)\ndef get(url, params=None, headers=None, retry=3, **kwargs):\n    """"""\n    :param url: \xe8\xaf\xb7\xe6\xb1\x82base url\n    :param params: url params\xe5\x8f\x82\xe6\x95\xb0\n    :param headers: http head\xe5\xa4\xb4\xe4\xbf\xa1\xe6\x81\xaf\n    :param retry: \xe9\x87\x8d\xe8\xaf\x95\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4retry=3\n    :param kwargs: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99requests.get\xef\xbc\x8c\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaeua\xe7\xad\x89\xef\xbc\x8c\xe8\xb6\x85\xe6\x97\xb6\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\n    """"""\n    req_count = 0\n    while req_count < retry:\n        # \xe9\x87\x8d\xe8\xaf\x95retry\xe6\xac\xa1\n        try:\n            resp = requests.get(url=url, params=params, headers=headers, **kwargs)\n            if resp.status_code == 200 or resp.status_code == 206:\n                # \xe5\xa6\x82\xe6\x9e\x9c200\xef\xbc\x8c206\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe7\xbb\xa7\xe7\xbb\xad\xe8\xb5\xb0\xe9\x87\x8d\xe8\xaf\x95\n                return resp\n        except ReadTimeoutError:\n            # \xe8\xb6\x85\xe6\x97\xb6\xe7\x9b\xb4\xe6\x8e\xa5\xe9\x87\x8d\xe8\xaf\x95\xe5\xb0\xb1\xe8\xa1\x8c\xef\xbc\x8c\xe4\xb8\x8d\xe6\x89\x93\xe6\x97\xa5\xe5\xbf\x97\n            pass\n        except Exception as e:\n            logging.exception(e)\n        req_count += 1\n        time.sleep(0.5)\n        continue\n    return None\n\n\ndef post(url, params=None, headers=None, retry=3, **kwargs):\n    """"""\n    :param url: \xe8\xaf\xb7\xe6\xb1\x82base url\n    :param params: url params\xe5\x8f\x82\xe6\x95\xb0\n    :param headers: http head\xe5\xa4\xb4\xe4\xbf\xa1\xe6\x81\xaf\n    :param retry: \xe9\x87\x8d\xe8\xaf\x95\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4retry=3\n    :param kwargs: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99requests.get\xef\xbc\x8c\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaeua\xe7\xad\x89\xef\xbc\x8c\xe8\xb6\x85\xe6\x97\xb6\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\n    """"""\n    req_count = 0\n    while req_count < retry:\n        try:\n            resp = requests.post(url=url, params=params, headers=headers, **kwargs)\n            return resp\n        except Exception as e:\n            logging.exception(e)\n            req_count += 1\n            time.sleep(0.5)\n            continue\n    return None\n\n\ndef ast_parse_js(js_var):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87ast\xe6\xa8\xa1\xe5\x9d\x97\xe8\xa7\xa3\xe6\x9e\x90Javascript\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :param js_var: Javascript\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :return: map, dict or value\n    """"""\n    js_mode = ast.parse(js_var)\n    body_head = js_mode.body[0]\n\n    def _parse(node):\n        if isinstance(node, ast.Expr):\n            return _parse(node.value)\n        elif isinstance(node, ast.Num):\n            return node.n\n        elif isinstance(node, ast.Str):\n            return node.s\n        elif isinstance(node, ast.Name):\n            return node.id\n        elif isinstance(node, ast.Dict):\n            return dict(zip(map(_parse, node.keys), map(_parse, node.values)))\n        elif isinstance(node, ast.List):\n            return map(_parse, node.elts)\n        else:\n            raise NotImplementedError(node.__class__)\n\n    return _parse(body_head)\n\n\ndef parse_js(js_var):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87eval\xe8\xa7\xa3\xe6\x9e\x90Javascript\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :param js_var: Javascript\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :return: dict\n    """"""\n    obj = eval(js_var, type(\'Dummy\', (dict,), dict(__getitem__=lambda s, n: n))())\n    return obj\n'"
abupy/MarketBu/ABuSymbol.py,1,"b'# coding=utf-8\n""""""\n    symbol\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom fnmatch import fnmatch\n\nimport numpy as np\n\nfrom ..CoreBu.ABuEnv import EMarketTargetType, EMarketSubType\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu.ABuStrUtil import to_unicode\nfrom ..UtilBu.ABuLazyUtil import LazyFunc\n\n\n# noinspection PyProtectedMember\ndef code_to_symbol(code, rs=True):\n    """"""\n    \xe8\xa7\xa3\xe6\x9e\x90code\xe6\x88\x90Symbol,\xe5\xa6\x82\xe6\x9e\x9ccode\xe4\xb8\xad\xe5\xb8\xa6\xe6\x9c\x89\xe5\xb8\x82\xe5\x9c\xba\xe7\xbc\x96\xe7\xa0\x81\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x94\xa8\xe8\xaf\xa5\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x89\x80\xe5\xb1\x9e\xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\n    \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\x90\x8e\xe4\xb9\x9f\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8f\x91\xe7\x8e\xb0symbol\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe4\xbc\x9a\xe5\x90\x91\xe5\xa4\x96raise ValueError\n    :param code: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xbb\xa3\xe7\xa0\x81 \xe5\xa6\x82\xef\xbc\x9a300104\xef\xbc\x8csz300104\xef\xbc\x8cusTSLA\n    :param rs: \xe6\xb2\xa1\xe6\x9c\x89\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x8a\xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8a\x9b\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n    :return: Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    from ..MarketBu.ABuSymbolFutures import AbuFuturesCn, AbuFuturesGB\n    from ..MarketBu.ABuSymbolStock import AbuSymbolCN, AbuSymbolUS\n    from ..MarketBu.ABuMarket import all_symbol\n\n    if isinstance(code, Symbol):\n        # code\xe6\x9c\xac\xe8\xba\xab\xe6\x97\xb6symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n        return code\n    if not isinstance(code, six.string_types):\n        # code\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xafstring_types\n        raise TypeError(\'code must be string_types!!!\xef\xbc\x8c{} : type is {}\'.format(code, type(code)))\n\n    sub_market = None\n    market = None\n    # \xe5\xb0\x9d\xe8\xaf\x95\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\n    head = code[:2].lower()\n    if head in [EMarketSubType.SH.value, EMarketSubType.SZ.value] and code[2:].isdigit():\n        # \xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8c\xb9\xe9\x85\x8d\xe6\xb2\xaa\xe6\xb7\xb1\xe8\x82\xa1\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\n        sub_market = EMarketSubType(head)\n        market = EMarketTargetType.E_MARKET_TARGET_CN\n    elif head == EMarketTargetType.E_MARKET_TARGET_CN.value and code[2:].isdigit():\n        # \xe6\xb2\xa1\xe6\x8c\x87\xe5\x90\x8dA\xe8\x82\xa1\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82hs000001\xe8\xbf\x99\xe7\xa7\x8d\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe9\x9c\x80\xe6\xb1\x82\xe8\x8e\xb7\xe5\x8f\x96symbol\xe5\x90\x8e\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xe4\xbd\xbf\xe7\x94\xa8AbuSymbolCN().query_symbol_sub_market\n        sub_market = EMarketSubType(AbuSymbolCN().query_symbol_sub_market(code[2:]))\n        market = EMarketTargetType.E_MARKET_TARGET_CN\n    elif head == EMarketSubType.HK.value and (code[2:].isdigit() or code[2:] in Symbol.HK_INDEX):\n        # \xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8c\xb9\xe9\x85\x8d\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\n        sub_market = EMarketSubType.HK\n        market = EMarketTargetType.E_MARKET_TARGET_HK\n    elif head == EMarketTargetType.E_MARKET_TARGET_US.value:\n        # \xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8c\xb9\xe9\x85\x8d\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8cAbuSymbolUS().query_symbol_sub_market\n        sub_market = EMarketSubType(AbuSymbolUS().query_symbol_sub_market(code[2:]))\n        market = EMarketTargetType.E_MARKET_TARGET_US\n\n    if market is not None and sub_market is not None:\n        # \xe9\x80\x9a\xe8\xbf\x87stock_code, market, sub_market\xe6\x9e\x84\xe5\xbb\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1\n        stock_code = code[2:].upper()\n        return Symbol(market, sub_market, stock_code)\n\n    if code.isdigit():\n        if len(code) == 6:\n            # 6\xe4\xbd\x8d\xe5\x85\xa8\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe5\x8c\xb9\xe9\x85\x8d\xe6\x9f\xa5\xe8\xaf\xa2a\xe8\x82\xa1\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\n            market = EMarketTargetType.E_MARKET_TARGET_CN\n            sub_market = EMarketSubType(AbuSymbolCN().query_symbol_sub_market(code))\n            return Symbol(market, sub_market, code)\n        elif len(code) == 5:\n            # 5\xe4\xbd\x8d\xe5\x85\xa8\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe5\x8c\xb9\xe9\x85\x8d\xe6\x9f\xa5\xe8\xaf\xa2\xe6\xb8\xaf\xe8\x82\xa1\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\n            market = EMarketTargetType.E_MARKET_TARGET_HK\n            sub_market = EMarketSubType.HK\n            return Symbol(market, sub_market, code)\n        if rs:\n            raise TypeError(\'cn symbol len = 6, hk symbol len = 5\')\n    elif code.isalpha() and code in Symbol.HK_INDEX:\n        # \xe5\x85\xa8\xe5\xad\x97\xe6\xaf\x8d\xe4\xb8\x94\xe5\x8c\xb9\xe9\x85\x8d\xe6\xb8\xaf\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98\'HSI\', \'HSCEI\', \'HSCCI\'\n        market = EMarketTargetType.E_MARKET_TARGET_HK\n        sub_market = EMarketSubType.HK\n        return Symbol(market, sub_market, code)\n    elif code.isalpha() and code in all_symbol(EMarketTargetType.E_MARKET_TARGET_TC):\n        # \xe5\x85\xa8\xe5\xad\x97\xe6\xaf\x8d\xe4\xb8\x94\xe5\x8c\xb9\xe9\x85\x8d\xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\'\'btc\', \'ltc\'\n        market = EMarketTargetType.E_MARKET_TARGET_TC\n        sub_market = EMarketSubType.COIN\n        return Symbol(market, sub_market, code)\n    elif code.isalpha() and code.upper() in all_symbol(EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL):\n        # \xe5\x85\xa8\xe5\xad\x97\xe6\xaf\x8d\xe4\xb8\x94\xe5\x8c\xb9\xe9\x85\x8d\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba\n        futures_gb_code = code.upper()\n        q_df = AbuFuturesGB().query_symbol(futures_gb_code)\n        sub_market = EMarketSubType(q_df.exchange.values[0])\n        market = EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL\n        return Symbol(market, sub_market, futures_gb_code)\n    elif code.isalpha() or (code.startswith(\'.\') and code[1:].isalpha()):\n        # \xe5\x85\xa8\xe5\xad\x97\xe6\xaf\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbe\x8e\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98\xe5\x8c\xb9\xe9\x85\x8d\xe6\x88\x96\xe8\x80\x85\xe7\xbe\x8e\xe8\x82\xa1\xe8\x82\xa1\xe7\xa5\xa8\xe5\x8c\xb9\xe9\x85\x8d\n        stock_code = code.upper()\n\n        if stock_code in Symbol.K_US_INDEX_FIXES.keys():\n            stock_code = Symbol.K_US_INDEX_FIXES[stock_code]\n\n        sub_market = EMarketSubType(AbuSymbolUS().query_symbol_sub_market(code))\n        market = EMarketTargetType.E_MARKET_TARGET_US\n        return Symbol(market, sub_market, stock_code)\n    elif (code[0].isalpha() and code[1:].isdigit()) or (code[:2].isalpha() and code[2:].isdigit()):\n        # \xe5\x8c\xb9\xe9\x85\x8d\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xbasymbol\n        futures_code = code.upper()\n        q_df = AbuFuturesCn().query_symbol(futures_code)\n        if q_df is not None:\n            sub_market = EMarketSubType(q_df.exchange.values[0])\n            market = EMarketTargetType.E_MARKET_TARGET_FUTURES_CN\n            return Symbol(market, sub_market, futures_code)\n\n    if rs:\n        raise ValueError(\'arg code :{} format dt support\'.format(code))\n\n\ndef __search(market_df, search_match, search_code, search_result, match_key=\'co_name\'):\n    """"""\xe5\x85\xb7\xe4\xbd\x93\xe6\x90\x9c\xe7\xb4\xa2\xe6\x89\xa7\xe8\xa1\x8c\xe6\x8e\xa5\xe5\x8f\xa3""""""\n\n    def __search_whole_code(_match_code):\n        _sc_df = market_df[market_df.symbol == _match_code]\n        if not _sc_df.empty:\n            search_result[_sc_df.symbol.values[0]] = _sc_df[match_key].values[0]\n            return True\n        return False\n\n    def __search_pinyin_code(_match_code):\n        from ..MarketBu.ABuDataFeed import query_symbol_from_pinyin\n        # \xe4\xbd\xbf\xe7\x94\xa8query_symbol_from_pinyin\xe5\xaf\xb9\xe6\xa8\xa1\xe7\xb3\x8a\xe6\x8b\xbc\xe9\x9f\xb3\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9f\xa5\xe8\xaf\xa2\n        pinyin_symbol = query_symbol_from_pinyin(_match_code)\n        if pinyin_symbol is not None:\n            # \xe9\x9c\x80\xe8\xa6\x81\xe6\x8a\x8a\xe6\x8b\xbc\xe9\x9f\xb3code\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xb8\xba\xe5\x8f\xaf\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84code\n            search_symbol = code_to_symbol(pinyin_symbol, rs=False)\n            if search_symbol is not None:\n                _search_code = search_symbol.symbol_code\n                sc_df = market_df[market_df.symbol == _search_code]\n                if not sc_df.empty:\n                    search_result[sc_df.symbol.values[0]] = sc_df[match_key].values[0]\n\n    def __search_fnmatch_info(_search_match):\n        # \xe6\xa8\xa1\xe7\xb3\x8a\xe5\x8c\xb9\xe9\x85\x8d\xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0\xe4\xbf\xa1\xe6\x81\xaf\xe6\x88\x96\xe8\x80\x85\xe4\xba\xa4\xe6\x98\x93\xe4\xba\xa7\xe5\x93\x81\xe4\xbf\xa1\xe6\x81\xaf\n        mc_df = market_df[market_df[match_key].apply(lambda name:\n                                                     fnmatch(to_unicode(name),\n                                                             _search_match))]\n        if not mc_df.empty:\n            for ind in np.arange(0, len(mc_df)):\n                mcs = mc_df.iloc[ind]\n                search_result[mcs.symbol] = mcs[match_key]\n\n    # \xe9\xa6\x96\xe5\x85\x88\xe5\x85\xa8\xe5\x8c\xb9\xe9\x85\x8dsearch_code\n    if not __search_whole_code(search_code):\n        # \xe5\xa6\x82\xe6\x9e\x9csearch_code\xe6\xb2\xa1\xe6\x9c\x89\xe8\x83\xbd\xe5\x85\xa8\xe5\x8c\xb9\xe9\x85\x8d\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe6\x8b\xbc\xe9\x9f\xb3\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x80\xe6\xac\xa1\n        __search_pinyin_code(search_code)\n    # \xe6\xa8\xa1\xe7\xb3\x8a\xe5\x8c\xb9\xe9\x85\x8d\xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0\xe6\x88\x96\xe8\x80\x85\xe4\xba\xa7\xe5\x93\x81\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xafsymbol\n    __search_fnmatch_info(search_match)\n\n\ndef _us_search(search_match, search_code, search_result):\n    """"""\xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x90\x9c\xe7\xb4\xa2""""""\n    from ..MarketBu.ABuSymbolStock import AbuSymbolUS\n    __search(AbuSymbolUS().df, search_match, search_code, search_result)\n\n\ndef _cn_search(search_match, search_code, search_result):\n    """"""a\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x90\x9c\xe7\xb4\xa2""""""\n    from ..MarketBu.ABuSymbolStock import AbuSymbolCN\n    __search(AbuSymbolCN().df, search_match, search_code, search_result)\n\n\ndef _hk_search(search_match, search_code, search_result):\n    """"""\xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x90\x9c\xe7\xb4\xa2""""""\n    from ..MarketBu.ABuSymbolStock import AbuSymbolHK\n    __search(AbuSymbolHK().df, search_match, search_code, search_result)\n\n\ndef _fcn_search(search_match, search_code, search_result):\n    """"""\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x90\x9c\xe7\xb4\xa2""""""\n    from ..MarketBu.ABuSymbolFutures import AbuFuturesCn\n    __search(AbuFuturesCn().futures_cn_df,\n             search_match, search_code, search_result, match_key=\'product\')\n\n\ndef _fgb_search(search_match, search_code, search_result):\n    """"""\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x90\x9c\xe7\xb4\xa2""""""\n    from ..MarketBu.ABuSymbolFutures import AbuFuturesGB\n    __search(AbuFuturesGB().futures_gb_df,\n             search_match, search_code, search_result, match_key=\'product\')\n\n\n# TODO \xe5\xb8\x81\xe7\xb1\xbb\xe5\x8c\xb9\xe9\x85\x8d\xe7\xbb\x9f\xe4\xb8\x80\xe6\xa0\x87\xe5\x87\x86\xe8\xa7\x84\xe8\x8c\x83\ndef _tc_search(search_match, search_code, search_result):\n    if fnmatch(u\'\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\', search_match) or \'btc\' == search_code:\n        search_result[\'btc\'] = u\'\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\'\n    if fnmatch(u\'\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\', search_match) or \'ltc\' == search_code:\n        search_result[\'ltc\'] = u\'\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\'\n\n\ndef search_to_symbol_dict(search, fast_mode=False):\n    """"""\n    symbol\xe6\x90\x9c\xe7\xb4\xa2\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\x85\xa8\xe5\x8c\xb9\xe9\x85\x8dsymbol code\xef\xbc\x8c\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x8c\xb9\xe9\x85\x8dsymbol\xef\xbc\x8c\xe5\x88\xab\xe5\x90\x8d\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x8c\xe6\xa8\xa1\xe7\xb3\x8a\xe5\x8c\xb9\xe9\x85\x8d\xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe4\xba\xa7\xe5\x93\x81\xe5\x90\x8d\xe7\xa7\xb0\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\n    eg\xef\xbc\x9a\n        in\xef\xbc\x9a\n        search_to_symbol_dict(\'\xe9\xbb\x84\xe9\x87\x91\')\n        out\xef\xbc\x9a\n        {\'002155\': \'\xe6\xb9\x96\xe5\x8d\x97\xe9\xbb\x84\xe9\x87\x91\',\n         \'600489\': \'\xe4\xb8\xad\xe9\x87\x91\xe9\xbb\x84\xe9\x87\x91\',\n         \'600547\': \'\xe5\xb1\xb1\xe4\xb8\x9c\xe9\xbb\x84\xe9\x87\x91\',\n         \'600766\': \'\xe5\x9b\xad\xe5\x9f\x8e\xe9\xbb\x84\xe9\x87\x91\',\n         \'600988\': \'\xe8\xb5\xa4\xe5\xb3\xb0\xe9\xbb\x84\xe9\x87\x91\',\n         \'ABX\': \'\xe5\xb7\xb4\xe9\x87\x8c\xe5\x85\x8b\xe9\xbb\x84\xe9\x87\x91\',\n         \'AU0\': \'\xe9\xbb\x84\xe9\x87\x91\',\n         \'DGL\': \'\xe9\xbb\x84\xe9\x87\x91\xe5\x9f\xba\xe9\x87\x91-PowerShares\',\n         \'DGLD\': \'\xe9\xbb\x84\xe9\x87\x913X\xe5\x81\x9a\xe7\xa9\xba-VelocityShares\',\n         \'DGP\': \'\xe9\xbb\x84\xe9\x87\x912X\xe5\x81\x9a\xe5\xa4\x9a-DB\',\n         \'DGZ\': \'\xe9\xbb\x84\xe9\x87\x91\xe5\x81\x9a\xe7\xa9\xba-PowerShares\',\n         \'DZZ\': \'\xe9\xbb\x84\xe9\x87\x912X\xe5\x81\x9a\xe7\xa9\xba-DB\',\n         \'EGO\': \'\xe5\x9f\x83\xe5\xb0\x94\xe6\x8b\x89\xe5\xa4\x9a\xe9\xbb\x84\xe9\x87\x91\xe5\x85\xac\xe5\x8f\xb8\',\n         \'GC\': \'\xe7\xba\xbd\xe7\xba\xa6\xe9\xbb\x84\xe9\x87\x91\',\n         \'GEUR\': \'Gartman\xe6\xac\xa7\xe5\x85\x83\xe9\xbb\x84\xe9\x87\x91ETF-AdvisorShares \',\n         \'GLD\': \'\xe9\xbb\x84\xe9\x87\x91ETF-SPDR\',\n         \'GLL\': \'\xe9\xbb\x84\xe9\x87\x912X\xe5\x81\x9a\xe7\xa9\xba-ProShares\',\n         \'GYEN\': \'Gartman\xe6\x97\xa5\xe5\x85\x83\xe9\xbb\x84\xe9\x87\x91ETF-AdvisorShares\',\n         \'HMY\': \'\xe5\x93\x88\xe8\x8e\xab\xe5\xb0\xbc\xe9\xbb\x84\xe9\x87\x91\',\n         \'IAU\': \'\xe9\xbb\x84\xe9\x87\x91ETF-iShares\',\n         \'KGC\': \'\xe9\x87\x91\xe7\xbd\x97\xe6\x96\xaf\xe9\xbb\x84\xe9\x87\x91\',\n         \'LIHR\': \'\xe5\x88\xa9\xe5\xb8\x8c\xe5\xb0\x94\xe9\xbb\x84\xe9\x87\x91\',\n         \'PRME\': \'\xe5\x85\xa8\xe7\x90\x83\xe9\xbb\x84\xe9\x87\x91\xe5\x9c\xb0\xe6\xae\xb5\xe6\x88\xbf\xe5\x9c\xb0\xe4\xba\xa7ETF-First Trust Heitman\',\n         \'RGLD\': \'\xe7\x9a\x87\xe5\xae\xb6\xe9\xbb\x84\xe9\x87\x91\',\n         \'UGL\': \'\xe9\xbb\x84\xe9\x87\x912x\xe5\x81\x9a\xe5\xa4\x9a-ProShares\',\n         \'UGLD\': \'\xe9\xbb\x84\xe9\x87\x913X\xe5\x81\x9a\xe5\xa4\x9a-VelocityShares\'}\n    :param search: eg\xef\xbc\x9a\'\xe9\xbb\x84\xe9\x87\x91\'\xef\xbc\x8c \'58\'\n    :param fast_mode: \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\xbd\xe5\xbf\xab\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x8c\xe9\x80\x9f\xe5\xba\xa6\xe4\xbc\x98\xe5\x85\x88\xe6\xa8\xa1\xe5\xbc\x8f\n    :return: symbol dict\n    """"""\n    search_symbol_dict = {}\n    search = search.lower()\n    while len(search_symbol_dict) == 0 and len(search) > 0:\n        # \xe6\x9e\x84\xe5\xbb\xba\xe6\xa8\xa1\xe7\xb3\x8a\xe5\x8c\xb9\xe9\x85\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\xb9\xe9\x85\x8d\xe5\xb8\xa6\xe9\x80\x9a\xe9\x85\x8d\xe7\xac\xa6\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        search_match = u\'*{}*\'.format(search)\n        # \xe6\x9e\x84\xe5\xbb\xba\xe7\xb2\xbe\xe7\xa1\xae\xe5\x8c\xb9\xe9\x85\x8d\xe6\x88\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe6\xa8\xa1\xe7\xb3\x8a\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84symbol\n        search_symbol = code_to_symbol(search, rs=False)\n        search_code = \'\'\n        if search_symbol is not None:\n            search_code = search_symbol.symbol_code\n        # \xe5\xaf\xb9search\xe7\x9a\x84\xe5\x86\x85\xe5\xae\xb9\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x92\xe5\x87\x8f\xe5\x8c\xb9\xe9\x85\x8d\n        search = search[:-1]\n        # \xe4\xbe\x9d\xe6\xac\xa1\xe5\xaf\xb9\xe5\x90\x84\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x90\x9c\xe7\xb4\xa2\xe5\x8c\xb9\xe9\x85\x8d\xe6\x93\x8d\xe4\xbd\x9c\n        _tc_search(search_match, search_code, search_symbol_dict)\n        _cn_search(search_match, search_code, search_symbol_dict)\n        _us_search(search_match, search_code, search_symbol_dict)\n        _hk_search(search_match, search_code, search_symbol_dict)\n        _fcn_search(search_match, search_code, search_symbol_dict)\n        _fgb_search(search_match, search_code, search_symbol_dict)\n        if fast_mode:\n            break\n    return search_symbol_dict\n\n\nclass Symbol(object):\n    """"""\xe7\xbb\x9f\xe4\xb8\x80\xe6\x89\x80\xe6\x9c\x89\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84symbol\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\xe5\xaf\xb9\xe8\xb1\xa1""""""\n\n    # \xe5\xae\x9a\xe4\xb9\x89\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\xbe\x8e\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98\n    US_INDEX = [\'.DJI\', \'.IXIC\', \'.INX\']\n    # \xe5\xae\x9a\xe4\xb9\x89\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84sh\xe5\xa4\xa7\xe7\x9b\x98\n    SH_INDEX = [\'000001\', \'000300\']\n    # \xe5\xae\x9a\xe4\xb9\x89\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84sz\xe5\xa4\xa7\xe7\x9b\x98\n    SZ_INDEX = [\'399001\', \'399006\']\n    # \xe5\xae\x9a\xe4\xb9\x89\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\xb8\xaf\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98\n    HK_INDEX = [\'HSI\', \'HSCEI\', \'HSCCI\']\n\n    # \xe4\xbf\xae\xe5\xa4\x8d\xe7\xbe\x8e\xe8\x82\xa1\xe5\x85\xb6\xe5\xae\x83\xe5\xa4\xa7\xe7\x9b\x98\xe5\x86\x99\xe6\xb3\x95\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe4\xb8\xba\xe5\xa4\x96\xe9\x83\xa8user\xe4\xbd\xbf\xe7\x94\xa8code_to_symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8\n    K_US_INDEX_FIXES = {\'DJI\': \'.DJI\', \'IXIC\': \'.IXIC\', \'INX\': \'.INX\'}\n\n    def __init__(self, market, sub_market, symbol_code):\n        """"""\n        :param market: EMarketTargetType enum\xe5\xaf\xb9\xe8\xb1\xa1\n        :param sub_market: EMarketSubType enum\xe5\xaf\xb9\xe8\xb1\xa1\n        :param symbol_code: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8c\x85\xe5\x90\xab\xe5\xb8\x82\xe5\x9c\xba\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84code\n        """"""\n        if isinstance(market, EMarketTargetType) and isinstance(sub_market, EMarketSubType):\n            self.market = market\n            self.sub_market = sub_market\n            self.symbol_code = symbol_code\n            self.source = None\n        else:\n            raise TypeError(\'market type error\')\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9amarket\xef\xbc\x8c sub_market\xef\xbc\x8c symbol_code""""""\n        return \'{}_{}:{}\'.format(self.market.value, self.sub_market.value, self.symbol_code)\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9a\xe6\x8b\xbc\xe6\x8e\xa5\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8b\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8bcode\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe9\x95\xbf\xe5\xba\xa6""""""\n        m_symbol = \'{}_{}:{}\'.format(self.market.value, self.sub_market.value, self.symbol_code)\n        return len(m_symbol)\n\n    @LazyFunc\n    def value(self):\n        """"""\xe4\xb8\x8d\xe5\x90\x8c\xe5\xb8\x82\xe5\x9c\xba\xe8\xbf\x94\xe5\x9b\x9eABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol LazyFunc""""""\n        if self.market == EMarketTargetType.E_MARKET_TARGET_HK or self.market == EMarketTargetType.E_MARKET_TARGET_US:\n            # hk,us eg: usTSLA, hk00836\n            return \'{}{}\'.format(self.market.value, self.symbol_code)\n        elif self.market == EMarketTargetType.E_MARKET_TARGET_CN:\n            # cn eg: sh000001\n            return \'{}{}\'.format(self.sub_market.value, self.symbol_code)\n        # \xe5\x85\xb6\xe5\xae\x83\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9esymbol_code\n        return self.symbol_code\n\n    def is_a_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6a\xe8\x82\xa1symbol""""""\n        return self.market == EMarketTargetType.E_MARKET_TARGET_CN\n\n    def is_sh_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6a\xe8\x82\xa1sh symbol""""""\n        return self.sub_market == EMarketSubType.SH\n\n    def is_sz_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6a\xe8\x82\xa1sz symbol""""""\n        return self.sub_market == EMarketSubType.SZ\n\n    def is_us_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\xbe\x8e\xe8\x82\xa1 symbol""""""\n        return self.market == EMarketTargetType.E_MARKET_TARGET_US\n\n    def is_us_n_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\xbe\x8e\xe8\x82\xa1\xe7\xba\xbd\xe7\xba\xa6\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80 symbol""""""\n        return self.sub_market == EMarketSubType.US_N\n\n    def is_us_oq_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\xbe\x8e\xe8\x82\xa1\xe7\xba\xb3\xe6\x96\xaf\xe8\xbe\xbe\xe5\x85\x8b\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80 symbol""""""\n        return self.sub_market == EMarketSubType.US_OQ\n\n    def is_hk_stock(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\xb8\xaf\xe8\x82\xa1 symbol""""""\n        return self.market == EMarketTargetType.E_MARKET_TARGET_HK\n\n    def is_sh_index(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6a\xe8\x82\xa1sh \xe5\xa4\xa7\xe7\x9b\x98""""""\n        return self.is_sh_stock() and self.symbol_code in Symbol.SH_INDEX\n\n    def is_sz_index(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6a\xe8\x82\xa1sz \xe5\xa4\xa7\xe7\x9b\x98""""""\n        return self.is_sz_stock() and self.symbol_code in Symbol.SZ_INDEX\n\n    def is_a_index(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6a\xe8\x82\xa1 \xe5\xa4\xa7\xe7\x9b\x98""""""\n        return self.is_sh_index() or self.is_sz_index()\n\n    def is_us_index(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\xbe\x8e\xe8\x82\xa1 \xe5\xa4\xa7\xe7\x9b\x98""""""\n        return self.is_us_stock() and self.symbol_code in Symbol.US_INDEX\n\n    def is_hk_index(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\xb8\xaf\xe8\x82\xa1 \xe5\xa4\xa7\xe7\x9b\x98""""""\n        return self.is_hk_stock() and self.symbol_code in Symbol.HK_INDEX\n\n    def is_index(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe5\xa4\xa7\xe7\x9b\x98""""""\n        return self.is_us_index() or self.is_hk_index() or self.is_a_index()\n\n    def is_futures(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x9f\xe8\xb4\xa7symbol""""""\n        return self.market == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN \\\n            or self.market == EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL\n\n    def is_tc(self):\n        """"""\xe5\x88\xa4\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\x94\xb5\xe5\xad\x90\xe8\xb4\xa7\xe5\xb8\x81symbol""""""\n        return self.market == EMarketTargetType.E_MARKET_TARGET_TC\n\n\nclass IndexSymbol(object):\n    """"""\xe5\xae\x9a\xe4\xb9\x89IndexSymbol\xe7\xb1\xbb\xef\xbc\x8c\xe8\xae\xbe\xe5\xae\x9a\xe5\xa4\xa7\xe7\x9b\x98\xe6\x8c\x87\xe6\x95\xb0Symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe8\xa7\x84\xe8\x8c\x83""""""\n\n    # \xe7\xbe\x8e\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98DJI Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    DJI = Symbol(EMarketTargetType.E_MARKET_TARGET_US, EMarketSubType.US_N, \'.DJI\')\n    # \xe7\xbe\x8e\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98IXIC Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    IXIC = Symbol(EMarketTargetType.E_MARKET_TARGET_US, EMarketSubType.US_N, \'.IXIC\')\n    # \xe7\xbe\x8e\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98INX Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    INX = Symbol(EMarketTargetType.E_MARKET_TARGET_US, EMarketSubType.US_N, \'.INX\')\n\n    # a\xe8\x82\xa1sh\xe5\xa4\xa7\xe7\x9b\x98Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    SH = Symbol(EMarketTargetType.E_MARKET_TARGET_CN, EMarketSubType.SH, \'000001\')\n    # a\xe8\x82\xa1sz\xe5\xa4\xa7\xe7\x9b\x98Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    SZ = Symbol(EMarketTargetType.E_MARKET_TARGET_CN, EMarketSubType.SZ, \'399001\')\n    # a\xe8\x82\xa1sz Growth\xe5\xa4\xa7\xe7\x9b\x98Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    Growth = Symbol(EMarketTargetType.E_MARKET_TARGET_CN, EMarketSubType.SZ, \'399006\')\n    # a\xe8\x82\xa1sh SH300\xe5\xa4\xa7\xe7\x9b\x98Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    SH300 = Symbol(EMarketTargetType.E_MARKET_TARGET_CN, EMarketSubType.SH, \'000300\')\n\n    # \xe6\xb8\xaf\xe8\x82\xa1sh\xe5\xa4\xa7\xe7\x9b\x98HSI\xe5\xaf\xb9\xe8\xb1\xa1\n    HSI = Symbol(EMarketTargetType.E_MARKET_TARGET_HK, EMarketSubType.HK, \'HSI\')\n    # \xe6\xb8\xaf\xe8\x82\xa1sh\xe5\xa4\xa7\xe7\x9b\x98HSCEI\xe5\xaf\xb9\xe8\xb1\xa1\n    HSCEI = Symbol(EMarketTargetType.E_MARKET_TARGET_HK, EMarketSubType.HK, \'HSCEI\')\n    # \xe6\xb8\xaf\xe8\x82\xa1sh\xe5\xa4\xa7\xe7\x9b\x98HSCCI\xe5\xaf\xb9\xe8\xb1\xa1\n    HSCCI = Symbol(EMarketTargetType.E_MARKET_TARGET_HK, EMarketSubType.HK, \'HSCCI\')\n\n    # \xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\x8f\xaa\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x84\xe9\x87\x91\xe5\x81\x9a\xe4\xb8\xba\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8c\xe4\xb8\x8d\xe5\x85\xb7\xe5\xa4\x87\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\xa7\xe7\x9b\x98\xe4\xbd\x9c\xe7\x94\xa8\n    BM_FUTURES_CN = Symbol(EMarketTargetType.E_MARKET_TARGET_FUTURES_CN, EMarketSubType.SHFE, \'AU0\')\n    # \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\x8f\xaa\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe7\xba\xbd\xe7\xba\xa6\xe9\xbb\x84\xe9\x87\x91\xe5\x81\x9a\xe4\xb8\xba\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8c\xe4\xb8\x8d\xe5\x85\xb7\xe5\xa4\x87\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\xa7\xe7\x9b\x98\xe4\xbd\x9c\xe7\x94\xa8\n    BM_FUTURES_GB = Symbol(EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL, EMarketSubType.NYMEX, \'GC\')\n\n    # \xe5\xb8\x81\xe7\xb1\xbb\xe5\x8f\xaa\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8btc\xe5\x81\x9a\xe4\xb8\xba\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8c\xe4\xb8\x8d\xe5\x85\xb7\xe5\xa4\x87\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\xa7\xe7\x9b\x98\xe4\xbd\x9c\xe7\x94\xa8\n    TC_INX = Symbol(EMarketTargetType.E_MARKET_TARGET_TC, EMarketSubType.COIN, \'btc\')\n'"
abupy/MarketBu/ABuSymbolFutures.py,0,"b'# coding=utf-8\n""""""\n    \xe6\x9c\x9f\xe8\xb4\xa7symbol\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\n\nimport pandas as pd\n\nfrom ..CoreBu.ABuBase import FreezeAttrMixin\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu.ABuLazyUtil import LazyFunc\nfrom ..UtilBu.ABuDTUtil import singleton\nfrom ..MarketBu.ABuSymbol import Symbol\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n_rom_dir = ABuEnv.g_project_rom_data_dir\n""""""\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xae\x9a\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe7\x88\xac\xe5\x8f\x96\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0""""""\n_stock_code_futures_cn = os.path.join(_rom_dir, \'futures_cn.csv\')\n\n""""""\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xae\x9a\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe7\x88\xac\xe5\x8f\x96\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0""""""\n_stock_code_futures_gb = os.path.join(_rom_dir, \'futures_gb.csv\')\n\n\n@singleton\nclass AbuFuturesCn(FreezeAttrMixin):\n    """"""\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7symbol\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cAbuFuturesCn\xe5\x8d\x95\xe4\xbe\x8b\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5FreezeAttrMixin\xe5\x9c\xa8__init__\xe4\xb8\xad\xe5\x86\xbb\xe7\xbb\x93\xe4\xba\x86\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaa\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\xbb\xe5\x8f\x96""""""\n\n    def __init__(self):\n        """"""\n            self.futures_cn_df\xe8\xa1\xa8\xe7\xbb\x93\xe6\x9e\x84\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\xe5\x88\x97\xe5\x88\x86\xe5\x88\xab\xe4\xb8\xba\n            symbol product\tmin_deposit\tmin_unit\tcommission\texchange\n\n                0\tV0\tPVC\t0.07\t5\t2.0\tDCE\n                1\tP0\t\xe6\xa3\x95\xe6\xa6\x88\t0.07\t10\t2.5\tDCE\n                2\tB0\t\xe8\xb1\x86\xe4\xba\x8c\t0.05\t10\t2.0\tDCE\n                3\tM0\t\xe8\xb1\x86\xe7\xb2\x95\t0.07\t10\t1.5\tDCE\n                4\tI0\t\xe9\x93\x81\xe7\x9f\xbf\xe7\x9f\xb3\t0.10\t100\t8.0\tDCE\n                5\tJD0 \t\xe9\xb8\xa1\xe8\x9b\x8b\t0.08\t5\t6.0\tDCE\n                6\tL0\t\xe5\xa1\x91\xe6\x96\x99\t0.07\t5\t2.0\tDCE\n                7\tPP0\tPP\t0.07\t5\t4.0\tDCE\n                8\tFB0\t\xe7\xba\xa4\xe7\xbb\xb4\xe6\x9d\xbf\t0.20\t500\t10.0\tDCE\n                9\tBB0\t\xe8\x83\xb6\xe5\x90\x88\xe6\x9d\xbf\t0.20\t500\t10.0\tDCE\n                10\tY0\t\xe8\xb1\x86\xe6\xb2\xb9\t0.07\t10\t2.5\tDCE\n            \xe5\xa6\x82\xe7\xac\xac5\xe8\xa1\x8c\xef\xbc\x9asymbol\xef\xbc\x9dJD0\xef\xbc\x8cproduct\xef\xbc\x9d\xe9\xb8\xa1\xe8\x9b\x8b\xef\xbc\x8cmin_deposit(\xe6\x9c\x80\xe5\xb0\x91\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\xaf\x94\xe4\xbe\x8b)\xef\xbc\x9d0.08\n                    min_unit(\xe6\xaf\x8f\xe6\x89\x8b\xe6\x9c\x80\xe5\xb0\x91\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe4\xbd\x8d)=5, commission(\xe6\xaf\x8f\xe4\xb8\x80\xe6\x89\x8b\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9)=6.0,\n                    exchange(\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80)=DCE\n        """"""\n        # \xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0csv\xe5\x88\xb0\xe5\x86\x85\xe5\xad\x98\n        self.futures_cn_df = pd.read_csv(_stock_code_futures_cn, index_col=0)\n        # __init__\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8FreezeAttrMixin._freeze\xe5\x86\xbb\xe7\xbb\x93\xe4\xba\x86\xe6\x8e\xa5\xe5\x8f\xa3\n        self._freeze()\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9afutures_cn_df.info\xef\xbc\x8c futures_cn_df.describe""""""\n        return \'info:\\n{}\\ndescribe:\\n{}\'.format(self.futures_cn_df.info(),\n                                                 self.futures_cn_df.describe())\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9afutures_cn_df.shape[0]\xef\xbc\x8c\xe5\x8d\xb3\xe8\xa1\x8c\xe6\x95\xb0""""""\n        return self.futures_cn_df.shape[0]\n\n    def __contains__(self, item):\n        """"""\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9aitem in self.futures_cn_df.columns\xef\xbc\x8c\xe5\x8d\xb3item\xe5\x9c\xa8\xe4\xb8\x8d\xe5\x9c\xa8futures_cn_df\xe7\x9a\x84\xe5\x88\x97\xe4\xb8\xad""""""\n        return item in self.futures_cn_df.columns\n\n    def __getitem__(self, key):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe5\xa5\x97\xe6\x8e\xa5self.futures_cn_df[key]""""""\n        if key in self:\n            return self.futures_cn_df[key]\n        # \xe4\xb8\x8d\xe5\x9c\xa8\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb4\xe4\xb8\xaa\xe8\xa1\xa8\xe6\xa0\xbcfutures_cn_df\n\n        symbol_df = self.futures_cn_df[self.futures_cn_df.symbol == key]\n        if not symbol_df.empty:\n            return symbol_df\n        return self.futures_cn_df\n\n    def __setitem__(self, key, value):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8a\x9b\xe5\x87\xba\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c \xe5\x8d\xb3\xe4\xb8\x8d\xe5\x87\x86\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae""""""\n        raise AttributeError(""AbuFuturesCn set value!!!"")\n\n    def query_symbol(self, symbol):\n        """"""\n        \xe5\xaf\xb9\xe5\xa4\x96\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x8e\xa5\xe5\x8f\xa3\n        :param symbol: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafsymbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if isinstance(symbol, Symbol):\n            symbol = symbol.value\n\n        if symbol[0].isalpha() and symbol[1:].isdigit():\n            head = symbol[0]\n        elif symbol[:2].isalpha() and symbol[2:].isdigit():\n            head = symbol[:2]\n        else:\n            return None\n\n        for fs in self.symbol:\n            if head == fs[:len(head)]:\n                return self.futures_cn_df[self.futures_cn_df.symbol == fs]\n        return None\n\n    def query_min_unit(self, symbol):\n        """"""\n        \xe5\xaf\xb9query_symbol\xe7\x9a\x84\xe6\x9f\xa5\xe8\xaf\xa2\xe4\xb8\x80\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9a\x84\xe8\xbf\x91\xe4\xb8\x80\xe9\x83\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xb0\x81\xe8\xa3\x85\n        :param symbol: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafsymbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        min_cnt = 10\n        # \xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9c\x80\xe5\xb0\x91\xe4\xb8\x80\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\n        q_df = self.query_symbol(symbol)\n        if q_df is not None:\n            min_cnt = q_df.min_unit.values[0]\n        return min_cnt\n\n    @LazyFunc\n    def symbol(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_cn_df.symbol\xef\xbc\x8cLazyFunc""""""\n        return self.futures_cn_df.symbol\n\n    @LazyFunc\n    def product(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_cn_df.product\xef\xbc\x8cLazyFunc""""""\n        return self.futures_cn_df.product\n\n    @LazyFunc\n    def min_deposit(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_cn_df.min_deposit\xef\xbc\x8cLazyFunc""""""\n        return self.futures_cn_df.min_deposit\n\n    @LazyFunc\n    def min_unit(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_cn_df.min_unit\xef\xbc\x8cLazyFunc""""""\n        return self.futures_cn_df.min_unit\n\n    @LazyFunc\n    def commission(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_cn_df.commission\xef\xbc\x8cLazyFunc""""""\n        return self.futures_cn_df.commission\n\n    @LazyFunc\n    def exchange(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_cn_df.exchange\xef\xbc\x8cLazyFunc""""""\n        return self.futures_cn_df.exchange\n\n\n# TODO \xe6\x8f\x90\xe5\x8f\x96AbuFutures\xe5\x9f\xba\xe7\xb1\xbb\xef\xbc\x8c\xe5\x88\xa0\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe4\xbb\xa3\xe7\xa0\x81\n@singleton\nclass AbuFuturesGB(FreezeAttrMixin):\n    """"""\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cAbuFuturesGB\xe5\x8d\x95\xe4\xbe\x8b\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5FreezeAttrMixin\xe5\x9c\xa8__init__\xe4\xb8\xad\xe5\x86\xbb\xe7\xbb\x93\xe4\xba\x86\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaa\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\xbb\xe5\x8f\x96""""""\n\n    def __init__(self):\n        """"""\n            self.futures_gb_df\xe8\xa1\xa8\xe7\xbb\x93\xe6\x9e\x84\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\xe5\x88\x97\xe5\x88\x86\xe5\x88\xab\xe4\xb8\xba\n\n            symbol\tproduct\tmin_deposit\tmin_unit\texchange\n            0\tNID\t\xe4\xbc\xa6\xe6\x95\xa6\xe9\x95\x8d\t0.07\t6\tLME\n            1\tPBD\t\xe4\xbc\xa6\xe6\x95\xa6\xe9\x93\x85\t0.10\t25\tLME\n            2\tSND\t\xe4\xbc\xa6\xe6\x95\xa6\xe9\x94\xa1\t0.05\t5\tLME\n            3\tZSD\t\xe4\xbc\xa6\xe6\x95\xa6\xe9\x94\x8c\t0.10\t25\tLME\n            4\tAHD\t\xe4\xbc\xa6\xe6\x95\xa6\xe9\x93\x9d\t0.08\t25\tLME\n            5\tCAD\t\xe4\xbc\xa6\xe6\x95\xa6\xe9\x93\x9c\t0.08\t25\tLME\n        """"""\n        # \xe8\xaf\xbb\xe5\x8f\x96\xe6\x9c\xac\xe5\x9c\xb0csv\xe5\x88\xb0\xe5\x86\x85\xe5\xad\x98\n        self.futures_gb_df = pd.read_csv(_stock_code_futures_gb, index_col=0)\n        # __init__\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8FreezeAttrMixin._freeze\xe5\x86\xbb\xe7\xbb\x93\xe4\xba\x86\xe6\x8e\xa5\xe5\x8f\xa3\n        self._freeze()\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9afutures_cn_df.info\xef\xbc\x8c futures_cn_df.describe""""""\n        return \'info:\\n{}\\ndescribe:\\n{}\'.format(self.futures_gb_df.info(),\n                                                 self.futures_gb_df.describe())\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9afutures_cn_df.shape[0]\xef\xbc\x8c\xe5\x8d\xb3\xe8\xa1\x8c\xe6\x95\xb0""""""\n        return self.futures_gb_df.shape[0]\n\n    def __contains__(self, item):\n        """"""\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9aitem in self.futures_cn_df.columns\xef\xbc\x8c\xe5\x8d\xb3item\xe5\x9c\xa8\xe4\xb8\x8d\xe5\x9c\xa8futures_cn_df\xe7\x9a\x84\xe5\x88\x97\xe4\xb8\xad""""""\n        return item in self.futures_gb_df.columns\n\n    def __getitem__(self, key):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe5\xa5\x97\xe6\x8e\xa5self.futures_cn_df[key]""""""\n        if key in self:\n            return self.futures_gb_df[key]\n\n        symbol_df = self.futures_gb_df[self.futures_gb_df.symbol == key]\n        if not symbol_df.empty:\n            return symbol_df\n\n        # \xe4\xb8\x8d\xe5\x9c\xa8\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb4\xe4\xb8\xaa\xe8\xa1\xa8\xe6\xa0\xbcfutures_cn_df\n        return self.futures_gb_df\n\n    def __setitem__(self, key, value):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8a\x9b\xe5\x87\xba\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c \xe5\x8d\xb3\xe4\xb8\x8d\xe5\x87\x86\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae""""""\n        raise AttributeError(""AbuFuturesGB set value!!!"")\n\n    def query_symbol(self, symbol):\n        """"""\n        \xe5\xaf\xb9\xe5\xa4\x96\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x8e\xa5\xe5\x8f\xa3\n        :param symbol: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafsymbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if isinstance(symbol, Symbol):\n            symbol = symbol.value\n        if symbol in self.symbol.values:\n            return self.futures_gb_df[self.futures_gb_df.symbol.values == symbol]\n        return None\n\n    def query_min_unit(self, symbol):\n        """"""\n        \xe5\xaf\xb9query_symbol\xe7\x9a\x84\xe6\x9f\xa5\xe8\xaf\xa2\xe4\xb8\x80\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9a\x84\xe8\xbf\x91\xe4\xb8\x80\xe9\x83\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xb0\x81\xe8\xa3\x85\n        :param symbol: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafsymbol\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        min_cnt = 10\n        # \xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9c\x80\xe5\xb0\x91\xe4\xb8\x80\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\n        q_df = self.query_symbol(symbol)\n        if q_df is not None:\n            min_cnt = q_df.min_unit.values[0]\n        return min_cnt\n\n    @LazyFunc\n    def symbol(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_gb_df.symbol\xef\xbc\x8cLazyFunc""""""\n        return self.futures_gb_df.symbol\n\n    @LazyFunc\n    def product(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_gb_df.product\xef\xbc\x8cLazyFunc""""""\n        return self.futures_gb_df.product\n\n    @LazyFunc\n    def min_deposit(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_gb_df.min_deposit\xef\xbc\x8cLazyFunc""""""\n        return self.futures_gb_df.min_deposit\n\n    @LazyFunc\n    def min_unit(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_gb_df.min_unit\xef\xbc\x8cLazyFunc""""""\n        return self.futures_gb_df.min_unit\n\n    @LazyFunc\n    def exchange(self):\n        """"""\xe4\xbb\xa3\xe7\x90\x86\xe8\x8e\xb7\xe5\x8f\x96futures_gb_df.exchange\xef\xbc\x8cLazyFunc""""""\n        return self.futures_gb_df.exchange\n\n""""""\xe7\x94\xb1\xe4\xba\x8e\xe5\xb0\x81\xe8\xa3\x85\xe5\xaf\xb9\xe5\xa4\x96\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\xa8\xa1\xe5\x9d\x97\xe5\x8d\x95\xe4\xbe\x8b""""""\n# """"""\xe6\xa8\xa1\xe5\x9d\x97\xe5\x8d\x95\xe4\xbe\x8b""""""\n# futures_cn = AbuFuturesCn()\n'"
abupy/MarketBu/ABuSymbolPd.py,0,"b'# coding=utf-8\n""""""\n    \xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe6\xa8\xa1\xe5\x9d\x97\xe9\x9c\x80\xe8\xa6\x81\xe6\x95\xb0\xe6\x8d\xae\xe9\x83\xbd\xe5\x8f\xaa\xe5\xba\x94\xe8\xaf\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuSymbolPd, \xe4\xb8\x8d\xe5\xba\x94\xe6\xb6\x89\xe5\x8f\x8a\xe5\x85\xb6\xe5\xae\x83\xe5\x86\x85\xe9\x83\xa8\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nfrom collections import Iterable\n\nimport pandas as pd\n\nfrom .ABuDataSource import kline_pd\nfrom ..MarketBu.ABuDataCache import save_kline_df, check_csv_local\nfrom ..MarketBu.ABuSymbol import code_to_symbol\nfrom .ABuSymbol import Symbol\nfrom .ABuMarket import split_k_market\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketDataFetchMode, EDataCacheType\nfrom ..CoreBu.ABuFixes import partial, ThreadPoolExecutor\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import range\nfrom ..CoreBu.ABuDeprecated import AbuDeprecated\nfrom ..IndicatorBu import ABuNDAtr as Atr\nfrom ..UtilBu import ABuDateUtil\nfrom ..UtilBu.ABuFileUtil import batch_h5s\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress, do_clear_output\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..CoreBu.ABuFixes import six\n# from ..UtilBu.ABuThreadPool import AbuThreadPoolExecutor\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef _benchmark(df, benchmark, symbol):\n    """"""\n    \xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8kline_pd\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\x90\x8e\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\n    \xe5\x9f\xba\xe5\x87\x86benchmark\xef\xbc\x88pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x89\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9f\xba\xe5\x87\x86benchmark\xe7\x9a\x84\n    \xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe5\x88\x87\xe5\x89\xb2kline_pd\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe4\xbd\xbf\xe7\x94\xa8\xe5\x9f\xba\xe5\x87\x86\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe5\x88\x87\xe5\x89\xb2\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    if len(df.index & benchmark.kl_pd.index) <= 0:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x9f\xba\xe5\x87\x86benchmark\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe5\x92\x8c\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84df\xe6\xb2\xa1\xe6\x9c\x89\xe4\xba\xa4\xe9\x9b\x86\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9eNone\n        return None\n\n    # \xe4\xb8\xa4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe9\x80\x9a\xe8\xbf\x87loc\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\xa4\xe9\x9b\x86\n    kl_pd = df.loc[benchmark.kl_pd.index]\n    # nan\xe7\x9a\x84date\xe4\xb8\xaa\xe6\x95\xb0\xe5\x8d\xb3\xe4\xb8\xba\xe4\xb8\x8d\xe7\x9b\xb8\xe4\xba\xa4\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0\n    nan_cnt = kl_pd[\'date\'].isnull().value_counts()\n    # \xe4\xb8\xa4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f\n    same_end = df.index[-1] == benchmark.kl_pd.index[-1]\n    # \xe4\xb8\xa4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f\n    same_head = df.index[0] == benchmark.kl_pd.index[0]\n\n    # \xe5\xa6\x82\xe6\x9e\x9cnan_cnt\xe5\x8d\xb3\xe4\xb8\x8d\xe7\x9b\xb8\xe4\xba\xa4\xe4\xb8\xaa\xe6\x95\xb0\xe5\xa4\xa7\xe4\xba\x8ebenchmark\xe5\x9f\xba\xe5\x87\x86\xe4\xb8\xaa\xe6\x95\xb0\xe7\x9a\x841/3\xef\xbc\x8c\xe6\x94\xbe\xe5\xbc\x83\n    base_keep_div = 3\n    if same_end or same_head:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x93\xe6\x9d\x9f\xe6\x94\xb9\xe4\xb8\xba1/2\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe5\xa6\x82\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\xb4\xe5\xb0\xbe\xe6\x97\xa5\xe8\xb5\xb7\xe7\x9a\x84\xe6\xa0\x87\xe5\xb0\xba\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe7\x9a\x84\xe4\xb8\x8a\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe6\x94\xbe\xe5\xae\xbdna\xe6\x95\xb0\xe9\x87\x8f\n        base_keep_div = 2\n    if same_end and same_head:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x8c\xe6\x97\xb6\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe5\x92\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe6\x94\xb9\xe4\xb8\xba1\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe5\xa6\x82\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\xb4\xe5\xb0\xbe\xe6\x97\xa5\xe8\xb5\xb7\xe7\x9a\x84\xe6\xa0\x87\xe5\xb0\xba\xe9\x83\xbd\xe5\xaf\xb9\xe7\x9a\x84\xe4\xb8\x8a\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8cna\xe6\x95\xb0\xe9\x87\x8f\xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x8d\xe8\xae\xa1\n        base_keep_div = 1\n\n    if symbol.is_a_stock():\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafA\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe5\x81\x9c\xe7\x9b\x98\xe9\xa2\x91\xe7\x8e\x87\xe5\x92\x8c\xe5\x91\xa8\xe6\x9c\x9f\xe9\x83\xbd\xe4\xbc\x9a\xe9\x95\xbf\xe4\xb8\x8e\xe5\x85\xb6\xe5\xae\x83\xe5\xb8\x82\xe5\x9c\xba\xe6\x89\x80\xe4\xbb\xa5\xe5\x86\x8d\xe6\x94\xbe\xe5\xae\xbd\xe4\xb8\x80\xe4\xba\x9b\n        base_keep_div *= 0.7\n\n    if nan_cnt.index.shape[0] > 0 and nan_cnt.index.tolist().count(True) > 0 \\\n            and nan_cnt.loc[True] > benchmark.kl_pd.shape[0] / base_keep_div:\n        # nan \xe4\xb8\xaa\xe6\x95\xb0 > \xe5\x9f\xba\xe5\x87\x86base_keep_div\xe5\x88\x86\xe4\xb9\x8b\xe4\xb8\x80\xe6\x94\xbe\xe5\xbc\x83\n        return None\n\n    # \xe6\x9d\xa5\xe5\x88\xb0\xe8\xbf\x99\xe9\x87\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe6\xb2\xa1\xe6\x9c\x89\xe6\x94\xbe\xe5\xbc\x83\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\xb0\xb1\xe5\xa1\xab\xe5\x85\x85nan\n    # \xe9\xa6\x96\xe5\x85\x88nan\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe9\x87\x8f\xe6\x98\xaf0\n    kl_pd.volume.fillna(value=0, inplace=True)\n    # nan\xe7\x9a\x84p_change\xe6\x98\xaf0\n    kl_pd.p_change.fillna(value=0, inplace=True)\n    # \xe5\x85\x88\xe6\x8a\x8aclose\xe5\xa1\xab\xe5\x85\x85\xe4\xba\x86\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe7\x94\xa8close\xe5\xa1\xab\xe5\x85\x85\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\n    kl_pd.close.fillna(method=\'pad\', inplace=True)\n    kl_pd.close.fillna(method=\'bfill\', inplace=True)\n    # \xe7\x94\xa8close\xe5\xa1\xab\xe5\x85\x85open\n    kl_pd.open.fillna(value=kl_pd.close, inplace=True)\n    # \xe7\x94\xa8close\xe5\xa1\xab\xe5\x85\x85high\n    kl_pd.high.fillna(value=kl_pd.close, inplace=True)\n    # \xe7\x94\xa8close\xe5\xa1\xab\xe5\x85\x85low\n    kl_pd.low.fillna(value=kl_pd.close, inplace=True)\n    # \xe7\x94\xa8close\xe5\xa1\xab\xe5\x85\x85pre_close\n    kl_pd.pre_close.fillna(value=kl_pd.close, inplace=True)\n\n    # \xe7\xbb\x86\xe8\x8a\x82nan\xe5\xa4\x84\xe7\x90\x86\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xef\xbc\x8c\xe6\x8a\x8a\xe5\x89\xa9\xe4\xb8\x8b\xe7\x9a\x84nan\xe9\x83\xbd\xe5\xa1\xab\xe5\x85\x85\xe4\xba\x86\n    kl_pd = kl_pd.fillna(method=\'pad\')\n    # bfill\xe5\x86\x8d\xe6\x9d\xa5\xe4\xb8\x80\xe9\x81\x8d\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe5\xa1\xab\xe5\x85\x85\xe6\x9c\x80\xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84nan\n    kl_pd.fillna(method=\'bfill\', inplace=True)\n\n    # pad\xe4\xba\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x89\x80\xe4\xbb\xa5\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x9c\x9fdate\xe7\x9a\x84\xe5\x80\xbc\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaetime index\xe9\x87\x8d\xe6\x96\xb0\xe6\x9d\xa5\xe4\xb8\x80\xe9\x81\x8d\n    kl_pd[\'date\'] = [int(ts.date().strftime(""%Y%m%d"")) for ts in kl_pd.index]\n    kl_pd[\'date_week\'] = kl_pd[\'date\'].apply(lambda x: ABuDateUtil.week_of_date(str(x), \'%Y%m%d\'))\n\n    return kl_pd\n\n\ndef _make_kl_df(symbol, data_mode, n_folds, start, end, benchmark, save):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x80\xe4\xb8\xaasymbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8kline_pd\xe4\xbb\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x88\x96\xe8\x80\x85\xe6\x8c\x87\xe5\xae\x9a\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbd\x91\xe7\xbb\x9c\xe8\xaf\xb7\xe6\xb1\x82\n    :param symbol: str\xe5\xaf\xb9\xe8\xb1\xa1 or Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    :param data_mode: EMarketDataSplitMode enum\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_folds: \xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xaeint\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbd\x91\xe7\xbb\x9c\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8e\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe4\xbf\x9d\xe5\xad\x98\n    :return: (df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8csave_kl_key: \xe6\x8f\x90\xe4\xbe\x9b\xe5\xa4\x96\xe9\x83\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98)\n    """"""\n    df, save_kl_key = kline_pd(symbol, data_mode, n_folds=n_folds, start=start, end=end, save=save)\n    if df is not None and df.shape[0] == 0:\n        # \xe6\x8a\x8a\xe8\xa1\x8c\xe6\x95\xb0\xef\xbc\x9d0\xe7\x9a\x84\xe5\xbd\x92\xe7\xbb\x93\xe4\xb8\xba\xef\xbc\x9dNone, \xe6\x96\xb9\xe4\xbe\xbf\xe5\x90\x8e\xe7\xbb\xad\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\n        df = None\n\n    if benchmark is not None and df is not None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\xb0\xba\xe5\x88\x87\xe5\x89\xb2\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\xb0\xba\xe5\x88\x87\xe5\x89\xb2\xe5\x90\x8e\xe4\xb9\x9f\xe5\x8f\xaf\xe8\x83\xbd\xe5\x8f\x98\xe6\x88\x90none\n        temp_symbol = save_kl_key[0]\n        df = _benchmark(df, benchmark, temp_symbol)\n\n    if df is not None:\n        # \xe8\xa7\x84\xe9\x81\xbf\xe9\x87\x8d\xe5\xa4\x8d\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\xe9\xa3\x8e\xe9\x99\xa9\xef\xbc\x8csubset\xe5\x8f\xaa\xe8\xae\xbe\xe7\xbd\xaedate\xe5\x81\x9a\xe4\xb8\xba\xe6\xbb\xa4\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\n        df.drop_duplicates(subset=[\'date\'], inplace=True)\n        # noinspection PyProtectedMember\n        if not ABuEnv._g_enable_example_env_ipython or \'atr14\' not in df.columns or \'atr21\' not in df.columns:\n            # \xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe7\x8e\xaf\xe5\xa2\x83\xe8\xae\xa1\xe7\xae\x97, \xe6\x88\x96\xe8\x80\x85\xe6\x98\xaf\xe6\xb2\x99\xe7\x9b\x92\xe4\xbd\x86\xe6\x95\xb0\xe6\x8d\xae\xe6\x9c\xac\xe8\xba\xab\xe6\xb2\xa1\xe6\x9c\x89atr14\xef\xbc\x8catr21\n            calc_atr(df)\n        # \xe6\xa0\xb9\xe6\x8d\xaedf\xe9\x95\xbf\xe5\xba\xa6\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8ckey\xe8\xae\xa1\xe7\xae\x97\n        df[\'key\'] = list(range(0, len(df)))\n        temp_symbol = save_kl_key[0]\n        df.name = temp_symbol.value\n    return df, save_kl_key\n\n\ndef _kl_df_dict_parallel(choice_symbols, data_mode, n_folds, start, end, benchmark):\n    """"""\n    \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x88\x96\xe8\x80\x85\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n    :param choice_symbols: symbol\xe5\xba\x8f\xe5\x88\x97\n    :param data_mode: EMarketDataSplitMode enum\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_folds: \xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xaeint\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: df_dict\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xadkey=\xe8\xaf\xb7\xe6\xb1\x82symbol\xe7\x9a\x84str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cvalue\xef\xbc\x9d(save_kl_key: \xe6\x8f\x90\xe4\xbe\x9b\xe5\xa4\x96\xe9\x83\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98, df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1)\n    """"""\n    df_dict = {}\n    # \xe6\xb3\xa8\xe6\x84\x8fsave=False\n\n    # \xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe6\x9a\x82\xe6\x97\xb6\xe4\xb9\x9f\xe5\x90\xaf\xe5\x8a\xa8\xe4\xba\x86AbuMulPidProgress\xef\xbc\x8c\xe9\x9c\x80\xe4\xbc\x98\xe5\x8c\x96\n    with AbuMulPidProgress(len(choice_symbols), \'kl_df parallel complete\') as progress:\n        for epoch, symbol in enumerate(choice_symbols):\n            # \xe8\xbf\xad\xe4\xbb\xa3choice_symbols\xe8\xbf\x9b\xe8\xa1\x8c_make_kl_df, \xe6\xb3\xa8\xe6\x84\x8f_make_kl_df\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0save=False\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb9\xb6\xe8\xa1\x8c\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe4\xb8\x8d\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8save\xef\xbc\x8c\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8save\n            df, key_tuple = _make_kl_df(symbol, data_mode=data_mode,\n                                        n_folds=n_folds, start=start, end=end, benchmark=benchmark, save=False)\n            if isinstance(key_tuple, tuple) and len(key_tuple) == 3:\n                # key=\xe8\xaf\xb7\xe6\xb1\x82symbol\xe7\x9a\x84str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cvalue\xef\xbc\x9d(save_kl_key: \xe6\x8f\x90\xe4\xbe\x9b\xe5\xa4\x96\xe9\x83\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98, df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1)\n                df_dict[key_tuple[0].value] = (key_tuple, df)\n            progress.show(epoch + 1)\n\n    return df_dict\n\n\ndef kl_df_dict_parallel(symbols, data_mode=ABuEnv.EMarketDataSplitMode.E_DATA_SPLIT_SE,\n                        n_folds=2, start=None, end=None, benchmark=None, n_jobs=16, save=True, how=\'thread\'):\n    """"""\n    \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x88\x96\xe8\x80\x85\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe5\xaf\xb9\xe5\xa4\x96\xe6\x89\xa7\xe8\xa1\x8c\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\n    :param symbols: symbol\xe5\xba\x8f\xe5\x88\x97\n    :param data_mode: EMarketDataSplitMode enum\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_folds: \xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xaeint\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_jobs: \xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe7\xba\xbf\xe7\xa8\x8b\xe4\xbb\xa3\xe8\xa1\xa8\xe7\xba\xbf\xe7\xa8\x8b\xe6\x95\xb0\n    :param save: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9c\xa8\xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x8e\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n    :param how: process\xef\xbc\x9a\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8cthread\xef\xbc\x9a\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xef\xbc\x8cmain\xef\xbc\x9a\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8d\x95\xe7\xba\xbf\xe7\xa8\x8b\n    """"""\n\n    # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n    if not isinstance(symbols, Iterable) or isinstance(symbols, six.string_types):\n        # symbols\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\n        raise TypeError(\'symbols must a Iterable obj!\')\n    # \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84symbols\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x86\xe6\x88\x90n_jobs\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n    parallel_symbols = split_k_market(n_jobs, market_symbols=symbols)\n    # \xe4\xbd\xbf\xe7\x94\xa8partial\xe5\xaf\xb9\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x87\xbd\xe6\x95\xb0_kl_df_dict_parallel\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa7\x94\xe6\x89\x98\n    parallel_func = partial(_kl_df_dict_parallel, data_mode=data_mode, n_folds=n_folds, start=start, end=end,\n                            benchmark=benchmark)\n    # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xbc\x9a\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe6\x8d\xa2\xe4\xb8\xba\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0, \xe5\x8d\xb332 -> 33 16 -> 17\n    n_jobs = len(parallel_symbols)\n    if how == \'process\':\n        """"""\n            mac os 10.9 \xe4\xbb\xa5\xe5\x90\x8e\xe7\x9a\x84\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x8a\xa0\xe4\xb8\x8anumpy\xe4\xb8\x8d\xe6\x98\xafcrash\xe5\xb0\xb1\xe6\x98\xaf\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8d\xa1\xe6\xad\xbb\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe7\x94\xa8\xef\xbc\x8c\xe7\x94\xa8thread\n        """"""\n        if ABuEnv.g_is_mac_os:\n            logging.info(\'mac os 10.9 parallel with numpy crash or dead!!\')\n\n        parallel = Parallel(\n            n_jobs=n_jobs, verbose=0, pre_dispatch=\'2*n_jobs\')\n        df_dicts = parallel(delayed(parallel_func)(choice_symbols)\n                            for choice_symbols in parallel_symbols)\n    elif how == \'thread\':\n        # \xe9\x80\x9a\xe8\xbf\x87ThreadPoolExecutor\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xba\xbf\xe7\xa8\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\n        with ThreadPoolExecutor(max_workers=n_jobs) as pool:\n            k_use_map = True\n            if k_use_map:\n                df_dicts = list(pool.map(parallel_func, parallel_symbols))\n            else:\n                futures = [pool.submit(parallel_func, symbols) for symbols in parallel_symbols]\n                df_dicts = [future.result() for future in futures if future.exception() is None]\n    elif how == \'main\':\n        # \xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8d\x95\xe7\xba\xbf\xe7\xa8\x8b\n        df_dicts = [parallel_func(symbols) for symbols in parallel_symbols]\n    else:\n        raise TypeError(\'ONLY process OR thread!\')\n\n    if save:\n        # \xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\n        h5s_fn = ABuEnv.g_project_kl_df_data if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5 else None\n\n        @batch_h5s(h5s_fn)\n        def _batch_save():\n            for df_dict in df_dicts:\n                # \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaadf_dict\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n                for ind, (key_tuple, df) in enumerate(df_dict.values()):\n                    # (key_tuple, df)\xe6\x98\xaf\xe4\xbf\x9d\xe5\xad\x98kl\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae, \xe8\xbf\xad\xe4\xbb\xa3\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8save_kline_df\n                    save_kline_df(df, *key_tuple)\n                    if df is not None:\n                        print(""save kl {}_{}_{} {}/{}"".format(key_tuple[0].value, key_tuple[1], key_tuple[2], ind,\n                                                              df.shape[0]))\n                # \xe5\xae\x8c\xe6\x88\x90\xe4\xb8\x80\xe5\xb1\x82\xe5\xbe\xaa\xe7\x8e\xaf\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8e\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb8\x85\xe5\xb1\x8f\n                do_clear_output()\n\n        _batch_save()\n    return df_dicts\n\n\n# noinspection PyDeprecation\ndef make_kl_df(symbol, data_mode=ABuEnv.EMarketDataSplitMode.E_DATA_SPLIT_SE,\n               n_folds=2, start=None, end=None, benchmark=None, show_progress=True, parallel=False, parallel_save=True):\n    """"""\n    \xe5\xa4\x96\xe9\x83\xa8\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x8e\xa5\xe5\x8f\xa3\n    eg: n_fold=2, start=None, end=None \xef\xbc\x8c\xe4\xbb\x8e\xe4\xbb\x8a\xe5\xa4\xa9\xe8\xb5\xb7\xe5\xbe\x80\xe5\x89\x8d\xe6\x95\xb0\xe4\xb8\xa4\xe5\xb9\xb4\n        n_fold=2, start=\'2015-02-14\', end=None\xef\xbc\x8c \xe4\xbb\x8e2015-02-14\xe5\x88\xb0\xe7\x8e\xb0\xe5\x9c\xa8\xef\xbc\x8cn_fold\xe6\x97\xa0\xe6\x95\x88\n        n_fold=2, start=None, end=\'2016-02-14\'\xef\xbc\x8c\xe4\xbb\x8e2016-02-14\xe8\xb5\xb7\xe5\xbe\x80\xe5\x89\x8d\xe6\x95\xb0\xe4\xb8\xa4\xe5\xb9\xb4\n        n_fold=2, start=\'2015-02-14\', end=\'2016-02-14\'\xef\xbc\x8c\xe4\xbb\x8estart\xe5\x88\xb0end\n\n    :param data_mode: EMarketDataSplitMode\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: list or Series or str or Symbol\n                    e.g :[\'TSLA\',\'SFUN\'] or \'TSLA\' or Symbol(MType.US,\'TSLA\')\n    :param n_folds: \xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xaeint\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param show_progress: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    :param parallel: \xe6\x98\xaf\xe5\x90\xa6\xe5\xb9\xb6\xe8\xa1\x8c\xe8\x8e\xb7\xe5\x8f\x96\n    :param parallel_save: \xe6\x98\xaf\xe5\x90\xa6\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x90\x8e\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\n    """"""\n\n    if isinstance(symbol, (list, tuple, pd.Series, pd.Index)):\n        # \xe5\xa6\x82\xe6\x9e\x9csymbol\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x89\xe7\xbb\xb4\xe9\x9d\xa2\xe6\x9d\xbf\xe6\x95\xb0\xe6\x8d\xaepd.Panel\n        panel = dict()\n        if parallel:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xb9\xb6\xe8\xa1\x8c\xe8\x8e\xb7\xe5\x8f\x96\n            if ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET \\\n                    and ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5:\n                # \xe5\x8f\xaa\xe8\x83\xbd\xe9\x92\x88\xe5\xaf\xb9\xe9\x9d\x9ehdf5\xe5\xad\x98\xe8\xb4\xae\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\x8b\xe6\x88\x96\xe8\x80\x85\xe9\x92\x88\xe5\xaf\xb9force_net\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbahdf5\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b\xe8\xaf\xbb\xe5\xae\xb9\xe6\x98\x93\xe5\x8d\xa1\xe6\xad\xbb\n                raise RuntimeError(\'make_kl_df just suit force net or not hdf5 store!\')\n\n            df_dicts = kl_df_dict_parallel(symbol, data_mode=data_mode, n_folds=n_folds, start=start, end=end,\n                                           benchmark=benchmark, save=parallel_save, how=\'thread\')\n            for df_dict in df_dicts:\n                for key_tuple, df in df_dict.values():\n                    if df is None or df.shape[0] == 0:\n                        continue\n                    # \xe5\x8d\xb3\xe4\xb8\xa2\xe5\xbc\x83\xe5\x8e\x9f\xe5\xa7\x8bdf_dict\xe4\xbf\x9d\xe5\xad\x98\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84save_kl_key\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99df\xef\xbc\x8c\xe8\xb5\x8b\xe4\xba\x88panel\n                    panel[key_tuple[0].value] = df\n        else:\n            def _batch_make_kl_df():\n                with AbuMulPidProgress(len(symbol), \'_make_kl_df complete\') as progress:\n                    for pos, _symbol in enumerate(symbol):\n                        _df, _ = _make_kl_df(_symbol, data_mode=data_mode,\n                                             n_folds=n_folds, start=start, end=end, benchmark=benchmark, save=True)\n                        if show_progress:\n                            progress.show()\n                        # TODO \xe5\x81\x9apd.Panel\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x94\xe8\xaf\xa5\xe4\xbf\x9d\xe8\xaf\x81\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe7\x9a\x84\xe8\xa1\x8c\xe6\x95\xb0\xe5\x92\x8c\xe5\x88\x97\xe6\x95\xb0\xe9\x83\xbd\xe7\x9b\xb8\xe7\xad\x89\xef\xbc\x8c\xe4\xb8\x8d\xe6\x98\xaf\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe5\xb0\xb1\xe8\xa1\x8c\n                        if _df is None or _df.shape[0] == 0:\n                            continue\n\n                        panel[symbol[pos]] = _df\n\n            _batch_make_kl_df()\n        # TODO pd.Panel\xe8\xbf\x87\xe6\x97\xb6\n        return pd.Panel(panel)\n\n    elif isinstance(symbol, Symbol) or isinstance(symbol, six.string_types):\n        # \xe5\xaf\xb9\xe5\x8d\x95\xe4\xb8\xaasymbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\n        df, _ = _make_kl_df(symbol, data_mode=data_mode,\n                            n_folds=n_folds, start=start, end=end, benchmark=benchmark, save=True)\n        return df\n    else:\n        raise TypeError(\'symbol type is error\')\n\n\ndef get_price(symbol, start_date=None, end_date=None):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87make_kl_df\xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe9\x85\x8d\xe5\x90\x88\xe4\xb8\xbb\xe6\xb5\x81\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xb9\xb3\xe5\x8f\xb0\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe9\x80\x82\xe9\x85\x8d\xe4\xbd\xbf\xe7\x94\xa8\n    :param symbol: str\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n    :param start_date: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end_date: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaaprice\xe5\x88\x97\n    """"""\n    df = make_kl_df(symbol, start=start_date, end=end_date)\n    if df is not None:\n        df = df.filter([\'close\'])\n        # \xe4\xb8\xba\xe4\xba\x86\xe9\x85\x8d\xe5\x90\x88\xe4\xb8\xbb\xe6\xb5\x81\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xb9\xb3\xe5\x8f\xb0\xe9\x80\x82\xe9\x85\x8d\n        return df.rename(columns={\'close\': \'price\'})\n\n\ndef check_symbol_in_local_csv(symbol):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe4\xbc\xa0\xe9\x80\x92symbol\xe7\x9b\x91\xe6\xb5\x8bsymbol\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8csv\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe4\xb8\x8d\xe7\x9b\x91\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe7\x9b\x91\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe7\xbc\x93\xe5\xad\x98\n    :param symbol: str\xe5\xaf\xb9\xe8\xb1\xa1 or Symbol\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\x86\x85\xe9\x83\xa8\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbd\xbf\xe7\x94\xa8code_to_symbol\xe5\x8f\x98\xe6\x88\x90Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n                   e.g : \'usTSLA\' or Symbol(MType.US,\'TSLA\')\n    :return: bool, symbol\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8csv\xe7\xbc\x93\xe5\xad\x98\n    """"""\n\n    if isinstance(symbol, six.string_types):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87code_to_symbol\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1\n        symbol = code_to_symbol(symbol, rs=False)\n    if symbol is None:\n        # \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9code_to_symbol\xe6\x97\xa0\xe8\xa7\x84\xe5\x88\x99\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x8f\xaa\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe7\xbc\x93\xe5\xad\x98\n        return False\n\n    if not isinstance(symbol, Symbol):\n        raise TypeError(\'symbol must like as ""usTSLA"" or ""TSLA"" or Symbol(MType.US, ""TSLA"")\')\n\n    return check_csv_local(symbol.value)\n\n\ndef combine_pre_kl_pd(kl_pd, n_folds=1):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe4\xbc\xa0\xe4\xba\xba\xe4\xb8\x80\xe4\xb8\xaakl_pd\xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x99\xe4\xb8\xaakl_pd\xe4\xb9\x8b\xe5\x89\x8dn_folds\xe5\xb9\xb4\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84kl\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4n_folds=1,\n    eg. kl_pd \xe4\xbb\x8e2014-07-26\xe8\x87\xb32016-07-26\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88get 2013-07-26\xe8\x87\xb32014-07-25\n    \xe4\xb9\x8b\xe5\x90\x8e\xe5\x90\x88\xe5\xb9\xb6\xe4\xb8\xa4\xe6\xae\xb5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xba2013-07-26\xe8\x87\xb32016-07-26\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_folds: \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb9\x8b\xe5\x89\x8dn_folds\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n    :return: \xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe5\x92\x8c\xe8\xbe\x93\xe5\x85\xa5kl_pd\xe5\x90\x88\xe5\xb9\xb6\xe5\x90\x8e\xe7\x9a\x84\xe6\x80\xbbkl\n    """"""\n\n    # \xe8\x8e\xb7\xe5\x8f\x96kl_pd\xe7\x9a\x84\xe8\xb5\xb7\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\n    end = ABuDateUtil.timestamp_to_str(kl_pd.index[0])\n    # kl_pd\xe7\x9a\x84\xe8\xb5\xb7\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4\xe5\x81\x9a\xe4\xb8\xbaend\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9a\xe8\xbf\x87make_kl_df\xe5\x92\x8cn_folds\xe5\x8f\x82\xe6\x95\xb0\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    pre_kl_pd = make_kl_df(kl_pd.name, data_mode=ABuEnv.EMarketDataSplitMode.E_DATA_SPLIT_SE, n_folds=n_folds,\n                           end=end)\n    # \xe5\x86\x8d\xe5\x90\x88\xe5\xb9\xb6\xe4\xb8\xa4\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpre_kl_pd[:-1]\xe8\xb7\xb3\xe8\xbf\x87\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84end\n    combine_kl = kl_pd if pre_kl_pd is None else pre_kl_pd[:-1].append(kl_pd)\n    # \xe6\xa0\xb9\xe6\x8d\xaecombine_kl\xe9\x95\xbf\xe5\xba\xa6\xe9\x87\x8d\xe6\x96\xb0\xe8\xbf\x9b\xe8\xa1\x8ckey\xe8\xae\xa1\xe7\xae\x97\n    combine_kl[\'key\'] = list(range(0, len(combine_kl)))\n    return combine_kl\n\n\ndef calc_atr(kline_df):\n    """"""\n    \xe4\xb8\xba\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84kline_df\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xae\xa1\xe7\xae\x97atr21\xe5\x92\x8catr14\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x88\xb0kline_df\xe7\x9a\x84atr21\xe5\x88\x97\xe5\x92\x8catr14\xe5\x88\x97\xe4\xb8\xad\n    :param kline_df: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    kline_df[\'atr21\'] = 0\n    if kline_df.shape[0] > 21:\n        # \xe5\xa4\xa7\xe4\xba\x8e21d\xe8\xae\xa1\xe7\xae\x97atr21\n        kline_df[\'atr21\'] = Atr.atr21(kline_df[\'high\'].values, kline_df[\'low\'].values, kline_df[\'pre_close\'].values)\n        # \xe5\xb0\x86\xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84bfill\n        kline_df[\'atr21\'].fillna(method=\'bfill\', inplace=True)\n    kline_df[\'atr14\'] = 0\n    if kline_df.shape[0] > 14:\n        # \xe5\xa4\xa7\xe4\xba\x8e14d\xe8\xae\xa1\xe7\xae\x97atr14\n        kline_df[\'atr14\'] = Atr.atr14(kline_df[\'high\'].values, kline_df[\'low\'].values, kline_df[\'pre_close\'].values)\n        # \xe5\xb0\x86\xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84bfill\n        kline_df[\'atr14\'].fillna(method=\'bfill\', inplace=True)\n\n\n@AbuDeprecated(\'only for old abu!\')\ndef get_n_year(kl_pd, from_year, get_year=1, how=\'ff\'):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96pd\xe4\xb8\xad\xe7\xac\xacn\xe5\xb9\xb4\xe5\x88\x87\xe7\x89\x87\xe6\x95\xb0\xe6\x8d\xae, Deprecated\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param from_year: form 1\xe5\xbc\x80\xe5\xa7\x8b\xe7\xba\xa0\xe9\x94\x990 to 1\n    :param get_year: \xe8\xa6\x81\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae1\xe5\xb0\xb1\xe6\x98\xaf1\xe5\xb9\xb4\xef\xbc\x8c0.5\xe5\x8d\x8a\xe5\xb9\xb4 \xe9\xbb\x98\xe8\xae\xa41 year\xe6\x94\xaf\xe6\x8c\x810.1 to inf\n    :param how:=\'bf\' \xe4\xbb\x8e\xe5\x90\x8e\xe5\x90\x91\xe5\x89\x8d\xe5\x88\x87 =\'ff\' \xe4\xbb\x8e\xe5\x89\x8d\xe5\x90\x91\xe5\x90\x8e\xe5\x88\x87\n    """"""\n    td = ABuEnv.g_market_trade_year\n    n_n_year = int(kl_pd.shape[0] / td)\n    if from_year == 0:\n        from_year = 1\n        logging.info(\'get_n_year form num 1 so you pass 0 covert to 1\')\n    if from_year > n_n_year:\n        raise ValueError(\'get_n_year n_year > n_n_year!\')\n\n    get_days = int(get_year * td)\n\n    if how == \'ff\':\n        # \xe4\xbb\x8e\xe5\x89\x8d\xe5\x90\x91\xe5\x90\x8e\xe5\x88\x87\n        st = int((from_year - 1) * td)\n        ed = st + get_days if st + get_days < kl_pd.shape[0] else kl_pd.shape[0]\n    elif how == \'bf\':\n        ed = kl_pd.shape[0] - int((from_year - 1) * td)\n        st = ed - get_days - 1 if ed - get_days > 0 else 0\n    else:\n        raise TypeError(\'error direction input!\')\n\n    ys = slice(st, ed)\n    ret_pd = kl_pd[ys]\n    if hasattr(kl_pd, \'name\'):\n        ret_pd.name = kl_pd.name\n    return ret_pd\n'"
abupy/MarketBu/ABuSymbolStock.py,0,"b'# coding=utf-8\n""""""\n    \xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84symbol\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8ca\xe8\x82\xa1\xef\xbc\x8c\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\n\nimport pandas as pd\n\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu.ABuBase import FreezeAttrMixin\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketTargetType, EMarketSubType\nfrom ..UtilBu.ABuDTUtil import singleton\nfrom ..UtilBu.ABuStrUtil import digit_str\nfrom ..MarketBu.ABuSymbol import Symbol, code_to_symbol\nfrom ..CrawlBu.ABuXqConsts import columns_map\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n_rom_dir = ABuEnv.g_project_rom_data_dir\n""""""a\xe8\x82\xa1symbol\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xae\x9a\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe7\x88\xac\xe5\x8f\x96\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0""""""\n_stock_code_cn = os.path.join(_rom_dir, \'stock_code_CN.csv\')\n""""""\xe7\xbe\x8e\xe8\x82\xa1symbol\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xae\x9a\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe7\x88\xac\xe5\x8f\x96\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0""""""\n_stock_code_us = os.path.join(_rom_dir, \'stock_code_US.csv\')\n""""""\xe6\xb8\xaf\xe8\x82\xa1symbol\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xae\x9a\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe7\x88\xac\xe5\x8f\x96\xef\xbc\x8c\xe6\x9b\xb4\xe6\x96\xb0""""""\n_stock_code_hk = os.path.join(_rom_dir, \'stock_code_HK.csv\')\n\n\nclass AbuStockBaseWrap(object):\n    """"""\xe5\x81\x9a\xe4\xb8\xba\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xb0\x81\xe8\xa3\x85\xe6\x9b\xbf\xe6\x8d\xa2init \xe8\xa7\xa3\xe6\x9e\x90csv symbol\xe6\x95\xb0\xe6\x8d\xae\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xa3\x85\xe9\xa5\xb0\xe6\x9b\xbf\xe6\x8d\xa2init""""""\n\n    def __call__(self, cls):\n        if isinstance(cls, six.class_types):\n            # \xe5\x8f\xaa\xe5\x81\x9a\xe4\xb8\xba\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x8b\xbf\xe5\x87\xba\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9a\x84__init__\n            init = cls.__init__\n\n            def wrapped(*args, **kwargs):\n                warp_self = args[0]\n                warp_self.df = None\n\n                init(*args, **kwargs)\n\n                # \xe5\x89\x94\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe6\x95\xb0\xe6\x8d\xae\n                warp_self.df.drop_duplicates(inplace=True)\n\n                warp_self.df[\'industry_factorize\'], industry_factorize_name = \\\n                    pd.factorize(warp_self.df.industry)\n                # \xe7\x94\xa8Series\xe5\x8c\x85\xe8\xa3\x85\xe4\xb8\x80\xe4\xb8\x8b\xe7\xa6\xbb\xe6\x95\xa3\xe5\x90\x8e\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe4\xbb\xa5\xe4\xbe\xbf\xe6\x96\xb9\xe4\xbe\xbf\xe5\xaf\xb9\xe5\xba\x94\xe8\xa1\x8c\xe4\xb8\x9a\xe7\xb4\xa2\xe5\xbc\x95\n                warp_self.industry_factorize_name_series = pd.Series(industry_factorize_name)\n\n                # \xe5\xb0\x86\xe6\x98\xa0\xe5\xb0\x84\xe4\xb8\xadkey\xe5\x92\x8cvalue\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x92\xe6\x8d\xa2\xef\xbc\x8ccolumns_map\xe4\xb8\xad\xe4\xb8\xad\xe6\x96\x87\xe7\x9a\x84key\xe5\x92\x8c\xe8\x8b\xb1\xe6\x96\x87\xe7\x9a\x84value\xef\xbc\x88\xe8\xaf\xa6ABuXqConsts\xef\xbc\x89\xef\xbc\x8c\xe5\x8d\xb3\xe5\xbd\xa2\xe6\x88\x90\xe6\x9c\xac\xe5\x9c\xb0\xe8\xaf\xad\xe8\xa8\x80\xe5\x88\x97\xe5\x90\x8d\n                local_columns_map = {columns_map[col_key]: col_key for col_key in columns_map}\n                # show_df\xe4\xb8\xad\xe5\x88\x97\xe5\x90\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe8\xaf\xad\xe8\xa8\x80\xe5\xb1\x95\xe7\xa4\xba\n                warp_self.show_df = warp_self.df.rename(columns=local_columns_map, inplace=False)\n                # \xe5\x86\xbb\xe7\xbb\x93\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\x8f\xaa\xe8\xaf\xbb\n                # noinspection PyProtectedMember\n                warp_self._freeze()\n\n            # \xe4\xbd\xbf\xe7\x94\xa8wrapped\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe7\x9a\x84__init__\n            cls.__init__ = wrapped\n            wrapped.__name__ = \'__init__\'\n            # \xe8\xae\xb0\xe5\xbd\x95\xe5\x8e\x9f\xe5\xa7\x8binit\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xbadeprecated_original\n            wrapped.deprecated_original = init\n            return cls\n        else:\n            raise TypeError(\'AbuStockBaseWrap just for class warp\')\n\n\n# noinspection PyUnresolvedReferences\nclass AbuSymbolStockBase(FreezeAttrMixin):\n    """"""\xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84symbol\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9adf.info\xef\xbc\x8c df.describe""""""\n        return \'info:\\n{}\\ndescribe:\\n{}\'.format(self.df.info(),\n                                                 self.df.describe())\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9adf.shape[0]\xef\xbc\x8c\xe5\x8d\xb3\xe8\xa1\x8c\xe6\x95\xb0""""""\n        return self.df.shape[0]\n\n    def __setitem__(self, key, value):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8a\x9b\xe5\x87\xba\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c \xe5\x8d\xb3\xe4\xb8\x8d\xe5\x87\x86\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae""""""\n        raise AttributeError(""AbuFuturesCn set value!!!"")\n\n    def query_industry_symbols(self, query_symbol, local_df=True):\n        """"""\n        \xe4\xb8\xbaABuIndustries\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe6\x8f\x90\xe4\xbe\x9b\xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9aindustry_df\xe5\xad\x90\xe9\x9b\x86\n        :param query_symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        :param local_df: \xe6\x98\xaf\xe5\x90\xa6\xe5\x9f\xba\xe4\xba\x8eshow_df\xe8\xbf\x94\xe5\x9b\x9e\xe8\xa1\x8c\xe4\xb8\x9adf\n        :return: \xe6\x9f\xa5\xe8\xaf\xa2query_symbol\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        industry_df = None\n        # \xe4\xbd\xbf\xe7\x94\xa8in\xe6\x9f\xa5\xe8\xaf\xa2self\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe7\xb1\xbb\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84__contains__\n        if query_symbol in self:\n            # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8000001\xe4\xb8\x8d\xe5\xb8\xa6\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xe6\xa0\x87\xe8\xaf\x86\xe5\x8e\xbb\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe6\x9f\xa5\xe8\xaf\xa2\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x8c\xe6\x95\xb4\xe6\xa0\x87\xe7\xa4\xba\n            factorize = self[query_symbol][\'industry_factorize\'].values[0]\n            # \xe5\x8f\x82\xe6\x95\xb0local_df\xe5\x86\xb3\xe5\xae\x9a\xe8\xa1\x8c\xe4\xb8\x9aindustry_df\xe5\xad\x90\xe9\x9b\x86\xe5\x9f\xba\xe4\xba\x8e\xe6\x9c\xac\xe5\x9c\xb0\xe8\xaf\xad\xe8\xa8\x80\xe7\x9a\x84show_df\xe8\xbf\x98\xe6\x98\xafdf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8show_df\xe6\x9b\xb4\xe5\x8a\xa0\xe6\x96\xb9\xe4\xbe\xbf\xe5\xa4\x96\xe9\x9d\xa2\xe6\x9f\xa5\xe9\x98\x85\xe5\xaf\xb9\xe5\xba\x94\xe5\x86\x85\xe5\xae\xb9\xe6\x84\x8f\xe4\xb9\x89\n            base_df = self.show_df if local_df else self.df\n            # \xe5\x88\x87\xe5\x8f\x96\xe8\xa1\x8c\xe4\xb8\x9afactorize\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\xad\x90\xe9\x9b\x86\n            industry_df = base_df[base_df[\'industry_factorize\'] == factorize]\n        return industry_df\n\n    def query_industry_factorize(self, factorize, local_df=True):\n        """"""\n        \xe4\xb8\xbaABuIndustries\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe6\x8f\x90\xe8\xa1\x8c\xe4\xb8\x9a\xe7\x9a\x84factorize\xe5\x80\xbc\xe6\x9f\xa5\xe8\xaf\xa2industry_df\xe5\xad\x90\xe9\x9b\x86\n        :param factorize: int\n        :param local_df: \xe6\x98\xaf\xe5\x90\xa6\xe5\x9f\xba\xe4\xba\x8eshow_df\xe8\xbf\x94\xe5\x9b\x9e\xe8\xa1\x8c\xe4\xb8\x9adf\n        :return: \xe9\x80\x9a\xe8\xbf\x87factorize\xe5\x80\xbc\xe6\x9f\xa5\xe8\xaf\xa2industry_df\xe5\xad\x90\xe9\x9b\x86\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        base_df = self.show_df if local_df else self.df\n        # \xe5\x88\x87\xe5\x8f\x96\xe8\xa1\x8c\xe4\xb8\x9afactorize\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\xad\x90\xe9\x9b\x86\n        industry_df = base_df[base_df[\'industry_factorize\'] == factorize]\n        return industry_df\n\n    def all_symbol(self, index=False):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8symbol str\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n        :param index: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xa7\xe7\x9b\x98symbol\n        :return: \xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        raise NotImplementedError(\'NotImplementedError AbuSymbolStockBase all_symbol!!!\')\n\n    def query_symbol_sub_market(self, *args, **kwargs):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe4\xbf\xa1\xe6\x81\xaf\n        :return: \xe8\xbf\x94\xe5\x9b\x9eEMarketSubType.value\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xef\xbc\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        raise NotImplementedError(\'NotImplementedError AbuSymbolStockBase query_symbol_sub_market!!!\')\n\n    def symbol_func(self, df):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87df\xe7\xbb\x84\xe8\xa3\x85\xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\n        :param df: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        raise NotImplementedError(\'NotImplementedError AbuSymbolStockBase symbol_func!!!\')\n\n\n@singleton\n@AbuStockBaseWrap()\nclass AbuSymbolCN(AbuSymbolStockBase):\n    """"""a\xe8\x82\xa1symbol\xe7\xb1\xbb\xef\xbc\x8csingleton""""""\n\n    def __init__(self):\n        """"""\xe8\xa2\xabAbuStockBaseWrap\xe6\x9b\xbf\xe6\x8d\xa2__init__\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe9\x9c\x80\xe8\xaf\xbb\xe5\x8f\x96a\xe8\x82\xa1\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\xb0self.df \xe5\x90\x8e\xe7\xbb\xad\xe5\x9c\xa8\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xae\x8c\xe6\x88\x90""""""\n        self.df = pd.read_csv(_stock_code_cn, index_col=0, dtype=str)\n\n    def __contains__(self, item):\n        """"""\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9a\xe6\x98\xaf\xe5\x90\xa6item\xe5\x9c\xa8self.df.symbol.values\xe4\xb8\xad""""""\n        return digit_str(item) in self.df.symbol.values\n\n    def __getitem__(self, key):\n        """"""\n            \xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe4\xb8\xa4\xe7\xa7\x8d\xe6\xa8\xa1\xe5\xbc\x8f\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\n            1. \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xbadf\xe7\x9a\x84columns\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.df[key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe5\x88\x97\n            2. \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8cself.df[self.df.symbol == key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe8\xa1\x8c\n        """"""\n\n        if key in self.df.columns:\n            # \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xbadf\xe7\x9a\x84columns\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8cget df\xe7\x9a\x84\xe8\xa1\x8c\n            return self.df[key]\n\n        if len(key) > 2:\n            head = key[:2].upper()\n            if head.isalpha():\n                # \xe5\xa4\xb4\xe4\xb8\xa4\xe4\xbd\x8d\xe6\x98\xaf\xe5\xad\x97\xe9\x9d\xa2\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xafexchange\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x88\xaa\xe5\x8f\x96df_filter\n                df_filter = self.df[self.df[\'exchange\'] == head]\n                if not df_filter.empty:\n                    if key[2:] in df_filter.symbol.values:\n                        # get df\xe7\x9a\x84\xe8\xa1\x8c\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe4\xbf\xa1\xe6\x81\xaf\n                        return df_filter[df_filter.symbol == key[2:]]\n            else:\n                if key in self.df.symbol.values:\n                    # get df\xe7\x9a\x84\xe8\xa1\x8c\n                    return self.df[self.df.symbol == key]\n\n    def symbol_func(self, df):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87df\xe7\xbb\x84\xe8\xa3\x85\xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xef\xbc\x8c\n        \xe4\xbd\xbf\xe7\x94\xa8df[\'exchange\'].map(lambda exchange: exchange.lower()) + df[\'symbol\']\n        :param df: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        df_symbol = df[\'exchange\'].map(lambda exchange: exchange.lower()) + df[\'symbol\']\n        return df_symbol.tolist()\n\n    def all_symbol(self, index=False):\n        """"""\n        \xe8\x8e\xb7\xe5\x8f\x96a\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8symbol str\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3a\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n        :param index: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9ea\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98symbol\n        :return: a\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n\n        # \xe8\xbf\x87\xe6\xbb\xa4df\xe4\xb8\xad\xe7\x9a\x84A\xe8\x82\xa1\xe6\x8c\x87\xe6\x95\xb0symbol\n        a_index = self.industry_factorize_name_series[self.industry_factorize_name_series == \'A\xe8\x82\xa1\xe6\x8c\x87\xe6\x95\xb0\'].index.values[0]\n        df_filter = self.df[self.df[\'industry_factorize\'] != a_index]\n        # \xe9\x80\x9a\xe8\xbf\x87symbol_func\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuSymbolPd.make_kl_df\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        all_symbol = self.symbol_func(df_filter)\n        if index:\n            # \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xa7\xe7\x9b\x98symbol\n            all_symbol.extend([\'{}{}\'.format(EMarketSubType.SH.value, symbol) for symbol in Symbol.SH_INDEX])\n            all_symbol.extend([\'{}{}\'.format(EMarketSubType.SZ.value, symbol) for symbol in Symbol.SZ_INDEX])\n        return all_symbol\n\n    def query_symbol_sub_market(self, code, default=EMarketSubType.SH.value):\n        """"""\n        \xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe4\xbf\xa1\xe6\x81\xaf, A\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe9\xbb\x98\xe8\xae\xa4\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x8a\xe8\xaf\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\n        :return: \xe8\xbf\x94\xe5\x9b\x9eEMarketSubType.value\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xef\xbc\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if code in self:\n            # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8000001\xe4\xb8\x8d\xe5\xb8\xa6\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xe6\xa0\x87\xe8\xaf\x86\xe5\x8e\xbb\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe6\x9f\xa5\xe8\xaf\xa2\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x8c\xe6\x95\xb4\xe6\xa0\x87\xe7\xa4\xba\n            return self[code].market.values[0].lower()\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9f\xa5\xe5\x88\xb0\xe5\xa6\x82\xe6\x9e\x9c\xe9\xa6\x96symbol\xe4\xb8\xba6\xef\xbc\x8c9\xe4\xb8\xba\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\xbash\n        if code[:1] in [\'6\', \'9\']:\n            return EMarketSubType.SH.value\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9f\xa5\xe5\x88\xb0\xe5\xa6\x82\xe6\x9e\x9c\xe9\xa6\x96symbol\xe4\xb8\xba2\xef\xbc\x8c3\xe4\xb8\xba\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\xbasz\n        elif code[:1] in [\'2\', \'3\']:\n            return EMarketSubType.SZ.value\n        return default\n\n\n@singleton\n@AbuStockBaseWrap()\nclass AbuSymbolUS(AbuSymbolStockBase):\n    """"""\xe7\xbe\x8e\xe8\x82\xa1symbol\xe7\xb1\xbb\xef\xbc\x8csingleton""""""\n\n    """"""\xe9\x92\x88\xe5\xaf\xb9\xe5\x8e\x86\xe5\x8f\xb2\xe4\xb8\x8d\xe9\x80\x82\xe5\x90\x88\xe5\x81\x9a\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\xaf\xb9\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe6\x9c\x89\xe8\xaf\xaf\xe5\xaf\xbc\xe5\xbd\xb1\xe5\x93\x8d\xe7\x9a\x84symbol, \xe5\x8d\xb3\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe4\xba\xa7\xe7\x94\x9f\xe5\x87\xa0\xe5\x8d\x83\xe5\x80\x8d\xef\xbc\x8c\xe5\x87\xa0\xe7\x99\xbe\xe5\x80\x8d\xe6\x94\xb6\xe7\x9b\x8a\xe7\x9a\x84\xe4\xb8\x8d\xe8\xa6\x81\xe5\x8f\x82\xe5\x8a\xa0\xe5\x9b\x9e\xe6\xb5\x8b""""""\n    s_unusual_symbol = [\'usACV\', \'usAMPH\', \'usCBX\', \'usDCIX\', \'usDM\', \'usEPE\', \'usFPL\', \'usFUEL\', \'usGDI\', \'usHCC\',\n                        \'usKBSF\', \'usKEG\', \'usKMI\', \'usLMCA\', \'usLTM\', \'usLUX\', \'usMBRX\', \'usMPG\', \'usOPXAW\', \'usORN\',\n                        \'usPJT\', \'usPTIE\', \'usSAB\', \'usSPR\', \'usSR\', \'usTGEN\', \'usTNXP\', \'usVBIV\', \'usWMGIZ\',\n                        \'usXGTIW\', \'usMBRX\']\n\n    def __init__(self):\n        """"""\xe8\xa2\xabAbuStockBaseWrap\xe6\x9b\xbf\xe6\x8d\xa2__init__\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe9\x9c\x80\xe8\xaf\xbb\xe5\x8f\x96\xe7\xbe\x8e\xe8\x82\xa1\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\xb0self.df \xe5\x90\x8e\xe7\xbb\xad\xe5\x9c\xa8\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xae\x8c\xe6\x88\x90""""""\n        self.df = pd.read_csv(_stock_code_us, index_col=0, dtype=str)\n\n    def __contains__(self, item):\n        """"""\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9a\xe6\x98\xaf\xe5\x90\xa6item\xe6\x88\x96item[2:]\xe5\x9c\xa8self.df.symbol.values\xe4\xb8\xad""""""\n        return item in self.df.symbol.values or (len(item) > 2 and item[2:] in self.df.symbol.values)\n\n    def __getitem__(self, key):\n        """"""\n            \xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe4\xb8\xa4\xe7\xa7\x8d\xe6\xa8\xa1\xe5\xbc\x8f\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\n            1. \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xbadf\xe7\x9a\x84columns\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.df[key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe5\x88\x97\n            2. \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8cself.df[self.df.symbol == key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe8\xa1\x8c\n        """"""\n\n        if key in self.df.columns:\n            # \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xbadf\xe7\x9a\x84columns\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.df[key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe5\x88\x97\n            return self.df[key]\n\n        # get df\xe7\x9a\x84\xe8\xa1\x8c, \xe5\x8d\xb3\xe5\xaf\xb9\xe4\xba\x8e\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf\n        if key in self.df.symbol.values:\n            return self.df[self.df.symbol == key]\n        if len(key) > 2 and key[2:] in self.df.symbol.values:\n            return self.df[self.df.symbol == key[2:]]\n\n    def symbol_func(self, df):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87df\xe7\xbb\x84\xe8\xa3\x85\xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8(\'us\' + df[\'symbol\']).tolist()\n        :param df: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        # noinspection PyUnresolvedReferences\n        return (EMarketTargetType.E_MARKET_TARGET_US.value + df[\'symbol\']).tolist()\n\n    def all_symbol(self, index=False):\n        """"""\n        \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8symbol str\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbe\x8e\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n        :param index: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbe\x8e\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98symbol\n        :return: \xe7\xbe\x8e\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n\n        # \xe8\xbf\x87\xe6\xbb\xa4AMEX\xe7\xad\x89\xe5\xa4\xa7\xe7\x9b\x98\xef\xbc\x8cetf\xe7\xb1\xbb\xe5\x9e\x8b, \xe5\x8f\xaa\xe5\x8f\x96NASDAQ\xe5\x92\x8cNYSE\n        df_filter = self.df[(self.df[\'exchange\'] == EMarketSubType.US_OQ.value) |\n                            (self.df[\'exchange\'] == EMarketSubType.US_N.value)]\n        # \xe9\x80\x9a\xe8\xbf\x87symbol_func\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuSymbolPd.make_kl_df\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        all_symbol = self.symbol_func(df_filter)\n        all_symbol = list(set(all_symbol) - set(AbuSymbolUS.s_unusual_symbol))\n        if index:\n            # \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xa7\xe7\x9b\x98symbol\n            all_symbol.extend([\'{}{}\'.format(EMarketTargetType.E_MARKET_TARGET_US.value, symbol)\n                               for symbol in Symbol.US_INDEX])\n        return all_symbol\n\n    def query_symbol_sub_market(self, code, default=EMarketSubType.US_N.value):\n        """"""\n        \xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe4\xbf\xa1\xe6\x81\xaf, \xe7\xbe\x8e\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe9\xbb\x98\xe8\xae\xa4\xe8\xbf\x94\xe5\x9b\x9e\xe7\xba\xbd\xe4\xba\xa4\xe6\x89\x80\n        :return: \xe8\xbf\x94\xe5\x9b\x9eEMarketSubType.value\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xef\xbc\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if code in self:\n            return self[code].exchange.values[0].upper()\n        return default\n\n\n@singleton\n@AbuStockBaseWrap()\nclass AbuSymbolHK(AbuSymbolStockBase):\n    """"""\xe6\xb8\xaf\xe8\x82\xa1symbol\xe7\xb1\xbb\xef\xbc\x8csingleton""""""\n\n    def __init__(self):\n        """"""\xe8\xa2\xabAbuStockBaseWrap\xe6\x9b\xbf\xe6\x8d\xa2__init__\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaa\xe9\x9c\x80\xe8\xaf\xbb\xe5\x8f\x96\xe6\xb8\xaf\xe8\x82\xa1\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\xb0self.df \xe5\x90\x8e\xe7\xbb\xad\xe5\x9c\xa8\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xae\x8c\xe6\x88\x90""""""\n        self.df = pd.read_csv(_stock_code_hk, index_col=0, dtype=str)\n\n    def __contains__(self, item):\n        """"""\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9a\xe6\x98\xaf\xe5\x90\xa6item\xe5\x9c\xa8self.df.symbol.values\xe4\xb8\xad""""""\n        return digit_str(item) in self.df.symbol.values\n\n    def __getitem__(self, key):\n        """"""\n            \xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe4\xb8\xa4\xe7\xa7\x8d\xe6\xa8\xa1\xe5\xbc\x8f\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\n            1. \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xbadf\xe7\x9a\x84columns\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.df[key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe5\x88\x97\n            2. \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8cself.df[self.df.symbol == key]\xef\xbc\x8c\xe5\x8d\xb3get df\xe7\x9a\x84\xe8\xa1\x8c\n        """"""\n\n        # \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xbadf\xe7\x9a\x84columns\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.df[key]\n        if key in self.df.columns:\n            return self.df[key]\n\n        # \xe5\x8f\x82\xe6\x95\xb0key\xe4\xb8\xba\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xa3\xe7\xa0\x81\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe6\x9f\xa5\xe8\xaf\xa2\n        ds = digit_str(key)\n        if ds in self.df.symbol.values:\n            return self.df[self.df.symbol == ds]\n\n    def symbol_func(self, df):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87df\xe7\xbb\x84\xe8\xa3\x85\xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8(\'hk\' + df[\'symbol\']).tolist()\n        :param df: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x94\xaf\xe6\x8c\x81ABuSymbolPd.make_kl_df\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        # noinspection PyUnresolvedReferences\n        return (EMarketTargetType.E_MARKET_TARGET_HK.value + df[\'symbol\']).tolist()\n\n    def all_symbol(self, index=False):\n        """"""\n         \xe8\x8e\xb7\xe5\x8f\x96\xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8symbol str\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb8\xaf\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n         :param index: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xe6\xb8\xaf\xe8\x82\xa1\xe5\xa4\xa7\xe7\x9b\x98symbol\n         :return: \xe6\xb8\xaf\xe8\x82\xa1\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\xba\x8f\xe5\x88\x97\n         """"""\n\n        # \xe9\x80\x9a\xe8\xbf\x87symbol_func\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8ABuSymbolPd.make_kl_df\xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        all_symbol = self.symbol_func(self.df)\n        if index:\n            # \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xa7\xe7\x9b\x98symbol\n            all_symbol.extend([\'{}{}\'.format(EMarketTargetType.E_MARKET_TARGET_HK.value, symbol)\n                               for symbol in Symbol.HK_INDEX])\n        return all_symbol\n\n    # noinspection PyUnusedLocal\n    def query_symbol_sub_market(self, code, default=EMarketSubType.HK.value):\n        """"""\n        \xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\x8d\xb3\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe4\xbf\xa1\xe6\x81\xaf, \xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe9\xbb\x98\xe8\xae\xa4\xe8\xbf\x94\xe5\x9b\x9ehk\n        :return: \xe8\xbf\x94\xe5\x9b\x9eEMarketSubType.value\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xef\xbc\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        return default\n\n\ndef query_stock_info(symbol):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\xb0\x86symbol code\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaSymbol\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n    \xe4\xbb\x85\xe6\x94\xaf\xe6\x8c\x81\xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8bsymbol\n    :param symbol: eg\xef\xbc\x9ausTSLA\n    :return: \xe4\xb8\x80\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if isinstance(symbol, six.string_types):\n        symbol = code_to_symbol(symbol)\n\n    if symbol.is_a_stock():\n        sn = AbuSymbolCN()\n    elif symbol.is_hk_stock():\n        sn = AbuSymbolHK()\n    elif symbol.is_us_stock():\n        sn = AbuSymbolUS()\n    else:\n        print(\'query_symbol_info just suit sz, sh, us, hk!\')\n        return\n    # \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe7\x9a\x84__getitem__\xe6\x96\xb9\xe6\xb3\x95\n    return sn[symbol.symbol_code]\n'"
abupy/MarketBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuDataBase import BaseMarket, FuturesBaseMarket, StockBaseMarket, TCBaseMarket, SupportMixin\nfrom .ABuDataParser import AbuDataParseWrap\nfrom . import ABuSymbolPd\nfrom .ABuSymbolPd import get_price\nfrom .ABuSymbol import IndexSymbol, Symbol, code_to_symbol, search_to_symbol_dict\nfrom . import ABuSymbol\nfrom ..MarketBu.ABuSymbolStock import AbuSymbolCN, AbuSymbolUS, AbuSymbolHK, query_stock_info\nfrom .ABuSymbolFutures import AbuFuturesCn, AbuFuturesGB\nfrom .ABuHkUnit import AbuHkUnit\nfrom . import ABuMarket\nfrom .ABuMarket import MarketMixin\nfrom . import ABuIndustries\nfrom . import ABuMarketDrawing\nfrom . import ABuNetWork\n\n__all__ = [\n    'BaseMarket',\n    'FuturesBaseMarket',\n    'StockBaseMarket',\n    'TCBaseMarket',\n    'SupportMixin',\n    'AbuDataParseWrap',\n    'MarketMixin',\n    'ABuSymbolPd',\n    'get_price',\n    'ABuSymbol',\n    'AbuSymbolCN',\n    'AbuFuturesGB',\n    'AbuSymbolUS',\n    'AbuSymbolHK',\n    'query_stock_info',\n    'AbuFuturesCn',\n    'AbuHkUnit',\n    'ABuMarket',\n    'IndexSymbol',\n    'Symbol',\n    'code_to_symbol',\n    'search_to_symbol_dict',\n    'ABuIndustries',\n    'ABuMarketDrawing',\n    'ABuNetWork'\n]\n"""
abupy/MetricsBu/ABuCrossVal.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xad\x96\xe7\x95\xa5\xe9\xaa\x8c\xe8\xaf\x81\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nfrom itertools import chain\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..SimilarBu.ABuSimilar import find_similar_with_folds\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketTargetType, EMarketDataFetchMode\nfrom ..MarketBu.ABuSymbol import IndexSymbol\nfrom ..MarketBu.ABuDataCheck import all_market_env_check\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig, AbuEnvProcess\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress, AbuProgress\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..UtilBu import ABuProgress\nfrom ..TradeBu.ABuBenchmark import AbuBenchmark\nfrom ..TradeBu.ABuCapital import AbuCapital\nfrom ..AlphaBu.ABuPickTimeMaster import AbuPickTimeMaster\nfrom ..MetricsBu.ABuMetricsBase import AbuMetricsBase\nfrom ..SimilarBu.ABuSimilar import ECoreCorrType\nfrom ..MarketBu import ABuMarketDrawing\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n@add_process_env_sig\ndef cross_val_mul_process(vc, cv, corr_series, benchmark, buy_factors, sell_factors, cash=10000000):\n    """"""\n    :param vc: \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe5\xb1\x82\xe5\x88\x86\xe9\x85\x8d\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4 eg\xef\xbc\x9a(0.564, 1.0]\n    :param cv: \xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe7\xba\xa7\xef\xbc\x8ceg\xef\xbc\x9a10\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaecv\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe6\xac\xa1\xe4\xbb\x8e\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\n    :param corr_series: \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe5\xb1\x82\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cindex\xe4\xb8\xbasymbol\xef\xbc\x8cvalue\xe4\xb8\xbacorr\xe5\x80\xbc\n    :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\n    :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\n    :param cash: \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0(int)\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410000000\n    """"""\n    # \xe7\x94\xb1\xe4\xba\x8ecross_val_mul_process\xe4\xbb\xa5\xe5\xa4\x84\xe4\xba\x8e\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x86\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa81\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8b\xa9\xe6\x97\xb6\n    n_process_pick_time = 1\n    # \xe7\x94\xb1\xe4\xba\x8ecross_val_mul_process\xe4\xbb\xa5\xe5\xa4\x84\xe4\xba\x8e\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x86\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa81\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\n    n_process_kl = 1\n    # \xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xbf\xe6\x8e\xa5\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8chain.from_iterable\xe6\x91\x8a\xe5\xbc\x80\xe5\xb1\x95\xe5\xb9\xb3\n    metrics_array = []\n    """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe5\xb1\x82\xe5\x88\x86\xe9\x85\x8d\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe5\xaf\xb9symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x9a\n        eg\xef\xbc\x9a\n            vc = (0.564, 1.0]\n            vc.left = 0.564\n            vc.right = 1.0\n    """"""\n    symbol_vc = corr_series[(corr_series > vc.left) & (corr_series <= vc.right)].index\n    with AbuMulPidProgress(cv, \'cross val progress\') as progress:\n        progress.display_step = 1\n        for epoch in np.arange(0, cv):\n            progress.show(epoch + 1)\n            # \xe9\x80\x9a\xe8\xbf\x87\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9e\x84\xe9\x80\xa0\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1capital\n            capital = AbuCapital(cash, benchmark)\n            # \xe5\x9c\xa8\xe6\xbb\xa1\xe8\xb6\xb3\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe7\x9a\x84symbol_vc\xe9\x87\x8c\xe9\x9d\xa2\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96cv\xe4\xb8\xaasymbol\n            choice_symbols = np.random.choice(symbol_vc, cv, replace=False)\n            # \xe9\x80\x9a\xe8\xbf\x87\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\n            orders_pd, action_pd, _ = AbuPickTimeMaster.do_symbols_with_same_factors_process(\n                choice_symbols, benchmark,\n                buy_factors, sell_factors, capital, n_process_kl=n_process_kl,\n                n_process_pick_time=n_process_pick_time, show_progress=False)\n            # \xe4\xbd\xbf\xe7\x94\xa8AbuMetricsBase\xe5\xaf\xb9\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\n            metrics = AbuMetricsBase(orders_pd, action_pd, capital, benchmark)\n            metrics.fit_metrics()\n            """"""\n                \xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe7\xbb\x84\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xbatuple\xef\xbc\x9a\n                tuple = (\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9cmetrics\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe5\xb1\x82\xe5\x88\x86\xe9\x85\x8d\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe6\x9c\xac\xe8\xbd\xae\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe7\x9a\x84symbol)\n            """"""\n            metrics_array.append((metrics, vc, choice_symbols))\n\n    return metrics_array\n\n\n# noinspection PyProtectedMember\nclass AbuCrossVal(object):\n    """"""\xe5\xaf\xb9\xe7\xad\x96\xe7\x95\xa5\xe6\xa0\xb9\xe6\x8d\xae\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe5\x8f\x89\xe5\xa4\x9a\xe6\xac\xa1\xe9\xaa\x8c\xe8\xaf\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\xb1\xbb""""""\n\n    def __init__(self, market=None, corr_type=ECoreCorrType.E_CORE_TYPE_PEARS):\n        """"""\n        :param market: \xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\n        :param corr_type: \xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\x82\xe6\x95\xb0\n        """"""\n        # None\xe5\x88\x99\xe6\x9c\x8d\xe4\xbb\x8eABuEnv.g_market_target\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\n        self.market = ABuEnv.g_market_target if market is None else market\n        # ipython notebook\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8logging.info\n        self.log_func = logging.info if ABuEnv.g_is_ipython else print\n        self.corr_type = corr_type\n\n    def _find_or_cache_similar(self, n_folds, benchmark, enable_cache):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x93\xe5\xad\x98\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87hasattr\xe6\x9f\xa5\xe8\xaf\xa2\xe7\xb1\xbb\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\n            \xe4\xbd\xbf\xe7\x94\xa8find_similar_with_folds\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x80\x9a\xe8\xbf\x87setattr\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\n        """"""\n        cache_similar_key = \'{}_{}_similar_cache\'.format(self.market.value, n_folds)\n        if enable_cache and hasattr(self, cache_similar_key):\n            # \xe6\x9f\xa5\xe8\xaf\xa2\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe7\xb1\xbb\xe7\xbc\x93\xe5\xad\x98\n            self.log_func(\'load similar from cache\xef\xbc\x81\')\n            return getattr(self, cache_similar_key)\n\n        self.log_func(\'begin similar work...\')\n        # \xe4\xbd\xbf\xe7\x94\xa8find_similar_with_folds\xe8\x8e\xb7\xe5\x8f\x96\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\xb0\xe6\x8d\xae\n        sorted_corr = find_similar_with_folds(benchmark, n_folds=n_folds, corr_type=self.corr_type)\n        # \xe9\x80\x9a\xe8\xbf\x87setattr\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\n        setattr(self, cache_similar_key, sorted_corr)\n        self.log_func(\'end similar work...\')\n        return sorted_corr\n\n    def _do_cross_corr(self, buy_factors, sell_factors, benchmark, corr_series, cv, n_folds):\n        """"""\n        \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe5\xb1\x82\xef\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87pd.qcut\xe5\xb0\x86\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\xb0\xe6\x8d\xaecorr_series\xe5\x88\x87\xe5\x88\x86\xe6\x88\x90cv\xe4\xb8\xaa\n        \xe7\x9b\xb8\xe5\x85\xb3\xe8\x8c\x83\xe5\x9b\xb4\xe6\xae\xb5\xef\xbc\x8c\xe5\x90\xaf\xe5\x8a\xa8cv\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x88\x86\xe5\x88\xab\xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe8\x8c\x83\xe5\x9b\xb4\xe6\xae\xb5symbol\n        \xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe6\xb1\x87\xe6\x80\xbb\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8chain.from_iterable\xe5\xb0\x86\xe7\xbb\x93\xe6\x9e\x9c\n        \xe6\x91\x8a\xe5\xb9\xb3\n        :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\n        :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\n        :param corr_series: \xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xb0\x83\xe5\xba\xa6\xe5\xb1\x82\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cindex\xe4\xb8\xbasymbol\xef\xbc\x8cvalue\xe4\xb8\xbacorr\xe5\x80\xbc\n        :param cv: \xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe7\xba\xa7\xef\xbc\x8ceg\xef\xbc\x9a10\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaecv\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe6\xac\xa1\xe4\xbb\x8e\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\n        :param n_folds: \xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8e\x86\xe5\x8f\xb2\xe5\xb9\xb4\xe6\x95\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe4\xbf\x9d\xe6\x9c\xac\xe5\x9c\xb0\xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb9\xb4\xe6\x95\xb0\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x9c\xa8\n        """"""\n        cats = pd.qcut(corr_series, cv)\n        corr_vc = cats.value_counts()\n        """"""\n            eg: corr_vc\n\n                (0.564, 1.0]        551\n                (0.486, 0.564]      551\n                (0.427, 0.486]      551\n                (0.377, 0.427]      551\n                (0.321, 0.377]      551\n                (0.268, 0.321]      551\n                (0.201, 0.268]      551\n                (0.128, 0.201]      551\n                (0.0588, 0.128]     551\n                (-0.984, 0.0588]    551\n        """"""\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8e\x86\xe5\x8f\xb2\xe6\x97\xb6\xe9\x97\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\xaa\xe4\xbe\x9d\xe8\xb5\x96\xe6\xa0\x87\xe5\xb0\xbaAbuBenchmark\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xe6\x97\xb6\xe9\x97\xb4\xe9\x95\xbf\xe5\xba\xa6\n        benchmark = AbuBenchmark(benchmark, n_folds=n_folds)\n        parallel = Parallel(\n            n_jobs=cv, verbose=0, pre_dispatch=\'2*n_jobs\')\n        # \xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe7\x9a\x84\xe5\x86\x85\xe5\xad\x98\xe7\x8e\xaf\xe5\xa2\x83\xe6\x8b\xb7\xe8\xb4\x9d\xe5\xaf\xb9\xe8\xb1\xa1AbuEnvProcess\n        p_nev = AbuEnvProcess()\n\n        out_cross_val = parallel(\n            delayed(cross_val_mul_process)(vc, cv, corr_series, benchmark, buy_factors,\n                                           sell_factors, env=p_nev)\n            for vc in corr_vc.index)\n        # \xe6\x91\x8a\xe5\xbc\x80\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97eg: ([], [], [], [])->[]\n        self.metrics_array = list(chain.from_iterable(out_cross_val))\n        self.out_cross_val = out_cross_val\n        # \xe9\x83\xbd\xe5\xae\x8c\xe4\xba\x8b\xe6\x97\xb6\xe6\xa3\x80\xe6\xb5\x8b\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbf\x98\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        ABuProgress.do_check_process_is_dead()\n        # \xe8\xbe\x93\xe5\x87\xba\xe9\xaa\x8c\xe8\xaf\x81\xe6\x95\xb4\xe4\xbd\x93\xe7\xbb\x93\xe6\x9e\x9c\n        self.show_cross_val_all()\n\n    def fit(self, buy_factors, sell_factors, cv=10, market=None, enable_cache=True, n_folds=5):\n        """"""\n        \xe4\xb8\xbb\xe6\x89\xa7\xe8\xa1\x8c\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\n        1. \xe9\xa6\x96\xe5\x85\x88\xe8\xae\xa1\xe7\xae\x97\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe6\x89\x80\xe6\x9c\x89symbol\xe4\xb8\x8e\xe5\xa4\xa7\xe7\x9b\x98\xe6\x8c\x87\xe6\xa0\x87\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\n        2. \xe9\x80\x9a\xe8\xbf\x87pd.qcut\xe5\xb0\x86\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\xb0\xe6\x8d\xaecorr_series\xe5\x88\x87\xe5\x88\x86\xe6\x88\x90cv\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe8\x8c\x83\xe5\x9b\xb4\xe6\xae\xb5\n        3. \xe5\x90\xaf\xe5\x8a\xa8cv\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x88\x86\xe5\x88\xab\xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe8\x8c\x83\xe5\x9b\xb4\xe6\xae\xb5symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\n        4. \xe6\xb1\x87\xe6\x80\xbb\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8chain.from_iterable\xe5\xb0\x86\xe7\xbb\x93\xe6\x9e\x9c\xe6\x91\x8a\xe5\xb9\xb3\n        :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\n        :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\n        :param cv: cv\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe4\xb8\xba10\n        :param market: \xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\n        :param enable_cache: \xe6\x98\xaf\xe5\x90\xa6\xe9\x87\x8d\xe5\xa4\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x93\xe5\xad\x98\n        :param n_folds: \xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8e\x86\xe5\x8f\xb2\xe5\xb9\xb4\xe6\x95\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe7\xa1\xae\xe4\xbf\x9d\xe6\x9c\xac\xe5\x9c\xb0\xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xb9\xb4\xe6\x95\xb0\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x9c\xa8\n        """"""\n\n        if ABuEnv._g_enable_example_env_ipython:\n            # \xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\n            self.log_func(\'cross val only support local data, sandbox data now!\')\n            self.log_func(\'please use abupy.env.disable_example_env_ipython() close sandbox mode!\')\n            return\n\n        # \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\x91\xe6\xb5\x8b\n        if not all_market_env_check():\n            return\n\n        if market is not None:\n            self.market = market\n\n        if self.market == EMarketTargetType.E_MARKET_TARGET_US:\n            # \xe7\xbe\x8e\xe8\x82\xa1\n            benchmark = IndexSymbol.IXIC\n        elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_HK:\n            # \xe6\xb8\xaf\xe8\x82\xa1\n            benchmark = IndexSymbol.HSI\n        elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_CN:\n            # a\xe8\x82\xa1\n            benchmark = IndexSymbol.SH\n        else:\n            raise RuntimeError(\'cross val only support us, cn, hk market!\')\n\n        restore_market = ABuEnv.g_market_target\n        # \xe4\xb8\xb4\xe6\x97\xb6\xe5\x88\x87\xe6\x8d\xa2\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe9\x83\xbd\xe5\xae\x8c\xe4\xba\x8b\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe5\x88\x87\xe6\x8d\xa2\xe5\x9b\x9e\xe6\x9d\xa5\n        ABuEnv.g_market_target = self.market\n\n        # \xe9\x9c\x80\xe8\xa6\x81\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbd\x93\xe9\xab\x98\xe6\x95\x88\xe7\x8e\x87\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe6\xaf\x94\xe5\xba\xa6\xe5\x85\xac\xe6\xad\xa3\n        restore_date_mode = ABuEnv.g_data_fetch_mode\n        # \xe4\xb8\xb4\xe6\x97\xb6\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe9\x83\xbd\xe5\xae\x8c\xe4\xba\x8b\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe5\x88\x87\xe6\x8d\xa2\xe5\x9b\x9e\xe6\x9d\xa5\n        ABuEnv.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n        sorted_corr = self._find_or_cache_similar(n_folds, benchmark, enable_cache)\n        """"""\n            eg:\n                sorted_corr:\n\n                [(us_NYSE:.IXIC, 0.99999999999999989),\n                 (\'usTQQQ\', 0.98232461061643761),\n                 (\'usQQQ\', 0.98189324977534143),\n                 (\'usVONG\', 0.97282023230260084),\n                 (\'usDGRW\', 0.92769329708593817),\n                 (\'usTDIV\', 0.90129474970808454),\n                 (\'usVTHR\', 0.89865579645001936),\n                 (\'usCFO\', 0.89842456369113732),\n                 (\'usPNQI\', 0.88093679204010267),\n                 (\'usTY\', 0.86932098539827651)]\n\n                corr_series:\n\n                us.IXIC    1.0000\n                usTQQQ     0.9823\n                usQQQ      0.9819\n                usONEQ     0.9795\n                usVONG     0.9728\n                usQQEW     0.9681\n                usQQXT     0.9428\n                usVONE     0.9389\n                usDGRW     0.9277\n                usSKYY     0.9211\n        """"""\n        corr_series = pd.Series([corr[1] for corr in sorted_corr], index=[corr[0] for corr in sorted_corr])\n        # \xe6\x8a\x8a\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe7\x9b\x98symbol\xe8\xb7\xb3\xe8\xbf\x87\n        corr_series = corr_series[1:]\n        self._do_cross_corr(buy_factors, sell_factors, benchmark, corr_series, cv, n_folds)\n\n        # \xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n        ABuEnv.g_market_target = restore_market\n        ABuEnv.g_data_fetch_mode = restore_date_mode\n\n    def plot_all_cross_val_orders(self):\n        """"""\xe9\x80\x9a\xe8\xbf\x87fit\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe5\x85\xb3\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe5\x90\x8e\xef\xbc\x8c\xe5\xb0\x86\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0""""""\n        with AbuProgress(len(self.metrics_array), 0, \'save and plot orders to png file\') as progess:\n            for index, metrics in enumerate(self.metrics_array):\n                progess.show(index + 1)\n                if metrics is not None and metrics[0].valid and metrics[0].orders_pd.shape[0] > 0:\n                    ABuMarketDrawing.plot_candle_from_order(metrics[0].orders_pd, save=True)\n        self.log_func(\'all orders plot and save to png complete! path={}\'.format(ABuMarketDrawing.save_dir_name()))\n\n    def show_cross_val_se(self, start=0, end=1):\n        """"""\n           \xe6\x98\xbe\xe7\xa4\xba\xe9\x80\x9a\xe8\xbf\x87fit\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84metrics_array\xe4\xb8\xad\xe7\x9a\x84\xef\xbc\x9a\n           1. \xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe6\xae\xb5\n           2. \xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe6\xae\xb5\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96\xe7\x9a\x84symbol\n           3. symbol\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\n\n           \xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\xaa\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0start\xef\xbc\x8c start\xe7\x9a\x84\xe5\x80\xbc\xe8\xb0\x83\xe6\x95\xb4\xe6\x98\xbe\xe7\xa4\xba\xe6\x95\xb0\xe9\x87\x8f\xe5\x92\x8c\xe8\x8c\x83\xe5\x9b\xb4\n        """"""\n        for metrics in self.metrics_array[start:end]:\n            if metrics is not None and metrics[0].valid:\n                self.log_func(u\'\xe5\x9b\x9e\xe6\xb5\x8bsymbol:{}\'.format(metrics[2]))\n                self.log_func(u\'\xe5\x9b\x9e\xe6\xb5\x8bsymbol\xe4\xb8\x8e\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4:{}\'.format(metrics[1]))\n                metrics[0].plot_order_returns_cmp()\n                self.log_func(\'\\n\')\n\n    def show_cross_val_all(self):\n        """"""\n            \xe6\x98\xbe\xe7\xa4\xba\xe9\x80\x9a\xe8\xbf\x87fit\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84metrics_array\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\n            \xe7\xbb\x9f\xe8\xae\xa1\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe5\x8a\xa0\xe6\x9d\x83\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\n            1. \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x80\xbb\xe6\x95\xb0\xe9\x87\x8f\n            2. \xe8\x83\x9c\xe7\x8e\x87\n            3. \xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b\n            4. \xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b\n            5. \xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94\n            6. \xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8c\n            7. \xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe5\x92\x8c\n        """"""\n\n        def _show_metrics(metrics_array, p_title):\n            all_deal_cnt = 0\n            all_win_rate = 0\n            all_gains_mean = 0\n            all_losses_mean = 0\n            all_win_loss_profit_rate = 0\n            all_profit_cg = 0\n            all_profit = 0\n            for metrics in metrics_array:\n                metrics = metrics[0]\n                if metrics is not None and metrics.valid:\n                    deal_cnt = metrics.order_has_ret.shape[0]\n                    all_deal_cnt += deal_cnt\n                    all_win_rate += metrics.win_rate * deal_cnt\n                    all_gains_mean += metrics.gains_mean * deal_cnt\n                    all_losses_mean += metrics.losses_mean * deal_cnt\n                    all_win_loss_profit_rate += metrics.win_loss_profit_rate * deal_cnt\n                    all_profit_cg += metrics.order_has_ret.profit_cg.sum()\n                    all_profit += metrics.all_profit\n\n            self.log_func(p_title)\n            self.log_func(u\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x80\xbb\xe6\x95\xb0\xe9\x87\x8f:{}\'.format(all_deal_cnt))\n            self.log_func(u\'\xe8\x83\x9c\xe7\x8e\x87:{:.4f}%\'.format(all_win_rate / all_deal_cnt * 100))\n            self.log_func(u\'\xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(all_gains_mean / all_deal_cnt * 100))\n            self.log_func(u\'\xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(all_losses_mean / all_deal_cnt * 100))\n            self.log_func(u\'\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94:{:.4f}\'.format(all_win_loss_profit_rate / all_deal_cnt))\n            self.log_func(u\'\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8c:{:.4f} \'.format(all_profit_cg))\n            self.log_func(u\'\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe5\x92\x8c:{:.4f} \'.format(all_profit))\n            self.log_func(\'\\n\')\n\n        _show_metrics(self.metrics_array, u\'\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe4\xba\xa4\xe6\x98\x93\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\')\n\n        for metrics_cv in self.out_cross_val:\n            if len(metrics_cv) > 0:\n                title = u\'\xe4\xb8\x8e\xe5\xa4\xa7\xe7\x9b\x98\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4:{}\xe9\xaa\x8c\xe8\xaf\x81\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\'.format(metrics_cv[0][1])\n                _show_metrics(metrics_cv, title)\n'"
abupy/MetricsBu/ABuGridHelper.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xbb\x84\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe8\xbe\x85\xe5\x8a\xa9\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\nimport copy\nfrom itertools import product\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom .ABuGridSearch import ParameterGrid\nfrom scipy import stats\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import range, xrange\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n# TODO \xe4\xbd\xbf\xe7\x94\xa8enum\xe4\xbb\xa3\xe6\x9b\xbfK\xe5\xb8\xb8\xe9\x87\x8f\n# \xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\nK_GEN_FACTOR_PARAMS_BUY = 0\n# \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8d\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\nK_GEN_FACTOR_PARAMS_SELL = 1\n\n\ndef gen_factor_grid(type_param, factors, need_empty_sell=False):\n    """"""\n    :param type_param: grid\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe4\xb8\xbaK_GEN_FACTOR_PARAMS_BUY\xe6\x88\x96K_GEN_FACTOR_PARAMS_SELL\xe9\x9c\x80\xe8\xa6\x81\xe9\x87\x8d\xe6\x9e\x84\n    :param factors: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xe5\x9b\xa0\xe5\xad\x90dict \xe5\xa6\x82\xef\xbc\x9a\n                    {\'class\': [AbuFactorBuyBreak], \'xd\': [42]}, {\'class\': [AbuFactorBuyBreak],\'xd\': [60]}\n    :param need_empty_sell: \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbb\xbb\xe4\xbd\x95\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe7\xbb\x84\xe5\x90\x88\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe5\x9b\xa0\xe5\xad\x90dict\xe7\x9a\x84\xe7\xbb\x84\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    \n    # \xe9\x80\x9a\xe8\xbf\x87ParameterGrid\xe5\xb0\x86factor\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x9a\xe8\xbf\x87ParameterGrid\xe5\xb0\x86dict\xe5\xaf\xb9\xe8\xb1\xa1product(*values)\xef\xbc\x8c\xe8\xaf\xa6\xe9\x98\x85\xe8\xaf\xbbParameterGrid\n    grid_params = [ParameterGrid(factor) for factor in factors]\n    # \xe8\xbf\x9b\xe8\xa1\x8cproduct\xe8\xb0\x83\xe7\x94\xa8ParameterGrid__iter__\xe8\xbf\x9b\xe8\xa1\x8cproduct(*values)\n    factor_params = product(*grid_params)\n    factor_params = [list(pd_cls) for pd_cls in factor_params]\n\n    if len(factors) > 1:\n        # \xe6\x8a\x8a\xe5\x8d\x95\xe7\x8b\xac\xe4\xb8\x80\xe4\xb8\xaafactor\xe7\x9a\x84\xe5\x8a\xa0\xe8\xbf\x9b\xe5\x8e\xbb\n        for grid_single in grid_params:\n            for single in grid_single:\n                factor_params.append([single])\n    if need_empty_sell and type_param == K_GEN_FACTOR_PARAMS_SELL:\n        # \xe5\x8f\xaa\xe6\x9c\x89sell\xe7\x9a\x84factor\xe8\xa6\x81\xe5\x8a\xa0\xe4\xb8\xaa\xe7\xa9\xba\xe7\x9a\x84\xef\xbc\x8c\xe4\xb9\xb0\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xe8\xa6\x81\xe6\x98\xaf\xe5\x85\xa8\xe7\xa9\xba\xe5\xb0\xb1\xe6\xb2\xa1\xe5\x8a\x9e\xe6\xb3\x95\xe7\x8e\xa9\xe4\xba\x86\n        factor_params.append([])  # \xe6\x9c\x80\xe5\x90\x8e\xe5\x8a\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\n\n    return factor_params\n\n\ndef score_pd_plot(grid_score_pd, y_key, x_key=None):\n    """"""\xe5\xaf\xb9\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x93\xe6\x9e\x9cscore\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x9c\xaa\xe8\xbf\x81\xe7\xa7\xbb\xe5\xae\x8c\xe6\x95\xb4\xef\xbc\x8c\xe9\x9c\x80\xe8\xbf\x81\xe7\xa7\xbb\xe5\x85\xb6\xe4\xbd\x99\xe6\x9c\x80\xe4\xbc\x98\xe6\xa8\xa1\xe5\x9d\x97\xe5\x90\x8e\xe5\x8f\xaf\xe7\x94\xa8""""""\n    if x_key is not None:\n        xt = pd.crosstab(grid_score_pd[x_key], grid_score_pd[y_key])\n        xt_pct = xt.div(xt.sum(1).astype(float), axis=0)\n        xt_pct.plot(kind=\'bar\',\n                    stacked=True,\n                    title=str(x_key) + \' -> \' + str(y_key))\n        plt.xlabel(str(x_key))\n        plt.ylabel(str(y_key))\n    else:\n        for col in grid_score_pd.columns:\n            if col.startswith(\'Y_\'):\n                continue\n            xt = pd.crosstab(grid_score_pd[col], grid_score_pd[y_key])\n            xt_pct = xt.div(xt.sum(1).astype(float), axis=0)\n            xt_pct.plot(kind=\'bar\',\n                        stacked=True,\n                        title=str(col) + \' -> \' + str(y_key))\n            plt.xlabel(str(col))\n            plt.ylabel(str(y_key))\n            plt.show()\n\n\n# noinspection PyTypeChecker\ndef make_grid_score_pd(grid_scores, score_index=0):\n    """"""\xe5\xaf\xb9\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x93\xe6\x9e\x9cscore\xe5\x88\x86\xe6\x9e\x90\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x9c\xaa\xe8\xbf\x81\xe7\xa7\xbb\xe5\xae\x8c\xe6\x95\xb4\xef\xbc\x8c\xe9\x9c\x80\xe8\xbf\x81\xe7\xa7\xbb\xe5\x85\xb6\xe4\xbd\x99\xe6\x9c\x80\xe4\xbc\x98\xe6\xa8\xa1\xe5\x9d\x97\xe5\x90\x8e\xe5\x8f\xaf\xe7\x94\xa8""""""\n    unique_sell_factor = {slFac[\'class\'] for grid in grid_scores for slFac in grid[2]}\n    unique_buy_factor = {byFac[\'class\'] for grid in grid_scores for byFac in grid[3]}\n\n    grid_pd = pd.DataFrame([alpha_params[1] for alpha_params in grid_scores])\n    factor_pd = pd.DataFrame([factor_params[2] for factor_params in grid_scores])\n    factor_buy_pd = pd.DataFrame([factor_params[3] for factor_params in grid_scores])\n\n    org_columns = factor_pd.shape[1]\n    for columns_ind in xrange(0, org_columns):\n        factor_pd[str(columns_ind) + \'class\'] = factor_pd[columns_ind].apply(lambda x:\n                                                                             None if x is None else x[\'class\'])\n\n    org_buy_columns = factor_buy_pd.shape[1]\n    for columns_ind in xrange(0, org_buy_columns):\n        factor_buy_pd[str(columns_ind) + \'class\'] = factor_buy_pd[columns_ind].apply(lambda x:\n                                                                                     None if x is None else x[\'class\'])\n\n    def rm_noise_key(fun_dict):\n        copy_dict = copy.deepcopy(fun_dict)\n        if \'draw\' in copy_dict:\n            del copy_dict[\'draw\']\n        if \'show\' in copy_dict:\n            del copy_dict[\'show\']\n        if \'class\' in copy_dict:\n            del copy_dict[\'class\']\n        return copy_dict\n\n    def make_factor_pd(x_pd, sel_fac):\n        def make_factor_pd_inner(p_x_pd):\n            if p_x_pd is None:\n                return 0\n            if p_x_pd == sel_fac:\n                return 1\n            return 0\n\n        y_ret = x_pd.apply(make_factor_pd_inner)\n        if np.count_nonzero(y_ret) > 0:\n            return 1\n        return 0\n\n    def make_factor_param_pd(x_pd, unique_facts):\n        def make_factor_param_pd_inner(p_x_pd):\n            if p_x_pd is None:\n                return\n            class_key = p_x_pd[\'class\'].__name__\n            x_pd_copy = rm_noise_key(p_x_pd)\n            for item in x_pd_copy.items():\n                unique_item = class_key + \':\' + str(item[0]) + \':\' + str(item[1])\n                unique_facts.append(unique_item)\n\n        x_pd.apply(make_factor_param_pd_inner)\n\n    for selFac in unique_sell_factor:\n        grid_pd[selFac.__name__] = factor_pd.iloc[:, org_columns:].apply(\n            make_factor_pd, args=(selFac,), axis=1)\n    for buyFac in unique_buy_factor:\n        grid_pd[buyFac.__name__] = factor_buy_pd.iloc[:, org_buy_columns:].apply(\n            make_factor_pd, args=(buyFac,), axis=1)\n\n    unique_factor_params = []\n    unique_factor_buy_params = []\n    factor_pd.iloc[:, 0:org_columns].apply(make_factor_param_pd, args=(unique_factor_params,), axis=1)\n    factor_buy_pd.iloc[:, 0:org_buy_columns].apply(make_factor_param_pd, args=(unique_factor_buy_params,), axis=1)\n\n    unique_factor_params = set(unique_factor_params)\n    unique_factor_buy_params = set(unique_factor_buy_params)\n\n    def dummies_params(x_pd, p_sel_fac_param):\n        def dummies_params_inner(p_x_pd):\n            if p_x_pd is None:\n                return 0\n            class_key = p_x_pd[\'class\'].__name__\n            x_pd_copy = rm_noise_key(p_x_pd)\n            for item in x_pd_copy.items():\n                unique_item = class_key + \':\' + str(item[0]) + \':\' + str(item[1])\n                if p_sel_fac_param == unique_item:\n                    return 1\n            return 0\n\n        y_ret = x_pd.apply(dummies_params_inner)\n        if np.count_nonzero(y_ret) > 0:\n            return 1\n        return 0\n\n    for sel_fac_param in unique_factor_params:\n        grid_pd[sel_fac_param] = factor_pd.iloc[:, 0:org_columns].apply(\n            dummies_params, args=(sel_fac_param,), axis=1)\n    for buy_fac_param in unique_factor_buy_params:\n        grid_pd[buy_fac_param] = factor_pd.iloc[:, 0:org_columns].apply(\n            dummies_params, args=(buy_fac_param,), axis=1)\n\n    grid_pd[\'Y_REG\'] = [score[0][score_index] if isinstance(score[0], list) else score[0]\n                        for score in grid_scores]\n\n    grid_pd[\'Y_LOG_MEDIAN\'] = np.where(\n        grid_pd[\'Y_REG\'] > grid_pd[\'Y_REG\'].median(), 1, 0)\n    grid_pd[\'Y_LOG_618\'] = np.where(\n        grid_pd[\'Y_REG\'] > stats.scoreatpercentile(grid_pd[\'Y_REG\'], 61.8), 1, 0)\n\n    return grid_pd\n'"
abupy/MetricsBu/ABuGridSearch.py,3,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\x80\x9f\xe9\x89\xb4sklearn GridSearch\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x80\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9c\x80\xe4\xbc\x98\xe5\xaf\xbb\xe6\x89\xbe\xe5\x88\x86\xe6\x9e\x90""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\nimport operator\nfrom collections import Mapping\nfrom functools import reduce\nfrom ..CoreBu.ABuFixes import partial\nfrom itertools import product, chain\n\nimport logging\nimport numpy as np\n\nfrom ..TradeBu.ABuBenchmark import AbuBenchmark\nfrom ..TradeBu.ABuCapital import AbuCapital\nfrom ..TradeBu.ABuKLManager import AbuKLManager\nfrom .ABuMetricsScore import AbuScoreTuple, WrsmScorer, make_scorer\nfrom ..AlphaBu.ABuPickStockMaster import AbuPickStockMaster\nfrom ..AlphaBu.ABuPickTimeMaster import AbuPickTimeMaster\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig, AbuEnvProcess\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketDataFetchMode\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress\nfrom ..MarketBu.ABuMarket import split_k_market\nfrom ..MarketBu.ABuDataCheck import check_symbol_data\nfrom ..UtilBu import ABuProgress\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass ParameterGrid(object):\n    """"""\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8cproduct\xe8\xbe\x85\xe5\x8a\xa9\xe7\x94\x9f\xe6\x88\x90\xe7\xb1\xbb""""""\n\n    def __init__(self, param_grid):\n        if isinstance(param_grid, Mapping):\n            param_grid = [param_grid]\n        self.param_grid = param_grid\n\n    def __iter__(self):\n        """"""\xe8\xbf\xad\xe4\xbb\xa3\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xe5\xae\x9e\xe7\x8e\xb0""""""\n        for p in self.param_grid:\n            items = sorted(p.items())\n            if not items:\n                yield {}\n            else:\n                keys, values = zip(*items)\n                for v in product(*values):\n                    params = dict(zip(keys, v))\n                    yield params\n\n    def __len__(self):\n        """"""\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xe9\x95\xbf\xe5\xba\xa6\xe5\xae\x9e\xe7\x8e\xb0""""""\n        product_mul = partial(reduce, operator.mul)\n        return sum(product_mul(len(v) for v in p.values()) if p else 1\n                   for p in self.param_grid)\n\n    def __getitem__(self, ind):\n        """"""\xe9\x80\x9a\xe8\xbf\x87index\xe6\x96\xb9\xe5\xbc\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9f\x90\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xe5\xae\x9e\xe7\x8e\xb0""""""\n        for sub_grid in self.param_grid:\n            if not sub_grid:\n                if ind == 0:\n                    return {}\n                else:\n                    ind -= 1\n                    continue\n            keys, values_lists = zip(*sorted(sub_grid.items())[::-1])\n            sizes = [len(v_list) for v_list in values_lists]\n            total = np.product(sizes)\n\n            if ind >= total:\n                ind -= total\n            else:\n                out = {}\n                for key, v_list, n in zip(keys, values_lists, sizes):\n                    ind, offset = divmod(ind, n)\n                    out[key] = v_list[offset]\n                return out\n\n        raise IndexError(\'ParameterGrid index out of range\')\n\n\ndef _check_param_grid(param_grid):\n    """"""\xe6\xa3\x80\xe6\xb5\x8b\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xbf\x9b\xe8\xa1\x8cgrid""""""\n\n    if hasattr(param_grid, \'items\'):\n        param_grid = [param_grid]\n\n    for p in param_grid:\n        for v in p.values():\n            if isinstance(v, np.ndarray) and v.ndim > 1:\n                raise ValueError(""Parameter array should be one-dimensional."")\n\n            check = [isinstance(v, k) for k in (list, tuple, np.ndarray)]\n            if True not in check:\n                raise ValueError(""Parameter values should be a list."")\n\n            if len(v) == 0:\n                raise ValueError(""Parameter values should be a non-empty ""\n                                 ""list."")\n\n\n@add_process_env_sig\ndef grid_search_mul_process(read_cash, benchmark, factors, choice_symbols, kl_pd_manager=None):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x8a\xe5\x85\xb6\xe5\xae\x83\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\xa4\xe5\xb9\xb4\xe5\x8e\x86\xe5\x8f\xb2\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8c\x85\xe8\xa3\x85AbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\n    :param read_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0(int)\n    :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90product \xe6\x9c\x80\xe5\xa4\x96\xe5\xb1\x82tuple->dict\xe5\xaf\xb9\xe8\xb1\xa1->\xe5\xad\x97\xe5\x85\xb8values->list->list\xe5\xaf\xb9\xe8\xb1\xa1->dict\xe5\xaf\xb9\xe8\xb1\xa1\n            eg:\n                (\n                    {\'buy_factors\': [{\'class\': x1}, {\'class\': x2}]\n                    \'sell_factors\': [{\'class\': Y1}, {\'class\': Y2}],\n                    \'stock_pickers\': [{\'class\': Z1}, {\'class\': Z2}]},\n\n                    {\'buy_factors\': [{\'class\': xx1}, {\'class\': xx2}]\n                    \'sell_factors\': [{\'class\': Yy1}, {\'class\': Yy2}],\n                    \'stock_pickers\': [{\'class\': Zz1}, {\'class\': Zz2}]\n                    .................................................\n                )\n    :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param kl_pd_manager: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuKLManager\xe5\xae\x9e\xe4\xbe\x8b\n    :return: AbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    # \xe7\x94\xb1\xe4\xba\x8egrid_search_mul_process\xe4\xbb\xa5\xe5\xa4\x84\xe4\xba\x8e\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x86\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa81\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x80\x89\xe8\x82\xa1\n    n_process_pick_stock = 1\n    # \xe7\x94\xb1\xe4\xba\x8egrid_search_mul_process\xe4\xbb\xa5\xe5\xa4\x84\xe4\xba\x8e\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x86\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa81\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8b\xa9\xe6\x97\xb6\n    n_process_pick_time = 1\n    # \xe7\x94\xb1\xe4\xba\x8egrid_search_mul_process\xe4\xbb\xa5\xe5\xa4\x84\xe4\xba\x8e\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x90\xe8\xa1\x8c\xe7\x8e\xaf\xe5\xa2\x83\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x86\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa81\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\n    n_process_kl = 1\n    # \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x94\xb1AbuScoreTuple\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe7\x8b\xac\xe7\xab\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xbf\xe6\x8e\xa5\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8chain.from_iterable\xe6\x91\x8a\xe5\xbc\x80\xe5\xb1\x95\xe5\xb9\xb3\n    result_tuple_array = []\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0\xe5\xa4\xa7\xe4\xba\x8e4\xe7\xbb\x84\xe6\x98\xbe\xe7\xa4\xba\xe5\xa4\x96\xe5\xb1\x82\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\x98\xbe\xe7\xa4\xba\xe5\x86\x85\xe5\xb1\x82\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8b\xa9\xe6\x97\xb6\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x9d\xa1\n    show_outer_progress = True if len(factors) >= 4 else False\n    with AbuMulPidProgress(len(factors), \'grid search total progress\', show_progress=show_outer_progress) as progress:\n        progress.display_step = 1\n        for epoch, factor in enumerate(factors):\n            progress.show(epoch + 1)\n            buy_factors = factor[\'buy_factors\']\n            sell_factors = factor[\'sell_factors\']\n            stock_pickers = factor[\'stock_pickers\']\n\n            # \xe9\x80\x9a\xe8\xbf\x87\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9e\x84\xe9\x80\xa0\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1capital\n            capital = AbuCapital(read_cash, benchmark)\n            if stock_pickers is not None:\n                # \xe6\x9c\x89\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe9\xa6\x96\xe9\x80\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\n                choice_symbols = \\\n                    AbuPickStockMaster.do_pick_stock_with_process(capital, benchmark,\n                                                                  stock_pickers,\n                                                                  choice_symbols=choice_symbols,\n                                                                  n_process_pick_stock=n_process_pick_stock)\n\n            if choice_symbols is None or len(choice_symbols) == 0:\n                logging.info(\'pick stock result is zero!\')\n                result_tuple_array.append(AbuScoreTuple(None, None, capital, benchmark, buy_factors, sell_factors,\n                                                        stock_pickers))\n                continue\n\n            # \xe9\x80\x9a\xe8\xbf\x87\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\n            orders_pd, action_pd, all_fit_symbols_cnt = AbuPickTimeMaster.do_symbols_with_same_factors_process(\n                choice_symbols, benchmark,\n                buy_factors, sell_factors, capital, kl_pd_manager=kl_pd_manager, n_process_kl=n_process_kl,\n                n_process_pick_time=n_process_pick_time, show_progress=not show_outer_progress)\n\n            # \xe5\xb0\x86\xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8c\x85\xe8\xa3\x85\xe4\xb8\xbaAbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\n            result_tuple = AbuScoreTuple(orders_pd, action_pd, capital, benchmark, buy_factors, sell_factors,\n                                         stock_pickers)\n            result_tuple_array.append(result_tuple)\n\n    return result_tuple_array\n\n\n# noinspection PyAttributeOutsideInit\nclass GridSearch(object):\n    """"""\xe6\x9c\x80\xe4\xbc\x98grid search\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\xe7\xb1\xbb""""""\n\n    @classmethod\n    def combine_same_factor_class(cls, factors):\n        """"""\n        \xe5\x90\x88\xe5\xb9\xb6\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84class factor\xe5\x88\xb0\xe7\xac\xa6\xe5\x90\x88grid search\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x9a\n\n        eg\xef\xbc\x9a\n            org_factor = [ {\n                  \'class\': AClass,\n                  \'xd\' : 20,\n                  \'past_factor\': 2,\n                  \'up_deg_threshold\': 3\n             }, {\n                  \'class\': AClass,\n                  \'xd\' : 30,\n                  \'past_factor\': 3,\n                  \'up_deg_threshold\': 4\n             }, {\n                  \'class\': BClass,\n                  \'xd\' : 20,\n                  \'past_factor\': 2,\n                  \'down_deg_threshold\': -2\n            }, {\n                  \'class\': BClass,\n                  \'xd\' : 30,\n                  \'past_factor\': 3,\n                  \'down_deg_threshold\': -4\n            }]\n\n            \xe8\xbd\xac\xe6\x8d\xa2\xe5\x90\x88\xe5\xb9\xb6\xe5\x90\x8e\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\n\n            [{\'class\': [AClass],\n              \'down_deg_threshold\': [-4, -2],\n              \'past_factor\': [2, 3],\n              \'xd\': [20, 30]},\n             {\'class\': [BClass],\n              \'past_factor\': [2, 3],\n              \'up_deg_threshold\': [3, 4],\n              \'xd\': [20, 30]}]\n        :param factors: \xe8\xbd\xac\xe6\x8d\xa2\xe5\x89\x8d\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84list\xe5\xae\xb9\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe8\xbd\xac\xe6\x8d\xa2\xe5\x90\x8e\xe7\xac\xa6\xe5\x90\x88grid search\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84list\xe5\xae\xb9\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        #  \xe8\xbd\xac\xe6\x8d\xa2\xe5\x90\x8e\xe7\xac\xa6\xe5\x90\x88grid search\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84list\xe5\xae\xb9\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1, \xe9\xa6\x96\xe5\x85\x88\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe7\x8b\xac\xe7\xab\x8b\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\x96\xe7\x95\xa5\n        combine_factor_list = list(filter(lambda factor: isinstance(factor[\'class\'], list), factors))\n\n        # \xe6\x8a\x8a\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe6\xac\xa1\xe7\xbb\x84\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\n        factors = list(filter(lambda factor: not isinstance(factor[\'class\'], list), factors))\n\n        # \xe5\x85\x88\xe6\x89\xbe\xe5\x87\xba\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84class\xe9\x9b\x86\xe5\x90\x88\xe5\xba\x8f\xe5\x88\x97\n        # noinspection PyTypeChecker\n        unique_class_set = set([factor[\'class\'] for factor in factors])\n\n        for class_value in unique_class_set:\n            # \xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe4\xb8\xaa\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84class\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x9d\xa5\n            unique_class_factors = list(filter(lambda factor: factor[\'class\'] == class_value, factors))\n            # \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84class\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x9d\xa5\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8key\n            all_keys = set([factor_key for factor in unique_class_factors for factor_key in factor.keys()])\n            combine_factor = dict()\n            for factor_key in all_keys:\n                # \xe5\xb0\x86\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8ckey\xe7\x9a\x84\xe7\xbb\x84\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\n                factor_grid_list = set(\n                    [factor[factor_key] for factor in unique_class_factors if factor_key in factor.keys()])\n                # \xe6\x96\xb0\xe7\x9a\x84dict\xe7\xac\xa6\xe5\x90\x88grid search\xe6\xa0\x87\xe5\x87\x86\n                combine_factor[factor_key] = list(factor_grid_list)\n            combine_factor_list.append(combine_factor)\n        return combine_factor_list\n\n    @classmethod\n    def show_top_constraints_metrics(cls, constraints, scores, score_tuple_array, top_cnt=10):\n        direction = int(top_cnt / abs(top_cnt))\n        # \xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8-direction\xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x86\xe6\x95\xb0\xe6\x98\xaf\xe4\xbb\x8e\xe5\xb0\x8f\xef\xbc\x8d>\xe5\xa4\xa7\xe6\x8e\x92\xe5\xba\x8f\xe7\x9a\x84\n        scores = scores[::-direction]\n        result_top = constraints(scores, score_tuple_array, top_cnt)\n\n        from ..MetricsBu.ABuMetricsBase import AbuMetricsBase\n        for top_tuple in result_top:\n            logging.info(u\'\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5:{}\'.format(top_tuple.buy_factors))\n            logging.info(u\'\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5:{}\'.format(top_tuple.sell_factors))\n            AbuMetricsBase.show_general(top_tuple.orders_pd, top_tuple.action_pd, top_tuple.capital,\n                                        top_tuple.benchmark,\n                                        returns_cmp=True, only_info=True)\n            logging.info(\'\\n\')\n\n    @classmethod\n    def show_top_score_metrics(cls, scores, score_tuple_array, top_cnt=10):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaegrid_search\xe5\xaf\xbb\xe6\x89\xbe\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84grid\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84scores\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8eAbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        \xe6\x98\xbe\xe7\xa4\xbatop n\xe4\xb8\xaa\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\n        :param scores: grid_search\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84scores\xe5\xba\x8f\xe5\x88\x97\n        :param score_tuple_array: grid_search\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param top_cnt: \xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84top\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\xe4\xb8\xaa\xef\xbc\x8c \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84top_cnt\xe4\xb8\xba\xe8\xb4\x9f\xe6\x95\xb0\xef\xbc\x8ceg\xef\xbc\x9a-10 \xe5\x88\x99\xe5\x8f\x96\xe5\x87\xba\xe6\x9c\x80\xe4\xb8\x8d\xe5\xa5\xbd\xe7\x9a\x8410\xe4\xb8\xaa\xe7\xbb\x93\n        """"""\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84top_cnt\xe4\xb8\xba\xe8\xb4\x9f\xe6\x95\xb0\xef\xbc\x8ceg\xef\xbc\x9a-10 \xe5\x88\x99\xe5\x8f\x96\xe5\x87\xba\xe6\x9c\x80\xe4\xb8\x8d\xe5\xa5\xbd\xe7\x9a\x8410\xe4\xb8\xaa\xe7\xbb\x93\xe6\x9e\x9c\n        direction = int(top_cnt / abs(top_cnt))\n        # \xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8-direction\xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x86\xe6\x95\xb0\xe6\x98\xaf\xe4\xbb\x8e\xe5\xb0\x8f\xef\xbc\x8d>\xe5\xa4\xa7\xe6\x8e\x92\xe5\xba\x8f\xe7\x9a\x84\n        top_n = scores[::-direction][:abs(top_cnt)]\n        from ..MetricsBu.ABuMetricsBase import AbuMetricsBase\n        for top in top_n.index:\n            top_tuple = score_tuple_array[top]\n            logging.info(u\'\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5:{}\'.format(top_tuple.buy_factors))\n            logging.info(u\'\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5:{}\'.format(top_tuple.sell_factors))\n            AbuMetricsBase.show_general(top_tuple.orders_pd, top_tuple.action_pd, top_tuple.capital,\n                                        top_tuple.benchmark,\n                                        returns_cmp=True, only_info=True)\n            logging.info(\'\\n\')\n\n    @classmethod\n    def grid_search(cls, choice_symbols, buy_factors, sell_factors, read_cash=10000000,\n                    score_weights=None, metrics_class=None):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95: \xe4\xb8\x8dgird\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84gird product\xe8\xa1\x8c\xe4\xb8\xba\n        :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param buy_factors: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90grid\xe5\xba\x8f\xe5\x88\x97\xe6\x88\x96\xe8\x80\x85\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\xba\xe7\x8b\xac\xe7\xab\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90grid\n        :param sell_factors: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90grid\xe5\xba\x8f\xe5\x88\x97\xe6\x88\x96\xe8\x80\x85\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\xba\xe7\x8b\xac\xe7\xab\x8b\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90grid\n        :param read_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0(int), \xe9\xbb\x98\xe8\xae\xa410000000\n        :param score_weights: make_scorer\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xaf\x84\xe5\x88\x86\xe6\x9d\x83\xe9\x87\x8d\n        :param metrics_class: make_scorer\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\n        """"""\n\n        scores = None\n        score_tuple_array = None\n        restore_data_fetch = None\n\n        if ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n            restore_data_fetch = ABuEnv.g_data_fetch_mode\n            ABuEnv.g_data_fetch_mode = EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n\n        if check_symbol_data(choice_symbols):\n            def factor_grid(factors):\n                if isinstance(factors, dict):\n                    # \xe7\x8b\xac\xe7\xab\x8b\xe5\x9b\xa0\xe5\xad\x90grid, \xe7\xa1\xae\xe4\xbf\x9d\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x94\xe5\xbd\xa2\xe6\x88\x90\xe7\x8b\xac\xe7\xab\x8bgrid list\n                    factors_grid = [{bf_key: factors[bf_key] if isinstance(factors[bf_key],\n                                                                           list) else [factors[bf_key]]\n                                     for bf_key in factors.keys()}]\n                elif isinstance(factors, list):\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\xe7\x9a\x84\xe6\x9c\xac\xe8\xba\xab\xe5\xb0\xb1\xe6\x98\xaf\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe5\xba\x8f\xe5\x88\x97\xe5\x86\x85\xe5\xae\xb9\xe5\x81\x9a\xe5\x8f\x82\xe6\x95\xb0\xe7\x9b\x91\xe6\xb5\x8b\xef\xbc\x8c\n                    factors_grid = []\n                    for factor in factors:\n                        factor_dict = {bf_key: factor[bf_key] if isinstance(factor[bf_key],\n                                                                            list) else [factor[bf_key]]\n                                       for bf_key in factor.keys()}\n                        factors_grid.append(factor_dict)\n                else:\n                    raise TypeError(\'factors must be dict or list not {}\'.format(type(factors)))\n                return factors_grid\n\n            # print(\'buy_factors\', buy_factors)\n            buy_factors_grid = factor_grid(buy_factors)\n            # print(\'buy_factors_grid\', buy_factors_grid)\n            sell_factors_grid = factor_grid(sell_factors)\n\n            from ..MetricsBu.ABuGridHelper import gen_factor_grid, K_GEN_FACTOR_PARAMS_BUY, K_GEN_FACTOR_PARAMS_SELL\n\n            buy_factors_product = gen_factor_grid(K_GEN_FACTOR_PARAMS_BUY, buy_factors_grid)\n            # print(\'buy_factors_product\', buy_factors_product)\n\n            sell_factors_product = gen_factor_grid(K_GEN_FACTOR_PARAMS_SELL, sell_factors_grid)\n\n            logging.info(u\'\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe5\x85\xb1\xe6\x9c\x89{}\xe7\xa7\x8d\xe7\xbb\x84\xe5\x90\x88\xe6\x96\xb9\xe5\xbc\x8f\'.format(len(sell_factors_product)))\n            logging.info(u\'\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x880: \xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\xba{}\'.format(sell_factors_product[0]))\n\n            logging.info(u\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe5\x85\xb1\xe6\x9c\x89{}\xe7\xa7\x8d\xe7\xbb\x84\xe5\x90\x88\xe6\x96\xb9\xe5\xbc\x8f\'.format(len(buy_factors_product)))\n            logging.info(u\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x880: \xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\xba{}\'.format(buy_factors_product[0]))\n\n            logging.info(u\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\xbb\x84\xe5\x90\x88\xe5\xbd\xa2\xe5\xbc\x8f\xe5\x85\xb1: {} X {} = {}\xe7\xa7\x8d\'.format(\n                len(buy_factors_product), len(sell_factors_product),\n                len(buy_factors_product) * len(sell_factors_product)))\n            # return buy_factors_product, sell_factors_product\n            gs = cls(read_cash, choice_symbols, buy_factors_product=buy_factors_product,\n                     sell_factors_product=sell_factors_product, score_weights=score_weights,\n                     metrics_class=metrics_class)\n            scores, score_tuple_array = gs.fit(n_jobs=-1)\n            best_score_tuple_grid = gs.best_score_tuple_grid\n            from ..MetricsBu.ABuMetricsBase import AbuMetricsBase\n            logging.info(u\'\xe6\x9c\x80\xe4\xbd\xb3\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x9a{}\'.format(best_score_tuple_grid.buy_factors))\n            logging.info(u\'\xe6\x9c\x80\xe4\xbd\xb3\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x9a{}\'.format(best_score_tuple_grid.sell_factors))\n            logging.info(\'*\' * 100)\n            AbuMetricsBase.show_general(best_score_tuple_grid.orders_pd, best_score_tuple_grid.action_pd,\n                                        best_score_tuple_grid.capital, best_score_tuple_grid.benchmark,\n                                        returns_cmp=True, only_info=True)\n        if restore_data_fetch is not None:\n            ABuEnv.g_data_fetch_mode = restore_data_fetch\n\n        return scores, score_tuple_array\n\n    def __init__(self, read_cash, choice_symbols, stock_pickers_product=None,\n                 buy_factors_product=None, sell_factors_product=None, score_weights=None, metrics_class=None):\n        """"""\n        :param read_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0(int)\n        :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param stock_pickers_product: \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90product\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        :param buy_factors_product: \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90product\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        :param sell_factors_product: \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90product\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        :param score_weights: make_scorer\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xaf\x84\xe5\x88\x86\xe6\x9d\x83\xe9\x87\x8d\n        :param metrics_class: make_scorer\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\n        """"""\n        self.read_cash = read_cash\n        self.benchmark = AbuBenchmark()\n        self.kl_pd_manager = AbuKLManager(self.benchmark, AbuCapital(self.read_cash, self.benchmark))\n        self.choice_symbols = choice_symbols\n        self.stock_pickers_product = [None] if stock_pickers_product is None else stock_pickers_product\n        self.buy_factors_product = [None] if buy_factors_product is None else buy_factors_product\n        self.sell_factors_product = [None] if sell_factors_product is None else sell_factors_product\n        self.score_weights = score_weights\n        self.metrics_class = metrics_class\n\n    def fit(self, score_class=WrsmScorer, n_jobs=-1):\n        """"""\n        \xe5\xbc\x80\xe5\xa7\x8b\xe5\xaf\xbb\xe6\x89\xbe\xe6\x9c\x80\xe4\xbc\x98\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe8\xb4\xb9\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3\xe6\x89\x80\xe6\x9c\x89\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x84\xe5\x88\x86\n        :param score_class: \xe5\xaf\xb9\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x84\xe5\x88\x86\xe7\x9a\x84\xe8\xaf\x84\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8cAbuBaseScorer\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\x9d\x9e\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbc\xa0\xe9\x80\x92\xe7\xb1\xbb\xe4\xbf\xa1\xe6\x81\xaf\n        :param n_jobs: \xe9\xbb\x98\xe8\xae\xa4\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-1, \xe5\x8d\xb3\xe5\x90\xaf\xe5\x8a\xa8\xe4\xb8\x8ecpu\xe6\x95\xb0\xe9\x87\x8f\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\n        :return: (scores: \xe8\xaf\x84\xe5\x88\x86\xe7\xbb\x93\xe6\x9e\x9cdict\xef\xbc\x8c score_tuple_array: \xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xe5\xba\x8f\xe5\x88\x97)\n        """"""\n\n        pass_kl_pd_manager = None\n        if len(self.stock_pickers_product) == 1 and self.stock_pickers_product[0] is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\xa4\x96\xe5\xb1\x82\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xef\xbc\x8c\xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe6\x98\xaf1\xef\xbc\x8c\xe4\xbb\xa5\xe4\xb8\xba\xe5\x9c\xa8__init__\xe4\xb8\xad[None]\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\n            need_batch_gen = self.kl_pd_manager.filter_pick_time_choice_symbols(self.choice_symbols)\n            # grid\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8bsymbol\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\xa7\xe4\xba\x8e40\xe6\x89\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\n            self.kl_pd_manager.batch_get_pick_time_kl_pd(need_batch_gen,\n                                                         n_process=ABuEnv.g_cpu_cnt if len(need_batch_gen) > 40 else 1)\n            pass_kl_pd_manager = self.kl_pd_manager\n\n        if n_jobs <= 0:\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaen_jobs\xe6\x9d\xa5split_k_market\n            n_jobs = ABuEnv.g_cpu_cnt\n\n        # \xe5\x8f\xaa\xe6\x9c\x89E_DATA_FETCH_FORCE_LOCAL\xe6\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x9b\x9e\xe6\xbb\x9a\xe5\x88\xb0\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe6\xa8\xa1\xe5\xbc\x8fn_jobs = 1\n        if n_jobs != 1 and ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n            # 1. hdf5\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x98\xe5\xae\xb9\xe6\x98\x93\xe5\x86\x99\xe5\x9d\x8f\xe6\x95\xb0\xe6\x8d\xae\n            # 2. MAC OS 10.9 \xe4\xb9\x8b\xe5\x90\x8e\xe5\xb9\xb6\xe8\xa1\x8c\xe8\x81\x94\xe7\xbd\x91\xef\xbc\x8bnumpy \xe7\xb3\xbb\xe7\xbb\x9fbug crash\xef\xbc\x8c\xe5\x8d\xa1\xe6\xad\xbb\xe7\xad\x89\xe9\x97\xae\xe9\xa2\x98\n            logging.info(\'batch get only support E_DATA_FETCH_FORCE_LOCAL for Parallel!\')\n            n_jobs = 1\n\n        factors_product = [{\'buy_factors\': item[0], \'sell_factors\': item[1], \'stock_pickers\': item[2]} for item in\n                           product(self.buy_factors_product, self.sell_factors_product, self.stock_pickers_product)]\n\n        # \xe5\xb0\x86factors\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xban_jobs\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xa4\x84\xe7\x90\x86\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        process_factors = split_k_market(n_jobs, market_symbols=factors_product)\n        # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xbc\x9a\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe6\x8d\xa2\xe4\xb8\xba\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0, \xe5\x8d\xb332 -> 33 16 -> 17\n        n_jobs = len(process_factors)\n        parallel = Parallel(\n            n_jobs=n_jobs, verbose=0, pre_dispatch=\'2*n_jobs\')\n        # \xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe7\x8e\xaf\xe5\xa2\x83\xe4\xb8\x8b\xe7\x9a\x84\xe5\x86\x85\xe5\xad\x98\xe7\x8e\xaf\xe5\xa2\x83\xe6\x8b\xb7\xe8\xb4\x9d\xe5\xaf\xb9\xe8\xb1\xa1AbuEnvProcess\n        p_nev = AbuEnvProcess()\n        # \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\x90\x84\xe7\xa7\x8d\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\xb2\xa1\xe4\xb8\x80\xe7\xa7\x8d\xe5\x9b\xa0\xe5\xad\x90\xe7\xbb\x84\xe5\x90\x88\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\xaf\xe5\x8a\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe8\xbf\x90\xe8\xa1\x8cgrid_search_mul_process\n        out_abu_score_tuple = parallel(\n            delayed(grid_search_mul_process)(self.read_cash, self.benchmark, factors,\n                                             self.choice_symbols, pass_kl_pd_manager, env=p_nev)\n            for factors in process_factors)\n\n        # \xe9\x83\xbd\xe5\xae\x8c\xe4\xba\x8b\xe6\x97\xb6\xe6\xa3\x80\xe6\xb5\x8b\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbf\x98\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        ABuProgress.do_check_process_is_dead()\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuScoreTuple\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2score_tuple_array, \xe5\x8d\xb3\xe6\x91\x8a\xe5\xbc\x80\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97eg: ([], [], [], [])->[]\n        score_tuple_array = list(chain.from_iterable(out_abu_score_tuple))\n        # \xe4\xbd\xbf\xe7\x94\xa8ABuMetricsScore\xe4\xb8\xadmake_scorer\xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x84\xe5\x88\x86\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe9\x98\x85\xe8\xaf\xbbABuMetricsScore\xe6\xa8\xa1\xe5\x9d\x97\n        scores = make_scorer(score_tuple_array, score_class, weights=self.score_weights,\n                             metrics_class=self.metrics_class)\n        # \xe8\xaf\x84\xe5\x88\x86\xe7\xbb\x93\xe6\x9e\x9c\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe8\xb5\x8b\xe4\xba\x88best_score_tuple_grid\n        self.best_score_tuple_grid = score_tuple_array[scores.index[-1]]\n        return scores, score_tuple_array\n'"
abupy/MetricsBu/ABuMetrics.py,0,b'from __future__ import absolute_import\n'
abupy/MetricsBu/ABuMetricsBase.py,9,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\xba\xa6\xe9\x87\x8f\xe6\xa8\xa1\xe5\x9d\x97\xe5\x9f\xba\xe7\xa1\x80""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport functools\nimport logging\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom ..ExtBu.empyrical import stats\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketDataFetchMode\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu import ABuDateUtil\nfrom ..UtilBu import ABuStatsUtil, ABuScalerUtil\nfrom ..UtilBu.ABuDTUtil import warnings_filter\nfrom ..TradeBu.ABuKLManager import AbuKLManager\nfrom ..TradeBu.ABuCapital import AbuCapital\nfrom ..TradeBu import ABuTradeExecute\n\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef valid_check(func):\n    """"""\xe6\xa3\x80\xe6\xb5\x8b\xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xe6\x98\xaf\xe5\x90\xa6\xe6\xad\xa3\xe5\xb8\xb8\xef\xbc\x8c\xe9\x9d\x9e\xe6\xad\xa3\xe5\xb8\xb8\xe6\x98\xbe\xe7\xa4\xbainfo\xef\xbc\x8c\xe6\xad\xa3\xe5\xb8\xb8\xe7\xbb\xa7\xe7\xbb\xad\xe6\x89\xa7\xe8\xa1\x8c\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe6\x96\xb9\xe6\xb3\x95""""""\n\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        if self.valid:\n            return func(self, *args, **kwargs)\n        else:\n            logging.info(\'metrics input is invalid or zero order gen!\')\n\n    return wrapper\n\n\nclass AbuMetricsBase(object):\n    """"""\xe4\xb8\xbb\xe8\xa6\x81\xe9\x80\x82\xe9\x85\x8d\xe8\x82\xa1\xe7\xa5\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\xa6\xe9\x87\x8f""""""\n\n    @classmethod\n    def show_general(cls, orders_pd, action_pd, capital, benchmark, returns_cmp=False,\n                     only_info=False, only_show_returns=False, enable_stocks_full_rate_factor=False):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe8\xbe\x93\xe5\x85\xa5\xe6\x89\xa7\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\xe5\x90\x8e\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe5\xba\xa6\xe9\x87\x8f\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\x8a\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param action_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param returns_cmp: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaa\xe5\xba\xa6\xe9\x87\x8f\xe6\x97\xa0\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x80\xbb\xe4\xbd\x93\xe6\x83\x85\xe5\x86\xb5\n        :param only_info: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaa\xe6\x98\xbe\xe7\xa4\xba\xe6\x96\x87\xe5\xad\x97\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe4\xb8\x8d\xe6\x98\xbe\xe7\xa4\xba\xe5\x9b\xbe\xe5\x83\x8f\n        :param only_show_returns: \xe9\x80\x8f\xe4\xbc\xa0plot_returns_cmp\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4False, True\xe5\x88\x99\xe5\x8f\xaa\xe6\x98\xbe\xe7\xa4\xba\xe6\x94\xb6\xe7\x9b\x8a\xe5\xaf\xb9\xe6\xaf\x94\xe4\xb8\x8d\xe6\x98\xbe\xe7\xa4\xba\xe5\x85\xb6\xe5\xae\x83\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :param enable_stocks_full_rate_factor: \xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\n        :return AbuMetricsBase\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        metrics = cls(orders_pd, action_pd, capital, benchmark,\n                      enable_stocks_full_rate_factor=enable_stocks_full_rate_factor)\n        metrics.fit_metrics()\n        if returns_cmp:\n            metrics.plot_order_returns_cmp(only_info=only_info)\n        else:\n            metrics.plot_returns_cmp(only_info=only_info, only_show_returns=only_show_returns)\n            if not only_show_returns:\n                metrics.plot_sharp_volatility_cmp(only_info=only_info)\n        return metrics\n\n    def __init__(self, orders_pd, action_pd, capital, benchmark, enable_stocks_full_rate_factor=False):\n        """"""\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param action_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param enable_stocks_full_rate_factor: \xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\n        """"""\n        self.capital = capital\n        self.orders_pd = orders_pd\n        self.action_pd = action_pd\n        self.benchmark = benchmark\n        """"""\n            \xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue, \xe9\x92\x88\xe5\xaf\xb9\xe5\xba\xa6\xe9\x87\x8f\xe4\xbf\xa1\xe6\x81\xaf\xe5\xa6\x82\xe6\x94\xb6\xe7\x9b\x8a\xe7\xad\x89\xe9\x9c\x80\xe8\xa6\x81\xe9\x99\xa4self.stocks_full_rate_factor\n        """"""\n        self.enable_stocks_full_rate_factor = enable_stocks_full_rate_factor\n        # \xe9\xaa\x8c\xe8\xaf\x81\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe4\xbe\xbf\xe4\xba\x8evalid_check\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xb7\xa5\xe4\xbd\x9c\n        self.valid = False\n        if self.orders_pd is not None and self.capital is not None and \'capital_blance\' in self.capital.capital_pd:\n            self.valid = True\n        # ipython notebook\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8logging.info\n        self.log_func = logging.info if ABuEnv.g_is_ipython else print\n\n    @valid_check\n    def fit_metrics(self):\n        """"""\xe6\x89\xa7\xe8\xa1\x8c\xe6\x89\x80\xe6\x9c\x89\xe5\xba\xa6\xe9\x87\x8f\xe5\x87\xbd\xe6\x95\xb0""""""\n        # TODO \xe6\xa0\xb9\xe6\x8d\xaeORDER\xe6\x95\xb0\xe9\x87\x8f\xe5\xa4\xa7\xe4\xba\x8e\xe4\xb8\x80\xe5\xae\x9a\xe9\x98\x80\xe5\x80\xbc\xe5\x90\xaf\xe5\x8a\xa8\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        # with AbuProgress(100, 0, label=\'metrics progress...\') as pg:\n        # pg.show(5)\n        self._metrics_base_stats()\n        # pg.show(50)\n        self._metrics_sell_stats()\n        # pg.show(80)\n        self._metrics_action_stats()\n        # pg.show(95)\n        self._metrics_extend_stats()\n\n    def fit_metrics_order(self):\n        """"""\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\xb9\xb6\xe9\x9d\x9e\xe5\xba\xa6\xe9\x87\x8f\xe7\x9c\x9f\xe5\xae\x9e\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x8f\xaa\xe5\xba\xa6\xe9\x87\x8forders_pd\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8a\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f""""""\n        self._metrics_sell_stats()\n\n    def _metrics_base_stats(self):\n        """"""\xe5\xba\xa6\xe9\x87\x8f\xe7\x9c\x9f\xe5\xae\x9e\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84capital_pd\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb6\x89\xe5\x8f\x8a\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f""""""\n        # \xe5\xb9\xb3\xe5\x9d\x87\xe8\xb5\x84\xe9\x87\x91\xe5\x88\xa9\xe7\x94\xa8\xe7\x8e\x87\n        self.cash_utilization = 1 - (self.capital.capital_pd.cash_blance /\n                                     self.capital.capital_pd.capital_blance).mean()\n\n        # \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\xe5\x8d\xb3stocks_full_rate_factor\xef\xbc\x9d1\n        self.stocks_full_rate_factor = 1\n        if self.enable_stocks_full_rate_factor:\n            # \xe8\xae\xa1\xe7\xae\x97\xe6\xbb\xa1\xe4\xbb\x93\xe6\xaf\x94\xe4\xbe\x8b\n            stocks_full_rate = (self.capital.capital_pd.stocks_blance / self.capital.capital_pd.capital_blance)\n            # \xe9\x81\xbf\xe5\x85\x8d\xe9\x99\xa40\n            stocks_full_rate[stocks_full_rate == 0] = 1\n            # \xe5\x80\x92\xe6\x95\xb0\xe5\xbe\x97\xe5\x88\xb0\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\n            self.stocks_full_rate_factor = (1 / stocks_full_rate)\n\n        # \xe6\x94\xb6\xe7\x9b\x8a\xe6\x95\xb0\xe6\x8d\xae\n        self.benchmark_returns = np.round(self.benchmark.kl_pd.close.pct_change(), 3)\n        # \xe5\xa6\x82\xe6\x9e\x9cenable_stocks_full_rate_factor \xe5\x88\x99 * self.stocks_full_rate_factor\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89\xe4\xb8\xba\xe9\x9a\x8f\xe6\x97\xb6\xe9\x83\xbd\xe6\x98\xaf\xe6\xbb\xa1\xe4\xbb\x93\n        self.algorithm_returns = np.round(self.capital.capital_pd[\'capital_blance\'].pct_change(),\n                                          3) * self.stocks_full_rate_factor\n\n        # \xe6\x94\xb6\xe7\x9b\x8acum\xe6\x95\xb0\xe6\x8d\xae\n        # noinspection PyTypeChecker\n        self.algorithm_cum_returns = stats.cum_returns(self.algorithm_returns)\n        self.benchmark_cum_returns = stats.cum_returns(self.benchmark_returns)\n\n        # \xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x97\xa5\xe7\x9a\x84cum return\n        self.benchmark_period_returns = self.benchmark_cum_returns[-1]\n        self.algorithm_period_returns = self.algorithm_cum_returns[-1]\n\n        # \xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xa9\xe6\x95\xb0\n        self.num_trading_days = len(self.benchmark_returns)\n\n        # \xe5\xb9\xb4\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a\n        self.algorithm_annualized_returns = \\\n            (ABuEnv.g_market_trade_year / self.num_trading_days) * self.algorithm_period_returns\n        self.benchmark_annualized_returns = \\\n            (ABuEnv.g_market_trade_year / self.num_trading_days) * self.benchmark_period_returns\n\n        # \xe7\xad\x96\xe7\x95\xa5\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x8a\n        # noinspection PyUnresolvedReferences\n        self.mean_algorithm_returns = self.algorithm_returns.cumsum() / np.arange(1, self.num_trading_days + 1,\n                                                                                  dtype=np.float64)\n        # \xe6\xb3\xa2\xe5\x8a\xa8\xe7\x8e\x87\n        self.benchmark_volatility = stats.annual_volatility(self.benchmark_returns)\n        # noinspection PyTypeChecker\n        self.algorithm_volatility = stats.annual_volatility(self.algorithm_returns)\n\n        # \xe5\xa4\x8f\xe6\x99\xae\xe6\xaf\x94\xe7\x8e\x87\n        self.benchmark_sharpe = stats.sharpe_ratio(self.benchmark_returns)\n        # noinspection PyTypeChecker\n        self.algorithm_sharpe = stats.sharpe_ratio(self.algorithm_returns)\n\n        # \xe4\xbf\xa1\xe6\x81\xaf\xe6\xaf\x94\xe7\x8e\x87\n        # noinspection PyUnresolvedReferences\n        self.information = stats.information_ratio(self.algorithm_returns.values, self.benchmark_returns.values)\n\n        # \xe9\x98\xbf\xe5\xb0\x94\xe6\xb3\x95, \xe8\xb4\x9d\xe5\xa1\x94\n        # noinspection PyUnresolvedReferences\n        self.alpha, self.beta = stats.alpha_beta_aligned(self.algorithm_returns.values, self.benchmark_returns.values)\n\n        # \xe6\x9c\x80\xe5\xa4\xa7\xe5\x9b\x9e\xe6\x92\xa4\n        # noinspection PyUnresolvedReferences\n        self.max_drawdown = stats.max_drawdown(self.algorithm_returns.values)\n\n    def _metrics_sell_stats(self):\n        """"""\xe5\xb9\xb6\xe9\x9d\x9e\xe5\xba\xa6\xe9\x87\x8f\xe7\x9c\x9f\xe5\xae\x9e\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x8f\xaa\xe5\xba\xa6\xe9\x87\x8forders_pd\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa4\xe4\xb8\xba\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe5\x92\x8c\xe8\xb5\x84\xe9\x87\x91\xe9\x87\x8f\xe9\x99\x90\xe5\x88\xb6\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xe7\x9a\x84\xe8\xa1\xa8\xe7\x8e\xb0""""""\n\n        # \xe6\xa0\xb9\xe6\x8d\xaeorder\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\x9b\x88\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\n        self.orders_pd[\'profit_cg\'] = self.orders_pd[\'profit\'] / (\n            self.orders_pd[\'buy_price\'] * self.orders_pd[\'buy_cnt\'])\n        # \xe4\xb8\xba\xe4\xba\x86\xe6\x98\xbe\xe7\xa4\xba\xe6\x96\xb9\xe4\xbe\xbf\xe5\x8f\x8a\xe6\x98\x8e\xe6\x98\xbe\n        self.orders_pd[\'profit_cg_hunder\'] = self.orders_pd[\'profit_cg\'] * 100\n        # \xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84pd isin win or loss\n        deal_pd = self.orders_pd[self.orders_pd[\'sell_type\'].isin([\'win\', \'loss\'])]\n        # \xe5\x8d\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\x9b\xa0get_dummies\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xa6\xbb\xe6\x95\xa3\xe5\x8c\x96\n        dumm_sell = pd.get_dummies(deal_pd.sell_type_extra)\n        dumm_sell_t = dumm_sell.T\n        # \xe4\xb8\xbaplot_sell_factors\xe5\x87\xbd\xe6\x95\xb0\xe7\x94\x9f\xe6\x88\x90\xe5\x8d\x96\xe5\x87\xba\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x86\xe5\xb8\x83\n        self.dumm_sell_t_sum = dumm_sell_t.sum(axis=1)\n\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0get_dummies\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xa6\xbb\xe6\x95\xa3\xe5\x8c\x96\n        dumm_buy = pd.get_dummies(deal_pd.buy_factor)\n        dumm_buy = dumm_buy.T\n        # \xe4\xb8\xbaplot_buy_factors\xe5\x87\xbd\xe6\x95\xb0\xe7\x94\x9f\xe6\x88\x90\xe5\x8d\x96\xe5\x87\xba\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x86\xe5\xb8\x83\n        self.dumm_buy_t_sum = dumm_buy.sum(axis=1)\n\n        self.orders_pd[\'buy_date\'] = self.orders_pd[\'buy_date\'].astype(int)\n        self.orders_pd[self.orders_pd[\'result\'] != 0][\'sell_date\'].astype(int, copy=False)\n        # \xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe7\x9a\x84\xe6\x8c\x81\xe8\x82\xa1\xe6\x97\xb6\xe9\x97\xb4\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xa1\xe7\xae\x97\n        self.orders_pd[\'keep_days\'] = self.orders_pd.apply(lambda x:\n                                                           ABuDateUtil.diff(x[\'buy_date\'],\n                                                                            ABuDateUtil.current_date_int()\n                                                                            if x[\'result\'] == 0 else x[\n                                                                                \'sell_date\']),\n                                                           axis=1)\n        # \xe7\xad\x9b\xe5\x87\xba\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\n        self.order_has_ret = self.orders_pd[self.orders_pd[\'result\'] != 0]\n\n        # \xe7\xad\x9b\xe5\x87\xba\xe6\x9c\xaa\xe6\x88\x90\xe4\xba\xa4\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\n        self.order_keep = self.orders_pd[self.orders_pd[\'result\'] == 0]\n\n        xt = self.order_has_ret.result.value_counts()\n        # \xe8\xae\xa1\xe7\xae\x97\xe8\x83\x9c\xe7\x8e\x87\n        if xt.shape[0] == 2:\n            win_rate = xt[1] / xt.sum()\n        elif xt.shape[0] == 1:\n            win_rate = xt.index[0]\n        else:\n            win_rate = 0\n        self.win_rate = win_rate\n        # \xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n        self.keep_days_mean = self.orders_pd[\'keep_days\'].mean()\n        # \xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0\n        self.keep_days_median = self.orders_pd[\'keep_days\'].median()\n\n        # \xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x94\xb6\xe7\x9b\x8a\n        self.gains_mean = self.order_has_ret[self.order_has_ret[\'profit_cg\'] > 0].profit_cg.mean()\n        if np.isnan(self.gains_mean):\n            self.gains_mean = 0.0\n        # \xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x9f\xe6\x9c\x9b\xe4\xba\x8f\xe6\x8d\x9f\n        self.losses_mean = self.order_has_ret[self.order_has_ret[\'profit_cg\'] < 0].profit_cg.mean()\n        if np.isnan(self.losses_mean):\n            self.losses_mean = 0.0\n\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe7\x9a\x84\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe5\x81\x87\xe8\xae\xbe\xe6\xaf\x8f\xe4\xb8\x80\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x80\xbb\xe8\x8e\xb7\xe5\x88\xa9\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8c\n        profit_cg_win_sum = self.order_has_ret[self.order_has_ret[\'profit_cg\'] > 0].profit.sum()\n        # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe7\x9a\x84\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe5\x81\x87\xe8\xae\xbe\xe6\xaf\x8f\xe4\xb8\x80\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe6\x80\xbb\xe4\xba\x8f\xe6\x8d\x9f\xe4\xba\xa4\xe6\x98\x93\xe4\xba\x8f\xe6\x8d\x9f\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8c\n        profit_cg_loss_sum = self.order_has_ret[self.order_has_ret[\'profit_cg\'] < 0].profit.sum()\n\n        if profit_cg_win_sum * profit_cg_loss_sum == 0 and profit_cg_win_sum + profit_cg_loss_sum > 0:\n            # \xe5\x85\xb6\xe4\xb8\xad\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe6\x98\xaf0\xe7\x9a\x84\xef\xbc\x8c\xe8\xa6\x81\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x80\xe5\xb0\x8f\xe7\xbb\x9f\xe8\xae\xa1\xe5\x8d\x95\xe4\xbd\x8d\xe8\xae\xa1\xe7\xae\x97\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\n            if profit_cg_win_sum == 0:\n                profit_cg_win_sum = 0.01\n            if profit_cg_loss_sum == 0:\n                profit_cg_win_sum = 0.01\n\n        #  \xe5\xbf\xbd\xe7\x95\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe7\x9a\x84\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94\n        self.win_loss_profit_rate = 0 if profit_cg_loss_sum == 0 else -round(profit_cg_win_sum / profit_cg_loss_sum, 4)\n        #  \xe5\xbf\xbd\xe7\x95\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe6\x8e\xa7\xe7\x9a\x84\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe7\x9a\x84\xe7\x9b\x88\xe4\xba\x8f\xe6\x80\xbb\xe4\xbc\x9a\n        self.all_profit = self.order_has_ret[\'profit\'].sum()\n\n    def _metrics_action_stats(self):\n        """"""\xe5\xba\xa6\xe9\x87\x8f\xe7\x9c\x9f\xe5\xae\x9e\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84action_pd \xe8\xae\xa1\xe7\xae\x97\xe4\xb9\xb0\xe5\x85\xa5\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe5\x88\x86\xe5\xb8\x83\xe5\xb9\xb3\xe5\x9d\x87\xe6\x80\xa7\xef\xbc\x8c\xe5\x8f\x8a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe8\x89\xaf\xe5\xa5\xbd\xe7\x9a\x84\xe5\x88\x86\xe5\xb8\x83""""""\n\n        action_pd = self.action_pd\n        # \xe5\x8f\xaa\xe9\x80\x89\xe7\x94\x9f\xe6\x95\x88\xe7\x9a\x84, \xe7\x94\xb1\xe4\xba\x8e\xe5\xbf\xbd\xe7\x95\xa5\xe9\x9d\x9e\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5, \xe5\xa4\xa7\xe6\xa6\x82\xe6\x9c\x89\xe5\xa4\x9a\xe5\x87\xba0.6\xe7\x9a\x84\xe8\xaf\xaf\xe5\xb7\xae\n        self.act_buy = action_pd[action_pd.action.isin([\'buy\']) & action_pd.deal.isin([True])]\n        # drop\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8a\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\xba\xef\xbc\x8c\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8ccp_date\xe5\xbd\xa2\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n        cp_date = self.act_buy[\'Date\'].drop_duplicates()\n        """"""\n            cp_date\n            0      20141024\n            2      20141029\n            20     20150127\n            21     20150205\n            23     20150213\n            25     20150218\n            31     20150310\n            34     20150401\n            36     20150409\n            39     20150422\n            41     20150423\n            44     20150428\n            58     20150609\n            59     20150610\n            63     20150624\n            66     20150715\n            67     20150717\n        """"""\n        dt_fmt = cp_date.apply(lambda order: ABuDateUtil.str_to_datetime(str(order), \'%Y%m%d\'))\n        dt_fmt = dt_fmt.apply(lambda order: (order - dt_fmt.iloc[0]).days)\n        # \xe5\x89\x8d\xe5\x90\x8e\xe4\xb8\xa4\xe4\xb8\xa4\xe7\x94\x9f\xe6\x95\x88\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe7\x9b\xb8\xe5\x87\x8f\n        self.diff_dt = dt_fmt - dt_fmt.shift(1)\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\xb9\xb3\xe5\x9d\x87\xe7\x94\x9f\xe6\x95\x88\xe9\x97\xb4\xe9\x9a\x94\xe6\x97\xb6\xe9\x97\xb4\n        self.effect_mean_day = self.diff_dt.mean()\n\n        if self.act_buy.empty:\n            self.act_buy[\'cost\'] = 0\n            self.cost_stats = 0\n            self.buy_deal_rate = 0\n        else:\n            self.act_buy[\'cost\'] = self.act_buy.apply(lambda order: order.Price * order.Cnt, axis=1)\n            # \xe8\xae\xa1\xe7\xae\x97cost\xe5\x90\x84\xe7\xa7\x8d\xe7\xbb\x9f\xe8\xae\xa1\xe5\xba\xa6\xe9\x87\x8f\xe5\x80\xbc\n            self.cost_stats = ABuStatsUtil.stats_namedtuple(self.act_buy[\'cost\'])\n\n            buy_action_pd = action_pd[action_pd[\'action\'] == \'buy\']\n            buy_action_pd_deal = buy_action_pd[\'deal\']\n            # \xe8\xae\xa1\xe7\xae\x97\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe6\xaf\x94\xe4\xbe\x8b\n            self.buy_deal_rate = buy_action_pd_deal.sum() / buy_action_pd_deal.count()\n\n    def _metrics_extend_stats(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe7\x9a\x84metrics\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\x9c\xa8\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe5\x8f\xaf\xe5\xae\x9a\xe4\xb9\x89\xe8\x87\xaa\xe5\xb7\xb1\xe9\x9c\x80\xe8\xa6\x81\xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc""""""\n        pass\n\n    @valid_check\n    @warnings_filter  # skip: statsmodels / nonparametric / kdetools.py:20\n    def plot_order_returns_cmp(self, only_info=True):\n        """"""\xe9\x9d\x9e\xe7\x9c\x9f\xe5\xae\x9e\xe6\x88\x90\xe4\xba\xa4\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe8\xae\xa4\xe4\xb8\xba\xe8\xb5\x84\xe9\x87\x91\xe6\x97\xa0\xe9\x99\x90\xef\xbc\x8c\xe6\x97\xa0\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x80\xbb\xe4\xbd\x93\xe6\x83\x85\xe5\x86\xb5""""""\n\n        self.log_func(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f:{}\'.format(self.order_has_ret.shape[0]))\n        self.log_func(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\xb0\x9a\xe6\x9c\xaa\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f:{}\'.format(self.order_keep.shape[0]))\n        self.log_func(\'\xe8\x83\x9c\xe7\x8e\x87:{:.4f}%\'.format(self.win_rate * 100))\n        self.log_func(\'\xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(self.gains_mean * 100))\n        self.log_func(\'\xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(self.losses_mean * 100))\n        self.log_func(\'\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94:{:.4f}\'.format(self.win_loss_profit_rate))\n        self.log_func(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8c:{:.4f} \'.format(self.order_has_ret.profit_cg.sum()))\n        self.log_func(\'\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x80\xbb\xe7\x9b\x88\xe4\xba\x8f\xe5\x92\x8c:{:.4f} \'.format(self.all_profit))\n\n        if only_info:\n            return\n        # \xe6\x97\xa0\xe6\xb3\x95\xe4\xb8\x8e\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\x96\xe5\x90\x91\n        self.order_has_ret.sort_values(\'buy_date\')[\'profit_cg\'].cumsum().plot(grid=True, title=\'profit_cg cumsum\')\n        plt.show()\n\n    @valid_check\n    def plot_returns_cmp(self, only_show_returns=False, only_info=False):\n        """"""\xe8\x80\x83\xe8\x99\x91\xe8\xb5\x84\xe9\x87\x91\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8ebenchmark\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a\xe5\xba\xa6\xe9\x87\x8f\xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x8a\xe8\xb6\x8b\xe5\x8a\xbf\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8f\x98\xe5\x8a\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x85\xb6\xe5\xae\x83\xe5\xba\xa6\xe9\x87\x8f\xe4\xbf\xa1\xe6\x81\xaf""""""\n\n        self.log_func(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f:{}\'.format(self.order_has_ret.shape[0]))\n        self.log_func(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\xb0\x9a\xe6\x9c\xaa\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f:{}\'.format(self.order_keep.shape[0]))\n\n        self.log_func(\'\xe8\x83\x9c\xe7\x8e\x87:{:.4f}%\'.format(self.win_rate * 100))\n\n        self.log_func(\'\xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(self.gains_mean * 100))\n        self.log_func(\'\xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(self.losses_mean * 100))\n\n        self.log_func(\'\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94:{:.4f}\'.format(self.win_loss_profit_rate))\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8a: {:.4f}%\'.format(self.algorithm_period_returns * 100))\n        self.log_func(\'\xe5\x9f\xba\xe5\x87\x86\xe6\x94\xb6\xe7\x9b\x8a: {:.4f}%\'.format(self.benchmark_period_returns * 100))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe5\xb9\xb4\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a: {:.4f}%\'.format(self.algorithm_annualized_returns * 100))\n        self.log_func(\'\xe5\x9f\xba\xe5\x87\x86\xe5\xb9\xb4\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a: {:.4f}%\'.format(self.benchmark_annualized_returns * 100))\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xaf\x94\xe4\xbe\x8b:{:.4f}%\'.format(self.buy_deal_rate * 100))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe8\xb5\x84\xe9\x87\x91\xe5\x88\xa9\xe7\x94\xa8\xe7\x8e\x87\xe6\xaf\x94\xe4\xbe\x8b:{:.4f}%\'.format(self.cash_utilization * 100))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe5\x85\xb1\xe6\x89\xa7\xe8\xa1\x8c{}\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\'.format(self.num_trading_days))\n\n        if only_info:\n            return\n\n        self.benchmark_cum_returns.plot()\n        self.algorithm_cum_returns.plot()\n        plt.legend([\'benchmark returns\', \'algorithm returns\'], loc=\'best\')\n        plt.show()\n\n        if only_show_returns:\n            return\n        sns.regplot(x=np.arange(0, len(self.algorithm_cum_returns)), y=self.algorithm_cum_returns.values)\n        plt.show()\n        sns.distplot(self.capital.capital_pd[\'capital_blance\'], kde_kws={""lw"": 3, ""label"": ""capital blance kde""})\n        plt.show()\n\n    @valid_check\n    def plot_sharp_volatility_cmp(self, only_info=False):\n        """"""sharp\xef\xbc\x8cvolatility\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\x8e\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe6\xaf\x94\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8aalpha\xe9\x98\xbf\xe5\xb0\x94\xe6\xb3\x95\xef\xbc\x8cbeta\xe8\xb4\x9d\xe5\xa1\x94\xef\xbc\x8cInformation\xe4\xbf\xa1\xe6\x81\xaf\xe6\xaf\x94\xe7\x8e\x87\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba""""""\n\n        self.log_func(\'alpha\xe9\x98\xbf\xe5\xb0\x94\xe6\xb3\x95:{:.4f}\'.format(self.alpha))\n        self.log_func(\'beta\xe8\xb4\x9d\xe5\xa1\x94:{:.4f}\'.format(self.beta))\n        self.log_func(\'Information\xe4\xbf\xa1\xe6\x81\xaf\xe6\xaf\x94\xe7\x8e\x87:{:.4f}\'.format(self.information))\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5Sharpe\xe5\xa4\x8f\xe6\x99\xae\xe6\xaf\x94\xe7\x8e\x87: {:.4f}\'.format(self.algorithm_sharpe))\n        self.log_func(\'\xe5\x9f\xba\xe5\x87\x86Sharpe\xe5\xa4\x8f\xe6\x99\xae\xe6\xaf\x94\xe7\x8e\x87: {:.4f}\'.format(self.benchmark_sharpe))\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x8e\x87Volatility: {:.4f}\'.format(self.algorithm_volatility))\n        self.log_func(\'\xe5\x9f\xba\xe5\x87\x86\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x8e\x87Volatility: {:.4f}\'.format(self.benchmark_volatility))\n\n        if only_info:\n            return\n\n        sharp_volatility = pd.DataFrame([[self.algorithm_sharpe, self.benchmark_sharpe],\n                                         [self.algorithm_volatility, self.benchmark_volatility]])\n        sharp_volatility.columns = [\'algorithm\', \'benchmark\']\n        sharp_volatility.index = [\'sharpe\', \'volatility\']\n        sharp_volatility.plot(kind=\'bar\', alpha=0.5)\n        _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n\n    @valid_check\n    def plot_effect_mean_day(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9b\xa0\xe5\xad\x90\xe5\xb9\xb3\xe5\x9d\x87\xe7\x94\x9f\xe6\x95\x88\xe9\x97\xb4\xe9\x9a\x94\xe6\x97\xb6\xe9\x97\xb4""""""\n\n        self.log_func(\'\xe5\x9b\xa0\xe5\xad\x90\xe5\xb9\xb3\xe5\x9d\x87\xe7\x94\x9f\xe6\x95\x88\xe9\x97\xb4\xe9\x9a\x94:{}\'.format(self.effect_mean_day))\n\n        ddvc = self.diff_dt.value_counts()\n        ddvc_rt = ddvc / ddvc.sum()\n        plt.figure(figsize=(6, 6))\n        plt.axes([0.025, 0.025, 0.95, 0.95])\n        x = ddvc_rt.values\n        labels = ddvc_rt.index\n        plt.pie(x, labels=labels, explode=x * 0.1)\n        plt.title(\'factor diff effect day\')\n        plt.show()\n\n    @valid_check\n    def plot_action_buy_cost(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xbc\x80\xe4\xbb\x93\xe8\x8a\xb1\xe8\xb4\xb9\xe6\x83\x85\xe5\x86\xb5""""""\n\n        self.log_func(\'\xe5\xbc\x80\xe4\xbb\x93\xe8\x8a\xb1\xe8\xb4\xb9\xe6\x83\x85\xe5\x86\xb5: \')\n        self.log_func(self.cost_stats)\n\n        plt.title(\'action buy cost\')\n        bins = int(len(self.act_buy[\'cost\']) / 10)\n        bins = bins if bins > 0 else 10\n        self.act_buy[\'cost\'].plot(kind=\'hist\', bins=bins)\n        plt.show()\n\n    @valid_check\n    def plot_sell_factors(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8d\x96\xe5\x87\xba\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x86\xe5\xb8\x83""""""\n        self.log_func(\'\xe5\x8d\x96\xe5\x87\xba\xe6\x8b\xa9\xe6\x97\xb6\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x86\xe5\xb8\x83\xef\xbc\x9a\')\n        self.log_func(self.dumm_sell_t_sum)\n        if self.dumm_sell_t_sum.shape[0] > 1:\n            self.dumm_sell_t_sum.plot(kind=\'barh\')\n            plt.title(\'sell factors barh\')\n            plt.show()\n\n    @valid_check\n    def plot_buy_factors(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xb9\xb0\xe5\x85\xa5\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x86\xe5\xb8\x83""""""\n        self.log_func(\'\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa9\xe6\x97\xb6\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe5\x88\x86\xe5\xb8\x83\xef\xbc\x9a\')\n        self.log_func(self.dumm_buy_t_sum)\n\n        if self.dumm_buy_t_sum.shape[0] > 1:\n            self.dumm_buy_t_sum.plot(kind=\'barh\')\n            plt.title(\'buy factors barh\')\n            plt.show()\n\n    @valid_check\n    def plot_keep_days(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0""""""\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe5\xb9\xb3\xe5\x9d\x87\xe6\x95\xb0: {:.3f}\'.format(self.keep_days_mean))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x81\xe8\x82\xa1\xe5\xa4\xa9\xe6\x95\xb0\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0: {:.3f}\'.format(self.keep_days_median))\n        bins = int(self.orders_pd[\'keep_days\'].shape[0] / 5)\n        bins = bins if bins > 0 else 5\n        self.orders_pd[\'keep_days\'].plot(kind=\'hist\', bins=bins)\n        plt.show()\n\n    @valid_check\n    def plot_max_draw_down(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe5\xa4\xa7\xe5\x9b\x9e\xe6\x92\xa4""""""\n\n        cb_earn = self.capital.capital_pd[\'capital_blance\'] - self.capital.read_cash\n        shift = cb_earn.shape[0]\n        max_draw_down = {-1: -1}\n        cap_pd_index = cb_earn.index.tolist()\n\n        for sf in np.arange(1, shift):\n            sub_val = cb_earn.iloc[sf]\n            sf_val = cb_earn[:sf]\n            sf_val = sf_val.drop_duplicates(keep=\'last\')\n\n            diff = sf_val.values - sub_val\n\n            if diff.max() > list(six.itervalues(max_draw_down))[0]:\n                st_ind = diff.argmax()\n                st_ind = sf_val.index[st_ind]\n                end_ind = cap_pd_index[sf]\n                max_draw_down = {(st_ind, end_ind): diff.max()}\n\n        down_rate = list(six.itervalues(max_draw_down))[0] / self.capital.capital_pd[\'capital_blance\'].loc[\n            list(six.iterkeys(max_draw_down))[0][0]]\n        """"""\n            \xe6\x88\xaa\xe5\x8f\x96\xe5\xbc\x80\xe5\xa7\x8b\xe4\xba\xa4\xe6\x98\x93\xe9\x83\xa8\xe5\x88\x86\n        """"""\n        cb_earn = cb_earn.loc[cb_earn[cb_earn != 0].index[0]:]\n        cb_earn.plot()\n        plt.plot(list(six.iterkeys(max_draw_down))[0][0], cb_earn.loc[list(six.iterkeys(max_draw_down))[0][0]],\n                 \'ro\', markersize=12,\n                 markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=\'green\')\n\n        plt.plot(list(six.iterkeys(max_draw_down))[0][1], cb_earn.loc[list(six.iterkeys(max_draw_down))[0][1]],\n                 \'ro\', markersize=12,\n                 markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=\'red\')\n\n        plt.plot([list(six.iterkeys(max_draw_down))[0][0], list(six.iterkeys(max_draw_down))[0][1]],\n                 [cb_earn.loc[list(six.iterkeys(max_draw_down))[0][0]],\n                  cb_earn.loc[list(six.iterkeys(max_draw_down))[0][1]]], \'o-\')\n        plt.grid(True)\n        plt.show()\n\n        self.log_func(\'\xe6\x9c\x80\xe5\xa4\xa7\xe5\x9b\x9e\xe6\x92\xa4: {:5f}\'.format(down_rate))\n        self.log_func(\'\xe6\x9c\x80\xe5\xa4\xa7\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x90\xaf\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4:{}, \xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4{}, \xe5\x85\xb1\xe5\x9b\x9e\xe6\xb5\x8b{:3f}\'.format(\n            ABuDateUtil.timestamp_to_str(list(six.iterkeys(max_draw_down))[0][0]),\n            ABuDateUtil.timestamp_to_str(list(six.iterkeys(max_draw_down))[0][1]),\n            list(six.itervalues(max_draw_down))[0]))\n\n    @valid_check\n    def transform_to_full_rate_factor(self, read_cash=-1, kl_pd_manager=None, n_process_kl=ABuEnv.g_cpu_cnt,\n                                      show=True):\n        if ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n            self.log_func(\'transform_to_full_rate_factor func must in E_DATA_FETCH_FORCE_LOCAL env!\')\n            return\n\n        if not hasattr(self, \'full_rate_metrics\'):\n            if read_cash == -1:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xa4\x96\xe9\x83\xa8\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xae\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xbf\xe4\xb8\xba\xe5\xa4\xa7\xe8\xb5\x84\xe9\x87\x91\xe6\x95\xb0\n                read_cash = 100000000\n\n            target_symbols = list(set(self.orders_pd.symbol))\n            # \xe9\x87\x8d\xe6\x96\xb0\xe4\xbb\xa5\xe5\xbe\x88\xe5\xa4\xa7\xe7\x9a\x84\xe8\xb5\x84\xe9\x87\x91\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96AbuCapital\n            capital = AbuCapital(read_cash, self.benchmark,\n                                 user_commission_dict=self.capital.commission.commission_dict)\n            if kl_pd_manager is None:\n                kl_pd_manager = AbuKLManager(self.benchmark, capital)\n                # \xe4\xb8\x80\xe6\xac\xa1\xe6\x80\xa7\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe6\x89\xa7\xe8\xa1\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\x8e\xb7\xe5\x8f\x96k\xe7\xba\xbf\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x85\xa8\xe9\x83\xa8\xe6\x94\xbe\xe5\x85\xa5kl_pd_manager\xe4\xb8\xad\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe5\x90\xaf\xe5\x8a\xa8n_process_kl\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\n                kl_pd_manager.batch_get_pick_time_kl_pd(target_symbols, n_process=n_process_kl)\n\n            # noinspection PyUnresolvedReferences\n            action_pd = self.action_pd.sort_values([\'Date\', \'action\'])\n            action_pd.index = np.arange(0, action_pd.shape[0])\n            # \xe6\x9c\x80\xe5\x90\x8e\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84action\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe8\xb5\x84\xe9\x87\x91\xe4\xb8\x8a\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe5\xba\x8f\xef\xbc\x8c\xe5\x8f\x8a\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe4\xb9\xb0\xe5\x85\xa5\n            ABuTradeExecute.apply_action_to_capital(capital, action_pd, kl_pd_manager)\n            # \xe6\x9c\x80\xe7\xbb\x88\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90AbuMetricsBase\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xef\xbc\x8caction_pd, capital\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xef\xbc\x8c\xe6\xbb\xa1\xe4\xbb\x93\xe4\xb9\x98\xe6\x95\xb0\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n            # noinspection PyAttributeOutsideInit\n            self.full_rate_metrics = AbuMetricsBase(self.orders_pd, action_pd, capital, self.benchmark,\n                                                    enable_stocks_full_rate_factor=True)\n            self.full_rate_metrics.fit_metrics()\n        if show:\n            self.full_rate_metrics.plot_returns_cmp(only_show_returns=True)\n        return self.full_rate_metrics\n\n\nclass MetricsDemo(AbuMetricsBase):\n    """"""\n        \xe6\x89\xa9\xe5\xb1\x95\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\xe7\xa4\xba\xe4\xbe\x8b\n\n        eg:\n            metrics = MetricsDemo(*abu_result_tuple)\n            metrics.fit_metrics()\n            metrics.plot_commission()\n    """"""\n\n    def _metrics_extend_stats(self):\n        """"""\n            \xe5\xad\x90\xe7\xb1\xbb\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe7\x9a\x84metrics\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\x9c\xa8\xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe5\x8f\xaf\xe5\xae\x9a\xe4\xb9\x89\xe8\x87\xaa\xe5\xb7\xb1\xe9\x9c\x80\xe8\xa6\x81\xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc:\n            \xe6\x9c\xacdemo\xe7\xa4\xba\xe4\xbe\x8b\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe5\x92\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8a\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe5\xaf\xb9\xe6\xaf\x94\n        """"""\n        commission_df = self.capital.commission.commission_df\n        commission_df[\'commission\'] = commission_df.commission.astype(float)\n        commission_df[\'cumsum\'] = commission_df.commission.cumsum()\n        """"""\n            eg:\n                type\tdate\tsymbol\tcommission\tcumsum\n            0\tbuy\t20141024\tusAAPL\t19.04\t19.04\n            0\tbuy\t20141024\tusAAPL\t19.04\t38.08\n            0\tbuy\t20141029\tusNOAH\t92.17\t130.25\n            0\tbuy\t20141029\tusBIDU\t7.81\t138.06\n            0\tbuy\t20141029\tusBIDU\t7.81\t145.87\n            0\tbuy\t20141029\tusVIPS\t60.95\t206.82\n        """"""\n        # \xe8\xae\xb2date\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaindex\n        dates_pd = pd.to_datetime(commission_df.date)\n        commission = pd.DataFrame(index=dates_pd)\n        """"""\n            eg: commission\n            2014-10-24\t19.04\n            2014-10-24\t38.08\n            2014-10-29\t130.25\n            2014-10-29\t138.06\n            2014-10-29\t145.87\n            2014-10-29\t206.82\n            2014-11-03\t265.82\n            2014-11-11\t360.73\n        """"""\n        commission[\'cum\'] = commission_df[\'cumsum\'].values\n        self.commission_cum = commission[\'cum\']\n        self.commission_sum = self.commission_cum[-1]\n\n    def plot_commission(self):\n        """"""\n            \xe4\xbd\xbf\xe7\x94\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\xa5\xbd\xe7\x9a\x84\xe9\xa6\x96\xe5\x85\x88\xe8\xb4\xb9cumsum\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8acumsum\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xaf\xb9\xe6\xaf\x94\n            \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a\xe6\x9b\xb2\xe7\xba\xbf\xe5\x92\x8c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe6\x9b\xb2\xe7\xba\xbf\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\n        """"""\n        print(\'\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe5\x85\xb1: {:.2f}\'.format(self.commission_sum))\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\xa9\xe6\x94\xbescaler_xy\xe5\xb0\x86\xe4\xb8\xa4\xe6\x9d\xa1\xe6\x9b\xb2\xe7\xba\xbf\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\n        x, y = ABuScalerUtil.scaler_xy(self.commission_cum, self.algorithm_cum_returns, type_look=\'look_max\',\n                                       mean_how=True)\n        x.plot(label=\'commission\')\n        y.plot(label=\'algorithm returns\')\n        plt.legend(loc=2)\n        plt.show()\n'"
abupy/MetricsBu/ABuMetricsFutures.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xba\xa6\xe9\x87\x8f\xe6\xa8\xa1\xe5\x9d\x97""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfrom ..CoreBu import ABuEnv\nfrom ..ExtBu.empyrical import stats\nfrom ..MetricsBu.ABuMetricsBase import AbuMetricsBase, valid_check\nfrom ..UtilBu.ABuDTUtil import warnings_filter\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuMetricsFutures(AbuMetricsBase):\n    """"""\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe5\x8c\xba\xe5\x88\xab\xe5\x9c\xa8\xe4\xba\x8e\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8abenchmark""""""\n\n    def _metrics_base_stats(self):\n        """"""\xe5\xba\xa6\xe9\x87\x8f\xe7\x9c\x9f\xe5\xae\x9e\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84capital_pd\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb6\x89\xe5\x8f\x8a\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa7\xe7\x9b\xb8\xe5\x85\xb3\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8abenchmark""""""\n        # \xe5\xb9\xb3\xe5\x9d\x87\xe8\xb5\x84\xe9\x87\x91\xe5\x88\xa9\xe7\x94\xa8\xe7\x8e\x87\n        self.cash_utilization = 1 - (self.capital.capital_pd.cash_blance /\n                                     self.capital.capital_pd.capital_blance).mean()\n        self.algorithm_returns = np.round(self.capital.capital_pd[\'capital_blance\'].pct_change(), 3)\n\n        # \xe6\x94\xb6\xe7\x9b\x8acum\xe6\x95\xb0\xe6\x8d\xae\n        # noinspection PyTypeChecker\n        self.algorithm_cum_returns = stats.cum_returns(self.algorithm_returns)\n\n        # \xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\x97\xa5\xe7\x9a\x84cum return\n        self.algorithm_period_returns = self.algorithm_cum_returns[-1]\n\n        # \xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xa9\xe6\x95\xb0\n        self.num_trading_days = len(self.algorithm_cum_returns)\n\n        # \xe5\xb9\xb4\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a\n        self.algorithm_annualized_returns = \\\n            (ABuEnv.g_market_trade_year / self.num_trading_days) * self.algorithm_period_returns\n\n        # noinspection PyUnresolvedReferences\n        self.mean_algorithm_returns = self.algorithm_returns.cumsum() / np.arange(1, self.num_trading_days + 1,\n                                                                                  dtype=np.float64)\n        # noinspection PyTypeChecker\n        self.algorithm_volatility = stats.annual_volatility(self.algorithm_returns)\n        # noinspection PyTypeChecker\n        self.algorithm_sharpe = stats.sharpe_ratio(self.algorithm_returns)\n        # \xe6\x9c\x80\xe5\xa4\xa7\xe5\x9b\x9e\xe6\x92\xa4\n        # noinspection PyUnresolvedReferences\n        self.max_drawdown = stats.max_drawdown(self.algorithm_returns.values)\n\n    @valid_check\n    @warnings_filter  # skip: statsmodels / nonparametric / kdetools.py:20\n    def plot_returns_cmp(self, only_show_returns=False, only_info=False):\n        """"""\xe8\x80\x83\xe8\x99\x91\xe8\xb5\x84\xe9\x87\x91\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8ebenchmark\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x8a\xe5\xba\xa6\xe9\x87\x8f\xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x8a\xe8\xb6\x8b\xe5\x8a\xbf\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8f\x98\xe5\x8a\xa8\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x85\xb6\xe5\xae\x83\xe5\xba\xa6\xe9\x87\x8f\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8abenchmark""""""\n\n        self.log_func(\'\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f:{}\'.format(self.order_has_ret.shape[0]))\n        self.log_func(\'\xe8\x83\x9c\xe7\x8e\x87:{:.4f}%\'.format(self.win_rate * 100))\n\n        self.log_func(\'\xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(self.gains_mean * 100))\n        self.log_func(\'\xe5\xb9\xb3\xe5\x9d\x87\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b:{:.4f}%\'.format(self.losses_mean * 100))\n\n        self.log_func(\'\xe7\x9b\x88\xe4\xba\x8f\xe6\xaf\x94:{:.4f}\'.format(self.win_loss_profit_rate))\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8a: {:.4f}%\'.format(self.algorithm_period_returns * 100))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe5\xb9\xb4\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a: {:.4f}%\'.format(self.algorithm_annualized_returns * 100))\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xaf\x94\xe4\xbe\x8b:{:.4f}%\'.format(self.buy_deal_rate * 100))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe8\xb5\x84\xe9\x87\x91\xe5\x88\xa9\xe7\x94\xa8\xe7\x8e\x87\xe6\xaf\x94\xe4\xbe\x8b:{:.4f}%\'.format(self.cash_utilization * 100))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe5\x85\xb1\xe6\x89\xa7\xe8\xa1\x8c{}\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\'.format(self.num_trading_days))\n\n        if only_info:\n            return\n\n        self.algorithm_cum_returns.plot()\n        plt.legend([\'algorithm returns\'], loc=\'best\')\n        plt.show()\n\n        if only_show_returns:\n            return\n        sns.regplot(x=np.arange(0, len(self.algorithm_cum_returns)), y=self.algorithm_cum_returns.values)\n        plt.show()\n        sns.distplot(self.capital.capital_pd[\'capital_blance\'], kde_kws={""lw"": 3, ""label"": ""capital blance kde""})\n        plt.show()\n\n    @valid_check\n    def plot_sharp_volatility_cmp(self, only_info=False):\n        """"""sharp\xef\xbc\x8cvolatility\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba""""""\n\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5Sharpe\xe5\xa4\x8f\xe6\x99\xae\xe6\xaf\x94\xe7\x8e\x87: {:.4f}\'.format(self.algorithm_sharpe))\n        self.log_func(\'\xe7\xad\x96\xe7\x95\xa5\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x8e\x87Volatility: {:.4f}\'.format(self.algorithm_volatility))\n'"
abupy/MetricsBu/ABuMetricsScore.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe8\xaf\x84\xe5\x88\x86\xe6\xa8\xa1\xe5\x9d\x97""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom abc import ABCMeta, abstractmethod\nfrom collections import namedtuple\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..CoreBu.ABuFixes import six\nfrom .ABuMetricsBase import AbuMetricsBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyClassHasNoInit\nclass AbuScoreTuple(namedtuple(\'AbuScoreTuple\',\n                               (\'orders_pd\',\n                                \'action_pd\',\n                                \'capital\',\n                                \'benchmark\',\n                                \'buy_factors\',\n                                \'sell_factors\',\n                                \'stock_picks\'))):\n    """"""namedtuple\xe6\x89\xa9\xe5\xb1\x95\xe7\xb1\xbb\xef\xbc\x8c\xe5\x9c\xa8GridSearch\xe4\xb8\xad\xe5\x8c\x85\xe8\xa3\x85\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x8a\xe7\xbb\x93\xe6\x9e\x9c""""""\n\n    __slots__ = ()\n\n    def __repr__(self):\n        return ""orders_pd:{}\\naction_pd:{}\\ncapital:{}\\nbenchmark:{}\\n"" \\\n               ""buy_factors:{}\\nsell_factors:{}\\nstock_picks:{}"".format(\n                self.orders_pd.info() if self.orders_pd is not None else \'zero order\',\n                self.action_pd.info() if self.action_pd is not None else \'zero action\', self.capital, self.benchmark,\n                self.buy_factors, self.sell_factors, self.stock_picks)\n\n\nclass AbuBaseScorer(six.with_metaclass(ABCMeta, object)):\n    """"""\xe9\x92\x88\xe5\xaf\xb9GridSearch\xe7\x9a\x84score_tuple_array\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x84\xe5\x88\x86\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    # noinspection PyUnresolvedReferences\n    def __init__(self, score_tuple_array, *arg, **kwargs):\n        """"""\n        :param score_tuple_array: \xe6\x89\xbf\xe6\x8e\xa5GridSearch\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :param kwargs: \xe5\x8f\xaf\xe9\x80\x89weights\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xaf\x84\xe5\x88\x86\xe9\xa1\xb9\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c \xe5\x8f\xaf\xe9\x80\x89metrics_class\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\n        """"""\n        self.score_tuple_array = score_tuple_array\n        self.score_dict = {}\n        self.weights_cnt = -1\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xba\xa6\xe9\x87\x8f\xe9\xa1\xb9\xe6\x8a\xbd\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0select_score_func\xef\xbc\x8c\xe5\xba\xa6\xe9\x87\x8f\xe5\x90\x8d\xe7\xa7\xb0columns_name, weights_cnt\n        self._init_self_begin(arg, *arg, **kwargs)\n\n        # \xe6\xa3\x80\xe6\xb5\x8b_init_self_begin\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe5\xad\x90\xe7\xb1\xbb\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaeok\n        if not hasattr(self, \'select_score_func\'):\n            raise RuntimeError(\'_init_self_begin must set select_score_func\')\n        if not hasattr(self, \'columns_name\'):\n            raise RuntimeError(\'_init_self_begin must set columns_name\')\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe6\x9d\x83\xe9\x87\x8d\xe5\xb0\xb1\xe5\x88\x86\xe9\x85\x8d\xe6\x9d\x83\xe9\x87\x8d\xe5\x90\xa6\xe5\x88\x99\xe7\xad\x89\xe6\x9d\x83\xe9\x87\x8d\n        if \'weights\' in kwargs and kwargs[\'weights\'] is not None and len(kwargs[\'weights\']) == self.weights_cnt:\n            self.weights = kwargs[\'weights\']\n        else:\n            self.weights = self.weights_cnt * [1. / self.weights_cnt, ]\n\n        # metrics_class = kwargs.pop(\'metrics_class\', AbuMetricsBase)\n        if \'metrics_class\' in kwargs and kwargs[\'metrics_class\'] is not None \\\n                and issubclass(kwargs[\'metrics_class\'], AbuMetricsBase):\n            self.metrics_class = kwargs[\'metrics_class\']\n        else:\n            self.metrics_class = AbuMetricsBase\n\n        valid_score_tuple_array = []\n        for ind, score_tuple in enumerate(self.score_tuple_array):\n            # \xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8f\n            metrics = self.metrics_class(score_tuple.orders_pd, score_tuple.action_pd, score_tuple.capital,\n                                         score_tuple.benchmark)\n            if metrics.valid:\n                metrics.fit_metrics()\n                # \xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x90\xe7\xb1\xbb_init_self_begin\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84select_score_func\xe6\x96\xb9\xe6\xb3\x95\xe9\x80\x89\xe5\x8f\x96\n                self.score_dict[ind] = self.select_score_func(metrics)\n                valid_score_tuple_array.append(score_tuple)\n        # \xe6\x8a\x8a\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x9d\xa5\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe9\x87\x8d\xe6\x96\xb0\xe6\x94\xbe\xe5\x88\xb0score_tuple_array\xe4\xb8\xad\n        self.score_tuple_array = valid_score_tuple_array\n\n        # \xe5\xb0\x86score_dict\xe8\xbd\xac\xe6\x8d\xa2DataFrame\xe5\xb9\xb6\xe4\xb8\x94\xe8\xbd\xac\xe5\x88\xb6\n        self.score_pd = pd.DataFrame(self.score_dict).T\n        # \xe8\xae\xbe\xe7\xbd\xae\xe5\xba\xa6\xe9\x87\x8f\xe6\x8c\x87\xe6\xa0\x87\xe5\x90\x8d\xe7\xa7\xb0\n        self.score_pd.columns = self.columns_name\n        """"""\n            \xe4\xb8\x80\xe8\x88\xac\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x98\xaf\xe5\xb0\x86score_pd\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x8d\xe8\xbd\xac\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x8d\xe8\xbd\xac\n            \xe6\x89\x80\xe4\xbb\xa5\xe8\xa6\x81\xe5\x9c\xa8rank\xe5\x89\x8d\xe5\x81\x9aself._init_self_end\n        """"""\n        self._init_self_end(arg, *arg, **kwargs)\n\n        # \xe5\x88\x86\xe6\x95\xb0\xe6\xaf\x8f\xe4\xb8\x80\xe9\xa1\xb9\xe9\x83\xbd\xe7\x94\xb10-1\n        score_ls = np.linspace(0, 1, self.score_pd.shape[0])\n        for cn in self.columns_name:\n            # \xe6\xaf\x8f\xe4\xb8\x80\xe9\xa1\xb9\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9crank\xe5\x90\x8e\xe5\xa1\xab\xe5\x85\xa5\xe5\xaf\xb9\xe5\xba\x94\xe9\xa1\xb9\n            score = score_ls[(self.score_pd[cn].rank().values - 1).astype(int)]\n            self.score_pd[\'score_\' + cn] = score\n\n        scores = self.score_pd.filter(regex=\'score_*\')\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x9d\x83\xe9\x87\x8d\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe5\xbe\x97\xe5\x88\x86\n        self.score_pd[\'score\'] = scores.apply(lambda s: (s * self.weights).sum(), axis=1)\n\n    @abstractmethod\n    def _init_self_begin(self, *arg, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe5\xba\xa6\xe9\x87\x8f\xe9\xa1\xb9\xe6\x8a\xbd\xe5\x8f\x96\xe5\x87\xbd\xe6\x95\xb0select_score_func\xef\xbc\x8c\xe5\xba\xa6\xe9\x87\x8f\xe5\x90\x8d\xe7\xa7\xb0columns_name\xef\xbc\x8cweights_cnt""""""\n        pass\n\n    @abstractmethod\n    def _init_self_end(self, *arg, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x98\xaf\xe5\xb0\x86score_pd\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x8d\xe8\xbd\xac\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x8d\xe8\xbd\xac""""""\n        pass\n\n    def fit_score(self):\n        """"""\xe5\xaf\xb9\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe6\x8c\x89\xe7\x85\xa7score\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe7\x9a\x84score\xe5\x88\x97""""""\n        self.score_pd.sort_values(by=\'score\', inplace=True)\n        return self.score_pd[\'score\']\n\n    def __call__(self):\n        """"""call self.fit_score""""""\n        return self.fit_score()\n\n\nclass WrsmScorer(AbuBaseScorer):\n    def _init_self_begin(self, *arg, **kwargs):\n        """"""\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5sharpe\xe5\x80\xbc\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe5\x9b\x9e\xe6\x92\xa4\xe7\xbb\x84\xe6\x88\x90select_score_func""""""\n\n        self.select_score_func = lambda metrics: [metrics.win_rate, metrics.algorithm_period_returns,\n                                                  metrics.algorithm_sharpe,\n                                                  metrics.max_drawdown]\n        self.columns_name = [\'win_rate\', \'returns\', \'sharpe\', \'max_drawdown\']\n        self.weights_cnt = len(self.columns_name)\n\n    def _init_self_end(self, *arg, **kwargs):\n        """"""\n        _init_self_end\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x80\xe8\x88\xac\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x98\xaf\xe5\xb0\x86score_pd\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x8d\xe8\xbd\xac\xe7\x9a\x84\xe5\x8f\x8d\xe8\xbd\xac\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x98\xaf\xe6\x95\xb0\xe6\x8d\xae\xe8\xb6\x8a\xe5\xa4\xa7\xe8\xb6\x8a\xe5\xa5\xbd\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9b\xe6\x98\xaf\xe8\xb6\x8a\xe5\xb0\x8f\xe8\xb6\x8a\xe5\xa5\xbd\xef\xbc\x8c\n        \xe7\xb1\xbb\xe4\xbc\xbcmake_scorer(xxx, greater_is_better=True)\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0greater_is_better\xe7\x9a\x84\xe4\xbd\x9c\xe7\x94\xa8\xef\xbc\x9a\n\n                            sign = 1 if greater_is_better else -1\n\n        WrsmScorer\xe4\xb8\xadmax_drawdown\xe8\x99\xbd\xe7\x84\xb6\xe6\x98\xaf\xe8\xb6\x8a\xe5\xb0\x8f\xe8\xb6\x8a\xe5\xa5\xbd\xef\xbc\x8c\xe4\xbd\x86\xe7\x94\xb1\xe4\xba\x8e\xe6\x9c\xac\xe8\xba\xab\xe5\x80\xbc\xe5\x8d\xb3\xe6\x98\xaf\xe8\xb4\x9f\xe6\x95\xb0\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe7\x94\xa8\xe5\x8f\x8d\xe8\xbd\xac\xe6\x95\xb0\xe6\x8d\xae\n                win_rate\treturns\tsharpe\tmax_drawdown\tscore_win_rate\tscore_returns\tscore_sharpe\tscore_max_drawdown\tscore\n        0\t0.307087\t0.256354\t0.922678\t-0.110116\t0.189935\t0.814123\t0.601461\t0.511769\t0.529322\n        1\t0.307087\t0.256354\t0.922678\t-0.110116\t0.189935\t0.814123\t0.601461\t0.511769\t0.529322\n        2\t0.307087\t0.256354\t0.922678\t-0.110116\t0.189935\t0.814123\t0.601461\t0.511769\t0.529322\n        3\t0.307087\t0.256354\t0.922678\t-0.110116\t0.189935\t0.814123\t0.601461\t0.511769\t0.529322\n        4\t0.307087\t0.256354\t0.922678\t-0.110116\t0.189935\t0.814123\t0.601461\t0.511769\t0.529322\n        """"""\n        pass\n\n\nclass DemoScorer(AbuBaseScorer):\n    def _init_self_begin(self, *arg, **kwargs):\n        """"""\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe7\xbb\x84\xe6\x88\x90select_score_func""""""\n\n        self.select_score_func = lambda metrics: [metrics.win_rate, metrics.algorithm_period_returns,\n                                                  metrics.commission_sum]\n        self.columns_name = [\'win_rate\', \'returns\', \'commission\']\n        self.weights_cnt = len(self.columns_name)\n\n    def _init_self_end(self, *arg, **kwargs):\n        """"""\n        _init_self_end\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x80\xe8\x88\xac\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x98\xaf\xe5\xb0\x86score_pd\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x8d\xe8\xbd\xac\xe7\x9a\x84\xe5\x8f\x8d\xe8\xbd\xac\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\x98\xaf\xe6\x95\xb0\xe6\x8d\xae\xe8\xb6\x8a\xe5\xa4\xa7\xe8\xb6\x8a\xe5\xa5\xbd\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9b\xe6\x98\xaf\xe8\xb6\x8a\xe5\xb0\x8f\xe8\xb6\x8a\xe5\xa5\xbd\xef\xbc\x8c\n        \xe7\xb1\xbb\xe4\xbc\xbcmake_scorer(xxx, greater_is_better=True)\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0greater_is_better\xe7\x9a\x84\xe4\xbd\x9c\xe7\x94\xa8\xef\xbc\x9a\n\n                            sign = 1 if greater_is_better else -1\n        """"""\n        pass\n\n\ndef make_scorer(score_tuple_array, sc_class, **kwargs):\n    """"""\n    score\xe5\xaf\xb9\xe5\xa4\x96\xe6\x8e\xa5\xe5\x8f\xa3\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\n    :param score_tuple_array: \xe6\x89\xbf\xe6\x8e\xa5GridSearch\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuScoreTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param sc_class: \xe6\x8c\x87\xe5\xae\x9a\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x84\xe5\x88\x86\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe8\xaf\x84\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8cAbuBaseScorer\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe9\x9d\x9e\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param kwargs: AbuBaseScorer\xe4\xb8\xadinit\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89weights\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xaf\x84\xe5\x88\x86\xe9\xa1\xb9\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c \xe5\x8f\xaf\xe9\x80\x89metrics_class\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\n    :return: \xe9\x80\x9a\xe8\xbf\x87AbuBaseScorer __call__ \xe8\xb0\x83\xe7\x94\xa8sc_class.fit_score()\xef\xbc\x8c\n             \xe8\xbf\x94\xe5\x9b\x9efit_score\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3self.score_pd.sort_values(by=\'score\')[\'score\']\n    """"""\n    return sc_class(score_tuple_array, **kwargs)()\n'"
abupy/MetricsBu/ABuMetricsTC.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe5\xba\xa6\xe9\x87\x8f\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nfrom ..MetricsBu.ABuMetricsFutures import AbuMetricsFutures\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuMetricsTC(AbuMetricsFutures):\n    """"""\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\xe7\xad\x89\xe5\xb8\x81\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xba\xa6\xe9\x87\x8f\xef\xbc\x8c\xe8\x87\xaa\xe6\x89\xa9\xe5\xbc\xa0\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe7\xbb\xa7\xe6\x89\xbfAbuMetricsFutures\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8abenchmark\xef\xbc\x8cuser\xe5\x8f\xaf\xe7\xbb\xa7\xe6\x89\xbf\xe6\x89\xa9\xe5\xb1\x95\xe9\x9c\x80\xe6\xb1\x82""""""\n'"
abupy/MetricsBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuGridSearch import ParameterGrid, GridSearch\nfrom .ABuCrossVal import AbuCrossVal\nfrom .ABuMetricsBase import AbuMetricsBase, MetricsDemo\nfrom .ABuMetricsFutures import AbuMetricsFutures\nfrom .ABuMetricsTC import AbuMetricsTC\nfrom .ABuMetricsScore import AbuBaseScorer, WrsmScorer, AbuScoreTuple, make_scorer\n\nfrom . import ABuGridHelper\nfrom . import ABuMetrics as metrics\n\n__all__ = [\n    'ParameterGrid',\n    'GridSearch',\n    'AbuCrossVal',\n    'AbuMetricsBase',\n    'AbuMetricsFutures',\n    'AbuMetricsTC',\n    'MetricsDemo',\n    'AbuBaseScorer',\n    'WrsmScorer',\n    'make_scorer',\n    'ABuGridHelper',\n    'metrics']\n"""
abupy/PickStockBu/ABuPickRegressAngMinMax.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport numpy as np\n\nfrom ..UtilBu import ABuRegUtil\nfrom .ABuPickStockBase import AbuPickStockBase, reversed_result\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuPickRegressAngMinMax(AbuPickStockBase):\n    """"""\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xa4\xba\xe4\xbe\x8b\xe7\xb1\xbb""""""\n    def _init_self(self, **kwargs):\n        """"""\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xae\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x85\x8d\xe7\xbd\xae\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0""""""\n\n        # \xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8ebase\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'a\', default)\xe6\x96\xb9\xe5\xbc\x8f\n        # fit_pick\xe4\xb8\xad ang > threshold_ang_min, \xe9\xbb\x98\xe8\xae\xa4\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\xef\xbc\x8c\xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4\xe6\x89\x80\xe6\x9c\x89\xe9\x83\xbd\xe7\xac\xa6\xe5\x90\x88\n        self.threshold_ang_min = -np.inf\n        if \'threshold_ang_min\' in kwargs:\n            # \xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\x80\xe5\xb0\x8f\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\n            self.threshold_ang_min = kwargs[\'threshold_ang_min\']\n\n        # fit_pick\xe4\xb8\xad ang < threshold_ang_max, \xe9\xbb\x98\xe8\xae\xa4\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\xef\xbc\x8c\xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4\xe6\x89\x80\xe6\x9c\x89\xe9\x83\xbd\xe7\xac\xa6\xe5\x90\x88\n        self.threshold_ang_max = np.inf\n        if \'threshold_ang_max\' in kwargs:\n            # \xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\n            self.threshold_ang_max = kwargs[\'threshold_ang_max\']\n\n    @reversed_result\n    def fit_pick(self, kl_pd, target_symbol):\n        """"""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xb9\xe6\x8d\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe9\x99\x85\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1""""""\n\n        # \xe8\xae\xa1\xe7\xae\x97\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\n        ang = ABuRegUtil.calc_regress_deg(kl_pd.close, show=False)\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\x92\xe5\xba\xa6\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x88\xa4\xe6\x96\xad\n        if self.threshold_ang_min < ang < self.threshold_ang_max:\n            return True\n        return False\n\n    def fit_first_choice(self, pick_worker, choice_symbols, *args, **kwargs):\n        raise NotImplementedError(\'AbuPickRegressAng fit_first_choice unsupported now!\')\n'"
abupy/PickStockBu/ABuPickSimilarNTop.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe7\xa4\xba\xe4\xbe\x8bfit_first_choice\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport numpy as np\n\nfrom ..UtilBu import ABuDateUtil\nfrom ..TLineBu import ABuTLSimilar\nfrom .ABuPickStockBase import AbuPickStockBase, reversed_result\nfrom ..SimilarBu.ABuSimilar import find_similar_with_se, ECoreCorrType\n\n""""""\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xa6\x82\xef\xbc\x9aabupy.ps.similar_top = 300\xe4\xbf\xae\xe6\x94\xb9\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc""""""\ng_pick_similar_n_top = 100\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuPickSimilarNTop(AbuPickStockBase):\n    """"""\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xa4\xba\xe4\xbe\x8b\xe7\xb1\xbb""""""\n\n    def _init_self(self, **kwargs):\n        """"""\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xae\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9b\xae\xe6\xa0\x87\xe6\x95\xb0\xe9\x87\x8f\xe7\xad\x89\xef\xbc\x8c\xe9\x85\x8d\xe7\xbd\xae\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0""""""\n\n        # \xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8ebase\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'a\', default)\xe6\x96\xb9\xe5\xbc\x8f\n        # \xe8\xae\xbe\xe7\xbd\xae\xe7\x9b\xae\xe6\xa0\x87\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\n        self.similar_stock = kwargs[\'similar_stock\']\n\n        # \xe8\xae\xbe\xe7\xbd\xae\xe7\x9b\xae\xe6\xa0\x87\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe9\x80\x89\xe5\x8f\x96top\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\xaa\xe5\x9c\xa8fit_first_choice\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4top100, \xe5\x8d\xb3\xe5\x89\x8d100\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe4\xbc\xbc\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n        self.n_top = g_pick_similar_n_top\n        if \'n_top\' in kwargs:\n            self.n_top = kwargs[\'n_top\']\n\n        # \xe8\xae\xbe\xe7\xbd\xaefit_pick\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9b\xb8\xe4\xbc\xbc\xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\n        self.threshold_similar_min = -np.inf\n        if \'threshold_similar_min\' in kwargs:\n            self.threshold_similar_min = kwargs[\'threshold_similar_min\']\n\n        # \xe8\xae\xbe\xe7\xbd\xaefit_pick\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9b\xb8\xe4\xbc\xbc\xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\n        self.threshold_similar_max = np.inf\n        if \'threshold_similar_max\' in kwargs:\n            self.threshold_similar_max = kwargs[\'threshold_similar_max\']\n\n        # \xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x9f\xe5\xba\xa6\xe4\xbc\x9a\xe6\x85\xa2\n        self.rolling = False\n        if \'rolling\' in kwargs:\n            self.rolling = kwargs[\'rolling\']\n\n        # \xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe8\xae\xa1\xe7\xae\x97\xe4\xbd\xbf\xe7\x94\xa8\xe7\xae\x97\xe6\xb3\x95\xe8\xae\xbe\xe7\xbd\xae\n        self.corr_type = ECoreCorrType.E_CORE_TYPE_PEARS\n        if \'corr_type\' in kwargs:\n            self.corr_type = kwargs[\'corr_type\']\n        # \xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6rank\xe7\xbc\x93\xe5\xad\x98\n        self.s_sum_rank = None\n\n    @reversed_result\n    def fit_pick(self, kl_pd, target_symbol):\n        """"""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xb9\xe6\x8d\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1""""""\n\n        # \xe7\x94\xb1\xe4\xba\x8e\xe5\xa4\x96\xe5\xb1\x82worker\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8d\xe6\x96\xad\xe8\xbf\xad\xe4\xbb\xa3symbol\xe4\xbd\xbf\xe7\x94\xa8\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xbf\x99\xe9\x87\x8c\xe7\xbc\x93\xe5\xad\x98\xe4\xba\x86\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6rank\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x8f\xaa\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\xac\xa1\n        similar_rank, self.s_sum_rank = ABuTLSimilar.calc_similar(self.similar_stock, target_symbol,\n                                                                  self.s_sum_rank,\n                                                                  show=False)\n        # \xe8\xbe\xb9\xe9\x99\x85\xe7\xad\x9b\xe9\x80\x89\n        if self.threshold_similar_min < similar_rank < self.threshold_similar_max:\n            return True\n        return False\n\n    def fit_first_choice(self, pick_worker, choice_symbols, *args, **kwargs):\n        """"""\n        \xe5\x9b\xa0\xe5\xad\x90\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe6\x89\xb9\xe9\x87\x8f\xe9\x80\x89\xe8\x82\xa1\xe6\x8e\xa5\xe5\x8f\xa3\n        :param pick_worker: \xe9\x80\x89\xe8\x82\xa1worker\xef\xbc\x8cAbuPickStockWorker\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param choice_symbols: \xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n        :return:\n        """"""\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe9\x80\x89\xe8\x82\xa1\xe9\x98\xb6\xe6\xae\xb5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        similar_kl_pd = pick_worker.kl_pd_manager.get_pick_stock_kl_pd(self.similar_stock, self.xd, self.min_xd)\n        if similar_kl_pd is None or len(similar_kl_pd) == 0:\n            return []\n\n        # \xe9\x80\x89\xe8\x82\xa1\xe9\x98\xb6\xe6\xae\xb5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f\xe4\xbd\x9c\xe4\xb8\xbasimilar_end\n        similar_end = ABuDateUtil.timestamp_to_str(similar_kl_pd.index[-1])\n        # \xe9\x80\x89\xe8\x82\xa1\xe9\x98\xb6\xe6\xae\xb5\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f\xe4\xbd\x9c\xe4\xb8\xbasimilar_start\n        similar_start = ABuDateUtil.timestamp_to_str(similar_kl_pd.index[0])\n        # \xe9\x80\x9a\xe8\xbf\x87ABuSimilar\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe7\x9a\x84find_similar_with_se\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x8e\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6rank dict\n        net_cg_ret = find_similar_with_se(self.similar_stock, similar_start, similar_end,\n                                          rolling=self.rolling, show=False,\n                                          corr_type=self.corr_type)\n        # \xe5\x8f\x96\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84n_top\xe4\xb8\xaa\xef\xbc\x8c\xe4\xbd\x9c\xe4\xb8\xba\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe6\x9e\x9c\n        similar_top_choice = [ss[0] for ss in net_cg_ret[1:self.n_top + 1]]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe9\x9b\x86\xe5\x90\x88\xe9\x80\x89\xe5\x8f\x96\xe5\x9c\xa8\xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x87\xe9\x80\x89\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\n        return list(set(similar_top_choice) & set(choice_symbols))\n'"
abupy/PickStockBu/ABuPickStock.py,0,b'from __future__ import absolute_import\n\n# noinspection all\nfrom . import ABuPickSimilarNTop as similar_top\n# noinspection PyUnresolvedReferences\nfrom .ABuPickStockBase import reversed_result\n'
abupy/PickStockBu/ABuPickStockBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport functools\nfrom abc import ABCMeta, abstractmethod\n\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuBase import AbuParamBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef reversed_result(func):\n    """"""\xe5\xaf\xb9\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x8d\xe8\xbd\xac\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe8\xa3\x85\xe9\xa5\xb0\xe5\x9c\xa8fit_pick\xe4\xb8\x8a""""""\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        result = func(self, *args, **kwargs)\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\x98\xe9\x87\x8freversed\xef\xbc\x8c\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\x8d\xe8\xbd\xac\xe7\xbb\x93\xe6\x9e\x9c\n        result = not result if self.reversed else result\n        return result\n\n    return wrapper\n\n\nclass AbuPickStockBase(six.with_metaclass(ABCMeta, AbuParamBase)):\n    def __init__(self, capital, benchmark, **kwargs):\n        """"""\n        :param capital:\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        :param benchmark:\xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kwargs:\xe5\x85\xb6\xe5\xae\x83\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe5\x8f\x82\xe6\x95\xb0\n        """"""\n        self.capital = capital\n        self.benchmark = benchmark\n\n        # \xe6\x89\x80\xe6\x9c\x89\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'a\', default)\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x9c\x89\xe4\xbb\x8e\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x8f\x96\xe7\xad\x89\xe9\x9c\x80\xe6\xb1\x82\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe5\x90\x8e\xe7\xbb\xad_init_self\xe5\x8f\xaf\xe8\x83\xbd\xe4\xb9\x9f\xe8\xbf\x98\xe9\x9c\x80\xe8\xa6\x81\n        # \xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x8d\xe8\xbd\xac\xe7\xbb\x93\xe6\x9e\x9cfalse\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87kwargs\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\n        self.reversed = False\n        if \'reversed\' in kwargs:\n            self.reversed = kwargs[\'reversed\']\n\n        # \xe9\xbb\x98\xe8\xae\xa4\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\n        self.xd = ABuEnv.g_market_trade_year\n        if \'xd\' in kwargs:\n            self.xd = kwargs[\'xd\']\n\n        # \xe6\x9c\x80\xe5\xb0\x8f\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\xb0\x8f\xe4\xba\x8e\xe8\xbf\x99\xe4\xb8\xaa\xe5\xb0\x86\xe6\x8a\x9b\xe5\xbc\x83\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbb\x93\xe6\x9e\x9c\xe6\x8a\x95\xe5\x8f\x8d\xe5\xaf\xb9\xe7\xa5\xa8\n        self.min_xd = int(self.xd / 2)\n        if \'min_xd\' in kwargs:\n            self.min_xd = kwargs[\'min_xd\']\n\n        # \xe5\x9b\xa0\xe5\xad\x90\xe7\x8b\xac\xe6\x9c\x89\xe7\x9a\x84init\xe7\xbb\xa7\xe7\xbb\xad\n        self._init_self(**kwargs)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, benchmark, reversed, xd, min_xd""""""\n        return \'{}: {}, reversed:{}, xd:{}, min_xd:{}\'.format(self.__class__.__name__,\n                                                              self.benchmark, self.reversed, self.xd, self.min_xd)\n\n    __repr__ = __str__\n\n    @abstractmethod\n    def _init_self(self, **kwargs):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe9\x92\x88\xe5\xaf\xb9\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def fit_pick(self, *args, **kwargs):\n        """"""\xe9\x80\x89\xe8\x82\xa1\xe6\x93\x8d\xe4\xbd\x9c\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe8\xaf\xa6\xe8\xa7\x81\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90""""""\n        pass\n\n    @abstractmethod\n    def fit_first_choice(self, pick_worker, choice_symbols, *args, **kwargs):\n        """"""\xe5\x9b\xa0\xe5\xad\x90\xe9\xa6\x96\xe9\x80\x89\xe6\x89\xb9\xe9\x87\x8f\xe9\x80\x89\xe8\x82\xa1\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe8\xaf\xa6\xe8\xa7\x81\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90""""""\n        pass\n'"
abupy/PickStockBu/ABuPickStockDemo.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\n\nfrom .ABuPickStockBase import AbuPickStockBase, reversed_result\nfrom ..TLineBu.ABuTL import AbuTLine\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode\nfrom ..MarketBu import ABuSymbolPd\nfrom ..TradeBu import AbuBenchmark\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuPickStockShiftDistance(AbuPickStockBase):\n    """"""\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xa4\xba\xe4\xbe\x8b\xe7\xb1\xbb""""""\n\n    def _init_self(self, **kwargs):\n        """"""\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xae\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe9\x80\x89\xe8\x82\xa1\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x85\x8d\xe7\xbd\xae\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0""""""\n        self.threshold_sd = kwargs.pop(\'threshold_sd\', 2.0)\n        self.threshold_max_cnt = kwargs.pop(\'threshold_max_cnt\', 4)\n        self.threshold_min_cnt = kwargs.pop(\'threshold_min_cnt\', 1)\n\n    @reversed_result\n    def fit_pick(self, kl_pd, target_symbol):\n        """"""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xb9\xe6\x8d\xae\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe8\xbe\xb9\xe9\x99\x85\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1""""""\n\n        pick_line = AbuTLine(kl_pd.close, \'shift distance\')\n        shift_distance = pick_line.show_shift_distance(step_x=1.2, show_log=False, show=False)\n        shift_distance = np.array(shift_distance)\n        # show_shift_distance\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xe5\x9b\x9b\xe7\xbb\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe7\xbb\x84\xe6\x98\xaf\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe7\x9a\x84\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe5\x80\xbc\n        sd_arr = shift_distance[:, -1]\n        # \xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xb4\xaf\xe5\x8a\xa0\xe5\x92\x8c\xe8\xae\xa1\xe7\xae\x97\n        # noinspection PyUnresolvedReferences\n        threshold_cnt = (sd_arr >= self.threshold_sd).sum()\n        # \xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x8f\x82\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe7\x94\x9f\xe6\x95\x88\n        if self.threshold_max_cnt > threshold_cnt >= self.threshold_min_cnt:\n            return True\n        return False\n\n    def fit_first_choice(self, pick_worker, choice_symbols, *args, **kwargs):\n        raise NotImplementedError(\'AbuPickStockShiftDistance fit_first_choice unsupported now!\')\n\n\nclass AbuPickStockNTop(AbuPickStockBase):\n    """"""\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe5\x86\x85\xe7\x9a\x84\xe6\xb6\xa8\xe5\xb9\x85\xe9\x80\x89\xe5\x8f\x96top N\xe4\xb8\xaa""""""\n\n    def _init_self(self, **kwargs):\n        """"""\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x85\x8d\xe7\xbd\xae\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0""""""\n        # \xe9\x80\x89\xe8\x82\xa1\xe5\x8f\x82\xe6\x95\xb0symbol_pool\xef\xbc\x9a\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb6\xa8\xe5\xb9\x85\xe6\xaf\x94\xe8\xbe\x83\xe7\x9a\x84top n\xe4\xb8\xaasymbol\n        self.symbol_pool = kwargs.pop(\'symbol_pool\', [])\n        # \xe9\x80\x89\xe8\x82\xa1\xe5\x8f\x82\xe6\x95\xb0n_top\xef\xbc\x9a\xe9\x80\x89\xe5\x8f\x96\xe5\x89\x8dn_top\xe4\xb8\xaasymbol, \xe9\xbb\x98\xe8\xae\xa43\n        self.n_top = kwargs.pop(\'n_top\', 3)\n        # \xe9\x80\x89\xe8\x82\xa1\xe5\x8f\x82\xe6\x95\xb0direction_top\xef\xbc\x9a\xe9\x80\x89\xe5\x8f\x96\xe5\x89\x8dn_top\xe4\xb8\xaa\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x89\xe6\x8b\xa9\xe6\xb6\xa8\xe7\x9a\x84\xe5\xa4\x9a\xe7\x9a\x84\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe9\x80\x89\xe6\x8b\xa9\xe8\xb7\x8c\xe7\x9a\x84\xe5\xa4\x9a\xe7\x9a\x84\n        self.direction_top = kwargs.pop(\'direction_top\', 1)\n\n    @reversed_result\n    def fit_pick(self, kl_pd, target_symbol):\n        """"""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1""""""\n        if len(self.symbol_pool) == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbc\xa0\xe9\x80\x92\xe4\xbb\xbb\xe4\xbd\x95\xe5\x8f\x82\xe7\x85\xa7\xe5\xba\x8f\xe5\x88\x97symbol\xef\xbc\x8c\xe6\x8b\xa9\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe9\x80\x89\xe4\xb8\xad\n            return True\n        # \xe5\xae\x9a\xe4\xb9\x89lambda\xe5\x87\xbd\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85change\n        kl_change = lambda p_kl: \\\n            p_kl.iloc[-1].close / p_kl.iloc[0].close if p_kl.iloc[0].close != 0 else 0\n\n        cmp_top_array = []\n        kl_pd.name = target_symbol\n        # AbuBenchmark\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbc\xa0\xe9\x80\x92\xe4\xb8\x80\xe4\xb8\xaakl\n        benchmark = AbuBenchmark(benchmark_kl_pd=kl_pd)\n        for symbol in self.symbol_pool:\n            if symbol != target_symbol:\n                # \xe4\xbd\xbf\xe7\x94\xa8benchmark\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x8e\xb7\xe5\x8f\x96\n                kl = ABuSymbolPd.make_kl_df(symbol, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO,\n                                            benchmark=benchmark)\n                # kl = ABuSymbolPd.make_kl_df(symbol, start=start, end=end)\n                if kl is not None and kl.shape[0] > kl_pd.shape[0] * 0.75:\n                    # \xe9\x9c\x80\xe8\xa6\x81\xe8\x8e\xb7\xe5\x8f\x96\xe5\xae\x9e\xe9\x99\x85\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe5\x81\x9c\xe7\x9b\x98\xe7\xad\x89\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe5\x8f\xb7\n                    cmp_top_array.append(kl_change(kl))\n\n        if self.n_top > len(cmp_top_array):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe8\xb6\xb3n_top\xe4\xb8\xaa\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xae\xa4\xe4\xb8\xba\xe9\x80\x89\xe4\xb8\xad\n            return True\n\n        # \xe4\xb8\x8e\xe9\x80\x89\xe8\x82\xa1\xe6\x96\xb9\xe5\x90\x91\xe7\x9b\xb8\xe4\xb9\x98\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe5\x8e\xbbtop\n        cmp_top_array = np.array(cmp_top_array) * self.direction_top\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xac\xe6\xba\x90\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\n        target_change = kl_change(kl_pd) * self.direction_top\n        # sort\xe6\x8e\x92\xe5\xba\x8f\xe5\xb0\x8f\xef\xbc\x8d\xe3\x80\x8b\xe5\xa4\xa7, \xe9\x9d\x9einplace\n        cmp_top_array.sort()\n        # [::-1]\xe5\xa4\xa7\xef\xbc\x8d\xe3\x80\x8b\xe5\xb0\x8f\n        # noinspection PyTypeChecker\n        if target_change > cmp_top_array[::-1][self.n_top - 1]:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xaf\x94\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe7\x9a\x84\xe7\xac\xacself.n_top\xe4\xbd\x8d\xe7\xbd\xae\xe4\xb8\x8a\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\xb1\xe8\xae\xa4\xe4\xb8\xba\xe9\x80\x89\xe4\xb8\xad\n            return True\n        return False\n\n    def fit_first_choice(self, pick_worker, choice_symbols, *args, **kwargs):\n        raise NotImplementedError(\'AbuPickStockNTop fit_first_choice unsupported now!\')\n'"
abupy/PickStockBu/ABuPickStockPriceMinMax.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x89\xe8\x82\xa1\xe7\xa4\xba\xe4\xbe\x8b\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x9a\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom .ABuPickStockBase import AbuPickStockBase, reversed_result\nimport numpy as np\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuPickStockPriceMinMax(AbuPickStockBase):\n    """"""\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xa4\xba\xe4\xbe\x8b\xe7\xb1\xbb""""""\n    def _init_self(self, **kwargs):\n        """"""\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xb9\xe9\x99\x85\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\x85\x8d\xe7\xbd\xae\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0""""""\n\n        # \xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8ebase\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x80\xe8\x87\xb4\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8kwargs.pop(\'a\', default)\xe6\x96\xb9\xe5\xbc\x8f\n        # fit_pick\xe4\xb8\xad\xe9\x80\x89\xe6\x8b\xa9 > \xe6\x9c\x80\xe5\xb0\x8f(threshold_price_min), \xe9\xbb\x98\xe8\xae\xa4\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\xef\xbc\x8c\xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4\xe6\x89\x80\xe6\x9c\x89\xe9\x83\xbd\xe7\xac\xa6\xe5\x90\x88\n        self.threshold_price_min = -np.inf\n        if \'threshold_price_min\' in kwargs:\n            # \xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc\n            self.threshold_price_min = kwargs[\'threshold_price_min\']\n\n        # fit_pick\xe4\xb8\xad\xe9\x80\x89\xe6\x8b\xa9 < \xe6\x9c\x80\xe5\xa4\xa7(threshold_price_max), \xe9\xbb\x98\xe8\xae\xa4\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\xef\xbc\x8c\xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4\xe6\x89\x80\xe6\x9c\x89\xe9\x83\xbd\xe7\xac\xa6\xe5\x90\x88\n        self.threshold_price_max = np.inf\n        if \'threshold_price_max\' in kwargs:\n            # \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc\n            self.threshold_price_max = kwargs[\'threshold_price_max\']\n\n    @reversed_result\n    def fit_pick(self, kl_pd, target_symbol):\n        """"""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xb9\xe6\x8d\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xb9\xe9\x99\x85\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1""""""\n        if kl_pd.close.max() < self.threshold_price_max and kl_pd.close.min() > self.threshold_price_min:\n            # kl_pd.close\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\xb7\xe6\xa0\xbc < \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc \xe4\xb8\x94 kl_pd.close\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xb7\xe6\xa0\xbc > \xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc\n            return True\n        return False\n\n    def fit_first_choice(self, pick_worker, choice_symbols, *args, **kwargs):\n        raise NotImplementedError(\'AbuPickStockPriceMinMax fit_first_choice unsupported now!\')\n'"
abupy/PickStockBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuPickRegressAngMinMax import AbuPickRegressAngMinMax\nfrom .ABuPickSimilarNTop import AbuPickSimilarNTop\nfrom .ABuPickStockBase import AbuPickStockBase\nfrom .ABuPickStockPriceMinMax import AbuPickStockPriceMinMax\nfrom .ABuPickStockDemo import AbuPickStockShiftDistance, AbuPickStockNTop\nfrom . import ABuPickStock as ps\n\n__all__ = [\n    'AbuPickRegressAngMinMax',\n    'AbuPickSimilarNTop',\n    'AbuPickStockBase',\n    'AbuPickStockPriceMinMax',\n    'AbuPickStockShiftDistance',\n    'AbuPickStockNTop',\n    'ps']\n"""
abupy/SimilarBu/ABuCorrcoef.py,35,"b'# coding=utf-8\n""""""\n    \xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe5\x85\xb7\xe4\xbd\x93\xe8\xae\xa1\xe7\xae\x97\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as stats\n\nfrom enum import Enum\n\nfrom ..UtilBu import ABuDTUtil\nfrom ..CoreBu.ABuFixes import rankdata\nfrom ..CoreBu.ABuPdHelper import pd_rolling_corr\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import zip\n\n\nclass ECoreCorrType(Enum):\n    """"""\n        ECoreCorrType: \xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n    """"""\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97""""""\n    E_CORE_TYPE_PEARS = \'pears\'\n    """"""\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97""""""\n    E_CORE_TYPE_SPERM = \'sperm\'\n    """"""\xe5\x9f\xba\xe4\xba\x8ePEARS\xe4\xbd\xbf\xe7\x94\xa8\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0""""""\n    E_CORE_TYPE_SIGN = \'sign\'\n    """"""\xe5\x9f\xba\xe4\xba\x8ePEARS\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0""""""\n    E_CORE_TYPE_ROLLING = \'rolling\'\n\n    @classmethod\n    def task_cnt(cls):\n        """"""ECoreCorrType\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xaa\xe6\x95\xb0""""""\n        return 4\n\n\n""""""\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa860d""""""\ng_rolling_corr_window = 60\n\n\ndef corr_xy(x, y, similar_type=ECoreCorrType.E_CORE_TYPE_PEARS, **kwargs):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe5\xaf\xb9\xe5\xa4\x96\xe5\x87\xbd\xe6\x95\xb0\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param similar_type: ECoreCorrType, \xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbcECoreCorrType.E_CORE_TYPE_PEARS\n    :return: x\xe4\xb8\x8ey\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n    """"""\n    if similar_type == ECoreCorrType.E_CORE_TYPE_SIGN:\n        # \xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0, \xe4\xbd\xbf\xe7\x94\xa8np.sign\xe5\x8f\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8dnp.corrcoef\xe8\xae\xa1\xe7\xae\x97\n        x = np.sign(x)\n        y = np.sign(y)\n        similar_type = ECoreCorrType.E_CORE_TYPE_PEARS\n\n    # noinspection PyTypeChecker\n    if np.all(x == x[0]) or np.all(y == y[0]):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x85\xa8\xe5\xba\x8f\xe5\x88\x97\xe5\x94\xaf\xe4\xb8\x80\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe6\x95\xb0\xe5\x92\x8c\xe4\xb8\x8e\xe6\x80\xbb\xe6\x95\xb0\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\n        # noinspection PyUnresolvedReferences\n        return (x == y).sum() / x.count()\n\n    if similar_type == ECoreCorrType.E_CORE_TYPE_PEARS:\n        # \xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\n        return np.corrcoef(x, y)[0][1]\n    elif similar_type == ECoreCorrType.E_CORE_TYPE_SPERM:\n        # \xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97, \xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89spearmanr\xef\xbc\x8c\xe4\xb8\x8d\xe8\xae\xa1\xe7\xae\x97p_value\n        return spearmanr(x, y)[0][1]\n    elif similar_type == ECoreCorrType.E_CORE_TYPE_ROLLING:\n        # pop\xe5\x8f\x82\xe6\x95\xb0window\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8g_rolling_corr_window\n        window = kwargs.pop(\'window\', g_rolling_corr_window)\n\n        # \xe5\x8a\xa0\xe6\x9d\x83\xe6\x97\xb6\xe9\x97\xb4\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xafpd.Series\n        if not isinstance(x, pd.Series):\n            x = pd.Series(x)\n        if not isinstance(y, pd.Series):\n            y = pd.Series(y)\n        return rolling_corr(x, y, window=window)\n\n\n# noinspection PyUnresolvedReferences\ndef corr_matrix(df, similar_type=ECoreCorrType.E_CORE_TYPE_PEARS, **kwargs):\n    """"""\n    \xe4\xb8\x8ecorr_xy\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\xab\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xef\xbc\x8c\xe9\x9d\x9e\xe4\xb8\xa4\xe4\xb8\xa4corr\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\x82\xe6\x95\xb0\xe9\x99\xa4\xe7\xb1\xbb\xe5\x88\xab\xe5\xa4\x96\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\xe4\xb8\x94\xe8\xbe\x93\xe5\x85\xa5\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1 or np.array\n    :param df: pd.DataFrame or np.array, \xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xabdf\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n    :param similar_type: ECoreCorrType, \xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbcECoreCorrType.E_CORE_TYPE_PEARS\n    :return: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if isinstance(df, np.ndarray):\n        # \xe6\x8a\x8anp.ndarray\xe8\xbd\xacDataFrame\xef\xbc\x8c\xe4\xbe\xbf\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\n        df = pd.DataFrame(df)\n\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\'df must pd.DataFrame object!!!\')\n\n    # FIXME \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe5\xba\x94\xe8\xaf\xa5\xe6\x94\xaf\xe6\x8c\x81ECoreCorrType.E_CORE_TYPE_PEARS.value\xef\xbc\x8c\xe5\x8f\xaa\xe4\xb8\xa5\xe6\xa0\xbc\xe6\x8c\x89\xe7\x85\xa7ECoreCorrType\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9b\xb8\xe7\xad\x89\n    if similar_type == ECoreCorrType.E_CORE_TYPE_PEARS or similar_type == ECoreCorrType.E_CORE_TYPE_PEARS.value:\n        # \xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\n        corr = np.corrcoef(df.T)\n    elif similar_type == ECoreCorrType.E_CORE_TYPE_SPERM or similar_type == ECoreCorrType.E_CORE_TYPE_SPERM.value:\n        # \xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97, \xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89spearmanr\xef\xbc\x8c\xe4\xb8\x8d\xe8\xae\xa1\xe7\xae\x97p_value\n        corr = spearmanr(df)\n    elif similar_type == ECoreCorrType.E_CORE_TYPE_SIGN or similar_type == ECoreCorrType.E_CORE_TYPE_SIGN.value:\n        # \xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0, \xe4\xbd\xbf\xe7\x94\xa8np.sign\xe5\x8f\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8dnp.corrcoef\xe8\xae\xa1\xe7\xae\x97\n        corr = np.corrcoef(np.sign(df.T))\n    elif similar_type == ECoreCorrType.E_CORE_TYPE_ROLLING or similar_type == ECoreCorrType.E_CORE_TYPE_ROLLING.value:\n        # pop\xe5\x8f\x82\xe6\x95\xb0window\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8g_rolling_corr_window\n        window = kwargs.pop(\'window\', g_rolling_corr_window)\n        corr = rolling_corr(df, window=window)\n    else:\n        # \xe8\xbf\x98\xe6\x98\xaf\xe7\xbb\x99\xe4\xb8\xaa\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84corr\xe8\xae\xa1\xe7\xae\x97np.corrcoef(df.T)\n        corr = np.corrcoef(df.T)\n    # \xe5\xb0\x86\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84corr\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xa1\x8c\xe5\x92\x8c\xe5\x88\x97\xe7\xb4\xa2\xe5\xbc\x95\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8df.columns\n    corr = pd.DataFrame(corr, index=df.columns, columns=df.columns)\n    return corr\n\n\n@ABuDTUtil.consume_time\ndef rolling_corr(df, ss=None, window=g_rolling_corr_window):\n    """"""\n    \xe6\xbb\x91\xe5\x8a\xa8\xe7\xaa\x97\xe5\x8f\xa3\xe6\x8c\x89\xe6\x97\xb6\xe9\x97\xb4\xe6\x9d\x83\xe9\x87\x8d\xe8\xae\xa1\xe7\xae\x97\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n\n    :param df: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    e.g.\n                usA\t    usAA\tusAAC\n    2015/7/27\t0.76\t-1.94\t0.59\n    2015/7/28\t2.12\t2.6\t    1.3\n    2015/7/29\t-0.12\t2.94\t-1.34\n    2015/7/30\t1.41\t-1.77\t-4.04\n    2015/7/31\t-0.05\t-1.1\t1.39\n    ......\n\n    :param ss: pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, ss\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8edf.shape[0]\xe4\xb8\x80\xe6\xa0\xb7\n    e.g.\n                usA\n    2015/7/27\t0.76\n    2015/7/28\t2.12\n    2015/7/29\t-0.12\n    2015/7/30\t1.41\n    2015/7/31\t-0.05\n    ......\n    :param window: \xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f, \xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbcg_rolling_corr_window\xef\xbc\x8c\xe5\x8d\xb360d\n    :return: \xe5\xbd\x93ss\xe4\xb8\xbaNone\xe6\x97\xb6\xe8\xbf\x94\xe5\x9b\x9edf.shape[1]\xe5\xa4\xa7\xe5\xb0\x8f\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe4\xba\x8c\xe7\xbb\xb4\xe6\x96\xb9\xe9\x98\xb5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xbadf.shape[1]\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n    """"""\n    if window < 1 or window > df.shape[0]:\n        raise TypeError(\'window out of index, must in [{},{}]\'.format(1, df.shape[0]))\n    rolling_window = list(zip(np.arange(df.shape[0] - window + 1), np.arange(window, df.shape[0] + 1)))\n    """"""\n        \xe9\x80\x9a\xe8\xbf\x87list(zip(np.arange(df.shape[0] - window + 1), np.arange(window, df.shape[0] + 1)))\n        \xe7\x94\x9f\xe6\x88\x90rolling_window\xef\xbc\x8crolling_window\xe5\xbd\xa2\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n        [(0, 60), (1, 61), (2, 62), (3, 63), (4, 64), (5, 65), (6, 66), (7, 67), (8, 68),\n        (9, 69), (10, 70), (11, 71), (12, 72), (13, 73), (14, 74), (15, 75), (16, 76),\n        (17, 77), (18, 78), (19, 79), (20, 80), (21, 81), (22, 82), (23, 83), (24, 84),\n         (25, 85), (26, 86), (27, 87), (28, 88),........]\n    """"""\n    weights = np.linspace(0, 1, len(rolling_window))\n    # \xe9\x9a\x8f\xe7\x9d\x80\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe6\x8e\xa8\xe7\xa7\xbb\xef\xbc\x8c\xe8\xbf\x87\xe5\x8e\xbb\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\x8d\xa0\xe5\xbe\x97\xe6\xaf\x94\xe9\x87\x8d\xe8\xb6\x8a\xe6\x9d\xa5\xe8\xb6\x8a\xe5\xb0\x91\n    # noinspection PyUnresolvedReferences\n    weights = weights / weights.sum()\n    """"""\n        weights\xe5\x8d\xb3\xe6\x9d\x83\xe9\x87\x8d\xe5\xba\x8f\xe5\x88\x97\xe5\xbd\xa2\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n        [0.      0.      0.      0.      0.      0.0001  0.0001  0.0001  0.0001\n        0.0001  0.0001  0.0001  0.0001.........................................\n        0.0044  0.0044  0.0044  0.0044  0.0044  0.0044  0.0044  0.0044  0.0045\n        ........................................0.0045  0.0045  0.0045  0.0045]\n    """"""\n    corr = 0\n    if ss is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8pd_rolling_corr\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81copy\xef\xbc\x8c\xe4\xbf\x9d\xe8\xaf\x81df == np.inf\xe7\x9a\x84\xe4\xbc\x9a\xe4\xbf\xae\xe6\x94\xb9\n        df = df.copy()\n        df[df == np.inf] = 0\n        # \xe8\xbf\xad\xe4\xbb\xa3rolling_window\xe4\xb8\x8b\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xaa\x97\xe5\x8f\xa3\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8np.corrcoef\xef\xbc\x8c\xe6\xaf\x94\xe4\xbd\xbf\xe7\x94\xa8pd_rolling_corr\xe6\x95\x88\xe6\x9e\x9c\xe9\xab\x98\xe5\xbe\x88\xe5\xa4\x9a\n        for (s, e) in rolling_window:\n            # eg. rolling_window\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8d\xb3\xe4\xb8\xbanp.corrcoef(df.iloc[0:60].T)\n            window_corr = np.corrcoef(df.iloc[s:e].T)\n            window_corr[np.isinf(window_corr) | np.isnan(window_corr)] = 0\n            # \xe5\xbd\x93\xe5\x89\x8d\xe7\xaa\x97\xe5\x8f\xa3\xe4\xb8\x8b\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe4\xb9\x98\xe4\xbb\xa5\xe6\x9d\x83\xe9\x87\x8d, window_corr * weights[s]\xe4\xb8\xbadf.shape[1]\xe5\xa4\xa7\xe5\xb0\x8f\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe4\xba\x8c\xe7\xbb\xb4\xe6\x96\xb9\xe9\x98\xb5\n            corr += window_corr * weights[s]\n    else:\n        # \xe9\x92\x88\xe5\xaf\xb9\xe4\xb8\xa4\xe4\xb8\xaa\xe8\xbe\x93\xe5\x85\xa5\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8pd_rolling_corr\n        window_corr = pd_rolling_corr(df, ss, window=window)\n        window_corr.dropna(inplace=True, how=\'all\')\n        """"""\n            pd_rolling_corr\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84window_corr\xe5\xbd\xa2\xe5\xa6\x82, \xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe7\xaa\x97\xe5\x8f\xa3corr:\n\n            59     0.234309\n            60     0.237821\n            61     0.244905\n            62     0.242731\n            63     0.249227\n            ...............\n            499    0.154148\n            500    0.138837\n            501    0.133806\n            502    0.135788\n            503    0.138762\n        """"""\n        window_corr[window_corr == np.inf] = 0\n        for ind in np.arange(window_corr.shape[0]):\n            # \xe5\xaf\xb9\xe5\xba\x94\xe5\xa4\xa9\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0 \xef\xbc\x8a \xe5\xaf\xb9\xe5\xba\x94\xe5\xa4\xa9\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe6\x9d\x83\xe9\x87\x8d\xef\xbc\x8c\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xbadf.shape[1]\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n            corr += window_corr.iloc[ind] * weights[ind]\n    return corr\n\n\ndef spearmanr(a, b=None, axis=0, p_value=False):\n    """"""\n    \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97p_value\xe4\xbd\xbf\xe7\x94\xa8stats.spearmanr\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8rankdata\xe9\x85\x8d\xe5\x90\x88\xe4\xbd\xbf\xe7\x94\xa8np.apply_along_axis\xef\xbc\x8c\n    \xe8\xbf\x9b\xe8\xa1\x8cspearmanr\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xae\xa1\xe7\xae\x97p_value\xe8\x80\x97\xe6\x97\xb6\n    :param a: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97a\n    :param b: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97b\n    :param axis: \xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xbd\x9c\xe7\x94\xa8\xe8\xbd\xb4\xe6\x96\xb9\xe5\x90\x91\n    :param p_value \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97p_value\n    :return: p_value \xe6\x98\xafTrue\xe6\x98\xaf\xe8\xbf\x94\xe5\x9b\x9e scipy.cost_stats.SpearmanrResult\n             p_value \xe6\x98\xafFalse \xe8\xbf\x94\xe5\x9b\x9e np.array \xe7\x9a\x84\xe4\xba\x8c\xe7\xbb\xb4\xe6\x96\xb9\xe9\x98\xb5\n    """"""\n    if p_value:\n        # \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97p_value\xe4\xbd\xbf\xe7\x94\xa8stats.spearmanr\xe8\xae\xa1\xe7\xae\x97\n        return stats.spearmanr(a=a, b=b, axis=axis)\n    else:\n        # \xe4\xbd\xbf\xe7\x94\xa8rankdata\xe9\x85\x8d\xe5\x90\x88\xe4\xbd\xbf\xe7\x94\xa8np.apply_along_axis\n        a, outaxis = _chk_asarray(a, axis)\n        ar = np.apply_along_axis(rankdata, outaxis, a)\n        br = None\n        if b is not None:\n            b, axisout = _chk_asarray(b, axis)\n            br = np.apply_along_axis(rankdata, axisout, b)\n        # \xe8\xbf\x94\xe5\x9b\x9e np.array \xe7\x9a\x84\xe4\xba\x8c\xe7\xbb\xb4\xe6\x96\xb9\xe9\x98\xb5\n        return np.corrcoef(ar, br, rowvar=outaxis)\n\n\ndef _chk_asarray(a, axis):\n    """"""\xe5\x86\x85\xe9\x83\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xb8\xbaspearmanr\xe4\xb8\x8b\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97p_value\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\xbaapply_along_axis\xe8\xbd\xac\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae""""""\n    if axis is None:\n        a = np.ravel(a)\n        outaxis = 0\n    else:\n        a = np.asarray(a)\n        outaxis = axis\n\n    if a.ndim == 0:\n        a = np.atleast_1d(a)\n\n    return a, outaxis\n'"
abupy/SimilarBu/ABuSimilar.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\x94\xe7\x94\xa8\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport functools\nimport logging\nimport math\nimport operator\nimport os\n\nimport pandas as pd\n\nfrom . import ABuCorrcoef\nfrom . import ABuSimilarDrawing\nfrom .ABuCorrcoef import ECoreCorrType\nfrom ..TradeBu import AbuBenchmark\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode, EMarketTargetType\nfrom ..MarketBu import ABuSymbolPd\nfrom ..MarketBu.ABuMarket import split_k_market, all_symbol\nfrom ..MarketBu.ABuSymbol import IndexSymbol, Symbol\nfrom ..UtilBu.ABuDTUtil import consume_time\nfrom ..UtilBu.ABuProgress import do_clear_output\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig, AbuEnvProcess\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange\nfrom ..UtilBu import ABuProgress\n\n""""""\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe5\xb9\xb6\xe8\xa1\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8cIO\xe6\x93\x8d\xe4\xbd\x9c\xe5\x81\x8f\xe5\xa4\x9a\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x88\x86\xe9\x85\x8d\xe5\xa4\x9a\xe4\xb8\xaa\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4=cpu\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8a2, windows\xe8\xbf\x98\xe6\x98\xaf...""""""\ng_process_panel_cnt = ABuEnv.g_cpu_cnt * 2 if ABuEnv.g_is_mac_os else ABuEnv.g_cpu_cnt\n\n\ndef from_local(func):\n    """"""\n    \xe7\x8e\xb0\xe6\x89\x80\xe6\x9c\x89\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\xba\x94\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbafrom_local\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8d\xb3\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x81\x9a\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\xba\x94\xe7\x94\xa8\n\n    \xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe4\xbd\x9c\xe7\x94\xa8\xe6\x98\xaf\xe5\xbf\xbd\xe7\x95\xa5env\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\x94\xb9\xe5\x8f\x98\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\n    \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x95\xb4\xe4\xb8\xaa\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8d\xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n    :param func: \xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\x94\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe8\xa1\x8c\xe4\xb8\xba\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        # \xe4\xb8\xb4\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98env\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe7\x9a\x84g_data_fetch_mode\n        fetch_mode = ABuEnv.g_data_fetch_mode\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f\n        ABuEnv.g_data_fetch_mode = ABuEnv.EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL\n        if fetch_mode != ABuEnv.EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8e\x9f\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbc\xba\xe5\x88\xb6\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8cwarning\xe6\x8f\x90\xe7\xa4\xba\n            logging.warning(\'data from local. run ABu.run_kl_update if you want to get the latest data.\')\n        result = func(*args, **kwargs)\n        # \xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84g_data_fetch_mode\n        ABuEnv.g_data_fetch_mode = fetch_mode\n        return result\n\n    return wrapper\n\n\ndef from_net(func):\n    """"""\n    \xe4\xb8\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe4\xbd\x9c\xe7\x94\xa8\xe6\x98\xaf\xe5\xbf\xbd\xe7\x95\xa5env\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\x94\xb9\xe5\x8f\x98\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\n    \xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe6\x95\xb4\xe4\xb8\xaa\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8d\xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n    :param func: \xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\x94\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe8\xa1\x8c\xe4\xb8\xba\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        # \xe4\xb8\xb4\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98env\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe7\x9a\x84g_data_fetch_mode\n        fetch_mode = ABuEnv.g_data_fetch_mode\n        # \xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\xe5\xbc\xba\xe5\x88\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\xbc\x8f\n        ABuEnv.g_data_fetch_mode = ABuEnv.EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET\n        if fetch_mode != ABuEnv.EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8e\x9f\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbc\xba\xe5\x88\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8cwarning\xe6\x8f\x90\xe7\xa4\xba\n            logging.warning(\'data from net!!!\')\n        result = func(*args, **kwargs)\n        # \xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84g_data_fetch_mode\n        ABuEnv.g_data_fetch_mode = fetch_mode\n        return result\n\n    return wrapper\n\n\n@from_local\ndef _find_similar(symbol, cmp_cnt=None, n_folds=2, start=None, end=None, show_cnt=None, rolling=False,\n                  show=True, corr_type=ECoreCorrType.E_CORE_TYPE_PEARS):\n    """"""\n    \xe8\xa2\xabfrom_local\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe8\xa3\x85\xe9\xa5\xb0 \xe5\x8d\xb3\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8symbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe4\xb8\x8e\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe5\x85\xb3\xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\x8a\xe4\xbf\xa1\xe6\x81\xaf\n    :param symbol: \xe5\xa4\x96\xe9\x83\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9b\xae\xe6\xa0\x87symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param cmp_cnt: \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8cint\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param n_folds: \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\xaf\xb9\xe6\xaf\x94n_folds\xe5\xb9\xb4\xef\xbc\x8cint\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param show_cnt: \xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb1\x95\xe7\xa4\xba\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xb8\xaa\xe6\x95\xb0\n    :param rolling: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xb8\x8ecorr_type=ECoreCorrType.E_CORE_TYPE_ROLLING\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x8d\x95\xe7\x8b\xac\xe6\x8b\xbf\xe5\x87\xba\xe6\x9d\xa5\xe4\xba\x86\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe7\xbb\x88top\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    :param corr_type: ECoreCorrType\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xef\xbc\x8c\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xef\xbc\x8c\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    """"""\n    if isinstance(symbol, Symbol):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe6\x97\xb6Symbol\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\x96value\n        symbol = symbol.value\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    market_change_df = _all_market_cg(symbol, cmp_cnt=cmp_cnt, n_folds=n_folds, start=start, end=end)\n    if market_change_df is None:\n        logging.info(\'{} data is miss, please update data first!\'.format(symbol))\n        return\n    # \xe9\x87\x8d\xe6\x96\xb0\xe8\xb5\x8b\xe4\xba\x88\xe6\xa0\x87\xe5\xb0\xba\xe5\xae\x9e\xe9\x99\x85\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\n    cmp_cnt = market_change_df[symbol].shape[0]\n    # symbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6df\xe6\x95\xb0\xe6\x8d\xae\n    benchmark_df = market_change_df[symbol]\n    # \xe6\xb8\x85\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe5\xa4\xaa\xe4\xb9\xb1\n    do_clear_output()\n    # \xe5\xbc\x80\xe5\xa7\x8b\xe4\xbd\xbf\xe7\x94\xa8symbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe4\xb8\x8e\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe5\x85\xb3\xe5\xaf\xb9\xe6\xaf\x94\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\x8a\xe4\xbf\xa1\xe6\x81\xaf\n    sorted_corr = _handle_market_change_df(market_change_df, cmp_cnt, benchmark_df, show_cnt,\n                                           corr_type, rolling, show)\n    return sorted_corr\n\n\ndef find_similar_with_se(symbol, start, end, show_cnt=10, rolling=False, show=True,\n                         corr_type=ECoreCorrType.E_CORE_TYPE_PEARS):\n    """"""\n    \xe5\x9b\xba\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8start, end\xe5\x8f\x82\xe6\x95\xb0\xe6\x8f\x90\xe4\xbe\x9b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5_find_similar\xef\xbc\x8c\xe4\xb8\xba_find_similar\xe6\x8f\x90\xe4\xbe\x9b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe8\xa7\x84\xe5\x88\x99\n    :param symbol: \xe5\xa4\x96\xe9\x83\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9b\xae\xe6\xa0\x87symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param show_cnt: \xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb1\x95\xe7\xa4\xba\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xb8\xaa\xe6\x95\xb0\n    :param rolling: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xb8\x8ecorr_type=ECoreCorrType.E_CORE_TYPE_ROLLING\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x8d\x95\xe7\x8b\xac\xe6\x8b\xbf\xe5\x87\xba\xe6\x9d\xa5\xe4\xba\x86\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe7\xbb\x88top\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    :param corr_type: ECoreCorrType\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xef\xbc\x8c\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xef\xbc\x8c\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    :return:\n    """"""\n    return _find_similar(symbol, start=start, end=end, show_cnt=show_cnt, rolling=rolling, show=show,\n                         corr_type=corr_type)\n\n\ndef find_similar_with_folds(symbol, n_folds=2, show_cnt=10, rolling=False, show=True,\n                            corr_type=ECoreCorrType.E_CORE_TYPE_PEARS):\n    """"""\n    \xe5\x9b\xba\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8n_folds\xe5\x8f\x82\xe6\x95\xb0\xe6\x8f\x90\xe4\xbe\x9b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5_find_similar\xef\xbc\x8c\xe4\xb8\xba_find_similar\xe6\x8f\x90\xe4\xbe\x9b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe8\xa7\x84\xe5\x88\x99\n    :param symbol: \xe5\xa4\x96\xe9\x83\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9b\xae\xe6\xa0\x87symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param n_folds: \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\xaf\xb9\xe6\xaf\x94n_folds\xe5\xb9\xb4\xef\xbc\x8cint\n    :param show_cnt: \xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb1\x95\xe7\xa4\xba\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xb8\xaa\xe6\x95\xb0\n    :param rolling: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xb8\x8ecorr_type=ECoreCorrType.E_CORE_TYPE_ROLLING\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x8d\x95\xe7\x8b\xac\xe6\x8b\xbf\xe5\x87\xba\xe6\x9d\xa5\xe4\xba\x86\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe7\xbb\x88top\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    :param corr_type: ECoreCorrType\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xef\xbc\x8c\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xef\xbc\x8c\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    :return:\n    """"""\n    return _find_similar(symbol, n_folds=n_folds, show_cnt=show_cnt, rolling=rolling, show=show,\n                         corr_type=corr_type)\n\n\ndef find_similar_with_cnt(symbol, cmp_cnt=60, show_cnt=10, rolling=False, show=True,\n                          corr_type=ECoreCorrType.E_CORE_TYPE_PEARS):\n    """"""\n    \xe5\x9b\xba\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8cmp_cnt\xe5\x8f\x82\xe6\x95\xb0\xe6\x8f\x90\xe4\xbe\x9b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5_find_similar\xef\xbc\x8c\xe4\xb8\xba_find_similar\xe6\x8f\x90\xe4\xbe\x9b\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe8\xa7\x84\xe5\x88\x99\n    :param symbol: \xe5\xa4\x96\xe9\x83\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9b\xae\xe6\xa0\x87symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param cmp_cnt: \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8cint\n    :param show_cnt: \xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb1\x95\xe7\xa4\xba\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xb8\xaa\xe6\x95\xb0\n    :param rolling: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xb8\x8ecorr_type=ECoreCorrType.E_CORE_TYPE_ROLLING\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x8d\x95\xe7\x8b\xac\xe6\x8b\xbf\xe5\x87\xba\xe6\x9d\xa5\xe4\xba\x86\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe7\xbb\x88top\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    :param corr_type: ECoreCorrType\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xef\xbc\x8c\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xef\xbc\x8c\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    :return:\n    """"""\n    return _find_similar(symbol, cmp_cnt=cmp_cnt, show_cnt=show_cnt, rolling=rolling, show=show,\n                         corr_type=corr_type)\n\n\n@add_process_env_sig\ndef _make_symbols_cg_df(symbols, benchmark):\n    """"""\n    \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe9\x87\x91\xe8\x9e\x8d\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xef\xbc\x8c\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xa7\x94\xe6\x89\x98\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x80\x9a\xe8\xbf\x87make_kl_df\xe5\xae\x8c\xe6\x88\x90\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84symbols\xe4\xb8\xaa\n    \xe9\x87\x91\xe8\x9e\x8d\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9e\xe6\x89\x80\xe6\x9c\x89\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbols: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3symbols\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xbastr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\xa0\x87\xe5\xb0\xba\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe7\xa1\xae\xe5\xae\x9a\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe6\x89\x80\xe6\x9c\x89\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    # \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x87\x91\xe8\x9e\x8d\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe5\xb7\xa5\xe4\xbd\x9c, \xe7\x94\xb1\xe4\xba\x8e\xe6\x9c\xac\xe4\xba\x8b\xe6\x98\xaf\xe5\x9c\xa8\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x86\x85\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x86\x8dmake_kl_df\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8parallel\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xb8\x8a\xe5\xb1\x82\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x88\x86\xe9\x85\x8d\xe5\x8f\x8a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe7\xa1\xae\xe5\xae\x9a\n    panel = ABuSymbolPd.make_kl_df(symbols, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO, benchmark=benchmark,\n                                   show_progress=True)\n\n    if panel is None or panel.empty:\n        logging.info(\'pid {} panel is None\'.format(os.getpid()))\n        return None\n    # \xe8\xbd\xac\xe6\x8d\xa2panel\xe8\xbd\xb4\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaf\xe6\x96\xb9\xe4\xbe\xbf\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\n    panel = panel.swapaxes(\'items\', \'minor\')\n    net_cg_df = panel[\'p_change\'].fillna(value=0)\n    """"""\n        \xe8\xbd\xac\xe8\xbd\xb4\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe8\x8e\xb7\xe5\x8f\x96p_change\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\x80\xe6\x9c\x89\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xbd\xa2\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                    usF\t    usFCAU\tusGM\tusHMC\tusTM\tusTSLA\tusTTM\n        2015-06-25\t-0.387\t-0.517\t-1.308\t0.522\t-0.391\t1.365\t-0.029\n        2015-06-26\t-0.259\t1.300\t-0.922\t0.366\t0.437\t-0.632\t-0.229\n        2015-06-29\t-2.468\t-6.799\t-3.345\t-2.676\t-2.222\t-1.898\t-2.550\n        2015-06-30\t-0.067\t0.000\t0.301\t1.250\t0.982\t2.381\t1.353\n        2015-07-01\t-0.133\t0.688\t-0.870\t-1.605\t-0.112\t0.332\t0.261\n        .................................................................\n    """"""\n    return net_cg_df\n\n\ndef _make_benchmark_cg_df(symbol, benchmark):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaebenchmark\xe6\x8f\x90\xe5\x8f\x96\xe5\x85\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1kl_pd\xe4\xb8\xad\xe7\x9a\x84p_change\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9ep_change\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\n    \xe6\x96\xb0pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xa1\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x8d\xe5\x8d\xb3\xe4\xb8\xbasymbol\n    :param symbol: \xe6\xa0\x87\xe5\xb0\xba\xe5\xaf\xb9\xe8\xb1\xa1symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\xa0\x87\xe5\xb0\xba\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe7\xa1\xae\xe5\xae\x9a\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe8\xbf\x94\xe5\x9b\x9ep_change\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe6\x96\xb0pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    kl_pd = benchmark.kl_pd\n    net_cg_df = pd.DataFrame({symbol: kl_pd[\'p_change\']}, index=kl_pd.index).fillna(value=0)\n    """"""\n        p_change\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe6\x96\xb0pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xa1\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x90\x8d\xe5\x8d\xb3\xe4\xb8\xbasymbol, \xe5\xbd\xa2\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                    us.IXIC\n        2014-07-25\t-0.50\n        2014-07-28\t-0.10\n        2014-07-29\t-0.05\n        2014-07-30\t0.45\n        2014-07-31\t-2.09\n        2014-08-01\t-0.39\n        2014-08-04\t0.72\n    """"""\n    return net_cg_df\n\n\ndef _net_cg_df_create(symbol, benchmark):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96env\xe4\xb8\xad\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xef\xbc\x8c\xe5\x88\x87\xe5\x88\x86\xe5\x88\x86\xe9\x85\x8d\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe5\xa7\x94\xe6\x89\x98\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b_make_symbols_cg_df\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n    \xe5\xb0\x86\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe7\xbb\x84\xe5\x90\x88\xe6\x88\x90\xe4\xb8\xba\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\n    symbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: \xe6\xa0\x87\xe5\xb0\xba\xe5\xaf\xb9\xe8\xb1\xa1symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param benchmark: \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x94\xb6\xe9\x9b\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\xa0\x87\xe5\xb0\xba\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x95\xb0\xe6\x8d\xae\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe7\xa1\xae\xe5\xae\x9a\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8c\x87\xe5\xae\x9a\xe5\xb8\x82\xe5\x9c\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe6\xa0\xb9\xe6\x8d\xaeenv\xe4\xb8\xad\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe6\x9d\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe5\xb8\x82\xe5\x9c\xbasymbol\n    choice_symbols = all_symbol()\n    # \xe9\x80\x9a\xe8\xbf\x87split_k_market\xe5\xb0\x86\xe5\xb8\x82\xe5\x9c\xbasymbol\xe5\x88\x87\xe5\x89\xb2\xe4\xb8\xba\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x8c\xe6\x88\x90\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\n    process_symbols = split_k_market(g_process_panel_cnt, market_symbols=choice_symbols)\n    # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xbc\x9a\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe6\x8d\xa2\xe4\xb8\xba\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0, \xe5\x8d\xb332 -> 33 16 -> 17\n    n_process_pick_stock = len(process_symbols)\n    parallel = Parallel(\n        n_jobs=n_process_pick_stock, verbose=0, pre_dispatch=\'2*n_jobs\')\n\n    # \xe6\x9a\x82\xe6\x97\xb6\xe5\x85\xb3\xe9\x97\xad\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe5\xa4\xaa\xe5\xa4\x9a, \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe7\xa7\x8d\xe5\x85\xa8\xe5\xb1\x80\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe5\x9c\xa8AbuEnvProcess\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb9\x8b\xe5\x89\x8d\xe5\xae\x8c\xe6\x88\x90\n    # ABuProgress.g_show_ui_progress = False\n    # _make_symbols_cg_df\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8add_process_env_sig\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe5\x86\x85\xe5\xad\x98\xe6\x8b\xb7\xe8\xb4\x9d\xe5\xaf\xb9\xe8\xb1\xa1AbuEnvProcess, \xe8\xaf\xa6AbuEnvProcess\n    p_nev = AbuEnvProcess()\n    change_df_array = parallel(\n        delayed(_make_symbols_cg_df)(choice_symbols, benchmark, env=p_nev) for choice_symbols in process_symbols)\n    # ABuProgress.g_show_ui_progress = True\n    # \xe8\xbf\x98\xe6\x98\xaf\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\xae\x8c\xe4\xba\x8b\xe6\x97\xb6\xe6\xa3\x80\xe6\xb5\x8b\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbf\x98\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    ABuProgress.do_check_process_is_dead()\n    """"""\n        \xe5\xa6\x82\xe6\x9e\x9c\xe6\xa0\x87\xe5\xb0\xba\xe7\x9a\x84\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x9c\xa8choice_symbols\xe4\xb8\xad\xe5\xb0\xb1\xe4\xb8\x8d\xe5\x8d\x95\xe7\x8b\xac\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbb\x84\xe8\xa3\x85\xe4\xba\x86\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe6\x98\xaf\xe5\xa6\x82\xef\xbc\x9a\n        eg. env\xe4\xb8\xad\xe6\x8c\x87\xe5\xae\x9a\xe5\xb8\x82\xe5\x9c\xba\xe5\x8f\x82\xe6\x95\xb0\xe6\xb8\xaf\xe8\x82\xa1\xef\xbc\x8c\xe5\x8d\xb3g_market_target = EMarketTargetType.E_MARKET_TARGET_HK\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\n        \xe4\xbc\xa0\xe4\xba\xba\xe7\x9a\x84symbol\xe6\x98\xafa\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x80\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe5\x8d\xb3\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe6\x83\xb3\xe4\xbb\x8e\xe6\x95\xb4\xe4\xb8\xaa\xe6\xb8\xaf\xe8\x82\xa1\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe5\x88\x86\xe6\x9e\x90\xe4\xb8\x8e\xe8\xbf\x99\xe6\x94\xafa\xe8\x82\xa1\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe8\xbf\x99\xe6\x97\xb6\xe5\x8d\xb3\xe4\xbc\x9a\n        \xe8\xa7\xa6\xe5\x8f\x91_make_benchmark_cg_df\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n    """"""\n    change_df_concat = None if symbol in choice_symbols else _make_benchmark_cg_df(symbol, benchmark)\n    for change_df in change_df_array:\n        if change_df is not None:\n            # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9e\xe6\x8e\xa5\n            change_df_concat = change_df if change_df_concat is None else pd.concat([change_df, change_df_concat],\n                                                                                    axis=1)\n    return change_df_concat\n\n\n@consume_time\ndef _all_market_cg(symbol, cmp_cnt=None, n_folds=2, start=None, end=None):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: \xe5\xa4\x96\xe9\x83\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9b\xae\xe6\xa0\x87symbol\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param cmp_cnt: \xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8cint\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param n_folds: \xe5\xaf\xb9\xe6\xaf\x94n_folds\xe5\xb9\xb4\xef\xbc\x8cint\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :return: \xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\xbd\xa2\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                        e.g.\n                            usA\t    usAA\tusAAC\n                2015/7/27\t0.76\t-1.94\t0.59\n                2015/7/28\t2.12\t2.6\t    1.3\n                2015/7/29\t-0.12\t2.94\t-1.34\n                2015/7/30\t1.41\t-1.77\t-4.04\n                2015/7/31\t-0.05\t-1.1\t1.39\n    """"""\n\n    if cmp_cnt is not None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe4\xbc\xa0\xe9\x80\x92\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x8d\xe5\x90\x91\xe4\xbf\xae\xe6\x94\xb9n_folds\xef\xbc\x8cceil\xe5\x90\x91\xe4\xb8\x8a\xe5\xaf\xb9\xe9\xbd\x90\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb9\xb4\xe6\x95\xb0\n        n_folds = int(math.ceil(cmp_cnt / ABuEnv.g_market_trade_year))\n    # \xe6\xa0\x87\xe5\xb0\xba\xe4\xb8\x8d\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\xa7\xe7\x9b\x98symbol\xef\xbc\x8c\xe8\x80\x8c\xe6\x98\xaf\xe4\xbc\xa0\xe4\xba\xba\xe7\x9a\x84symbol\xe5\x81\x9a\xe4\xb8\xba\xe6\xa0\x87\xe5\xb0\xba\n    benchmark = AbuBenchmark(benchmark=symbol, n_folds=n_folds, start=start, end=end, rs=False)\n    if benchmark.kl_pd is None or benchmark.kl_pd.empty:\n        logging.info(\'{} make benchmark get None\'.format(symbol))\n        return None\n\n    if cmp_cnt is not None and benchmark.kl_pd.shape[0] > cmp_cnt:\n        # \xe5\x86\x8d\xe6\xac\xa1\xe6\xa0\xb9\xe6\x8d\xae\xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xb9\xe9\xbd\x90\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        benchmark.kl_pd = benchmark.kl_pd.iloc[-cmp_cnt:]\n    # \xe6\x9c\x89\xe4\xba\x86symbol\xe5\x92\x8cbenchmark\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaf\xe5\xbc\x80\xe5\xa7\x8b\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1all_market_change_df\n    all_market_change_df = _net_cg_df_create(symbol, benchmark)\n    return all_market_change_df\n\n\ndef _handle_market_change_df(market_change_df, cmp_cnt, benchmark_df, show_cnt, corr_type, rolling=True, show=True):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8benchmark_df\xe4\xb8\x8e\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbamarket_change_df\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\x8a\xe4\xbf\xa1\xe6\x81\xaf\n    :param market_change_df: \xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param cmp_cnt: \xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8cint\n    :param benchmark_df: \xe6\xa0\x87\xe5\xb0\xbasymbol\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    :param show_cnt: \xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb1\x95\xe7\xa4\xba\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xb8\xaa\xe6\x95\xb0\n    :param corr_type: ECoreCorrType\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xef\xbc\x8c\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xef\xbc\x8c\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\n    :param rolling: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xb8\x8ecorr_type = ECoreCorrType.E_CORE_TYPE_ROLLING\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x8d\x95\xe7\x8b\xac\xe6\x8b\xbf\xe5\x87\xba\xe6\x9d\xa5\xe4\xba\x86\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe7\xbb\x88top\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n    :return:\n    """"""\n    # \xe4\xbd\xbf\xe7\x94\xa8[-cmp_cnt:]\xe5\x86\x8d\xe6\xac\xa1\xe7\xa1\xae\xe5\xae\x9a\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x91\xa8\xe6\x9c\x9f\n    benchmark_df = benchmark_df.iloc[-cmp_cnt:]\n    market_change_df = market_change_df.iloc[-cmp_cnt:]\n\n    if corr_type == ECoreCorrType.E_CORE_TYPE_ROLLING:\n        # \xe6\x8a\x8a\xe5\x8f\x82\xe6\x95\xb0\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83rolling\xe5\x92\x8ccorr_type\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x9b\xe8\xa1\x8cmerge\n        rolling = True\n\n    if rolling:\n        # \xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbd\xbf\xe7\x94\xa8ABuCorrcoef.rolling_corr\xe5\x8d\x95\xe7\x8b\xac\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x96\xb9\xe5\xbc\x8f\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe8\xaf\xa6\xe8\xa7\x81ABuCorrcoef.rolling_corr\n        corr_ret = ABuCorrcoef.rolling_corr(market_change_df, benchmark_df)\n        corr_ret = pd.Series(corr_ret, index=market_change_df.columns, name=benchmark_df.name)\n    else:\n        # \xe5\x85\xb6\xe5\xae\x83\xe5\x8a\xa0\xe6\x9d\x83\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbd\xbf\xe7\x94\xa8corr_df\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\xa7\xe7\x9f\xa9\xe9\x98\xb5\xe8\xae\xa1\xe7\xae\x97\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe5\x90\x8e\xe5\x86\x8d\xe6\x8b\xbf\xe5\x87\xbabenchmark_df\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe5\x88\x97\n        corr_ret = ABuCorrcoef.corr_matrix(market_change_df, corr_type)[benchmark_df.name]\n    # \xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8czip\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe6\x8c\x89\xe7\x85\xa7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x94\xb1\xe6\xad\xa3\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\xb0\xe8\xb4\x9f\xe7\x9b\xb8\xe5\x85\xb3\xe6\x8e\x92\xe5\xba\x8f\n    sorted_ret = sorted(zip(corr_ret.index, corr_ret), key=operator.itemgetter(1), reverse=True)\n    """"""\n        \xe6\x9c\x80\xe7\xbb\x88sorted_ret\xe4\xb8\xba\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9a\n        [(\'usTSLA\', 1.0), (\'usSINA\', 0.45565379371028253), (\'usWB\', 0.44811939073120288),\n         (\'usAEH\', 0.37792534372729375), (\'usCRESY\', 0.37347584342214574),\n         (\'us.IXIC\', 0.36856818073255937), (\'usCVG\', 0.36841463066151853),\n         (\'usOCN\', 0.36412381487296047), (\'usYHOO\', 0.36217456000137549), ...............]\n    """"""\n    if show:\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xafipython\xe7\x8e\xaf\xe5\xa2\x83\xe5\x86\xb3\xe5\xae\x9a\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba\xe5\x87\xbd\xe6\x95\xb0\n        log_func = logging.info if ABuEnv.g_is_ipython else print\n        log_func(sorted_ret[:show_cnt])\n        # \xe7\xbb\x98\xe5\x88\xb6show_cnt\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe8\x82\xa1\xe4\xbb\xb7\xe8\xb5\xb0\xe5\x8a\xbf\n        ABuSimilarDrawing.draw_show_close(sorted_ret, cmp_cnt, show_cnt)\n\n    return sorted_ret\n\n\n@consume_time\n@from_local\ndef multi_corr_df(corr_jobs, cmp_cnt=252, n_folds=None, start=None, end=None):\n    """"""\n    \xe8\xa2\xabfrom_local\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe8\xa3\x85\xe9\xa5\xb0 \xe5\x8d\xb3\xe5\xbc\xba\xe5\x88\xb6\xe8\xb5\xb0\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8c\xb9\xe9\x85\x8d\xe5\xb8\x82\xe5\x9c\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84benchmark\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\n    \xe4\xbd\xbf\xe7\x94\xa8_all_market_cg\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1change_df\xe4\xbd\xbf\xe7\x94\xa8\n    corr_jobs\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\x88\x86\xe5\x88\xab\xe8\xae\xa1\xe7\xae\x97change_df\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe6\x9c\x89\xe7\xbb\x93\xe6\x9e\x9c\xe7\xbb\x84\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x85\xb8\xe8\xbf\x94\xe5\x9b\x9e\n    :param corr_jobs: \xe9\x9c\x80\xe8\xa6\x81\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95ECoreCorrType\xe5\xba\x8f\xe5\x88\x97\n    :param cmp_cnt: \xe5\xaf\xb9\xe6\xaf\x94\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8cint\n    :param n_folds: \xe5\xaf\xb9\xe6\xaf\x94n_folds\xe5\xb9\xb4\xef\xbc\x8cint\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param start: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :param end: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe9\x80\x89\xe5\x8f\x82\xe6\x95\xb0\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe7\x9f\xa9\xe9\x98\xb5\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba eg\xef\xbc\x9a\n\n            {\'pears\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3013  0.3690  0.4015  0.3680  0.3015  0.3706  0.4320\n            usFB           0.3013  1.0000  0.6609  0.2746  0.1978  0.4080  0.2856  0.2438\n            usGOOG         0.3690  0.6609  1.0000  0.3682  0.1821  0.3477  0.3040  0.2917\n            usNOAH         0.4015  0.2746  0.3682  1.0000  0.3628  0.2178  0.4645  0.4488\n            usSFUN         0.3680  0.1978  0.1821  0.3628  1.0000  0.2513  0.2843  0.4883\n            usTSLA         0.3015  0.4080  0.3477  0.2178  0.2513  1.0000  0.2327  0.3340\n            usVIPS         0.3706  0.2856  0.3040  0.4645  0.2843  0.2327  1.0000  0.4189\n            usWUBA         0.4320  0.2438  0.2917  0.4488  0.4883  0.3340  0.4189  1.0000\n\n            \'sperm\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3888  0.4549  0.4184  0.3747  0.3623  0.4333  0.4396\n            usFB           0.3888  1.0000  0.7013  0.2927  0.2379  0.4200  0.3123  0.2216\n            usGOOG         0.4549  0.7013  1.0000  0.3797  0.2413  0.3871  0.3922  0.3035\n            usNOAH         0.4184  0.2927  0.3797  1.0000  0.3581  0.2066  0.4643  0.4382\n            usSFUN         0.3747  0.2379  0.2413  0.3581  1.0000  0.2645  0.3890  0.4693\n            usTSLA         0.3623  0.4200  0.3871  0.2066  0.2645  1.0000  0.2540  0.2801\n            usVIPS         0.4333  0.3123  0.3922  0.4643  0.3890  0.2540  1.0000  0.4080\n            usWUBA         0.4396  0.2216  0.3035  0.4382  0.4693  0.2801  0.4080  1.0000 }\n    """"""\n\n    if isinstance(corr_jobs, ECoreCorrType):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\xe4\xb8\x80\xe4\xb8\xaaECoreCorrType\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe5\x85\xbc\xe5\xae\xb9\xef\xbc\x8c\xe5\x81\x9a\xe6\x88\x90\xe5\xba\x8f\xe5\x88\x97\n        corr_jobs = [corr_jobs]\n\n    if any([not isinstance(corr_job, ECoreCorrType) for corr_job in corr_jobs]):\n        # \xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe5\x85\x83\xe7\xb4\xa0\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xafECoreCorrType\n        raise TypeError(\'corr_job must ECoreCorrType\')\n\n    # \xe5\x8c\xb9\xe9\x85\x8d\xe5\xb8\x82\xe5\x9c\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84benchmark\n    if ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_US:\n        # \xe7\xbe\x8e\xe8\x82\xa1\n        benchmark = IndexSymbol.IXIC\n    elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_HK:\n        # \xe6\xb8\xaf\xe8\x82\xa1\n        benchmark = IndexSymbol.HSI\n    elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_CN:\n        # a\xe8\x82\xa1\n        benchmark = IndexSymbol.SH\n    elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN:\n        # \xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\n        benchmark = IndexSymbol.BM_FUTURES_CN\n    elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_TC:\n        # \xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\n        benchmark = IndexSymbol.TC_INX\n    elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_OPTIONS_US:\n        # \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xe6\x9a\x82\xe6\x97\xb6\xe4\xb9\x9f\xe4\xbb\xa5IXIC\xe5\x81\x9a\xe4\xb8\xba\xe6\xa0\x87\xe5\xb0\xba\n        benchmark = IndexSymbol.IXIC\n    elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL:\n        # \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x9a\x82\xe6\x97\xb6\xe4\xb9\x9f\xe4\xbb\xa5BM_FUTURES_GB\xe5\x81\x9a\xe4\xb8\xba\xe6\xa0\x87\xe5\xb0\xba\n        benchmark = IndexSymbol.BM_FUTURES_GB\n    else:\n        # \xe6\xb2\xa1\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\x8a\xe4\xb9\x9f\xe4\xb8\x8d\xe6\x8a\x9b\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe9\x9a\x8f\xe4\xbe\xbf\xe7\xbb\x99\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xbf\x99\xe9\x87\x8c\xe8\xa6\x81\xe7\x9a\x84benchmark\xe4\xb8\xbb\xe8\xa6\x81\xe7\x9b\xae\xe7\x9a\x84\xe5\x8f\xaa\xe6\x98\xaf\xe5\x81\x9a\xe4\xb8\xba\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\n        benchmark = IndexSymbol.IXIC\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8_all_market_cg\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xbasymbol\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1change_df\n    change_df = _all_market_cg(benchmark, cmp_cnt=cmp_cnt, n_folds=n_folds, start=start, end=end)\n\n    # \xe4\xbd\xbf\xe7\x94\xa8corr_jobs\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\x88\x86\xe5\x88\xab\xe8\xae\xa1\xe7\xae\x97change_df\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe6\x9c\x89\xe7\xbb\x93\xe6\x9e\x9c\xe7\xbb\x84\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x85\xb8\xe8\xbf\x94\xe5\x9b\x9e\n    return {corr_job.value: ABuCorrcoef.corr_matrix(change_df, corr_job) for corr_job in corr_jobs}\n'"
abupy/SimilarBu/ABuSimilarCache.py,0,"b""from __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\n\nimport pandas as pd\n\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu import ABuFileUtil\n\nSIMILAR_CACHE_PATH = os.path.join(ABuEnv.g_project_cache_dir, 'similar.hdf5')\n\n\ndef similar_key(symbol, cmp_cnt=None, n_folds=None, start=None, end=None, corr_type=None):\n    return '{}_{}_{}_{}_{}_{}'.format(symbol, cmp_cnt, n_folds, start, end, corr_type)\n\n\ndef dump_2_hdh5(key, obj):\n    ABuFileUtil.dump_hdf5(SIMILAR_CACHE_PATH, obj, key)\n\n\ndef load_2_hdh5(key):\n    return ABuFileUtil.load_hdf5(SIMILAR_CACHE_PATH, key)\n\n\ndef show_keys():\n    with pd.HDFStore(SIMILAR_CACHE_PATH) as h5s:\n        return h5s.keys()\n\n\ndef clear_cache(key=None):\n    if key is not None:\n        ABuFileUtil.del_hdf5(SIMILAR_CACHE_PATH, key)\n    else:\n        ABuFileUtil.del_file(SIMILAR_CACHE_PATH)\n"""
abupy/SimilarBu/ABuSimilarDrawing.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport itertools\nimport math\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom ..MarketBu import ABuSymbolPd\nfrom ..UtilBu import ABuScalerUtil\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n""""""\xe9\xa2\x84\xe5\xa4\x87\xe9\xa2\x9c\xe8\x89\xb2\xe5\xba\x8f\xe5\x88\x97\xe9\x9b\x86\xef\xbc\x8c\xe8\xb6\x85\xe5\x87\xba\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe9\x87\x8f\xe5\xba\x94\xe4\xbd\xbf\xe7\x94\xa8itertools.cycle\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x98\xe5\x88\xb6""""""\nK_PLT_MAP_STYLE = [\n    \'b\', \'c\', \'g\', \'k\', \'m\', \'r\', \'y\', \'b--\', \'c--\', \'g--\', \'k--\']\n\n\ndef draw_show_close(sorted_ret, target_count, show_cnt):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x8f\x82\xe6\x95\xb0target_count\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xbamake_kl_df\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0n_folds\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8ABuScalerUtil.scaler_std\xe5\xb0\x86show_cnt\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe4\xbc\xbc\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe9\x87\x8f\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param sorted_ret: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x85\x83\xe7\xb4\xa0\xe5\xbd\xa2\xe5\xa6\x82(\'usTSLA\', 1.0), (\'usSINA\', 0.45565379371028253).....\n    :param target_count: \xe9\x9c\x80\xe8\xa6\x81\xe8\xaf\xb7\xe6\xb1\x82\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cint\n    :param show_cnt: \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96top show_cnt\xe7\x9b\xb8\xe5\x85\xb3\xe4\xb8\xaa\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb5\xb0\xe5\x8a\xbf\n    """"""\n    if show_cnt is None and not isinstance(show_cnt, int):\n        return\n    # \xe8\xa7\x84\xe9\x81\xbfsorted_ret\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe5\xa4\x9f\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\n    show_cnt = min(show_cnt, len(sorted_ret))\n    if show_cnt <= 0:\n        return\n\n    with plt_show():\n        # \xe5\xbe\xaa\xe7\x8e\xafK_PLT_MAP_STYLE\xe9\xa2\x9c\xe8\x89\xb2\xe9\x9b\x86\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe5\x90\x84\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        for x, cs_color in zip(xrange(0, show_cnt), itertools.cycle(K_PLT_MAP_STYLE)):\n            # \xe9\x80\x9a\xe8\xbf\x87\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x8f\x82\xe6\x95\xb0target_count\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe8\xa6\x81\xe8\xaf\xb7\xe6\xb1\x82\xe5\x87\xa0\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xaen_folds\n            n_folds = int(math.ceil(target_count / ABuEnv.g_market_trade_year))\n            # sorted_ret[x] : (\'usTSLA\', 1.0) -> sorted_ret[x][0]: usTSLA\n            # FIXME \xe6\x9a\x82\xe6\x97\xb6\xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x80\xe4\xb8\xaabug\xe5\xa6\x82\xe6\x9e\x9c\xe8\xaf\xb7\xe6\xb1\x82\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xafstart\xef\xbc\x8cend\xef\xbc\x8c\xe6\x96\xb9\xe5\xbc\x8f\xe9\x82\xa3\xe4\xb9\x88\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xe5\xb0\xb1\xe4\xb8\x8d\xe7\xac\xa6\xe5\x90\x88\xe4\xba\x86\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe5\xae\x8c\xe6\x95\xb4\xe7\x9a\x84\xe4\xbf\xa1\xe6\x81\xaf\n            df = ABuSymbolPd.make_kl_df(sorted_ret[x][0], n_folds=n_folds)\n            # \xe6\x94\xaf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96close_array\n            close_array = df[\'close\']\n            if target_count < len(close_array):\n                # \xe5\x86\x8d\xe6\xac\xa1\xe7\xa1\xae\xe8\xae\xa4\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\n                close_array = close_array[:int(target_count)]\n\n            cs_np = np.array(close_array, dtype=np.float)\n            # \xe4\xbd\xbf\xe7\x94\xa8ABuScalerUtil.scaler_std\xe5\xb0\x86\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe9\x87\x8f\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n            plt.plot(ABuScalerUtil.scaler_std(cs_np), cs_color, label=sorted_ret[x][0])\n        plt.legend(loc=\'best\', bbox_to_anchor=(1.05, 1), borderaxespad=0.)\n\n\ndef draw_show_close_array(sorted_ret, cs_array):\n    """"""\n    \xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xadcs_array\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    :param sorted_ret: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x85\x83\xe7\xb4\xa0\xe5\xbd\xa2\xe5\xa6\x82(\'usTSLA\', 1.0), (\'usSINA\', 0.45565379371028253).....\n    :param cs_array: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    # \xe5\xbe\xaa\xe7\x8e\xafK_PLT_MAP_STYLE\xe9\xa2\x9c\xe8\x89\xb2\xe9\x9b\x86\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe5\x90\x84\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    for x, (cs_np, cs_color) in enumerate(zip(cs_array, itertools.cycle(K_PLT_MAP_STYLE))):\n        # sorted_ret[x] : (\'usTSLA\', 1.0) -> sorted_ret[x][0]: usTSLA\n        plt.plot(cs_np, cs_color, label=sorted_ret[x][0], bbox_to_anchor=(1.05, 1), loc=3, borderaxespad=0.)\n\n    plt.legend(loc=\'best\')\n    plt.show()\n'"
abupy/SimilarBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom . import ABuCorrcoef\nfrom . import ABuSimilar\nfrom .ABuCorrcoef import ECoreCorrType\nfrom .ABuSimilar import find_similar_with_se, find_similar_with_folds, find_similar_with_cnt\n\n__all__ = [\n    'ABuSimilar',\n    'ABuSimilarDrawing',\n    'ABuCorrcoef',\n    'ECoreCorrType',\n    'find_similar_with_se',\n    'find_similar_with_folds',\n    'find_similar_with_cnt'\n]\n"""
abupy/SlippageBu/ABuSlippage.py,0,b'# -*- encoding:utf-8 -*-\nfrom __future__ import absolute_import\n\n# noinspection all\nfrom . import ABuSlippageBuyBase as sbb\n# noinspection all\nfrom . import ABuSlippageSellBase as ssb\n# noinspection all\nfrom . import ABuSlippageBuyMean as sbm\n'
abupy/SlippageBu/ABuSlippageBuyBase.py,8,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x9a\xe6\x9a\x82\xe6\x97\xb6\xe8\xbf\x81\xe7\xa7\xbb\xe7\xae\x80\xe5\x8d\x95\xe5\xae\x9e\xe7\x8e\xb0\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe7\xac\xa6\xe5\x90\x88\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x9c\x80\xe6\xb1\x82\xef\xbc\x8c\xe5\xa6\x82\xe8\xbf\x81\xe7\xa7\xbb\xe5\xae\x9e\xe7\x9b\x98\xe6\xa8\xa1\xe5\x9d\x97\n    \xe9\x9c\x80\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x97\xa5\xe5\x86\x85\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe6\x97\xa5\xe5\x86\x85\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe6\x97\xa5\xe5\x86\x85\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe6\x9b\xb4\xe5\xbe\xae\xe8\xa7\x82\xe7\x9a\x84\n    \xe5\xae\x9e\xe7\x8e\xb0\xe6\x97\xa5\xe5\x86\x85\xe6\x8b\xa9\xe6\x97\xb6\xe6\xbb\x91\xe7\x82\xb9\xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x8c\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe5\xa4\xa7\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe5\x86\xb2\xe5\x87\xbb\xe6\x88\x90\xe6\x9c\xac\xe5\x8f\x8a\xe7\xb3\xbb\xe7\xbb\x9f\xe5\xa4\x96\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb9\x85\xe6\xbb\x91\xe7\x82\xb9\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom abc import ABCMeta, abstractmethod\nimport functools\n\nimport numpy as np\n\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuSlippageBuyBase(six.with_metaclass(ABCMeta, object)):\n    """"""\xe9\x9d\x9e\xe9\xab\x98\xe9\xa2\x91\xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe5\x86\xb3\xe7\xad\x96\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    def __init__(self, kl_pd_buy, factor_name):\n        """"""\n        :param kl_pd_buy: \xe4\xba\xa4\xe6\x98\x93\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        :param factor_name: ABuFactorBuyBases\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84factor_name\n        """"""\n        self.buy_price = np.inf\n        self.kl_pd_buy = kl_pd_buy\n        self.factor_name = factor_name\n\n    def fit(self):\n        """"""\xe5\x81\x9a\xe5\x9f\xba\xe7\xa1\x80\xe9\xaa\x8c\xe8\xaf\x81\xe6\xaf\x94\xe5\xa6\x82\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x98\xaf\xe5\x90\xa6\xe5\x81\x9c\xe7\x9b\x98\xe5\x90\x8e\xe8\xb0\x83\xe7\x94\xa8fit_price""""""\n        if self.kl_pd_buy.empty or self.kl_pd_buy.volume == 0:\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\xe4\xb8\xba\xe6\x94\xbe\xe5\xbc\x83\xe5\x8d\x95\xe5\xad\x90\n            return np.inf\n\n        return self.fit_price()\n\n    @abstractmethod\n    def fit_price(self):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe4\xb8\xbb\xe8\xa6\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x86\xb3\xe7\xad\x96\xe4\xba\xa4\xe6\x98\x93\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\n        """"""\n        pass\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe6\xb6\xa8\xe5\x81\x9c\xe6\x9d\xbf\xe6\xbb\x91\xe7\x82\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe6\xae\x8a\xe5\xa4\x84\xe7\x90\x86, \xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xad\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xe5\xa6\x82\xef\xbc\x9aabupy.slippage.sbb.g_enable_limit_up = True""""""\ng_enable_limit_up = False\n""""""\n    \xe5\x88\x9d\xe5\xa7\x8b\xe8\xae\xbe\xe5\xae\x9a\xe6\xb6\xa8\xe5\x81\x9c\xe6\x9d\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xa6\x82\xe7\x8e\x87100%\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x9c\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\xae\x8c\xe4\xb8\x80\xe6\xac\xa1\xe6\xa6\x82\xe7\x8e\x87\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\x81\x9a\xe4\xba\x8c\xe6\xac\xa1\xe6\xa6\x82\xe7\x8e\x87\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\n    \xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xe5\xa6\x82\xef\xbc\x9aabupy.slippage.sbb.g_limit_up_deal_chance = 0.5\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbf\xae\xe6\x94\xb9\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe6\xa6\x82\xe7\x8e\x8750%\n""""""\ng_limit_up_deal_chance = 1\n""""""\xe5\x9c\xa8\xe9\x9b\x86\xe5\x90\x88\xe7\xab\x9e\xe4\xbb\xb7\xe9\x98\xb6\xe6\xae\xb5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xb7\xb2\xe7\xbb\x8f\xe8\xbe\xbe\xe6\x88\x90\xe6\xb6\xa8\xe5\x81\x9c\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe5\x8a\x9f\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.2, \xe5\x8d\xb320%\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87""""""\ng_pre_limit_up_rate = 0.2\n\n\ndef slippage_limit_up(func):\n    """"""\n        \xe9\x92\x88\xe5\xaf\xb9a\xe8\x82\xa1\xe6\xb6\xa8\xe5\x81\x9c\xe6\x9d\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe8\xa3\x85\xe9\xa5\xb0\xe4\xb8\x8e\xe4\xb8\x8d\xe8\xa3\x85\xe9\xa5\xb0\xe5\x9c\xa8fit_price\xe4\xb8\x8a\n        \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xae\x9e\xe7\x9b\x98\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xef\xbc\x8c\xe5\x8f\x8a\xe6\x97\xa5\xe5\x86\x85\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe9\x9c\x80\xe7\x89\xb9\xe5\x88\xab\xe5\xa4\x84\xe7\x90\x86\xe3\x80\x82\n        \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\x89\xb9\xe5\x88\xab\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa4\x84\xe7\x90\x86\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe6\xa6\x82\xe7\x8e\x87\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\n        \xe5\x8f\x8a\xe6\xb6\xa8\xe5\x81\x9c\xe4\xb8\x8b\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe6\xb6\xa8\xe5\x81\x9c\xe4\xb8\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xa8\xa1\xe5\x9e\x8b\xe4\xb8\xba\xef\xbc\x8c\xe8\xb6\x8a\xe9\x9d\xa0\xe8\xbf\x91\xe6\xb6\xa8\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\n        \xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xa6\x82\xe7\x8e\x87\xe8\xb6\x8a\xe5\xa4\xa7\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9c\xa8\xe6\xb6\xa8\xe5\x81\x9c\xe4\xb8\x8b\xe9\xa2\x84\xe6\x9c\x9f\xe4\xbb\xa5\xe9\x9d\xa0\xe8\xbf\x91\xe6\xb6\xa8\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe7\xbc\xba\xe7\x82\xb9\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xef\xbc\x8c\n        \xe5\xaf\xbc\xe8\x87\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\x87\xba\xe7\x8e\xb0\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n    """"""\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        if g_enable_limit_up and self.kl_pd_buy.p_change >= 10 and self.kl_pd_buy.high == self.kl_pd_buy.close:\n            """"""\n                \xe6\xb6\xa8\xe5\x81\x9c\xe6\x9d\xbf\xe5\x91\xbd\xe4\xb8\xad\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xae\xe6\xb6\xa8\xe5\x81\x9c\xe6\x9d\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xa6\x82\xe7\x8e\x87(g_limit_up_deal_chance)\xe6\x9d\xa5\xe4\xbd\x9c\xe4\xb8\xba\n                \xe4\xba\x8c\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x88\x86\xe5\xb8\x83\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87\n            """"""\n            if self.kl_pd_buy.high == self.kl_pd_buy.low:\n                # 10\xe4\xb8\xaa\xe7\x82\xb9\xef\xbc\x8c\xe4\xb8\x94\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x9d\xe6\x9c\x80\xe4\xbd\x8e\xef\xbc\x8c\xe5\x8d\xb3a\xe8\x82\xa1\xe5\x9c\xa8\xe9\x9b\x86\xe5\x90\x88\xe7\xab\x9e\xe4\xbb\xb7\xe9\x98\xb6\xe6\xae\xb5\xe8\xbe\xbe\xe6\x88\x90\xe6\xb6\xa8\xe5\x81\x9c\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87\xe9\x99\x8d\xe4\xbd\x8e\xe5\x88\xb0g_limit_up_deal_chance * 0.2\n                # TODO \xe8\xbf\x99\xe4\xb8\xaa\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa5\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xbd\x93\xe6\x97\xa5\xe6\x9d\xa5\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\n                limit_up_deal_chance = g_limit_up_deal_chance * g_pre_limit_up_rate\n            else:\n                limit_up_deal_chance = g_limit_up_deal_chance\n\n            deal = np.random.binomial(1, limit_up_deal_chance)\n            if deal:\n                if self.kl_pd_buy.high == self.kl_pd_buy.low:\n                    return self.kl_pd_buy.high\n\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe5\x8a\x9f\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\xb7\xe4\xbd\x8d\xef\xbc\x8c\xe9\xa6\x96\xe9\x80\x89arange\xe5\x87\xba\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\x8e\xe4\xbd\x8e\xe5\x88\xb0\xe6\xb6\xa8\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x97\xb4\xe9\x9a\x940.01\n                price_lh = np.arange(self.kl_pd_buy.low, self.kl_pd_buy.high, 0.01)\n                # \xe6\x9e\x84\xe9\x80\xa0\xe6\xa6\x82\xe7\x8e\x87\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe5\xae\x83\xe6\xaf\x94\xe5\xa6\x82\xe6\x8c\x87\xe6\x95\xb0\xe5\x88\x86\xe5\xb8\x83\xe7\xad\x89\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe4\xbb\xa5\xe6\xb6\xa8\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe7\xae\x80\xe5\x8d\x95\xe6\x96\xb9\xe5\xbc\x8f\n                lh_chance = np.linspace(0, 1, len(price_lh))\n                """"""\n                    \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87, \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe5\x88\x86\xe5\xb8\x83\xe5\xb9\xb6\xe4\xb8\x8d\xe9\x99\xa1\xe5\xb3\xad\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb6\xa8\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x99\x84\xe8\xbf\x91\xe6\x9d\x83\xe9\x87\x8d\xe5\xb9\xb6\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbe\x88\xe9\xab\x98\xef\xbc\x8c\n                    \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82\xef\xbc\x9anp.power(price_hl, len(price_hl) / 2) / np.power(price_hl, len(price_hl) / 2).sum()\n                    \xe6\x9d\xa5\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe6\x8f\x90\xe5\x8d\x87\xe6\xb6\xa8\xe8\xb7\x8c\xe6\x9d\xbf\xe9\x99\x84\xe8\xbf\x91\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\x83\xe9\x87\x8d\n                """"""\n                # noinspection PyUnresolvedReferences\n                p = lh_chance / lh_chance.sum()\n                # \xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe9\x9a\x8f\xe6\x9c\xba\xe5\x8a\xa0\xe6\x9d\x83\xe6\xa6\x82\xe7\x8e\x87\xe6\x8a\xbd\xe5\x8f\x96\xef\xbc\x8c\xe9\x80\x89\xe4\xb8\xad\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe6\xb6\xa8\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\n                return np.random.choice(price_lh, 1, p=p)[0]\n            # \xe6\xb2\xa1\xe8\x83\xbd\xe6\x88\x90\xe4\xba\xa4\xe8\xbf\x94\xe5\x9b\x9e\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\n            return np.inf\n        else:\n            return func(self, *args, **kwargs)\n    return wrapper\n'"
abupy/SlippageBu/ABuSlippageBuyMean.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe7\xa4\xba\xe4\xbe\x8b\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x9a\xe5\x9d\x87\xe4\xbb\xb7\xe4\xb9\xb0\xe5\x85\xa5\n    \xe6\x9c\x80\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbc\x98\xe7\x82\xb9\xe7\xae\x80\xe5\x8d\x95\xef\xbc\x8c\xe4\xb8\x94\xe5\x9b\x9e\xe6\xb5\x8b\xe9\xab\x98\xe6\x95\x88\xef\xbc\x8c\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\n    \xe6\x95\xb0\xe9\x87\x8f\xe8\xb6\xb3\xe5\xa4\x9f\xe5\xa4\x9a\xe7\x9a\x84\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xe4\xb9\x9f\xe8\x83\xbd\xe6\x8e\xa5\xe8\xbf\x91\xe5\xae\x9e\xe7\x9b\x98\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport numpy as np\n\nfrom .ABuSlippageBuyBase import AbuSlippageBuyBase, slippage_limit_up\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8b\xe8\xb7\x8c\xe9\x98\x80\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82\xef\xbc\x9aabupy.slippage.sbm.g_open_down_rate = 0.02""""""\ng_open_down_rate = 0.07\n\n\nclass AbuSlippageBuyMean(AbuSlippageBuyBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x9d\x87\xe4\xbb\xb7\xe4\xb9\xb0\xe5\x85\xa5\xe7\xb1\xbb""""""\n\n    @slippage_limit_up\n    def fit_price(self):\n        """"""\n        \xe5\x8f\x96\xe5\xbd\x93\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe6\x9c\x80\xe4\xbd\x8e\xe5\x9d\x87\xe4\xbb\xb7\xe5\x81\x9a\xe4\xb8\xba\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\xb7\xe6\xa0\xbc\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\n        """"""\n\n        # TODO \xe5\x9f\xba\xe7\xb1\xbb\xe6\x8f\x90\xe5\x8f\x96\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe6\xa0\xb9\xe6\x8d\xae\xe9\x9c\x80\xe8\xa6\x81\xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x8a\xe6\xa0\xb9\xe6\x8d\xaeorder\xe7\x9a\x84call\xef\xbc\x8cput\xe6\x98\x8e\xe7\xa1\xae\xe7\xbb\x86\xe8\x8a\x82\xe9\x80\xbb\xe8\xbe\x91\n        if self.kl_pd_buy.pre_close == 0 or (self.kl_pd_buy.open / self.kl_pd_buy.pre_close) < (1 - g_open_down_rate):\n            # \xe5\xbc\x80\xe7\x9b\x98\xe5\xb0\xb1\xe4\xb8\x8b\xe8\xb7\x8c\xe4\xb8\x80\xe5\xae\x9a\xe6\xaf\x94\xe4\xbe\x8b\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe6\x94\xbe\xe5\xbc\x83\xe5\x8d\x95\xe5\xad\x90\n            return np.inf\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba\xe5\xbd\x93\xe5\xa4\xa9\xe5\x9d\x87\xe4\xbb\xb7\xef\xbc\x8c\xe5\x8d\xb3\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x8c\xe6\x9c\x80\xe4\xbd\x8e\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe5\xb9\xb3\xe5\x9d\x87\xe7\xad\x89\xe6\x96\xb9\xe5\xbc\x8f\xe8\xae\xa1\xe7\xae\x97\n        self.buy_price = np.mean([self.kl_pd_buy[\'high\'], self.kl_pd_buy[\'low\']])\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\xb7\xe6\xa0\xbc\n        return self.buy_price\n'"
abupy/SlippageBu/ABuSlippageSellBase.py,7,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x9a\xe6\x9a\x82\xe6\x97\xb6\xe8\xbf\x81\xe7\xa7\xbb\xe7\xae\x80\xe5\x8d\x95\xe5\xae\x9e\xe7\x8e\xb0\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe7\xac\xa6\xe5\x90\x88\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x9c\x80\xe6\xb1\x82\xef\xbc\x8c\xe5\xa6\x82\xe8\xbf\x81\xe7\xa7\xbb\xe5\xae\x9e\xe7\x9b\x98\xe6\xa8\xa1\xe5\x9d\x97\n    \xe9\x9c\x80\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x97\xa5\xe5\x86\x85\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe6\x97\xa5\xe5\x86\x85\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe6\x97\xa5\xe5\x86\x85\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe6\x9b\xb4\xe5\xbe\xae\xe8\xa7\x82\xe7\x9a\x84\n    \xe5\xae\x9e\xe7\x8e\xb0\xe6\x97\xa5\xe5\x86\x85\xe6\x8b\xa9\xe6\x97\xb6\xe6\xbb\x91\xe7\x82\xb9\xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x8c\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe5\xa4\xa7\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe5\x86\xb2\xe5\x87\xbb\xe6\x88\x90\xe6\x9c\xac\xe5\x8f\x8a\xe7\xb3\xbb\xe7\xbb\x9f\xe5\xa4\x96\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb9\x85\xe6\xbb\x91\xe7\x82\xb9\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom abc import ABCMeta, abstractmethod\nimport functools\n\nimport numpy as np\n\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuSlippageSellBase(six.with_metaclass(ABCMeta, object)):\n    """"""\xe9\x9d\x9e\xe9\xab\x98\xe9\xa2\x91\xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x8d\x96\xe5\x87\xba\xe5\x86\xb3\xe7\xad\x96\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    def __init__(self, kl_pd_sell, factor_name):\n        """"""\n        :param kl_pd_sell: \xe4\xba\xa4\xe6\x98\x93\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\n        :param factor_name: ABuFactorSellBase\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84factor_name\n        """"""\n        self.sell_price = np.inf\n        self.kl_pd_sell = kl_pd_sell\n        self.factor_name = factor_name\n\n    def fit(self):\n        """"""\xe5\x81\x9a\xe5\x9f\xba\xe7\xa1\x80\xe9\xaa\x8c\xe8\xaf\x81\xe6\xaf\x94\xe5\xa6\x82\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x98\xaf\xe5\x90\xa6\xe5\x81\x9c\xe7\x9b\x98\xe5\x90\x8e\xe8\xb0\x83\xe7\x94\xa8fit_price""""""\n        if self.kl_pd_sell.empty or self.kl_pd_sell.volume == 0:\n            # \xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\xe4\xb8\xba\xe6\x94\xbe\xe5\xbc\x83\xe5\x8d\x95\xe5\xad\x90\n            return -np.inf\n\n        return self.fit_price()\n\n    @abstractmethod\n    def fit_price(self):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe4\xb8\xbb\xe8\xa6\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x86\xb3\xe7\xad\x96\xe4\xba\xa4\xe6\x98\x93\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\n        """"""\n        pass\n\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe8\xb7\x8c\xe5\x81\x9c\xe6\x9d\xbf\xe6\xbb\x91\xe7\x82\xb9\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe6\xae\x8a\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x85\xb3\xe9\x97\xad\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xe5\xa6\x82\xef\xbc\x9aabupy.slippage.ssb.g_enable_limit_down = True""""""\ng_enable_limit_down = False\n""""""\n    \xe5\x88\x9d\xe5\xa7\x8b\xe8\xae\xbe\xe5\xae\x9a\xe8\xb7\x8c\xe5\x81\x9c\xe6\x9d\xbf\xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe4\xba\xa4\xe6\xa6\x82\xe7\x8e\x87100%\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x9c\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\xae\x8c\xe4\xb8\x80\xe6\xac\xa1\xe6\xa6\x82\xe7\x8e\x87\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\x81\x9a\xe4\xba\x8c\xe6\xac\xa1\xe6\xa6\x82\xe7\x8e\x87\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\n    \xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xe5\xa6\x82\xef\xbc\x9aabupy.slippage.ssb.g_limit_down_deal_chance = 0.5\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbf\xae\xe6\x94\xb9\xe4\xb8\xba50%\xe6\x88\x90\xe5\x8a\x9f\xe5\x8d\x96\xe5\x87\xba\xe6\xa6\x82\xe7\x8e\x87\n""""""\ng_limit_down_deal_chance = 1\n""""""\xe5\x9c\xa8\xe9\x9b\x86\xe5\x90\x88\xe7\xab\x9e\xe4\xbb\xb7\xe9\x98\xb6\xe6\xae\xb5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xb7\xb2\xe8\xbe\xbe\xe6\x88\x90\xe8\xb7\x8c\xe5\x81\x9c\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe5\x8a\x9f\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.2, \xe5\x8d\xb320%\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87""""""\ng_pre_limit_down_rate = 0.2\n\n\ndef slippage_limit_down(func):\n    """"""\n        \xe9\x92\x88\xe5\xaf\xb9a\xe8\x82\xa1\xe8\xb7\x8c\xe5\x81\x9c\xe6\x9d\xbf\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe8\xa3\x85\xe9\xa5\xb0\xe4\xb8\x8e\xe4\xb8\x8d\xe8\xa3\x85\xe9\xa5\xb0\xe5\x9c\xa8fit_price\xe4\xb8\x8a\n        \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xae\x9e\xe7\x9b\x98\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xef\xbc\x8c\xe5\x8f\x8a\xe6\x97\xa5\xe5\x86\x85\xe6\x8b\xa9\xe6\x97\xb6\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe9\x9c\x80\xe7\x89\xb9\xe5\x88\xab\xe5\xa4\x84\xe7\x90\x86\xe3\x80\x82\n        \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\x89\xb9\xe5\x88\xab\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa4\x84\xe7\x90\x86\xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe6\xa6\x82\xe7\x8e\x87\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\n        \xe5\x8f\x8a\xe8\xb7\x8c\xe5\x81\x9c\xe4\xb8\x8b\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe8\xb7\x8c\xe5\x81\x9c\xe4\xb8\x8b\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xa8\xa1\xe5\x9e\x8b\xe4\xb8\xba\xef\xbc\x8c\xe8\xb6\x8a\xe9\x9d\xa0\xe8\xbf\x91\xe8\xb7\x8c\xe5\x81\x9c\xe6\x9d\xbf\xe4\xbb\xb7\xe6\xa0\xbc\n        \xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe4\xba\xa4\xe6\xa6\x82\xe7\x8e\x87\xe8\xb6\x8a\xe5\xa4\xa7, \xe5\x8d\xb3\xe5\x9c\xa8\xe8\xb7\x8c\xe5\x81\x9c\xe4\xb8\x8b\xe9\xa2\x84\xe6\x9c\x9f\xe4\xbb\xa5\xe9\x9d\xa0\xe8\xbf\x91\xe8\xb7\x8c\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe7\xbc\xba\xe7\x82\xb9\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xef\xbc\x8c\n        \xe5\xaf\xbc\xe8\x87\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\x87\xba\xe7\x8e\xb0\xe4\xb8\x8d\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n    """"""\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        if g_enable_limit_down and self.kl_pd_sell.p_change <= -10 and self.kl_pd_sell.low == self.kl_pd_sell.close:\n            """"""\n                \xe8\xb7\x8c\xe5\x81\x9c\xe6\x9d\xbf\xe5\x91\xbd\xe4\xb8\xad\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xae\xe8\xb7\x8c\xe5\x81\x9c\xe6\x9d\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x90\xe4\xba\xa4\xe6\xa6\x82\xe7\x8e\x87(g_limit_down_deal_chance)\xe6\x9d\xa5\xe4\xbd\x9c\xe4\xb8\xba\n                \xe4\xba\x8c\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x88\x86\xe5\xb8\x83\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87\n            """"""\n\n            if self.kl_pd_sell.high == self.kl_pd_sell.low:\n                # 10\xe4\xb8\xaa\xe7\x82\xb9\xef\xbc\x8c\xe4\xb8\x94\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x9d\xe6\x9c\x80\xe4\xbd\x8e\xef\xbc\x8c\xe5\x8d\xb3a\xe8\x82\xa1\xe5\x9c\xa8\xe9\x9b\x86\xe5\x90\x88\xe7\xab\x9e\xe4\xbb\xb7\xe9\x98\xb6\xe6\xae\xb5\xe8\xbe\xbe\xe6\x88\x90\xe8\xb7\x8c\xe5\x81\x9c\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe5\x8a\x9f\xe6\xa6\x82\xe7\x8e\x87\xe9\x99\x8d\xe4\xbd\x8e\xe5\x88\xb0g_limit_down_deal_chance * 0.2\n                # TODO \xe8\xbf\x99\xe4\xb8\xaa\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa5\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\xbd\x93\xe6\x97\xa5\xe6\x9d\xa5\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\n                limit_down_deal_chance = g_limit_down_deal_chance * g_pre_limit_down_rate\n            else:\n                limit_down_deal_chance = g_limit_down_deal_chance\n\n            deal = np.random.binomial(1, limit_down_deal_chance)\n            if deal:\n                # \xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe5\x8a\x9f\xe5\x90\x8e\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\xb7\xe4\xbd\x8d\xef\xbc\x8c\xe9\xa6\x96\xe9\x80\x89arange\xe5\x87\xba\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\x8e\xe9\xab\x98\xe5\x88\xb0\xe8\xb7\x8c\xe5\x81\x9c\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x97\xb4\xe9\x9a\x94-0.01\n                if self.kl_pd_sell.high == self.kl_pd_sell.low:\n                    return self.kl_pd_sell.low\n\n                price_hl = np.arange(self.kl_pd_sell.high, self.kl_pd_sell.low, -0.01)\n                hl_chance = np.linspace(0, 1, len(price_hl))\n                # noinspection PyUnresolvedReferences\n                p = hl_chance / hl_chance.sum()\n                # \xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe9\x9a\x8f\xe6\x9c\xba\xe5\x8a\xa0\xe6\x9d\x83\xe6\xa6\x82\xe7\x8e\x87\xe6\x8a\xbd\xe5\x8f\x96\xef\xbc\x8c\xe9\x80\x89\xe4\xb8\xad\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\n                return np.random.choice(price_hl, 1, p=p)[0]\n            # \xe6\xb2\xa1\xe8\x83\xbd\xe6\x88\x90\xe4\xba\xa4\xe8\xbf\x94\xe5\x9b\x9e\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\n            return -np.inf\n        else:\n            return func(self, *args, **kwargs)\n    return wrapper\n'"
abupy/SlippageBu/ABuSlippageSellMean.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x8d\x96\xe5\x87\xba\xe7\xa4\xba\xe4\xbe\x8b\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x9a\xe5\x9d\x87\xe4\xbb\xb7\xe5\x8d\x96\xe5\x87\xba\n    \xe6\x9c\x80\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8d\x96\xe5\x87\xba\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbc\x98\xe7\x82\xb9\xe7\xae\x80\xe5\x8d\x95\xef\xbc\x8c\xe4\xb8\x94\xe5\x9b\x9e\xe6\xb5\x8b\xe9\xab\x98\xe6\x95\x88\xef\xbc\x8c\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\n    \xe6\x95\xb0\xe9\x87\x8f\xe8\xb6\xb3\xe5\xa4\x9f\xe5\xa4\x9a\xe7\x9a\x84\xe5\x89\x8d\xe6\x8f\x90\xe4\xb8\x8b\xe4\xb9\x9f\xe8\x83\xbd\xe6\x8e\xa5\xe8\xbf\x91\xe5\xae\x9e\xe7\x9b\x98\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport numpy as np\n\nfrom .ABuSlippageSellBase import AbuSlippageSellBase, slippage_limit_down\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuSlippageSellMean(AbuSlippageSellBase):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x9d\x87\xe4\xbb\xb7\xe5\x8d\x96\xe5\x87\xba\xe7\xb1\xbb""""""\n\n    @slippage_limit_down\n    def fit_price(self):\n        """"""\n        \xe5\x8f\x96\xe5\xbd\x93\xe5\xa4\xa9\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe6\x9c\x80\xe4\xbd\x8e\xe5\x9d\x87\xe4\xbb\xb7\xe5\x81\x9a\xe4\xb8\xba\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\xb7\xe6\xa0\xbc\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe5\x86\xb3\xe7\xad\x96\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\n        """"""\n\n        self.sell_price = np.mean([self.kl_pd_sell[\'high\'], self.kl_pd_sell[\'low\']])\n        return self.sell_price\n'"
abupy/SlippageBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuSlippageBuyBase import AbuSlippageBuyBase\nfrom .ABuSlippageBuyMean import AbuSlippageBuyMean\nfrom .ABuSlippageSellBase import AbuSlippageSellBase\nfrom .ABuSlippageSellMean import AbuSlippageSellMean\n\nfrom . import ABuSlippage as slippage\n\n__all__ = [\n    'AbuSlippageBuyBase',\n    'AbuSlippageBuyMean',\n    'AbuSlippageSellBase',\n    'AbuSlippageSellMean',\n\n    'slippage']\n"""
abupy/TLineBu/ABuTL.py,0,"b""from __future__ import absolute_import\n\nfrom . import ABuTLine as line\nfrom . import ABuTLExecute as execute\nfrom . import ABuTLAtr as atr\nfrom . import ABuTLGolden as golden\nfrom . import ABuTLJump as jump\nfrom . import ABuTLSimilar as similar\nfrom . import ABuTLVwap as vwap\nfrom . import ABuTLWave as wave\nfrom .ABuTLine import ESkeletonHow, EShiftDistanceHow, AbuTLine\n\n__all__ = [\n    'line',\n    'execute',\n    'atr',\n    'golden',\n    'jump',\n    'similar',\n    'vwap',\n    'wave',\n\n    'ESkeletonHow',\n    'EShiftDistanceHow',\n    'AbuTLine']\n"""
abupy/TLineBu/ABuTLAtr.py,6,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe8\xae\xa1\xe7\xae\x97\xe7\xba\xbfatr\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom ..TLineBu.ABuTLine import AbuTLine\nfrom ..CoreBu.ABuPdHelper import pd_rolling_std, pd_ewm_std\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef show_atr_std(kl_pd):\n    """"""\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96atr\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe5\x92\x8c\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xef\xbc\x8c\n    \xe6\xb3\xa8\xe6\x84\x8f\xe4\xbc\x9a\xe4\xbf\xae\xe6\x94\xb9kl_pd\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xb5\x8b\xe8\xaf\x95\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe6\x9c\xaa\xe5\x81\x9acopy\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n    \xe5\xa6\x82\xe4\xb8\x8d\xe8\x83\xbd\xe6\x94\xb9\xe5\x8a\xa8\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe8\x87\xaacopy\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x86\x8d\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    pre_atr21 = kl_pd[\'atr21\'].shift(1)\n    # noinspection PyTypeChecker\n    kl_pd[\'atr_change\'] = np.where(pre_atr21 == 0, 0, np.log(kl_pd[\'atr21\'] / pre_atr21))\n    kl_pd[\'mov_std\'] = pd_rolling_std(kl_pd[\'atr_change\'], window=20, center=False) * np.sqrt(20)\n    kl_pd[\'std_ewm\'] = pd_ewm_std(kl_pd[\'atr_change\'], span=20, min_periods=20, adjust=True) * np.sqrt(20)\n    kl_pd[[\'close\', \'atr21\', \'mov_std\', \'std_ewm\', \'atr_change\']].plot(subplots=True, figsize=(16, 12), grid=True)\n    plt.show()\n\n\ndef calc_atr_std(kl_pd, xd=21, ewm=True, show=True):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97atr\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe6\x88\x96\xe8\x80\x85\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\n    AbuTLine\xe5\xb0\x81\xe8\xa3\x85\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xae\x9e\xe4\xbd\x93\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe4\xbf\xae\xe6\x94\xb9kl_pd\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param xd: \xe8\xae\xa1\xe7\xae\x97\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe6\x88\x96\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\xaa\x97\xe5\x8f\xa3\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa421\n    :param ewm: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe8\xae\xa1\xe7\xae\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8AbuTLine.show\xe6\x8e\xa5\xe5\x8f\xa3\n    :return: \xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    pre_atr21 = kl_pd[\'atr21\'].shift(1)\n    # noinspection PyTypeChecker\n    atr_change = np.where(pre_atr21 == 0, 0, np.log(kl_pd[\'atr21\'] / pre_atr21))\n\n    if ewm:\n        atr_roll_std = pd_ewm_std(atr_change, span=xd, min_periods=1, adjust=True) * np.sqrt(xd)\n    else:\n        atr_roll_std = pd_rolling_std(atr_change, window=xd, min_periods=1, center=False) * np.sqrt(xd)\n\n    # min_periods=1\xe8\xbf\x98\xe6\x98\xaf\xe4\xbc\x9a\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaanan\xef\xbc\x8c\xe5\xa1\xab\xe4\xba\x86\n    atr_roll_std = pd.Series(atr_roll_std).fillna(method=\'bfill\')\n    # \xe4\xb8\xbb\xe8\xa6\x81\xe7\x9b\xae\xe7\x9a\x84\xe5\xb0\xb1\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87atr_roll_std\xe6\x9e\x84\xe9\x80\xa0line\n    line = AbuTLine(atr_roll_std, \'atr std\')\n    if show:\n        line.show()\n\n    return line\n'"
abupy/TLineBu/ABuTLExecute.py,23,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x86\x85\xe9\x83\xa8\xe6\x89\xa7\xe8\xa1\x8c\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport math\nimport logging\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy import optimize as sco, stats\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import LinearRegression\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange\nfrom ..CoreBu.ABuPdHelper import pd_resample\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode\nfrom ..UtilBu.ABuProgress import AbuProgress\nfrom ..UtilBu import ABuRegUtil, ABuScalerUtil\nfrom ..MarketBu import ABuSymbolPd\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe6\xa8\xa1\xe5\x9d\x97\xe6\x89\x93\xe5\x8d\xb0\xe6\xa0\xb9\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\xe9\x80\x89\xe6\x8b\xa9logging.info\xe6\x88\x96\xe8\x80\x85print\xe5\x87\xbd\xe6\x95\xb0""""""\nlog_func = logging.info if ABuEnv.g_is_ipython else print\n""""""\xe5\xa4\x9a\xe9\xa1\xb9\xe6\x8b\x9f\xe5\x90\x88\xe5\x87\xbd\xe6\x95\xb0\xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\xbb\xe5\x8a\x9b\xef\xbc\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe7\x9a\x84poly\xe5\x80\x8d\xe6\x95\xb0\xe5\x9f\xba\xe6\x95\xb0""""""\ng_upport_resistance_unit = 3\n\n\ndef shift_distance(arr, how, slice_start=0, slice_end=-1, color=\'r\', show=True, show_log=True, ps=True):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe5\xba\x8f\xe5\x88\x97arr\xe7\x9a\x84\'\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\'\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\xba\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xb8\x89\xe8\xa7\x92\xe5\xb1\x95\xe7\xa4\xba\xe4\xbd\x8d\xe7\xa7\xbb\xef\xbc\x8c\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\n    h_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\xba\x95\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb), v_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\x9e\x82\xe7\x9b\xb4\xe8\xb7\x9d\xe7\xa6\xbb),\n    distance(\xe6\x96\x9c\xe8\xbe\xb9\xef\xbc\x8c\xe8\xb7\xaf\xe7\xa8\x8b), shift(\xe4\xbd\x8d\xe7\xa7\xbb), sd\xef\xbc\x88\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xef\xbc\x9ashift / distance\xef\xbc\x89\n    :param arr: numpy array\n    :param how: EShiftDistanceHow\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\n    :param slice_start: \xe5\xa6\x82\xe6\x9e\x9carr\xe6\x98\xaf\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe7\x89\x87\xef\xbc\x8c\xe5\x88\x87\xe7\x89\x87start\xe5\x80\xbc\xef\xbc\x8c int\n    :param slice_end: \xe5\xa6\x82\xe6\x9e\x9carr\xe6\x98\xaf\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe7\x89\x87\xef\xbc\x8c\xe5\x88\x87\xe7\x89\x87end\xe5\x80\xbc\xef\xbc\x8c int\n    :param color: \xe7\x9b\xb4\xe8\xa7\x92\xe4\xb8\x89\xe8\xa7\x92\xe8\xbe\xb9\xe6\xa1\x86\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1 eg\xef\xbc\x9a\'r\', \'red\'\n    :param show_log: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xba\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe5\x90\x84\xe4\xb8\xaa\xe6\xae\xb5\xe6\xaf\x94\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param ps: \xe6\x98\xaf\xe5\x90\xa6\xe7\xab\x8b\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8cplt.show\n    :return: h_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\xba\x95\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb), v_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\x9e\x82\xe7\x9b\xb4\xe8\xb7\x9d\xe7\xa6\xbb),\n            distance(\xe6\x96\x9c\xe8\xbe\xb9\xef\xbc\x8c\xe8\xb7\xaf\xe7\xa8\x8b), shift(\xe4\xbd\x8d\xe7\xa7\xbb), sd\xef\xbc\x88\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xef\xbc\x9ashift / distance\xef\xbc\x89\n    """"""\n    if slice_end == -1:\n        # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xbf\x98\xe6\x9c\x89slice_end - slice_start\xe7\xad\x89\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe6\xad\xa3\xe5\x88\x87\xe7\x89\x87\xe5\x80\xbc\n        slice_end = len(arr)\n    # \xe6\xa0\xb9\xe6\x8d\xaeslice_start\xef\xbc\x8c slice_end\xe5\x81\x9a\xe5\x88\x87\xe7\x89\x87\n    slice_arr = arr[slice_start:slice_end]\n\n    # \xe4\xbd\x8d\xe7\xbd\xae0\xe7\x9a\x84\xe5\x80\xbc\xe5\x8d\xb3\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe8\xb5\xb7\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n    start_y = slice_arr[0]\n    how = shift_distance_how(how)\n    # \xe6\xa0\xb9\xe6\x8d\xaehow\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe8\xae\xa1\xe7\xae\x97slice_arr\xe5\x87\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n    shift_y = how(slice_arr)\n    # \xe7\x9b\xb4\xe8\xa7\x92\xe4\xb8\x89\xe8\xa7\x92\xe5\xba\x95\xe8\xbe\xb9distance\n    h_distance = slice_end - slice_start\n    # \xe7\x9b\xb4\xe8\xa7\x92\xe4\xb8\x89\xe8\xa7\x92\xe5\x9e\x82\xe7\x9b\xb4\xe8\xbe\xb9distance\n    v_distance = abs(shift_y - start_y)\n    # \xe8\xae\xa1\xe7\xae\x97\xe6\x96\x9c\xe8\xbe\xb9\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe8\xb7\xaf\xe7\xa8\x8b\xe5\x80\xbc\n    distance = math.sqrt(h_distance ** 2 + v_distance ** 2)\n\n    # \xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97\xe4\xbd\x8d\xe7\xa7\xbb\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe5\xa5\x97\xe4\xb8\x8apd.Series\xe5\x81\x9adiff\xe7\xbb\x93\xe6\x9e\x9c\xe5\xa6\x82\xe4\xb8\x8beg\xe5\xbd\xa2\xe5\xbc\x8f\xe6\x89\x80\xe7\xa4\xba\n    diff_slice = pd.Series(slice_arr).diff().fillna(value=0)\n    """"""\n        eg: diff_slice\n            0     0.0000\n            1    -3.7984\n            2     7.6824\n            3     9.0512\n            4     4.3459\n            5    -7.7679\n                   ...\n            44   -3.1482\n            45   -1.6426\n            46   -2.1216\n            47    0.4449\n            48   -4.6539\n            49    7.1520\n    """"""\n    # np.abs(diff_slice).sum\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8d\xb3\xe4\xb8\xba\xe4\xbd\x8d\xe7\xa7\xbb\xe5\x80\xbc\n    shift = np.abs(diff_slice).sum()\n    # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94sd\n    sd = shift / distance\n\n    if show:\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        start_pos = (slice_start, start_y)\n        shift_pos = (slice_end, shift_y)\n\n        # \xe8\xb7\xaf\xe7\xa8\x8b\xe8\xb5\xb7\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc > \xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n        if shift_y > start_y:\n            end_y = start_y\n            top_y = shift_y\n            end_pos = (slice_end, end_y)\n        else:\n            end_y = shift_y\n            top_y = start_y\n            end_pos = (slice_start, end_y)\n        # annotate\xe6\x96\x87\xe5\xad\x97\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe6\x9d\xa1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbe\xb9\xe9\x95\xbf\xe5\xba\xa6\n        plt.annotate(\'h = {:.2f}, v={:.2f}\'.format(h_distance, v_distance), xy=(slice_start, end_y - 8))\n        # annotate\xe6\x96\x87\xe5\xad\x97\xe6\x98\xbe\xe7\xa4\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe5\x80\xbc\n        plt.annotate(\'distance = {:.2f}\'.format(distance), xy=(slice_start, top_y + 15))\n        # annotate\xe6\x96\x87\xe5\xad\x97\xe6\x98\xbe\xe7\xa4\xba\xe4\xbd\x8d\xe7\xa7\xbb\xe5\x80\xbc\n        plt.annotate(\'shift={:.2f}\'.format(shift), xy=(slice_start + 5, top_y + 5))\n\n        # legend\xe6\x98\xbe\xe7\xa4\xba\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe5\x80\xbc\n        legend = \'{}-{} shift/distance: {:.2f}\'.format(slice_start, slice_end, sd)\n\n        # \xe4\xb8\x89\xe6\x9d\xa1\xe8\xbe\xb9\xe4\xbe\x9d\xe6\xac\xa1\xe7\x9b\xb8\xe8\xbf\x9e\n        plt.plot([start_pos[0], end_pos[0]],\n                 [start_pos[1], end_pos[1]], c=color)\n\n        plt.plot([start_pos[0], shift_pos[0]],\n                 [start_pos[1], shift_pos[1]], c=color)\n\n        plt.plot([end_pos[0], shift_pos[0]],\n                 [end_pos[1], shift_pos[1]], c=color, label=legend)\n        plt.legend(loc=2)\n        if ps:\n            with plt_show():\n                # \xe6\x98\xaf\xe5\x90\xa6\xe7\xab\x8b\xe5\x8d\xb3show\n                plt.plot(slice_arr)\n        if show_log:\n            log_func(legend)\n\n    # h_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\xba\x95\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb), v_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\x9e\x82\xe7\x9b\xb4\xe8\xb7\x9d\xe7\xa6\xbb),distance(\xe6\x96\x9c\xe8\xbe\xb9\xe8\xb7\xaf\xe7\xa8\x8b),shift(\xe4\xbd\x8d\xe7\xa7\xbb),sd\xef\xbc\x88\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xef\xbc\x9ashift / distance\xef\xbc\x89\n    return h_distance, v_distance, distance, shift, sd\n\n\ndef calc_kl_speed(kl, resample=5):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe6\x9b\xb2\xe7\xba\xbf\xe8\xb7\x9f\xe9\x9a\x8f\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe9\x80\x9f\xe5\xba\xa6\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe9\x80\x9f\xe5\xba\xa6\xe6\x98\xaf\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9a\x84\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe4\xb8\x8e\xe5\x8f\x82\xe6\x95\xb0\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xaf\x94\xe5\xaf\xb9\n    :param kl: pd.Series\xe6\x88\x96\xe8\x80\x85numpy\xe5\xba\x8f\xe5\x88\x97\n    :param resample: \xe8\xae\xa1\xe7\xae\x97\xe9\x80\x9f\xe5\xba\xa6\xe6\x95\xb0\xe5\x80\xbc\xe7\x9a\x84\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe9\xbb\x98\xe8\xae\xa45\n    :return: \xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\n    """"""\n    kl_rp = pd_resample(kl, \'{}D\'.format(resample), how=\'mean\')\n    """"""\n        eg: kl_rp\n        2011-07-28    1.0027\n        2011-08-02    0.9767\n        2011-08-07    0.9189\n        2011-08-12    0.9174\n        2011-08-17    0.9156\n    """"""\n    kl_diff = kl_rp.diff()\n    """"""\n        eg:\n        2011-08-02   -0.0260\n        2011-08-07   -0.0578\n        2011-08-12   -0.0015\n        2011-08-17   -0.0018\n    """"""\n    # \xe4\xba\x8c\xe5\x80\xbc\xe5\x8c\x96 1 -1, \xe5\x81\x9a\xe4\xb8\xba\xe9\x80\x9f\xe5\xba\xa6\xe5\x8f\x82\xe6\x95\xb0\xe5\xba\x8f\xe5\x88\x97\xe6\x85\xa2\xe7\xba\xbf\n    # noinspection PyTypeChecker\n    kl_trend_slow = pd.Series(np.where(kl_diff > 0, 1, -1))\n    """"""\n        eg: kl_trend_fast\n            0     -1\n            1     -1\n            2     -1\n            3     -1\n            4     -1\n            5      1\n            6      1\n            7     -1\n            8     -1\n            9     -1\n    """"""\n    # \xe6\x85\xa2\xe7\xba\xbf\xe5\x90\x91\xe5\x89\x8d\xe9\x94\x99\xe4\xb8\x80\xe4\xb8\xaa\xe5\x91\xa8\xe6\x9c\x9f\xe5\xbd\xa2\xe6\x88\x90\xe5\xbf\xab\xe7\xba\xbf\n    kl_trend_fast = kl_trend_slow.shift(-1)\n    """"""\n        egL kl_trend_slow\n            0     -1.0\n            1     -1.0\n            2     -1.0\n            3     -1.0\n            4      1.0\n            5      1.0\n            6     -1.0\n            7     -1.0\n            8     -1.0\n            9     -1.0\n    """"""\n\n    kl_trend_ffs = kl_trend_fast[:-1] * kl_trend_slow[:-1]\n    """"""\n        \xe6\x85\xa2\xe7\xba\xbf \xe4\xb9\x98 \xe5\xbf\xab\xe7\xba\xbf \xe5\x8d\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe8\xbf\x90\xe7\xae\x97\n        eg\xef\xbc\x9akl_trend_ffs\n        0      1.0\n        1      1.0\n        2      1.0\n        3      1.0\n        4     -1.0\n        5      1.0\n        6     -1.0\n        7      1.0\n        8      1.0\n        9      1.0\n    """"""\n\n    # \xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x8d\xa0\xe6\x89\x80\xe6\x9c\x89\xe5\x92\x8c\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe5\x8d\xb3\xe4\xb8\xba\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe5\x80\xbc\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe4\xb8\x8e\xe5\x8f\x82\xe6\x95\xb0\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xaf\x94\xe5\xaf\xb9\xe7\x9a\x84\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe6\x9c\xac\xe9\x80\x9f\xe5\xba\xa6\xe5\x80\xbc\xe5\x8d\xb3\xe6\x97\xa0\xe6\x84\x8f\xe4\xb9\x89\n    speed = kl_trend_ffs.value_counts()[1] / kl_trend_ffs.value_counts().sum()\n    return speed\n\n\ndef calc_pair_speed(symbol, benchmark_symbol, resample=5, speed_key=\'close\',\n                    start=None, end=None, n_folds=2, show=False):\n    """"""\n    \xe5\x8f\x82\xe6\x95\xb0\xe4\xbc\xa0\xe9\x80\x92\xe4\xb8\x80\xe7\xbb\x84symbol\xe5\xaf\xb9\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96symbol\xe5\xaf\xb9\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaespeed_key\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9b\xb2\xe7\xba\xbf\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\n    \xe5\x88\x86\xe5\x88\xab\xe9\x80\x9a\xe8\xbf\x87calc_kl_speed\xe8\xae\xa1\xe7\xae\x97symbol\xe5\xaf\xb9\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe9\x9a\x8f\xe9\x80\x9f\xe5\xba\xa6\xef\xbc\x8c\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xef\xbc\x8a\xe6\x95\x8f\xe6\x84\x9f\xe5\xba\xa6\xef\xbc\x9d\xe6\x95\x8f\xe6\x84\x9f\xe5\xba\xa6\xe7\xbd\xae\xe4\xbf\xa1\xe5\xba\xa6\n    :param symbol: eg: \'AU0\'\n    :param benchmark_symbol: eg: \'XAU\'\n    :param resample: \xe8\xae\xa1\xe7\xae\x97\xe9\x80\x9f\xe5\xba\xa6\xe6\x95\xb0\xe5\x80\xbc\xe7\x9a\x84\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\xe9\xbb\x98\xe8\xae\xa45\n    :param speed_key: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\x96\xe7\x9a\x84\xe6\x9b\xb2\xe7\xba\xbf\xe5\xba\x8f\xe5\x88\x97key\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\'close\'\n    :param start: \xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84start\xe6\x97\xb6\xe9\x97\xb4\n    :param end: \xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84end\xe6\x97\xb6\xe9\x97\xb4\n    :param n_folds: \xe8\x8e\xb7\xe5\x8f\x96\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84n_folds\xe5\x8f\x82\xe6\x95\xb0\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96symbol\xe5\xaf\xb9\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb5\xb0\xe5\x8a\xbf\xe5\xaf\xb9\xe6\xaf\x94\n    :return: \xe5\x8f\x82\xe6\x95\xb0symbol, benchmark_symbol\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe6\x95\xb0\xe5\x80\xbc\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xef\xbc\x8a\xe6\x95\x8f\xe6\x84\x9f\xe5\xba\xa6\xef\xbc\x9d\xe6\x95\x8f\xe6\x84\x9f\xe5\xba\xa6\xe7\xbd\xae\xe4\xbf\xa1\xe5\xba\xa6\n    """"""\n    from ..TradeBu import AbuBenchmark\n    from ..SimilarBu import ABuCorrcoef, ECoreCorrType\n\n    benchmark = AbuBenchmark(benchmark_symbol, start=start, end=end, n_folds=n_folds, rs=False)\n    if benchmark.kl_pd is None:\n        return None, None, None\n    benchmark_kl = benchmark.kl_pd\n    kl = ABuSymbolPd.make_kl_df(symbol, benchmark=benchmark,\n                                data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO)\n    if kl is None:\n        return None, None, None\n    # \xe9\x80\x9a\xe8\xbf\x87calc_kl_speed\xe8\xae\xa1\xe7\xae\x97\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe9\x9a\x8f\xe9\x80\x9f\xe5\xba\xa6\n    kl_speed = calc_kl_speed(kl[speed_key], resample)\n    benchmark_kl_speed = calc_kl_speed(benchmark_kl[speed_key], resample)\n    # \xe4\xb8\xa4\xe4\xb8\xaa\xe8\xb5\xb0\xe5\x8a\xbf\xe7\x9a\x84SPERM\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\n    corr = ABuCorrcoef.corr_xy(kl.close, benchmark_kl.close, ECoreCorrType.E_CORE_TYPE_SPERM)\n\n    if show:\n        with plt_show():\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96symbol\xe5\xaf\xb9\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb5\xb0\xe5\x8a\xbf\xe5\xaf\xb9\xe6\xaf\x94\n            kl_sl = ABuScalerUtil.scaler_one(kl[speed_key])\n            benchmark_kl_sl = ABuScalerUtil.scaler_one(benchmark_kl[speed_key])\n            kl_resamp = pd_resample(kl_sl, \'{}D\'.format(resample), how=\'mean\')\n            benchmark_kl_resamp = pd_resample(benchmark_kl_sl, \'{}D\'.format(resample), how=\'mean\')\n            kl_resamp.plot(label=\'kl\', style=[\'*--\'])\n            benchmark_kl_resamp.plot(label=\'benchmark\', style=[\'^--\'])\n            plt.legend(loc=\'best\')\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe5\x8f\x82\xe6\x95\xb0symbol, benchmark_symbol\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe6\x95\xb0\xe5\x80\xbc, \xe4\xbb\xa5\xe5\x8f\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xef\xbc\x8a\xe6\x95\x8f\xe6\x84\x9f\xe5\xba\xa6\xef\xbc\x9d\xe6\x95\x8f\xe6\x84\x9f\xe5\xba\xa6\xe7\xbd\xae\xe4\xbf\xa1\xe5\xba\xa6\n    return kl_speed, benchmark_kl_speed, corr\n\n\ndef shift_distance_how(how):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87how\xef\xbc\x88EShiftDistanceHow\xef\xbc\x89\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe5\x87\xba\xe8\xae\xa1\xe7\xae\x97\xe7\xae\x97\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\n    \xe6\xb3\xa8\xe6\x84\x8f\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8shift_distance_close\xe5\xaf\xb9\xe5\xba\x94\xe6\xa0\x87\xe5\x87\x86\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe6\x96\xb9\xe6\xb3\x95\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\n    \xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\xb9\xb6\xe9\x9d\x9e\xe5\xbe\x97\xe5\x88\xb0\xe6\x9c\x80\xe5\x87\x86\xe7\xa1\xae\xe7\x9a\x84\'\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\'\n    :param how: EShiftDistanceHow\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85callable\xe5\x8d\xb3\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97\xe7\xae\x97\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xae\x97\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n    if callable(how):\n        # \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97\xe7\xae\x97\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\n        return how\n\n    from ..TLineBu.ABuTLine import EShiftDistanceHow\n\n    if how == EShiftDistanceHow.shift_distance_maxmin:\n        # \xe5\xa6\x82\xe6\x9e\x9cp_arr[0] > p_arr[-1]\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8np.min(p_arr)\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99np.max(p_arr)\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x96max\xef\xbc\x8c\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x96min\n        how = lambda p_arr: np.min(p_arr) if p_arr[0] > p_arr[-1] else np.max(p_arr)\n    elif how == EShiftDistanceHow.shift_distance_close:\n        # \xe5\xaf\xb9\xe5\xba\x94\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe5\xae\x9a\xe4\xb9\x89\n        how = lambda p_arr: p_arr[-1]\n    elif how == EShiftDistanceHow.shift_distance_sum_maxmin:\n        # \xe5\xa6\x82\xe6\x9e\x9cabs(p_arr.max() - p_arr[-1]) > abs(p_arr[-1] - p_arr.min()) \xe5\x8f\x96np.min(p_arr)\xe5\x90\xa6\xe5\x88\x99np.max(p_arr)\n        # \xe5\x8d\xb3\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\x9d\xe7\xa6\xbb\xe9\x9d\xa0\xe8\xbf\x91np.min(p_arr)\xe5\x8f\x96np.min(p_arr)\xe5\x90\xa6\xe5\x88\x99np.max(p_arr)\n        how = lambda p_arr: np.min(p_arr) if abs(p_arr.max() - p_arr[-1]) > abs(p_arr[-1] - p_arr.min()) \\\n            else np.max(p_arr)\n    else:\n        raise TypeError(\'how is error how={}\'.format(how))\n    return how\n\n\ndef regress_trend_channel(arr):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87arr\xe8\xae\xa1\xe7\xae\x97\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\x8a\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x89\xe6\x9d\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe7\xbb\x84\xe6\x88\x90\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\n    :param arr: numpy array\n    :return: y_below, y_fit, y_above\n    """"""\n    # \xe9\x80\x9a\xe8\xbf\x87ABuRegUtil.regress_y\xe8\xae\xa1\xe7\xae\x97\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x92\x8c\xe6\xa8\xa1\xe5\x9e\x8breg_mode\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\xa9\xe6\x94\xbe\xe5\x8f\x82\xe6\x95\xb0zoom\n    reg_mode, y_fit = ABuRegUtil.regress_y(arr, zoom=False)\n    reg_params = reg_mode.params\n\n    x = np.arange(0, len(arr))\n    a = reg_params[0]\n    b = reg_params[1]\n    # \xe9\x80\x9a\xe8\xbf\x87argmin\xe5\xaf\xbb\xe6\x89\xbe\xe5\x87\xba\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\xba\x8f\xe5\x88\x97\xe5\xb7\xae\xe5\x80\xbc\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe7\x82\xb9\xef\xbc\x8c\xe5\xb7\xae\xe5\x80\xbc\xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xa3\xe8\xa1\xa8\xe7\x82\xb9\xe4\xbd\x8d\xe7\xa6\xbb\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9c\xef\xbc\x8ceg: 100 - 80 < 100 - 90\n    min_ind = (arr.T - y_fit).argmin()\n    # \xe6\xa0\xb9\xe6\x8d\xaea, b\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xbabelow\xe5\x80\xbc, \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe6\x98\xaf\xe5\xb7\xae\xef\xbc\x8ceg: below\xef\xbc\x9a100 \xef\xbc\x8d 80 \xef\xbc\x9d 20\n    below = x[min_ind] * b + a - arr[min_ind]\n    # \xe8\xae\xa1\xe7\xae\x97x * b + a\xe4\xbd\x86- below\xef\xbc\x8c\xe5\x8d\xb3\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe4\xbf\x9d\xe6\x8c\x81\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe6\x96\x9c\xe7\x8e\x87\xe6\x95\xb4\xe4\xbd\x93\xe4\xb8\x8b\xe7\xa7\xbbbelow\xe5\x80\xbc\n    y_below = x * b + a - below\n\n    # \xe9\x80\x9a\xe8\xbf\x87argmax\xe5\xaf\xbb\xe6\x89\xbe\xe5\x87\xba\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\xba\x8f\xe5\x88\x97\xe5\xb7\xae\xe5\x80\xbc\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe7\x82\xb9\xef\xbc\x8c\xe5\xb7\xae\xe5\x80\xbc\xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xa3\xe8\xa1\xa8\xe7\x82\xb9\xe4\xbd\x8d\xe7\xa6\xbb\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe8\xbf\x9c\xef\xbc\x8ceg: 120 - 100 > 120 - 110\n    max_ind = (arr.T - y_fit).argmax()\n    # \xe6\xa0\xb9\xe6\x8d\xaea, b\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xbaabove\xe5\x80\xbc, \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe6\x98\xaf\xe5\xb7\xae\xef\xbc\x8ceg: above 100 - 120 \xef\xbc\x9d -20, \xe5\x8d\xb3above\xe6\x98\xaf\xe8\xb4\x9f\xe6\x95\xb0\n    above = x[max_ind] * b + a - arr[max_ind]\n    # \xe8\xae\xa1\xe7\xae\x97x * b + a\xe4\xbd\x86\xe6\x95\xb4\xe5\xa4\xa9- above\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8eabove\xe6\x98\xaf\xe8\xb4\x9f\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe7\x9b\xb8\xe5\x8a\xa0 \xe5\x8d\xb3\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe4\xbf\x9d\xe6\x8c\x81\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe6\x96\x9c\xe7\x8e\x87\xe6\x95\xb4\xe4\xbd\x93\xe4\xb8\x8a\xe7\xa7\xbbabove\xe5\x80\xbc\n    y_above = x * b + a - above\n    return y_below, y_fit, y_above\n\n\ndef bfgs_min_pos(find_min_pos, y_len, linear_interp):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87scipy.interpolate.interp1d\xe6\x8f\x92\xe5\x80\xbc\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87sco.fmin_bfgs\xe8\xae\xa1\xe7\xae\x97min\n    :param find_min_pos: \xe5\xaf\xbb\xe6\x89\xbemin\xe7\x9a\x84\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n    :param y_len: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8cint\n    :param linear_interp: scipy.interpolate.interp1d\xe6\x8f\x92\xe5\x80\xbc\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\n    :return: sco.fmin_bfgs\xe6\x88\x90\xe5\x8a\x9f\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe6\x89\x80\xe6\x9c\x89\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe6\x88\x96\xe8\x80\x85\xe5\xbc\x82\xe5\xb8\xb8\xe9\x83\xbd\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8d1\n    """"""\n    try:\n        local_min_pos = sco.fmin_bfgs(linear_interp, find_min_pos, disp=False)[0]\n    except:\n        # \xe6\x89\x80\xe6\x9c\x89\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe6\x88\x96\xe8\x80\x85\xe5\xbc\x82\xe5\xb8\xb8\xe9\x83\xbd\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8d1\n        local_min_pos = -1\n    if local_min_pos < 0 or local_min_pos > y_len:\n        # \xe6\x89\x80\xe6\x9c\x89\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe6\x88\x96\xe8\x80\x85\xe5\xbc\x82\xe5\xb8\xb8\xe9\x83\xbd\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8d1\n        local_min_pos = -1\n    return local_min_pos\n\n\ndef support_resistance_pos(x, support_resistance_y, best_poly=0, label=None):\n    """"""\n    \xe5\x88\x86\xe6\x9e\x90\xe8\x8e\xb7\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87sco.fmin_bfgs\xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xef\xbc\x8c\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe7\x82\xb9\xe4\xb9\x9f\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87sco.fmin_bfgs\xe5\xaf\xbb\xe6\x89\xbe\xef\xbc\x8c\n    \xe4\xbd\x86\xe6\x98\xaf\xe8\xa6\x81\xe6\xb1\x82\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x98\xaf\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe5\x8f\x96\xe5\x8f\x8d\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n    eg\xef\xbc\x9a\n        demean_y = ABuStatsUtil.demean(self.tl)\xef\xbc\x9a \xe9\xa6\x96\xe5\x85\x88\xe9\x80\x9a\xe8\xbf\x87demean\xe5\xb0\x86\xe5\xba\x8f\xe5\x88\x97\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\n        resistance_y = demean_y * -1 \xef\xbc\x9a\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\xa6\x81\xe5\x8f\x96\xe5\x8f\x8d\n        support_y = demean_y \xef\xbc\x9a\xe6\x94\xaf\xe6\x8c\x81\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x96\xe5\x8f\x8d\n    sco.fmin_bfgs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xbapolynomial.Chebyshev\xe5\xa4\x9a\xe9\xa1\xb9\xe6\x8b\x9f\xe5\x90\x88\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8cpoly\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe7\xa1\xae\xe5\xae\x9a\n    \xe7\x94\xb1ABuRegUtil.search_best_poly\xe5\xbe\x97\xe5\x88\xb0\xef\xbc\x8c\xe5\x8d\xb3best_poly\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\n    \xe4\xb8\xba\xe4\xba\x86\xe5\xbe\x97\xe5\x88\xb0\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x94\xaf\xe6\x8c\x81\xe4\xbd\x8d\xe7\xa7\x8d\xe5\xad\x90\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n        np.polynomial.Chebyshev.fit(x, support_resistance_y, best_poly * g_upport_resistance_unit)\n        g_upport_resistance_unit\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d3\n    best_poly * 3\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86poly\xe6\xac\xa1\xe6\x95\xb0\xe5\x8f\x88\xe6\x89\xa9\xe5\xa4\xa7\xe4\xba\x863\xe5\x80\x8d\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x94\xb9\xe5\x8f\x98g_upport_resistance_unit\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe7\xa7\x8d\xe5\xad\x90\xe7\x82\xb9\xef\xbc\x8c\xe4\xbd\x86\n    \xe9\x80\x9f\xe5\xba\xa6\xe4\xbc\x9a\xe6\x9b\xb4\xe6\x85\xa2\xe3\x80\x82\n    :param x: \xe5\xbe\x85\xe5\x88\x86\xe6\x9e\x90\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97np.array\n    :param support_resistance_y:\n    :param best_poly: \xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaebest_poly, \xe8\xae\xbe\xe7\xbd\xae\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8ABuRegUtil.search_best_poly\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\x86\n    :param label: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe7\xad\x89\xe5\xbe\x85\xe6\x96\x87\xe5\xad\x97\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    if best_poly <= 0:\n        # \xe7\x94\xb1ABuRegUtil.search_best_poly\xe5\xbe\x97\xe5\x88\xb0\xef\xbc\x8c\xe5\x8d\xb3best_poly\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n        # \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8cpoly_min\xef\xbc\x9d7\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e7\xe6\xac\xa1ploy\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe6\x8f\x90\xe5\x8d\x87\xe6\x95\x88\xe7\x8e\x87\n        best_poly = ABuRegUtil.search_best_poly(support_resistance_y, poly_min=7, zoom=False, show=False)\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x9b\xb2\xe7\xba\xbf\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\x80\x8d\xe4\xb9\x98best_poly\n        best_poly *= int(math.ceil(len(x) / 120))\n    best_poly = int(len(x) / 20) if best_poly < int(len(x) / 20) else best_poly\n\n    # \xe4\xb8\xba\xe4\xba\x86\xe5\xbe\x97\xe5\x88\xb0\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x94\xaf\xe6\x8c\x81\xe4\xbd\x8d\xe7\xa7\x8d\xe5\xad\x90\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc->best_poly * 3\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86poly\xe6\xac\xa1\xe6\x95\xb0\xe5\x8f\x88\xe6\x89\xa9\xe5\xa4\xa7\xe4\xba\x863\xe5\x80\x8d\n    p = np.polynomial.Chebyshev.fit(x, support_resistance_y, best_poly)\n\n    # \xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8set\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x87\xe6\xbb\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\n    support_resistance = set()\n    # \xe5\xb1\x9e\xe4\xba\x8e\xe8\x80\x97\xe6\x97\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x98\xbe\xe7\xa4\xba\n    with AbuProgress(len(support_resistance_y), 0, label) as progess:\n        for index in xrange(0, len(support_resistance_y), 1):\n            progess.show(index + 1)\n            local_min_pos = int(bfgs_min_pos(index, len(support_resistance_y), p))\n            if local_min_pos == -1:\n                # \xe5\x85\xb6\xe5\xae\x9e\xe4\xb8\xbb\xe8\xa6\x81\xe5\xb0\xb1\xe6\x98\xaf\xe5\x88\xa9\xe7\x94\xa8\xe8\xbf\x99\xe9\x87\x8c\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\n                continue\n            # \xe5\xb0\x86local_min_pos\xe5\x8a\xa0\xe5\x88\xb0\xe9\x9b\x86\xe5\x90\x88\xe4\xb8\xad\n            support_resistance.add(local_min_pos)\n    # \xe4\xb8\xba\xe4\xba\x86\xe6\x96\xb9\xe4\xbe\xbf\xe5\x90\x8e\xe7\xbb\xadapi\xe5\xb0\x86set\xe8\xbd\xac\xe6\x8d\xa2list\n    support_resistance = list(support_resistance)\n    return support_resistance\n\n\ndef select_k_support_resistance(support_resistance, thresh=0.06, label=\'\', show=True):\n    """"""\n    \xe5\xaf\xb9\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xbb\x8e1-\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xaa\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\x81\x9a\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaa\xe8\x81\x9a\xe7\xb1\xbb\xe5\x99\xa8\xe7\x9a\x84\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8c\n    \xe9\x80\x9a\xe8\xbf\x87\xe6\x96\xb9\xe5\xb7\xae\xe9\x98\x80\xe5\x80\xbc\xe7\xad\x89\xe6\x96\xb9\xe6\xb3\x95\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe4\xbd\xb3\xe8\x81\x9a\xe7\xb1\xbb\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe5\xbe\x97\xe5\x88\xb0kmean\xe6\x9c\x80\xe4\xbd\xb3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param support_resistance: \xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\n    :param thresh: \xe8\x81\x9a\xe7\xb1\xbb\xe6\x96\xb9\xe5\xb7\xae\xe6\xaf\x94\xe4\xbe\x8b\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.06\n    :param label: \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84label\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe7\x94\xa8\xe6\x9d\xa5\xe5\x8c\xba\xe5\x88\xab\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe7\x9a\x84\xe8\x81\x9a\xe7\xb1\xbb\xe5\x88\x86\xe6\x9e\x90\xe7\xbb\x93\xe6\x9e\x9c\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: \xe6\x9c\x80\xe4\xbd\xb3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cKMeans\xe7\xb1\xbb\xe5\x9e\x8b\n    """"""\n    # \xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xbb\x8e1-\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xaa\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\x81\x9a\xe7\xb1\xbb\n    k_rng = xrange(1, len(support_resistance))\n    est_arr = [KMeans(n_clusters=k).fit(support_resistance) for k in k_rng]\n    sum_squares = [e.inertia_ for e in est_arr]\n    """"""\n        eg: sum_squares \xe5\xbd\xa2\xe5\xa6\x82\n        [568824.24742527946, 63692.462671013389, 23023.512755456246, 11106.460471044047, 4739.3661037023803, 2\n        479.206823270833, 1640.5275739375002, 1095.9099614375, 589.28019737500006, 160.28686404166669,\n        45.229672916666679, 31.689656250000013, 18.94814375000001, 10.944315625000012, 5.5643156249999999,\n        0.6365031249999995]\n    """"""\n    # sum_squares[0] = 568824.24742527946 ->\n    # 568824.24742527946 / 568824.24742527946, 63692.462671013389 / 568824.24742527946\n    diff_squares = [squares / sum_squares[0] for squares in sum_squares]\n    diff_squares_pd = pd.Series(diff_squares)\n\n    thresh_pd = diff_squares_pd[diff_squares_pd < thresh]\n    if thresh_pd.shape[0] > 0:\n        """"""\n            eg\xef\xbc\x9athresh_pd \xe5\xbd\xa2\xe5\xa6\x82index[0]\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9a\x84\xe8\x81\x9a\xe7\xb1\xbb\xe4\xb8\xaa\xe6\x95\xb0\xe5\x80\xbc\n            2     4.0476e-02\n            3     1.9525e-02\n            4     8.3319e-03\n            5     4.3585e-03\n            6     2.8841e-03\n            7     1.9266e-03\n            8     1.0360e-03\n            9     2.8179e-04\n        """"""\n        select_k = k_rng[thresh_pd.index[0]]\n    else:\n        # \xe6\xb2\xa1\xe6\x9c\x89\xe7\xac\xa6\xe5\x90\x88\xe7\x9a\x84\xef\xbc\x8c\xe5\xb0\xb1\xe5\xae\x89\xe8\xa3\x85\xe6\x9c\x80\xe5\xa4\x9a\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0\xe8\x81\x9a\xe7\xb1\xbb\n        select_k = k_rng[-1]\n\n    # \xe9\x80\x9a\xe8\xbf\x87select_k\xe5\x8f\x96\xe4\xbb\xa3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\n    est = est_arr[select_k - 1]\n\n    if show:\n        plt.subplot(211, figsize=ABuEnv.g_plt_figsize)\n        plt.title(\'{}: elbow method to inform k choice\'.format(label))\n        # \xe6\x89\x8b\xe8\x82\x98\xe6\xb3\x95\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbd\xb3\xe8\x81\x9a\xe7\xb1\xbb\xe4\xb8\xaa\xe6\x95\xb0\xe5\x80\xbc\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87silhouette_score\n        silhouette_score = [metrics.silhouette_score(support_resistance, e.labels_, metric=\'euclidean\')\n                            for e in est_arr[1:]]\n        plt.plot(k_rng[1:], silhouette_score, \'b*-\')\n        plt.grid(True)\n        plt.ylabel(\'{}: Silhouette Coefficient\'.format(label))\n\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x96\xb9\xe5\xb7\xae\xe6\x9c\x80\xe4\xbd\xb3\xe8\x81\x9a\xe7\xb1\xbb\n        plt.subplot(212, figsize=ABuEnv.g_plt_figsize)\n        plt.plot(k_rng, sum_squares, \'b*-\')\n        plt.grid(True)\n        plt.xlabel(\'{}: k\'.format(label))\n        plt.ylabel(\'{}: Sum of Squares\'.format(label))\n        # \xe5\xb0\x86\xe5\x89\x8d\xe9\x9d\xa2\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84select_k\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9c\x86\xe5\x9c\x88\xe5\x9c\xa8\xe5\x9b\xbe\xe7\xa4\xba\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe6\xb3\xa8\n        plt.plot(select_k, sum_squares[select_k - 1], \'ro\', markersize=12, markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=\'r\')\n        plt.show()\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x9c\x80\xe4\xbd\xb3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cKMeans\xe7\xb1\xbb\xe5\x9e\x8b\n    return est\n\n\ndef support_resistance_predict(x, y, est, support_resistance, is_support, show=True):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe8\x81\x9a\xe7\xb1\xbb\xe5\x99\xa8est\xe4\xbb\x8e\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97support_resistance\xe4\xb8\xad\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x81\x9a\xe7\xb1\xbbpredict\n    \xe5\xaf\xb9\xe8\x81\x9a\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe4\xbb\x8e\xe6\xaf\x8f\xe4\xb8\xaacluster\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0\xe5\x94\xaf\xe4\xb8\x80\xe5\x80\xbc\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe8\xa6\x81\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x9a\x84index\n    \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe7\x9a\x84index\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97x\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97y\n    :param est: \xe6\x9c\x80\xe4\xbd\xb3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cKMeans\xe7\xb1\xbb\xe5\x9e\x8b\n    :param support_resistance: \xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\n    :param is_support: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8dsupport_resistance_predict\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe4\xbb\x8e\xe6\xaf\x8f\xe4\xb8\xaacluster\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0\xe5\x94\xaf\xe4\xb8\x80\xe5\x80\xbc\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84x\xe5\x80\xbc\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe3\x80\x82list\n    """"""\n    support_resistance_k = est.predict(support_resistance)\n    """"""\n        eg: support_resistance_k\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9a\n        array([0, 0, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0], dtype=int32)\n    """"""\n    if show:\n        with plt_show():\n            # FIXME \xe8\xbf\x99\xe9\x87\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe5\xaf\xb9\xe8\xb6\x85\xe5\x87\xba\xe9\xa2\x9c\xe8\x89\xb2\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\x81\x9a\xe7\xb1\xbb\xe4\xb8\xaa\xe6\x95\xb0\xe8\xb6\x85\xe8\xbf\x87\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe4\xbc\x9a\xe5\x87\xba\xe9\x94\x99\n            colors = np.array([\'#FF0054\', \'#FBD039\', \'#23C2BC\',\n                               \'#CC99CC\', \'#CC3399\', \'#33FF99\', \'#00CCFF\', \'#66FF66\', \'#339999\',\n                               \'#6666CC\', \'#666666\', \'#663333\', \'#660033\', \'#FF0054\', \'#FBD039\', \'#23C2BC\',\n                               \'#CC99CC\', \'#CC3399\', \'#33FF99\', \'#00CCFF\', \'#66FF66\', \'#339999\',\n                               \'#6666CC\', \'#666666\', \'#663333\', \'#660033\', \'#6666CC\', \'#666666\', \'#663333\',\n                               \'#660033\', \'#FF0054\', \'#FBD039\', \'#23C2BC\', \'#CC99CC\', \'#CC3399\', \'#33FF99\',\n                               \'#00CCFF\', \'#66FF66\', \'#339999\'])\n            plt.plot(x, y, \'-\')\n            # c=colors[support_resistance_k]\xe5\x8d\xb3\xe5\xaf\xb9\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe8\x81\x9a\xe7\xb1\xbb\xe9\x87\x87\xe7\x94\xa8\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe7\xa4\xba\n            plt.scatter(support_resistance[:, 0], support_resistance[:, 1], c=colors[support_resistance_k], s=60)\n            plt.title(\'{}: k choice\'.format(\'support\' if is_support else \'resistance\'))\n    d_pd = pd.DataFrame(support_resistance, columns=[\'x\', \'y\'])\n    d_pd[\'cluster\'] = support_resistance_k\n    """"""\n        eg\xef\xbc\x9ad_pd\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9a\n                x        y  cluster\n        0     0.0  15.5400        0\n        1    97.0  21.3475        0\n        2   482.0  22.9625        1\n        3   387.0  21.6725        1\n        4     5.0  16.2350        0\n        5   426.0  23.7650        1\n        6   459.0  23.2800        1\n        7    48.0  13.1475        0\n        8    49.0  13.6700        0\n        9   283.0  20.9150        2\n        10  497.0  25.2240        1\n        11   53.0  13.6537        0\n        12   23.0  15.3150        0\n        13  280.0  19.9900        2\n        14  121.0  18.3475        0\n        15   27.0  15.2275        0\n        16   95.0  23.9475        0\n    """"""\n    k_list = list()\n\n    # \xe6\x9c\x80\xe7\xbb\x88\xe4\xbb\x8e\xe6\xaf\x8f\xe4\xb8\xaacluster\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0\xe5\x94\xaf\xe4\xb8\x80\xe5\x80\xbc\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\n    for k in set(support_resistance_k):\n        if is_support:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe8\xa6\x81\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x9a\x84index\n            ind = d_pd[d_pd[\'cluster\'] == k][\'y\'].argmin()\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe7\x9a\x84index\n            ind = d_pd[d_pd[\'cluster\'] == k][\'y\'].argmax()\n        # \xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe8\xa6\x81x\xe7\x9a\x84\xe5\x80\xbc\n        choice_x = int(d_pd.iloc[ind][\'x\'])\n        k_list.append(choice_x)\n    # \xe8\xbf\x94\xe5\x9b\x9e\xe4\xbb\x8e\xe6\xaf\x8f\xe4\xb8\xaacluster\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0\xe5\x94\xaf\xe4\xb8\x80\xe5\x80\xbc\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84x\xe5\x80\xbc\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n    return k_list\n\n\n# noinspection PyArgumentList\ndef plot_support_resistance_trend(x, y, trend_pos, label, only_last=False, plot_org=False, show=True):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87trend_pos\xe7\xbb\x98\xe5\x88\xb6\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\xef\xbc\x8conly_last\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x88\x96\xe6\x94\xaf\xe6\x92\x91\xef\xbc\x8c\n    plot_org\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8cplot_org\xef\xbc\x9dTrue\xe6\x97\xb6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe9\x80\x9a\xe8\xbf\x87LinearRegression\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe7\x9b\xb4\xe7\xba\xbf\xe7\xbb\x98\xe5\x88\xb6\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97x\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97y\n    :param trend_pos: \xe8\xb6\x8b\xe5\x8a\xbf\xe7\x82\xb9x\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe9\x80\x9a\xe8\xbf\x87\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97y\xe8\x8e\xb7\xe5\x8f\x96y[x]\xe5\x80\xbc\n    :param label: \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xef\xbc\x8c\xe7\x94\xa8\xe6\x9d\xa5\xe5\x8c\xba\xe5\x88\x86\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\n    :param only_last: \xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x88\x96\xe6\x94\xaf\xe6\x92\x91\n    :param plot_org: \xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\n                     plot_org\xef\xbc\x9dTrue\xe6\x97\xb6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe9\x80\x9a\xe8\xbf\x87LinearRegression\xe8\xbf\x9b\xe8\xa1\x8c\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    """"""\n    # trend_pos\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xbalist\xe5\xae\xb9\xe5\x99\xa8\n    trend_pos.sort()\n    if len(trend_pos) < 2:\n        log_func(\'{} len(trend_pos) < 2 !\'.format(label))\n        return\n\n    if only_last:\n        # \xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x88\x96\xe6\x94\xaf\xe6\x92\x91\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x89\x8d\xe9\x9d\xa2trend_pos.sort()\xe4\xba\x86\xef\xbc\x8c\xe5\x8d\xb3\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\n        trend_pos = trend_pos[-2:]\n\n    y_trend_arr = []\n    for ind, trend_start in enumerate(trend_pos):\n        if ind == len(trend_pos) - 1:\n            continue\n        trend_end = trend_pos[ind + 1]\n\n        x_org = [trend_start, trend_end]\n        y_org = [y[trend_start], y[trend_end]]\n\n        # \xe9\x80\x9a\xe8\xbf\x87LinearRegression\xe5\xad\xa6\xe4\xb9\xa0\xe7\xba\xbf\xe6\xae\xb5\n        reg = LinearRegression()\n        reg.fit(np.array(x_org).reshape(-1, 1), np.array(y_org).reshape(-1, 1))\n\n        x_line = [x[0], x[-1]]\n        # predict\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x92\x8c\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86\xe7\xba\xbf\xe6\xae\xb5\xe5\x8f\x98\xe6\x88\x90\xe4\xba\x86\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe5\xbb\xb6\xe4\xbc\xb8\xe4\xba\x86\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xef\xbc\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\n        y_line = reg.predict(np.array(x_line).reshape(-1, 1)).reshape(-1, )\n        # \xe6\x8a\x8a\xe7\xab\xaf\xe7\x82\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x99\xe5\xa4\x96\xe9\x9d\xa2\n        y_trend_arr.append(y_line)\n        if show:\n            if plot_org:\n                # plot_org\xef\xbc\x9dTrue\xe6\x97\xb6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\n                plt.plot(x_org, y_org, \'o-\', label=label)\n            else:\n                plt.plot(x_line, y_line, \'o-\', label=label)\n    if show:\n        plt.plot(x, y)\n    return y_trend_arr\n\n\ndef skeleton_how(how):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaehow\xe6\x98\xa0\xe5\xb0\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    :param how: ESkeletonHow\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85callable\xe5\x8d\xb3\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\n    :return:\n    """"""\n    if callable(how):\n        # callable\xe5\x8d\xb3\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\n        return how\n\n    from ..TLineBu.ABuTLine import ESkeletonHow\n    if how == ESkeletonHow.skeleton_min:\n        how_func = np.min\n    elif how == ESkeletonHow.skeleton_max:\n        how_func = np.max\n    elif how == ESkeletonHow.skeleton_mean:\n        how_func = np.mean\n    elif how == ESkeletonHow.skeleton_median:\n        how_func = np.median\n    elif how == ESkeletonHow.skeleton_close:\n        # \xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe5\x81\x9a\xe4\xb8\xba\xe9\x87\x87\xe6\xa0\xb7\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\n        how_func = lambda arr: arr[-1]\n    elif how == ESkeletonHow.skeleton_triangle:\n        # \xe4\xb8\x89\xe8\xa7\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xef\xbc\x9a\xe7\xa1\xae\xe5\xae\x9a\xe5\x8f\x96\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x89\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x8dhow_func\xe6\x8f\x90\xe4\xbe\x9b\n        # \xe5\xa6\x82\xe6\x9e\x9cnp.argmax(arr) > np.argmin(arr)\xe5\x8d\xb3\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe5\x9c\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe5\x89\x8d\xe9\x9d\xa2\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x89\xe7\x82\xb9\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe8\xb5\xb7\xe7\x82\xb9\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe7\xbb\x88\xe7\x82\xb9\n        how_func = lambda arr, start: (start, arr[0]) if np.argmax(arr) > np.argmin(arr) else \\\n            (len(arr) + start, arr[-1])\n    else:\n        raise TypeError(\'how is error how={}\'.format(how))\n    return how_func\n\n\ndef below_above_gen(x, y):\n    """"""\n    (y, x) if x > y else (x, y)\n    :param x: \xe6\x94\xaf\xe6\x8c\x81\xe6\xaf\x94\xe8\xbe\x83\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n    :param y: \xe6\x94\xaf\xe6\x8c\x81\xe6\xaf\x94\xe8\xbe\x83\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return (y, x) if x > y else (x, y)\n\n\ndef find_percent_point(percents, y):\n    """"""\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\x9a\x84\xe5\x8c\xba\xe5\x9f\x9f, \xe9\x92\x88\xe5\xaf\xb9\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe8\xbf\xad\xe4\xbb\xa3\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8e\n    \xe5\x88\x86\xe5\x88\xab\xe4\xbd\xbf\xe7\x94\xa8stats.scoreatpercentile\xe5\x92\x8c (y.max() - y.min()) * pt + y.min()\xe4\xb8\xa4\xe7\xa7\x8d\n    \xe6\x96\xb9\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe5\x88\x86\xe5\x89\xb2\xe5\x80\xbc, \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xba\xe6\xaf\x94\xe4\xbe\x8b\xe5\x80\xbc\xe4\xb8\xbakey\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n    eg:\n        input:\n            percents = (0.1, 0.9)\n        output:\n            {0.1: (15.732749999999999, 15.5075), 0.9: (31.995000000000005, 34.387500000000003)}\n\n    :param percents: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8ceg: (0.1, 0.9), [0.3, 0,4, 0.8]\n    :param y: \xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n    :return: \xe6\xaf\x94\xe4\xbe\x8b\xe5\x80\xbc\xe4\xb8\xbakey\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    percent_point_dict = {pt: (stats.scoreatpercentile(y, np.round(pt * 100, 1)), (y.max() - y.min()) * pt + y.min())\n                          for pt in percents}\n\n    return percent_point_dict\n\n\n# noinspection PyTypeChecker\ndef find_golden_point_ex(x, y, show=False):\n    """"""\xe7\xbb\x9f\xe8\xae\xa1\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\xae\x80\xe5\x8d\x95\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c""""""\n\n    sp382 = stats.scoreatpercentile(y, 38.2)\n    sp618 = stats.scoreatpercentile(y, 61.8)\n    sp50 = stats.scoreatpercentile(y, 50.0)\n\n    if show:\n        with plt_show():\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n            plt.plot(x, y)\n            plt.axhline(sp50, color=\'c\')\n            plt.axhline(sp618, color=\'r\')\n            plt.axhline(sp382, color=\'g\')\n            _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n            plt.legend([\'TLine\', \'sp50\', \'sp618\', \'sp382\'],\n                       bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n    return sp382, sp50, sp618\n\n\ndef find_golden_point(x, y, show=False):\n    """"""\xe8\xa7\x86\xe8\xa7\x89\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\xae\x80\xe5\x8d\x95\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c""""""\n\n    cs_max = y.max()\n    cs_min = y.min()\n\n    sp382 = (cs_max - cs_min) * 0.382 + cs_min\n    sp618 = (cs_max - cs_min) * 0.618 + cs_min\n    sp50 = (cs_max - cs_min) * 0.5 + cs_min\n    if show:\n        with plt_show():\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x93\x8d\xe4\xbd\x9c\n            plt.plot(x, y)\n            plt.axhline(sp50, color=\'c\')\n            plt.axhline(sp618, color=\'r\')\n            plt.axhline(sp382, color=\'g\')\n            _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n            plt.legend([\'TLine\', \'sp50\', \'sp618\', \'sp382\'],\n                       bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n    return sp382, sp50, sp618\n'"
abupy/TLineBu/ABuTLGolden.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x8f\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\xa4\xba\xe4\xbe\x8b\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom collections import namedtuple\n\nimport matplotlib.pyplot as plt\n\nfrom ..TLineBu import ABuTLExecute\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef calc_golden(kl_pd, show=True):\n    """"""\n    \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbcclose\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x8f\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\n    \xe6\x95\xb0\xe5\x80\xbc\xe7\xbb\x93\xe6\x9e\x9c\xe5\x88\x86\xe6\x9e\x90\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x8f\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\xbb\x93\xe6\x9e\x9c\n    :return: \xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x8f\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\xbb\x93\xe6\x9e\x9c\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84namedtuple\xe6\x95\xb0\xe5\x80\xbc\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    kl_close = kl_pd.close\n\n    if not hasattr(kl_pd, \'name\'):\n        # \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\xbc\x82\xe5\xb8\xb8\xe7\x9a\x84\xe6\xb2\xa1\xe6\x9c\x89name\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe8\xa1\xa5\xe4\xb8\x8a\xe4\xb8\x80\xe4\xb8\xaaunknown\n        kl_pd.name = \'unknown\'\n\n    # \xe8\xae\xa1\xe7\xae\x97\xe8\xa7\x86\xe8\xa7\x89\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\n    gd_382, gd_500, gd_618 = ABuTLExecute.find_golden_point(kl_pd.index, kl_close)\n    # \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x9f\xe8\xae\xa1\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\n    gex_382, gex_500, gex_618 = ABuTLExecute.find_golden_point_ex(kl_pd.index, kl_close)\n\n    # below above 382, 618\xe7\xa1\xae\xe5\xae\x9a\xef\xbc\x8c\xe5\x8d\xb3382\xef\xbc\x8c618\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xba\x95\n    below618, above618 = ABuTLExecute.below_above_gen(gd_618, gex_618)\n    below382, above382 = ABuTLExecute.below_above_gen(gd_382, gex_382)\n\n    # \xe5\x86\x8d\xe6\xac\xa1\xe9\x80\x9a\xe8\xbf\x87\xe6\xaf\x94\xe4\xbe\x8b\xe5\xba\x8f\xe5\x88\x97percents\xe5\x92\x8cfind_percent_point\xe5\xaf\xbb\xe6\x89\xbe\xe5\xaf\xb9\xe5\xba\x94\xe6\xaf\x94\xe4\xbe\x8b\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\xad\x97\xe5\x85\xb8pts_dict\n    percents = [0.20, 0.25, 0.30, 0.70, 0.80, 0.90, 0.95]\n    pts_dict = ABuTLExecute.find_percent_point(percents, kl_close)\n\n    # 0.20, 0.25, 0.30\xe5\x8f\xaa\xe6\x89\xbe\xe6\x9c\x80\xe4\xbd\x8e\xe7\x9a\x84\xef\xbc\x8c\xe5\x8d\xb3\xe5\xba\x95\xe9\x83\xa8\xe5\x8f\xaa\xe8\xa6\x81\xe6\x9c\x80\xe4\xbd\x8e\xe7\x9a\x84\n    below200, _ = ABuTLExecute.below_above_gen(*pts_dict[0.20])\n    below250, _ = ABuTLExecute.below_above_gen(*pts_dict[0.25])\n    below300, _ = ABuTLExecute.below_above_gen(*pts_dict[0.30])\n\n    # 0.70, 0.80, 0.90, 0.95\xe5\x8f\xaa\xe6\x89\xbe\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84\xef\xbc\x8c\xe5\x8d\xb3\xe9\xa1\xb6\xe9\x83\xa8\xe5\x8f\xaa\xe8\xa6\x81\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84\n    _, above700 = ABuTLExecute.below_above_gen(*pts_dict[0.70])\n    _, above800 = ABuTLExecute.below_above_gen(*pts_dict[0.80])\n    _, above900 = ABuTLExecute.below_above_gen(*pts_dict[0.90])\n    _, above950 = ABuTLExecute.below_above_gen(*pts_dict[0.95])\n\n    if show:\n        with plt_show():\n            # \xe5\xbc\x80\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x8f\x8a\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\xbb\x93\xe6\x9e\x9c\n            plt.axes([0.025, 0.025, 0.95, 0.95])\n            plt.plot(kl_close)\n\n            # 0.70, 0.80, 0.90, 0.95\xef\xbc\x8clw\xe7\xba\xbf\xe6\x9d\xa1\xe7\xb2\x97\xe5\xba\xa6\xe9\x80\x92\xe5\x87\x8f\n            plt.axhline(above950, lw=3.5, color=\'c\')\n            plt.axhline(above900, lw=3.0, color=\'y\')\n            plt.axhline(above800, lw=2.5, color=\'k\')\n            plt.axhline(above700, lw=2.5, color=\'m\')\n\n            # \xe4\xb8\xad\xe9\x97\xb4\xe5\xb1\x82\xe7\x9a\x84618\xe6\x98\xaf\xe5\xb8\xa6\xef\xbc\x8c\xe6\x9c\x89\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xba\x95\n            plt.axhline(above618, lw=2, color=\'r\')\n            plt.axhline(below618, lw=1.5, color=\'r\')\n            plt.fill_between(kl_pd.index, above618, below618,\n                             alpha=0.1, color=""r"")\n            # \xe4\xb8\xad\xe9\x97\xb4\xe5\xb1\x82\xe7\x9a\x84382\xe6\x98\xaf\xe5\xb8\xa6\xef\xbc\x8c\xe6\x9c\x89\xe4\xb8\x8a\xe4\xb8\x8b\xe5\xba\x95\n            plt.axhline(above382, lw=1.5, color=\'g\')\n            plt.axhline(below382, lw=2, color=\'g\')\n            plt.fill_between(kl_pd.index, above382, below382,\n                             alpha=0.1, color=""g"")\n\n            # 0.20, 0.25, 0.30 lw\xe7\xba\xbf\xe6\x9d\xa1\xe7\xb2\x97\xe5\xba\xa6\xe9\x80\x92\xe6\x9b\xbe\n            plt.axhline(below300, lw=2.5, color=\'k\')\n            plt.axhline(below250, lw=3.0, color=\'y\')\n            plt.axhline(below200, lw=3.5, color=\'c\')\n\n            _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n            plt.legend([kl_pd.name, \'above950\', \'above900\', \'above800\', \'above700\', \'above618\', \'below618\',\n                        \'above382\', \'below382\', \'below300\', \'below250\', \'below200\'], bbox_to_anchor=(1.05, 1), loc=2,\n                       borderaxespad=0.)\n            plt.title(\'between golden\')\n\n    return namedtuple(\'golden\', [\'g382\', \'gex382\', \'g500\', \'gex500\', \'g618\',\n                                 \'gex618\', \'above618\', \'below618\', \'above382\', \'below382\',\n                                 \'above950\', \'above900\', \'above800\', \'above700\', \'below300\', \'below250\', \'below200\'])(\n        gd_382, gex_382,\n        gd_500, gex_500, gd_618, gex_618, above618, below618, above382, below382,\n        above950, above900, above800, above700, below300, below250, below200)\n'"
abupy/TLineBu/ABuTLJump.py,6,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport itertools\nfrom collections import namedtuple\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom ..MarketBu import ABuMarketDrawing\nfrom ..CoreBu.ABuPdHelper import pd_resample\nfrom ..UtilBu.ABuDateUtil import fmt_date\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe9\xa2\x84\xe5\xa4\x87\xe9\xa2\x9c\xe8\x89\xb2\xe5\xba\x8f\xe5\x88\x97\xe9\x9b\x86\xef\xbc\x8c\xe8\xb6\x85\xe5\x87\xba\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe9\x87\x8f\xe5\xba\x94\xe4\xbd\xbf\xe7\x94\xa8itertools.cycle\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x98\xe5\x88\xb6""""""\nK_PLT_MAP_STYLE = [\n    \'b\', \'c\', \'g\', \'k\', \'m\', \'r\', \'y\', \'w\']\n\n\ndef calc_jump(kl_pd, jump_diff_factor=1, show=True):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\xaf\xb9\xe6\xaf\x94\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xbd\x93\xe6\x9c\x88\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xef\xbc\x8c\xe5\x92\x8c\xe5\xbd\x93\xe6\x9c\x88\xe7\x9a\x84\xe6\x8c\xaf\xe5\xb9\x85\xe6\x9d\xa5\xe7\xa1\xae\xe5\xae\x9a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\n    \xe5\x88\x86\xe5\x88\xab\xe7\xbb\x84\xe8\xa3\x85\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe7\xad\x89\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe5\x85\xa5pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x94\xe5\x9b\x9e\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param jump_diff_factor: \xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xaejump_diff_factor\xe6\x9d\xa5\xe8\xb0\x83\xe8\x8a\x82\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4jump_diff_factor\xef\xbc\x9d1\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    # \xe7\x94\xb1\xe4\xba\x8e\xe8\xbf\x87\xe7\xa8\x8b\xe4\xbc\x9a\xe4\xbf\xae\xe6\x94\xb9\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x85\x88copy\xe4\xb8\x80\xe4\xb8\xaa\xe5\x86\x8d\xe5\xa4\x84\xe7\x90\x86\n    kl_pd = kl_pd.copy()\n    # \xe5\xb0\x86\xe6\x97\xa5change\xe5\x8f\x96abs\xe5\x8f\x98\xe6\x88\x90\xe6\x97\xa5\xe6\x8c\xaf\xe5\xb9\x85\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8kl_pd\xe6\x96\xb0\xe5\x88\x97abs_pct_change\n    kl_pd[\'abs_pct_change\'] = np.abs(kl_pd[\'p_change\'])\n    # \xe6\x97\xa5\xe6\x8c\xaf\xe5\xb9\x85\xe5\x8f\x96\xe5\xb9\xb3\xe5\x9d\x87\xe5\x81\x9a\xe4\xb8\xba\xe7\xac\xac\xe4\xb8\x80\xe5\xb1\x82\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\xbe\xe6\x88\x90\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe5\x8d\xb3\xe8\xb7\xb3\xe7\xa9\xba\xe6\x9c\x80\xe8\xb5\xb7\xe7\xa0\x81\xe8\xa6\x81\xe6\x8c\xaf\xe5\xb9\x85\xe8\xb6\x85\xe8\xbf\x87\xe6\x97\xa5\xe6\x8c\xaf\xe5\xb9\x85\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n    change_ratio_min = kl_pd[\'abs_pct_change\'].mean()\n\n    # \xe6\x8f\x90\xe5\x8f\x96\xe6\x9c\x88\xe6\x8c\xaf\xe5\xb9\x85volume_mean\n    # TODO \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaf\xe4\xbf\xae\xe6\x94\xb921d\n    change_mean = pd_resample(kl_pd.abs_pct_change, \'21D\', how=\'mean\')\n    """"""\n        eg: change_mean\xe5\xbd\xa2\xe5\xa6\x82\n        2014-07-23    0.7940\n        2014-08-13    0.6536\n        2014-09-03    0.8120\n        2014-09-24    1.2673\n        2014-10-15    1.1007\n                       ...\n        2016-04-13    1.2080\n        2016-05-04    0.9093\n        2016-05-25    0.6208\n        2016-06-15    1.1831\n        2016-07-06    0.6693\n    """"""\n    # \xe6\x8f\x90\xe5\x8f\x96\xe6\x9c\x88\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\x9d\x87\xe5\x80\xbcvolume_mean\n    volume_mean = pd_resample(kl_pd.volume, \'21D\', how=\'mean\')\n    """"""\n        eg\xef\xbc\x9avolume_mean\xe5\xbd\xa2\xe5\xa6\x82\n        2014-07-23    1350679\n        2014-08-13    1256093\n        2014-09-03    1593358\n        2014-09-24    1816544\n        2014-10-15    2362897\n                       ...\n        2016-04-13    2341972\n        2016-05-04    1633200\n        2016-05-25    1372525\n        2016-06-15    2071612\n        2016-07-06    1136278\n    """"""\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\xb2\xa1\xe6\x9c\x89resample\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84index\xe5\x92\x8cchange_mean\xe8\xbf\x9b\xe8\xa1\x8cloc\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe6\x8a\x8a\xe6\xb2\xa1\xe6\x9c\x89\xe7\x9a\x84index\xe9\x83\xbd\xe5\x8f\x98\xe6\x88\x90nan\n    change_mean = change_mean.loc[kl_pd.index]\n    # \xe6\x9c\x89nan\xe4\xb9\x8b\xe5\x90\x8e\xe5\xbc\x80\xe5\xa7\x8b\xe5\xa1\xab\xe5\x85\x85nan\n    change_mean.fillna(method=\'pad\', inplace=True)\n    # bfill\xe5\x86\x8d\xe6\x9d\xa5\xe4\xb8\x80\xe9\x81\x8d\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe5\xa1\xab\xe5\x85\x85\xe6\x9c\x80\xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84nan\n    change_mean.fillna(method=\'bfill\', inplace=True)\n    """"""\n        loc\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xa1\xab\xe5\x85\x85nan\xe5\x90\x8echange_mean\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9achange_mean\n        2014-07-23    0.7940\n        2014-07-24    0.7940\n        2014-07-25    0.7940\n        2014-07-28    0.7940\n        2014-07-29    0.7940\n        2014-07-30    0.7940\n        2014-07-31    0.7940\n        2014-08-01    0.7940\n        2014-08-04    0.7940\n        2014-08-05    0.7940\n                       ...\n        2016-07-13    0.6693\n        2016-07-14    0.6693\n        2016-07-15    0.6693\n        2016-07-18    0.6693\n        2016-07-19    0.6693\n        2016-07-20    0.6693\n        2016-07-21    0.6693\n        2016-07-22    0.6693\n        2016-07-25    0.6693\n        2016-07-26    0.6693\n    """"""\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\xb2\xa1\xe6\x9c\x89resample\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84index\xe5\x92\x8cchange_mean\xe8\xbf\x9b\xe8\xa1\x8cloc\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe6\x8a\x8a\xe6\xb2\xa1\xe6\x9c\x89\xe7\x9a\x84index\xe9\x83\xbd\xe5\x8f\x98\xe6\x88\x90nan\n    volume_mean = volume_mean.loc[kl_pd.index]\n    # \xe6\x9c\x89nan\xe4\xb9\x8b\xe5\x90\x8e\xe5\xbc\x80\xe5\xa7\x8b\xe5\xa1\xab\xe5\x85\x85nan\n    volume_mean.fillna(method=\'pad\', inplace=True)\n    # bfill\xe5\x86\x8d\xe6\x9d\xa5\xe4\xb8\x80\xe9\x81\x8d\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe5\xa1\xab\xe5\x85\x85\xe6\x9c\x80\xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84nan\n    volume_mean.fillna(method=\'bfill\', inplace=True)\n    """"""\n        loc\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xa1\xab\xe5\x85\x85nan\xe5\x90\x8evolume_mean\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9achange_mean\n        2014-07-23    1350679.0\n        2014-07-24    1350679.0\n        2014-07-25    1350679.0\n        2014-07-28    1350679.0\n        2014-07-29    1350679.0\n        2014-07-30    1350679.0\n        2014-07-31    1350679.0\n        2014-08-01    1350679.0\n        2014-08-04    1350679.0\n        2014-08-05    1350679.0\n                        ...\n        2016-07-13    1136278.0\n        2016-07-14    1136278.0\n        2016-07-15    1136278.0\n        2016-07-18    1136278.0\n        2016-07-19    1136278.0\n        2016-07-20    1136278.0\n        2016-07-21    1136278.0\n        2016-07-22    1136278.0\n        2016-07-25    1136278.0\n        2016-07-26    1136278.0\n    """"""\n    jump_pd = pd.DataFrame()\n\n    # \xe8\xbf\xad\xe4\xbb\xa3\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\x88\x86\xe6\x9e\x90\xe8\xb7\xb3\xe7\xa9\xba\n    for kl_index in np.arange(0, kl_pd.shape[0]):\n        today = kl_pd.iloc[kl_index]\n        if today.abs_pct_change <= change_ratio_min:\n            # \xe7\xac\xac\xe4\xb8\x80\xe5\xb1\x82\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x9a\xe8\xb7\xb3\xe7\xa9\xba\xe6\x9c\x80\xe8\xb5\xb7\xe7\xa0\x81\xe8\xa6\x81\xe6\x8c\xaf\xe5\xb9\x85\xe8\xb6\x85\xe8\xbf\x87\xe6\x97\xa5\xe6\x8c\xaf\xe5\xb9\x85\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n            continue\n\n        date = fmt_date(today.date)\n        if today.volume <= volume_mean.loc[date]:\n            # \xe7\xac\xac\xe4\xba\x8c\xe5\xb1\x82\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x9a\xe8\xb7\xb3\xe7\xa9\xba\xe5\xbd\x93\xe6\x97\xa5\xe7\x9a\x84\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe8\xb5\xb7\xe7\xa0\x81\xe8\xa6\x81\xe8\xb6\x85\xe8\xbf\x87\xe5\xbd\x93\xe6\x9c\x88\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n            continue\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x9c\x88\xe6\x8c\xaf\xe5\xb9\x85, \xe5\x81\x9a\xe4\xb8\xba\xe4\xbb\x8a\xe5\xa4\xa9\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc\xe7\x99\xbe\xe5\x88\x86\xe6\xaf\x94\n        jump_threshold = np.abs(change_mean.loc[date])\n        if today.pre_close == 0 or jump_threshold == 0:\n            # \xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe9\x81\xbf\xe5\x85\x8d\xe5\xbc\x82\xe5\xb8\xb8\xe6\x95\xb0\xe6\x8d\xae\n            continue\n\n        # \xe8\xae\xa1\xe7\xae\x97\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\xa5\xe6\x98\xa8\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xb8\xba\xe5\x9f\xba\xe6\x95\xb0\xe4\xb9\x98\xe4\xbb\xa5\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xe6\xaf\x94\xe4\xbe\x8b\xe9\x99\xa4100\xe5\xbe\x97\xe5\x88\xb0\xe5\x92\x8c\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe7\x9b\xb8\xe5\x90\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbcjump_diff\n        # \xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xaejump_diff_factor\xe6\x9d\xa5\xe8\xb0\x83\xe8\x8a\x82\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4jump_diff_factor\xef\xbc\x9d1\n        jump_diff = today.pre_close * jump_threshold / 100 * jump_diff_factor\n        # \xe7\xac\xac\xe4\xb8\x89\xe5\xb1\x82\xe5\x88\xa4\xe6\x96\xad\xef\xbc\x9a\xe6\xa0\xb9\xe6\x8d\xae\xe5\x90\x91\xe4\xb8\x8a\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe9\x80\x89\xe6\x8b\xa9\xe8\xb7\xb3\xe7\xa9\xba\xe8\xae\xa1\xe7\xae\x97\n        if today.p_change > 0 and (today.low - today.pre_close) > jump_diff:\n            # \xe6\xb3\xa8\xe6\x84\x8f\xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe5\x88\xa4\xe6\x96\xad\xe4\xbd\xbf\xe7\x94\xa8today.low\xef\xbc\x8c\xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba 1\n            today[\'jump\'] = 1\n            # \xe6\x9c\x88\xe6\x8c\xaf\xe5\xb9\x85\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\n            today[\'jump_threshold\'] = jump_threshold\n            # \xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe9\x98\x80\xe5\x80\xbc\n            today[\'jump_diff\'] = jump_diff\n            # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xe5\xbc\xba\xe5\xba\xa6\n            today[\'jump_power\'] = (today.low - today.pre_close) / jump_diff\n\n            jump_pd = jump_pd.append(today)\n        elif today.p_change < 0 and (today.pre_close - today.high) > jump_diff:\n            # \xe6\xb3\xa8\xe6\x84\x8f\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe5\x88\xa4\xe6\x96\xad\xe4\xbd\xbf\xe7\x94\xa8today.high\xef\xbc\x8c\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba \xef\xbc\x8d1\n            today[\'jump\'] = -1\n            # \xe6\x9c\x88\xe6\x8c\xaf\xe5\xb9\x85\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\n            today[\'jump_threshold\'] = jump_threshold\n            # \xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe9\x98\x80\xe5\x80\xbc\n            today[\'jump_diff\'] = jump_diff\n            # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xe5\xbc\xba\xe5\xba\xa6\n            today[\'jump_power\'] = (today.pre_close - today.high) / jump_diff\n            jump_pd = jump_pd.append(today)\n\n    if show:\n        # \xe9\x80\x9a\xe8\xbf\x87plot_candle_form_klpd\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87view_indexs\xe5\x8f\x82\xe6\x95\xb0\n        ABuMarketDrawing.plot_candle_form_klpd(kl_pd, view_indexs=jump_pd.index)\n    return jump_pd\n\n\n# noinspection PyClassHasNoInit\nclass AbuJumpTuple(namedtuple(\'AbuJumpTuple\',\n                              (\'date\',\n                               \'direction\',\n                               \'power\',\n                               \'price\'))):\n    __slots__ = ()\n\n    def __repr__(self):\n        return ""date:{}, direction:{}, power:{}, price:{}"".format(\n            self.date,\n            self.direction,\n            self.power, self.price)\n\n\ndef calc_jump_line(kl_pd, power_threshold=2.0, jump_diff_factor=1, show=True):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87calc_jump\xe8\xae\xa1\xe7\xae\x97kl_pd\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xef\xbc\x8c\n    \xe9\x80\x9a\xe8\xbf\x87\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8fjump.jump_power\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xe7\xbb\x84\xe6\x88\x90AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n    AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x89\xe8\xb7\xb3\xe7\xa9\xba\xe6\x97\xa5\xe6\x9c\x9fdate\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91direction\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8fpower\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe5\x9f\xba\xe6\x95\xb0\xe4\xbb\xb7\xe6\xa0\xbcprice\xe7\xbb\x84\xe6\x88\x90\xef\xbc\x8c\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97jump_lines\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\n\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param power_threshold: \xe7\xad\x9b\xe9\x80\x89\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe7\x82\xb9\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cfloat\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa42.0\n    :param jump_diff_factor: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99calc_jump\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xaejump_diff_factor\xe6\x9d\xa5\xe8\xb0\x83\xe8\x8a\x82\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\n    :return: AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    """"""\n\n    # \xe9\x80\x9a\xe8\xbf\x87calc_jump\xe8\xae\xa1\xe7\xae\x97kl_pd\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbbpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1jump_pd\n    jump_pd = calc_jump(kl_pd, jump_diff_factor=jump_diff_factor, show=False)\n    jump_lines = []\n    for jump_index in np.arange(0, jump_pd.shape[0]):\n        jump = jump_pd.iloc[jump_index]\n        # \xe9\x80\x9a\xe8\xbf\x87\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8fjump.jump_power\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xe7\xbb\x84\xe6\x88\x90AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\n        if jump.jump_power > power_threshold:\n            # AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\x89\xe8\xb7\xb3\xe7\xa9\xba\xe6\x97\xa5\xe6\x9c\x9fdate\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91direction\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8fpower\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe5\x9f\xba\xe6\x95\xb0\xe4\xbb\xb7\xe6\xa0\xbcprice\xe7\xbb\x84\xe6\x88\x90\n            jump_tuple = AbuJumpTuple(jump_pd.index[jump_index],\n                                      jump.jump, jump.jump_power,\n                                      jump.pre_close)\n            jump_lines.append(jump_tuple)\n    if show:\n        _show_jump_line(kl_pd, jump_lines)\n    return jump_lines\n\n\ndef _show_jump_line(kl_pd, jump_lines):\n    """"""\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97jump_lines\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param jump_lines: AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    with plt_show():\n        plt.plot(kl_pd.close)\n        # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87itertools.cycle(K_PLT_MAP_STYLE)\xe5\xbd\xa2\xe6\x88\x90\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\n        for jump_tuple, cs_color in zip(jump_lines, itertools.cycle(K_PLT_MAP_STYLE)):\n            # \xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xe4\xbd\x8d\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8a\xe9\x9d\xa2\xe7\xbb\x98\xe5\x88\xb6\xe6\xa8\xaa\xe7\xba\xbf\xef\xbc\x8clabel\xe6\xa0\x87\xe6\xb3\xa8\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\n            plt.axhline(jump_tuple.price, color=cs_color, label=\'power:\' + str(jump_tuple.power))\n            # \xe8\xb7\xb3\xe7\xa9\xba\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x9aup\xef\xbc\x8fdown\xef\xbc\x8c \xe6\xa0\xb9\xe6\x8d\xaejump_tuple.direction\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91\n            jump_desc = \'{} : {}\'.format(jump_tuple.date, \' up \' if jump_tuple.direction > 0 else \' down \')\n            # \xe5\x86\x8d\xe6\x8a\x8a\xe8\xbf\x99\xe4\xb8\xaa\xe8\xb7\xb3\xe7\xa9\xba\xe6\x97\xb6\xe9\x97\xb4\xe7\x82\xb9\xe4\xb8\x8a\xe7\x94\xbb\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9c\x86\xe5\x9c\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe7\xa4\xba\n            plt.plot(jump_tuple.date, jump_tuple.price, \'ro\', markersize=12, markeredgewidth=(1.0 * jump_tuple.power),\n                     markerfacecolor=\'None\', markeredgecolor=cs_color, label=jump_desc)\n\n        plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n        plt.title(\'jump lines\')\n\n\ndef calc_jump_line_weight(kl_pd, sw=(0.5, 0.5), power_threshold=2.0, jump_diff_factor=1, show=True):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87calc_jump\xe8\xae\xa1\xe7\xae\x97kl_pd\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xef\xbc\x8c\n    \xe6\x8a\x8a\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xe9\x83\xbd\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaAbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x8ecalc_jump_line\xe4\xb8\x8d\xe5\x90\x8c\xe7\x82\xb9\xe6\x98\xaf\n    \xe8\xae\xa1\xe7\xae\x97\xe6\x97\xb6\xe9\x97\xb4\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe5\x88\x86\xe4\xb8\xa4\xe9\x83\xa8\xe5\x88\x86\xe7\xbb\x84\xe6\x88\x90 \xe9\x9d\x9e\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f \xef\xbc\x8b \xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\n    \xe5\x8f\x82\xe6\x95\xb0sw\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8d\xa0\xe6\xaf\x94\xef\xbc\x8csw[0]\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe9\x9d\x9e\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe6\x89\x80\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\xa0\xe6\xaf\x94\xef\xbc\x8csw[1]\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe6\x89\x80\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\xa0\xe6\xaf\x94\n    \xe6\x9c\x80\xe7\xbb\x88\xe5\x8a\xa0\xe6\x9d\x83\xe8\x83\xbd\xe9\x87\x8f\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe8\x83\xbd\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x83\xbd\xe9\x87\x8f\xe6\x9b\xbf\xe6\x8d\xa2\xef\xbc\x8c\xe5\x8a\xa0\xe5\x85\xa5\xe5\x88\xb0\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\n    :param kl_pd:  \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param sw: tuple\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8csw[0]\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe9\x9d\x9e\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe6\x89\x80\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\xa0\xe6\xaf\x94\xef\xbc\x8csw[1]\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe6\x89\x80\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\xa0\xe6\xaf\x94\n    :param power_threshold: \xe7\xad\x9b\xe9\x80\x89\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe7\x82\xb9\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cfloat\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa42.0\n    :param jump_diff_factor: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99calc_jump\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xbe\xe7\xbd\xaejump_diff_factor\xe6\x9d\xa5\xe8\xb0\x83\xe8\x8a\x82\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\n    :return: AbuJumpTuple\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    """"""\n\n    # \xe9\x80\x9a\xe8\xbf\x87calc_jump\xe8\xae\xa1\xe7\xae\x97kl_pd\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbbpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1jump_pd\n    jump_pd = calc_jump(kl_pd, jump_diff_factor=jump_diff_factor, show=False)\n    ws_jump_lines = []\n    for jump_index in np.arange(0, jump_pd.shape[0]):\n        jump = jump_pd.iloc[jump_index]\n        # \xe6\x8a\x8a\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xb7\xb3\xe7\xa9\xba\xe7\x82\xb9\xe9\x83\xbd\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaAbuJumpTuple\n        jump_tuple = AbuJumpTuple(jump_pd.index[jump_index],\n                                  jump.jump, jump.jump_power,\n                                  jump.pre_close)\n\n        # \xe6\x8b\xbf\xe5\x87\xba\xe8\xb7\xb3\xe7\xa9\xba\xe6\x97\xa5\xe7\x9a\x84index\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe6\x8b\xbf\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe6\x9d\x83\xe9\x87\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\n        weight_index = kl_pd.index.tolist().index(jump_tuple.date)\n        # \xe7\xba\xbf\xe6\x80\xa7\xe5\x8a\xa0\xe6\x9d\x830-1kl_pd.shape[0]\xe4\xb8\xaa, \xe4\xb9\x8b\xe5\x90\x8e\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        weights = np.linspace(0, 1, kl_pd.shape[0])\n        """"""\n        eg: weights \xe5\xbd\xa2\xe5\xa6\x82\n        array([ 0.    ,  0.002 ,  0.004 ,  0.006 ,  0.008 ,  0.0099,  0.0119,\n                0.0139,  0.0159,  0.0179,  0.0199,  0.0219,  0.0239,  0.0258,\n                0.0278,  0.0298,  0.0318,  0.0338,  0.0358,  0.0378,  0.0398,\n                0.0417,  0.0437,  0.0457,  0.0477,  0.0497,  0.0517,  0.0537,\n                0.0557,  0.0577,  0.0596,  0.0616,  0.0636,  0.0656,  0.0676,\n                ......\n                0.4453,  0.4473,  0.4493,  0.4513,  0.4533,  0.4553,  0.4573,\n                0.4592,  0.4612,  0.4632,  0.4652,  0.4672,  0.4692,  0.4712,\n                0.4732,  0.4751,  0.4771,  0.4791,  0.4811,  0.4831,  0.4851,\n                0.4871,  0.4891,  0.4911,  0.493 ,  0.495 ,  0.497 ,  0.499 ,\n                ......\n                0.7097,  0.7117,  0.7137,  0.7157,  0.7177,  0.7197,  0.7217,\n                0.7237,  0.7256,  0.7276,  0.7296,  0.7316,  0.7336,  0.7356,\n                0.7376,  0.7396,  0.7416,  0.7435,  0.7455,  0.7475,  0.7495,\n                0.7515,  0.7535,  0.7555,  0.7575,  0.7594,  0.7614,  0.7634,\n                ......\n                0.9463,  0.9483,  0.9503,  0.9523,  0.9543,  0.9563,  0.9583,\n                0.9602,  0.9622,  0.9642,  0.9662,  0.9682,  0.9702,  0.9722,\n                0.9742,  0.9761,  0.9781,  0.9801,  0.9821,  0.9841,  0.9861,\n                0.9881,  0.9901,  0.992 ,  0.994 ,  0.996 ,  0.998 ,  1.    ])\n        """"""\n\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\x97\xb6\xe9\x97\xb4\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe5\x88\x86\xe4\xb8\xa4\xe9\x83\xa8\xe5\x88\x86\xe7\xbb\x84\xe6\x88\x90\xef\xbc\x9a\n        #   sw[0]\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe9\x9d\x9e\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe6\x89\x80\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\xa0\xe6\xaf\x94\n        #   sw[1]\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe6\x89\x80\xe6\x9c\x80\xe7\xbb\x88\xe5\x8d\xa0\xe6\xaf\x94\n        w_power = (jump_tuple.power * sw[0]) + (weights[weight_index] * jump_tuple.power * sw[1])\n        if w_power > power_threshold:\n            # \xe6\x9c\x80\xe7\xbb\x88\xe5\x8a\xa0\xe6\x9d\x83\xe8\x83\xbd\xe9\x87\x8f\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe8\x83\xbd\xe9\x87\x8f\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x83\xbd\xe9\x87\x8f\xe6\x9b\xbf\xe6\x8d\xa2\xef\xbc\x8c\xe5\x8a\xa0\xe5\x85\xa5\xe5\x88\xb0ws_jump_lines\xe4\xb8\xad\n            # noinspection PyProtectedMember\n            jump_tuple = jump_tuple._replace(power=w_power)\n            ws_jump_lines.append(jump_tuple)\n    if show:\n        _show_jump_line(kl_pd, ws_jump_lines)\n    return ws_jump_lines\n'"
abupy/TLineBu/ABuTLSimilar.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe4\xb8\x8a\xe5\xb1\x82\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xba\x94\xe7\x94\xa8\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport copy\nimport logging\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom statsmodels.tsa.stattools import coint\n\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode\nfrom ..CoreBu import ABuEnv\nfrom ..MarketBu import ABuSymbolPd\nfrom ..MarketBu.ABuSymbol import code_to_symbol\nfrom ..SimilarBu import ABuSimilar\nfrom ..SimilarBu import ECoreCorrType\nfrom ..TradeBu.ABuBenchmark import AbuBenchmark\nfrom ..UtilBu import ABuScalerUtil\nfrom ..UtilBu.ABuProgress import do_clear_output\nfrom ..SimilarBu.ABuSimilar import from_local\nfrom ..TLineBu.ABuTLine import AbuTLine\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\ng_top_corr_cnt = 300\ng_coint_threshold = 0.38\ng_coint_show_max = 10\n\n\ndef rank_corr_sum(corr_df_dict, symbol):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8corr_df_dict\xe5\x90\x84\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xadsymbol\xe7\x9a\x84rank\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8csum\xe5\x90\x88\xe5\xb9\xb6\xef\xbc\x9a\n        eg\xef\xbc\x9arank_pd\n                           pears  sperm\n            usBIDU           5.0    5.0\n            usFB             8.0    8.0\n            usGOOG           6.0    6.0\n            usNOAH           1.0    1.0\n            usSFUN           7.0    7.0\n            usTSLA           9.0    9.0\n            usVIPS           3.0    3.0\n            usWUBA           4.0    4.0\n\n        eg: rank_pd.sum(axis=1)\n            usBIDU           10.0\n            usFB             16.0\n            usGOOG           12.0\n            usNOAH            2.0\n            usSFUN           14.0\n            usTSLA           18.0\n            usVIPS            6.0\n            usWUBA            8.0\n    :param corr_df_dict: \xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe7\x9f\xa9\xe9\x98\xb5\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n    :param symbol: eg: \'usTSLA\'\n    :return: rank_pd.sum(axis=1)\xef\xbc\x8cpd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    rank_pd = pd.DataFrame()\n    for corr_df_key in corr_df_dict:\n        corr_df = corr_df_dict[corr_df_key]\n        """"""\n            eg\xef\xbc\x9acorr_df\n\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3013  0.3690  0.4015  0.3680  0.3015  0.3706  0.4320\n            usFB           0.3013  1.0000  0.6609  0.2746  0.1978  0.4080  0.2856  0.2438\n            usGOOG         0.3690  0.6609  1.0000  0.3682  0.1821  0.3477  0.3040  0.2917\n            usNOAH         0.4015  0.2746  0.3682  1.0000  0.3628  0.2178  0.4645  0.4488\n            usSFUN         0.3680  0.1978  0.1821  0.3628  1.0000  0.2513  0.2843  0.4883\n            usTSLA         0.3015  0.4080  0.3477  0.2178  0.2513  1.0000  0.2327  0.3340\n            usVIPS         0.3706  0.2856  0.3040  0.4645  0.2843  0.2327  1.0000  0.4189\n            usWUBA         0.4320  0.2438  0.2917  0.4488  0.4883  0.3340  0.4189  1.0000\n        """"""\n\n        if symbol not in corr_df:\n            # TODO \xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xe5\xa4\x84\xe7\x90\x86\xe6\x9c\x89\xe7\x82\xb9\xe6\x99\x9a\n            # print(corr_df.columns)\n            # print(code_to_symbol(symbol).symbol_code)\n            return None\n\n        corr_rank = corr_df[symbol].rank(ascending=False, method=\'first\')\n        """"""\n            eg\xef\xbc\x9a corr_rank\n            usBIDU           5.0\n            usFB             8.0\n            usGOOG           6.0\n            usNOAH           1.0\n            usSFUN           7.0\n            usTSLA           9.0\n            usVIPS           3.0\n            usWUBA           4.0\n        """"""\n        rank_pd = rank_pd.join(pd.DataFrame(corr_rank.values, index=corr_rank.index,\n                                            columns=[corr_df_key]), how=\'outer\')\n        """"""\n            eg\xef\xbc\x9arank_pd\n                           pears  sperm\n            usBIDU           5.0    5.0\n            usFB             8.0    8.0\n            usGOOG           6.0    6.0\n            usNOAH           1.0    1.0\n            usSFUN           7.0    7.0\n            usTSLA           9.0    9.0\n            usVIPS           3.0    3.0\n            usWUBA           4.0    4.0\n        """"""\n\n    # TODO: \xe5\x85\xa8\xe6\x98\xaf\xe7\xad\x89\xe6\x9d\x83\xe9\x87\x8d\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\xaf\xe5\x88\x86\xe9\x85\x8d\xe6\x9d\x83\xe9\x87\x8d\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\n    """"""\n        eg: rank_pd.sum(axis=1)\n        usBIDU           10.0\n        usFB             16.0\n        usGOOG           12.0\n        usNOAH            2.0\n        usSFUN           14.0\n        usTSLA           18.0\n        usVIPS            6.0\n        usWUBA            8.0\n    """"""\n    # \xe6\xb8\x85\xe4\xb8\x80\xe4\xb8\x8b\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe5\xa4\xaa\xe4\xb9\xb1\n    do_clear_output()\n    return rank_pd.sum(axis=1)\n\n\n@from_local\ndef calc_similar(symbol, cmp_symbol, sum_rank=None, corr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS,\n                                                               ECoreCorrType.E_CORE_TYPE_SPERM), show=True):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8ABuTLSimilar.calc_similar()\xe5\x87\xbd\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe6\x95\xb0\xe5\x80\xbc\xe6\x98\xaf\xe4\xbb\xa5\xe7\x9b\xae\xe6\xa0\x87\xe8\x82\xa1\xe7\xa5\xa8\xe6\x89\x80\xe5\x9c\xa8\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xba\xe8\xa7\x82\xe5\xaf\x9f\xe8\x80\x85\xef\xbc\x8c\n    \xe5\xae\x83\xe4\xb8\x8d\xe5\x85\xb3\xe5\xbf\x83\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe5\x85\xb7\xe4\xbd\x93\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8ccalc_similar(a, b) \xe7\x9a\x84\xe5\xb7\xa5\xe4\xbd\x9c\xe6\xb5\x81\xe7\xa8\x8b\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n    1.\xe8\xae\xa1\xe7\xae\x97a\xe4\xb8\x8e\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\n    2.\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe8\xbf\x9b\xe8\xa1\x8crank\xe6\x8e\x92\xe5\xba\x8f\n    3.\xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8b\xe5\x9c\xa8rank\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe6\xad\xa4\xe4\xbd\x8d\xe7\xbd\xae\xe5\x80\xbc\xe5\x8d\xb3\xe4\xb8\xba\xe7\xbb\x93\xe6\x9e\x9c\n    \xe5\x8d\xb3ABuTLSimilar.calc_similar\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe7\x94\xb10\xe8\x87\xb31\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97usTSLA\xe4\xb8\x8eusAAPL\xe5\x9c\xa8\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe4\xb8\xad\xe7\x9a\x84\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe6\xb0\xb4\xe5\xb9\xb3\xef\xbc\x8c\xe4\xbc\x9a\xe6\x9b\xb4\xe5\x85\xa8\xe5\xb1\x80\xe5\xae\xa2\xe8\xa7\x82\xe7\x9a\x84\xe4\xbd\x93\xe7\x8e\xb0\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\n\n    :param symbol: eg: \'usTSLA\'\n    :param cmp_symbol: \xe4\xb8\x8esymbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb4\xe4\xbd\x93\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\xaf\xb9\xe6\xaf\x94\xe7\x9a\x84symbol eg: \'usTSLA\'\n    :param sum_rank: \xe5\xb7\xb2\xe7\xbb\x8f\xe7\xbc\x93\xe5\xad\x98\xe4\xba\x86\xe7\x9a\x84sum_rank\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\n                        eg: sum_rank\n                        usBIDU           10.0\n                        usFB             16.0\n                        usGOOG           12.0\n                        usNOAH            2.0\n                        usSFUN           14.0\n                        usTSLA           18.0\n                        usVIPS            6.0\n                        usWUBA            8.0\n    :param corr_jobs: \xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9acorr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS, ECoreCorrType.E_CORE_TYPE_SPERM)\n                      \xe5\x8f\xaf\xe4\xbb\xa5\xe5\x86\x8d\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x9b\xb4\xe5\xa4\x9ajobs\n                      eg\xef\xbc\x9a\n                        corr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS, ECoreCorrType.E_CORE_TYPE_SPERM,\n                                   ECoreCorrType.E_CORE_TYPE_SIGN, ECoreCorrType.E_CORE_TYPE_ROLLING)\n                      \xe6\xb3\xa8\xe6\x84\x8f\xe6\xaf\x8f\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe7\xa7\x8d\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\x80\x97\xe6\x97\xb6\xe9\x83\xbd\xe4\xbc\x9a\xe5\xa2\x9e\xe5\x8a\xa0\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: rank_score (float: 0\xe8\x87\xb31), sum_rank\n    """"""\n\n    cs_symbol = code_to_symbol(symbol)\n    cs_cmp_symbol = code_to_symbol(cmp_symbol)\n\n    if cs_symbol.market != cs_cmp_symbol.market:\n        # \xe5\xbf\x85\xe9\xa1\xbb\xe5\x9c\xa8\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\n        logging.info(\'{} and {} in different market!!!\'.format(symbol, cmp_symbol))\n        return\n\n    symbol = cs_symbol.value\n    cmp_symbol = cs_cmp_symbol.value\n    if sum_rank is None:\n        tmp_market = ABuEnv.g_market_target\n        # \xe5\xbc\xba\xe5\x88\xb6\xe6\x8a\x8a\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\n        ABuEnv.g_market_target = cs_symbol.market\n        corr_df_dict = ABuSimilar.multi_corr_df(corr_jobs)\n        # \xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\n        ABuEnv.g_market_target = tmp_market\n        """"""\n            eg\xef\xbc\x9a corr_df_dict\n            {\'pears\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3013  0.3690  0.4015  0.3680  0.3015  0.3706  0.4320\n            usFB           0.3013  1.0000  0.6609  0.2746  0.1978  0.4080  0.2856  0.2438\n            usGOOG         0.3690  0.6609  1.0000  0.3682  0.1821  0.3477  0.3040  0.2917\n            usNOAH         0.4015  0.2746  0.3682  1.0000  0.3628  0.2178  0.4645  0.4488\n            usSFUN         0.3680  0.1978  0.1821  0.3628  1.0000  0.2513  0.2843  0.4883\n            usTSLA         0.3015  0.4080  0.3477  0.2178  0.2513  1.0000  0.2327  0.3340\n            usVIPS         0.3706  0.2856  0.3040  0.4645  0.2843  0.2327  1.0000  0.4189\n            usWUBA         0.4320  0.2438  0.2917  0.4488  0.4883  0.3340  0.4189  1.0000\n\n            \'sperm\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3888  0.4549  0.4184  0.3747  0.3623  0.4333  0.4396\n            usFB           0.3888  1.0000  0.7013  0.2927  0.2379  0.4200  0.3123  0.2216\n            usGOOG         0.4549  0.7013  1.0000  0.3797  0.2413  0.3871  0.3922  0.3035\n            usNOAH         0.4184  0.2927  0.3797  1.0000  0.3581  0.2066  0.4643  0.4382\n            usSFUN         0.3747  0.2379  0.2413  0.3581  1.0000  0.2645  0.3890  0.4693\n            usTSLA         0.3623  0.4200  0.3871  0.2066  0.2645  1.0000  0.2540  0.2801\n            usVIPS         0.4333  0.3123  0.3922  0.4643  0.3890  0.2540  1.0000  0.4080\n            usWUBA         0.4396  0.2216  0.3035  0.4382  0.4693  0.2801  0.4080  1.0000 }\n        """"""\n        sum_rank = rank_corr_sum(corr_df_dict, symbol)\n        """"""\n            eg: sum_rank\n            usBIDU           10.0\n            usFB             16.0\n            usGOOG           12.0\n            usNOAH            2.0\n            usSFUN           14.0\n            usTSLA           18.0\n            usVIPS            6.0\n            usWUBA            8.0\n        """"""\n        if sum_rank is None:\n            logging.info(\'{} not in corr df!!!\'.format(symbol))\n            return None, None\n\n    if cmp_symbol not in sum_rank.index:\n        logging.info(\'{} not in sum_rank.index\'.format(cmp_symbol))\n        return None, None\n\n    # sum_rank.sort_values(ascending=True)\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9cindex\xe5\x8d\xb3\xe6\x98\xaf\xe5\xaf\xb9\xe6\xaf\x94\xe7\x9a\x84\xe6\x8e\x92\xe5\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe5\x80\xbccmp_rank\n    cmp_rank = sum_rank.sort_values(ascending=True).index.tolist().index(cmp_symbol)\n    """"""\n        eg: sum_rank.sort_values(ascending=True)\n        usNOAH            2.0\n        us_NYSE:.IXIC     4.0\n        usVIPS            6.0\n        usWUBA            8.0\n        usBIDU           10.0\n        usGOOG           12.0\n        usSFUN           14.0\n        usFB             16.0\n        usTSLA           18.0\n    """"""\n    # \xe8\xae\xa1\xe7\xae\x97cmp_rank\xe5\x9c\xa8\xe6\x95\xb4\xe4\xbd\x93sum_rank\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xbd\x8d\xe7\xbd\xaerank_score\n    rank_score = 1 - cmp_rank / sum_rank.shape[0]\n\n    if show:\n        log_func = logging.info if ABuEnv.g_is_ipython else print\n        log_func(\'{} similar rank score {} : {}\'.format(symbol, cmp_symbol, rank_score))\n\n        # \xe9\x80\x9a\xe8\xbf\x87make_kl_df\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        mul_pd = ABuSymbolPd.make_kl_df([symbol, cmp_symbol], n_folds=2)\n        kl_pd = mul_pd[symbol]\n        kl_pd_cmp = mul_pd[cmp_symbol]\n\n        # \xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe9\x87\x8f\xe7\xba\xa7type_look=\'look_max\'\n        kl_pd, kl_pd_cmp = ABuScalerUtil.scaler_xy(kl_pd.close,\n                                                   kl_pd_cmp.close,\n                                                   type_look=\'look_max\')\n\n        with plt_show():\n            # \xe9\xa6\x96\xe5\x85\x88\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xb7\xb2\xe7\xbb\x8f\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\n            kl_pd.plot()\n            kl_pd_cmp.plot()\n            plt.legend([symbol, cmp_symbol])\n            plt.title(\'similar draw\')\n\n        distance = (kl_pd - kl_pd_cmp)\n        # \xe9\x80\x9a\xe8\xbf\x87distance\xe6\x9e\x84\xe9\x80\xa0\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xaf\xb9\xe8\xb1\xa1AbuTLine\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x87\xa0\xe4\xb8\xaa\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\n        line = AbuTLine(distance, line_name=\'{} distance {}\'.format(symbol, cmp_symbol))\n        line.show()\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\x8a\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\n        line.show_regress_trend_channel()\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\'\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\'\n        # line.show_shift_distance()\n        # \xe5\xaf\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x98\xe5\x88\xb6\n        # line.show_support_resistance_trend(show=False)\n\n    return rank_score, sum_rank\n\n\n@from_local\ndef calc_similar_top(symbol, sum_rank=None, corr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS,\n                                                       ECoreCorrType.E_CORE_TYPE_SPERM), show=True, show_cnt=10):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8corr_jobs\xe7\xa7\x8d\xe7\x9b\xb8\xe5\x85\xb3\xe7\xae\x97\xe6\xb3\x95\xe5\x9c\xa8env\xe6\x89\x80\xe5\x9c\xa8\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe4\xb8\x8esymbol\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84show_cnt\xe4\xb8\xaa\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    show_cnt\xe4\xb8\xaa\n    :param symbol: eg: \'usTSLA\'\n    :param sum_rank: \xe5\xb7\xb2\xe7\xbb\x8f\xe7\xbc\x93\xe5\xad\x98\xe4\xba\x86\xe7\x9a\x84sum_rank\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\n                        eg: sum_rank\n                        usBIDU           10.0\n                        usFB             16.0\n                        usGOOG           12.0\n                        usNOAH            2.0\n                        usSFUN           14.0\n                        usTSLA           18.0\n                        usVIPS            6.0\n                        usWUBA            8.0\n    :param corr_jobs: \xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9acorr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS, ECoreCorrType.E_CORE_TYPE_SPERM)\n                      \xe5\x8f\xaf\xe4\xbb\xa5\xe5\x86\x8d\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x9b\xb4\xe5\xa4\x9ajobs\n                      eg\xef\xbc\x9a\n                        corr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS, ECoreCorrType.E_CORE_TYPE_SPERM,\n                                   ECoreCorrType.E_CORE_TYPE_SIGN, ECoreCorrType.E_CORE_TYPE_ROLLING)\n                      \xe6\xb3\xa8\xe6\x84\x8f\xe6\xaf\x8f\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe7\xa7\x8d\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\x80\x97\xe6\x97\xb6\xe9\x83\xbd\xe4\xbc\x9a\xe5\xa2\x9e\xe5\x8a\xa0\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param show_cnt: \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84top n\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0\n    :return: \xe6\x8e\x92\xe5\xba\x8f\xe5\xa5\xbd\xe7\x9a\x84top \xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n                eg\xef\xbc\x9a\n                    us_NYSE:.IXIC     4.0\n                    usFB              6.0\n                    usGOOG            8.0\n                    usWUBA           11.0\n                    usBIDU           11.0\n                    usSFUN           14.0\n                    usVIPS           16.0\n                    usNOAH           18.0\n    """"""\n    cs = code_to_symbol(symbol)\n    symbol = cs.value\n    if sum_rank is None:\n        # TODO \xe9\x87\x8d\xe5\xa4\x8d\xe4\xbb\xa3\xe7\xa0\x81\xe5\xa4\xaa\xe5\xa4\x9a\xef\xbc\x8c\xe6\x8f\x90\xe5\x89\x8d\xe5\xa4\xb4\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\n        tmp_market = ABuEnv.g_market_target\n        # \xe5\xbc\xba\xe5\x88\xb6\xe6\x8a\x8a\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\n        ABuEnv.g_market_target = cs.market\n        corr_df_dict = ABuSimilar.multi_corr_df(corr_jobs)\n        # \xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\n        ABuEnv.g_market_target = tmp_market\n        """"""\n            eg\xef\xbc\x9a corr_df_dict\n            {\'pears\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3013  0.3690  0.4015  0.3680  0.3015  0.3706  0.4320\n            usFB           0.3013  1.0000  0.6609  0.2746  0.1978  0.4080  0.2856  0.2438\n            usGOOG         0.3690  0.6609  1.0000  0.3682  0.1821  0.3477  0.3040  0.2917\n            usNOAH         0.4015  0.2746  0.3682  1.0000  0.3628  0.2178  0.4645  0.4488\n            usSFUN         0.3680  0.1978  0.1821  0.3628  1.0000  0.2513  0.2843  0.4883\n            usTSLA         0.3015  0.4080  0.3477  0.2178  0.2513  1.0000  0.2327  0.3340\n            usVIPS         0.3706  0.2856  0.3040  0.4645  0.2843  0.2327  1.0000  0.4189\n            usWUBA         0.4320  0.2438  0.2917  0.4488  0.4883  0.3340  0.4189  1.0000\n\n            \'sperm\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3888  0.4549  0.4184  0.3747  0.3623  0.4333  0.4396\n            usFB           0.3888  1.0000  0.7013  0.2927  0.2379  0.4200  0.3123  0.2216\n            usGOOG         0.4549  0.7013  1.0000  0.3797  0.2413  0.3871  0.3922  0.3035\n            usNOAH         0.4184  0.2927  0.3797  1.0000  0.3581  0.2066  0.4643  0.4382\n            usSFUN         0.3747  0.2379  0.2413  0.3581  1.0000  0.2645  0.3890  0.4693\n            usTSLA         0.3623  0.4200  0.3871  0.2066  0.2645  1.0000  0.2540  0.2801\n            usVIPS         0.4333  0.3123  0.3922  0.4643  0.3890  0.2540  1.0000  0.4080\n            usWUBA         0.4396  0.2216  0.3035  0.4382  0.4693  0.2801  0.4080  1.0000 }\n        """"""\n        sum_rank = rank_corr_sum(corr_df_dict, symbol)\n        """"""\n            eg: sum_rank\n            usBIDU           10.0\n            usFB             16.0\n            usGOOG           12.0\n            usNOAH            2.0\n            usSFUN           14.0\n            usTSLA           18.0\n            usVIPS            6.0\n            usWUBA            8.0\n        """"""\n        if sum_rank is None:\n            logging.info(\'{} not in corr df!!!\'.format(symbol))\n            return\n\n    show_cnt = sum_rank.shape[0] - 1 if show_cnt > sum_rank.shape[0] else show_cnt\n    # sort_values\xe5\x90\x8e\xe5\x8d\xb3\xe4\xb8\xbarank\xe6\x8e\x92\xe5\xba\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe6\x8c\x89\xe7\x85\xa7\xe5\x8f\x82\xe6\x95\xb0show_cnt\xe4\xb8\xaa\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x98\xaf\xe8\x87\xaa\xe8\xba\xab\xe6\x8e\xa0\xe8\xbf\x87\n    rank_head = sum_rank.sort_values(ascending=True)[1: show_cnt + 1]\n    if show:\n        kl_pd = ABuSymbolPd.make_kl_df(symbol, n_folds=1)\n        # \xe8\x8e\xb7\xe5\x8f\x96top show_cnt\xe4\xb8\xaasymbol\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        mul_pd = ABuSymbolPd.make_kl_df(rank_head.index, n_folds=1)\n\n        for cmp_symbol in rank_head.index:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\xa9\xe6\x94\xbe\n            kl_pd_close, kl_pd_cmp_close = ABuScalerUtil.scaler_xy(kl_pd.close,\n                                                                   mul_pd[cmp_symbol].close,\n                                                                   type_look=\'look_max\')\n\n            with plt_show():\n                # \xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\xaf\xb9\xe6\xaf\x94\n                kl_pd_close.plot()\n                kl_pd_cmp_close.plot()\n                plt.legend([symbol, cmp_symbol])\n                plt.title(\'similar draw\')\n\n    """"""\n        eg\xef\xbc\x9arank_head\n        us_NYSE:.IXIC     4.0\n        usFB              6.0\n        usGOOG            8.0\n        usWUBA           11.0\n        usBIDU           11.0\n        usSFUN           14.0\n        usVIPS           16.0\n        usNOAH           18.0\n    """"""\n    return rank_head\n\n\n@from_local\ndef coint_similar(symbol, sum_rank=None, corr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS,\n                                                    ECoreCorrType.E_CORE_TYPE_SPERM), show=True):\n    """"""\n    \xe9\xa6\x96\xe5\x85\x88\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\x98\xaf\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84top\xe4\xb8\xaa\xef\xbc\x8c\xe4\xbb\x8etop n\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe5\x86\x8d\xe6\x89\xbe\xe5\x8d\x8f\xe6\x95\xb4\xef\xbc\x8c\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91pvalue\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x98\xaf\xe4\xbb\x8etop n\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe5\x86\x8d\xe6\x89\xbe\xe5\x8d\x8f\xe6\x95\xb4\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x95\xb4\xe4\xb8\xaa\xe8\xbf\x87\xe7\xa8\x8b\n\n    :param symbol: eg: \'usTSLA\'\n    :param sum_rank: \xe5\xb7\xb2\xe7\xbb\x8f\xe7\xbc\x93\xe5\xad\x98\xe4\xba\x86\xe7\x9a\x84sum_rank\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\n                        eg: sum_rank\n                        usBIDU           10.0\n                        usFB             16.0\n                        usGOOG           12.0\n                        usNOAH            2.0\n                        usSFUN           14.0\n                        usTSLA           18.0\n                        usVIPS            6.0\n                        usWUBA            8.0\n    :param corr_jobs: \xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9acorr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS, ECoreCorrType.E_CORE_TYPE_SPERM)\n                      \xe5\x8f\xaf\xe4\xbb\xa5\xe5\x86\x8d\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x9b\xb4\xe5\xa4\x9ajobs\n                      eg\xef\xbc\x9a\n                        corr_jobs=(ECoreCorrType.E_CORE_TYPE_PEARS, ECoreCorrType.E_CORE_TYPE_SPERM,\n                                   ECoreCorrType.E_CORE_TYPE_SIGN, ECoreCorrType.E_CORE_TYPE_ROLLING)\n                      \xe6\xb3\xa8\xe6\x84\x8f\xe6\xaf\x8f\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe7\xa7\x8d\xe7\x9b\xb8\xe5\x85\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\x80\x97\xe6\x97\xb6\xe9\x83\xbd\xe4\xbc\x9a\xe5\xa2\x9e\xe5\x8a\xa0\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    """"""\n    cs = code_to_symbol(symbol)\n    symbol = cs.value\n    if sum_rank is None:\n        tmp_market = ABuEnv.g_market_target\n        # \xe5\xbc\xba\xe5\x88\xb6\xe6\x8a\x8a\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\n        ABuEnv.g_market_target = cs.market\n        corr_df_dict = ABuSimilar.multi_corr_df(corr_jobs)\n        # \xe6\x81\xa2\xe5\xa4\x8d\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\n        ABuEnv.g_market_target = tmp_market\n        """"""\n            eg\xef\xbc\x9a corr_df_dict\n            {\'pears\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3013  0.3690  0.4015  0.3680  0.3015  0.3706  0.4320\n            usFB           0.3013  1.0000  0.6609  0.2746  0.1978  0.4080  0.2856  0.2438\n            usGOOG         0.3690  0.6609  1.0000  0.3682  0.1821  0.3477  0.3040  0.2917\n            usNOAH         0.4015  0.2746  0.3682  1.0000  0.3628  0.2178  0.4645  0.4488\n            usSFUN         0.3680  0.1978  0.1821  0.3628  1.0000  0.2513  0.2843  0.4883\n            usTSLA         0.3015  0.4080  0.3477  0.2178  0.2513  1.0000  0.2327  0.3340\n            usVIPS         0.3706  0.2856  0.3040  0.4645  0.2843  0.2327  1.0000  0.4189\n            usWUBA         0.4320  0.2438  0.2917  0.4488  0.4883  0.3340  0.4189  1.0000\n\n            \'sperm\':\n                            usBIDU    usFB  usGOOG  usNOAH  usSFUN  usTSLA  usVIPS  usWUBA\n            usBIDU         1.0000  0.3888  0.4549  0.4184  0.3747  0.3623  0.4333  0.4396\n            usFB           0.3888  1.0000  0.7013  0.2927  0.2379  0.4200  0.3123  0.2216\n            usGOOG         0.4549  0.7013  1.0000  0.3797  0.2413  0.3871  0.3922  0.3035\n            usNOAH         0.4184  0.2927  0.3797  1.0000  0.3581  0.2066  0.4643  0.4382\n            usSFUN         0.3747  0.2379  0.2413  0.3581  1.0000  0.2645  0.3890  0.4693\n            usTSLA         0.3623  0.4200  0.3871  0.2066  0.2645  1.0000  0.2540  0.2801\n            usVIPS         0.4333  0.3123  0.3922  0.4643  0.3890  0.2540  1.0000  0.4080\n            usWUBA         0.4396  0.2216  0.3035  0.4382  0.4693  0.2801  0.4080  1.0000 }\n        """"""\n        sum_rank = rank_corr_sum(corr_df_dict, symbol)\n        """"""\n            eg: sum_rank\n            usBIDU           10.0\n            usFB             16.0\n            usGOOG           12.0\n            usNOAH            2.0\n            usSFUN           14.0\n            usTSLA           18.0\n            usVIPS            6.0\n            usWUBA            8.0\n        """"""\n        if sum_rank is None:\n            logging.info(\'{} not in corr df!!!\'.format(symbol))\n            return None, None\n\n    top_cnt = sum_rank.shape[0] if g_top_corr_cnt > sum_rank.shape[0] else g_top_corr_cnt\n    # \xe9\xa6\x96\xe5\x85\x88\xe6\x89\xbe\xe5\x88\xb0\xe7\x9a\x84\xe6\x98\xaf\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84top\xe4\xb8\xaa\n    rank_head = sum_rank.sort_values(ascending=True)[1:top_cnt]\n\n    # \xe4\xbd\xbf\xe7\x94\xa8symbol\xe5\x81\x9a\xe6\xa0\x87\xe5\xb0\xba\n    benchmark = AbuBenchmark(symbol, n_folds=1)\n    # benchmark\xe5\x81\x9a\xe4\xb8\xba\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\xb0\xba\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84top\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x95\xb0\xe6\x8d\xae\n    mul_pd = ABuSymbolPd.make_kl_df(rank_head.index, n_folds=1,\n                                    data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO,\n                                    benchmark=benchmark)\n\n    coint_dict = {}\n    for ind, cmp_symbol in enumerate(rank_head.index):\n        if cmp_symbol not in mul_pd:\n            continue\n\n        klpd_cmp = mul_pd[cmp_symbol]\n        if klpd_cmp is None:\n            continue\n\n        """"""\n                coint\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\x89\xe4\xb8\xaa\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                coint_t : float\n                    t-statistic of unit-root test on residuals\n                pvalue : float\n                    MacKinnon\'s approximate p-value based on MacKinnon (1994)\n                crit_value : dict\n                    Critical values for the test statistic at the 1 %, 5 %, and 10 %\n                    levels.\n\n                \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91pvalue\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x98\xaf\xe4\xbb\x8etop n\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe5\x86\x8d\xe6\x89\xbe\xe5\x8d\x8f\xe6\x95\xb4\n        """"""\n        _, pvalue, _ = coint(benchmark.kl_pd.close, klpd_cmp.close)\n        if pvalue < g_coint_threshold:\n            # pvalue\xe5\xb0\x8f\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe5\x8d\xb3\xe5\x8a\xa0\xe5\x85\xa5coint_dict\xe5\xad\x97\xe5\x85\xb8\n\n            # \xe8\xae\xb0\xe5\xbd\x95ind\xe4\xb8\xba\xe4\xba\x86\xe5\x8f\x91\xe7\x8e\xb0\xe5\x8f\x96\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaasort_values(ascending=True)[1:g_top_corr_cnt]\xe8\x83\xbd\xe6\x9c\x89\xe8\x89\xaf\xe5\xa5\xbd\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n            # \xe5\x8d\xb3\xe4\xb8\xba\xe4\xba\x86\xe4\xba\x8b\xe5\x90\x8e\xe8\xb0\x83\xe6\x95\xb4g_top_corr_cnt\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\xb9\xb6\xe9\x9d\x9e\xe5\xae\x9e\xe9\x99\x85\xe9\x9c\x80\xe8\xa6\x81\n            coint_dict[cmp_symbol] = (pvalue, ind)\n    p_value_sorted = sorted(zip(coint_dict.values(), coint_dict.keys()))\n    if len(p_value_sorted) == 0:\n        logging.info(\n            \'len(p_value_sorted) == 0 please try change tl.similar.g_top_corr_cnt|tl.similar.g_coint_threshold!\')\n        return None, None\n\n    if show:\n        cmp_cnt = np.minimum(len(p_value_sorted), g_coint_show_max)\n        # \xe5\x8f\xaa\xe5\x8f\x96item[1]\xef\xbc\x8c[0]\xe6\x98\xafind\n        symbols = [item[1] for item in p_value_sorted[:cmp_cnt]]\n        mul_pd_swap = mul_pd.swapaxes(\'items\', \'minor\')\n        close_panel_pd = mul_pd_swap[\'close\'][symbols]\n        """"""\n            \xe8\xbd\xac\xe8\xbd\xb4\xe5\x90\x8e\xe5\x8f\xaa\xe5\x8f\x96\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\n            eg\xef\xbc\x9a close_panel_pd\n                          usFB  usGOOG  usNOAH  usVIPS  usWUBA  us_NYSE:.IXIC\n            2015-07-24   96.95  623.56   23.40  20.250   65.25       5088.629\n            2015-07-27   94.17  627.26   22.16  19.990   62.89       5039.776\n            2015-07-28   95.29  628.00   22.94  20.200   60.32       5089.207\n            2015-07-29   96.99  631.93   23.35  20.260   59.89       5111.730\n            2015-07-30   95.21  632.59   22.87  19.700   60.24       5128.785\n            ...            ...     ...     ...     ...     ...            ...\n            2016-07-20  121.92  741.19   25.11  13.630   48.17       5089.930\n            2016-07-21  120.61  738.63   25.51  13.690   49.25       5073.900\n            2016-07-22  121.00  742.74   25.50  13.510   49.21       5100.160\n            2016-07-25  121.63  739.77   25.57  13.390   49.84       5097.628\n            2016-07-26  121.64  740.92   24.75  13.655   50.36       5084.629\n        """"""\n        # \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xaescale\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe4\xbd\xbf\xe7\x94\xa8mean_how=True\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe6\x9e\x81\xe5\x80\xbc\xe7\x9a\x84\xe5\xb9\xb2\xe6\x89\xb0\n        close_panel_pd = ABuScalerUtil.scaler_matrix(close_panel_pd, mean_how=True)\n        """"""\n            ABuScalerUtil.scaler_matrix\xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\x9f\xa9\xe9\x98\xb5\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n            eg\xef\xbc\x9a close_panel_pd\n                             usFB     usGOOG     usNOAH     usVIPS     usWUBA\n            2015-07-24  4451.7674  4311.1198  4477.3494  6601.2284  5980.4246\n            2015-07-27  4324.1148  4336.7006  4240.0882  6516.4719  5764.1211\n            2015-07-28  4375.5432  4341.8168  4389.3332  6584.9290  5528.5703\n            2015-07-29  4453.6041  4368.9877  4467.7825  6604.4882  5489.1591\n            ...               ...        ...        ...        ...        ...\n            2016-07-20  5598.3443  5124.3808  4804.5404  4443.1972  4414.9740\n            2016-07-21  5538.1915  5106.6817  4881.0762  4462.7564  4513.9603\n            2016-07-22  5556.0995  5135.0971  4879.1628  4404.0788  4510.2942\n            2016-07-25  5585.0280  5114.5633  4892.5566  4364.9604  4568.0362\n            2016-07-26  5585.4872  5122.5141  4735.6581  4451.3468  4615.6963\n        """"""\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96scaler_matrix\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8e\xe7\x9a\x84close\n        close_panel_pd.plot(figsize=ABuEnv.g_plt_figsize)\n        plt.title(\'close panel pd scaler_matrix\')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n        plt.show()\n\n        close_panel_pd_cp = copy.deepcopy(close_panel_pd)\n\n        for col in close_panel_pd_cp.columns:\n            """"""\n                \xe5\x81\x9a\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe6\x91\xb8\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84pd\xe5\xb0\xb1\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe5\xbe\x97\xe5\x88\xb0\xe6\x8a\x95\xe7\xa5\xa8\xe6\x9d\x83\xe9\x87\x8d\xe8\xa1\xa8\xe4\xbe\xbf\xe4\xba\x8e\xe8\xbf\x90\xe7\xae\x97\xef\xbc\x9a\n\n                     close_panel_pd_cp[col] = benchmark.kl_pd.close\n\n                \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\xa0\x87\xe5\xb0\xba\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xbf\xe6\x8d\xa2\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe6\xaf\x8f\xe4\xb8\x80\xe5\x88\x97\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x83\xbd\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\n                \xe6\xaf\x94\xe5\xa6\x82\xe8\xbf\x99\xe6\xa0\xb7\xef\xbc\x8c\xe5\x88\x97\xe6\x95\xb0\xe6\x8d\xae\xe9\x83\xbd\xe5\x92\x8c\xe6\xa0\x87\xe5\xb0\xba\xe4\xb8\x80\xe6\xa0\xb7\n                            usFB  usGOOG  usNOAH  usVIPS  usWUBA  us_NYSE:.IXIC\n                2015-07-24  265.41  265.41  265.41  265.41  265.41         265.41\n                2015-07-27  253.01  253.01  253.01  253.01  253.01         253.01\n                2015-07-28  264.82  264.82  264.82  264.82  264.82         264.82\n                2015-07-29  263.82  263.82  263.82  263.82  263.82         263.82\n                2015-07-30  266.79  266.79  266.79  266.79  266.79         266.79\n                ...            ...     ...     ...     ...     ...            ...\n                2016-07-20  228.36  228.36  228.36  228.36  228.36         228.36\n                2016-07-21  220.50  220.50  220.50  220.50  220.50         220.50\n                2016-07-22  222.27  222.27  222.27  222.27  222.27         222.27\n                2016-07-25  230.01  230.01  230.01  230.01  230.01         230.01\n                2016-07-26  225.93  225.93  225.93  225.93  225.93         225.93\n            """"""\n            close_panel_pd_cp[col] = benchmark.kl_pd.close\n        """"""\n            \xe5\xb0\x86\xe5\xa4\x8d\xe5\x88\xbb\xe5\x90\x8e\xe7\x9a\x84close_panel_pd_cp\xe4\xb8\x8e\xe5\x8e\x9f\xe5\xa7\x8bclose_panel_pd\xe6\xb1\x82\xe5\xb7\xae\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8d\xe8\xbf\x9b\xe8\xa1\x8cscaler_std\n            ABuScalerUtil.scaler_std(close_panel_pd_cp - close_panel_pd):\n\n                  usFB  usGOOG  usNOAH  usVIPS  usWUBA  us_NYSE:.IXIC\n            2015-07-24  0.9705  1.7793  0.7405 -1.6987 -1.9294        -1.0803\n            2015-07-27  1.2277  1.6619  1.1473 -1.6270 -1.5697        -0.8853\n            2015-07-28  1.1393  1.6826  0.8987 -1.6831 -1.1334        -1.0866\n            2015-07-29  0.9629  1.5955  0.7550 -1.7035 -1.0656        -1.2124\n            2015-07-30  1.1519  1.5906  0.9265 -1.5197 -1.1169        -1.2878\n            ...            ...     ...     ...     ...     ...            ...\n            2016-07-21 -1.5539 -0.8188 -0.0710  0.3755  0.5784        -1.2418\n            2016-07-22 -1.5899 -0.9012 -0.0644  0.4354  0.5879        -1.3728\n            2016-07-25 -1.6371 -0.8138 -0.0746  0.4819  0.4997        -1.3179\n            2016-07-26 -1.6473 -0.8509  0.2018  0.3922  0.4085        -1.2702\n        """"""\n        regular_diff = ABuScalerUtil.scaler_std(close_panel_pd_cp - close_panel_pd)\n        regular_diff.plot(figsize=ABuEnv.g_plt_figsize)\n        plt.title(\'regular diff\')\n        plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n        plt.show()\n        """"""\n            distance_votes = regular_diff.sum(axis=1):\n\n            \xe6\x8a\x95\xe7\xa5\xa8\xe6\x9c\xba\xe5\x88\xb6\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8a\x95\xe7\xa5\xa8coint\xe7\x9a\x84\xe5\xb7\xae\xe5\x80\xbc\n                distance_votes\n            distance_votes\n            2015-07-24   -1.2181\n            2015-07-27   -0.0451\n            2015-07-28   -0.1825\n            2015-07-29   -0.6682\n            2015-07-30   -0.2555\n                           ...\n            2016-07-20   -2.5541\n            2016-07-21   -2.7316\n            2016-07-22   -2.9049\n            2016-07-25   -2.8618\n            2016-07-26   -2.7658\n            ......................\n        """"""\n        distance_votes = regular_diff.sum(axis=1)\n\n        votes_std = distance_votes.std()\n        votes_mean = distance_votes.mean()\n        above = votes_mean + votes_std\n        below = votes_mean - votes_std\n        close_regular = ABuScalerUtil.scaler_std(benchmark.kl_pd.close)\n        close_regular = (close_regular * distance_votes.max() / 2)\n\n        with plt_show():\n            # noinspection PyUnresolvedReferences\n            close_regular.plot()\n            distance_votes.plot()\n\n            plt.axhline(votes_mean, color=\'r\')\n            plt.axhline(above, color=\'c\')\n            plt.axhline(below, color=\'g\')\n\n            plt.title(\'coint distance votes\')\n            plt.legend([\'close regular\', \'distance votes\', \'votes mean\', \'dvotes above\', \'dvotes below\'],\n                       bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    return p_value_sorted, sum_rank\n'"
abupy/TLineBu/ABuTLVwap.py,3,"b'# -*- encoding:utf-8 -*-\n""""""\n    VWAP: Volume Weighted Average Price \xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe5\x8a\xa0\xe6\x9d\x83\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbb\xb7\n\n    \xe9\x9d\x9e\xe6\xa0\x87\xe5\x87\x86\xe4\xbc\xa0\xe7\xbb\x9f\xe6\x84\x8f\xe4\xb9\x89vwap\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\xb3\xe9\x9d\x9e\xe4\xbd\xbf\xe7\x94\xa8\xe9\xab\x98\xe9\xa2\x91\xe7\x9a\x84\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe5\x92\x8c\xe9\x87\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe5\xa5\x97\xe7\x94\xa8\xe6\xa6\x82\xe5\xbf\xb5\xe8\xae\xa1\xe7\xae\x97\n    \xe6\x97\xa5\xe7\xba\xbf\xe7\xba\xa7\xe5\x88\xab\xe7\x9a\x84vwap\n""""""\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom enum import Enum\n\nimport numpy as np\n\nfrom ..TLineBu.ABuTLine import AbuTLine\n\n\n# TODO \xe9\x87\x8d\xe6\x9e\x84\xe6\x97\xb6\xe6\x8f\x90\xe5\x88\xb0\xe4\xb8\x8a\xe7\xba\xa7\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\nclass EDayBarCalcType(Enum):\n    """"""\xe8\xae\xa1\xe7\xae\x97\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe7\xbb\x88price\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95""""""\n\n    """"""\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc""""""\n    OHLC_MEAN = 0\n    """"""\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe7\x9a\x84\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0""""""\n    OHLC_MEDIAN = 1\n    """"""\xe9\xab\x98\xe4\xbd\x8e\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc""""""\n    HL_MEAN = 2\n    """"""\xe4\xbd\xbf\xe7\x94\xa8close\xe4\xbb\xb7\xe6\xa0\xbc""""""\n    CLOSE = 3\n\n\ndef calc_vwap(kl_pd, how=EDayBarCalcType.OHLC_MEAN, show=True):\n    """"""\n    \xe9\x9d\x9e\xe6\xa0\x87\xe5\x87\x86\xe4\xbc\xa0\xe7\xbb\x9f\xe6\x84\x8f\xe4\xb9\x89vwap\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\xb3\xe9\x9d\x9e\xe4\xbd\xbf\xe7\x94\xa8\xe9\xab\x98\xe9\xa2\x91\xe7\x9a\x84\xe5\x88\x86\xe9\x92\x9fk\xe7\xba\xbf\xe5\x92\x8c\xe9\x87\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe5\xa5\x97\xe7\x94\xa8\xe6\xa6\x82\xe5\xbf\xb5\xe8\xae\xa1\xe7\xae\x97\n    \xe6\x97\xa5\xe7\xba\xbf\xe7\xba\xa7\xe5\x88\xab\xe7\x9a\x84vwap\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8EDayBarCalcType\xe7\xa1\xae\xe5\xae\x9a\xe6\x97\xa5\xe7\xba\xbf\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\x82\xb9\xe4\xbd\x8dvwap\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe7\xa1\xae\xe5\xae\x9a\n    \xe8\xae\xa1\xe7\xae\x97vwap\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\xb3\xa8\xe6\x84\x8f\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x87\x86\xe7\xa1\xae\xe5\xba\xa6\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb8\x94\xe5\xaf\xb9\xe5\xbc\x82\xe5\xb8\xb8\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe6\x8e\xa7\xe5\x88\xb6\xe7\xad\x9b\xe9\x80\x89\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param how: EDayBarCalcType\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe7\xa1\xae\xe5\xae\x9a\xe6\x97\xa5\xe7\xba\xbf\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\x82\xb9\xe4\xbd\x8d\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8AbuTLine.show\xe6\x8e\xa5\xe5\x8f\xa3\n    :return: \xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if how == EDayBarCalcType.OHLC_MEAN:\n        # \xe6\x97\xa5k\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\n        price = np.mean([kl_pd.high, kl_pd.open, kl_pd.close, kl_pd.low], axis=0)\n    elif how == EDayBarCalcType.OHLC_MEDIAN:\n        # \xe6\x97\xa5k\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xe9\xab\x98\xe5\xbc\x80\xe4\xbd\x8e\xe6\x94\xb6\xe7\x9a\x84\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0\n        price = np.median([kl_pd.high, kl_pd.open, kl_pd.close, kl_pd.low], axis=0)\n    elif how == EDayBarCalcType.HL_MEAN:\n        # \xe6\x97\xa5k\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xe9\xab\x98\xe4\xbd\x8e\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe4\xbb\xb7\xe6\xa0\xbc\n        price = np.mean([kl_pd.high, kl_pd.low], axis=0)\n    elif how == EDayBarCalcType.CLOSE:\n        # \xe6\x97\xa5k\xe7\xba\xa7\xe5\x88\xab\xe4\xb8\x8a\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe6\x94\xb6close\n        price = kl_pd.close\n    else:\n        raise TypeError(\'calc_vwap_std how is error! how= {}\'.format(how))\n\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe5\xbe\x97\xe5\x88\xb0\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xba\x8f\xe5\x88\x97\xe5\x81\x9a\xe5\x9f\xba\xe7\xa1\x80\xe8\xae\xa1\xe7\xae\x97vwap\n    vwap = (kl_pd.volume * price).sum() / kl_pd.volume.sum()\n    # \xe4\xb8\xbb\xe8\xa6\x81\xe7\x9b\xae\xe7\x9a\x84\xe5\xb0\xb1\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87vwap\xe6\x9e\x84\xe9\x80\xa0line, \xe8\xbf\x99\xe9\x87\x8c\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x86price\xe4\xb8\xbaline\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8mean=vwap\xef\xbc\x8c\xe8\xaf\xa6\xe9\x98\x85AbuTLine\n    line = AbuTLine(price, \'vwap std\', mean=vwap)\n    if show:\n        line.show()\n\n    return line\n'"
abupy/TLineBu/ABuTLWave.py,13,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x87\x8f\xe5\x8c\x96\xe6\xb3\xa2\xe5\x8a\xa8\xe7\xa8\x8b\xe5\xba\xa6\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom ..TLineBu.ABuTLine import AbuTLine\nfrom ..CoreBu.ABuPdHelper import pd_rolling_std, pd_ewm_mean, pd_ewm_std, pd_resample\nfrom ..UtilBu import ABuStatsUtil\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n\ndef show_wave_return(kl_pd):\n    """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x94\xb6\xe7\x9b\x8a\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe5\x92\x8c\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\n        \xe6\xb3\xa8\xe6\x84\x8f\xe4\xbc\x9a\xe4\xbf\xae\xe6\x94\xb9kl_pd\xef\xbc\x8c\xe5\x8f\xaa\xe5\x81\x9a\xe6\xb5\x8b\xe8\xaf\x95\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe6\x9c\xaa\xe5\x81\x9acopy\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n        \xe5\xa6\x82\xe4\xb8\x8d\xe8\x83\xbd\xe6\x94\xb9\xe5\x8a\xa8\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe8\x87\xaacopy\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x86\x8d\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\n        :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    pre_close = kl_pd[\'close\'].shift(1)\n    # noinspection PyTypeChecker\n    kl_pd[\'return\'] = np.where(pre_close == 0, 0, np.log(kl_pd[\'close\'] / pre_close))\n    kl_pd[\'mov_std\'] = pd_rolling_std(kl_pd[\'return\'], window=20, center=False) * np.sqrt(20)\n    kl_pd[\'std_ewm\'] = pd_ewm_std(kl_pd[\'return\'], span=20, min_periods=20, adjust=True) * np.sqrt(20)\n    kl_pd[[\'close\', \'mov_std\', \'std_ewm\', \'return\']].plot(subplots=True, figsize=(16, 12), grid=True)\n    plt.show()\n\n\ndef calc_wave_std(kl_pd, xd=21, ewm=True, show=True):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe6\x94\xb6\xe7\x9b\x8a\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe6\x88\x96\xe8\x80\x85\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\n    AbuTLine\xe5\xb0\x81\xe8\xa3\x85\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xae\x9e\xe4\xbd\x93\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe4\xbf\xae\xe6\x94\xb9kl_pd\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param xd: \xe8\xae\xa1\xe7\xae\x97\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe6\x88\x96\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\xaa\x97\xe5\x8f\xa3\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa421\n    :param ewm: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8a\xa0\xe6\x9d\x83\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87std\xe8\xae\xa1\xe7\xae\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8AbuTLine.show\xe6\x8e\xa5\xe5\x8f\xa3\n    :return: \xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    pre_close = kl_pd[\'close\'].shift(1)\n    # noinspection PyTypeChecker\n    change = np.where(pre_close == 0, 0, np.log(kl_pd[\'close\'] / pre_close))\n    if ewm:\n        roll_std = pd_ewm_std(change, span=xd, min_periods=1, adjust=True) * np.sqrt(xd)\n    else:\n        roll_std = pd_rolling_std(change, window=xd, min_periods=1, center=False) * np.sqrt(xd)\n\n    # min_periods=1\xe8\xbf\x98\xe6\x98\xaf\xe4\xbc\x9a\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaanan\xef\xbc\x8c\xe5\xa1\xab\xe4\xba\x86\n    roll_std = pd.Series(roll_std).fillna(method=\'bfill\')\n    # \xe4\xb8\xbb\xe8\xa6\x81\xe7\x9b\xae\xe7\x9a\x84\xe5\xb0\xb1\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87roll_std\xe6\x9e\x84\xe9\x80\xa0AbuTLine\xe5\xaf\xb9\xe8\xb1\xa1line\n    line = AbuTLine(roll_std, \'wave std\')\n    if show:\n        line.show()\n\n    return line\n\n\ndef calc_wave_abs(kl_pd, xd=21, show=True):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97kl_pd\xe5\x9c\xa8\xe7\x9a\x84\xe7\xbb\x9d\xe5\xaf\xb9\xe6\xb3\xa2\xe5\x8a\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe5\x8f\x82\xe6\x95\xb0xd\xe5\xaf\xb9\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\n    \xe5\x9c\xa8\xe9\xbb\x98\xe8\xae\xa4xd\xef\xbc\x9d21\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8f\x98\xe6\x88\x90\xe4\xba\x86\xe6\x9c\x88\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8ABuStatsUtil.demean\xe5\xaf\xb9\n    \xe6\x9c\x88\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbfdemean_wave\xef\xbc\x8cAbuTLine\xe5\x8c\x85\xe8\xa3\xb9\n    \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe8\xbf\x94\xe5\x9b\x9e\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param xd: \xe5\xaf\xb9\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe5\xa4\xa9\xef\xbc\x8cint\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: \xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    # \xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\xad\xa3\xe8\xb4\x9f\xef\xbc\x8c\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe6\xb3\xa2\xe5\x8a\xa8\xef\xbc\x8cnp.abs(kl_pd[\'p_change\'])\n    abs_pct_change = np.abs(kl_pd[\'p_change\'])\n    xd_resample = \'%dD\' % xd\n    # \xe9\x80\x9a\xe8\xbf\x87pd_resample\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8how=sum, \xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4xd\xef\xbc\x9d21\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8f\x98\xe6\x88\x90\xe4\xba\x86\xe6\x9c\x88\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\n    change_ratio_sum = pd_resample(abs_pct_change, xd_resample, how=\'sum\')\n    """"""\n        eg: change_ratio_sum\n            2014-07-24    37.13\n            2014-08-14    39.33\n            2014-09-04    25.16\n            2014-09-25    27.53\n            2014-10-16    27.78\n                          ...\n            2016-04-14    25.17\n            2016-05-05    42.07\n            2016-05-26    18.93\n            2016-06-16    33.25\n            2016-07-07    10.79\n    """"""\n    # \xe4\xbd\xbf\xe7\x94\xa8ABuStatsUtil.demean\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe6\x93\x8d\xe4\xbd\x9c\n    demean_wave = ABuStatsUtil.demean(change_ratio_sum)\n    """"""\n        eg: demean_wave\n        2014-07-24    -1.6303\n        2014-08-14     0.5697\n        2014-09-04   -13.6003\n        2014-09-25   -11.2303\n                       ...\n        2016-05-05     3.3097\n        2016-05-26   -19.8303\n        2016-06-16    -5.5103\n        2016-07-07   -27.9703\n    """"""\n    line = AbuTLine(demean_wave, \'demean sum change wave\')\n    if show:\n        # \xe8\xae\xa1\xe7\xae\x97pd_resample how=\'mean\'\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86_show_wave\xe9\x87\x8c\xe9\x9d\xa2\xe6\x98\xbe\xe7\xa4\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\n        xd_mean_close = pd_resample(kl_pd.close, xd_resample, how=\'mean\')\n        # \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8AbuTLine.show\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe6\xaf\x94line\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9d\x87\xe7\xba\xbfxd_mean_close\n        _show_wave(demean_wave, line.high, line.mean, line.low, xd_mean_close)\n        # TODO AbuTLine\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe5\xa4\x9a\xe6\x9d\xa1\xe7\xba\xbf\xe7\x9a\x84\xe6\xa0\x87\xe5\x87\x86\xe5\xaf\xb9\xe6\xaf\x94\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xb7\xa6\xe5\x8f\xb3\xe5\x8f\x8c\xe8\xbd\xb4\xe5\x92\x8c\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\x98\xe5\x8c\x96\xe6\x96\xb9\xe5\xbc\x8f\n    return line\n\n\ndef calc_wave_weight_abs(kl_pd, xd=21, span=3, show=True):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97kl_pd\xe7\x9a\x84\xe7\xbb\x9d\xe5\xaf\xb9\xe6\xb3\xa2\xe5\x8a\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe5\x8f\x82\xe6\x95\xb0xd\xe5\xaf\xb9\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\n    \xe5\x9c\xa8\xe9\xbb\x98\xe8\xae\xa4xd\xef\xbc\x9d21\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8f\x98\xe6\x88\x90\xe4\xba\x86\xe6\x9c\x88\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8ABuStatsUtil.demean\xe5\xaf\xb9\n    \xe6\x9c\x88\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe6\x93\x8d\xe4\xbd\x9c\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbfdemean_wave\xef\xbc\x8c\xe4\xb8\x8ecalc_wave_abs\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8squared  * np.sign(demean_wave)\xe6\x94\xbe\xe5\xa4\xa7\xe4\xba\x86wave\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa4\xa7\xe7\x9a\x84\xe6\x84\x88\xe5\x8a\xa0\xe5\xa4\xa7\xef\xbc\x8c\xe4\xb8\x94\n    \xe7\xbb\xa7\xe7\xbb\xad\xe5\xaf\xb9squared_wave\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe5\xbe\x97\xe5\x88\xb0\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xbd\xa2\xe6\x88\x90ewm_wave\xef\xbc\x8cAbuTLine\xe5\x8c\x85\xe8\xa3\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe8\xbf\x94\xe5\x9b\x9e\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param xd: \xe5\xaf\xb9\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe5\xa4\xa9\xef\xbc\x8cint\n    :param span: \xe5\xaf\xb9squared_wave\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9a\x84\xe7\xaa\x97\xe5\x8f\xa3\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cint\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :return: \xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    # \xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\xad\xa3\xe8\xb4\x9f\xef\xbc\x8c\xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91\xe6\xb3\xa2\xe5\x8a\xa8\xef\xbc\x8cnp.abs(kl_pd[\'p_change\'])\n    abs_pct_change = np.abs(kl_pd[\'p_change\'])\n    xd_resample = \'%dD\' % xd\n    # \xe9\x80\x9a\xe8\xbf\x87pd_resample\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8how=sum, \xe5\x8d\xb3\xe9\xbb\x98\xe8\xae\xa4xd\xef\xbc\x9d21\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8f\x98\xe6\x88\x90\xe4\xba\x86\xe6\x9c\x88\xe9\x9c\x87\xe8\x8d\xa1\xe5\xb9\x85\xe5\xba\xa6\n    change_ratio_sum = pd_resample(abs_pct_change, xd_resample, how=\'sum\')\n    # \xe4\xbd\xbf\xe7\x94\xa8ABuStatsUtil.demean\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe6\x93\x8d\xe4\xbd\x9c\n    demean_wave = ABuStatsUtil.demean(change_ratio_sum)\n    # \xe4\xb8\x8ecalc_wave_abs\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8squared  * np.sign(demean_wave)\xe6\x94\xbe\xe5\xa4\xa7\xe4\xba\x86wave\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa4\xa7\xe7\x9a\x84\xe6\x84\x88\xe5\x8a\xa0\xe5\xa4\xa7\n    squared_wave = (demean_wave ** 2) * np.sign(demean_wave)\n    # ewmd\xe7\x9a\x84span\xe6\x9c\x80\xe5\x90\x8e\xe5\x86\xb3\xe5\xae\x9a\xe4\xba\x86\xe4\xb8\x80\xe5\x88\x87\xef\xbc\x8c span\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb9\x8b\xe5\xaf\xb9\xe5\xba\x94xd\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xef\xbc\x8cxd\xe5\x8f\x98\xe5\x8a\xa8, span\xe4\xb9\x9f\xe8\xa6\x81\xe5\x8f\x98\n    ewm_wave = pd_ewm_mean(squared_wave, span=span, min_periods=span, adjust=True)\n    line = AbuTLine(ewm_wave, \'squared ewm wave\')\n    if show:\n        # \xe8\xae\xa1\xe7\xae\x97pd_resample how=\'mean\'\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86_show_wave\xe9\x87\x8c\xe9\x9d\xa2\xe6\x98\xbe\xe7\xa4\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\n        xd_mean_close = pd_resample(kl_pd.close, xd_resample, how=\'mean\')\n        # \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8AbuTLine.show\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe6\xaf\x94line\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9d\x87\xe7\xba\xbfxd_mean_close\n        _show_wave(ewm_wave, line.high, line.mean, line.low, xd_mean_close)\n    return line\n\n\ndef _show_wave(wave, above, wave_mean, below, xd_mean_close):\n    """"""\n    calc_wave_abs\xe5\x92\x8ccalc_wave_weight_abs\xe5\xbd\xa2\xe6\x88\x90\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x96\xb9\xe6\xb3\x95\n    \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8AbuTLine.show\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe6\xaf\x94line\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9d\x87\xe7\xba\xbfxd_mean_close\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8\xe5\x8f\x8c\xe5\x9d\x90\xe6\xa0\x87\xe8\xbd\xb4\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    """"""\n    with plt_show():\n        fig, ax1 = plt.subplots()\n        plt.plot(wave)\n        plt.axhline(above, color=\'c\')\n        plt.axhline(wave_mean, color=\'r\')\n        plt.axhline(below, color=\'g\')\n        _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n        plt.legend([\'wave\', \'above\', \'wave_mean\', \'below\'],\n                   bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n        # \xe9\x87\x87\xe7\x94\xa8\xe5\xb7\xa6\xe5\x8f\xb3\xe4\xb8\xa4\xe4\xb8\xaay\xe8\xbd\xb4\xe5\x9d\x90\xe6\xa0\x87\xe6\x98\xbe\xe7\xa4\xba\n        # noinspection PyUnusedLocal\n        ax2 = ax1.twinx()\n        plt.plot(xd_mean_close, c=\'y\')\n        plt.plot(xd_mean_close, \'ro\')\n        plt.legend([\'mean close\'],\n                   bbox_to_anchor=(1.05, 1), loc=3, borderaxespad=0.)\n        # \xe5\xbd\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\xaa\xe9\x95\xbf\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe6\x98\xbe\xe7\xa4\xba\xe5\x80\xbe\xe6\x96\x9c30\xe5\xba\xa6\xe8\xa7\x92\n        _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n        plt.title(\'wave line\')\n'"
abupy/TLineBu/ABuTLine.py,13,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xaf\xb9\xe5\xa4\x96\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport itertools\nimport logging\nimport math\nfrom collections import Iterable\nfrom enum import Enum\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom scipy.interpolate import interp1d\n\nfrom ..TLineBu.ABuTLExecute import shift_distance, bfgs_min_pos, support_resistance_pos, \\\n    select_k_support_resistance, plot_support_resistance_trend, support_resistance_predict, regress_trend_channel, \\\n    below_above_gen, find_percent_point, find_golden_point_ex, find_golden_point, skeleton_how\n\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuBase import FreezeAttrMixin\nfrom ..UtilBu import ABuRegUtil\nfrom ..UtilBu import ABuStatsUtil\nfrom ..UtilBu.ABuDTUtil import arr_to_numpy\nfrom ..UtilBu.ABuLazyUtil import LazyFunc\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe6\xa8\xa1\xe5\x9d\x97\xe6\x89\x93\xe5\x8d\xb0\xe6\xa0\xb9\xe6\x8d\xae\xe7\x8e\xaf\xe5\xa2\x83\xe9\x80\x89\xe6\x8b\xa9logging.info\xe6\x88\x96\xe8\x80\x85print\xe5\x87\xbd\xe6\x95\xb0""""""\nlog_func = logging.info if ABuEnv.g_is_ipython else print\n\n""""""\xe9\xa2\x84\xe5\xa4\x87\xe9\xa2\x9c\xe8\x89\xb2\xe5\xba\x8f\xe5\x88\x97\xe9\x9b\x86\xef\xbc\x8c\xe8\xb6\x85\xe5\x87\xba\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe9\x87\x8f\xe5\xba\x94\xe4\xbd\xbf\xe7\x94\xa8itertools.cycle\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x98\xe5\x88\xb6""""""\nK_PLT_MAP_STYLE = [\n    \'r\', \'g\', \'c\', \'k\', \'m\', \'r\', \'y\']\n\n\nclass ESkeletonHow(Enum):\n    """"""\xe8\xae\xa1\xe7\xae\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84how""""""\n\n    """"""\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe5\x8f\x96\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d""""""\n    skeleton_min = 0\n    """"""\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe5\x8f\x96\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d""""""\n    skeleton_max = 1\n    """"""\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe5\x8f\x96\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d""""""\n    skeleton_mean = 2\n    """"""\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0\xe5\x8f\x96\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d""""""\n    skeleton_median = 3\n\n    """"""\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe5\x8f\x96\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d""""""\n    skeleton_close = 4\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x89\xe8\xa7\x92\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8d\xb3\xe6\x9c\x80\xe9\xab\x98\xef\xbc\x8c\xe6\x9c\x80\xe4\xbd\x8e\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x89\xe7\x82\xb9\xef\xbc\x9a\n        \xe7\xa1\xae\xe5\xae\x9a\xe5\x8f\x96\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x89\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x8dhow_func\xe6\x8f\x90\xe4\xbe\x9b\xef\xbc\x8c\n        \xe5\xa6\x82\xe6\x9e\x9cnp.argmax(arr) > np.argmin(arr)\xe5\x8d\xb3\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe5\x9c\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe5\x89\x8d\xe9\x9d\xa2\xef\xbc\x8c\n        \xe7\xac\xac\xe4\xb8\x89\xe7\x82\xb9\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe8\xb5\xb7\xe7\x82\xb9\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe7\xbb\x88\xe7\x82\xb9\n    """"""\n    skeleton_triangle = 100\n\n\nclass EShiftDistanceHow(Enum):\n    """"""\xe8\xae\xa1\xe7\xae\x97\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe7\x9a\x84how""""""\n\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe5\x81\x9a\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9f\xba\xe7\xa1\x80\xef\xbc\x9a\n        \xe5\xaf\xb9\xe5\xba\x94\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xef\xbc\x8c\xe6\xa0\x87\xe5\x87\x86\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe5\xae\x9a\xe4\xb9\x89\n    """"""\n    shift_distance_close = 0\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe6\x9e\x81\xe9\x99\x90\xe5\x80\xbc\xe5\x81\x9a\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9f\xba\xe7\xa1\x80\xef\xbc\x9a\n        \xe5\xa6\x82\xe6\x9e\x9cp_arr[0] > p_arr[-1]\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8np.min(p_arr)\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99np.max(p_arr)\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x96max\xef\xbc\x8c\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x96min\n    """"""\n    shift_distance_maxmin = 1\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84sum\xe5\x92\x8c\xe6\x9e\x81\xe9\x99\x90\xe5\x80\xbc\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9f\xba\xe7\xa1\x80\xef\xbc\x9a\n        \xe5\xa6\x82\xe6\x9e\x9cabs(p_arr.max() - p_arr[-1]) > abs(p_arr[-1] - p_arr.min()) \xe5\x8f\x96np.min(p_arr)\xe5\x90\xa6\xe5\x88\x99np.max(p_arr)\n    """"""\n    shift_distance_sum_maxmin = 2\n\n\n""""""step_x_to_step\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe5\xba\x8f\xe5\x88\x97\xe6\xad\xa5\xe9\x95\xbf\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xe5\x8d\x95\xe5\x85\x83\xe5\x80\xbc""""""\ng_step_unit = 10\n\n\nclass AbuTLine(FreezeAttrMixin):\n    """"""\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xb0\x81\xe8\xa3\x85\xe6\x89\xa7\xe8\xa1\x8c\xe5\xaf\xb9\xe5\xa4\x96\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xb1\xbb""""""\n\n    def __init__(self, line, line_name, **kwargs):\n        """"""\n        :param line: \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87arr_to_numpy\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2numpy\n        :param line_name: \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kwargs mean: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xaemean\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeline.mean()\n        :param kwargs std: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xaestd\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeline.std()\n        :param kwargs high: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xaehigh\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeself.mean + self.std\n        :param kwargs low: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xaelow\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeself.mean - self.std\n        :param kwargs close: \xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x89\xe6\x8b\xa9\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xaeclose\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8d\xe8\xae\xbe\xe7\xbd\xaeline[-1]\n        """"""\n\n        # \xe6\x8a\x8a\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84nan\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa1\xab\xe5\x85\x85\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe5\xba\x94\xe8\xaf\xa5\xe6\x98\xaf\xe5\xa4\x96\xe9\x9d\xa2\xe6\xa0\xb9\xe6\x8d\xae\xe6\x95\xb0\xe6\x8d\xae\xe9\x80\xbb\xe8\xbe\x91\xe6\x8a\x8anan\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa1\xab\xe5\x85\x85\xe5\xa5\xbd\xe4\xba\x86\xe5\x86\x8d\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8bfill\xe5\xa1\xab\xe4\xba\x86\n        line = pd.Series(line).fillna(method=\'bfill\')\n        self.tl = arr_to_numpy(line)\n        self.mean = kwargs.pop(\'mean\', self.tl.mean())\n        self.std = kwargs.pop(\'std\', self.tl.std())\n        self.high = kwargs.pop(\'high\', self.mean + self.std)\n        self.low = kwargs.pop(\'low\', self.mean - self.std)\n        self.close = kwargs.pop(\'close\', self.tl[-1])\n\n        self.x = np.arange(0, self.tl.shape[0])\n        self.line_name = line_name\n\n        for k, v in kwargs:\n            # \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\x80\xe4\xb9\x88\xe9\x83\xbd\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x9b\xe6\x9d\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6_freeze\xe5\x90\x8e\xe6\x97\xa0\xe6\xb3\x95\xe8\xae\xbe\xe7\xbd\xae\n            setattr(self, k, v)\n        # \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xae\x9a\xe7\xa8\xbf\xef\xbc\x8c\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xa5\xbd\xe5\xb0\xb1\xe4\xb8\x8d\xe8\x83\xbd\xe5\x8a\xa8\n        self._freeze()\n\n    @classmethod\n    def show_kl_pd(cls, kl_pd, key=\'close\', show=True, **kwargs):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x88\x86\xe6\x9e\x90\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8c\n        \xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\xef\xbc\x8c\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe9\xaa\xa8\xe6\x9e\xb6\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe7\xad\x89\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x88\x86\xe6\x9e\x90\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\n        AbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param key: kl_pd\xe4\xb8\xad\xe5\x81\x9a\xe4\xb8\xba\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x9c\x80\xe4\xbc\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8c\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\xef\xbc\x8c\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe9\xaa\xa8\xe6\x9e\xb6\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe7\xad\x89\n        :param kwargs: \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x87\xbd\xe6\x95\xb0\xe6\xb6\x89\xe5\x8f\x8a\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe5\x8f\x82\xe6\x95\xb0 eg\xef\xbc\x9astep_x, only_last\xe7\xad\x89\n        :return: \xe8\xbf\x94\xe5\x9b\x9eAbuTLine\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        line = cls(kl_pd[key], key)\n        if show:\n            # \xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87kwargs\xe8\xae\xbe\xe7\xbd\xaeshow\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x85\x88pop\xe5\x87\xba\xe6\x9d\xa5\n            zoom = kwargs.pop(\'zoom\', False)\n            step_x = kwargs.pop(\'step_x\', 1.0)\n            how = kwargs.pop(\'how\', EShiftDistanceHow.shift_distance_close)\n            only_last = kwargs.pop(\'only_last\', False)\n\n            line.show()\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe4\xbc\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\n            line.show_best_poly(zoom=zoom)\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\'\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\'\n            line.show_shift_distance(step_x=step_x, how=how)\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\x8a\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\n            line.show_regress_trend_channel(step_x=step_x)\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\xaa\xa8\xe6\x9e\xb6\xe9\x80\x9a\xe9\x81\x93\n            line.show_skeleton_channel(step_x=step_x)\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\x9a\x84\xe5\x8c\xba\xe5\x9f\x9f\n            line.show_percents()\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\n            line.show_golden()\n            # \xe5\xaf\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x98\xe5\x88\xb6, \xe4\xbb\xa5\xe5\x8f\x8a\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\xad\xe9\x97\xb4\xe8\xbf\x87\xe7\xa8\x8b\n            line.show_support_resistance_trend(only_last=only_last)\n        return line\n\n    @LazyFunc\n    def score(self):\n        """"""\n        \xe8\xa2\xabLazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x9a\n        score\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xbd\x93\xe5\x89\x8d\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x80\xbc\xe5\x9c\xa8\xe5\xbd\x93\xe5\x89\x8d\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c (self.close - self.low) / (self.high - self.low)\n        eg\xef\xbc\x9a\n            self.high \xef\xbc\x9d 100\xef\xbc\x8c self.low\xef\xbc\x9d0\xef\xbc\x8cself.close\xef\xbc\x9d80\n            \xef\xbc\x8d> (self.close - self.low) / (self.high - self.low) = 0.8\n            \xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\x8d\xe7\xbd\xae\xe5\x9c\xa8\xe6\x95\xb4\xe4\xbd\x93\xe7\x9a\x840.8\xe4\xbd\x8d\xe7\xbd\xae\xe4\xb8\x8a\n\n        :return: \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\xbd\x93\xe5\x89\x8dscore, \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe5\x9c\xa80-1\xe4\xb9\x8b\xe9\x97\xb4\n        """"""\n        if self.high == self.low:\n            score = 0.8 if self.close > self.low else 0.2\n        else:\n            score = (self.close - self.low) / (self.high - self.low)\n        return score\n\n    @LazyFunc\n    def y_zoom(self):\n        """"""\n        \xe8\xa2\xabLazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x9a\n        \xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbftl\xe8\xa2\xabself.x\xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97y_zoom\n        :return: \xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97y_zoom\n        """"""\n        zoom_factor = self.x.max() / self.tl.max()\n        y_zoom = zoom_factor * self.tl\n        return y_zoom\n\n    def step_x_to_step(self, step_x):\n        """"""\n        \xe9\x92\x88\xe5\xaf\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe6\xad\xa5\xe9\x95\xbf\xe9\x80\x89\xe6\x8b\xa9\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x9c\xa8show_shift_distance\xef\xbc\x8cshow_regress_trend_channel\xef\xbc\x8c\n        show_skeleton_channel\xe7\xad\x89\xe6\xb6\x89\xe5\x8f\x8a\xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe7\x94\xa8\xe6\x9d\xa5\xe6\x8e\xa7\xe5\x88\xb6\xe6\xad\xa5\xe9\x95\xbf\xe8\x8c\x83\xe5\x9b\xb4\n        :param step_x: \xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cfloat\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe8\xa2\xab\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa82-len(self.tl), int\n        """"""\n\n        if step_x <= 0:\n            # \xe4\xb8\x8d\xe6\xad\xa3\xe5\xb8\xb8step_x\xe8\xa7\x84\xe8\x8c\x83\xe5\x88\xb0\xe6\xad\xa3\xe5\xb8\xb8\xe8\x8c\x83\xe5\x9b\xb4\xe4\xb8\xad\n            log_func(\'input step_x={} is error, change to step_x=1\'.format(step_x))\n            step_x = 1\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe8\xb0\x83\xe6\x95\xb4\xe6\x9b\xb4\xe7\xbb\x86\xe7\x9a\x84\xe7\xb2\x92\xe5\xba\xa6\xef\xbc\x8c\xe8\xb0\x83\xe6\x95\xb4g_step_unit\xe7\x9a\x84\xe5\x80\xbc\n        step = int(math.floor(len(self.tl) / g_step_unit / step_x))\n        # \xe8\xbe\x93\xe5\x87\xba\xe8\xa2\xab\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa82-len(self.tl)\n        step = len(self.tl) if step > len(self.tl) else step\n        step = 2 if step < 2 else step\n        return step\n\n    def show(self):\n        """"""\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe5\x9f\xba\xe6\x9c\xac\xe7\x9a\x84\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8chigh\xef\xbc\x8cmean\xef\xbc\x8clow""""""\n        plt.subplots(figsize=ABuEnv.g_plt_figsize)\n        # tl\xe8\xa3\x85\xe8\xbd\xbd\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\xac\xe4\xbd\x93\n        plt.plot(self.tl)\n        plt.axhline(self.high, color=\'c\')\n        plt.axhline(self.mean, color=\'r\')\n        plt.axhline(self.low, color=\'g\')\n        _ = plt.setp(plt.gca().get_xticklabels(), rotation=30)\n        plt.legend([\'TLine\', \'high\', \'mean\', \'low\'],\n                   bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n        plt.title(self.line_name)\n        plt.show()\n\n    def is_up_trend(self, up_deg_threshold=5, show=True):\n        """"""\n        \xe5\x88\xa4\xe6\x96\xad\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x98\xaf\xe5\x90\xa6\xe7\xac\xa6\xe5\x90\x88\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x9a\n        1. \xe5\x88\xa4\xe6\x96\xad\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8f\x8f\xe8\xbf\xb0\n        2. \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa81\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\n        3. \xe5\xa6\x82\xe6\x9e\x9c1\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6 >= up_deg_threshold\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\x8a\xe5\x8d\x87\n        :param up_deg_threshold: \xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xba\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xe8\xa7\x92\xe5\xba\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa45\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x88\xa4\xe5\xae\x9a\xe8\xbf\x87\xe7\xa8\x8b\xe8\xa7\x86\xe5\x9b\xbe\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8a\xe5\x8d\x87\xe8\xb6\x8b\xe5\x8a\xbf\n        """"""\n        valid = ABuRegUtil.valid_poly(self.tl, poly=1, show=show)\n        if valid:\n            deg = ABuRegUtil.calc_regress_deg(self.tl, show=show)\n            if deg >= up_deg_threshold:\n                return True\n        return False\n\n    def is_down_trend(self, down_deg_threshold=-5, show=True):\n        """"""\n        \xe5\x88\xa4\xe6\x96\xad\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x98\xaf\xe5\x90\xa6\xe7\xac\xa6\xe5\x90\x88\xe4\xb8\x8b\xe9\x99\x8d\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x9a\n        1. \xe5\x88\xa4\xe6\x96\xad\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8f\x8f\xe8\xbf\xb0\n        2. \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa81\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\n        3. \xe5\xa6\x82\xe6\x9e\x9c1\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6 <= down_deg_threshold\xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\x8b\xe9\x99\x8d\n        :param down_deg_threshold: \xe5\x88\xa4\xe5\xae\x9a\xe4\xb8\x80\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xba\xe4\xb8\x8b\xe9\x99\x8d\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xe8\xa7\x92\xe5\xba\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x8d5\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x88\xa4\xe5\xae\x9a\xe8\xbf\x87\xe7\xa8\x8b\xe8\xa7\x86\xe5\x9b\xbe\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8b\xe9\x99\x8d\xe8\xb6\x8b\xe5\x8a\xbf\n        """"""\n        valid = ABuRegUtil.valid_poly(self.tl, poly=1, show=show)\n        # logging.debug(\'is_down_trend valid:{}\'.format(valid))\n        if valid:\n            deg = ABuRegUtil.calc_regress_deg(self.tl, show=show)\n            if deg <= down_deg_threshold:\n                return True\n        return False\n\n    def show_best_poly(self, zoom=False, show=show):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe4\xbc\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbepoly\xef\xbc\x881\xef\xbc\x8d100\xef\xbc\x89\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\n        \xe5\x85\xb7\xe4\xbd\x93\xe8\xaf\xa6\xe6\x83\x85ABuRegUtil.search_best_poly\n        :param zoom: \xe9\x80\x8f\xe4\xbc\xa0search_best_poly\xe6\x98\xaf\xe5\x90\xa6\xe7\xbc\xa9\xe6\x94\xbex,y\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        """"""\n        best = ABuRegUtil.search_best_poly(self.tl, zoom=zoom, show=show)\n        if show:\n            log_func(\'best poly = {}, zoom={}\'.format(best, zoom))\n        return best\n\n    def show_least_valid_poly(self, zoom=False, show=True):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xef\xbc\x8c\xe6\xa3\x80\xe6\xb5\x8b\xe8\x87\xb3\xe5\xb0\x91poly\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\n        \xe5\x85\xb7\xe4\xbd\x93\xe8\xaf\xa6\xe6\x83\x85ABuRegUtil.least_valid_poly\n        :param zoom: \xe9\x80\x8f\xe4\xbc\xa0least_valid_poly\xe6\x98\xaf\xe5\x90\xa6\xe7\xbc\xa9\xe6\x94\xbex,y\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        """"""\n        least = ABuRegUtil.least_valid_poly(self.tl, zoom=zoom, show=show)\n        if show:\n            log_func(\'least poly = {}, zoom={}\'.format(least, zoom))\n        return least\n\n    def show_shift_distance(self, how=EShiftDistanceHow.shift_distance_close, step_x=1.0, show=True, show_log=True):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\'\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\'\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8shift_distance_close\xe5\xaf\xb9\xe5\xba\x94\xe6\xa0\x87\xe5\x87\x86\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe6\x96\xb9\xe6\xb3\x95\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\n        \xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\xb9\xb6\xe9\x9d\x9e\xe5\xbe\x97\xe5\x88\xb0\xe6\x9c\x80\xe5\x87\x86\xe7\xa1\xae\xe7\x9a\x84\'\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\'\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xaf\xa6ABuTLExecute.shift_distance\n        :param how: EShiftDistanceHow\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85callable\xe5\x8d\xb3\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97\xe7\xae\x97\xe8\xb7\xaf\xe7\xa8\x8b\xe7\xbb\x88\xe7\x82\xb9\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\n        :param step_x: \xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41.0\xef\xbc\x8cfloat\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :param show_log: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xba\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe5\x90\x84\xe4\xb8\xaa\xe6\xae\xb5\xe6\xaf\x94\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :return \xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x87\xe7\x89\x87\xe8\xbf\x9b\xe8\xa1\x8cshift_distance\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba\xef\xbc\x9a\n                    h_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\xba\x95\xe8\xbe\xb9\xe8\xb7\x9d\xe7\xa6\xbb), v_distance(\xe4\xb8\x89\xe8\xa7\x92\xe5\x9e\x82\xe7\x9b\xb4\xe8\xb7\x9d\xe7\xa6\xbb),\n                    distance(\xe6\x96\x9c\xe8\xbe\xb9\xef\xbc\x8c\xe8\xb7\xaf\xe7\xa8\x8b), shift(\xe4\xbd\x8d\xe7\xa7\xbb), sd\xef\xbc\x88\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xef\xbc\x9ashift / distance\xef\xbc\x89\n                \xe6\x89\x80\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84tuple\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        # \xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84y\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe7\xa1\xae\xe4\xbf\x9d\xe8\xb7\xaf\xe7\xa8\x8b\xe4\xbd\x8d\xe7\xa7\xbb\xe6\xaf\x94\xe5\x85\xb7\xe6\x9c\x89\xe6\x9b\xb4\xe5\xa5\xbd\xe7\x9a\x84\xe9\x80\x82\xe5\xba\x94\xe6\x80\xa7\n        y = self.y_zoom\n        step = self.step_x_to_step(step_x)\n\n        if show:\n            plt.figure(figsize=ABuEnv.g_plt_figsize)\n            plt.plot(y)\n        shift_distance_list = []\n        for slice_end, color in zip(np.arange(step, len(y), step), itertools.cycle(K_PLT_MAP_STYLE)):\n            slice_start = slice_end - step\n            shift_distance_list.append(\n                shift_distance(y, how, slice_start=slice_start, slice_end=slice_end,\n                               color=color, show=show, show_log=show_log, ps=False))\n        if show:\n            plt.show()\n        return shift_distance_list\n\n    def show_regress_trend_channel(self, step_x=1.0):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\x8a\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x89\xe6\x9d\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe7\xbb\x84\xe6\x88\x90\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\n        :param step_x: \xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41.0\xef\xbc\x8cfloat\n        """"""\n        y = self.tl\n        step = self.step_x_to_step(step_x)\n\n        with plt_show():\n            plt.plot(y)\n            for slice_end, color in zip(np.arange(step, len(y), step), itertools.cycle(K_PLT_MAP_STYLE)):\n                slice_start = slice_end - step\n                slice_arr = y[slice_start:slice_end]\n                # \xe9\x80\x9a\xe8\xbf\x87regress_trend_channel\xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\x87\xe7\x89\x87\xe6\xae\xb5\xe7\x9a\x84\xe4\xb8\x8a\xe4\xb8\xad\xe4\xb8\x8b\xe4\xb8\x89\xe6\xae\xb5\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x80\xbc\n                y_below, y_fit, y_above = regress_trend_channel(slice_arr)\n                x = self.x[slice_start:slice_end]\n                plt.plot(x, y_below, \'g\')\n                plt.plot(x, y_fit, \'y\')\n                plt.plot(x, y_above, \'r\')\n\n    def show_skeleton_channel(self, with_mean=True, step_x=1.0):\n        """"""\n        \xe5\xa5\x97\xe6\x8e\xa5show_skeleton\xef\xbc\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\xaa\xa8\xe6\x9e\xb6\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\xe9\x80\x9a\xe9\x81\x93\xe7\x94\xb1\xef\xbc\x9a\n        ESkeletonHow.skeleton_min\xef\xbc\x9a\xe4\xb8\x8b\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\n        ESkeletonHow.skeleton_max\xef\xbc\x9a\xe4\xb8\x8a\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\n        ESkeletonHow.skeleton_mean \xe4\xb8\xad\xe8\xbd\xa8\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\xe7\xbb\x84\xe6\x88\x90\n\n        :param with_mean: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6ESkeletonHow.skeleton_mean \xe4\xb8\xad\xe8\xbd\xa8\xe9\x80\x9a\xe9\x81\x93\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n        :param step_x: \xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41.0\xef\xbc\x8cfloat\n        """"""\n        plt.figure(figsize=ABuEnv.g_plt_figsize)\n        self.show_skeleton(how=ESkeletonHow.skeleton_min, step_x=step_x, ps=False)\n        self.show_skeleton(how=ESkeletonHow.skeleton_max, step_x=step_x, ps=False)\n        if with_mean:\n            self.show_skeleton(how=ESkeletonHow.skeleton_mean, step_x=step_x, ps=False)\n        # \xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84\xe7\xbb\x98\xe5\x88\xb6ps\xe9\x83\xbd\xe6\x98\xafFalse, \xe8\xbf\x99\xe9\x87\x8c\xe7\xbb\x9f\xe4\xb8\x80show\n        plt.plot(self.tl)\n\n    def show_skeleton(self, how=ESkeletonHow.skeleton_min, step_x=1.0, ps=True):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\xaa\xa8\xe6\x9e\xb6\xe7\xbb\x93\xe6\x9e\x84\n        :param how: \xe8\xae\xa1\xe7\xae\x97\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8cESkeletonHow\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85callable\xe5\x8d\xb3\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\xaf\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\n                    \xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\n        :param step_x: \xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41.0\xef\xbc\x8cfloat\n        :param ps: \xe6\x98\xaf\xe5\x90\xa6\xe7\xab\x8b\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8cplt.show()\n        """"""\n        step = self.step_x_to_step(step_x)\n\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xe9\x83\xbd\xe5\x85\x88\xe7\x94\xbb\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xef\xbc\x8c\xe7\x94\xb1\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x82\xb9\xe8\xbf\x9e\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\xe5\xbd\xa2\xe6\x88\x90\xe8\x82\xa1\xe4\xbb\xb7\xe9\xaa\xa8\xe6\x9e\xb6\xe5\x9b\xbe\n        last_pos = None\n        # \xe6\xa0\xb9\xe6\x8d\xaehow\xe6\x98\xa0\xe5\xb0\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        how_func = skeleton_how(how)\n        if ps:\n            plt.figure(figsize=ABuEnv.g_plt_figsize)\n        for slice_end, color in zip(np.arange(step, len(self.tl), step), itertools.cycle(K_PLT_MAP_STYLE)):\n            slice_start = slice_end - step\n            slice_arr = self.tl[slice_start:slice_end]\n            if how == ESkeletonHow.skeleton_triangle:\n                """"""\n                    \xe4\xb8\x89\xe8\xa7\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xef\xbc\x9a\xe7\xa1\xae\xe5\xae\x9a\xe5\x8f\x96\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x89\xe4\xb8\xaa\xe7\x82\xb9\xe4\xbd\x8dhow_func\xe6\x8f\x90\xe4\xbe\x9b\n                    \xe5\xa6\x82\xe6\x9e\x9cnp.argmax(arr) > np.argmin(arr)\xe5\x8d\xb3\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe5\x9c\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe5\x89\x8d\xe9\x9d\xa2\xef\xbc\x8c\xe7\xac\xac\xe4\xb8\x89\xe7\x82\xb9\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe8\xb5\xb7\xe7\x82\xb9\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96\xe5\xba\x8f\xe5\x88\x97\xe7\xbb\x88\xe7\x82\xb9\n                """"""\n                max_pos = (np.argmax(slice_arr) + slice_start, np.max(slice_arr))\n                min_pos = (np.argmin(slice_arr) + slice_start, np.min(slice_arr))\n                draw_pos = how_func(slice_arr, slice_start)\n\n                plt.plot([draw_pos[0], min_pos[0]],\n                         [draw_pos[1], min_pos[1]], c=color)\n\n                plt.plot([draw_pos[0], max_pos[0]],\n                         [draw_pos[1], max_pos[1]], c=color)\n\n                plt.plot([min_pos[0], max_pos[0]],\n                         [min_pos[1], max_pos[1]], c=color)\n            else:\n                # \xe5\x85\xb6\xe5\xae\x83\xe9\xaa\xa8\xe6\x9e\xb6\xe6\x95\xb0\xe6\x8d\xae\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\n                draw_pos = (slice_start, how_func(slice_arr))\n                if last_pos is not None:\n                    # \xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xa4\xe4\xb8\xb4\xe8\xbf\x91\xe5\xb1\x80\xe9\x83\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x9b\xb8\xe8\xbf\x9e\xef\xbc\x8c\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x82\xb9\xe8\xbf\x9e\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\n                    plt.plot([last_pos[0], draw_pos[0]],\n                             [last_pos[1], draw_pos[1]], \'o-\')\n                # \xe5\xb0\x86\xe8\xbf\x99\xe4\xb8\xaa\xe6\xad\xa5\xe9\x95\xbf\xe5\x8d\x95\xe4\xbd\x8d\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x82\xb9\xe8\xb5\x8b\xe4\xba\x88last_pos\n                last_pos = draw_pos\n        if ps:\n            plt.plot(self.tl)\n\n    def show_skeleton_bfgs(self, step_x=1.0):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\xaa\xa8\xe6\x9e\xb6\xe7\xbb\x93\xe6\x9e\x84\xe4\xb8\x8eshow_skeleton\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe7\x94\xb1bfgs\xe7\xa1\xae\xe5\xae\x9a\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x9a\xe8\xbf\x87\n        scipy.interpolate.interp1d\xe6\x8f\x92\xe5\x80\xbc\xe5\xbd\xa2\xe6\x88\x90\xe6\xa8\xa1\xe5\x9e\x8b\xe9\x80\x9a\xe8\xbf\x87sco.fmin_bfgs\xe8\xae\xa1\xe7\xae\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n        :param step_x: \xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41.0\xef\xbc\x8cfloat\n        """"""\n        step = self.step_x_to_step(step_x)\n        # scipy.interpolate.interp1d\xe6\x8f\x92\xe5\x80\xbc\xe5\xbd\xa2\xe6\x88\x90\xe6\xa8\xa1\xe5\x9e\x8b\n        linear_interp = interp1d(self.x, self.tl)\n        # \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8d\x95\xe4\xbd\x8d\xe9\x83\xbd\xe5\x85\x88\xe7\x94\xbb\xe4\xb8\x80\xe4\xb8\xaa\xe7\x82\xb9\xef\xbc\x8c\xe7\x94\xb1\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x82\xb9\xe8\xbf\x9e\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\xe5\xbd\xa2\xe6\x88\x90\xe8\x82\xa1\xe4\xbb\xb7\xe9\xaa\xa8\xe6\x9e\xb6\xe5\x9b\xbe\n        last_pos = None\n\n        with plt_show():\n            # \xe6\xaf\x8f\xe6\xad\xa5\xe9\x95\xbfstep\xe5\x8d\x95\xe4\xbd\x8d\xe6\xb1\x82\xe4\xb8\x80\xe6\xac\xa1\xe5\xb1\x80\xe9\x83\xa8\xe6\x9c\x80\xe5\xb0\x8f\n            for find_min_pos in np.arange(step, len(self.tl), step):\n                # sco.fmin_bfgs\xe8\xae\xa1\xe7\xae\x97\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\n                local_min_pos = int(bfgs_min_pos(find_min_pos, linear_interp, len(self.tl)))\n                if local_min_pos == -1:\n                    # \xe5\x85\xb6\xe5\xae\x9e\xe4\xb8\xbb\xe8\xa6\x81\xe5\xb0\xb1\xe6\x98\xaf\xe5\x88\xa9\xe7\x94\xa8\xe8\xbf\x99\xe9\x87\x8c\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\n                    continue\n\n                # \xe5\xbd\xa2\xe6\x88\x90\xe6\x9c\x80\xe5\xb0\x8f\xe7\x82\xb9\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbf\xa1\xe6\x81\xaf(x, y)\n                draw_pos = (local_min_pos, self.tl[local_min_pos])\n                # \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaastep\xe5\x8d\x95\xe4\xbd\x8dlast_pos\xef\xbc\x9dnone, \xe4\xb9\x8b\xe5\x90\x8e\xe9\x83\xbd\xe6\x9c\x89\xe5\x80\xbc\n                if last_pos is not None:\n                    # \xe5\xb0\x86\xe4\xb8\xa4\xe4\xb8\xa4\xe4\xb8\xb4\xe8\xbf\x91\xe5\xb1\x80\xe9\x83\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x9b\xb8\xe8\xbf\x9e\xef\xbc\x8c\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x82\xb9\xe8\xbf\x9e\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9b\xb4\xe7\xba\xbf\n                    plt.plot([last_pos[0], draw_pos[0]],\n                             [last_pos[1], draw_pos[1]], \'o-\')\n                # \xe5\xb0\x86\xe8\xbf\x99\xe4\xb8\xaa\xe6\xad\xa5\xe9\x95\xbf\xe5\x8d\x95\xe4\xbd\x8d\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe7\x82\xb9\xe8\xb5\x8b\xe4\xba\x88last_pos\n                last_pos = draw_pos\n\n    def show_support_resistance_pos(self, best_poly=0, show=True):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87sco.fmin_bfgs\xe5\xaf\xbb\xe6\x89\xbe\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xef\xbc\x8c\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe7\x82\xb9\xe4\xb9\x9f\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87sco.fmin_bfgs\xe5\xaf\xbb\xe6\x89\xbe\xef\xbc\x8c\n        \xe4\xbd\x86\xe6\x98\xaf\xe8\xa6\x81\xe6\xb1\x82\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x9b\xe6\x9d\xa5\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x98\xaf\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\x90\x8e\xe5\x8f\x96\xe5\x8f\x8d\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        eg\xef\xbc\x9a\n            demean_y = ABuStatsUtil.demean(self.tl)\xef\xbc\x9a \xe9\xa6\x96\xe5\x85\x88\xe9\x80\x9a\xe8\xbf\x87demean\xe5\xb0\x86\xe5\xba\x8f\xe5\x88\x97\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\n            resistance_y = demean_y * -1 \xef\xbc\x9a\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\xa6\x81\xe5\x8f\x96\xe5\x8f\x8d\n            support_y = demean_y \xef\xbc\x9a\xe6\x94\xaf\xe6\x8c\x81\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x96\xe5\x8f\x8d\n        :param best_poly: \xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaebest_poly, \xe8\xae\xbe\xe7\xbd\xae\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8ABuRegUtil.search_best_poly\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\x86,\n                          \xe8\xaf\xa6\xe7\xbb\x86\xe9\x98\x85ABuTLExecute.support_resistance_pos\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :return: (\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d: support_pos, \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d: resistance_pos)\n        """"""\n\n        # \xe9\xa6\x96\xe5\x85\x88\xe9\x80\x9a\xe8\xbf\x87demean\xe5\xb0\x86\xe5\xba\x8f\xe5\x88\x97\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\n        demean_y = ABuStatsUtil.demean(self.tl)\n        # \xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\xa6\x81\xe5\x8f\x96\xe5\x8f\x8d\n        resistance_y = demean_y * -1\n        # \xe6\x94\xaf\xe6\x8c\x81\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x96\xe5\x8f\x8d\n        support_y = demean_y\n\n        # \xe5\x88\x86\xe6\x9e\x90\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\n        support_pos = support_resistance_pos(self.x, support_y, best_poly=best_poly, label=\'support pos\')\n        # \xe5\x88\x86\xe6\x9e\x90\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\n        resistance_pos = support_resistance_pos(self.x, resistance_y, best_poly=best_poly,\n                                                label=\'resistance pos\')\n        if show:\n            plt.plot(self.x, self.tl, \'--\', support_pos, self.tl[support_pos], \'o\',\n                     resistance_pos, self.tl[resistance_pos], \'p\')\n            plt.show()\n        # \xe8\xbf\x94\xe5\x9b\x9e (\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d: support_pos, \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d: resistance_pos)\n        return support_pos, resistance_pos\n\n    def show_support_resistance_select_k(self, best_poly=0, show=True):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xbb\x8e1-\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xaa\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\x81\x9a\xe7\xb1\xbb\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaa\xe8\x81\x9a\xe7\xb1\xbb\xe5\x99\xa8\xe7\x9a\x84\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8c\n        \xe9\x80\x9a\xe8\xbf\x87\xe6\x96\xb9\xe5\xb7\xae\xe9\x98\x80\xe5\x80\xbc\xe7\xad\x89\xe6\x96\xb9\xe6\xb3\x95\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe4\xbd\xb3\xe8\x81\x9a\xe7\xb1\xbb\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe5\xbe\x97\xe5\x88\xb0kmean\xe6\x9c\x80\xe4\xbd\xb3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n        :param best_poly: \xe4\xbc\xa0\xe9\x80\x92show_support_resistance_pos\xef\xbc\x8c\n                          \xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaebest_poly, \xe8\xae\xbe\xe7\xbd\xae\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8ABuRegUtil.search_best_poly\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\x86\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\n        :return: upport_est, resistance_est, support_pos, resistance_pos\n        """"""\n        # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\n        support_pos, resistance_pos = self.show_support_resistance_pos(best_poly, show=show)\n        support_pos = np.array([support_pos, [self.tl[support] for support in support_pos]]).T\n        resistance_pos = np.array([resistance_pos, [self.tl[resistance] for resistance in resistance_pos]]).T\n\n        support_est = None\n        if len(support_pos) > 1:\n            # \xe5\xa4\x9a\xe4\xb8\xaa\xe8\x81\x9a\xe7\xb1\xbb\xe5\x99\xa8\xe7\x9a\x84\xe6\x96\xb9\xe5\xb7\xae\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xaf\x94\xe8\xbe\x83\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe6\x96\xb9\xe5\xb7\xae\xe9\x98\x80\xe5\x80\xbc\xe7\xad\x89\xe6\x96\xb9\xe6\xb3\x95\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe4\xbd\xb3\xe8\x81\x9a\xe7\xb1\xbb\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe5\xbe\x97\xe5\x88\xb0kmean\xe6\x9c\x80\xe4\xbd\xb3\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\n            # \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84show\xe7\x9b\xb4\xe6\x8e\xa5False\xe4\xba\x86\n            support_est = select_k_support_resistance(support_pos, label=\'support k choice\', show=False)\n\n        resistance_est = None\n        if len(resistance_pos) > 1:\n            # \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84show\xe7\x9b\xb4\xe6\x8e\xa5False\xe4\xba\x86\n            resistance_est = select_k_support_resistance(resistance_pos, label=\'resistance k choice\', show=False)\n\n        return support_est, resistance_est, support_pos, resistance_pos\n\n    def show_support_resistance_trend(self, best_poly=0, only_last=False, plot_org=False, show=True, show_step=False):\n        """"""\n        \xe5\xa5\x97\xe6\x8e\xa5\xef\xbc\x9ashow_support_resistance_select_k\xef\xbc\x8d>support_resistance_predict\n             ->ABuTLExecute.plot_support_resistance_trend\n        \xe6\x9c\x80\xe7\xbb\x88\xe5\xaf\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8fshow\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\xad\xe9\x97\xb4\xe6\xb5\x81\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8c\x85\xe6\x8b\xac\n        \xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :param best_poly: \xe4\xbc\xa0\xe9\x80\x92show_support_resistance_pos\xef\xbc\x8c\n                          \xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaebest_poly, \xe8\xae\xbe\xe7\xbd\xae\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8ABuRegUtil.search_best_poly\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\x86\n        :param only_last: \xe9\x80\x8f\xe4\xbc\xa0ABuTLExecute.plot_support_resistance_trend\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x88\x96\xe6\x94\xaf\xe6\x92\x91\n        :param plot_org: \xe9\x80\x8f\xe4\xbc\xa0ABuTLExecute.plot_support_resistance_trend\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\n                         plot_org\xef\xbc\x9dTrue\xe6\x97\xb6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe9\x80\x9a\xe8\xbf\x87LinearRegression\xe8\xbf\x9b\xe8\xa1\x8c\n        :param show_step: show_step\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\xad\xe9\x97\xb4\xe6\xb5\x81\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96, \xe4\xb8\x8d\xe5\x8c\x85\xe6\x8b\xac\xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :param show: show: show\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        """"""\n        support_est, resistance_est, support_pos, resistance_pos = self.show_support_resistance_select_k(best_poly,\n                                                                                                         show=show_step)\n        if show:\n            plt.figure(figsize=ABuEnv.g_plt_figsize)\n\n        y_trend_dict = {}\n        if support_est is not None:\n            # FIXME \xe9\x92\x88\xe5\xaf\xb9\xe6\x9e\x81\xe7\xab\xaf\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\xbe\xe5\x88\xb0\xe8\xb6\xb3\xe5\xa4\x9f\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xaf\xe6\x92\x91\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe5\x81\x9a\xe5\xa4\x84\xe7\x90\x86\n            support_trend = support_resistance_predict(self.x, self.tl, support_est, support_pos,\n                                                       is_support=True, show=show_step)\n            y_support_trend = plot_support_resistance_trend(self.x, self.tl, support_trend, \'support trend line\',\n                                                            only_last=only_last, plot_org=plot_org, show=show)\n            if y_support_trend is not None:\n                y_trend_dict[\'support\'] = y_support_trend\n        else:\n            log_func(\'can\\\'t plot support !\')\n\n        if resistance_est is not None:\n            resistance_trend = support_resistance_predict(self.x, self.tl, resistance_est,\n                                                          resistance_pos, is_support=False, show=show_step)\n            y_resistance_trend = plot_support_resistance_trend(self.x, self.tl, resistance_trend,\n                                                               \'resistance trend line\',\n                                                               only_last=only_last, plot_org=plot_org, show=show)\n            if y_resistance_trend is not None:\n                y_trend_dict[\'resistance\'] = y_resistance_trend\n        else:\n            log_func(\'can\\\'t plot resistance !\')\n\n        if show:\n            plt.legend(loc=2)\n            plt.show()\n        return y_trend_dict\n\n    def show_support_trend(self, best_poly=0, only_last=False, plot_org=False, show=True, show_step=False):\n        """"""\n        \xe6\x9c\x80\xe7\xbb\x88\xe5\xaf\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x8f\xaa\xe5\xaf\xb9\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x98\xe5\x88\xb6\n\n        \xe5\xa5\x97\xe6\x8e\xa5\xef\xbc\x9ashow_support_resistance_select_k\xef\xbc\x8d>support_resistance_predict\n             ->ABuTLExecute.plot_support_resistance_trend\n        :param best_poly: \xe4\xbc\xa0\xe9\x80\x92show_support_resistance_pos\xef\xbc\x8c\n                          \xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaebest_poly, \xe8\xae\xbe\xe7\xbd\xae\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8ABuRegUtil.search_best_poly\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\x86\n        :param only_last: \xe9\x80\x8f\xe4\xbc\xa0ABuTLExecute.plot_support_resistance_trend\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x88\x96\xe6\x94\xaf\xe6\x92\x91\n        :param plot_org: \xe9\x80\x8f\xe4\xbc\xa0ABuTLExecute.plot_support_resistance_trend\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\n                         plot_org\xef\xbc\x9dTrue\xe6\x97\xb6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe9\x80\x9a\xe8\xbf\x87LinearRegression\xe8\xbf\x9b\xe8\xa1\x8c\n        :param show_step: show_step\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\xad\xe9\x97\xb4\xe6\xb5\x81\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96, \xe4\xb8\x8d\xe5\x8c\x85\xe6\x8b\xac\xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :param show: show: show\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        """"""\n\n        if show:\n            plt.figure(figsize=ABuEnv.g_plt_figsize)\n\n        support_est, _, support_pos, _ = self.show_support_resistance_select_k(best_poly,\n                                                                               show=show_step)\n        y_trend_dict = {}\n        if support_est is not None:\n            support_trend = support_resistance_predict(self.x, self.tl, support_est, support_pos,\n                                                       is_support=True, show=show_step)\n            y_support_trend = plot_support_resistance_trend(self.x, self.tl, support_trend, \'support trend line\',\n                                                            only_last=only_last, plot_org=plot_org, show=show)\n            if y_support_trend is not None:\n                y_trend_dict[\'support\'] = y_support_trend\n        if show:\n            plt.legend(loc=2)\n            plt.show()\n        return y_trend_dict\n\n    def show_resistance_trend(self, best_poly=0, only_last=False, plot_org=False, show=True, show_step=False):\n        """"""\n        \xe6\x9c\x80\xe7\xbb\x88\xe5\xaf\xb9\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe5\x8f\xaa\xe5\xaf\xb9\xe6\x94\xaf\xe6\x92\x91\xe4\xbd\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x98\xe5\x88\xb6\n\n        \xe5\xa5\x97\xe6\x8e\xa5\xef\xbc\x9ashow_support_resistance_select_k\xef\xbc\x8d>support_resistance_predict\n             ->ABuTLExecute.plot_support_resistance_trend\n        :param best_poly: \xe4\xbc\xa0\xe9\x80\x92show_support_resistance_pos\xef\xbc\x8c\n                          \xe5\x87\xbd\xe6\x95\xb0\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xaebest_poly, \xe8\xae\xbe\xe7\xbd\xae\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8ABuRegUtil.search_best_poly\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\x86\n        :param only_last: \xe9\x80\x8f\xe4\xbc\xa0ABuTLExecute.plot_support_resistance_trend\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe6\x88\x96\xe6\x94\xaf\xe6\x92\x91\n        :param plot_org: \xe9\x80\x8f\xe4\xbc\xa0ABuTLExecute.plot_support_resistance_trend\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xe8\xbf\x98\xe6\x98\xaf\xe7\x9b\xb4\xe7\xba\xbf\xef\xbc\x8c\n                         plot_org\xef\xbc\x9dTrue\xe6\x97\xb6\xe7\xbb\x98\xe5\x88\xb6\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe9\x80\x9a\xe8\xbf\x87LinearRegression\xe8\xbf\x9b\xe8\xa1\x8c\n        :param show_step: show_step\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\xad\xe9\x97\xb4\xe6\xb5\x81\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96, \xe4\xb8\x8d\xe5\x8c\x85\xe6\x8b\xac\xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        :param show: show: show\xe5\x8f\x82\xe6\x95\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe7\x9a\x84\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe9\x98\xbb\xe5\x8a\x9b\xe4\xbd\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x94\xaf\xe6\x92\x91\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n        """"""\n        _, resistance_est, _, resistance_pos = self.show_support_resistance_select_k(best_poly,\n                                                                                     show=show_step)\n\n        if show:\n            plt.figure(figsize=ABuEnv.g_plt_figsize)\n        y_trend_dict = {}\n        if resistance_est is not None:\n            resistance_trend = support_resistance_predict(self.x, self.tl, resistance_est,\n                                                          resistance_pos, is_support=False, show=show_step)\n            y_resistance_trend = plot_support_resistance_trend(self.x, self.tl, resistance_trend,\n                                                               \'resistance trend line\',\n                                                               only_last=only_last, plot_org=plot_org, show=show)\n            if y_resistance_trend is not None:\n                y_trend_dict[\'resistance\'] = y_resistance_trend\n        if show:\n            plt.legend(loc=2)\n            plt.show()\n        return y_trend_dict\n\n    def show_percents(self, percents=(0.1, 0.9)):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\xaf\x94\xe4\xbe\x8b\xe5\x88\x86\xe5\x89\xb2\xe7\x9a\x84\xe5\x8c\xba\xe5\x9f\x9f\n        :param percents: float\xe5\x80\xbc\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8(0.1, 0.9)\n        :return:\n        """"""\n        if not isinstance(percents, Iterable):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0list\xe4\xb8\xad\xef\xbc\x8c\xe4\xbe\xbf\xe4\xba\x8e\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\n            percents = [percents]\n\n        pts_dict = find_percent_point(percents, self.tl)\n\n        with plt_show():\n            plt.plot(self.tl)\n\n            """"""\n                eg: pts_dict \xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9a\n                {0.1: (15.732749999999999, 15.5075), 0.9: (31.995000000000005, 34.387500000000003)}\n                \xe5\x8d\xb3\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe6\xaf\x94\xe4\xbe\x8b\xe5\x9c\xb0\xe5\xb8\xa6\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xb0\xe5\xb8\xa6\xe7\x9a\x84\xe4\xb8\x8a\xe4\xb8\x8b\xe8\xbe\xb9\xe7\x95\x8c\n            """"""\n            for pt, color in zip(pts_dict, itertools.cycle(K_PLT_MAP_STYLE)):\n                stats_key = \'stats:{}\'.format(pt)\n                sight_key = \'sight:{}\'.format(pt)\n                p_dict = {stats_key: pts_dict[pt][0], sight_key: pts_dict[pt][1]}\n                plt.axhline(p_dict[stats_key], c=color, label=stats_key)\n                plt.axhline(p_dict[sight_key], c=\'y\', label=sight_key)\n\n                below, above = below_above_gen(*pts_dict[pt])\n                plt.fill_between(self.x, below, above,\n                                 alpha=0.5, color=color)\n                plt.legend(loc=\'best\')\n\n    def show_golden(self, both_golden=True):\n        """"""\n        \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\n        :param both_golden: \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x90\x8c\xe6\x97\xb6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xb8\xa4\xe7\xa7\x8d\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\n        :return:\n        """"""\n        if both_golden:\n            # \xe5\x90\x8c\xe6\x97\xb6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xb8\xa4\xe7\xa7\x8d\xe5\x88\x86\xe5\x89\xb2\xe7\xba\xbf\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xa5\x97\xe6\x8e\xa5show_percents\n            self.show_percents(percents=(0.382, 0.618))\n        else:\n            # \xe5\x88\x86\xe5\x88\xab\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n            find_golden_point_ex(self.x, self.tl, show=True)\n            find_golden_point(self.x, self.tl, show=True)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aline_name: close\xef\xbc\x8c below\xef\xbc\x8c above, mean""""""\n        return ""{}: now:{} below:{} above:{}"".format(self.line_name,\n                                                     self.close,\n                                                     self.low,\n                                                     self.high, self.mean)\n\n    __repr__ = __str__\n'"
abupy/TLineBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom . import ABuTL as tl\n\n__all__ = ['tl']\n"""
abupy/TradeBu/ABuBenchmark.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x9f\xba\xe5\x87\x86\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x9f\xba\xe5\x87\x86\xe7\x9a\x84\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe4\xba\x8e\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe7\xa1\xae\xe5\xae\x9a\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe9\xbd\x90\xef\xbc\x8c\n    \xe6\x8a\x9b\xe5\xbc\x83\xe5\xbc\x82\xe5\xb8\xb8\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\xb8\x82\xe5\x9c\xba\xe8\x8c\x83\xe5\x9b\xb4\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe6\xaf\x94\xe4\xb8\x8e\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe7\xad\x89\xe4\xbd\x9c\xe7\x94\xa8\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode, EMarketTargetType\nfrom ..MarketBu import ABuSymbolPd\nfrom ..MarketBu.ABuSymbol import IndexSymbol, Symbol\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuBase import PickleStateMixin\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuBenchmark(PickleStateMixin):\n    """"""\xe5\x9f\xba\xe5\x87\x86\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5PickleStateMixin\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8abu.store_abu_result_tuple\xe4\xbc\x9a\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96""""""\n\n    def __init__(self, benchmark=None, start=None, end=None, n_folds=2, rs=True, benchmark_kl_pd=None):\n        if benchmark_kl_pd is not None and hasattr(benchmark_kl_pd, \'name\'):\n            """"""\xe4\xbb\x8e\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x9e\x84\xe5\xbb\xba""""""\n            self.benchmark = benchmark_kl_pd.name\n            self.start = benchmark_kl_pd.iloc[0].date\n            self.end = benchmark_kl_pd.iloc[-1].date\n            self.n_folds = n_folds\n            self.kl_pd = benchmark_kl_pd\n            return\n\n        if benchmark is None:\n            if ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_US:\n                # \xe7\xbe\x8e\xe8\x82\xa1\n                benchmark = IndexSymbol.IXIC\n            elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_HK:\n                # \xe6\xb8\xaf\xe8\x82\xa1\n                benchmark = IndexSymbol.HSI\n            elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_CN:\n                # a\xe8\x82\xa1\n                benchmark = IndexSymbol.SH\n            elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN:\n                # \xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\n                benchmark = IndexSymbol.BM_FUTURES_CN\n            elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_TC:\n                # \xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\n                benchmark = IndexSymbol.TC_INX\n            elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_OPTIONS_US:\n                # \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xe6\x9a\x82\xe6\x97\xb6\xe4\xb9\x9f\xe4\xbb\xa5IXIC\xe5\x81\x9a\xe4\xb8\xba\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe6\x98\xaf\xe5\xa4\x96\xe9\x83\xa8\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84benchmark\xe8\xae\xbe\xe7\xbd\xae\n                benchmark = IndexSymbol.IXIC\n            elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL:\n                # \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe6\x9a\x82\xe6\x97\xb6\xe4\xb9\x9f\xe4\xbb\xa5BM_FUTURES_GB\xe5\x81\x9a\xe4\xb8\xba\xe6\xa0\x87\xe5\xb0\xba\n                benchmark = IndexSymbol.BM_FUTURES_GB\n            else:\n                raise TypeError(\'benchmark is None AND g_market_target ERROR!\')\n\n        self.benchmark = benchmark\n        self.start = start\n        self.end = end\n        self.n_folds = n_folds\n        # \xe5\x9f\xba\xe5\x87\x86\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\xbf\xe7\x94\xa8data_mode=EMarketDataSplitMode.E_DATA_SPLIT_SE\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe9\xbd\x90\xe5\x85\xb6\xe5\xae\x83\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe6\x8c\x89\xe7\x85\xa7\xe6\x97\xb6\xe9\x97\xb4\xe5\x88\x87\xe5\x89\xb2\n        self.kl_pd = ABuSymbolPd.make_kl_df(benchmark, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_SE,\n                                            n_folds=n_folds,\n                                            start=start, end=end)\n\n        if rs and self.kl_pd is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x9f\xba\xe5\x87\x86\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe9\x83\xbd\xe6\x98\xafnone\xef\xbc\x8c\xe5\xb0\xb1\xe4\xb8\x8d\xe8\xa6\x81\xe5\x86\x8d\xe5\x90\x91\xe4\xb8\x8b\xe8\xbf\x90\xe8\xa1\x8c\xe4\xba\x86\n            raise ValueError(\'CapitalClass init benchmark kl_pd is None\')\n\n    def unpick_extend_work(self, state):\n        """"""\xe5\xae\x8c\xe6\x88\x90 PickleStateMixin\xe4\xb8\xad__setstate__\xe7\xbb\x93\xe6\x9d\x9f\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe5\xb7\xa5\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\xbakl_pd.name\xe8\xb5\x8b\xe4\xba\x88\xe5\x87\x86\xe7\xa1\xae\xe7\x9a\x84benchmark""""""\n        if isinstance(self.benchmark, Symbol):\n            self.kl_pd.name = self.benchmark.value\n        elif isinstance(self.benchmark, six.string_types):\n            self.kl_pd.name = self.benchmark\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9abenchmark n_folds""""""\n        return \'benchmark is {}, n_folds = {}\'.format(self.kl_pd.name, self.n_folds)\n\n    __repr__ = __str__\n\n""""""\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\xbe\x88\xe5\xa4\x9a\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\x80\x83\xe8\x99\x91\xe5\xad\x98\xe8\xb4\xae\xe7\xa9\xba\xe9\x97\xb4\xe5\x8f\xaf\xe4\xbd\xbf\xe7\x94\xa8LazyFunc.\n    from ..UtilBu.ABuLazyUtil import LazyFunc\n\n    class AbuBenchmark(object):\n        def __init__(self, benchmark=None, start=None, end=None, n_folds=2):\n            if benchmark is None:\n                if ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_US:\n                    benchmark = IndexSymbol.IXIC\n                elif ABuEnv.g_market_target == EMarketTargetType.E_MARKET_TARGET_HK:\n                    benchmark = IndexSymbol.HSI\n                else:\n                    benchmark = IndexSymbol.SH\n            self.benchmark = benchmark\n\n            self.n_folds = n_folds\n            self.start = start\n            self.end = end\n\n    @LazyFunc\n    def kl_pd(self):\n        kl_pd = ABuSymbolPd.make_kl_df(self.benchmark, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_SE,\n                                       n_folds=self.n_folds,\n                                       start=self.start, end=self.end)\n\n        if kl_pd is None:\n            raise ValueError(\'CapitalClass init benchmark kl_pd is None\')\n        return kl_pd\n""""""\n'"
abupy/TradeBu/ABuCapital.py,11,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe8\xb5\x84\xe9\x87\x91\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8c\xba\xe5\x88\x86\xe7\xbe\x8e\xe5\x85\x83\xef\xbc\x8c\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\xe7\xad\x89\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x81\x9a\xe7\xbe\x8e\xe8\x82\xa1\xe4\xba\xa4\xe6\x98\x93\xe9\xbb\x98\xe8\xae\xa4\xe5\xbd\x93\xe4\xbd\x9c\xe7\xbe\x8e\xe5\x85\x83\xef\xbc\x8ca\xe8\x82\xa1\xe9\xbb\x98\xe8\xae\xa4\xe5\xbd\x93\xe4\xbd\x9c\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..UtilBu.ABuProgress import AbuProgress\nfrom ..UtilBu import ABuDateUtil\nfrom ..TradeBu.ABuOrder import AbuOrder\nfrom ..TradeBu.ABuCommission import AbuCommission\nfrom ..CoreBu.ABuBase import PickleStateMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AbuCapital(PickleStateMixin):\n    """"""\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbb""""""\n\n    def __init__(self, init_cash, benchmark, user_commission_dict=None):\n        """"""\n        :param init_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xe5\x80\xbc\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe5\x8c\xba\xe5\x88\x86\xe7\xbe\x8e\xe5\x85\x83\xef\xbc\x8c\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\xe7\xad\x89\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x81\x9a\xe7\xbe\x8e\xe8\x82\xa1\xe4\xba\xa4\xe6\x98\x93\xe9\xbb\x98\xe8\xae\xa4\xe5\xbd\x93\xe4\xbd\x9c\xe7\xbe\x8e\xe5\x85\x83\xef\xbc\x8ca\xe8\x82\xa1\xe9\xbb\x98\xe8\xae\xa4\xe5\xbd\x93\xe4\xbd\x9c\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\xef\xbc\x8cint\n        :param benchmark: \xe8\xb5\x84\xe9\x87\x91\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\x87\xe5\xb0\xba\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbb\xe8\xa1\xa8\xe6\xa0\xbc\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xe7\xa1\xae\xe5\xae\x9a\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param user_commission_dict: dict\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe6\x9f\xa5\xe7\x9c\x8bAbuCommission\n        """"""\n        self.read_cash = init_cash\n\n        kl_pd = benchmark.kl_pd\n        if kl_pd is None:\n            # \xe8\xa6\x81\xe6\xb1\x82\xe5\x9f\xba\xe5\x87\x86\xe5\xbf\x85\xe9\xa1\xbb\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\n            raise ValueError(\'CapitalClass init klPd is None\')\n\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe5\x9f\xba\xe5\x87\x86\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\x88\xb6\xe4\xbd\x9c\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd(pd.DcataFrame\xe5\xaf\xb9\xe8\xb1\xa1)\n        self.capital_pd = pd.DataFrame(\n            {\n                \'cash_blance\': np.NAN * kl_pd.shape[0],\n                \'stocks_blance\': np.zeros(kl_pd.shape[0]),\n                \'atr21\': kl_pd[\'atr21\'],\n                \'date\': kl_pd[\'date\']\n            },\n            index=kl_pd.index)\n\n        self.capital_pd[\'date\'] = self.capital_pd[\'date\'].astype(int)\n        # cash_blance\xe9\x99\xa4\xe4\xba\x86\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb6\xe5\xae\x83\xe9\x83\xbd\xe6\x98\xafnan\n        self.capital_pd.loc[\n            self.capital_pd.index[0], \'cash_blance\'] = self.read_cash\n        # \xe6\x9e\x84\xe9\x80\xa0\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe5\xaf\xb9\xe8\xb1\xa1AbuCommission\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cuser\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87user_commission_dict\xe4\xbc\xa0\xe5\x85\xa5\n        self.commission = AbuCommission(user_commission_dict)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9acapital_pd.info commission_df.info""""""\n        return \'capital_pd:\\n{}\\ncommission_pd:\\n{}\'.format(self.capital_pd.info(),\n                                                            self.commission.commission_df.info())\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9a\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe7\x9a\x84\xe8\xa1\x8c\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb3self.capital_pd.shape[0]""""""\n        return self.capital_pd.shape[0]\n\n    def init_k_line(self, a_symbol):\n        """"""\n        \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x9c\xa8\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe9\x83\xbd\xe6\xb7\xbb\xe5\x8a\xa0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84call keep\xef\xbc\x88\xe4\xb9\xb0\xe6\xb6\xa8\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xef\xbc\x89\xef\xbc\x8ccall worth\xef\xbc\x88\xe4\xb9\xb0\xe6\xb6\xa8\xe6\x80\xbb\xe4\xbb\xb7\xe5\x80\xbc\xef\xbc\x89\xef\xbc\x8c\n        put keep\xef\xbc\x88\xe4\xb9\xb0\xe8\xb7\x8c\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xef\xbc\x89\xef\xbc\x8cput worth\xef\xbc\x88\xe4\xb9\xb0\xe8\xb7\x8c\xe6\x80\xbb\xe4\xbb\xb7\xe5\x80\xbc\xef\xbc\x89\n        :param a_symbol: symbol str\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        # \xe4\xb9\xb0\xe6\xb6\xa8\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n        call_keep = \'_call_keep\'\n        if self.capital_pd.columns.tolist().count(a_symbol + call_keep) == 0:\n            self.capital_pd[a_symbol + call_keep] = np.NAN * \\\n                                                    self.capital_pd.shape[0]\n        # \xe4\xb9\xb0\xe8\xb7\x8c\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n        put_keep = \'_put_keep\'\n        if self.capital_pd.columns.tolist().count(a_symbol + put_keep) == 0:\n            self.capital_pd[a_symbol + put_keep] = np.NAN * \\\n                                                   self.capital_pd.shape[0]\n        # \xe4\xb9\xb0\xe6\xb6\xa8\xe6\x80\xbb\xe4\xbb\xb7\xe5\x80\xbc\n        call_worth = \'_call_worth\'\n        if self.capital_pd.columns.tolist().count(a_symbol + call_worth) == 0:\n            self.capital_pd[a_symbol + call_worth] = np.NAN * \\\n                                                     self.capital_pd.shape[0]\n\n        # \xe4\xb9\xb0\xe8\xb7\x8c\xe6\x80\xbb\xe4\xbb\xb7\xe5\x80\xbc\n        put_worth = \'_put_worth\'\n        if self.capital_pd.columns.tolist().count(a_symbol + put_worth) == 0:\n            self.capital_pd[a_symbol + put_worth] = np.NAN * \\\n                                                    self.capital_pd.shape[0]\n\n    def apply_init_kl(self, action_pd, show_progress):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\x9c\xa8\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe6\x96\xb0\xe5\xbb\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84call\xef\xbc\x8cput\xe5\x88\x97\n        :param action_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param show_progress: \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        """"""\n        # \xe4\xbd\xbf\xe7\x94\xa8set\xe7\xad\x9b\xe9\x80\x89\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84symbol\xe4\xba\xa4\xe6\x98\x93\xe5\xba\x8f\xe5\x88\x97\n        symbols = set(action_pd.symbol)\n        # \xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        with AbuProgress(len(symbols), 0, label=\'apply_init_kl...\') as progress:\n            for pos, symbol in enumerate(symbols):\n                if show_progress:\n                    progress.show(a_progress=pos + 1)\n                # \xe8\xbf\xad\xe4\xbb\xa3symbols\xef\xbc\x8c\xe6\x96\xb0\xe5\xbb\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84call\xef\xbc\x8cput\xe5\x88\x97\n                self.init_k_line(symbol)\n\n    def apply_k_line(self, a_k_day, kl_pd, buy_type_head):\n        """"""\n        \xe5\x9c\xa8apply_kl\xe4\xb8\xad\xe7\x9a\x84do_apply_kl\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital\xe8\xbf\x9b\xe8\xa1\x8capply\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\n        \xe5\x8d\xb3\xe8\xbf\xad\xe4\xbb\xa3\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe8\xae\xa1\xe7\xae\x97\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe4\xbb\xb7\xe5\x80\xbc\n        :param a_k_day: \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xa2\xab\xe8\xbf\xad\xe4\xbb\xa3\xe4\xb8\xad\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe6\x8d\xae\n        :param kl_pd: \xe6\xad\xa3\xe5\x9c\xa8\xe8\xa2\xabapply\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\xac\xe4\xbd\x93\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param buy_type_head: \xe4\xbb\xa3\xe8\xa1\xa8\xe4\xba\xa4\xe6\x98\x93\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x88_call\xef\xbc\x8c_put\xef\xbc\x89\n        :return:\n        """"""\n        if a_k_day[kl_pd.name + buy_type_head + \'_keep\'] > 0:\n            kl = kl_pd[kl_pd[\'date\'] == a_k_day[\'date\']]\n            if kl is None or kl.shape[0] == 0:\n                # \xe5\x89\x8d\xe6\x8f\x90\xe6\x98\xaf\xe5\xbd\x93\xe5\x89\x8d\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\n                return\n\n            # \xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            td_close = kl[\'close\'].values[0]\n            if buy_type_head == \'_put\':\n                # \xe9\x92\x88\xe5\xaf\xb9buy put\xe5\xaf\xb9\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xe9\x92\x88\xe5\xaf\xb9put\xe7\x89\xb9\xe6\xae\x8a\xe5\xa4\x84\xe7\x90\x86\n                today_key = kl.key.values[0]\n                if today_key > 0:\n                    yd_close = kl_pd.iloc[today_key - 1].close\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe8\xb7\x8c\xef\xbc\x8c\xe5\xae\x9e\xe6\x97\xb6\xe5\xb8\x82\xe5\x9c\xba\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbb\xa5\xe6\x98\xa8\xe5\xa4\xa9\xe4\xb8\xba\xe5\x9f\xba\xe7\xa1\x80\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\xb3\xef\xbc\x8a\xef\xbc\x8d1\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x96\xb9\xe5\x90\x91\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe4\xbb\xa5\xe6\x94\xb6\xe7\x9b\x8a\xe6\x9d\xa5\xe6\x98\xa0\xe5\xb0\x84\xe9\x87\x8d\xe6\x96\xb0\xe5\xae\x9a\xe4\xb9\x89\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                    td_close = (td_close - yd_close) * -1 + yd_close\n            # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe5\x8d\xb3\xe5\xa4\x84\xe7\x90\x86\xe5\x90\x8e\xe7\x9a\x84\xe4\xbb\x8a\xe6\x97\xa5\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbb\x8a\xe6\x97\xa5\xe4\xbb\xb7\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\n            self.capital_pd.loc[kl.index, [kl_pd.name + buy_type_head + \'_worth\']] \\\n                = np.round(td_close * a_k_day[kl_pd.name + buy_type_head + \'_keep\'], 3)\n\n    def apply_kl(self, action_pd, kl_pd_manager, show_progress):\n        """"""\n        apply_action\xe4\xb9\x8b\xe5\x90\x8e\xe5\xaf\xb9\xe5\xae\x9e\xe9\x99\x85\xe6\x88\x90\xe4\xba\xa4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x88\x86\xe5\x88\xab\xe8\xbf\xad\xe4\xbb\xa3\xe6\x9b\xb4\xe6\x96\xb0\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe7\x9a\x84\xe5\xae\x9e\xe6\x97\xb6\xe4\xbb\xb7\xe5\x80\xbc\n        :param action_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param kl_pd_manager: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuKLManager\xe5\xae\x9e\xe4\xbe\x8b\n        :param show_progress: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        """"""\n\n        # \xe5\x9c\xa8apply_action\xe4\xb9\x8b\xe5\x90\x8e\xe5\xbd\xa2\xe6\x88\x90deal\xe5\x88\x97\xe5\x90\x8e\xef\xbc\x8cset\xe5\x87\xba\xe8\x80\x83\xe8\x99\x91\xe8\xb5\x84\xe9\x87\x91\xe4\xb8\x8b\xe6\x88\x90\xe4\xba\xa4\xe4\xba\x86\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xba\x8f\xe5\x88\x97\n        deal_symbols_set = set(action_pd[action_pd[\'deal\'] == 1].symbol)\n\n        def do_apply_kl(kl_pd, buy_type_head):\n            """"""\n            \xe6\xa0\xb9\xe6\x8d\xae\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x9c\xa8\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8ccall\xef\xbc\x88\xe4\xb9\xb0\xe6\xb6\xa8\xef\xbc\x89\xef\xbc\x8cput\xef\xbc\x88\xe4\xb9\xb0\xe8\xb7\x8c\xef\xbc\x89\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xae\x9e\xe6\x97\xb6\xe4\xbb\xb7\xe5\x80\xbc\xe6\x9b\xb4\xe6\x96\xb0\n            :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n            :param buy_type_head: \xe4\xbb\xa3\xe8\xa1\xa8\xe4\xba\xa4\xe6\x98\x93\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x88_call\xef\xbc\x8c_put\xef\xbc\x89\n            """"""\n            # cash_blance\xe5\xaf\xb9na\xe8\xbf\x9b\xe8\xa1\x8cpad\xe5\xa4\x84\xe7\x90\x86\n            self.capital_pd[\'cash_blance\'].fillna(method=\'pad\', inplace=True)\n            # symbol\xe5\xaf\xb9\xe5\xba\x94\xe5\x88\x97\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe5\xaf\xb9na\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\n            self.capital_pd[kl_pd.name + buy_type_head + \'_keep\'].fillna(method=\'pad\', inplace=True)\n            self.capital_pd[kl_pd.name + buy_type_head + \'_keep\'].fillna(0, inplace=True)\n\n            # \xe4\xbd\xbf\xe7\x94\xa8apply\xe5\x9c\xa8axis\xef\xbc\x9d1\xe4\xb8\x8a\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8a\xe5\xaf\xb9\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe5\x8f\x8a\xe5\xb8\x82\xe5\x9c\xba\xe4\xbb\xb7\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\n            self.capital_pd.apply(self.apply_k_line, axis=1, args=(kl_pd, buy_type_head))\n\n            # symbol\xe5\xaf\xb9\xe5\xba\x94\xe5\x88\x97\xe5\xb8\x82\xe5\x9c\xba\xe4\xbb\xb7\xe5\x80\xbc\xe5\xaf\xb9na\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\n            self.capital_pd[kl_pd.name + buy_type_head + \'_worth\'].fillna(method=\'pad\', inplace=True)\n            self.capital_pd[kl_pd.name + buy_type_head + \'_worth\'].fillna(0, inplace=True)\n\n            # \xe7\xba\xa0\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86\xe6\x8a\x8akeep=0\xe4\xbd\x86\xe6\x98\xafworth\xe8\xa2\xabpad\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe4\xbf\xae\xe6\xad\xa3\n            fe_mask = (self.capital_pd[kl_pd.name + buy_type_head + \'_keep\'] == 0) & (\n                self.capital_pd[kl_pd.name + buy_type_head + \'_worth\'] > 0)\n            # \xe7\xad\x9b\xe5\x87\xba\xe9\x9c\x80\xe8\xa6\x81\xe7\xba\xa0\xe9\x94\x99\xe7\x9a\x84index\n            fe_index = self.capital_pd[fe_mask].index\n            # \xe5\xb0\x86\xe9\x9c\x80\xe8\xa6\x81\xe7\xba\xa0\xe9\x94\x99\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94index\xe4\xb8\x8a\xe5\xb8\x82\xe5\x9c\xba\xe4\xbb\xb7\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xbd\x92\xe9\x9b\xb6\xe5\xa4\x84\xe7\x90\x86\n            cp_w = self.capital_pd[kl_pd.name + buy_type_head + \'_worth\']\n            cp_w.loc[fe_index] = 0\n\n        # \xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        with AbuProgress(len(deal_symbols_set), 0, label=\'apply_kl...\') as progress:\n            for pos, deal_symbol in enumerate(deal_symbols_set):\n                if show_progress:\n                    progress.show(a_progress=pos + 1)\n                # \xe4\xbb\x8ekl_pd_manager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97kl\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaakl\xe5\x88\x86\xe5\x88\xab\xe8\xbf\x9b\xe8\xa1\x8ccall\xef\xbc\x88\xe4\xb9\xb0\xe6\xb6\xa8\xef\xbc\x89\xef\xbc\x8cput\xef\xbc\x88\xe4\xb9\xb0\xe8\xb7\x8c\xef\xbc\x89\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xae\x9e\xe6\x97\xb6\xe4\xbb\xb7\xe5\x80\xbc\xe6\x9b\xb4\xe6\x96\xb0\n                kl = kl_pd_manager.get_pick_time_kl_pd(deal_symbol)\n                # \xe8\xbf\x9b\xe8\xa1\x8ccall\xef\xbc\x88\xe4\xb9\xb0\xe6\xb6\xa8\xef\xbc\x89\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xae\x9e\xe6\x97\xb6\xe4\xbb\xb7\xe5\x80\xbc\xe6\x9b\xb4\xe6\x96\xb0\n                do_apply_kl(kl, \'_call\')\n                # \xe8\xbf\x9b\xe8\xa1\x8cput\xef\xbc\x88\xe4\xb9\xb0\xe8\xb7\x8c\xef\xbc\x89\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xae\x9e\xe6\x97\xb6\xe4\xbb\xb7\xe5\x80\xbc\xe6\x9b\xb4\xe6\x96\xb0\n                do_apply_kl(kl, \'_put\')\n\n    def apply_action(self, a_action, progress):\n        """"""\n        \xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\x8a\xe8\xbf\x9b\xe8\xa1\x8capply\xe5\xaf\xb9\xe5\xba\x94\xe6\x9c\xac\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8d\xb3\n        \xe5\xb0\x86\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\xa0\xb9\xe6\x8d\xae\xe8\xb5\x84\xe9\x87\x91\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa4\x84\xe7\x90\x86\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe7\x9a\x84\n        \xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\n        :param a_action: \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xa2\xab\xe8\xbf\xad\xe4\xbb\xa3\xe4\xb8\xad\xe7\x9a\x84action\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\n        :param progress: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe6\x88\x90\xe4\xba\xa4deal bool\n        """"""\n        # \xe5\x8c\xba\xe5\x88\xab\xe4\xb9\xb0\xe5\x85\xa5\xe8\xa1\x8c\xe4\xb8\xba\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xba\n        is_buy = True if a_action[\'action\'] == \'buy\' else False\n        # \xe4\xbb\x8eaction\xe6\x95\xb0\xe6\x8d\xae\xe6\x9e\x84\xe9\x80\xa0AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        order = AbuOrder()\n        order.buy_symbol = a_action[\'symbol\']\n        order.buy_cnt = a_action[\'Cnt\']\n        if is_buy:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x8d\x95\xef\xbc\x8csell_price = price2 ,\xe8\xaf\xa6\xe6\x83\x85\xe9\x98\x85\xe8\xaf\xbbABuTradeExecute\xe4\xb8\xadtransform_action\n            order.buy_price = a_action[\'Price\']\n            order.sell_price = a_action[\'Price2\']\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8d\x96\xe5\x8d\x95\xef\xbc\x8cbuy_price = price2 ,\xe8\xaf\xa6\xe6\x83\x85\xe9\x98\x85\xe8\xaf\xbbABuTradeExecute\xe4\xb8\xadtransform_action\n            order.sell_price = a_action[\'Price\']\n            order.buy_price = a_action[\'Price2\']\n        # \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\n        order.buy_date = a_action[\'Date\']\n        order.sell_date = a_action[\'Date\']\n        # \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x96\xb9\xe5\x90\x91\n        order.expect_direction = a_action[\'Direction\']\n\n        # \xe5\xaf\xb9\xe4\xb9\xb0\xe5\x8d\x95\xe5\x92\x8c\xe5\x8d\x96\xe5\x8d\x95\xe5\x88\x86\xe5\x88\xab\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x88\x90\xe4\xba\xa4deal\n        deal = self.buy_stock(order) if is_buy else self.sell_stock(order)\n\n        if progress is not None:\n            progress.show()\n\n        return deal\n\n    def buy_stock(self, a_order):\n        """"""\n        \xe5\x9c\xa8apply_action\xe4\xb8\xad\xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x8d\x95\xe8\xae\xa1\xe7\xae\x97cost\xef\xbc\x8c\xe5\x9c\xa8\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe4\xbf\xae\xe6\x94\xb9\xe5\xaf\xb9\xe5\xba\x94cash_blance\xef\xbc\x8c\n        \xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9b\xb4\xe6\x96\xb0\xe5\xaf\xb9\xe5\xba\x94symbol\xe4\xb8\x8a\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n        :param a_order: \xe5\x9c\xa8apply_action\xe4\xb8\xad\xe7\x94\xb1action\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe6\x88\x90\xe4\xba\xa4deal bool\n        """"""\n\n        # \xe9\xa6\x96\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8commission\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n        with self.commission.buy_commission_func(a_order) as (buy_func, commission_list):\n            commission = buy_func(a_order.buy_cnt, a_order.buy_price)\n            # \xe5\xb0\x86\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84commission_list\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9ccommission\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaelist\xe9\x95\xbf\xe5\xba\xa6\xe5\x86\xb3\xe5\xae\x9a\xe5\x86\x99\xe5\x85\xa5\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xb0\xe5\xbd\x95pd.DataFrame\n            commission_list.append(commission)\n        # cost = \xe4\xb9\xb0\xe5\x8d\x95\xe6\x95\xb0\xe9\x87\x8f \xef\xbc\x8a \xe5\x8d\x95\xe4\xbd\x8d\xe4\xbb\xb7\xe6\xa0\xbc \xef\xbc\x8b \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n        order_cost = a_order.buy_cnt * a_order.buy_price + commission\n        # \xe4\xb9\xb0\xe5\x8d\x95\xe6\x97\xb6\xe9\x97\xb4\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90pd\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1\n        time_ind = pd.to_datetime(ABuDateUtil.fmt_date(a_order.buy_date))\n        # pd\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbd\xae\xe6\x8d\xa2\xe5\x87\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84index number\n        num_index = self.capital_pd.index.tolist().index(time_ind)\n\n        # cash_blance\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96init\xe4\xb8\xad\xe9\x99\xa4\xe4\xba\x86\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb6\xe5\xae\x83\xe9\x83\xbd\xe6\x98\xafnan\n        cash_blance = self.capital_pd[\'cash_blance\'].dropna()\n\n        # \xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96cash_blance\xe4\xb8\xad < time_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        bl_ss = cash_blance[cash_blance.index <= time_ind]\n        if bl_ss is None or bl_ss.shape[0] == 0:\n            logging.info(\'bl_ss.shape[0] == 0 \' + str(a_order.buy_date))\n            return False\n        # \xe6\x88\xaa\xe5\x8f\x96\xe7\x9a\x84bl_ss\xe4\xb8\xad\xe9\x80\x89\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe5\x81\x9a\xe4\xb8\xba\xe5\x88\xa4\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84cash\xe5\x80\xbc\n        cash = bl_ss.iloc[-1]\n        # \xe5\x88\xa4\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84cash\xe5\x80\xbc\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe5\xa4\x9f\xe9\x92\xb1\xe4\xb9\xb0\xe5\x85\xa5\n        if cash >= order_cost and a_order.buy_cnt > 0:\n            # \xe5\xa4\x9f\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x85\x88\xe5\xb0\x86cash \xef\xbc\x8d cost\n            cash -= order_cost\n            # \xe6\xa0\xb9\xe6\x8d\xaea_order.expect_direction\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe8\xa6\x81\xe6\x9b\xb4\xe6\x96\xb0call\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe8\xbf\x98\xe6\x98\xafput\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n            buy_type_keep = \'_call_keep\' if a_order.expect_direction == 1.0 else \'_put_keep\'\n            # \xe5\x89\x8d\xe6\x8f\x901: \xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x89\xe8\xbf\x99\xe4\xb8\xaaa_order.buy_symbol + buy_type_keep\xe5\x88\x97\n            has_cond1 = self.capital_pd.columns.tolist().count(a_order.buy_symbol + buy_type_keep) > 0\n            # \xe5\x89\x8d\xe6\x8f\x902: \xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x97\xe4\xbb\x8e\xe5\x8d\x95\xe5\xad\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9findex\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe5\x9c\xa8dropna\xe5\x90\x8e\xe8\xbf\x98\xe6\x9c\x89shape\xe8\xaf\xb4\xe6\x98\x8e\xe6\x9c\xac\xe5\xb0\xb1\xe6\x9c\x89\xe6\x8c\x81\xe4\xbb\x93\n            has_cond2 = self.capital_pd[a_order.buy_symbol +\n                                        buy_type_keep].iloc[:num_index + 1].dropna().shape[0] > 0\n\n            keep_cnt = 0\n            if has_cond1 and has_cond2:\n                # \xe5\x89\x8d\xe6\x8f\x901 + \xe5\x89\x8d\xe6\x8f\x902->\xe6\x9c\xac\xe5\xb0\xb1\xe6\x9c\x89\xe6\x8c\x81\xe4\xbb\x93, \xe6\x8b\xbf\xe5\x88\xb0\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n                keep_cnt = self.capital_pd[a_order.buy_symbol\n                                           + buy_type_keep].iloc[:num_index + 1].dropna()[-1]\n\n            keep_cnt += a_order.buy_cnt\n\n            # TODO \xe8\xbf\x99\xe9\x87\x8c\xe8\xbf\x81\xe7\xa7\xbb\xe4\xb9\x8b\xe5\x89\x8d\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe5\x88\xa0\xe9\x99\xa4\xe4\xba\x86\xe4\xb8\x80\xe4\xba\x9b\xe6\x9c\xaa\xe8\xbf\x81\xe7\xa7\xbb\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9c\x8b\xe8\xb5\xb7\xe6\x9d\xa5\xe5\xa4\x9a\xe5\x86\x99\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe6\xb5\x81\xe7\xa8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe9\x87\x8d\xe6\x9e\x84\xe9\x80\xbb\xe8\xbe\x91\n            # \xe5\xb0\x86\xe8\xae\xa1\xe7\xae\x97\xe5\xa5\xbd\xe7\x9a\x84cash\xe6\x9b\xb4\xe6\x96\xb0\xe5\x88\xb0\xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n            self.capital_pd.loc[time_ind, [\'cash_blance\']] = np.round(cash, 3)\n            # \xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84cash_blance\xe4\xb9\x9f\xe5\xaf\xb9\xe5\xba\x94\xe5\xbc\x80\xe5\xa7\x8b\xe5\x87\x8f\xe5\x8e\xbborder_cost\n            self.capital_pd.loc[cash_blance[cash_blance.index > time_ind].index, [\'cash_blance\']] \\\n                -= order_cost\n            # \xe5\x9c\xa8\xe6\x9b\xb4\xe6\x96\xb0\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe5\x89\x8d\xef\xbc\x8c\xe5\x8f\x96\xe5\x87\xba\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc\n            org_cnt = self.capital_pd.loc[time_ind][a_order.buy_symbol + buy_type_keep]\n            # \xe6\x9b\xb4\xe6\x96\xb0\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n            self.capital_pd.loc[time_ind, [a_order.buy_symbol + buy_type_keep]] = keep_cnt\n            if not np.isnan(org_cnt):\n                # \xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaasymbol\xe4\xb8\x8a\xef\xbc\x8c\xe4\xb8\x94\xe9\x87\x8d\xe5\x8f\xa0\xe4\xba\x86\xe6\x8c\x81\xe8\x82\xa1\xe6\x97\xb6\xe9\x97\xb4\xe6\x8f\x90\xe5\x89\x8d\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n                keep_pos = self.capital_pd[a_order.buy_symbol + buy_type_keep].dropna()\n                self.capital_pd.loc[keep_pos[keep_pos.index > time_ind].index, [a_order.buy_symbol + buy_type_keep]] \\\n                    += a_order.buy_cnt\n            return True\n        else:\n            return False\n\n    def sell_stock(self, a_order):\n        """"""\n        \xe5\x9c\xa8apply_action\xe4\xb8\xad\xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8d\x96\xe5\x8d\x95\xe8\xae\xa1\xe7\xae\x97cost\xef\xbc\x8c\xe5\x9c\xa8\xe6\x97\xb6\xe5\xba\x8f\xe8\xb5\x84\xe9\x87\x91\xe5\xaf\xb9\xe8\xb1\xa1capital_pd\xe4\xb8\x8a\xe4\xbf\xae\xe6\x94\xb9\xe5\xaf\xb9\xe5\xba\x94cash_blance\xef\xbc\x8c\n        \xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9b\xb4\xe6\x96\xb0\xe5\xaf\xb9\xe5\xba\x94symbol\xe4\xb8\x8a\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n        :param a_order: \xe5\x9c\xa8apply_action\xe4\xb8\xad\xe7\x94\xb1action\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9a\x84AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe6\x88\x90\xe4\xba\xa4deal bool\n        """"""\n\n        # \xe5\x8d\x96\xe5\x8d\x95\xe6\x97\xb6\xe9\x97\xb4\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90pd\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1\n        time_ind = pd.to_datetime(ABuDateUtil.fmt_date(a_order.sell_date))\n        # # pd\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbd\xae\xe6\x8d\xa2\xe5\x87\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84index number\n        num_index = self.capital_pd.index.tolist().index(time_ind)\n        # \xe6\xa0\xb9\xe6\x8d\xaea_order.expect_direction\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe8\xa6\x81\xe6\x9b\xb4\xe6\x96\xb0call\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\xe8\xbf\x98\xe6\x98\xafput\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n        buy_type_keep = \'_call_keep\' if a_order.expect_direction == 1.0 else \'_put_keep\'\n        # \xe5\x89\x8d\xe6\x8f\x901: \xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x89\xe8\xbf\x99\xe4\xb8\xaaa_order.buy_symbol + buy_type_keep\xe5\x88\x97\n        has_cond1 = self.capital_pd.columns.tolist().count(a_order.buy_symbol + buy_type_keep) > 0\n        # \xe5\x89\x8d\xe6\x8f\x902: \xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x97\xe4\xbb\x8e\xe5\x8d\x95\xe5\xad\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9findex\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe5\x9c\xa8dropna\xe5\x90\x8e\xe8\xbf\x98\xe6\x9c\x89shape\xe8\xaf\xb4\xe6\x98\x8e\xe6\x9c\xac\xe5\xb0\xb1\xe6\x9c\x89\xe6\x8c\x81\xe4\xbb\x93\n        has_cond2 = self.capital_pd[a_order.buy_symbol + buy_type_keep].iloc[:num_index + 1].dropna().shape[0] > 0\n\n        if has_cond1 and has_cond2:\n            # \xe6\x9c\x89\xe6\x8c\x81\xe4\xbb\x93, \xe6\x8b\xbf\xe5\x88\xb0\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n            keep_cnt = self.capital_pd[a_order.buy_symbol + buy_type_keep].iloc[:num_index + 1].dropna()[-1]\n            sell_cnt = a_order.buy_cnt\n\n            if keep_cnt < sell_cnt:\n                # \xe5\xbf\xbd\xe7\x95\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe5\xb0\xb1\xe7\xae\x97\xe6\x98\xaf\xe5\xbd\x93\xe6\x97\xb6\xe4\xb9\xb0\xe6\x97\xb6\xe7\x9a\x84\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8d\x95\xe5\xad\x90\xe6\xb2\xa1\xe6\x9c\x89\xe6\x88\x90\xe4\xba\xa4\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xb9\x9f\xe8\xaf\x95\xe5\x9b\xbe\xe5\x8d\x96\xe5\x87\xba\xe5\xbd\x93\xe6\x97\xb6\xe8\xae\xbe\xe6\x83\xb3\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe8\x82\xa1\xe6\x95\xb0\n                sell_cnt = keep_cnt\n            if sell_cnt == 0:\n                # \xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe7\x94\xb1\xe4\xba\x8e\xe6\xb2\xa1\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xef\xbc\x8c\xe9\x80\xa0\xe6\x88\x90\xe6\xb2\xa1\xe6\x9c\x89\xe6\x88\x90\xe4\xba\xa4\n                return False\n            # \xe6\x9b\xb4\xe6\x96\xb0\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n            keep_cnt -= sell_cnt\n            # \xe5\xb0\x86\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90call\xef\xbc\x8cput\xe9\x83\xbd\xe5\x8f\xaf\xe8\xae\xa1\xe7\xae\x97\xe6\x94\xb6\xe7\x9b\x8a\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x85\xac\xe5\xbc\x8f\xe5\x90\x88\xe5\xb9\xb6\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe5\x86\x97\xe4\xbd\x99\xef\xbc\x8c\xe4\xbe\xbf\xe4\xba\x8e\xe7\x90\x86\xe8\xa7\xa3\n            sell_earn_price = (a_order.sell_price - a_order.buy_price) * a_order.expect_direction + a_order.buy_price\n            order_earn = sell_earn_price * sell_cnt\n\n            # \xe4\xbd\xbf\xe7\x94\xa8commission\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n            with self.commission.sell_commission_func(a_order) as (sell_func, commission_list):\n                commission = sell_func(sell_cnt, a_order.sell_price)\n                # \xe5\xb0\x86\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84commission_list\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9ccommission\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe6\xa0\xb9\xe6\x8d\xaelist\xe9\x95\xbf\xe5\xba\xa6\xe5\x86\xb3\xe5\xae\x9a\xe5\x86\x99\xe5\x85\xa5\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xb0\xe5\xbd\x95pd.DataFrame\n                commission_list.append(commission)\n\n            # cash_blance\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96init\xe4\xb8\xad\xe9\x99\xa4\xe4\xba\x86\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb6\xe5\xae\x83\xe9\x83\xbd\xe6\x98\xafnan\n            cash_blance = self.capital_pd[\'cash_blance\'].dropna()\n            # \xe6\x88\xaa\xe5\x8f\x96 < time_indd\xe7\x9a\x84cash_blance\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe5\x81\x9a\xe4\xb8\xbacash\xe5\x80\xbc\n            cash = cash_blance[cash_blance.index <= time_ind].iloc[-1]\n            cash += (order_earn - commission)\n            # \xe5\xb0\x86\xe8\xae\xa1\xe7\xae\x97\xe5\xa5\xbd\xe7\x9a\x84cash\xe6\x9b\xb4\xe6\x96\xb0\xe5\x88\xb0\xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n            self.capital_pd.loc[time_ind, [\'cash_blance\']] = np.round(cash, 3)\n\n            # TODO \xe8\xbf\x99\xe9\x87\x8c\xe8\xbf\x81\xe7\xa7\xbb\xe4\xb9\x8b\xe5\x89\x8d\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe5\x88\xa0\xe9\x99\xa4\xe4\xba\x86\xe4\xb8\x80\xe4\xba\x9b\xe6\x9c\xaa\xe8\xbf\x81\xe7\xa7\xbb\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9c\x8b\xe8\xb5\xb7\xe6\x9d\xa5\xe5\xa4\x9a\xe5\x86\x99\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe6\xb5\x81\xe7\xa8\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe9\x87\x8d\xe6\x9e\x84\xe9\x80\xbb\xe8\xbe\x91\n            self.capital_pd.loc[cash_blance[cash_blance.index > time_ind].index, [\'cash_blance\']] \\\n                += (order_earn - commission)\n\n            org_cnt = self.capital_pd.loc[time_ind][a_order.buy_symbol + buy_type_keep]\n            # \xe6\x9b\xb4\xe6\x96\xb0\xe6\x8c\x81\xe4\xbb\x93\xe9\x87\x8f\n            self.capital_pd.loc[time_ind, [a_order.buy_symbol + buy_type_keep]] = keep_cnt\n\n            if not np.isnan(org_cnt):\n                # \xe9\x92\x88\xe5\xaf\xb9diff factor same stock\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n                keep_pos = self.capital_pd[a_order.buy_symbol + buy_type_keep].dropna()\n                self.capital_pd.loc[keep_pos[keep_pos.index > time_ind].index, [a_order.buy_symbol + buy_type_keep]] \\\n                    -= sell_cnt\n            return True\n        else:\n            return False\n'"
abupy/TradeBu/ABuCommission.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..MarketBu.ABuSymbolFutures import AbuFuturesCn\nfrom ..CoreBu.ABuFixes import partial\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketTargetType\nfrom .ABuOrder import OrderMarket\nfrom ..MarketBu import ABuMarket\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnusedLocal\ndef calc_commission_us(trade_cnt, price):\n    """"""\n    \xe7\xbe\x8e\xe8\x82\xa1\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xef\xbc\x9a\xe6\xaf\x8f\xe8\x82\xa10.01\xef\xbc\x8c\xe6\x9c\x80\xe4\xbd\x8e\xe6\xb6\x88\xe8\xb4\xb92.99\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe8\x82\xa1\xe6\x95\xb0\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe6\xaf\x8f\xe8\x82\xa1\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe7\xbe\x8e\xe5\x85\x83\xef\xbc\x89\xef\xbc\x88\xe6\x9a\x82\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xbf\x9d\xe6\x8c\x81\xe6\x8e\xa5\xe5\x8f\xa3\xe7\xbb\x9f\xe4\xb8\x80\xef\xbc\x89\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    # \xe6\xaf\x8f\xe8\x82\xa1\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb90.01\n    commission = trade_cnt * 0.01\n    if commission < 2.99:\n        # \xe6\x9c\x80\xe4\xbd\x8e\xe6\xb6\x88\xe8\xb4\xb92.99\n        commission = 2.99\n    return commission\n\n\ndef calc_commission_cn(trade_cnt, price):\n    """"""\n    a\xe8\x82\xa1\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xef\xbc\x9a\xe5\x8d\xb0\xe8\x8a\xb1\xe7\xa8\x8e\xef\xbc\x8b\xe4\xbd\xa3\xe9\x87\x91\xef\xbc\x9a \xe5\x8d\xb0\xe8\x8a\xb1\xe7\xa8\x8e\xe4\xb8\x873\xef\xbc\x8c\xe4\xbd\xa3\xe9\x87\x91\xe4\xb8\x872.5\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe8\x82\xa1\xe6\x95\xb0\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe6\xaf\x8f\xe8\x82\xa1\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\xef\xbc\x89\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    cost = trade_cnt * price\n    # \xe5\x8d\xb0\xe8\x8a\xb1\xe7\xa8\x8e\xe4\xb8\x873\xef\xbc\x8c\n    tax = cost * 0.0003\n    # \xe4\xbd\xa3\xe9\x87\x91\xe4\xb8\x872.5\n    commission = cost * 0.00025\n    # \xe4\xbd\xa3\xe9\x87\x91\xe6\x9c\x80\xe4\xbd\x8e5\n    commission = commission if commission > 5 else 5\n    commission += tax\n    return commission\n\n\ndef calc_commission_hk(trade_cnt, price):\n    """"""\n    h\xe8\x82\xa1\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xef\xbc\x9a\xe5\x8d\xb0\xe8\x8a\xb1\xe7\xa8\x8e\xef\xbc\x8b\xe4\xbd\xa3\xe9\x87\x91\xef\xbc\x9a \xe4\xbd\xa3\xe9\x87\x91\xe5\x8d\x83\xe5\x88\x86\xe4\xb9\x8b\xe4\xba\x8c\xef\xbc\x8c\xe5\x8d\xb0\xe8\x8a\xb1\xe7\xa8\x8e\xe5\x8d\x83\xe5\x88\x86\xe4\xb9\x8b\xe4\xb8\x80\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe8\x82\xa1\xe6\x95\xb0\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe6\xaf\x8f\xe8\x82\xa1\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\xef\xbc\x89\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    cost = trade_cnt * price\n    # \xe5\x8d\xb0\xe8\x8a\xb1\xe7\xa8\x8e\xe5\x8d\x83\xe5\x88\x86\xe4\xb9\x8b\xe4\xb8\x80\n    tax = cost * 0.001\n    # \xe4\xbd\xa3\xe9\x87\x91\xe5\x8d\x83\xe5\x88\x86\xe4\xb9\x8b\xe4\xba\x8c\xef\xbc\x8c\n    commission = cost * 0.002\n    commission += tax\n    return commission\n\n\ndef calc_commission_tc(trade_cnt, price):\n    """"""\n    \xe5\xb8\x81\xe7\xb1\xbb\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xef\xbc\x9a\xe5\x8f\xaa\xe7\xae\x80\xe5\x8d\x95\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xef\xbc\x8c\xe5\x8f\x8c\xe5\x90\x91\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\x81\xe9\x80\x9a\xe5\xb8\x81\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xef\xbc\x8c\xe4\xb8\x8d\xe6\xb6\x89\xe5\x8f\x8a\xe5\x8d\x96\xe5\x87\xba\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb8\x81\xe7\xb1\xbb\xe7\x9a\x84\xe6\x89\x8b\xe7\xbb\xad\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\n    \xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe6\x9b\xb4\xe7\xb2\xbe\xe7\xa1\xae\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe8\xaf\xb7\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xae\xa1\xe7\xae\x97\xe8\xb4\xb9\xe7\x8e\x87\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9c\xa8AbuCommission\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\xad\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\xb8\x81\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe6\xaf\x8f\xe5\xb8\x81\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe4\xba\xba\xe6\xb0\x91\xe5\xb8\x81\xef\xbc\x89\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    cost = trade_cnt * price\n    # \xe5\x8f\x8c\xe5\x90\x91\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\x81\xe9\x80\x9a\xe5\xb8\x81\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xef\xbc\x8c\xe5\x8d\x83\xe5\x88\x86\xe4\xb9\x8b2\n    commission = cost * 0.002\n    return commission\n\n\n# noinspection PyUnusedLocal\ndef calc_commission_futures_cn(trade_cnt, price, symbol_name):\n    """"""\n    \xe6\x9c\x9f\xe8\xb4\xa7\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xef\xbc\x9a\xe9\xa6\x96\xe5\x85\x88\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe5\xba\x94\xe5\x95\x86\xe5\x93\x81\xe5\x8d\x95\xe4\xbd\x8d\xe4\xba\xa4\xe6\x98\x93\xe9\x87\x8f\xef\xbc\x88\xe6\xaf\x8f\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x89\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xaf\x8f\xe6\x89\x8b\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xef\xbc\x8c\xe5\x86\x8d\xe8\xae\xa1\xe7\xae\x97\xe5\xaf\xb9\xe5\xba\x94\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\x8d\x95\xe4\xbd\x8d\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe6\x9a\x82\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xbf\x9d\xe6\x8c\x81\xe6\x8e\xa5\xe5\x8f\xa3\xe7\xbb\x9f\xe4\xb8\x80\xef\xbc\x89\n    :param symbol_name: \xe5\x95\x86\xe5\x93\x81\xe6\x9f\xa5\xe8\xaf\xa2symbol\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    min_unit = 10\n    commission_unit = 10\n    # \xe6\x9f\xa5\xe8\xaf\xa2\xe5\x95\x86\xe5\x93\x81\xe6\x9c\x9f\xe8\xb4\xa7\xe7\x9a\x84\xe5\xaf\xb9\xe5\xba\x94df\n    q_df = AbuFuturesCn().query_symbol(symbol_name)\n    if q_df is not None:\n        # \xe6\xaf\x8f\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\xe6\x95\xb0\xe9\x87\x8f\n        min_unit = q_df.min_unit.values[0]\n        # \xe6\xaf\x8f\xe6\x89\x8b\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n        commission_unit = q_df.commission.values[0]\n    commission = trade_cnt / min_unit * commission_unit\n    return commission\n\n\ndef calc_options_us(trade_cnt, price):\n    """"""\n    \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xef\xbc\x9a\xe5\xb7\xae\xe5\x88\xab\xe5\xbe\x88\xe5\xa4\xa7\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe5\xa4\x96\xe9\x83\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe7\xae\x80\xe5\x8d\x95\xe6\x8c\x89\xe7\x85\xa70.0035\xe8\xae\xa1\xe7\xae\x97\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe8\x82\xa1\xe6\x95\xb0\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe6\xaf\x8f\xe8\x82\xa1\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe7\xbe\x8e\xe5\x85\x83\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    cost = trade_cnt * price\n    # \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xe5\x90\x84\xe4\xb8\xaa\xe5\x88\xb8\xe5\x95\x86\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xb8\xaa\xe4\xba\xba\xe6\x96\xb9\xe5\xbc\x8f\xe5\xb7\xae\xe5\x88\xab\xe5\xbe\x88\xe5\xa4\xa7\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe5\xa4\x96\xe9\x83\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe7\xae\x80\xe5\x8d\x95\xe6\x8c\x89\xe7\x85\xa70.0035\xe8\xae\xa1\xe7\xae\x97\n    commission = cost * 0.0035\n    return commission\n\n\ndef calc_commission_futures_global(trade_cnt, price):\n    """"""\n    \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xef\xbc\x9a\xe5\xb7\xae\xe5\x88\xab\xe5\xbe\x88\xe5\xa4\xa7\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe5\xa4\x96\xe9\x83\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe7\xae\x80\xe5\x8d\x95\xe6\x8c\x89\xe7\x85\xa70.002\xe8\xae\xa1\xe7\xae\x97\n    :param trade_cnt: \xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe8\x82\xa1\xe6\x95\xb0\xef\xbc\x88int\xef\xbc\x89\n    :param price: \xe6\xaf\x8f\xe8\x82\xa1\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x88\xe7\xbe\x8e\xe5\x85\x83\xef\xbc\x89\n    :return: \xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    """"""\n    cost = trade_cnt * price\n    # \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\xe5\x90\x84\xe4\xb8\xaa\xe5\x88\xb8\xe5\x95\x86\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xbb\xa3\xe7\x90\x86\xe6\x96\xb9\xe5\xbc\x8f\xe5\xb7\xae\xe5\x88\xab\xe5\xbe\x88\xe5\xa4\xa7\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe5\xa4\x96\xe9\x83\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe7\xae\x80\xe5\x8d\x95\xe6\x8c\x89\xe7\x85\xa70.002\xe8\xae\xa1\xe7\xae\x97\n    commission = cost * 0.002\n    return commission\n\n\nclass AbuCommission(object):\n    """"""\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8c\xe5\x88\x86\xe6\x9e\x90\xe7\xb1\xbb\xef\xbc\x8c\xe5\x9c\xa8AbuCapital\xe4\xb8\xad\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96""""""\n\n    def __init__(self, commission_dict):\n        """"""\n        :param commission_dict: \xe4\xbb\xa3\xe8\xa1\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xa1\xe7\xae\x97dict\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n                                key\xef\xbc\x9abuy_commission_func\xef\xbc\x8c \xe4\xbb\xa3\xe8\xa1\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xb9\xb0\xe5\x85\xa5\xe8\xae\xa1\xe7\xae\x97\xe8\xb4\xb9\xe7\x94\xa8\xe6\x96\xb9\xe6\xb3\x95\n                                key\xef\xbc\x9asell_commission_func\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\x8d\x96\xe5\x87\xba\xe8\xae\xa1\xe7\xae\x97\xe8\xb4\xb9\xe7\x94\xa8\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        self.commission_dict = commission_dict\n        # \xe5\xaf\xb9\xe8\xb1\xa1\xe5\x86\x85\xe9\x83\xa8\xe8\xae\xb0\xe5\xbd\x95\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x88\x97\xe8\xae\xbe\xe5\xae\x9a\n        self.df_columns = [\'type\', \'date\', \'symbol\', \'commission\']\n        # \xe6\x9e\x84\xe5\xbb\xba\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xb0\xe5\xbd\x95pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1commission_df\n        self.commission_df = pd.DataFrame(columns=self.df_columns)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9a\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8c\xe6\x89\x93\xe5\x8d\xb0\xe8\xae\xb0\xe5\xbd\x95df\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\x89\x93\xe5\x8d\xb0commission_df.info""""""\n        if self.commission_df.shape[0] == 0:\n            return str(self.commission_df.info())\n        return str(self.commission_df)\n\n    __repr__ = __str__\n\n    # noinspection PyMethodMayBeStatic\n    def _commission_enter(self, a_order):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87a_order\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xb8\x82\xe5\x9c\xba\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe5\x88\x86\xe9\x85\x8d\xe5\xaf\xb9\xe5\xba\x94\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xae\xa1\xe7\xae\x97\xe6\x96\xb9\xe6\xb3\x95\n        :param a_order: \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xaf\xb9\xe8\xb1\xa1AbuOrder\xe5\xae\x9e\xe4\xbe\x8b\n        :return:\n        """"""\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8env\xe4\xb8\xad\xe7\xbb\x9f\xe4\xb8\x80\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe9\x80\x9a\xe8\xbf\x87OrderMarket\xe5\xaf\xb9\xe5\x8d\x95\xe5\xad\x90\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe8\xaf\xa6ABuMarket\n        market = ABuEnv.g_market_target if ABuMarket.g_use_env_market_set \\\n            else OrderMarket(a_order).symbol_market\n        # \xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe6\x96\xb9\xe6\xb3\x95\n        if market == EMarketTargetType.E_MARKET_TARGET_US:\n            # \xe7\xbe\x8e\xe8\x82\xa1\n            calc_commission_func = calc_commission_us\n        elif market == EMarketTargetType.E_MARKET_TARGET_CN:\n            # a\xe8\x82\xa1\n            calc_commission_func = calc_commission_cn\n        elif market == EMarketTargetType.E_MARKET_TARGET_HK:\n            # h\xe8\x82\xa1\n            calc_commission_func = calc_commission_hk\n        elif market == EMarketTargetType.E_MARKET_TARGET_TC:\n            # \xe5\xb8\x81\xe7\xb1\xbb\n            calc_commission_func = calc_commission_tc\n        elif market == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN:\n            # \xe6\x9c\x9f\xe8\xb4\xa7\n            calc_commission_func = partial(calc_commission_futures_cn, symbol_name=a_order.buy_symbol)\n        elif market == EMarketTargetType.E_MARKET_TARGET_OPTIONS_US:\n            # \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\n            calc_commission_func = calc_options_us\n        elif market == EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL:\n            # \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\n            calc_commission_func = calc_commission_futures_global\n        else:\n            raise TypeError(\'buy_stock market error!!!\')\n        return calc_commission_func\n\n    @contextmanager\n    def buy_commission_func(self, a_order):\n        """"""\n        \xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8with as \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84list\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xa0\xe5\x85\xa5\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xe8\xae\xb0\xe5\xbd\x95\n        :param a_order: \xe4\xb9\xb0\xe5\x8d\x95\xe5\xaf\xb9\xe8\xb1\xa1AbuOrder\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        if self.commission_dict is not None and \'buy_commission_func\' in self.commission_dict:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\n            buy_func = self.commission_dict[\'buy_commission_func\']\n        else:\n            buy_func = self._commission_enter(a_order)\n\n        # \xe4\xbd\xbf\xe7\x94\xa8list\xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\x8f\xaf\xe5\x8f\x98\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86\xe5\xa4\x96\xe9\x9d\xa2\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb8\xa6\xe5\x9b\x9e\xe6\x9d\xa5\n        commission_list = list()\n        yield buy_func, commission_list\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\xa4\x96\xe9\x83\xa8\xe6\x9c\x89append\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xb0\xe5\xbd\x95\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xef\xbc\x8c\xe4\xb8\x94\xe6\x89\xa7\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\xe6\x88\x90\xe5\x8a\x9f\n        if len(commission_list) == 1:\n            commission = commission_list[0]\n            # \xe5\xb0\x86\xe4\xb9\xb0\xe5\x8d\x95\xe5\xaf\xb9\xe8\xb1\xa1AbuOrder\xe5\xae\x9e\xe4\xbe\x8b\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xb0\xe5\xbd\x95\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84np.array\xe5\xaf\xb9\xe8\xb1\xa1\n            record = np.array([\'buy\', a_order.buy_date, a_order.buy_symbol, commission]).reshape(1, 4)\n            record_df = pd.DataFrame(record, columns=self.df_columns)\n            self.commission_df = self.commission_df.append(record_df)\n        else:\n            logging.info(\'buy_commission_func calc error\')\n\n    @contextmanager\n    def sell_commission_func(self, a_order):\n        """"""\n        \xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8with as \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84list\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xa0\xe5\x85\xa5\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\xe8\xae\xb0\xe5\xbd\x95\n        :param a_order: \xe5\x8d\x96\xe5\x8d\x95\xe5\xaf\xb9\xe8\xb1\xa1AbuOrder\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        if self.commission_dict is not None and \'sell_commission_func\' in self.commission_dict:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\n            sell_func = self.commission_dict[\'sell_commission_func\']\n        else:\n            sell_func = self._commission_enter(a_order)\n        # \xe4\xbd\xbf\xe7\x94\xa8list\xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\x8f\xaf\xe5\x8f\x98\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86\xe5\xa4\x96\xe9\x9d\xa2\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb8\xa6\xe5\x9b\x9e\xe6\x9d\xa5\n        commission_list = list()\n\n        yield sell_func, commission_list\n\n        if len(commission_list) == 1:\n            commission = commission_list[0]\n            # \xe5\xb0\x86\xe5\x8d\x96\xe5\x8d\x95\xe5\xaf\xb9\xe8\xb1\xa1AbuOrder\xe5\xae\x9e\xe4\xbe\x8b\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xb0\xe5\xbd\x95\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84np.array\xe5\xaf\xb9\xe8\xb1\xa1\n            record = np.array([\'sell\', a_order.sell_date, a_order.buy_symbol, commission]).reshape(1, 4)\n            record_df = pd.DataFrame(record, columns=self.df_columns)\n            self.commission_df = self.commission_df.append(record_df)\n        else:\n            logging.info(\'sell_commission_func calc error!!!\')\n'"
abupy/TradeBu/ABuKLManager.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\n\nfrom ..TradeBu import AbuBenchmark\nfrom ..UtilBu import ABuDateUtil\nfrom ..CoreBu.ABuEnv import EMarketDataSplitMode, EMarketDataFetchMode\nfrom ..MarketBu import ABuSymbolPd\nfrom ..MarketBu.ABuMarket import split_k_market\nfrom ..CoreBu.ABuEnvProcess import add_process_env_sig, AbuEnvProcess\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EDataCacheType\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress\nfrom ..UtilBu.ABuFileUtil import batch_h5s\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnusedLocal\n@add_process_env_sig\ndef gen_dict_pick_time_kl_pd(target_symbols, capital, benchmark, show_progress=True):\n    """"""\n    \xe5\x9c\xa8AbuKLManager\xe4\xb8\xadbatch_get_pick_time_kl_pd\xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe5\x81\x9a\xe4\xb8\xba\xe5\xb9\xb6\xe8\xa1\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xa7\x94\xe6\x89\x98\xe6\x96\xb9\xe6\xb3\x95\n    :param target_symbols: \xe8\xaf\xb7\xe6\xb1\x82\xe7\x9a\x84symbol\n    :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1 \xef\xbc\x88\xe5\xae\x9e\xe7\x8e\xb0\xe4\xb8\xad\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb6\xe4\xb8\xad\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x89\n    :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :param show_progress: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbaui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    """"""\n\n    # \xe6\x9e\x84\xe5\xbb\xba\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\n    pick_kl_pd_dict = dict()\n\n    # \xe4\xb8\xbabatch_h5s\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\x86\xe5\xa4\x87\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\xa6\xe8\xa7\x81batch_h5\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\xae\x9e\xe7\x8e\xb0\n    h5s_fn = None\n    if ABuEnv.g_data_cache_type == EDataCacheType.E_DATA_CACHE_HDF5 and ABuEnv.g_data_fetch_mode == \\\n            EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n        # \xe5\xad\x98\xe5\x82\xa8\xe4\xbd\xbf\xe7\x94\xa8hdf5\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x89\x8d\xe8\xb5\x8b\xe4\xba\x88h5s_fn\xe8\xb7\xaf\xe5\xbe\x84\n        # noinspection PyProtectedMember\n        h5s_fn = ABuEnv.g_project_kl_df_data\n\n    @batch_h5s(h5s_fn)\n    def _batch_gen_dict_pick_time_kl_pd():\n        # \xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        with AbuMulPidProgress(len(target_symbols), \'gen kl_pd complete\', show_progress=show_progress) as progress:\n            for epoch, target_symbol in enumerate(target_symbols):\n                progress.show(epoch + 1)\n                # \xe8\xbf\xad\xe4\xbb\xa3target_symbols\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe6\x97\xb6\xe9\x97\xb4\xe4\xba\xa4\xe6\x98\x93\xe5\xba\x8f\xe5\x88\x97\n                kl_pd = ABuSymbolPd.make_kl_df(target_symbol, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO,\n                                               benchmark=benchmark, n_folds=benchmark.n_folds)\n                # \xe4\xbb\xa5target_symbol\xe4\xb8\xbakey\xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97kl_pd\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\n                pick_kl_pd_dict[target_symbol] = kl_pd\n    _batch_gen_dict_pick_time_kl_pd()\n    return pick_kl_pd_dict\n\n\nclass AbuKLManager(object):\n    """"""\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb""""""\n\n    def __init__(self, benchmark, capital):\n        """"""\n        :param benchmark: \xe4\xba\xa4\xe6\x98\x93\xe5\x9f\xba\xe5\x87\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuBenchmark\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        self.benchmark = benchmark\n        self.capital = capital\n        # \xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe9\x97\xb4\xe4\xba\xa4\xe6\x98\x93\xe5\xba\x8f\xe5\x88\x97\xe5\xad\x97\xe5\x85\xb8\n        pick_stock_kl_pd_dict = dict()\n        # \xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe4\xba\xa4\xe6\x98\x93\xe5\xba\x8f\xe5\x88\x97\xe5\xad\x97\xe5\x85\xb8\n        pick_time_kl_pd_dict = dict()\n        # \xe7\xb1\xbb\xe5\xad\x97\xe5\x85\xb8pick_kl_pd_dict\xe5\xb0\x86\xe9\x80\x89\xe8\x82\xa1\xe5\x92\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe5\x8c\x85\xe8\xb5\xb7\xe6\x9d\xa5\n        self.pick_kl_pd_dict = {\'pick_stock\': pick_stock_kl_pd_dict, \'pick_time\': pick_time_kl_pd_dict}\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9apick_stock + pick_time keys, \xe5\x8d\xb3\xe6\x89\x80\xe6\x9c\x89symbol\xe4\xbf\xa1\xe6\x81\xaf""""""\n        keys = set(self.pick_kl_pd_dict[\'pick_stock\'].keys()) | set(self.pick_kl_pd_dict[\'pick_time\'].keys())\n        return \'pick_stock + pick_time keys :{}\'.format(keys)\n\n    __repr__ = __str__\n\n    def __len__(self):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x9a\xe9\x80\x89\xe8\x82\xa1\xe5\xad\x97\xe5\x85\xb8\xe9\x95\xbf\xe5\xba\xa6 + \xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe9\x95\xbf\xe5\xba\xa6""""""\n        return len(self.pick_kl_pd_dict[\'pick_stock\']) + len(self.pick_kl_pd_dict[\'pick_time\'])\n\n    def __contains__(self, item):\n        """"""\xe6\x88\x90\xe5\x91\x98\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x9a\xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\x88\x96\xe8\x80\x85\xe5\x9c\xa8\xe9\x80\x89\xe8\x82\xa1\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad""""""\n        return item in self.pick_kl_pd_dict[\'pick_stock\'] or item in self.pick_kl_pd_dict[\'pick_time\']\n\n    def __missing__(self, key):\n        """"""\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbc\xba\xe5\xa4\xb1\xef\xbc\x9a\xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaekey\xe4\xbd\xbf\xe7\x94\xa8code_to_symbol\xe8\xbf\x9b\xe8\xa1\x8cfetch\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9a\x82\xe6\x9c\xaa\xe5\xae\x9e\xe7\x8e\xb0""""""\n        # TODO \xe9\x9c\x80\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaekey\xe4\xbd\xbf\xe7\x94\xa8code_to_symbol\xe8\xbf\x9b\xe8\xa1\x8cfetch\xe6\x95\xb0\xe6\x8d\xae\n        raise NotImplementedError(\'TODO AbuKLManager __missing__\')\n\n    def __getitem__(self, key):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x9a\xe5\xb0\x9d\xe8\xaf\x95\xe5\x88\x86\xe5\x88\xab\xe4\xbb\x8e\xe9\x80\x89\xe8\x82\xa1\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\xe5\x85\xb8\xe7\x9a\x84\xe6\x9f\xa5\xe8\xaf\xa2\xe7\xbb\x93\xe6\x9e\x9c""""""\n        pick_stock_item = None\n        if key in self.pick_kl_pd_dict[\'pick_stock\']:\n            pick_stock_item = self.pick_kl_pd_dict[\'pick_stock\'][key]\n        pick_time_item = None\n        if key in self.pick_kl_pd_dict[\'pick_time\']:\n            pick_time_item = self.pick_kl_pd_dict[\'pick_time\'][key]\n        return pick_stock_item, pick_time_item\n\n    def __setitem__(self, key, value):\n        """"""\xe7\xb4\xa2\xe5\xbc\x95\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\xe6\x8a\x9b\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe5\x87\x86\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae""""""\n        raise AttributeError(""AbuKLManager set value!!!"")\n\n    def _fetch_pick_stock_kl_pd(self, xd, target_symbol):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x92\x8csymbol\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe7\x9b\xb8\xe5\xaf\xb9\xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa6\x81\xe5\xa4\x8d\xe6\x9d\x82\xef\xbc\x8c\n        \xe5\x9b\xa0\xe4\xb8\xba\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xae\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x9e\x84\xe9\x80\xa0\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5benchmark\xef\xbc\x8c\xe4\xb8\x94\xe5\x9c\xa8\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe5\xad\x98\xe5\x82\xa8\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5benchmark\n        :param xd: \xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x89\n        :param target_symbol: \xe9\x80\x89\xe8\x82\xa1symbol\n        :return: \xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        """"""\n\n        # \xe4\xbb\x8e\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6benchmark\xe4\xb8\xad\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f\xe5\x8d\xb3\xe4\xb8\xba\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe6\x97\xa5\xe6\x9c\x9f\n        end = ABuDateUtil.timestamp_to_str(self.benchmark.kl_pd.index[0])\n\n        if xd == ABuEnv.g_market_trade_year:\n            # \xe4\xb8\x80\xe8\x88\xac\xe9\x83\xbd\xe6\x98\xaf\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x841\xe5\xb9\xb4\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8begin_date\xe6\x8f\x90\xe9\xab\x98\xe6\x95\x88\xe7\x8e\x87\n            n_folds = 1\n            pre_bc_key = \'pre_benchmark_{}\'.format(n_folds)\n            start = None\n        else:\n            # 1\xe5\xb9\xb4\xe9\x99\xa41\xe5\xb9\xb4\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe6\xb5\xae\xe7\x82\xb9\xe6\x95\xb0n_folds eg: 0.88\n            n_folds = float(xd / ABuEnv.g_market_trade_year)\n            # \xe4\xb8\xba\xe4\xba\x86\xe8\xae\xa1\xe7\xae\x97start\xef\xbc\x8cxd\xe7\x9a\x84\xe5\x8d\x95\xe4\xbd\x8d\xe6\x98\xaf\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe6\x8d\xa2\xe7\xae\x97\xe4\xb8\xba\xe8\x87\xaa\xe7\x84\xb6\xe6\x97\xa5\n            delay_day = 365 * n_folds\n            start = ABuDateUtil.begin_date(delay_day, date_str=end, fix=False)\n            # \xe6\xa0\xb9\xe6\x8d\xae\xe9\x80\x89\xe8\x82\xa1start\xef\xbc\x8cend\xe6\x8b\xbc\xe6\x8e\xa5\xe9\x80\x89\xe8\x82\xa1\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8fkey\xef\xbc\x8ceg\xef\xbc\x9apre_benchmark_2011-09-09_2016-07-26\n            pre_bc_key = \'pre_benchmark_{}-{}\'.format(start, end)\n        if hasattr(self, pre_bc_key):\n            # \xe4\xbb\x8e\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe7\x9b\xb4\xe6\x8e\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x89\xe8\x82\xa1benchmark\xef\xbc\x8ceg: self.pre_benchmark_2011-09-09_2016-07-26\n            pre_benchmark = getattr(self, pre_bc_key)\n        else:\n            # \xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe6\xb2\xa1\xe6\x9c\x89\xef\xbc\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe4\xb8\x80\xe4\xb8\xaaAbuBenchmark\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaen_folds\xe5\x92\x8cend\xe8\x8e\xb7\xe5\x8f\x96benchmark\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5\n            pre_benchmark = AbuBenchmark(n_folds=n_folds, start=start, end=end)\n            # \xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5benchmark\n            setattr(self, pre_bc_key, pre_benchmark)\n        # \xe4\xbb\xa5\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5benchmark\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5\xe5\xaf\xb9\xe5\xba\x94symbol\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        return ABuSymbolPd.make_kl_df(target_symbol, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO,\n                                      benchmark=pre_benchmark, n_folds=pre_benchmark.n_folds, start=start, end=end)\n\n    def _fetch_pick_time_kl_pd(self, target_symbol):\n        """"""\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97""""""\n        return ABuSymbolPd.make_kl_df(target_symbol, data_mode=EMarketDataSplitMode.E_DATA_SPLIT_UNDO,\n                                      benchmark=self.benchmark, n_folds=self.benchmark.n_folds)\n\n    def get_pick_time_kl_pd(self, target_symbol):\n        """"""\xe5\xaf\xb9\xe5\xa4\x96\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xef\xbc\x8c\xe6\xb2\xa1\xe6\x89\xbe\xe5\x88\xb0\xe4\xbd\xbf\xe7\x94\xa8_fetch_pick_time_kl_pd\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe4\xb8\x94\xe4\xbf\x9d\xe5\xad\x98\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8""""""\n        if target_symbol in self.pick_kl_pd_dict[\'pick_time\']:\n            kl_pd = self.pick_kl_pd_dict[\'pick_time\'][target_symbol]\n            if kl_pd is not None:\n                # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xbc\x9a\xe4\xb8\xa2\xe5\xa4\xb1name\xe4\xbf\xa1\xe6\x81\xaf\n                kl_pd.name = target_symbol\n            return kl_pd\n        # \xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\xaf\x8f\xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8cfetch\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\n        kl_pd = self._fetch_pick_time_kl_pd(target_symbol)\n        self.pick_kl_pd_dict[\'pick_time\'][target_symbol] = kl_pd\n        return kl_pd\n\n    def filter_pick_time_choice_symbols(self, choice_symbols):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8filter\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xbachoice_symbols\xe4\xb8\xad\xe7\x9a\x84symbol\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        :param choice_symbols: \xe6\x94\xaf\xe6\x8c\x81\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        :return: \xe4\xb8\x8d\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return list(filter(lambda target_symbol: target_symbol not in self.pick_kl_pd_dict[\'pick_time\'],\n                           choice_symbols))\n\n    def batch_get_pick_time_kl_pd(self, choice_symbols, n_process=ABuEnv.g_cpu_cnt, show_progress=True):\n        """"""\n        \xe7\xbb\x9f\xe4\xb8\x80\xe6\x89\xb9\xe9\x87\x8f\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xef\xbc\x8c\xe4\xbb\xa5\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe6\x96\xb9\xe5\xbc\x8f\xe8\xbf\x90\xe8\xa1\x8c\n        :param choice_symbols: \xe6\x94\xaf\xe6\x8c\x81\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        :param n_process: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe5\x8f\x96\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x90\xaf\xe5\x8a\xa8\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa416\xe4\xb8\xaa\xef\xbc\x8c\xe5\xb1\x9e\xe4\xba\x8eio\xe6\x93\x8d\xe4\xbd\x9c\xe5\xa4\x9a\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\xb2\xa1\xe6\x9c\x89\xe8\x80\x83\xe8\x99\x91cpu\xe6\x95\xb0\xe9\x87\x8f\n        :param show_progress: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbaui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        """"""\n        if len(choice_symbols) == 0:\n            return\n\n        if n_process <= 0:\n            # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xa6\x81n_process > 1\xe5\x81\x9a\xe5\x88\xa4\xe6\x96\xad\xe8\x80\x8c\xe4\xb8\x94\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xaen_process\xe6\x9d\xa5split_k_market\n            n_process = ABuEnv.g_cpu_cnt\n\n        # TODO \xe9\x9c\x80\xe8\xa6\x81\xe5\x8c\xba\xe5\x88\x86hdf5\xe5\x92\x8ccsv\xe4\xb8\x8d\xe5\x90\x8c\xe5\xad\x98\xe8\xb4\xae\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8ccsv\xe5\xad\x98\xe8\xb4\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xb9\xb6\xe8\xa1\x8c\xe8\xaf\xbb\xe5\x86\x99\n        # \xe5\x8f\xaa\xe6\x9c\x89E_DATA_FETCH_FORCE_LOCAL\xe6\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x9b\x9e\xe6\xbb\x9a\xe5\x88\xb0\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe6\xa8\xa1\xe5\xbc\x8fn_process = 1\n        if n_process > 1 and ABuEnv.g_data_fetch_mode != EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL:\n            # 1. hdf5\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x98\xe5\xae\xb9\xe6\x98\x93\xe5\x86\x99\xe5\x9d\x8f\xe6\x95\xb0\xe6\x8d\xae\n            # 2. MAC OS 10.9 \xe4\xb9\x8b\xe5\x90\x8e\xe5\xb9\xb6\xe8\xa1\x8c\xe8\x81\x94\xe7\xbd\x91\xef\xbc\x8bnumpy \xe7\xb3\xbb\xe7\xbb\x9fbug crash\xef\xbc\x8c\xe5\x8d\xa1\xe6\xad\xbb\xe7\xad\x89\xe9\x97\xae\xe9\xa2\x98\n            logging.info(\'batch get only support E_DATA_FETCH_FORCE_LOCAL for Parallel!\')\n            n_process = 1\n\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84choice_symbols\xe5\x92\x8c\xe8\xa6\x81\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x86\xe9\x85\x8dsymbol\xe5\x88\xb0n_process\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\n        process_symbols = split_k_market(n_process, market_symbols=choice_symbols)\n\n        # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x88\x87\xe5\x89\xb2\xe4\xbc\x9a\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xb0\x86\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe6\x8d\xa2\xe4\xb8\xba\xe5\x88\x86\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0, \xe5\x8d\xb332 -> 33 16 -> 17\n        if n_process > 1:\n            n_process = len(process_symbols)\n\n        parallel = Parallel(\n            n_jobs=n_process, verbose=0, pre_dispatch=\'2*n_jobs\')\n\n        # gen_dict_pick_time_kl_pd\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8add_process_env_sig\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe5\x86\x85\xe5\xad\x98\xe6\x8b\xb7\xe8\xb4\x9d\xe5\xaf\xb9\xe8\xb1\xa1AbuEnvProcess\xef\xbc\x8c\xe8\xaf\xa6ABuEnvProcess.py\n        p_nev = AbuEnvProcess()\n        # \xe5\xbc\x80\xe5\xa7\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x89\xa7\xe8\xa1\x8c\n        out_pick_kl_pd_dict = parallel(delayed(gen_dict_pick_time_kl_pd)(target_symbols, self.capital, self.benchmark,\n                                                                         show_progress=show_progress,\n                                                                         env=p_nev)\n                                       for target_symbols in process_symbols)\n\n        for pick_kl_pd_dict in out_pick_kl_pd_dict:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84out_pick_kl_pd_dict\xef\xbc\x8c\xe5\x88\x86\xe5\x88\xab\xe6\x9b\xb4\xe6\x96\xb0\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe7\x9a\x84\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\n            self.pick_kl_pd_dict[\'pick_time\'].update(pick_kl_pd_dict)\n\n    def get_pick_stock_kl_pd(self, target_symbol, xd=ABuEnv.g_market_trade_year,\n                             min_xd=int(ABuEnv.g_market_trade_year / 2)):\n        """"""\n        \xe5\xaf\xb9\xe5\xa4\x96\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x89\xe8\x82\xa1\xe6\x97\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xef\xbc\x8c\xe6\xb2\xa1\xe6\x89\xbe\xe5\x88\xb0\xe4\xbd\xbf\xe7\x94\xa8_fetch_pick_stock_kl_pd\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe4\xb8\x94\xe4\xbf\x9d\xe5\xad\x98\xe9\x80\x89\xe8\x82\xa1\xe5\xad\x97\xe5\x85\xb8\n        :param target_symbol: \xe9\x80\x89\xe8\x82\xa1symbol\n        :param xd: \xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x89\n        :param min_xd: \xe5\xaf\xb9fetch\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe6\x9c\x80\xe5\xb0\x8f\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\n        :return:\n        """"""\n\n        if target_symbol in self.pick_kl_pd_dict[\'pick_stock\']:\n            xd_dict = self.pick_kl_pd_dict[\'pick_stock\'][target_symbol]\n            if xd in xd_dict:\n                # \xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9aself.pick_kl_pd_dict[\'pick_stock\'][\'usTSLA\'][\'252\']\n                # noinspection PyTypeChecker\n                kl_pd = xd_dict[xd]\n                if kl_pd is not None:\n                    # \xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe6\xb7\xb1\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xbc\x9a\xe4\xb8\xa2\xe5\xa4\xb1name\n                    kl_pd.name = target_symbol\n                return kl_pd\n\n        # \xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\xaf\x8f\xe6\x89\xbe\xe5\x88\xb0\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8cfetch\n        kl_pd = self._fetch_pick_stock_kl_pd(xd, target_symbol)\n        """"""\xe9\x80\x89\xe8\x82\xa1\xe5\xad\x97\xe5\x85\xb8\xe6\x98\xaf\xe4\xb8\x89\xe5\xb1\x82\xe5\xad\x97\xe5\x85\xb8\xe7\xbb\x93\xe6\x9e\x84\xef\xbc\x8c\xe6\xaf\x94\xe6\x8b\xa9\xe6\x97\xb6\xe5\xad\x97\xe5\x85\xb8\xe5\xa4\x9a\xe4\xb8\x80\xe5\xb1\x82\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x9c\x89\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe5\x81\x9a\xe4\xb8\xba\xe7\xac\xac\xe4\xb8\x89\xe5\xb1\x82\xe5\xad\x97\xe5\x85\xb8\xe7\x9a\x84key""""""\n        if kl_pd is None or kl_pd.shape[0] == 0:\n            self.pick_kl_pd_dict[\'pick_stock\'][target_symbol] = {xd: None}\n            return None\n\n        """"""\xe7\x94\xb1\xe4\xba\x8e_fetch_pick_stock_kl_pd\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96kl_pd\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe6\xa0\x87\xe5\xb0\xba\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84min_xd\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe5\xa4\xa7\xe4\xba\x8e\xe6\xa0\x87\xe5\xb0\xba\xe6\x89\x8d\xe6\x9c\x89\xe5\xae\x9e\xe9\x99\x85\xe6\x84\x8f\xe4\xb9\x89""""""\n        if kl_pd.shape[0] < min_xd:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x86\xe6\x98\xaf < min_xd, \xe6\x8a\x9b\xe5\xbc\x83\xe6\x95\xb0\xe6\x8d\xae\xe7\x9b\xb4\xe6\x8e\xa5{xd: None}\n            self.pick_kl_pd_dict[\'pick_stock\'][target_symbol] = {xd: None}\n            return None\n        # \xe7\xac\xac\xe4\xb8\x89\xe5\xb1\x82\xe5\xad\x97\xe5\x85\xb8{xd: kl_pd}\n        self.pick_kl_pd_dict[\'pick_stock\'][target_symbol] = {xd: kl_pd}\n        return kl_pd\n'"
abupy/TradeBu/ABuMLFeature.py,6,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xe5\xae\x9a\xe4\xb9\x89\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe7\x94\xa8\xe6\x88\xb7\xe7\x89\xb9\xe5\xbe\x81\xe6\x89\xa9\xe5\xb1\x95\xef\xbc\x8c\xe5\xae\x9a\xe4\xb9\x89\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ast\nimport datetime\nimport os\n\nimport numpy as np\n\nfrom ..CoreBu import ABuEnv\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange, range, six\nfrom ..MarketBu import ABuMarketDrawing\nfrom ..TLineBu import ABuTLAtr\nfrom ..TLineBu import ABuTLJump\nfrom ..TLineBu import ABuTLWave\nfrom ..UtilBu import ABuRegUtil\nfrom ..UtilBu import ABuStrUtil\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n# \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\ng_deg_keys = [21, 42, 60, ABuEnv.g_market_trade_year]\n# \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbcrank\ng_price_rank_keys = [60, 90, 120, ABuEnv.g_market_trade_year]\n# \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\xb3\xa2\xe5\x8a\xa8\xe5\x91\xa8\xe6\x9c\x9f\xe5\xae\x9a\xe4\xb9\x89\ng_wave_xd = 42\n# \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\xb3\xa2\xe5\x8a\xa8\xe5\x8f\x96\xe6\xa0\xb7\xe4\xb8\xaa\xe6\x95\xb0\ng_wave_key_cnt = 3\n# \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8catr\xe5\x91\xa8\xe6\x9c\x9f\xe5\xae\x9a\xe4\xb9\x89\ng_atr_xd = 42\n# \xe5\xbf\xab\xe7\x85\xa7\xe5\x91\xa8\xe6\x9c\x9f\ng_take_snap_shot_xd = 60\n\n\nclass BuyFeatureMixin(object):\n    """"""\n        \xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\xa0\x87\xe8\xaf\x86\xe6\xb7\xb7\xe5\x85\xa5\xef\xbc\x8c\xe4\xb8\x8eBuyUmpMixin\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93feature\xe7\xb1\xbb\xe5\x8f\xaf\xe8\x83\xbd\xe5\xb1\x9e\xe4\xba\x8e\xe5\xa4\x9a\xe4\xb8\xaa\xe7\xb1\xbb\xe5\x88\xab\n        \xe5\x8d\xb3\xe5\x8f\xaf\xe8\x83\xbd\xe5\x90\x8c\xe6\x97\xb6\xe6\xb7\xb7\xe5\x85\xa5BuyFeatureMixin\xe5\x92\x8cSellFeatureMixin\n    """"""\n    _feature_buy = True\n    _feature_buy_prefix = \'buy_\'\n\n\nclass SellFeatureMixin(object):\n    """"""\n        \xe5\x8d\x96\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe6\xa0\x87\xe8\xaf\x86\xe6\xb7\xb7\xe5\x85\xa5\xef\xbc\x8c\xe4\xb8\x8eSellUmpMixin\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93feature\xe7\xb1\xbb\xe5\x8f\xaf\xe8\x83\xbd\xe5\xb1\x9e\xe4\xba\x8e\xe5\xa4\x9a\xe4\xb8\xaa\xe7\xb1\xbb\xe5\x88\xab\n        \xe5\x8d\xb3\xe5\x8f\xaf\xe8\x83\xbd\xe5\x90\x8c\xe6\x97\xb6\xe6\xb7\xb7\xe5\x85\xa5BuyFeatureMixin\xe5\x92\x8cSellFeatureMixin\n    """"""\n    _feature_sell = True\n    _feature_sell_prefix = \'sell_\'\n\n\nclass AbuFeatureBase(object):\n    """"""\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    def support_buy_feature(self):\n        """"""\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe5\xbb\xba""""""\n        return getattr(self, ""_feature_buy"", False) is True\n\n    def support_sell_feature(self):\n        """"""\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe5\x8d\x96\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe5\xbb\xba""""""\n        return getattr(self, ""_feature_sell"", False) is True\n\n    def check_support(self, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0buy_feature\xe6\xa3\x80\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe5\xbb\xba\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        """"""\n        if buy_feature and not self.support_buy_feature:\n            raise TypeError(\'feature support buy must subclass BuyFeatureMixin!!!\')\n        if not buy_feature and not self.support_sell_feature:\n            raise TypeError(\'feature support buy must subclass SellFeatureMixin!!!\')\n\n    def feature_prefix(self, buy_feature, check=True):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xaebuy_feature\xe5\x86\xb3\xe5\xae\x9a\xe8\xbf\x94\xe5\x9b\x9e_feature_buy_prefix\xe6\x88\x96\xe8\x80\x85_feature_sell_prefix\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x9c\xa8calc_feature\xe4\xb8\xad\xe6\x9e\x84\xe6\x88\x90\xe5\x94\xaf\xe4\xb8\x80key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :param check: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe6\xa3\x80\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe5\xbb\xba\n        :return:\n        """"""\n        if check:\n            self.check_support(buy_feature)\n        return getattr(self, \'_feature_buy_prefix\') if buy_feature else getattr(self, \'_feature_sell_prefix\')\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, support_buy_feature support_sell_feature, get_feature_keys""""""\n        return \'{}:is_buy_feature:{} is_sell_feature:{} feature: {}\'.format(self.__class__.__name__,\n                                                                            self.support_buy_feature(),\n                                                                            self.support_sell_feature(),\n                                                                            self.get_feature_keys(\n                                                                                self.support_buy_feature()))\n\n    __repr__ = __str__\n\n    def get_feature_ump_keys(self, ump_cls):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xaeump_cls\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84get_feature_keys\n        :param ump_cls: AbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xe7\xb1\xbb\xef\xbc\x8c\xe9\x9d\x9e\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        is_buy_ump = getattr(ump_cls, ""_ump_type_prefix"") == \'buy_\'\n        return self.get_feature_keys(buy_feature=is_buy_ump)\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe4\xb8\xbb\xe8\xa6\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9a\xe4\xb9\x89feature\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        raise NotImplementedError(\'NotImplementedError get_feature_keys!!!\')\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe5\xad\x90\xe7\xb1\xbb\xe4\xb8\xbb\xe8\xa6\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n        raise NotImplementedError(\'NotImplementedError calc_feature!!!\')\n\n\nclass AbuFeatureDeg(AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin):\n    """"""\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba""""""\n\n    def __init__(self):\n        """"""\n            \xe9\xbb\x98\xe8\xae\xa421, 42, 60, 250\xe6\x97\xa5\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\xa6\x82\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe4\xbc\xbc\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                       abupy.feature.g_deg_keys = [10, 20, 30, 40, 50]\n        """"""\n\n        # frozenset\xe5\x8c\x85\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x80\xe6\x97\xa6\xe5\xae\x9a\xe4\xb8\x8b\xe6\x9d\xa5\xe5\xb0\xb1\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe4\xb8\x8d\xe4\xb8\x8a\n        self.deg_keys = frozenset(g_deg_keys)\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\xad\xe4\xbb\xa3\xe7\x94\x9f\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81feature\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0\xe5\xae\x9a, \xe4\xbd\xbf\xe7\x94\xa8feature_prefix\xe5\x8c\xba\xe5\x88\x86\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x89\x8d\xe7\xbc\x80key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}deg_ang{}\'.format(self.feature_prefix(buy_feature=buy_feature), dk) for dk in self.deg_keys]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        deg_dict = {}\n        for dk in self.deg_keys:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe9\xa2\x84\xe8\xae\xbe\xe8\xa7\x92\xe5\xba\xa6\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe6\x9e\x84\xe5\xbb\xba\xe7\x89\xb9\xe5\xbe\x81\n            if day_ind - dk >= 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                deg_close = kl_pd[day_ind - dk + 1:day_ind + 1].close\n            else:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n                combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n                # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-dk:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                deg_close = combine_kl_pd[-dk:].close if combine_kl_pd.shape[0] > dk else combine_kl_pd.close\n\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbcdeg_close\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87calc_regress_deg\xe8\xae\xa1\xe7\xae\x97\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\n            ang = ABuRegUtil.calc_regress_deg(deg_close, show=False)\n            # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\n            ang = 0 if np.isnan(ang) else round(ang, 3)\n            # \xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x91\xa8\xe6\x9c\x9fkey\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\n            deg_dict[\'{}deg_ang{}\'.format(self.feature_prefix(buy_feature=buy_feature), dk)] = ang\n        return deg_dict\n\n\nclass AbuFeaturePrice(AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin):\n    """"""\xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba""""""\n\n    def __init__(self):\n        """"""\n            \xe9\xbb\x98\xe8\xae\xa460, 90, 120, 250\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\xa6\x82\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe4\xbc\xbc\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                    abupy.feature.g_price_rank_keys = [10, 20, 30, 40\xef\xbc\x8c50]\n        """"""\n\n        # frozenset\xe5\x8c\x85\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x80\xe6\x97\xa6\xe5\xae\x9a\xe4\xb8\x8b\xe6\x9d\xa5\xe5\xb0\xb1\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe4\xb8\x8d\xe4\xb8\x8a\n        self.price_rank_keys = frozenset(g_price_rank_keys)\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\xad\xe4\xbb\xa3\xe7\x94\x9f\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89\xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81feature\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0, \xe4\xbd\xbf\xe7\x94\xa8feature_prefix\xe5\x8c\xba\xe5\x88\x86\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x89\x8d\xe7\xbc\x80key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}price_rank{}\'.format(self.feature_prefix(buy_feature=buy_feature), dk) for dk in\n                self.price_rank_keys]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        price_rank_dict = {}\n        for dk in self.price_rank_keys:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe9\xa2\x84\xe8\xae\xbe\xe4\xbb\xb7\xe6\xa0\xbcrank\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe6\x9e\x84\xe5\xbb\xba\xe7\x89\xb9\xe5\xbe\x81\n            if day_ind - dk >= 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                price_close = kl_pd[day_ind - dk + 1:day_ind + 1].close\n            else:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n                combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n                # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-dk:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                price_close = combine_kl_pd[-dk:].close if combine_kl_pd.shape[0] > dk else combine_kl_pd.close\n            """"""\n                price_close.rank()\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe6\x89\x80\xe6\x9c\x89\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe6\x8e\x92\xe5\x90\x8d\n\n                ...................\n                2016-07-20    256.0\n                2016-07-21    200.0\n                2016-07-22    214.0\n                2016-07-25    266.0\n                2016-07-26    239.0\n\n                -> price_close.rank()[-1]\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84\xe6\x8e\x92\xe5\x90\x8d\n\n                239.0\n\n                \xef\xbc\x8d> price_close.rank()[-1] / price_close.rank().shape[0] \xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8d\xb3\xe4\xb8\xba\xef\xbc\x9a\n                \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84\xe6\x8e\x92\xe5\x90\x8d\xe5\x9c\xa8\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xad\xe7\x9a\x84\xe6\x8e\x92\xe5\x90\x8d\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe5\x80\xbc\xe7\x94\xb10-1\n\n                eg: price_close.rank()[-1] / price_close.rank().shape[0]\n                -> 239.0 / 504 = 0.47420634920634919, \xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n            """"""\n            price_rank = price_close.rank()[-1] / price_close.rank().shape[0]\n            # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xbb\xb7\xe6\xa0\xbcrank\xe5\x80\xbc\n            price_rank = 0 if np.isnan(price_rank) else round(price_rank, 3)\n            # \xe4\xbb\xb7\xe6\xa0\xbcrank\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xbb\xb7\xe6\xa0\xbcrank\xe5\x91\xa8\xe6\x9c\x9fkey\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbcrank\xe5\x80\xbc\n            price_rank_dict[\'{}price_rank{}\'.format(self.feature_prefix(buy_feature=buy_feature), dk)] = price_rank\n        return price_rank_dict\n\n\nclass AbuFeatureWave(AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin):\n    """"""\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba""""""\n\n    def __init__(self):\n        """"""\n            \xe9\xbb\x98\xe8\xae\xa442\xe6\x97\xa5\xe5\x81\x9a\xe4\xb8\xba\xe6\xb3\xa2\xe5\x8a\xa8\xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\xa6\x82\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe4\xbc\xbc\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                abupy.feature.g_wave_xd = 21\n        """"""\n        self.wave_xd = g_wave_xd\n        self.wave_key_cnt = g_wave_key_cnt\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\xad\xe4\xbb\xa3\xe7\x94\x9f\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81feature\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0, \xe4\xbd\xbf\xe7\x94\xa8feature_prefix\xe5\x8c\xba\xe5\x88\x86\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x89\x8d\xe7\xbc\x80key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}wave_score{}\'.format(self.feature_prefix(buy_feature=buy_feature),\n                                        xd_ind) for xd_ind in list(range(1, self.wave_key_cnt + 1))]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n\n        # \xe6\x9e\x84\xe5\xbb\xba\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe5\x9b\xba\xe5\xae\x9a\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\n        wave_wide = ABuEnv.g_market_trade_year\n        if day_ind - wave_wide >= 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            wave_df = kl_pd[day_ind - wave_wide + 1:day_ind + 1]\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n            # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-wave_wide:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            wave_df = combine_kl_pd[-wave_wide:] if combine_kl_pd.shape[0] > wave_wide else combine_kl_pd\n\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        wave_dict = {}\n        for xd_ind in xrange(1, self.wave_key_cnt + 1):\n            # wave_df\xe5\x9b\xba\xe5\xae\x9a\xe4\xb8\xba\xe4\xb8\x80\xe5\xb9\xb4\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cxd\xe6\x98\xafcalc_wave_st\xe5\x86\x85\xe9\x83\xa8\xe8\xae\xa1\xe7\xae\x97rolling std\xe7\x9a\x84window\xe5\x80\xbc\xef\xbc\x8c\xe8\xaf\xa6ABuTLWave.calc_wave_std\n            wave = ABuTLWave.calc_wave_std(wave_df, xd=xd_ind * self.wave_xd, show=False)\n            wave_score = wave.score\n            # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n            wave_score = 0 if np.isnan(wave_score) else round(wave_score, 3)\n            # \xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81key\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n            wave_dict[\'{}wave_score{}\'.format(self.feature_prefix(buy_feature=buy_feature), xd_ind)] = wave_score\n        return wave_dict\n\n\nclass AbuFeatureAtr(AbuFeatureBase, BuyFeatureMixin):\n    """"""atr\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5""""""\n\n    def __init__(self):\n        """"""\n            \xe9\xbb\x98\xe8\xae\xa442\xe6\x97\xa5\xe5\x81\x9a\xe4\xb8\xbaatr\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\xa6\x82\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe4\xbc\xbc\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                abupy.feature.g_atr_xd = 21\n        """"""\n        self.atr_xd = g_atr_xd\n        self.atr_key = \'atr_std\'\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84atr\xe7\x89\xb9\xe5\xbe\x81key\xe5\x80\xbc\xef\xbc\x8c\xe8\x99\xbd\xe7\x84\xb6\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xba\xe5\xae\x9a\xe7\x9a\x84atr key\xe5\x80\xbc\xef\xbc\x8c\xe4\xb9\x9f\xe8\xbf\x94\xe5\x9b\x9e\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbf\x9d\xe6\x8c\x81\xe6\x8e\xa5\xe5\x8f\xa3\xe7\xbb\x9f\xe4\xb8\x80\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: atr\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}{}\'.format(self.feature_prefix(buy_feature=buy_feature), self.atr_key)]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0atr\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0atr\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n\n        # \xe6\x9e\x84\xe5\xbb\xbaatr\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe5\x9b\xba\xe5\xae\x9a\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\n        atr_wide = ABuEnv.g_market_trade_year\n        if day_ind - atr_wide >= 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            atr_df = kl_pd[day_ind - atr_wide + 1:day_ind + 1]\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n            # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-atr_wide:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            atr_df = combine_kl_pd[-atr_wide:] if combine_kl_pd.shape[0] > atr_wide else combine_kl_pd\n\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84atr\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        atr_dict = {}\n        # \xe8\xae\xa1\xe7\xae\x97atr\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe8\xaf\xa6\xe8\xa7\x81ABuTLAtr.calc_atr_std\n        atr_std = ABuTLAtr.calc_atr_std(atr_df, xd=self.atr_xd, show=False)\n        atr_score = atr_std.score\n        # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96atr\xe7\x89\xb9\xe5\xbe\x81\n        atr_score = 0 if np.isnan(atr_score) else round(atr_score, 3)\n        # atr\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0atr\xe7\x89\xb9\xe5\xbe\x81key\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84atr\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n        atr_dict[\'{}{}\'.format(self.feature_prefix(buy_feature=buy_feature), self.atr_key)] = atr_score\n        return atr_dict\n\n\nclass AbuFeatureJump(AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin):\n    """"""\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba""""""\n\n    def __init__(self):\n        """"""\n            \xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81key\xe4\xb8\xba:\n            jump_down_power: \xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe8\x83\xbd\xe9\x87\x8f\n            diff_down_days : \xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x97\xb4\xe9\x9a\x94\n            jump_up_power  : \xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe8\x83\xbd\xe9\x87\x8f\n            diff_up_days   : \xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x97\xb4\xe9\x9a\x94\n        """"""\n        self.jump_keys = frozenset([\'jump_down_power\', \'diff_down_days\', \'jump_up_power\', \'diff_up_days\'])\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81key\xe5\x80\xbc\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}{}\'.format(self.feature_prefix(buy_feature=buy_feature), jk) for jk in self.jump_keys]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n\n        # \xe6\x9e\x84\xe5\xbb\xba\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe5\x9b\xba\xe5\xae\x9a\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe5\xb9\xb4\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\n        jump_wide = ABuEnv.g_market_trade_year\n        if day_ind - jump_wide >= 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            jump_df = kl_pd[day_ind - jump_wide + 1:day_ind + 1]\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n            # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-jump_wide:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            jump_df = combine_kl_pd[-jump_wide:] if combine_kl_pd.shape[0] > jump_wide else combine_kl_pd\n\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        jump_dict = {}\n\n        diff_down_days = 0\n        jump_down_power = 0\n        diff_up_days = 0\n        jump_up_power = 0\n        key_prefix = self.feature_prefix(buy_feature=buy_feature)\n        # \xe9\x80\x9a\xe8\xbf\x87\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97jump_df\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe8\xb7\xb3\xe7\xa9\xba\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9ejumps\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xaf\xa6\xe8\xa7\x81ABuTLJump.calc_jump\n        jumps = ABuTLJump.calc_jump(jump_df, show=False)\n        """"""\n                jump\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9ajump\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xb7\xb3\xe7\xa9\xba\xe6\x96\xb9\xe5\x90\x911\xe4\xb8\xba\xe5\x90\x91\xe4\xb8\x8a\xef\xbc\x8c\xef\xbc\x8d1\xe4\xb8\xba\xe5\x90\x91\xe4\xb8\x8b\xef\xbc\x8cjump_power\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe8\xa1\x8c\n                \xe8\xae\xb0\xe5\xbd\x95\xe4\xba\x86\xe4\xb8\x80\xe6\xac\xa1\xe8\xb7\xb3\xe7\xa9\xba\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x8f\x98\xe5\x8c\x96\xef\xbc\x8c\xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe9\x87\x8f\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\n                            jump\tjump_power\tclose\tdate\tp_change\tpre_close\n                2014-08-11\t 1.0\t1.006085\t259.32\t20140811.0\t4.51\t248.13\n                2014-10-10\t-1.0\t1.628481\t236.91\t20141010.0\t-7.82\t257.01\n                2015-01-14\t-1.0\t1.325337\t192.69\t20150114.0\t-5.66\t204.25\n                2015-02-12\t-1.0\t1.422285\t202.88\t20150212.0\t-4.66\t212.80\n                .............\n        """"""\n        if not jumps.empty:\n            # \xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\n            down_jumps = jumps[(jumps.jump == -1)]\n            if down_jumps.shape[0] > 0:\n                # \xe7\xad\x9b\xe9\x80\x89\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\xac\xa1\xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n                last_down_jump = down_jumps.iloc[-1:]\n                # \xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe5\x8a\x9b * last_down_jump.jump.values[0] \xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe6\x9c\x89\xe6\x96\xb9\xe5\x90\x91\xe7\x9a\x84\n                jump_down_power = last_down_jump.jump_power.values[0] * last_down_jump.jump.values[0]\n                # \xe5\x90\x91\xe4\xb8\x8b\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x97\xb4\xe9\x9a\x94\n                diff_down_days = (kl_pd.iloc[day_ind: day_ind + 1].index.date - last_down_jump.index.date)[0].days\n            # \xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89\xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\n            up_jumps = jumps[(jumps.jump == 1)]\n            if up_jumps.shape[0] > 0:\n                # \xe7\xad\x9b\xe9\x80\x89\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe6\xac\xa1\xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n                last_up_jump = up_jumps.iloc[-1:]\n                # \xe8\xb7\xb3\xe7\xa9\xba\xe8\x83\xbd\xe5\x8a\x9b* last_up_jump.jump.values[0] \xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe6\x9c\x89\xe6\x96\xb9\xe5\x90\x91\xe7\x9a\x84\n                jump_up_power = last_up_jump.jump_power.values[0] * last_up_jump.jump.values[0]\n                # \xe5\x90\x91\xe4\xb8\x8a\xe8\xb7\xb3\xe7\xa9\xba\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe5\x8d\x96\xe5\x87\xba\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x97\xb4\xe9\x9a\x94\n                diff_up_days = (kl_pd.iloc[day_ind: day_ind + 1].index.date - last_up_jump.index.date)[0].days\n\n        # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n        jump_down_power = round(jump_down_power, 3)\n        jump_up_power = round(jump_up_power, 3)\n\n        # \xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81key\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n        jump_dict[\'{}jump_down_power\'.format(key_prefix)] = jump_down_power\n        jump_dict[\'{}diff_down_days\'.format(key_prefix)] = diff_down_days\n\n        jump_dict[\'{}jump_up_power\'.format(key_prefix)] = jump_up_power\n        jump_dict[\'{}diff_up_days\'.format(key_prefix)] = diff_up_days\n\n        return jump_dict\n\n\nclass AbuFeatureSnapshot(AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin):\n    """"""\n        \xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba abupy.env.g_enable_take_kl_snapshot\xe5\xbc\x80\xe5\x85\xb3\xe6\x8e\xa7\xe5\x88\xb6\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\n        \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x9b\xbe\xe5\x9c\xa8\xef\xbd\x9e/abu/data/save_png/\xe4\xbb\x8a\xe5\xa4\xa9\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f/\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\n    """"""\n\n    def __init__(self):\n        """"""\n            \xe9\xbb\x98\xe8\xae\xa460\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\xab\xe7\x85\xa7\xef\xbc\x8c\xe5\xa6\x82\xe5\xa4\x96\xe9\x83\xa8\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe4\xbc\xbc\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                abupy.feature.g_take_snap_shot_xd = 30\n        """"""\n        self.take_snap_shot_xd = g_take_snap_shot_xd\n        self.snap_key = \'snap\'\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81key\xe5\x80\xbc\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}{}\'.format(self.feature_prefix(buy_feature=buy_feature), self.snap_key)]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n\n        # \xe5\xbf\xab\xe7\x85\xa7\xe7\x94\x9f\xe6\x88\x90\xe6\x97\xb6\xe9\x97\xb4\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        tt = datetime.datetime.now().strftime(""%Y_%m_%d_%H_%M_%S_%f"")\n        # \xe7\x94\x9f\xe6\x88\x9064\xe4\xbd\x8d\xe9\x9a\x8f\xe6\x9c\xba\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        rn = ABuStrUtil.create_random_with_alpha(64)\n        # \xe5\xbf\xab\xe7\x85\xa7\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa1\xae\xe5\xae\x9a\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x9a\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb9\xb6\xe8\xa1\x8c\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\x8a\xa0\xe5\x85\xa5\xe8\xbf\x9b\xe7\xa8\x8bid\xef\xbc\x8c\xe5\x92\x8c64\xe4\xbd\x8d\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xba\xa7\xe7\x94\x9f\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe5\x86\xb2\xe7\xaa\x81\n        snap_fn = \'{}_{}_{}\'.format(tt, os.getpid(), rn)\n\n        if day_ind - self.take_snap_shot_xd >= 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            snap_window_pd = kl_pd[day_ind - self.take_snap_shot_xd + 1:day_ind + 1]\n        else:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n            combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n            # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-xd:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n            snap_window_pd = combine_kl_pd[-self.take_snap_shot_xd:] \\\n                if combine_kl_pd.shape[0] > self.take_snap_shot_xd else combine_kl_pd\n\n        # \xe6\xa8\xa1\xe5\x9d\x97\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6k\xe7\xba\xbf\xe5\x9b\xbe\xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe4\xb8\x8d\xe7\xbb\x98\xe5\x88\xb6\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\n        ABuMarketDrawing.g_only_draw_price = True\n        # \xe9\x80\x9a\xe8\xbf\x87\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97snap_window_pd\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93k\xe7\xba\xbf\xe5\x9b\xbe\xe5\xbf\xab\xe7\x85\xa7\xef\xbc\x8c\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe8\xaf\xa6ABuMarketDrawing.plot_candle_form_klpd\n        ABuMarketDrawing.plot_candle_form_klpd(snap_window_pd, save=True, name=snap_fn)\n        # \xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0\xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81key\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n        snap_dict = {\'{}{}\'.format(self.feature_prefix(buy_feature=buy_feature),\n                                   self.snap_key): ABuMarketDrawing.save_dir_name() + snap_fn + \'.png\'}\n        return snap_dict\n\n\n""""""\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81""""""\n_g_extend_feature_list = list()\n\n\ndef append_user_feature(feature, check=True):\n    """"""\n    \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe6\x89\xa9\xe5\xb1\x95feature\xe6\x8e\xa5\xe5\x8f\xa3\n    :param feature: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaffeature class\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84feature object\n    :param check: \xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8bfeature\xe6\x98\xafAbuFeatureBase\xe5\xae\x9e\xe4\xbe\x8b\n    :return:\n    """"""\n\n    if isinstance(feature, six.class_types):\n        # \xe6\x9a\x82\xe6\x97\xb6\xe8\xae\xa4\xe4\xb8\xba\xe6\x89\x80\xe6\x9c\x89feature\xe7\x9a\x84\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe4\xb9\x9f\xe5\x8f\xaf\xe6\xb7\xbb\xe5\x8a\xa0\xef\xbc\x8aargs\n        feature_obj = feature()\n    else:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x98\xaf\xe7\xb1\xbb\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xb5\x8b\xe5\x80\xbc\n        feature_obj = feature\n\n    # check\xe6\xa3\x80\xe6\xb5\x8bfeature_obj\xe6\x98\xaf\xe4\xb8\x8d\xe6\x98\xafAbuFeatureBase\xe7\x9a\x84\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    if check and not isinstance(feature_obj, AbuFeatureBase):\n        raise TypeError(\'feature must a isinstance AbuFeatureBase!!!\')\n\n    # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\n    _g_extend_feature_list.append(feature_obj)\n\n\ndef clear_user_feature():\n    """"""\xe5\xb0\x86\xe7\x94\xa8\xe6\x88\xb7\xe5\x8f\xaf\xe6\x89\xa9\xe5\xb1\x95\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe6\xb8\x85\xe7\xa9\xba""""""\n    global _g_extend_feature_list\n    _g_extend_feature_list = list()\n\n\nclass AbuMlFeature(object):\n    """"""\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe5\xa4\x96\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8e\xa5\xe5\x8f\xa3\xe7\xb1\xbb\xef\xbc\x8c\xe8\xb4\x9f\xe8\xb4\xa3\xe7\xae\xa1\xe7\x90\x86\xe6\x9e\x84\xe5\xbb\xba\xe5\x86\x85\xe9\x83\xa8\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe7\x94\xa8\xe6\x88\xb7\xe6\x89\xa9\xe5\xb1\x95\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x8f\x90\xe4\xbe\x9b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe6\x8e\xa5\xe5\x8f\xa3""""""\n\n    def __init__(self):\n        """"""\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96 \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8b\xe7\x94\xa8\xe6\x88\xb7\xe6\x89\xa9\xe5\xb1\x95\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1""""""\n\n        # \xe5\x86\x85\xe7\xbd\xae\xe7\x89\xb9\xe5\xbe\x81\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\n        self.features = [AbuFeatureDeg(), AbuFeaturePrice(), AbuFeatureWave(), AbuFeatureAtr(), AbuFeatureJump()]\n        if ABuEnv.g_enable_take_kl_snapshot:\n            # \xe5\xbf\xab\xe7\x85\xa7\xe7\x89\xb9\xe5\xbe\x81\xe6\xaf\x94\xe8\xbe\x83\xe7\x89\xb9\xe6\xae\x8a\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe5\xbc\x80\xe5\x90\xaf\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\xa4\xa7\xe8\xa7\x84\xe6\xa8\xa1\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xaf\x94\xe8\xbe\x83\xe8\x80\x97\xe6\x97\xb6\xe7\xad\x89\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe6\x95\x85\xe5\xbc\x80\xe5\x85\xb3\xe6\x8e\xa7\xe5\x88\xb6\n            self.features.append(AbuFeatureSnapshot())\n\n        # \xe7\x94\xa8\xe6\x88\xb7\xe6\x89\xa9\xe5\xb1\x95\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1extend\xe5\x88\xb0\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97self.features\xe4\xb8\xad\n        if len(_g_extend_feature_list) > 0:\n            # \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe5\x86\x8d\xe6\xac\xa1check\xe4\xba\x86\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbaappend_user_feature\xe6\x97\xb6\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x81\x9a\xe8\xbf\x87\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5extend\n            self.features.extend(_g_extend_feature_list)\n\n    def make_feature_dict(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\x8f\x90\xe4\xbe\x9b\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81AbuFactorBuyBase.make_buy_order_ml_feature\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        """"""\n\n        if not ABuEnv.g_enable_ml_feature:\n            # \xe9\x9c\x80\xe8\xa6\x81env\xe4\xb8\xad\xe5\xbc\x80\xe5\x90\xaf\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\n            return None\n        ml_feature_dict = {}\n        # \xe6\xa0\xb9\xe6\x8d\xaebuy_feature\xef\xbc\x8c\xe8\xbf\x87\xe6\xbb\xa4\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe5\xad\x90\xe9\x9b\x86\n        features = list(\n            filter(lambda f: f.support_buy_feature() if buy_feature else f.support_sell_feature(), self.features))\n        for feature in features:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbb\x9f\xe4\xb8\x80\xe4\xbd\xbf\xe7\x94\xa8calc_feature\xe6\x8e\xa5\xe5\x8f\xa3\xe7\x94\x9f\xe6\x88\x90\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe7\x89\xb9\xe5\xbe\x81update\xe5\x88\xb0\xe6\x80\xbb\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\x97\xe5\x85\xb8ml_feature_dict\xe4\xb8\xad\n            ml_feature_dict.update(feature.calc_feature(kl_pd, combine_kl_pd, day_ind, buy_feature))\n        return ml_feature_dict\n\n    def _get_unzip_feature_keys(self, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xaebuy_feature\xef\xbc\x8c\xe8\xbf\x87\xe6\xbb\xa4\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe5\xad\x90\xe9\x9b\x86\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n        \xe4\xbd\xbf\xe7\x94\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84get_feature_keys\xe6\x96\xb9\xe6\xb3\x95\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        """"""\n        feature_key_list = []\n        # \xe6\xa0\xb9\xe6\x8d\xaebuy_feature\xef\xbc\x8c\xe8\xbf\x87\xe6\xbb\xa4\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe5\xad\x90\xe9\x9b\x86\n        features = list(\n            filter(lambda f: f.support_buy_feature() if buy_feature else f.support_sell_feature(), self.features))\n\n        # \xe8\xbf\xad\xe4\xbb\xa3\xe7\x89\xb9\xe5\xbe\x81\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84get_feature_keys\xe6\x96\xb9\xe6\xb3\x95\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        for feature in features:\n            feature_key_list.extend(feature.get_feature_keys(buy_feature))\n        return feature_key_list\n\n    def unzip_ml_feature(self, orders_pd):\n        """"""\n        ABuTradeExecute\xe4\xb8\xadmake_orders_pd\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\xb0\x86order\xe4\xb8\xaddict\xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xa7\xa3\xe5\x8e\x8b\xe6\x8b\x86\xe8\xa7\xa3\xe4\xb8\xba\xe7\x8b\xac\xe7\xab\x8b\xe7\x9a\x84\n        pd.DataFrame\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81key\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return:\n        """"""\n        if ABuEnv.g_enable_ml_feature:\n            features_keys = list()\n            # \xe6\x94\xb6\xe9\x9b\x86\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81keys\n            features_keys.extend(self._get_unzip_feature_keys(True))\n            # \xe6\x94\xb6\xe9\x9b\x86\xe5\x8d\x96\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81keys\n            features_keys.extend(self._get_unzip_feature_keys(False))\n\n            # from ..UtilBu.ABuDTUtil import except_debug\n            # @except_debug\n            def map_str_dict(order, key):\n                if order.sell_type == \'keep\' and key.startswith(\'sell_\'):\n                    # \xe9\x92\x88\xe5\xaf\xb9\xe5\x8d\x96\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x95\xe5\xad\x90keep\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb2\xa1\xe6\x9c\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n                    return np.nan\n\n                if not isinstance(order.ml_features, dict):\n                    # \xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xacpandas dict\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\xe4\xbc\x9a\xe6\x88\x90\xe4\xb8\xbastr\n                    map_ast = ast.literal_eval(order.ml_features)[key]\n                else:\n                    map_ast = order.ml_features[key]\n\n                return map_ast\n\n            for fk in features_keys:\n                # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x89\x80\xe6\x9c\x89key\xef\xbc\x8cfk\xe5\x81\x9a\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1orders_pd\xe7\x9a\x84\xe6\x96\xb0\xe5\x88\x97\xe5\x90\x8d\xef\xbc\x8c\n                orders_pd[fk] = orders_pd.apply(map_str_dict, axis=1, args=(fk,))\n\n\nclass AbuFeatureDegExtend(AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin):\n    """"""\xe7\xa4\xba\xe4\xbe\x8b\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\xb0\xe7\x9a\x84\xe8\xa7\x86\xe8\xa7\x92\xe6\x9d\xa5\xe5\xbd\x95\xe5\x88\xb6\xe6\xaf\x94\xe8\xb5\x9b\xef\xbc\x8c\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba""""""\n\n    def __init__(self):\n        """"""20, 40, 60, 90, 120\xe6\x97\xa5\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81""""""\n        # frozenset\xe5\x8c\x85\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x80\xe6\x97\xa6\xe5\xae\x9a\xe4\xb8\x8b\xe6\x9d\xa5\xe5\xb0\xb1\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe4\xb8\x8d\xe4\xb8\x8a\n        self.deg_keys = frozenset([10, 30, 50, 90, 120])\n\n    def get_feature_keys(self, buy_feature):\n        """"""\n        \xe8\xbf\xad\xe4\xbb\xa3\xe7\x94\x9f\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81feature\xe7\x9a\x84\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0\xe5\xae\x9a, \xe4\xbd\xbf\xe7\x94\xa8feature_prefix\xe5\x8c\xba\xe5\x88\x86\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x89\x8d\xe7\xbc\x80key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n        """"""\n        return [\'{}deg_ang{}\'.format(self.feature_prefix(buy_feature=buy_feature), dk) for dk in self.deg_keys]\n\n    def calc_feature(self, kl_pd, combine_kl_pd, day_ind, buy_feature):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe9\x80\xa0\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\n        :param kl_pd: \xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param combine_kl_pd: \xe5\x90\x88\xe5\xb9\xb6\xe6\x8b\xa9\xe6\x97\xb6\xe9\x98\xb6\xe6\xae\xb5\xe4\xb9\x8b\xe5\x89\x8d1\xe5\xb9\xb4\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n        :param day_ind: \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param buy_feature: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x88bool\xef\xbc\x89\n        :return: \xe6\x9e\x84\xe9\x80\xa0\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        """"""\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\n        deg_dict = {}\n        for dk in self.deg_keys:\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe9\xa2\x84\xe8\xae\xbe\xe8\xa7\x92\xe5\xba\xa6\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe6\x9e\x84\xe5\xbb\xba\xe7\x89\xb9\xe5\xbe\x81\n            if day_ind - dk >= 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                deg_close = kl_pd[day_ind - dk + 1:day_ind + 1].close\n            else:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x8b\xa9\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x8f\x90\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8combine_kl_pd\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe6\x88\xaa\xe5\x8f\x96\xe7\x9b\xb4\xe5\x88\xb0day_ind\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n                combine_kl_pd = combine_kl_pd.loc[:kl_pd.index[day_ind]]\n                # \xe5\xa6\x82combine_kl_pd\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\x89\xb9\xe5\xbe\x81\xe5\x91\xa8\xe6\x9c\x9f\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8d> \xe6\x88\xaa\xe5\x8f\x96combine_kl_pd[-dk:].close\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\x8f\x96combine_kl_pd\xe6\x89\x80\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\n                deg_close = combine_kl_pd[-dk:].close if combine_kl_pd.shape[0] > dk else combine_kl_pd.close\n\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x88\xaa\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbcdeg_close\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87calc_regress_deg\xe8\xae\xa1\xe7\xae\x97\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\n            ang = ABuRegUtil.calc_regress_deg(deg_close, show=False)\n            # \xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\n            ang = 0 if np.isnan(ang) else round(ang, 3)\n            # \xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe9\x94\xae\xe5\x80\xbc\xe5\xaf\xb9\xe5\xad\x97\xe5\x85\xb8\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x91\xa8\xe6\x9c\x9fkey\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe5\x80\xbc\n            deg_dict[\'{}deg_ang{}\'.format(self.feature_prefix(buy_feature=buy_feature), dk)] = ang\n        return deg_dict\n'"
abupy/TradeBu/ABuOrder.py,3,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport math\n\nimport numpy as np\n\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketTargetType\nfrom ..MarketBu.ABuSymbolFutures import AbuFuturesCn, AbuFuturesGB\nfrom ..MarketBu.ABuHkUnit import AbuHkUnit\nfrom ..MarketBu import ABuMarket\nfrom ..MarketBu.ABuMarket import MarketMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass OrderMarket(MarketMixin):\n    """"""\xe6\xa0\xb9\xe6\x8d\xaeAbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbbMarketMixin\xe4\xb8\xadsymbol_name""""""\n\n    def __init__(self, order):\n        """"""\n        \xe8\xae\xbe\xe7\xbd\xae\xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbbMarketMixin\xe4\xb8\xadsymbol_name\xef\xbc\x8c\xe4\xbb\xa5\xe8\x8e\xb7\xe5\x8f\x96symbol_market\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\n        :param order: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if isinstance(order, AbuOrder):\n            self.symbol_name = order.buy_symbol\n        else:\n            raise TypeError(\'order is AbuOrder object!!!\')\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuOrder(object):\n    """"""\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb""""""\n\n    # \xe5\xa4\x9a\xe4\xb8\xaa\xe5\x9b\xa0\xe5\xad\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x8f\xaf\xe8\x83\xbd\xe7\x94\x9f\xe6\x88\x90\xe5\x87\xa0\xe7\x99\xbe\xe4\xb8\x87\xe4\xb8\xaaorder\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbd\xbf\xe7\x94\xa8__slots__\xe9\x99\x8d\xe4\xbd\x8e\xe5\x86\x85\xe5\xad\x98\xe6\xb6\x88\xe8\x80\x97\n    __slots__ = (\'order_deal\', \'buy_symbol\', \'buy_date\', \'buy_factor\', \'buy_factor_class\',\n                 \'buy_price\', \'buy_cnt\', \'buy_pos\', \'sell_date\',\n                 \'buy_type_str\', \'expect_direction\',\n                 \'sell_type\', \'keep_days\', \'sell_price\', \'sell_type_extra\', \'ml_features\')\n\n    def __init__(self):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86order_deal\xe8\xae\xbe\xe7\xbd\xae\xe6\x9c\xaa\xe6\x88\x90\xe4\xba\xa4\xe7\x8a\xb6\xe6\x80\x81""""""\n        self.order_deal = False\n\n    def fit_buy_order(self, day_ind, factor_object):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xbd\x93\xe5\xbd\x93\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\x8b\x9f\xe5\x90\x88\xe8\xae\xa1\xe7\xae\x97\xe4\xb9\xb0\xe5\x85\xa5\xe8\xae\xa2\xe5\x8d\x95\n        :param day_ind: \xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param factor_object: ABuFactorBuyBases\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        kl_pd = factor_object.kl_pd\n        # \xe8\xa6\x81\xe6\x89\xa7\xe8\xa1\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe5\xbd\x93\xe5\xa4\xa9\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n        kl_pd_buy = kl_pd.iloc[day_ind + 1]\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x90\x8d\xe7\xa7\xb0\n        factor_name = factor_object.factor_name if hasattr(factor_object, \'factor_name\') else \'unknown\'\n        # \xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x86\xb3\xe7\xad\x96\xe7\xb1\xbb\n        slippage_class = factor_object.slippage_class\n        # \xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe8\xae\xbe\xe7\xbd\xae\n        position_class = factor_object.position_class\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbf\xae\xe6\x94\xb9\xe7\xad\x96\xe7\x95\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x89\xa9\xe4\xbd\x99\xe8\xb5\x84\xe9\x87\x91\n        read_cash = factor_object.capital.read_cash\n        # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\n        fact = slippage_class(kl_pd_buy, factor_name)\n        # \xe6\x89\xa7\xe8\xa1\x8cfit_price, \xe8\xae\xa1\xe7\xae\x97\xe5\x86\xb3\xe7\xad\x96\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\n        bp = fact.fit()\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xbb\x91\xe7\x82\xb9\xe7\xb1\xbb\xe4\xb8\xad\xe5\x86\xb3\xe5\xae\x9a\xe4\xb8\x8d\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe6\x92\xa4\xe5\x8d\x95\xe5\xad\x90\xef\xbc\x8cbp\xe5\xb0\xb1\xe8\xbf\x94\xe5\x9b\x9e\xe6\xad\xa3\xe6\x97\xa0\xe7\xa9\xb7\n        if bp < np.inf:\n            """"""\n                \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\n                \xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\xaf\x94\xe4\xbe\x8b\xe6\x98\xaf1\xef\xbc\x8c\xe5\x8d\xb3\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9d\xa0\xe6\x9d\x86\xef\xbc\x8c\xe4\xbf\xae\xe6\x94\xb9ABuPositionBase.g_deposit_rate\xe5\x8f\xaf\xe6\x8f\x90\xe9\xab\x98\xe8\x9e\x8d\xe8\xb5\x84\xe8\x83\xbd\xe5\x8a\x9b\xef\xbc\x8c\n                \xe5\xa6\x82\xe6\x9e\x9cmargin\xef\xbc\x9d2\xef\xbc\x8d>ABuPositionBase.g_deposit_rate = 0.5, \xe5\x8d\xb3\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x80\xe5\x8d\x8a\xe7\x9a\x84\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe5\x90\x8c\xe8\xbf\x87\xe6\x9e\x84\xe5\xbb\xba\n                \xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe5\xae\x8c\xe6\x88\x90\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\xaf\x94\xe4\xbe\x8b\xe4\xbc\xa0\xe9\x80\x92\n            """"""\n            position = position_class(kl_pd_buy, factor_name, factor_object.kl_pd.name, bp, read_cash,\n                                      **factor_object.position_kwargs)\n\n            market = ABuEnv.g_market_target if ABuMarket.g_use_env_market_set else position.symbol_market\n            """"""\n                \xe7\x94\xb1\xe4\xba\x8e\xe6\xa8\xa1\xe5\x9d\x97\xe7\x89\xb5\xe6\x89\xaf\xe5\xa4\x8d\xe6\x9d\x82\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe8\xbf\x81\xe7\xa7\xbb\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe8\x9e\x8d\xe8\xb5\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa7\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9d\xa0\xe6\x9d\x86\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\x8d\xe7\x89\xb5\xe6\x89\xaf\xe8\xb5\x84\xe9\x87\x91\xe6\x80\xbb\xe9\x87\x8f\xe7\x9a\x84\xe8\xaf\x84\xe4\xbc\xb0\n                if market == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN:\n                    deposit_rate = 0.10\n                    q_df = AbuFuturesCn().query_symbol(factor_object.kl_pd.name)\n                    if q_df is not None:\n                        deposit_rate = q_df.min_deposit.values[0]\n                    # \xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xbe\xe7\xbd\xae\xe4\xbf\x9d\xe8\xaf\x81\xe9\x87\x91\xe6\xaf\x94\xe4\xbe\x8b\n                    position.deposit_rate = deposit_rate\n            """"""\n            # \xe6\x89\xa7\xe8\xa1\x8cfit_position\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe8\xae\xa1\xe7\xae\x97\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n            bc = position.fit_position(factor_object)\n            if np.isnan(bc):\n                return\n\n            if market != EMarketTargetType.E_MARKET_TARGET_TC:\n                # \xe9\x99\xa4\xe4\xba\x86\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe5\xb8\x82\xe5\x9c\xba\xe5\xa4\x96\xef\xbc\x8c\xe9\x83\xbd\xe5\x90\x91\xe4\xb8\x8b\xe5\x8f\x96\xe6\x95\xb4\xe6\x95\xb0\xe5\x88\xb0\xe6\x9c\x80\xe5\xb0\x8f\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xaa\xe6\x95\xb0\n                buy_cnt = int(math.floor(bc))\n            else:\n                # \xe5\xb8\x81\xe7\xb1\xbb\xe5\xb8\x82\xe5\x9c\xba\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb9\xb0\xe9\x9d\x9e\xe6\x95\xb4\xe6\x95\xb0\xe4\xb8\xaa, \xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x89\xe4\xbd\x8d\xe5\xb0\x8f\xe6\x95\xb0\n                buy_cnt = round(bc, 3)\n\n            if market == EMarketTargetType.E_MARKET_TARGET_US:\n                # \xe7\xbe\x8e\xe8\x82\xa11\n                min_cnt = 1\n            elif market == EMarketTargetType.E_MARKET_TARGET_TC:\n                # \xe5\x9b\xbd\xe5\x86\x85\xe4\xb8\x80\xe8\x88\xac\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81\xe5\x88\xb00.01\xe4\xb8\xaa\n                min_cnt = 0.01\n            elif market == EMarketTargetType.E_MARKET_TARGET_CN:\n                # A\xe8\x82\xa1\xe6\x9c\x80\xe5\xb0\x8f100\xe4\xb8\x80\xe6\x89\x8b\n                min_cnt = 100\n                # \xe5\x90\x91\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9a\x84\xe6\x89\x8b\xe9\x87\x8f\xe7\x9c\x8b\xe9\xbd\x90\n                buy_cnt -= buy_cnt % min_cnt\n            elif market == EMarketTargetType.E_MARKET_TARGET_HK:\n                # \xe6\xb8\xaf\xe8\x82\xa1\xe4\xbb\x8eAbuHkUnit\xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe5\xba\x94symbol\xe6\xaf\x8f\xe4\xb8\x80\xe6\x89\x8b\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\n                min_cnt = AbuHkUnit().query_unit(factor_object.kl_pd.name)\n                # \xe5\x90\x91\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9a\x84\xe6\x89\x8b\xe9\x87\x8f\xe7\x9c\x8b\xe9\xbd\x90\n                buy_cnt -= buy_cnt % min_cnt\n            elif market == EMarketTargetType.E_MARKET_TARGET_FUTURES_CN:\n                # \xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\xef\xbc\x8c\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9c\x80\xe5\xb0\x91\xe4\xb8\x80\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\n                min_cnt = AbuFuturesCn().query_min_unit(factor_object.kl_pd.name)\n                # \xe5\x90\x91\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9a\x84\xe6\x89\x8b\xe9\x87\x8f\xe7\x9c\x8b\xe9\xbd\x90\n                buy_cnt -= buy_cnt % min_cnt\n            elif market == EMarketTargetType.E_MARKET_TARGET_OPTIONS_US:\n                # \xe7\xbe\x8e\xe8\x82\xa1\xe6\x9c\x9f\xe6\x9d\x83\xe6\x9c\x80\xe5\xb0\x8f\xe5\x90\x88\xe7\xba\xa6\xe5\x8d\x95\xe4\xbd\x8d1contract\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8100\xe8\x82\xa1\xe8\x82\xa1\xe7\xa5\xa8\xe6\x9d\x83\xe5\x88\xa9\n                min_cnt = 100\n                buy_cnt -= buy_cnt % min_cnt\n            elif market == EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL:\n                # \xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7, \xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9c\x80\xe5\xb0\x91\xe4\xb8\x80\xe6\x89\x8b\xe5\x8d\x95\xe4\xbd\x8d\n                min_cnt = AbuFuturesGB().query_min_unit(factor_object.kl_pd.name)\n                buy_cnt -= buy_cnt % min_cnt\n            else:\n                raise TypeError(\'ABuEnv.g_market_target ERROR, market={}, g_market_target={}\'.format(\n                    market, ABuEnv.g_market_target))\n\n            if buy_cnt < min_cnt:\n                # \xe4\xb8\x8d\xe5\xa4\x9f\xe4\xb9\xb0\xe6\x9c\x80\xe5\xb0\x91\xe5\x8d\x95\xe4\xbd\x8d\xe9\x87\x8f\n                return\n\n            # \xe5\xa6\x82\xe4\xb8\x8b\xe7\x94\x9f\xe6\x88\x90order\xe5\x86\x85\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\n            self.buy_symbol = kl_pd.name\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\n            self.buy_date = int(kl_pd_buy.date)\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x90\x8d\xe5\xad\x97\n            self.buy_factor = factor_name\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbb\xe5\x90\x8d\xef\xbc\x8c\xe5\x92\x8cbuy_factor\xe4\xb8\x8d\xe5\x90\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe5\x85\xb7\xe4\xbd\x93\xe5\x8f\x82\xe6\x95\xb0\xe7\xad\x89\xe5\x94\xaf\xe4\xb8\x80key\n            self.buy_factor_class = factor_object.__class__.__name__\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\n            self.buy_price = bp\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe6\x95\xb0\xe9\x87\x8f\n            self.buy_cnt = buy_cnt\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb\xe5\x90\x8d\xe7\xa7\xb0\n            self.buy_pos = position.__class__.__name__\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8ccall or put\n            self.buy_type_str = factor_object.buy_type_str\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x86\x99\xe5\x85\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe6\x96\xb9\xe5\x90\x91\n            self.expect_direction = factor_object.expect_direction\n\n            # \xe5\xa6\x82\xe4\xb8\x8b\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe6\x81\xaf\xe5\x85\xb7\xe4\xbd\x93\xe5\x86\x99\xe5\x85\xa5\xe5\x9c\xa8fit_sell_order\xe4\xb8\xad\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4\n            self.sell_date = None\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x8d\x96\xe5\x87\xba\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8ckeep\xef\xbc\x9a\xe6\x8c\x81\xe6\x9c\x89\n            self.sell_type = \'keep\'\n            # \xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x8c\x81\xe6\x9c\x89\xe5\xa4\xa9\xe6\x95\xb0\n            self.keep_days = 0\n\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\n            self.sell_price = None\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\x8d\x96\xe5\x87\xba\xe9\xa2\x9d\xe5\xa4\x96\xe4\xbf\xa1\xe6\x81\xaf\n            self.sell_type_extra = \'\'\n\n            # \xe8\xae\xa2\xe5\x8d\x95\xe4\xb9\xb0\xe5\x85\xa5\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\n            self.ml_features = None\n            # \xe8\xae\xa2\xe5\x8d\x95\xe5\xbd\xa2\xe6\x88\x90\n            self.order_deal = True\n\n    def fit_sell_order(self, day_ind, factor_object):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe5\xbd\x93\xe5\xbd\x93\xe5\xa4\xa9\xe6\x95\xb0\xe6\x8d\xae\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe6\x8b\x9f\xe5\x90\x88\xe8\xae\xa1\xe7\xae\x97\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe5\xae\x8c\xe6\x88\x90\xe8\xae\xa2\xe5\x8d\x95\n        :param day_ind: \xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\x91\xe7\x94\x9f\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x8c\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94self.kl_pd.key\n        :param factor_object: AbuFactorSellBase\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe4\xbe\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n\n        if self.sell_type != \'keep\':\n            # \xe4\xbf\x9d\xe8\xaf\x81\xe5\xa4\x96\xe9\x83\xa8\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x87\xe6\xbb\xa4\xe5\x8d\x95\xe5\xad\x90\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe8\x87\xaa\xe5\xb7\xb1\xe8\xbf\x87\xe6\xbb\xa4\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x8d\x96\xe5\x87\xba\xe6\x88\x90\xe4\xba\xa4\xe7\x9a\x84\xe8\xae\xa2\xe5\x8d\x95\n            return\n\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x88\xe6\x88\x90, \xe4\xbb\xa5\xe5\x8f\x8aump\xe6\x8b\xa6\xe6\x88\xaa\xe5\x8d\x96\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xba\n        if factor_object.make_sell_order(self, day_ind):\n            kl_pd_sell = factor_object.kl_pd.iloc[day_ind + 1]\n\n            # \xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x86\xb3\xe7\xad\x96\xe7\xb1\xbb\n            slippage_class = factor_object.slippage_class\n            # \xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x90\x8d\xe7\xa7\xb0\n            factor_name = factor_object.factor_name if hasattr(factor_object, \'factor_name\') else \'unknown\'\n            # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe6\x97\xa5\xe5\x86\x85\xe6\xbb\x91\xe7\x82\xb9\xe5\x86\xb3\xe7\xad\x96\xe7\xb1\xbb\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xb7\xe4\xbd\x93\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x86\xb3\xe7\xad\x96\n            sell_price = slippage_class(kl_pd_sell, factor_name).fit()\n\n            if sell_price == -np.inf:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x96\xe5\x87\xba\xe6\x89\xa7\xe8\xa1\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe8\xb4\x9f\xe6\x97\xa0\xe7\xa9\xb7\xe8\xaf\xb4\xe6\x98\x8e\xe6\x97\xa0\xe6\xb3\x95\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe4\xbe\x8b\xe5\xa6\x82\xe8\xb7\x8c\xe5\x81\x9c\n                return\n\n            self.sell_price = sell_price\n            # \xe5\x8d\x96\xe5\x87\xba\xe5\x8e\x9f\xe5\x9b\xa0\xe5\x85\xb6\xe5\xae\x83\xe6\x8f\x8f\xe8\xbf\xb0\n            sell_type_extra = factor_object.sell_type_extra if hasattr(factor_object, \'sell_type_extra\') else \'unknown\'\n            self.sell_type_extra = sell_type_extra\n            if self.buy_type_str == \'call\':\n                # call\xe5\x8d\x96\xe5\x87\xba\xe7\xb1\xbb\xe5\x9e\x8b:  win = self.sell_price > self.buy_price\n                self.sell_type = \'win\' if self.sell_price > self.buy_price else \'loss\'\n            else:\n                # put\xe5\x8d\x96\xe5\x87\xba\xe7\xb1\xbb\xe5\x9e\x8b:  loss = self.sell_price > self.buy_price\n                self.sell_type = \'loss\' if self.sell_price > self.buy_price else \'win\'\n            # \xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xe5\x86\x99\xe5\x85\xa5\xe5\x8d\x95\xe5\xad\x90\n            self.sell_date = int(kl_pd_sell.date)\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9abuy_symbol\xef\xbc\x8c buy_price\xef\xbc\x8c buy_cnt\xef\xbc\x8c buy_date\xef\xbc\x8cbuy_factor\xef\xbc\x8csell_date\xef\xbc\x8csell_type\xef\xbc\x8c sell_price""""""\n        return \'buy Symbol = \' + str(self.buy_symbol) + \'\\n\' \\\n               + \'buy Prices = \' + str(self.buy_price) + \'\\n\' \\\n               + \'buy cnt = \' + str(self.buy_cnt) + \'\\n\' \\\n               + \'buy date = \' + str(self.buy_date) + \'\\n\' \\\n               + \'buy factor = \' + str(self.buy_factor) + \'\\n\' \\\n               + \'sell date = \' + str(self.sell_date) + \'\\n\' \\\n               + \'sell type = \' + str(self.sell_type) + \'\\n\' \\\n               + \'sell Price = \' + str(self.sell_price) + \'\\n\'\n\n    __repr__ = __str__\n'"
abupy/TradeBu/ABuTradeDrawer.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xba\xa4\xe6\x98\x93\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport copy\n\nimport logging\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu import ABuDateUtil\nfrom ..UtilBu.ABuProgress import AbuProgress\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import range\nfrom ..TradeBu.ABuCapital import AbuCapital\n\ng_enable_his_corr = True\ng_enable_his_trade = True\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef plot_his_trade(orders, kl_pd):\n    """"""\n    \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x98\xe5\x88\xb6AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe7\x94\x9f\xe6\x95\x88\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x89\n    :param orders: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :return:\n    """"""\n\n    if not g_enable_his_trade:\n        return\n\n    # \xe6\x8b\xbf\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe5\xbd\x93\xe5\x89\x8d\xe4\xbb\xb7\xe6\xa0\xbc\n    now_price = kl_pd.iloc[-1].close\n    all_pd = kl_pd\n\n    # ipython\xe7\x8e\xaf\xe5\xa2\x83\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xef\xbc\x8c\xe6\x99\xae\xe9\x80\x9apython\xe7\x8e\xaf\xe5\xa2\x83\xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x80\xe4\xb8\xaashow\xe4\xb8\x80\xe4\xb8\xaa\n    draw_multi_ax = ABuEnv.g_is_ipython\n\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe7\xbb\x98\xe5\x88\xb6\xe7\x8e\xaf\xe5\xa2\x83\xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe6\x95\xb0\xe9\x87\x8f\n    ax_cnt = 1 if not draw_multi_ax else len(orders)\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe6\x95\xb0\xe9\x87\x8f\xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xbb\xe5\xb8\x83\xe5\xa4\xa7\xe5\xb0\x8f\n    plt.figure(figsize=(14, 8 * ax_cnt))\n    fig_dims = (ax_cnt, 1)\n\n    with AbuProgress(len(orders), 0) as pg:\n        for index, order in enumerate(orders):\n            pg.show(index + 1)\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x89\x80\xe6\x9c\x89orders\xef\xbc\x8c\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaaAbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x86\xe8\x8a\x82\n            mask_date = all_pd[\'date\'] == order.buy_date\n            st_key = all_pd[mask_date][\'key\']\n\n            if order.sell_type == \'keep\':\n                rv_pd = all_pd.iloc[st_key.values[0]:, :]\n            else:\n                mask_sell_date = all_pd[\'date\'] == order.sell_date\n                st_sell_key = all_pd[mask_sell_date][\'key\']\n                rv_pd = all_pd.iloc[st_key.values[0]:st_sell_key.values[0], :]\n\n            if draw_multi_ax:\n                # ipython\xe7\x8e\xaf\xe5\xa2\x83\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\n                plt.subplot2grid(fig_dims, (index, 0))\n            # \xe7\xbb\x98\xe5\x88\xb6\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9b\xb2\xe7\xba\xbf\n            plt.plot(all_pd.index, all_pd[\'close\'], label=\'close\')\n\n            try:\n                # \xe5\xa1\xab\xe5\x85\x85\xe9\x80\x8f\xe6\x98\x8eblue, \xe9\x92\x88\xe5\xaf\xb9\xe7\x94\xa8\xe6\x88\xb7\xe4\xb8\x80\xe4\xba\x9b\xe7\x89\x88\xe6\x9c\xac\xe5\x85\xbc\xe5\xae\xb9\xe9\x97\xae\xe9\xa2\x98\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\n                plt.fill_between(all_pd.index, 0, all_pd[\'close\'], color=\'blue\', alpha=.18)\n                if order.sell_type == \'keep\':\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x95\xe5\xad\x90\xe8\xbf\x98\xe6\xb2\xa1\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6win\xe4\xbd\xbf\xe7\x94\xa8now_price\xe4\xbb\xa3\xe6\x9b\xbfsell_price\xef\xbc\x8c\xe9\x9c\x80\xef\xbc\x8a\xe5\x8d\x95\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe7\x9a\x84\xe7\x9b\x88\xe5\x88\xa9\xe6\x96\xb9\xe5\x90\x91\n                    order_win = (now_price - order.buy_price) * order.expect_direction > 0\n                elif order.sell_type == \'win\':\n                    order_win = True\n                else:\n                    order_win = False\n                if order_win:\n                    # \xe7\x9b\x88\xe5\x88\xa9\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe7\xba\xa2\xe8\x89\xb2\n                    plt.fill_between(rv_pd.index, 0, rv_pd[\'close\'], color=\'red\', alpha=.38)\n                else:\n                    # \xe4\xba\x8f\xe6\x8d\x9f\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbb\xbf\xe8\x89\xb2\n                    plt.fill_between(rv_pd.index, 0, rv_pd[\'close\'], color=\'green\', alpha=.38)\n            except:\n                logging.debug(\'fill_between numpy type not safe!\')\n            # \xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\xa0\x87\xe7\xad\xbe\n            buy_date_fmt = ABuDateUtil.str_to_datetime(str(order.buy_date), \'%Y%m%d\')\n            buy_tip = \'buy_price:{:.2f}\'.format(order.buy_price)\n\n            # \xe5\x86\x99\xe4\xb9\xb0\xe5\x85\xa5tip\xe4\xbf\xa1\xe6\x81\xaf\n            plt.annotate(buy_tip, xy=(buy_date_fmt, all_pd[\'close\'].asof(buy_date_fmt) * 2 / 5),\n                         xytext=(buy_date_fmt, all_pd[\'close\'].asof(buy_date_fmt)),\n                         arrowprops=dict(facecolor=\'red\'),\n                         horizontalalignment=\'left\', verticalalignment=\'top\')\n\n            if order.sell_price is not None:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x95\xe5\xad\x90\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x85\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\xa0\x87\xe7\xad\xbe\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbd\xbf\xe7\x94\xa8sell_price\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe9\x9c\x80\xef\xbc\x8a\xe5\x8d\x95\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe7\x9a\x84\xe7\x9b\x88\xe5\x88\xa9\xe6\x96\xb9\xe5\x90\x91\n                sell_date_fmt = ABuDateUtil.str_to_datetime(str(order.sell_date), \'%Y%m%d\')\n                pft = (order.sell_price - order.buy_price) * order.buy_cnt * order.expect_direction\n                sell_tip = \'sell price:{:.2f}, profit:{:.2f}\'.format(order.sell_price, pft)\n            else:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x95\xe5\xad\x90\xe6\x9c\xaa\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe5\x85\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\xa0\x87\xe7\xad\xbe\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbd\xbf\xe7\x94\xa8now_price\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe9\x9c\x80\xef\xbc\x8a\xe5\x8d\x95\xe5\xad\x90\xe6\x9c\x9f\xe6\x9c\x9b\xe7\x9a\x84\xe7\x9b\x88\xe5\x88\xa9\xe6\x96\xb9\xe5\x90\x91\n                sell_date_fmt = ABuDateUtil.str_to_datetime(str(all_pd[-1:][\'date\'][0]), \'%Y%m%d\')\n                pft = (now_price - order.buy_price) * order.buy_cnt * order.expect_direction\n                sell_tip = \'now price:{:.2f}, profit:{:.2f}\'.format(now_price, pft)\n\n            # \xe5\x86\x99\xe5\x8d\x96\xe5\x87\xbatip\xe4\xbf\xa1\xe6\x81\xaf\n            plt.annotate(sell_tip, xy=(sell_date_fmt, all_pd[\'close\'].asof(sell_date_fmt) * 2 / 5),\n                         xytext=(sell_date_fmt, all_pd[\'close\'].asof(sell_date_fmt)),\n                         arrowprops=dict(facecolor=\'green\'),\n                         horizontalalignment=\'left\', verticalalignment=\'top\')\n            # \xe5\x86\x99\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe4\xbf\xa1\xe6\x81\xaf\n            plt.annotate(order.sell_type_extra, xy=(buy_date_fmt, all_pd[\'close\'].asof(sell_date_fmt) / 4),\n                         xytext=(buy_date_fmt, all_pd[\'close\'].asof(sell_date_fmt) / 4),\n                         arrowprops=dict(facecolor=\'yellow\'),\n                         horizontalalignment=\'left\', verticalalignment=\'top\')\n\n            # \xe5\x86\x99\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xbf\xa1\xe6\x81\xaf\n            if order.buy_factor is not None:\n                plt.annotate(order.buy_factor, xy=(buy_date_fmt, all_pd[\'close\'].asof(sell_date_fmt) / 3),\n                             xytext=(buy_date_fmt, all_pd[\'close\'].asof(sell_date_fmt) / 3),\n                             arrowprops=dict(facecolor=\'yellow\'),\n                             horizontalalignment=\'left\', verticalalignment=\'top\')\n            # title\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97symbol\n            plt.title(order.buy_symbol)\n            if not draw_multi_ax:\n                # ipython\xe7\x8e\xaf\xe5\xa2\x83\xe7\xbb\x98\xe5\x88\xb6\xe5\x9c\xa8\xe5\xa4\x9a\xe4\xb8\xaa\xe5\xad\x90\xe7\x94\xbb\xe5\xb8\x83\xe4\xb8\x8a\xef\xbc\x8c\xe6\x99\xae\xe9\x80\x9apython\xe7\x8e\xaf\xe5\xa2\x83\xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x80\xe4\xb8\xaashow\xe4\xb8\x80\xe4\xb8\xaa\n                plt.show()\n\n    plt.show()\n\n\ndef plot_capital_info(capital_pd, init_cash=-1):\n    """"""\n    \xe8\xb5\x84\xe9\x87\x91\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param capital_pd: AbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85AbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84capital_pd\n    :param init_cash: \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96cash\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9ccapital_pd\xe4\xb8\xbaAbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8ecapital_pd\xe8\x8e\xb7\xe5\x8f\x96\n    """"""\n\n    if isinstance(capital_pd, AbuCapital):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafAbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\n        init_cash = capital_pd.read_cash\n        capital_pd = capital_pd.capital_pd\n\n    plt.figure(figsize=(14, 8))\n    if init_cash != -1:\n        cb_earn = capital_pd[\'capital_blance\'] - init_cash\n        try:\n            # \xe4\xbb\x8e\xe6\x9c\x89\xe8\xb5\x84\xe9\x87\x91\xe5\x8f\x98\xe5\x8c\x96\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84loc\xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x98\xe5\x88\xb6\n            # noinspection PyUnresolvedReferences\n            cb_earn = cb_earn.loc[cb_earn[cb_earn != 0].index[0]:]\n            cb_earn.plot()\n            plt.title(\'capital_blance earn from none zero point\')\n            plt.show()\n            sns.regplot(x=np.arange(0, cb_earn.shape[0]), y=cb_earn.values, marker=\'+\')\n            plt.show()\n        except Exception as e:\n            logging.exception(e)\n            capital_pd[\'capital_blance\'].plot()\n            plt.title(\'capital blance\')\n            plt.show()\n\n    # \xe4\xb8\xba\xe4\xba\x86\xe7\x94\xbb\xe5\x87\xba\xe5\xb9\xb3\xe6\xbb\x91\xe7\x9a\x84\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe5\x8f\x96\xe6\x9c\x89\xe5\x80\xbc\xe7\x9a\x84\n    cap_cp = copy.deepcopy(capital_pd)\n    cap_cp[\'stocks_blance\'][cap_cp[\'stocks_blance\'] <= 0] = np.nan\n    cap_cp[\'stocks_blance\'].fillna(method=\'pad\', inplace=True)\n    cap_cp[\'stocks_blance\'].dropna(inplace=True)\n    cap_cp[\'stocks_blance\'].plot()\n    plt.title(\'stocks blance\')\n    plt.show()\n\n    try:\n        sns.distplot(capital_pd[\'capital_blance\'], kde_kws={""lw"": 3, ""label"": ""capital blance kde""})\n        plt.show()\n    except Exception as e:\n        logging.debug(e)\n        capital_pd[\'capital_blance\'].plot(kind=\'kde\')\n        plt.title(\'capital blance kde\')\n        plt.show()\n\n\ndef plot_bk_xd(bk_summary, kl_pd_xd_mean, title=None):\n    """"""\xe6\xa0\xb9\xe6\x8d\xae\xe6\x9c\x89bk_summary\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84bk\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\xa0\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x9c\xaa\xe8\xbf\x81\xe7\xa7\xbb\xe5\xae\x8c\xe6\x88\x90""""""\n    plt.figure()\n    plt.plot(list(range(0, len(kl_pd_xd_mean))), kl_pd_xd_mean[\'close\'])\n    for bk in bk_summary.bk_xd_obj_list:\n        plt.hold(True)\n        pc = \'r\' if bk.break_sucess is True else \'g\'\n        plt.plot(bk.break_index, kl_pd_xd_mean[\'close\'][bk.break_index], \'ro\', markersize=12, markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=pc)\n    if title is not None:\n        plt.title(title)\n    plt.grid(True)\n\n\ndef plot_kp_xd(kp_summary, kl_pd_xd_mean, title=None):\n    """"""\xe6\xa0\xb9\xe6\x8d\xae\xe6\x9c\x89bk_summary\xe5\xb1\x9e\xe6\x80\xa7\xe7\x9a\x84kp\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\xa0\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x9c\xaa\xe8\xbf\x81\xe7\xa7\xbb\xe5\xae\x8c\xe6\x88\x90""""""\n    plt.figure()\n    plt.plot(list(range(0, len(kl_pd_xd_mean))), kl_pd_xd_mean[\'close\'])\n\n    for kp in kp_summary.kp_xd_obj_list:\n        plt.hold(True)\n        plt.plot(kp.break_index, kl_pd_xd_mean[\'close\'][kp.break_index], \'ro\', markersize=8, markeredgewidth=1.5,\n                 markerfacecolor=\'None\', markeredgecolor=\'r\')\n\n    if title is not None:\n        plt.title(title)\n    plt.grid(True)\n'"
abupy/TradeBu/ABuTradeExecute.py,7,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xba\xa4\xe6\x98\x93\xe6\x89\xa7\xe8\xa1\x8c\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..UtilBu import ABuDateUtil, AbuProgress\nfrom ..TradeBu.ABuMLFeature import AbuMlFeature\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import map\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef calc_simple_profit(orders, kl_pd):\n    """"""\n    \xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8csimple\xe7\x9a\x84\xe6\x84\x8f\xe6\x80\x9d\xe6\x98\xaf\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\n    :param orders: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :return:\n    """"""\n    all_profit = 0\n    now_price = kl_pd[-1:].close\n    for order in orders:\n        if order.sell_type == \'keep\':\n            # \xe5\x8d\x95\xe5\xad\x90\xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x98\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8now_price\xe8\xae\xa1\xe7\xae\x97\xe6\x94\xb6\xe7\x9b\x8a\n            all_profit += (now_price - order.buy_price) * order.buy_cnt * order.expect_direction\n        else:\n            # \xe5\x8d\x95\xe5\xad\x90\xe5\xa6\x82\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8sell_price\xe8\xae\xa1\xe7\xae\x97\xe6\x94\xb6\xe7\x9b\x8a\n            all_profit += (order.sell_price - order.buy_price) * order.buy_cnt * order.expect_direction\n    return all_profit\n\n\ndef make_orders_pd(orders, kl_pd):\n    """"""\n    AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8corder_pd\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe8\xa1\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb8\x80\xe4\xb8\xaaAbuOrder\xe4\xbf\xa1\xe6\x81\xaf\n    :param orders: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    ret_orders_pd = None\n    for index, order in enumerate(orders):\n        # \xe8\xbf\xad\xe4\xbb\xa3order\xef\xbc\x8c\xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaaAbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        order_pd = pd.DataFrame(np.array([order.buy_date, order.buy_price, order.buy_cnt, order.buy_factor,\n                                          order.buy_symbol, order.buy_pos,\n                                          order.buy_type_str, order.expect_direction,\n                                          order.sell_type_extra, order.sell_date, order.sell_price, order.sell_type,\n                                          order.ml_features]).reshape(1, -1),\n                                index=[index],\n                                columns=[\'buy_date\', \'buy_price\', \'buy_cnt\', \'buy_factor\', \'symbol\', \'buy_pos\',\n                                         \'buy_type_str\', \'expect_direction\',\n                                         \'sell_type_extra\',\n                                         \'sell_date\',\n                                         \'sell_price\', \'sell_type\', \'ml_features\'])\n\n        # \xe4\xbb\x8e\xe5\x8e\x9f\xe5\xa7\x8b\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe6\x89\xbe\xe5\x88\xb0key\xef\xbc\x8c\xe8\xb5\x8b\xe4\xba\x88order_pd[\'key\']\n        mask = kl_pd[kl_pd[\'date\'] == order.buy_date]\n        order_pd[\'key\'] = mask[\'key\'].values[0]\n        # \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89order_pd concat\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        ret_orders_pd = order_pd if ret_orders_pd is None else pd.concat([ret_orders_pd, order_pd])\n\n    # \xe8\xbd\xac\xe6\x8d\xa2\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xa5\xbd\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84index\xe8\xb5\x8b\xe4\xba\x88\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    dates_fmt = list(map(lambda date: ABuDateUtil.fmt_date(date), ret_orders_pd[\'buy_date\'].tolist()))\n    dates_pd = pd.to_datetime(dates_fmt)\n    ret_orders_pd.index = dates_pd\n\n    # \xe6\x8a\x8a\xe9\x99\xa4\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xa4\x96\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x97\xe7\xb1\xbb\xe5\x9e\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x94\xaf\xe6\x8c\x81py3\n    ret_orders_pd[\'sell_price\'] = ret_orders_pd[\'sell_price\'].astype(float)\n    ret_orders_pd[\'sell_date\'] = ret_orders_pd[\'sell_date\'].fillna(0).astype(int)\n\n    ret_orders_pd[\'buy_price\'] = ret_orders_pd[\'buy_price\'].astype(float)\n    ret_orders_pd[\'buy_date\'] = ret_orders_pd[\'buy_date\'].astype(int)\n    ret_orders_pd[\'buy_cnt\'] = ret_orders_pd[\'buy_cnt\'].astype(float)\n    ret_orders_pd[\'expect_direction\'] = ret_orders_pd[\'expect_direction\'].astype(float)\n\n    # \xe8\xae\xa1\xe7\xae\x97\xe6\x94\xb6\xe7\x9b\x8a\n    c_ss = (ret_orders_pd[\'sell_price\'] - ret_orders_pd[\'buy_price\']) * ret_orders_pd[\n        \'buy_cnt\'] * ret_orders_pd[\'expect_direction\']\n    ret_orders_pd[\'profit\'] = np.round(c_ss.values, decimals=2)\n\n    # \xe5\x88\xa4\xe5\xae\x9a\xe5\x8d\x95\xe5\xad\x90\xe6\x9c\x80\xe7\xbb\x88\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\x88\xe5\x88\xa9 win\xef\xbc\x9a1\xef\xbc\x8closs\xef\xbc\x9a\xef\xbc\x8d1. keep\xef\xbc\x9a0\n    # noinspection PyTypeChecker\n    ret_orders_pd[\'result\'] = np.where(ret_orders_pd[\'sell_type\'] == \'win\', 1, -1)\n    # \xe9\x92\x88\xe5\xaf\xb9\xe8\xbf\x98\xe6\x98\xafkeep\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe7\xbd\xae0\n    # noinspection PyTypeChecker\n    ret_orders_pd[\'result\'] = np.where(ret_orders_pd[\'sell_type\'] == \'keep\', 0, ret_orders_pd[\'result\'])\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8d\x95\xe5\xad\x90\xe5\xbc\x80\xe5\x90\xaf\xe4\xba\x86\xe7\x89\xb9\xe5\xbe\x81\xe6\x94\xb6\xe9\x9b\x86\xef\xbc\x8c\xe5\xb0\x86\xe6\x94\xb6\xe9\x9b\x86\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xef\xbc\x8c\xe8\xaf\xa6\xe9\x98\x85\xe8\xaf\xbbAbuMlFeature\n    AbuMlFeature().unzip_ml_feature(ret_orders_pd)\n    return ret_orders_pd\n\n\ndef transform_action(orders_pd):\n    """"""\n    \xe5\xb0\x86\xe5\x9c\xa8make_orders_pd\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\x86\xe8\xa7\xa3\xef\xbc\x8c\xe5\x88\x86\xe6\x88\x90\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe5\x92\x8c\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\n    \xe6\x8c\x89\xe7\x85\xa7\xe4\xb9\xb0\xe5\x8d\x96\xe6\x97\xb6\xe9\x97\xb4\xe9\xa1\xba\xe5\xba\x8f\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe6\x9e\x84\xe9\x80\xa0\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe9\xa1\xba\xe5\xba\x8f\xe5\xba\x8f\xe5\x88\x97\n    :param orders_pd: \xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe9\xa1\xba\xe5\xba\x8f\xe5\xba\x8f\xe5\x88\x97 pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    # \xe4\xbb\x8eorder\xe4\xb8\xad\xe6\x91\x98\xe5\x87\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\n    buy_actions = orders_pd.loc[:, [\'buy_date\', \'buy_price\', \'buy_cnt\', \'symbol\', \'expect_direction\', \'sell_price\']]\n    # action = buy\n    buy_actions[\'action\'] = \'buy\'\n    # ACTION\xe5\x92\x8corder\xe9\x83\xbd\xe6\x9c\x89\xe7\x9a\x84action\xe4\xbd\xbf\xe7\x94\xa8\xe9\xa6\x96\xe5\xad\x97\xe6\xaf\x8d\xe5\xa4\xa7\xe5\x86\x99\xef\xbc\x8c\xe5\x86\x85\xe5\xae\xb9\xe5\xb0\x8f\xe5\x86\x99\xe5\x8c\xba\xe5\x88\x86\xe5\xbc\x80\n    buy_actions = buy_actions.rename(columns={\'buy_date\': \'Date\', \'buy_price\': \'Price\', \'buy_cnt\': \'Cnt\',\n                                              \'sell_price\': \'Price2\', \'expect_direction\': \'Direction\'})\n    buy_actions.index = np.arange(0, buy_actions.shape[0])\n\n    # \xe4\xbb\x8eorder\xe4\xb8\xad\xe6\x91\x98\xe5\x87\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\n    sell_actions = orders_pd.loc[:, [\'sell_date\', \'sell_price\', \'buy_cnt\', \'symbol\', \'expect_direction\', \'buy_price\']]\n    # action = sell\n    sell_actions[\'action\'] = \'sell\'\n    # action\xe5\x92\x8corder\xe9\x83\xbd\xe6\x9c\x89\xe7\x9a\x84action\xe4\xbd\xbf\xe7\x94\xa8\xe9\xa6\x96\xe5\xad\x97\xe6\xaf\x8d\xe5\xa4\xa7\xe5\x86\x99\xef\xbc\x8c\xe5\x86\x85\xe5\xae\xb9\xe5\xb0\x8f\xe5\x86\x99\xe5\x8c\xba\xe5\x88\x86\xe5\xbc\x80\n    sell_actions = sell_actions.rename(columns={\'sell_date\': \'Date\', \'sell_price\': \'Price\', \'buy_cnt\': \'Cnt\',\n                                                \'buy_price\': \'Price2\', \'expect_direction\': \'Direction\'})\n    sell_actions.index = np.arange(buy_actions.shape[0], buy_actions.shape[0] + sell_actions.shape[0])\n\n    # \xe6\x8a\x8a\xe4\xb9\xb0\xe5\x85\xa5\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe8\xbf\x9e\xe8\xb5\xb7\xe6\x9d\xa5\n    action_pd = pd.concat([buy_actions, sell_actions])\n\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x97\xb6\xe9\x97\xb4\xe5\x92\x8c\xe4\xb9\xb0\xe5\x8d\x96\xe8\xa1\x8c\xe4\xb8\xba\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe5\x8d\xb3\xe6\x9e\x84\xe6\x88\x90\xe6\x97\xb6\xe9\x97\xb4\xe8\xa1\x8c\xe4\xb8\xba\xe9\xa1\xba\xe5\xba\x8f\n    # noinspection PyUnresolvedReferences\n    action_pd = action_pd.sort_values([\'Date\', \'action\'])\n    action_pd.index = np.arange(0, action_pd.shape[0])\n    # action\xe4\xb8\xad\xe5\xb9\xb2\xe6\x8e\x89\xe6\x89\x80\xe6\x9c\x89keep\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90, \xe5\x8f\xaa\xe8\x80\x83\xe8\x99\x91Price\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3drop\xe5\x8d\x96\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xbaPrice\xe6\x98\xafnan\xe7\x9a\x84\n    action_pd = action_pd.dropna(subset=[\'Price\'])\n    # \xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe5\x85\x88\xe6\x8a\x8adate\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90int sort_values\n    action_pd[\'Date\'] = action_pd[\'Date\'].astype(int)\n    action_pd = action_pd.sort_values([\'Date\', \'action\'])\n    return action_pd\n\n\ndef apply_action_to_capital(capital, action_pd, kl_pd_manager, show_progress=True):\n    """"""\n    \xe5\xa4\x9a\xe4\xb8\xaa\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xbaaction_pd\xef\xbc\x8c\xe5\x9c\xa8\xe8\x80\x83\xe8\x99\x91\xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\xaf\xb9AbuCapital\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\n    \xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x88\xa4\xe5\xae\x9a\xe5\x9c\xa8\xe6\x9c\x89\xe9\x99\x90\xe8\xb5\x84\xe9\x87\x91\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x89\xa7\xe8\xa1\x8c\n    :param capital: \xe8\xb5\x84\xe9\x87\x91\xe7\xb1\xbbAbuCapital\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\xaf\xb9\xe8\xb1\xa1\n    :param action_pd: \xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param kl_pd_manager: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xae\xa1\xe7\x90\x86\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuKLManager\xe5\xae\x9e\xe4\xbe\x8b\n    :param show_progress: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4True\n    :return:\n    """"""\n    if action_pd.empty:\n        logging.info(\'apply_action_to_capital action_pd.empty!!!\')\n        return\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xba\xa4\xe6\x98\x93symbol\xe6\x95\xb0\xe9\x87\x8f > 10000\xe4\xb8\xaa\xe6\x98\xbe\xe7\xa4\xba\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    init_show_progress = (show_progress and len(set(action_pd.symbol)) > 10000)\n    # \xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x90\x84\xe4\xb8\xaasymbol\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe5\x88\x97\xef\xbc\x8c\xe6\x8c\x81\xe4\xbb\x93\xe4\xbb\xb7\xe5\x80\xbc\xe5\x88\x97\n    capital.apply_init_kl(action_pd, show_progress=init_show_progress)\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xba\xa4\xe6\x98\x93symbol\xe6\x95\xb0\xe9\x87\x8f > 1\xe4\xb8\xaa\xe6\x98\xbe\xe7\xa4\xbaapply\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    show_apply_act_progress = (show_progress and len(set(action_pd.symbol)) > 1)\n    # \xe5\xa4\x96\xe9\x83\xa8new\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xef\xbc\x8c\xe4\xb8\xba\xe4\xbd\xbf\xe7\x94\xa8apply\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbd\xbf\xe7\x94\xa8\n    with AbuProgress(len(action_pd), 0, label=\'capital.apply_action\') as progress:\n        # \xe9\x92\x88\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8cbuy\xef\xbc\x8csell\xe7\xbb\x86\xe8\x8a\x82\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe6\xb6\x89\xe5\x8f\x8a\xe6\x9c\x89\xe9\x99\x90\xe8\xb5\x84\xe9\x87\x91\xe6\x98\xaf\xe5\x90\xa6\xe6\x88\x90\xe4\xba\xa4\xe5\x88\xa4\xe5\xae\x9a\n        action_pd[\'deal\'] = action_pd.apply(capital.apply_action, axis=1,\n                                            args=(progress if show_apply_act_progress else None,))\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xba\xa4\xe6\x98\x93symbol\xe6\x95\xb0\xe9\x87\x8f > 1000\xe4\xb8\xaa\xe6\x98\xbe\xe7\xa4\xbaapply\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n    show_apply_kl = (show_progress and len(set(action_pd.symbol)) > 1000)\n    # \xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe4\xba\xa7\xe7\x94\x9f\xe7\x9a\x84\xe6\x8c\x81\xe4\xbb\x93\xe5\x88\x97\xef\xbc\x8c\xe6\x8c\x81\xe4\xbb\x93\xe4\xbb\xb7\xe5\x80\xbc\xe5\x88\x97\xe6\x9b\xb4\xe6\x96\xb0\xe8\xb5\x84\xe9\x87\x91\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\n    capital.apply_kl(action_pd, kl_pd_manager, show_progress=show_apply_kl)\n\n    # filter\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89\xe6\x8c\x81\xe4\xbb\x93\xe4\xbb\xb7\xe5\x80\xbc\xe5\x88\x97\n    stock_worths = capital.capital_pd.filter(regex=\'.*_worth\')\n    # \xe6\x89\x80\xe6\x9c\x89\xe6\x8c\x81\xe4\xbb\x93\xe4\xbb\xb7\xe5\x80\xbc\xe5\x88\x97\xe7\x9a\x84sum\xe5\xbd\xa2\xe6\x88\x90stocks_blance\xe5\x88\x97\n    capital.capital_pd[\'stocks_blance\'] = stock_worths.sum(axis=1)\n    # stocks_blance \xef\xbc\x8b cash_blance\xef\xbc\x88\xe7\x8e\xb0\xe9\x87\x91\xe4\xbd\x99\xe9\xa2\x9d\xef\xbc\x89\xef\xbc\x9d capital_blance\xef\xbc\x88\xe6\x80\xbb\xe8\xb5\x84\xe4\xba\xa7\xe4\xbb\xb7\xe5\x80\xbc\xef\xbc\x89\xe5\x88\x97\n    capital.capital_pd[\'capital_blance\'] = capital.capital_pd[\'stocks_blance\'] + capital.capital_pd[\'cash_blance\']\n'"
abupy/TradeBu/ABuTradeProxy.py,2,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xba\xa4\xe6\x98\x93\xe6\x89\xa7\xe8\xa1\x8c\xe4\xbb\xa3\xe7\x90\x86\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom contextlib import contextmanager\nfrom functools import total_ordering\nfrom enum import Enum\n\nimport numpy as np\nimport pandas as pd\n\nfrom . import ABuTradeDrawer\nfrom . import ABuTradeExecute\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass EOrderSameRule(Enum):\n    """"""\xe5\xaf\xb9order_pd\xe4\xb8\xad\xe5\xaf\xb9order\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99""""""\n\n    """"""order\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe5\xb0\xb1\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe7\x9b\xb8\xe5\x90\x8c""""""\n    ORDER_SAME_BD = 0\n    """"""order\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol, \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe6\x97\xa5\xe6\x9c\x9f\xe7\x9b\xb8\xe5\x90\x8c\xe5\xb0\xb1\xe7\x9b\xb8\xe5\x90\x8c""""""\n    ORDER_SAME_BSD = 1\n    """"""order\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol, \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8d\x95\xe5\xad\x90\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe9\x83\xbd\xe7\x9b\xb8\xe5\x90\x8c""""""\n    ORDER_SAME_BDP = 2\n    """"""order\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol, \xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f, \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc, \xe5\xb9\xb6\xe4\xb8\x94\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x89\x8d\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe5\x88\xbb\xe9\x83\xbd\xe7\x9b\xb8\xe5\x90\x8c""""""\n    ORDER_SAME_BSPD = 3\n\n\n@total_ordering\nclass AbuOrderPdProxy(object):\n    """"""\n        \xe5\x8c\x85\xe8\xa3\x85\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8debug\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe4\xba\xa4\xe6\x98\x93\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\n        \xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\xa4\xe4\xb8\xaaorders_pd\xe7\x9a\x84\xe5\xb9\xb6\xe9\x9b\x86\xef\xbc\x8c\xe4\xba\xa4\xe9\x9b\x86\xef\xbc\x8c\xe5\xb7\xae\xe9\x9b\x86\xef\xbc\x8c\xe7\xb1\xbb\xe4\xbc\xbcset\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe5\x90\x8c\xe6\x97\xb6\xe6\x94\xaf\xe6\x8c\x81\xe7\x9b\xb8\xe7\xad\x89\xef\xbc\x8c\xe4\xb8\x8d\xe7\xad\x89\xef\xbc\x8c\xe5\xa4\xa7\xe4\xba\x8e\xef\xbc\x8c\xe5\xb0\x8f\xe4\xba\x8e\n        \xe7\x9a\x84\xe6\xaf\x94\xe8\xbe\x83\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8ceg\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n            orders_pd1 = AbuOrderPdProxy(orders_pd1)\n            with orders_pd1.proxy_work(orders_pd2) as (order1, order2):\n                a = order1 | order2 # \xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xb9\xb6\xe9\x9b\x86\n                b = order1 & order2 # \xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe4\xba\xa4\xe9\x9b\x86\n                c = order1 - order2 # \xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xb7\xae\xe9\x9b\x86(\xe5\x9c\xa8order1\xe4\xb8\xad\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\x8d\xe5\x9c\xa8order2\xe4\xb8\xad)\n                d = order2 - order1 # \xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\xb7\xae\xe9\x9b\x86(\xe5\x9c\xa8order2\xe4\xb8\xad\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\x8d\xe5\x9c\xa8order1\xe4\xb8\xad)\n                eq = order1 == order2 # \xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\n                lg = order1 > order2 # order1\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xe6\x98\xaf\xe5\x90\xa6\xe5\xa4\xa7\xe4\xba\x8eorder2\n                lt = order1 < order2 # order1\xe5\x94\xaf\xe4\xb8\x80\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x8f\xe4\xba\x8eorder2\n    """"""\n\n    def __init__(self, orders_pd, same_rule=EOrderSameRule.ORDER_SAME_BSPD):\n        """"""\n        \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x87\xbd\xe6\x95\xb0\xe9\x9c\x80\xe8\xa6\x81pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x9c\xaa\xe5\x81\x9a\xe7\xb1\xbb\xe5\x9e\x8b\xe6\xa3\x80\xe6\xb5\x8b\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param same_rule: order\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99, \xe9\xbb\x98\xe8\xae\xa4EOrderSameRule.ORDER_SAME_BSPD\n                          \xe5\x8d\xb3\xef\xbc\x9aorder\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x89\x8d\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe7\x9b\xb8\xe5\x90\x8c\n        """"""\n        # \xe9\x9c\x80\xe8\xa6\x81copy\xe5\x9b\xa0\xe4\xb8\xba\xe4\xbc\x9a\xe6\xb7\xbb\xe5\x8a\xa0orders_pd\xe7\x9a\x84\xe5\x88\x97\xe5\xb1\x9e\xe6\x80\xa7\xe7\xad\x89\n        self.orders_pd = orders_pd.copy()\n        self.same_rule = same_rule\n        # \xe5\xb9\xb6\xe9\x9b\x86, \xe4\xba\xa4\xe9\x9b\x86, \xe5\xb7\xae\xe9\x9b\x86\xe8\xbf\x90\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe5\xad\x98\xe5\x82\xa8\n        self.op_result = None\n        self.last_op_metrics = {}\n\n    @contextmanager\n    def proxy_work(self, orders_pd):\n        """"""\n        \xe4\xbc\xa0\xe4\xba\xba\xe9\x9c\x80\xe8\xa6\x81\xe6\xaf\x94\xe8\xbe\x83\xe7\x9a\x84orders_pd\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0ABuOrderPdProxy\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xbd\xbf\xe7\x94\xa8\xe8\x80\x85\xef\xbc\x8c\n        \xe5\xaf\xb9op_result\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe5\x88\x86\xe6\x9e\x90\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return:\n        """"""\n\n        # \xe8\xbf\x90\xe7\xae\x97\xe9\x9b\x86\xe7\xbb\x93\xe6\x9e\x9c\xe9\x87\x8d\xe7\xbd\xae\n        self.op_result = None\n        # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe6\xaf\x94\xe8\xbe\x83\xe7\x9a\x84ABuOrderPdProxy\xe5\xaf\xb9\xe8\xb1\xa1\n        other = AbuOrderPdProxy(orders_pd)\n        try:\n            yield self, other\n        finally:\n            if isinstance(self.op_result, pd.DataFrame):\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\xb9\xb6\xe9\x9b\x86, \xe4\xba\xa4\xe9\x9b\x86, \xe5\xb7\xae\xe9\x9b\x86\xe8\xbf\x90\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe5\xad\x98\xe5\x82\xa8\xef\xbc\x8c\n                from ..MetricsBu.ABuMetricsBase import AbuMetricsBase\n                metrics = AbuMetricsBase(self.op_result, None, None, None)\n                metrics.fit_metrics_order()\n\n                self.last_op_metrics[\'win_rate\'] = metrics.win_rate\n                self.last_op_metrics[\'gains_mean\'] = metrics.gains_mean\n                self.last_op_metrics[\'losses_mean\'] = metrics.losses_mean\n                self.last_op_metrics[\'sum_profit\'] = self.op_result[\'profit\'].sum()\n                self.last_op_metrics[\'sum_profit_cg\'] = self.op_result[\'profit_cg\'].sum()\n\n    def __and__(self, other):\n        """""" & \xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6\xe7\x9a\x84\xe9\x87\x8d\xe8\xbd\xbd\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe9\x9b\x86\xe7\x9a\x84\xe4\xba\xa4\xe9\x9b\x86""""""\n        # self.op = \'intersection(order1 & order2)\'\n        self.op_result = intersection_in_2orders(self.orders_pd, other.orders_pd, same_rule=self.same_rule)\n        return self.op_result\n\n    def __or__(self, other):\n        """""" | \xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6\xe7\x9a\x84\xe9\x87\x8d\xe8\xbd\xbd\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe9\x9b\x86\xe7\x9a\x84\xe5\xb9\xb6\xe9\x9b\x86""""""\n        # self.op = \'union(order1 | order2)\'\n        self.op_result = union_in_2orders(self.orders_pd, other.orders_pd)\n        return self.op_result\n\n    def __sub__(self, other):\n        """""" - \xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6\xe7\x9a\x84\xe9\x87\x8d\xe8\xbd\xbd\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe9\x9b\x86\xe7\x9a\x84\xe5\xb7\xae\xe9\x9b\x86""""""\n        self.op_result = difference_in_2orders(self.orders_pd, other.orders_pd, same_rule=self.same_rule)\n        return self.op_result\n\n    def __eq__(self, other):\n        """""" == \xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6\xe7\x9a\x84\xe9\x87\x8d\xe8\xbd\xbd\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe9\x9b\x86\xe7\x9a\x84\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c""""""\n        return (self - other).empty and (other - self).empty\n\n    def __gt__(self, other):\n        """""" > \xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6\xe7\x9a\x84\xe9\x87\x8d\xe8\xbd\xbd\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe9\x9b\x86\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f, \xe7\xb1\xbb\xe8\xa2\xabtotal_ordering\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x94\xaf\xe6\x8c\x81lt\xe7\xad\x89\xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6""""""\n        unique_cnt = find_unique_group_symbol(self.orders_pd).shape[0]\n        other_unique_cnt = find_unique_group_symbol(other.orders_pd).shape[0]\n        return unique_cnt > other_unique_cnt\n\n\ndef union_in_2orders(orders_pd, other_orders_pd):\n    """"""\n    \xe5\xb9\xb6\xe9\x9b\x86\xef\xbc\x9a\xe5\x88\x86\xe6\x9e\x90\xe5\x9b\xa0\xe5\xad\x90\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x82\xe6\x95\xb0\xe9\x97\xae\xe9\xa2\x98\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cdebug\xe7\xad\x96\xe7\x95\xa5\xe9\x97\xae\xe9\xa2\x98\xe6\x97\xb6\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe4\xb8\xa4\xe4\xb8\xaaorders_pd\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\n    \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe8\xae\xa4\xe4\xb8\xba\xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe4\xb8\xa4\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe5\xb0\xb1\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xa4\xe4\xb8\xaaorders_pd\xe5\x90\x88\xe5\xb9\xb6\n    \xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8drop_duplicates\xe5\x81\x9a\xe4\xba\x86\xe5\x8e\xbb\xe9\x99\xa4\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84order\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba\xe5\xb9\xb6\xe9\x9b\x86\xef\xbc\x9a\n    orders_pd | cmp_orders_pd\xe6\x88\x96orders_pd.union(cmp_orders_pd)\n    :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param other_orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: orders_pd | cmp_orders_pd\n    """"""\n    orders_pd = orders_pd.append(other_orders_pd)\n    orders_pd = orders_pd.drop_duplicates()\n    return orders_pd\n\n\ndef _same_pd(order, other_orders_pd, same_rule):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaesame_rule\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99\xe4\xbb\x8eorders_pd\xe5\x92\x8cother_orders_pd\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84df\n\n    :param order: orders_pd\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x80\xe8\xa1\x8corder\xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0\xe6\x8d\xae\n    :param other_orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param same_rule: order\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99\n    :return: \xe4\xbb\x8eorders_pd\xe5\x92\x8cother_orders_pd\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84df\n    """"""\n    symbol = order.symbol\n    buy_day = order[\'buy_date\']\n    buy_price = order[\'buy_price\']\n\n    sell_day = order[\'sell_date\']\n    sell_price = order[\'sell_price\']\n\n    if same_rule == EOrderSameRule.ORDER_SAME_BD:\n        # \xe5\x8f\xaa\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5symbol\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe5\x8d\xb3\xe8\xae\xa4\xe4\xb8\xba\xe5\x9c\xa8\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb9\xb0\xe5\x85\xa5\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe4\xb8\xa4\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe5\xb0\xb1\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\xbf\xbd\xe7\x95\xa5\xe5\x85\xb6\xe5\xae\x83\xe6\x89\x80\xe6\x9c\x89order\xe4\xb8\xad\xe7\x9a\x84\xe5\x9b\xa0\xe7\xb4\xa0\n        same_pd = other_orders_pd[(other_orders_pd[\'symbol\'] == symbol) & (other_orders_pd[\'buy_date\'] == buy_day)]\n    elif same_rule == EOrderSameRule.ORDER_SAME_BSD:\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5symbol\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\n        same_pd = other_orders_pd[(other_orders_pd[\'symbol\'] == symbol) & (other_orders_pd[\'buy_date\'] == buy_day)\n                                  & (other_orders_pd[\'sell_date\'] == sell_day)]\n    elif same_rule == EOrderSameRule.ORDER_SAME_BDP:\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5symbol\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\n        same_pd = other_orders_pd[(other_orders_pd[\'symbol\'] == symbol) & (other_orders_pd[\'buy_date\'] == buy_day)\n                                  & (other_orders_pd[\'buy_price\'] == buy_price)]\n    elif same_rule == EOrderSameRule.ORDER_SAME_BSPD:\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xb6\xe9\x97\xb4, \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x92\x8c\xe5\x8d\x96\xe5\x87\xba\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5symbol\xe7\xa1\xae\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\n        same_pd = other_orders_pd[(other_orders_pd[\'symbol\'] == symbol) & (other_orders_pd[\'buy_date\'] == buy_day)\n                                  & (other_orders_pd[\'sell_date\'] == sell_day)\n                                  & (other_orders_pd[\'buy_price\'] == buy_price)\n                                  & (other_orders_pd[\'sell_price\'] == sell_price)]\n    else:\n        raise TypeError(\'same_rule type is {}!!\'.format(same_rule))\n    return same_pd\n\n\ndef intersection_in_2orders(orders_pd, other_orders_pd, same_rule=EOrderSameRule.ORDER_SAME_BSPD):\n    """"""\n    \xe4\xba\xa4\xe9\x9b\x86: \xe5\x88\x86\xe6\x9e\x90\xe5\x9b\xa0\xe5\xad\x90\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x82\xe6\x95\xb0\xe9\x97\xae\xe9\xa2\x98\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cdebug\xe7\xad\x96\xe7\x95\xa5\xe9\x97\xae\xe9\xa2\x98\xe6\x97\xb6\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe4\xb8\xa4\xe4\xb8\xaaorders_pd\xe4\xb8\xad\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\n    \xe5\x8d\xb3\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba\xe4\xba\xa4\xe9\x9b\x86\xef\xbc\x9aorders_pd & cmp_orders_pd\xe6\x88\x96orders_pd.intersection(cmp_orders_pd)\n    :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param other_orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param same_rule: order\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99, \xe9\xbb\x98\xe8\xae\xa4EOrderSameRule.ORDER_SAME_BSPD\n                          \xe5\x8d\xb3\xef\xbc\x9aorder\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x89\x8d\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe7\x9b\xb8\xe5\x90\x8c\n    :return: orders_pd & cmp_orders_pd\n    """"""\n    def _intersection(order):\n        same_pd = _same_pd(order, other_orders_pd, same_rule)\n        if same_pd.empty:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe7\xa9\xba\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe4\xb8\x8d\xe7\x9b\xb8\xe4\xba\xa4\n            return False\n        # \xe7\x9b\xb8\xe4\xba\xa4, intersection=1\xef\xbc\x8c\xe6\x98\xaf\xe4\xba\xa4\xe9\x9b\x86\n        return True\n\n    orders_pd[\'intersection\'] = orders_pd.apply(_intersection, axis=1)\n    return orders_pd[orders_pd[\'intersection\'] == 1]\n\n\ndef difference_in_2orders(orders_pd, other_orders_pd, same_rule=EOrderSameRule.ORDER_SAME_BSPD):\n    """"""\n    \xe5\xb7\xae\xe9\x9b\x86: \xe5\x88\x86\xe6\x9e\x90\xe5\x9b\xa0\xe5\xad\x90\xe6\x88\x96\xe8\x80\x85\xe5\x8f\x82\xe6\x95\xb0\xe9\x97\xae\xe9\xa2\x98\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8cdebug\xe7\xad\x96\xe7\x95\xa5\xe9\x97\xae\xe9\xa2\x98\xe6\x97\xb6\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe4\xb8\xa4\xe4\xb8\xaaorders_pd\xe7\x9a\x84\xe4\xb8\x8d\xe5\x90\x8c\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\n    \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe5\xad\x98\xe5\x9c\xa8orders_pd\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe4\xbd\x86\xe4\xb8\x8d\xe5\x9c\xa8cmp_orders_pd\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe5\x8d\xb3\xe7\xbb\x93\xe6\x9e\x9c\n    \xe4\xb8\xba\xe5\xb7\xae\xe9\x9b\x86\xef\xbc\x9aorders_pd - cmp_orders_pd\xe6\x88\x96orders_pd.difference(cmp_orders_pd)\n    :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param other_orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param same_rule: order\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99, \xe9\xbb\x98\xe8\xae\xa4EOrderSameRule.ORDER_SAME_BSPD\n                      \xe5\x8d\xb3\xef\xbc\x9aorder\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x89\x8d\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe7\x9b\xb8\xe5\x90\x8c\n    :return: orders_pd - cmp_orders_pd\n    """"""\n\n    def _difference(order):\n        same_pd = _same_pd(order, other_orders_pd, same_rule)\n        if same_pd.empty:\n            # \xe6\xb2\xa1\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\xaf\xb4\xe6\x98\x8e\xe6\x98\xaf\xe5\xb7\xae\xe9\x9b\x86\n            return True\n        # \xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe8\xaf\xb4\xe6\x98\x8e\xe4\xb8\x8d\xe6\x98\xaf\xe5\xb7\xae\xe9\x9b\x86\n        return False\n\n    orders_pd[\'difference\'] = orders_pd.apply(_difference, axis=1)\n    return orders_pd[orders_pd[\'difference\'] == 1]\n\n\ndef find_unique_group_symbol(order_pd):\n    """"""\n    \xe6\x8c\x89\xe7\x85\xa7\'buy_date\', \'symbol\'\xe5\x88\x86\xe7\xbb\x84\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89\xe7\xbb\x84\xe9\x87\x8c\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaasame_group.iloc[0]\n    :param order_pd:\n    :return:\n    """"""\n\n    def _find_unique_group_symbol(same_group):\n        # \xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89\xe7\xbb\x84\xe9\x87\x8c\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa, \xe5\x8d\xb3\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xef\xbc\x8c\xe5\xaf\xb9\xe4\xb8\x80\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xb8\xaaorder\n        return same_group.iloc[0]\n\n    # \xe6\x8c\x89\xe7\x85\xa7\'buy_date\', \'symbol\'\xe5\x88\x86\xe7\xbb\x84\xe5\x90\x8eapply same_handle\n    order_pds = order_pd.groupby([\'buy_date\', \'symbol\']).apply(_find_unique_group_symbol)\n    return order_pds\n\n\ndef find_unique_symbol(order_pd, same_rule=EOrderSameRule.ORDER_SAME_BSPD):\n    """"""\n    order_pd\xe4\xb8\xad\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaabuy_date\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaasymbol\xe6\x9c\x89\xe5\xa4\x9a\xe6\x9d\xa1\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8c\xe8\xbf\x87\xe6\xbb\xa4\xe6\x8e\x89\xef\xbc\x8c\n    \xe6\xb3\xa8\xe6\x84\x8f\xe5\xa6\x82\xe6\x9e\x9c\xe5\x9c\xa8\xe5\xaf\xb9\xe5\xba\x94\xe5\xa4\x9a\xe6\x9d\xa1\xe8\xae\xb0\xe5\xbd\x95\xe4\xb8\xad\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8find_unique_group_symbol\n    :param order_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param same_rule: order\xe5\x88\xa4\xe6\x96\xad\xe4\xb8\xba\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99, \xe9\xbb\x98\xe8\xae\xa4EOrderSameRule.ORDER_SAME_BSPD\n                  \xe5\x8d\xb3\xef\xbc\x9aorder\xe6\x9c\x89\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84symbol\xe5\x92\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe7\x9b\xb8\xe5\x90\x8c\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe6\x97\xa5\xe6\x9c\x9f\xe5\x92\x8c\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x89\x8d\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe7\x9b\xb8\xe5\x90\x8c\n    """"""\n\n    def _find_unique_symbol(order):\n        """"""\xe6\xa0\xb9\xe6\x8d\xaeorder\xe7\x9a\x84symbol\xe5\x92\x8cbuy_date\xe5\x9c\xa8\xe5\x8e\x9f\xe5\xa7\x8border_pd\xe4\xb8\xad\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x8d\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9csame_pd\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe6\x9c\x891\xe4\xb8\xaa\xe5\xb0\xb1\xe5\x94\xaf\xe4\xb8\x80\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\xb0\xb1\xe6\x98\xaf\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84""""""\n        same_pd = _same_pd(order, order_pd, same_rule)\n        if same_pd.empty or same_pd.shape[0] == 1:\n            return False\n        # \xe5\x90\x8c\xe4\xb8\x80\xe5\xa4\xa9\xe4\xb8\x80\xe4\xb8\xaasymbol\xe6\x9c\x89\xe5\xa4\x9a\xe6\x9d\xa1\xe8\xae\xb0\xe5\xbd\x95\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\x9f\xe6\xb2\xa1\xe7\x95\x99\xef\xbc\x8c\xe9\x83\xbd\xe8\xbf\x87\xe6\xbb\xa4\n        return True\n\n    same_mark = order_pd.apply(_find_unique_symbol, axis=1)\n    return order_pd[same_mark == 0]\n\n\ndef trade_summary(orders, kl_pd, draw=False, show_info=True):\n    """"""\n    \xe4\xb8\xbb\xe8\xa6\x81\xe5\xb0\x86AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1orders_pd\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xb0\x86\n    \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xad\x90\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe9\xa1\xba\xe5\xba\x8f\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe7\xbb\x98\xe5\x88\xb6\xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe7\xbb\x86\xe8\x8a\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\xbe\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\n    \xe7\xae\x80\xe5\x8d\x95\xe6\x96\x87\xe5\xad\x97\xe5\xba\xa6\xe9\x87\x8f\xe8\xbe\x93\xe5\x87\xba\n    :param orders: AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\n    :param kl_pd: \xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param draw: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x86\xe8\x8a\x82\xe5\x9b\xbe\xe7\xa4\xba\n    :param show_info: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe6\x96\x87\xe5\xad\x97\xe4\xbf\xa1\xe6\x81\xaf\n    """"""\n\n    # AbuOrder\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1orders_pd\n    orders_pd = ABuTradeExecute.make_orders_pd(orders, kl_pd)\n    # \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xad\x90\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe9\xa1\xba\xe5\xba\x8f\xe5\xba\x8f\xe5\x88\x97\n    action_pd = ABuTradeExecute.transform_action(orders_pd)\n\n    summary = \'\'\n    if draw:\n        # \xe7\xbb\x98\xe5\x88\xb6\xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe7\xbb\x86\xe8\x8a\x82\xe4\xba\xa4\xe6\x98\x93\xe5\x9b\xbe\n        ABuTradeDrawer.plot_his_trade(orders, kl_pd)\n\n    if show_info:\n        # simple\xe7\x9a\x84\xe6\x84\x8f\xe6\x80\x9d\xe6\x98\xaf\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xa1\xe7\xae\x97\xe4\xba\xa4\xe6\x98\x93\xe8\xb4\xb9\xe7\x94\xa8\n        simple_profit = \'simple profit: {} \\n\'.format(ABuTradeExecute.calc_simple_profit(orders, kl_pd))\n        summary += simple_profit\n\n        # \xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe6\x94\xb6\xe7\x9b\x8a\xe6\x9c\x9f\xe6\x9c\x9b\n        mean_win_profit = \'mean win profit {} \\n\'.format(np.mean(orders_pd[orders_pd.result == 1][\'profit\']))\n        summary += mean_win_profit\n\n        # \xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b\n        mean_loss_profit = \'mean loss profit {} \\n\'.format(np.mean(orders_pd[orders_pd.result == -1][\'profit\']))\n        summary += mean_loss_profit\n\n        # \xe7\x9b\x88\xe5\x88\xa9\xe7\xac\x94\xe6\x95\xb0\n        win_cnt = 0 if len(orders_pd[orders_pd.result == 1].result.value_counts().values) <= 0 else \\\n            orders_pd[orders_pd.result == 1].result.value_counts().values[0]\n\n        # \xe4\xba\x8f\xe6\x8d\x9f\xe7\xac\x94\xe6\x95\xb0\n        loss_cnt = 0 if len(orders_pd[orders_pd.result == -1].result.value_counts().values) <= 0 else \\\n            orders_pd[orders_pd.result == -1].result.value_counts().values[0]\n\n        # \xe8\x83\x9c\xe7\x8e\x87\n        win_rate = \'win rate \' + str(\'*@#\')\n        if win_cnt + loss_cnt > 0:\n            win_rate = \'win rate: {}%\'.format(float(win_cnt) / float(float(loss_cnt) + float(win_cnt)))\n        summary += win_rate\n\n    return orders_pd, action_pd, summary\n'"
abupy/TradeBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuBenchmark import AbuBenchmark\nfrom .ABuCapital import AbuCapital\nfrom .ABuKLManager import AbuKLManager\nfrom .ABuOrder import AbuOrder\n\nfrom . import ABuMLFeature as feature\nfrom .ABuMLFeature import AbuFeatureDegExtend\n\nfrom .ABuMLFeature import AbuFeatureBase, BuyFeatureMixin, SellFeatureMixin\nfrom .ABuTradeProxy import AbuOrderPdProxy, EOrderSameRule\n\n\nfrom . import ABuTradeDrawer\nfrom . import ABuTradeExecute\nfrom . import ABuTradeProxy\n\n__all__ = [\n    'AbuBenchmark',\n    'AbuCapital',\n    'AbuKLManager',\n    'AbuOrder',\n    'AbuOrderPdProxy',\n    'EOrderSameRule',\n\n    'feature',\n    'AbuFeatureDegExtend',\n    'AbuFeatureBase',\n    'BuyFeatureMixin',\n    'SellFeatureMixin',\n    'ABuTradeDrawer',\n    'ABuTradeExecute',\n    'ABuTradeProxy']\n"""
abupy/UmpBu/ABuUmp.py,0,"b'from __future__ import absolute_import\n\n# noinspection all\nfrom . import ABuUmpEdgeBase as edge\n# noinspection all\nfrom . import ABuUmpMainBase as main\n# noinspection all\nfrom . import ABuUmpManager as manager\n# noinspection PyUnresolvedReferences\nfrom .ABuUmpBase import ump_main_make_xy, ump_edge_make_xy\n# noinspection PyUnresolvedReferences\nfrom .ABuUmpEdgeBase import EEdgeType\n'"
abupy/UmpBu/ABuUmpBase.py,1,"b'# -*- encoding:utf-8 -*-\n""""""\n    ump\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport functools\nimport weakref\nfrom abc import ABCMeta, abstractmethod\n\nimport numpy as np\nimport sklearn.preprocessing as preprocessing\n\nfrom ..UtilBu import ABuFileUtil\nfrom ..CoreBu.ABuFixes import six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass BuyUmpMixin(object):\n    """"""\n        \xe4\xb9\xb0\xe5\x85\xa5ump\xe6\xb7\xb7\xe5\x85\xa5, \xe4\xb8\x8eBuyFeatureMixin\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84ump\xe5\x8f\xaa\xe8\x83\xbd\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x80\xe4\xb8\xaaump\xe7\xb1\xbb\xe5\x88\xab\n        \xe5\x8d\xb3\xe4\xb8\x8d\xe6\x98\xafBuyUmpMixin\xe5\xb0\xb1\xe5\xba\x94\xe8\xaf\xa5\xe6\x98\xafSellUmpMixin\n    """"""\n    _ump_type_prefix = \'buy_\'\n\n\nclass SellUmpMixin(object):\n    """"""\n        \xe5\x8d\x96\xe5\x87\xbaump\xe6\xb7\xb7\xe5\x85\xa5, \xe4\xb8\x8eSellFeatureMixin\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84ump\xe5\x8f\xaa\xe8\x83\xbd\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb8\x80\xe4\xb8\xaaump\xe7\xb1\xbb\xe5\x88\xab\n        \xe5\x8d\xb3\xe4\xb8\x8d\xe6\x98\xafBuyUmpMixin\xe5\xb0\xb1\xe5\xba\x94\xe8\xaf\xa5\xe6\x98\xafSellUmpMixin\n    """"""\n    _ump_type_prefix = \'sell_\'\n\n\nclass UmpDict(dict):\n    """"""Several built-in types such as list and dict do not directly support weak references\n     but can add support through subclassing:""""""\n    pass\n\n\nclass CachedUmpManager:\n    """"""ump\xe6\x8b\xa6\xe6\x88\xaa\xe7\xbc\x93\xe5\xad\x98\xe5\xae\x9e\xe4\xbd\x93\xef\xbc\x8c\xe5\x88\x86\xe5\x88\xab\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xa3\x81\xe5\x92\x8c\xe8\xbe\xb9\xe8\xa3\x81\xe7\xb1\xbb\xe4\xb8\xad""""""\n\n    """"""\xe4\xb8\x8d\xe5\xaf\xb9\xe5\xa4\x96\xe5\xbc\x80\xe5\x8f\x91\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe4\xbb\x85\xe9\x92\x88\xe5\xaf\xb9\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8dict\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8WeakValueDictionary""""""\n    s_use_weak = False\n\n    def __init__(self):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96_cache\xe6\x9c\xac\xe4\xbd\x93\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaes_use_weak\xe5\x86\xb3\xe5\xae\x9a\xe4\xbd\xbf\xe7\x94\xa8WeakValueDictionary\xe6\x88\x96\xe8\x80\x85dict""""""\n        self._cache = weakref.WeakValueDictionary() if CachedUmpManager.s_use_weak else dict()\n\n    def get_ump(self, ump):\n        """"""\n        \xe4\xb8\xbb\xe8\xa6\x81\xe5\x9c\xa8\xe5\x85\xb7\xe4\xbd\x93\xe8\xa3\x81\xe5\x88\xa4\xe7\xb1\xbb\xe7\x9a\x84predict\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa3\x81\xe5\x88\xa4\xe6\x9c\xac\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\n        \xe4\xb8\x8d\xe5\x9c\xa8_cache\xe4\xb8\xadload_pickle\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8catch\xe4\xb8\xad\xe7\x9a\x84ump\xe8\xbf\x94\xe5\x9b\x9e\n        :param ump: \xe5\x85\xb7\xe4\xbd\x93\xe8\xa3\x81\xe5\x88\xa4\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuUmpBase\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: \xe6\xaf\x8f\xe4\xb8\xaa\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x86\xb3\xe7\xad\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\xaf\x8f\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe4\xb8\xbb\xe4\xbd\x93\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xbd\xa2\xe5\xbc\x8f\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8d\xe5\x90\x8c\n                 eg\xef\xbc\x9a\xe4\xb8\xbb\xe8\xa3\x81\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\n                    def predict(self, x, need_hit_cnt=1):\n                        dump_clf_with_ind = AbuUmpMainBase.dump_clf_manager.get_ump(self)\n                        count_hit = 0\n                        for clf, ind in dump_clf_with_ind.values():\n                            ss = clf.predict(x)\n                            if ss == ind:\n                                count_hit += 1\n                                if need_hit_cnt == count_hit:\n                                    return 1\n                        return 0\n        """"""\n        # dump_file_fn\xe6\x98\xaf\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xb7\xe4\xbd\x93\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\x8d\xe5\x86\x99\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe8\x87\xaa\xe5\xb7\xb1\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe5\xad\x98\xe6\x94\xbe\xe8\xb7\xaf\xe5\xbe\x84\n        name = ump.dump_file_fn()\n        if name not in self._cache:\n            # \xe4\xb8\x8d\xe5\x9c\xa8\xe7\xbc\x93\xe5\xad\x98\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xadload_pickle\n            dump_clf = ABuFileUtil.load_pickle(name)\n            if dump_clf is None:\n                # \xe6\xb2\xa1\xe6\x9c\x89\xe5\xaf\xb9ump\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe4\xba\x86\xef\xbc\x8c\xe6\x8a\x9b\xe5\xbc\x82\xe5\xb8\xb8\n                raise RuntimeError(\'{}: you must first fit orders, or {} is not exist!!\'.format(\n                    ump.__class__.__name__, name))\n            if CachedUmpManager.s_use_weak:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8WeakValueDictionary\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe4\xbd\xbf\xe7\x94\xa8UmpDict\xe5\x8c\x85\xe4\xb8\x80\xe5\xb1\x82\n                dump_clf = UmpDict(**dump_clf)\n            self._cache[name] = dump_clf\n        else:\n            # \xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x8b\xbf\xe7\xbc\x93\xe5\xad\x98\n            dump_clf = self._cache[name]\n        return dump_clf\n\n    def clear(self):\n        """"""\xe6\xb8\x85\xe9\x99\xa4\xe7\xbc\x93\xe5\xad\x98\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89cache ump""""""\n        self._cache.clear()\n\n\ndef ump_main_make_xy(func):\n    """"""\n    \xe4\xb8\xbb\xe8\xa3\x81\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94fiter class\xe4\xb8\xadmake_xy\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8eg\xef\xbc\x9a\xe8\xaf\xa6\xe9\x98\x85ABuUmpMainDeg\xe6\x88\x96\xe5\x85\xb6\xe5\xae\x83\xe4\xb8\xbb\xe8\xa3\x81\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n\n        class AbuUmpMainDeg(AbuUmpMainBase, BuyUmpMixin):\n            class UmpDegFiter(AbuMLPd):\n                @ump_main_make_xy\n                def make_xy(self, **kwarg):\n                    regex = \'result|{}\'.format(\n                        \'|\'.join(AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainDeg)))\n                    # noinspection PyUnresolvedReferences\n                    deg_df = self.order_has_ret.filter(regex=regex)\n                    return deg_df\n    """"""\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        """"""\n        kwargs\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xef\xbc\x9akwargs[\'orders_pd\']\xef\xbc\x8c\xe5\x9c\xa8AbuUmpMainBase\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96__init__\xe4\xb8\xad\n        \xe5\xb0\x86orders_pd=self.orders_pd\xef\xbc\x8ceg\xef\xbc\x9a\n            self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n\n        kwargs\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x89\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xef\xbc\x9akwargs[\'scaler\']\xef\xbc\x8cbool\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe4\xbc\xa0\xe9\x80\x92\xe4\xb8\xbafalse\xef\xbc\x8c\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8\n        make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n        """"""\n        if kwargs is None or \'orders_pd\' not in kwargs:\n            raise ValueError(\'kwarg is None or not kwarg.has_key orders_pd\')\n\n        orders_pd = kwargs[\'orders_pd\']\n        # \xe4\xbb\x8eorders_pd\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe5\xbd\xa2\xe6\x88\x90order_has_ret\n        order_has_ret = orders_pd[orders_pd[\'result\'] != 0]\n\n        # \xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8d1\xe4\xb8\xbaloss\xef\xbc\x8c1\xe4\xb8\xbawin\xef\xbc\x8c0\xe4\xb8\xbakeep\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8corder_has_ret\xe6\xb2\xa1\xe6\x9c\x89keep\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaloss\xef\xbc\x9a0\xef\xbc\x8cwin\xef\xbc\x9a1\n        # noinspection PyTypeChecker\n        order_has_ret[\'result\'] = np.where(order_has_ret[\'result\'] == -1, 0, 1)\n        self.order_has_ret = order_has_ret\n        # \xe9\x80\x9a\xe8\xbf\x87\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84make_xy\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\x85\xb7\xe4\xbd\x93\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5ump_df\n        ump_df = func(self, *args, **kwargs)\n\n        if \'scaler\' in kwargs and kwargs[\'scaler\'] is True:\n            # \xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n            scaler = preprocessing.StandardScaler()\n            for col in ump_df.columns[1:]:\n                ump_df[col] = scaler.fit_transform(ump_df[col].values.reshape(-1, 1))\n        # \xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbamatrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\n        ump_np = ump_df.as_matrix()\n        self.y = ump_np[:, 0]\n        self.x = ump_np[:, 1:]\n        # \xe5\xb0\x86pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1ump_df\xe4\xb9\x9f\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xbb\xbd\n        self.df = ump_df\n        self.np = ump_np\n\n    return wrapper\n\n\ndef ump_edge_make_xy(func):\n    """"""\n    \xe8\xbe\xb9\xe8\xa3\x81\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94fiter class\xe4\xb8\xadmake_xy\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8eg\xef\xbc\x9a\xe8\xaf\xa6\xe9\x98\x85AbuUmpEdgeDeg\xe6\x88\x96\xe5\x85\xb6\xe5\xae\x83\xe8\xbe\xb9\xe8\xa3\x81\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n\n        class AbuUmpEdgeDeg(AbuUmpEdgeBase, BuyUmpMixin):\n            class UmpDegFiter(AbuMLPd):\n                @ump_edge_make_xy\n                def make_xy(self, **kwarg):\n                    filter_list = [\'profit\', \'profit_cg\']\n                    cols = AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeDeg)\n                    filter_list.extend(cols)\n                    # noinspection PyUnresolvedReferences\n                    deg_df = self.order_has_ret.filter(filter_list)\n                    return deg_df\n    """"""\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        """"""\n        kwargs\xe4\xb8\xad\xe5\xbf\x85\xe9\xa1\xbb\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xef\xbc\x9akwargs[\'orders_pd\']\xef\xbc\x8c\xe5\x9c\xa8AbuUmpEdgeBase\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96__init__\xe4\xb8\xad\n        \xe5\xb0\x86orders_pd=self.orders_pd\xef\xbc\x8ceg\xef\xbc\x9a\n            self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        """"""\n        if kwargs is None or \'orders_pd\' not in kwargs:\n            raise ValueError(\'kwarg is None or not kwarg.has_key orders_pd\')\n\n        orders_pd = kwargs[\'orders_pd\']\n        # \xe4\xbb\x8eorders_pd\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe5\xbd\xa2\xe6\x88\x90orders_pd_tmp\n        orders_pd_tmp = orders_pd[orders_pd[\'result\'] != 0]\n        # \xe4\xbb\x8eorders_pd_tmp\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe7\xad\x9b\xe9\x80\x89\xe5\xbf\x85\xe9\xa1\xbbprofit != 0\n        order_has_ret = orders_pd_tmp[orders_pd_tmp[\'profit\'] != 0]\n        self.order_has_ret = order_has_ret\n        # \xe9\x80\x9a\xe8\xbf\x87\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84make_xy\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\x85\xb7\xe4\xbd\x93\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5ump_df\n        ump_df = func(self, *args, **kwargs)\n        # \xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbamatrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\n        ump_np = ump_df.as_matrix()\n        # \xe8\xbe\xb9\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe4\xb8\xadfilter_list = [\'profit\', \'profit_cg\']\xe9\x83\xbd\xe8\xae\xbe\xe5\xae\x9a\xe4\xb8\xbay\n        self.y = ump_np[:, :2]\n        self.x = ump_np[:, 2:]\n        # \xe5\xb0\x86pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1ump_df\xe4\xb9\x9f\xe4\xbf\x9d\xe7\x95\x99\xe4\xb8\x80\xe4\xbb\xbd\n        self.df = ump_df\n        self.np = ump_np\n\n    return wrapper\n\n\nclass AbuUmpBase(six.with_metaclass(ABCMeta, object)):\n    """"""ump\xe6\x8b\xa6\xe6\x88\xaa\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe5\x9c\xa8AbuUmpBase\xe7\xb1\xbb\xe4\xb8\xad""""""\n    dump_clf_manager = CachedUmpManager()\n\n    @abstractmethod\n    def get_fiter_class(self):\n        """"""abstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\xad\x9b\xe9\x80\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe7\xb1\xbb""""""\n        pass\n\n    @abstractmethod\n    def get_predict_col(self):\n        """"""abstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81keys""""""\n        pass\n\n    @classmethod\n    def is_buy_ump(cls):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe8\xa3\x81\xe5\x88\xa4\xe6\x9c\xac\xe8\xba\xab\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa6\xe6\x88\xaa\xe8\xa3\x81\xe5\x88\xa4\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\n        :return: bool\xef\xbc\x8c\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5\xe6\x8b\xa6\xe6\x88\xaa\xe8\xa3\x81\xe5\x88\xa4\n        """"""\n        return getattr(cls, ""_ump_type_prefix"") == \'buy_\'\n\n    @classmethod\n    @abstractmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8cabstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        pass\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, is_buy_ump,  predict_col""""""\n        return \'{}: is_buy_ump:{} predict_col:{}\'.format(self.__class__.__name__,\n                                                         self.__class__.is_buy_ump(), self.get_predict_col())\n\n    __repr__ = __str__\n'"
abupy/UmpBu/ABuUmpEdgeBase.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe8\xbe\xb9\xe8\xa3\x81\xe5\x9f\xba\xe7\xa1\x80\xe5\xae\x9e\xe7\x8e\xb0\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport logging\nimport os\nfrom abc import abstractmethod\n\nimport numpy as np\nimport sklearn.preprocessing as preprocessing\nfrom enum import Enum\nfrom sklearn.metrics.pairwise import pairwise_distances\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu import ABuFileUtil\nfrom ..SimilarBu.ABuCorrcoef import ECoreCorrType, corr_xy\nfrom .ABuUmpBase import AbuUmpBase\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe5\x9c\xa8predict\xe4\xb8\xad\xe5\xba\xa6\xe9\x87\x8f\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84x\xe5\x92\x8c\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xad\xe5\x85\xb6\xe5\xae\x83\xe7\x9f\xa2\xe9\x87\x8f\xe7\x9a\x84pairwise_distances\xe5\x90\x8e\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87if distances_cx.min() > K_DISTANCE_THRESHOLD\xe8\xbf\x87\xe6\xbb\xa4""""""\nK_DISTANCE_THRESHOLD = 0.668\n""""""\xe4\xbb\x8e\xe7\xac\xac\xe4\xb8\x80\xe8\xbd\xaepairwise_distances\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8argsort\xe5\x90\x8e\xe5\x8f\x96K_N_TOP_SEED\xe4\xb8\xaa\xe5\x81\x9a\xe4\xb8\xba\xe7\xac\xac\xe4\xba\x8c\xe8\xbd\xae\xe7\x9b\xb8\xe4\xbc\xbc\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe7\xa7\x8d\xe5\xad\x90""""""\nK_N_TOP_SEED = 100\n""""""\xe5\xae\x8c\xe6\x88\x90\xe7\xac\xac\xe4\xba\x8c\xe8\xbd\xae\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\x8c\xb9\xe9\x85\x8d\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8K_SIMILAR_THRESHOLD\xe5\x81\x9a\xe4\xb8\xba\xe9\x98\x80\xe5\x80\xbc\xe8\xbf\x87\xe6\xbb\xa4\xe5\x90\x8e\xe5\xbe\x97\xe5\x88\xb0\xe6\x9c\x89\xe6\x8a\x95\xe7\xa5\xa8\xe6\x9d\x83\xe7\x9a\x84\xe5\x90\x91\xe9\x87\x8f""""""\nK_SIMILAR_THRESHOLD = 0.91\n\n""""""\n    K_CG_TOP_RATE\xe5\x81\x9a\xe4\xb8\xba\xe8\xae\xa1\xe7\xae\x97win_top\xe5\x92\x8closs_top\n    win_top = len(self.fiter.df[\'profit_cg\']) - len(self.fiter.df[\'profit_cg\']) * K_CG_TOP_RATE\n    eg:\n      len(self.fiter.df[\'profit_cg\']) == 100\n        -> win_top = 100 - 100 * 0.236\n        -> win_top = 100 - 23.6\n        -> win_top = 76.4\n    loss_top = len(self.fiter.df[\'profit_cg\']) * K_CG_TOP_RATE\n    eg:\n        len(self.fiter.df[\'profit_cg\']) == 100\n        -> loss_top = 100 * 0.236\n        -> loss_top = 23.6\n""""""\nK_CG_TOP_RATE = 0.236\n\n""""""\xe5\x9c\xa8predict\xe4\xb8\xad\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7\xe4\xba\x8e\xe4\xb8\x80\xe5\xae\x9a\xe6\xaf\x94\xe4\xbe\x8b\xe6\x89\x8d\xe8\xa2\xab\xe8\xae\xa4\xe5\x8f\xaf, \xe5\x8d\xb3\xe5\xaf\xb9\xe6\x9c\x89\xe4\xba\x89\xe8\xae\xae\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x80\xe6\x96\xb9\xe6\x8b\xa5\xe6\x9c\x89\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xbc\x98\xe5\x8a\xbf\xe6\x89\x8d\xe8\xae\xa4\xe5\x8f\xaf""""""\nK_EDGE_JUDGE_RATE = 0.618\n\n\nclass EEdgeType(Enum):\n    """"""\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\x88\xa9\xe6\xb6\xa6\xe4\xba\x8f\xe6\x8d\x9f\xe8\xbf\x9b\xe8\xa1\x8crank\xe5\x90\x8e\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xbb\x93\xe6\x9e\x9c""""""\n\n    """"""\xe6\x8d\x9f\xe5\xa4\xb1\xe6\x9c\x80\xe5\xa4\x9a\xe7\x9a\x84\xe4\xb8\x80\xe7\xb1\xbb\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe5\x8f\xaf\xe7\x90\x86\xe8\xa7\xa3\xe4\xb8\xba\xe6\x9c\x80\xe5\xba\x95\xe7\xab\xaf""""""\n    E_EEdge_TOP_LOSS = -1\n    """"""\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe6\x99\xae\xe9\x80\x9a\xe6\x94\xb6\xe7\x9b\x8a\xe4\xba\x8f\xe6\x8d\x9f\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe5\x9c\xa8\xe6\x95\xb4\xe4\xb8\xaa\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe5\x8d\xa0\xe6\x9c\x80\xe5\xa4\x9a\xe6\x95\xb0""""""\n    E_EEdge_NORMAL = 0\n    """"""\xe7\x9b\x88\xe5\x88\xa9\xe6\x9c\x80\xe5\xa4\x9a\xe7\x9a\x84\xe4\xb8\x80\xe7\xb1\xbb\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe5\x8f\xaf\xe7\x90\x86\xe8\xa7\xa3\xe4\xb8\xba\xe6\x9c\x80\xe9\xa1\xb6\xe7\xab\xaf""""""\n    E_STORE_TOP_WIN = 1\n\n\n""""""\xe5\x9c\xa8\xe7\xac\xac\xe4\xba\x8c\xe8\xbd\xae\xe7\x9a\x84\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\x8c\xb9\xe9\x85\x8d\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99ABuCorrcoef.corr_xy\xe5\x87\xbd\xe6\x95\xb0""""""\ng_similar_type = ECoreCorrType.E_CORE_TYPE_PEARS\n\n\nclass AbuUmpEdgeBase(AbuUmpBase):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    @classmethod\n    def ump_edge_clf_dump(cls, orders_pd_train, show_info=False, market_name=None):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86orders_pd_train\xe6\x9e\x84\xe9\x80\xa0AbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1, \xe4\xbd\xbf\xe7\x94\xa8fit\xe6\x96\xb9\xe6\xb3\x95\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\xef\xbc\x8c\xe5\x90\x8e\xe8\xbf\x9b\xe8\xa1\x8cdump_clf\xe5\x8d\xb3\n        \xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\xad\x98\xe8\xb4\xae\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        :param orders_pd_train: \xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param show_info: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbaedge.fiter.df.head()\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4False\n        :param market_name: \xe4\xb8\xbb\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe6\x88\x96\xe8\x80\x85\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa3\x81\xe5\x88\xa4\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x98\xe8\xb4\xae\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None, \xe6\xa0\xb9\xe6\x8d\xaeenv\xe4\xb8\xad\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x98\xe5\x82\xa8\xe5\x90\x8d\xe7\xa7\xb0\n        :return: AbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        edge = cls(orders_pd_train, market_name=market_name)\n        edge.fit()\n        edge.dump_clf()\n        if show_info:\n            print(\'edge.fiter.df.head():\\n\', edge.fiter.df.head())\n        return edge\n\n    @abstractmethod\n    def get_fiter_class(self):\n        """"""abstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\xad\x9b\xe9\x80\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe7\xb1\xbb""""""\n        pass\n\n    @abstractmethod\n    def get_predict_col(self):\n        """"""abstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81keys""""""\n        pass\n\n    @classmethod\n    @abstractmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8cabstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        pass\n\n    def __init__(self, orders_pd=None, predict=False, market_name=None, **kwarg):\n        """"""\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, \xe6\x9c\x80\xe5\xa5\xbd\xe6\x98\xaf\xe7\xbb\x8f\xe8\xbf\x87\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\n                          AbuMetricsBase\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8ffit_metrics\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84orders_pd\n        :param predict: \xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xba\xe9\xa2\x84\xe6\xb5\x8b\xef\xbc\x8c\xe9\x9d\x9e\xe8\xae\xad\xe7\xbb\x83\xe8\xa3\x81\xe5\x88\xa4\n        :param market_name: \xe4\xb8\xbb\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe6\x88\x96\xe8\x80\x85\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa3\x81\xe5\x88\xa4\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x98\xe8\xb4\xae\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None, \xe6\xa0\xb9\xe6\x8d\xaeenv\xe4\xb8\xad\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x98\xe5\x82\xa8\xe5\x90\x8d\xe7\xa7\xb0\n        :param kwarg: \xe5\xb0\x86kwarg\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99fiter_cls\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x9a\n                        self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        """"""\n        # \xe7\x89\xb9\xe5\xbe\x81\xe7\xad\x9b\xe9\x80\x89\xe7\xb1\xbbfiter_cls\n        self.fiter_cls = self.get_fiter_class()\n\n        # \xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe7\x9a\x84scaler\xe5\xaf\xb9\xe8\xb1\xa1\n        self.scaler = preprocessing.StandardScaler()\n\n        if isinstance(market_name, ABuEnv.EMarketTargetType):\n            market_name = market_name.value\n        # predict\xe6\x88\x96\xe8\x80\x85\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0, \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x90\x8d\xe5\xad\x97 eg\xef\xbc\x8c\'us\'\xef\xbc\x8c \'cn\'\n        self.market_name = ABuEnv.g_market_target.value if market_name is None else market_name\n\n        if not predict:\n            # TODO \xe6\x8b\x86\xe5\xbc\x80predict\xe5\x92\x8c\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe7\xba\xa0\xe7\xbc\xa0\xe5\x9c\xa8\xe4\xb8\x80\xe8\xb5\xb7\n            if orders_pd is not None and \'profit_cg\' not in orders_pd.columns:\n                # profit_cg\xe7\xad\x89\xe5\xba\xa6\xe9\x87\x8f\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe8\xa6\x81\xe5\x9c\xa8AbuMetricsBase\xe7\xbb\x93\xe6\x9d\x9f\xe5\x90\x8e\xe6\x89\x8d\xe4\xbc\x9a\xe6\x9c\x89\n                logging.info(\'you do better AbuMetricsBase.fit_metrics in orders_pd!!!!\')\n                from ..MetricsBu.ABuMetricsBase import AbuMetricsBase\n                # \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe5\x81\x9afit_metrics_order\xef\xbc\x8c\xe6\xb2\xa1\xe5\x81\x9afit_metrics\xe5\x9b\xa0\xe4\xb8\xba\xe6\xaf\x94\xe5\xa6\x82\xe6\x9c\x9f\xe8\xb4\xa7\xef\xbc\x8c\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe4\xbc\x9a\xe6\x9c\x89\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x9a\xe7\x94\xa8\xe7\x9a\x84fit_metrics_order\n                AbuMetricsBase(orders_pd, None, None, None).fit_metrics_order()\n            # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xe5\xaf\xb9\xe8\xb1\xa1self.fiter\n            self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n            """"""\n                \xe9\x80\x9a\xe8\xbf\x87self.fiter_cls\xe6\x9e\x84\xe9\x80\xa0\xe5\xbd\xa2\xe6\x88\x90self.fiter\xe5\x90\x8eself.fiter.df\xe4\xb8\xad\xe4\xbb\xa5\xe5\xad\x98\xe5\x9c\xa8\xe7\x89\xb9\xe5\xbe\x81\n\n                eg\xef\xbc\x9aself.fiter.df\n                            profit\tprofit_cg\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\n                2014-09-24\t-22618.04\t-0.0566\t3.378\t3.458\t3.458\t1.818\n                2014-10-24\t-29690.28\t-0.0742\t0.191\t2.889\t2.809\t-1.089\n                2014-10-29\t18959.19\t0.0542\t-2.026\t16.689\t-0.761\t1.980\n                2014-10-29\t148209.36\t0.5022\t-3.427\t-11.956\t-8.296\t6.507\n                2014-10-29\t24867.60\t0.0952\t-2.915\t39.469\t-6.043\t7.046\n            """"""\n            # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8svm\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\n            self.fiter().estimator.svc()\n\n    def fit(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x8b\x9f\xe5\x90\x88\xe5\xad\x98\xe5\x82\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xb8\xbb\xe8\xa3\x81\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83fit\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xbe\xb9\xe8\xa3\x81\xe7\x9a\x84fit\xe5\xbe\x88\xe7\xae\x80\xe5\x8d\x95\n        self.fiter.df\xe7\xbb\x8f\xe8\xbf\x87fit\xe5\x90\x8e\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe6\x96\xb0\xe5\x88\x97p_rk_cg\xe5\x92\x8crk\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n\n            eg\xef\xbc\x9aself.fiter.df\n                           profit  profit_cg  buy_deg_ang42  buy_deg_ang252  \\\n            2014-09-24  -22618.04    -0.0566          3.378           3.458\n            2014-10-24  -29690.28    -0.0742          0.191           2.889\n            2014-10-29   18959.19     0.0542         -2.026          16.689\n            2014-10-29  148209.36     0.5022         -3.427         -11.956\n            2014-10-29   24867.60     0.0952         -2.915          39.469\n            2014-10-29   18959.19     0.0542         -2.026          16.689\n            2014-11-03    1250.80     0.0045          0.103          39.202\n            2014-11-11   59888.21     0.1857          8.341          -9.450\n            2014-11-12   -3578.78    -0.0140          3.963           6.595\n            2014-11-26  -29085.19    -0.0946         14.052           6.061\n            ...               ...        ...            ...             ...\n            2016-03-14   16220.57     0.0559          4.002         -10.559\n            2016-03-14  -25328.12    -0.1218          0.129          -6.649\n            2016-03-30  -29858.44    -0.0863         13.121          -8.461\n            2016-04-04    5373.76     0.0244          4.409         -33.097\n            2016-04-13  -28044.40    -0.1159          6.603         -31.459\n            2016-04-14  -18645.93    -0.0467          4.611          18.428\n            2016-04-15  -32484.79    -0.1149          4.238         -13.247\n            2016-04-15  -32484.79    -0.1149          4.238         -13.247\n            2016-04-29     290.96     0.0007          1.445          16.266\n            2016-04-29     290.96     0.0007          1.445          16.266\n\n                        buy_deg_ang60  buy_deg_ang21  p_rk_cg  rk\n            2014-09-24          3.458          1.818     19.0   0\n            2014-10-24          2.809         -1.089     13.0  -1\n            2014-10-29         -0.761          1.980     35.5   0\n            2014-10-29         -8.296          6.507     56.0   1\n            2014-10-29         -6.043          7.046     43.0   1\n            2014-10-29         -0.761          1.980     35.5   0\n            2014-11-03         -4.614         10.125     28.0   0\n            2014-11-11          0.730         12.397     48.0   1\n            2014-11-12         -7.524          6.671     23.0   0\n            2014-11-26          7.566         12.494      9.0  -1\n            ...                   ...            ...      ...  ..\n            2016-03-14         -7.992          9.324     37.0   0\n            2016-03-14        -10.880          5.201      2.0  -1\n            2016-03-30          4.498          4.070     12.0  -1\n            2016-04-04         -6.281          5.618     33.0   0\n            2016-04-13          0.191          4.457      4.0  -1\n            2016-04-14          3.134          0.733     20.0   0\n            2016-04-15          4.693          1.162      5.5  -1\n            2016-04-15          4.693          1.162      5.5  -1\n            2016-04-29          4.615         -1.115     24.5   0\n            2016-04-29          4.615         -1.115     24.5   0\n\n        \xe8\xbe\xb9\xe8\xa3\x81\xe8\xa3\x81\xe5\x86\xb3\xe6\x96\xb9\xe5\xbc\x8f\xe5\xa4\x9a\xe6\xac\xa1\xe4\xbd\xbf\xe7\x94\xa8\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe6\x8a\x80\xe6\x9c\xaf\xe5\xaf\xb9\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe6\xa6\x82\xe7\x8e\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xb9\xb2\xe9\xa2\x84\xef\xbc\x8c\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe4\xbd\xbf\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe8\xa3\x81\xe5\x86\xb3\xe6\xad\xa3\xe7\xa1\xae\xe7\x8e\x87\xe8\xbe\xbe\xe6\x88\x90\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\n        \xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe6\x8a\x80\xe6\x9c\xaf\xe6\x80\x9d\xe6\x83\xb3\xe6\x98\xaf\xe9\x87\x8f\xe5\x8c\x96\xe4\xb8\xad\xe5\xbe\x88\xe5\xbe\x88\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe4\xb8\x80\xe7\xa7\x8d\xe8\xae\xbe\xe8\xae\xa1\xe6\x80\x9d\xe8\xb7\xaf\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x88\x91\xe4\xbb\xac\xe9\x87\x8f\xe5\x8c\x96\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\xb1\xe6\x98\xaf\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xef\xbc\x88\xe6\x88\x91\xe4\xbb\xac\xe6\x83\xb3\xe8\xa6\x81\xe8\xb5\xa2\xe7\x9a\x84\xe9\x92\xb1\xe6\xaf\x94\xe8\xbe\x93\xe7\x9a\x84\xe5\xa4\x9a\xef\xbc\x89\n        """"""\n\n        # \xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe7\x89\xb9\xe5\xbe\x81fiter.df\xe4\xb8\xad\xe7\x9a\x84profit_cg\xe8\xbf\x9b\xe8\xa1\x8crank\xef\xbc\x8c\xe5\x8d\xb3\xe9\x92\x88\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\x88\xe5\x88\xa9\xe4\xba\x8f\xe6\x8d\x9f\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8crank\xe6\x8e\x92\xe5\xba\x8f, rank\xe7\xbb\x93\xe6\x9e\x9c\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0self.fiter.df\xe6\x96\xb0\xe5\x88\x97\n        # TODO \xe6\x9a\x82\xe6\x97\xb6\xe5\x8f\xaa\xe4\xbd\xbf\xe7\x94\xa8profit_cg\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8profit\xe5\x81\x9a\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x95\xb4\xe5\x90\x88profit\xe4\xb8\xba\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84rank\xe7\xad\x89\xe7\xbb\xbc\xe5\x90\x88\xe6\x9d\x83\xe9\x87\x8d\xe5\xa4\x84\xe7\x90\x86\n        self.fiter.df[\'p_rk_cg\'] = self.fiter.df[\'profit_cg\'].rank()\n        """"""\n            eg: self.fiter.df[\'p_rk_cg\']\n            2014-09-24    19.0\n            2014-10-24    13.0\n            2014-10-29    35.5\n            2014-10-29    56.0\n            2014-10-29    43.0\n            2014-10-29    35.5\n            2014-11-03    28.0\n            2014-11-11    48.0\n            2014-11-12    23.0\n            2014-11-26     9.0\n                          ...\n            2016-03-14    37.0\n            2016-03-14     2.0\n            2016-03-30    12.0\n            2016-04-04    33.0\n            2016-04-13     4.0\n            2016-04-14    20.0\n            2016-04-15     5.5\n            2016-04-15     5.5\n            2016-04-29    24.5\n            2016-04-29    24.5\n        """"""\n\n        # K_CG_TOP_RATE=0.236, \xe7\x94\xb1\xe4\xba\x8e\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe8\x83\x9c\xe8\xb4\x9f\xe7\x9a\x84\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xef\xbc\x8cwin_top\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\xae\x9e\xe9\x99\x85\xe6\xaf\x94\xe8\xbe\x83loss_top\xe4\xb8\xba\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xef\xbc\x8c\xe4\xb8\xba\xe5\x90\x8e\xe7\xbb\xad\xe5\x88\xb6\xe9\x80\xa0\xe6\xa6\x82\xe7\x8e\x87\xe4\xbc\x98\xe5\x8a\xbf\n        win_top = len(self.fiter.df[\'profit_cg\']) - len(self.fiter.df[\'profit_cg\']) * K_CG_TOP_RATE\n        """"""\n            eg:\n                len(self.fiter.df[\'profit_cg\']) == 100\n                -> win_top = 100 - 100 * 0.236\n                -> win_top = 100 - 23.6\n                -> win_top = 76.4\n        """"""\n        loss_top = len(self.fiter.df[\'profit_cg\']) * K_CG_TOP_RATE\n        """"""\n            eg:\n                len(self.fiter.df[\'profit_cg\']) == 100\n                -> loss_top = 100 * 0.236\n                -> loss_top = 23.6\n        """"""\n\n        # self.fiter.df\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x96\xb0\xe5\x88\x97\'rk\'\xef\xbc\x8c\xe5\x88\x9d\xe5\xa7\x8b\xe5\x80\xbc\xe9\x83\xbd\xe4\xb8\xbaEEdgeType.E_EEdge_NORMAL.value\xef\xbc\x8c\xe5\x8d\xb30\n        self.fiter.df[\'rk\'] = EEdgeType.E_EEdge_NORMAL.value\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaewin_top, loss_top\xe5\xb0\x86\xe6\x95\xb4\xe4\xbd\x93\xe5\x88\x87\xe5\x88\x86\xe4\xb8\xba\xe4\xb8\x89\xe6\xae\xb5\xef\xbc\x8crk\xef\xbc\x9a-1, 0, 1\n\n                        rk  profit_cg  p_rk_cg\n            2011-09-21   0   0.036216  58816.0\n            2011-09-21   1   0.046784  61581.0\n            2011-09-21  -1  -0.191184   1276.0\n            2011-09-21   0  -0.000428  43850.0\n            2011-09-21   0   0.001724  44956.0\n\n        """"""\n        # noinspection PyTypeChecker\n        self.fiter.df[\'rk\'] = np.where(self.fiter.df[\'p_rk_cg\'] > win_top, EEdgeType.E_STORE_TOP_WIN.value,\n                                       self.fiter.df[\'rk\'])\n        # noinspection PyTypeChecker\n        self.fiter.df[\'rk\'] = np.where(self.fiter.df[\'p_rk_cg\'] < loss_top, EEdgeType.E_EEdge_TOP_LOSS.value,\n                                       self.fiter.df[\'rk\'])\n\n    def dump_file_fn(self):\n        """"""\n            \xe8\xbe\xb9\xe8\xa3\x81\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe5\xad\x98\xe5\x82\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x9a\n            ABuEnv.g_project_data_dir \xef\xbc\x8b \'ump/ump_edge_\' \xef\xbc\x8b market_name + self.class_unique_id()\n        """"""\n\n        # TODO \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\xa3\x81\xe5\x88\xa4\xe8\xa6\x86\xe7\x9b\x96\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe5\xa4\x87\xe4\xbb\xbd\xef\xbc\x8c\xe6\x98\xbe\xe7\xa4\xba\xe9\x80\x9a\xe7\x9f\xa5\n        unique_ump_name = \'ump/ump_edge_{}_{}\'.format(self.market_name, self.class_unique_id())\n        return os.path.join(ABuEnv.g_project_data_dir, unique_ump_name)\n\n    def dump_clf(self):\n        """"""\n            \xe8\xbe\xb9\xe8\xa3\x81\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xb8\xbb\xe8\xa3\x81\xe7\x9a\x84dump_clf\xe4\xb9\x9f\xe7\xae\x80\xe5\x8d\x95\xe5\xbe\x88\xe5\xa4\x9a\xef\xbc\x8c\n            \xe5\xb0\x86self.fiter.df\xe5\x92\x8cself.fiter.x\xe6\x89\x93\xe5\x8c\x85\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1df_x_dict\n            \xe9\x80\x9a\xe8\xbf\x87ABuFileUtil.dump_pickle\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98\n        """"""\n        df_x_dict = {\'fiter_df\': self.fiter.df, \'fiter_x\': self.fiter.x}\n        """"""\n            eg\xef\xbc\x9adf_x_dict\n            array([[  3.378,   3.458,   3.458,   1.818],\n                   [  0.191,   2.889,   2.809,  -1.089],\n                   [ -2.026,  16.689,  -0.761,   1.98 ],\n                   [ -3.427, -11.956,  -8.296,   6.507],\n                   [ -2.915,  39.469,  -6.043,   7.046],\n                   [ -2.026,  16.689,  -0.761,   1.98 ],\n                   [  0.103,  39.202,  -4.614,  10.125],\n                   [  8.341,  -9.45 ,   0.73 ,  12.397],\n                   [  3.963,   6.595,  -7.524,   6.671],\n                   ....................................\n                   [  4.002, -10.559,  -7.992,   9.324],\n                   [  0.129,  -6.649, -10.88 ,   5.201],\n                   [ 13.121,  -8.461,   4.498,   4.07 ],\n                   [  4.409, -33.097,  -6.281,   5.618],\n                   [  6.603, -31.459,   0.191,   4.457],\n                   [  4.611,  18.428,   3.134,   0.733],\n                   [  4.238, -13.247,   4.693,   1.162],\n                   [  4.238, -13.247,   4.693,   1.162],\n                   [  1.445,  16.266,   4.615,  -1.115],\n                   [  1.445,  16.266,   4.615,  -1.115]])\n        """"""\n        ABuFileUtil.dump_pickle(df_x_dict, self.dump_file_fn(), how=\'zero\')\n\n    def predict(self, **kwargs):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\x8eCachedUmpManager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98df_x_dict\xef\xbc\x8c\xe5\xaf\xb9kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\n        \xe8\xbe\xb9\xe8\xa3\x81\xe7\x9a\x84predict()\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xb8\xbb\xe8\xa3\x81\xe6\x9d\xa5\xe8\xaf\xb4\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x8d\xe6\x9d\x82\xef\xbc\x8c\xe5\xa4\xa7\xe8\x87\xb4\xe6\x80\x9d\xe8\xb7\xaf\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n        1. \xe4\xbb\x8e\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x96\xb0\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe6\x8c\x91\xe9\x80\x89\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\xbb\x84\xe6\x88\x90x\n        2. \xe5\xb0\x86x\xe5\x92\x8c\xe4\xb9\x8b\xe5\x89\x8d\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x84\xe5\x90\x88concatenate()\xef\xbc\x8c\xe4\xb8\x80\xe8\xb5\xb7\xe5\x81\x9a\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96scaler\n        3. \xe4\xbd\xbf\xe7\x94\xa8sklearn.metrics.pairwise.pairwise_distances()\xe5\xba\xa6\xe9\x87\x8f\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe5\x92\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xad\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xba\x8f\xe5\x88\x97\n        4. \xe5\x8f\x96pairwise_distances() TOP\xe4\xb8\xaa\xe4\xbd\x9c\xe4\xb8\xba\xe7\xa7\x8d\xe5\xad\x90\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\n        5. \xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe7\x94\xb1\xe5\xa4\xa7\xe5\x88\xb0\xe5\xb0\x8f\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe5\xa4\xa7\xe4\xba\x8e\xe4\xbf\x9d\xe7\x95\x99\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe5\x81\x9a\xe4\xb8\xba\xe6\x9c\x80\xe7\xbb\x88\xe6\x9c\x89\xe6\x8a\x95\xe7\xa5\xa8\xe6\x9d\x83\xe5\x88\xa9\xe7\x9a\x84\n        6. \xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe4\xb8\x8e\xe6\x96\xb0\xe4\xba\xa4\xe6\x98\x93\xe6\x9c\x80\xe7\x9b\xb8\xe4\xbc\xbc\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb9\x8b\xe5\x89\x8d\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe7\x9a\x84rk\xe5\xaf\xb9\xe6\x96\xb0\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8a\x95\xe7\xa5\xa8\n        7. \xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7\xe4\xba\x8e\xe4\xb8\x80\xe5\xae\x9a\xe6\xaf\x94\xe4\xbe\x8b\xe6\x89\x8d\xe8\xa2\xab\xe7\xbb\x93\xe6\x9e\x9c\xe8\xae\xa4\xe5\x8f\xaf\xef\xbc\x8c\xe5\x8d\xb3\xe5\x86\x8d\xe6\xac\xa1\xe5\x90\xaf\xe5\x8a\xa8\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\n\n\n        :param kwargs: \xe9\x9c\x80\xe8\xa6\x81\xe5\x92\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ceg: buy_deg_ang42=3.378, buy_deg_ang60=3.458\n                                     buy_deg_ang21=3.191, buy_deg_ang252=1.818\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\n                 EEdgeType: \xe4\xb8\x8d\xe6\x8b\xa6\xe6\x88\xaa: EEdgeType.E_EEdge_NORMAL or EEdgeType.E_STORE_TOP_WIN\n                            \xe6\x8b\xa6\xe6\x88\xaa: EEdgeType.E_EEdge_TOP_LOSS\n        """"""\n\n        # \xe7\xbb\x9f\xe4\xb8\x80\xe4\xbb\x8eCachedUmpManager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98ump\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8bload_pickle\n        df_x_dict = AbuUmpBase.dump_clf_manager.get_ump(self)\n\n        # \xe4\xbb\x8edf_x_dict[\'fiter_df\'].columns\xe4\xb8\xad\xe7\xad\x9b\xe9\x80\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n        feature_columns = df_x_dict[\'fiter_df\'].columns.drop([\'profit\', \'profit_cg\', \'p_rk_cg\', \'rk\'])\n        """"""\n            eg: df_x_dict[\'fiter_df\'].columns\n            Index([\'profit\', \'profit_cg\', \'buy_deg_ang42\', \'buy_deg_ang252\',\n                   \'buy_deg_ang60\', \'buy_deg_ang21\', \'p_rk_cg\', \'rk\'], dtype=\'object\')\n\n            drop([\'profit\', \'profit_cg\', \'p_rk_cg\', \'rk\']\n            -> [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']\n        """"""\n\n        # eg, x: array([ 3.378,  3.458,  3.458,  1.818])\n        x = np.array([kwargs[col] for col in feature_columns])\n        x = x.reshape(1, -1)\n\n        # \xe6\x8a\x8a\xe6\x96\xb0\xe7\x9a\x84x concatenate\xe5\x88\xb0\xe4\xb9\x8b\xe5\x89\x8d\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xad\n        con_x = np.concatenate((x, df_x_dict[\'fiter_x\']), axis=0)\n        # \xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84x\xe5\x92\x8c\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9f\xa9\xe9\x98\xb5\xe7\xbb\x84\xe8\xa3\x85\xe5\xa5\xbd\xe7\x9a\x84\xe6\x96\xb0\xe7\x9f\xa9\xe9\x98\xb5con_x\xe4\xb8\x80\xe8\xb5\xb7\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\n        con_x = self.scaler.fit_transform(con_x)\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84x\xe5\x8d\xb3con_x[0]\xe5\x92\x8c\xe7\x9f\xa9\xe9\x98\xb5\xe4\xb8\xad\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe8\xbf\x9b\xe8\xa1\x8cpairwise_distances\xe6\xaf\x94\xe8\xbe\x83\n        distances_cx = pairwise_distances(con_x[0].reshape(1, -1), con_x[1:],\n                                          metric=\'euclidean\')\n        distances_cx = distances_cx[0]\n        """"""\n            eg: distances_cx\n            array([[ 0.    ,  0.8432,  1.4371,  2.4178,  3.1302,  1.4371,  3.1774,\n                     2.5422,  1.7465,  3.0011,  0.7233,  2.264 ,  0.8279,  0.8279,\n                     2.309 ,  1.4878,  1.9396,  0.7438,  0.9731,  0.4494,  2.0755,\n                     2.9762,  4.5869,  5.2029,  0.7362,  0.7362,  3.623 ,  0.6105,\n                     0.6105,  1.2288,  2.0991,  2.0991,  3.2272,  0.8599,  0.7419,\n                     0.7419,  0.7804,  2.5241,  1.8116,  2.5373,  2.2742,  2.1726,\n                     3.2738,  1.293 ,  2.4555,  2.4555,  2.3358,  2.1673,  2.0187,\n                     2.8637,  2.5066,  1.052 ,  1.1481,  1.1481,  1.1175,  1.1175]])\n\n        """"""\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\xb0\x8f\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe8\xae\xa4\xe4\xb8\xba\xe6\x97\xa0\xe6\x95\x88\xef\xbc\x8cK_DISTANCE_THRESHOLD = 0.668\n        if distances_cx.min() > K_DISTANCE_THRESHOLD:\n            return EEdgeType.E_EEdge_NORMAL\n        distances_sort = distances_cx.argsort()\n        """"""\n            eg: distances_sort\n            array([ 0, 19, 28, 27, 10, 24, 25, 35, 34, 17, 36, 13, 12,  1, 33, 18, 51,\n                   54, 55, 52, 53, 29, 43,  5,  2, 15,  8, 38, 16, 48, 20, 30, 31, 47,\n                   41, 11, 40, 14, 46,  3, 45, 44, 50, 37, 39,  7, 49, 21,  9,  4,  6,\n                   32, 42, 26, 22, 23])\n        """"""\n\n        n_top = K_N_TOP_SEED if len(distances_cx) > K_N_TOP_SEED else len(distances_cx)\n        # \xe5\x8f\x96\xe5\x89\x8d100\xe4\xb8\xaa\xe4\xbd\x9c\xe4\xb8\xba\xe7\xa7\x8d\xe5\xad\x90\xe7\xbb\xa7\xe7\xbb\xad\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\x81\x9a\xe6\x95\xb0\xe6\x8d\xae\xe5\x87\x86\xe5\xa4\x87\n        distances_sort = distances_sort[:n_top]\n\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe7\xac\xac\xe4\xba\x8c\xe8\xbd\xae\xe7\x9a\x84\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84x\xe5\x8d\xb3con_x[0]\xe5\x92\x8cdistances_sort\xe4\xb8\xad\xe8\xae\xb0\xe5\xbd\x95\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9f\xa2\xe9\x87\x8f\xe8\xbf\x9b\xe8\xa1\x8ccorr_xy\n        similar_cx = {arg: corr_xy(con_x[0], con_x[arg + 1], g_similar_type) for arg in distances_sort}\n        """"""\n            eg: similar_cx\n\n            {0: 1.0, 19: 0.9197507467964976, 28: 0.57289288329659238, 27: 0.57289288329659238,\n            10: 0.44603792013583493, 24: 0.4103293780402798, 25: 0.4103293780402798,\n            35: 0.22026514236282496, 34: 0.22026514236282496, 17: -0.24170074544552811,\n            36: 0.43863838382081699, 13: 0.16234971594751921, 12: 0.16234971594751921, 1: 0.92424298737490296,\n            33: 0.47818723914034433, 18: -0.17734957863273493, 51: 0.63704694680797502, 54: 0.75395818997353681,\n            55: 0.75395818997353681, 52: 0.6485413094804453, 53: 0.6485413094804453,\n            29: 0.89796883127042837, 43: 0.86342390437553329, 5: 0.12738173851484677,\n            2: 0.12738173851484677, 15: 0.53496775815355813, 8: -0.92624283913287053,\n            38: -0.52046967255944876, 16: -0.65837858483393186, 48: 0.26241267262766549,\n            20: 0.45007515315947716, 30: -0.78037071039800843, 31: -0.78037071039800843,\n            47: -0.99196576241088685, 41: 0.71286817166895511, 11: -0.57565781272205685,\n            40: -0.089683927257343574, 14: -0.49743962329463148, 46: -0.84622925585859421, 3: -0.82066914234853283,\n            45: 0.30735926720691314, 44: 0.30735926720691314, 50: 0.010871213734502339, 37: -0.65150765047066517,\n            39: -0.38809703338219459, 7: -0.57947244493007666, 49: -0.33103296960584466, 21: 0.69444344588208717,\n            9: -0.3435188573004419, 4: -0.39204446380766983, 6: -0.54996919528831723, 32: -0.9481034251744791,\n            42: 0.20829094732022327, 26: 0.9936229414412624, 22: -0.35972456962349542, 23: -0.085747705364200594}\n        """"""\n        # \xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe5\xa4\xa7\xe5\x88\xb0\xe5\xb0\x8f\xe6\x8e\x92\xe5\xba\x8f\n        similar_sorted = sorted(zip(similar_cx.values(), similar_cx.keys()))[::-1]\n        """"""\n            eg: similar_sorted\n            [(1.0, 0), (0.9936229414412624, 26), (0.92424298737490296, 1), (0.9197507467964976, 19), (\n            0.89796883127042837, 29), (0.86342390437553329, 43), (0.75395818997353681, 55), (0.75395818997353681, 54),\n            (0.71286817166895511, 41), (0.69444344588208717, 21), (0.6485413094804453, 53), (0.6485413094804453, 52),\n            (0.63704694680797502, 51), (0.57289288329659238, 28), (0.57289288329659238, 27), (0.53496775815355813, 15),\n            (0.47818723914034433, 33), (0.45007515315947716, 20), (0.44603792013583493, 10), (0.43863838382081699, 36),\n            (0.4103293780402798, 25), (0.4103293780402798, 24), (0.30735926720691314, 45), (0.30735926720691314, 44),\n            (0.26241267262766549, 48), (0.22026514236282496, 35), (0.22026514236282496, 34), (0.20829094732022327, 42),\n             (0.16234971594751921, 13), (0.16234971594751921, 12), (0.12738173851484677, 5), (0.12738173851484677, 2),\n             (0.010871213734502339, 50), (-0.085747705364200594, 23), (-0.089683927257343574, 40),\n             (-0.17734957863273493, 18), (-0.24170074544552811, 17), (-0.33103296960584466, 49),\n             (-0.3435188573004419, 9), (-0.35972456962349542, 22), (-0.38809703338219459, 39),\n             (-0.39204446380766983, 4), (-0.49743962329463148, 14), (-0.52046967255944876, 38),\n             (-0.54996919528831723, 6), (-0.57565781272205685, 11), (-0.57947244493007666, 7),\n             (-0.65150765047066517, 37), (-0.65837858483393186, 16), (-0.78037071039800843, 31),\n             (-0.78037071039800843, 30), (-0.82066914234853283, 3), (-0.84622925585859421, 46),\n             (-0.92624283913287053, 8), (-0.9481034251744791, 32), (-0.99196576241088685, 47)]\n        """"""\n        # \xe5\x8f\xaa\xe5\x8f\x96\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6K_SIMILAR_THRESHOLD\xe7\x9a\x84\xe5\x81\x9a\xe4\xb8\xba\xe6\x9c\x80\xe7\xbb\x88\xe6\x9c\x89\xe6\x8a\x95\xe7\xa5\xa8\xe6\x9d\x83\xe5\x88\xa9\xe7\x9a\x84\n        similar_filters = list(filter(lambda sm: sm[0] > K_SIMILAR_THRESHOLD, similar_sorted))\n        """"""\n            eg: similar_filters\n            [(1.0, 0), (0.9936229414412624, 26), (0.92424298737490296, 1), (0.9197507467964976, 19)]\n        """"""\n        if len(similar_filters) < int(n_top * 0.1):\n            # \xe6\x8a\x95\xe7\xa5\xa8\xe7\x9a\x84\xe5\xa4\xaa\xe5\xb0\x91\xef\xbc\x8c\xe5\x88\x9d\xe5\xa7\x8b\xe7\x9b\xb8\xe4\xbc\xbc\xe7\xa7\x8d\xe5\xad\x90n_top\xe7\x9a\x840.1\xe4\xb8\xba\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe8\xae\xa4\xe4\xb8\xba\xe6\x97\xa0\xe6\x95\x88\xef\xbc\x8ceg\xef\xbc\x9aint(100 * 0.1) == 10\n            return EEdgeType.E_EEdge_NORMAL\n\n        top_loss_cluster_cnt = 0\n        top_win_cluster_cnt = 0\n        # \xe7\x94\xb1\xe4\xba\x8egmm_component_filter\xe4\xb8\xadwin_top\xe7\x9a\x84\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4top_win_cluster_cnt > top_loss_cluster_cnt\xe6\xa6\x82\xe7\x8e\x87\xe5\xa4\xa7\n        for similar in similar_filters:\n            """"""\n                eg:\n                    similar: (0.9936229414412624, 26)\n                    order_ind = similar[1] = 26\n                    similar_val = similar[0] = 0.9936229414412624\n            """"""\n            order_ind = similar[1]\n            similar_val = similar[0]\n            # \xe9\x80\x9a\xe8\xbf\x87order_ind\xe8\x8e\xb7\xe5\x8f\x96\xe6\x9c\x89\xe6\x8a\x95\xe7\xa5\xa8\xe6\x9d\x83\xe5\x88\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84rk\xe5\x80\xbc\n            rk = df_x_dict[\'fiter_df\'].iloc[order_ind][\'rk\']\n            # \xe5\xaf\xb9\xe5\xba\x94\xe8\xbf\x99\xe4\xb8\xaa\xe6\x9c\x80\xe7\x9b\xb8\xe4\xbc\xbc\xe7\x9a\x84\xe5\x9c\xa8\xe5\x93\xaa\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xef\xbc\x8c\xe5\x88\xa4\xe6\x96\xadedge\n            if rk == -1:\n                # \xe9\x9c\x80\xe8\xa6\x81 * similar_val eg\xef\xbc\x9a top_loss_cluster_cnt += 1 * 0.9936229414412624\n                top_loss_cluster_cnt += 1 * similar_val\n            elif rk == 1:\n                top_win_cluster_cnt += 1 * similar_val\n\n        # \xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe7\xbb\x93\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7\xe4\xba\x8e\xe4\xb8\x80\xe5\xae\x9a\xe6\xaf\x94\xe4\xbe\x8b\xe6\x89\x8d\xe8\xa2\xab\xe8\xae\xa4\xe5\x8f\xaf, \xe5\x8d\xb3\xe5\xaf\xb9\xe6\x9c\x89\xe4\xba\x89\xe8\xae\xae\xe7\x9a\x84\xe6\x8a\x95\xe7\xa5\xa8\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x80\xe6\x96\xb9\xe6\x8b\xa5\xe6\x9c\x89\xe7\x9b\xb8\xe5\xaf\xb9\xe4\xbc\x98\xe5\x8a\xbf\xe6\x89\x8d\xe8\xae\xa4\xe5\x8f\xaf\n        if int(top_win_cluster_cnt * K_EDGE_JUDGE_RATE) > top_loss_cluster_cnt:\n            """"""\n                eg: top_win_cluster_cnt = 100\n                    top_loss_cluster_cnt \xef\xbc\x9d 50\n\n                    int(top_win_cluster_cnt * K_EDGE_JUDGE_RATE) == 62\n                    62 > 50 -> EEdgeType.E_STORE_TOP_WIN\n            """"""\n            return EEdgeType.E_STORE_TOP_WIN\n        elif int(top_loss_cluster_cnt * K_EDGE_JUDGE_RATE) > top_win_cluster_cnt:\n            """"""\n                eg: top_loss_cluster_cnt = 100\n                    top_win_cluster_cnt \xef\xbc\x9d 50\n\n                    int(top_loss_cluster_cnt * K_EDGE_JUDGE_RATE) == 62\n                    62 > 50 -> EEdgeType.E_EEdge_TOP_LOSS\n            """"""\n            # \xe7\x94\xb1\xe4\xba\x8etop_win_cluster_cnt > top_loss_cluster_cnt\xe7\x9a\x84\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe6\x9c\xac\xe6\x9d\xa5\xe5\xb0\xb1\xe6\x9c\x89\xe6\xa6\x82\xe7\x8e\x87\xe4\xbc\x98\xe5\x8a\xbf\xef\xbc\x8c\xef\xbc\x8a K_EDGE_JUDGE_RATE\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe6\x89\xa9\xe5\xa4\xa7\xe6\xa6\x82\xe7\x8e\x87\xe4\xbc\x98\xe5\x8a\xbf\n            return EEdgeType.E_EEdge_TOP_LOSS\n        return EEdgeType.E_EEdge_NORMAL\n'"
abupy/UmpBu/ABuUmpEdgeDeg.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe8\xbe\xb9\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDeg, AbuFeatureDegExtend\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_edge_make_xy, BuyUmpMixin\nfrom .ABuUmpEdgeBase import AbuUmpEdgeBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpDegFiter(AbuMLPd):\n    """"""\n        \xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n        \xe5\x9c\xa8\xe8\xbe\xb9\xe8\xa3\x81__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_edge_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n         make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_edge_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe8\xb0\x83\xe7\x94\xa8make_xy\xe5\x89\x8d\xe5\xb0\x86\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x9a\n         order_has_ret = orders_pd[orders_pd[\'result\'] != 0]\xef\xbc\x8c\xe4\xb8\x94\xe8\xb5\x8b\xe4\xba\x88self.order_has_ret\n         make_xy\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n\n        :param kwarg: ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90deg_df\n                 ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9edeg_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        filter_list = [\'profit\', \'profit_cg\']\n        cols = AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeDeg)\n        # filter_list: [\'profit\', \'profit_cg\', \'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']\n        filter_list.extend(cols)\n\n        # noinspection PyUnresolvedReferences\n        deg_df = self.order_has_ret.filter(filter_list)\n        """"""\n            eg: deg_df\n                           profit  profit_cg  buy_deg_ang42  buy_deg_ang252  \\\n            2014-09-24  -22618.04    -0.0566          3.378           3.458\n            2014-10-24  -29690.28    -0.0742          0.191           2.889\n            2014-10-29   18959.19     0.0542         -2.026          16.689\n            2014-10-29  148209.36     0.5022         -3.427         -11.956\n            2014-10-29   24867.60     0.0952         -2.915          39.469\n            2014-10-29   18959.19     0.0542         -2.026          16.689\n            2014-11-03    1250.80     0.0045          0.103          39.202\n            2014-11-11   59888.21     0.1857          8.341          -9.450\n            2014-11-12   -3578.78    -0.0140          3.963           6.595\n            2014-11-26  -29085.19    -0.0946         14.052           6.061\n            ...               ...        ...            ...             ...\n            2016-03-14   16220.57     0.0559          4.002         -10.559\n            2016-03-14  -25328.12    -0.1218          0.129          -6.649\n            2016-03-30  -29858.44    -0.0863         13.121          -8.461\n            2016-04-04    5373.76     0.0244          4.409         -33.097\n            2016-04-13  -28044.40    -0.1159          6.603         -31.459\n            2016-04-14  -18645.93    -0.0467          4.611          18.428\n            2016-04-15  -32484.79    -0.1149          4.238         -13.247\n            2016-04-15  -32484.79    -0.1149          4.238         -13.247\n            2016-04-29     290.96     0.0007          1.445          16.266\n            2016-04-29     290.96     0.0007          1.445          16.266\n\n                        buy_deg_ang60  buy_deg_ang21\n            2014-09-24          3.458          1.818\n            2014-10-24          2.809         -1.089\n            2014-10-29         -0.761          1.980\n            2014-10-29         -8.296          6.507\n            2014-10-29         -6.043          7.046\n            2014-10-29         -0.761          1.980\n            2014-11-03         -4.614         10.125\n            2014-11-11          0.730         12.397\n            2014-11-12         -7.524          6.671\n            2014-11-26          7.566         12.494\n            ...                   ...            ...\n            2016-03-14         -7.992          9.324\n            2016-03-14        -10.880          5.201\n            2016-03-30          4.498          4.070\n            2016-04-04         -6.281          5.618\n            2016-04-13          0.191          4.457\n            2016-04-14          3.134          0.733\n            2016-04-15          4.693          1.162\n            2016-04-15          4.693          1.162\n            2016-04-29          4.615         -1.115\n            2016-04-29          4.615         -1.115\n        """"""\n        return deg_df\n\n\nclass AbuUmpEdgeDeg(AbuUmpEdgeBase, BuyUmpMixin):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']\n        :return: [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']\n        """"""\n        return AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeDeg)\n\n    def get_fiter_class(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpEdgeDeg.UmpDegFiter\n        :return: AbuUmpEdgeDeg.UmpDegFiter\n        """"""\n        return UmpDegFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'deg_edge\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'deg_edge\'\n\n\nclass UmpExtendEdgeFiter(AbuMLPd):\n    """"""\xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe8\xa3\x81\xe6\x89\xa9\xe5\xb1\x95\xe7\xb1\xbbmake_xy""""""\n    @ump_edge_make_xy\n    def make_xy(self, **kwarg):\n        filter_list = [\'profit\', \'profit_cg\']\n        col = AbuFeatureDegExtend().get_feature_ump_keys(ump_cls=AbuUmpEegeDegExtend)\n        filter_list.extend(col)\n        mul_df = self.order_has_ret.filter(filter_list)\n        return mul_df\n\n\nclass AbuUmpEegeDegExtend(AbuUmpEdgeBase, BuyUmpMixin):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb0\xe7\x9a\x84\xe8\xa7\x86\xe8\xa7\x92\xe6\x9d\xa5\xe5\x86\xb3\xe7\xad\x96\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8cAbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        # \xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8get_feature_ump_keys\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe5\xbd\x93\xe5\x89\x8d\xe7\xb1\xbb\xe5\x90\x8d\xe7\xa7\xb0\xe5\x8d\xb3\xe5\x8f\xaf\xef\xbc\x8c\xe5\x85\xb6\xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5ump\xe8\xbf\x98\xe6\x98\xaf\xe5\x8d\x96\xe5\x87\xbaump\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n        col = AbuFeatureDegExtend().get_feature_ump_keys(ump_cls=AbuUmpEegeDegExtend)\n        return col\n\n    def get_fiter_class(self):\n        return UmpExtendEdgeFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        return \'extend_edge_deg\'\n'"
abupy/UmpBu/ABuUmpEdgeFull.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe8\xbe\xb9\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDeg, AbuFeaturePrice, AbuFeatureWave, AbuFeatureAtr\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_edge_make_xy, BuyUmpMixin\nfrom .ABuUmpEdgeBase import AbuUmpEdgeBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpFullFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8\xe8\xbe\xb9\xe8\xa3\x81__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_edge_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n         make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_edge_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe8\xb0\x83\xe7\x94\xa8make_xy\xe5\x89\x8d\xe5\xb0\x86\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x9a\n         order_has_ret = orders_pd[orders_pd[\'result\'] != 0]\xef\xbc\x8c\xe4\xb8\x94\xe8\xb5\x8b\xe4\xba\x88self.order_has_ret\n         make_xy\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n\n        :param kwarg: ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90full_df\n                 ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9efull_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        filter_list = [\'profit\', \'profit_cg\']\n        cols = AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull)\n        cols.extend(AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull))\n        cols.extend(AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull))\n        cols.extend(AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull))\n\n        filter_list.extend(cols)\n        """"""\n            filter_list:\n            [\'profit\', \'profit_cg\', \'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\',\n            \'buy_price_rank120\', \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\', \'buy_wave_score1\',\n            \'buy_wave_score2\', \'buy_wave_score3\', \'buy_atr_std\']\n        """"""\n        # noinspection PyUnresolvedReferences\n        full_df = self.order_has_ret.filter(filter_list)\n        """"""\n            eg: full_df\n                           profit  profit_cg  buy_deg_ang42  buy_deg_ang252  \\\n            2014-09-24  -22618.04    -0.0566          3.378           3.458\n            2014-10-24  -29690.28    -0.0742          0.191           2.889\n            2014-10-29   18959.19     0.0542         -2.026          16.689\n            2014-10-29  148209.36     0.5022         -3.427         -11.956\n            2014-10-29   24867.60     0.0952         -2.915          39.469\n            2014-10-29   18959.19     0.0542         -2.026          16.689\n            ...               ...        ...            ...             ...\n            2016-04-13  -28044.40    -0.1159          6.603         -31.459\n            2016-04-14  -18645.93    -0.0467          4.611          18.428\n            2016-04-15  -32484.79    -0.1149          4.238         -13.247\n            2016-04-15  -32484.79    -0.1149          4.238         -13.247\n            2016-04-29     290.96     0.0007          1.445          16.266\n            2016-04-29     290.96     0.0007          1.445          16.266\n\n                        buy_deg_ang60  buy_deg_ang21  buy_price_rank120  buy_price_rank90  \\\n            2014-09-24          3.458          1.818              1.000             1.000\n            2014-10-24          2.809         -1.089              1.000             1.000\n            2014-10-29         -0.761          1.980              1.000             1.000\n            2014-10-29         -8.296          6.507              0.925             0.900\n            2014-10-29         -6.043          7.046              0.962             0.950\n            2014-10-29         -0.761          1.980              1.000             1.000\n            ...                   ...            ...                ...               ...\n            2016-04-13          0.191          4.457              0.567             0.722\n            2016-04-14          3.134          0.733              0.875             0.878\n            2016-04-15          4.693          1.162              0.775             0.733\n            2016-04-15          4.693          1.162              0.775             0.733\n            2016-04-29          4.615         -1.115              1.000             1.000\n            2016-04-29          4.615         -1.115              1.000             1.000\n\n                        buy_price_rank60  buy_price_rank252  buy_wave_score1  \\\n            2014-09-24             1.000              1.000            0.287\n            2014-10-24             1.000              1.000            0.596\n            2014-10-29             1.000              1.000            0.444\n            2014-10-29             0.883              0.750           -0.173\n            2014-10-29             0.925              0.982            0.031\n            2014-10-29             1.000              1.000            0.444\n            ...                      ...                ...              ...\n            2016-04-13             1.000              0.270            0.271\n            2016-04-14             0.967              0.940           -0.030\n            2016-04-15             1.000              0.631            0.596\n            2016-04-15             1.000              0.631            0.596\n            2016-04-29             1.000              1.000            0.743\n            2016-04-29             1.000              1.000            0.743\n\n                        buy_wave_score2  buy_wave_score3  buy_atr_std\n            2014-09-24            0.234            0.218        0.226\n            2014-10-24            0.488            0.449        0.146\n            2014-10-29            0.338            0.329        0.538\n            2014-10-29           -0.202           -0.203        0.558\n            2014-10-29           -0.128           -0.173        0.063\n            2014-10-29            0.338            0.329        0.538\n            ...                     ...              ...          ...\n            2016-04-13            0.509            0.651        0.262\n            2016-04-14            0.081            0.170        0.049\n            2016-04-15            0.753            0.800        0.135\n            2016-04-15            0.753            0.800        0.135\n            2016-04-29            0.840            0.918        0.838\n            2016-04-29            0.840            0.918        0.838\n        """"""\n        return full_df\n\n\nclass AbuUmpEdgeFull(AbuUmpEdgeBase, BuyUmpMixin):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a\n            [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\', \'buy_price_rank120\',\n            \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\',\n            \'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\', \'buy_atr_std\',\n            \'buy_diff_down_days\', \'buy_jump_up_power\', \'buy_diff_up_days\', \'buy_jump_down_power\']\n\n        :return: [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\', \'buy_price_rank120\',\n                \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\',\n                \'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\', \'buy_atr_std\',\n                \'buy_diff_down_days\', \'buy_jump_up_power\', \'buy_diff_up_days\', \'buy_jump_down_power\']\n        """"""\n\n        cols = AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull)\n        cols.extend(AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull))\n        cols.extend(AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull))\n        cols.extend(AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpEdgeFull))\n        return cols\n\n    def get_fiter_class(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpEdgeFull.UmpFullFiter\n        :return: AbuUmpEdgeFull.UmpFullFiter\n        """"""\n        return UmpFullFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'full_edge\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'full_edge\'\n'"
abupy/UmpBu/ABuUmpEdgeMul.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe8\xbe\xb9\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe5\x8d\x95\xe6\xb7\xb7\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDeg, AbuFeaturePrice, AbuFeatureWave, AbuFeatureAtr\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_edge_make_xy, BuyUmpMixin\nfrom .ABuUmpEdgeBase import AbuUmpEdgeBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpMulFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8\xe8\xbe\xb9\xe8\xa3\x81__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_edge_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n         make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_edge_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe8\xb0\x83\xe7\x94\xa8make_xy\xe5\x89\x8d\xe5\xb0\x86\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x9a\n         order_has_ret = orders_pd[orders_pd[\'result\'] != 0]\xef\xbc\x8c\xe4\xb8\x94\xe8\xb5\x8b\xe4\xba\x88self.order_has_ret\n         make_xy\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n\n        :param kwarg: ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90mul_df\n                 ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9emul_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        filter_list = [\'profit\', \'profit_cg\']\n        # [\'profit\', \'profit_cg\', \'buy_deg_ang21\', \'buy_price_rank252\', \'buy_wave_score3\', \'buy_atr_std\']\n        filter_list.extend(\n            [AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1],\n             AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1],\n             AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1],\n             AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1]])\n        # noinspection PyUnresolvedReferences\n        mul_df = self.order_has_ret.filter(filter_list)\n        """"""\n            eg: mul_df\n                           profit  profit_cg  buy_deg_ang21  buy_price_rank252  \\\n            2014-09-24  -22618.04    -0.0566          1.818              1.000\n            2014-10-24  -29690.28    -0.0742         -1.089              1.000\n            2014-10-29   18959.19     0.0542          1.980              1.000\n            2014-10-29  148209.36     0.5022          6.507              0.750\n            2014-10-29   24867.60     0.0952          7.046              0.982\n            2014-10-29   18959.19     0.0542          1.980              1.000\n            2014-11-03    1250.80     0.0045         10.125              1.000\n            2014-11-11   59888.21     0.1857         12.397              0.808\n            2014-11-12   -3578.78    -0.0140          6.671              0.560\n            2014-11-26  -29085.19    -0.0946         12.494              0.762\n            ...               ...        ...            ...                ...\n            2016-03-14   16220.57     0.0559          9.324              0.444\n            2016-03-14  -25328.12    -0.1218          5.201              0.623\n            2016-03-30  -29858.44    -0.0863          4.070              0.536\n            2016-04-04    5373.76     0.0244          5.618              0.190\n            2016-04-13  -28044.40    -0.1159          4.457              0.270\n            2016-04-14  -18645.93    -0.0467          0.733              0.940\n            2016-04-15  -32484.79    -0.1149          1.162              0.631\n            2016-04-15  -32484.79    -0.1149          1.162              0.631\n            2016-04-29     290.96     0.0007         -1.115              1.000\n            2016-04-29     290.96     0.0007         -1.115              1.000\n\n                        buy_wave_score3  buy_atr_std\n            2014-09-24            0.218        0.226\n            2014-10-24            0.449        0.146\n            2014-10-29            0.329        0.538\n            2014-10-29           -0.203        0.558\n            2014-10-29           -0.173        0.063\n            2014-10-29            0.329        0.538\n            2014-11-03           -0.172       -0.002\n            2014-11-11            0.001        0.171\n            2014-11-12           -0.509        0.093\n            2014-11-26            0.015        0.812\n            ...                     ...          ...\n            2016-03-14            0.948        0.126\n            2016-03-14            0.788        0.663\n            2016-03-30            0.702       -0.008\n            2016-04-04            0.743        0.035\n            2016-04-13            0.651        0.262\n            2016-04-14            0.170        0.049\n            2016-04-15            0.800        0.135\n            2016-04-15            0.800        0.135\n            2016-04-29            0.918        0.838\n            2016-04-29            0.918        0.838\n        """"""\n\n        return mul_df\n\n\nclass AbuUmpEdgeMul(AbuUmpEdgeBase, BuyUmpMixin):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_deg_ang21\', \'buy_price_rank252\', \'buy_wave_score3\', \'buy_atr_std\']\n        :return: [\'buy_deg_ang21\', \'buy_price_rank252\', \'buy_wave_score3\', \'buy_atr_std\']\n        """"""\n\n        return [AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1],\n                AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1],\n                AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1],\n                AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpEdgeMul)[-1]]\n\n    def get_fiter_class(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpEdgeMul.UmpMulFiter\n        :return: AbuUmpEdgeMul.UmpMulFiter\n        """"""\n        return UmpMulFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n         \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'mul_edge\'\n         \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n         \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'mul_edge\'\n'"
abupy/UmpBu/ABuUmpEdgePrice.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe8\xbe\xb9\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeaturePrice\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_edge_make_xy, BuyUmpMixin\nfrom .ABuUmpEdgeBase import AbuUmpEdgeBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpPriceFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8\xe8\xbe\xb9\xe8\xa3\x81__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_edge_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n         make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_edge_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe8\xb0\x83\xe7\x94\xa8make_xy\xe5\x89\x8d\xe5\xb0\x86\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x9a\n         order_has_ret = orders_pd[orders_pd[\'result\'] != 0]\xef\xbc\x8c\xe4\xb8\x94\xe8\xb5\x8b\xe4\xba\x88self.order_has_ret\n         make_xy\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n\n        :param kwarg: ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90price_df\n                 ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9eprice_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        filter_list = [\'profit\', \'profit_cg\']\n        cols = AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpEdgePrice)\n        # [\'profit\', \'profit_cg\', \'buy_price_rank120\', \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\']\n        filter_list.extend(cols)\n\n        # noinspection PyUnresolvedReferences\n        price_df = self.order_has_ret.filter(filter_list)\n        """"""\n            eg: price_df\n                           profit  profit_cg  buy_price_rank120  buy_price_rank90  \\\n            2014-09-24  -22618.04    -0.0566              1.000             1.000\n            2014-10-24  -29690.28    -0.0742              1.000             1.000\n            2014-10-29   18959.19     0.0542              1.000             1.000\n            2014-10-29  148209.36     0.5022              0.925             0.900\n            2014-10-29   24867.60     0.0952              0.962             0.950\n            2014-10-29   18959.19     0.0542              1.000             1.000\n            2014-11-03    1250.80     0.0045              1.000             1.000\n            2014-11-11   59888.21     0.1857              0.954             0.939\n            2014-11-12   -3578.78    -0.0140              0.475             0.522\n            2014-11-26  -29085.19    -0.0946              0.642             0.733\n            ...               ...        ...                ...               ...\n            2016-03-14   16220.57     0.0559              0.617             0.500\n            2016-03-14  -25328.12    -0.1218              0.683             0.589\n            2016-03-30  -29858.44    -0.0863              0.658             0.667\n            2016-04-04    5373.76     0.0244              0.400             0.511\n            2016-04-13  -28044.40    -0.1159              0.567             0.722\n            2016-04-14  -18645.93    -0.0467              0.875             0.878\n            2016-04-15  -32484.79    -0.1149              0.775             0.733\n            2016-04-15  -32484.79    -0.1149              0.775             0.733\n            2016-04-29     290.96     0.0007              1.000             1.000\n            2016-04-29     290.96     0.0007              1.000             1.000\n\n                        buy_price_rank60  buy_price_rank252\n            2014-09-24             1.000              1.000\n            2014-10-24             1.000              1.000\n            2014-10-29             1.000              1.000\n            2014-10-29             0.883              0.750\n            2014-10-29             0.925              0.982\n            2014-10-29             1.000              1.000\n            2014-11-03             1.000              1.000\n            2014-11-11             0.992              0.808\n            2014-11-12             0.783              0.560\n            2014-11-26             1.000              0.762\n            ...                      ...                ...\n            2016-03-14             0.750              0.444\n            2016-03-14             0.850              0.623\n            2016-03-30             1.000              0.536\n            2016-04-04             0.767              0.190\n            2016-04-13             1.000              0.270\n            2016-04-14             0.967              0.940\n            2016-04-15             1.000              0.631\n            2016-04-15             1.000              0.631\n            2016-04-29             1.000              1.000\n            2016-04-29             1.000              1.000\n        """"""\n\n        return price_df\n\n\nclass AbuUmpEdgePrice(AbuUmpEdgeBase, BuyUmpMixin):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_price_rank120\', \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\']\n        :return: [\'buy_price_rank120\', \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\']\n        """"""\n        return AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpEdgePrice)\n\n    def get_fiter_class(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpEdgePrice.UmpPriceFiter\n        :return: AbuUmpEdgePrice.UmpPriceFiter\n        """"""\n        return UmpPriceFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n         \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'price_edge\'\n         \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n         \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'price_edge\'\n'"
abupy/UmpBu/ABuUmpEdgeWave.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureWave\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_edge_make_xy, BuyUmpMixin\nfrom .ABuUmpEdgeBase import AbuUmpEdgeBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpWaveFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8\xe8\xbe\xb9\xe8\xa3\x81__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_edge_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n         make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_edge_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8c\x85\xe8\xa3\x85\xef\xbc\x8c\xe8\xb0\x83\xe7\x94\xa8make_xy\xe5\x89\x8d\xe5\xb0\x86\xe6\x9c\x89\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x9a\n         order_has_ret = orders_pd[orders_pd[\'result\'] != 0]\xef\xbc\x8c\xe4\xb8\x94\xe8\xb5\x8b\xe4\xba\x88self.order_has_ret\n         make_xy\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n\n        :param kwarg: ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90wave_df\n                 ump_edge_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9ewave_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        filter_list = [\'profit\', \'profit_cg\']\n        cols = AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpEdgeWave)\n        # filter_list=[\'profit\', \'profit_cg\', \'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\']\n        filter_list.extend(cols)\n        # noinspection PyUnresolvedReferences\n        wave_df = self.order_has_ret.filter(filter_list)\n        """"""\n            eg: wave_df\n                           profit  profit_cg  buy_wave_score1  buy_wave_score2  \\\n            2014-09-24  -22618.04    -0.0566            0.287            0.234\n            2014-10-24  -29690.28    -0.0742            0.596            0.488\n            2014-10-29   18959.19     0.0542            0.444            0.338\n            2014-10-29  148209.36     0.5022           -0.173           -0.202\n            2014-10-29   24867.60     0.0952            0.031           -0.128\n            2014-10-29   18959.19     0.0542            0.444            0.338\n            2014-11-03    1250.80     0.0045            0.018           -0.128\n            2014-11-11   59888.21     0.1857           -0.144           -0.060\n            2014-11-12   -3578.78    -0.0140           -0.453           -0.505\n            2014-11-26  -29085.19    -0.0946           -0.005           -0.007\n            ...               ...        ...              ...              ...\n            2016-03-14   16220.57     0.0559            0.928            0.941\n            2016-03-14  -25328.12    -0.1218            1.209            0.891\n            2016-03-30  -29858.44    -0.0863            0.470            0.630\n            2016-04-04    5373.76     0.0244            0.363            0.608\n            2016-04-13  -28044.40    -0.1159            0.271            0.509\n            2016-04-14  -18645.93    -0.0467           -0.030            0.081\n            2016-04-15  -32484.79    -0.1149            0.596            0.753\n            2016-04-15  -32484.79    -0.1149            0.596            0.753\n            2016-04-29     290.96     0.0007            0.743            0.840\n            2016-04-29     290.96     0.0007            0.743            0.840\n\n                        buy_wave_score3\n            2014-09-24            0.218\n            2014-10-24            0.449\n            2014-10-29            0.329\n            2014-10-29           -0.203\n            2014-10-29           -0.173\n            2014-10-29            0.329\n            2014-11-03           -0.172\n            2014-11-11            0.001\n            2014-11-12           -0.509\n            2014-11-26            0.015\n            ...                     ...\n            2016-03-14            0.948\n            2016-03-14            0.788\n            2016-03-30            0.702\n            2016-04-04            0.743\n            2016-04-13            0.651\n            2016-04-14            0.170\n            2016-04-15            0.800\n            2016-04-15            0.800\n            2016-04-29            0.918\n            2016-04-29            0.918\n\n        """"""\n        return wave_df\n\n\nclass AbuUmpEdgeWave(AbuUmpEdgeBase, BuyUmpMixin):\n    """"""\xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpEdgeBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\']\n        :return: [\'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\']\n        """"""\n        return AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpEdgeWave)\n\n    def get_fiter_class(self):\n        """"""\n        \xe8\xbe\xb9\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpEdgeWave.UmpWaveFiter\n        :return: AbuUmpEdgeWave.UmpWaveFiter\n        """"""\n        return UmpWaveFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n         \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'wave_edge\'\n         \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n         \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'wave_edge\'\n'"
abupy/UmpBu/ABuUmpMainBase.py,19,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb8\xbb\xe8\xa3\x81\xe5\x9f\xba\xe7\xa1\x80\xe5\xae\x9e\xe7\x8e\xb0\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport os\nimport copy\nfrom abc import abstractmethod\nimport math\n\nfrom ..MarketBu import ABuMarketDrawing\n\nfrom ..CoreBu import ABuEnv\nimport logging\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport scipy.optimize as sco\n# noinspection PyUnresolvedReferences\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfrom ..UtilBu import ABuFileUtil\nfrom ..UtilBu.ABuProgress import AbuProgress\nfrom .ABuUmpBase import AbuUmpBase\nfrom ..CoreBu.ABuFixes import GMM\nfrom ..UtilBu.ABuProgress import AbuMulPidProgress\nfrom ..CoreBu.ABuParallel import delayed, Parallel\nfrom ..UtilBu.ABuDTUtil import plt_show\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84gmm\xe9\xbb\x98\xe8\xae\xa4\xe5\x88\x86\xe7\xb1\xbb\xe4\xbb\x8e40-85\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb""""""\nK_DEFAULT_NCS_RANG = slice(40, 85, 1)\n\n""""""\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84gmm\xe9\xbb\x98\xe8\xae\xa4\xe5\x88\x86\xe7\xb1\xbbK_DEFAULT_NCS_RANG\xe6\x9c\x80\xe5\xa4\xa7\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe8\xaf\xa6\xe9\x98\x85\xe8\xaf\xbb\xe4\xbd\xbf\xe7\x94\xa8""""""\nK_DEFAULT_NCS_MAX = 50000\n\n""""""\xe5\x9c\xa8brust_min\xe4\xb8\xad\xe8\xae\xa1\xe7\xae\x97lps_step, lms_step, lrs_step\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe9\xbb\x98\xe8\xae\xa4step\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa450\xef\xbc\x8c\xe8\xaf\xa6\xe8\xa7\x81brust_min\xe5\x87\xbd\xe6\x95\xb0\xe5\xae\x9e\xe7\x8e\xb0""""""\ng_brust_min_step_cnt = 50\n\n""""""\xe5\x9c\xa8\xe4\xb8\x8d\xe8\xae\xa1\xe7\xae\x97\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0brust_min\xe7\xbb\x84\xe5\x90\x88\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe7\x9a\x84\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0\xe6\x91\x98\xe5\x8f\x96cprs\xe5\xbd\xa2\xe6\x88\x90llps""""""\ng_brust_min_default = (0, 0, 0.65)\n\n""""""\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x9c\xa8ump_main_clf_dump\xe4\xb8\xadshow_order\xe6\x88\x96\xe8\x80\x85save_order\xe4\xb8\xbaTrue\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x9c\x80\xe5\xa4\x9a\xe7\xbb\x98\xe5\x88\xb6\xe5\x92\x8c\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\xe6\x95\xb0\xe9\x87\x8f""""""\ng_plot_order_max_cnt = 100\n\n\ndef _do_gmm_cluster(sub_ncs, x, df, threshold):\n    """"""\n    \xe5\x9c\xa8AbuUmpMainBase\xe4\xb8\xadfit\xe5\xb9\xb6\xe8\xa1\x8c\xe5\x90\xaf\xe5\x8a\xa8\xe7\x9a\x84\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84gmm cluster\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n    \xe5\x9c\xa8\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe8\xbf\xad\xe4\xbb\xa3sub_ncs\xe4\xb8\xad\xe7\x9a\x84component\xe5\x80\xbc\xe4\xbb\xa3\xe5\x85\xa5gmm\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87threshold\xe5\xaf\xb9gmm cluster\n    \xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xe8\xbf\x87\xe6\xbb\xa4\n    :param sub_ncs: \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xadgmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4, eg\xef\xbc\x9a [10, 11, 12, 13, 14, 15]\n    :param x: \xe4\xb8\xbb\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81x\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8cnumpy\xe7\x9f\xa9\xe9\x98\xb5\xe5\xaf\xb9\xe8\xb1\xa1\n    :param df: \xe4\xb8\xbb\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, \xe5\x8c\x85\xe6\x8b\xacx\xef\xbc\x8cy\n    :param threshold:  \xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa40.65\xef\xbc\x89\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa4\xa7\xe4\xba\x8ethreshold\xe5\x80\xbc\xe7\x9a\x84gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x81\x9a\xe4\xb8\xba\xe4\xb8\xbb\xe8\xa3\x81\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9b\xae\xe6\xa0\x87\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\n    :return: clf_component_dict, cluster_df_dict\n    """"""\n    clf_component_dict = {}\n    cluster_df_dict = {}\n\n    # \xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xbaAbuMulPidProgress\n    with AbuMulPidProgress(len(sub_ncs), \'gmm fit\') as progress:\n        for epoch, component in enumerate(sub_ncs):\n            progress.show(epoch + 1)\n            clf = GMM(component, random_state=3).fit(x)\n            cluster = clf.predict(x)\n            """"""\n                eg\xef\xbc\x9acomponent=14, cluster\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xef\xbc\x9a\n\n                      [ 4,  4, 13,  2,  3, 13,  3,  7,  1,  8,  4, 13,  4,  4,  2, 13, 13,\n                        ....... 1,  1,  5,  7,  5,  7,  0,  8, 13, 10, 10,  2,  2,  7, 12,\n                      12, 13,  7,  7, 13, 13]\n            """"""\n            # \xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xb4\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe4\xb8\x8b\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\xba\x8f\xe5\x8f\xb7\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8pd.crosstab\xef\xbc\x8c\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\xad\xe4\xbb\xa3\xe4\xb8\xad\xe6\x96\xb0\xe7\x9a\x84cluster\xe5\x8f\x88\xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90\n            df[\'cluster\'] = cluster\n            xt = pd.crosstab(df[\'cluster\'], df[\'result\'])\n            """"""\n                xt\xe5\xbd\xa2\xe5\xa6\x82: \xe5\x8d\xb3gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xba\xa4\xe6\x98\x93\xe5\x92\x8c\xe7\x9b\x88\xe5\x88\xa9\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe7\xbb\x9f\xe8\xae\xa1\n                result       0      1\n                cluster\n                0          290    279\n                2         1156    766\n                3          160    137\n                .....................\n            """"""\n            # \xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1cluster\xe6\x95\xb0\xe9\x87\x8f\xe7\x9a\x84\xe6\xb7\x98\xe6\xb1\xb0\xef\xbc\x8c\xe6\x97\xa0\xe6\xb3\x95\xe5\x87\x86\xe7\xa1\xae\xe9\x87\x8f\xe5\x8c\x96\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x91\xe4\xba\x8e\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xba\xe4\xb8\x8d\xe6\xad\xa3\xe5\xb8\xb8\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe8\x8c\x83\xe5\xae\x9a\xe4\xb9\x89\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe7\x9a\x841/1000\n            xt = xt[xt.sum(axis=1) > (df.shape[0] / 1000)]\n\n            xt_pct = xt.div(xt.sum(1).astype(float), axis=0)\n            """"""\n                xt_pct\xe5\xbd\xa2\xe5\xa6\x82: \xe5\x8d\xb3gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xba\xa4\xe6\x98\x93\xe5\x92\x8c\xe7\x9b\x88\xe5\x88\xa9\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe5\x8d\xa0\xe6\xaf\x94\xe4\xbe\x8b\n                            \xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe6\x96\xb9\xe4\xbe\xbf\xe5\x92\x8c\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84threshold\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa40.65\xef\xbc\x89\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x98\x80\xe5\x80\xbc\xe5\xaf\xb9\xe6\xaf\x94\n                result          0         1\n                cluster\n                0        0.509666  0.490334\n                2        0.601457  0.398543\n                3        0.538721  0.461279\n                ............................\n            """"""\n\n            # xt_pct[0]\xe5\x8d\xb3\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\n            cluster_ind = xt_pct[xt_pct[0] > threshold].index\n            """"""\n                eg\xef\xbc\x9axt_pct[xt_pct[0] > threshold].index\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9crt\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                Int64Index([7, 8, 9, 10], dtype=\'int64\', name=\'cluster\')\n\n                cluster_ind\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xbapd.Index\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97[7, 8, 9, 10]\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xbd\xbf\xe7\x94\xa8GMM(component)\xe5\x88\x86\xe7\xb1\xbb\n                \xe4\xb8\x8b\xe5\x88\x86\xe6\x88\x90component\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xef\xbc\x8c\xe6\xbb\xa1\xe8\xb6\xb3\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcthreshold\xe7\x9a\x84\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe5\xba\x8f\xe5\x8f\xb7\n            """"""\n            if len(cluster_ind) > 0:\n                # \xe6\x8a\x8a\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84component\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98clf\xe4\xbb\xa5\xe5\x8f\x8acluster_ind\n                clf_component_dict[component] = (clf, cluster_ind)\n                """"""\n                    eg\xef\xbc\x9aclf_component_dict\xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n                        key=component, value=(GaussianMixtured\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ccluster_ind: GMM(component)\xe5\x88\x86component\xe4\xb8\xaa\xe7\xb1\xbb\xe4\xb8\xad\xef\xbc\x8c\n                                              \xe6\xbb\xa1\xe8\xb6\xb3\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcthreshold\xe7\x9a\x84\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe5\xba\x8f\xe5\x8f\xb7)\n\n                    {14: (GaussianMixture(max_iter=100, n_components=14, n_init=1),\n                        Int64Index([7, 8, 9, 10], dtype=\'int64\', name=\'cluster\')),\n\n                    15: (GaussianMixture(max_iter=100, n_components=15, n_init=1),\n                        Int64Index([7, 8, 9, 10], dtype=\'int64\', name=\'cluster\'))}\n                """"""\n                # component\xe4\xb8\x8b\xe7\x9a\x84\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbbcluster_ind\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\xad\xe4\xbb\xa3\n                for cluster in cluster_ind:\n                    # cluster_df_key = component + cluster, eg: \'14_7\'\n                    cluster_df_key = \'{0}_{1}\'.format(component, cluster)\n                    # \xe4\xbb\x8edf\xe4\xb8\xad\xe5\x8f\x96\xe5\x87\xbacluster\xe5\xaf\xb9\xe4\xba\x8e\xe7\x9a\x84\xe5\xad\x90pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1cluster_df\n                    cluster_df = df[df[\'cluster\'] == cluster]\n                    """"""\n                        eg: cluster_df\n                                    result  buy_deg_ang42  buy_deg_ang252  buy_deg_ang60  \\\n                        2014-11-11       1          8.341          -9.450          0.730\n                        2015-10-28       0          7.144          -9.818         -3.886\n                        2015-11-04       0         12.442         -10.353          3.313\n                        2016-03-30       0         13.121          -8.461          4.498\n                        2016-04-15       0          4.238         -13.247          4.693\n                        2016-04-15       0          4.238         -13.247          4.693\n\n                                    buy_deg_ang21  ind  cluster\n                        2014-11-11         12.397    7        7\n                        2015-10-28          6.955   39        7\n                        2015-11-04          7.840   41        7\n                        2016-03-30          4.070   49        7\n                        2016-04-15          1.162   53        7\n                        2016-04-15          1.162   54        7\n                    """"""\n                    # \xe4\xbb\xa5cluster_df_key\xe5\x81\x9a\xe4\xb8\xbakey\xef\xbc\x8c value=cluster_df\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8cluster_df_dict\xe4\xb8\xad\n                    cluster_df_dict[cluster_df_key] = cluster_df\n\n    return clf_component_dict, cluster_df_dict\n\n\n# noinspection PyAttributeOutsideInit\nclass AbuUmpMainBase(AbuUmpBase):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    @classmethod\n    def ump_main_clf_dump(cls, orders_pd_train, p_ncs=None, brust_min=True, market_name=None,\n                          show_component=False, show_info=False, save_order=False, show_order=False):\n        """"""\n        \xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86orders_pd_train\xe6\x9e\x84\xe9\x80\xa0AbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0brust_min\xef\xbc\x8cp_ncs\xe7\xad\x89\xe5\x8f\x82\xe6\x95\xb0\n        \xe4\xbd\xbf\xe7\x94\xa8fit\xe6\x96\xb9\xe6\xb3\x95\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8dump_clf\xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe8\xae\xad\xe7\xbb\x83\xe7\xbb\x93\xe6\x9e\x9c\n        :param orders_pd_train: \xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n        :param p_ncs: gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4, \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe5\x85\xb7\xe4\xbd\x93\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xa6\x82[10, 11, 12....80], \xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n                      \xe5\xa6\x82xrange(10, 80, 10)\xef\xbc\x8c\xe8\xbf\x98\xe6\x94\xaf\xe6\x8c\x81slice\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg\xef\xbc\x9aslice(10, 80, 10)\n        :param brust_min: bool\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97brust_min\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x90\xa6\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4g_brust_min_default(0, 0, 0.65)\n                          \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8brust_min\xef\xbc\x8c\xe5\x8d\xb3brust_min=False\xe5\x8f\xaf\xe5\xa4\xa7\xe5\xa4\xa7\xe6\x8f\x90\xe9\xab\x98\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\n        :param market_name: \xe4\xb8\xbb\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe6\x88\x96\xe8\x80\x85\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa3\x81\xe5\x88\xa4\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x98\xe8\xb4\xae\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None, \xe6\xa0\xb9\xe6\x8d\xaeenv\xe4\xb8\xad\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x98\xe5\x82\xa8\xe5\x90\x8d\xe7\xa7\xb0\n        :param show_component: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96lcs\xef\xbc\x8clrs\xef\xbc\x8clps\xef\xbc\x8clms\xe6\x95\xb0\xe6\x8d\xae(2d, 3d)\xef\xbc\x8c\xe5\x8d\xb3\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99fit\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84show\xe5\x8f\x82\xe6\x95\xb0\n        :param show_info: \xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbabrust_min\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98lrs\xef\xbc\x8clps\xef\xbc\x8clms\xe7\xbb\x84\xe5\x90\x88\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbb\xa5\xe5\x8f\x8abest_hit_cnt_info\xef\xbc\x8cchoose_cprs_component\n                          \xe7\xad\x89\xe8\xbe\x85\xe5\x8a\xa9\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe8\xbe\x85\xe5\x8a\xa9\xe8\xbe\x93\xe5\x87\xba\xe4\xbf\xa1\xe6\x81\xaf\n        :param save_order: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\xb0\xe6\x9c\xac\xe5\x9c\xb0\n        :param show_order: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbb\x98\xe5\x88\xb6\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\xe5\x9b\xbe\xe7\x89\x87\n        :return: AbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        ump = cls(orders_pd_train, market_name=market_name)\n        # \xe8\xae\xad\xe7\xbb\x83\xe6\x8a\xbd\xe5\x8f\x96\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaebrust_min\n        ump.fit(show=show_component, p_ncs=p_ncs, brust_min=brust_min)\n        # \xe6\x9c\xac\xe5\x9c\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\n        ump.dump_clf()\n\n        if show_info:\n            ump.log_func(\'\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98:{}\'.format(ump.llps_brust_min))\n            # \xe7\xbb\x9f\xe8\xae\xa1\xe6\x8b\xa6\xe6\x88\xaahit best\xe5\x8f\x82\xe6\x95\xb0\n            ump.best_hit_cnt_info(ump.llps)\n            # \xe7\xbb\x9f\xe8\xae\xa1\xe6\xbb\xa4\xe5\x8e\xbbllps\xe7\x9a\x84\xe6\x8f\x90\xe5\x8d\x87\xe6\x83\x85\xe5\x86\xb5\n            ump.choose_cprs_component(ump.llps)\n\n        # \xe4\xbf\x9d\xe5\xad\x98\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x98\xe5\x88\xb6\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\xe5\x9b\xbe\xe7\x89\x87\n        if save_order or show_order:\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\n            max_failed_cluster_orders = ump.nts[ump.cprs.lrs.argmax()]\n            # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8forder_len\n            order_len = max_failed_cluster_orders.shape[0]\n            # \xe6\x9e\x84\xe5\xbb\xba\xe7\xbb\x98\xe5\x88\xb6\xe5\x92\x8c\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n            with AbuProgress(g_plot_order_max_cnt, 0, \'save or plot order progress\') as order_progress:\n                for ind in np.arange(0, order_len):\n                    order_progress.show(ind)\n                    if ind > g_plot_order_max_cnt:\n                        # g_plot_order_max_cnt\xe6\x9c\x80\xe5\xa4\x9a\xe7\xbb\x98\xe5\x88\xb6\xe5\x92\x8c\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xbf\xab\xe7\x85\xa7\xe6\x95\xb0\xe9\x87\x8f\n                        break\n                    # \xe8\x8e\xb7\xe5\x8f\x96max_failed_cluster_orders\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84order_ind\n                    order_ind = int(max_failed_cluster_orders.iloc[ind].ind)\n                    # \xe9\x80\x9a\xe8\xbf\x87order_ind\xe4\xbb\x8e\xe5\x8e\x9f\xe5\xa7\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xad\x90ump.fiter.order_has_ret\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8d\x95\xe5\xad\x90\xe4\xbd\xbf\xe7\x94\xa8ABuMarketDrawing.plot_candle_from_order\n                    ABuMarketDrawing.plot_candle_from_order(ump.fiter.order_has_ret.iloc[order_ind], save=save_order)\n                    if save_order and show_order:\n                        # FIXME \xe5\x8d\xb3\xe7\xbb\x98\xe5\x88\xb6\xe5\x8f\x88\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x8f\x88\xe9\x87\x8d\xe6\x96\xb0\xe7\xbb\x98\xe5\x88\xb6\xe4\xba\x86\xe4\xb8\x80\xe9\x81\x8d\n                        ABuMarketDrawing.plot_candle_from_order(ump.fiter.order_has_ret.iloc[order_ind])\n        # \xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9eAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\n        return ump\n\n    @abstractmethod\n    def get_fiter_class(self):\n        """"""abstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\xad\x9b\xe9\x80\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe7\x9a\x84\xe7\xb1\xbb""""""\n        pass\n\n    @abstractmethod\n    def get_predict_col(self):\n        """"""abstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe8\x8e\xb7\xe5\x8f\x96\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe8\xa3\x81\xe5\x88\xa4\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81keys""""""\n        pass\n\n    @classmethod\n    @abstractmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8cabstractmethod\xe5\xad\x90\xe7\xb1\xbb\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        pass\n\n    def __init__(self, orders_pd=None, predict=False, market_name=None, **kwarg):\n        """"""\n        :param orders_pd: \xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x9e\x84\xe6\x88\x90\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, \xe6\x9c\x80\xe5\xa5\xbd\xe6\x98\xaf\xe7\xbb\x8f\xe8\xbf\x87\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\n                          AbuMetricsBase\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\xa6\xe9\x87\x8ffit_metrics\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84orders_pd\n        :param predict: \xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xba\xe9\xa2\x84\xe6\xb5\x8b\xef\xbc\x8c\xe9\x9d\x9e\xe8\xae\xad\xe7\xbb\x83\xe8\xa3\x81\xe5\x88\xa4\n        :param market_name: \xe4\xb8\xbb\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xe6\x88\x96\xe8\x80\x85\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa3\x81\xe5\x88\xa4\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x98\xe8\xb4\xae\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4None, \xe6\xa0\xb9\xe6\x8d\xaeenv\xe4\xb8\xad\xe7\x9a\x84\xe5\xbd\x93\xe5\x89\x8d\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe5\xad\x98\xe5\x82\xa8\xe5\x90\x8d\xe7\xa7\xb0\n        :param kwarg: \xe5\xb0\x86kwarg\xe5\x8f\x82\xe6\x95\xb0\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99fiter_cls\xe7\x9a\x84\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x9a\n                        self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        """"""\n        self.orders_pd = orders_pd\n        # \xe7\x89\xb9\xe5\xbe\x81\xe7\xad\x9b\xe9\x80\x89\xe7\xb1\xbbfiter_cls\n        self.fiter_cls = self.get_fiter_class()\n        # ipython notebook\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8logging.info\n        self.log_func = logging.info if ABuEnv.g_is_ipython else print\n        if isinstance(market_name, ABuEnv.EMarketTargetType):\n            market_name = market_name.value\n        # predict\xe6\x88\x96\xe8\x80\x85\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe5\xba\x94\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0, \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe5\xaf\xb9\xe5\xba\x94\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x90\x8d\xe5\xad\x97 eg\xef\xbc\x8c\'us\'\xef\xbc\x8c \'cn\'\n        self.market_name = ABuEnv.g_market_target.value if market_name is None else market_name\n        if predict:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafpredict\xe9\x9d\x9e\xe8\xae\xad\xe7\xbb\x83\xe7\x9b\xae\xe7\x9a\x84\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n            # TODO \xe6\x8b\x86\xe5\xbc\x80predict\xe5\x92\x8c\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe7\xba\xa0\xe7\xbc\xa0\xe5\x9c\xa8\xe4\xb8\x80\xe8\xb5\xb7\n            return\n\n        if orders_pd is not None and \'profit_cg\' not in orders_pd.columns:\n            # profit_cg\xe7\xad\x89\xe5\xba\xa6\xe9\x87\x8f\xe5\x8f\x82\xe6\x95\xb0\xe6\x98\xaf\xe8\xa6\x81\xe5\x9c\xa8AbuMetricsBase\xe7\xbb\x93\xe6\x9d\x9f\xe5\x90\x8e\xe6\x89\x8d\xe4\xbc\x9a\xe6\x9c\x89\n            self.log_func(\'you do better AbuMetricsBase.fit_metrics in orders_pd!!!!\')\n            from ..MetricsBu.ABuMetricsBase import AbuMetricsBase\n            # \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe5\x81\x9afit_metrics_order\xef\xbc\x8c\xe6\xb2\xa1\xe5\x81\x9afit_metrics\xe5\x9b\xa0\xe4\xb8\xba\xe6\xaf\x94\xe5\xa6\x82\xe6\x9c\x9f\xe8\xb4\xa7\xef\xbc\x8c\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xe4\xbc\x9a\xe6\x9c\x89\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe5\xba\xa6\xe9\x87\x8f\xe7\xb1\xbb\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x9a\xe7\x94\xa8\xe7\x9a\x84fit_metrics_order\n            AbuMetricsBase(orders_pd, None, None, None).fit_metrics_order()\n        # \xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x89\xb9\xe5\xbe\x81\xe6\x9e\x84\xe9\x80\xa0\xe5\xaf\xb9\xe8\xb1\xa1self.fiter\n        self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        """"""\n            self.fiter\xe6\x98\xafAbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x9c\xa8init\xe4\xb8\xad\xe5\x8d\xb3\xe9\x80\x9a\xe8\xbf\x87make_xy\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xbaorders_pd\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x9c\xa8\xe5\xad\x90\xe7\xb1\xbb\n            \xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84make_xy\xe5\x87\xbd\xe6\x95\xb0\xe9\x83\xbd\xe8\xa2\xab\xe4\xb8\xbb\xe8\xa3\x81\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\xaf\xb9\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe6\x8f\x90\xe5\x8f\x96x,\n            y\xe5\xba\x8f\xe5\x88\x97\xe7\xad\x89\xe7\xbb\x9f\xe4\xb8\x80\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xaf\xa6\xe9\x98\x85AbuUmpMainDeg\xe7\xad\x89\xe7\xa4\xba\xe4\xbe\x8b\xe4\xb8\xbb\xe8\xa3\x81\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\n\n            \xe8\xbf\x99\xe9\x87\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\xa5\xbd\xe7\x9a\x84self.fiter\xe4\xb8\xaddf\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xb7\xb2\xe7\xbb\x8f\xe5\xad\x98\xe5\x9c\xa8\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\n            eg: self.fiter.df\n                        result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\n            2014-09-24\t0\t    3.378\t        3.458\t        3.458\t        1.818\n            2014-10-24\t0\t    0.191\t        2.889\t        2.809\t        -1.089\n            2014-10-29\t1\t    -2.026\t        16.689      \t-0.761\t        1.980\n            2014-10-29\t1\t    -3.427      \t-11.956\t        -8.296\t        6.507\n            2014-10-29\t1\t    -2.915\t        39.469      \t-6.043\t        7.046\n        """"""\n        # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8svm\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\n        self.fiter().estimator.svc()\n\n    # noinspection PyMethodMayBeStatic\n    def _sub_ncs_split(self, ncs, n_jobs):\n        sub_ncs_cnt = int(len(ncs) / n_jobs)\n        if sub_ncs_cnt == 0:\n            sub_ncs_cnt = 1\n        group_adjacent = lambda a, k: zip(*([iter(a)] * k))\n        ncs_group = list(group_adjacent(ncs, sub_ncs_cnt))\n        residue_ind = -(len(ncs) % sub_ncs_cnt) if sub_ncs_cnt > 0 else 0\n        if residue_ind < 0:\n            # \xe6\x89\x80\xe4\xbb\xa5\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\x83\xbd\xe9\x99\xa4\xe5\xb0\xbd\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe5\x88\x87\xe5\x89\xb2\xe7\x9a\x84\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbak_split+1, \xe5\xa4\x96\xe9\x83\xa8\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe8\xae\xa4\xe4\xb8\xba\xe5\xb9\xb6\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\xaf\xe6\xa0\xb9\xe6\x8d\xae\xe6\x9c\x80\xe7\xbb\x88\xe5\x88\x87\xe5\x89\xb2\xe5\xa5\xbd\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe9\x87\x8d\xe5\x88\x86\xe9\x85\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\n            ncs_group.append(ncs[residue_ind:])\n        return ncs_group\n\n    def fit(self, p_ncs=None, threshold=0.65, brust_min=True, show=True):\n        """"""\n        \xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\xae\xad\xe7\xbb\x83\xe6\x8b\x9f\xe5\x90\x88\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe8\xa7\x84\xe5\x88\x99\xe8\xae\xa1\xe7\xae\x97gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8gmm\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x98\x80\xe5\x80\xbc\xe7\xad\x9b\xe9\x80\x89\xef\xbc\x8c\n        \xe6\xa0\xb9\xe6\x8d\xaebrust_min\xe5\x8f\x82\xe6\x95\xb0\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe7\x94\x9f\xe6\x88\x90self.rts\xef\xbc\x8cself.nts\xef\xbc\x8cself.cprs\n\n        eg\xef\xbc\x9aself.rts\xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n            key=component, value=(GaussianMixtured\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ccluster_ind: GMM(component)\xe5\x88\x86component\xe4\xb8\xaa\xe7\xb1\xbb\xe4\xb8\xad\xef\xbc\x8c\n            \xe6\xbb\xa1\xe8\xb6\xb3\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcthreshold\xe7\x9a\x84\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe5\xba\x8f\xe5\x8f\xb7)\n\n            {14: (GaussianMixture(max_iter=100, n_components=14, n_init=1),\n                Int64Index([7, 8, 9, 10], dtype=\'int64\', name=\'cluster\')),\n\n            15: (GaussianMixture(max_iter=100, n_components=15, n_init=1),\n                Int64Index([7, 8, 9, 10], dtype=\'int64\', name=\'cluster\'))}\n\n        eg: self.nts\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                {\n                \'14-7\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-11\t1\t    8.341\t        -9.450\t        0.730\t        12.397\t        7\t7\n                2015-10-28\t0\t    7.144\t        -9.818\t        -3.886\t        6.955\t        39\t7\n                2015-11-04\t0\t    12.442\t        -10.353\t        3.313\t        7.840\t        41\t7\n                2016-03-30\t0\t    13.121\t        -8.461\t        4.498\t        4.070\t        49\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        53\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        54\t7\n                ...............................................................................................\n\n                \'14-8\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-26\t0\t    14.052\t        6.061\t        7.566\t        12.494\t        9\t8\n                2015-04-22\t1\t    20.640\t        2.751\t        20.436\t        18.781\t        23\t8\n                2015-12-16\t0\t    12.906\t        6.312\t        16.638\t        12.379\t        43\t8\n\n                ................................................................................................\n                }\n\n        eg: self.cprs pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\n                   lcs     lms     lps     lrs\n            14_7     6 -0.0552 -0.3310  0.8333\n            14_8     3 -0.0622 -0.1866  0.6667\n            14_9     1 -0.1128 -0.1128  1.0000\n            14_10    2 -0.0327 -0.0654  1.0000\n            15_7     4 -0.1116 -0.4465  1.0000\n            15_8     3 -0.0622 -0.1866  0.6667\n            ...    ...     ...     ...     ...\n            27_8     1 -0.1128 -0.1128  1.0000\n            27_9     3 -0.0103 -0.0309  0.6667\n            27_14    1 -0.0946 -0.0946  1.0000\n            27_15    2 -0.1149 -0.2299  1.0000\n            27_17    1 -0.1041 -0.1041  1.0000\n            27_18    2 -0.0327 -0.0654  1.0000\n            27_24    1 -0.0140 -0.0140  1.0000\n\n        :param p_ncs: gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4, \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe5\x85\xb7\xe4\xbd\x93\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xa6\x82[10, 11, 12....80], \xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xba\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n                      \xe5\xa6\x82xrange(10, 80, 10)\xef\xbc\x8c\xe8\xbf\x98\xe6\x94\xaf\xe6\x8c\x81slice\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg\xef\xbc\x9aslice(10, 80, 10)\n        :param threshold: \xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa40.65\xef\xbc\x89\xef\xbc\x8c\xe5\x8d\xb3\xe5\xa4\xa7\xe4\xba\x8ethreshold\xe5\x80\xbc\xe7\x9a\x84gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x81\x9a\xe4\xb8\xba\xe4\xb8\xbb\xe8\xa3\x81\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9b\xae\xe6\xa0\x87\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\n        :param brust_min: bool\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97brust_min\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x90\xa6\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4g_brust_min_default(0, 0, 0.65)\n                          \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8brust_min\xef\xbc\x8c\xe5\x8d\xb3brust_min=False\xe5\x8f\xaf\xe5\xa4\xa7\xe5\xa4\xa7\xe6\x8f\x90\xe9\xab\x98\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96lcs\xef\xbc\x8clrs\xef\xbc\x8clps\xef\xbc\x8clms\xe6\x95\xb0\xe6\x8d\xae(2d, 3d)\n        """"""\n        if self.fiter().df.shape[0] < 50:\n            # \xe6\x9c\x89\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x9c\x80\xe5\xb0\x91\xe8\xa6\x81\xe6\x9c\x8950\xe4\xb8\xaa\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n            self.log_func(\'order count at least more than 50!\')\n            return\n\n        if p_ncs is None:\n            if self.fiter().df.shape[0] < K_DEFAULT_NCS_MAX:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaegmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe4\xb8\x94\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x8f\xe4\xba\x8eK_DEFAULT_NCS_MAX\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe8\x8c\x83\xe5\x9b\xb4slice(40, 85, 1)\n                ncs = np.arange(K_DEFAULT_NCS_RANG.start, K_DEFAULT_NCS_RANG.stop, K_DEFAULT_NCS_RANG.step)\n            else:\n                # \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe6\x95\xb0\xe9\x87\x8f > K_DEFAULT_NCS_MAX\xe6\x97\xb6\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97start\xef\xbc\x8cstop\xef\xbc\x8cstep\n                ncs_stop = int(math.ceil(self.fiter().df.shape[0] * K_DEFAULT_NCS_RANG.stop / K_DEFAULT_NCS_MAX))\n                # \xe6\xa0\xb9\xe6\x8d\xae\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe7\x9a\x84stop\xe5\x92\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84start\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97start\n                ncs_start = int(ncs_stop - K_DEFAULT_NCS_RANG.start)\n                ncs_step = K_DEFAULT_NCS_RANG.step\n                ncs = np.arange(ncs_start, ncs_stop, ncs_step)\n\n        elif p_ncs is not None and isinstance(p_ncs, slice):\n            # \xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84gmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe4\xb8\xbaslice\xe5\x88\x87\xe7\x89\x87\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0np.arange\n            ncs = np.arange(p_ncs.start, p_ncs.stop, p_ncs.step)\n        else:\n            # \xe6\x8a\x8a\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xa6\x82xrange(10, 80, 10)\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85tuple, set\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\xbb\x9f\xe4\xb8\x80\xe5\x88\xb0list\n            ncs = list(p_ncs)\n\n        if ncs[-1] >= self.fiter().df.shape[0] / 2:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe6\x9c\x80\xe5\xa4\xa7\xe5\x88\x86\xe7\xb1\xbb\xe6\x95\xb0ncs[-1]\xe5\xa4\xa7\xe4\xba\x8e\xe6\x80\xbb\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe9\x87\x8f\xe7\x9a\x84\xe4\xb8\x80\xe5\x8d\x8a\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe5\x88\x86\xe9\x85\x8dgmm\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\xa4\xe6\x98\x93\xe9\x87\x8f1/4-1/2\n            ncs = np.arange(int(self.fiter().df.shape[0] / 4), int(self.fiter().df.shape[0] / 2))\n\n        # return ncs\n        # \xe8\xbf\x99\xe9\x87\x8ccopy\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1self.fiter().df\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9df\xef\xbc\x8c\xe4\xbf\x9d\xe6\x8c\x81\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\x8d\xe5\x8f\x98\n        df = copy.deepcopy(self.fiter().df)\n        # \xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xb4\xa2\xe5\xbc\x95\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\x96\xb9\xe4\xbe\xbf\xe4\xb9\x8b\xe5\x90\x8e\xe5\xbf\xab\xe9\x80\x9f\xe6\x9f\xa5\xe6\x89\xbe\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8d\x95\xe6\x8d\xae, \xe5\x8d\xb3\xe4\xbb\x8eself.fiter.order_has_ret.iloc[df.ind.values]\n        df[\'ind\'] = np.arange(0, df.shape[0])\n        """"""\n            eg: df\xe6\xb7\xbb\xe5\x8a\xa0ind\xe5\x88\x97\n                            result  buy_deg_ang42  buy_deg_ang252  buy_deg_ang60  \\\n            2014-09-24       0          3.378           3.458          3.458\n            2014-10-24       0          0.191           2.889          2.809\n            2014-10-29       1         -2.026          16.689         -0.761\n            2014-10-29       1         -3.427         -11.956         -8.296\n            2014-10-29       1         -2.915          39.469         -6.043\n                        buy_deg_ang21  ind\n            2014-09-24          1.818    0\n            2014-10-24         -1.089    1\n            2014-10-29          1.980    2\n            2014-10-29          6.507    3\n            2014-10-29          7.046    4\n        """"""\n        clf_component_dict = {}\n        cluster_df_dict = {}\n\n        if self.fiter().df.shape[0] < 1000:\n            # \xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe6\x80\xbb\xe6\x95\xb0\xe5\xb0\x8f\xe4\xba\x8e1000\xe4\xb8\xaa\xef\xbc\x8c\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\n            clf_component_dict, cluster_df_dict = _do_gmm_cluster(ncs, self.fiter().x, df, threshold)\n        else:\n            n_jobs = ABuEnv.g_cpu_cnt\n            # \xe6\xa0\xb9\xe6\x8d\xae\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe5\x88\x87\xe5\x89\xb2ncs\xe4\xb8\xban_jobs\xe4\xb8\xaa\xe5\xad\x90ncs\xe5\xbd\xa2\xe6\x88\x90ncs_group\n            ncs_group = self._sub_ncs_split(ncs, n_jobs)\n            parallel = Parallel(\n                n_jobs=len(ncs_group), verbose=0, pre_dispatch=\'2*n_jobs\')\n            out = parallel(delayed(_do_gmm_cluster)(sub_ncs, self.fiter().x, df, threshold) for sub_ncs in ncs_group)\n\n            for sub_out in out:\n                # \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x88\xe5\xb9\xb6\n                clf_component_dict.update(sub_out[0])\n                cluster_df_dict.update(sub_out[1])\n\n        self.rts = clf_component_dict\n        self.nts = cluster_df_dict\n        self.cprs = self._fit_cprs(show=show)\n        """"""\n         eg: self.cprs\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n                   lcs     lms     lps     lrs\n            14_7     6 -0.0552 -0.3310  0.8333\n            14_8     3 -0.0622 -0.1866  0.6667\n            14_9     1 -0.1128 -0.1128  1.0000\n            14_10    2 -0.0327 -0.0654  1.0000\n            15_7     4 -0.1116 -0.4465  1.0000\n            15_8     3 -0.0622 -0.1866  0.6667\n            ...    ...     ...     ...     ...\n            27_8     1 -0.1128 -0.1128  1.0000\n            27_9     3 -0.0103 -0.0309  0.6667\n            27_14    1 -0.0946 -0.0946  1.0000\n            27_15    2 -0.1149 -0.2299  1.0000\n            27_17    1 -0.1041 -0.1041  1.0000\n            27_18    2 -0.0327 -0.0654  1.0000\n            27_24    1 -0.0140 -0.0140  1.0000\n        """"""\n        # noinspection PyTypeChecker\n        self._fit_brust_min(brust_min)\n\n    def _fit_cprs(self, show):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87self.nts\xef\xbc\x8ceg: self.nts\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                {\n                \'14-7\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-11\t1\t    8.341\t        -9.450\t        0.730\t        12.397\t        7\t7\n                2015-10-28\t0\t    7.144\t        -9.818\t        -3.886\t        6.955\t        39\t7\n                2015-11-04\t0\t    12.442\t        -10.353\t        3.313\t        7.840\t        41\t7\n                2016-03-30\t0\t    13.121\t        -8.461\t        4.498\t        4.070\t        49\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        53\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        54\t7\n                ...............................................................................................\n\n                \'14-8\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-26\t0\t    14.052\t        6.061\t        7.566\t        12.494\t        9\t8\n                2015-04-22\t1\t    20.640\t        2.751\t        20.436\t        18.781\t        23\t8\n                2015-12-16\t0\t    12.906\t        6.312\t        16.638\t        12.379\t        43\t8\n\n                ................................................................................................\n                }\n        \xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x8a\xef\xbc\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x80\xbb\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\n        \xe4\xbb\xa5\xe5\x8f\x8a\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe8\x83\x9c\xe7\x8e\x87(\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xba\x8f\xe6\x8d\x9f\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f/\xe7\xb1\xbb\xe9\x86\x8b\xe4\xb8\xad\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f), \xe4\xbb\xa5\xe4\xb8\x8a\xe6\x9e\x84\xe6\x88\x90\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x9acprs_dict\n            eg: cprs_dict = {\'lcs\': [], \'lrs\': [], \'lps\': [], \'lms\': []}\n                lcs\xef\xbc\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xaa\xe6\x95\xb0\n                lrs\xef\xbc\x9a\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xba\x8f\xe6\x8d\x9f\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f/\xe7\xb1\xbb\xe9\x86\x8b\xe4\xb8\xad\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\n                lps\xef\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87cluster_order_df.profit_cg\xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x80\xbb\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\n                lms\xef\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87cluster_order_df.profit_cg\xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x8a\n        \xe6\x9e\x84\xe9\x80\xa0pd.DataFrame(cprs_dict, index=cprs_index)\xe6\x8f\x90\xe4\xbe\x9b\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x9d\xe5\xa7\x8b\n\n        :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96lcs\xef\xbc\x8clrs\xef\xbc\x8clps\xef\xbc\x8clms\xe6\x95\xb0\xe6\x8d\xae(2d, 3d)\n        :return: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                eg: cprs\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n                       lcs     lms     lps     lrs\n                14_7     6 -0.0552 -0.3310  0.8333\n                14_8     3 -0.0622 -0.1866  0.6667\n                14_9     1 -0.1128 -0.1128  1.0000\n                14_10    2 -0.0327 -0.0654  1.0000\n                15_7     4 -0.1116 -0.4465  1.0000\n                15_8     3 -0.0622 -0.1866  0.6667\n                15_9     1 -0.1128 -0.1128  1.0000\n                15_10    2 -0.0327 -0.0654  1.0000\n                16_7     4 -0.1116 -0.4465  1.0000\n                16_8     3 -0.0622 -0.1866  0.6667\n                ...    ...     ...     ...     ...\n                26_17    1 -0.1041 -0.1041  1.0000\n                26_18    2 -0.0327 -0.0654  1.0000\n                26_24    1 -0.0140 -0.0140  1.0000\n                27_8     1 -0.1128 -0.1128  1.0000\n                27_9     3 -0.0103 -0.0309  0.6667\n                27_14    1 -0.0946 -0.0946  1.0000\n                27_15    2 -0.1149 -0.2299  1.0000\n                27_17    1 -0.1041 -0.1041  1.0000\n                27_18    2 -0.0327 -0.0654  1.0000\n                27_24    1 -0.0140 -0.0140  1.0000\n\n        """"""\n\n        """"""\n            cprs_dict\xe5\x92\x8ccprs_index\xe4\xb8\xba\xe4\xba\x86\xe6\x9e\x84\xe9\x80\xa0pd.DataFrame(cprs_dict, index=cprs_index)\xe6\x8f\x90\xe4\xbe\x9b\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x9d\xe5\xa7\x8b\n            lcs\xef\xbc\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xaa\xe6\x95\xb0\n            lrs\xef\xbc\x9a\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xba\x8f\xe6\x8d\x9f\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f/\xe7\xb1\xbb\xe9\x86\x8b\xe4\xb8\xad\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\n            lps\xef\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87cluster_order_df.profit_cg\xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x80\xbb\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\n            lms\xef\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87cluster_order_df.profit_cg\xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x8a\n        """"""\n        cprs_dict = {\'lcs\': [], \'lrs\': [], \'lps\': [], \'lms\': []}\n        cprs_index = list()\n        for cluster_df_key in self.nts:\n            """"""\n                eg: self.nts\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n                {\n                \'14-7\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-11\t1\t    8.341\t        -9.450\t        0.730\t        12.397\t        7\t7\n                2015-10-28\t0\t    7.144\t        -9.818\t        -3.886\t        6.955\t        39\t7\n                2015-11-04\t0\t    12.442\t        -10.353\t        3.313\t        7.840\t        41\t7\n                2016-03-30\t0\t    13.121\t        -8.461\t        4.498\t        4.070\t        49\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        53\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        54\t7\n                ...............................................................................................\n\n                \'14-8\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-26\t0\t    14.052\t        6.061\t        7.566\t        12.494\t        9\t8\n                2015-04-22\t1\t    20.640\t        2.751\t        20.436\t        18.781\t        23\t8\n                2015-12-16\t0\t    12.906\t        6.312\t        16.638\t        12.379\t        43\t8\n\n                ................................................................................................\n                }\n            """"""\n            # eg: cluster_df_key = \'14-7\' \xe6\x8b\xbf\xe5\x87\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n            df_cluster = self.nts[cluster_df_key]\n            # \xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xaa\xe6\x95\xb0\n            cluster_cnt = df_cluster.shape[0]\n            """"""\n                eg:\n                    df_cluster[\'result\']:\n\n                        2014-11-11    1\n                        2015-10-28    0\n                        2015-11-04    0\n                        2016-03-30    0\n                        2016-04-15    0\n                        2016-04-15    0\n\n                    df_cluster[\'result\'].value_counts()\n\n                        0    5\n                        1    1\n\n                    ->: df_cluster[\'result\'].value_counts()[0] == 5\n                    ->: df_cluster[\'result\'].value_counts().sum() == 6\n\n                \xef\xbc\x8d> loss_rate = 5 / 6: \xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\xa4\xb1\xe8\xb4\xa5\xe4\xba\x8f\xe6\x8d\x9f\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f/\xe7\xb1\xbb\xe9\x86\x8b\xe4\xb8\xad\xe6\x80\xbb\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\n            """"""\n            loss_rate = df_cluster[\'result\'].value_counts()[0] / df_cluster[\'result\'].value_counts().sum()\n            # \xe5\x9c\xa8fit\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8df[\'ind\'] = np.arange(0, df.shape[0])\xe5\xb0\xb1\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8e\xe5\x8e\x9f\xe5\xa7\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xad\x90\xe4\xbf\x9d\xe7\x95\x99\xe5\xaf\xb9\xe5\xba\x94\xe5\x85\xb3\xe7\xb3\xbb\n            cluster_order_df = self.fiter.order_has_ret.iloc[df_cluster.ind.values]\n            # \xe5\x8e\x9f\xe5\xa7\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xad\x90orders_pd\xe4\xb8\xadprofit_cg\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\xaf\x8f\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe7\x9b\x88\xe5\x88\xa9\xe9\x87\x91\xe9\xa2\x9d\xe4\xb8\x8e\xe8\xbf\x99\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x85\xa5\xe9\x87\x91\xe8\x9e\x8d\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\n            # \xe9\x80\x9a\xe8\xbf\x87cluster_order_df.profit_cg\xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe6\x94\xb6\xe7\x9b\x8a\n            cluster_profit_mean = cluster_order_df.profit_cg.mean()\n            # \xe9\x80\x9a\xe8\xbf\x87cluster_order_df.profit_cg\xe8\xae\xa1\xe7\xae\x97\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84\xe6\x80\xbb\xe6\x94\xb6\xe7\x9b\x8a\xe6\xaf\x94\xe4\xbe\x8b\n            cluster_profit_sum = cluster_order_df.profit_cg.sum()\n\n            cprs_dict[\'lcs\'].append(cluster_cnt)\n            cprs_dict[\'lrs\'].append(loss_rate)\n            cprs_dict[\'lms\'].append(cluster_profit_mean)\n            cprs_dict[\'lps\'].append(cluster_profit_sum)\n            # cluster_df_key\xe4\xb8\xba\xe6\x9c\x80\xe7\xbb\x88\xe7\x94\x9f\xe6\x88\x90pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1index\xe5\xba\x8f\xe5\x88\x97\n            cprs_index.append(cluster_df_key)\n\n        cprs = pd.DataFrame(cprs_dict, index=cprs_index)\n        """"""\n            eg: cprs\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n                   lcs     lms     lps     lrs\n            14_7     6 -0.0552 -0.3310  0.8333\n            14_8     3 -0.0622 -0.1866  0.6667\n            14_9     1 -0.1128 -0.1128  1.0000\n            14_10    2 -0.0327 -0.0654  1.0000\n            15_7     4 -0.1116 -0.4465  1.0000\n            15_8     3 -0.0622 -0.1866  0.6667\n            15_9     1 -0.1128 -0.1128  1.0000\n            15_10    2 -0.0327 -0.0654  1.0000\n            16_7     4 -0.1116 -0.4465  1.0000\n            16_8     3 -0.0622 -0.1866  0.6667\n            ...    ...     ...     ...     ...\n            26_17    1 -0.1041 -0.1041  1.0000\n            26_18    2 -0.0327 -0.0654  1.0000\n            26_24    1 -0.0140 -0.0140  1.0000\n            27_8     1 -0.1128 -0.1128  1.0000\n            27_9     3 -0.0103 -0.0309  0.6667\n            27_14    1 -0.0946 -0.0946  1.0000\n            27_15    2 -0.1149 -0.2299  1.0000\n            27_17    1 -0.1041 -0.1041  1.0000\n            27_18    2 -0.0327 -0.0654  1.0000\n            27_24    1 -0.0140 -0.0140  1.0000\n        """"""\n        if show and len(cprs_dict) > 0:\n            # show 2d\n            cmap = plt.get_cmap(\'jet\', 20)\n            cmap.set_under(\'gray\')\n            fig, ax = plt.subplots(figsize=(9, 6))\n            # x\xe8\xbd\xb4lrs\xef\xbc\x8cy\xe8\xbd\xb4\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8scatter\xe7\xbb\x98\xe5\x88\xb6\xe7\x82\xb9\xef\xbc\x8c\xe7\x82\xb9\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xe7\x94\xb1lps\xe5\x86\xb3\xe5\xae\x9a\n            cax = ax.scatter(cprs_dict[\'lrs\'], cprs_dict[\'lcs\'], c=cprs_dict[\'lps\'], cmap=cmap,\n                             vmin=np.min(cprs_dict[\'lps\']),\n                             vmax=np.max(cprs_dict[\'lps\']))\n            fig.colorbar(cax, label=\'lps\', extend=\'min\')\n            plt.grid(True)\n            plt.xlabel(\'lrs\')\n            plt.ylabel(\'lcs\')\n            plt.show()\n\n            # show 3d\n            fig = plt.figure(figsize=(9, 6))\n            ax = fig.gca(projection=\'3d\')\n            ax.view_init(30, 60)\n            # x\xe8\xbd\xb4lrs\xef\xbc\x8cy\xe8\xbd\xb4lcs, z\xe8\xbd\xb4lps\xef\xbc\x8cscatter3D\xe7\xbb\x98\xe5\x88\xb63d\xe7\x82\xb9\xef\xbc\x8c\xe7\x82\xb9\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xe7\x94\xb1lms\xe5\x86\xb3\xe5\xae\x9a\n            ax.scatter3D(cprs_dict[\'lrs\'], cprs_dict[\'lcs\'], cprs_dict[\'lps\'],\n                         c=cprs_dict[\'lms\'], s=50, cmap=\'spring\')\n            ax.set_xlabel(\'lrs\')\n            ax.set_ylabel(\'lcs\')\n            ax.set_zlabel(\'lms\')\n            plt.show()\n\n        return cprs\n\n    def _fit_brust_min(self, brust_min):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x87\xbd\xe6\x95\xb0brust_min\xe8\xae\xa1\xe7\xae\x97lrs\xef\xbc\x8clps\xef\xbc\x8clms\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x93\xe6\x9e\x9ceffect_num\n        \xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa6\x82\xe6\x9e\x9ceffect_num == 0\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4g_brust_min_default(0, 0, 0.65)\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe7\xbb\x84\xe5\x90\x88\n        \xe5\x80\xbc\xe5\xaf\xb9self.cprs\xe5\xaf\xb9\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\xe5\xbd\xa2\xe6\x88\x90self.llps\n        :param brust_min: bool\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97brust_min\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x90\xa6\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe9\xbb\x98\xe8\xae\xa4g_brust_min_default(0, 0, 0.65)\n                          \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8brust_min\xef\xbc\x8c\xe5\x8d\xb3brust_min=False\xe5\x8f\xaf\xe5\xa4\xa7\xe5\xa4\xa7\xe6\x8f\x90\xe9\xab\x98\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\n        """"""\n        if self.cprs.shape[0] < 50:\n            self.llps = self.cprs[self.cprs.lps < 0]\n            self.llps_brust_min = g_brust_min_default\n            self.log_func(\'{}: cprs shape < 50!\'.format(self.__class__.__name__))\n            return\n\n        effect_num = 0\n        if brust_min:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97brust_min\n            brust_min = self.brust_min()\n            _, effect_num = self.min_func(brust_min)\n\n        if effect_num == 0:\n            # \xe5\xa6\x82\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97brust_min\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe7\x9a\x84effect_num\xef\xbc\x9d0\xe4\xbd\xbf\xe7\x94\xa8g_brust_min_default\n            brust_min = g_brust_min_default\n        # \xe9\x80\x9a\xe8\xbf\x87\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\n        self.llps = self.cprs[(self.cprs[\'lps\'] <= brust_min[0]) & (self.cprs[\'lms\'] <= brust_min[1]) &\n                              (self.cprs[\'lrs\'] >= brust_min[2])]\n        # \xe5\xb0\x86\xe6\x9c\x80\xe7\xbb\x88\xe4\xbb\x8ecprs\xe7\xad\x9b\xe9\x80\x89llps\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84brust_min\xe5\x80\xbc\xe4\xbf\x9d\xe5\xad\x98\xe8\xb5\xb7\xe6\x9d\xa5\n        self.llps_brust_min = brust_min\n\n    def brust_min(self):\n        """"""\n        \xe5\x9c\xa8fit\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb9\x8b\xe5\x90\x8e\xe5\xaf\xb9self.cprs\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe6\x9e\x90\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8f\x91\xe7\x8e\xb0\xef\xbc\x8c\xe8\xbf\x99\xe4\xba\x9b\xe5\x88\x86\xe7\xb1\xbb\xe4\xb8\xad\xe5\xad\x98\xe5\x9c\xa8\xe5\xbe\x88\xe5\xa4\x9a\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\x83\x9c\xe7\x8e\x87\xe4\xb8\x8d\xe9\xab\x98\xef\xbc\x8c\n        \xe4\xbd\x86\xe6\x98\xaf\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe6\x80\xbb\xe5\x92\x8c\xe5\x8d\xb4\xe4\xb8\xba\xe6\xad\xa3\xe5\x80\xbc\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe8\xaf\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe7\x94\xb1\xe4\xba\x8e\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe8\xb5\x94\xe7\x8e\x87\xe4\xbd\xbf\xe5\xbe\x97\xe9\x9d\x9e\xe5\x9d\x87\xe8\xa1\xa1\xe8\x83\x9c\xe7\x8e\x87\xe5\xbe\x97\xe4\xbb\xa5\xe4\xbf\x9d\xe6\x8c\x81\xe5\xb9\xb3\xe8\xa1\xa1\xef\xbc\x8c\n        \xe5\xb9\xb6\xe4\xb8\x94\xe6\x9c\x80\xe7\xbb\x88\xe8\x8e\xb7\xe5\x88\xa9\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe5\xaf\xb9\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa3\x81\xe5\x86\xb3\xe6\x98\xbe\xe7\x84\xb6\xe6\x98\xaf\xe4\xb8\x8d\xe5\xa6\xa5\xe5\xbd\x93\xe7\x9a\x84\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\n        \xe5\x85\xa8\xe5\xb1\x80\xe6\x9c\x80\xe4\xbc\x98\xe6\x8a\x80\xe6\x9c\xaf\xe5\xaf\xb9\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe9\x9b\x86\xe5\x90\x88\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xad\x9b\xe9\x80\x89\n\n        1. \xe5\xb0\x86lps\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe9\x80\x89\xe5\xae\x9a(\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe6\x80\xbb\xe5\x92\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc-0), \xe5\x8d\xb3\xe9\x86\x8b\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe8\x83\x9c\xe6\xaf\x94\xe4\xbe\x8b\xe7\xbb\x84\xe5\x90\x88\xe5\xa4\xa7\xe4\xba\x8e0\xe7\x9a\x84\xe8\xbf\x87\xe6\xbb\xa4\n        2. \xe5\xb0\x86lms\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe9\x80\x89\xe5\xae\x9a(\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc-0), \xe5\x8d\xb3\xe9\x86\x8b\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe5\xa4\xa7\xe4\xba\x8e0\xe7\x9a\x84\xe8\xbf\x87\xe6\xbb\xa4\n        3. \xe5\xb0\x86lrs\xe4\xba\xa4\xe6\x98\x93\xe9\x86\x8b\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe4\xbb\x8e\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8d\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n        4. \xe8\xae\xa1\xe7\xae\x97\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc-0(\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc)\xe4\xb9\x8b\xe9\x97\xb4\xe5\x90\x88\xe9\x80\x82\xe7\x9a\x84step\xe5\x80\xbc\n        5. bnds = (slice(lps_min, 0, lps_step), slice(lms_min, 0, lms_step), slice(lrs_min, lrs_max, lrs_step))\n        6. sco.brute\xe4\xb8\xad\xe8\xae\xbe\xe5\xae\x9a\xe6\x9c\x80\xe4\xbc\x98\xe5\x87\xbd\xe6\x95\xb0self.min_func_improved\xe4\xbd\xbf\xe7\x94\xa8bnds\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\n        \xe6\x9b\xb4\xe5\xa4\x9a\xe8\xaf\xa6\xe8\xa7\x81brust_min\xe5\xae\x9e\xe7\x8e\xb0\xe5\x87\xbd\xe6\x95\xb0\n        """"""\n        # noinspection PyProtectedMember\n        factor_step = 1 if ABuEnv._g_enable_example_env_ipython else 3\n        factor_step *= g_brust_min_step_cnt\n        # \xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe6\x80\xbb\xe5\x92\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n        lps_min = round(self.cprs[\'lps\'].min(), 3)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x8e\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8d0\xe4\xb9\x8b\xe9\x97\xb4step g_brust_min_step_cnt\xe4\xb8\xaa\xef\xbc\x9aeg: (0 - -13.5) / 100 = 0.135\n        lps_step = (0 - lps_min) / factor_step\n        # \xe8\xb0\x83\xe6\x95\xb4step\xe7\x9a\x84\xe7\xb2\x92\xe5\xba\xa6\xe4\xbf\x9d\xe6\x8c\x81\xe5\x9c\xa8\xe5\x90\x88\xe7\x90\x86\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6\xe5\xa4\xaa\xe6\x85\xa2\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe7\xb2\x92\xe5\xba\xa6\xe5\xa4\xaa\xe7\xb2\x97\n        if lps_step < 0.01 and lps_min + 0.01 <= 0:\n            lps_step = 0.01\n\n        # \xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe6\xaf\x94\xe4\xbe\x8b\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\n        lms_min = round(self.cprs[\'lms\'].min(), 3)\n        # \xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\x8e\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8d0\xe4\xb9\x8b\xe9\x97\xb4step g_brust_min_step_cnt\xe4\xb8\xaa\xef\xbc\x9aeg: (0 - -0.07) / 100 = 0.0007\n        lms_step = (0 - lms_min) / factor_step\n        # \xe8\xb0\x83\xe6\x95\xb4step\xe7\x9a\x84\xe7\xb2\x92\xe5\xba\xa6\xe4\xbf\x9d\xe6\x8c\x81\xe5\x9c\xa8\xe5\x90\x88\xe7\x90\x86\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xef\xbc\x8ceg: 0.0007\xe5\xb0\xb1\xe4\xbc\x9a\xe8\xa2\xab\xe4\xbf\xae\xe6\xad\xa3\xe5\x88\xb00.01\n        if lms_step < 0.01 and lms_step + 0.01 <= 0:\n            lms_step = 0.01\n\n        # \xe4\xba\xa4\xe6\x98\x93\xe9\x86\x8b\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe4\xbb\x8e\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8d\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n        lrs_min = round(self.cprs[\'lrs\'].min(), 3)\n        lrs_max = round(self.cprs[\'lrs\'].max(), 3)\n        # eg: (0.87 - 0.65) / 100 = 0.002\n        lrs_step = (lrs_max - lrs_min) / factor_step\n        if lrs_step < 0.05 < lrs_max - lrs_min:\n            lrs_step = 0.05\n\n        bnds = (slice(lps_min, 0, lps_step), slice(lms_min, 0, lms_step), slice(lrs_min, lrs_max, lrs_step))\n        """"""\n            eg: bnds\xe5\xbd\xa2\xe5\xa6\x82\n            slice(-13.75, 0, 0.5), slice(-0.07, 0, 0.01), slice(0.65, 0.78, 0.1)\n\n            bnds\xe5\x9c\xa8\xe6\x9c\x80\xe4\xbc\x98\xe5\x87\xbd\xe6\x95\xb0sco.brute\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa6\x82np.arange\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xb1\x95\xe5\xbc\x80\xef\xbc\x8c\xe5\x8d\xb3\n            eg:\n                slice(-13.75, 0, 0.5) \xef\xbc\x8d> np.arange(-13.75, 0, 0.5):\n\n                array([-13.75, -13.25, -12.75, -12.25, -11.75, -11.25, -10.75, -10.25,\n                        -9.75,  -9.25,  -8.75,  -8.25,  -7.75,  -7.25,  -6.75,  -6.25,\n                        -5.75,  -5.25,  -4.75,  -4.25,  -3.75,  -3.25,  -2.75,  -2.25,\n                        -1.75,  -1.25,  -0.75,  -0.25])\n        """"""\n\n        progress = 1\n        for bnds_pos in (0, 1, 2):\n            progress *= len(np.arange(bnds[bnds_pos].start, bnds[bnds_pos].stop, bnds[bnds_pos].step))\n        # \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9c\x80\xe4\xbc\x98\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n        self.brust_progress = AbuProgress(progress, 0, \'{}: brute min progress\'.format(self.__class__.__name__))\n        # \xe4\xb8\xba\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8\xe6\xaf\x8f\xe6\xac\xa1\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8_calc_llps_improved\xe8\xae\xa1\xe7\xae\x97\n        self.brust_cache = dict()\n        brust_result = sco.brute(self.min_func_improved, bnds, full_output=False, finish=None)\n        return brust_result\n\n    def min_func(self, l_pmr):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8lps\xef\xbc\x8clms\xef\xbc\x8clrs\xe7\x9a\x84\xe7\x89\xb9\xe7\x82\xb9\xe7\xbb\x84\xe5\x90\x88\xe5\x80\xbc\xe8\x8e\xb7\xe5\x8f\x96crps\xe7\x9a\x84\xe5\xad\x90pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x9a\n                llps = self.cprs[(self.cprs[\'lps\'] <= l_pmr[0]) & (self.cprs[\'lms\'] <= l_pmr[1]) &\n                         (self.cprs[\'lrs\'] >= l_pmr[2])]\n\n            eg: llps\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n\n                  lcs     lms     lps  lrs\n            15_9    4 -0.1116 -0.4465  0.65\n            16_7    12 -0.1786 -0.8122  0.72\n            ................................\n        \xe9\x80\x9a\xe8\xbf\x87llps\xe4\xbb\x8eself.nts\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x9a\n                                result  deg_ang21  deg_ang42  deg_ang60  deg_ang252    ind        cluster\n                2011-09-21       0      8.645     -3.294     -8.426      -8.758     40     48      -0.083791\n                2011-09-30       0     11.123     -1.887     -2.775       1.585    158     49      -0.066309\n\n        \xe8\xae\xa1\xe7\xae\x97llps\xe7\xbb\x84\xe5\x90\x88\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x8c\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                improved = (effect_num / self.fiter.order_has_ret.shape[0]) * (loss_rate - win_rate)\n\n                eg\xef\xbc\x9a(effect_num / self.fiter.order_has_ret.shape[0]) * (loss_rate - win_rate)\n                effect_num \xef\xbc\x9d 10, self.fiter.order_has_ret.shape[0] \xef\xbc\x9d 100\n                loss_rate \xef\xbc\x9d 0.8\xef\xbc\x8c win_rate \xef\xbc\x9d0.2\n                \xef\xbc\x8d> (10 / 100) * (0.8 - 0.2) = 0.06\n\n                effect_num \xef\xbc\x9d 50, self.fiter.order_has_ret.shape[0] \xef\xbc\x9d 100\n                loss_rate \xef\xbc\x9d 0.8\xef\xbc\x8c win_rate \xef\xbc\x9d0.2\n                \xef\xbc\x8d> (50 / 100) * (0.8 - 0.2) = 0.3\n\n                effect_num \xef\xbc\x9d 50, self.fiter.order_has_ret.shape[0] \xef\xbc\x9d 100\n                loss_rate \xef\xbc\x9d 0.9\xef\xbc\x8c win_rate \xef\xbc\x9d0.1\n                \xef\xbc\x8d> (50 / 100) * (0.9 - 0.1) = 0.4\n\n                \xe5\x8d\xb3\xe6\x9c\x80\xe7\xbb\x88\xe6\x8f\x90\xe5\x8d\x87\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8cllps\xe4\xb8\x8b\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xe6\x88\x90\xe6\xad\xa3\xe6\xaf\x94\xef\xbc\x8c\xe5\x92\x8cllps\xe4\xb8\x8b\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe6\x88\x90\xe6\xad\xa3\xe6\xaf\x94\n        \xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97llps\xe7\xbb\x84\xe5\x90\x88\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x82\xe6\x95\xb0l_pmr\xe7\xbb\x99\xe5\xae\x9a\xe7\x9a\x84lps\xef\xbc\x8clms\xef\xbc\x8clrs\xe7\x9a\x84\xe7\x89\xb9\xe7\x82\xb9\xe7\xbb\x84\xe5\x90\x88\xe4\xb8\x8b\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x8f\x90\xe5\x8d\x87\xe5\x80\xbc\n        :param l_pmr: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8ceg\xef\xbc\x9a(-0.45, -0.11, 0.77), \xe7\x94\xb1\xe4\xb8\x89\xe4\xb8\xaafloat\xe5\x80\xbc\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n                      l_pmr[0]: \xe5\x88\x87\xe5\x8f\x96self.cprs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe5\x92\x8c\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3lps\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9aself.cprs[\'lps\'] <= l_pmr[0]\n                      l_pmr[1]: \xe5\x88\x87\xe5\x8f\x96self.cprs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3lms\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9aself.cprs[\'lms\'] <= l_pmr[1]\n                      l_pmr[2]: \xe5\x88\x87\xe5\x8f\x96self.cprs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe5\x8d\xb3lrs\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9aself.cprs[\'lrs\'] >= l_pmr[2]\n        :return: [improved, effect_num]\n        """"""\n\n        # \xe7\xbb\x84\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe5\xb8\xa6\xe6\x9d\xa5\xe7\x9a\x84\xe6\x8f\x90\xe9\xab\x98\xe9\xbb\x98\xe8\xae\xa4=-np.inf\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbamin_func_improved\xe4\xb8\xad\xe7\x9a\x84-self.min_func(l_pmr)[0]\n        improved = -np.inf\n        # \xe7\xbb\x84\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xb9\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\xbd\xb1\xe5\x93\x8d\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xe9\xbb\x98\xe8\xae\xa4=0\n        effect_num = 0\n        # \xe5\x8f\xaa\xe6\x9c\x89\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x98\xaf\xe5\x8f\x96 lrs >=\xef\xbc\x8c\xe8\x8e\xb7\xe5\x88\xa9\xe5\x92\x8clps\xe4\xb8\x8e\xe5\xb9\xb3\xe5\x9d\x87\xe8\x8e\xb7\xe5\x88\xa9lms\xe5\x8f\x96 <=\xef\xbc\x8c\xe9\x80\x89\xe5\x8f\x96cprs\xe5\xad\x90\xe9\x9b\x86llps\n        llps = self.cprs[(self.cprs[\'lps\'] <= l_pmr[0]) & (self.cprs[\'lms\'] <= l_pmr[1]) &\n                         (self.cprs[\'lrs\'] >= l_pmr[2])]\n        """"""\n            llps\xe4\xb8\x8ecprs\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8cllps\xe6\x98\xafcprs\xe7\x9a\x84\xe5\xad\x90\xe9\x9b\x86pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n            eg: llps\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n\n                      lcs     lms     lps  lrs\n                15_9    4 -0.1116 -0.4465  0.65\n                16_7    12 -0.1786 -0.8122  0.72\n                ................................\n        """"""\n        if llps.empty:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\xad\x90\xe9\x9b\x86\xe6\x98\xaf\xe7\xa9\xba\xe7\x9a\x84\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe5\xaf\xb9\xe6\x95\xb4\xe4\xbd\x93\xe6\x95\x88\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8f\x90\xe9\xab\x98np.array([0, 0])\n            return [improved, effect_num]\n\n        hash_llps = str(llps.index.tolist())\n        if hash_llps in self.brust_cache:\n            # \xe4\xb8\xba\xe6\x8f\x90\xe9\xab\x98\xe8\xbf\x90\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8\xe6\xaf\x8f\xe6\xac\xa1\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8_calc_llps_improved\xe8\xae\xa1\xe7\xae\x97\n            return self.brust_cache[hash_llps]\n\n        # \xe9\x80\x9a\xe8\xbf\x87self._calc_llps_improved(llps)\xe7\xbb\xa7\xe7\xbb\xad\xe8\xae\xa1\xe7\xae\x97improved\xe5\x92\x8ceffect_num\n        improved, effect_num, _, _ = self._calc_llps_improved(llps)\n        brust = [improved, effect_num]\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8cllps.index\xe5\x81\x9a\xe4\xb8\xbakey, _calc_llps_improved\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84[improved, effect_num]\xe5\x81\x9a\xe4\xb8\xbavalue\n        self.brust_cache[hash_llps] = brust\n        return brust\n\n    def min_func_improved(self, l_pmr):\n        """"""\n        \xe5\x8c\x85\xe8\xa3\x85min_func\xe5\x85\xb7\xe4\xbd\x93\xe7\x8e\xb0\xe5\xae\x9e\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x9c\xa8brust_min\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n        sco.brute(self.min_func_improved, bnds, full_output=False, finish=None)\n        \xe8\xae\xa1\xe7\xae\x97\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8self.min_func\xe4\xb8\xad\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x98\xaf\xe6\x8f\x90\xe9\xab\x98improved\xe5\x80\xbc\xef\xbc\x8c\xe8\xa6\x81\xe6\x83\xb3\xe5\xbe\x97\xe5\x88\xb0\xe6\x9c\x80\xe5\xa4\xa7\n        \xe6\x8f\x90\xe9\xab\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe5\x8d\xb3self.min_func\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe4\xbc\x98sco.brute\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xe6\x98\xaf\n        \xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8 -self.min_func(l_pmr)[0]\xef\xbc\x8c\xe6\x89\xbe\xe5\x88\xb0\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x8c\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\xe5\x8d\xb3\xe4\xb8\xba\n        \xe6\x9c\x80\xe5\xa4\xa7\xe6\x8f\x90\xe9\xab\x98improved\xe5\x80\xbc\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\n        :param l_pmr: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8ceg\xef\xbc\x9a(-0.45, -0.11, 0.77), \xe7\x94\xb1\xe4\xb8\x89\xe4\xb8\xaafloat\xe5\x80\xbc\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n                      l_pmr[0]: \xe5\x88\x87\xe5\x8f\x96self.cprs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe5\x92\x8c\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3lps\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9aself.cprs[\'lps\'] <= l_pmr[0]\n                      l_pmr[1]: \xe5\x88\x87\xe5\x8f\x96self.cprs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe8\x8e\xb7\xe5\x88\xa9\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3lms\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9aself.cprs[\'lms\'] <= l_pmr[1]\n                      l_pmr[2]: \xe5\x88\x87\xe5\x8f\x96self.cprs\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xb1\xe8\xb4\xa5\xe6\xaf\x94\xe4\xbe\x8b\xef\xbc\x8c\xe5\x8d\xb3lrs\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9aself.cprs[\'lrs\'] >= l_pmr[2]\n        :return: -self.min_func(l_pmr)[0]\xef\xbc\x8c\xe5\x8d\xb3[improved, effect_num][0], \xe5\x8d\xb3improved\xe5\x80\xbc\xef\xbc\x8cfloat\n        """"""\n        self.brust_progress.show()\n        return -self.min_func(l_pmr)[0]\n\n    def _calc_llps_improved(self, llps):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87llps\xe4\xbb\x8eself.nts\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe5\x8e\x9f\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97llps\xe7\xbb\x84\xe5\x90\x88\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe8\x83\x9c\xe7\x8e\x87\xef\xbc\x8c\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\n        \xe5\x8d\xb3\xe8\xae\xa1\xe7\xae\x97llps\xe7\xbb\x84\xe5\x90\x88\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x82\xe6\x95\xb0l_pmr\xe7\xbb\x99\xe5\xae\x9a\xe7\x9a\x84lps\xef\xbc\x8clms\xef\xbc\x8clrs\xe7\x9a\x84\xe7\x89\xb9\xe7\x82\xb9\xe7\xbb\x84\xe5\x90\x88\xe4\xb8\x8b\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x8f\x90\xe5\x8d\x87\xe5\x80\xbc\n        :param llps: eg: llps\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n\n                          lcs     lms     lps  lrs\n                    15_9    4 -0.1116 -0.4465  0.65\n                    16_7    12 -0.1786 -0.8122  0.72\n                    ..............................\n        :return: improved, effect_num, loss_rate, nts_pd\n        """"""\n        nts_pd = pd.DataFrame()\n        for component_cluster in llps.index:\n            # component_cluster eg:  \'14-7\', self.nts[component_cluster]\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n            nts_pd = nts_pd.append(self.nts[component_cluster])\n            """"""\n                eg: self.nts\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                \'14-7\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-11\t1\t    8.341\t        -9.450\t        0.730\t        12.397\t        7\t7\n                2015-10-28\t0\t    7.144\t        -9.818\t        -3.886\t        6.955\t        39\t7\n                2015-11-04\t0\t    12.442\t        -10.353\t        3.313\t        7.840\t        41\t7\n                2016-03-30\t0\t    13.121\t        -8.461\t        4.498\t        4.070\t        49\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        53\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        54\t7\n            """"""\n        """"""\n            \xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xba\xa4\xe6\x98\x93\xe9\x80\x9a\xe8\xbf\x87nts_pd.append(self.nts[component_cluster])\xe7\xbb\x84\xe6\x88\x90\xe5\xbf\x85\xe7\x84\xb6\xe6\x9c\x89\xe9\x87\x8d\xe5\xa4\x8d\n            \xe5\x9c\xa8\xe6\x89\x80\xe6\x9c\x89component_cluster\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87nts_pd.drop_duplicates\xe5\x8e\xbb\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe5\x8d\x95\xe5\xad\x90\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe4\xbd\xbf\xe7\x94\xa8\'\n            subset=\'ind\'\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8e\xbb\xe9\x87\x8d\xe5\xa4\x8d\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbaself.nts\xe4\xb8\xad\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xadcluster\xe6\x98\xaf\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\n        """"""\n        nts_pd = nts_pd.drop_duplicates(subset=\'ind\', keep=\'last\')\n        """"""\n        nts_pd\xe5\xa6\x82\xe4\xb8\x8b\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe5\xb0\xb1\xe6\x98\xaf\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe8\xa2\xab\xe9\x98\xbb\xe6\x8b\xa6\xe7\x9a\x84component_cluster\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8e\xbb\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n                         result  deg_ang21  deg_ang42  deg_ang60  deg_ang252    ind        cluster\n        2011-09-21       0      8.645     -3.294     -8.426      -8.758     40     48      -0.083791\n        2011-09-30       0     11.123     -1.887     -2.775       1.585    158     49      -0.066309\n        """"""\n\n        # llps\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xaa\xe6\x95\xb0\n        effect_num = nts_pd.shape[0]\n        # llps\xe4\xb8\x8b\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\n        loss_rate = nts_pd.result.value_counts()[0] / nts_pd.result.value_counts().sum()\n        win_rate = 1 - loss_rate\n        # \xe6\x8c\x89\xe7\x85\xa7\xe6\xaf\x94\xe4\xbe\x8b\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe6\x8f\x90\xe5\x8d\x87\xe7\x9a\x84\xe6\x95\x88\xe6\x9e\x9c\n        improved = (effect_num / self.fiter.order_has_ret.shape[0]) * (loss_rate - win_rate)\n        """"""\n            eg\xef\xbc\x9a(effect_num / self.fiter.order_has_ret.shape[0]) * (loss_rate - win_rate)\n                effect_num \xef\xbc\x9d 10, self.fiter.order_has_ret.shape[0] \xef\xbc\x9d 100\n                loss_rate \xef\xbc\x9d 0.8\xef\xbc\x8c win_rate \xef\xbc\x9d0.2\n                \xef\xbc\x8d> (10 / 100) * (0.8 - 0.2) = 0.06\n\n                effect_num \xef\xbc\x9d 50, self.fiter.order_has_ret.shape[0] \xef\xbc\x9d 100\n                loss_rate \xef\xbc\x9d 0.8\xef\xbc\x8c win_rate \xef\xbc\x9d0.2\n                \xef\xbc\x8d> (50 / 100) * (0.8 - 0.2) = 0.3\n\n                effect_num \xef\xbc\x9d 50, self.fiter.order_has_ret.shape[0] \xef\xbc\x9d 100\n                loss_rate \xef\xbc\x9d 0.9\xef\xbc\x8c win_rate \xef\xbc\x9d0.1\n                \xef\xbc\x8d> (50 / 100) * (0.9 - 0.1) = 0.4\n\n                \xe5\x8d\xb3\xe6\x9c\x80\xe7\xbb\x88\xe6\x8f\x90\xe5\x8d\x87\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe5\x92\x8cllps\xe4\xb8\x8b\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x95\xb0\xe9\x87\x8f\xe6\x88\x90\xe6\xad\xa3\xe6\xaf\x94\xef\xbc\x8c\xe5\x92\x8cllps\xe4\xb8\x8b\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe6\x88\x90\xe6\xad\xa3\xe6\xaf\x94\n        """"""\n        # TODO \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x85\xb6\xe5\xae\x83\xe8\xae\xa1\xe7\xae\x97improved\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe6\x9d\x83\xe9\x87\x8d\xe8\x83\x9c\xe7\x8e\x87\xe7\xad\x89\xe5\xa4\x9a\xe5\x9b\xa0\xe7\xb4\xa0\xe5\x86\xb3\xe7\xad\x96improved\xe5\x80\xbc\n        return improved, effect_num, loss_rate, nts_pd\n\n    def dump_file_fn(self):\n        """"""\n            \xe4\xb8\xbb\xe8\xa3\x81\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe5\xad\x98\xe5\x82\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x9a\n            ABuEnv.g_project_data_dir \xef\xbc\x8b \'ump/ump_main_\' \xef\xbc\x8b market_name + self.class_unique_id()\n        """"""\n\n        # TODO \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\xa3\x81\xe5\x88\xa4\xe8\xa6\x86\xe7\x9b\x96\xef\xbc\x8c\xe4\xbf\x9d\xe7\x95\x99\xe5\xa4\x87\xe4\xbb\xbd\xef\xbc\x8c\xe6\x98\xbe\xe7\xa4\xba\xe9\x80\x9a\xe7\x9f\xa5\n        unique_ump_name = \'ump/ump_main_{}_{}\'.format(self.market_name, self.class_unique_id())\n        return os.path.join(ABuEnv.g_project_data_dir, unique_ump_name)\n\n    def dump_clf(self, llps=None):\n        """"""\n        1. \xe9\x80\x9a\xe8\xbf\x87llps.index\xef\xbc\x8c\xe4\xbb\x8eself.rts\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96GaussianMixture\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3self.rts[clf][0]\n\n        eg: llps.index\n        Index([\'14_7\', \'14_8\', \'14_9\', \'14_10\', \'15_7\', \'15_8\', \'15_9\', \'15_10\',\n               \'16_7\', \'16_8\', \'16_9\', \'16_10\', \'17_7\', \'17_8\', \'17_9\', \'17_10\',\n                ................................................................\n               \'27_14\', \'27_15\', \'27_17\', \'27_18\', \'27_24\'],\n               dtype=\'object\')\n\n        2. \xe5\xb0\x86cluster\xe5\x92\x8cGaussianMixture\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x81\x9a\xe4\xb8\xbavalue\xef\xbc\x8cllps.index\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe5\x81\x9a\xe4\xb8\xbakey\xe5\xbd\xa2\xe6\x88\x90\xe6\x9c\x80\xe7\xbb\x88\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe7\x9a\x84dict\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\n        eg:\n            {\n            \'14_7\': (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                    means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                    random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                    verbose_interval=10, warm_start=False, weights_init=None), 7),\n            \'14_8\': (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                    means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                    random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                    verbose_interval=10, warm_start=False, weights_init=None), 8)\n            ....................................................................................................\n            }\n\n        3. \xe9\x80\x9a\xe8\xbf\x87ABuFileUtil.dump_pickle\xe6\x9c\x80\xe7\xbb\x88\xe5\xb0\x86\xe5\x85\x83\xe7\xb4\xa0\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\n        :param llps: \xe9\x9c\x80\xe8\xa6\x81\xe6\x9c\x80\xe7\xbb\x88\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84llps\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0llps=None\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8llps = self.llps\n                    eg: llps\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n\n                          lcs     lms     lps  lrs\n                    15_9    4 -0.1116 -0.4465  0.65\n                    16_7    12 -0.1786 -0.8122  0.72\n                    ................................\n        """"""\n        if llps is None:\n            if not hasattr(self, \'llps\'):\n                # fit\xe4\xb8\xad\xe8\xae\xa2\xe5\x8d\x95\xe4\xb8\x8d\xe8\xb6\xb3\xe9\x87\x8f\xe7\xad\x89\xe7\xbb\x88\xe6\xad\xa2\xe6\x83\x85\xe5\x86\xb5\n                return\n            llps = self.llps\n\n        clf_cluster_dict = {}\n        for clf_cluster in llps.index:\n            """"""\n\n                eg: llps.index\n                Index([\'14_7\', \'14_8\', \'14_9\', \'14_10\', \'15_7\', \'15_8\', \'15_9\', \'15_10\',\n                       \'16_7\', \'16_8\', \'16_9\', \'16_10\', \'17_7\', \'17_8\', \'17_9\', \'17_10\',\n                        ................................................................\n                       \'27_14\', \'27_15\', \'27_17\', \'27_18\', \'27_24\'],\n                       dtype=\'object\')\n            """"""\n            #  clf, cluster = (\'14\', \'7\')\n            clf, cluster = clf_cluster.split(\'_\')\n            clf = int(clf)\n            cluster = int(cluster)\n            """"""\n                eg:\n                    self.rts[clf][0]\n                    GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                    means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                    random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                    verbose_interval=10, warm_start=False, weights_init=None)\n            """"""\n            clf_cluster_dict[clf_cluster] = (self.rts[clf][0], cluster)\n            """"""\n                eg: clf_cluster_dict\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                {\n                \'14_7\': (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                        means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                        random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                        verbose_interval=10, warm_start=False, weights_init=None), 7),\n                \'14_8\': (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                        means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                        random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                        verbose_interval=10, warm_start=False, weights_init=None), 8)\n                ....................................................................................................\n                }\n            """"""\n        # \xe9\x80\x9a\xe8\xbf\x87ABuFileUtil.dump_pickle\xe5\xb0\x86clf_cluster_dict\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\n        ABuFileUtil.dump_pickle(clf_cluster_dict, self.dump_file_fn(), how=\'zero\')\n\n    def predict(self, x, need_hit_cnt=1):\n        """"""\n        \xe4\xb8\xbb\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\x8eCachedUmpManager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98clf_cluster_dict\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3ump\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n        \xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84x\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0(clf, cluster)\xe4\xb8\xad\xe7\x9a\x84clf\xe8\xbf\x9b\xe8\xa1\x8cpredict\n        \xe7\xbb\x93\xe6\x9e\x9c\xe5\x92\x8c (clf, cluster)\xe4\xb8\xad\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84cluster\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbb\xa3\xe8\xa1\xa8hit\xef\xbc\x8c\xe6\x9c\x80\xe7\xbb\x88\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\n        \xe5\x81\x9a\xe5\x87\xba\xe5\x86\xb3\xe7\xad\x96\n\n        :param x: \xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84x eg: array([[  8.341,  -9.45 ,   0.73 ,  12.397]])\n        :param need_hit_cnt: \xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84x\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0(clf, cluster)\xe4\xb8\xad\xe7\x9a\x84clf\xe8\xbf\x9b\xe8\xa1\x8cpredict\xe7\xbb\x93\xe6\x9e\x9c\xe5\x92\x8c\n                            (clf, cluster)\xe4\xb8\xad\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84cluster\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbb\xa3\xe8\xa1\xa8hit\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x9acount_hit += 1\n                            \xe5\x8f\xaa\xe6\x9c\x89\xe5\xbd\x93need_hit_cnt == count_hit\xe6\x89\x8d\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe5\x87\xba\xe5\x86\xb3\xe7\xad\x96\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n\n        :return: \xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe5\x87\xba\xe5\x86\xb3\xe7\xad\x96\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x8d\xb3\xe8\xbf\x94\xe5\x9b\x9e1\xef\xbc\x8c\xe6\x94\xbe\xe8\xa1\x8c\xe5\x8d\xb3\xe8\xbf\x94\xe5\x9b\x9e0\n        """"""\n\n        # \xe7\xbb\x9f\xe4\xb8\x80\xe4\xbb\x8eCachedUmpManager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98ump\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8bload_pickle\n        clf_cluster_dict = AbuUmpMainBase.dump_clf_manager.get_ump(self)\n        """"""\n            eg: clf_cluster_dict\n                {\n                \'14_7\': (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                        means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                        random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                        verbose_interval=10, warm_start=False, weights_init=None), 7),\n                \'14_8\': (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                        means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                        random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                        verbose_interval=10, warm_start=False, weights_init=None), 8)\n                ....................................................................................................\n                }\n        """"""\n        count_hit = 0\n        # if need_hit_cnt > 1 and len(clf_cluster_dict) < 50:\n        #     need_hit_cnt = 1\n        for clf, cluster in clf_cluster_dict.values():\n            """"""\n                eg: (clf, cluster)\n                    (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                        means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                        random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                        verbose_interval=10, warm_start=False, weights_init=None), 7)\n            """"""\n            predict_cluster = clf.predict(x)\n            if predict_cluster == cluster:\n                # \xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8clf\xe5\xaf\xb9x\xe8\xbf\x9b\xe8\xa1\x8cpredict\xe7\xbb\x93\xe6\x9e\x9c\xe5\x92\x8c (clf, cluster)\xe4\xb8\xad\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84cluster\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbb\xa3\xe8\xa1\xa8hit\n                count_hit += 1\n                if need_hit_cnt == count_hit:\n                    # \xe5\x8f\xaa\xe6\x9c\x89\xe5\xbd\x93need_hit_cnt == count_hit\xe6\x89\x8d\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe5\x87\xba\xe5\x86\xb3\xe7\xad\x96\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe5\x8d\xb3\xe8\xbf\x94\xe5\x9b\x9e1\n                    return 1\n        return 0\n\n    def predict_kwargs(self, w_col=None, need_hit_cnt=1, **kwargs):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe4\xba\xa4\xe6\x98\x93\xe5\x86\xb3\xe7\xad\x96\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xb9kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe4\xbb\x8e\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xef\xbc\x8c\n        \xe5\xb0\x86kwargs\xe4\xb8\xad\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbax\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5self.predict\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\xb8\xe5\xbf\x83\xe8\xa3\x81\xe5\x86\xb3\xe5\x88\xa4\xe5\xae\x9a\n\n        :param w_col: \xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\x8d\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\xad\xa3\xe5\xb8\xb8\xe6\x83\x85\xe5\x86\xb5\xe4\xbb\x8e\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n        :param need_hit_cnt: \xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99self.predict\xe4\xb8\xadneed_hit_cnt\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x8c\xb9\xe9\x85\x8d\xe6\x8b\xa6\xe6\x88\xaa\xe9\x98\x80\xe5\x80\xbc\n        :param kwargs: \xe9\x9c\x80\xe8\xa6\x81\xe5\x92\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ceg: buy_deg_ang42=3.378, buy_deg_ang60=3.458\n                                     buy_deg_ang21=3.191, buy_deg_ang252=1.818\n        :return: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8cint\xef\xbc\x8c\xe4\xb8\x8d\xe6\x8b\xa6\xe6\x88\xaa: 0\xef\xbc\x8c\xe6\x8b\xa6\xe6\x88\xaa: 1\n        """"""\n        if w_col is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n            w_col = self.get_predict_col()\n            """"""eg, w_col: [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']""""""\n\n        for col in w_col:\n            if col not in kwargs:\n                # \xe5\xa6\x82\xe6\x9e\x9ckwargs\xe4\xb8\xad\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xef\xbc\x8craise ValueError\n                raise ValueError(\'col not in kwargs!\')\n        # \xe5\xb0\x86kwargs\xe4\xb8\xad\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbax\n        x = np.array([kwargs[col] for col in w_col])\n        """"""eg, x: array([ 3.378,  3.458,  3.191,  1.818])""""""\n        x = x.reshape(1, -1)\n        # \xe5\xa5\x97\xe6\x8e\xa5self.predict\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\xb8\xe5\xbf\x83\xe8\xa3\x81\xe5\x86\xb3\xe5\x88\xa4\xe5\xae\x9a\n        return self.predict(x, need_hit_cnt)\n\n    def show_parse_rt(self, rt):\n        """"""\n        \xe8\xbe\x85\xe5\x8a\xa9\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9f\xb1\xe7\x8a\xb6\xe5\x9b\xbe\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xadcluster\xef\xbc\x8cresult\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x85\xb3\xe7\xb3\xbb\n        :param rt: \xe5\x9c\xa8fit\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x9a\n                    clf_component_dict[component] = (clf, cluster_ind)\n\n                    eg\xef\xbc\x9art\xef\xbc\x8c(GaussianMixtured\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ccluster_ind: GMM(component)\xe5\x88\x86component\xe4\xb8\xaa\xe7\xb1\xbb\xe4\xb8\xad\xef\xbc\x8c\n                                                  \xe6\xbb\xa1\xe8\xb6\xb3\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe7\x9a\x84\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x8e\x87\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbcthreshold\xe7\x9a\x84\xe5\xad\x90\xe5\x88\x86\xe7\xb1\xbb\xe5\xba\x8f\xe5\x8f\xb7)\n        """"""\n        # GaussianMixtured\xe5\xaf\xb9\xe8\xb1\xa1\n        clf = rt[0]\n        cluster = clf.predict(self.fiter().x)\n        # copy\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\xa0\xe4\xb8\xba\xe8\xa6\x81\xe6\xb7\xbb\xe5\x8a\xa0cluster\xe5\x88\x97\xe4\xbb\xa5\xe4\xbe\xbf\xe4\xba\x8e\xe4\xbd\xbf\xe7\x94\xa8crosstab\n        df = self.fiter.df.copy()\n        df[\'cluster\'] = cluster\n        # \xe4\xba\xa4\xe5\x8f\x89\xe8\xa1\xa8\xe7\xbb\x84\xe7\xbb\x87cluster\xe5\x92\x8cresult\xe7\x9a\x84\xe4\xba\xa4\xe5\x8f\x89\xe6\x95\xb0\xe6\x8d\xaext\n        xt = pd.crosstab(df[\'cluster\'], df[\'result\'])\n        xt_pct = xt.div(xt.sum(1).astype(float), axis=0)\n        # \xe9\x80\x9a\xe8\xbf\x87kind=\'bar\'\xe7\xbb\x98\xe5\x88\xb6\xe6\x9f\xb1\xe7\x8a\xb6\xe5\x9b\xbe\xe6\x98\xbe\xe7\xa4\xba\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xadcluster\xef\xbc\x8cresult\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x85\xb3\xe7\xb3\xbb\n        xt_pct.plot(\n            figsize=(16, 8),\n            kind=\'bar\',\n            stacked=True,\n            title=str(\'cluster\') + \' -> \' + str(\'result\'))\n        plt.xlabel(str(\'cluster\'))\n        plt.ylabel(str(\'result\'))\n\n    def choose_cprs_component(self, llps=None):\n        """"""\n        \xe8\xbe\x85\xe5\x8a\xa9\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe6\x98\xbe\xe7\xa4\xba\xe5\x9c\xa8llps\xe4\xb8\x8b\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe7\x9a\x84\xe7\x94\x9f\xe6\x95\x88\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe5\x92\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x8f\xaf\xe6\x8f\x90\xe5\x8d\x87\xe6\x95\xb0\xe6\x8d\xae\xe6\xaf\x94\xe4\xbe\x8b\n        \xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x89\x80\xe6\x9c\x89\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93profit_cg\xe7\x9a\x84cumsum\n\n        :param llps: llps\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0llps=None\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8llps = self.llps\n\n                eg: llps\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n\n                      lcs     lms     lps  lrs\n                15_9    4 -0.1116 -0.4465  0.65\n                16_7    12 -0.1786 -0.8122  0.72\n                ................................\n        """"""\n\n        if llps is None:\n            llps = self.llps\n\n        improved, effect_num, loss_rate, nts_pd = self._calc_llps_improved(llps)\n\n        self.log_func(\'\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe4\xb8\xad\xe6\xad\xa3\xe7\xa1\xae\xe6\x8b\xa6\xe6\x88\xaa\xe6\xaf\x94\xe4\xbe\x8b:{0:.3f}\'.format(loss_rate))\n        self.log_func(\'\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe6\x8b\xa6\xe6\x88\xaa\xe7\x94\x9f\xe6\x95\x88\xe5\x90\x8e\xe5\x8f\xaf\xe6\x8f\x90\xe5\x8d\x87\xe6\xaf\x94\xe4\xbe\x8b:{0:.3f}\'.format(improved))\n        self.log_func(\'\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe6\x8b\xa6\xe6\x88\xaa\xe7\x94\x9f\xe6\x95\x88\xe6\x95\xb0\xe9\x87\x8f{0}\xef\xbc\x8c \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe6\x8b\xa6\xe6\x88\xaa\xe7\x94\x9f\xe6\x95\x88\xe5\x8d\xa0\xe6\x80\xbb\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\xaf\x94\xe4\xbe\x8b{1:.3f}%\'.format(\n            effect_num, effect_num / self.fiter.df.shape[0] * 100))\n\n        """"""\n        nts_pd\xe5\xa6\x82\xe4\xb8\x8b\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe5\xb0\xb1\xe6\x98\xaf\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe8\x83\xbd\xe8\xa2\xab\xe9\x98\xbb\xe6\x8b\xa6\xe7\x9a\x84component_cluster\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8e\xbb\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n                         result  deg_ang21  deg_ang42  deg_ang60  deg_ang252    ind        cluster\n        2011-09-21       0      8.645     -3.294     -8.426      -8.758     40     48      -0.083791\n        2011-09-30       0     11.123     -1.887     -2.775       1.585    158     49      -0.066309\n        """"""\n        # \xe9\x80\x9a\xe8\xbf\x87nts_pd\xe9\x80\x9a\xe8\xbf\x87apply\xe8\xbf\xad\xe4\xbb\xa3\xe6\xaf\x8f\xe4\xb8\x80\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe7\xac\x94\xe4\xba\xa4\xe6\x98\x93\xe7\x9a\x84ind\xe6\x98\xa0\xe5\xb0\x84\xe7\x9a\x84\xe5\x8e\x9f\xe5\xa7\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95self.fiter.order_has_ret\xe4\xb8\xad\xe7\x9a\x84profit_cg\xe5\x80\xbc\n        nts_pd[\'profit_cg\'] = nts_pd.apply(lambda x: self.fiter.order_has_ret.ix[int(x.ind)].profit_cg, axis=1)\n        """"""\n            eg\xef\xbc\x9ants_pd\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe6\x96\xb0\xe5\x88\x97profit_cg\xe5\x90\x8e\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                        result  buy_deg_ang42  buy_deg_ang252  buy_deg_ang60  \\\n            2015-10-28       0          7.144          -9.818         -3.886\n            2015-04-22       1         20.640           2.751         20.436\n            2015-06-09       0         10.741          16.352         28.340\n            2014-11-11       1          8.341          -9.450          0.730\n            2015-11-04       0         12.442         -10.353          3.313\n            2016-03-30       0         13.121          -8.461          4.498\n            2014-11-26       0         14.052           6.061          7.566\n            2016-04-15       0          4.238         -13.247          4.693\n            2016-04-15       0          4.238         -13.247          4.693\n            2015-12-16       0         12.906           6.312         16.638\n            2016-01-29       0         -5.578          16.161         -5.167\n            2016-01-29       0         -5.578          16.161         -5.167\n            2014-11-12       0          3.963           6.595         -7.524\n\n                        buy_deg_ang21  ind  cluster  profit_cg\n            2015-10-28          6.955   39        7    -0.0702\n            2015-04-22         18.781   23        8     0.0121\n            2015-06-09         -0.937   26        8    -0.1128\n            2014-11-11         12.397    7        9     0.1857\n            2015-11-04          7.840   41        9    -0.1303\n            2016-03-30          4.070   49        9    -0.0863\n            2014-11-26         12.494    9       14    -0.0946\n            2016-04-15          1.162   53       15    -0.1149\n            2016-04-15          1.162   54       15    -0.1149\n            2015-12-16         12.379   43       17    -0.1041\n            2016-01-29         -3.855   45       18    -0.0327\n            2016-01-29         -3.855   46       18    -0.0327\n            2014-11-12          6.671    8       24    -0.0140\n        """"""\n\n        with plt_show():\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x89\x80\xe6\x9c\x89\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe4\xb8\xad\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93profit_cg\xe7\x9a\x84cumsum\n            nts_pd.sort_index()[\'profit_cg\'].cumsum().plot()\n\n    def best_hit_cnt_info(self, llps=None):\n        """"""\n        \xe8\xbe\x85\xe5\x8a\xa9\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe7\xbb\x9f\xe8\xae\xa1\xe5\x9c\xa8\xe5\x90\x84\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe9\x87\x8d\xe5\xa4\x8d\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\xad\x90\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\n        \xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\n\n        :param llps: llps\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x8f\x82\xe6\x95\xb0llps=None\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8llps = self.llps\n\n                eg: llps\xe5\xbd\xa2\xe5\xbc\x8f\xe5\xa6\x82\n                      lcs     lms     lps  lrs\n                15_9    4 -0.1116 -0.4465  0.65\n                16_7    12 -0.1786 -0.8122  0.72\n                ................................\n        """"""\n        if llps is None:\n            llps = self.llps\n\n        nts_pd = pd.DataFrame()\n        for component_cluster in llps.index:\n            # component_cluster eg:  \'14-7\', self.nts[component_cluster]\xe5\x8d\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n            nts_pd = nts_pd.append(self.nts[component_cluster])\n            """"""\n                eg: self.nts\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a\n                \'14-7\':\n                            result\tbuy_deg_ang42\tbuy_deg_ang252\tbuy_deg_ang60\tbuy_deg_ang21\tind\tcluster\n                2014-11-11\t1\t    8.341\t        -9.450\t        0.730\t        12.397\t        7\t7\n                2015-10-28\t0\t    7.144\t        -9.818\t        -3.886\t        6.955\t        39\t7\n                2015-11-04\t0\t    12.442\t        -10.353\t        3.313\t        7.840\t        41\t7\n                2016-03-30\t0\t    13.121\t        -8.461\t        4.498\t        4.070\t        49\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        53\t7\n                2016-04-15\t0\t    4.238\t        -13.247\t        4.693\t        1.162\t        54\t7\n            """"""\n\n        """"""\n            \xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe5\x8e\xbb\xe9\x99\xa4\xe9\x87\x8d\xe5\xa4\x8dnts_pd\xef\xbc\x8c\xe5\xb0\xb1\xe6\x98\xaf\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x9f\xe8\xae\xa1nts_pd\xe9\x87\x8d\xe5\xa4\x8dind\xe5\x9c\xa8\xe5\x90\x84\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\n            \xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a ind_result_xt = pd.crosstab(nts_pd.ind, nts_pd.result)\n\n            eg\xef\xbc\x9ants_pd.ind\n                            2014-11-11     7\n                            2015-10-28    39\n                            2015-11-04    41\n                            2016-03-30    49\n                            2016-04-15    53\n                            2016-04-15    54\n                            2014-11-26     9\n                            2015-04-22    23\n                            2015-12-16    43\n                            2015-06-09    26\n                                          ..\n                            2014-11-11     7\n                            2015-11-04    41\n                            2016-03-30    49\n                            2014-11-26     9\n                            2016-04-15    53\n                            2016-04-15    54\n                            2015-12-16    43\n                            2016-01-29    45\n                            2016-01-29    46\n                            2014-11-12     8\n            eg\xef\xbc\x9ants_pd.result\n                            2014-11-11    1\n                            2015-10-28    0\n                            2015-11-04    0\n                            2016-03-30    0\n                            2016-04-15    0\n                            2016-04-15    0\n                            2014-11-26    0\n                            2015-04-22    1\n                            2015-12-16    0\n                            2015-06-09    0\n                                         ..\n                            2014-11-11    1\n                            2015-11-04    0\n                            2016-03-30    0\n                            2014-11-26    0\n                            2016-04-15    0\n                            2016-04-15    0\n                            2015-12-16    0\n                            2016-01-29    0\n                            2016-01-29    0\n                            2014-11-12    0\n            eg\xef\xbc\x9aind_result_xt\n                            ind_result_pd\n                            result   0  1\n                            ind\n                            7        0  8\n                            8        6  0\n                            9       14  0\n                            23       0  3\n                            26      14  0\n                            39       1  0\n                            41      14  0\n                            43      14  0\n                            45      14  0\n                            46      14  0\n                            49      14  0\n                            53      14  0\n                            54      14  0\n            \xe5\x8d\xb3ind_result_xt\xe7\xbb\x9f\xe8\xae\xa1\xe5\x87\xba\xe5\x90\x84\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe4\xb8\xad\xe9\x87\x8d\xe5\xa4\x8d\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe6\xac\xa1\xe6\x95\xb0\n        """"""\n        ind_result_xt = pd.crosstab(nts_pd.ind, nts_pd.result)\n\n        # \xe5\xbe\x97\xe5\x88\xb0\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe6\x95\xb0, \xe4\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0\xe7\xad\x89\xe5\x85\xb6\xe5\xae\x83\xe7\xbb\x9f\xe8\xae\xa1\xe5\x87\xbd\xe6\x95\xb0\n        mean_hit_failed = ind_result_xt[0].mean()\n        # \xe5\x90\x91\xe4\xb8\x8a\xe5\x8f\x96\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf2.1\xe5\x88\x993\n        mean_hit_failed = np.ceil(mean_hit_failed)\n        self.log_func(\'mean_hit_failed = {}\'.format(mean_hit_failed))\n\n    def hit_cnt(self, x):\n        """"""\n        \xe8\xbe\x85\xe5\x8a\xa9\xe7\xbb\x9f\xe8\xae\xa1\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe4\xbb\x8eCachedUmpManager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98clf_cluster_dict\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3ump\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\n        \xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84x\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\x85\x83\xe7\xb4\xa0(clf, cluster)\xe4\xb8\xad\xe7\x9a\x84clf\xe8\xbf\x9b\xe8\xa1\x8cpredict\n        \xe7\xbb\x93\xe6\x9e\x9c\xe5\x92\x8c (clf, cluster)\xe4\xb8\xad\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84cluster\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbb\xa3\xe8\xa1\xa8hit\n\n        :param x: \xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84x eg: array([[  8.341,  -9.45 ,   0.73 ,  12.397]])\n        :return: kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x91\xbd\xe4\xb8\xad\xe7\xbb\x9f\xe8\xae\xa1\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eint\xe5\x80\xbc\n        """"""\n\n        # \xe7\xbb\x9f\xe4\xb8\x80\xe4\xbb\x8eCachedUmpManager\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x93\xe5\xad\x98ump\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe7\xbc\x93\xe5\xad\x98\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8bload_pickle\n        clf_cluster_dict = AbuUmpBase.dump_clf_manager.get_ump(self)\n        hit_cnt = 0\n        for clf, cluster in clf_cluster_dict.values():\n            """"""\n                eg: (clf, cluster)\n                    (GaussianMixture(covariance_type=\'full\', init_params=\'kmeans\', max_iter=100,\n                                        means_init=None, n_components=14, n_init=1, precisions_init=None,\n                                        random_state=3, reg_covar=1e-06, tol=0.001, verbose=0,\n                                        verbose_interval=10, warm_start=False, weights_init=None), 7)\n            """"""\n            predict_cluster = clf.predict(x)\n            if predict_cluster == cluster:\n                # \xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8clf\xe5\xaf\xb9x\xe8\xbf\x9b\xe8\xa1\x8cpredict\xe7\xbb\x93\xe6\x9e\x9c\xe5\x92\x8c (clf, cluster)\xe4\xb8\xad\xe5\xad\x98\xe5\x82\xa8\xe7\x9a\x84cluster\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbb\xa3\xe8\xa1\xa8hit\n                hit_cnt += 1\n        # \xe6\x9c\x80\xe7\xbb\x88\xe8\xbf\x94\xe5\x9b\x9e\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x91\xbd\xe4\xb8\xad\xe7\xbb\x9f\xe8\xae\xa1\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8cint\xe5\x80\xbc\n        return hit_cnt\n\n    def predict_hit_kwargs(self, w_col=None, **kwargs):\n        """"""\n        \xe8\xbe\x85\xe5\x8a\xa9\xe7\xbb\x9f\xe8\xae\xa1\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xaf\xb9kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8cump\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x91\xbd\xe4\xb8\xad\xe7\xbb\x9f\xe8\xae\xa1\xef\xbc\x8c\xe4\xbb\x8e\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xef\xbc\x8c\n        \xe5\xb0\x86kwargs\xe4\xb8\xad\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbax\xef\xbc\x8c\xe5\xa5\x97\xe6\x8e\xa5self.hit_cnt\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x91\xbd\xe4\xb8\xad\xe7\xbb\x9f\xe8\xae\xa1\n\n        :param w_col: \xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\x8d\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\xad\xa3\xe5\xb8\xb8\xe6\x83\x85\xe5\x86\xb5\xe4\xbb\x8e\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n        :param kwargs: \xe9\x9c\x80\xe8\xa6\x81\xe5\x92\x8c\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\n                       \xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8ceg: buy_deg_ang42=3.378, buy_deg_ang60=3.458\n                                     buy_deg_ang21=3.191, buy_deg_ang252=1.818\n        :return: kwargs\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x91\xbd\xe4\xb8\xad\xe7\xbb\x9f\xe8\xae\xa1\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eint\xe5\x80\xbc\n        """"""\n        if w_col is None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e\xe5\xad\x90\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbf\x85\xe9\xa1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xe8\x99\x9a\xe6\x96\xb9\xe6\xb3\x95get_predict_col\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n            w_col = self.get_predict_col()\n            """"""eg, w_col: [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']""""""\n\n        for col in w_col:\n            if col not in kwargs:\n                # \xe5\xa6\x82\xe6\x9e\x9ckwargs\xe4\xb8\xad\xe6\xb2\xa1\xe6\x9c\x89\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xef\xbc\x8craise ValueError\n                raise ValueError(\'col not in kwargs!\')\n        # \xe5\xb0\x86kwargs\xe4\xb8\xad\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbax\n        x = np.array([kwargs[col] for col in w_col])\n        """"""eg, x: array([ 3.378,  3.458,  3.191,  1.818])""""""\n        x = x.reshape(1, -1)\n        # \xe4\xb8\x8epredict_kwargs\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9\xe4\xb8\xbb\xe8\xa6\x81\xe5\xb0\xb1\xe6\x98\xaf\xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8hit_cnt\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe7\xb0\x87\xe5\x91\xbd\xe4\xb8\xad\xe7\xbb\x9f\xe8\xae\xa1\n        return self.hit_cnt(x)\n'"
abupy/UmpBu/ABuUmpMainDeg.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe4\xb8\xbb\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDeg, AbuFeatureDegExtend\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_main_make_xy, BuyUmpMixin\nfrom .ABuUmpMainBase import AbuUmpMainBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpDegFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n        make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_main_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe5\x8c\x85\xe8\xa3\x85\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n        :param kwarg: ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                      kwargs[\'scaler\']    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe9\x80\x89\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90deg_df\n                 ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9edeg_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n\n            eg: deg_df\n\n                            result  buy_deg_ang42  buy_deg_ang252  buy_deg_ang60  \\\n            2014-09-24       0          3.378           3.458          3.458\n            2014-10-24       0          0.191           2.889          2.809\n            2014-10-29       1         -2.026          16.689         -0.761\n            2014-10-29       1         -3.427         -11.956         -8.296\n            2014-10-29       1         -2.915          39.469         -6.043\n            2014-10-29       1         -2.026          16.689         -0.761\n            2014-11-03       1          0.103          39.202         -4.614\n            2014-11-11       1          8.341          -9.450          0.730\n            2014-11-12       0          3.963           6.595         -7.524\n            2014-11-26       0         14.052           6.061          7.566\n            ...            ...            ...             ...            ...\n            2016-03-14       1          4.002         -10.559         -7.992\n            2016-03-14       0          0.129          -6.649        -10.880\n            2016-03-30       0         13.121          -8.461          4.498\n            2016-04-04       1          4.409         -33.097         -6.281\n            2016-04-13       0          6.603         -31.459          0.191\n            2016-04-14       0          4.611          18.428          3.134\n            2016-04-15       0          4.238         -13.247          4.693\n            2016-04-15       0          4.238         -13.247          4.693\n            2016-04-29       1          1.445          16.266          4.615\n            2016-04-29       1          1.445          16.266          4.615\n\n                        buy_deg_ang21\n            2014-09-24          1.818\n            2014-10-24         -1.089\n            2014-10-29          1.980\n            2014-10-29          6.507\n            2014-10-29          7.046\n            2014-10-29          1.980\n            2014-11-03         10.125\n            2014-11-11         12.397\n            2014-11-12          6.671\n            2014-11-26         12.494\n            ...                   ...\n            2016-03-14          9.324\n            2016-03-14          5.201\n            2016-03-30          4.070\n            2016-04-04          5.618\n            2016-04-13          4.457\n            2016-04-14          0.733\n            2016-04-15          1.162\n            2016-04-15          1.162\n            2016-04-29         -1.115\n            2016-04-29         -1.115\n        """"""\n        # regex=\'result|buy_deg_ang42|buy_deg_ang252|buy_deg_ang60|buy_deg_ang21\'\n        regex = \'result|{}\'.format(\n            \'|\'.join(AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainDeg)))\n        # noinspection PyUnresolvedReferences\n        deg_df = self.order_has_ret.filter(regex=regex)\n        return deg_df\n\n\nclass AbuUmpMainDeg(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']\n        :return: [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\']\n        """"""\n        return AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainDeg)\n\n    def get_fiter_class(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpMainDeg.UmpDegFiter\n        :return: AbuUmpMainDeg.UmpDegFiter\n        """"""\n        return UmpDegFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'deg_main\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'deg_main\'\n\n\nclass UmpExtendFeatureFiter(AbuMLPd):\n    """"""\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\xe6\x89\xa9\xe5\xb1\x95\xe7\xb1\xbbmake_xy""""""\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        # \xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8get_feature_ump_keys\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe5\xbd\x93\xe5\x89\x8d\xe7\xb1\xbb\xe5\x90\x8d\xe7\xa7\xb0\xe5\x8d\xb3\xe5\x8f\xaf\xef\xbc\x8c\xe5\x85\xb6\xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5ump\xe8\xbf\x98\xe6\x98\xaf\xe5\x8d\x96\xe5\x87\xbaump\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n        col = AbuFeatureDegExtend().get_feature_ump_keys(ump_cls=AbuUmpMainDegExtend)\n        regex = \'result|{}\'.format(\'|\'.join(col))\n        extend_deg_df = self.order_has_ret.filter(regex=regex)\n        return extend_deg_df\n\n\nclass AbuUmpMainDegExtend(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb0\xe7\x9a\x84\xe8\xa7\x86\xe8\xa7\x92\xe6\x9d\xa5\xe5\x86\xb3\xe7\xad\x96\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        # \xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8get_feature_ump_keys\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe5\xbd\x93\xe5\x89\x8d\xe7\xb1\xbb\xe5\x90\x8d\xe7\xa7\xb0\xe5\x8d\xb3\xe5\x8f\xaf\xef\xbc\x8c\xe5\x85\xb6\xe6\xa0\xb9\xe6\x8d\xae\xe6\x98\xaf\xe4\xb9\xb0\xe5\x85\xa5ump\xe8\xbf\x98\xe6\x98\xaf\xe5\x8d\x96\xe5\x87\xbaump\xe8\xbf\x94\xe5\x9b\x9e\xe5\xaf\xb9\xe5\xba\x94\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\n        col = AbuFeatureDegExtend().get_feature_ump_keys(ump_cls=AbuUmpMainDegExtend)\n        return col\n\n    def get_fiter_class(self):\n        return UmpExtendFeatureFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        return \'extend_main_deg\'\n'"
abupy/UmpBu/ABuUmpMainFull.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDeg, AbuFeaturePrice, AbuFeatureJump, AbuFeatureWave, AbuFeatureAtr\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_main_make_xy, BuyUmpMixin\nfrom .ABuUmpMainBase import AbuUmpMainBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpFullFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n        make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_main_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe5\x8c\x85\xe8\xa3\x85\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n        :param kwarg: ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                      kwargs[\'scaler\']    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe9\x80\x89\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90full_df\n                 ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9efull_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        regex = \'result|{}|{}|{}|{}|{}\'.format(\n            \'|\'.join(AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainFull)),\n            \'|\'.join(AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpMainFull)),\n            \'|\'.join(AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpMainFull)),\n            \'|\'.join(AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpMainFull)),\n            \'|\'.join(AbuFeatureJump().get_feature_ump_keys(ump_cls=AbuUmpMainFull)))\n        """"""\n            regex = \'result|buy_deg_ang42|buy_deg_ang252|buy_deg_ang60|buy_deg_ang21|buy_price_rank120|\n            buy_price_rank90|buy_price_rank60|buy_price_rank252|buy_wave_score1|buy_wave_score2|buy_wave_score3\n            |buy_atr_std|buy_diff_down_days|buy_jump_up_power|buy_diff_up_days|buy_jump_down_power\'\n        """"""\n\n        # noinspection PyUnresolvedReferences\n        full_df = self.order_has_ret.filter(regex=regex)\n        """"""\n            eg: full_df\n                        result  buy_deg_ang42  buy_deg_ang252  buy_deg_ang60  \\\n            2014-09-24       0          3.378           3.458          3.458\n            2014-10-24       0          0.191           2.889          2.809\n            2014-10-29       1         -2.026          16.689         -0.761\n            2014-10-29       1         -3.427         -11.956         -8.296\n            2014-10-29       1         -2.915          39.469         -6.043\n            2014-10-29       1         -2.026          16.689         -0.761\n            ...            ...            ...             ...            ...\n            2016-04-14       0          4.611          18.428          3.134\n            2016-04-15       0          4.238         -13.247          4.693\n            2016-04-15       0          4.238         -13.247          4.693\n            2016-04-29       1          1.445          16.266          4.615\n            2016-04-29       1          1.445          16.266          4.615\n\n                        buy_deg_ang21  buy_price_rank120  buy_price_rank90  \\\n            2014-09-24          1.818              1.000             1.000\n            2014-10-24         -1.089              1.000             1.000\n            2014-10-29          1.980              1.000             1.000\n            2014-10-29          6.507              0.925             0.900\n            2014-10-29          7.046              0.962             0.950\n            2014-10-29          1.980              1.000             1.000\n            ...                   ...                ...               ...\n            2016-04-14          0.733              0.875             0.878\n            2016-04-15          1.162              0.775             0.733\n            2016-04-15          1.162              0.775             0.733\n            2016-04-29         -1.115              1.000             1.000\n            2016-04-29         -1.115              1.000             1.000\n\n                        buy_price_rank60  buy_price_rank252  buy_wave_score1  \\\n            2014-09-24             1.000              1.000            0.287\n            2014-10-24             1.000              1.000            0.596\n            2014-10-29             1.000              1.000            0.444\n            2014-10-29             0.883              0.750           -0.173\n            2014-10-29             0.925              0.982            0.031\n            2014-10-29             1.000              1.000            0.444\n            ...                      ...                ...              ...\n            2016-04-14             0.967              0.940           -0.030\n            2016-04-15             1.000              0.631            0.596\n            2016-04-15             1.000              0.631            0.596\n            2016-04-29             1.000              1.000            0.743\n            2016-04-29             1.000              1.000            0.743\n\n                        buy_wave_score2  buy_wave_score3  buy_atr_std  \\\n            2014-09-24            0.234            0.218        0.226\n            2014-10-24            0.488            0.449        0.146\n            2014-10-29            0.338            0.329        0.538\n            2014-10-29           -0.202           -0.203        0.558\n            2014-10-29           -0.128           -0.173        0.063\n            2014-10-29            0.338            0.329        0.538\n            ...                     ...              ...          ...\n            2016-04-14            0.081            0.170        0.049\n            2016-04-15            0.753            0.800        0.135\n            2016-04-15            0.753            0.800        0.135\n            2016-04-29            0.840            0.918        0.838\n            2016-04-29            0.840            0.918        0.838\n\n                        buy_jump_down_power  buy_diff_down_days  buy_jump_up_power  \\\n            2014-09-24                0.000                   0              3.344\n            2014-10-24                0.000                   0              3.344\n            2014-10-29               -1.109                 278              2.920\n            2014-10-29                0.000                   0              1.283\n            2014-10-29               -1.522                  75              3.727\n            2014-10-29               -1.109                 278              2.920\n            ...                         ...                 ...                ...\n            2016-04-14               -1.764                 100              1.158\n            2016-04-15               -1.455                 101              1.075\n            2016-04-15               -1.455                 101              1.075\n            2016-04-29               -1.178                  24              3.259\n            2016-04-29               -1.178                  24              3.259\n\n                        buy_diff_up_days\n            2014-09-24                61\n            2014-10-24                91\n            2014-10-29                95\n            2014-10-29               243\n            2014-10-29               238\n            2014-10-29                95\n            ...                      ...\n            2016-04-14                71\n            2016-04-15                58\n            2016-04-15                58\n            2016-04-29                 0\n            2016-04-29                 0\n        """"""\n        return full_df\n\n\nclass AbuUmpMainFull(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a\n            [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\', \'buy_price_rank120\',\n            \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\',\n            \'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\', \'buy_atr_std\',\n            \'buy_diff_down_days\', \'buy_jump_up_power\', \'buy_diff_up_days\', \'buy_jump_down_power\']\n\n        :return: [\'buy_deg_ang42\', \'buy_deg_ang252\', \'buy_deg_ang60\', \'buy_deg_ang21\', \'buy_price_rank120\',\n                \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\',\n                \'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\', \'buy_atr_std\',\n                \'buy_diff_down_days\', \'buy_jump_up_power\', \'buy_diff_up_days\', \'buy_jump_down_power\']\n        """"""\n        cols = AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainFull)\n        cols.extend(AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpMainFull))\n        cols.extend(AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpMainFull))\n        cols.extend(AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpMainFull))\n        cols.extend(AbuFeatureJump().get_feature_ump_keys(ump_cls=AbuUmpMainFull))\n        return cols\n\n    def get_fiter_class(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe5\xa4\x9a\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpMainFull.UmpFullFiter\n        :return: AbuUmpMainFull.UmpFullFiter\n        """"""\n        return UmpFullFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'full_main\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'full_main\'\n'"
abupy/UmpBu/ABuUmpMainJump.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe4\xb8\xbb\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe8\xb7\xb3\xe7\xa9\xba\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureJump\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_main_make_xy, BuyUmpMixin\nfrom .ABuUmpMainBase import AbuUmpMainBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpJumpFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n        make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_main_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe5\x8c\x85\xe8\xa3\x85\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n        :param kwarg: ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                      kwargs[\'scaler\']    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe9\x80\x89\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90jump_df\n                 ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9ejump_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n        # \'regex=result|buy_diff_down_days|buy_diff_up_days|buy_jump_down_power|buy_jump_up_power\'\n        regex = \'result|{}\'.format(\'|\'.join(AbuFeatureJump().get_feature_ump_keys(ump_cls=AbuUmpMainJump)))\n        # noinspection PyUnresolvedReferences\n        jump_df = self.order_has_ret.filter(regex=regex)\n        """"""\n            eg: jump_df\n                        result  buy_jump_down_power  buy_diff_down_days  \\\n            2014-09-24       0                0.000                   0\n            2014-10-24       0                0.000                   0\n            2014-10-29       1               -1.109                 278\n            2014-10-29       1                0.000                   0\n            2014-10-29       1               -1.522                  75\n            2014-10-29       1               -1.109                 278\n            2014-11-03       1               -1.451                  78\n            2014-11-11       1                0.000                   0\n            2014-11-12       0               -1.863                  82\n            2014-11-26       0               -2.115                  96\n            ...            ...                  ...                 ...\n            2016-03-14       1               -2.965                  56\n            2016-03-14       0               -2.323                  67\n            2016-03-30       0               -1.744                  74\n            2016-04-04       1               -2.085                  36\n            2016-04-13       0               -2.940                  47\n            2016-04-14       0               -1.764                 100\n            2016-04-15       0               -1.455                 101\n            2016-04-15       0               -1.455                 101\n            2016-04-29       1               -1.178                  24\n            2016-04-29       1               -1.178                  24\n\n                        buy_jump_up_power  buy_diff_up_days\n            2014-09-24              3.344                61\n            2014-10-24              3.344                91\n            2014-10-29              2.920                95\n            2014-10-29              1.283               243\n            2014-10-29              3.727               238\n            2014-10-29              2.920                95\n            2014-11-03              1.014               214\n            2014-11-11              1.291               256\n            2014-11-12              1.606               256\n            2014-11-26              1.772               270\n            ...                       ...               ...\n            2016-03-14              2.682                14\n            2016-03-14              2.478               246\n            2016-03-30              2.621                32\n            2016-04-04              1.507                45\n            2016-04-13              1.678                56\n            2016-04-14              1.158                71\n            2016-04-15              1.075                58\n            2016-04-15              1.075                58\n            2016-04-29              3.259                 0\n            2016-04-29              3.259                 0\n        """"""\n        return jump_df\n\n\nclass AbuUmpMainJump(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe8\xb7\xb3\xe7\xa9\xba\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_diff_down_days\', \'buy_diff_up_days\', \'buy_jump_down_power\', \'buy_jump_up_power\']\n        :return: [\'buy_diff_down_days\', \'buy_diff_up_days\', \'buy_jump_down_power\', \'buy_jump_up_power\']\n        """"""\n        return AbuFeatureJump().get_feature_ump_keys(ump_cls=AbuUmpMainJump)\n\n    def get_fiter_class(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe7\x89\xb9\xe5\xbe\x81\xe8\xb7\xb3\xe7\xa9\xba\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpMainJump.UmpJumpFiter\n        :return: AbuUmpMainJump.UmpJumpFiter\n        """"""\n        return UmpJumpFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'jump_main\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'jump_main\'\n'"
abupy/UmpBu/ABuUmpMainMul.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDeg, AbuFeaturePrice, AbuFeatureWave, AbuFeatureAtr\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_main_make_xy, BuyUmpMixin\nfrom .ABuUmpMainBase import AbuUmpMainBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpMulFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n        make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_main_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe5\x8c\x85\xe8\xa3\x85\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n        :param kwarg: ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                      kwargs[\'scaler\']    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe9\x80\x89\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90mul_df\n                 ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9emul_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        # regex=\'result|buy_deg_ang21|buy_price_rank252|buy_wave_score3|buy_atr_std\'\n        regex = \'result|{}|{}|{}|{}\'.format(AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1],\n                                            AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1],\n                                            AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1],\n                                            AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1])\n        # noinspection PyUnresolvedReferences\n        mul_df = self.order_has_ret.filter(regex=regex)\n        """"""\n            eg: mul_df\n                        result  buy_deg_ang21  buy_price_rank252  buy_wave_score3  \\\n            2014-09-24       0          1.818              1.000            0.218\n            2014-10-24       0         -1.089              1.000            0.449\n            2014-10-29       1          1.980              1.000            0.329\n            2014-10-29       1          6.507              0.750           -0.203\n            2014-10-29       1          7.046              0.982           -0.173\n            2014-10-29       1          1.980              1.000            0.329\n            2014-11-03       1         10.125              1.000           -0.172\n            2014-11-11       1         12.397              0.808            0.001\n            2014-11-12       0          6.671              0.560           -0.509\n            2014-11-26       0         12.494              0.762            0.015\n            ...            ...            ...                ...              ...\n            2016-03-14       1          9.324              0.444            0.948\n            2016-03-14       0          5.201              0.623            0.788\n            2016-03-30       0          4.070              0.536            0.702\n            2016-04-04       1          5.618              0.190            0.743\n            2016-04-13       0          4.457              0.270            0.651\n            2016-04-14       0          0.733              0.940            0.170\n            2016-04-15       0          1.162              0.631            0.800\n            2016-04-15       0          1.162              0.631            0.800\n            2016-04-29       1         -1.115              1.000            0.918\n            2016-04-29       1         -1.115              1.000            0.918\n\n                        buy_atr_std\n            2014-09-24        0.226\n            2014-10-24        0.146\n            2014-10-29        0.538\n            2014-10-29        0.558\n            2014-10-29        0.063\n            2014-10-29        0.538\n            2014-11-03       -0.002\n            2014-11-11        0.171\n            2014-11-12        0.093\n            2014-11-26        0.812\n            ...                 ...\n            2016-03-14        0.126\n            2016-03-14        0.663\n            2016-03-30       -0.008\n            2016-04-04        0.035\n            2016-04-13        0.262\n            2016-04-14        0.049\n            2016-04-15        0.135\n            2016-04-15        0.135\n            2016-04-29        0.838\n            2016-04-29        0.838\n        """"""\n        return mul_df\n\nclass AbuUmpMainMul(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n\n\n    def get_predict_col(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_deg_ang21\', \'buy_price_rank252\', \'buy_wave_score3\', \'buy_atr_std\']\n        :return: [\'buy_deg_ang21\', \'buy_price_rank252\', \'buy_wave_score3\', \'buy_atr_std\']\n        """"""\n\n        return [AbuFeatureDeg().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1],\n                AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1],\n                AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1],\n                AbuFeatureAtr().get_feature_ump_keys(ump_cls=AbuUmpMainMul)[-1]]\n\n    def get_fiter_class(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe5\x8d\x95\xe6\xb7\xb7\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpMainMul.UmpMulFiter\n        :return: AbuUmpMainMul.UmpMulFiter\n        """"""\n        return UmpMulFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'mul_main\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'mul_main\'\n'"
abupy/UmpBu/ABuUmpMainPrice.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeaturePrice\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_main_make_xy, BuyUmpMixin\nfrom .ABuUmpMainBase import AbuUmpMainBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpPriceFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n        make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_main_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe5\x8c\x85\xe8\xa3\x85\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n        :param kwarg: ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                      kwargs[\'scaler\']    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe9\x80\x89\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90price_df\n                 ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9eprice_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        # regex=\'result|buy_price_rank120|buy_price_rank90|buy_price_rank60|buy_price_rank252\'\n        regex = \'result|{}\'.format(\'|\'.join(AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpMainPrice)))\n        # noinspection PyUnresolvedReferences\n        price_df = self.order_has_ret.filter(regex=regex)\n        """"""\n            eg: price_df\n                        result  buy_price_rank120  buy_price_rank90  buy_price_rank60  \\\n            2014-09-24       0              1.000             1.000             1.000\n            2014-10-24       0              1.000             1.000             1.000\n            2014-10-29       1              1.000             1.000             1.000\n            2014-10-29       1              0.925             0.900             0.883\n            2014-10-29       1              0.962             0.950             0.925\n            2014-10-29       1              1.000             1.000             1.000\n            2014-11-03       1              1.000             1.000             1.000\n            2014-11-11       1              0.954             0.939             0.992\n            2014-11-12       0              0.475             0.522             0.783\n            2014-11-26       0              0.642             0.733             1.000\n            ...            ...                ...               ...               ...\n            2016-03-14       1              0.617             0.500             0.750\n            2016-03-14       0              0.683             0.589             0.850\n            2016-03-30       0              0.658             0.667             1.000\n            2016-04-04       1              0.400             0.511             0.767\n            2016-04-13       0              0.567             0.722             1.000\n            2016-04-14       0              0.875             0.878             0.967\n            2016-04-15       0              0.775             0.733             1.000\n            2016-04-15       0              0.775             0.733             1.000\n            2016-04-29       1              1.000             1.000             1.000\n            2016-04-29       1              1.000             1.000             1.000\n\n                        buy_price_rank252\n            2014-09-24              1.000\n            2014-10-24              1.000\n            2014-10-29              1.000\n            2014-10-29              0.750\n            2014-10-29              0.982\n            2014-10-29              1.000\n            2014-11-03              1.000\n            2014-11-11              0.808\n            2014-11-12              0.560\n            2014-11-26              0.762\n            ...                       ...\n            2016-03-14              0.444\n            2016-03-14              0.623\n            2016-03-30              0.536\n            2016-04-04              0.190\n            2016-04-13              0.270\n            2016-04-14              0.940\n            2016-04-15              0.631\n            2016-04-15              0.631\n            2016-04-29              1.000\n            2016-04-29              1.000\n        """"""\n        return price_df\n\n\nclass AbuUmpMainPrice(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_price_rank120\', \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\']\n        :return: [\'buy_price_rank120\', \'buy_price_rank90\', \'buy_price_rank60\', \'buy_price_rank252\']\n        """"""\n        return AbuFeaturePrice().get_feature_ump_keys(ump_cls=AbuUmpMainPrice)\n\n    def get_fiter_class(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpMainPrice.UmpPriceFiter\n        :return: AbuUmpMainPrice.UmpPriceFiter\n        """"""\n        return UmpPriceFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'price_main\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'price_main\'\n'"
abupy/UmpBu/ABuUmpMainWave.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xa4\xba\xe4\xbe\x8bump\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..TradeBu.ABuMLFeature import AbuFeatureWave\nfrom ..MLBu.ABuMLPd import AbuMLPd\nfrom .ABuUmpBase import ump_main_make_xy, BuyUmpMixin\nfrom .ABuUmpMainBase import AbuUmpMainBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass UmpWaveFiter(AbuMLPd):\n    """"""\n        \xe5\x86\x85\xe9\x83\xa8\xe7\xb1\xbb\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0make_xy\xef\xbc\x8c\xe4\xb8\x94\xe4\xbd\xbf\xe7\x94\xa8ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\n\n        \xe5\x9c\xa8__init__\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xef\xbc\x9a\n                self.fiter_cls = self.get_fiter_class()\n                self.fiter = self.fiter_cls(orders_pd=self.orders_pd, **kwarg)\n        \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84filter\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84self.fiter.df\xef\xbc\x8c\xe5\x8d\xb3pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n\n    @ump_main_make_xy\n    def make_xy(self, **kwarg):\n        """"""\n        make_xy\xe9\x80\x9a\xe8\xbf\x87\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8ump_main_make_xy\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x8c\xe6\xac\xa1\xe5\x8c\x85\xe8\xa3\x85\n        \xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8eself.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90df\n        :param kwarg: ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8kwarg\n                      kwargs[\'orders_pd\'] \xe5\x81\x9a\xe4\xb8\xba\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe7\x9a\x84\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n                      kwargs[\'scaler\']    \xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\xaf\xe9\x80\x89\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\x8e\xa7\xe5\x88\xb6\xe5\x9c\xa8make_xy\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n\n        :return: self.order_has_ret\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8filter\xe9\x80\x89\xe5\x8f\x96\xe7\x89\xb9\xe5\xbe\x81\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90wave_df\n                 ump_main_make_xy\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x9c\xa8make_xy\xe8\xbf\x94\xe5\x9b\x9ewave_df\xe5\x90\x8e\xe5\x81\x9a\xe8\xbd\xac\xe6\x8d\xa2matrix\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90x\xef\xbc\x8cy\xe7\xad\x89\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n\n        # regex=result|buy_wave_score1|buy_wave_score2|buy_wave_score3\'\n        regex = \'result|{}\'.format(\'|\'.join(AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpMainWave)))\n        # noinspection PyUnresolvedReferences\n        wave_df = self.order_has_ret.filter(regex=regex)\n        """"""\n             eg: wave_df\n                        result  buy_wave_score1  buy_wave_score2  buy_wave_score3\n            2014-09-24       0            0.287            0.234            0.218\n            2014-10-24       0            0.596            0.488            0.449\n            2014-10-29       1            0.444            0.338            0.329\n            2014-10-29       1           -0.173           -0.202           -0.203\n            2014-10-29       1            0.031           -0.128           -0.173\n            2014-10-29       1            0.444            0.338            0.329\n            2014-11-03       1            0.018           -0.128           -0.172\n            2014-11-11       1           -0.144           -0.060            0.001\n            2014-11-12       0           -0.453           -0.505           -0.509\n            2014-11-26       0           -0.005           -0.007            0.015\n            ...            ...              ...              ...              ...\n            2016-03-14       1            0.928            0.941            0.948\n            2016-03-14       0            1.209            0.891            0.788\n            2016-03-30       0            0.470            0.630            0.702\n            2016-04-04       1            0.363            0.608            0.743\n            2016-04-13       0            0.271            0.509            0.651\n            2016-04-14       0           -0.030            0.081            0.170\n            2016-04-15       0            0.596            0.753            0.800\n            2016-04-15       0            0.596            0.753            0.800\n            2016-04-29       1            0.743            0.840            0.918\n            2016-04-29       1            0.743            0.840            0.918\n        """"""\n\n        return wave_df\n\n\nclass AbuUmpMainWave(AbuUmpMainBase, BuyUmpMixin):\n    """"""\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe7\xb1\xbb\xef\xbc\x8cAbuUmpMainBase\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x8c\xe6\xb7\xb7\xe5\x85\xa5BuyUmpMixin\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5ump\xe7\xb1\xbb""""""\n\n    def get_predict_col(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81keys\xef\xbc\x9a[\'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\']\n        :return: [\'buy_wave_score1\', \'buy_wave_score2\', \'buy_wave_score3\']\n        """"""\n\n        return AbuFeatureWave().get_feature_ump_keys(ump_cls=AbuUmpMainWave)\n\n    def get_fiter_class(self):\n        """"""\n        \xe4\xb8\xbb\xe8\xa3\x81\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84AbuMLPd\xe5\xad\x90\xe7\xb1\xbb\xef\xbc\x9aAbuUmpMainWave.UmpWaveFiter\n        :return: AbuUmpMainWave.UmpWaveFiter\n        """"""\n        return UmpWaveFiter\n\n    @classmethod\n    def class_unique_id(cls):\n        """"""\n        \xe5\x85\xb7\xe4\xbd\x93ump\xe7\xb1\xbb\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9areturn \'wave_main\'\n        \xe4\xb8\xbb\xe8\xa6\x81\xe9\x92\x88\xe5\xaf\xb9\xe5\xa4\x96\xe9\x83\xa8user\xe8\xae\xbe\xe7\xbd\xae\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89ump\xe4\xbd\xbf\xe7\x94\xa8, \xe9\x9c\x80\xe8\xa6\x81user\xe8\x87\xaa\xe5\xb7\xb1\xe4\xbf\x9d\xe8\xaf\x81class_unique_id\xe7\x9a\x84\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe4\xb8\x8d\xe5\x81\x9a\xe6\xa3\x80\xe6\xb5\x8b\n        \xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa7\x81ABuUmpManager\xe4\xb8\xadextend_ump_block\xe6\x96\xb9\xe6\xb3\x95\n        """"""\n        return \'wave_main\'\n'"
abupy/UmpBu/ABuUmpManager.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x8eump\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x84\xe7\xbb\x87\xe7\xae\xa1\xe7\x90\x86\xe9\x80\x9a\xe4\xbf\xa1\xe6\xa8\xa1\xe5\x9d\x97\n""""""\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nfrom ..UtilBu.ABuLazyUtil import LazyFunc\nfrom ..UtilBu.ABuFileUtil import file_exist\nfrom ..UtilBu.ABuDelegateUtil import first_delegate_has_method, replace_word_delegate_has_method\nfrom ..UmpBu.ABuUmpEdgeBase import EEdgeType\nfrom ..UmpBu.ABuUmpEdgeDeg import AbuUmpEdgeDeg\nfrom ..UmpBu.ABuUmpEdgeFull import AbuUmpEdgeFull\nfrom ..UmpBu.ABuUmpEdgePrice import AbuUmpEdgePrice\nfrom ..UmpBu.ABuUmpEdgeWave import AbuUmpEdgeWave\nfrom ..UmpBu.ABuUmpMainDeg import AbuUmpMainDeg\nfrom ..UmpBu.ABuUmpMainJump import AbuUmpMainJump\nfrom ..UmpBu.ABuUmpMainPrice import AbuUmpMainPrice\nfrom ..UmpBu.ABuUmpMainWave import AbuUmpMainWave\nfrom ..UmpBu.ABuUmpMainBase import AbuUmpMainBase\nfrom ..CoreBu import ABuEnv\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter, six\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n""""""\xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8\xe6\x88\xb7\xe4\xbd\xbf\xe7\x94\xa8append_user_ump\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\xa4\x96\xe9\x83\xa8ump list\xe5\xae\xb9\xe5\x99\xa8\xe4\xb8\xad""""""\n_g_extend_ump_list = list()\n""""""\xe6\x98\xaf\xe5\x90\xa6\xe5\x90\xaf\xe7\x94\xa8\xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8\xe6\x88\xb7\xe4\xbd\xbf\xe7\x94\xa8append_user_ump\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84ump\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96""""""\ng_enable_user_ump = False\n\n\ndef append_user_ump(ump, check=True):\n    """"""\n    \xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\xae\xbe\xe7\xbd\xae\xe6\x89\xa9\xe5\xb1\x95ump\xe6\x8e\xa5\xe5\x8f\xa3, \xe5\x8f\x82\xe6\x95\xb0ump\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafump class\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84ump object\n    :param ump: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafump class\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84ump object\n    :param check: \xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8bump\xe6\x98\xaf\xe5\x90\xa6\xe4\xbb\xa5\xe5\x8f\x8a\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xef\xbc\x8c\xe4\xb8\x94\xe7\x94\x9f\xe6\x88\x90\xe4\xba\x86cache\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    if check:\n        # \xe6\xa3\x80\xe6\xb5\x8bump\xe8\xae\xad\xe7\xbb\x83\xe5\x90\x8e\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe7\x89\xa9\xe7\x90\x86\xe6\x96\x87\xe4\xbb\xb6\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n        if isinstance(ump, six.class_types):\n            ump_cache_path = ump(predict=True).dump_file_fn()\n        else:\n            ump_cache_path = ump.dump_file_fn()\n        if not file_exist(ump_cache_path):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x94\xa8\xe6\x88\xb7\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84ump\xe6\xb2\xa1\xe6\x9c\x89\xe7\xbb\x8f\xe8\xbf\x87\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe6\x8f\x90\xe5\x8d\x87\xe7\x94\xa8\xe6\x88\xb7\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\n            raise RuntimeError(\'you must first fit orders, {} is not exist!!\'.format(ump_cache_path))\n    _g_extend_ump_list.append(ump)\n\n\ndef clear_user_ump():\n    """"""\n    \xe5\xb0\x86\xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84ump\xe9\x98\x9f\xe5\x88\x97\xe6\xb8\x85\xe7\xa9\xba\n    :return:\n    """"""\n    global _g_extend_ump_list\n    _g_extend_ump_list = list()\n\n\nclass AbuUmpManager(object):\n    """"""ump\xe7\xbb\x84\xe7\xbb\x87\xe7\xae\xa1\xe7\x90\x86\xe7\xb1\xbb""""""\n\n    def __init__(self, factor):\n        """"""\n        \xe5\x9c\xa8AbuFactorBuyBase __init__\xe5\x92\x8cAbuFactorSellBase __init__\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe6\x9e\x84\xe9\x80\xa0AbuUmpManager\xef\xbc\x8c\n        \xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8\xe6\x88\xb7\xe4\xb8\x8d\xe5\xba\x94\xe6\x9c\x89\xe6\x9e\x84\xe9\x80\xa0\n\n        :param factor: \xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8cAbuFactorBuyBase or AbuFactorSellBase\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n\n        # \xe5\x9c\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90__init__ \xe4\xb8\xadself.ump_manger = AbuUmpManager(self)\xef\xbc\x8c\xe5\x8d\xb3\xe5\x9b\xa0\xe5\xad\x90\xe5\x92\x8cAbuUmpManager\xe4\xba\x92\xe6\x8c\x81op\n        self.factor = factor\n        from ..FactorBuyBu import AbuFactorBuyBase\n        self.is_buy_factor = isinstance(self.factor, AbuFactorBuyBase)\n\n        self.extend_ump_list = list()\n        if g_enable_user_ump and len(_g_extend_ump_list) > 0:\n            # \xe7\xad\x9b\xe9\x80\x89\xe4\xb8\x8e\xe5\x9b\xa0\xe5\xad\x90\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84ump\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90AbuFactorBuyBase\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\xaa\xe7\xad\x9b\xe9\x80\x89\xe4\xb9\xb0\xe5\x85\xa5BuyUmpMixin\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84ump\n            filter_ump = list(filter(lambda ump: self.is_buy_factor == ump.is_buy_ump(), _g_extend_ump_list))\n            self.extend_ump_list.extend(filter_ump)\n        self._fix_ump_env()\n\n    def __str__(self):\n        """"""\xe6\x89\x93\xe5\x8d\xb0\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x98\xbe\xe7\xa4\xba\xef\xbc\x9aclass name, factor, extend_ump_list""""""\n        return \'{}: factor={}, self.extend_ump_list={}\'.format(self.__class__.__name__, self.factor,\n                                                               self.extend_ump_list)\n\n    __repr__ = __str__\n\n    @classmethod\n    def _fix_ump_env(cls):\n        """"""\n        \xe5\x8f\xaa\xe4\xb8\xba\xe4\xbf\xae\xe5\xa4\x8d\xe5\x9c\xa8ABuEnv\xe4\xb8\xad\xe5\xaf\xb9ump\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe5\x92\x8cmanger\xe4\xb8\xad\xe7\x9a\x84ump\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8d\xe5\x90\x8c\xe6\xad\xa5\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe5\x8d\xb3ABuEnv.g_enable_ml_feature\n        \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8d\xe6\xad\xa3\xe7\xa1\xae\xef\xbc\x8c\xe5\xb0\x86env\xe4\xb8\xadump\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x81\xe7\xa7\xbb\xe5\x88\xb0\xe6\x9c\xac\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe5\x90\x8e\xe4\xbe\xbf\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81fix\xe4\xba\x86\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8user\xe4\xb8\x8d\xe5\xba\x94\xe4\xb8\xbb\xe5\x8a\xa8\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x8f\xaa\xe5\x9c\xa8manger\xe6\x9e\x84\xe9\x80\xa0\xe4\xbd\xbf\xe7\x94\xa8\n        """"""\n        if ABuEnv.g_enable_ump_edge_deg_block or ABuEnv.g_enable_ump_edge_price_block or \\\n                ABuEnv.g_enable_ump_edge_wave_block or ABuEnv.g_enable_ump_edge_full_block:\n            ABuEnv.g_enable_ml_feature = True\n        if ABuEnv.g_enable_ump_main_deg_block or ABuEnv.g_enable_ump_main_jump_block or \\\n                ABuEnv.g_enable_ump_main_price_block or ABuEnv.g_enable_ump_main_wave_block:\n            ABuEnv.g_enable_ml_feature = True\n        # TODO \xe5\xb0\x86env\xe4\xb8\xadump\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x81\xe7\xa7\xbb\xe5\x88\xb0\xe6\x9c\xac\xe6\xa8\xa1\xe5\x9d\x97\n\n        if g_enable_user_ump:\n            ABuEnv.g_enable_ml_feature = True\n\n    @LazyFunc\n    def ump_main_deg(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_main_deg_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpMainDeg\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpMainDeg(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpMainDeg(predict=True)\n\n    @LazyFunc\n    def ump_main_jump(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_main_jump_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpMainJump\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpMainJump(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpMainJump(predict=True)\n\n    @LazyFunc\n    def ump_main_price(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_main_price_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpMainPrice\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpMainPrice(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpMainPrice(predict=True)\n\n    @LazyFunc\n    def ump_main_wave(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_main_wave_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpMainWave\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpMainWave(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpMainWave(predict=True)\n\n    @LazyFunc\n    def ump_edge_deg(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_edge_deg_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpEdgeDeg\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpEdgeDeg(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpEdgeDeg(predict=True)\n\n    @LazyFunc\n    def ump_edge_price(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_edge_price_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpEdgePrice\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpEdgePrice(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpEdgePrice(predict=True)\n\n    @LazyFunc\n    def ump_edge_wave(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_edge_wave_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpEdgeWave\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpEdgeWave(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpEdgeWave(predict=True)\n\n    @LazyFunc\n    def ump_edge_full(self):\n        """"""\n            \xe6\xa0\xb9\xe6\x8d\xaeABuEnv.g_enable_ump_edge_full_block\xe8\xae\xbe\xe7\xbd\xae\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe6\x9e\x84\xe9\x80\xa0AbuUmpEdgeFull\xef\xbc\x8c\n            \xe4\xbd\xbf\xe7\x94\xa8LazyFunc\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x90\x8e\xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x93\xe5\xad\x98AbuUmpEdgeFull(predict=True)\xe5\xae\x9e\xe4\xbe\x8b\n        """"""\n        return AbuUmpEdgeFull(predict=True)\n\n    # noinspection PyMethodMayBeStatic\n    def _default_main_hit_cnt(self):\n        # noinspection PyProtectedMember\n        default_hit_cnt = 1 if ABuEnv._g_enable_example_env_ipython else 2\n        return default_hit_cnt\n\n    @first_delegate_has_method(delegate=\'factor\')\n    def ump_main_deg_hit_cnt(self):\n        """"""\n        \xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8predict_kwargs\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0need_hit_cnt\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3:\n                predict_kwargs(need_hit_cnt=self.ump_main_deg_hit_cnt(), **ml_feature_dict)\n\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8first_delegate_has_method(delegate=\'factor\')\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xbd\x93\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\xb3self.factor\xe4\xb8\xad\n        \xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84ump_main_deg_hit_cnt\xe6\x96\xb9\xe6\xb3\x95\xe6\x97\xb6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.factor.ump_main_deg_hit_cnt()\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n        :return: int\n        """"""\n        return self._default_main_hit_cnt()\n\n    @first_delegate_has_method(delegate=\'factor\')\n    def ump_main_jump_hit_cnt(self):\n        """"""\n        \xe8\xb7\xb3\xe7\xa9\xba\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8predict_kwargs\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0need_hit_cnt\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3:\n                predict_kwargs(need_hit_cnt=self.ump_main_jump_hit_cnt, **ml_feature_dict)\n\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8first_delegate_has_method(delegate=\'factor\')\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xbd\x93\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\xb3self.factor\xe4\xb8\xad\n        \xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84ump_main_jump_hit_cnt\xe6\x96\xb9\xe6\xb3\x95\xe6\x97\xb6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.factor.ump_main_jump_hit_cnt()\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n        :return: int\n        """"""\n        return self._default_main_hit_cnt()\n\n    @first_delegate_has_method(delegate=\'factor\')\n    def ump_main_price_hit_cnt(self):\n        """"""\n        \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8predict_kwargs\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0need_hit_cnt\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3:\n                predict_kwargs(need_hit_cnt=self.ump_main_price_hit_cnt, **ml_feature_dict)\n\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8first_delegate_has_method(delegate=\'factor\')\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xbd\x93\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\xb3self.factor\xe4\xb8\xad\n        \xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84ump_main_price_hit_cnt\xe6\x96\xb9\xe6\xb3\x95\xe6\x97\xb6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.factor.ump_main_price_hit_cnt()\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n        :return: int\n        """"""\n        return self._default_main_hit_cnt()\n\n    @first_delegate_has_method(delegate=\'factor\')\n    def ump_main_wave_hit_cnt(self):\n        """"""\n        \xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8predict_kwargs\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0need_hit_cnt\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3:\n                predict_kwargs(need_hit_cnt=self.ump_main_wave_hit_cnt, **ml_feature_dict)\n\n        \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8first_delegate_has_method(delegate=\'factor\')\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\xbd\x93\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\x8d\xb3self.factor\xe4\xb8\xad\n        \xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84ump_main_wave_hit_cnt\xe6\x96\xb9\xe6\xb3\x95\xe6\x97\xb6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eself.factor.ump_main_wave_hit_cnt()\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n        :return: int\n        """"""\n        return self._default_main_hit_cnt()\n\n    # noinspection PyMethodMayBeStatic\n    def ump_main_user_hit_cnt(self):\n        """"""\n        \xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\xe4\xb8\xbb\xe8\xa3\x81ump\xe7\xb1\xbb\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8predict_kwargs\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0need_hit_cnt\xe5\x80\xbc\xef\xbc\x8c\n        \xe7\x94\xa8\xe6\x88\xb7\xe5\x9c\xa8\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\xad\xe5\x8f\xaf\xe9\x80\x9a\xe8\xbf\x87\xe5\xae\x9e\xe7\x8e\xb0\xe7\x89\xb9\xe7\x82\xb9\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x90\x8d\xe7\xa7\xb0\xe6\x9d\xa5\xe6\x9b\xbf\xe6\x8d\xa2ump_main_user_hit_cnt\xe5\x80\xbc\xef\xbc\x8c\n\n        \xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8replace_word_delegate_has_method\xe6\xa3\x80\xe6\xb5\x8bself.factor\xe4\xb8\xad\xe6\x9c\x89\xe6\xb2\xa1\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\n        eg:\n            replace_hit_cnt = replace_word_delegate_has_method(delegate=\'factor\', key_word=\'user\',\n                                                                       replace_word=class_unique_id)\n            hit_cnt = replace_hit_cnt(self.ump_main_user_hit_cnt)()\n\n            \xe5\x8d\xb3\xe5\xa6\x82\xe6\x9e\x9c\xe7\x94\xa8\xe6\x88\xb7\xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84\xe4\xb8\xbb\xe8\xa3\x81ump\xe4\xb8\xadclass_unique_id\xe6\x96\xb9\xe6\xb3\x95\xe8\xbf\x94\xe5\x9b\x9e\'extend_main_test\'\n                @classmethod\n                def class_unique_id(cls):\n                    return \'extend_main_test\'\n            \xe5\x88\x99\xe5\x9c\xa8\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89hit_cnt\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x90\x8d\xe7\xa7\xb0\xe5\xba\x94\xe4\xb8\xba\xef\xbc\x9a\n                def ump_main_extend_main_test_hit_cnt(self)\n                    return 1\n            \xe6\x9b\xb4\xe5\xa4\x9a\xe5\x85\xb7\xe4\xbd\x93\xe5\xae\x9e\xe7\x8e\xb0\xe9\x98\x85extend_ump_block\xe4\xbb\xa5\xe5\x8f\x8areplace_word_delegate_has_method\xe6\x96\xb9\xe6\xb3\x95\xe7\x9a\x84\xe5\xae\x9e\xe7\x8e\xb0\n\n        :return: int\n        """"""\n        return self._default_main_hit_cnt()\n\n    def ump_block(self, ml_feature_dict):\n        """"""\n        \xe5\x9c\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe6\x88\x96\xe8\x80\x85\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\xadmake_ump_block_decision\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\x86\xb3\xe7\xad\x96\xe7\x89\xb9\xe5\xae\x9a\xe4\xba\xa4\xe6\x98\x93\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\n        ump_block\xe4\xb8\xad\xe9\xa6\x96\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\xe5\x86\x85\xe7\xbd\xaeump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe8\xa2\xab\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x96\xe9\x83\xa8\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84ump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\n\n        :param ml_feature_dict: \xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\x97\xe5\x85\xb8\n                eg: ml_feature_dict\n                    {\'buy_deg_ang42\': -0.45400000000000001, \'buy_deg_ang252\': 5.532,\n                    \'buy_deg_ang60\': 2.1419999999999999, \'buy_deg_ang21\': 0.93100000000000005,\n                    \'buy_price_rank120\': 1.0, \'buy_price_rank90\': 1.0, \'buy_price_rank60\': 1.0,\n                    \'buy_price_rank252\': 1.0, \'buy_wave_score1\': 1.2470000000000001, \'buy_wave_score2\': 1.286,\n                    \'buy_wave_score3\': 1.2849999999999999, \'buy_atr_std\': 0.19400000000000001,\n                    \'buy_jump_down_power\': -13.57, \'buy_diff_down_days\': 136, \'buy_jump_up_power\': 1.038,\n                    \'buy_diff_up_days\': 2}\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n        # \xe5\x86\x85\xe7\xbd\xaeump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\n        if self.builtin_ump_block(ml_feature_dict):\n            return True\n\n        # \xe5\xa4\x96\xe9\x83\xa8\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84ump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\n        if self.extend_ump_block(ml_feature_dict):\n            return True\n        return False\n\n    def extend_ump_block(self, ml_feature_dict):\n        """"""\n        \xe5\xa4\x96\xe9\x83\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84ump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe8\xbf\xad\xe4\xbb\xa3self.extend_ump_list\xe4\xb8\xad\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84ump\xef\xbc\x8c\n        \xe7\x94\xb1\xe4\xba\x8e\xe5\xaf\xb9\xe5\xa4\x96\xe6\xb7\xbb\xe5\x8a\xa0ump\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3append_user_ump\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0ump\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafump class\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\n        \xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84ump object\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe6\x8a\x8aclass\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84ump\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe6\x9e\x84\xe9\x80\xa0\xef\xbc\x8c\xe4\xb8\x94\xe5\xb0\x86\n        \xe5\xae\x9e\xe4\xbe\x8b\xe7\x9a\x84ump\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbc\x93\xe5\xad\x98\xe5\x9c\xa8\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xef\xbc\x88\xe9\x80\x9a\xe8\xbf\x87class_unique_id\xe4\xb8\xba\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe6\x9e\x84\xe9\x80\xa0\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x89\xef\xbc\x8c\n        ump\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x9e\x84\xe9\x80\xa0\xe5\xa5\xbd\xe5\x90\x8e\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb8\xbb\xe8\xa3\x81\xe8\xbf\x98\xe6\x98\xaf\xe8\xbe\xb9\xe8\xa3\x81\xe9\x80\x89\xe6\x8b\xa9\xe5\x86\xb3\xe7\xad\x96\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\n                \xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9apredict_kwargs(need_hit_cnt=need_hit_cnt, **ml_feature_dict)\n                \xe8\xbe\xb9\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9apredict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS\n        \xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\n\n        :param ml_feature_dict: \xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\x97\xe5\x85\xb8\n        eg: ml_feature_dict\n            {\'buy_deg_ang42\': -0.45400000000000001, \'buy_deg_ang252\': 5.532,\n            \'buy_deg_ang60\': 2.1419999999999999, \'buy_deg_ang21\': 0.93100000000000005,\n            \'buy_price_rank120\': 1.0, \'buy_price_rank90\': 1.0, \'buy_price_rank60\': 1.0,\n            \'buy_price_rank252\': 1.0, \'buy_wave_score1\': 1.2470000000000001, \'buy_wave_score2\': 1.286,\n            \'buy_wave_score3\': 1.2849999999999999, \'buy_atr_std\': 0.19400000000000001,\n            \'buy_jump_down_power\': -13.57, \'buy_diff_down_days\': 136, \'buy_jump_up_power\': 1.038,\n            \'buy_diff_up_days\': 2}\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n        for extend_ump in self.extend_ump_list:\n            class_unique_id = extend_ump.class_unique_id()\n            # \xe7\x94\xb1\xe4\xba\x8e\xe5\xaf\xb9\xe5\xa4\x96\xe6\xb7\xbb\xe5\x8a\xa0ump\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3append_user_ump\xe4\xb8\xad\xe5\x8f\x82\xe6\x95\xb0ump\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xafump class\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84ump object\n            if isinstance(extend_ump, six.class_types):\n                # \xe6\x8a\x8aclass\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84ump\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xae\x9e\xe4\xbe\x8b\xe6\x9e\x84\xe9\x80\xa0\n\n                is_main_ump = issubclass(extend_ump, AbuUmpMainBase)\n                main_ump_key = \'main\' if is_main_ump else \'edge\'\n\n                # \xe9\x80\x9a\xe8\xbf\x87class_unique_id\xe5\x92\x8cissubclass(extend_ump, AbuUmpMainBase)\xe4\xb8\xba\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe6\x9e\x84\xe9\x80\xa0\xe5\x94\xaf\xe4\xb8\x80\xe5\x90\x8d\xe7\xa7\xb0\n                extend_ump_attr_str = \'ump_{}_{}\'.format(main_ump_key, class_unique_id)\n                if hasattr(self, extend_ump_attr_str):\n                    # \xe5\xb0\x86\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe7\x9a\x84\xe5\xae\x9e\xe4\xbe\x8b\xe4\xbb\xa3\xe6\x9b\xbf\xe7\xb1\xbb\n                    extend_ump = getattr(self, extend_ump_attr_str)\n                else:\n                    # \xe5\x86\x85\xe7\xbd\xaeump\xe9\x80\x9a\xe8\xbf\x87LazyFunc\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe6\x8f\x90\xe5\x8d\x87\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84ump\xe9\x80\x9a\xe8\xbf\x87\xe6\x89\x8b\xe5\x8a\xa8setattr\xef\xbc\x8c\xe5\xb0\x86\xe5\xae\x9e\xe4\xbe\x8b\xe7\x9a\x84ump\xe5\xaf\xb9\xe8\xb1\xa1\xe7\xbc\x93\xe5\xad\x98\xe5\x9c\xa8\xe7\xb1\xbb\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\n                    extend_ump_obj = extend_ump(predict=True)\n                    setattr(self, extend_ump_attr_str, extend_ump_obj)\n                    # \xe5\xb0\x86\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe5\x90\x8e\xe7\x9a\x84\xe5\xae\x9e\xe4\xbe\x8b\xe4\xbb\xa3\xe6\x9b\xbf\xe7\xb1\xbb\n                    extend_ump = extend_ump_obj\n\n            is_main_ump = isinstance(extend_ump, AbuUmpMainBase)\n            if is_main_ump:\n                # replace_word_delegate_has_method\xe4\xb8\x8d\xe5\x81\x9a\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbf\xae\xe9\xa5\xb0ump_main_user_hit_cnt\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xa8\xe6\x80\x81\xe8\x8e\xb7\xe5\x8f\x96replace_word\n                try:\n                    replace_hit_cnt = replace_word_delegate_has_method(delegate=\'factor\', key_word=\'user\',\n                                                                       replace_word=class_unique_id)\n                    hit_cnt = replace_hit_cnt(self.ump_main_user_hit_cnt)()\n                except:\n                    # \xe5\xbf\xbd\xe7\x95\xa5\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89factor\xe4\xb8\xad\xe5\x85\xb3\xe4\xba\x8ehit_cnt\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe9\x94\x99\xe8\xaf\xaf\n                    hit_cnt = self.ump_main_user_hit_cnt()\n                if extend_ump.predict_kwargs(need_hit_cnt=hit_cnt, **ml_feature_dict):\n                    return True\n            else:\n                if extend_ump.predict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS:\n                    return True\n        return False\n\n    def builtin_ump_block(self, ml_feature_dict):\n        """"""\n        \xe5\x86\x85\xe7\xbd\xaeump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87ABuEnv\xe4\xb8\xad\xe7\x9a\x84\xe6\x8b\xa6\xe6\x88\xaa\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe5\x8d\x96\xe5\x87\xba\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x98\xaf\xe5\x90\xa6\xe5\x92\x8cump\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x8c\n        \xe6\x9d\xa5\xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84ump\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x8c\xe5\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\xb3\xe7\xad\x96\xef\xbc\x9a\n\n                \xe4\xb8\xbb\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9apredict_kwargs(need_hit_cnt=need_hit_cnt, **ml_feature_dict)\n                \xe8\xbe\xb9\xe8\xa3\x81\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9apredict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS\n        \xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\xe5\x86\xb3\xe7\xad\x96\n\n                :param ml_feature_dict: \xe4\xba\xa4\xe6\x98\x93\xe6\x89\x80\xe5\xbd\xa2\xe6\x88\x90\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\xad\x97\xe5\x85\xb8\n                eg: ml_feature_dict\n                    {\'buy_deg_ang42\': -0.45400000000000001, \'buy_deg_ang252\': 5.532,\n                    \'buy_deg_ang60\': 2.1419999999999999, \'buy_deg_ang21\': 0.93100000000000005,\n                    \'buy_price_rank120\': 1.0, \'buy_price_rank90\': 1.0, \'buy_price_rank60\': 1.0,\n                    \'buy_price_rank252\': 1.0, \'buy_wave_score1\': 1.2470000000000001, \'buy_wave_score2\': 1.286,\n                    \'buy_wave_score3\': 1.2849999999999999, \'buy_atr_std\': 0.19400000000000001,\n                    \'buy_jump_down_power\': -13.57, \'buy_diff_down_days\': 136, \'buy_jump_up_power\': 1.038,\n                    \'buy_diff_up_days\': 2}\n\n        :return: bool, \xe5\xaf\xb9ml_feature_dict\xe6\x89\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xa6\xe6\x88\xaa\n        """"""\n\n        """"""\xe5\x86\x85\xe7\xbd\xae\xe4\xb8\xbb\xe8\xa3\x81\xe5\xbc\x80\xe5\xa7\x8b""""""\n        if ABuEnv.g_enable_ump_main_deg_block and self.is_buy_factor == self.ump_main_deg.is_buy_ump() \\\n                and self.ump_main_deg.predict_kwargs(need_hit_cnt=self.ump_main_deg_hit_cnt(), **ml_feature_dict):\n            return True\n\n        if ABuEnv.g_enable_ump_main_jump_block and self.is_buy_factor == self.ump_main_jump.is_buy_ump() \\\n                and self.ump_main_jump.predict_kwargs(need_hit_cnt=self.ump_main_jump_hit_cnt(), **ml_feature_dict):\n            return True\n\n        if ABuEnv.g_enable_ump_main_price_block and self.is_buy_factor == self.ump_main_price.is_buy_ump() \\\n                and self.ump_main_price.predict_kwargs(need_hit_cnt=self.ump_main_price_hit_cnt(), **ml_feature_dict):\n            return True\n\n        if ABuEnv.g_enable_ump_main_wave_block and self.is_buy_factor == self.ump_main_wave.is_buy_ump() \\\n                and self.ump_main_wave.predict_kwargs(need_hit_cnt=self.ump_main_wave_hit_cnt(), **ml_feature_dict):\n            return True\n\n        """"""\xe5\x86\x85\xe7\xbd\xae\xe8\xbe\xb9\xe8\xa3\x81\xe5\xbc\x80\xe5\xa7\x8b""""""\n        if ABuEnv.g_enable_ump_edge_deg_block and self.is_buy_factor == self.ump_edge_deg.is_buy_ump() \\\n                and self.ump_edge_deg.predict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS:\n            return True\n\n        if ABuEnv.g_enable_ump_edge_price_block and self.is_buy_factor == self.ump_edge_price.is_buy_ump() \\\n                and self.ump_edge_price.predict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS:\n            return True\n\n        if ABuEnv.g_enable_ump_edge_wave_block and self.is_buy_factor == self.ump_edge_wave.is_buy_ump() \\\n                and self.ump_edge_wave.predict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS:\n            return True\n\n        if ABuEnv.g_enable_ump_edge_full_block and self.is_buy_factor == self.ump_edge_full.is_buy_ump() \\\n                and self.ump_edge_full.predict(**ml_feature_dict) == EEdgeType.E_EEdge_TOP_LOSS:\n            return True\n\n        return False\n'"
abupy/UmpBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuUmpBase import CachedUmpManager, AbuUmpBase, BuyUmpMixin, SellUmpMixin\n\nfrom .ABuUmpEdgeBase import AbuUmpEdgeBase\nfrom .ABuUmpEdgeDeg import AbuUmpEdgeDeg, AbuUmpEegeDegExtend\nfrom .ABuUmpEdgeFull import AbuUmpEdgeFull\nfrom .ABuUmpEdgeMul import AbuUmpEdgeMul\nfrom .ABuUmpEdgePrice import AbuUmpEdgePrice\nfrom .ABuUmpEdgeWave import AbuUmpEdgeWave\n\nfrom .ABuUmpMainBase import AbuUmpMainBase\nfrom .ABuUmpMainDeg import AbuUmpMainDeg, AbuUmpMainDegExtend\nfrom .ABuUmpMainFull import AbuUmpMainFull\nfrom .ABuUmpMainJump import AbuUmpMainJump\nfrom .ABuUmpMainMul import AbuUmpMainMul\nfrom .ABuUmpMainPrice import AbuUmpMainPrice\nfrom .ABuUmpMainWave import AbuUmpMainWave\n\nfrom . import ABuUmp as ump\n\n__all__ = [\n    'CachedUmpManager',\n    'AbuUmpBase',\n    'BuyUmpMixin',\n    'SellUmpMixin',\n\n    'AbuUmpEdgeBase',\n    'AbuUmpEdgeDeg',\n    'AbuUmpEegeDegExtend',\n    'AbuUmpEdgeFull',\n    'AbuUmpEdgeMul',\n    'AbuUmpEdgePrice',\n    'AbuUmpEdgeWave',\n\n    'AbuUmpMainBase',\n    'AbuUmpMainDeg',\n    'AbuUmpMainDegExtend',\n    'AbuUmpMainFull',\n    'AbuUmpMainJump',\n    'AbuUmpMainMul',\n    'AbuUmpMainPrice',\n    'AbuUmpMainWave',\n\n    'ump']\n"""
abupy/UtilBu/ABuDTUtil.py,13,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe9\x80\x9a\xe7\x94\xa8\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8, \xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport functools\nimport logging\nimport pdb\nimport time\nimport warnings\nfrom collections import Iterable\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuFixes import six\n\n\ndef warnings_filter(func):\n    """"""\n        \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8 (\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0)\n        \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9a\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\x8a\xe7\x9a\x84\xe8\xad\xa6\xe5\x91\x8a\xe4\xb8\x8d\xe4\xbc\x9a\xe6\x89\x93\xe5\x8d\xb0\xef\xbc\x8c\xe5\xbf\xbd\xe7\x95\xa5\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        warnings.simplefilter(\'ignore\')\n        ret = func(*args, **kwargs)\n        if not ABuEnv.g_ignore_all_warnings:\n            # \xe5\xa6\x82\xe6\x9e\x9cenv\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x8d\xe6\x98\xaf\xe5\xbf\xbd\xe7\x95\xa5\xe6\x89\x80\xe6\x9c\x89\xe6\x89\x8d\xe6\x81\xa2\xe5\xa4\x8d\n            warnings.simplefilter(\'default\')\n        return ret\n\n    return wrapper\n\n\ndef singleton(cls):\n    """"""\n        \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe7\xb1\xbb\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\n        \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9a\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x90\x8e\xe7\xb1\xbb\xe5\x8f\x98\xe6\x88\x90\xe5\x8d\x95\xe4\xbe\x8b\xe7\xb1\xbb\n    """"""\n\n    instances = {}\n\n    @functools.wraps(cls)\n    def get_instance(*args, **kw):\n        if cls not in instances:\n            # \xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe5\xae\x9e\xe4\xbe\x8binstances\xe6\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9e\x84\xe9\x80\xa0\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n\n    return get_instance\n\n\n# TODO \xe6\x94\xbe\xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe5\x90\x88\xe9\x80\x82\xef\xbc\x8c\xe8\xbf\x98\xe8\xa6\x81\xe5\x92\x8cABuScalerUtil\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8arr_to_pandas\xe9\x87\x8d\xe5\xa4\x8d\xe4\xbb\xa3\xe7\xa0\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe6\x9e\x84\ndef arr_to_pandas(arr):\n    """"""\n        \xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x9a\xe5\xb0\x86\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe6\x88\x96\xe8\x80\x85pd.Series\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\n        np.ndarray\xef\xbc\x8clist\xef\xbc\x8cdict, list\xef\xbc\x8cset\xef\xbc\x8c\xe5\xb5\x8c\xe5\xa5\x97\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97, \xe6\xb7\xb7\xe5\xb5\x8c\xe5\xa5\x97\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n    if not isinstance(arr, Iterable) or isinstance(arr, six.string_types):\n        return arr\n\n    if not isinstance(arr, pd.DataFrame) or isinstance(arr, pd.Series):\n        if isinstance(arr, np.ndarray) and len(arr.shape) > 1 and arr.shape[1] > 1:\n            # np.ndarray > 1\xe5\x88\x97\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n            arr = pd.DataFrame(arr)\n        elif isinstance(arr, dict):\n            # \xe9\x92\x88\xe5\xaf\xb9dict\xe8\xbd\xac\xe6\x8d\xa2pd.DataFrame\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\xa1\xba\xe5\xba\x8f\xe4\xb8\x8d\xe8\x83\xbd\xe5\x9c\xa8all(isinstance(arr_item, Iterable)\xe4\xb8\x8b\xe9\x9d\xa2\n            arr = pd.DataFrame(arr)\n        elif all(isinstance(arr_item, Iterable) for arr_item in arr):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb9\x9f\xe9\x83\xbd\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\x85\x88\xe8\xbd\xacnp.array\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x86\x8dDataFrame\n            arr = pd.DataFrame(np.array(arr))\n        else:\n            # \xe5\x90\xa6\xe5\x88\x99\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.Series\n            arr = pd.Series(arr)\n    return arr\n\n\ndef params_to_pandas(func):\n    """"""\n        \xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x9a\xe4\xb8\x8d\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xbd\xac\xe6\x8d\xa2\xe4\xbd\xbf\xe7\x94\xa8ABuScalerUtil\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8arr_to_pandas(func)\n        \xe5\xb0\x86\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe6\x88\x96\xe8\x80\x85pd.Series\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*arg, **kwargs):\n        # \xe6\x8a\x8aarg\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe6\x88\x96\xe8\x80\x85pd.Series\n        arg_list = [arr_to_pandas(param) for param in arg]\n        # \xe6\x8a\x8akwargs\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe6\x88\x96\xe8\x80\x85pd.Series\n        arg_dict = {param_key: arr_to_pandas(kwargs[param_key]) for param_key in kwargs}\n        return func(*arg_list, **arg_dict)\n\n    return wrapper\n\n\n# TODO \xe6\x94\xbe\xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xe4\xb8\x8d\xe5\x90\x88\xe9\x80\x82\xef\xbc\x8c\xe8\xbf\x98\xe8\xa6\x81\xe5\x92\x8cABuScalerUtil\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8arr_to_numpy\xe9\x87\x8d\xe5\xa4\x8d\xe4\xbb\xa3\xe7\xa0\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe6\x9e\x84\ndef arr_to_numpy(arr):\n    """"""\n        \xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x9a\xe5\xb0\x86\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81pd.DataFrame\xe6\x88\x96\xe8\x80\x85pd.Series\n        \xef\xbc\x8clist\xef\xbc\x8cdict, list\xef\xbc\x8cset\xef\xbc\x8c\xe5\xb5\x8c\xe5\xa5\x97\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97, \xe6\xb7\xb7\xe5\xb5\x8c\xe5\xa5\x97\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n    if not isinstance(arr, Iterable) or isinstance(arr, six.string_types):\n        return arr\n\n    if not isinstance(arr, np.ndarray):\n        if isinstance(arr, pd.DataFrame) or isinstance(arr, pd.Series):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafpandas\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x8b\xbfvalues\n            arr = arr.values\n        elif isinstance(arr, dict):\n            # \xe9\x92\x88\xe5\xaf\xb9dict\xe8\xbd\xac\xe6\x8d\xa2np.array\n            arr = np.array(list(arr.values())).T\n        else:\n            arr = np.array(arr)\n    return arr\n\n\ndef params_to_numpy(func):\n    """"""\n        \xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x9a\xe4\xb8\x8d\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xbd\xac\xe6\x8d\xa2\xe4\xbd\xbf\xe7\x94\xa8ABuScalerUtil\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8arr_to_numpy(func)\n        \xe5\xb0\x86\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*arg, **kwargs):\n        # \xe6\x8a\x8aarg\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\n        arg_list = [arr_to_numpy(param) for param in arg]\n        # \xe6\x8a\x8akwargs\xe4\xb8\xad\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\n        arg_dict = {param_key: arr_to_numpy(kwargs[param_key]) for param_key in kwargs}\n        return func(*arg_list, **arg_dict)\n\n    return wrapper\n\n\ndef catch_error(return_val=None, log=True):\n    """"""\n    \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8 (\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0)\n    \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9a\xe6\x8d\x95\xe8\x8e\xb7\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe5\x8d\xb3\xe5\xbf\xbd\xe7\x95\xa5\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe7\x94\xa8\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe7\xba\xa7\xe5\x88\xab\xe4\xbd\x8e\xef\xbc\x8c\xe4\xb8\x94\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x90\x8e\xe7\xbb\xad\xe5\xa4\x84\xe7\x90\x86\n    :param return_val: \xe5\xbc\x82\xe5\xb8\xb8\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\n                eg:\n                    class A:\n                        @ABuDTUtil.catch_error(return_val=100)\n                        def a_func(self):\n                            raise ValueError(\'catch_error\')\n                            return 100\n                    in: A().a_func()\n                    out: 100\n    :param log: \xe6\x98\xaf\xe5\x90\xa6\xe6\x89\x93\xe5\x8d\xb0\xe9\x94\x99\xe8\xaf\xaf\xe6\x97\xa5\xe5\xbf\x97\n    """"""\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                logging.exception(e) if log else logging.debug(e)\n                return return_val\n\n        return wrapper\n\n    return decorate\n\n\ndef consume_time(func):\n    """"""\n    \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8 (\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0)\n    \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9a\xe7\xae\x80\xe5\x8d\x95\xe7\xbb\x9f\xe8\xae\xa1\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x90\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(\'{} cost {}s\'.format(func.__name__, round(end_time - start_time, 3)))\n        return result\n\n    return wrapper\n\n\ndef empty_wrapper(func):\n    """"""\n    \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8 (\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0)\n    \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9a\xe7\xa9\xba\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe4\xb8\xbafix\xe7\x89\x88\xe6\x9c\xac\xe9\x97\xae\xe9\xa2\x98\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x88\x86\xe9\x80\xbb\xe8\xbe\x91\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\xe4\xbd\xbf\xe7\x94\xa8\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n\n    return wrapper\n\n\n# noinspection PyUnusedLocal\ndef empty_wrapper_with_params(*p_args, **p_kwargs):\n    """"""\n    \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8 (\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0)\n    \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9a\xe5\xb8\xa6\xe5\x8f\x82\xe6\x95\xb0\xe7\xa9\xba\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe4\xb8\xbafix\xe7\x89\x88\xe6\x9c\xac\xe9\x97\xae\xe9\xa2\x98\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x88\x86\xe9\x80\xbb\xe8\xbe\x91\xe5\x8a\x9f\xe8\x83\xbd\xe5\xae\x9e\xe7\x8e\xb0\xe4\xbd\xbf\xe7\x94\xa8\n    """"""\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorate\n\n\ndef except_debug(func):\n    """"""\n    \xe4\xbd\x9c\xe7\x94\xa8\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x9a\xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8 (\xe6\xa8\xa1\xe5\x9d\x97\xe5\x87\xbd\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0)\n    \xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x9adebug\xef\xbc\x8c\xe8\xb0\x83\xe8\xaf\x95\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe8\xa3\x85\xe9\xa5\xb0\xe5\x9c\xa8\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\x8a\xef\xbc\x8c\xe5\x8f\x91\xe7\x94\x9f\xe9\x97\xae\xe9\xa2\x98\xe6\x89\x93\xe5\x87\xba\xe9\x97\xae\xe9\xa2\x98\xe5\x90\x8e\xef\xbc\x8c\xe5\x86\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x94\xa8s\xe8\xb7\x9f\xe8\xb8\xaa\xe9\x97\xae\xe9\xa2\x98\xe4\xba\x86\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            pdb.set_trace()\n            print(e)\n            # \xe5\x86\x8d\xe6\x9d\xa5\xe4\xb8\x80\xe9\x81\x8d\xe7\x94\xa8s\xe8\xb7\x9f\xe8\xb8\xaa\xe8\xbf\x9b\xe5\x8e\xbb\n            return func(*args, **kwargs)\n\n    return wrapper\n\n\n@contextmanager\ndef plt_show():\n    """"""\n        \xe5\x9c\xa8conda5.00\xe5\xb0\x81\xe8\xa3\x85\xe7\x9a\x84matplotlib\xe4\xb8\xad\xe5\x85\xa8\xe5\xb1\x80rc\xe7\x9a\x84figsize\xe5\x9c\xa8\xe4\xbd\xbf\xe7\x94\xa8notebook\xe5\xb9\xb6\xe4\xb8\x94\xe5\xbc\x80\xe5\x90\xaf\xe7\x9b\xb4\xe6\x8e\xa5show\xe7\x9a\x84\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\n        \xe4\xbb\xa3\xe7\xa0\x81\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8plt.show\xe4\xbc\x9a\xe5\xb0\x86rc\xe4\xb8\xad\xe7\x9a\x84figsize\xe9\x87\x8d\xe7\xbd\xae\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\xbe\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8plt.show\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87plt_show\n        \xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\x84\xe8\x8c\x83\xe6\x8e\xa7\xe5\x88\xb6\xef\xbc\x9a\n        1. \xe4\xb8\x8a\xe6\x96\x87figsize\xe8\xae\xbe\xe7\xbd\xaeABuEnv\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\xa8\xe5\xb1\x80g_plt_figsize\n        2. \xe4\xb8\x8b\xe6\x96\x87\xe6\x98\xbe\xe7\xa4\xba\xe8\xb0\x83\xe7\x94\xa8plt.show()\n    """"""\n    plt.figure(figsize=ABuEnv.g_plt_figsize)\n    yield\n    plt.show()\n'"
abupy/UtilBu/ABuDateUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport datetime\nimport time\nfrom datetime import datetime as dt\n\nfrom ..CoreBu.ABuFixes import six\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\n\ntry:\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\xae\x89\xe8\xa3\x85dateutil\xe4\xbd\xbf\xe7\x94\xa8relativedelta as timedelta\n    from dateutil.relativedelta import relativedelta as timedelta\nexcept ImportError:\n    # \xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x89\xe8\xa3\x85dateutil\xe4\xbd\xbf\xe7\x94\xa8datetime.timedelta\n    from datetime import timedelta\n\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n""""""\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe9\xa1\xb9\xe7\x9b\xae\xe4\xb8\xad\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe7\xad\x89\xe6\x97\xb6\xe9\x97\xb4\xe7\x9b\xb8\xe5\x85\xb3\xe9\xbb\x98\xe8\xae\xa4\xe6\xa0\xbc\xe5\xbc\x8f""""""\nK_DEFAULT_DT_FMT = ""%Y-%m-%d""\n\n\ndef str_to_datetime(date_str, fmt=K_DEFAULT_DT_FMT, fix=True):\n    """"""\n    \xe5\xb0\x86\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90datetime.datetime\xe5\xaf\xb9\xe8\xb1\xa1 eg. \'2016-01-01\' \xef\xbc\x8d> datetime.datetime(2016, 1, 1, 0, 0)\n    :param date_str: %Y-%m-%d \xe5\xbd\xa2\xe5\xbc\x8fstr\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. \'2016-01-01\'\n    :param fmt: \xe5\xa6\x82date_str\xe4\xb8\x8d\xe6\x98\xaf%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param fix: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\xae\xe5\xa4\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xef\xbc\x8ceg. 2016-1-1 fix 2016-01-01\n    :return: datetime.datetime\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. datetime.datetime(2016, 1, 1, 0, 0)\n    """"""\n    if fix and fmt == K_DEFAULT_DT_FMT:\n        # \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xe6\xa0\xbc\xe5\xbc\x8f\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\n        date_str = fix_date(date_str)\n\n    return dt.strptime(date_str, fmt)\n\n\ndef str_to_datetime_fast(date_str, split=\'-\', fix=True):\n    """"""\n    \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8datetime api\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x88\x86\xe8\xa7\xa3\xef\xbc\x8c\xe7\x9b\xb8\xe5\xaf\xb9str_to_datetime\xe8\xa6\x81\xe5\xbf\xab\xe5\xbe\x88\xe5\xa4\x9a\xef\xbc\x8c\xe5\xa4\xa7\xe6\xa6\x822\xe5\x80\x8d\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xa4\xa7\xe9\x87\x8f\xe6\x97\xb6\xe9\x97\xb4\xe8\xbd\xac\xe6\x8d\xa2\xef\xbc\x8c\xe4\xb8\x94\xe6\xa0\xbc\xe5\xbc\x8f\xe7\xa1\xae\xe5\xae\x9a\xe4\xbd\xbf\xe7\x94\xa8\n    \xe5\xb0\x86\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90datetime.datetime\xe5\xaf\xb9\xe8\xb1\xa1 eg. \'2016-01-01\' \xef\xbc\x8d> datetime.datetime(2016, 1, 1, 0, 0)\n    :param date_str: \xe5\xa6\x82date_str\xe4\xb8\x8d\xe6\x98\xaf%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param split: \xe5\xb9\xb4\xe6\x9c\x88\xe6\x97\xa5\xe7\x9a\x84\xe5\x88\x86\xe5\x89\xb2\xe7\xac\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\'-\'\n    :param fix: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\xae\xe5\xa4\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xef\xbc\x8ceg. 2016-1-1 fix 2016-01-01\n    :return: datetime.datetime\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. datetime.datetime(2016, 1, 1, 0, 0)\n    """"""\n    if fix and split == \'-\':\n        # \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xe6\xa0\xbc\xe5\xbc\x8f\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\n        date_str = fix_date(date_str)\n    y, m, d = date_str.split(split)\n    return dt(int(y), int(m), int(d))\n\n\ndef datetime_to_str(dt_obj):\n    """"""\n    datetime\xe6\x97\xb6\xe9\x97\xb4\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbastr\xe5\xaf\xb9\xe8\xb1\xa1, str_to_datetime\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe9\x80\x86\xe5\x90\x91\n    :param dt_obj: datetime.datetime\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: str\xe5\xaf\xb9\xe8\xb1\xa1 eg. \'2016-01-01\'\n    """"""\n    return str(dt_obj.date())[:10]\n\n\ndef timestamp_to_str(ts):\n    """"""\n    \xe9\x92\x88\xe5\xaf\xb9pandas.tslib.Timestamp\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97index\xe5\x85\x83\xe7\xb4\xa0\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbastr\xe5\xaf\xb9\xe8\xb1\xa1, \xe6\x97\xb6\xe9\x97\xb4\xe5\x8d\x95\xe4\xbd\x8d\xe5\x8f\xaa\xe5\x8f\x96\xe5\x88\xb0\xe5\xa4\xa9\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa6\x822016-01\xef\xbc\x8d01\n    :param ts: pandas.tslib.Timestamp\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ceg. Timestamp(\'2016-01-01 00:00:00\')\n    :return: \xe5\x9b\x9e\xe5\xa6\x822016-01\xef\xbc\x8d01 str\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    try:\n        # pandas\xe9\xab\x98\xe7\x89\x88\xe6\x9c\xacto_pydatetime\n        s_date = str(ts.to_pydatetime().date())[:10]\n    except:\n        # pandas\xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xacto_datetime\n        s_date = str(ts.to_datetime().date())[:10]\n    return s_date\n\n\ndef date_str_to_int(date_str, split=\'-\', fix=True):\n    """"""\n    eg. 2016-01-01 -> 20160101\n    \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4api\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xa7\xa3\xe6\x9e\x90\xef\xbc\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe9\xab\x98\n    :param date_str: %Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xe6\x97\xb6\xe9\x97\xb4str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param split: \xe5\xb9\xb4\xe6\x9c\x88\xe6\x97\xa5\xe7\x9a\x84\xe5\x88\x86\xe5\x89\xb2\xe7\xac\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\'-\'\n    :param fix: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\xae\xe5\xa4\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xef\xbc\x8ceg. 2016-1-1 fix 2016-01-01\n    :return: int\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x97\xb6\xe9\x97\xb4\n    """"""\n    if fix and split == \'-\':\n        # \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xe6\xa0\xbc\xe5\xbc\x8f\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\n        date_str = fix_date(date_str)\n    string_date = date_str.replace(split, \'\')\n    return int(string_date)\n\n\ndef fix_date(date_str):\n    """"""\n    \xe4\xbf\xae\xe5\xa4\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95:\n                eg. 2016-1-1 fix 2016-01-01\n                eg. 2016:01-01 fix 2016-01-01\n                eg. 2016,01 01 fix 2016-01-01\n                eg. 2016/01-01 fix 2016-01-01\n                eg. 2016/01/01 fix 2016-01-01\n                eg. 2016/1/1 fix 2016-01-01\n                eg. 2016:1:1 fix 2016-01-01\n                eg. 2016 1 1 fix 2016-01-01\n                eg. 2016 01 01 fix 2016-01-01\n                .............................\n    \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4api\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xa7\xa3\xe6\x9e\x90\xef\xbc\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe9\xab\x98\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8ffix_date\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8fmt_date\n    :param date_str: \xe6\xa3\x80\xe6\xb5\x8b\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe5\xa4\x8d\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85int\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe4\xbf\xae\xe5\xa4\x8d\xe4\xba\x86\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if date_str is not None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x85\x88\xe7\xbb\x9f\xe4\xb8\x80\xe6\x8a\x8a\xe9\x99\xa4\xe4\xba\x86\xe6\x95\xb0\xe5\xad\x97\xe4\xb9\x8b\xe5\xa4\x96\xe7\x9a\x84\xe9\x83\xbd\xe5\xb9\xb2\xe6\x8e\x89\xef\xbc\x8c\xe5\x8f\x98\xe6\x88\x90\xe5\xb9\xb2\xe5\x87\x80\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97\xe4\xb8\xb2\n        if isinstance(date_str, six.string_types):\n            # eg, 2016:01-01, 201601-01, 2016,01 01, 2016/01-01 -> 20160101\n            date_str = \'\'.join(list(filter(lambda c: c.isdigit(), date_str)))\n        # \xe5\x86\x8d\xe7\xbb\x9f\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\n        date_str = fmt_date(date_str)\n        y, m, d = date_str.split(\'-\')\n        if len(m) == 1:\n            # \xe6\x9c\x88\xe4\xb8\x8a\xe8\xa1\xa50\n            m = \'0{}\'.format(m)\n        if len(d) == 1:\n            # \xe6\x97\xa5\xe4\xb8\x8a\xe8\xa1\xa50\n            d = \'0{}\'.format(d)\n        date_str = ""%s-%s-%s"" % (y, m, d)\n    return date_str\n\n\ndef fmt_date(convert_date):\n    """"""\n    \xe5\xb0\x86\xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\xbc\xe5\xbc\x8f\xe5\xa6\x8220160101\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba2016-01-01\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f, \xe6\xb3\xa8\xe6\x84\x8f\xe6\xb2\xa1\xe6\x9c\x89\xe5\xaf\xb9\xe5\xa6\x82 201611\n    \xe8\xbf\x99\xe6\xa0\xb7\xe7\x9a\x84\xe5\x81\x9afix\xe9\x80\x82\xe9\x85\x8d\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe9\x9c\x80\xe8\xa6\x81\xe6\x98\x8e\xe7\xa1\xae\xe7\x9f\xa5\xe9\x81\x93\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe7\x89\xb9\xe5\xae\x9a\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4api\xef\xbc\x8c\n    \xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xa7\xa3\xe6\x9e\x90\xef\xbc\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe9\xab\x98\n    :param convert_date: \xe6\x97\xb6\xe9\x97\xb4\xe6\xa0\xbc\xe5\xbc\x8f\xe5\xa6\x8220160101\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x8cint\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x88\x96\xe8\x80\x85str\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: %Y-%m-%d\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8fstr\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if isinstance(convert_date, float):\n        # float\xe5\x85\x88\xe8\xbd\xac\xe6\x8d\xa2int\n        convert_date = int(convert_date)\n    convert_date = str(convert_date)\n\n    if len(convert_date) > 8 and convert_date.startswith(\'20\'):\n        # eg \'20160310000000000\'\n        convert_date = convert_date[:8]\n\n    if \'-\' not in convert_date:\n        if len(convert_date) == 8:\n            # 20160101 to 2016-01-01\n            convert_date = ""%s-%s-%s"" % (convert_date[0:4],\n                                         convert_date[4:6], convert_date[6:8])\n        elif len(convert_date) == 6:\n            # 201611 to 2016-01-01\n            convert_date = ""%s-0%s-0%s"" % (convert_date[0:4],\n                                           convert_date[4:5], convert_date[5:6])\n        else:\n            raise ValueError(\'fmt_date: convert_date fmt error {}\'.format(convert_date))\n    return convert_date\n\n\ndef diff(start_date, end_date, check_order=True):\n    """"""\n    \xe5\xaf\xb9\xe4\xb8\xa4\xe4\xb8\xaa\xe8\xbe\x93\xe5\x85\xa5\xe6\x97\xa5\xe6\x9c\x9f\xe8\xae\xa1\xe7\xae\x97\xe9\x97\xb4\xe9\x9a\x94\xe7\x9a\x84\xe5\xa4\xa9\xe6\x95\xb0\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9ccheck_order=False, str\xe6\x97\xa5\xe6\x9c\x9f\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\x88\xe7\x8e\x87\xe6\x9c\x80\xe9\xab\x98\n    :param start_date: str\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85int\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9ccheck_order=True int\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\x88\xe7\x8e\x87\xe6\x9c\x80\xe9\xab\x98\n    :param end_date: str\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x88\x96\xe8\x80\x85int\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9ccheck_order=True int\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\x88\xe7\x8e\x87\xe6\x9c\x80\xe9\xab\x98\n    :param check_order: \xe6\x98\xaf\xe5\x90\xa6\xe7\xba\xa0\xe6\xad\xa3\xe5\x8f\x82\xe6\x95\xb0\xe9\xa1\xba\xe5\xba\x8f\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xbe\xe7\xbd\xae\xe6\xad\xa3\xe5\xb8\xb8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4check\n    :return:\n    """"""\n\n    # \xe9\xa6\x96\xe5\x85\x88\xe8\xbf\x9b\xe6\x9d\xa5\xe7\x9a\x84date\xe9\x83\xbd\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9a\x84\xe6\x98\xaffix\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe4\xb8\x8d\xe7\xae\xa1\xe6\x98\xafint\xe8\xbf\x98\xe6\x98\xafstr\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb720160101\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba2016-01-01\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\n    start_date = fix_date(start_date)\n    end_date = fix_date(end_date)\n\n    if check_order and isinstance(start_date, six.string_types):\n        # start_date\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaint\n        start_date = date_str_to_int(start_date)\n\n    if check_order and isinstance(end_date, six.string_types):\n        # end_date\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaint\n        end_date = date_str_to_int(end_date)\n\n    # \xe6\x98\xaf\xe5\x90\xa6\xe7\xba\xa0\xe6\xad\xa3\xe5\x8f\x82\xe6\x95\xb0\xe9\xa1\xba\xe5\xba\x8f\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xbe\xe7\xbd\xae\xe6\xad\xa3\xe5\xb8\xb8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4check\n    if check_order and start_date > end_date:\n        # start_date > end_date\xe8\xaf\xb4\xe6\x98\x8e\xe8\xa6\x81\xe6\x8d\xa2\xe4\xb8\x80\xe4\xb8\x8b\n        tmp = end_date\n        end_date = start_date\n        start_date = tmp\n\n    # fmt_date\xef\xbc\x8c\xe4\xbd\x86\xe5\x9c\xa8\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe7\xba\xa0\xe6\xad\xa3check_order\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe8\xbf\x99\xe4\xba\x9b\xe5\xb0\xb1\xe9\x83\xbd\xe4\xb8\x8d\xe4\xbc\x9a\xe6\x89\xa7\xe8\xa1\x8c\n    if isinstance(start_date, int):\n        # noinspection PyTypeChecker\n        start_date = fmt_date(start_date)\n    if isinstance(end_date, int):\n        # noinspection PyTypeChecker\n        end_date = fmt_date(end_date)\n\n    # \xe5\x9c\xa8\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe7\xba\xa0\xe6\xad\xa3check_order\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5, \xe7\x9b\xb4\xe6\x8e\xa5\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x98\xaf\xe8\xbf\x99\xe9\x87\x8c\n    sd = str_to_datetime(start_date)\n    ed = str_to_datetime(end_date)\n\n    return (ed - sd).days\n\n\ndef current_date_int():\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f int\xe5\x80\xbc\n    \xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe9\x97\xb4api\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xa7\xa3\xe6\x9e\x90\xef\xbc\x8c\xe6\x89\xa7\xe8\xa1\x8c\xe6\x95\x88\xe7\x8e\x87\xe9\xab\x98\n    :return: \xe6\x97\xa5\xe6\x9c\x9fint\xe5\x80\xbc\n    """"""\n    date_int = 0\n    # \xe9\xa6\x96\xe5\x85\x88\xe8\x8e\xb7\xe5\x8f\x96str\n    today = current_str_date()\n    # \xe6\x89\x8b\xe5\x8a\xa8\xe6\xaf\x94\xe7\xb3\xbb\xe7\xbb\x9fa\xe6\x97\xb6\xe9\x97\xb4pi\xe5\xbf\xab\n    today_array = today.split(""-"")\n    if len(today_array) == 3:\n        date_int = int(today_array[0]) * 10000 + int(today_array[1]) * 100 + int(today_array[2])\n    return date_int\n\n\ndef current_str_date():\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe6\x97\xb6\xe9\x97\xb4\xe5\x8d\x95\xe4\xbd\x8d\xe5\x8f\xaa\xe5\x8f\x96\xe5\x88\xb0\xe5\xa4\xa9\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa6\x822016-01\xef\xbc\x8d01\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe5\xa6\x822016-01\xef\xbc\x8d01 str\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return str(datetime.date.today())\n\n\ndef week_of_date(date_str, fmt=K_DEFAULT_DT_FMT, fix=True):\n    """"""\n    \xe8\xbe\x93\xe5\x85\xa5\'2016-01-01\' \xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe6\x98\x9f\xe6\x9c\x9f\xe5\x87\xa0\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eint 0-6\xe5\x88\x86\xe5\x88\xab\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x91\xa8\xe4\xb8\x80\xe5\x88\xb0\xe5\x91\xa8\xe6\x97\xa5\n    :param date_str: \xe5\xbc\x8f\xe6\x97\xb6\xe9\x97\xb4\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param fmt: \xe5\xa6\x82date_str\xe4\xb8\x8d\xe6\x98\xaf%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8fstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param fix: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\xae\xe5\xa4\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xef\xbc\x8ceg. 2016-1-1 fix 2016-01-01\n    :return: \xe8\xbf\x94\xe5\x9b\x9eint 0-6\xe5\x88\x86\xe5\x88\xab\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x91\xa8\xe4\xb8\x80\xe5\x88\xb0\xe5\x91\xa8\xe6\x97\xa5\n    """"""\n\n    if fix and fmt == K_DEFAULT_DT_FMT:\n        # \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9%Y-%m-%d\xe5\xbd\xa2\xe5\xbc\x8f\xe6\xa0\xbc\xe5\xbc\x8f\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe6\x97\xa5\xe6\x9c\x9f\xe6\xa0\xbc\xe5\xbc\x8f\n        date_str = fix_date(date_str)\n    return dt.strptime(date_str, fmt).weekday()\n\n\ndef begin_date(pre_days, date_str=None, split=\'-\', fix=True):\n    """"""\n    \xe8\xbf\x94\xe5\x9b\x9edate_str\xe6\x97\xa5\xe6\x9c\x9f\xe5\x89\x8dpre_days\xe5\xa4\xa9\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9fstr\xe5\xaf\xb9\xe8\xb1\xa1\n        eg:\n            pre_days = 2\n            date_str = \'2017-02-14\'\n            result = \'2017-02-12\'\n\n            pre_days = 365\n            date_str = \'2016-01-01\'\n            result = \'2015-01-01\'\n\n        \xe5\xa6\x82\xe6\x9e\x9cpre_days\xe6\x98\xaf\xe8\xb4\x9f\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x99\xe6\x97\xb6\xe9\x97\xb4\xe5\x90\x91\xe5\x89\x8d\xe6\x8e\xa8\xef\xbc\x9a\n        eg:\n            pre_days = -365\n            date_str = \'2016-01-01\'\n            result = \'2016-12-31\'\n    :param pre_days: pre_days\xe5\xa4\xa9, int\n    :param date_str: date_str, \xe9\xbb\x98\xe8\xae\xa4current_str_date()\n    :param split:\n    :param fix: \xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\xae\xe5\xa4\x8d\xe6\x97\xa5\xe6\x9c\x9f\xe4\xb8\x8d\xe8\xa7\x84\xe8\x8c\x83\xe7\x9a\x84\xe5\x86\x99\xe6\xb3\x95\xef\xbc\x8ceg. 2016-1-1 fix 2016-01-01\n    :return: str\xe6\x97\xa5\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    if date_str is None:\n        date_str = current_str_date()\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x96current_str_date\xe5\xb0\xb1\xe6\xb2\xa1\xe6\x9c\x89\xe5\xbf\x85\xe8\xa6\x81fix\xe4\xba\x86\n        fix = False\n    dt_time = str_to_datetime_fast(date_str, split=split, fix=fix)\n    return str(dt_time + timedelta(days=-pre_days))[:10]\n\n\ndef time_seconds():\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4seconds\xe7\xba\xa7\xe8\xae\xa1\xe6\x97\xb6\xe5\x80\xbc\n    :return:  float\xe5\x80\xbc eg. 1498381468.38095\n    """"""\n    return time.time()\n\n\ndef time_zone():\n    """"""\xe8\xbf\x94\xe5\x9b\x9e\xe6\x97\xb6\xe5\x8c\xbaint\xe5\x80\xbc""""""\n    return time.timezone\n'"
abupy/UtilBu/ABuDelegateUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xa7\x94\xe6\x89\x98\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport functools\nfrom functools import update_wrapper\nfrom operator import attrgetter\n\nfrom ..CoreBu.ABuFixes import signature\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef first_delegate_has_method(delegate, check_params=True):\n    """"""\n    \xe8\xa3\x85\xe9\xa5\xb0\xe5\x9c\xa8\xe7\xb1\xbb\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\x8a\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cdelegate\xe6\x9c\x89\xe5\xae\x9a\xe4\xb9\x89\xe5\xaf\xb9\xe5\xba\x94\xe5\x90\x8d\xe7\xa7\xb0\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe4\xbc\x98\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8delegate\xe4\xb8\xad\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n\n        eg:\n\n        class A:\n        def a_func(self):\n            print(\'a.a_func\')\n\n        class B:\n            def __init__(self):\n                self.a = A()\n\n            @ABuDelegateUtil.first_delegate_has_method(\'a\')\n            def a_func(self):\n                print(\'b.a_func\')\n\n        in: B().a_func()\n        out: a.a_func\n\n    :param delegate: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe4\xbb\x8e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe7\x9a\x84\xe7\xb1\xbb\xe6\x88\x90\xe5\x91\x98\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe5\xaf\xb9\xe5\xba\x94\xe5\x90\x8d\xe5\xad\x97\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n    :param check_params: \xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\xb9\xe6\xb3\x95\xe7\xad\xbe\xe5\x90\x8d\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\xa3\x80\xe6\xb5\x8b\n    """"""\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if len(args) > 0:\n                wrap_self = args[0]\n                # \xe9\xa6\x96\xe5\x85\x88\xe4\xbb\x8e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\xe8\x8e\xb7\xe5\x8f\x96delegate\n                delegate_obj = getattr(wrap_self, delegate, None)\n                # \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\xe5\xad\x98\xe5\x9c\xa8\xe4\xb8\x94\xe5\xad\x98\xe5\x9c\xa8\xe5\x92\x8cfunc.__name__\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n                if delegate_obj is not None and hasattr(delegate_obj, func.__name__):\n                    # \xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe7\xad\xbe\xe5\x90\x8d\n                    delegate_params = list(signature(getattr(delegate_obj, func.__name__)).parameters.keys())\n                    # \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe7\xad\xbe\xe5\x90\x8d\n                    func_params = list(signature(func).parameters.keys())[1:]\n                    # print(func_params)\n                    # print(delegate_params)\n                    # TODO \xe5\xa2\x9e\xe5\x8a\xa0\xe6\xa3\x80\xe6\xb5\x8b\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe5\xa6\x82\xe5\x8f\xaa\xe6\xa3\x80\xe6\xb5\x8b\xe5\x8f\x82\xe6\x95\xb0order\xe5\x8f\x8a\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe5\x85\xa8\xe5\x8c\xb9\xe9\x85\x8d\xe5\x90\x8d\xe5\xad\x97\n                    if not check_params or delegate_params == func_params:\n                        # \xe4\xb8\x80\xe8\x87\xb4\xe5\xb0\xb1\xe4\xbc\x98\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\x90\x8c\xe5\x90\x8d\xe5\x87\xbd\xe6\x95\xb0\n                        return getattr(delegate_obj, func.__name__)(*args[1:], **kwargs)\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorate\n\n\ndef replace_word_delegate_has_method(delegate, key_word, replace_word, check_params=True):\n    """"""\n    \xe4\xb8\x8d\xe5\x9c\xa8delegate\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x90\x8d\xe5\xad\x97\xef\xbc\x8c\xe5\x9c\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x90\x8d\xe5\xad\x97\xe4\xb8\xad\xe7\x9a\x84key_word\xe6\x9b\xbf\xe6\x8d\xa2\xe4\xb8\xbareplace_word\xe5\x90\x8e\xe5\x86\x8d\xe5\x9c\xa8delegate\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xef\xbc\x8c\xe6\x89\xbe\xe5\x88\xb0\xe4\xbc\x98\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\n    \xe5\x90\xa6\xe5\x88\x99\xe7\xbb\xa7\xe7\xbb\xad\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n        eg:\n            class A:\n                def a_func(self):\n                    print(\'a.a_func\')\n\n            class B:\n                def __init__(self):\n                    self.a = A()\n\n                @ABuDelegateUtil.replace_word_delegate_has_method(\'a\', key_word=\'b\', replace_word=\'a\')\n                def b_func(self):\n                    print(\'b.b_func\')\n\n            in: B().b_func()\n            out: a.a_func\n\n    :param delegate: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8c\xe4\xbb\x8e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe7\x9a\x84\xe7\xb1\xbb\xe6\x88\x90\xe5\x91\x98\xe5\x8f\x98\xe9\x87\x8f\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe5\xaf\xb9\xe5\xba\x94\xe5\x90\x8d\xe5\xad\x97\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n    :param key_word: \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xad\xe5\xb0\x86\xe8\xa2\xabreplace_word\xe6\x9b\xbf\xe6\x8d\xa2\xe7\x9a\x84key_word\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param replace_word: \xe6\x9b\xbf\xe6\x8d\xa2key_word\xe5\xbd\xa2\xe6\x88\x90\xe8\xa6\x81\xe5\xaf\xbb\xe6\x89\xbe\xe7\x9a\x84\xe5\x9c\xa8\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1\n    :param check_params: \xe6\x98\xaf\xe5\x90\xa6\xe6\xa3\x80\xe6\xb5\x8b\xe6\x96\xb9\xe6\xb3\x95\xe7\xad\xbe\xe5\x90\x8d\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\xa3\x80\xe6\xb5\x8b\n    """"""\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if len(args) > 0:\n                wrap_self = args[0]\n                # \xe9\xa6\x96\xe5\x85\x88\xe4\xbb\x8e\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\xe8\x8e\xb7\xe5\x8f\x96delegate\n                delegate_obj = getattr(wrap_self, delegate, None)\n                if delegate_obj is not None:\n                    #  \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xae\x9e\xe4\xbe\x8b\xe5\xad\x98\xe5\x9c\xa8\n                    org_func_name = func.__name__\n                    if len(replace_word) > 0 and key_word in org_func_name:\n                        # \xe4\xbd\xbf\xe7\x94\xa8replace_word\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0org_func_name\xe4\xb8\xad\xe7\x9a\x84key_word\n                        delegate_func_name = org_func_name.replace(key_word, replace_word)\n                    else:\n                        delegate_func_name = org_func_name\n\n                    if hasattr(delegate_obj, delegate_func_name):\n                        # \xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\xe7\xa1\xae\xe5\xae\x9e\xe5\xad\x98\xe5\x9c\xa8delegate_func_name\n                        delegate_params = list(signature(getattr(delegate_obj, delegate_func_name)).parameters.keys())\n                        func_params = list(signature(func).parameters.keys())[1:]\n                        # TODO \xe5\xa2\x9e\xe5\x8a\xa0\xe6\xa3\x80\xe6\xb5\x8b\xe8\xa7\x84\xe8\x8c\x83\xef\xbc\x8c\xe5\xa6\x82\xe5\x8f\xaa\xe6\xa3\x80\xe6\xb5\x8b\xe5\x8f\x82\xe6\x95\xb0order\xe5\x8f\x8a\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe5\x85\xa8\xe5\x8c\xb9\xe9\x85\x8d\xe5\x90\x8d\xe5\xad\x97\n                        if not check_params or delegate_params == func_params:\n                            # \xe5\x8f\x82\xe6\x95\xb0\xe5\x91\xbd\xe5\x90\x8d\xe4\xb8\x80\xe8\x87\xb4\xe5\xb0\xb1\xe4\xbc\x98\xe5\x85\x88\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa2\xab\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\n                            return getattr(delegate_obj, delegate_func_name)(*args[1:], **kwargs)\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorate\n\n\nclass _IffHasAttrDescriptor(object):\n    """"""\n        \xe6\x91\x98\xe8\x87\xaasklearn\xe4\xb8\xadmetaestimators.py _IffHasAttrDescriptor\n    """"""\n\n    def __init__(self, fn, delegate_names, attribute_name):\n        self.fn = fn\n        self.delegate_names = delegate_names\n        self.attribute_name = attribute_name\n\n        # update the docstring of the descriptor\n        update_wrapper(self, fn)\n\n    def __get__(self, obj, p_type=None):\n        # raise an AttributeError if the attribute is not present on the object\n        if obj is not None:\n            # delegate only on instances, not the classes.\n            # this is to allow access to the docstrings.\n            for delegate_name in self.delegate_names:\n                try:\n                    delegate = attrgetter(delegate_name)(obj)\n                except AttributeError:\n                    continue\n                else:\n                    getattr(delegate, self.attribute_name)\n                    break\n            else:\n                attrgetter(self.delegate_names[-1])(obj)\n\n        # lambda, but not partial, allows help() to work with update_wrapper\n        out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)\n        # update the docstring of the returned function\n        update_wrapper(out, self.fn)\n        return out\n\n\ndef if_delegate_has_method(delegate):\n    """"""\n        \xe6\x91\x98\xe8\x87\xaasklearn\xe4\xb8\xadmetaestimators.py if_delegate_has_method\n        \xe5\xa6\x82\xe6\x9e\x9cdelegate\xe6\x9c\x89\xe5\xae\x9a\xe4\xb9\x89\xe5\xaf\xb9\xe5\xba\x94\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe6\x89\x8d\xe5\xae\x9e\xe9\x99\x85\xe5\xae\x9a\xe4\xb9\x89\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe6\x92\xa4\xe9\x94\x80\n    """"""\n    if isinstance(delegate, list):\n        delegate = tuple(delegate)\n    if not isinstance(delegate, tuple):\n        delegate = (delegate,)\n\n    return lambda fn: _IffHasAttrDescriptor(fn, delegate,\n                                            attribute_name=fn.__name__)\n'"
abupy/UtilBu/ABuFileUtil.py,0,"b'# coding=utf-8\n""""""\n    \xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\x84\xe7\x90\x86\xe8\xaf\xbb\xe5\x8f\x96\xe5\x86\x99\xe5\x85\xa5\n""""""\nfrom __future__ import print_function\nfrom __future__ import division\nfrom __future__ import absolute_import\n\nimport logging\nimport os\nimport shutil\nfrom contextlib import contextmanager\n\nimport functools\nimport pandas as pd\n\nfrom .ABuDTUtil import warnings_filter\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import pickle, Pickler, Unpickler, as_bytes\n\n""""""HDF5_COMP_LEVEL\xef\xbc\x9a\xe5\x8e\x8b\xe7\xbc\xa9\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x9a0-9\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbf\xae\xe6\x94\xb9\xe4\xba\x86\xe5\x8e\x8b\xe7\xbc\xa9\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe7\x89\xa9\xe7\x90\x86\xe6\x96\x87\xe4\xbb\xb6""""""\nHDF5_COMP_LEVEL = 4\n"""""" HDF5_COMP_LIB: \xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x8e\x8b\xe7\xbc\xa9\xe5\xba\x93:\'blosc\', \'bzip2\', \'lzo\', \'zlib\', \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbf\xae\xe6\x94\xb9\xe4\xba\x86\xe5\x8e\x8b\xe7\xbc\xa9\xe5\xba\x93\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe7\x89\xa9\xe7\x90\x86\xe6\x96\x87\xe4\xbb\xb6""""""\nHDF5_COMP_LIB = \'blosc\'\n\n""""""HDF5\xe5\x86\x85\xe9\x83\xa8\xe5\xad\x98\xe8\xb4\xae\xe4\xbe\x9d\xe7\x84\xb6\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8pickle\xef\xbc\x8c\xe5\x8d\xb3python\xe7\x89\x88\xe6\x9c\xac\xe5\x88\x87\xe6\x8d\xa2\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe6\x96\x87\xe4\xbb\xb6\xe4\xbc\x9a\xe6\x9c\x89\xe5\x8d\x8f\xe8\xae\xae\xe5\x86\xb2\xe7\xaa\x81\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe6\x89\x80\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe5\x8d\x8f\xe8\xae\xae\xe8\xbf\x9b\xe8\xa1\x8cdump""""""\nK_SET_PICKLE_HIGHEST_PROTOCOL = False\n""""""HDF5\xe5\x86\x85\xe9\x83\xa8\xe5\xad\x98\xe8\xb4\xae\xe4\xbe\x9d\xe7\x84\xb6\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8pickle\xef\xbc\x8c\xe5\x8d\xb3python\xe7\x89\x88\xe6\x9c\xac\xe5\x88\x87\xe6\x8d\xa2\xef\xbc\x8c\xe6\x9c\xac\xe5\x9c\xb0\xe6\x96\x87\xe4\xbb\xb6\xe4\xbc\x9a\xe6\x9c\x89\xe5\x8d\x8f\xe8\xae\xae\xe5\x86\xb2\xe7\xaa\x81\xef\xbc\x9apython2, python3\xe5\x8d\x8f\xe8\xae\xae\xe5\x85\xbc\xe5\xae\xb9\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8protocol=0""""""\nK_SET_PICKLE_ZERO_PROTOCOL = False\n\n\ndef ensure_dir(a_path):\n    """"""\n    \xe7\xa1\xae\xe4\xbf\x9da_path\xe6\x89\x80\xe5\x9c\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9ca_path\xe6\x98\xaf\xe6\x96\x87\xe4\xbb\xb6\xe5\xb0\x86\xe7\xa1\xae\xe4\xbf\x9d\xe5\xae\x83\xe4\xb8\x8a\xe4\xb8\x80\xe7\xba\xa7\n    \xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe7\x9a\x84\xe5\xad\x98\xe5\x9c\xa8\n    :param a_path: str\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n    if os.path.isdir(a_path):\n        a_dir = a_path\n    else:\n        a_dir = os.path.dirname(a_path)\n    if not os.path.exists(a_dir):\n        os.makedirs(a_dir)\n\n\ndef ensure_file(a_path):\n    """"""\n    \xe7\xa1\xae\xe4\xbf\x9da_path\xe6\x89\x80\xe5\x9c\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8ensure_dir\xe7\xa1\xae\xe4\xbf\x9d\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\n    \xe7\xa1\xae\xe5\xae\x9aa_path\xe6\x98\xaffile\xe4\xbc\x9a\xe7\xa1\xae\xe4\xbf\x9d\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe5\x9c\xa8\n    :param a_path: str\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    :return:\n    """"""\n    ensure_dir(a_path)\n    open(a_path, \'a+\').close()\n\n\ndef file_exist(a_path):\n    """"""\n    a_path\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n    :param a_path: str\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n    return os.path.exists(a_path)\n\n\ndef copy_file(source, target_dir):\n    """"""\n    \xe6\x8b\xb7\xe8\xb4\x9d\xe6\x96\x87\xe4\xbb\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe6\x8b\xb7\xe8\xb4\x9d\xe6\x93\x8d\xe4\xbd\x9c\n    :param source: \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    :param target_dir: \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n\n    if os.path.exists(source):\n        logging.error(\'copy_file source={} not exists!\'.format(source))\n        return\n\n    ensure_dir(target_dir)\n\n    if os.path.isdir(source):\n        shutil.copytree(source, target_dir)\n    else:\n        shutil.copy(source, target_dir)\n\n\ndef del_file(a_path):\n    """"""\n    \xe5\x88\xa0\xe9\x99\xa4\xe6\x96\x87\xe4\xbb\xb6\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\x88\xa0\xe9\x99\xa4\xe6\x93\x8d\xe4\xbd\x9c\n    :param a_path: \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe6\x88\x96\xe8\x80\x85\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n    if not file_exist(a_path):\n        return\n\n    if os.path.isdir(a_path):\n        shutil.rmtree(a_path)\n    else:\n        os.remove(a_path)\n\n\ndef load_pickle(file_name):\n    """"""\n    \xe8\xaf\xbb\xe5\x8f\x96python\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe6\x96\x87\xe4\xbb\xb6\n    :param file_name: \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    :return:\n    """"""\n    if not file_exist(file_name):\n        logging.error(\'load_pickle file_name={} not exists!\'.format(file_name))\n        return None\n\n    # TODO \xe6\xa0\xb9\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe5\x86\xb3\xe5\xae\x9a\xe8\xbf\x99\xe9\x87\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81tip wait\n    print(\'please wait! load_pickle....:\', file_name)\n\n    try:\n        with open(file_name, ""rb"") as unpickler_file:\n            unpickler = Unpickler(unpickler_file)\n            ret = unpickler.load()\n    except EOFError:\n        print(\'unpickler file with EOFError, please check {} is 0kb!!!\'.format(file_name))\n        ret = {}\n\n    return ret\n\n\ndef dump_pickle(input_obj, file_name, how=\'normal\'):\n    """"""\n    \xe5\xad\x98\xe8\xb4\xaepython\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe6\x96\x87\xe4\xbb\xb6\n    :param input_obj: \xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n    :param file_name: \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8cstr\xe5\xaf\xb9\xe8\xb1\xa1, \xe7\x9b\xb8\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe8\x80\x85\xe7\xbb\x9d\xe5\xaf\xb9\xe8\xb7\xaf\xe5\xbe\x84\n    :param how: \xe5\xba\x8f\xe5\x88\x97\xe5\x8c\x96\xe5\x8d\x8f\xe8\xae\xae\xe9\x80\x89\xe6\x8b\xa9\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4normal\xe4\xb8\x8d\xe7\x89\xb9\xe6\xae\x8a\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n                zero\xe4\xbd\xbf\xe7\x94\xa8python2, python3\xe5\x8d\x8f\xe8\xae\xae\xe5\x85\xbc\xe5\xae\xb9\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8protocol=0\xef\xbc\x8c\n                high\xe4\xbd\xbf\xe7\x94\xa8\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe5\x8d\x8f\xe8\xae\xae\n    """"""\n    ensure_dir(file_name)\n\n    print(\'please wait! dump_pickle....:\', file_name)\n\n    try:\n        with open(file_name, ""wb"") as pick_file:\n            if K_SET_PICKLE_HIGHEST_PROTOCOL or how == \'high\':\n                """"""\xe4\xbd\xbf\xe7\x94\xa8\xe6\x89\x80\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe5\x8d\x8f\xe8\xae\xae\xe8\xbf\x9b\xe8\xa1\x8cdump""""""\n                pickle.dump(input_obj, pick_file, pickle.HIGHEST_PROTOCOL)\n            elif K_SET_PICKLE_ZERO_PROTOCOL or how == \'zero\':\n                """"""python2, python3\xe5\x8d\x8f\xe8\xae\xae\xe5\x85\xbc\xe5\xae\xb9\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8protocol=0""""""\n                pickle.dump(input_obj, pick_file, 0)\n            else:\n                pickler = Pickler(pick_file)\n                pickler.dump(input_obj)\n    except Exception as e:\n        logging.exception(e)\n\n\n""""""hdf5\xe6\x89\xb9\xe9\x87\x8f\xe5\xa4\x84\xe7\x90\x86\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98HDFStore\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\xba\xe9\x81\xbf\xe5\x85\x8d\xe5\x8f\x8d\xe5\xa4\x8dopen\xef\xbc\x8cclose""""""\n__g_batch_h5s = None\n\n\ndef __start_batch_h5s(file_name, mode):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8pd.HDFStore\xe6\x89\x93\xe5\xbc\x80file_name\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe5\x85\xa8\xe5\xb1\x80__g_batch_h5s\xe4\xb8\xad\n    :param file_name: hdf5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\n    :param mode: \xe6\x89\x93\xe5\xbc\x80hdf5\xe6\x96\x87\xe4\xbb\xb6\xe6\xa8\xa1\xe5\xbc\x8f\xe3\x80\x82eg\xef\xbc\x9aw, r, a\n    """"""\n    global __g_batch_h5s\n    __g_batch_h5s = pd.HDFStore(file_name, mode, complevel=HDF5_COMP_LEVEL, complib=HDF5_COMP_LIB)\n\n\ndef __end_batch_h5s():\n    """"""\n    \xe5\xa6\x82\xe6\x9e\x9c__g_batch_h5s\xe4\xb8\xadhdf5\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbb\x8d\xe7\x84\xb6\xe6\x98\xaf\xe6\x89\x93\xe5\xbc\x80\xe7\x9a\x84\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8cflush\xef\xbc\x8c\xe5\x90\x8eclose\n    """"""\n    global __g_batch_h5s\n    if __g_batch_h5s is not None and __g_batch_h5s.is_open:\n        __g_batch_h5s.flush()\n        __g_batch_h5s.close()\n        __g_batch_h5s = None\n\n\ndef batch_h5s(h5_fn, mode=\'a\'):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe6\x96\xb9\xe5\xbc\x8f\xe5\xaf\xb9hdf5\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x89\xb9\xe9\x87\x8f\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9a\n        eg\xef\xbc\x9a \xe8\xaf\xa6\xe8\xa7\x81ABuSymbolPd.py\n            @batch_h5s(h5s_fn)\n            def _batch_save():\n                for df_dict in df_dicts:\n                    # \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaadf_dict\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n                    for ind, (key_tuple, df) in enumerate(df_dict.values()):\n                        # (key_tuple, df)\xe6\x98\xaf\xe4\xbf\x9d\xe5\xad\x98kl\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae, \xe8\xbf\xad\xe4\xbb\xa3\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8save_kline_df\n                        save_kline_df(df, *key_tuple)\n                        if df is not None:\n                            print(""save kl {}_{}_{} {}/{}"".format(key_tuple[0].value, key_tuple[1], key_tuple[2], ind,\n                                                                  df.shape[0]))\n                    # \xe5\xae\x8c\xe6\x88\x90\xe4\xb8\x80\xe5\xb1\x82\xe5\xbe\xaa\xe7\x8e\xaf\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8e\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb8\x85\xe5\xb1\x8f\n                    do_clear_output()\n    :param h5_fn: hdf5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d, \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\xbaNone\xe3\x80\x82\xe5\x8d\xb3\xe5\xbf\xbd\xe7\x95\xa5\xe6\x95\xb4\xe4\xb8\xaa\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe6\xb5\x81\xe7\xa8\x8b\n    :param mode: \xe6\x89\x93\xe5\xbc\x80hdf5\xe6\x96\x87\xe4\xbb\xb6\xe6\xa8\xa1\xe5\xbc\x8f\xe3\x80\x82eg\xef\xbc\x9aw, r, a\n    :return:\n    """"""\n\n    def _batch_h5s(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if h5_fn is not None:\n                __start_batch_h5s(h5_fn, mode)\n            ret = func(*args, **kwargs)\n            if h5_fn is not None:\n                __end_batch_h5s()\n            return ret\n\n        return wrapper\n\n    return _batch_h5s\n\n\n@contextmanager\ndef batch_ctx_h5s(h5_fn, mode=\'a\'):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe6\x96\xb9\xe5\xbc\x8f\xe5\xaf\xb9hdf5\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x89\xb9\xe9\x87\x8f\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe4\xb8\x8e\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe6\xa8\xa1\xe5\xbc\x8fbatch_h5s\n    \xe5\x8a\x9f\xe8\x83\xbd\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x8c\xe4\xb8\xba\xe5\xa4\x96\xe9\x83\xa8\xe4\xb8\x8d\xe6\x96\xb9\xe4\xbe\xbf\xe5\xb0\x81\xe8\xa3\x85\xe4\xb8\xba\xe5\x85\xb7\xe4\xbd\x93\xe6\x93\x8d\xe4\xbd\x9c\xe5\x87\xbd\xe6\x95\xb0\xe6\x97\xb6\xe4\xbd\xbf\xe7\x94\xa8\n        eg\xef\xbc\x9a\n            with batch_ctx_h5s(h5s_fn):\n                for df_dict in df_dicts:\n                    # \xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaadf_dict\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n                    for ind, (key_tuple, df) in enumerate(df_dict.values()):\n                        # (key_tuple, df)\xe6\x98\xaf\xe4\xbf\x9d\xe5\xad\x98kl\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae, \xe8\xbf\xad\xe4\xbb\xa3\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8save_kline_df\n                        save_kline_df(df, *key_tuple)\n                        if df is not None:\n                            print(""save kl {}_{}_{} {}/{}"".format(key_tuple[0].value, key_tuple[1], key_tuple[2], ind,\n                                                                  df.shape[0]))\n                    # \xe5\xae\x8c\xe6\x88\x90\xe4\xb8\x80\xe5\xb1\x82\xe5\xbe\xaa\xe7\x8e\xaf\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\xb9\xe9\x87\x8f\xe4\xbf\x9d\xe5\xad\x98\xe5\xae\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x90\x8e\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb8\x85\xe5\xb1\x8f\n                    do_clear_output()\n\n    :param h5_fn: hdf5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d, \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\xbaNone\xe3\x80\x82\xe5\x8d\xb3\xe5\xbf\xbd\xe7\x95\xa5\xe6\x95\xb4\xe4\xb8\xaa\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe6\xb5\x81\xe7\xa8\x8b\n    :param mode: \xe6\x89\x93\xe5\xbc\x80hdf5\xe6\x96\x87\xe4\xbb\xb6\xe6\xa8\xa1\xe5\xbc\x8f\xe3\x80\x82eg\xef\xbc\x9aw, r, a\n    :return:\n    """"""\n    if h5_fn is not None:\n        __start_batch_h5s(h5_fn, mode)\n\n    yield\n\n    if h5_fn is not None:\n        __end_batch_h5s()\n\n\n@warnings_filter\ndef dump_del_hdf5(file_name, dump_dict, del_array=None):\n    """"""\n    \xe5\xaf\xb9hdf5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa0\xe9\x99\xa4\xe5\x92\x8c\xe4\xbf\x9d\xe5\xad\x98\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8cdel_array\xe4\xb8\xad\xe7\x9a\x84key\xe5\x85\x88\xe5\x88\xa0\xe9\x99\xa4\xef\xbc\x8c\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98dump_dict\n    \xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n    :param file_name: hdf5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\n    :param dump_dict: \xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\x9d\xe5\xad\x98\xe5\x88\xb0hdf5\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x97\xe5\x85\xb8\n    :param del_array: \xe9\x9c\x80\xe8\xa6\x81\xe4\xbb\x8ehdf5\xe4\xb8\xad\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84key\xe5\xba\x8f\xe5\x88\x97\n    """"""\n    global __g_batch_h5s\n\n    def do_dump_del_hdf5(h5s):\n        """"""\n        \xe5\xaf\xb9hdf5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa0\xe9\x99\xa4\xe5\x92\x8c\xe4\xbf\x9d\xe5\xad\x98\xe6\x93\x8d\xe4\xbd\x9c\xe6\x89\xa7\xe8\xa1\x8c\xe5\x87\xbd\xe6\x95\xb0\n        :param h5s: hdf5\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x8f\xa5\xe6\x9f\x84\n        :return:\n        """"""\n        if del_array is not None:\n            # \xe5\x85\x88\xe6\x89\xa7\xe8\xa1\x8c\xe5\x88\xa0\xe9\x99\xa4\xe6\x93\x8d\xe4\xbd\x9c\n            for del_key in del_array:\n                if h5s.__contains__(del_key):\n                    del h5s[del_key]\n\n        for input_key in dump_dict:\n            input_obj = dump_dict[input_key]\n            h5s[input_key] = input_obj\n\n    if __g_batch_h5s is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\x93\xe7\x9d\x80\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8with pd.HDFStore\xe5\x85\x88\xe6\x89\x93\xe5\xbc\x80\n        with pd.HDFStore(file_name, \'a\', complevel=HDF5_COMP_LEVEL, complib=HDF5_COMP_LIB) as h5s_obj:\n            do_dump_del_hdf5(h5s_obj)\n    else:\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84__g_batch_h5s\xe6\x93\x8d\xe4\xbd\x9c\n        do_dump_del_hdf5(__g_batch_h5s)\n\n\n@warnings_filter\ndef dump_hdf5(file_name, input_obj, input_key):\n    """"""\n    \xe5\xaf\xb9hdf5\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98\xe6\x93\x8d\xe4\xbd\x9c\n    :param file_name: hdf5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\n    :param input_obj: \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe8\xb1\xa1\n    :param input_key: \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xaekey\n    """"""\n    global __g_batch_h5s\n\n    if __g_batch_h5s is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\x93\xe7\x9d\x80\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8with pd.HDFStore\xe5\x85\x88\xe6\x89\x93\xe5\xbc\x80\n        with pd.HDFStore(file_name, \'a\', complevel=HDF5_COMP_LEVEL, complib=HDF5_COMP_LIB) as h5s:\n            h5s[input_key] = input_obj\n    else:\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84__g_batch_h5s\xe6\x93\x8d\xe4\xbd\x9c\n        __g_batch_h5s[input_key] = input_obj\n\n\ndef del_hdf5(file_name, key):\n    """"""\n    \xe5\xaf\xb9hdf5\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa0\xe9\x99\xa4\xe6\x93\x8d\xe4\xbd\x9c\n    :param file_name: hdf5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\n    :param key: \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xaekey\n    """"""\n    if not file_exist(file_name):\n        return\n\n    if __g_batch_h5s is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\x93\xe7\x9d\x80\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8with pd.HDFStore\xe5\x85\x88\xe6\x89\x93\xe5\xbc\x80\n        with pd.HDFStore(file_name, \'a\', complevel=HDF5_COMP_LEVEL, complib=HDF5_COMP_LIB) as h5s:\n            if h5s.__contains__(key):\n                del h5s[key]\n    else:\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84__g_batch_h5s\xe6\x93\x8d\xe4\xbd\x9c\n        if __g_batch_h5s.__contains__(key):\n            del __g_batch_h5s[key]\n\n\ndef load_hdf5(file_name, key):\n    """"""\n    \xe8\xaf\xbb\xe5\x8f\x96hdf5\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\n    :param file_name: df5\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x90\x8d\n    :param key: \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xaekey\n    """"""\n    global __g_batch_h5s\n\n    if not file_exist(file_name):\n        return None\n\n    def _load_hdf5(h5s):\n        load_obj = None\n        if h5s.__contains__(key):\n            try:\n                load_obj = h5s[key]\n            except (AttributeError, TypeError):\n                # \'NoneType\' attribute \'T\' is just None\n                # TypeError: \'len() of unsized object\'\n                # \xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xachdf5 bug\xe5\xaf\xbc\xe8\x87\xb4\xe7\x9a\x84\xe5\xad\x98\xe8\xb4\xae\xe5\xbc\x82\xe5\xb8\xb8\xe6\x83\x85\xe5\x86\xb5\xe7\x9a\x84\xe8\xaf\xbb\xe5\x8f\x96\xef\xbc\x8c\xe5\xbf\xbd\xe7\x95\xa5\xef\xbc\x8c\xe8\xae\xa1\xe4\xb8\xba\xe6\xad\xa3\xe5\xb8\xb8\xe6\x8d\x9f\xe8\x80\x97\n                pass\n        return load_obj\n\n    if __g_batch_h5s is None:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84\xe6\xb2\xa1\xe6\x9c\x89\xe6\x89\x93\xe7\x9d\x80\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8with pd.HDFStore\xe5\x85\x88\xe6\x89\x93\xe5\xbc\x80\n        with pd.HDFStore(file_name, \'a\', complevel=HDF5_COMP_LEVEL, complib=HDF5_COMP_LIB) as h5s_obj:\n            return _load_hdf5(h5s_obj)\n    else:\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x89\xb9\xe5\xa4\x84\xe7\x90\x86\xe5\x8f\xa5\xe6\x9f\x84__g_batch_h5s\xe6\x93\x8d\xe4\xbd\x9c\n        return _load_hdf5(__g_batch_h5s)\n\n\ndef dump_df_csv(file_name, df):\n    """"""\n    \xe5\xb0\x86pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8csv\xe4\xb8\xad\n    :param file_name: \xe4\xbf\x9d\xe5\xad\x98csv\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :param df: \xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if df is not None:\n        # TODO \xe4\xb8\xba\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe4\xb8\x8d\xe5\xba\x94\xe8\xaf\xa5\xe5\x9c\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x86\x85\xe9\x83\xa8ensure_dir\xef\xbc\x8c\xe7\xa1\xae\xe4\xbf\x9d\xe4\xbd\xbf\xe7\x94\xa8dump_df_csv\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\xe5\xa4\x96\xe9\x83\xa8ensure_dir\n        ensure_dir(file_name)\n        df.to_csv(file_name, columns=df.columns, index=True, encoding=\'utf-8\')\n\n\ndef load_df_csv(file_name):\n    """"""\n    \xe4\xbb\x8ecsv\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    :param file_name: \xe4\xbf\x9d\xe5\xad\x98csv\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :return: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    if file_exist(file_name):\n        return pd.read_csv(file_name, index_col=0)\n    return None\n\n\ndef save_file(ct, file_name):\n    """"""\n    \xe5\xb0\x86\xe5\x86\x85\xe5\xae\xb9ct\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\n    :param ct: \xe5\x86\x85\xe5\xae\xb9str\xe5\xaf\xb9\xe8\xb1\xa1\n    :param file_name: \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :return:\n    """"""\n    ensure_dir(file_name)\n    with open(file_name, \'wb\') as f:\n        f.write(ct)\n'"
abupy/UtilBu/ABuKLUtil.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\n    abupy\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x86\xe6\x9e\x90\xe6\xa8\xa1\xe5\x9d\x97, \xe6\xa8\xa1\xe5\x9d\x97\xe7\x9c\x9f\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe7\x9c\x9f\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe9\x83\xbd\xe4\xb8\xbaabupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xe5\xa6\x82\xe4\xb8\x8b\n\n    eg:\n                close\thigh\tlow\tp_change\topen\tpre_close\tvolume\tdate\tdate_week\tkey\tatr21\tatr14\n    2016-07-20\t228.36\t229.800\t225.00\t1.38\t226.47\t225.26\t2568498\t20160720\t2\t499\t9.1923\t8.7234\n    2016-07-21\t220.50\t227.847\t219.10\t-3.44\t226.00\t228.36\t4428651\t20160721\t3\t500\t9.1711\t8.7251\n    2016-07-22\t222.27\t224.500\t218.88\t0.80\t221.99\t220.50\t2579692\t20160722\t4\t501\t9.1858\t8.7790\n    2016-07-25\t230.01\t231.390\t221.37\t3.48\t222.27\t222.27\t4490683\t20160725\t0\t502\t9.2669\t8.9298\n    2016-07-26\t225.93\t228.740\t225.63\t-1.77\t227.34\t230.01\t41833\t20160726\t1\t503\t9.1337\t8.7541\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom collections import Iterable\n\nimport logging\n\nimport numpy as np\nimport pandas as pd\n\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuPdHelper import pd_resample\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\nlog_func = logging.info if ABuEnv.g_is_ipython else print\n\n\ndef _df_dispatch(df, dispatch_func):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaedf\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x88\x86\xe5\x8f\x91callable\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param dispatch_func: \xe5\x88\x86\xe5\x8f\x91\xe7\x9a\x84\xe5\x8f\xaf\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n    if isinstance(df, pd.DataFrame):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaa\xe6\x98\xafpd.DataFrame\n        return dispatch_func(df)\n    elif isinstance(df, dict) and all([isinstance(_df, pd.DataFrame) for _df in df.values()]):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaa\xe6\x98\xaf\xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\n        return [dispatch_func(df[df_key], df_key) for df_key in df]\n    elif isinstance(df, Iterable) and all([isinstance(_df, pd.DataFrame) for _df in df]):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaa\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n        return [dispatch_func(_df) for _df in df]\n    else:\n        log_func(\'df type is error! {}\'.format(type(df)))\n\n\ndef _df_dispatch_concat(df, dispatch_func):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xaedf\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x88\x86\xe5\x8f\x91callable\xe7\x9a\x84\xe6\x89\xa7\xe8\xa1\x8c\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\xad\x97\xe5\x85\xb8\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xbd\xbf\xe7\x94\xa8\n    pd.concat\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb5\xb7\xe6\x9d\xa5\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param dispatch_func: \xe5\x88\x86\xe5\x8f\x91\xe7\x9a\x84\xe5\x8f\xaf\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    """"""\n\n    if isinstance(df, pd.DataFrame):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaa\xe6\x98\xafpd.DataFrame\n        return dispatch_func(df)\n    elif isinstance(df, dict) and all([isinstance(_df, pd.DataFrame) for _df in df.values()]):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaa\xe6\x98\xaf\xe5\xad\x97\xe5\x85\xb8\xe5\xbd\xa2\xe5\xbc\x8f\n        return pd.concat([dispatch_func(df[df_key], df_key) for df_key in df], axis=1)\n    elif isinstance(df, Iterable) and all([isinstance(_df, pd.DataFrame) for _df in df]):\n        # \xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\xaa\xe6\x98\xaf\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n        return pd.concat([dispatch_func(_df) for _df in df], axis=1)\n    else:\n        log_func(\'df type is error! {}\'.format(type(df)))\n\n\ndef resample_close_mean(df, bins=None):\n    """"""\n    \xe5\xaf\xb9\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\x98\xe6\x8d\xa2\xe5\x91\xa8\xe6\x9c\x9f\xe9\x87\x8d\xe6\x96\xb0\xe9\x87\x87\xe6\xa0\xb7\xef\xbc\x8c\xe5\xaf\xb9\xe9\x87\x8d\xe6\x96\xb0\xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8cpct_change\xe5\xa4\x84\xe7\x90\x86\n    \xef\xbc\x8c\xe5\xaf\xb9pct_change\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x96abs\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xef\xbc\x8c\xe5\xaf\xb9pct_change\xe7\xbb\x9d\xe5\xaf\xb9\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\x96\xe5\xb9\xb3\xe5\x9d\x87\xef\xbc\x8c\xe5\x8d\xb3\xe7\xae\x97\xe5\x87\xba\n    \xe9\x87\x8d\xe6\x96\xb0\xe9\x87\x87\xe6\xa0\xb7\xe7\x9a\x84\xe5\x91\xa8\xe6\x9c\x9f\xe5\x86\x85\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x8f\x98\xe5\x8c\x96\xe5\xb9\x85\xe5\xba\xa6\n\n    eg:\n    tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n    ABuKLUtil.resample_close_mean(tsla)\n\n    out:\n                resample\n        5D\t    0.0340\n        10D\t    0.0468\n        21D\t    0.0683\n        42D\t    0.0805\n        60D\t    0.1002\n        90D\t    0.0931\n        120D    0.0939\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param bins: \xe9\xbb\x98\xe8\xae\xa4eg:  [\'5D\', \'10D\', \'21D\', \'42D\', \'60D\', \'90D\', \'120D\']\n    :return: pd.DataFrame\n    """"""\n\n    def _resample_close_mean(p_df, df_name=\'\'):\n        resample_dict = {}\n        for _bin in bins:\n            change = abs(pd_resample(p_df.close, _bin, how=\'mean\').pct_change()).mean()\n            """"""\n                eg: pd_resample(p_df.close, bin, how=\'mean\')\n\n                    2014-07-23    249.0728\n                    2014-09-03    258.3640\n                    2014-10-15    240.8663\n                    2014-11-26    220.1552\n                    2015-01-07    206.0070\n                    2015-02-18    198.0932\n                    2015-04-01    217.9791\n                    2015-05-13    251.3640\n                    2015-06-24    266.4511\n                    2015-08-05    244.3334\n                    2015-09-16    236.2250\n                    2015-10-28    222.0441\n                    2015-12-09    222.0574\n                    2016-01-20    177.2303\n                    2016-03-02    226.8766\n                    2016-04-13    230.6000\n                    2016-05-25    216.7596\n                    2016-07-06    222.6420\n\n                    abs(pd_resample(p_df.close, bin, how=\'mean\').pct_change())\n\n                    2014-09-03    0.037\n                    2014-10-15    0.068\n                    2014-11-26    0.086\n                    2015-01-07    0.064\n                    2015-02-18    0.038\n                    2015-04-01    0.100\n                    2015-05-13    0.153\n                    2015-06-24    0.060\n                    2015-08-05    0.083\n                    2015-09-16    0.033\n                    2015-10-28    0.060\n                    2015-12-09    0.000\n                    2016-01-20    0.202\n                    2016-03-02    0.280\n                    2016-04-13    0.016\n                    2016-05-25    0.060\n                    2016-07-06    0.027\n\n                    abs(pd_resample(p_df.close, bin, how=\'mean\').pct_change()).mean():\n\n                    0.080\n            """"""\n            resample_dict[_bin] = change\n        resample_df = pd.DataFrame.from_dict(resample_dict, orient=\'index\')\n        resample_df.columns = [\'{}resample\'.format(df_name)]\n        return resample_df\n\n    if bins is None:\n        bins = [\'5D\', \'10D\', \'21D\', \'42D\', \'60D\', \'90D\', \'120D\']\n    return _df_dispatch_concat(df, _resample_close_mean)\n\n\ndef bcut_change_vc(df, bins=None):\n    """"""\n    eg:\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.bcut_change_vc(tsla)\n\n        out:\n                p_change\trate\n        (0, 3]\t209\t0.4147\n        (-3, 0]\t193\t0.3829\n        (3, 7]\t47\t0.0933\n        (-7, -3]\t44\t0.0873\n        (-10, -7]\t6\t0.0119\n        (7, 10]\t3\t0.0060\n        (10, inf]\t1\t0.0020\n        (-inf, -10]\t1\t0.0020\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param bins: \xe9\xbb\x98\xe8\xae\xa4eg\xef\xbc\x9a[-np.inf, -10, -7, -3, 0, 3, 7, 10, np.inf]\n    :return: pd.DataFrame\n    """"""\n\n    def _bcut_change_vc(p_df, df_name=\'\'):\n        dww = pd.DataFrame(pd.cut(p_df.p_change, bins=bins).value_counts())\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x90\x84\xe4\xb8\xaabin\xe6\x89\x80\xe5\x8d\xa0\xe7\x9a\x84\xe7\x99\xbe\xe5\x88\x86\xe6\xaf\x94\n        dww[\'{}rate\'.format(df_name)] = dww.p_change.values / dww.p_change.values.sum()\n        if len(df_name) > 0:\n            dww.rename(columns={\'p_change\': \'{}\'.format(df_name)}, inplace=True)\n        return dww\n\n    if bins is None:\n        bins = [-np.inf, -10, -7, -3, 0, 3, 7, 10, np.inf]\n    return _df_dispatch_concat(df, _bcut_change_vc)\n\n\ndef qcut_change_vc(df, q=10):\n    """"""\n    eg:\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.qcut_change_vc(tsla)\n\n        out:\n            change\n        0\t[-10.45, -3.002]\n        1\t(-3.002, -1.666]\n        2\t(-1.666, -0.93]\n        3\t(-0.93, -0.396]\n        4\t(-0.396, 0.065]\n        5\t(0.065, 0.48]\n        6\t(0.48, 1.102]\n        7\t(1.102, 1.922]\n        8\t(1.922, 3.007]\n        9\t(3.007, 11.17]\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param q: \xe9\x80\x8f\xe4\xbc\xa0qcut\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84q\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa410\xef\xbc\x8c10\xe7\xad\x89\xe5\x88\x86\n    :return: pd.DataFrame\n    """"""\n\n    def _qcut_change_vc(p_df, df_name=\'\'):\n        dww = pd.qcut(p_df.p_change, q).value_counts().index.values\n        # \xe6\x9e\x84\xe9\x80\xa0Categories\xe4\xbd\xbf\xe7\x94\xa8DataFrame\xe5\xa5\x97Series\n        dww = pd.Series(dww)\n        # \xe6\xb6\xa8\xe8\xb7\x8c\xe4\xbb\x8e\xe8\xb4\x9f\xe5\x90\x91\xe6\xad\xa3\xe5\xbc\x80\xe5\xa7\x8b\xe6\x8e\x92\xe5\xba\x8f\n        dww.sort_values(inplace=True)\n        dww = pd.DataFrame(dww)\n        # \xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8eindex\xe9\x87\x8d\xe6\x96\xb0\xe4\xbb\x8e0\xe5\xbc\x80\xe5\xa7\x8b\xe6\x8e\x92\xe5\x88\x97\n        dww.index = np.arange(0, q)\n        dww.columns = [\'{}change\'.format(df_name)]\n        return dww\n\n    return _df_dispatch_concat(df, _qcut_change_vc)\n\n\ndef date_week_mean(df):\n    """"""\n        eg:\n\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.date_week_mean(tsla)\n\n        out:\n        \xe5\x91\xa8\xe4\xb8\x80    0.0626\n        \xe5\x91\xa8\xe4\xba\x8c    0.0475\n        \xe5\x91\xa8\xe4\xb8\x89    0.0881\n        \xe5\x91\xa8\xe5\x9b\x9b    0.2691\n        \xe5\x91\xa8\xe4\xba\x94   -0.2838\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :return: pd.Series\xe6\x88\x96\xe8\x80\x85pd.DataFrame\n    """"""\n\n    def _date_week_win(p_df, df_name=\'\'):\n        dww = p_df.groupby(\'date_week\')[\'p_change\'].mean()\n        # \xe5\xb0\x86\xe5\x91\xa8\xe5\x87\xa0\xe8\xbf\x99\xe4\xb8\xaa\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8f\x98\xe6\x88\x90\xe4\xb8\xad\xe6\x96\x87\n        dww.rename(index={6: \'\xe5\x91\xa8\xe6\x97\xa5\', 0: \'\xe5\x91\xa8\xe4\xb8\x80\', 1: \'\xe5\x91\xa8\xe4\xba\x8c\', 2: \'\xe5\x91\xa8\xe4\xb8\x89\', 3: \'\xe5\x91\xa8\xe5\x9b\x9b\', 4: \'\xe5\x91\xa8\xe4\xba\x94\', 5: \'\xe5\x91\xa8\xe5\x85\xad\'},\n                   inplace=True)\n        # p_change\xe5\x8f\x98\xe6\x88\x90\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84pchange\n        dww = pd.DataFrame(dww)\n        dww.rename(columns={\'p_change\': \'{}_p_change\'.format(df_name)}, inplace=True)\n        return dww\n\n    return _df_dispatch_concat(df, _date_week_win)\n\n\ndef date_week_win(df):\n    """"""\n    eg:\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.date_week_win(tsla)\n\n        out\xef\xbc\x9a\n                0\t1\twin\n            date_week\n            0\t44\t51\t0.5368\n            1\t55\t48\t0.4660\n            2\t48\t57\t0.5429\n            3\t44\t57\t0.5644\n            4\t53\t47\t0.470\n\n    :param df: bupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :return: pd.Series\xe6\x88\x96\xe8\x80\x85pd.DataFrame\n    """"""\n\n    def _date_week_win(p_df, df_name=\'\'):\n        _df = p_df.copy()\n        win_key = \'{}win\'.format(df_name)\n        _df[win_key] = _df[\'p_change\'] > 0\n        _df[win_key] = _df[win_key].astype(int)\n\n        dww = pd.concat([pd.crosstab(_df.date_week, _df[win_key]), _df.pivot_table([win_key], index=\'date_week\')],\n                        axis=1)\n        # \xe5\xb0\x86\xe5\x91\xa8\xe5\x87\xa0\xe8\xbf\x99\xe4\xb8\xaa\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8f\x98\xe6\x88\x90\xe4\xb8\xad\xe6\x96\x87\n        # noinspection PyUnresolvedReferences\n        dww.rename(index={6: \'\xe5\x91\xa8\xe6\x97\xa5\', 0: \'\xe5\x91\xa8\xe4\xb8\x80\', 1: \'\xe5\x91\xa8\xe4\xba\x8c\', 2: \'\xe5\x91\xa8\xe4\xb8\x89\', 3: \'\xe5\x91\xa8\xe5\x9b\x9b\', 4: \'\xe5\x91\xa8\xe4\xba\x94\', 5: \'\xe5\x91\xa8\xe5\x85\xad\'}, inplace=True)\n        return dww\n\n    return _df_dispatch_concat(df, _date_week_win)\n\n\ndef wave_change_rate(df):\n    """"""\n    eg:\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.wave_change_rate(tsla)\n\n        out:\n        \xe6\x97\xa5\xe6\x8c\xaf\xe5\xb9\x85\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\xaf\x94\xef\xbc\x9a1.794156\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    """"""\n\n    def _wave_change_rate(p_df, df_name=\'\'):\n        wave = ((p_df.high - p_df.low) / p_df.pre_close) * 100\n        # noinspection PyUnresolvedReferences\n        wave_rate = wave.mean() / np.abs(p_df[\'p_change\']).mean()\n\n        print(\'{}\xe6\x97\xa5\xe6\x8c\xaf\xe5\xb9\x85\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe6\xaf\x94\xef\xbc\x9a{:2f}, {}\xe6\x97\xa5\xe7\xbb\x9f\xe8\xae\xa1\xe5\xa5\x97\xe5\x88\xa9\xe6\x9d\xa1\xe4\xbb\xb6\'.format(\n            df_name, wave_rate, \'\xe5\x85\xb7\xe5\xa4\x87\' if wave_rate > 1.80 else \'\xe4\xb8\x8d\xe5\x85\xb7\xe5\xa4\x87\'))\n    _df_dispatch(df, _wave_change_rate)\n\n\ndef p_change_stats(df):\n    """"""\n    eg :\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.p_change_stats(tsla)\n\n        out:\n\n        \xe6\x97\xa5\xe6\xb6\xa8\xe5\xb9\x85\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc1.861, \xe5\x85\xb1260\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb5\xb0\xe5\x8a\xbf\n        \xe6\x97\xa5\xe8\xb7\x8c\xe5\xb9\x85\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc-1.906, \xe5\x85\xb1244\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb5\xb0\xe5\x8a\xbf\n        \xe6\x97\xa5\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb6\xa8\xe8\xb7\x8c\xe6\xaf\x940.977, \xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\x8b\xe8\xb7\x8c\xe6\x95\xb0\xe9\x87\x8f\xe6\xaf\x94:1.066\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    """"""\n\n    def _p_change_stats(p_df, df_name=\'\'):\n        p_change_up = p_df[p_df[\'p_change\'] > 0].p_change\n        p_change_down = p_df[p_df[\'p_change\'] < 0].p_change\n        print(\'{}\xe6\x97\xa5\xe6\xb6\xa8\xe5\xb9\x85\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc{:.3f}, \xe5\x85\xb1{}\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb5\xb0\xe5\x8a\xbf\'.format(df_name, p_change_up.mean(), p_change_up.count()))\n        print(\'{}\xe6\x97\xa5\xe8\xb7\x8c\xe5\xb9\x85\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc{:.3f}, \xe5\x85\xb1{}\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb5\xb0\xe5\x8a\xbf\'.format(df_name, p_change_down.mean(), p_change_down.count()))\n        print(\'{}\xe6\x97\xa5\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb6\xa8\xe8\xb7\x8c\xe6\xaf\x94{:.3f}, \xe4\xb8\x8a\xe6\xb6\xa8\xe4\xb8\x8b\xe8\xb7\x8c\xe6\x95\xb0\xe9\x87\x8f\xe6\xaf\x94:{:.3f}\\n\'.format(\n            df_name, abs(p_change_up.mean() / p_change_down.mean()), p_change_up.count() / p_change_down.count()))\n\n    _df_dispatch(df, _p_change_stats)\n\n\ndef date_week_wave(df):\n    """"""\n    \xe6\xa0\xb9\xe6\x8d\xae\xe5\x91\xa8\xe5\x87\xa0\xe5\x88\x86\xe6\x9e\x90\xe9\x87\x91\xe8\x9e\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x97\xa5\xe6\xb3\xa2\xe5\x8a\xa8:\n\n    eg:\n        tsla = ABuSymbolPd.make_kl_df(\'usTSLA\')\n        ABuKLUtil.date_week_wave(tsla)\n\n        out:\n            usTSLAwave\n            date_week\n            \xe5\x91\xa8\xe4\xb8\x80  3.8144\n            \xe5\x91\xa8\xe4\xba\x8c  3.3326\n            \xe5\x91\xa8\xe4\xb8\x89  3.3932\n            \xe5\x91\xa8\xe5\x9b\x9b  3.3801\n            \xe5\x91\xa8\xe4\xba\x94  2.9923\n\n    :param df: abupy\xe4\xb8\xad\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\xa5\xbd\xe7\x9a\x84kl\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :return: pd.Series\xe6\x88\x96\xe8\x80\x85pd.DataFrame\n    """"""\n\n    def _date_week_wave(p_df, df_name=\'\'):\n        # \xe8\xa6\x81\xe6\x94\xb9df\xe6\x89\x80\xe4\xbb\xa5copy\n        df_copy = p_df.copy()\n        wave_key = \'{}wave\'.format(df_name)\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\xb3\xa2\xe5\x8a\xa8: * 100\xe7\x9b\xae\xe7\x9a\x84\xe6\x98\xaf\xe5\x92\x8c\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84p_change\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\x80\xe8\x87\xb4\n        df_copy[wave_key] = ((df_copy.high - df_copy.low) / df_copy.pre_close) * 100\n        dww = df_copy.groupby(\'date_week\')[wave_key].mean()\n        # \xe5\xb0\x86\xe5\x91\xa8\xe5\x87\xa0\xe8\xbf\x99\xe4\xb8\xaa\xe4\xbf\xa1\xe6\x81\xaf\xe5\x8f\x98\xe6\x88\x90\xe4\xb8\xad\xe6\x96\x87\n        dww.rename(index={6: \'\xe5\x91\xa8\xe6\x97\xa5\', 0: \'\xe5\x91\xa8\xe4\xb8\x80\', 1: \'\xe5\x91\xa8\xe4\xba\x8c\', 2: \'\xe5\x91\xa8\xe4\xb8\x89\', 3: \'\xe5\x91\xa8\xe5\x9b\x9b\', 4: \'\xe5\x91\xa8\xe4\xba\x94\', 5: \'\xe5\x91\xa8\xe5\x85\xad\'}, inplace=True)\n        return dww\n\n    return _df_dispatch_concat(df, _date_week_wave)\n'"
abupy/UtilBu/ABuLazyUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    lazy\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport sys\nimport weakref\n\n\nclass LazyFunc(object):\n    """"""\xe6\x8f\x8f\xe8\xbf\xb0\xe5\x99\xa8\xe7\xb1\xbb\xef\xbc\x9a\xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe7\xb1\xbb\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81lazy\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8a""""""\n\n    def __init__(self, func):\n        """"""\n        \xe5\xa4\x96\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8eg\xef\xbc\x9a\n            class BuyCallMixin(object):\n                @LazyFunc\n                def buy_type_str(self):\n                    return ""call""\n\n                @LazyFunc\n                def expect_direction(self):\n                    return 1.0\n        """"""\n        self.func = func\n        self.cache = weakref.WeakKeyDictionary()\n\n    def __get__(self, instance, owner):\n        """"""\xe6\x8f\x8f\xe8\xbf\xb0\xe5\x99\xa8__get__\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8weakref.WeakKeyDictionary\xe5\xb0\x86\xe4\xbb\xa5\xe5\xae\x9e\xe4\xbe\x8b\xe5\x8c\x96\xe7\x9a\x84instance\xe5\x8a\xa0\xe5\x85\xa5\xe7\xbc\x93\xe5\xad\x98""""""\n        if instance is None:\n            return self\n        try:\n            return self.cache[instance]\n        except KeyError:\n            ret = self.func(instance)\n            self.cache[instance] = ret\n            return ret\n\n    def __set__(self, instance, value):\n        """"""\xe6\x8f\x8f\xe8\xbf\xb0\xe5\x99\xa8__set__\xef\xbc\x8craise AttributeError\xef\xbc\x8c\xe5\x8d\xb3\xe7\xa6\x81\xe6\xad\xa2\xe5\xa4\x96\xe9\x83\xa8set\xe5\x80\xbc""""""\n        raise AttributeError(""LazyFunc set value!!!"")\n\n    def __delete__(self, instance):\n        """"""\xe6\x8f\x8f\xe8\xbf\xb0\xe5\x99\xa8___delete__\xe4\xbb\x8eweakref.WeakKeyDictionary cache\xe4\xb8\xad\xe5\x88\xa0\xe9\x99\xa4instance""""""\n        del self.cache[instance]\n\n\nclass LazyClsFunc(LazyFunc):\n    """"""\n        \xe6\x8f\x8f\xe8\xbf\xb0\xe5\x99\xa8\xe7\xb1\xbb\xef\xbc\x9a\n        \xe4\xbd\x9c\xe7\x94\xa8\xe5\x9c\xa8\xe7\xb1\xbb\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81lazy\xe7\x9a\x84\xe7\xb1\xbb\xe6\x96\xb9\xe6\xb3\x95\xe4\xb8\x8a\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe5\x8f\xaa\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8__get__(owner, owner)\n        \xe6\x9b\xbf\xe6\x8d\xa2\xe5\x8e\x9f\xe5\xa7\x8b__get__(self, instance, owner)\n    """"""\n\n    def __get__(self, instance, owner):\n        """"""\xe6\x8f\x8f\xe8\xbf\xb0\xe5\x99\xa8__get__\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8__get__(owner, owner)\xe6\x9b\xbf\xe6\x8d\xa2\xe5\x8e\x9f\xe5\xa7\x8b__get__(self, instance, owner)""""""\n        return super(LazyClsFunc, self).__get__(owner, owner)\n\n\ndef add_doc(func, doc):\n    """"""Lazy add doc""""""\n    func.__doc__ = doc\n\n\ndef import_module(name):\n    """"""Lazy impor _module""""""\n    __import__(name)\n    return sys.modules[name]\n'"
abupy/UtilBu/ABuMacUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""mac os \xe5\xb9\xb3\xe5\x8f\xb0\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\nimport socket\n\nfrom ..UtilBu.ABuStrUtil import to_native_str\n\n\ndef socket_bind_recv(socket_fn, cmd_handler):\n    """"""\n    \xe5\x9f\xba\xe4\xba\x8ebsd\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4socket\xe9\x80\x9a\xe4\xbf\xa1\xef\xbc\x8c\xe6\x8e\xa5\xe5\x8f\x97\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe5\xa4\x84\xe7\x90\x86\xe6\xb6\x88\xe6\x81\xaf\n    :param socket_fn: socket\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :param cmd_handler: cmd\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8ccallable\xe7\xb1\xbb\xe5\x9e\x8b\n    """"""\n    if not callable(cmd_handler):\n        print(\'socket_bind_recv cmd_handler must callable!\')\n\n    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    server.bind(socket_fn)\n    server.listen(0)\n    while True:\n        connection, _ = server.accept()\n        socket_cmd = connection.recv(1024).decode()\n        # \xe6\x8a\x8a\xe6\x8e\xa5\xe6\x94\xb6\xe5\x88\xb0\xe7\x9a\x84socket\xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99\xe5\xa4\x96\xe9\x83\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\n        cmd_handler(socket_cmd)\n        connection.close()\n\n\ndef socket_send_msg(socket_fn, msg):\n    """"""\n    \xe5\x9f\xba\xe4\xba\x8ebsd\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4socket\xe9\x80\x9a\xe4\xbf\xa1\xef\xbc\x8c\xe5\x8f\x91\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\n    :param socket_fn: : socket\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :param msg: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81encode\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe8\xbf\x9b\xe8\xa1\x8cencode\n    """"""\n    client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    client.connect(socket_fn)\n    client.send(msg.encode())\n    client.close()\n\n\ndef show_msg(title, msg):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8osascript\xe8\x84\x9a\xe6\xad\xa5\xe6\x8f\x90\xe7\xa4\xba\xe5\xbc\xb9\xe7\xaa\x97\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe7\x94\xa8\xe5\x9c\xa8\xe9\x95\xbf\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\x94\xe8\x80\x97\xe6\x97\xb6\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xad\xef\xbc\x8c\xe6\x8f\x90\xe7\xa4\xba\xe9\x87\x8d\xe8\xa6\x81\xe9\x97\xae\xe9\xa2\x98\xe4\xbf\xa1\xe6\x81\xaf\n    :param title: \xe5\xbc\xb9\xe7\xaa\x97\xe6\xa0\x87\xe9\xa2\x98\n    :param msg: \xe5\xbc\xb9\xe7\xaa\x97\xe4\xbf\xa1\xe6\x81\xaf\n    """"""\n    # \xe6\xb3\xa8\xe6\x84\x8f\xe8\xbf\x99\xe9\x87\x8c\xe8\xa6\x81\xe6\x8a\x8amsg\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2\xe5\x9b\x9ebytes\n    msg_cmd = \'osascript -e \\\'display notification ""%s"" with title ""%s""\\\'\' % (to_native_str(msg), to_native_str(title))\n    os.system(msg_cmd)\n\n\ndef fold_free_size_mb(folder):\n    """"""\n    mac os\xe4\xb8\x8b\xe5\x89\xa9\xe4\xbd\x99\xe7\xa3\x81\xe7\x9b\x98\xe7\xa9\xba\xe9\x97\xb4\xe8\x8e\xb7\xe5\x8f\x96\n    :param folder: \xe7\x9b\xae\xe6\xa0\x87\xe7\x9b\xae\xe5\xbd\x95\n    :return: \xe8\xbf\x94\xe5\x9b\x9efloat\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8dmb\n    """"""\n    st = os.statvfs(folder)\n    return st.f_bavail * st.f_frsize / 1024 / 1024\n'"
abupy/UtilBu/ABuMd5.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    md5, crc32\xe7\xad\x89\xe5\x8a\xa0\xe5\xaf\x86\xef\xbc\x8c\xe5\x8f\x98\xe6\x8d\xa2\xe5\x8c\xb9\xe9\x85\x8d\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport hashlib\nimport os\nfrom binascii import crc32\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange\nfrom ..CoreBu import ABuEnv\n\nK_BYTE_SIZE = 1024\n\n\ndef _md5_obj():\n    """"""\xe6\xa0\xb9\xe6\x8d\xaepython\xe7\x89\x88\xe6\x9c\xac\xe8\xbf\x94\xe5\x9b\x9emd5\xe5\xae\x9e\xe4\xbe\x8b""""""\n    md5_obj = hashlib.md5() if ABuEnv.g_is_py3 else hashlib.new(""md5"")\n    return md5_obj\n\n\ndef md5_from_binary(binary):\n    """"""\xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe8\xbf\x9b\xe8\xa1\x8cmd5, \xe8\xbf\x94\xe5\x9b\x9emd5\xe5\x90\x8e32\xe4\xbd\x8d\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1""""""\n    m = _md5_obj()\n    m.update(binary.encode(\'utf-8\'))\n    return m.hexdigest()\n\n\ndef md5_from_file(fn, block_m=1):\n    """"""\n    \xe5\xaf\xb9\xe6\x96\x87\xe4\xbb\xb6\xe8\xbf\x9b\xe8\xa1\x8cmd5, \xe5\x88\x86\xe5\x9d\x97\xe8\xaf\xbb\xe5\x8f\x96\xe6\x96\x87\xe4\xbb\xb6\n    :param fn: \xe7\x9b\xae\xe6\xa0\x87\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    :param block_m: \xe5\x88\x86\xe5\x9d\x97\xe8\xaf\xbb\xe5\x8f\x96\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41mb\n    :return: md5\xe5\x90\x8e32\xe4\xbd\x8d\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1, md5\xe5\xa4\xb1\xe8\xb4\xa5\xe7\xad\x89\xe9\x97\xae\xe9\xa2\x98\xe8\xbf\x94\xe5\x9b\x9e0\n    """"""\n    opened = False\n    f_obj = None\n    if hasattr(fn, ""read""):\n        f_obj = fn\n    else:\n        if os.path.exists(fn) and os.path.isfile(fn):\n            f_obj = open(fn, ""rb"")\n            opened = True\n    if f_obj:\n        block_b = block_m * K_BYTE_SIZE * K_BYTE_SIZE\n        try:\n            m = _md5_obj()\n            while True:\n                fb = f_obj.read(block_b)\n                if not fb:\n                    break\n                m.update(fb)\n        finally:\n            if opened:\n                f_obj.close()\n        return m.hexdigest()\n    else:\n        return 0\n\n\ndef crc32_from_file(fn, block_m=1):\n    """"""\n    \xe5\xaf\xb9\xe6\x96\x87\xe4\xbb\xb6\xe8\xbf\x9b\xe8\xa1\x8ccrc32, \xe5\x88\x86\xe5\x9d\x97\xe8\xaf\xbb\xe5\x8f\x96\xe6\x96\x87\xe4\xbb\xb6\n    :param fn: \xe7\x9b\xae\xe6\xa0\x87\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\n    :param block_m: \xe5\x88\x86\xe5\x9d\x97\xe8\xaf\xbb\xe5\x8f\x96\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41mb\n    :return: crc32\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x8416\xe8\xbf\x9b\xe5\x88\xb6\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2 eg. \'0x00000000\'\n    """"""\n    if os.path.exists(fn) and os.path.isfile(fn):\n        block_b = block_m * K_BYTE_SIZE * K_BYTE_SIZE\n        crc = 0\n        f = open(fn, ""rb"")\n        while True:\n            fb = f.read(block_b)\n            if not fb:\n                break\n            crc = crc32(fb, crc)\n        f.close()\n        res = \'\'\n        for _ in xrange(4):\n            t = crc & 0xFF\n            crc >>= 8\n            res = \'%02x%s\' % (t, res)\n        return ""0x"" + res\n    else:\n        return 0\n'"
abupy/UtilBu/ABuOsUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe5\xb7\xa5\xe5\x85\xb7\xe5\x87\xbd\xe6\x95\xb0\xe6\x95\xb4\xe5\x90\x88\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\n\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu.ABuDTUtil import catch_error\n\nlog_func = logging.info if ABuEnv.g_is_ipython else print\n\n\n@catch_error()\ndef show_msg(title, msg, log=False):\n    """"""\n    \xe7\xbb\x9f\xe4\xb8\x80\xe5\xb9\xb3\xe5\x8f\xb0\xe5\xbc\xb9\xe7\xaa\x97\xe4\xbf\xa1\xe6\x81\xaf\xe6\x8f\x90\xe7\xa4\xba\xef\xbc\x8c\xe8\xa2\xabcatch_error\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe5\xba\x94\xe8\xaf\xa5\xe8\xa2\xab\xe6\x8f\x90\xe7\xa4\xba\xe4\xb8\xad\xe6\x96\xad\xe7\xa8\x8b\xe5\xba\x8f\xef\xbc\x8c\n    \xe7\x89\xb9\xe5\x88\xab\xe9\x95\xbf\xe4\xbb\xbb\xe5\x8a\xa1\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\n    :param title: \xe5\xbc\xb9\xe7\xaa\x97\xe4\xbf\xa1\xe6\x81\xaf\xe6\xa0\x87\xe9\xa2\x98\n    :param msg: \xe5\xbc\xb9\xe7\xaa\x97\xe4\xbf\xa1\xe6\x81\xaf\xe5\x86\x85\xe5\xae\xb9\n    :param log: \xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x9a\xe8\xbf\x87logging.info\xe6\x89\x93\xe5\x8d\xb0\xe4\xbf\xa1\xe6\x81\xaf\n    :return:\n    """"""\n    # \xe7\x94\xb1\xe4\xba\x8ecatch_error\xe5\xbf\xbd\xe7\x95\xa5\xe9\x94\x99\xe8\xaf\xaf\xef\xbc\x8c\xe6\x89\x80\xe6\x9c\x89\xe4\xb8\xbb\xe8\xa6\x81\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbf\x98\xe6\x98\xaf\xe5\x85\x88\xe6\x89\x93\xe5\x8d\xb0\n    if log:\n        log_func(u\'{}\\n{}\'.format(title, msg))\n    if ABuEnv.g_is_mac_os:\n        from ..UtilBu.ABuMacUtil import show_msg as do_show_msg\n    else:\n        from ..UtilBu.ABuWinUtil import show_msg as do_show_msg\n    do_show_msg(title, msg)\n\n\ndef socket_bind_recv(socket_fn, cmd_handler):\n    """"""\n    \xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4socket\xe6\x88\x96\xe8\x80\x85\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe9\x80\x9a\xe4\xbf\xa1\xef\xbc\x8c\xe6\x8e\xa5\xe5\x8f\x97\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe5\xa4\x84\xe7\x90\x86\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe5\xa4\x96\xe5\xb1\x82\xe5\xba\x94\xe5\xa4\x84\xe7\x90\x86catch_error\n    :param socket_fn: socket\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xe6\x88\x96\xe8\x80\x85\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe5\x90\x8d\xe7\xa7\xb0\n    :param cmd_handler: cmd\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8ccallable\xe7\xb1\xbb\xe5\x9e\x8b\n    """"""\n\n    # TODO \xe4\xbd\xbf\xe7\x94\xa8ZeroMQ\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe6\x96\xb0\xe5\xaf\xb9\xe6\x8e\xa5\n    if ABuEnv.g_is_mac_os:\n        from ..UtilBu.ABuMacUtil import socket_bind_recv as do_socket_bind_recv\n    else:\n        from ..UtilBu.ABuWinUtil import socket_bind_recv as do_socket_bind_recv\n    do_socket_bind_recv(socket_fn, cmd_handler)\n\n\ndef socket_send_msg(socket_fn, msg):\n    """"""\n    \xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4socket\xe6\x88\x96\xe5\x85\xa8\xe5\xb1\x80\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe9\x80\x9a\xe4\xbf\xa1\xef\xbc\x8c\xe5\x8f\x91\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe5\xa4\x96\xe5\xb1\x82\xe5\xba\x94\xe5\xa4\x84\xe7\x90\x86catch_error\n    :param socket_fn: socket\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\xe6\x88\x96\xe8\x80\x85\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe5\x90\x8d\xe7\xa7\xb0\n    :param msg: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81encode\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe8\xbf\x9b\xe8\xa1\x8cencode\n    """"""\n    # TODO \xe4\xbd\xbf\xe7\x94\xa8ZeroMQ\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x8d\xe6\x96\xb0\xe5\xaf\xb9\xe6\x8e\xa5\n    if ABuEnv.g_is_mac_os:\n        from ..UtilBu.ABuMacUtil import socket_send_msg as do_socket_send_msg\n    else:\n        from ..UtilBu.ABuWinUtil import socket_send_msg as do_socket_send_msg\n    do_socket_send_msg(socket_fn, msg)\n\n\n@catch_error(return_val=0)\ndef fold_free_size_mb(folder):\n    """"""\n    \xe7\xbb\x9f\xe4\xb8\x80\xe5\xb9\xb3\xe8\xb7\xaf\xe5\xbe\x84\xe5\x8f\xaf\xe7\x94\xa8\xe7\xa9\xba\xe9\x97\xb4\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x8c\xe8\xa2\xabcatch_error\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe5\xba\x94\xe8\xaf\xa5\xe8\xa2\xab\xe6\x8f\x90\xe7\xa4\xba\xe4\xb8\xad\xe6\x96\xad\xe7\xa8\x8b\xe5\xba\x8f\xef\xbc\x8creturn_val\xef\xbc\x9d0\xef\xbc\x8c\xe5\x87\xba\xe9\x94\x99\xe4\xb9\x9f\xe8\xbf\x94\xe5\x9b\x9e0\n    :param folder: \xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe7\x9b\x98\xe7\xac\xa6\xe4\xbf\xa1\xe6\x81\xaf\n    :return: folder\xe4\xb8\x8b\xe7\x9a\x84\xe5\x8f\xaf\xe7\x94\xa8\xe7\xa9\xba\xe9\x97\xb4\xe5\xa4\xa7\xe5\xb0\x8f\n    """"""\n    if ABuEnv.g_is_mac_os:\n        from ..UtilBu.ABuMacUtil import fold_free_size_mb as do_fold_free_size_mb\n    else:\n        from ..UtilBu.ABuWinUtil import fold_free_size_mb as do_fold_free_size_mb\n    do_fold_free_size_mb(folder)\n'"
abupy/UtilBu/ABuPlatform.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xb9\xb3\xe5\x8f\xb0\xe4\xbf\xa1\xe6\x81\xaf\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\nimport platform\nimport sys\nimport struct\nimport logging\n\n\ndef is_32bit():\n    """"""\xe6\x98\xaf\xe5\x90\xa632\xe4\xbd\x8d\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f""""""\n    return struct.calcsize(""P"") * 8 < 64\n\n\ndef is_mac():\n    """"""\xe6\x98\xaf\xe5\x90\xa6mac os\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f""""""\n    return \'Darwin\' in platform.system()\n\n\ndef is_windows():\n    """"""\xe6\x98\xaf\xe5\x90\xa6Windows\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f""""""\n    return \'Windows\' in platform.system()\n\n\ndef is_linux():\n    """"""\xe6\x98\xaf\xe5\x90\xa6Linux\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f""""""\n    return \'Linux\' in platform.system()\n\n\ndef platform_name():\n    """"""\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe5\x90\x8d\xe7\xa7\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2""""""\n    return platform.system()\n\n\ndef get_sys_info():\n    """"""\n        \xe5\xb9\xb3\xe5\x8f\xb0\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe6\x94\xb6\xe9\x9b\x86\n        eg:\n            [(\'python\', \'3.6.0.final.0\'),\n             (\'python-bits\', 64),\n             (\'OS\', \'Darwin\'),\n             (\'OS-release\', \'15.6.0\'),\n             (\'machine\', \'x86_64\'),\n             (\'processor\', \'i386\'),\n             (\'byteorder\', \'little\'),\n             (\'LC_ALL\', \'None\'),\n             (\'LANG\', \'zh_CN.UTF-8\')]\n    """"""\n    sys_info = list()\n    try:\n        sys_name, node_name, release, version, machine, processor = platform.uname(\n        )\n        # noinspection PyStringFormat\n        sys_info.extend([\n            (""python"", ""%d.%d.%d.%s.%s"" % sys.version_info[:]),\n            (""python-bits"", struct.calcsize(""P"") * 8),\n            (""OS"", ""%s"" % sys_name),\n            (""OS-release"", ""%s"" % release),\n            (""machine"", ""%s"" % machine),\n            (""processor"", ""%s"" % processor),\n            (""byteorder"", ""%s"" % sys.byteorder),\n            (""LC_ALL"", ""%s"" % os.environ.get(\'LC_ALL\', ""None"")),\n            (""LANG"", ""%s"" % os.environ.get(\'LANG\', ""None"")),\n        ])\n    except Exception as e:\n        logging.exception(e)\n\n    return sys_info\n\n\n# noinspection PyDeprecation\ndef show_versions():\n    """"""\n        \xe5\xb9\xb3\xe5\x8f\xb0\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe6\x94\xb6\xe9\x9b\x86\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xb8\xbb\xe8\xa6\x81lib\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7\xe4\xbf\xa1\xe6\x81\xaf\n        eg.\n            INSTALLED VERSIONS\n            ------------------\n            python: 3.6.0.final.0\n            python-bits: 64\n            OS: Darwin\n            OS-release: 15.6.0\n            machine: x86_64\n            processor: i386\n            byteorder: little\n            LC_ALL: None\n            LANG: zh_CN.UTF-8\n\n            pandas: 0.19.2\n            sklearn: 0.18.1\n            numpy: 1.11.3\n            scipy: 0.18.1\n            statsmodels: 0.6.1\n            notebook: 4.3.1\n            tables: 3.3.0\n            seaborn: 0.7.1\n            matplotlib: 2.0.0\n            requests: 2.12.4\n            bs4: 4.5.3\n            numba: 0.30.1\n    """"""\n    sys_info = get_sys_info()\n\n    deps_mod = [\n        # (MODULE_NAME, f(dep_mod) -> dep_mod version)\n        (""pandas"", lambda dep_mod: dep_mod.__version__),\n        (""sklearn"", lambda dep_mod: dep_mod.__version__),\n        (""numpy"", lambda dep_mod: dep_mod.version.version),\n        (""scipy"", lambda dep_mod: dep_mod.version.version),\n        (""statsmodels"", lambda dep_mod: dep_mod.__version__),\n        (""notebook"", lambda dep_mod: dep_mod.__version__),\n        (""tables"", lambda dep_mod: dep_mod.__version__),\n        (""seaborn"", lambda dep_mod: dep_mod.__version__),\n        (""matplotlib"", lambda dep_mod: dep_mod.__version__),\n        (""requests"", lambda dep_mod: dep_mod.__version__),\n        (""bs4"", lambda dep_mod: dep_mod.__version__),\n        (""numba"", lambda dep_mod: dep_mod.__version__)\n    ]\n\n    deps_info = list()\n    for (modname, ver_f) in deps_mod:\n        try:\n            import imp\n            try:\n                mod = imp.load_module(modname, *imp.find_module(modname))\n            except ImportError:\n                import importlib\n                mod = importlib.import_module(modname)\n            ver = ver_f(mod)\n            deps_info.append((modname, ver))\n        except:\n            deps_info.append((modname, None))\n    print(""\\nINSTALLED VERSIONS"")\n    print(""------------------"")\n\n    for k, stat in sys_info:\n        print(""%s: %s"" % (k, stat))\n\n    print("""")\n    for k, stat in deps_info:\n        print(""%s: %s"" % (k, stat))\n\n\nif __name__ == ""__main__"":\n    show_versions()\n'"
abupy/UtilBu/ABuProgress.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe8\xbe\x85\xe5\x8a\xa9\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\n""""""\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport sys\nimport os\nimport datetime\nimport time\n\nfrom IPython.display import clear_output\nfrom IPython.display import display\nfrom ipywidgets import FloatProgress, Text, Box\n\nfrom ..CoreBu import ABuEnv\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..UtilBu.ABuDTUtil import warnings_filter, catch_error\nfrom ..UtilBu import ABuFileUtil, ABuOsUtil\nfrom ..CoreBu.ABuParallel import run_in_subprocess, run_in_thread\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef do_clear_output(wait=False):\n    """"""\n    \xe6\xa8\xa1\xe5\x9d\x97\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8cclear\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe9\x92\x88\xe5\xaf\xb9notebook\xe5\x92\x8c\xe5\x91\xbd\xe4\xbb\xa4\xe8\xa1\x8c\xe8\xbe\x93\xe5\x87\xba\xe5\x81\x9a\xe5\x8c\xba\xe5\x88\x86\n    :param wait: \xe6\x98\xaf\xe5\x90\xa6\xe5\x90\x8c\xe6\xad\xa5\xe6\x89\xa7\xe8\xa1\x8cclear\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe9\x80\x8f\xe4\xbc\xa0\xe7\xbb\x99IPython.display.clear_output\n    """"""\n    if ABuEnv.g_is_ipython:\n        # notebook clear\n        clear_output(wait=wait)\n    else:\n        # cmd clear\n        cmd = \'clear\' if ABuEnv.g_is_mac_os else \'cls\'\n        os.system(cmd)\n        # pass\n\n\nclass UIProgress(object):\n    """"""\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8bsocket\xe9\x80\x9a\xe4\xbf\xa1\xe4\xb8\x8b\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe7\xb1\xbb""""""\n\n    def __init__(self, a_pid):\n        """"""\xe9\x80\x9a\xe8\xbf\x87\xe8\xbf\x9b\xe7\xa8\x8bpid\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96ui\xe7\xbb\x84\xe4\xbb\xb6""""""\n        self.progress_widget = FloatProgress(value=0, min=0, max=100)\n        self.text_widget = Text(\'pid={} begin work\'.format(a_pid))\n        # \xe9\x80\x9a\xe8\xbf\x87box\xe5\xae\xb9\xe5\x99\xa8\xe9\x83\xbd\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe9\x87\x8c\xe9\x9d\xa2\n        self.progress_box = Box([self.text_widget, self.progress_widget])\n        display(self.progress_box)\n\n    def update(self, p_progress, p_progress_text):\n        """"""\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9b\xb4\xe6\x96\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe6\x96\x87\xe5\xad\x97\xe6\x9b\xb4\xe6\x96\xb0""""""\n        self.progress_widget.value = p_progress\n        self.text_widget.value = p_progress_text\n\n    def close(self):\n        """"""\xe5\x85\xb3\xe9\x97\xadui\xe6\x98\xbe\xe7\xa4\xba""""""\n        self.progress_box.close()\n\n\n""""""\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe9\x80\x9a\xe4\xbf\xa1socket\xe6\x96\x87\xe4\xbb\xb6\xe5\x9f\xba\xe7\xa1\x80\xe5\x90\x8d\xe5\xad\x97""""""\nK_SOCKET_FN_BASE = os.path.join(ABuEnv.g_project_cache_dir, \'abu_socket_progress\')\n""""""\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe9\x80\x9a\xe4\xbf\xa1socket\xe6\x96\x87\xe4\xbb\xb6\xe6\x9c\x80\xe7\xbb\x88\xe5\x90\x8d\xe5\xad\x97\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8f\xaf\xe4\xbb\xa5\xe8\x8e\xb7\xe5\x8f\x96g_socket_fn\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87ABuEnvProcess\xe6\x8b\xb7\xe8\xb4\x9d\xe4\xba\x86\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x85\xa8\xe5\xb1\x80\xe4\xbf\xa1\xe6\x81\xaf""""""\ng_socket_fn = None\n""""""\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xbe\xe7\xa4\xbaui\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x8c\xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe9\x80\x9a\xe4\xbf\xa1\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9b\xe5\xa4\xaa\xe9\xa2\x91\xe7\xb9\x81\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x89\xe6\x8b\xa9\xe5\x85\xb3\xe9\x97\xad""""""\ng_show_ui_progress = True\n""""""\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe7\x94\xa8\xe6\x9d\xa5\xe5\xad\x98\xe8\xb4\xae\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbc\xa0\xe9\x80\x92\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8bpid\xe4\xb8\xbakey\xef\xbc\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xaf\xb9\xe8\xb1\xa1UIProgress\xe4\xb8\xbavalue""""""\nui_progress_dict = {}\n\n\ndef _socket_cmd_handle(socket_cmd):\n    """"""\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xad\xe5\xa4\x84\xe7\x90\x86\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xa4\x84\xe7\x90\x86\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x9a\xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe9\x94\x80\xe6\xaf\x81""""""\n    socket_cmd = socket_cmd.strip()\n    socket_cmd = socket_cmd.strip(\'\\x00\')\n    socket_cmd = socket_cmd.strip(\'\\0\')\n    cmd_split = socket_cmd.split(\'|\')\n    if len(cmd_split) == 3 and cmd_split[0] in ui_progress_dict:\n        # 3\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe7\x9a\x840\xe6\x98\xaf\xef\xbc\x9apid\n        pid = cmd_split[0]\n        # 3\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe7\x9a\x841\xe6\x98\xaf\xef\xbc\x9a\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2float\n        progress = float(cmd_split[1])\n        # 3\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe7\x9a\x842\xe6\x98\xaf\xef\xbc\x9a\xe8\xbf\x9b\xe5\xba\xa6\xe6\x96\x87\xe5\xad\x97\xe6\x98\xbe\xe7\xa4\xba\n        progress_text = cmd_split[2]\n        # \xe6\x89\xbe\xe5\x88\xb0\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84UIProgress\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xbc\x80\xe5\xa7\x8bupdate\n        ui_progress_dict[pid].update(progress, progress_text)\n    elif len(cmd_split) == 2 and cmd_split[0] in ui_progress_dict and cmd_split[1] == \'close\':\n        # 2\xe4\xb8\xaa\xe5\xad\x97\xe6\xae\xb5\xe7\x9a\x840\xe6\x98\xaf\xef\xbc\x9apid\n        pid = cmd_split[0]\n        # \xe5\xb0\x86\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84UIProgress\xe5\xaf\xb9\xe8\xb1\xa1pop\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8c\xe5\x90\x8e\xe6\x89\xa7\xe8\xa1\x8cclose\n        pop_progress = ui_progress_dict.pop(pid, None)\n        if pop_progress is not None:\n            pop_progress.close()\n    elif len(cmd_split) == 2 and cmd_split[1] == \'init\':\n        pid = cmd_split[0]\n        if pid in ui_progress_dict:\n            ui_progress_dict.pop(pid)\n        # \xe5\x88\x9b\xe5\xbb\xba\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe4\xbb\xa5pid\xe4\xb8\xbakey\xe6\x94\xbe\xe5\x88\xb0\xe7\xbc\x93\xe5\xad\x98\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\n        ui_progress_dict[pid] = UIProgress(pid)\n\n\n# \xe4\xb8\x8d\xe7\xae\xa1ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9c\x89\xe4\xbb\x80\xe4\xb9\x88\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe5\xbd\xb1\xe5\x93\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xbb\xe4\xbb\xbb\xe5\x8a\xa1\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\x8d\xe6\xad\xa3\xe6\x9c\x89\xe6\x96\x87\xe5\xad\x97\xe8\xbf\x9b\xe5\xba\xa6\xe4\xbc\x9a\xe5\xa7\x8b\xe7\xbb\x88\xe6\x98\xbe\xe7\xa4\xba\n@catch_error(log=False)\ndef ui_progress_socket_work():\n    """"""\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe7\x9a\x84\xe5\xad\x90\xe7\xba\xbf\xe7\xa8\x8b\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xa4\x84\xe7\x90\x86\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x9a\xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe9\x94\x80\xe6\xaf\x81""""""\n    global g_socket_fn\n\n    # \xe4\xb8\x8d\xe7\xae\xa1\xe6\x98\xaf\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x98\xe6\x98\xafsocket\xe9\x83\xbd\xe9\x80\x9a\xe8\xbf\x87\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8bpid\xe7\xa1\xae\xe5\xae\x9a\xe5\x94\xaf\xe4\xb8\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    tt = datetime.datetime.now().strftime(""%Y_%m_%d_%H_%M_%S_%f"")\n    if ABuEnv.g_is_mac_os:\n        # bsd socket\n        g_socket_fn = \'{}_{}_{}\'.format(K_SOCKET_FN_BASE, os.getpid(), tt)\n        if ABuFileUtil.file_exist(g_socket_fn):\n            # \xe5\xa6\x82\xe6\x9e\x9csocket\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\x88\xa0\xe9\x99\xa4\n            ABuFileUtil.del_file(g_socket_fn)\n    else:\n        # windows\xe5\x85\xa8\xe5\xb1\x80\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe9\x80\x9a\xe8\xbf\x87pid\xef\xbc\x8b\xe6\x97\xb6\xe9\x97\xb4\xe7\xa1\xae\xe5\xae\x9a\n        g_socket_fn = \'ABU_PROGRESS_{}_{}\'.format(os.getpid(), tt)\n\n    # socket_bind_recv\xe4\xb8\x8d\xe7\xae\xa1\xe6\x98\xafwindows\xe8\xbf\x98\xe6\x98\xafmac\xe9\x83\xbd\xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xe8\xbf\x9b\xe8\xa1\x8cwhile True\xe9\x98\xbb\xe5\xa1\x9e\xe5\xad\x90\xe7\xba\xbf\xe7\xa8\x8b\xe4\xb8\x80\xe7\x9b\xb4\xe8\xbf\x90\xe8\xa1\x8c\n    ABuOsUtil.socket_bind_recv(g_socket_fn, _socket_cmd_handle)\n\n\n# \xe4\xb8\x8d\xe7\xae\xa1ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9c\x89\xe4\xbb\x80\xe4\xb9\x88\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe5\xbd\xb1\xe5\x93\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xbb\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb7\xa5\xe4\xbd\x9c\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x89\xa7\xe8\xa1\x8c\n@catch_error(log=False)\ndef check_process_is_dead():\n    """"""\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe7\x9a\x84\xe5\xad\x90\xe7\xba\xbf\xe7\xa8\x8b\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\xe6\xa3\x80\xe6\xb5\x8bui_progress_dict\xe4\xb8\xad\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8bpid\xe6\x98\xaf\xe5\x90\xa6\xe4\xbb\x8d\xe7\x84\xb6\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xad\xbb\xe4\xba\x86\xef\xbc\x8c\xe4\xbb\x8e\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\xb8\x85\xe9\x99\xa4\xef\xbc\x8cclose ui""""""\n    while True:\n        # \xe4\xbd\x8e\xe4\xbc\x98\xe5\x85\x88\xe7\xba\xa7\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c1\xe5\x88\x86\xe9\x92\x9f\xe6\x89\xa7\xe8\xa1\x8c1\xe6\xac\xa1\n        time.sleep(60)\n        do_check_process_is_dead()\n\n\ndef do_check_process_is_dead():\n    """"""\xe6\x89\xa7\xe8\xa1\x8c\xe6\xa3\x80\xe6\xb5\x8bui_progress_dict\xe4\xb8\xad\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8bpid\xe6\x98\xaf\xe5\x90\xa6\xe4\xbb\x8d\xe7\x84\xb6\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xad\xbb\xe4\xba\x86\xef\xbc\x8c\xe4\xbb\x8e\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\xb8\x85\xe9\x99\xa4\xef\xbc\x8cclose ui""""""\n    import psutil\n    # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xb4\xbb\xe7\x9d\x80\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89pid\xe5\xba\x8f\xe5\x88\x97\n    living = psutil.pids()\n    clear_arr = list()\n    for progress_pid in ui_progress_dict:\n        # \xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\xb4\xe6\x97\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\x80\xe6\xac\xa1int\xef\xbc\x8cliving\xe4\xb8\xad\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xba\x8f\xe5\x88\x97\xe6\x98\xafint\n        if int(progress_pid) not in living:\n            # \xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe8\xae\xb0\xe5\xbd\x95\xe7\x9a\x84pid\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\x9c\xa8\xe6\xb4\xbb\xe7\x9d\x80\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xef\xbc\x8c\xe6\xb8\x85\xe9\x99\xa4\n            clear_arr.append(progress_pid)\n    for clear_pid in clear_arr:\n        if clear_pid in ui_progress_dict:\n            pop_progress = ui_progress_dict.pop(clear_pid, None)\n            if pop_progress is not None:\n                pop_progress.close()\n\n\n# \xe4\xb8\x8d\xe7\xae\xa1ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9c\x89\xe4\xbb\x80\xe4\xb9\x88\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe5\xbd\xb1\xe5\x93\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\xbb\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb7\xa5\xe4\xbd\x9c\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x89\xa7\xe8\xa1\x8c\n@catch_error(log=False)\ndef cache_socket_ready():\n    """"""\xe9\x80\x9a\xe4\xbf\xa1\xe4\xb8\xb4\xe6\x97\xb6\xe6\x96\x87\xe4\xbb\xb6\xe5\x87\x86\xe5\xa4\x87\xe5\xb7\xa5\xe4\xbd\x9c""""""\n    ABuFileUtil.ensure_dir(K_SOCKET_FN_BASE)\n    cache_list = os.listdir(ABuEnv.g_project_cache_dir)\n    socket_cache_list = list(filter(lambda cache: cache.startswith(\'abu_socket_progress\'), cache_list))\n    if len(socket_cache_list) > 300:\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe8\xb6\x85\xe8\xbf\x87300\xe4\xb8\xaa\xe8\xbf\x9b\xe5\xba\xa6socket\xe7\xbc\x93\xe5\xad\x98\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb8\x85\xe7\x90\x86\n        for sk_name in socket_cache_list:\n            ABuFileUtil.del_file(os.path.join(ABuEnv.g_project_cache_dir, sk_name))\n\nif g_show_ui_progress and ABuEnv.g_main_pid == os.getpid() and ABuEnv.g_is_ipython:\n    # \xe9\x80\x9a\xe4\xbf\xa1\xe4\xb8\xb4\xe6\x97\xb6\xe6\x96\x87\xe4\xbb\xb6\xe5\x87\x86\xe5\xa4\x87\xe5\xb7\xa5\xe4\xbd\x9c\n    cache_socket_ready()\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x90\xe7\xba\xbf\xe7\xa8\x8b\xe5\x87\xbd\xe6\x95\xb0ui_progress_socket_work\xef\xbc\x9a\xe5\xa4\x84\xe7\x90\x86\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xa4\x84\xe7\x90\x86\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x9a\xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9b\xb4\xe6\x96\xb0\xef\xbc\x8c\xe9\x94\x80\xe6\xaf\x81\n    run_in_thread(ui_progress_socket_work)\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x89\xa7\xe8\xa1\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xad\x90\xe7\xba\xbf\xe7\xa8\x8b\xe5\x87\xbd\xe6\x95\xb0check_process_is_dead\xef\xbc\x9a\xe6\xa3\x80\xe6\xb5\x8bui_progress_dict\xe4\xb8\xad\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x98\xaf\xe5\x90\xa6\xe4\xbb\x8d\xe7\x84\xb6\xe6\xb4\xbb\xe7\x9d\x80\xef\xbc\x8c\xe4\xbb\x8e\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe6\xb8\x85\xe9\x99\xa4\xef\xbc\x8cclose ui\n    run_in_thread(check_process_is_dead)\n\n\nclass AbuMulPidProgress(object):\n    """"""\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\x8e\xa7\xe5\x88\xb6\xe7\xb1\xbb""""""\n\n    def __init__(self, total, label, show_progress=True):\n        """"""\n        \xe5\xa4\x96\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8eg\xef\xbc\x9a\n        with AbuMulPidProgress(len(self.choice_symbols), \'pick stocks complete\') as progress:\n            for epoch, target_symbol in enumerate(self.choice_symbols):\n                progress.show(epoch + 1)\n\n        :param total: \xe6\x80\xbb\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\n        :param label: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xbalabel\n        """"""\n        self._total = total\n        self._label = label\n        self.epoch = 0\n        self.display_step = 1\n        self.progress_widget = None\n        self.text_widget = None\n        self.progress_box = None\n        self.show_progress = show_progress\n\n    # \xe4\xb8\x8d\xe7\xae\xa1ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9c\x89\xe4\xbb\x80\xe4\xb9\x88\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe5\xbd\xb1\xe5\x93\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb7\xa5\xe4\xbd\x9c\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\x8d\xe6\xad\xa3\xe6\x9c\x89\xe6\x96\x87\xe5\xad\x97\xe8\xbf\x9b\xe5\xba\xa6\xe4\xbc\x9a\xe5\xa7\x8b\xe7\xbb\x88\xe6\x98\xbe\xe7\xa4\xba\n    @catch_error(log=False)\n    def init_ui_progress(self):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1""""""\n        if not self.show_progress:\n            return\n\n        if not ABuEnv.g_is_ipython or self._total < 2:\n            return\n\n        if ABuEnv.g_main_pid == os.getpid():\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe6\x98\xbe\xe7\xa4\xba\xe9\x82\xa3\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x9d\xa5\n            self.progress_widget = FloatProgress(value=0, min=0, max=100)\n            self.text_widget = Text(\'pid={} begin work\'.format(os.getpid()))\n            self.progress_box = Box([self.text_widget, self.progress_widget])\n            display(self.progress_box)\n        else:\n            if g_show_ui_progress and g_socket_fn is not None:\n                # \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe9\x80\x9a\xe8\xbf\x87socket\xe9\x80\x9a\xe4\xbf\xa1\xe5\xb0\x86pid\xe7\xbb\x99\xe5\x88\xb0\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x88\x9b\xe5\xbb\xbaui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\n                ABuOsUtil.socket_send_msg(g_socket_fn, \'{}|init\'.format(os.getpid()))\n\n    # \xe4\xb8\x8d\xe7\xae\xa1ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9c\x89\xe4\xbb\x80\xe4\xb9\x88\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe5\xbd\xb1\xe5\x93\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb7\xa5\xe4\xbd\x9c\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\x8d\xe6\xad\xa3\xe6\x9c\x89\xe6\x96\x87\xe5\xad\x97\xe8\xbf\x9b\xe5\xba\xa6\xe4\xbc\x9a\xe5\xa7\x8b\xe7\xbb\x88\xe6\x98\xbe\xe7\xa4\xba\n    @catch_error(log=False)\n    def update_ui_progress(self, ps, ps_text):\n        """"""\xe6\x9b\xb4\xe6\x96\xb0\xe6\x96\x87\xe5\xad\x97\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1""""""\n        if not self.show_progress:\n            return\n\n        if not ABuEnv.g_is_ipython or self._total < 2:\n            return\n\n        if ABuEnv.g_main_pid == os.getpid():\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe6\x98\xbe\xe7\xa4\xba\xe9\x82\xa3\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x9d\xa5\n            if self.progress_widget is not None:\n                self.progress_widget.value = ps\n            if self.text_widget is not None:\n                self.text_widget.value = ps_text\n        else:\n            if g_show_ui_progress and g_socket_fn is not None:\n                # \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe9\x80\x9a\xe8\xbf\x87socket\xe9\x80\x9a\xe4\xbf\xa1\xe5\xb0\x86pid\xe7\xbb\x99\xe5\x88\xb0\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x80\x9a\xe8\xbf\x87pid\xe6\x9f\xa5\xe6\x89\xbe\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x90\x8e\xe6\x9b\xb4\xe6\x96\xb0\xe8\xbf\x9b\xe5\xba\xa6\n                ABuOsUtil.socket_send_msg(g_socket_fn, \'{}|{}|{}\'.format(os.getpid(), ps, ps_text))\n\n    # \xe4\xb8\x8d\xe7\xae\xa1ui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x9c\x89\xe4\xbb\x80\xe4\xb9\x88\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe8\x83\xbd\xe5\xbd\xb1\xe5\x93\x8d\xe4\xbb\xbb\xe5\x8a\xa1\xe5\xb7\xa5\xe4\xbd\x9c\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x89\xa7\xe8\xa1\x8c\xef\xbc\x8c\xe5\x8f\x8d\xe6\xad\xa3\xe6\x9c\x89\xe6\x96\x87\xe5\xad\x97\xe8\xbf\x9b\xe5\xba\xa6\xe4\xbc\x9a\xe5\xa7\x8b\xe7\xbb\x88\xe6\x98\xbe\xe7\xa4\xba\n    @catch_error(log=False)\n    def close_ui_progress(self):\n        """"""\xe5\x85\xb3\xe9\x97\xadui\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x98\xbe\xe7\xa4\xba""""""\n        if not self.show_progress:\n            return\n\n        if not ABuEnv.g_is_ipython or self._total < 2:\n            return\n\n        if ABuEnv.g_main_pid == os.getpid():\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x9c\xa8\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe6\x98\xbe\xe7\xa4\xba\xe9\x82\xa3\xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x9d\xa5\n            if self.progress_box is not None:\n                self.progress_box.close()\n        else:\n            if g_show_ui_progress and g_socket_fn is not None:\n                # \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xb8\x8b\xe9\x80\x9a\xe8\xbf\x87socket\xe9\x80\x9a\xe4\xbf\xa1\xe5\xb0\x86pid\xe7\xbb\x99\xe5\x88\xb0\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x80\x9a\xe8\xbf\x87pid\xe6\x9f\xa5\xe6\x89\xbe\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x90\x8e\xe5\x85\xb3\xe9\x97\xad\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe4\xb8\x94\xe5\xbc\xb9\xe5\x87\xba\n                ABuOsUtil.socket_send_msg(g_socket_fn, \'{}|close\'.format(os.getpid()))\n\n    def __enter__(self):\n        """"""\n        \xe4\xbb\xa5\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe7\xb1\xbb\xe6\x96\xb9\xe5\xbc\x8f\xe5\xae\x9e\xe7\x8e\xb0__enter__\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9self._total\xe5\x88\x86\xe9\x85\x8dself.display_step\n        """"""\n        if self.show_progress:\n            self.display_step = 1\n            if self._total >= 5000:\n                self.display_step = 50\n            elif self._total >= 3000:\n                self.display_step = 30\n            elif self._total >= 2000:\n                self.display_step = 20\n            elif self._total > 1000:\n                self.display_step = 10\n            elif self._total >= 600:\n                self.display_step = 6\n            elif self._total >= 300:\n                self.display_step = 3\n            elif self._total >= 100:\n                self.display_step = 2\n            elif self._total >= 20:\n                self.display_step = 2\n            self.epoch = 0\n            self.init_ui_progress()\n        return self\n\n    def show(self, epoch=None, clear=True):\n        """"""\n        \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xbb\xe6\x96\xb9\xe6\xb3\x95\n        :param epoch: \xe9\xbb\x98\xe8\xae\xa4None, \xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe5\x86\x85\xe9\x83\xa8\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe8\xbf\xad\xe4\xbb\xa3\xe6\xac\xa1\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\n        :param clear: \xe9\xbb\x98\xe8\xae\xa4True, \xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x98\xbe\xe7\xa4\xba\xe6\x96\xb0\xe7\x9a\x84\xe8\xbf\x9b\xe5\xba\xa6\xe5\x89\x8d\xef\xbc\x8c\xe5\x85\x88do_clear_output\xe6\x89\x80\xe6\x9c\x89\xe8\xbe\x93\xe5\x87\xba\n        :return:\n        """"""\n        if not self.show_progress:\n            return\n\n        self.epoch = epoch if epoch is not None else self.epoch + 1\n        if self.epoch % self.display_step == 0:\n            ps = round(self.epoch / self._total * 100, 2)\n            ps = 100 if ps > 100 else ps\n            ps_text = ""pid:{} {}:{}%"".format(os.getpid(), self._label, ps)\n            if not ABuEnv.g_is_ipython or self._total < 2:\n                if clear:\n                    do_clear_output()\n                    # clear_std_output()\n                print(ps_text)\n\n            self.update_ui_progress(ps, ps_text)\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        """"""\n        \xe4\xbb\xa5\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe7\xb1\xbb\xe6\x96\xb9\xe5\xbc\x8f\xe5\xae\x9e\xe7\x8e\xb0__exit__\xef\xbc\x8c\xe9\x92\x88\xe5\xaf\xb9\xe5\x9c\xa8\xe5\xad\x90\xe8\xbf\x9b\xe5\x9f\x8e\xe4\xb8\xad\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe6\x98\xbe\xe7\xa4\xba\xe8\xbf\x9b\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8cdo_clear_output\xe6\x89\xab\xe5\xb0\xbe\xe5\xb7\xa5\xe4\xbd\x9c\n        """"""\n        if not self.show_progress:\n            return\n\n        clear = False\n        if clear:\n            # clear\xe5\x9c\xa8mac\xe4\xb8\x8a\xe5\xba\x94\xe8\xaf\xa5\xe6\x89\x93\xe5\xbc\x80, \xe7\x94\xb1\xe4\xba\x8ewindows\xe6\x9f\x90\xe4\xba\x9b\xe7\x89\x88\xe6\x9c\xac\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8wait=True\xe4\xbc\x9a\xe6\x9c\x89\xe9\x98\xbb\xe5\xa1\x9e\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cwait\xef\xbc\x9dFalse, \xe6\x9c\x89clear\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe9\xa3\x8e\xe9\x99\xa9\xef\xbc\x8c\n            do_clear_output(wait=True)  # wait \xe9\x9c\x80\xe8\xa6\x81\xe5\x90\x8c\xe6\xad\xa5\xe5\x90\xa6\xe5\x88\x99\xe4\xbc\x9a\xe5\xbb\xb6\xe8\xbf\x9fclear\n        else:\n            # print(""pid:{} done!"".format(os.getpid()))\n            pass\n\n        self.close_ui_progress()\n\n\nclass AbuBlockProgress(object):\n    """"""\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x98\xbb\xe5\xa1\x9e\xe4\xbb\xbb\xe5\x8a\xa1\xef\xbc\x8c\xe5\x90\xaf\xe5\x8a\xa8\xe5\xad\x90\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xe4\xbb\xbb\xe5\x8a\xa1\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\x8e\xa7\xe5\x88\xb6\xe7\xb1\xbb""""""\n\n    def __init__(self, label, interval=1, max_step=20):\n        """"""\n        :param label: \xe9\x98\xbb\xe5\xa1\x9e\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xe4\xbf\xa1\xe6\x81\xaf\n        :param interval: \xe9\x98\xbb\xe5\xa1\x9e\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x97\xb4\xe9\x9a\x94\n        :param max_step: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x9c\x80\xe5\xa4\xa7\xe6\x98\xbe\xe7\xa4\xba\xe7\xb2\x92\xe5\xba\xa6\n        """"""\n        self.label = label\n        self.interval = interval\n        self.sub_process = None\n        self.max_step = max_step\n\n    def __enter__(self):\n        """"""\xe5\x88\x9b\xe5\xbb\xba\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x81\x9a\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba""""""\n\n        def progress_interval(interval, label):\n            count = 1\n            while True:\n                p_str = \'*^{}s\'.format(int(count * 3))\n                end = format(\'*\', p_str)\n                progress_str = \'{}{}\'.format(label, end)\n                do_clear_output()\n                # clear_std_output()\n                print(progress_str)\n                count += 1\n                if count > self.max_step:\n                    count = 1\n                time.sleep(interval)\n\n        self.sub_process = run_in_subprocess(progress_interval, self.interval, self.label)\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        """"""\xe7\xbb\x93\xe6\x9d\x9f\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x8c\xe6\xb8\x85\xe7\x90\x86\xe8\xbe\x93\xe5\x87\xba""""""\n        if self.sub_process is not None and self.sub_process.is_alive():\n            self.sub_process.terminate()\n            do_clear_output()\n            # clear_std_output()\n\n\nclass AbuProgress(object):\n    """"""\xe5\x8d\x95\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x88\xe4\xb8\xbb\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x89\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\x8e\xa7\xe5\x88\xb6\xe7\xb1\xbb""""""\n\n    # \xe8\xbf\x87\xe6\xbb\xa4DeprecationWarning: Widget._keys_default is deprecated in traitlets 4.1: use @default decorator instead.\n    @warnings_filter\n    def __init__(self, total, a_progress, label=None):\n        """"""\n        \xe5\xa4\x96\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8eg\xef\xbc\x9a\n            progess = AbuProgress(stock_df.shape[0], 0, \'merging {}\'.format(m))\n            for i, symbol in enumerate(stock_df[\'symbol\']):\n                progess.show(i + 1)\n        :param total: \xe6\x80\xbb\xe4\xbb\xbb\xe5\x8a\xa1\xe6\x95\xb0\xe9\x87\x8f\n        :param a_progress: \xe5\x88\x9d\xe5\xa7\x8b\xe8\xbf\x9b\xe5\xba\xa6\n        :param label: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xbalabel\n        """"""\n        self._total = total\n        self._progress = a_progress\n        self._label = label\n        self.f = sys.stdout\n        self.progress_widget = None\n\n    def __enter__(self):\n        """"""\xe5\x88\x9b\xe5\xbb\xba\xe5\xad\x90\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x81\x9a\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba""""""\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.f.write(\'\\r\')\n        if self.progress_widget is not None:\n            self.progress_widget.close()\n\n    @property\n    def progress(self):\n        """"""property\xe8\x8e\xb7\xe5\x8f\x96self._progress""""""\n        return self._progress\n\n    @progress.setter\n    def progress(self, a_progress):\n        """"""rogress.setter\xe8\xae\xbe\xe7\xbd\xaeprogress""""""\n        if a_progress > self._total:\n            self._progress = self._total\n        elif a_progress < 0:\n            self._progress = 0\n        else:\n            self._progress = a_progress\n\n    def show(self, a_progress=None, ext=\'\', p_format=""{}:{}:{}%""):\n        """"""\n        \xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xbb\xe6\x96\xb9\xe6\xb3\x95\n        :param ext: \xe5\x8f\xaf\xe4\xbb\xa5\xe6\xb7\xbb\xe5\x8a\xa0\xe9\xa2\x9d\xe5\xa4\x96\xe7\x9a\x84\xe6\x98\xbe\xe7\xa4\xba\xe6\x96\x87\xe5\xad\x97\xef\xbc\x8cstr\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\xa9\xba\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        :param a_progress: \xe9\xbb\x98\xe8\xae\xa4None, \xe5\x8d\xb3\xe4\xbd\xbf\xe7\x94\xa8\xe7\xb1\xbb\xe5\x86\x85\xe9\x83\xa8\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe8\xbf\xad\xe4\xbb\xa3\xe6\xac\xa1\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\n        :param p_format: \xe8\xbf\x9b\xe5\xba\xa6\xe6\x98\xbe\xe7\xa4\xba\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4{}: {}%\xef\xbc\x8c\xe5\x8d\xb3\'self._label:round(self._progress / self._total * 100, 2))%\'\n        """"""\n        self.progress = a_progress if a_progress is not None else self.progress + 1\n        ps = round(self._progress / self._total * 100, 2)\n\n        if self._label is not None:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96label\xe6\xb2\xa1\xe6\x9c\x89\xe5\xb0\xb1\xe5\x8f\xaa\xe6\x98\xbe\xe7\xa4\xbaui\xe8\xbf\x9b\xe5\xba\xa6\n            self.f.write(\'\\r\')\n            self.f.write(p_format.format(self._label, ext, ps))\n\n        if ABuEnv.g_is_ipython:\n            if self.progress_widget is None:\n                self.progress_widget = FloatProgress(value=0, min=0, max=100)\n                display(self.progress_widget)\n            self.progress_widget.value = ps\n\n        # \xe8\xbf\x99\xe6\xa0\xb7\xe4\xbc\x9a\xe5\x87\xba\xe7\x8e\xb0\xe4\xbd\x99\xe6\x95\xb0\xe7\xbb\x93\xe6\x9d\x9f\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe5\xb0\xbd\xe9\x87\x8f\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe6\x8e\xa7\xe5\x88\xb6\xe7\xbb\x93\xe6\x9d\x9f\n        if self._progress == self._total:\n            self.f.write(\'\\r\')\n            if self.progress_widget is not None:\n                self.progress_widget.close()\n'"
abupy/UtilBu/ABuRegUtil.py,13,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\x8b\x9f\xe5\x90\x88\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport math\nimport logging\n\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom statsmodels import api as sm, regression\nfrom sklearn import metrics\n\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuPdHelper import pd_rolling_mean\nfrom ..UtilBu.ABuDTUtil import plt_show\nfrom ..UtilBu.ABuStatsUtil import euclidean_distance_xy, manhattan_distances_xy, cosine_distances_xy\n\n\nlog_func = logging.info if ABuEnv.g_is_ipython else print\n\n\ndef regress_xy(x, y, mode=True, zoom=False, show=False):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8statsmodels.regression.linear_model\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xae\x80\xe5\x8d\x95\xe6\x8b\x9f\xe5\x90\x88\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9emodel\xe5\x92\x8cy_fit\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param mode: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81mode\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81y_fit\xe4\xb8\x94\xe6\x95\x88\xe7\x8e\x87\xe9\x9c\x80\xe8\xa6\x81\xe9\xab\x98\xe6\x97\xb6\xe5\xba\x94\xe8\xae\xbe\xe7\xbd\xaeFalse, \xe6\x95\x88\xe7\x8e\x87\xe5\xb7\xae\xe5\xbc\x82\xef\xbc\x9a\n                 mode=False: 1000 loops, best of 3: 778 \xc2\xb5s per loop\n                 mode=True:  1000 loops, best of 3: 1.23 ms per loop\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbc\xa9\xe6\x94\xbex,y\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\n    :return: model, y_fit, \xe5\xa6\x82\xe6\x9e\x9cmode=False\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84model=None\n    """"""\n    if zoom:\n        # \xe5\xb0\x86y\xe5\x80\xbc zoom\xe5\x88\xb0\xe4\xb8\x8ex\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8f\xaf\xe7\x94\xa8ABuScalerUtil.scaler_xy, \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8d\xe7\xae\xa1x > y\xe8\xbf\x98y > x\xe9\x83\xbd\xe6\x8b\xbf x.max() / y.max()\n        # TODO ABuScalerUtil\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\xba\xe5\xae\x9a\xe8\xbd\xb4\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\n        zoom_factor = x.max() / y.max()\n        y = zoom_factor * y\n\n    if mode:\n        # \xe5\x8a\xa0\xe5\xb8\xb8\xe6\x95\xb01\xe5\x88\x97\n        x = sm.add_constant(x)\n        model = regression.linear_model.OLS(y, x).fit()\n\n        intercept = model.params[0]\n        rad = model.params[1]\n        # y = kx + b, x\xe5\x8f\x96x[:, 1]\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbaadd_constant\n        y_fit = x[:, 1] * rad + intercept\n    else:\n        # noinspection PyCallingNonCallable\n        y_fit = np.polynomial.Chebyshev.fit(x, y, 1)(x)\n        model = None\n    if show:\n        with plt_show():\n            # \xe5\x8f\x96-1\xe5\x9b\xa0\xe4\xb8\xba\xe6\x9c\x89OLS add_constant\xe5\x92\x8cChebyshev\xe6\xb2\xa1\xe6\x9c\x89add_constant\xe7\x9a\x84\xe4\xb8\xa4\xe7\xa7\x8d\xe6\x83\x85\xe5\x86\xb5\n            x_plot = x[:, -1]\n            # \xe7\xbb\x98\xe5\x88\xb6x\xef\xbc\x8c y\n            plt.plot(x_plot, y)\n            # \xe7\xbb\x98\xe5\x88\xb6x\xef\xbc\x8c \xe6\x8b\x9f\xe5\x90\x88\xe7\x9a\x84y\n            plt.plot(x_plot, y_fit)\n\n        with plt_show():\n            # \xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8sns\xe7\xbb\x98\xe5\x88\xb6\xef\xbc\x8c\xe5\xaf\xb9\xe6\xaf\x94\xe6\x8b\x9f\xe5\x90\x88\xe7\xbb\x93\xe6\x9e\x9c\n            sns.regplot(x=x_plot, y=y)\n    return model, y_fit\n\n\ndef regress_y(y, mode=True, zoom=False, show=False):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8statsmodels.regression.linear_model\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xae\x80\xe5\x8d\x95\xe6\x8b\x9f\xe5\x90\x88\xe6\x93\x8d\xe4\xbd\x9c, \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe5\x8f\xaa\xe6\x8f\x90\xe4\xbe\x9by\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\n    x\xe4\xbd\xbf\xe7\x94\xa8np.arange(0, len(y))\xe5\xa1\xab\xe5\x85\x85\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param mode: \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81mode\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81y_fit\xe4\xb8\x94\xe6\x95\x88\xe7\x8e\x87\xe9\x9c\x80\xe8\xa6\x81\xe9\xab\x98\xe6\x97\xb6\xe5\xba\x94\xe8\xae\xbe\xe7\xbd\xaeFalse, \xe6\x95\x88\xe7\x8e\x87\xe5\xb7\xae\xe5\xbc\x82\xef\xbc\x9a\n             mode=False: 1000 loops, best of 3: 778 \xc2\xb5s per loop\n             mode=True:  1000 loops, best of 3: 1.23 ms per loop\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe7\xbc\xa9\xe6\x94\xbex,y\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\n    :return: model, y_fit, \xe5\xa6\x82\xe6\x9e\x9cmode=False\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84model=None\n    """"""\n    x = np.arange(0, len(y))\n    return regress_xy(x, y, mode=mode, zoom=zoom, show=show)\n\n\ndef calc_regress_deg(y, show=True):\n    """"""\n    \xe5\xb0\x86y\xe5\x80\xbc zoom\xe5\x88\xb0\xe4\xb8\x8ex\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe5\x86\x8dfit\xe5\x87\xba\xe5\xbc\xa7\xe5\xba\xa6\xe8\xbd\xac\xe6\x88\x90\xe8\xa7\x92\xe5\xba\xa6\n    1 \xe5\xa4\x9a\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\xaf\x94\xe8\xbe\x83\xe6\x8f\x90\xe4\xbe\x9b\xe9\x87\x8f\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xef\xbc\x8c\xe5\x8f\xaa\xe8\xa6\x81\xe5\x90\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\x97\xb6\xe9\x97\xb4\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\n    2 \xe6\x8e\xa5\xe8\xbf\x91\xe8\xa7\x86\xe8\xa7\x89\xe6\x84\x9f\xe5\x8f\x97\xe5\x88\xb0\xe7\x9a\x84\xe8\xa7\x92\xe5\xba\xa6\n    :param y:  \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x93\xe6\x9e\x9c\n    :return: deg\xe8\xa7\x92\xe5\xba\xa6float\xe5\x80\xbc\n    """"""\n    # \xe5\xb0\x86y\xe5\x80\xbc zoom\xe5\x88\xb0\xe4\xb8\x8ex\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\n    model, _ = regress_y(y, mode=True, zoom=True, show=show)\n    rad = model.params[1]\n    # fit\xe5\x87\xba\xe5\xbc\xa7\xe5\xba\xa6\xe8\xbd\xac\xe6\x88\x90\xe8\xa7\x92\xe5\xba\xa6\n    deg = np.rad2deg(rad)\n    return deg\n\n\ndef regress_xy_polynomial(x, y, poly=1, zoom=False, show=False):\n    """"""\n    \xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88, \xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0poly\xe5\x86\xb3\xe5\xae\x9a\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param poly: \xe5\x87\xa0\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cint\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\xe6\x8b\x9f\xe5\x90\x88\xe7\xbb\x93\xe6\x9e\x9c\n    :return: y_fit\n    """"""\n    if zoom:\n        # \xe5\xb0\x86y\xe5\x80\xbc zoom\xe5\x88\xb0\xe4\xb8\x8ex\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8f\xaf\xe7\x94\xa8ABuScalerUtil.scaler_xy, \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8d\xe7\xae\xa1x > y\xe8\xbf\x98y > x\xe9\x83\xbd\xe6\x8b\xbf x.max() / y.max()\n        zoom_factor = x.max() / y.max()\n        y = zoom_factor * y\n\n    polynomial = np.polynomial.Chebyshev.fit(x, y, poly)\n    # noinspection PyCallingNonCallable\n    y_fit = polynomial(x)\n\n    if show:\n        with plt_show():\n            # \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\xe6\x8b\x9f\xe5\x90\x88\xe7\xbb\x93\xe6\x9e\x9c\n            plt.plot(x, y)\n            plt.plot(x, y_fit)\n            plt.title(\'{} poly zoom ={}\'.format(poly, zoom))\n\n    return y_fit\n\n\ndef regress_y_polynomial(y, poly=1, zoom=False, show=False):\n    """"""\n    \xe5\xa5\x97\xe6\x8e\xa5regress_xy_polynomial\xe6\x93\x8d\xe4\xbd\x9c, \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xad\xe5\x8f\xaa\xe6\x8f\x90\xe4\xbe\x9by\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8cx\xe4\xbd\xbf\xe7\x94\xa8np.arange(0, len(y))\xe5\xa1\xab\xe5\x85\x85\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param poly: \xe5\x87\xa0\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cint\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x98\xbe\xe7\xa4\xba\xe6\x8b\x9f\xe5\x90\x88\xe7\xbb\x93\xe6\x9e\x9c\n    :return: y_fit\n    """"""\n    x = np.arange(0, len(y))\n    return regress_xy_polynomial(x, y, poly=poly, zoom=zoom, show=show)\n\n\ndef metrics_mae(y, y_fit, show=True):\n    """"""\n    \xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\xe7\x9a\x84MAE\xef\xbc\x9a\n         MAE = sum(np.abs(y - y_fit)) / len(y)\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y_fit: \xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xbamae\xe5\x80\xbc\n    :return: \xe8\xbf\x94\xe5\x9b\x9emae\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    mae = metrics.mean_absolute_error(y, y_fit)\n    if show:\n        log_func(\'MAE={}\'.format(mae))\n    return mae\n\n\ndef metrics_mse(y, y_fit, show=True):\n    """"""\n    \xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\xe7\x9a\x84MSE\xef\xbc\x9a\n         MSE = sum(np.square(y - y_fit)) / len(y)\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y_fit: \xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xbaMSE\xe5\x80\xbc\n    :return: \xe8\xbf\x94\xe5\x9b\x9eMSE\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    mse = metrics.mean_squared_error(y, y_fit)\n    if show:\n        log_func(\'MSE={}\'.format(mse))\n    return mse\n\n\ndef metrics_rmse(y, y_fit, show=True):\n    """"""\n    \xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\xe7\x9a\x84RMSE\xef\xbc\x9a\n         RMSE = np.sqrt(sum(np.square(y - y_fit)) / len(y))\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y_fit: \xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xbaRMSE\xe5\x80\xbc\n    :return: \xe8\xbf\x94\xe5\x9b\x9eRMSE\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    rmse = np.sqrt(metrics.mean_squared_error(y, y_fit))\n    if show:\n        log_func(\'RMSE={}\'.format(rmse))\n    return rmse\n\n\ndef metrics_euclidean(y, y_fit, show=True):\n    """"""\n    \xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\xe7\x9a\x84euclidean\xe6\xac\xa7\xe5\xbc\x8f\xe8\xb7\x9d\xe7\xa6\xbb(L2\xe8\x8c\x83\xe6\x95\xb0)\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y_fit: \xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xba\xe6\xac\xa7\xe5\xbc\x8f\xe8\xb7\x9d\xe7\xa6\xbb(L2\xe8\x8c\x83\xe6\x95\xb0)\xe5\x80\xbc\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe6\xac\xa7\xe5\xbc\x8f\xe8\xb7\x9d\xe7\xa6\xbb(L2\xe8\x8c\x83\xe6\x95\xb0)\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    euclidean = euclidean_distance_xy(y, y_fit, to_similar=False)\n    if show:\n        log_func(\'euclidean={}\'.format(euclidean))\n    return euclidean\n\n\ndef metrics_manhattan(y, y_fit, show=True):\n    """"""\n    \xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\xe7\x9a\x84manhattan\xe6\x9b\xbc\xe5\x93\x88\xe9\xa1\xbf\xe8\xb7\x9d\xe7\xa6\xbb(L1\xe8\x8c\x83\xe6\x95\xb0)\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y_fit: \xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xba\xe6\x9b\xbc\xe5\x93\x88\xe9\xa1\xbf\xe8\xb7\x9d\xe7\xa6\xbb(L1\xe8\x8c\x83\xe6\x95\xb0)\xe5\x80\xbc\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe6\x9b\xbc\xe5\x93\x88\xe9\xa1\xbf\xe8\xb7\x9d\xe7\xa6\xbb(L1\xe8\x8c\x83\xe6\x95\xb0)\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    manhattan = manhattan_distances_xy(y, y_fit, to_similar=False)\n    if show:\n        log_func(\'manhattan={}\'.format(manhattan))\n    return manhattan\n\n\ndef metrics_cosine(y, y_fit, show=True):\n    """"""\n    \xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xba\x8f\xe5\x88\x97\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x90\x8e\xe7\x9a\x84y_fit\xe7\x9a\x84cosine\xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y_fit: \xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbe\x93\xe5\x87\xba\xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x80\xbc\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe6\x9b\xbc\xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x80\xbc\xef\xbc\x8cfloat\n    """"""\n    cosine = cosine_distances_xy(y, y_fit, to_similar=False)\n    if show:\n        log_func(\'cosine={}\'.format(cosine))\n    return cosine\n\n\ndef valid_poly(y, poly=1, zoom=False, show=True, metrics_func=metrics_rmse):\n    """"""\n    \xe9\xaa\x8c\xe8\xaf\x81poly\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d1\xef\xbc\x89\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\xe6\x98\xaf\xe5\x90\xa6\xe8\x83\xbd\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\n    \xe5\x9f\xba\xe7\xa1\x80\xe6\x80\x9d\xe8\xb7\xaf\xef\xbc\x9a\n             1. \xe5\xaf\xb9\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe5\x9d\x87\xe7\xba\xbf\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x9d math.ceil(len(y) / 4)\n             eg\xef\xbc\x9a\n                \xe5\x8e\x9f\xe5\xa7\x8by\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x9d504 \xef\xbc\x8d> rolling_window = math.ceil(len(y) / 4) = 126\n             2. \xe9\x80\x9a\xe8\xbf\x87pd_rolling_mean\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe5\x9d\x87\xe7\xba\xbf\xe7\x9a\x84\xe5\x80\xbcy_roll_mean\n             3  \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_mean\n             3. \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97regress_xy_polynomial\xe8\xae\xa1\xe7\xae\x97\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\n             4. \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_fit\n             5. \xe5\xa6\x82\xe6\x9e\x9cdistance_fit <= distance_mean\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param poly: \xe5\x87\xa0\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8cint\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9y\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xef\xbc\x8c\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param metrics_func: \xe5\xba\xa6\xe9\x87\x8f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x92\x8c\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\n                         \xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8metrics_rmse\n    :return: \xe6\x98\xaf\xe5\x90\xa6poly\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n    """"""\n    valid = False\n    x = np.arange(0, len(y))\n    if zoom:\n        # \xe5\xb0\x86y\xe5\x80\xbc zoom\xe5\x88\xb0\xe4\xb8\x8ex\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8f\xaf\xe7\x94\xa8ABuScalerUtil.scaler_xy, \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8d\xe7\xae\xa1x > y\xe8\xbf\x98y > x\xe9\x83\xbd\xe6\x8b\xbf x.max() / y.max()\n        zoom_factor = x.max() / y.max()\n        y = zoom_factor * y\n    # \xe5\xaf\xb9\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe5\x9d\x87\xe7\xba\xbf\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x9d math.ceil(len(y) / 4)\n    rolling_window = int(math.ceil(len(y) / 4))\n    # \xe9\x80\x9a\xe8\xbf\x87pd_rolling_mean\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe5\x9d\x87\xe7\xba\xbf\xe7\x9a\x84\xe5\x80\xbcy_roll_mean\n    y_roll_mean = pd_rolling_mean(y, window=rolling_window, min_periods=1)\n    # \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_mean\n    distance_mean = metrics_func(y, y_roll_mean, show=False)\n\n    # \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97regress_xy_polynomial\xe8\xae\xa1\xe7\xae\x97\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit, \xe5\xa4\x96\xe9\x9d\xa2\xe5\x81\x9azoom\xe4\xba\x86\xe6\x89\x80\xe4\xbb\xa5zoom=False\n    y_fit = regress_xy_polynomial(x, y, poly=poly, zoom=False, show=False)\n    # \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_fit\n    distance_fit = metrics_func(y, y_fit, show=False)\n    # \xe5\xa6\x82\xe6\x9e\x9cdistance_fit <= distance_mean\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n    if distance_fit <= distance_mean:\n        valid = True\n    if show:\n        with plt_show():\n            # \xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xef\xbc\x8c\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n            plt.plot(x, y)\n            plt.plot(x, y_roll_mean)\n            plt.plot(x, y_fit)\n            plt.legend([\'close\', \'rolling window={}\'.format(rolling_window), \'y_fit poly={}\'.format(poly)])\n            log_func(\'metrics_func rolling_mean={}, metrics_func y_fit={}\'.format(distance_mean, distance_fit))\n    return valid\n\n\ndef least_valid_poly(y, zoom=False, show=True, metrics_func=metrics_rmse):\n    """"""\n    \xe5\xa5\x97\xe6\x8e\xa5valid_poly\xef\xbc\x8c\xe6\xa3\x80\xe6\xb5\x8b\xe8\x87\xb3\xe5\xb0\x91poly\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9y\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xef\xbc\x8c\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param metrics_func: \xe5\xba\xa6\xe9\x87\x8f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x92\x8c\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\n                         \xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8metrics_rmse\n    :return: \xe8\x87\xb3\xe5\xb0\x91poly\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8cint\n    """"""\n    poly = 1\n    while poly < 100:\n        valid = valid_poly(y, poly=poly, zoom=zoom, show=False, metrics_func=metrics_func)\n        if valid:\n            if show:\n                # \xe8\xbf\x99\xe9\x87\x8c\xe5\xa6\x82\xe6\x9e\x9cshow\xef\xbc\x8c\xe5\xb0\xb1\xe5\x86\x8d\xe6\x9d\xa5\xe4\xba\x86\xe4\xb8\x80\xe9\x81\x8d\xef\xbc\x8c\xe6\xb2\xa1\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\x9c\xa8\xe8\x80\x83\xe8\x99\x91\xe6\x95\x88\xe7\x8e\x87\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8show\n                valid_poly(y, poly=poly, zoom=zoom, show=True, metrics_func=metrics_func)\n            break\n        poly += 1\n    return poly\n\n\ndef search_best_poly(y, poly_min=1, poly_max=100, zoom=False, show=True, metrics_func=metrics_rmse):\n    """"""\n    \xe5\xaf\xbb\xe6\x89\xbepoly\xef\xbc\x881\xef\xbc\x8d100\xef\xbc\x89\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\n    \xe5\x9f\xba\xe7\xa1\x80\xe6\x80\x9d\xe8\xb7\xaf\xef\xbc\x9a\n             1. \xe5\xaf\xb9\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe5\x9d\x87\xe7\xba\xbf\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x9d math.ceil(len(y) / 4)\n             eg\xef\xbc\x9a\n                \xe5\x8e\x9f\xe5\xa7\x8by\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x9d504 \xef\xbc\x8d> rolling_window = math.ceil(len(y) / 4) = 126\n             2. \xe9\x80\x9a\xe8\xbf\x87pd_rolling_mean\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe5\x9d\x87\xe7\xba\xbf\xe7\x9a\x84\xe5\x80\xbcy_roll_mean\n             3  \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_mean\n             3. \xe8\xbf\xad\xe4\xbb\xa3\xe8\xae\xa1\xe7\xae\x971-100poly\xe6\xac\xa1regress_xy_polynomial\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbfy_fit\n             4. \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_fit\n             5. \xe5\xa6\x82\xe6\x9e\x9cdistance_fit <= distance_mean* 0.6\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\x81\x9c\xe6\xad\xa2\xe8\xbf\xad\xe4\xbb\xa3\n             6. \xe8\xbf\x94\xe5\x9b\x9e\xe5\x81\x9c\xe6\xad\xa2\xe8\xbf\xad\xe4\xbb\xa3\xe6\x97\xb6\xe7\x9a\x84poly\xe6\xac\xa1\xe6\x95\xb0\n    :param y: \xe5\x8e\x9f\xe5\xa7\x8b\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param poly_min: \xe5\xaf\xbb\xe6\x89\xbe\xe6\x9c\x80\xe4\xbd\xb3\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x91\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8ceg\xef\xbc\x8c2\n    :param poly_max: \xe5\xaf\xbb\xe6\x89\xbe\xe6\x9c\x80\xe4\xbd\xb3\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\x9a\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x8ceg\xef\xbc\x9a20\n    :param zoom: \xe6\x98\xaf\xe5\x90\xa6\xe5\xaf\xb9y\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbc\xa9\xe6\x94\xbe\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xef\xbc\x8c\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n    :param metrics_func: \xe5\xba\xa6\xe9\x87\x8f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x92\x8c\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\n                         \xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8metrics_rmse\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe5\x81\x9c\xe6\xad\xa2\xe8\xbf\xad\xe4\xbb\xa3\xe6\x97\xb6\xe7\x9a\x84poly\xe6\xac\xa1\xe6\x95\xb0\n    """"""\n    x = np.arange(0, len(y))\n    if zoom:\n        # \xe5\xb0\x86y\xe5\x80\xbc zoom\xe5\x88\xb0\xe4\xb8\x8ex\xe4\xb8\x80\xe4\xb8\xaa\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe4\xb8\x8d\xe5\x8f\xaf\xe7\x94\xa8ABuScalerUtil.scaler_xy, \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8d\xe7\xae\xa1x > y\xe8\xbf\x98y > x\xe9\x83\xbd\xe6\x8b\xbf x.max() / y.max()\n        zoom_factor = x.max() / y.max()\n        y = zoom_factor * y\n    # \xe5\xaf\xb9\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe5\x9d\x87\xe7\xba\xbf\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe7\xaa\x97\xe5\x8f\xa3\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x9d math.ceil(len(y) / 4)\n    rolling_window = int(math.ceil(len(y) / 4))\n    # \xe9\x80\x9a\xe8\xbf\x87pd_rolling_mean\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe5\x9d\x87\xe7\xba\xbf\xe7\x9a\x84\xe5\x80\xbcy_roll_mean\n    y_roll_mean = pd_rolling_mean(y, window=rolling_window, min_periods=1)\n    # \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_mean\n    distance_mean = metrics_func(y, y_roll_mean, show=False)\n    poly = poly_min\n    while poly < poly_max:\n        # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xae\xa1\xe7\xae\x971-100poly\xe6\xac\xa1regress_xy_polynomial\xe7\x9a\x84\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbfy_fit, \xe5\xa4\x96\xe9\x9d\xa2\xe5\x81\x9azoom\xe4\xba\x86\xe6\x89\x80\xe4\xbb\xa5zoom=False\n        y_fit = regress_xy_polynomial(x, y, poly=poly, zoom=False, show=False)\n        # \xe4\xbd\xbf\xe7\x94\xa8metrics_func\xe6\x96\xb9\xe6\xb3\x95\xe5\xba\xa6\xe9\x87\x8f\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbbdistance_fit\n        distance_fit = metrics_func(y, y_fit, show=False)\n        if distance_fit <= distance_mean * 0.6:\n            # \xe5\xa6\x82\xe6\x9e\x9cdistance_fit <= distance_mean* 0.6\xe5\x8d\xb3\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\x81\x9c\xe6\xad\xa2\xe8\xbf\xad\xe4\xbb\xa3\n            if show:\n                with plt_show():\n                    # \xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xef\xbc\x8c\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n                    plt.plot(x, y)\n                    plt.plot(x, y_roll_mean)\n                    plt.plot(x, y_fit)\n                    plt.legend([\'close\', \'rolling window={}\'.format(rolling_window), \'y_fit poly={}\'.format(poly)])\n                    log_func(\'metrics_func rolling_mean={}, metrics_func y_fit={}\'.format(distance_mean, distance_fit))\n            break\n        poly += 1\n    return poly\n'"
abupy/UtilBu/ABuScalerUtil.py,21,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe6\xa0\x87\xe5\x87\x86\xe8\xa7\x84\xe8\x8c\x83\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport numpy as np\nimport pandas as pd\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ndef scaler_log10(group):\n    """"""\n    \xe5\xaf\xb9\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84group\xe8\xbf\x9b\xe8\xa1\x8cnp.log10\n        eg.\n                pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n\n                input:\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n                2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n                2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n                2014-07-30\t228.92\t219.13\t16.83\t11.780\t587.42\t21.185\t98.15\n\n                output:\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t2.3494\t2.3551\t1.1853\t1.0831\t2.7701\t1.3294\t1.9898\n                2014-07-28\t2.3518\t2.3537\t1.2076\t1.0952\t2.7713\t1.3334\t1.9957\n                2014-07-29\t2.3522\t2.3424\t1.2240\t1.0871\t2.7676\t1.3261\t1.9929\n                2014-07-30\t2.3597\t2.3407\t1.2261\t1.0711\t2.7689\t1.3260\t1.9919\n\n                pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n\n                input:\n                2014-07-25    223.57\n                2014-07-28    224.82\n                2014-07-29    225.01\n                2014-07-30    228.92\n                2014-07-31    223.30\n\n                output:\n                2014-07-25    2.3494\n                2014-07-28    2.3518\n                2014-07-29    2.3522\n                2014-07-30    2.3597\n                2014-07-31    2.3489\n\n\n                np.array\n\n                input:\n                array([[ 223.57 ,  226.5  ,   15.32 , ...,  589.02 ,   21.349,   97.67 ],\n               [ 224.82 ,  225.8  ,   16.13 , ...,  590.6  ,   21.548,   99.02 ],\n               [ 225.01 ,  220.   ,   16.75 , ...,  585.61 ,   21.19 ,   98.38 ],\n               ...,\n               [ 222.27 ,  160.88 ,   25.5  , ...,  742.74 ,   13.51 ,   98.66 ],\n               [ 230.01 ,  160.25 ,   25.57 , ...,  739.77 ,   13.39 ,   97.34 ],\n               [ 225.93 ,  163.09 ,   24.75 , ...,  740.92 ,   13.655,   97.76 ]])\n\n               output:\n               array([[ 2.3494,  2.3551,  1.1853, ...,  2.7701,  1.3294,  1.9898],\n               [ 2.3518,  2.3537,  1.2076, ...,  2.7713,  1.3334,  1.9957],\n               [ 2.3522,  2.3424,  1.224 , ...,  2.7676,  1.3261,  1.9929],\n               ...,\n               [ 2.3469,  2.2065,  1.4065, ...,  2.8708,  1.1307,  1.9941],\n               [ 2.3617,  2.2048,  1.4077, ...,  2.8691,  1.1268,  1.9883],\n               [ 2.354 ,  2.2124,  1.3936, ...,  2.8698,  1.1353,  1.9902]])\n\n    :param group: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, np.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return np.log10(group)\n\n\ndef scaler_mm(group):\n    """"""\n    \xe5\xaf\xb9\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84group\xe8\xbf\x9b\xe8\xa1\x8c(group - group.min()) / (group.max() - group.min())\n            eg.\n                pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n\n                input:\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n                2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n                2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n                2014-07-30\t228.92\t219.13\t16.83\t11.780\t587.42\t21.185\t98.15\n\n                output:\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t0.5612\t0.7979\t0.0973\t0.9493\t0.3396\t0.5597\t0.1718\n                2014-07-28\t0.5700\t0.7920\t0.1305\t0.9913\t0.3452\t0.5699\t0.2035\n                2014-07-29\t0.5713\t0.7428\t0.1559\t0.9629\t0.3276\t0.5517\t0.1885\n                2014-07-30\t0.5988\t0.7354\t0.1592\t0.9084\t0.3340\t0.5514\t0.1831\n\n                pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n\n                input:\n                2014-07-25    223.57\n                2014-07-28    224.82\n                2014-07-29    225.01\n                2014-07-30    228.92\n                2014-07-31    223.30\n\n                output:\n                2014-07-25    0.5612\n                2014-07-28    0.5700\n                2014-07-29    0.5713\n                2014-07-30    0.5988\n                2014-07-31    0.5593\n\n\n                np.array\n\n                input:\n                array([[ 223.57 ,  226.5  ,   15.32 , ...,  589.02 ,   21.349,   97.67 ],\n               [ 224.82 ,  225.8  ,   16.13 , ...,  590.6  ,   21.548,   99.02 ],\n               [ 225.01 ,  220.   ,   16.75 , ...,  585.61 ,   21.19 ,   98.38 ],\n               ...,\n               [ 222.27 ,  160.88 ,   25.5  , ...,  742.74 ,   13.51 ,   98.66 ],\n               [ 230.01 ,  160.25 ,   25.57 , ...,  739.77 ,   13.39 ,   97.34 ],\n               [ 225.93 ,  163.09 ,   24.75 , ...,  740.92 ,   13.655,   97.76 ]])\n\n               output:\n\n                array([[ 0.2838,  0.2876,  0.0141, ...,  0.7571,  0.0219,  0.1207],\n                       [ 0.2854,  0.2867,  0.0151, ...,  0.7591,  0.0222,  0.1225],\n                       [ 0.2857,  0.2792,  0.0159, ...,  0.7527,  0.0217,  0.1217],\n                       ...,\n                       [ 0.2821,  0.2026,  0.0273, ...,  0.9561,  0.0117,  0.122 ],\n                       [ 0.2921,  0.2018,  0.0274, ...,  0.9523,  0.0116,  0.1203],\n                       [ 0.2868,  0.2055,  0.0263, ...,  0.9538,  0.0119,  0.1209]])\n\n    :param group: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, np.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return (group - group.min()) / (group.max() - group.min())\n\n\ndef scaler_std(group):\n    """"""\n    \xe5\xaf\xb9\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84group\xe8\xbf\x9b\xe8\xa1\x8c(group - group.mean()) / group.std()\n            eg.\n                pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n\n                input:\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n                2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n                2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n                2014-07-30\t228.92\t219.13\t16.83\t11.780\t587.42\t21.185\t98.15\n\n                output:\n\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t-0.1924\t1.2047\t-1.5325\t2.6732\t-0.4127\t0.4478\t-1.1364\n                2014-07-28\t-0.1435\t1.1791\t-1.3850\t2.8601\t-0.3942\t0.4860\t-1.0202\n                2014-07-29\t-0.1361\t0.9677\t-1.2721\t2.7337\t-0.4525\t0.4172\t-1.0753\n                2014-07-30\t0.0169\t0.9360\t-1.2575\t2.4919\t-0.4314\t0.4163\t-1.0951\n\n                pd.Series\xe5\xaf\xb9\xe8\xb1\xa1\n\n                input:\n\n                2014-07-25    223.57\n                2014-07-28    224.82\n                2014-07-29    225.01\n                2014-07-30    228.92\n                2014-07-31    223.30\n\n                output:\n\n                2014-07-25   -0.1924\n                2014-07-28   -0.1435\n                2014-07-29   -0.1361\n                2014-07-30    0.0169\n                2014-07-31   -0.2030\n\n\n                np.array\n\n                input:\n                array([[ 223.57 ,  226.5  ,   15.32 , ...,  589.02 ,   21.349,   97.67 ],\n               [ 224.82 ,  225.8  ,   16.13 , ...,  590.6  ,   21.548,   99.02 ],\n               [ 225.01 ,  220.   ,   16.75 , ...,  585.61 ,   21.19 ,   98.38 ],\n               ...,\n               [ 222.27 ,  160.88 ,   25.5  , ...,  742.74 ,   13.51 ,   98.66 ],\n               [ 230.01 ,  160.25 ,   25.57 , ...,  739.77 ,   13.39 ,   97.34 ],\n               [ 225.93 ,  163.09 ,   24.75 , ...,  740.92 ,   13.655,   97.76 ]])\n\n               output:\n\n                array([[ 0.2497,  0.264 , -0.7675, ...,  2.0348, -0.738 , -0.3652],\n                       [ 0.2558,  0.2606, -0.7635, ...,  2.0425, -0.7371, -0.3587],\n                       [ 0.2568,  0.2323, -0.7605, ...,  2.0181, -0.7388, -0.3618],\n                       ...,\n                       [ 0.2434, -0.0565, -0.7178, ...,  2.7857, -0.7763, -0.3604],\n                       [ 0.2812, -0.0596, -0.7174, ...,  2.7712, -0.7769, -0.3669],\n                       [ 0.2612, -0.0457, -0.7214, ...,  2.7768, -0.7756, -0.3648]])\n\n    :param group: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, np.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return (group - group.mean()) / group.std()\n\n\ndef scaler_one(group):\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xba1.0\xe5\xbc\x80\xe5\xa7\x8b\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\n        eg: group\n            2011-07-28    9820.0\n            2011-07-29    9845.0\n            2011-08-01    9685.0\n            2011-08-02    9653.0\n            2011-08-03    9549.0\n            2011-08-04    9345.0\n            2011-08-05    9114.8\n            2011-08-08    8766.8\n            2011-08-09    8750.0\n            2011-08-10    8646.0\n                           ...\n            2017-07-13    5864.5\n            2017-07-14    5928.0\n            2017-07-17    6004.5\n            2017-07-18    6004.0\n            2017-07-19    5966.0\n            2017-07-20    5982.0\n            2017-07-21    5997.0\n            2017-07-24    6033.5\n            2017-07-25    6261.0\n            2017-07-26    6306.5\n\n        scaler_one(group)\n\n            2011-07-28    1.0000\n            2011-07-29    1.0025\n            2011-08-01    0.9863\n            2011-08-02    0.9830\n            2011-08-03    0.9724\n            2011-08-04    0.9516\n            2011-08-05    0.9282\n            2011-08-08    0.8927\n            2011-08-09    0.8910\n            2011-08-10    0.8804\n                           ...\n            2017-07-13    0.5972\n            2017-07-14    0.6037\n            2017-07-17    0.6115\n            2017-07-18    0.6114\n            2017-07-19    0.6075\n            2017-07-20    0.6092\n            2017-07-21    0.6107\n            2017-07-24    0.6144\n            2017-07-25    0.6376\n            2017-07-26    0.6422\n    :param group: pd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1, pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, np.array\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return group / group[0]\n\n\ndef scaler_matrix(group, type_look=\'look_max\', mean_how=False):\n    """"""\n        \xe5\xb0\x86\xe4\xba\x8c\xe7\xbb\xb4\xe5\xba\x8f\xe5\x88\x97\xe6\x8c\x89\xe7\x85\xa7 type_look \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb4\xe4\xbd\x93\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\xa9\xe6\x94\xbe\xef\xbc\x8c\xe6\x8a\x8a\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\xa9\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe9\x87\x8f\xe7\xba\xa7\xe5\x80\xbc\xe4\xb8\x8a\n\n            eg:\n            group:\n\n                        tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n            2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n            2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n            2014-07-30\t228.92\t219.13\t16.83\t11.780\t587.42\t21.185\t98.15\n\n            if type_look == \'look_max\':\n                group_max = group.max()\n                eg:\n                    group_max:\n\n                    tsla    286.04\n                    bidu    250.34\n                    noah     37.32\n                    sfun     12.52\n                    goog    776.60\n                    vips     30.00\n                    aapl    133.00\n                max = group_max.max()\n                eg:\n                    max = 776.60\n\n                scale_factor = max / group_max\n\n                eg:\n                    scale_factor:\n                    tsla     2.7150\n                    bidu     3.1022\n                    noah    20.8092\n                    sfun    62.0288\n                    goog     1.0000\n                    vips    25.8867\n                    aapl     5.8391\n\n            if type_look == \'look_min\':\n                group_min = group.min()\n                eg:\n                    group_min:\n\n                    tsla    143.67\n                    bidu    132.37\n                    noah     12.95\n                    sfun      4.44\n                    goog    492.55\n                    vips     10.35\n                    aapl     90.34\n                min = group_min.min()\n\n                eg:\n                    min = 4.44\n                scale_factor = min / group_min\n\n                eg:\n                    scale_factor:\n\n                    tsla    0.0309\n                    bidu    0.0335\n                    noah    0.3429\n                    sfun    1.0000\n                    goog    0.0090\n                    vips    0.4290\n                    aapl    0.0491\n\n\n            \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xaa\xe8\xbd\xac\xe7\xbd\xae\xe5\x90\x8e * \xe8\xbe\x93\xe5\x85\xa5group, \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaflook_max:\n            eg.\n                            tsla\t    bidu\t    noah\t    sfun\t    goog\tvips\t    aapl\n                2014-07-25\t606.9936\t702.6440\t318.7972\t751.1682\t589.02\t552.6544\t570.3047\n                2014-07-28\t610.3874\t700.4725\t335.6527\t772.2580\t590.60\t557.8059\t578.1875\n                2014-07-29\t610.9033\t682.4798\t348.5544\t757.9914\t585.61\t548.5385\t574.4504\n                2014-07-30\t621.5189\t679.7809\t350.2191\t730.6987\t587.42\t548.4090\t573.1074\n            \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xaa\xe8\xbd\xac\xe7\xbd\xae\xe5\x90\x8e * \xe8\xbe\x93\xe5\x85\xa5group, \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaflook_min:\n            eg.\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t6.9092\t7.5973\t5.2526\t12.110\t5.3096\t9.1584\t4.8003\n                2014-07-28\t6.9479\t7.5739\t5.5303\t12.450\t5.3239\t9.2438\t4.8666\n                2014-07-29\t6.9537\t7.3793\t5.7429\t12.220\t5.2789\t9.0902\t4.8351\n                2014-07-30\t7.0746\t7.3501\t5.7703\t11.780\t5.2952\t9.0881\t4.8238\n    :param group: pd.DataFrame or np.array\n    :param type_look: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ctype_look in (\'look_max\', \'look_min)\n    :param mean_how: bool, \xe9\xbb\x98\xe8\xae\xa4False, \xe5\x86\xb3\xe7\xad\x96group_max\xe6\x88\x96\xe8\x80\x85group_min\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8max\xef\xbc\x8cmin\xe8\xbf\x98\xe6\x98\xafmean\n    :return: \xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84pd.DataFrame\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe7\xbb\x9f\xe4\xb8\x80\xe6\xa0\xbc\xe5\xbc\x8f\xe4\xb8\xbapd.DataFrame\xef\xbc\x8c\xe4\xb8\x8d\xe7\xae\xa1\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x98\xaf\xe4\xbb\x80\xe4\xb9\x88\n    """"""\n\n    if isinstance(group, list):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x82\xe6\x95\xb0group\xe6\x98\xaflist\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2np.array\xe5\x90\x8e\xe5\x81\x9a\xe4\xb8\xaa\xe6\x97\x8b\xe8\xbd\xac, \xe4\xb8\x8d\xe5\xbb\xba\xe8\xae\xae\xe4\xbc\xa0\xe9\x80\x92list\n        group = np.array(group).T\n\n    if isinstance(group, np.ndarray):\n        # \xe6\x8a\x8anp.ndarray\xe8\xbd\xacDataFrame\xef\xbc\x8c\xe4\xbe\xbf\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\n        group = pd.DataFrame(group)\n\n    # \xe5\x90\x91\xe5\x89\x8d\xe5\xa1\xab\xe5\x85\x85na\xef\xbc\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe8\xa1\xa50\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbb\xb7\xe6\xa0\xbc\xe8\x8c\x83\xe5\x9b\xb4\xe5\xb0\xb1\xe4\xbc\x9a\xe5\x8f\x98\xe5\xa4\xa7\n    group.fillna(method=\'bfill\', inplace=True)\n\n    if type_look == \'look_max\':\n        # \xe5\x90\x91\xe8\xbe\x83\xe5\xa4\xa7\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\n        group_max = group.mean(axis=0) if mean_how else group.max(axis=0)\n        max_v = group_max.max()\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe6\x94\xbe\xe5\xa4\xa7\xe5\x9b\xa0\xe5\xad\x90\n        scale_factor = max_v / group_max\n    elif type_look == \'look_min\':\n        # \xe5\x90\x91\xe8\xbe\x83\xe5\xb0\x8f\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\n        group_min = group.mean(axis=0) if mean_how else group.min(axis=0)\n        min_v = group_min.min()\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe7\xbc\xa9\xe5\xb0\x8f\xe5\x9b\xa0\xe5\xad\x90\n        scale_factor = min_v / group_min\n    else:\n        raise ValueError(\'type_look is error {}\'.format(type_look))\n\n    # \xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe7\xbc\xa9\xe6\x94\xbe\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xaa\xe8\xbd\xac\xe7\xbd\xae\xe5\x90\x8e * \xe8\xbe\x93\xe5\x85\xa5group, \xe5\x8d\xb3\xe4\xb8\xba\xe7\xbb\x93\xe6\x9e\x9c\xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84group\n    return scale_factor.T * group\n\n\ndef scaler_xy(x, y, type_look=\'look_max\', mean_how=True):\n    """"""\n    \xe5\x8f\xaa\xe9\x92\x88\xe5\xaf\xb9\xe4\xbf\xa9\xe4\xb8\xaa\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe5\x9d\x87\xe5\x80\xbc\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96, \xe5\x8f\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe6\x88\x96\xe8\x80\x85\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe5\x90\x8e\xef\xbc\x8c\xe8\xb0\x81\xe7\x9a\x84\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe6\x88\x96\xe8\x80\x85\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe5\xa4\xa7\xe5\xb0\xb1\xe8\xa2\xab\xe8\xae\xa4\xe5\xae\x9a\xe4\xb8\xba\xe6\x98\xaf\xe5\xa4\xa7\xe5\xba\x8f\xe5\x88\x97\xe3\x80\x82\n    \xe6\xa0\xb9\xe6\x8d\xaetype_look\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe9\x80\x89\xe6\x8b\xa9\xe5\x90\x91\xe5\xa4\xa7\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe7\x9c\x8b\xe9\xbd\x90\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe5\xb0\x8f\xe5\xba\x8f\xe5\x88\x97\xe5\x80\xbc\xe7\x9c\x8b\xe9\xbd\x90\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb0\x86\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x8d\xe5\x8f\x98\xef\xbc\x8c\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe8\xa2\xab\xe7\xbc\xa9\xe6\x94\xbe\xef\xbc\x8c\n    \xe5\x8f\xaf\xe4\xbb\xa5\xe8\xa2\xab\xe7\x9c\x8b\xe4\xbd\x9c\xe6\x98\xafscaler_matrix\xe7\x9a\x84\xe7\x89\xb9\xe6\xae\x8a\xe6\x83\x85\xe5\x86\xb5\xe6\x8e\xa5\xe5\x8f\xa3\n\n        eg\xef\xbc\x9a\n            input x:\n                    2014-07-25    223.57\n                    2014-07-28    224.82\n                    2014-07-29    225.01\n                    2014-07-30    228.92\n                    2014-07-31    223.30\n            input y:\n                    2014-07-25    15.32\n                    2014-07-28    16.13\n                    2014-07-29    16.75\n                    2014-07-30    16.83\n                    2014-07-31    16.06\n\n            x, y = ABuScalerUtil.scaler_xy(x, y, type_look=\'look_max\', mean_how=False)\n\n            output y:\n                    2014-07-25    208.3811\n                    2014-07-28    219.3987\n                    2014-07-29    227.8318\n                    2014-07-30    228.9200\n                    2014-07-31    218.4465\n\n            x, y = ABuScalerUtil.scaler_xy(x, y, type_look=\'look_max\', mean_how=True)\n\n            output y:\n                    2014-07-25    212.6588\n                    2014-07-28    223.9025\n                    2014-07-29    232.5088\n                    2014-07-30    233.6192\n                    2014-07-31    222.9308\n\n            x, y = ABuScalerUtil.scaler_xy(x, y, type_look=\'look_min\', mean_how=False)\n            output x:\n                    2014-07-25    16.4367\n                    2014-07-28    16.5286\n                    2014-07-29    16.5425\n                    2014-07-30    16.8300\n                    2014-07-31    16.4168\n\n            x, y = ABuScalerUtil.scaler_xy(x, y, type_look=\'look_min\', mean_how=True)\n            output x:\n                    2014-07-25    16.1060\n                    2014-07-28    16.1961\n                    2014-07-29    16.2098\n                    2014-07-30    16.4915\n                    2014-07-31    16.0866\n    :param x:  pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, np.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param y: pd.Series\xe5\xaf\xb9\xe8\xb1\xa1, np.array\xe5\xaf\xb9\xe8\xb1\xa1\n    :param type_look: str\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8ctype_look in (\'look_max\', \'look_min)\n    :param mean_how: \xe5\x86\xb3\xe5\xae\x9a\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe8\xbf\x98\xe6\x98\xaf\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe6\x9d\xa5\xe5\x86\xb3\xe7\xad\x96\xe5\xba\x8f\xe5\x88\x97\xe6\x9b\xb4\xe5\xa4\xa7\n    :return: \xe7\xbc\xa9\xe6\x94\xbe\xe5\x90\x8e\xe7\x9a\x84x\xef\xbc\x8cy\xef\xbc\x8cpd.Series\xe5\xaf\xb9\xe8\xb1\xa1 or np.array\n    """"""\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafnumpy array\xe8\xa6\x81\xe5\x85\x88\xe5\xa1\xab\xe5\x85\x85nan\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe7\xbb\x9f\xe8\xae\xa1\xe6\x96\xb9\xe6\xb3\x95\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe9\x83\xbd\xe6\x98\xafnan\n    if isinstance(x, np.ndarray):\n        np.nan_to_num(x)\n    if isinstance(y, np.ndarray):\n        np.nan_to_num(y)\n\n    x_max = x.mean() if mean_how else x.max()\n    y_max = y.mean() if mean_how else y.max()\n    if type_look == \'look_max\':\n\n        # \xe5\x90\x91\xe8\xbe\x83\xe5\xa4\xa7\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\n        x, y = (x, x_max / y_max * y) \\\n            if x_max > y_max else (x * y_max / x_max, y)\n    elif type_look == \'look_min\':\n\n        # \xe5\x90\x91\xe8\xbe\x83\xe5\xb0\x8f\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe7\x9c\x8b\xe9\xbd\x90\n        x, y = (x * y_max / x_max, y) \\\n            if x_max > y_max else (x, y * x_max / y_max)\n    else:\n        raise ValueError(\'type_look is error {}\'.format(type_look))\n    return x, y\n'"
abupy/UtilBu/ABuStatsUtil.py,25,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe7\xbb\x9f\xe8\xae\xa1\xe7\x9b\xb8\xe5\x85\xb3\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\ntry:\n    from collections import OrderedDict\nexcept ImportError:\n    from ..ExtBu.odict import OrderedDict\nfrom collections import namedtuple, Iterable\n\nimport logging\nimport math\nimport functools\n\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as scs\nfrom numpy import linalg as la\nfrom sklearn.metrics.pairwise import euclidean_distances, manhattan_distances, cosine_distances\n\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu import ABuScalerUtil\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu.ABuPdHelper import pd_rolling_mean\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\ng_euclidean_safe = True\n\n\n# noinspection PyUnresolvedReferences\ndef _distance_matrix(distance_func, df, scale_end=True, to_similar=False):\n    """"""\n    \xe9\x9d\x9e\xe4\xb8\xa4\xe4\xb8\xa4distance\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe9\x99\x90\xe5\x88\xb6\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\xe4\xb8\x94\xe8\xbe\x93\xe5\x85\xa5\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbapd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]]\n    :param distance_func: \xe8\xae\xa1\xe7\xae\x97\xe8\xb7\x9d\xe7\xa6\xbb\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    :param df: pd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]], \xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xabdf\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n    :param scale_end: \xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: distance_matrix\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n\n    if not callable(distance_func):\n        raise TypeError(\'distance_func must callable!!!\')\n\n    if isinstance(df, np.ndarray):\n        # \xe6\x8a\x8anp.ndarray\xe8\xbd\xacDataFrame\xef\xbc\x8c\xe4\xbe\xbf\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\n        df = pd.DataFrame(df)\n\n    if not isinstance(df, pd.DataFrame):\n        if all(isinstance(arr_item, Iterable) for arr_item in df):\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb9\x9f\xe9\x83\xbd\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\x85\x88\xe8\xbd\xacnp.array\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x86\x8dDataFrame\n            df = pd.DataFrame(np.array(df))\n        else:\n            raise TypeError(\'df must pd.DataFrame object!!!\')\n    # \xe5\x81\x9a\xe5\x88\x97\xe7\x9a\x84distance\xe6\x89\x80\xe4\xbb\xa5df.T\n    distance = distance_func(df.T)\n\n    if scale_end:\n        # TODO \xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xbe\xe7\xbd\xae\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8scaler_mm\n        distance = ABuScalerUtil.scaler_mm(distance)\n        if to_similar:\n            # \xe5\x8f\xaa\xe6\x9c\x89scale_end\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8bto_similar\xe6\x89\x8d\xe4\xbc\x9a\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\xb2\xa1\xe6\x9c\x89\xe6\x84\x8f\xe4\xb9\x89\n            distance = 1 - distance\n\n    # \xe5\xb0\x86\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84distance\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe8\xa1\x8c\xe5\x92\x8c\xe5\x88\x97\xe7\xb4\xa2\xe5\xbc\x95\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8df.columns\n    distance_df = pd.DataFrame(distance, index=df.columns, columns=df.columns)\n    return distance_df\n\n\ndef _distance_xy(distance_func, x, y):\n    """"""\n    \xe4\xb8\xa4\xe4\xb8\xa4distance\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe8\xbe\x93\xe5\x85\xa5x, y\n    :param distance_func: \xe8\xae\xa1\xe7\xae\x97\xe8\xb7\x9d\xe7\xa6\xbb\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :return: float\xe6\x95\xb0\xe5\x80\xbc\n    """"""\n    if hasattr(x, \'shape\') and len(x.shape) == 1:\n        # \xe6\x9c\x89shape \xe4\xbd\x86\xe6\x98\xafeg: (10,)\xe7\xba\xa0\xe6\xad\xa3\xe4\xb8\xba(1, 10)\n        x = x.reshape(1, -1)\n    if hasattr(y, \'shape\') and len(y.shape) == 1:\n        # \xe6\x9c\x89shape \xe4\xbd\x86\xe6\x98\xafeg: (10,)\xe7\xba\xa0\xe6\xad\xa3\xe4\xb8\xba(1, 10)\n        y = y.reshape(1, -1)\n\n    distance = distance_func(x, y)\n    if isinstance(distance, float):\n        return distance\n\n    return distance_func(x, y)[0][0]\n\n\ndef euclidean_distance_xy(x, y, to_similar=False):\n    """"""\n    \xe6\xac\xa7\xe5\xbc\x8f\xe8\xb7\x9d\xe7\xa6\xbb(L2\xe8\x8c\x83\xe6\x95\xb0)\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97distance, g_euclidean_safe\xe6\x8e\xa7\xe5\x88\xb6\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8euclidean_distances\xe8\xae\xa1\xe7\xae\x97\n    \xe8\xbf\x98\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8la.norm\xef\xbc\x8c\xe6\x95\x88\xe7\x8e\x87\xe5\xb7\xae\xe5\x88\xab\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n        euclidean_distances\xef\xbc\x9a 10000 loops, best of 3: 128 \xc2\xb5s per loop\n        la.norm            \xef\xbc\x9a 10000 loops, best of 3: 89.6 \xc2\xb5s per loop\n    \xe5\x9c\xa8\xe9\x9c\x80\xe8\xa6\x81\xe6\x89\xb9\xe9\x87\x8f\xe4\xb8\x94\xe5\xbe\x88\xe8\x80\x97\xe6\x97\xb6\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe5\x88\x87\xe5\xa5\xbd\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe8\xa6\x81\xe5\x88\x87\xe6\x8d\xa2\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: float\xe6\x95\xb0\xe5\x80\xbc\n\n    """"""\n    if g_euclidean_safe:\n        euclidean = lambda a, b: euclidean_distances(a, b)\n    else:\n        euclidean = lambda a, b: la.norm(a - b)\n    distance = _distance_xy(euclidean, x, y)\n    if to_similar:\n        # \xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8al1\xe5\x92\x8cl2\xe8\xbd\xac\xe6\x8d\xa2similar\xe7\x9a\x84\xe5\x80\xbc\xe4\xb8\x8d\xe7\x9b\xb4\xe8\xa7\x82\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe5\xaf\xb9\xe6\xaf\x94\xe4\xbd\xbf\xe7\x94\xa8\n        distance = 1.0 / (1.0 + distance)\n    return distance\n\n\ndef euclidean_distance_matrix(df, scale_end=True, to_similar=False):\n    """"""\n    \xe6\xac\xa7\xe5\xbc\x8f\xe8\xb7\x9d\xe7\xa6\xbb(L2\xe8\x8c\x83\xe6\x95\xb0): \xe4\xb8\x8eeuclidean_distance_xy\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\xab\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xef\xbc\x8c\xe9\x9d\x9e\xe4\xb8\xa4\xe4\xb8\xa4distance\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\n    \xe4\xb8\x94\xe8\xbe\x93\xe5\x85\xa5\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbapd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]], \xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe7\x90\x86\xe8\xa7\xa3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\xb5\x8b\xe8\xb7\x9d\xe7\x9b\xae\xe7\x9a\x84\xe6\x9d\xa5\xe5\x88\x86\xe6\x9e\x90\n    \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x92\x8c\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8a\x9f\xe8\x83\xbd\xe9\x9c\x80\xe6\xb1\x82\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\n    \xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cscale_start\n\n            input:\n\n                        tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n            2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n            2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n            ...\t...\t...\t...\t...\t...\t...\t...\n            2016-07-22\t222.27\t160.88\t25.50\t4.850\t742.74\t13.510\t98.66\n            2016-07-25\t230.01\t160.25\t25.57\t4.790\t739.77\t13.390\t97.34\n            2016-07-26\t225.93\t163.09\t24.75\t4.945\t740.92\t13.655\t97.76\n\n            ABuStatsUtil.euclidean_distance_matrix(cc, scale_start=True)\n\n            output:\n\n                    tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            tsla\t0.0000\t0.4086\t0.7539\t0.7942\t0.4810\t0.7638\t0.3713\n            bidu\t0.4086\t0.0000\t0.7732\t0.7047\t0.6185\t0.6161\t0.4184\n            noah\t0.7539\t0.7732\t0.0000\t0.7790\t0.7174\t0.6957\t0.7425\n            sfun\t0.7942\t0.7047\t0.7790\t0.0000\t0.9950\t0.5422\t0.9558\n            goog\t0.4810\t0.6185\t0.7174\t0.9950\t0.0000\t1.0000\t0.5379\n            vips\t0.7638\t0.6161\t0.6957\t0.5422\t1.0000\t0.0000\t0.7348\n            aapl\t0.3713\t0.4184\t0.7425\t0.9558\t0.5379\t0.7348\t0.0000\n\n\n            ABuStatsUtil.euclidean_distance_matrix(cc, scale_start=False)\n\n                    tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            tsla\t0.0000\t0.0781\t0.3314\t0.3573\t0.6527\t0.3386\t0.1933\n            bidu\t0.0781\t0.0000\t0.2764\t0.3018\t0.7112\t0.2827\t0.1392\n            noah\t0.3314\t0.2764\t0.0000\t0.0284\t0.9732\t0.0140\t0.1408\n            sfun\t0.3573\t0.3018\t0.0284\t0.0000\t1.0000\t0.0203\t0.1674\n            goog\t0.6527\t0.7112\t0.9732\t1.0000\t0.0000\t0.9820\t0.8369\n            vips\t0.3386\t0.2827\t0.0140\t0.0203\t0.9820\t0.0000\t0.1481\n            aapl\t0.1933\t0.1392\t0.1408\t0.1674\t0.8369\t0.1481\t0.0000\n\n    :param df: pd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]], \xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xabdf\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n    :param scale_end: \xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: distance_df\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return _distance_matrix(euclidean_distances, df, scale_end, to_similar)\n\n\n# noinspection PyUnresolvedReferences\ndef manhattan_distances_xy(x, y, to_similar=False):\n    """"""\n    \xe6\x9b\xbc\xe5\x93\x88\xe9\xa1\xbf\xe8\xb7\x9d\xe7\xa6\xbb(L1\xe8\x8c\x83\xe6\x95\xb0)\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97distance\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe7\x90\x86\xe8\xa7\xa3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\xb5\x8b\xe8\xb7\x9d\xe7\x9b\xae\xe7\x9a\x84\xe6\x9d\xa5\xe5\x88\x86\xe6\x9e\x90\n    \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x92\x8c\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8a\x9f\xe8\x83\xbd\xe9\x9c\x80\xe6\xb1\x82\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\n    \xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cscale_start\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: float\xe6\x95\xb0\xe5\x80\xbc\n    """"""\n    distance = _distance_xy(manhattan_distances, x, y)\n    if to_similar:\n        # \xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8al1\xe5\x92\x8cl2\xe8\xbd\xac\xe6\x8d\xa2similar\xe7\x9a\x84\xe5\x80\xbc\xe4\xb8\x8d\xe7\x9b\xb4\xe8\xa7\x82\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe5\xaf\xb9\xe6\xaf\x94\xe4\xbd\xbf\xe7\x94\xa8\n        distance = 1.0 / (1.0 + distance)\n    return distance\n\n\ndef manhattan_distance_matrix(df, scale_end=True, to_similar=False):\n    """"""\n    \xe6\x9b\xbc\xe5\x93\x88\xe9\xa1\xbf\xe8\xb7\x9d\xe7\xa6\xbb(L1\xe8\x8c\x83\xe6\x95\xb0): \xe4\xb8\x8emanhattan_distances_xy\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\xab\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xef\xbc\x8c\xe9\x9d\x9e\xe4\xb8\xa4\xe4\xb8\xa4distance\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\n    \xe4\xb8\x94\xe8\xbe\x93\xe5\x85\xa5\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbapd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]]\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe7\x90\x86\xe8\xa7\xa3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\xb5\x8b\xe8\xb7\x9d\xe7\x9b\xae\xe7\x9a\x84\xe6\x9d\xa5\xe5\x88\x86\xe6\x9e\x90\n    \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x92\x8c\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8a\x9f\xe8\x83\xbd\xe9\x9c\x80\xe6\xb1\x82\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\n    \xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cscale_start\n\n        eg:\n            input:\n\n                        tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n            2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n            2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n            ...\t...\t...\t...\t...\t...\t...\t...\n            2016-07-22\t222.27\t160.88\t25.50\t4.850\t742.74\t13.510\t98.66\n            2016-07-25\t230.01\t160.25\t25.57\t4.790\t739.77\t13.390\t97.34\n            2016-07-26\t225.93\t163.09\t24.75\t4.945\t740.92\t13.655\t97.76\n\n            ABuStatsUtil.manhattan_distance_matrix(cc, scale_start=True)\n\n            output:\n\n                    tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            tsla\t0.0000\t0.3698\t0.6452\t0.7917\t0.4670\t0.7426\t0.3198\n            bidu\t0.3698\t0.0000\t0.5969\t0.7056\t0.6495\t0.5822\t0.4000\n            noah\t0.6452\t0.5969\t0.0000\t0.7422\t0.7441\t0.6913\t0.6896\n            sfun\t0.7917\t0.7056\t0.7422\t0.0000\t0.9236\t0.4489\t1.0000\n            goog\t0.4670\t0.6495\t0.7441\t0.9236\t0.0000\t0.8925\t0.5134\n            vips\t0.7426\t0.5822\t0.6913\t0.4489\t0.8925\t0.0000\t0.7038\n            aapl\t0.3198\t0.4000\t0.6896\t1.0000\t0.5134\t0.7038\t0.0000\n\n\n            ABuStatsUtil.manhattan_distance_matrix(cc, scale_start=False)\n\n            output:\n\n                    tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            tsla\t0.0000\t0.0640\t0.3318\t0.3585\t0.6415\t0.3395\t0.1906\n            bidu\t0.0640\t0.0000\t0.2750\t0.3018\t0.6982\t0.2827\t0.1338\n            noah\t0.3318\t0.2750\t0.0000\t0.0267\t0.9733\t0.0124\t0.1412\n            sfun\t0.3585\t0.3018\t0.0267\t0.0000\t1.0000\t0.0191\t0.1680\n            goog\t0.6415\t0.6982\t0.9733\t1.0000\t0.0000\t0.9809\t0.8320\n            vips\t0.3395\t0.2827\t0.0124\t0.0191\t0.9809\t0.0000\t0.1489\n            aapl\t0.1906\t0.1338\t0.1412\t0.1680\t0.8320\t0.1489\t0.000\n\n    :param df: pd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]], \xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xabdf\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n    :param scale_end: \xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: distance_df\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return _distance_matrix(manhattan_distances, df, scale_end, to_similar)\n\n\ndef cosine_distances_xy(x, y, to_similar=False):\n    """"""\n    \xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97distance\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe7\x90\x86\xe8\xa7\xa3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\xb5\x8b\xe8\xb7\x9d\xe7\x9b\xae\xe7\x9a\x84\xe6\x9d\xa5\xe5\x88\x86\xe6\x9e\x90\n    \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x92\x8c\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8a\x9f\xe8\x83\xbd\xe9\x9c\x80\xe6\xb1\x82\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\n    \xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cscale_start\n    :param x: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param y: \xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: float\xe6\x95\xb0\xe5\x80\xbc\n    """"""\n    distance = _distance_xy(cosine_distances, x, y)\n    if to_similar:\n        # \xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\xe8\xbd\xac\xe6\x8d\xa2\xe4\xbd\x99\xe5\xbc\xa6\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x87\x8f\xe5\xb0\xb1\xe8\xa1\x8c\n        distance = 1.0 - distance\n    return distance\n\n\ndef cosine_distance_matrix(df, scale_end=True, to_similar=False):\n    """"""\n    \xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb: \xe4\xb8\x8ecosine_distances_xy\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\xab\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xef\xbc\x8c\xe9\x9d\x9e\xe4\xb8\xa4\xe4\xb8\xa4distance\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\n    \xe4\xb8\x94\xe8\xbe\x93\xe5\x85\xa5\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbapd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]]\xef\xbc\x8c\xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe7\x90\x86\xe8\xa7\xa3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\xb5\x8b\xe8\xb7\x9d\xe7\x9b\xae\xe7\x9a\x84\xe6\x9d\xa5\xe5\x88\x86\xe6\x9e\x90\n    \xe6\x98\xaf\xe5\x90\xa6\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x92\x8c\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8cscale_start\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe5\xae\x8c\xe5\x85\xa8\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8a\x9f\xe8\x83\xbd\xe9\x9c\x80\xe6\xb1\x82\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe7\x90\x86\xe8\xa7\xa3\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\n    \xe9\x80\x89\xe6\x8b\xa9\xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8cscale_start\n\n        eg:\n            input:\n\n                        tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n            2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n            2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n            ...\t...\t...\t...\t...\t...\t...\t...\n            2016-07-22\t222.27\t160.88\t25.50\t4.850\t742.74\t13.510\t98.66\n            2016-07-25\t230.01\t160.25\t25.57\t4.790\t739.77\t13.390\t97.34\n            2016-07-26\t225.93\t163.09\t24.75\t4.945\t740.92\t13.655\t97.76\n\n\n            ABuStatsUtil.cosine_distance_matrix(cc, scale_start=True)\n\n            output:\n\n                    tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            tsla\t0.0000\t0.1743\t0.4434\t0.2945\t0.2394\t0.4763\t0.1266\n            bidu\t0.1743\t0.0000\t0.5808\t0.2385\t0.3986\t0.3034\t0.1470\n            noah\t0.4434\t0.5808\t0.0000\t1.0000\t0.3411\t0.7626\t0.2632\n            sfun\t0.2945\t0.2385\t1.0000\t0.0000\t0.7494\t0.4448\t0.4590\n            goog\t0.2394\t0.3986\t0.3411\t0.7494\t0.0000\t0.9717\t0.2806\n            vips\t0.4763\t0.3034\t0.7626\t0.4448\t0.9717\t0.0000\t0.2669\n            aapl\t0.1266\t0.1470\t0.2632\t0.4590\t0.2806\t0.2669\t0.0000\n\n\n            ABuStatsUtil.cosine_distance_matrix(cc, scale_start=False)\n\n            output:\n\n                    tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            tsla\t0.0000\t0.1743\t0.4434\t0.2945\t0.2394\t0.4763\t0.1266\n            bidu\t0.1743\t0.0000\t0.5808\t0.2385\t0.3986\t0.3034\t0.1470\n            noah\t0.4434\t0.5808\t0.0000\t1.0000\t0.3411\t0.7626\t0.2632\n            sfun\t0.2945\t0.2385\t1.0000\t0.0000\t0.7494\t0.4448\t0.4590\n            goog\t0.2394\t0.3986\t0.3411\t0.7494\t0.0000\t0.9717\t0.2806\n            vips\t0.4763\t0.3034\t0.7626\t0.4448\t0.9717\t0.0000\t0.2669\n            aapl\t0.1266\t0.1470\t0.2632\t0.4590\t0.2806\t0.2669\t0.0000\n\n    :param df: pd.DataFrame or np.array or \xe5\xa4\x9a\xe5\xb1\x82\xe8\xbf\xad\xe4\xbb\xa3\xe5\xba\x8f\xe5\x88\x97[[],[]], \xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe5\x8f\xabdf\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\x9c\xa8\xe5\x86\x85\xe9\x83\xa8\xe4\xbc\x9a\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n    :param scale_end: \xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\n    :param to_similar: \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8e\xe7\xbd\xae\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2similar\xe5\x80\xbc\n    :return: distance_df\xef\xbc\x8cpd.DataFrame\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    return _distance_matrix(cosine_distances, df, scale_end, to_similar)\n\n\n# TODO distance\xe4\xb8\x8esimilar\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\xe4\xbb\xa5\xe5\x8f\x8a\xe6\xa8\xa1\xe5\x9d\x97\xe5\x8a\x9f\xe8\x83\xbd\xe4\xbd\x8d\xe7\xbd\xae\n\n\ndef arr_to_pandas(func):\n    """"""\n        \xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x9a\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe9\x9d\x9e\xe9\x80\x9a\xe7\x94\xa8\xef\xbc\x8c\xe9\x80\x9a\xe7\x94\xa8\xe8\xbd\xac\xe6\x8d\xa2\xe4\xbd\xbf\xe7\x94\xa8ABuDTUtil\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\n        \xe5\xb0\x86\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84arr\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe6\x88\x96\xe8\x80\x85pd.Series\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(arr, *arg, **kwargs):\n\n        # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n        if not isinstance(arr, Iterable) or isinstance(arr, six.string_types):\n            # arr\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n            raise TypeError(\'arr not isinstance of Iterable\')\n\n        if not isinstance(arr, pd.DataFrame) or isinstance(arr, pd.Series):\n            if isinstance(arr, np.ndarray) and len(arr.shape) > 1 and arr.shape[1] > 1:\n                # np.ndarray > 1\xe5\x88\x97\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\n                arr = pd.DataFrame(arr)\n            elif isinstance(arr, dict):\n                # \xe9\x92\x88\xe5\xaf\xb9dict\xe8\xbd\xac\xe6\x8d\xa2pd.DataFrame\n                arr = pd.DataFrame(arr)\n            elif all(isinstance(arr_item, Iterable) for arr_item in arr):\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb9\x9f\xe9\x83\xbd\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\x85\x88\xe8\xbd\xacnp.array\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x86\x8dDataFrame\n                arr = pd.DataFrame(np.array(arr))\n            else:\n                # \xe5\x90\xa6\xe5\x88\x99\xe5\xba\x8f\xe5\x88\x97\xe5\xaf\xb9\xe8\xb1\xa1\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.Series\n                arr = pd.Series(arr)\n        return func(arr, *arg, **kwargs)\n\n    return wrapper\n\n\ndef arr_to_numpy(func):\n    """"""\n        \xe5\x87\xbd\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x9a\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xef\xbc\x8c\xe9\x9d\x9e\xe9\x80\x9a\xe7\x94\xa8\xef\xbc\x8c\xe9\x80\x9a\xe7\x94\xa8\xe8\xbd\xac\xe6\x8d\xa2\xe4\xbd\xbf\xe7\x94\xa8ABuDTUtil\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\n        \xe5\xb0\x86\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\xe4\xb8\xad\xe7\x9a\x84arr\xe5\xba\x8f\xe5\x88\x97\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanp.array\n    """"""\n\n    @functools.wraps(func)\n    def wrapper(arr, *arg, **kwargs):\n        # TODO Iterable\xe5\x92\x8csix.string_types\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x8a\xbd\xe5\x87\xba\xe6\x9d\xa5\xe6\x94\xbe\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xbaIterable\xe7\x9a\x84\xe5\x88\xa4\xe6\x96\xad\xe6\x9d\xa5\xe4\xbd\xbf\xe7\x94\xa8\n        if not isinstance(arr, Iterable) or isinstance(arr, six.string_types):\n            # arr\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n            raise TypeError(\'arr not isinstance of Iterable\')\n\n        if not isinstance(arr, np.ndarray):\n            if isinstance(arr, pd.DataFrame) or isinstance(arr, pd.Series):\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xafpandas\xe7\x9b\xb4\xe6\x8e\xa5\xe6\x8b\xbfvalues\n                arr = arr.values\n            elif isinstance(arr, dict):\n                # \xe9\x92\x88\xe5\xaf\xb9dict\xe8\xbd\xac\xe6\x8d\xa2np.array\n                arr = np.array(list(arr.values())).T\n            else:\n                arr = np.array(arr)\n        return func(arr, *arg, **kwargs)\n\n    return wrapper\n\n\n@arr_to_pandas\ndef demean(arr, rolling_window=0, show=False):\n    """"""\n        \xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe5\x8c\x96\xe5\x90\x8e\xe5\xa4\x84\xe7\x90\x86demean, \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x98\xafnp.array\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbapd.DataFrame\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\n        \xe8\xa2\xabarr_to_pandas\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe4\xb8\x94\xe8\xbf\x99\xe6\xa0\xb7\xe4\xbd\xbf\xe7\x94\xa8arr.mean()\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81axis\xe5\x8f\x82\xe6\x95\xb0\xe5\x8c\xba\xe5\x88\xabnp.array\xe8\xbd\xb4\xe5\x90\x91\n        eg:\n            cc.head()\n                        tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            2014-07-25\t223.57\t226.50\t15.32\t12.11\t589.02\t21.349\t97.67\n            2014-07-28\t224.82\t225.80\t16.13\t12.45\t590.60\t21.548\t99.02\n            2014-07-29\t225.01\t220.00\t16.75\t12.22\t585.61\t21.190\t98.38\n            2014-07-30\t228.92\t219.13\t16.83\t11.78\t587.42\t21.185\t98.15\n            2014-07-31\t223.30\t216.05\t16.06\t11.47\t571.60\t20.550\t95.60\n\n            ABuStatsUtil.demean(cc.head())\n\n                        tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n            2014-07-25\t-1.554\t5.004\t-0.898\t0.104\t4.17\t0.1846\t-0.094\n            2014-07-28\t-0.304\t4.304\t-0.088\t0.444\t5.75\t0.3836\t1.256\n            2014-07-29\t-0.114\t-1.496\t0.532\t0.214\t0.76\t0.0256\t0.616\n            2014-07-30\t3.796\t-2.366\t0.612\t-0.226\t2.57\t0.0206\t0.386\n            2014-07-31\t-1.824\t-5.446\t-0.158\t-0.536\t-13.25\t-0.6144\t-2.164\n\n            ABuStatsUtil.demean(cc.head().values)\n\n                0\t1\t2\t3\t4\t5\t6\n            0\t-1.554\t5.004\t-0.898\t0.104\t4.17\t0.1846\t-0.094\n            1\t-0.304\t4.304\t-0.088\t0.444\t5.75\t0.3836\t1.256\n            2\t-0.114\t-1.496\t0.532\t0.214\t0.76\t0.0256\t0.616\n            3\t3.796\t-2.366\t0.612\t-0.226\t2.57\t0.0206\t0.386\n            4\t-1.824\t-5.446\t-0.158\t-0.536\t-13.25\t-0.6144\t-2.164\n\n            tsla.head()\n\n            2014-07-25    223.57\n            2014-07-28    224.82\n            2014-07-29    225.01\n            2014-07-30    228.92\n            2014-07-31    223.30\n\n            ABuStatsUtil.demean(tsla.head())\n\n            2014-07-25   -1.554\n            2014-07-28   -0.304\n            2014-07-29   -0.114\n            2014-07-30    3.796\n            2014-07-31   -1.824\n\n            ABuStatsUtil.demean(tsla.head().values)\n\n                0\n            0\t-1.554\n            1\t-0.304\n            2\t-0.114\n            3\t3.796\n            4\t-1.824\n\n    :param arr: pd.DataFrame or pd.Series or Iterable\n    :param rolling_window: \xe9\xbb\x98\xe8\xae\xa4\xef\xbc\x9d0\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\xb9\xb3\xe5\x9d\x87\xe5\x81\x9a\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8crolling_window > 0 \xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\n                           \xe6\xb3\xa8\xe6\x84\x8f\xe5\xa6\x82\xe6\x9e\x9crolling_window\xe5\x80\xbc\xe8\xbf\x87\xe5\xb0\x8f\xe5\xb0\x86\xe5\xaf\xbc\xe8\x87\xb4\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe5\x90\x8e\xe4\xb8\x8d\xe8\xbf\x9e\xe7\xbb\xad\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x825\xe6\x97\xa5\xef\xbc\x8c10\xe6\x97\xa5\xe7\x9a\x84\n                           \xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe8\x83\xbd\xe7\xb1\xbb\xe4\xbc\xbcclose pct_change\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe6\xb1\x82\xe8\xa6\x81\xe9\x92\x9d\xe5\x8c\x96\xef\xbc\x8c\xe6\x9c\x80\xe5\xa5\xbd\xe6\x98\xaf\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x9c\x88\xe4\xbb\xa5\xe4\xb8\x8a\n                           \xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8cuser\xe8\xa6\x81\xe6\xa0\xb9\xe6\x8d\xae\xe9\x9c\x80\xe6\xb1\x82\xef\xbc\x8c\xe9\x80\x89\xe6\x8b\xa9\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\n    :param show: \xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x8e\xbb\xe5\x9d\x87\xe5\x80\xbc\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4False\n    :return:\n    """"""\n\n    if rolling_window > 0:\n        # arr_to_pandas\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe4\xbf\x9d\xe8\xaf\x81\xe4\xba\x86\xe8\xbf\x9b\xe6\x9d\xa5\xe7\x9a\x84\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\x8d\xe6\x98\xafpd.DataFrame\xe5\xb0\xb1\xe6\x98\xafpd.Series\n        arr_mean = pd_rolling_mean(arr, window=rolling_window, min_periods=1)\n        # arr_mean.fillna(method=\'bfill\', inplace=True)\n    else:\n        arr_mean = arr.mean()\n\n    demean_v = arr - arr_mean\n    if show:\n        demean_v.plot()\n    return demean_v\n\n\n@arr_to_numpy\ndef print_stats_sm(arr):\n    """"""\n    \xe5\xaf\xb9arr\xe7\x9a\x84\xe7\xbb\x9f\xe8\xae\xa1\xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe5\x88\x86\xe5\x88\xab\xe8\xbe\x93\xe5\x87\xba\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\xae\x9e\xe4\xbd\x93\xe5\x89\x8d\xe9\x9d\xa2\xef\xbc\x8c\xe4\xb8\xad\xe9\x97\xb4\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e5\xe5\x88\x97, \xe8\xa2\xabarr_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\n    \xe7\xbb\x9f\xe4\xb8\x80\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe4\xb8\x94\xe8\xbf\x99\xe6\xa0\xb7\xe4\xbd\xbf\xe7\x94\xa8arr.max(), arr.min()\xe7\xad\x89\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81axis\xe5\x8f\x82\xe6\x95\xb0\xe5\x8c\xba\xe5\x88\xab\n\n        eg:\n                input:\n\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n                2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n                2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n                ...\t...\t...\t...\t...\t...\t...\t...\n                2016-07-22\t222.27\t160.88\t25.50\t4.850\t742.74\t13.510\t98.66\n                2016-07-25\t230.01\t160.25\t25.57\t4.790\t739.77\t13.390\t97.34\n                2016-07-26\t225.93\t163.09\t24.75\t4.945\t740.92\t13.655\t97.76\n\n                output:\n\n                ************************************************************************************************************\n                shape = (504, 7)\n                ************************************************************************************************************\n                max  = 776.6\n                ************************************************************************************************************\n                min = 4.44\n                ************************************************************************************************************\n                mean = 172.445713435\n                ************************************************************************************************************\n                ************************************************************************************************************\n                head =\n                [[ 223.57   226.5     15.32    12.11   589.02    21.349   97.67 ]\n                 [ 224.82   225.8     16.13    12.45   590.6     21.548   99.02 ]\n                 [ 225.01   220.      16.75    12.22   585.61    21.19    98.38 ]\n                 [ 228.92   219.13    16.83    11.78   587.42    21.185   98.15 ]\n                 [ 223.3    216.05    16.06    11.47   571.6     20.55    95.6  ]]\n                ************************************************************************************************************\n                mid =\n                [[ 267.2   207.63   26.25    7.44  644.28   21.23  125.16]\n                 [ 265.41  206.25   23.4     7.17  623.56   20.25  124.5 ]\n                 [ 253.01  197.68   22.16    6.76  627.26   19.99  122.77]\n                 [ 264.82  168.03   22.94    6.76  628.     20.2   123.38]\n                 [ 263.82  170.01   23.35    6.79  631.93   20.26  122.99]]\n                ************************************************************************************************************\n                tail =\n                [[ 228.36   160.65    25.11     4.9    741.19    13.63    99.96 ]\n                 [ 220.5    161.4     25.51     4.79   738.63    13.69    99.43 ]\n                 [ 222.27   160.88    25.5      4.85   742.74    13.51    98.66 ]\n                 [ 230.01   160.25    25.57     4.79   739.77    13.39    97.34 ]\n                 [ 225.93   163.09    24.75     4.945  740.92    13.655   97.76 ]]\n    :param arr:\n    """"""\n    log_func = logging.info if ABuEnv.g_is_ipython else print\n    separator = format(\'*\', \'*^108s\')\n    log_func(separator)\n    log_func(\'shape = \' + str(arr.shape))\n    log_func(separator)\n    log_func(\'max  = \' + str(arr.max()))\n    log_func(separator)\n    log_func(\'min = \' + str(arr.min()))\n    log_func(separator)\n    log_func(\'mean = \' + str(arr.mean()))\n    log_func(separator)\n\n    if arr.shape[0] > 5 * 3:\n        # \xe8\xa6\x81\xe6\xb1\x82\xe6\x95\xb0\xe9\x87\x8f\xe8\x83\xbd\xe6\xbb\xa1\xe8\xb6\xb3\xe6\x89\x93\xe4\xb8\x89\xe6\x8e\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\n        log_func(separator)\n        log_func(\'head = \\n\' + str(arr[:5]))\n        log_func(separator)\n        # \xe4\xbd\xbf\xe7\x94\xa8floor\xe6\x89\xbe\xe5\x88\xb0\xe4\xb8\xad\xe9\x97\xb4\xe7\x9a\x84index\n        mid_ind = int(math.floor(arr.shape[0] / 2))\n        # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xbd\xbf\xe7\x94\xa8floor\xe6\x89\x80\xe4\xbb\xa5-2, +3\n        log_func(\'mid = \\n\' + str(arr[mid_ind - 2:mid_ind + 3]))\n        log_func(separator)\n        log_func(\'tail = \\n\' + str(arr[-5:]))\n\n\ndef normality_stats(arr):\n    """"""\n    \xe7\xbb\x9f\xe8\xae\xa1\xe4\xbf\xa1\xe6\x81\xaf\xe5\x81\x8f\xe5\xba\xa6\xef\xbc\x8c\xe5\xb3\xb0\xe5\xba\xa6\xef\xbc\x8c\xe6\xad\xa3\xe6\x80\x81\xe5\x88\x86\xe5\xb8\x83\xe6\xa3\x80\xe6\xb5\x8b\xef\xbc\x8cp-value\n        eg:\n                input:\n\n                2014-07-25    223.57\n                2014-07-28    224.82\n                2014-07-29    225.01\n                               ...\n                2016-07-22    222.27\n                2016-07-25    230.01\n                2016-07-26    225.93\n\n                output:\n\n                array skew = -0.282635248604699\n                array skew p-value = 0.009884539532576725\n                array kurt = 0.009313464006726946\n                array kurt p-value = 0.8403947352953821\n                array norm = NormaltestResult(statistic=6.6961445106692237, pvalue=0.035152053009441256)\n                array norm p-value = 0.035152053009441256\n\n                input:\n\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n                2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n                2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n                ...\t...\t...\t...\t...\t...\t...\t...\n                2016-07-22\t222.27\t160.88\t25.50\t4.850\t742.74\t13.510\t98.66\n                2016-07-25\t230.01\t160.25\t25.57\t4.790\t739.77\t13.390\t97.34\n                2016-07-26\t225.93\t163.09\t24.75\t4.945\t740.92\t13.655\t97.76\n\n                output:\n\n                array skew = [-0.2826 -0.2544  0.1456  1.0322  0.2095  0.095   0.1719]\n                array skew p-value = [ 0.0099  0.0198  0.1779  0.      0.0539  0.3781  0.1124]\n                array kurt = [ 0.0093 -0.8414 -0.4205  0.4802 -1.547  -0.9203 -1.2104]\n                array kurt p-value = [ 0.8404  0.      0.0201  0.0461  1.      0.      0.    ]\n                array norm = NormaltestResult(statistic=array([   6.6961,   52.85  ,    7.2163,   69.0119,    3.7161,\n                69.3468, 347.229 ]), pvalue=array([ 0.0352,  0.    ,  0.0271,  0.    ,  0.156 ,  0.    ,  0.    ]))\n                array norm p-value = [ 0.0352  0.      0.0271  0.      0.156   0.      0.    ]\n\n    :param arr: pd.DataFrame or pd.Series or Iterable\n    """"""\n    log_func = logging.info if ABuEnv.g_is_ipython else print\n\n    log_func(\'array skew = {}\'.format(scs.skew(arr)))\n    log_func(\'array skew p-value = {}\'.format(scs.skewtest(arr)[1]))\n\n    log_func(\'array kurt = {}\'.format(scs.kurtosis(arr)))\n    log_func(\'array kurt p-value = {}\'.format(scs.kurtosistest(arr)[1]))\n\n    log_func(\'array norm = {}\'.format(scs.normaltest(arr)))\n    log_func(\'array norm p-value = {}\'.format(scs.normaltest(arr)[1]))\n\n\ndef print_stats(arr):\n    """"""\n    \xe5\xaf\xb9arr\xe7\x9a\x84\xe7\xbb\x9f\xe8\xae\xa1\xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\xe8\xbe\x93\xe5\x87\xba\n        eg:\n                input:\n\n                            tsla\tbidu\tnoah\tsfun\tgoog\tvips\taapl\n                2014-07-25\t223.57\t226.50\t15.32\t12.110\t589.02\t21.349\t97.67\n                2014-07-28\t224.82\t225.80\t16.13\t12.450\t590.60\t21.548\t99.02\n                2014-07-29\t225.01\t220.00\t16.75\t12.220\t585.61\t21.190\t98.38\n                ...\t...\t...\t...\t...\t...\t...\t...\n                2016-07-22\t222.27\t160.88\t25.50\t4.850\t742.74\t13.510\t98.66\n                2016-07-25\t230.01\t160.25\t25.57\t4.790\t739.77\t13.390\t97.34\n                2016-07-26\t225.93\t163.09\t24.75\t4.945\t740.92\t13.655\t97.76\n\n                output:\n\n                array size = 504\n                array min  = [ 143.67  132.37   12.95    4.44  492.55   10.35   90.34]\n                array max  = [ 286.04  250.34   37.32   12.52  776.6    30.    133.  ]\n                array mean = [ 228.4885  193.4488   23.7362    7.2458  624.3016   19.0181  110.881 ]\n                array var  = [  653.509    752.7421    30.1604     3.3109  7310.2084    27.0994\n                   135.156 ]\n                array std  = [ 25.5638  27.4361   5.4919   1.8196  85.4998   5.2057  11.6257]\n                array skew = [-0.2826 -0.2544  0.1456  1.0322  0.2095  0.095   0.1719]\n                array kurt = [ 0.0093 -0.8414 -0.4205  0.4802 -1.547  -0.9203 -1.2104]\n    :param arr: pd.DataFrame or pd.Series or Iterable\n    """"""\n    stats = scs.describe(arr)\n\n    log_func = logging.info if ABuEnv.g_is_ipython else print\n    log_func(\'array size = {}\'.format(stats[0]))\n    log_func(\'array min  = {}\'.format(stats[1][0]))\n    log_func(\'array max  = {}\'.format(stats[1][1]))\n    log_func(\'array mean = {}\'.format(stats[2]))\n    log_func(\'array var  = {}\'.format(stats[3]))\n    log_func(\'array std  = {}\'.format(np.sqrt(stats[3])))\n    log_func(\'array skew = {}\'.format(stats[4]))\n    log_func(\'array kurt = {}\'.format(stats[5]))\n\n\n@arr_to_numpy\ndef stats_dict(arr):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\xba\x8f\xe5\x88\x97\xe6\x9e\x84\xe9\x80\xa0arr\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe7\xbb\x9f\xe8\xae\xa1\xe4\xbf\xa1\xe6\x81\xafdict\xef\xbc\x8c\xe8\xa2\xabarr_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe4\xb8\x94\xe8\xbf\x99\xe6\xa0\xb7\xe4\xbd\xbf\xe7\x94\xa8arr.max(), arr.min()\xe7\xad\x89\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81axis\xe5\x8f\x82\xe6\x95\xb0\xe5\x8c\xba\xe5\x88\xab\n    :param arr: pd.DataFrame or pd.Series or Iterable\n    :return: stats_dict\xef\xbc\x8cdict\xe5\xaf\xb9\xe8\xb1\xa1\n                eg:\n                    {\'count\': 504,\n                     \'kurtosis\': 0.009313464006726946,\n                     \'max\': 286.04000000000002,\n                     \'mean\': 228.48845238095237,\n                     \'min\': 143.66999999999999,\n                     \'skewness\': -0.282635248604699,\n                     \'std\': 25.538448192811927}\n    """"""\n\n    count = arr.shape[0]\n    if len(arr.shape) > 1 and arr.shape[1] > 1:\n        count = arr.shape[0] * arr.shape[1]\n\n    return {\'count\': count, \'max\': arr.max(), \'min\': arr.min(), \'mean\': arr.mean(),\n            \'std\': arr.std(), \'skewness\': scs.skew(arr), \'kurtosis\': scs.kurtosis(arr)\n            }\n\n\n# noinspection PyClassHasNoInit\nclass AbuMomentsTuple(namedtuple(\'AbuMomentsTuple\',\n                                 (\'count\',\n                                  \'max\',\n                                  \'min\',\n                                  \'mean\',\n                                  \'std\',\n                                  \'skewness\',\n                                  \'kurtosis\'))):\n    __slots__ = ()\n\n    def __repr__(self):\n        return ""count:{}\\nmax:{}\\nmin:{}\\nmean:{}\\nstd:{}\\nskewness:{}\\nkurtosis:{}"".format(self.count, self.max,\n                                                                                            self.min, self.mean,\n                                                                                            self.std, self.skewness,\n                                                                                            self.kurtosis)\n\n\n@arr_to_numpy\ndef stats_namedtuple(arr):\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\xba\x8f\xe5\x88\x97\xe6\x9e\x84\xe9\x80\xa0arr\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe7\xbb\x9f\xe8\xae\xa1\xe4\xbf\xa1\xe6\x81\xafdict, \xe8\xa2\xabarr_to_numpy\xe8\xa3\x85\xe9\xa5\xb0\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe4\xb8\x94\xe8\xbf\x99\xe6\xa0\xb7\xe4\xbd\xbf\xe7\x94\xa8arr.max(), arr.min()\xe7\xad\x89\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81axis\xe5\x8f\x82\xe6\x95\xb0\xe5\x8c\xba\xe5\x88\xab\n    \xe4\xb8\x8estats_dict\xe7\x9a\x84\xe5\x8c\xba\xe5\x88\xab\xe5\x8f\xaa\xe6\x98\xaf\xe8\xbf\x94\xe5\x9b\x9enamedtuple\xe5\xaf\xb9\xe8\xb1\xa1\n    :param arr: pd.DataFrame or pd.Series or Iterable\n    :return: AbuMomentsTuple\xe5\xaf\xb9\xe8\xb1\xa1\n                eg:\n                    count:504\n                    max:286.04\n                    min:143.67\n                    mean:228.48845238095237\n                    std:25.538448192811927\n                    skewness:-0.282635248604699\n                    kurtosis:0.009313464006726946\n\n    """"""\n    count = arr.shape[0]\n    if len(arr.shape) > 1 and arr.shape[1] > 1:\n        count = arr.shape[0] * arr.shape[1]\n\n    return AbuMomentsTuple(count, arr.max(), arr.min(), arr.mean(), arr.std(), scs.skew(arr), scs.kurtosis(arr))\n\n\ndef sigmoid(arr):\n    """"""sigmoid\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa4\xa7\xe7\x9a\x84\xe6\x9b\xb4\xe5\xa4\xa7\xef\xbc\x8c\xe5\xb0\x8f\xe7\x9a\x84\xe6\x9b\xb4\xe5\xb0\x8f\xef\xbc\x8c\xe5\x88\x86\xe8\xbe\xa8\xe4\xb8\x8d\xe6\xb8\x85\xe6\x99\xb0\xe7\x9a\x84\xe6\x9e\x81\xe5\x80\xbc""""""\n    return 1.0 / (1 + np.exp(-arr))\n'"
abupy/UtilBu/ABuStrUtil.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\n    \xe5\xad\x97\xe7\xac\xa6\xe5\xb7\xa5\xe5\x85\xb7\xe6\xa8\xa1\xe5\x9d\x97\n""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport random\nimport re\n\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import xrange\nfrom ..CoreBu.ABuFixes import six\nfrom ..CoreBu import ABuEnv\n\nK_CN_RE = re.compile(u\'[\\u4e00-\\u9fa5]+\')\n\n\ndef _create_random_tmp(salt_count, seed):\n    """"""\n    \xe4\xbb\x8eseed\xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96salt_count\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2,\n    \xe6\xb3\xa8\xe6\x84\x8f\xe6\x8a\xbd\xe5\x8f\x96\xe5\xb1\x9e\xe4\xba\x8e\xe6\x9c\x89\xe6\x94\xbe\xe5\x9b\x9e\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\xb9\xe6\xb3\x95\n    :param salt_count: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n    :param seed: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe7\x94\x9f\xe6\x88\x90\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    """"""\n    # TODO random.choice\xe6\x9c\x89\xe6\x94\xbe\xe5\x9b\x9e\xe6\x8a\xbd\xe5\x8f\x96\xe6\x96\xb9\xe6\xb3\x95, \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x8f\x82\xe6\x95\xb0\xe6\x94\xaf\xe6\x8c\x81\xe6\x97\xa0\xe6\x94\xbe\xe5\x9b\x9e\xe6\x8a\xbd\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n    sa = [random.choice(seed) for _ in xrange(salt_count)]\n    salt = \'\'.join(sa)\n    return salt\n\n\ndef create_random_with_num(salt_count):\n    """"""\n    \xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0 = ""0123456789"", \xe4\xbb\x8e\xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96salt_count\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6, \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2,\n    :param salt_count: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    """"""\n    seed = ""0123456789""\n    return _create_random_tmp(salt_count, seed)\n\n\ndef create_random_with_alpha(salt_count):\n    """"""\n    \xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0 = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"",\n    \xe4\xbb\x8e\xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96salt_count\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6, \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2,\n    :param salt_count: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    """"""\n    seed = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""\n    return _create_random_tmp(salt_count, seed)\n\n\ndef create_random_with_num_low(salt_count):\n    """"""\n    \xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0 = ""abcdefghijklmnopqrstuvwxyz0123456789"",\n    \xe4\xbb\x8e\xe7\xa7\x8d\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe6\xb1\xa0\xe4\xb8\xad\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96salt_count\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6, \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2,\n    :param salt_count: \xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n    :return: \xe8\xbf\x94\xe5\x9b\x9e\xe7\x94\x9f\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    """"""\n    seed = ""abcdefghijklmnopqrstuvwxyz0123456789""\n    return _create_random_tmp(salt_count, seed)\n\n\ndef to_unicode(text, encoding=None, errors=\'strict\'):\n    """"""\n    to_native_str\xe5\xaf\xb9py2\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\xaf\xb9six.text_type\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84encode\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4utf-8\n    """"""\n    if isinstance(text, six.text_type):\n        return text\n    if not isinstance(text, (bytes, six.text_type)):\n        raise TypeError(\'to_unicode must receive a bytes, str or unicode \'\n                        \'object, got %s\' % type(text).__name__)\n    if encoding is None:\n        encoding = \'utf-8\'\n\n    try:\n        decode_text = text.decode(encoding, errors)\n    except:\n        # \xe5\x88\x87\xe6\x8d\xa2\xe8\xaf\x95\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa1\x8c\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8a\xe5\xb1\x82\xe5\xa4\x84\xe7\x90\x86\n        decode_text = text.decode(\'gbk\' if encoding == \'utf-8\' else \'utf-8\', errors)\n    return decode_text\n\n\ndef to_bytes(text, encoding=None, errors=\'strict\'):\n    """"""\n    to_native_str\xe5\xaf\xb9py3\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\xaf\xb9bytes\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84encode\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4utf-8\n    """"""\n    if isinstance(text, bytes):\n        return text\n    if not isinstance(text, six.string_types):\n        raise TypeError(\'to_bytes must receive a unicode, str or bytes \'\n                        \'object, got %s\' % type(text).__name__)\n    if encoding is None:\n        encoding = \'utf-8\'\n    try:\n        encode_text = text.encode(encoding, errors)\n    except:\n        # \xe5\x88\x87\xe6\x8d\xa2\xe8\xaf\x95\xe4\xb8\x80\xe4\xb8\x8b\xef\xbc\x8c\xe4\xb8\x8d\xe8\xa1\x8c\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8a\xe5\xb1\x82\xe5\xa4\x84\xe7\x90\x86\n        encode_text = text.encode(\'gbk\' if encoding == \'utf-8\' else \'utf-8\', errors)\n    return encode_text\n\n\ndef to_native_str(text, encoding=None, errors=\'strict\'):\n    """"""\n    \xe5\xa5\x97\xe6\x8e\xa5to_unicode\xe5\x92\x8cto_bytes\xe9\x92\x88\xe5\xaf\xb9python\xe7\x89\x88\xe6\x9c\xac\xe4\xb8\x8d\xe5\x90\x8c\xe5\xa4\x84\xe7\x90\x86\n\n        python2 to_bytes\n        python3 to_unicode\n    """"""\n    if not ABuEnv.g_is_py3:\n        return to_bytes(text, encoding, errors)\n    else:\n        return to_unicode(text, encoding, errors)\n\n\ndef str_is_num10(a_str):\n    """"""\xe9\x80\x9a\xe8\xbf\x87int(a_str, 10)\xe6\xb5\x8b\xe8\xaf\x95\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x95\xb0\xe5\xad\x97\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf10\xe8\xbf\x9b\xe5\x88\xb6""""""\n    # noinspection PyBroadException\n    try:\n        int(a_str, 10)\n        return True\n    except:\n        return False\n\n\ndef str_is_num16(a_str):\n    """"""\xe9\x80\x9a\xe8\xbf\x87int(a_str, 16)\xe6\xb5\x8b\xe8\xaf\x95\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x95\xb0\xe5\xad\x97\xe6\x98\xaf\xe5\x90\xa6\xe6\x98\xaf16\xe8\xbf\x9b\xe5\x88\xb6""""""\n    # noinspection PyBroadException\n    try:\n        int(a_str, 16)\n        return True\n    except:\n        return False\n\n\ndef str_is_cn(a_str):\n    """"""\n        \xe9\x80\x9a\xe8\xbf\x87\xe6\xad\xa3\xe5\x88\x99\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe5\x88\xa4\xe6\x96\xad\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\x90\xab\xe6\x9c\x89\xe4\xb8\xad\xe6\x96\x87\n        \xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8f\xaa\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6search\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xbaNone, \xe4\xb8\x8d\xe8\xbf\x94\xe5\x9b\x9e\xe5\x85\xb7\xe4\xbd\x93\xe5\x8c\xb9\xe9\x85\x8d\xe7\xbb\x93\xe6\x9e\x9c\n        eg:\n            K_CN_RE.search(a_str)(\'abc\') is None\n            return False\n            K_CN_RE.search(a_str)(\'abc\xe5\x93\x88\xe5\x93\x88\') -> <_sre.SRE_Match object; span=(3, 5), match=\'\xe5\x93\x88\xe5\x93\x88\'>\n            return True\n    """"""\n    # a_str = to_unicode(a_str)\n    # return any(u\'\\u4e00\' <= c <= u\'\\u9fa5\' for c in a_str)\n    return K_CN_RE.search(to_unicode(a_str)) is not None\n\n\ndef digit_str(item):\n    """"""\n        \xe4\xbb\x8e\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\xbc\x80\xe5\xa7\x8b\xe5\x88\xa0\xe9\x99\xa4\xef\xbc\x8c\xe7\x9b\xb4\xe5\x88\xb0\xe6\x89\x80\xe6\x9c\x89\xe5\xad\x97\xe7\xac\xa6\xe9\x83\xbd\xe6\x98\xaf\xe6\x95\xb0\xe5\xad\x97\xe4\xb8\xba\xe6\xad\xa2\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85item\xe9\x95\xbf\xe5\xba\xa6 < 2\n        eg:\n            input:  ABuStrUtil.digit_str(\'sh000001\')\n            output: 000001\n\n            input:  ABuStrUtil.digit_str(\'shszsh000001\')\n            output: 000001\n    :param item: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n    :return: \xe8\xbf\x87\xe6\xbb\xa4head\xe5\xad\x97\xe6\xaf\x8d\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xaf\xb9\xe8\xb1\xa1\n    """"""\n    while True:\n        if item.isdigit():\n            break\n        if len(item) < 2:\n            break\n        item = item[1:]\n    return item\n\n\ndef var_name(var, glb):\n    """"""\n    eg\xef\xbc\x9a\n        in:  a = 5\n        in:  var_name(a, globals())\n        out: \'a\'\n\n    :param var: \xe8\xa6\x81\xe6\x9f\xa5\xe7\x9a\x84\xe5\x8f\x98\xe9\x87\x8f\xe5\xaf\xb9\xe8\xb1\xa1\n    :param glb: globals()\n    :return: var\xe5\xaf\xb9\xe8\xb1\xa1\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\n    """"""\n    for vn in glb:\n        if glb[vn] is var:\n            return vn\n    return \'unkonw\'\n'"
abupy/UtilBu/ABuWinUtil.py,0,"b'# coding=utf-8\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n# noinspection PyUnresolvedReferences\nfrom win32api import *\n\n# Try and use XP features, so we get alpha-blending etc.\ntry:\n    from winxpgui import *\nexcept ImportError:\n    # noinspection PyUnresolvedReferences\n    from win32gui import *\n# noinspection PyUnresolvedReferences\nimport win32con\nimport sys\nimport os\nimport struct\nimport time\n# noinspection PyUnresolvedReferences\nimport win32com.client as com\n# noinspection PyUnresolvedReferences\nimport win32event as w32e\n# noinspection PyUnresolvedReferences\nimport mmapfile as mmf\n# noinspection PyUnresolvedReferences\nimport win32api as win_api\n\nfrom ..UtilBu.ABuStrUtil import to_native_str\n\n\ndef show_msg(title, msg):\n    """"""\n    windows pop\xe5\xbc\xb9\xe7\xaa\x97\xef\xbc\x8c\xe4\xb8\xbb\xe8\xa6\x81\xe7\x94\xa8\xe5\x9c\xa8\xe9\x95\xbf\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\x94\xe8\x80\x97\xe6\x97\xb6\xe7\x9a\x84\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xad\xef\xbc\x8c\xe6\x8f\x90\xe7\xa4\xba\xe9\x87\x8d\xe8\xa6\x81\xe9\x97\xae\xe9\xa2\x98\xe4\xbf\xa1\xe6\x81\xaf\n    :param title: \xe5\xbc\xb9\xe7\xaa\x97\xe6\xa0\x87\xe9\xa2\x98\n    :param msg: \xe5\xbc\xb9\xe7\xaa\x97\xe4\xbf\xa1\xe6\x81\xaf\n    """"""\n    MainWindow(to_native_str(title), to_native_str(msg))\n\n\ndef socket_bind_recv(socket_fn, cmd_handler):\n    """"""\n    \xe9\x9d\x9ebsd\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe9\x80\x9a\xe4\xbf\xa1\xef\xbc\x8c\xe6\x8e\xa5\xe5\x8f\x97\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe5\xa4\x84\xe7\x90\x86\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8windows\xe5\x85\xa8\xe5\xb1\x80\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\n    \xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x8ebsd\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\x80\xe8\x87\xb4\n    :param socket_fn: \xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xa7\xb0\n    :param cmd_handler: cmd\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8ccallable\xe7\xb1\xbb\xe5\x9e\x8b\n    """"""\n    if not callable(cmd_handler):\n        print(\'socket_bind_recv cmd_handler must callable!\')\n\n    while True:\n        global_fn = \'Global\\\\{}\'.format(socket_fn)\n        event = w32e.CreateEvent(None, 0, 0, global_fn)\n        event_mmap = mmf.mmapfile(None, socket_fn, 1024)\n        w32e.WaitForSingleObject(event, -1)\n        socket_cmd = event_mmap.read(1024).decode()\n        # \xe6\x8a\x8a\xe6\x8e\xa5\xe6\x94\xb6\xe5\x88\xb0\xe7\x9a\x84socket\xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99\xe5\xa4\x96\xe9\x83\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\n        cmd_handler(socket_cmd)\n        event_mmap.close()\n        win_api.CloseHandle(event)\n\n\ndef socket_send_msg(socket_fn, msg):\n    """"""\n    \xe9\x9d\x9ebsd\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe9\x97\xb4\xe9\x80\x9a\xe4\xbf\xa1\xef\xbc\x8c\xe5\x8f\x91\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8windows\xe5\x85\xa8\xe5\xb1\x80\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe5\xae\x9e\xe7\x8e\xb0\xef\xbc\x8c\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x8ebsd\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\x80\xe8\x87\xb4\n    :param socket_fn: : \xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe5\x90\x8d\xe7\xa7\xb0\n    :param msg: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\xb1\xbb\xe5\x9e\x8b\xe9\x9c\x80\xe8\xa6\x81\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81encode\xef\xbc\x8c\xe5\x86\x85\xe9\x83\xa8\xe8\xbf\x9b\xe8\xa1\x8cencode\n    """"""\n    global_fn = \'Global\\\\{}\'.format(socket_fn)\n    event = w32e.OpenEvent(w32e.EVENT_ALL_ACCESS, 0, global_fn)\n    event_mmap = mmf.mmapfile(None, socket_fn, 1024)\n    w32e.SetEvent(event)\n    event_mmap.write(msg)\n    event_mmap.close()\n    win_api.CloseHandle(event)\n\n\ndef fold_free_size_mb(folder):\n    """"""\n    windows os\xe4\xb8\x8b\xe5\x89\xa9\xe4\xbd\x99\xe7\xa3\x81\xe7\x9b\x98\xe7\xa9\xba\xe9\x97\xb4\xe8\x8e\xb7\xe5\x8f\x96\n    :param folder: \xe7\x9b\xae\xe6\xa0\x87\xe7\x9b\xae\xe5\xbd\x95\n    :return: \xe8\xbf\x94\xe5\x9b\x9efloat\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8dmb\n    """"""\n    return drive_free_space(folder) / 1024 / 1024 / 1024\n\n\ndef drive_free_space(drive):\n    # noinspection PyBroadException\n    try:\n        fso = com.Dispatch(""Scripting.FileSystemObject"")\n        drv = fso.GetDrive(drive)\n        return drv.FreeSpace\n    except:\n        return 0\n\n\ndef max_drive():\n    space_array = dict()\n    for i in range(65, 91):\n        vol = chr(i) + \'://\'\n        if os.path.isdir(vol):\n            space_array[vol] = drive_free_space(vol)\n\n    max_v = max(zip(space_array.values(), space_array.keys()))[1]\n    if max_v.startswith(\'c\'):\n        return os.path.expanduser(\'~\')\n    return max_v\n\n\n# noinspection PyClassHasNoInit\nclass PyNOTIFYICONDATA:\n    _struct_format = (\n        ""I""  # DWORD cbSize;\n        ""I""  # HWND hWnd;\n        ""I""  # UINT uID;\n        ""I""  # UINT uFlags;\n        ""I""  # UINT uCallbackMessage;\n        ""I""  # HICON hIcon;\n        ""128s""  # TCHAR szTip[128];\n        ""I""  # DWORD dwState;\n        ""I""  # DWORD dwStateMask;\n        ""256s""  # TCHAR szInfo[256];\n        ""I""  # union {\n        #    UINT  uTimeout;\n        #    UINT  uVersion;\n        # } DUMMYUNIONNAME;\n        ""64s""  # TCHAR szInfoTitle[64];\n        ""I""  # DWORD dwInfoFlags;\n        #       GUID guidItem;\n    )\n    _struct = struct.Struct(_struct_format)\n\n    hWnd = 0\n    uID = 0\n    uFlags = 0\n    uCallbackMessage = 0\n    hIcon = 0\n    szTip = \'\'\n    dwState = 0\n    dwStateMask = 0\n    szInfo = \'\'\n    uTimeoutOrVersion = 0\n    szInfoTitle = \'\'\n    dwInfoFlags = 0\n\n    def pack(self):\n        return self._struct.pack(\n            self._struct.size,\n            self.hWnd,\n            self.uID,\n            self.uFlags,\n            self.uCallbackMessage,\n            self.hIcon,\n            self.szTip,\n            self.dwState,\n            self.dwStateMask,\n            self.szInfo,\n            self.uTimeoutOrVersion,\n            self.szInfoTitle,\n            self.dwInfoFlags)\n\n    def __setattr__(self, name, value):\n        # avoid wrong field names\n        if not hasattr(self, name):\n            raise NameError(name)\n        self.__dict__[name] = value\n\n\n# noinspection PyUnresolvedReferences,PyUnusedLocal\nclass MainWindow:\n    def __init__(self, title, msg):\n        message_map = {\n            win32con.WM_DESTROY: self.on_destroy,\n        }\n        # Register the Window class.\n        wc = WNDCLASS()\n        hinst = wc.hInstance = GetModuleHandle(None)\n        wc.lpszClassName = ""PythonTaskbarDemo""\n        wc.lpfnWndProc = message_map  # could also specify a wndproc.\n        class_atom = RegisterClass(wc)\n        # Create the Window.\n        style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n        self.hwnd = CreateWindow(class_atom, ""Taskbar Demo"", style,\n                                 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT,\n                                 0, 0, hinst, None)\n        UpdateWindow(self.hwnd)\n        icon_path_name = os.path.abspath(os.path.join(sys.prefix, ""pyc.ico""))\n        icon_flags = win32con.LR_LOADFROMFILE | win32con.LR_DEFAULTSIZE\n        # noinspection PyBroadException\n        try:\n            hicon = LoadImage(hinst, icon_path_name, win32con.IMAGE_ICON, 0, 0, icon_flags)\n        except:\n            hicon = LoadIcon(0, win32con.IDI_APPLICATION)\n        flags = NIF_ICON | NIF_MESSAGE | NIF_TIP\n        nid = (self.hwnd, 0, flags, win32con.WM_USER + 20, hicon, ""Balloon  tooltip demo"")\n        Shell_NotifyIcon(NIM_ADD, nid)\n        self.show_balloon(title, msg)\n        time.sleep(20)\n        DestroyWindow(self.hwnd)\n\n    def show_balloon(self, title, msg):\n        # For this message I can\'t use the win32gui structure because\n        # it doesn\'t declare the new, required fields\n        nid = PyNOTIFYICONDATA()\n        nid.hWnd = self.hwnd\n        nid.uFlags = NIF_INFO\n        # type of balloon and text are random\n        nid.dwInfoFlags = NIIF_INFO\n        nid.szInfo = msg\n        nid.szInfoTitle = title\n        # Call the Windows function, not the wrapped one\n        from ctypes import windll\n        shell_notify_icon = windll.shell32.Shell_NotifyIconA\n        shell_notify_icon(NIM_MODIFY, nid.pack())\n\n    def on_destroy(self, hwnd, msg, wparam, lparam):\n        nid = (self.hwnd, 0)\n        Shell_NotifyIcon(NIM_DELETE, nid)\n        # Terminate the app.\n        PostQuitMessage(0)\n'"
abupy/UtilBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom . import ABuDTUtil\nfrom . import ABuDelegateUtil\nfrom . import ABuDateUtil\nfrom . import ABuFileUtil\nfrom . import ABuMd5\nfrom . import ABuRegUtil\nfrom . import ABuScalerUtil\nfrom . import ABuStatsUtil\nfrom . import ABuStrUtil\nfrom . import ABuProgress\nfrom . import ABuPlatform\nfrom . import ABuKLUtil\nfrom . import ABuOsUtil\n\nfrom .ABuProgress import AbuProgress, AbuBlockProgress, AbuMulPidProgress\n\n__all__ = [\n    'ABuDateUtil',\n    'ABuDelegateUtil',\n    'ABuDTUtil',\n    'ABuFileUtil',\n    'ABuMd5',\n    'ABuRegUtil',\n    'ABuScalerUtil',\n    'ABuStatsUtil',\n    'ABuStrUtil',\n    'ABuProgress',\n    'AbuProgress',\n    'AbuBlockProgress',\n    'AbuMulPidProgress',\n    'ABuPlatform',\n    'ABuKLUtil',\n    'ABuOsUtil'\n]\n"""
abupy/WidgetBu/ABuWGBFBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import abstractmethod\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetFactorBase, WidgetFactorManagerBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnresolvedReferences\nclass BFSubscriberMixin(object):\n    """"""\n        \xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x9a\xe8\xae\xa2\xe9\x98\x85\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x9b\xb4\xe6\x96\xb0\xe9\x80\x9a\xe7\x9f\xa5\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x9e\x84\xe5\xbb\xba\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x9f\xba\xe7\xa1\x80\xe9\x99\x84\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\n        \xe5\xa6\x82\xef\xbc\x9a\xe4\xbe\x9d\xe9\x99\x84\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe4\xbe\x9d\xe8\xb5\x96\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\n    """"""\n\n    def subscriber_ui(self, labels):\n        """"""\n        \xe6\x9e\x84\xe5\xbb\xba\xe8\xae\xa2\xe9\x98\x85\xe7\x9a\x84\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5ui\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        :param labels: list\xe5\xba\x8f\xe5\x88\x97\xe5\x86\x85\xe9\x83\xa8\xe5\xaf\xb9\xe8\xb1\xa1str\xe7\x94\xa8\xe6\x9d\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe8\xa7\xa3\xe9\x87\x8a\n        """"""\n        # \xe6\xb7\xbb\xe5\x8a\xa0\xe9\x92\x88\xe5\xaf\xb9\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\n        self.accordion = widgets.Accordion()\n        buy_factors_child = []\n        for label in labels:\n            buy_factors_child.append(widgets.Label(label,\n                                                   layout=widgets.Layout(width=\'300px\', align_items=\'stretch\')))\n        self.buy_factors = widgets.SelectMultiple(\n            options=[],\n            description=u\'\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'100%\', align_items=\'stretch\')\n        )\n        buy_factors_child.append(self.buy_factors)\n        buy_factors_box = widgets.VBox(buy_factors_child)\n        self.accordion.children = [buy_factors_box]\n\n    def notify_subscriber(self):\n        """"""\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\xa1\x86\xe6\x8e\xa5\xe6\x94\xb6\xe4\xb9\xb0\xe5\x85\xa5tab\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe4\xbf\xa1\xe6\x81\xaf\xe6\x94\xb9\xe5\x8f\x98ui\xe5\x90\x8c\xe6\xad\xa5""""""\n        self.buy_factors.options = self.wg_manager.buy_factor_manger.selected_factors.options\n\n    def add_to_buy_factor(self, select, factor_unique_callable, factor_key, only_one=False):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xad\x96\xe7\x95\xa5\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\x9a\x84\xe5\x9f\xba\xe7\xa1\x80\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x85\xb7\xe4\xbd\x93\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe5\xa4\x96\xe5\xb1\x82\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe5\xa5\x97\xe4\xb8\x80\xe5\xb1\x82""""""\n        if not callable(factor_unique_callable):\n            raise TypeError(\'factor_unique_callable must callable!\')\n\n        if self.wg_manager.buy_factor_manger is not None and len(list(select[\'new\'])) > 0:\n            #  \xe7\x94\xb1\xe4\xba\x8e\xe6\x98\xaf\xe5\xa4\x9a\xe9\x80\x89\xe6\xa1\x86\xef\xbc\x8c\xe7\xae\x80\xe5\x8d\x95\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\x8f\xaa\xe8\x83\xbd\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\n            buy_factor_desc_key = list(select[\'new\'])[-1]\n\n            # \xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key\n            factor_dict, factor_desc_key = factor_unique_callable()\n\n            desc_key_list = buy_factor_desc_key.split(\'+\')\n            if factor_desc_key in desc_key_list:\n                # \xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xbf\x87\xe7\x9b\xb8\xe5\x90\x8c\xe6\x8f\x8f\xe8\xbf\xb0\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe5\x9c\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\xad\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x8d\xe5\x8a\xa0\xe4\xba\x86\n                return\n\n            # \xe4\xbb\x8e\xe4\xb9\xb0\xe5\x85\xa5manager\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe5\x87\xba\xe6\xa0\x88\xe7\x82\xb9\xe5\x87\xbb\xe7\x9a\x84\xe8\xbf\x99\xe4\xb8\xaa\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xb9\xb0\xe5\x85\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n            buy_factor_dict = self.wg_manager.buy_factor_manger.factor_dict.pop(buy_factor_desc_key)\n\n            if only_one:\n                """"""\n                    \xe9\x9d\x9e\xe9\x87\x8d\xe5\xa4\x8d\xe5\xae\xb9\xe5\x99\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaa\xe8\x83\xbd\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\n                """"""\n                factors = factor_dict\n            else:\n                """"""\n                    \xe5\x8f\xaf\xe5\xa4\x8d\xe5\xae\xb9\xe5\x99\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xa6\x82\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x9c\x89\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\n                    \xe5\xa4\x9a\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90, \xe4\xbd\xbf\xe7\x94\xa8list\xe4\xbd\x9c\xe4\xb8\xba\xe4\xba\x8c\xe7\xba\xa7\xe5\xae\xb9\xe5\x99\xa8\n                """"""\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe7\x8b\xac\xe7\xab\x8b\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe5\xbc\xb9\xe5\x87\xba\n                factors = buy_factor_dict.pop(factor_key, [])\n                # \xe4\xb9\xb0\xe5\x85\xa5\xe7\x8b\xac\xe6\x9c\x89\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\x8a\xa0\xe5\x85\xa5factor_dict\n                factors.append(factor_dict)\n\n            # \xe5\xb0\x86\xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97\xe6\x94\xbe\xe5\x9b\x9e\xe5\x88\xb0\xe4\xb9\xb0\xe5\x85\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xad\n            buy_factor_dict[factor_key] = factors\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x8b\xe7\x8b\xac\xe6\x9c\x89\xe5\x9b\xa0\xe5\xad\x90\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9d\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\n            combine_factor_desc_key = u\'{}+{}\'.format(buy_factor_desc_key, factor_desc_key)\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\xad\xe6\x94\xbe\xe5\x9b\x9e\xe7\xbb\x84\xe5\x90\x88\xe5\xa5\xbd\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\n            self.wg_manager.buy_factor_manger.factor_dict[combine_factor_desc_key] = buy_factor_dict\n            # \xe9\x80\x9a\xe7\x9f\xa5ui\xe6\x9b\xb4\xe6\x96\xb0\n            self.wg_manager.buy_factor_manger.refresh_factor()\n\n\nclass BuyFactorWGManager(WidgetFactorManagerBase):\n    """"""\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\xbb\x84\xe7\xbb\x87\xe7\xb1\xbb""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x84\xe4\xbb\xb6\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x87\xbaself.factor_box""""""\n\n        from ..WidgetBu.ABuWGBuyFactor import BuyDMWidget, BuyXDWidget, BuyWDWidget\n        from ..WidgetBu.ABuWGBuyFactor import BuySDWidget, BuyWMWidget, BuyDUWidget\n\n        self.bf_array = []\n        self.bf_array.append(BuyDMWidget(self))\n        self.bf_array.append(BuyXDWidget(self))\n        self.bf_array.append(BuyWDWidget(self))\n        self.bf_array.append(BuySDWidget(self))\n        self.bf_array.append(BuyWMWidget(self))\n        self.bf_array.append(BuyDUWidget(self))\n\n        # bf() call\xe7\x94\xa8widget\xe7\xbb\x84list\n        children = [bf() for bf in self.bf_array]\n\n        if self.scroll_factor_box:\n            self.factor_box = widgets.Box(children=children,\n                                          layout=self.factor_layout)\n        else:\n            # \xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8cn\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85sub_children_group\xe5\xba\x8f\xe5\x88\x97,\n            sub_children_group = self._sub_children(children, len(children) / self._sub_children_group_cnt)\n            sub_children_box = [widgets.HBox(sub_children) for sub_children in sub_children_group]\n            self.factor_box = widgets.VBox(sub_children_box)\n\n\nclass WidgetFactorBuyBase(WidgetFactorBase):\n    """"""\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb""""""\n\n    def __init__(self, wg_manager):\n        super(WidgetFactorBuyBase, self).__init__(wg_manager)\n        if wg_manager.add_button_style == \'grid\':\n            add_cb = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\xaf\xbb\xe6\x89\xbe\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\', layout=widgets.Layout(width=\'98%\'),\n                                    button_style=\'info\')\n            add_cb.on_click(self.add_buy_factor)\n\n            add_dp = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\xaf\xbb\xe6\x89\xbe\xe7\x8b\xac\xe7\xab\x8b\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbd\xb3\xe7\xbb\x84\xe5\x90\x88\', layout=widgets.Layout(width=\'98%\'),\n                                    button_style=\'warning\')\n            add_dp.on_click(self.add_buy_factor_grid)\n\n            self.add = widgets.VBox([add_cb, add_dp])\n        else:\n            self.add = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\x85\xa8\xe5\xb1\x80\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\', layout=widgets.Layout(width=\'98%\'),\n                                      button_style=\'info\')\n            self.add.on_click(self.add_buy_factor)\n        self._init_widget()\n\n    @abstractmethod\n    def _init_widget(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def make_buy_factor_unique(self):\n        """"""\n            \xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x9b\xa0\xe5\xad\x90\xe5\xad\x97\xe5\x85\xb8\n            \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x9a\n            1. \xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n            2. \xe5\x9b\xa0\xe5\xad\x90\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\n        """"""\n        pass\n\n    # noinspection PyUnusedLocal\n    def add_buy_factor(self, bt):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict, factor_desc_key = self.make_buy_factor_unique()\n        self.wg_manager.add_factor(factor_dict, factor_desc_key)\n\n    # noinspection PyUnusedLocal\n    def add_buy_factor_grid(self, bt):\n        """"""grid search\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict, factor_desc_key = self.make_buy_factor_unique()\n        # \xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97value\xe9\x83\xbd\xe5\xa5\x97\xe4\xb8\x8alist\n        factors_grid = {bf_key: [factor_dict[bf_key]]\n                        for bf_key in factor_dict.keys()}\n        self.wg_manager.add_factor(factors_grid, factor_desc_key)\n'"
abupy/WidgetBu/ABuWGBRun.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe4\xb8\x8a\xe5\xb1\x82\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport pandas as pd\nfrom IPython.display import display\nimport ipywidgets as widgets\n\nfrom ..UtilBu import ABuProgress\nfrom ..WidgetBu.ABuWGBase import WidgetBase, show_msg_func, show_msg_toast_func\nfrom ..WidgetBu.ABuWGBRunBase import WidgetRunTT\nfrom ..WidgetBu.ABuWGBSymbol import WidgetSymbolChoice\nfrom ..WidgetBu.ABuWGBFBase import BuyFactorWGManager\nfrom ..WidgetBu.ABuWGSFBase import SellFactorWGManager\nfrom ..WidgetBu.ABuWGPSBase import PickStockWGManager\nfrom ..WidgetBu.ABuWGPosBase import PosWGManager\nfrom ..WidgetBu.ABuWGUmp import WidgetUmp\n\nfrom ..CoreBu.ABu import run_loop_back\nfrom ..CoreBu.ABuStore import store_abu_result_out_put\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..MarketBu.ABuDataCheck import check_symbol_data_mode\nfrom ..BetaBu import ABuAtrPosition, ABuPositionBase\nfrom ..AlphaBu import ABuPickTimeExecute\nfrom ..TradeBu.ABuBenchmark import AbuBenchmark\nfrom ..TradeBu.ABuCapital import AbuCapital\nfrom ..MetricsBu.ABuMetricsBase import AbuMetricsBase\nfrom ..CoreBu.ABuStore import AbuResultTuple\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyProtectedMember\nclass WidgetRunLoopBack(WidgetBase):\n    """"""\xe5\x9f\xba\xe7\xa1\x80\xe7\x95\x8c\xe9\x9d\xa2\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8c\x96\xef\xbc\x9a\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\x8f\x82\xe8\x80\x83\xe5\xa4\xa7\xe7\x9b\x98\xe7\xad\x89""""""\n\n    # noinspection PyProtectedMember\n    def __init__(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\x84\xe4\xbb\xb6\xe5\xbd\xa2\xe6\x88\x90tab""""""\n        self.tt = WidgetRunTT()\n        self.sc = WidgetSymbolChoice()\n        self.bf = BuyFactorWGManager()\n\n        self.sf = SellFactorWGManager()\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe7\xae\xa1\xe7\x90\x86\xe6\xb3\xa8\xe5\x86\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x8e\xa5\xe6\x94\xb6\xe6\x94\xb9\xe5\x8f\x98\n        self.sf.register(self.bf)\n\n        self.ps = PickStockWGManager()\n        # \xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe7\xae\xa1\xe7\x90\x86\xe6\xb3\xa8\xe5\x86\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x8e\xa5\xe6\x94\xb6\xe6\x94\xb9\xe5\x8f\x98\n        self.ps.register(self.bf)\n\n        self.pos = PosWGManager()\n        # \xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe6\xb3\xa8\xe5\x86\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x8e\xa5\xe6\x94\xb6\xe6\x94\xb9\xe5\x8f\x98\n        self.pos.register(self.bf)\n\n        # \xe6\x9e\x84\xe9\x80\xa0\xe8\xa3\x81\xe5\x88\xa4\xe7\x95\x8c\xe9\x9d\xa2\n        self.ump = WidgetUmp()\n\n        sub_widget_tab = widgets.Tab()\n        sub_widget_tab.children = [self.tt.widget, self.sc.widget, self.bf.widget, self.sf.widget, self.ps.widget,\n                                   self.pos.widget, self.ump.widget]\n        for ind, name in enumerate([u\'\xe5\x9f\xba\xe6\x9c\xac\', u\'\xe8\x82\xa1\xe6\xb1\xa0\', u\'\xe4\xb9\xb0\xe7\xad\x96\', u\'\xe5\x8d\x96\xe7\xad\x96\', u\'\xe9\x80\x89\xe8\x82\xa1\', u\'\xe8\xb5\x84\xe7\xae\xa1\', u\'\xe8\xa3\x81\xe5\x88\xa4\']):\n            sub_widget_tab.set_title(ind, name)\n\n        self.run_loop_bt = widgets.Button(description=u\'\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\', layout=widgets.Layout(width=\'98%\'),\n                                          button_style=\'danger\')\n        self.run_loop_bt.on_click(self.run_loop_back)\n        self.widget = widgets.VBox([sub_widget_tab, self.run_loop_bt])\n\n    def _metrics_out_put(self, metrics, abu_result_tuple):\n        """"""\xe9\x92\x88\xe5\xaf\xb9\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xe5\x92\x8c\xe7\x95\x8c\xe9\x9d\xa2\xe4\xb8\xad\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbe\x93\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c""""""\n        if metrics is None:\n            return\n\n        if self.tt.metrics_mode.value == 0:\n            metrics.plot_returns_cmp(only_show_returns=True)\n        else:\n            metrics.plot_order_returns_cmp(only_info=True)\n\n        pd.options.display.max_rows = self.tt.out_put_display_max_rows.value\n        pd.options.display.max_columns = self.tt.out_put_display_max_columns.value\n\n        """"""\n            options={u\'\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x9aorders_pd\': 0,\n                     u\'\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x9aaction_pd\': 1,\n                     u\'\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\xef\xbc\x9acapital_pd\': 2,\n                     u\'\xe5\x90\x8c\xe6\x97\xb6\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\':3\n        """"""\n        if self.tt.metrics_out_put.value == 0 or self.tt.metrics_out_put.value == 3:\n            show_msg_func(u\'\xe4\xba\xa4\xe6\x98\x93\xe4\xb9\xb0\xe5\x8d\x96\xe8\xaf\xa6\xe6\x83\x85\xe5\x8d\x95\xef\xbc\x9a\')\n            display(abu_result_tuple.orders_pd)\n        if self.tt.metrics_out_put.value == 1 or self.tt.metrics_out_put.value == 3:\n            show_msg_func(u\'\xe4\xba\xa4\xe6\x98\x93\xe8\xa1\x8c\xe4\xb8\xba\xe8\xaf\xa6\xe6\x83\x85\xe5\x8d\x95\xef\xbc\x9a\')\n            display(abu_result_tuple.action_pd)\n        if self.tt.metrics_out_put.value == 2 or self.tt.metrics_out_put.value == 3:\n            show_msg_func(u\'\xe4\xba\xa4\xe6\x98\x93\xe8\xb5\x84\xe9\x87\x91\xe8\xaf\xa6\xe7\xbb\x86\xe5\x8d\x95\xef\xbc\x9a\')\n            display(abu_result_tuple.capital.capital_pd)\n            show_msg_func(u\'\xe4\xba\xa4\xe6\x98\x93\xe6\x89\x8b\xe7\xbb\xad\xe8\xb4\xb9\xe8\xaf\xa6\xe5\x8d\x95\xef\xbc\x9a\')\n            display(abu_result_tuple.capital.commission.commission_df)\n\n        if self.tt.save_out_put.value is True:\n            # \xe6\x9c\xac\xe5\x9c\xb0\xe4\xbf\x9d\xe5\xad\x98\xe5\x90\x84\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\n            store_abu_result_out_put(abu_result_tuple)\n\n    # noinspection PyUnusedLocal\n    def run_loop_back(self, bt):\n        """"""\xe8\xbf\x90\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84button\xe6\x8c\x89\xe9\x92\xae""""""\n        # \xe6\xb8\x85\xe7\x90\x86\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\n        # ABuProgress.clear_output()\n\n        base_run = self.tt\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\n        cash = base_run.cash.value\n        n_folds = 2\n        start = None\n        end = None\n        if not base_run.run_years.disabled:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xa8\xa1\xe5\xbc\x8f\n            n_folds = base_run.run_years.value\n        if not base_run.start.disabled:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\n            start = base_run.start.value\n        if not base_run.end.disabled:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbb\x93\xe6\x9d\x9f\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\n            end = base_run.end.value\n\n        choice_symbols = self.sc.choice_symbols.options\n        if choice_symbols is not None and len(choice_symbols) == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaasymbol\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaeNone\xef\xbc\x8c \xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe5\xb8\x82\xe5\x9c\xba\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\n            choice_symbols = None\n\n        if not check_symbol_data_mode(choice_symbols):\n            return\n\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x9e\x84\xe6\x88\x90\xe5\xba\x8f\xe5\x88\x97\n        buy_factors = list(self.bf.factor_dict.values())\n        if len(buy_factors) == 0:\n            msg = u\'\xe6\xb2\xa1\xe6\x9c\x89\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xbb\xbb\xe4\xbd\x95\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x81\'\n            show_msg_toast_func(msg)\n            return\n\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\x9f\xe6\xb2\xa1\xe6\x9c\x89\n        sell_factors = list(self.sf.factor_dict.values())\n\n        pos_class_list = list(self.pos.factor_dict.values())\n        if len(pos_class_list) == 1:\n            # \xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe5\x85\xa8\xe5\xb1\x80\xe7\xad\x96\xe7\x95\xa5\xe8\xae\xbe\xe7\xbd\xae, [0]\xe5\x85\xa8\xe5\xb1\x80\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaa\xe8\x83\xbd\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x94\xe6\x98\xaf\xe5\x94\xaf\xe4\xb8\x80\n            ABuPositionBase.g_default_pos_class = pos_class_list[0]\n        # \xe8\xa3\x81\xe5\x88\xa4\xe6\xa0\xb9\xe6\x8d\xae\xe5\xb7\xa5\xe4\xbd\x9c\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x89\x8d\xe8\xae\xbe\xe7\xbd\xae\n        self.ump.run_before()\n        if choice_symbols is not None and len(choice_symbols) == 1:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe6\x9c\x891\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe5\x81\x9a\xe4\xb8\xba\xe5\x81\x9a\xe4\xb8\xba\xe5\xaf\xb9\xe6\xaf\x94\xe5\x9f\xba\xe5\x87\x86\n            benchmark = AbuBenchmark(choice_symbols[0])\n            capital = AbuCapital(cash, benchmark)\n            if len(pos_class_list) == 0:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\xaa\xe6\x9c\x891\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe4\xb8\x94\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbf\xae\xe6\x94\xb9\xe8\xbf\x87\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe6\x8c\x81\xe4\xbb\x93\xe6\xaf\x94\xe4\xbe\x8b\xe8\xb0\x83\xe9\xab\x98\n                ABuAtrPosition.g_atr_pos_base = 0.5\n            # \xe5\xb0\xb1\xe4\xb8\x80\xe5\x8f\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xb9\x9f\xe4\xb8\x8d\xe8\xbf\x90\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\n            orders_pd, action_pd, _ = ABuPickTimeExecute.do_symbols_with_same_factors(choice_symbols,\n                                                                                      benchmark,\n                                                                                      buy_factors,\n                                                                                      sell_factors,\n                                                                                      capital, show=True)\n            abu_result_tuple = AbuResultTuple(orders_pd, action_pd, capital, benchmark)\n            metrics = AbuMetricsBase(orders_pd, action_pd, capital, benchmark)\n        else:\n            # \xe9\x92\x88\xe5\xaf\xb9\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81choice_symbols\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5choice_symbols\xe6\x9b\xb4\xe6\x96\xb0\n            self.ps.seed_choice_symbol_update(choice_symbols)\n            # \xe5\xa4\x9a\xe5\x8f\xaa\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\n            stock_picks = list(self.ps.factor_dict.values())\n            if len(stock_picks) == 0:\n                stock_picks = None\n\n            # \xe5\xa4\x9a\xe5\x8f\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbd\xbf\xe7\x94\xa8run_loop_back\n            abu_result_tuple, _ = run_loop_back(cash,\n                                                buy_factors,\n                                                sell_factors,\n                                                stock_picks,\n                                                choice_symbols=choice_symbols,\n                                                start=start,\n                                                end=end,\n                                                n_folds=n_folds)\n            if abu_result_tuple is None:\n                return\n            ABuProgress.clear_output()\n            metrics = AbuMetricsBase(*abu_result_tuple)\n        metrics.fit_metrics()\n        self._metrics_out_put(metrics, abu_result_tuple)\n\n        # ump\xe6\x94\xb6\xe5\xb0\xbe\xe5\xb7\xa5\xe4\xbd\x9c\n        self.ump.run_end(abu_result_tuple, choice_symbols, list(self.bf.factor_dict.keys()),\n                         list(self.sf.factor_dict.keys()), list(self.ps.factor_dict.keys()))\n'"
abupy/WidgetBu/ABuWGBRunBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\nimport ipywidgets as widgets\n\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EDataCacheType, EMarketDataFetchMode, EMarketSourceType\nfrom ..WidgetBu.ABuWGBase import WidgetBase, accordion_shut\nfrom ..UtilBu import ABuFileUtil\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetEnvSetMixin(object):\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb7\xb7\xe5\x85\xa5\xe8\x80\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe5\x81\x9a\xe4\xb8\xba\xe4\xb8\x8a\xe5\xb1\x82widget\xe6\x8b\xa5\xe6\x9c\x89\xe7\x9a\x84\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8f\xaf\xe4\xb8\xba\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb8\x8a\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8\n        \xe4\xbe\xbf\xe4\xba\x8e\xe4\xb8\x8a\xe5\xb1\x82widgte\xe4\xbd\xbf\xe7\x94\xa8self\xe5\x8e\xbb\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe4\xb8\x8a\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8\n        \xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x9a\xe5\x9f\xba\xe7\xa1\x80env\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\n        1. \xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8e\xe5\xae\x9e\xe6\x97\xb6\n        2. csv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8ehdf5\xe6\xa8\xa1\xe5\xbc\x8f\n        3. \xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\n        4. \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe5\x88\x87\xe6\x8d\xa2\n    """"""\n\n    # noinspection PyProtectedMember\n    def init_env_set_ui(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9f\xba\xe7\xa1\x80env widget ui return widgets.VBox""""""\n        """"""\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8e\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x87\xe6\x8d\xa2""""""\n        self.date_mode = widgets.RadioButtons(\n            options=[u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', u\'\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\'],\n            value=u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\' if ABuEnv._g_enable_example_env_ipython else u\'\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\',\n            description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f:\',\n            disabled=False\n        )\n        self.date_mode.observe(self.on_data_mode_change, names=\'value\')\n\n        set_mode_label_tip = widgets.Label(u\'\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f|\xe8\x81\x94\xe7\xbd\x91\xe6\xa8\xa1\xe5\xbc\x8f|\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe5\x8f\xaa\xe5\x9c\xa8\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x9a\',\n                                           layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n\n        """"""csv\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8ehdf5\xe6\xa8\xa1\xe5\xbc\x8f\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x87\xe6\x8d\xa2""""""\n        self.store_mode_dict = {EDataCacheType.E_DATA_CACHE_CSV.value: u\'csv\xe6\xa8\xa1\xe5\xbc\x8f(\xe6\x8e\xa8\xe8\x8d\x90)\',\n                                EDataCacheType.E_DATA_CACHE_HDF5.value: u\'hdf5\xe6\xa8\xa1\xe5\xbc\x8f\'}\n        self.store_mode = widgets.RadioButtons(\n            options=[u\'csv\xe6\xa8\xa1\xe5\xbc\x8f(\xe6\x8e\xa8\xe8\x8d\x90)\', u\'hdf5\xe6\xa8\xa1\xe5\xbc\x8f\'],\n            value=self.store_mode_dict[ABuEnv.g_data_cache_type.value],\n            description=u\'\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f:\',\n            disabled=False\n        )\n        self.store_mode.observe(self.on_data_store_change, names=\'value\')\n\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x87\xe6\x8d\xa2""""""\n        self.fetch_mode_dict = {EMarketDataFetchMode.E_DATA_FETCH_FORCE_LOCAL.value: u\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f(\xe6\x8e\xa8\xe8\x8d\x90)\',\n                                EMarketDataFetchMode.E_DATA_FETCH_NORMAL.value: u\'\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbd\x91\xe7\xbb\x9c\xe7\xbb\x93\xe5\x90\x88\xe6\xa8\xa1\xe5\xbc\x8f\',\n                                EMarketDataFetchMode.E_DATA_FETCH_FORCE_NET.value: u\'\xe5\xbc\xba\xe5\x88\xb6\xe5\x85\xa8\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbd\x91\xe7\xbb\x9c\'}\n        self.fetch_mode = widgets.RadioButtons(\n            options=[u\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f(\xe6\x8e\xa8\xe8\x8d\x90)\', u\'\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbd\x91\xe7\xbb\x9c\xe7\xbb\x93\xe5\x90\x88\xe6\xa8\xa1\xe5\xbc\x8f\', u\'\xe5\xbc\xba\xe5\x88\xb6\xe5\x85\xa8\xe9\x83\xa8\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbd\x91\xe7\xbb\x9c\'],\n            value=self.fetch_mode_dict[ABuEnv.g_data_fetch_mode.value],\n            description=u\'\xe8\x81\x94\xe7\xbd\x91\xe6\xa8\xa1\xe5\xbc\x8f:\',\n            disabled=False\n        )\n        self.fetch_mode.observe(self.on_fetch_mode_change, names=\'value\')\n\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x87\xe6\x8d\xa2""""""\n        self.data_source_accordion = widgets.Accordion()\n        self.date_source_dict = {EMarketSourceType.E_MARKET_SOURCE_bd.value: u\'\xe7\x99\xbe\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\',\n                                 EMarketSourceType.E_MARKET_SOURCE_tx.value: u\'\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\',\n                                 EMarketSourceType.E_MARKET_SOURCE_nt.value: u\'\xe7\xbd\x91\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\',\n                                 EMarketSourceType.E_MARKET_SOURCE_sn_us.value: u\'\xe6\x96\xb0\xe6\xb5\xaa\xe7\xbe\x8e\xe8\x82\xa1(\xe7\xbe\x8e\xe8\x82\xa1)\',\n                                 EMarketSourceType.E_MARKET_SOURCE_sn_futures.value: u\'\xe6\x96\xb0\xe6\xb5\xaa\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7(\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7)\',\n                                 EMarketSourceType.E_MARKET_SOURCE_sn_futures_gb.value: u\'\xe6\x96\xb0\xe6\xb5\xaa\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7(\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7)\',\n                                 EMarketSourceType.E_MARKET_SOURCE_hb_tc.value: u\'\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\'}\n        self.date_source = widgets.RadioButtons(\n            options=[u\'\xe7\x99\xbe\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\', u\'\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\', u\'\xe7\xbd\x91\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\',\n                     u\'\xe6\x96\xb0\xe6\xb5\xaa\xe7\xbe\x8e\xe8\x82\xa1(\xe7\xbe\x8e\xe8\x82\xa1)\', u\'\xe6\x96\xb0\xe6\xb5\xaa\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7(\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7)\', u\'\xe6\x96\xb0\xe6\xb5\xaa\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7(\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7)\',\n                     u\'\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\'],\n            value=self.date_source_dict[ABuEnv.g_market_source.value],\n            description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90:\',\n            disabled=False\n        )\n        self.date_source.observe(self.on_date_source_change, names=\'value\')\n        source_label_tip1 = widgets.Label(u\'\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe4\xbb\x85\xe4\xbe\x9b\xe5\xad\xa6\xe4\xb9\xa0\xe4\xbd\xbf\xe7\x94\xa8\',\n                                          layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        source_label_tip2 = widgets.Label(u\'abupy\xe6\x8f\x90\xe4\xbe\x9b\xe4\xba\x86\xe6\x8e\xa5\xe5\x85\xa5\xe5\xa4\x96\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x92\x8c\xe8\xa7\x84\xe8\x8c\x83\',\n                                          layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        source_label_tip3 = widgets.Label(u\'\xe8\xaf\xa6\xe9\x98\x85\xe8\xaf\xbbgithub\xe4\xb8\x8a\xe6\x95\x99\xe7\xa8\x8b\xe7\xac\xac19\xe8\x8a\x82\xe7\x9a\x84\xe7\xa4\xba\xe4\xbe\x8b\',\n                                          layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n\n        other_data_set_box = widgets.VBox([self.fetch_mode, source_label_tip1, self.date_source, source_label_tip2,\n                                           source_label_tip3, self.store_mode])\n\n        self.data_source_accordion.children = [other_data_set_box]\n        self.data_source_accordion.set_title(0, u\'\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f|\xe8\x81\x94\xe7\xbd\x91\xe6\xa8\xa1\xe5\xbc\x8f|\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\')\n        accordion_shut(self.data_source_accordion)\n\n        mdm_box = widgets.VBox([self.date_mode, set_mode_label_tip, self.data_source_accordion])\n\n        if ABuEnv._g_enable_example_env_ipython:\n            # \xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe8\xb4\xae\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x87\xe6\x8d\xa2\xe6\x89\x8d\xe7\x94\x9f\xe6\x95\x88\n            self.store_mode.disabled = True\n            self.fetch_mode.disabled = True\n\n        return mdm_box\n\n    def on_data_mode_change(self, change):\n        """"""\xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\x8e\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbd\xac\xe6\x8d\xa2""""""\n        if change[\'new\'] == u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\':\n            ABuEnv.enable_example_env_ipython(show_log=False)\n            self.store_mode.disabled = True\n            self.fetch_mode.disabled = True\n            accordion_shut(self.data_source_accordion)\n        else:\n            if ABuFileUtil.file_exist(ABuEnv.g_project_kl_df_data_csv) and \\\n                            len(os.listdir(ABuEnv.g_project_kl_df_data_csv)) > 5000:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\xbe\x88\xe5\xa4\x9a\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xbb\x8e\xe6\xb2\x99\xe7\x9b\x92\xe6\x94\xb9\xe5\x8f\x98\xe4\xbe\x9d\xe7\x84\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x98\xaf\xe6\x9c\xac\xe5\x9c\xb0\xe6\xa8\xa1\xe5\xbc\x8f\n                ABuEnv._g_enable_example_env_ipython = False\n            else:\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\xa1\xe6\x9c\x89\xe5\xbe\x88\xe5\xa4\x9a\xe7\xbc\x93\xe5\xad\x98\xe4\xbb\x8e\xe6\xb2\x99\xe7\x9b\x92\xe6\x94\xb9\xe5\x88\xb0\xe5\xbc\x80\xe6\x94\xbe\xe4\xb8\x80\xe8\xb5\xb7\xe6\x94\xb9\xe5\x8f\x98\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbd\x91\xe7\xbb\x9c\xe7\xbb\x93\xe5\x90\x88\n                ABuEnv.disable_example_env_ipython(show_log=False)\n\n            self.store_mode.disabled = False\n            self.fetch_mode.disabled = False\n            self.data_source_accordion.selected_index = 0\n        # \xe9\x9c\x80\xe8\xa6\x81\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe7\x95\x8c\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x90\x8c\xe6\xad\xa5\xe6\x9b\xb4\xe6\x96\xb0\n        self.fetch_mode.value = self.fetch_mode_dict[ABuEnv.g_data_fetch_mode.value]\n\n    def on_data_store_change(self, change):\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x82\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb9\xe5\x8f\x98""""""\n        store_mode_dict = {self.store_mode_dict[sk]: EDataCacheType(sk) for sk in self.store_mode_dict}\n        # \xe6\x94\xb9\xe5\x8f\x98\xe8\xae\xbe\xe7\xbd\xae\xe5\x80\xbc\n        ABuEnv.g_data_cache_type = store_mode_dict[change[\'new\']]\n\n    def on_fetch_mode_change(self, change):\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb9\xe5\x8f\x98""""""\n        fetch_mode_dict = {self.fetch_mode_dict[fm]: EMarketDataFetchMode(fm) for fm in self.fetch_mode_dict}\n        # \xe6\x94\xb9\xe5\x8f\x98\xe8\xae\xbe\xe7\xbd\xae\xe5\x80\xbc\n        ABuEnv.g_data_fetch_mode = fetch_mode_dict[change[\'new\']]\n\n    def on_date_source_change(self, change):\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb9\xe5\x8f\x98""""""\n        date_source_dict = {self.date_source_dict[ds]: EMarketSourceType(ds) for ds in self.date_source_dict}\n        # \xe6\x94\xb9\xe5\x8f\x98\xe8\xae\xbe\xe7\xbd\xae\xe5\x80\xbc\n        ABuEnv.g_market_source = date_source_dict[change[\'new\']]\n\n\nclass WidgetTimeModeMixin(object):\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb7\xb7\xe5\x85\xa5\xe8\x80\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe5\x81\x9a\xe4\xb8\xba\xe4\xb8\x8a\xe5\xb1\x82widget\xe6\x8b\xa5\xe6\x9c\x89\xe7\x9a\x84\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8f\xaf\xe4\xb8\xba\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb8\x8a\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8\n        \xe4\xbe\xbf\xe4\xba\x8e\xe4\xb8\x8a\xe5\xb1\x82widgte\xe4\xbd\xbf\xe7\x94\xa8self\xe5\x8e\xbb\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe4\xb8\x8a\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8\n        \xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x9a\xe5\x9f\xba\xe7\xa1\x80\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\n        1. \xe5\xb9\xb4\xe6\x95\xb0\xe6\xa8\xa1\xe5\xbc\x8f\n        2. \xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe6\xa8\xa1\xe5\xbc\x8f\n    """"""\n\n    # noinspection PyProtectedMember\n    def init_time_mode_ui(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9f\xba\xe7\xa1\x80env widget ui return widgets.VBox""""""\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\xbc\x8f\n        self.time_mode = widgets.RadioButtons(\n            options={u\'\xe4\xbd\xbf\xe7\x94\xa8{}\xe5\xb9\xb4\xe6\x95\xb0\'.format(self.time_mode_str()): 0,\n                     u\'\xe4\xbd\xbf\xe7\x94\xa8{}\xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f\'.format(self.time_mode_str()): 1},\n            value=0,\n            description=u\'\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\xbc\x8f:\',\n            disabled=False\n        )\n        self.time_mode.observe(self.on_time_mode_change, names=\'value\')\n\n        # \xe5\xb9\xb4\xe6\x95\xb0\xe6\xa8\xa1\xe5\xbc\x8f\n        self.run_years = widgets.BoundedIntText(\n            value=2,\n            min=1,\n            max=6,\n            step=1,\n            description=u\'{}\xe5\xb9\xb4\xe6\x95\xb0:\'.format(self.time_mode_str()),\n            disabled=False\n        )\n        # \xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe6\xa8\xa1\xe5\xbc\x8f\n        self.start = widgets.Text(\n            value=\'2014-07-26\',\n            placeholder=u\'\xe5\xb9\xb4-\xe6\x9c\x88-\xe6\x97\xa5\',\n            description=u\'\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xa5\xe6\x9c\x9f:\',\n            disabled=False\n        )\n        self.end = widgets.Text(\n            value=\'2016-07-26\',\n            placeholder=u\'\xe5\xb9\xb4-\xe6\x9c\x88-\xe6\x97\xa5\',\n            description=u\'\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f:\',\n            disabled=False\n        )\n        self.run_years.disabled = False\n        self.start.disabled = True\n        self.end.disabled = True\n\n        return widgets.VBox([self.time_mode, self.run_years, self.start, self.end])\n\n    def on_time_mode_change(self, change):\n        """"""\xe5\x88\x87\xe6\x8d\xa2\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb4\xe6\x95\xb0\xe8\xbf\x98\xe6\x98\xaf\xe8\xb5\xb7\xe5\xa7\x8b\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4\xe5\x81\x9a\xe4\xb8\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8f\x82\xe6\x95\xb0""""""\n        if change[\'new\'] == 0:\n            self.run_years.disabled = False\n            self.start.disabled = True\n            self.end.disabled = True\n        else:\n            self.run_years.disabled = True\n            self.start.disabled = False\n            self.end.disabled = False\n\n    def time_mode_str(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x97\xb6\xe9\x97\xb4\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89eg\xef\xbc\x9a\xe5\x9b\x9e\xe6\xb5\x8b\xef\xbc\x8c\xe5\x88\x86\xe6\x9e\x90""""""\n        raise NotImplementedError(\'NotImplementedError time_mode_str!\')\n\n\nclass WidgetMetricsSet(object):\n    """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb7\xb7\xe5\x85\xa5\xe8\x80\x8c\xe4\xb8\x8d\xe8\xa6\x81\xe5\x81\x9a\xe4\xb8\xba\xe4\xb8\x8a\xe5\xb1\x82widget\xe6\x8b\xa5\xe6\x9c\x89\xe7\x9a\x84\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8f\xaf\xe4\xb8\xba\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb8\x8a\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8\n        \xe4\xbe\xbf\xe4\xba\x8e\xe4\xb8\x8a\xe5\xb1\x82widgte\xe4\xbd\xbf\xe7\x94\xa8self\xe5\x8e\xbb\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe4\xb8\x8a\xe5\xb1\x82\xe4\xbd\xbf\xe7\x94\xa8\n        \xe6\xb7\xb7\xe5\x85\xa5\xe7\xb1\xbb\xef\xbc\x9a\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbe\x93\xe5\x87\xba\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\n        1. \xe8\xbe\x93\xe5\x87\xba\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x9a\n            1. order_cmp + only_show_returns\n            2. returns_cmp + only_info\n        2. \xe8\xbe\x93\xe5\x87\xba\xe5\xba\xa6\xe9\x87\x8f\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x9a\n            1. \xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x9aorders_pd\n            2. \xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x9aaction_pd\n            3. \xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\xef\xbc\x9acapital_pd\n            4. \xe5\x90\x8c\xe6\x97\xb6\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95(orders_pd, action_pd, capital_pd)\n        3. \xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa1\x8c\xe5\x88\x97\xe6\x98\xbe\xe7\xa4\xba\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x9a\n            1. \xe9\xbb\x98\xe8\xae\xa4\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba50\n            2. \xe9\xbb\x98\xe8\xae\xa4\xe6\x9c\x80\xe5\xa4\xa7\xe5\x88\x97\xe6\x98\xbe\xe7\xa4\xba50\n        4. \xe6\x98\xaf\xe5\x90\xa6\xe5\xb0\x86\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\xe4\xbf\x9d\xe5\xad\x98\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0output\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\n    """"""\n\n    # noinspection PyProtectedMember\n    def init_metrics_ui(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9f\xba\xe7\xa1\x80env widget ui return widgets.VBox""""""\n        # \xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\xbc\x8f\n        self.metrics_mode = widgets.RadioButtons(\n            options={u\'\xe8\x80\x83\xe8\x99\x91\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8b\xe6\xa0\x87\xe5\xb0\xba\xe5\xa4\xa7\xe7\x9b\x98\xe5\xaf\xb9\xe6\xaf\x94\': 0,\n                     u\'\xe4\xb8\x8d\xe8\x80\x83\xe8\x99\x91\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8b\xe4\xb8\x8d\xe5\xaf\xb9\xe6\xaf\x94\xe6\xa0\x87\xe5\xb0\xba\': 1},\n            value=0,\n            description=u\'\xe5\xba\xa6\xe9\x87\x8f\xe6\xa8\xa1\xe5\xbc\x8f:\',\n            disabled=False\n        )\n\n        self.metrics_out_put = widgets.RadioButtons(\n            options={u\'\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x9aorders_pd\': 0,\n                     u\'\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x9aaction_pd\': 1,\n                     u\'\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xba\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\xef\xbc\x9acapital_pd\': 2,\n                     u\'\xe8\xbe\x93\xe5\x87\xba\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\': 3},\n            value=0,\n            description=u\'\xe8\xbe\x93\xe5\x87\xba\xe5\xaf\xb9\xe8\xb1\xa1:\',\n            disabled=False\n        )\n\n        out_put_display_max_label1 = widgets.Label(u\'\xe8\xbe\x93\xe5\x87\xba\xe6\x98\xbe\xe7\xa4\xba\xe6\x9c\x80\xe5\xa4\xa7\xe8\xa1\x8c\xe5\x88\x97\xe6\x95\xb0\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\xa7100\xe8\xa1\x8c\xef\xbc\x8c100\xe5\x88\x97\',\n                                                   layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        out_put_display_max_label2 = widgets.Label(u\'\xe5\xa6\x82\xe9\x9c\x80\xe6\x9f\xa5\xe7\x9c\x8b\xe6\x9b\xb4\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\xe8\xa1\xa8\xe5\x8d\x95\xef\xbc\x8c\xe8\xaf\xb7\xe9\x80\x89\xe6\x8b\xa9\xe4\xbf\x9d\xe5\xad\x98\xe8\xbe\x93\xe5\x87\xba\xe8\x87\xb3\xe6\x96\x87\xe4\xbb\xb6\',\n                                                   layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        self.out_put_display_max_rows = widgets.IntSlider(\n            value=50,\n            min=1,\n            max=100,\n            step=1,\n            description=u\'\xe8\xa1\x8c\xe6\x95\xb0\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n\n        self.out_put_display_max_columns = widgets.IntSlider(\n            value=50,\n            min=1,\n            max=100,\n            step=1,\n            description=u\'\xe5\x88\x97\xe6\x95\xb0\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        out_put_display = widgets.VBox([out_put_display_max_label1,\n                                        out_put_display_max_label2,\n                                        self.out_put_display_max_rows,\n                                        self.out_put_display_max_columns])\n\n        save_out_put_lable = widgets.Label(u\'\xe6\x98\xaf\xe5\x90\xa6\xe4\xbf\x9d\xe5\xad\x98\xe4\xba\xa4\xe6\x98\x93\xe5\x8d\x95\xef\xbc\x8c\xe8\xa1\x8c\xe4\xb8\xba\xe5\x8d\x95\xef\xbc\x8c\xe8\xb5\x84\xe9\x87\x91\xe5\x8d\x95\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\',\n                                           layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        save_out_put_lable2 = widgets.Label(u\'\xe8\xb7\xaf\xe5\xbe\x84:{}\'.format(os.path.join(ABuEnv.g_project_data_dir, \'out_put\')),\n                                            layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        self.save_out_put = widgets.Checkbox(\n            value=False,\n            description=u\'\xe4\xbf\x9d\xe5\xad\x98\xe8\xbe\x93\xe5\x87\xba\',\n            disabled=False,\n        )\n        save_out_put = widgets.VBox([save_out_put_lable,\n                                     save_out_put_lable2,\n                                     self.save_out_put])\n\n        accordion = widgets.Accordion()\n        accordion.children = [widgets.VBox([self.metrics_mode, self.metrics_out_put, out_put_display, save_out_put])]\n        accordion.set_title(0, u\'\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xba\xa6\xe9\x87\x8f\xe7\xbb\x93\xe6\x9e\x9c\xe8\xae\xbe\xe7\xbd\xae\')\n        accordion_shut(accordion)\n\n        return accordion\n\n\nclass WidgetRunTT(WidgetBase, WidgetEnvSetMixin, WidgetTimeModeMixin, WidgetMetricsSet):\n    """"""\xe5\x9f\xba\xe7\xa1\x80\xe8\xae\xbe\xe7\xbd\xae\xe7\x95\x8c\xe9\x9d\xa2\xef\xbc\x9a\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\xef\xbc\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe5\x8f\x82\xe8\x80\x83\xe5\xa4\xa7\xe7\x9b\x98\xe7\xad\x89""""""\n\n    def __init__(self):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xae\xbe\xe7\xbd\xae\xe7\x95\x8c\xe9\x9d\xa2""""""\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91\n        self.cash = widgets.BoundedIntText(\n            value=1000000,\n            min=10000,\n            max=999999999,\n            step=1,\n            description=u\'\xe5\x88\x9d\xe5\xa7\x8b\xe8\xb5\x84\xe9\x87\x91:\',\n            disabled=False\n        )\n        tm_box = self.init_time_mode_ui()\n        mdm_box = self.init_env_set_ui()\n        metrics_box = self.init_metrics_ui()\n\n        self.widget = widgets.VBox([self.cash, tm_box, mdm_box, metrics_box])\n\n    def time_mode_str(self):\n        """"""\xe5\xae\x9e\xe7\x8e\xb0\xe6\xb7\xb7\xe5\x85\xa5WidgetTimeModeMixin\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\x9d\x97\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x9b\x9e\xe6\xb5\x8b""""""\n        return u\'\xe5\x9b\x9e\xe6\xb5\x8b\'\n'"
abupy/WidgetBu/ABuWGBSymbol.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe9\x80\x89\xe8\x82\xa1ui\xe7\x95\x8c\xe9\x9d\xa2""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport ipywidgets as widgets\n\nfrom ..CoreBu.ABuEnv import EMarketTargetType\nfrom ..WidgetBu.ABuWGBase import WidgetBase, WidgetSearchBox\nfrom ..MarketBu import ABuMarket\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu.ABuStrUtil import to_unicode\nfrom ..MarketBu.ABuSymbolStock import AbuSymbolCN, AbuSymbolUS, AbuSymbolHK\nfrom ..MarketBu.ABuSymbolFutures import AbuFuturesCn, AbuFuturesGB\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetSymbolChoice(WidgetBase):\n    """"""\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe9\x80\x89\xe8\x82\xa1ui\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    # noinspection PyProtectedMember\n    def __init__(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe9\x80\x89\xe8\x82\xa1ui\xe7\x95\x8c\xe9\x9d\xa2""""""\n        label_layout = widgets.Layout(width=\'300px\', align_items=\'stretch\', justify_content=\'space-between\')\n        self.cs_tip = widgets.Label(value=u\'\xe5\xa6\x82\xe6\x9e\x9c\xe8\x82\xa1\xe6\xb1\xa0\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\xa7\xe7\x9b\x98\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\', layout=label_layout)\n        # \xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe5\xa4\x9a\xe9\x80\x89\xe6\xa1\x86\n        self.choice_symbols = widgets.SelectMultiple(\n            description=u\'\xe8\x82\xa1\xe6\xb1\xa0:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'300px\', align_items=\'stretch\', justify_content=\'space-between\')\n        )\n        self.choice_symbols.observe(self.choice_symbols_select, names=\'value\')\n\n        # \xe6\x9e\x84\xe5\xbb\xba\xe6\x89\x80\xe6\x9c\x89\xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\n        market_title = [u\'\xe7\xbe\x8e\xe8\x82\xa1\', u\'A\xe8\x82\xa1\', u\'\xe6\xb8\xaf\xe8\x82\xa1\', u\'\xe5\x9b\xbd\xe5\x86\x85\', u\'\xe5\x9b\xbd\xe9\x99\x85\', u\'\xe5\xb8\x81\xe7\xb1\xbb\']\n        us_seed_symbol = [to_unicode(\'{}:{}\'.format(AbuSymbolUS()[symbol].co_name.values[0], symbol))\n                          for symbol in ABuMarket.K_SAND_BOX_US]\n        cn_seed_symbol = [to_unicode(\'{}:{}\'.format(AbuSymbolCN()[symbol].co_name.values[0], symbol))\n                          for symbol in ABuMarket.K_SAND_BOX_CN]\n        hk_seed_symbol = [to_unicode(\'{}:{}\'.format(AbuSymbolHK()[symbol].co_name.values[0], symbol))\n                          for symbol in ABuMarket.K_SAND_BOX_HK]\n        fcn_seed_symbol = [to_unicode(\'{}:{}\'.format(AbuFuturesCn()[symbol][\'product\'].values[0], symbol))\n                           for symbol in AbuFuturesCn().symbol]\n        fgb_seed_symbol = [to_unicode(\'{}:{}\'.format(AbuFuturesGB()[symbol][\'product\'].values[0], symbol))\n                           for symbol in AbuFuturesGB().symbol]\n        # \xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x8f\xe5\x88\x97\xe6\x9e\x84\xe5\xbb\xba\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x97\xe5\x85\xb8\n        self.market_dict = {u\'\xe7\xbe\x8e\xe8\x82\xa1\': us_seed_symbol,\n                            u\'A\xe8\x82\xa1\': cn_seed_symbol,\n                            u\'\xe6\xb8\xaf\xe8\x82\xa1\': hk_seed_symbol,\n                            u\'\xe5\x9b\xbd\xe5\x86\x85\': fcn_seed_symbol,\n                            u\'\xe5\x9b\xbd\xe9\x99\x85\': fgb_seed_symbol,\n                            u\'\xe5\xb8\x81\xe7\xb1\xbb\': [u\'\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81:btc\', u\'\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81:ltc\']}\n\n        # \xe4\xb8\x80\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\x80\xe4\xb8\xaatab\xef\xbc\x8ctab\xe4\xb8\xad\xe7\x9a\x84symbol\xe4\xb8\xba\xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\xad\xe7\x9a\x84symbol\n        self.market_widget_tab = widgets.Tab()\n        self.market_symbol_widget = []\n        for title in market_title:\n            market_symbol = widgets.SelectMultiple(\n                options=self.market_dict[title],\n                description=title,\n                disabled=False\n            )\n            market_symbol.observe(self.on_already_select, names=\'value\')\n            self.market_symbol_widget.append(market_symbol)\n        self.market_widget_tab.children = self.market_symbol_widget\n        for ind, name in enumerate(market_title):\n            self.market_widget_tab.set_title(ind, name)\n\n        self.sc_box = WidgetSearchBox(self.on_already_select)()\n\n        # \xe4\xb8\x8b\xe6\x8b\x89\xe9\x80\x89\xe6\x8b\xa9\xe6\xa0\x87\xe5\xb0\xba\xe5\xa4\xa7\xe7\x9b\x98\n        self.market = widgets.Dropdown(\n            options={u\'\xe7\xbe\x8e\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_US.value,\n                     u\'A\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_CN.value,\n                     u\'\xe6\xb8\xaf\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_HK.value,\n                     u\'\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_CN.value,\n                     u\'\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL.value,\n                     u\'\xe6\x95\xb0\xe5\xad\x97\xe8\xb4\xa7\xe5\xb8\x81\': EMarketTargetType.E_MARKET_TARGET_TC.value},\n            value=ABuEnv.g_market_target.value,\n            description=u\'\xe5\xa4\xa7\xe7\x9b\x98\xe5\xb8\x82\xe5\x9c\xba:\',\n        )\n        self.market.observe(self.on_market_change, names=\'value\')\n\n        market_tip = widgets.Label(value=u\'\xe5\xa4\xa7\xe7\x9b\x98\xe5\xb8\x82\xe5\x9c\xba\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\xaa\xe5\xbd\xb1\xe5\x93\x8d\xe6\x94\xb6\xe7\x9b\x8a\xe5\xaf\xb9\xe6\xaf\x94\xe6\xa0\x87\xe5\xb0\xba\', layout=label_layout)\n        market_box = widgets.VBox([self.market, market_tip])\n\n        self.widget = widgets.VBox([self.cs_tip, self.choice_symbols, self.market_widget_tab,\n                                    self.sc_box, market_box])\n\n    def on_market_change(self, change):\n        """"""\xe5\x88\x87\xe6\x8d\xa2\xe5\xa4\xa7\xe7\x9b\x98\xe5\xb8\x82\xe5\x9c\xba""""""\n        ABuEnv.g_market_target = EMarketTargetType(change[\'new\'])\n\n    def on_already_select(self, select):\n        """"""\xe6\x90\x9c\xe7\xb4\xa2\xe6\xa1\x86\xe6\x88\x96\xe8\x80\x85\xe5\x86\x85\xe7\xbd\xae\xe6\xb2\x99\xe7\x9b\x92symbol\xe4\xb8\xad\xe7\x82\xb9\xe5\x87\xbb\xe6\x94\xbe\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0""""""\n        st_symbol = [symbol.split(\':\')[1] if symbol.find(\':\') > 0\n                     else symbol for symbol in list(select[\'new\'])]\n        # \xe6\x9b\xb4\xe6\x96\xb0\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe4\xb8\xad\xe5\x8e\x9f\xe6\x9c\x89\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\n        self.choice_symbols.options = list(set(st_symbol + list(self.choice_symbols.options)))\n\n    def choice_symbols_select(self, select):\n        """"""\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe4\xb8\xad\xe7\x82\xb9\xe5\x87\xbb\xe5\x88\xa0\xe9\x99\xa4\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84symbol""""""\n        # print(select)\n        # FIXME BUG \xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xacipywidgets\xe4\xb8\x8b\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84\xe4\xb8\x8d\xe5\xaf\xb9\n        self.choice_symbols.options = list(set(self.choice_symbols.options) - set(select[\'new\']))\n'"
abupy/WidgetBu/ABuWGBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\n\nimport ipywidgets as widgets\n\nfrom abc import ABCMeta, abstractmethod\nfrom IPython.display import display\n\nfrom ..CoreBu.ABuFixes import six, partial\nfrom ..UtilBu.ABuStrUtil import to_unicode\nfrom ..UtilBu.ABuOsUtil import show_msg\nfrom ..MarketBu.ABuSymbol import search_to_symbol_dict\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\nshow_msg_func = logging.info\n""""""\xe5\x9f\xba\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x8f\x90\xe7\xa4\xba\xe6\xa1\x86\xe4\xbd\xbf\xe7\x94\xa8partial\xe5\x8c\x85\xe8\xa3\x85title\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x98\xbe\xe7\xa4\xbalog""""""\nshow_msg_toast_func = partial(show_msg, u\'\xe6\x8f\x90\xe7\xa4\xba\', log=True)\n\n\ndef accordion_shut(accordion):\n    """"""\xe7\x94\xb1\xe4\xba\x8e\xe7\x89\x88\xe6\x9c\xac\xe5\x85\xbc\xe5\xae\xb9ipython widgets\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe6\x8a\x98\xe5\x8f\xa0\xe5\x86\x85\xe5\xae\xb9\xe5\x81\x9a\xe4\xb8\x8d\xe5\x90\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe4\xb8\x94\xe9\x9c\x80\xe8\xa6\x81\xe6\x8d\x95\xe8\x8e\xb7\xe5\xbc\x82\xe5\xb8\xb8""""""\n    try:\n        accordion.selected_index = -1\n    except:\n        try:\n            accordion.selected_index = None\n        except:\n            pass\n\n\n# noinspection PyUnresolvedReferences,PyProtectedMember\nclass WidgetBase(object):\n    """"""\xe7\x95\x8c\xe9\x9d\xa2\xe7\xbb\x84\xe4\xbb\xb6\xe5\x9f\xba\xe7\xb1\xbb\xef\xbc\x8c\xe9\x99\x90\xe5\xae\x9a\xe6\x9c\x80\xe7\xbb\x88widget\xe4\xb8\xbaself.widget""""""\n\n    def __call__(self):\n        return self.widget\n\n    def display(self):\n        """"""\xe6\x98\xbe\xe7\xa4\xba\xe4\xbd\xbf\xe7\x94\xa8\xe7\xbb\x9f\xe4\xb8\x80display""""""\n        display(self.widget)\n\n\nclass WidgetFactorBase(six.with_metaclass(ABCMeta, WidgetBase)):\n    """"""\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb""""""\n\n    def __init__(self, wg_manager):\n        self.wg_manager = wg_manager\n        self.widget = None\n        self.label_layout = widgets.Layout(width=\'300px\', align_items=\'stretch\')\n        self.description_layout = widgets.Layout(height=\'150px\')\n        self.widget_layout = widgets.Layout(align_items=\'stretch\', justify_content=\'space-between\')\n\n    @abstractmethod\n    def _init_widget(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbb""""""\n        pass\n\n\nclass WidgetFactorManagerBase(six.with_metaclass(ABCMeta, WidgetBase)):\n    """"""\xe7\xad\x96\xe7\x95\xa5\xe7\xae\xa1\xe7\x90\x86\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb""""""\n\n    def __init__(self, show_add_buy=True, add_button_style=\'default\'):\n        self.factor_dict = {}\n        self.factor_wg_array = []\n        # \xe7\xad\x96\xe7\x95\xa5\xe5\x80\x99\xe9\x80\x89\xe6\xb1\xa0\xe5\x8f\xafx\xe8\xbd\xb4\xe5\xb7\xa6\xe5\x8f\xb3\xe6\xbb\x9a\xe5\x8a\xa8\n        self.factor_layout = widgets.Layout(overflow_x=\'scroll\',\n                                            # flex_direction=\'row\',\n                                            display=\'flex\')\n        self.selected_factors = widgets.SelectMultiple(\n            options=[],\n            description=u\'\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xad\x96\xe7\x95\xa5:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'100%\', align_items=\'stretch\')\n        )\n        # \xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe5\x85\xa8\xe5\xb1\x80\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe7\x82\xb9\xe5\x87\xbb\xe5\x88\xa0\xe9\x99\xa4\n        self.selected_factors.observe(self.remove_factor, names=\'value\')\n        # \xe5\x85\xa8\xe5\xb1\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x94\xb9\xe5\x8f\x98\xe9\x80\x9a\xe7\x9f\xa5\xe6\x8e\xa5\xe6\x94\xb6\xe5\xba\x8f\xe5\x88\x97\n        self.selected_factors_obs = set()\n        self.factor_box = None\n        # \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\x8f\xaf\xe6\xbb\x9a\xe5\x8a\xa8\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\xaf\xb9\xe5\xa4\x96\xe7\x9a\x84widget\xe7\x89\x88\xe6\x9c\xac\xe4\xbb\xa5\xe5\x8f\x8aos\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\x8d\xe7\xbb\x9f\xe4\xb8\x80\n        self.scroll_factor_box = False\n        self._sub_children_group_cnt = 3\n        self.show_add_buy = show_add_buy\n        self.add_button_style = add_button_style\n        # \xe6\x9e\x84\xe5\xbb\xba\xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xb1\xbb\xe7\x9a\x84\xe7\x95\x8c\xe9\x9d\xa2\xe6\x9e\x84\xe5\xbb\xba\n        self._init_widget()\n        if self.factor_box is None:\n            raise RuntimeError(\'_init_widget must build factor_box!\')\n        self.widget = widgets.VBox([self.factor_box, self.selected_factors])\n\n    def _sub_children(self, children, n_split):\n        """"""\xe5\xb0\x86children\xe6\xaf\x8fn_split\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85\xe5\xad\x90children_group\xe5\xba\x8f\xe5\x88\x97""""""\n        sub_children_cnt = int(len(children) / n_split)\n        if sub_children_cnt == 0:\n            sub_children_cnt = 1\n        group_adjacent = lambda a, k: zip(*([iter(a)] * k))\n        children_group = list(group_adjacent(children, sub_children_cnt))\n        residue_ind = -(len(children) % sub_children_cnt) if sub_children_cnt > 0 else 0\n        if residue_ind < 0:\n            children_group.append(children[residue_ind:])\n        return children_group\n\n    def register_subscriber(self, observe):\n        """"""\xe6\xb3\xa8\xe5\x86\x8c\xe5\xb7\xb2\xe9\x80\x89\xe7\xad\x96\xe7\x95\xa5\xe6\xb1\xa0\xe6\x9b\xb4\xe6\x96\xb0\xe9\x80\x9a\xe7\x9f\xa5\xe4\xb8\x8eBFSubscriberMixin\xe5\x85\xb1\xe5\x90\x8c\xe4\xbd\x9c\xe7\x94\xa8""""""\n        self.selected_factors_obs.add(observe)\n\n    def unregister_subscriber(self, observe):\n        """"""\xe8\xa7\xa3\xe9\x99\xa4\xe6\xb3\xa8\xe5\x86\x8c\xe5\xb7\xb2\xe9\x80\x89\xe7\xad\x96\xe7\x95\xa5\xe6\xb1\xa0\xe6\x9b\xb4\xe6\x96\xb0\xe9\x80\x9a\xe7\x9f\xa5\xe4\xb8\x8eBFSubscriberMixin\xe5\x85\xb1\xe5\x90\x8c\xe4\xbd\x9c\xe7\x94\xa8""""""\n        self.selected_factors_obs.remove(observe)\n\n    def notify_subscriber(self):\n        """"""\xe9\x80\x9a\xe7\x9f\xa5\xe5\xb7\xb2\xe9\x80\x89\xe7\xad\x96\xe7\x95\xa5\xe6\xb1\xa0\xe5\x8f\x91\xe7\x94\x9f\xe6\x94\xb9\xe5\x8f\x98\xe7\x9a\x84observe""""""\n        for observe in self.selected_factors_obs:\n            if hasattr(observe, \'notify_subscriber\'):\n                observe.notify_subscriber()\n\n    @abstractmethod\n    def _init_widget(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96, \xe5\x86\x85\xe9\x83\xa8\xe9\x9c\x80\xe8\xa6\x81\xe6\x9e\x84\xe5\xbb\xbaself.factor_box""""""\n        pass\n\n    def refresh_factor(self):\n        """"""\xe5\xb7\xb2\xe9\x80\x89\xe7\xad\x96\xe7\x95\xa5\xe6\xb1\xa0\xe5\x88\xb7\xe6\x96\xb0\xef\xbc\x8c\xe9\x80\x9a\xe7\x9f\xa5\xe5\x85\xb6\xe5\xae\x83\xe6\x9b\xb4\xe6\x96\xb0""""""\n        self.selected_factors.options = list(self.factor_dict.keys())\n        self.notify_subscriber()\n\n    def remove_factor(self, select):\n        """"""\xe7\x82\xb9\xe5\x87\xbb\xe4\xbb\x8e\xe7\xad\x96\xe7\x95\xa5\xe6\xb1\xa0\xe4\xb8\xad\xe5\x88\xa0\xe9\x99\xa4\xe5\xb7\xb2\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5""""""\n        for st_key in list(select[\'new\']):\n            self.factor_dict.pop(st_key)\n        self.selected_factors.options = list(self.factor_dict.keys())\n        # \xe9\x80\x9a\xe7\x9f\xa5\xe5\x85\xb6\xe5\xae\x83\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x80\xe8\xb5\xb7\xe6\x9b\xb4\xe6\x96\xb0\xe7\x9a\x84\xe7\x95\x8c\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\n        self.notify_subscriber()\n\n    def add_factor(self, factor_dict, factor_desc_key, only_one=False):\n        """"""\xe6\xa0\xb9\xe6\x8d\xae\xe5\x85\xb7\xe4\xbd\x93\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x90\xe4\xbe\x9b\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x92\x8c\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe6\x9e\x84\xe5\xbb\xba\xe4\xb8\x8a\xe5\xb1\x82\xe7\xad\x96\xe7\x95\xa5\xe5\xba\x8f\xe5\x88\x97""""""\n        if factor_desc_key in self.factor_dict:\n            msg = u\'{} \xe7\xad\x96\xe7\x95\xa5\xe5\xb7\xb2\xe7\xbb\x8f\xe6\xb7\xbb\xe5\x8a\xa0\xe8\xbf\x87\xef\xbc\x8c\xe9\x87\x8d\xe5\xa4\x8d\xe6\xb7\xbb\xe5\x8a\xa0\xef\xbc\x81\'.format(to_unicode(factor_desc_key))\n            show_msg_toast_func(msg)\n            return\n        if only_one:\n            """"""\n                \xe9\x9d\x9e\xe9\x87\x8d\xe5\xa4\x8d\xe5\xae\xb9\xe5\x99\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaa\xe8\x83\xbd\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\n                \xe5\xa4\xa7\xe5\xa4\x9a\xe6\x95\xb0\xe4\xb8\xba\xe5\x8f\xaf\xe5\xa4\x8d\xe5\xae\xb9\xe5\x99\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\xa6\x82\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x9c\x89\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xef\xbc\x8c\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x8d\x96\xe5\x87\xba\xef\xbc\x8c\n                \xe5\xa4\x9a\xe4\xb8\xaa\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\n            """"""\n            # \xe5\xaf\xb9\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8clear\xe7\xad\x89\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8cpy2\xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xac\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\n            # self.factor_dict.clear()\n            self.factor_dict = {}\n        self.factor_dict[factor_desc_key] = factor_dict\n        self.selected_factors.options = list(self.factor_dict.keys())\n        # \xe9\x80\x9a\xe7\x9f\xa5\xe5\x85\xb6\xe5\xae\x83\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x80\xe8\xb5\xb7\xe6\x9b\xb4\xe6\x96\xb0\xe7\x9a\x84\xe7\x95\x8c\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\n        self.notify_subscriber()\n        msg = u\'{}\xe7\xad\x96\xe7\x95\xa5\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x81\'.format(to_unicode(factor_desc_key))\n        show_msg_toast_func(msg)\n\n\nclass WidgetSearchBox(WidgetBase):\n    """"""\xe6\x90\x9c\xe7\xb4\xa2\xe6\xa1\x86ui\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    # noinspection PyProtectedMember\n    def __init__(self, search_result_callable):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe9\x80\x89\xe8\x82\xa1ui\xe7\x95\x8c\xe9\x9d\xa2""""""\n        if not callable(search_result_callable):\n            raise TypeError(\'search_result_select_func must callable!\')\n        # symbol\xe6\x90\x9c\xe7\xb4\xa2\xe6\xa1\x86\xe6\x9e\x84\xe5\xbb\xba\n        self.search_bt = widgets.Button(description=u\'\xe6\x90\x9c\xe7\xb4\xa2:\', layout=widgets.Layout(height=\'10%\', width=\'7%\'))\n        self.search_input = widgets.Text(\n            value=\'\',\n            placeholder=u\'\xe4\xba\xa4\xe6\x98\x93\xe4\xbb\xa3\xe7\xa0\x81/\xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0/\xe6\x8b\xbc\xe9\x9f\xb3\xe9\xa6\x96\xe5\xad\x97\xe6\xaf\x8d\',\n            description=\'\',\n            disabled=False\n        )\n        self.search_input.observe(self._search_input_change, names=\'value\')\n\n        # symbol\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\xe6\xa1\x86\n        self.search_result = widgets.SelectMultiple(\n            options=[],\n            description=u\'\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'300px\', align_items=\'stretch\', justify_content=\'space-between\')\n        )\n        self.search_result.observe(search_result_callable, names=\'value\')\n        self.search_bt.on_click(self._do_search)\n\n        # \xe6\x90\x9c\xe7\xb4\xa2\xe6\xa1\x86 \xef\xbc\x8b \xe6\x8c\x89\xe9\x92\xae \xef\xbc\x8b \xe7\xbb\x93\xe6\x9e\x9c\xe6\xa1\x86 box\xe6\x8b\xbc\xe6\x8e\xa5\n        sc_hb = widgets.HBox([self.search_bt, self.search_input])\n        self.widget = widgets.VBox([sc_hb, self.search_result])\n\n    # noinspection PyUnusedLocal\n    def _do_search(self, bt):\n        """"""\xe6\x90\x9c\xe7\xb4\xa2\xe6\xa1\x86\xe6\x90\x9c\xe7\xb4\xa2\xe6\x89\xa7\xe8\xa1\x8c\xe5\x87\xbd\xe6\x95\xb0""""""\n        result_dict = search_to_symbol_dict(self.search_input.value)\n        result_options = [u\'{}:{}\'.format(to_unicode(result_dict[symbol]), to_unicode(symbol))\n                          for symbol in result_dict]\n        self.search_result.options = result_options\n\n    def _search_input_change(self, change):\n        """"""\xe5\xbd\x93\xe6\x90\x9c\xe7\xb4\xa2\xe8\xbe\x93\xe5\x85\xa5\xe6\xa1\x86\xe6\x96\x87\xe5\xad\x97\xe5\xa4\xa7\xe4\xba\x8e1\xe4\xb8\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe8\x87\xaa\xe5\x8a\xa8\xe6\x90\x9c\xe7\xb4\xa2""""""\n        search_word = change[\'new\']\n        if len(search_word) > 1:\n            # \xe5\x92\x8c_do_search\xe4\xb8\x8d\xe5\x90\x8c\xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8fast_mode\n            result_dict = search_to_symbol_dict(self.search_input.value, fast_mode=True)\n            result_options = [u\'{}:{}\'.format(to_unicode(result_dict[symbol]), to_unicode(symbol))\n                              for symbol in result_dict]\n            self.search_result.options = result_options\n\n\n# noinspection PyUnusedLocal\ndef permission_denied(*arg, **kwargs):\n    """"""\xe6\x89\xa7\xe8\xa1\x8c\xe6\x9d\x83\xe9\x99\x90\xe4\xb8\x8d\xe8\xb6\xb3\xe7\x9a\x84\xe7\x94\xa8\xe6\x88\xb7\xe6\x8f\x90\xe7\xa4\xba""""""\n    show_msg_toast_func(u\'\xe6\x89\x80\xe6\x89\xa7\xe8\xa1\x8c\xe7\x9a\x84\xe6\x93\x8d\xe4\xbd\x9c\xe6\x9d\x83\xe9\x99\x90\xe4\xb8\x8d\xe8\xb6\xb3\xef\xbc\x81\')\n'"
abupy/WidgetBu/ABuWGBuyFactor.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBFBase import WidgetFactorBuyBase\nfrom ..FactorBuyBu.ABuFactorBuyBreak import AbuFactorBuyBreak\nfrom ..FactorBuyBu.ABuFactorBuyDM import AbuDoubleMaBuy\nfrom ..FactorBuyBu.ABuFactorBuyWD import AbuFactorBuyWD\nfrom ..FactorBuyBu.ABuFactorBuyDemo import AbuSDBreak, AbuWeekMonthBuy\nfrom ..FactorBuyBu.ABuFactorBuyTrend import AbuDownUpTrend\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass BuyDMWidget(WidgetFactorBuyBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuDoubleMaBuy\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuDoubleMaBuy\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe5\x8a\xa8\xe6\x80\x81\xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe7\xad\x96\xe7\x95\xa5\xe6\x98\xaf\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\xbb\x8f\xe5\x85\xb8\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe4\xb9\x8b\xe4\xb8\x80\xef\xbc\x8c\xe5\x85\xb6\xe5\xb1\x9e\xe4\xba\x8e\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe8\xb8\xaa\xe7\xad\x96\xe7\x95\xa5: \\n\'\n                  u\'1. \xe9\xa2\x84\xe8\xae\xbe\xe4\xb8\xa4\xe6\x9d\xa1\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x9a\xe5\xa6\x82\xe4\xb8\x80\xe4\xb8\xaama=5\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaama=60, 5\xe7\x9a\x84\xe5\x9d\x87\xe7\xba\xbf\xe8\xa2\xab\xe7\xa7\xb0\xe4\xbd\x9c\xe5\xbf\xab\xe7\xba\xbf\xef\xbc\x8c60\xe7\x9a\x84\xe5\x9d\x87\xe7\xba\xbf\xe8\xa2\xab\xe7\xa7\xb0\xe4\xbd\x9c\xe6\x85\xa2\xe7\xba\xbf\\n\'\n                  u\'2. \xe6\x8b\xa9\xe6\x97\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe5\xbd\x93\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8a\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xef\xbc\x88ma5\xe4\xb8\x8a\xe7\xa9\xbfma60\xef\xbc\x89\xe7\xa7\xb0\xe4\xb8\xba\xe5\xbd\xa2\xe6\x88\x90\xe9\x87\x91\xe5\x8f\x89\xe4\xb9\xb0\xe7\x82\xb9\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\\n\'\n                  u\'3. \xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe6\x85\xa2\xe7\xba\xbf\xe5\x80\xbc\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe8\xb5\xb0\xe5\x8a\xbf\xe9\x9c\x87\xe8\x8d\xa1\xe5\xa5\x97\xe5\x88\xa9\xe7\xa9\xba\xe9\x97\xb4\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x88\xe9\x80\x82\xe7\x9a\x84ma\xe6\x85\xa2\xe7\xba\xbf\\n\'\n                  u\'4. \xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe5\x8a\xa8\xe6\x80\x81\xe5\xbf\xab\xe7\xba\xbf\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe5\xbf\xab\xe7\xba\xbf\xe5\x80\xbc\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe6\x85\xa2\xe7\xba\xbf\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe5\x90\x88\xe9\x80\x82\xe7\x9a\x84ma\xe5\xbf\xab\xe7\xba\xbf\',\n            description=u\'\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe4\xb9\xb0\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.slow_label = widgets.Label(u\'\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\xef\xbc\x8c\xe5\x8f\xaf\xe6\x89\x8b\xe5\x8a\xa8\xe5\x9b\xba\xe5\xae\x9a\xe6\x85\xa2\xe7\xba\xbf\xe5\x80\xbc\', layout=self.label_layout)\n        self.slow_int = widgets.IntSlider(\n            value=60,\n            min=10,\n            max=120,\n            step=1,\n            description=u\'\xe6\x89\x8b\xe5\x8a\xa8\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.auto_slow = widgets.Checkbox(\n            value=True,\n            description=u\'\xe5\x8a\xa8\xe6\x80\x81\xe6\x85\xa2\xe7\xba\xbf\',\n            disabled=False\n        )\n\n        def slow_change(change):\n            self.slow_int.disabled = change[\'new\']\n\n        self.auto_slow.observe(slow_change, names=\'value\')\n        self.slow = widgets.VBox([self.auto_slow, self.slow_int])\n        self.slow_box = widgets.VBox([self.slow_label, self.slow])\n\n        self.fast_label = widgets.Label(u\'\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe5\x8a\xa8\xe6\x80\x81\xe5\xbf\xab\xe7\xba\xbf\xef\xbc\x8c\xe5\x8f\xaf\xe6\x89\x8b\xe5\x8a\xa8\xe5\x9b\xba\xe5\xae\x9a\xe5\xbf\xab\xe7\xba\xbf\xe5\x80\xbc\', layout=self.label_layout)\n        self.fast_int = widgets.IntSlider(\n            value=5,\n            min=1,\n            max=90,\n            step=1,\n            description=u\'\xe6\x89\x8b\xe5\x8a\xa8\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.auto_fast = widgets.Checkbox(\n            value=True,\n            description=u\'\xe5\x8a\xa8\xe6\x80\x81\xe5\xbf\xab\xe7\xba\xbf\',\n            disabled=False,\n        )\n\n        def fast_change(change):\n            self.fast_int.disabled = change[\'new\']\n\n        self.auto_fast.observe(fast_change, names=\'value\')\n        self.fast = widgets.VBox([self.auto_fast, self.fast_int])\n        self.fast_box = widgets.VBox([self.fast_label, self.fast])\n\n        self.widget = widgets.VBox([self.description, self.slow_box, self.fast_box, self.add],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_buy_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuDoubleMaBuy\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        slow_int = -1 if self.auto_slow.value else self.slow_int.value\n        fast_int = -1 if self.auto_fast.value else self.fast_int.value\n\n        factor_dict = {\'class\': AbuDoubleMaBuy, \'slow\': slow_int, \'fast\': fast_int}\n        factor_desc_key = u\'\xe5\x8a\xa8\xe6\x80\x81\xe5\x8f\x8c\xe5\x9d\x87\xe6\x85\xa2{}\xe5\xbf\xab{}\xe4\xb9\xb0\xe5\x85\xa5\'.format(\n            u\'\xe5\x8a\xa8\xe6\x80\x81\' if slow_int == -1 else slow_int, u\'\xe5\x8a\xa8\xe6\x80\x81\' if fast_int == -1 else fast_int)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuDoubleMaBuy""""""\n        return AbuDoubleMaBuy\n\n\nclass BuySDWidget(WidgetFactorBuyBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuSDBreak\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuSDBreak\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe5\x8f\x82\xe7\x85\xa7\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xe5\x90\x91\xe4\xb8\x8a\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe5\x9c\xa8\xe6\xb5\xb7\xe9\xbe\x9f\xe7\xaa\x81\xe7\xa0\xb4\xe5\x9f\xba\xe7\xa1\x80\xe4\xb8\x8a\xef\xbc\x8c\xe5\x8f\x82\xe7\x85\xa7\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x99\x8d\xe4\xbd\x8e\xe4\xba\xa4\xe6\x98\x93\xe9\xa2\x91\xe7\x8e\x87\xef\xbc\x8c\xe6\x8f\x90\xe9\xab\x98\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe7\xa8\xb3\xe5\xae\x9a\xe6\x80\xa7\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xbd\x93\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xe9\x9c\x87\xe8\x8d\xa1\xe6\x97\xb6\xe5\xb0\x81\xe9\x94\x81\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\'\n                  u\'\xe5\xbd\x93\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xe5\xb9\xb3\xe7\xa8\xb3\xe6\x97\xb6\xe5\x86\x8d\xe6\xac\xa1\xe6\x89\x93\xe5\xbc\x80\xe4\xba\xa4\xe6\x98\x93\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\xac\xa1\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x98\xaf\xe5\x90\xa6\xe5\xb9\xb3\xe7\xa8\xb3\',\n            description=u\'\xe5\xb9\xb3\xe7\xa8\xb3\xe7\xaa\x81\xe7\xa0\xb4\',\n            disabled=False,\n            layout=self.description_layout\n        )\n        self.poly_label = widgets.Label(u\'\xe5\xa4\xa7\xe7\x9b\x98\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8cpoly\xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9d\xe9\x9c\x87\xe8\x8d\xa1\',\n                                        layout=self.label_layout)\n        self.poly = widgets.IntSlider(\n            value=2,\n            min=1,\n            max=5,\n            step=1,\n            description=u\'\xe6\x8b\x9f\xe5\x90\x88\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.poly_box = widgets.VBox([self.poly_label, self.poly])\n        self.xd_label = widgets.Label(u\'\xe7\xaa\x81\xe7\xa0\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\xaf\x94\xe5\xa6\x8221\xef\xbc\x8c30\xef\xbc\x8c42\xe5\xa4\xa9....\xe7\xaa\x81\xe7\xa0\xb4\',\n                                      layout=self.label_layout)\n        self.xd = widgets.IntSlider(\n            value=21,\n            min=3,\n            max=120,\n            step=1,\n            description=u\'\xe5\x91\xa8\xe6\x9c\x9f\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.xd_box = widgets.VBox([self.xd_label, self.xd])\n        self.widget = widgets.VBox([self.description, self.poly_box,\n                                    self.xd_box, self.add],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_buy_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuSDBreak\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuSDBreak, \'xd\': self.xd.value, \'poly\': self.poly.value}\n        factor_desc_key = u\'{}\xe6\x8b\x9f\xe5\x90\x88{}\xe5\xa4\xa9\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe7\x85\xa7\xe5\xa4\xa7\xe7\x9b\x98\'.format(self.poly.value, self.xd.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuSDBreak""""""\n        return AbuSDBreak\n\n\nclass BuyWDWidget(WidgetFactorBuyBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorBuyWD\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorBuyWD\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe6\x97\xa5\xe8\x83\x9c\xe7\x8e\x87\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'1. \xe9\xbb\x98\xe8\xae\xa4\xe4\xbb\xa540\xe5\xa4\xa9\xe4\xb8\xba\xe5\x91\xa8\xe6\x9c\x9f(8\xe5\x91\xa8)\xe7\xbb\x93\xe5\x90\x88\xe6\xb6\xa8\xe8\xb7\x8c\xe9\x98\x80\xe5\x80\xbc\xe8\xae\xa1\xe7\xae\x97\xe5\x91\xa8\xe5\x87\xa0\xe9\x80\x82\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\\n\'\n                  u\'2. \xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\x80\xe6\x9c\x88\xe9\x87\x8d\xe6\x96\xb0\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\xac\xa1\xe4\xb8\x8a\xe8\xbf\xb0\xe7\x9a\x84\xe5\x91\xa8\xe5\x87\xa0\xe9\x80\x82\xe5\x90\x88\xe4\xb9\xb0\xe5\x85\xa5\\n\'\n                  u\'3. \xe5\x9c\xa8\xe7\xad\x96\xe7\x95\xa5\xe6\x97\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe4\xb8\xad\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe4\xb8\xba\xef\xbc\x9a\xe6\x98\xa8\xe5\xa4\xa9\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe4\xbb\x8a\xe5\xa4\xa9\xe5\xbc\x80\xe7\x9b\x98\xe4\xb9\x9f\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe4\xb8\x94\xe6\x98\x8e\xe5\xa4\xa9\xe6\x98\xaf\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe4\xb8\x8a\xe6\xb6\xa8\xe6\xa6\x82\xe7\x8e\x87\xe5\xa4\xa7\xe7\x9a\x84\\\'\xe5\x91\xa8\xe5\x87\xa0\\\'\',\n            description=u\'\xe5\x91\xa8\xe6\xb6\xa8\xe8\x83\x9c\xe7\x8e\x87\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.buy_dw_label = widgets.Label(u\'\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x91\xa8\xe6\x9c\x9f\xe8\x83\x9c\xe7\x8e\x87\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.55\xe5\x8d\xb355%\xe7\x9a\x84\xe8\x83\x9c\xe7\x8e\x87\',\n                                          layout=self.label_layout)\n        self.buy_dw = widgets.FloatSlider(\n            value=0.55,\n            min=0.50,\n            max=0.99,\n            step=0.01,\n            description=u\'\xe8\x83\x9c\xe7\x8e\x87\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.2f\',\n        )\n        self.buy_dw_box = widgets.VBox([self.buy_dw_label, self.buy_dw])\n\n        self.buy_dwm_label = widgets.Label(u\'\xe4\xbb\xa3\xe8\xa1\xa8\xe6\xb6\xa8\xe5\xb9\x85\xe6\xaf\x94\xe4\xbe\x8b\xe9\x98\x80\xe5\x80\xbc\xe7\xb3\xbb\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.618\',\n                                           layout=self.label_layout)\n        self.buy_dwm = widgets.FloatSlider(\n            value=0.618,\n            min=0.50,\n            max=1.0,\n            step=0.01,\n            description=u\'\xe7\xb3\xbb\xe6\x95\xb0\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.3f\'\n        )\n        self.buy_dwm_box = widgets.VBox([self.buy_dwm_label, self.buy_dwm])\n\n        self.dw_period_label = widgets.Label(u\'\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\x86\xe6\x89\x80\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa440\xe5\xa4\xa9\xe5\x91\xa8\xe6\x9c\x9f(8\xe5\x91\xa8)\',\n                                             layout=self.label_layout)\n        self.dw_period = widgets.IntSlider(\n            value=40,\n            min=20,\n            max=120,\n            step=1,\n            description=u\'\xe5\x91\xa8\xe6\x9c\x9f\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.dw_period_box = widgets.VBox([self.dw_period_label, self.dw_period])\n        self.widget = widgets.VBox([self.description, self.buy_dw_box,\n                                    self.buy_dwm_box, self.dw_period_box, self.add],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_buy_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorBuyWD\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorBuyWD, \'buy_dw\': self.buy_dw.value,\n                       \'buy_dwm\': self.buy_dwm.value, \'dw_period\': self.dw_period.value}\n        factor_desc_key = u\'\xe6\x97\xa5\xe8\x83\x9c\xe7\x8e\x87{},{},{}\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe4\xb9\xb0\xe5\x85\xa5\'.format(\n            self.buy_dw.value, self.buy_dwm.value, self.dw_period.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorBuyWD""""""\n        return AbuFactorBuyWD\n\n\nclass BuyXDWidget(WidgetFactorBuyBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorBuyBreak\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorBuyBreak\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe6\xb5\xb7\xe9\xbe\x9f\xe5\x90\x91\xe4\xb8\x8a\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\xba\xe5\xbd\x93\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb6\x85\xe8\xbf\x87N\xe5\xa4\xa9\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xef\xbc\x8c\xe8\xb6\x85\xe8\xbf\x87\xe6\x9c\x80\xe9\xab\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\xe4\xb9\xb0\xe5\x85\xa5\xe8\x82\xa1\xe7\xa5\xa8\xe6\x8c\x81\xe6\x9c\x89\',\n            description=u\'\xe6\xb5\xb7\xe9\xbe\x9f\xe4\xb9\xb0\xe5\x85\xa5\',\n            disabled=False,\n            layout=self.description_layout\n        )\n        self.xd_label = widgets.Label(u\'\xe7\xaa\x81\xe7\xa0\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\xaf\x94\xe5\xa6\x8221\xef\xbc\x8c30\xef\xbc\x8c42\xe5\xa4\xa9....\xe7\xaa\x81\xe7\xa0\xb4\', layout=self.label_layout)\n        self.xd = widgets.IntSlider(\n            value=21,\n            min=3,\n            max=120,\n            step=1,\n            description=u\'\xe5\x91\xa8\xe6\x9c\x9f\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.xd_box = widgets.VBox([self.xd_label, self.xd])\n        self.widget = widgets.VBox([self.description, self.xd_box, self.add],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_buy_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorBuyBreak\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorBuyBreak, \'xd\': self.xd.value}\n        factor_desc_key = u\'\xe6\xb5\xb7\xe9\xbe\x9f{}\xe5\xa4\xa9\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe4\xb9\xb0\xe5\x85\xa5\'.format(self.xd.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorBuyBreak""""""\n        return AbuFactorBuyBreak\n\n\nclass BuyWMWidget(WidgetFactorBuyBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuWeekMonthBuy\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuWeekMonthBuy\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe5\x9b\xba\xe5\xae\x9a\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe6\xa0\xb9\xe6\x8d\xae\xe5\x8f\x82\xe6\x95\xb0\xe6\xaf\x8f\xe5\x91\xa8\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1\xe6\x88\x96\xe8\x80\x85\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1\\n\'\n                  u\'\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8e\xe7\x89\xb9\xe5\xae\x9a\\\'\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\\\'\xe5\x92\x8c\\\'\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\\\'\xe5\xbd\xa2\xe6\x88\x90\xe9\x85\x8d\xe5\x90\x88\\n\xef\xbc\x8c\'\n                  u\'\xe5\x8d\x95\xe7\x8b\xac\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9b\xba\xe5\xae\x9a\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x84\x8f\xe4\xb9\x89\xe4\xb8\x8d\xe5\xa4\xa7\',\n            description=u\'\xe5\xae\x9a\xe6\x9c\x9f\xe4\xb9\xb0\xe5\x85\xa5\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        is_buy_month_label = widgets.Label(u\'\xe5\x8f\xaf\xe6\x9b\xb4\xe6\x94\xb9\xe4\xb9\xb0\xe5\x85\xa5\xe5\xae\x9a\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\xae\x9a\xe6\x9c\x9f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\', layout=self.label_layout)\n        self.is_buy_month = widgets.Dropdown(\n            options={u\'\xe5\xae\x9a\xe6\x9c\x9f\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\': True, u\'\xe5\xae\x9a\xe6\x9c\x9f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x91\xa8\': False},\n            value=True,\n            description=u\'\xe5\xae\x9a\xe6\x9c\x9f\xe6\x97\xb6\xe9\x95\xbf:\',\n        )\n        is_buy_month_box = widgets.VBox([is_buy_month_label, self.is_buy_month])\n\n        self.widget = widgets.VBox([self.description, is_buy_month_box, self.add],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_buy_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuWeekMonthBuy\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuWeekMonthBuy, \'is_buy_month\': self.is_buy_month.value}\n        factor_desc_key = u\'{}\xe4\xb9\xb0\xe5\x85\xa5\xe4\xb8\x80\xe6\xac\xa1\'.format(u\'\xe6\xaf\x8f\xe4\xb8\x80\xe6\x9c\x88\' if self.is_buy_month.value else u\'\xe6\xaf\x8f\xe4\xb8\x80\xe5\x91\xa8\')\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuWeekMonthBuy""""""\n        return AbuWeekMonthBuy\n\n\nclass BuyDUWidget(WidgetFactorBuyBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuDownUpTrend\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuDownUpTrend\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe6\x95\xb4\xe4\xb8\xaa\xe6\x8b\xa9\xe6\x97\xb6\xe5\x91\xa8\xe6\x9c\x9f\xe5\x88\x86\xe6\x88\x90\xe4\xb8\xa4\xe9\x83\xa8\xe5\x88\x86\xef\xbc\x8c\xe9\x95\xbf\xe7\x9a\x84\xe4\xb8\xba\xe9\x95\xbf\xe7\xba\xbf\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x8c\xe7\x9f\xad\xe7\x9a\x84\xe4\xb8\xba\xe7\x9f\xad\xe7\xba\xbf\xe6\x8b\xa9\xe6\x97\xb6\xef\xbc\x9a\\n\'\n                  u\'1. \xe5\xaf\xbb\xe6\x89\xbe\xe9\x95\xbf\xe7\xba\xbf\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\xa3\xe5\xba\xa6(4\xe4\xb8\xaa\xe6\x9c\x88)\xe6\x95\xb4\xe4\xbd\x93\xe8\xb6\x8b\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x8b\xe5\x8a\xbf\\n\'\n                  u\'2. \xe7\x9f\xad\xe7\xba\xbf\xe8\xb5\xb0\xe5\x8a\xbf\xe4\xb8\x8a\xe6\xb6\xa8\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x88\xe6\x95\xb4\xe4\xbd\x93\xe8\xb6\x8b\xe5\x8a\xbf\xe4\xb8\xba\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xb6\x8b\xe5\x8a\xbf\\n\xef\xbc\x8c\'\n                  u\'3. \xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\xb7\xe9\xbe\x9f\xe7\xaa\x81\xe7\xa0\xb4\xe7\x9a\x84N\xe6\x97\xa5\xe7\xaa\x81\xe7\xa0\xb4\xe7\xad\x96\xe7\x95\xa5\xe4\xbd\x9c\xe4\xb8\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe7\xbb\x88\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbf\xa1\xe5\x8f\xb7\',\n            description=u\'\xe9\x95\xbf\xe8\xb7\x8c\xe7\x9f\xad\xe6\xb6\xa8\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        xd_label = widgets.Label(u\'\xe7\x9f\xad\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x9a\xe6\xaf\x94\xe5\xa6\x8220\xef\xbc\x8c30\xef\xbc\x8c40\xe5\xa4\xa9,\xe7\x9f\xad\xe7\xba\xbf\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8f\x82\xe6\x95\xb0\',\n                                 layout=self.label_layout)\n        self.xd = widgets.IntSlider(\n            value=20,\n            min=5,\n            max=120,\n            step=5,\n            description=u\'xd\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        xd_box = widgets.VBox([xd_label, self.xd])\n\n        past_factor_label = widgets.Label(u\'\xe9\x95\xbf\xe7\xba\xbf\xe4\xb9\x98\xe6\x95\xb0\xef\xbc\x9a\xe7\x9f\xad\xe7\xba\xbf\xe5\x9f\xba\xe7\xa1\x80 x \xe9\x95\xbf\xe7\xba\xbf\xe4\xb9\x98\xe6\x95\xb0 = \xe9\x95\xbf\xe7\xba\xbf\xe5\x91\xa8\xe6\x9c\x9f\',\n                                          layout=self.label_layout)\n        self.past_factor = widgets.IntSlider(\n            value=4,\n            min=1,\n            max=10,\n            step=1,\n            description=u\'\xe9\x95\xbf\xe7\xba\xbf\xe4\xb9\x98\xe6\x95\xb0\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        past_factor_box = widgets.VBox([past_factor_label, self.past_factor])\n\n        down_deg_threshold_label = widgets.Label(u\'\xe6\x8b\x9f\xe5\x90\x88\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x9a\xe5\xa6\x82-2,-3,-4\',\n                                                 layout=self.label_layout)\n        self.down_deg_threshold = widgets.IntSlider(\n            value=-3,\n            min=-10,\n            max=0,\n            step=1,\n            description=u\'\xe8\xa7\x92\xe5\xba\xa6\xe9\x98\x80\xe5\x80\xbc\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        down_deg_threshold_box = widgets.VBox([down_deg_threshold_label, self.down_deg_threshold])\n\n        self.widget = widgets.VBox([self.description, xd_box, past_factor_box, down_deg_threshold_box, self.add],\n                                   layout=self.widget_layout)\n\n    def make_buy_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuDownUpTrend\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuDownUpTrend, \'xd\': self.xd.value,\n                       \'past_factor\': self.past_factor.value, \'down_deg_threshold\': self.down_deg_threshold.value}\n        factor_desc_key = u\'\xe9\x95\xbf\xe7\xba\xbf{}\xe4\xb8\x8b\xe8\xb7\x8c\xe7\x9f\xad\xe7\xba\xbf{}\xe4\xb8\x8a\xe6\xb6\xa8\xe8\xa7\x92\xe5\xba\xa6{}\'.format(\n            self.xd.value * self.past_factor.value, self.xd.value, self.down_deg_threshold.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuDownUpTrend""""""\n        return AbuDownUpTrend\n'"
abupy/WidgetBu/ABuWGCrossVal.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xad\x96\xe7\x95\xa5\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetBase, show_msg_toast_func\nfrom ..WidgetBu.ABuWGBFBase import BuyFactorWGManager\nfrom ..WidgetBu.ABuWGSFBase import SellFactorWGManager\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..MetricsBu.ABuCrossVal import AbuCrossVal\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuEnv import EMarketTargetType\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyProtectedMember\nclass WidgetCrossVal(WidgetBase):\n    """"""\xe7\xad\x96\xe7\x95\xa5\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81ui\xe7\xb1\xbb""""""\n\n    # noinspection PyProtectedMember\n    def __init__(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\x84\xe4\xbb\xb6\xe5\xbd\xa2\xe6\x88\x90tab""""""\n\n        tip_label1 = widgets.Label(u\'\xe7\xad\x96\xe7\x95\xa5\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe6\x9a\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', layout=widgets.Layout(width=\'300px\'))\n        tip_label2 = widgets.Label(u\'\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8b\xe8\xbd\xbd\', layout=widgets.Layout(width=\'300px\'))\n\n        self.bf = BuyFactorWGManager()\n        self.sf = SellFactorWGManager(show_add_buy=True)\n\n        sub_widget_tab = widgets.Tab()\n        sub_widget_tab.children = [self.bf.widget, self.sf.widget]\n        for ind, name in enumerate([u\'\xe4\xb9\xb0\xe7\xad\x96\', u\'\xe5\x8d\x96\xe7\xad\x96\']):\n            sub_widget_tab.set_title(ind, name)\n\n        self.begin_cross_val = widgets.Button(description=u\'\xe5\xbc\x80\xe5\xa7\x8b\xe4\xba\xa4\xe5\x8f\x89\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe9\xaa\x8c\xe8\xaf\x81\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x89\xe6\x95\x88\xe6\x80\xa7\',\n                                              layout=widgets.Layout(width=\'98%\'),\n                                              button_style=\'danger\')\n        self.begin_cross_val.on_click(self.run_cross_val)\n\n        self.market = widgets.Dropdown(\n            options={u\'\xe7\xbe\x8e\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_US.value,\n                     u\'A\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_CN.value,\n                     u\'\xe6\xb8\xaf\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_HK.value,\n                     u\'\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_CN.value,\n                     u\'\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL.value,\n                     u\'\xe6\x95\xb0\xe5\xad\x97\xe8\xb4\xa7\xe5\xb8\x81\': EMarketTargetType.E_MARKET_TARGET_TC.value},\n            value=ABuEnv.g_market_target.value,\n            description=u\'\xe9\xaa\x8c\xe8\xaf\x81\xe5\xb8\x82\xe5\x9c\xba:\',\n        )\n\n        cv_label1 = widgets.Label(u\'\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\xe7\xba\xa7\xef\xbc\x9a\xe9\xbb\x98\xe8\xae\xa410\', layout=widgets.Layout(width=\'300px\'))\n        cv_label2 = widgets.Label(u\'cv\xe6\xac\xa1\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6\xe8\x8c\x83\xe5\x9b\xb4\xe9\x9a\x8f\xe6\x9c\xba\xe6\x8a\xbd\xe5\x8f\x96cv\xe4\xb8\xaasymbol\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\', layout=widgets.Layout(width=\'300px\'))\n        self.cv = widgets.IntSlider(\n            value=10,\n            min=4,\n            max=50,\n            step=1,\n            description=u\'cv\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        cv_box = widgets.VBox([cv_label1, cv_label2, self.cv])\n\n        self.widget = widgets.VBox([tip_label1, tip_label2, sub_widget_tab, self.market, cv_box,\n                                    self.begin_cross_val])\n\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xb0\xb1new\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe6\xaf\x8f\xe6\xac\xa1\xe8\xbf\x90\xe8\xa1\x8c\xe9\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe5\xae\x83\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\xbc\x93\xe5\xad\x98similar\xe6\x95\xb0\xe6\x8d\xae\n        self.cross_val = AbuCrossVal()\n\n    # noinspection PyUnusedLocal\n    def run_cross_val(self, bt):\n        """"""\xe4\xba\xa4\xe5\x8f\x89\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe9\xaa\x8c\xe8\xaf\x81\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x89\xe6\x95\x88\xe6\x80\xa7\xe7\x9a\x84button\xe6\x8c\x89\xe9\x92\xae""""""\n\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x9e\x84\xe6\x88\x90\xe5\xba\x8f\xe5\x88\x97\n        buy_factors = list(self.bf.factor_dict.values())\n        if len(buy_factors) == 0:\n            show_msg_toast_func(u\'\xe8\xaf\xb7\xe6\x9c\x80\xe5\xb0\x91\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\')\n            return\n\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\x9f\xe6\xb2\xa1\xe6\x9c\x89\n        sell_factors = list(self.sf.factor_dict.values())\n\n        market = EMarketTargetType(self.market.value)\n        self.cross_val.fit(buy_factors, sell_factors, cv=self.cv.value, market=market, )\n'"
abupy/WidgetBu/ABuWGDATool.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x87\x8f\xe5\x8c\x96\xe6\x8c\xaf\xe5\xb9\x85\xe5\x88\x86\xe6\x9e\x90\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nfrom ..UtilBu import ABuKLUtil\nfrom ..WidgetBu.ABuWGToolBase import WidgetToolBase, multi_fetch_symbol_analyse\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnusedLocal\nclass WidgetDATool(WidgetToolBase):\n    """"""\xe6\x8c\xaf\xe5\xb9\x85\xe5\x88\x86\xe6\x9e\x90\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    def __init__(self, tool_set):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe6\x9e\x90\xe7\x95\x8c\xe9\x9d\xa2""""""\n        super(WidgetDATool, self).__init__(tool_set)\n\n        da_list = []\n        tip_label1 = widgets.Label(u\'\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe9\x9c\x80\xe8\xa6\x81\xe5\x9c\xa8\\\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\xe9\x80\x89\xe6\x8b\xa9\', layout=self.label_layout)\n        tip_label2 = widgets.Label(u\'\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xaf\xb9\xe6\xaf\x94\', layout=self.label_layout)\n        da_list.append(tip_label1)\n        da_list.append(tip_label2)\n\n        date_week_wave_bt = widgets.Button(description=u\'\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x9c\x87\xe5\xb9\x85\xe5\xaf\xb9\xe6\xaf\x94\xe5\x88\x86\xe6\x9e\x90\', layout=widgets.Layout(width=\'98%\'),\n                                           button_style=\'info\')\n        date_week_wave_bt.on_click(self.date_week_wave)\n        da_list.append(date_week_wave_bt)\n\n        p_change_stats_bt = widgets.Button(description=u\'\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xaf\xb9\xe6\xaf\x94\xe5\x88\x86\xe6\x9e\x90\', layout=widgets.Layout(width=\'98%\'),\n                                           button_style=\'info\')\n        p_change_stats_bt.on_click(self.p_change_stats)\n        da_list.append(p_change_stats_bt)\n\n        wave_change_rate_bt = widgets.Button(description=u\'\xe6\x8c\xaf\xe5\xb9\x85\xe7\xbb\x9f\xe8\xae\xa1\xe5\xa5\x97\xe5\x88\xa9\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x88\x86\xe6\x9e\x90\', layout=widgets.Layout(width=\'98%\'),\n                                             button_style=\'info\')\n        wave_change_rate_bt.on_click(self.wave_change_rate)\n        da_list.append(wave_change_rate_bt)\n\n        date_week_win_bt = widgets.Button(description=u\'\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe6\xa6\x82\xe7\x8e\x87\xe5\x88\x86\xe6\x9e\x90\', layout=widgets.Layout(width=\'98%\'),\n                                          button_style=\'info\')\n        date_week_win_bt.on_click(self.date_week_win)\n        da_list.append(date_week_win_bt)\n\n        bcut_change_vc_bt = widgets.Button(description=u\'\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe5\x8c\xba\xe9\x97\xb4\xe5\x88\x86\xe6\x9e\x90(\xe9\xa2\x84\xe5\xae\x9a\xe5\x8c\xba\xe9\x97\xb4)\', layout=widgets.Layout(width=\'98%\'),\n                                           button_style=\'info\')\n        bcut_change_vc_bt.on_click(self.bcut_change_vc)\n        da_list.append(bcut_change_vc_bt)\n\n        qcut_change_vc_bt = widgets.Button(description=u\'\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe5\x8c\xba\xe9\x97\xb4\xe5\x88\x86\xe6\x9e\x90(\xe4\xb8\x8d\xe5\xae\x9a\xe5\x8c\xba\xe9\x97\xb4)\', layout=widgets.Layout(width=\'98%\'),\n                                           button_style=\'info\')\n        qcut_change_vc_bt.on_click(self.qcut_change_vc)\n        da_list.append(qcut_change_vc_bt)\n\n        self.widget = widgets.VBox(da_list, layout=widgets.Layout(width=\'58%\'))\n\n    @multi_fetch_symbol_analyse\n    def qcut_change_vc(self, kl_dict, bt):\n        """"""\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe5\x8c\xba\xe9\x97\xb4\xe5\x88\x86\xe6\x9e\x90(\xe4\xb8\x8d\xe5\xae\x9a\xe5\x8c\xba\xe9\x97\xb4)action""""""\n        display(ABuKLUtil.qcut_change_vc(kl_dict))\n\n    @multi_fetch_symbol_analyse\n    def bcut_change_vc(self, kl_dict, bt):\n        """"""\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe5\x8c\xba\xe9\x97\xb4\xe5\x88\x86\xe6\x9e\x90(\xe9\xa2\x84\xe5\xae\x9a\xe5\x8c\xba\xe9\x97\xb4)action""""""\n        display(ABuKLUtil.bcut_change_vc(kl_dict))\n\n    @multi_fetch_symbol_analyse\n    def date_week_win(self, kl_dict, bt):\n        """"""\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe6\xa6\x82\xe7\x8e\x87\xe5\x88\x86\xe6\x9e\x90action""""""\n        display(ABuKLUtil.date_week_win(kl_dict))\n\n    @multi_fetch_symbol_analyse\n    def wave_change_rate(self, kl_dict, bt):\n        """"""\xe6\x8c\xaf\xe5\xb9\x85\xe7\xbb\x9f\xe8\xae\xa1\xe5\xa5\x97\xe5\x88\xa9\xe6\x9d\xa1\xe4\xbb\xb6\xe5\x88\x86\xe6\x9e\x90action""""""\n        ABuKLUtil.wave_change_rate(kl_dict)\n\n    @multi_fetch_symbol_analyse\n    def date_week_wave(self, kl_dict, bt):\n        """"""\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe9\x9c\x87\xe5\xb9\x85\xe5\xaf\xb9\xe6\xaf\x94\xe5\x88\x86\xe6\x9e\x90action""""""\n        display(ABuKLUtil.date_week_wave(kl_dict))\n\n    @multi_fetch_symbol_analyse\n    def p_change_stats(self, kl_dict, bt):\n        """"""\xe4\xba\xa4\xe6\x98\x93\xe6\x97\xa5\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xaf\xb9\xe6\xaf\x94\xe5\x88\x86\xe6\x9e\x90action""""""\n        ABuKLUtil.p_change_stats(kl_dict)\n'"
abupy/WidgetBu/ABuWGGridSearch.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetBase, show_msg_toast_func\nfrom ..WidgetBu.ABuWGBSymbol import WidgetSymbolChoice\nfrom ..WidgetBu.ABuWGBFBase import BuyFactorWGManager\nfrom ..WidgetBu.ABuWGSFBase import SellFactorWGManager\nfrom ..CoreBu import ABuEnv\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..MarketBu.ABuDataCheck import check_symbol_data\nfrom ..MetricsBu.ABuGridSearch import GridSearch\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyProtectedMember\nclass WidgetGridSearch(WidgetBase):\n    """"""\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search""""""\n\n    # noinspection PyProtectedMember\n    def __init__(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\x84\xe4\xbb\xb6\xe5\xbd\xa2\xe6\x88\x90tab""""""\n\n        tip_label1 = widgets.Label(u\'\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0grid search\xe6\x9a\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', layout=widgets.Layout(width=\'300px\'))\n        tip_label2 = widgets.Label(u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8b\xe8\xbd\xbd\', layout=widgets.Layout(width=\'300px\'))\n        """"""\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8e\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe5\x88\x87\xe6\x8d\xa2""""""\n        self.date_mode = widgets.RadioButtons(\n            options=[u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', u\'\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\'],\n            value=u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\' if ABuEnv._g_enable_example_env_ipython else u\'\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\',\n            description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f:\',\n            disabled=False\n        )\n        self.date_mode.observe(self.on_data_mode_change, names=\'value\')\n        date_mode_box = widgets.VBox([tip_label1, tip_label2, self.date_mode])\n\n        self.sc = WidgetSymbolChoice()\n        self.bf = BuyFactorWGManager(add_button_style=\'grid\')\n        self.sf = SellFactorWGManager(show_add_buy=False, add_button_style=\'grid\')\n\n        sub_widget_tab = widgets.Tab()\n        sub_widget_tab.children = [self.bf.widget, self.sf.widget, self.sc.widget]\n        for ind, name in enumerate([u\'\xe4\xb9\xb0\xe7\xad\x96\', u\'\xe5\x8d\x96\xe7\xad\x96\', u\'\xe8\x82\xa1\xe6\xb1\xa0\']):\n            sub_widget_tab.set_title(ind, name)\n\n        self.begin_grid_search = widgets.Button(description=u\'\xe5\xbc\x80\xe5\xa7\x8b\xe5\xaf\xbb\xe6\x89\xbe\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\', layout=widgets.Layout(width=\'98%\'),\n                                                button_style=\'danger\')\n        self.begin_grid_search.on_click(self.run_grid_search)\n\n        self.widget = widgets.VBox([date_mode_box, sub_widget_tab, self.begin_grid_search])\n\n    def on_data_mode_change(self, change):\n        """"""\xe6\xb2\x99\xe7\x9b\x92\xe4\xb8\x8e\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbd\xac\xe6\x8d\xa2""""""\n        if change[\'new\'] == u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\':\n            ABuEnv.enable_example_env_ipython(show_log=False)\n        else:\n            # \xe4\xbb\x8e\xe6\xb2\x99\xe7\x9b\x92\xe6\x94\xb9\xe5\x8f\x98\xe4\xbe\x9d\xe7\x84\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x98\xaf\xe6\x9c\xac\xe5\x9c\xb0\xe6\xa8\xa1\xe5\xbc\x8f\n            ABuEnv._g_enable_example_env_ipython = False\n\n    # noinspection PyUnusedLocal\n    def run_grid_search(self, bt):\n        """"""\xe8\xbf\x90\xe8\xa1\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x89\x80\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84button\xe6\x8c\x89\xe9\x92\xae""""""\n        # \xe6\xb8\x85\xe7\x90\x86\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\n        # ABuProgress.clear_output()\n\n        choice_symbols = self.sc.choice_symbols.options\n        if choice_symbols is None or len(choice_symbols) == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaasymbol\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\xe8\xae\xbe\xe7\xbd\xaeNone\xef\xbc\x8c gird search\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe5\xaf\xbb\xe6\x89\xbe\xef\xbc\x8c\n            show_msg_toast_func(u\'\xe8\xaf\xb7\xe6\x9c\x80\xe5\xb0\x91\xe5\x9c\xa8\\\'\xe8\x82\xa1\xe6\xb1\xa0\\\'\xe4\xb8\xad\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\x80\xe4\xb8\xaasymbol\xef\xbc\x81\')\n            return\n\n        if not check_symbol_data(choice_symbols):\n            # \xe7\x9b\x91\xe6\xb5\x8b\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\xac\xe5\x9c\xb0\xe7\xbc\x93\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x9c\xa8\xe6\x88\x96\xe8\x80\x85\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe5\x8c\xb9\xe9\x85\x8d\n            return\n\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\x9e\x84\xe6\x88\x90\xe5\xba\x8f\xe5\x88\x97\n        buy_factors = list(self.bf.factor_dict.values())\n        if len(buy_factors) == 0:\n            show_msg_toast_func(u\'\xe8\xaf\xb7\xe6\x9c\x80\xe5\xb0\x91\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\')\n            return\n        # \xe5\x90\x88\xe5\xb9\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84class factor\xe5\x88\xb0\xe7\xac\xa6\xe5\x90\x88grid search\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\n        # print(buy_factors)\n        buy_factors = GridSearch.combine_same_factor_class(buy_factors)\n\n        # \xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\x9f\xe6\xb2\xa1\xe6\x9c\x89\n        sell_factors = list(self.sf.factor_dict.values())\n        # \xe5\x90\x88\xe5\xb9\xb6\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84class factor\xe5\x88\xb0\xe7\xac\xa6\xe5\x90\x88grid search\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\n        sell_factors = GridSearch.combine_same_factor_class(sell_factors)\n\n        scores, score_tuple_array = GridSearch.grid_search(choice_symbols, buy_factors, sell_factors)\n'"
abupy/WidgetBu/ABuWGPSBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import abstractmethod\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetFactorBase, WidgetFactorManagerBase, accordion_shut\nfrom ..WidgetBu.ABuWGBFBase import BFSubscriberMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass PickStockWGManager(WidgetFactorManagerBase):\n    """"""\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe7\xbb\x84\xe7\xbb\x87\xe7\xb1\xbb""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x84\xe4\xbb\xb6\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x87\xbaself.factor_box""""""\n\n        from ..WidgetBu.ABuWGPickStock import PSPriceWidget, PSRegressAngWidget\n        from ..WidgetBu.ABuWGPickStock import PSShiftDistanceWidget, PSNTopWidget\n        self.ps_array = []\n        self.ps_array.append(PSPriceWidget(self))\n        self.ps_array.append(PSRegressAngWidget(self))\n        self.ps_array.append(PSShiftDistanceWidget(self))\n        self.ps_array.append(PSNTopWidget(self))\n\n        #  ps() call\xe7\x94\xa8widget\xe7\xbb\x84list\n        children = [ps() for ps in self.ps_array]\n        if self.scroll_factor_box:\n            self.factor_box = widgets.Box(children=children,\n                                          layout=self.factor_layout)\n        else:\n            # \xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c3\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85sub_children_group\xe5\xba\x8f\xe5\x88\x97,\n            sub_children_group = self._sub_children(children, len(children) / self._sub_children_group_cnt)\n            sub_children_box = [widgets.HBox(sub_children) for sub_children in sub_children_group]\n            self.factor_box = widgets.VBox(sub_children_box)\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe7\x89\xb9\xe6\xae\x8a\xe7\x9a\x84\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x85\xa8\xe5\xb1\x80\xe6\x95\xb0\xe6\x8d\xae\n        self.buy_factor_manger = None\n\n    def seed_choice_symbol_update(self, seed_choice_symbol):\n        """"""\xe6\x9b\xb4\xe6\x96\xb0\xe8\x82\xa1\xe6\xb1\xa0\xe4\xb8\xad\xe7\x9a\x84\xe7\xa7\x8d\xe5\xad\x90symbol\xe5\x88\xb0\xe9\x9c\x80\xe8\xa6\x81\xe7\xa7\x8d\xe5\xad\x90symbol\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad""""""\n        if seed_choice_symbol is None or len(seed_choice_symbol) == 0:\n            return\n\n        for ps in self.ps_array:\n            if hasattr(ps, \'seed_choice_symbol_key\'):\n                # \xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe8\xa6\x81\xe6\x9b\xb4\xe6\x96\xb0\xe7\xa7\x8d\xe5\xad\x90symbol\xe7\x9a\x84\xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x9a\xe4\xb9\x89\xe5\x87\xbd\xe6\x95\xb0, \xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe4\xb8\xaakey\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\n                cs_key = ps.seed_choice_symbol_key()\n\n                for factor in self.factor_dict.values():\n                    # \xe4\xbb\x8e\xe5\x85\xa8\xe5\xb1\x80\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe5\xaf\xbb\xe6\x89\xbe\xe8\xbf\x99\xe4\xb8\xaa\xe7\xad\x96\xe7\x95\xa5\n                    if factor[\'class\'] == ps.delegate_class():\n                        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xbe\xe5\x88\xb0\xe5\xb0\x86\xe7\xa7\x8d\xe5\xad\x90symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\n                        factor.update({cs_key: seed_choice_symbol})\n\n                for factor in self.buy_factor_manger.factor_dict.values():\n                    # \xe4\xbb\x8e\xe9\x99\x84\xe5\xb1\x9e\xe4\xba\x8e\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x90\x9c\xe7\xb4\xa2\xe6\x9b\xb4\xe6\x96\xb0\n                    if \'stock_pickers\' in factor:\n                        for ps_factor in factor[\'stock_pickers\']:\n                            if ps_factor[\'class\'] == ps.delegate_class():\n                                ps_factor.update({cs_key: seed_choice_symbol})\n                                # from ..UtilBu.ABuOsUtil import show_msg\n                                # show_msg(cs_key, str(list(factor.keys())))\n\n    def register(self, buy_factor_manger):\n        """"""\xe9\x80\x89\xe8\x82\xa1manager\xe5\x86\x85\xe9\x83\xa8\xe5\x9b\xa0\xe5\xad\x90\xe6\xb3\xa8\xe5\x86\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe6\x94\xb9\xe5\x8f\x98""""""\n        self.buy_factor_manger = buy_factor_manger\n        for ps in self.ps_array:\n            self.buy_factor_manger.register_subscriber(ps)\n\n\nclass WidgetPickStockBase(WidgetFactorBase, BFSubscriberMixin):\n    """"""\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb""""""\n\n    def _pick_stock_base_ui(self):\n        """"""\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe9\x80\x9a\xe7\x94\xa8ui: xd, reversed\xe5\x88\x9d\xe5\xa7\x8b\xe6\x9e\x84\xe5\xbb\xba""""""\n        xd_tip = widgets.Label(u\'\xe8\xae\xbe\xe7\xbd\xae\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe7\x94\x9f\xe6\x95\x88\xe5\x91\xa8\xe6\x9c\x9f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4252\xe5\xa4\xa9\',\n                               layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        self.xd = widgets.IntSlider(\n            value=252,\n            min=1,\n            max=252,\n            step=1,\n            description=u\'\xe5\x91\xa8\xe6\x9c\x9f\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.xd_box = widgets.VBox([xd_tip, self.xd])\n\n        reversed_tip = widgets.Label(u\'\xe5\x8f\x8d\xe8\xbd\xac\xe9\x80\x89\xe8\x82\xa1\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe5\x8f\x8d\xe8\xbd\xac\',\n                                     layout=widgets.Layout(width=\'300px\', align_items=\'stretch\'))\n        self.reversed = widgets.Checkbox(\n            value=False,\n            description=u\'\xe5\x8f\x8d\xe8\xbd\xac\xe7\xbb\x93\xe6\x9e\x9c\',\n            disabled=False,\n        )\n        self.reversed_box = widgets.VBox([reversed_tip, self.reversed])\n\n    def __init__(self, wg_manager):\n        super(WidgetPickStockBase, self).__init__(wg_manager)\n        self.add = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\x85\xa8\xe5\xb1\x80\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\', layout=widgets.Layout(width=\'98%\'),\n                                  button_style=\'info\')\n        # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x85\xa8\xe5\xb1\x80\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x87\xe4\xbb\xa4\xe6\x8c\x89\xe9\x92\xae\n        self.add.on_click(self.add_pick_stock)\n        # \xe8\xbf\x90\xe8\xa1\x8c\xe6\xb7\xb7\xe5\x85\xa5\xe7\x9a\x84BFSubscriberMixin\xe4\xb8\xadui\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        self.subscriber_ui([u\'\xe7\x82\xb9\xe5\x87\xbb\\\'\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\\\'\xe6\xa1\x86\xe4\xb8\xad\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\', u\'\xe5\xb0\x86\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe9\x99\x84\xe5\xb1\x9e\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\'])\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\xa1\x86\xe7\x82\xb9\xe5\x87\xbb\xe8\xa1\x8c\xe4\xb8\xba\xef\xbc\x9a\xe5\xb0\x86\xe6\x9c\xac\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8a\xa0\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x81\x9a\xe4\xb8\xba\xe9\x99\x84\xe5\xb1\x9e\n        self.buy_factors.observe(self.add_pick_stock_to_buy_factor, names=\'value\')\n        self.accordion.set_title(0, u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\')\n        accordion_shut(self.accordion)\n        self.add_box = widgets.VBox([self.add, self.accordion])\n        # \xe6\x9e\x84\xe5\xbb\xba\xe9\x80\x89\xe8\x82\xa1\xe7\xad\x96\xe7\x95\xa5\xe7\x8b\xac\xe6\x9c\x89\xe5\x9f\xba\xe7\xa1\x80\xe9\x80\x9a\xe7\x94\xa8ui\n        self._pick_stock_base_ui()\n        # \xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe6\x9e\x84\xe5\xbb\xba\n        self._init_widget()\n\n    @abstractmethod\n    def _init_widget(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def make_pick_stock_unique(self):\n        """"""\n            \xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x9b\xa0\xe5\xad\x90\xe5\xad\x97\xe5\x85\xb8\n            \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x9a\n            1. \xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n            2. \xe5\x9b\xa0\xe5\xad\x90\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\n        """"""\n        pass\n\n    # noinspection PyUnusedLocal\n    def add_pick_stock(self, bt):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x85\xa8\xe5\xb1\x80\xe7\xad\x96\xe7\x95\xa5""""""\n        # \xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key\n        factor_dict, factor_desc_key = self.make_pick_stock_unique()\n        self.wg_manager.add_factor(factor_dict, factor_desc_key)\n\n    def add_pick_stock_to_buy_factor(self, select):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xad\x96\xe7\x95\xa5\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad""""""\n        self.add_to_buy_factor(select, self.make_pick_stock_unique, \'stock_pickers\')\n'"
abupy/WidgetBu/ABuWGPickStock.py,4,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ipywidgets as widgets\nimport numpy as np\n\nfrom ..PickStockBu.ABuPickRegressAngMinMax import AbuPickRegressAngMinMax\nfrom ..PickStockBu.ABuPickStockDemo import AbuPickStockShiftDistance, AbuPickStockNTop\nfrom ..PickStockBu.ABuPickStockPriceMinMax import AbuPickStockPriceMinMax\nfrom ..WidgetBu.ABuWGPSBase import WidgetPickStockBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass PSPriceWidget(WidgetPickStockBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuPickStockPriceMinMax\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuPickStockPriceMinMax\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe6\xa0\xb9\xe6\x8d\xae\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe5\x86\x85\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xef\xbc\x8c\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe9\x80\x89\xe4\xb8\xad\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x9a\\n\'\n                  u\'1. \xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xb7\xe6\xa0\xbc > \xe6\x9c\x80\xe5\xb0\x8f\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc\\n\'\n                  u\'2. \xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\xb7\xe6\xa0\xbc < \xe6\x9c\x80\xe5\xa4\xa7\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x98\x80\xe5\x80\xbc\\n\',\n            description=u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x89\xe8\x82\xa1\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.price_min_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe8\x82\xa1\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9c\x80\xe5\xb0\x8f\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa415\', layout=self.label_layout)\n        self.price_min_float = widgets.FloatText(\n            value=15,\n            description=u\'\xe6\x9c\x80\xe5\xb0\x8f:\',\n            disabled=False\n        )\n        self.price_min_ck = widgets.Checkbox(\n            value=True,\n            description=u\'\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe9\x98\x80\xe5\x80\xbc\',\n            disabled=False\n        )\n\n        def price_min_ck_change(change):\n            self.price_min_float.disabled = not change[\'new\']\n\n        self.price_min_ck.observe(price_min_ck_change, names=\'value\')\n        self.price_min_box = widgets.VBox([self.price_min_label, self.price_min_ck, self.price_min_float])\n\n        self.price_max_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe8\x82\xa1\xe4\xbb\xb7\xe6\xa0\xbc\xe6\x9c\x80\xe5\xa4\xa7\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa450\', layout=self.label_layout)\n        self.price_max_float = widgets.FloatText(\n            value=50,\n            description=u\'\xe6\x9c\x80\xe5\xa4\xa7:\',\n            disabled=False\n        )\n        self.price_max_ck = widgets.Checkbox(\n            value=True,\n            description=u\'\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xa4\xa7\xe9\x98\x80\xe5\x80\xbc\',\n            disabled=False\n        )\n\n        def price_max_ck_change(change):\n            self.price_max_float.disabled = not change[\'new\']\n\n        self.price_max_ck.observe(price_max_ck_change, names=\'value\')\n        self.price_max_box = widgets.VBox([self.price_max_label, self.price_max_ck, self.price_max_float])\n        self.widget = widgets.VBox([self.description, self.price_min_box, self.price_max_box,\n                                    self.xd_box, self.reversed_box, self.add_box],\n                                   # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_pick_stock_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuPickStockPriceMinMax\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        price_min = self.price_min_float.value if self.price_min_ck.value else -np.inf\n        price_max = self.price_max_float.value if self.price_max_ck.value else np.inf\n\n        factor_dict = {\'class\': AbuPickStockPriceMinMax,\n                       \'xd\': self.xd.value,\n                       \'reversed\': self.reversed.value,\n                       \'threshold_price_min\': price_min,\n                       \'threshold_price_max\': price_max}\n\n        factor_desc_key = u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe9\x80\x89\xe8\x82\xa1\xe6\x9c\x80\xe5\xa4\xa7:{}\xe6\x9c\x80\xe5\xb0\x8f:{},\xe5\x91\xa8\xe6\x9c\x9f:{},\xe5\x8f\x8d\xe8\xbd\xac:{}\'.format(\n            price_max, price_min, self.xd.value, self.reversed.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuPickStockPriceMinMax""""""\n        return AbuPickStockPriceMinMax\n\n\nclass PSRegressAngWidget(WidgetPickStockBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuPickRegressAngMinMax\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuPickRegressAngMinMax\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe5\xb0\x86\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe5\x89\x8d\xe6\x9c\x9f\xe8\xb5\xb0\xe5\x8a\xbf\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xba\xbf\xe6\x80\xa7\xe6\x8b\x9f\xe5\x90\x88\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe4\xb8\xaa\xe8\xa7\x92\xe5\xba\xa6\xef\xbc\x8c\xe9\x80\x89\xe4\xb8\xad\xe8\xa7\x84\xe5\x88\x99\xef\xbc\x9a\\n\'\n                  u\'1. \xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe5\x89\x8d\xe6\x9c\x9f\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6 > \xe6\x9c\x80\xe5\xb0\x8f\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\\n\'\n                  u\'2. \xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe5\x89\x8d\xe6\x9c\x9f\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6 < \xe6\x9c\x80\xe5\xa4\xa7\xe6\x8b\x9f\xe5\x90\x88\xe8\xa7\x92\xe5\xba\xa6\\n\',\n            description=u\'\xe8\xa7\x92\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.ang_min_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe8\x82\xa1\xe8\xa7\x92\xe5\xba\xa6\xe6\x9c\x80\xe5\xb0\x8f\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4-5\', layout=self.label_layout)\n        self.ang_min_float = widgets.IntText(\n            value=-5,\n            description=u\'\xe6\x9c\x80\xe5\xb0\x8f:\',\n            disabled=False\n        )\n        self.ang_min_ck = widgets.Checkbox(\n            value=True,\n            description=u\'\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xb0\x8f\xe9\x98\x80\xe5\x80\xbc\',\n            disabled=False\n        )\n\n        def ang_min_ck_change(change):\n            self.ang_min_float.disabled = not change[\'new\']\n\n        self.ang_min_ck.observe(ang_min_ck_change, names=\'value\')\n        self.ang_min_box = widgets.VBox([self.ang_min_label, self.ang_min_ck, self.ang_min_float])\n\n        self.ang_max_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe8\x82\xa1\xe8\xa7\x92\xe5\xba\xa6\xe6\x9c\x80\xe5\xa4\xa7\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa45\', layout=self.label_layout)\n        self.ang_max_float = widgets.IntText(\n            value=5,\n            description=u\'\xe6\x9c\x80\xe5\xa4\xa7:\',\n            disabled=False\n        )\n        self.ang_max_ck = widgets.Checkbox(\n            value=True,\n            description=u\'\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9c\x80\xe5\xa4\xa7\xe9\x98\x80\xe5\x80\xbc\',\n            disabled=False\n        )\n\n        def ang_max_ck_change(change):\n            self.ang_max_float.disabled = not change[\'new\']\n\n        self.ang_max_ck.observe(ang_max_ck_change, names=\'value\')\n        self.ang_max_box = widgets.VBox([self.ang_max_label, self.ang_max_ck, self.ang_max_float])\n\n        self.widget = widgets.VBox([self.description, self.ang_min_box, self.ang_max_box,\n                                    self.xd_box, self.reversed_box, self.add_box],\n                                   # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_pick_stock_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuPickRegressAngMinMax\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        ang_min = self.ang_min_float.value if self.ang_min_ck.value else -np.inf\n        ang_max = self.ang_max_float.value if self.ang_max_ck.value else np.inf\n        factor_dict = {\'class\': AbuPickRegressAngMinMax,\n                       \'xd\': self.xd.value,\n                       \'reversed\': self.reversed.value,\n                       \'threshold_ang_min\': ang_min,\n                       \'threshold_ang_max\': ang_max}\n\n        factor_desc_key = u\'\xe8\xa7\x92\xe5\xba\xa6\xe9\x80\x89\xe8\x82\xa1\xe6\x9c\x80\xe5\xa4\xa7:{}\xe6\x9c\x80\xe5\xb0\x8f:{},\xe5\x91\xa8\xe6\x9c\x9f:{},\xe5\x8f\x8d\xe8\xbd\xac:{}\'.format(\n            ang_max, ang_min, self.xd.value, self.reversed.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuPickRegressAngMinMax""""""\n        return AbuPickRegressAngMinMax\n\n\nclass PSShiftDistanceWidget(WidgetPickStockBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuPickStockShiftDistance\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuPickStockShiftDistance\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe5\xb0\x86\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe8\xb5\xb0\xe5\x8a\xbf\xe6\xaf\x8f\xe6\x9c\x88\xe8\xae\xa1\xe7\xae\x97\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe6\xaf\x94\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe9\x80\x89\xe5\x8f\x96\xe6\xb3\xa2\xe5\x8a\xa8\xe7\xa8\x8b\xe5\xba\xa6\xe4\xb8\x8d\xe8\x83\xbd\xe5\xa4\xaa\xe5\xa4\xa7\xef\xbc\x8c\xe4\xb9\x9f\xe4\xb8\x8d\xe5\xa4\xaa\xe5\xb0\x8f\xe7\x9a\x84\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x9a\\n\'\n                  u\'1. \xe5\xae\x9a\xe4\xb9\x89\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe5\xa4\xa7\xe4\xba\x8e\xe5\x8f\x82\xe6\x95\xb0\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe6\x9c\x88\xe4\xbb\xbd\xe4\xb8\xba\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\\n\'\n                  u\'2. \xe4\xb8\x80\xe5\xb9\xb4\xe4\xb8\xad\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe6\x95\xb0\xe9\x87\x8f < \xe6\x9c\x80\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe4\xb8\xaa\xe6\x95\xb0\\n\'\n                  u\'3. \xe4\xb8\x80\xe5\xb9\xb4\xe4\xb8\xad\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe6\x95\xb0\xe9\x87\x8f > \xe6\x9c\x80\xe5\xb0\x8f\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe4\xb8\xaa\xe6\x95\xb0\\n\',\n            description=u\'\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        threshold_sd_label1 = widgets.Label(u\'\xe8\xae\xbe\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe6\x9c\x9f\xe8\xb4\xa7\xe5\xb8\x82\xe5\x9c\xba\xe5\xbb\xba\xe8\xae\xae2.0\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8a\', layout=self.label_layout)\n        threshold_sd_label2 = widgets.Label(u\'\xe8\xae\xbe\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe8\x82\xa1\xe7\xa5\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\xbb\xba\xe8\xae\xae3.0\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8a\', layout=self.label_layout)\n        self.threshold_sd = widgets.FloatSlider(\n            value=2.0,\n            min=1.0,\n            max=6.0,\n            step=0.1,\n            description=u\'\xe9\x98\x80\xe5\x80\xbc\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.1f\',\n        )\n        self.threshold_sd_box = widgets.VBox([threshold_sd_label1, threshold_sd_label2, self.threshold_sd])\n\n        max_cnt_label = widgets.Label(u\'\xe9\x80\x89\xe5\x8f\x96\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe6\x95\xb0\xe9\x87\x8f < \xe4\xb8\x8b\xe9\x9d\xa2\xe8\xae\xbe\xe5\xae\x9a\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe4\xb8\xaa\xe6\x95\xb0\', layout=self.label_layout)\n        min_cnt_label = widgets.Label(u\'\xe9\x80\x89\xe5\x8f\x96\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe6\x95\xb0\xe9\x87\x8f > \xe4\xb8\x8b\xe9\x9d\xa2\xe8\xae\xbe\xe5\xae\x9a\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x9c\x88\xe4\xb8\xaa\xe6\x95\xb0\', layout=self.label_layout)\n        self.min_max_range = widgets.IntRangeSlider(\n            value=[1, 4],\n            min=0,\n            max=10,\n            step=1,\n            description=u\'\xe8\x8c\x83\xe5\x9b\xb4\',\n            disabled=False,\n            continuous_update=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\',\n        )\n        self.min_max_box = widgets.VBox([max_cnt_label, min_cnt_label, self.min_max_range])\n        # \xe8\xbf\x99\xe4\xb8\xaa\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\x8d\xe8\xa6\x81\xe5\x8f\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89xd\xef\xbc\x8c\xe9\x99\x90\xe5\xae\x9a\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\xba1\xe5\xb9\xb4\n        self.widget = widgets.VBox([self.description, self.threshold_sd_box,\n                                    self.min_max_range, self.reversed_box, self.add_box],\n                                   # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_pick_stock_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuPickStockShiftDistance\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n\n        factor_dict = {\'class\': AbuPickStockShiftDistance,\n                       \'threshold_sd\': self.threshold_sd.value,\n                       \'reversed\': self.reversed.value,\n                       \'threshold_max_cnt\': self.min_max_range.value[1],\n                       \'threshold_min_cnt\': self.min_max_range.value[0]}\n\n        factor_desc_key = u\'\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe9\x80\x89\xe8\x82\xa1\xe5\xa4\xa7\xe6\xb3\xa2\xe5\x8a\xa8:{}\xe6\x9c\x80\xe5\xa4\xa7:{}\xe6\x9c\x80\xe5\xb0\x8f:{},\xe5\x8f\x8d\xe8\xbd\xac:{}\'.format(\n            self.threshold_sd.value, self.min_max_range.value[1], self.min_max_range.value[0], self.reversed.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuPickStockShiftDistance""""""\n        return AbuPickStockShiftDistance\n\n\nclass PSNTopWidget(WidgetPickStockBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuPickStockNTop\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuPickStockNTop\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n        self.description = widgets.Textarea(\n            value=u\'\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85top N\xe9\x80\x89\xe8\x82\xa1\xe5\x9b\xa0\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe9\x80\x89\xe8\x82\xa1\xe5\x91\xa8\xe6\x9c\x9f\xe4\xb8\x8a\xe5\xaf\xb9\xe5\xa4\x9a\xe5\x8f\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe9\x80\x89\xe5\x8f\x96top n\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe5\x81\x9a\xe4\xb8\xba\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x9a\\n\'\n                  u\'(\xe5\x8f\xaa\xe5\xaf\xb9\xe5\x9c\xa8\xe8\x82\xa1\xe6\xb1\xa0\xe4\xb8\xad\xe9\x80\x89\xe5\xae\x9a\xe7\x9a\x84symbol\xe5\xba\x8f\xe5\x88\x97\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\xaf\xb9\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x9a\x82\xe6\x97\xb6\xe4\xb8\x8d\xe7\x94\x9f\xe6\x95\x88)\\n\',\n            description=u\'top N\xe6\xb6\xa8\xe8\xb7\x8c\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        n_top_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe5\x8f\x96top\xe4\xb8\xaa\xe4\xba\xa4\xe6\x98\x93\xe7\x9b\xae\xe6\xa0\x87\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa43\', layout=self.label_layout)\n        self.n_top = widgets.IntText(\n            value=3,\n            description=u\'TOP N\',\n            disabled=False\n        )\n        self.n_top_box = widgets.VBox([n_top_label, self.n_top])\n\n        direction_top_label1 = widgets.Label(u\'direction_top\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe6\x84\x8f\xe4\xb9\x89\xe4\xb8\xba\xe9\x80\x89\xe5\x8f\x96\xe6\x96\xb9\xe5\x90\x91\xef\xbc\x9a\', layout=self.label_layout)\n        direction_top_label2 = widgets.Label(u\'\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xba\xe6\xad\xa3\xef\xbc\x9a\xe5\x8d\xb3\xe9\x80\x89\xe5\x8f\x96\xe6\xb6\xa8\xe5\xb9\x85\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84n_top\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\', layout=self.label_layout)\n        direction_top_label3 = widgets.Label(u\'\xe5\x8f\xaf\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe8\xb4\x9f\xef\xbc\x9a\xe5\x8d\xb3\xe9\x80\x89\xe5\x8f\x96\xe8\xb7\x8c\xe5\xb9\x85\xe6\x9c\x80\xe9\xab\x98\xe7\x9a\x84n_top\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\', layout=self.label_layout)\n        self.direction_top = widgets.Dropdown(\n            options={u\'\xe6\xad\xa3(\xe6\xb6\xa8\xe5\xb9\x85)\': 1, u\'\xe8\xb4\x9f(\xe8\xb7\x8c\xe5\xb9\x85)\': -1},\n            value=1,\n            description=u\'\xe9\x80\x89\xe5\x8f\x96\xe6\x96\xb9\xe5\x90\x91:\',\n        )\n        self.direction_top_box = widgets.VBox([direction_top_label1, direction_top_label2, direction_top_label3,\n                                               self.direction_top])\n\n        self.widget = widgets.VBox([self.description, self.n_top_box, self.direction_top_box,\n                                    self.xd_box, self.reversed_box, self.add_box],\n                                   # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def seed_choice_symbol_key(self):\n        """"""\xe8\xbf\x94\xe5\x9b\x9e\xe6\x9b\xb4\xe6\x96\xb0\xe8\x82\xa1\xe6\xb1\xa0\xe4\xb8\xad\xe7\x9a\x84\xe7\xa7\x8d\xe5\xad\x90symbol\xe5\x88\xb0\xe5\x85\xb7\xe4\xbd\x93\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\xae\x9a\xe4\xb9\x89""""""\n        return \'symbol_pool\'\n\n    def make_pick_stock_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuPickStockNTop\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuPickStockNTop,\n                       \'n_top\': self.n_top.value,\n                       \'direction_top\': self.direction_top.value,\n                       \'reversed\': self.reversed.value,\n                       \'xd\': self.xd.value}\n\n        factor_desc_key = u\'\xe6\xb6\xa8\xe8\xb7\x8c\xe5\xb9\x85\xe9\x80\x89\xe8\x82\xa1n_top:{},\xe6\x96\xb9\xe5\x90\x91:{},xd:{},\xe5\x8f\x8d\xe8\xbd\xac:{}\'.format(\n            self.n_top.value, self.direction_top.value, self.xd.value, self.reversed.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuPickStockNTop""""""\n        return AbuPickStockNTop\n'"
abupy/WidgetBu/ABuWGPosBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import abstractmethod\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetFactorBase, WidgetFactorManagerBase, accordion_shut\nfrom ..WidgetBu.ABuWGBFBase import BFSubscriberMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass PosWGManager(WidgetFactorManagerBase):\n    """"""\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\xbb\x84\xe7\xbb\x87\xe7\xb1\xbb""""""\n\n    def __init__(self):\n        super(PosWGManager, self).__init__()\n\n        position_label = widgets.Label(u\'\xe6\x97\xa0\xe9\x80\x89\xe5\xae\x9a\xe6\x97\xb6\xe9\xbb\x98\xe8\xae\xa4\xe8\xb5\x84\xe7\xae\xa1\xe4\xb8\xba\xef\xbc\x9aatr\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\',\n                                       layout=widgets.Layout(width=\'300px\'))\n\n        self.widget = widgets.VBox([self.factor_box, position_label, self.selected_factors])\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x84\xe4\xbb\xb6\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x87\xbaself.factor_box""""""\n\n        from ..WidgetBu.ABuWGPosition import AtrPosWidget, KellyPosWidget, PtPosition\n        self.pos_array = []\n        self.pos_array.append(AtrPosWidget(self))\n        self.pos_array.append(KellyPosWidget(self))\n        self.pos_array.append(PtPosition(self))\n\n        #  ps() call\xe7\x94\xa8widget\xe7\xbb\x84list\n        children = [pos() for pos in self.pos_array]\n        if self.scroll_factor_box:\n            self.factor_box = widgets.Box(children=children,\n                                          layout=self.factor_layout)\n        else:\n            # \xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8cn\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85sub_children_group\xe5\xba\x8f\xe5\x88\x97,\n            sub_children_group = self._sub_children(children, len(children) / self._sub_children_group_cnt)\n            sub_children_box = [widgets.HBox(sub_children) for sub_children in sub_children_group]\n            self.factor_box = widgets.VBox(sub_children_box)\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe7\x89\xb9\xe6\xae\x8a\xe7\x9a\x84\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x85\xa8\xe5\xb1\x80\xe6\x95\xb0\xe6\x8d\xae\n        self.buy_factor_manger = None\n\n    def register(self, buy_factor_manger):\n        """"""\xe9\x80\x89\xe8\x82\xa1manager\xe5\x86\x85\xe9\x83\xa8\xe5\x9b\xa0\xe5\xad\x90\xe6\xb3\xa8\xe5\x86\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe6\x94\xb9\xe5\x8f\x98""""""\n        self.buy_factor_manger = buy_factor_manger\n        for ps in self.pos_array:\n            self.buy_factor_manger.register_subscriber(ps)\n\n\nclass WidgetPositionBase(WidgetFactorBase, BFSubscriberMixin):\n    """"""\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb""""""\n\n    def __init__(self, wg_manager):\n        super(WidgetPositionBase, self).__init__(wg_manager)\n        self.add = widgets.Button(description=u\'\xe9\x80\x89\xe5\xae\x9a\xe4\xb8\xba\xe5\x85\xa8\xe5\xb1\x80\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\', layout=widgets.Layout(width=\'98%\'),\n                                  button_style=\'info\')\n        # \xe9\x80\x89\xe5\xae\x9a\xe5\x85\xa8\xe5\xb1\x80\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\x95\xa5\xe6\x8c\x87\xe4\xbb\xa4\xe6\x8c\x89\xe9\x92\xae\n        self.add.on_click(self.add_position)\n        # \xe8\xbf\x90\xe8\xa1\x8c\xe6\xb7\xb7\xe5\x85\xa5\xe7\x9a\x84BFSubscriberMixin\xe4\xb8\xadui\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        self.subscriber_ui([u\'\xe7\x82\xb9\xe5\x87\xbb\\\'\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\\\'\xe6\xa1\x86\xe4\xb8\xad\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\', u\'\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\'])\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\xa1\x86\xe7\x82\xb9\xe5\x87\xbb\xe8\xa1\x8c\xe4\xb8\xba\xef\xbc\x9a\xe5\xb0\x86\xe6\x9c\xac\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8a\xa0\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x81\x9a\xe4\xb8\xba\xe9\x99\x84\xe5\xb1\x9e\n        self.buy_factors.observe(self.add_position_to_buy_factor, names=\'value\')\n        self.accordion.set_title(0, u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\')\n        accordion_shut(self.accordion)\n        self.add_box = widgets.VBox([self.add, self.accordion])\n\n        # \xe5\x85\xb7\xe4\xbd\x93\xe5\xad\x90\xe7\xad\x96\xe7\x95\xa5\xe6\x9e\x84\xe5\xbb\xba\n        self._init_widget()\n\n    @abstractmethod\n    def _init_widget(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def make_position_unique(self):\n        """"""\n            \xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x9b\xa0\xe5\xad\x90\xe5\xad\x97\xe5\x85\xb8\n            \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x9a\n            1. \xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n            2. \xe5\x9b\xa0\xe5\xad\x90\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\n        """"""\n        pass\n\n    # noinspection PyUnusedLocal\n    def add_position(self, bt):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe9\x80\x89\xe5\xae\x9a\xe4\xb8\xba\xe5\x85\xa8\xe5\xb1\x80\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5""""""\n        # \xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key\n        factor_dict, factor_desc_key = self.make_position_unique()\n        self.wg_manager.add_factor(factor_dict, factor_desc_key, only_one=True)\n\n    def add_position_to_buy_factor(self, select):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xad\x96\xe7\x95\xa5\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad""""""\n        self.add_to_buy_factor(select, self.make_position_unique, \'position\', only_one=True)\n'"
abupy/WidgetBu/ABuWGPosition.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ipywidgets as widgets\n\nfrom ..BetaBu.ABuAtrPosition import AbuAtrPosition\nfrom ..BetaBu.ABuKellyPosition import AbuKellyPosition\nfrom ..BetaBu.ABuPtPosition import AbuPtPosition\nfrom ..WidgetBu.ABuWGPosBase import WidgetPositionBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass AtrPosWidget(WidgetPositionBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuAtrPosition\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuAtrPosition\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        description = widgets.Textarea(\n            value=u\'atr\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe7\xae\xa1\xe7\x90\x86\xe5\x85\xa8\xe5\xb1\x80\xe7\xad\x96\xe7\x95\xa5\\n\'\n                  u\'\xe6\xa0\xb9\xe6\x8d\xae\xe5\x86\xb3\xe7\xad\x96\xe4\xb9\xb0\xe5\x85\xa5\xe5\xbd\x93\xe5\xa4\xa9\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe6\xb3\xa2\xe5\x8a\xa8\xe5\x86\xb3\xe7\xad\x96\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe9\x85\x8d\xe6\xaf\x94\\n\'\n                  u\'\xe6\xb3\xa8\xe6\x84\x8f\xe4\xb8\x8d\xe5\x90\x8c\xe4\xba\x8e\xe5\x8d\x96\xe7\xad\x96\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaa\xe8\x83\xbd\xe6\x9c\x89\xe5\x94\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\',\n            description=u\'atr\xe8\xb5\x84\xe7\xae\xa1\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        atr_pos_base_label = widgets.Label(u\'\xe4\xbb\x93\xe4\xbd\x8d\xe5\x9f\xba\xe7\xa1\x80\xe9\x85\x8d\xe6\xaf\x94\xef\xbc\x9a\xe9\xbb\x98\xe8\xae\xa40.1\xe5\x8d\xb3\xe8\xb5\x84\xe9\x87\x9110%\xe4\xb8\xba\xe4\xbb\x93\xe4\xbd\x8d\xe5\x9f\xba\xe6\x95\xb0\',\n                                           layout=self.label_layout)\n        # \xe9\x9c\x80\xe8\xa6\x81\xe7\xb2\xbe\xe7\xa1\xae\xe5\x88\xb0\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\x90\x8e5\xe4\xbd\x8d\n        self.atr_pos_base = widgets.FloatSlider(\n            value=0.10,\n            min=0.00001,\n            max=1.0,\n            step=0.00001,\n            description=u\'\xe5\x9f\xba\xe9\x85\x8d\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.5f\'\n        )\n        atr_pos_base_box = widgets.VBox([atr_pos_base_label, self.atr_pos_base])\n\n        atr_base_price_label = widgets.Label(u\'\xe5\xb8\xb8\xe6\x95\xb0\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xae\xbe\xe5\xae\x9a\xef\xbc\x9a\xe9\xbb\x98\xe8\xae\xa415\xef\xbc\x8c\xe5\xbb\xba\xe8\xae\xae\xe5\x9c\xa812-20\xe4\xb9\x8b\xe9\x97\xb4\',\n                                             layout=self.label_layout)\n        self.atr_base_price = widgets.IntSlider(\n            value=15,\n            min=12,\n            max=20,\n            step=1,\n            description=u\'\xe5\xb8\xb8\xe4\xbb\xb7\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        atr_base_price_box = widgets.VBox([atr_base_price_label, self.atr_base_price])\n\n        # TODO AbuAtrPosition\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xadstd_atr_threshold\xe7\x9a\x84\xe8\xae\xbe\xe7\xbd\xae\n\n        self.widget = widgets.VBox([description, atr_pos_base_box, atr_base_price_box,\n                                    self.add_box], layout=self.widget_layout)\n\n    def make_position_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuAtrPosition\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuAtrPosition,\n                       \'atr_pos_base\': self.atr_pos_base.value,\n                       \'atr_base_price\': self.atr_base_price.value}\n\n        factor_desc_key = u\'atr\xe8\xb5\x84\xe7\xae\xa1\xe4\xbb\x93\xe4\xbd\x8d\xe5\x9f\xba\xe6\x95\xb0:{}\xe5\xb8\xb8\xe6\x95\xb0\xe4\xbb\xb7\xe6\xa0\xbc:{}\'.format(\n            self.atr_pos_base.value, self.atr_base_price.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuAtrPosition""""""\n        return AbuAtrPosition\n\n\nclass KellyPosWidget(WidgetPositionBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuKellyPosition\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuKellyPosition\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        description = widgets.Textarea(\n            value=u\'kelly\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe6\xa0\xb9\xe6\x8d\xae\xe7\xad\x96\xe7\x95\xa5\xe5\x8e\x86\xe5\x8f\xb2\xe8\x83\x9c\xe7\x8e\x87\xe6\x9c\x9f\xe6\x9c\x9b\xef\xbc\x8c\xe7\x9b\x88\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b\xef\xbc\x8c\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b\xe5\x86\xb3\xe7\xad\x96\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe9\x85\x8d\xe6\xaf\x94\\n\'\n                  u\'\xe4\xbb\x93\xe4\xbd\x8d\xe8\xb5\x84\xe9\x87\x91\xe9\x85\x8d\xe6\xaf\x94 = \xe8\x83\x9c\xe7\x8e\x87 - \xe8\xb4\xa5\xe7\x8e\x87/(\xe7\x9b\x88\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b/\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b)\\n\'\n                  u\'\xe6\xb3\xa8\xe6\x84\x8f\xe4\xb8\x8d\xe5\x90\x8c\xe4\xba\x8e\xe5\x8d\x96\xe7\xad\x96\xef\xbc\x8c\xe9\x80\x89\xe8\x82\xa1\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\xaa\xe8\x83\xbd\xe6\x9c\x89\xe5\x94\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe8\xb5\x84\xe9\x87\x91\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\',\n            description=u\'kelly\xe8\xb5\x84\xe7\xae\xa1\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        win_rate_label = widgets.Label(u\'\xe7\xad\x96\xe7\x95\xa5\xe5\x8e\x86\xe5\x8f\xb2\xe8\x83\x9c\xe7\x8e\x87\xe6\x9c\x9f\xe6\x9c\x9b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.5\xe5\x8d\xb350%\xe8\x83\x9c\xe7\x8e\x87\',\n                                       layout=self.label_layout)\n        # \xe9\x9c\x80\xe8\xa6\x81\xe7\xb2\xbe\xe7\xa1\xae\xe5\x88\xb0\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\x90\x8e5\xe4\xbd\x8d\n        self.win_rate = widgets.FloatSlider(\n            value=0.50,\n            min=0.01,\n            max=1.00,\n            step=0.0001,\n            description=u\'\xe8\x83\x9c\xe7\x8e\x87\xe6\x9c\x9f\xe6\x9c\x9b\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.4f\'\n        )\n        win_rate_box = widgets.VBox([win_rate_label, self.win_rate])\n\n        gains_mean_label = widgets.Label(u\'\xe7\xad\x96\xe7\x95\xa5\xe5\x8e\x86\xe5\x8f\xb2\xe7\x9b\x88\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.1\xe5\x8d\xb310%\',\n                                         layout=self.label_layout)\n        self.gains_mean = widgets.FloatSlider(\n            value=0.10,\n            min=0.01,\n            max=100.00,\n            step=0.0001,\n            description=u\'\xe7\x9b\x88\xe5\x88\xa9\xe6\x9c\x9f\xe6\x9c\x9b\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.4f\'\n        )\n        gains_mean_box = widgets.VBox([gains_mean_label, self.gains_mean])\n\n        losses_mean_label = widgets.Label(u\'\xe7\xad\x96\xe7\x95\xa5\xe5\x8e\x86\xe5\x8f\xb2\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa40.05\xe5\x8d\xb35%\',\n                                          layout=self.label_layout)\n        self.losses_mean = widgets.FloatSlider(\n            value=0.05,\n            min=0.01,\n            max=100.00,\n            step=0.0001,\n            description=u\'\xe4\xba\x8f\xe6\x8d\x9f\xe6\x9c\x9f\xe6\x9c\x9b\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.4f\'\n        )\n        losses_mean_box = widgets.VBox([losses_mean_label, self.losses_mean])\n\n        self.widget = widgets.VBox([description, win_rate_box, gains_mean_box,\n                                    losses_mean_box, self.add_box], layout=self.widget_layout)\n\n    def make_position_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuKellyPosition\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuKellyPosition,\n                       \'win_rate\': self.win_rate.value,\n                       \'gains_mean\': self.gains_mean.value,\n                       \'losses_mean\': self.losses_mean.value}\n\n        factor_desc_key = u\'kelly\xe8\xb5\x84\xe7\xae\xa1\xe4\xbb\x93\xe4\xbd\x8d\xe8\x83\x9c\xe7\x8e\x87:{}\xe7\x9b\x88\xe6\x9c\x9f:{}\xe4\xba\x8f\xe6\x9c\x9f:{}\'.format(\n            self.win_rate.value, self.gains_mean.value, self.losses_mean.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuKellyPosition""""""\n        return AbuKellyPosition\n\n\nclass PtPosition(WidgetPositionBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuPtPosition\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuPtPosition\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        description = widgets.Textarea(\n            value=u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe9\x92\x88\xe5\xaf\xb9\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe4\xbb\x93\xe4\xbd\x8d\xe7\xae\xa1\xe7\x90\x86\xe7\xad\x96\xe7\x95\xa5\\n\'\n                  u\'\xe6\xa0\xb9\xe6\x8d\xae\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe5\x9c\xa8\xe4\xb9\x8b\xe5\x89\x8d\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe6\x9d\xa5\xe5\x86\xb3\xe7\xad\x96\xe4\xbb\x93\xe4\xbd\x8d\xe5\xa4\xa7\xe5\xb0\x8f\\n\'\n                  u\'\xe5\x81\x87\xe8\xae\xbe\xe8\xbf\x87\xe5\x8e\xbb\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\\n\'\n                  u\'\xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba2\xe5\x85\x83\xef\xbc\x9a\xe5\x88\x99\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe9\x85\x8d\xe6\xaf\x94\xe5\xbe\x88\xe9\xab\x98(\xe8\xae\xa4\xe4\xb8\xba\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe6\x9c\x89\xe5\xbe\x88\xe5\xa4\xa7\xe5\x90\x91\xe4\xb8\x8a\xe7\xa9\xba\xe9\x97\xb4)\\n\'\n                  u\'\xe5\xa6\x82\xe6\x9e\x9c\xe5\xbd\x93\xe5\x89\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xba9\xe5\x85\x83\xef\xbc\x9a\xe5\x88\x99\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\x93\xe4\xbd\x8d\xe9\x85\x8d\xe6\xaf\x94\xe5\xbe\x88\xe4\xbd\x8e(\xe8\xae\xa4\xe4\xb8\xba\xe5\x9d\x87\xe5\x80\xbc\xe5\x9b\x9e\xe5\xa4\x8d\xe5\x90\x91\xe4\xb8\x8a\xe7\xa9\xba\xe9\x97\xb4\xe6\xaf\x94\xe8\xbe\x83\xe5\xb0\x8f)\',\n            description=u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        pos_base_label = widgets.Label(u\'\xe4\xbb\x93\xe4\xbd\x8d\xe5\x9f\xba\xe7\xa1\x80\xe9\x85\x8d\xe6\xaf\x94\xef\xbc\x9a\xe9\xbb\x98\xe8\xae\xa40.1\xe5\x8d\xb3\xe8\xb5\x84\xe9\x87\x9110%\xe4\xb8\xba\xe4\xbb\x93\xe4\xbd\x8d\xe5\x9f\xba\xe6\x95\xb0\',\n                                       layout=self.label_layout)\n        # \xe9\x9c\x80\xe8\xa6\x81\xe7\xb2\xbe\xe7\xa1\xae\xe5\x88\xb0\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\x90\x8e5\xe4\xbd\x8d\n        self.pos_base = widgets.FloatSlider(\n            value=0.10,\n            min=0.00001,\n            max=1.0,\n            step=0.00001,\n            description=u\'\xe5\x9f\xba\xe9\x85\x8d\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.5f\'\n        )\n        pos_base_box = widgets.VBox([pos_base_label, self.pos_base])\n        past_day_cnt_label = widgets.Label(u\'\xe6\xa0\xb9\xe6\x8d\xae\xe8\xbf\x87\xe5\x8e\xbb\xe5\xa4\x9a\xe9\x95\xbf\xe4\xb8\x80\xe6\xae\xb5\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x81\x9a\xe4\xb8\xba\xe5\x8f\x82\xe8\x80\x83\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa420\',\n                                           layout=self.label_layout)\n        self.past_day_cnt = widgets.IntSlider(\n            value=20,\n            min=5,\n            max=250,\n            step=1,\n            description=u\'\xe5\x8f\x82\xe8\x80\x83\xe5\xa4\xa9\xe6\x95\xb0\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        past_day_cnt_box = widgets.VBox([past_day_cnt_label, self.past_day_cnt])\n\n        self.widget = widgets.VBox([description, pos_base_box,\n                                    past_day_cnt_box, self.add_box], layout=self.widget_layout)\n\n    def make_position_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuPtPosition\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuPtPosition,\n                       \'pos_base\': self.pos_base.value,\n                       \'past_day_cnt\': self.past_day_cnt.value}\n        factor_desc_key = u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe5\x9f\xba\xe4\xbb\x93\xe6\xaf\x94\xe4\xbe\x8b:{} \xe5\x8f\x82\xe8\x80\x83\xe5\xa4\xa9\xe6\x95\xb0:{}\'.format(\n            self.pos_base.value, self.past_day_cnt.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuPtPosition""""""\n        return AbuPtPosition\n'"
abupy/WidgetBu/ABuWGQuantTool.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x87\x8f\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetBase\nfrom ..WidgetBu.ABuWGToolBase import WidgetToolSet\nfrom ..WidgetBu.ABuWGTLTool import WidgetTLTool\nfrom ..WidgetBu.ABuWGDATool import WidgetDATool\nfrom ..WidgetBu.ABuWGSMTool import WidgetSMTool\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetQuantTool(WidgetBase):\n    """"""\xe9\x87\x8f\xe5\x8c\x96\xe5\x88\x86\xe6\x9e\x90\xe5\xb7\xa5\xe5\x85\xb7\xe4\xb8\xbb\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    def __init__(self):\n        self.ts = WidgetToolSet()\n        self.da = WidgetDATool(self.ts)\n        self.tl = WidgetTLTool(self.ts)\n        self.sm = WidgetSMTool(self.ts)\n        sub_widget_tab = widgets.Tab()\n        sub_widget_tab.children = [self.tl.widget, self.sm.widget, self.da.widget, self.ts.widget]\n        for ind, name in enumerate([u\'\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\', u\'\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\', u\'\xe6\x8c\xaf\xe5\xb9\x85\xe5\x88\x86\xe6\x9e\x90\', u\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\']):\n            sub_widget_tab.set_title(ind, name)\n        self.widget = widgets.VBox([sub_widget_tab])\n'"
abupy/WidgetBu/ABuWGSFBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import abstractmethod\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetFactorBase, WidgetFactorManagerBase, accordion_shut\nfrom ..WidgetBu.ABuWGBFBase import BFSubscriberMixin\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass SellFactorWGManager(WidgetFactorManagerBase):\n    """"""\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe7\xbb\x84\xe7\xbb\x87\xe7\xb1\xbb""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xbb\x84\xe4\xbb\xb6\xef\xbc\x8c\xe6\x9e\x84\xe9\x80\xa0\xe5\x87\xbaself.factor_box""""""\n\n        from ..WidgetBu.ABuWGSellFactor import SellXDWidget, SellAtrNStopWidget, SellCloseAtrNWidget\n        from ..WidgetBu.ABuWGSellFactor import SellPreAtrNWidget, SellDMWidget, SellNDWidget\n\n        self.sf_array = []\n        self.sf_array.append(SellAtrNStopWidget(self))\n        self.sf_array.append(SellCloseAtrNWidget(self))\n        self.sf_array.append(SellPreAtrNWidget(self))\n        self.sf_array.append(SellXDWidget(self))\n        self.sf_array.append(SellDMWidget(self))\n        self.sf_array.append(SellNDWidget(self))\n\n        # sf() call\xe7\x94\xa8widget\xe7\xbb\x84list\n        children = [sf() for sf in self.sf_array]\n        if self.scroll_factor_box:\n            self.factor_box = widgets.Box(children=children,\n                                          layout=self.factor_layout)\n        else:\n            # \xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c3\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85sub_children_group\xe5\xba\x8f\xe5\x88\x97,\n            sub_children_group = self._sub_children(children, len(children) / self._sub_children_group_cnt)\n            sub_children_box = [widgets.HBox(sub_children) for sub_children in sub_children_group]\n            self.factor_box = widgets.VBox(sub_children_box)\n\n        # \xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\x98\xaf\xe7\x89\xb9\xe6\xae\x8a\xe7\x9a\x84\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x85\xa8\xe5\xb1\x80\xe6\x95\xb0\xe6\x8d\xae\n        self.buy_factor_manger = None\n\n    def register(self, buy_factor_manger):\n        """"""\xe5\x8d\x96\xe5\x87\xbamanager\xe5\x86\x85\xe9\x83\xa8\xe5\x9b\xa0\xe5\xad\x90\xe6\xb3\xa8\xe5\x86\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe6\x94\xb9\xe5\x8f\x98""""""\n        self.buy_factor_manger = buy_factor_manger\n        for sf in self.sf_array:\n            self.buy_factor_manger.register_subscriber(sf)\n\n\nclass WidgetFactorSellBase(WidgetFactorBase, BFSubscriberMixin):\n    """"""\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe7\xb1\xbb""""""\n\n    def __init__(self, wg_manager):\n        super(WidgetFactorSellBase, self).__init__(wg_manager)\n\n        if wg_manager.add_button_style == \'grid\':\n            add_cb = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\xaf\xbb\xe6\x89\xbe\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x84\xe5\x90\x88\', layout=widgets.Layout(width=\'98%\'),\n                                    button_style=\'info\')\n            add_cb.on_click(self.add_sell_factor)\n\n            add_dp = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\xaf\xbb\xe6\x89\xbe\xe7\x8b\xac\xe7\xab\x8b\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x9c\x80\xe4\xbd\xb3\xe7\xbb\x84\xe5\x90\x88\', layout=widgets.Layout(width=\'98%\'),\n                                    button_style=\'warning\')\n            add_dp.on_click(self.add_sell_factor_grid)\n\n            self.add = widgets.VBox([add_cb, add_dp])\n        else:\n            self.add = widgets.Button(description=u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe5\x85\xa8\xe5\xb1\x80\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\', layout=widgets.Layout(width=\'98%\'),\n                                      button_style=\'info\')\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x85\xa8\xe5\xb1\x80\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x8c\x87\xe4\xbb\xa4\xe6\x8c\x89\xe9\x92\xae\n            self.add.on_click(self.add_sell_factor)\n\n        if self.wg_manager.show_add_buy:\n            # \xe8\xbf\x90\xe8\xa1\x8c\xe6\xb7\xb7\xe5\x85\xa5\xe7\x9a\x84BFSubscriberMixin\xe4\xb8\xadui\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n            self.subscriber_ui([u\'\xe7\x82\xb9\xe5\x87\xbb\\\'\xe5\xb7\xb2\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\\\'\xe6\xa1\x86\xe4\xb8\xad\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\', u\'\xe5\xb0\x86\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x81\x9a\xe4\xb8\xba\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe7\x9a\x84\xe9\x99\x84\xe5\xb1\x9e\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\'])\n            # \xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe6\xa1\x86\xe7\x82\xb9\xe5\x87\xbb\xe8\xa1\x8c\xe4\xb8\xba\xef\xbc\x9a\xe5\xb0\x86\xe6\x9c\xac\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe5\x8a\xa0\xe5\x88\xb0\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe5\x81\x9a\xe4\xb8\xba\xe9\x99\x84\xe5\xb1\x9e\n            self.buy_factors.observe(self.add_sell_factor_to_buy_factor, names=\'value\')\n            self.accordion.set_title(0, u\'\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\xba\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x9b\xa0\xe5\xad\x90\xe7\x9a\x84\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\')\n            accordion_shut(self.accordion)\n            self.add_box = widgets.VBox([self.add, self.accordion])\n        else:\n            self.add_box = self.add\n\n        self._init_widget()\n\n    @abstractmethod\n    def _init_widget(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        pass\n\n    @abstractmethod\n    def make_sell_factor_unique(self):\n        """"""\n            \xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x9b\xa0\xe5\xad\x90\xe5\xad\x97\xe5\x85\xb8\n            \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x9a\n            1. \xe5\x9b\xa0\xe5\xad\x90\xe6\x9e\x84\xe5\xbb\xba\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\n            2. \xe5\x9b\xa0\xe5\xad\x90\xe5\x94\xaf\xe4\xb8\x80\xe6\x8f\x8f\xe8\xbf\xb0\n        """"""\n        pass\n\n    # noinspection PyUnusedLocal\n    def add_sell_factor(self, bt):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x85\xa8\xe5\xb1\x80\xe7\xad\x96\xe7\x95\xa5""""""\n        # \xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key\n        factor_dict, factor_desc_key = self.make_sell_factor_unique()\n        self.wg_manager.add_factor(factor_dict, factor_desc_key)\n\n    # noinspection PyUnusedLocal\n    def add_sell_factor_grid(self, bt):\n        """"""grid search\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict, factor_desc_key = self.make_sell_factor_unique()\n        # \xe5\x9b\xa0\xe5\xad\x90\xe5\xba\x8f\xe5\x88\x97value\xe9\x83\xbd\xe5\xa5\x97\xe4\xb8\x8alist\n        factors_grid = {bf_key: [factor_dict[bf_key]]\n                        for bf_key in factor_dict.keys()}\n        self.wg_manager.add_factor(factor_dict, factor_desc_key)\n\n    def add_sell_factor_to_buy_factor(self, select):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0\xe7\xad\x96\xe7\x95\xa5\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad""""""\n        self.add_to_buy_factor(select, self.make_sell_factor_unique, \'sell_factors\')\n'"
abupy/WidgetBu/ABuWGSMTool.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x87\x8f\xe5\x8c\x96\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom contextlib import contextmanager\n\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nfrom ..WidgetBu.ABuWGToolBase import WidgetToolBase, multi_fetch_symbol_df_analyse\nfrom ..UtilBu import ABuProgress\nfrom ..MarketBu.ABuSymbol import code_to_symbol\nfrom ..SimilarBu.ABuCorrcoef import ECoreCorrType, corr_matrix\nfrom ..SimilarBu.ABuSimilar import find_similar_with_se, find_similar_with_folds\nfrom ..TLineBu.ABuTLSimilar import calc_similar, coint_similar\nfrom ..MarketBu.ABuDataCheck import all_market_env_check\nfrom ..CoreBu.ABuEnv import EMarketTargetType\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu.ABuStatsUtil import cosine_distance_matrix, manhattan_distance_matrix, euclidean_distance_matrix\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnusedLocal,PyProtectedMember\nclass WidgetSMTool(WidgetToolBase):\n    """"""\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe6\x9e\x90\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    def __init__(self, tool_set):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\xe7\x95\x8c\xe9\x9d\xa2""""""\n        super(WidgetSMTool, self).__init__(tool_set)\n\n        corr = self.init_corr_ui()\n        distances = self.init_distances_ui()\n        market_corr = self.init_market_corr_ui()\n        relative_corr = self.init_relative_corr_ui()\n        coint_corr = self.init_coint_corr_ui()\n\n        children = [corr, distances, market_corr, relative_corr, coint_corr]\n        if self.scroll_factor_box:\n            sm_box = widgets.Box(children,\n                                 layout=self.scroll_widget_layout)\n            # \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe5\xa5\x97\xe4\xb8\x80\xe5\xb1\x82VBox\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6\xe5\xa4\x96\xe9\x83\xa8\xe7\x9a\x84tab\xe6\x98\xbe\xe7\xa4\xba\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98\n            self.widget = widgets.VBox([sm_box])\n        else:\n            # \xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c2\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85sub_children_group\xe5\xba\x8f\xe5\x88\x97,\n            sub_children_group = self._sub_children(children, len(children) / self._sub_children_group_cnt)\n            sub_children_box = [widgets.HBox(sub_children) for sub_children in sub_children_group]\n            self.widget = widgets.VBox(sub_children_box)\n\n    @contextmanager\n    def _init_widget_list_action(self, callback_analyse, analyse_name, n_target):\n        """"""\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xef\xbc\x8c\xe4\xb8\x8a\xe6\x96\x87\xe5\xb0\x81\xe8\xa3\x85tip label\xef\xbc\x8c\xe4\xb8\x8b\xe6\x96\x87\xe5\xb0\x81\xe8\xa3\x85action\xe6\x8c\x89\xe9\x92\xae\xef\xbc\x8cwidget_list\xe5\x81\x9a\xe8\xbf\x9e\xe6\x8e\xa5""""""\n        if not callable(callback_analyse):\n            raise TabError(\'callback_analyse must callable!\')\n        widget_list = []\n        tip_label = widgets.Label(self.map_tip_target_label(n_target=n_target), layout=self.label_layout)\n        widget_list.append(tip_label)\n\n        yield widget_list\n\n        analyse_bt = widgets.Button(description=analyse_name, layout=widgets.Layout(width=\'98%\'),\n                                    button_style=\'info\')\n        analyse_bt.on_click(callback_analyse)\n        widget_list.append(analyse_bt)\n\n    def init_coint_corr_ui(self):\n        """"""\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x8d\x8f\xe6\x95\xb4\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90ui""""""\n        with self._init_widget_list_action(self.coint_corr_market_analyse, u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x8d\x8f\xe6\x95\xb4\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\', 1) as widget_list:\n            coint_similar_description = widgets.Textarea(\n                value=u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x8d\x8f\xe6\x95\xb4\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90: \\n\'\n                      u\'\xe7\xbb\xbc\xe5\x90\x88\xe5\x88\xa9\xe7\x94\xa8\xe7\x9b\xb8\xe5\x85\xb3\xe5\x92\x8c\xe5\x8d\x8f\xe6\x95\xb4\xe7\x9a\x84\xe7\x89\xb9\xe6\x80\xa7\xe8\xbf\x94\xe5\x9b\x9e\xe6\x9f\xa5\xe8\xaf\xa2\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe7\xbb\x9f\xe8\xae\xa1\xe5\xa5\x97\xe5\x88\xa9\xe7\x9a\x84\xe4\xba\xa4\xe6\x98\x93\xe6\x9c\xba\xe4\xbc\x9a\\n\'\n                      u\'1. \xe9\x80\x9a\xe8\xbf\x87\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe5\x88\x86\xe6\x9e\x90\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe4\xb8\x8e\xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x9c\x80\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe5\x89\x8d100\xe6\x94\xaf\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbd\x9c\xe4\xb8\xba\xe7\xa7\x8d\xe5\xad\x90\\n\'\n                      u\'2. \xe4\xbb\x8e\xe7\xa7\x8d\xe5\xad\x90\xe4\xb8\xad\xe9\x80\x9a\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97\xe5\x8d\x8f\xe6\x95\xb4\xe7\xa8\x8b\xe5\xba\xa6\xe6\x9d\xa5\xe5\xba\xa6\xe9\x87\x8f\xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xe7\xbb\x9f\xe8\xae\xa1\xe5\xa5\x97\xe5\x88\xa9\xe6\x9c\xba\xe4\xbc\x9a\\n\'\n                      u\'3. \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x95\xb4\xe4\xb8\xaa\xe8\xbf\x87\xe7\xa8\x8b\\n\',\n                disabled=False,\n                layout=self.description_layout\n            )\n            widget_list.append(coint_similar_description)\n\n            tip_label1 = widgets.Label(u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', layout=self.label_layout)\n            tip_label2 = widgets.Label(u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8b\xe8\xbd\xbd\', layout=self.label_layout)\n            self.coint_corr_data_mode = widgets.RadioButtons(\n                options={u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\': True, u\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\': False},\n                value=True,\n                description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            corr_market_box = widgets.VBox([tip_label1, tip_label2, self.coint_corr_data_mode])\n            widget_list.append(corr_market_box)\n        return widgets.VBox(widget_list,  # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_relative_corr_ui(self):\n        """"""\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90ui""""""\n\n        with self._init_widget_list_action(self.corr_relative_market_analyse, u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\', 2) as widget_list:\n            relative_description = widgets.Textarea(\n                value=u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90: \\n\'\n                      u\'\xe5\xba\xa6\xe9\x87\x8f\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\xa4\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x88a,b\xef\xbc\x89\xe7\x9b\xb8\xe5\xaf\xb9\xe6\x95\xb4\xe4\xb8\xaa\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe8\xaf\x84\xe7\xba\xa7\xef\xbc\x8c\xe5\xae\x83\xe4\xb8\x8d\xe5\x85\xb3\xe5\xbf\x83\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe8\x82\xa1\xe7\xa5\xa8\xe5\x85\xb7\xe4\xbd\x93\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe7\x9a\x84\xe6\x95\xb0\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\\n\'\n                      u\'1. \xe8\xae\xa1\xe7\xae\x97a\xe4\xb8\x8e\xe5\xb8\x82\xe5\x9c\xba\xe4\xb8\xad\xe6\x89\x80\xe6\x9c\x89\xe8\x82\xa1\xe7\xa5\xa8\xe7\x9a\x84\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\\n\'\n                      u\'2. \xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\xe8\xbf\x9b\xe8\xa1\x8crank\xe6\x8e\x92\xe5\xba\x8f\\n\'\n                      u\'3. \xe6\x9f\xa5\xe8\xaf\xa2\xe8\x82\xa1\xe7\xa5\xa8b\xe5\x9c\xa8rank\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe6\xad\xa4\xe4\xbd\x8d\xe7\xbd\xae\xe5\x80\xbc\xe5\x8d\xb3\xe4\xb8\xba\xe7\xbb\x93\xe6\x9e\x9c\\n\',\n                disabled=False,\n                layout=self.description_layout\n            )\n            widget_list.append(relative_description)\n\n            tip_label1 = widgets.Label(u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xae\x9e\xe6\x97\xb6\xe7\xbd\x91\xe7\xbb\x9c\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', layout=self.label_layout)\n            tip_label2 = widgets.Label(u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8b\xe8\xbd\xbd\', layout=self.label_layout)\n            self.relative_corr_data_mode = widgets.RadioButtons(\n                options={u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\': True, u\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\': False},\n                value=True,\n                description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            corr_market_box = widgets.VBox([tip_label1, tip_label2, self.relative_corr_data_mode])\n            widget_list.append(corr_market_box)\n\n        return widgets.VBox(widget_list,  # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_market_corr_ui(self):\n        """"""\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90ui""""""\n\n        with self._init_widget_list_action(self.corr_market_analyse, u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\', 1) as widget_list:\n            self.corr_market = widgets.Dropdown(\n                options={u\'\xe7\xbe\x8e\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_US.value,\n                         u\'A\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_CN.value,\n                         u\'\xe6\xb8\xaf\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_HK.value,\n                         u\'\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_CN.value,\n                         u\'\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL.value,\n                         u\'\xe6\x95\xb0\xe5\xad\x97\xe8\xb4\xa7\xe5\xb8\x81\': EMarketTargetType.E_MARKET_TARGET_TC.value},\n                value=ABuEnv.g_market_target.value,\n                description=u\'\xe5\x88\x86\xe6\x9e\x90\xe5\xb8\x82\xe5\x9c\xba:\',\n            )\n            market_tip1 = widgets.Label(value=u\'\xe5\x88\x86\xe6\x9e\x90\xe5\xb8\x82\xe5\x9c\xba\xe7\x9a\x84\xe9\x80\x89\xe6\x8b\xa9\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x92\x8c\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\x8d\xe5\x9c\xa8\xe5\x90\x8c\xe4\xb8\x80\xe5\xb8\x82\xe5\x9c\xba\', layout=self.label_layout)\n            market_tip2 = widgets.Label(value=u\'\xe5\xa6\x82\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe4\xb8\xba\xe7\xbe\x8e\xe8\x82\xa1\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe5\x88\x86\xe6\x9e\x90\xe5\xb8\x82\xe5\x9c\xba\xe4\xb9\x9f\xe5\x8f\xaf\xe9\x80\x89A\xe8\x82\xa1\', layout=self.label_layout)\n            market_box = widgets.VBox([market_tip1, market_tip2, self.corr_market])\n            widget_list.append(market_box)\n\n            tip_label1 = widgets.Label(u\'\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\', layout=self.label_layout)\n            tip_label2 = widgets.Label(u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xb8\x8b\xe8\xbd\xbd\', layout=self.label_layout)\n            self.corr_market_data_mode = widgets.RadioButtons(\n                options={u\'\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\': True, u\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\': False},\n                value=True,\n                description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            corr_market_box = widgets.VBox([tip_label1, tip_label2, self.corr_market_data_mode])\n            widget_list.append(corr_market_box)\n\n            self.corr_market_mode = widgets.RadioButtons(\n                options={u\'\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\': \'pears\', u\'\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\': \'sperm\', u\'\xe5\x9f\xba\xe4\xba\x8e\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\': \'sign\',\n                         u\'\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\': \'rolling\'},\n                value=\'pears\',\n                description=u\'\xe7\x9b\xb8\xe5\x85\xb3\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.corr_market_mode)\n\n        return widgets.VBox(widget_list,  # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_corr_ui(self):\n        """"""\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90ui""""""\n\n        with self._init_widget_list_action(self.corr_analyse, u\'\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90\', -1) as widget_list:\n            self.corr_mode = widgets.RadioButtons(\n                options={u\'\xe7\x9a\xae\xe5\xb0\x94\xe9\x80\x8a\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\': \'pears\', u\'\xe6\x96\xaf\xe7\x9a\xae\xe5\xb0\x94\xe6\x9b\xbc\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\': \'sperm\', u\'\xe5\x9f\xba\xe4\xba\x8e\xef\xbc\x8b\xef\xbc\x8d\xe7\xac\xa6\xe5\x8f\xb7\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\': \'sign\',\n                         u\'\xe7\xa7\xbb\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\x9b\xb8\xe5\x85\xb3\xe7\xb3\xbb\xe6\x95\xb0\': \'rolling\'},\n                value=\'pears\',\n                description=u\'\xe7\x9b\xb8\xe5\x85\xb3\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.corr_mode)\n\n        return widgets.VBox(widget_list,  # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_distances_ui(self):\n        """"""\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x88\x86\xe6\x9e\x90ui""""""\n\n        with self._init_widget_list_action(self.distances_analyse, u\'\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x88\x86\xe6\x9e\x90\', -1) as widget_list:\n            self.distances_mode = widgets.RadioButtons(\n                options={u\'\xe6\x9b\xbc\xe5\x93\x88\xe9\xa1\xbf\xe8\xb7\x9d\xe7\xa6\xbb(L1\xe8\x8c\x83\xe6\x95\xb0)\': 0, u\'\xe6\xac\xa7\xe5\xbc\x8f\xe8\xb7\x9d\xe7\xa6\xbb(L2\xe8\x8c\x83\xe6\x95\xb0)\': 1, u\'\xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\': 2},\n                value=0,\n                description=u\'\xe8\xb7\x9d\xe7\xa6\xbb\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.distances_mode)\n\n            scale_end_label = widgets.Label(u\'\xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\xe5\xa4\x84\xe7\x90\x86\', layout=self.label_layout)\n            self.scale_end = widgets.Checkbox(\n                value=True,\n                description=u\'\xe6\xa0\x87\xe5\x87\x86\xe5\x8c\x96\',\n                disabled=False\n            )\n            scale_end_box = widgets.VBox([scale_end_label, self.scale_end])\n            widget_list.append(scale_end_box)\n\n            similar_tip_label = widgets.Label(u\'\xe5\xaf\xb9\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9b\xb8\xe5\x85\xb3\xe6\x80\xa7\', layout=self.label_layout)\n            self.to_similar = widgets.Checkbox(\n                value=False,\n                description=u\'\xe8\xbd\xac\xe6\x8d\xa2\xe7\x9b\xb8\xe5\x85\xb3\',\n                disabled=False\n            )\n            to_similar_box = widgets.VBox([similar_tip_label, self.to_similar])\n            widget_list.append(to_similar_box)\n\n        return widgets.VBox(widget_list,  # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    @multi_fetch_symbol_df_analyse(\'p_change\')\n    def corr_analyse(self, cg_df, bt):\n        """"""\xe9\x80\x9a\xe8\xbf\x87corr_matrix\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90action""""""\n        display(corr_matrix(cg_df, similar_type=ECoreCorrType(self.corr_mode.value)))\n        cg_df.cumsum().plot()\n\n    @multi_fetch_symbol_df_analyse(\'p_change\')\n    def distances_analyse(self, cg_df, bt):\n        """"""\xe9\x80\x9a\xe8\xbf\x87l1, l2, \xe4\xbd\x99\xe5\xbc\xa6\xe8\xb7\x9d\xe7\xa6\xbb\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x88\x86\xe6\x9e\x90action""""""\n        if self.distances_mode.value == 0:\n            distance = manhattan_distance_matrix(cg_df, scale_end=self.scale_end.value,\n                                                 to_similar=self.to_similar.value)\n        elif self.distances_mode.value == 1:\n            distance = euclidean_distance_matrix(cg_df, scale_end=self.scale_end.value,\n                                                 to_similar=self.to_similar.value)\n        else:\n            distance = cosine_distance_matrix(cg_df, scale_end=self.scale_end.value,\n                                              to_similar=self.to_similar.value)\n        display(distance)\n        cg_df.cumsum().plot()\n\n    def coint_corr_market_analyse(self, bt):\n        """"""\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe5\x8d\x8f\xe6\x95\xb4\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90""""""\n        with self.data_mode_recover(self.coint_corr_data_mode.value):\n            ABuProgress.clear_output()\n            if not all_market_env_check():\n                return\n\n            symbol = self._choice_symbol_single(default=\'usAAPL\')\n\n            mk = \'{}_{}_sum_rank\'.format(code_to_symbol(symbol).market.value, ABuEnv._g_enable_example_env_ipython)\n            sum_rank = getattr(self, mk, None)\n            _, sum_rank = coint_similar(symbol, sum_rank=sum_rank, show=True)\n            # \xe7\xbc\x93\xe5\xad\x98sum_rank\n            setattr(self, mk, sum_rank)\n\n    def corr_relative_market_analyse(self, bt):\n        """"""\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\xaf\xb9\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90action""""""\n        with self.data_mode_recover(self.relative_corr_data_mode.value):\n            ABuProgress.clear_output()\n            if not all_market_env_check():\n                return\n\n            symbol1, symbol2 = self._choice_symbol_pair(default=[\'sh600036\', \'sh601766\'])\n            mk = \'{}_{}_sum_rank\'.format(code_to_symbol(symbol1).market.value, ABuEnv._g_enable_example_env_ipython)\n            sum_rank = getattr(self, mk, None)\n            _, sum_rank = calc_similar(symbol1, symbol2, sum_rank=sum_rank, show=True)\n            # \xe7\xbc\x93\xe5\xad\x98sum_rank\n            setattr(self, mk, sum_rank)\n\n    def corr_market_analyse(self, bt):\n        """"""\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\x88\x86\xe6\x9e\x90""""""\n        with self.data_mode_recover(self.corr_market_data_mode.value):\n            ABuProgress.clear_output()\n\n            if not all_market_env_check():\n                return\n\n            # \xe4\xb8\x8d\xe5\x81\x9a\xe5\x85\xa8\xe5\xb1\x80\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\x81\x9a\xe4\xb8\xba\xe5\x90\x8e\xe8\xbf\x98\xe9\x9c\x80\xe8\xa6\x81\xe6\x81\xa2\xe5\xa4\x8d\n            tmp_market = ABuEnv.g_market_target\n            ABuEnv.g_market_target = EMarketTargetType(self.corr_market.value)\n\n            symbol = self._choice_symbol_single(default=\'usAAPL\')\n            start, end, n_folds = self._start_end_n_fold()\n            corr_type = ECoreCorrType(self.corr_market_mode.value)\n            if start is not None and end is not None:\n                find_similar_with_se(symbol, start=start, end=end, corr_type=corr_type)\n            else:\n                find_similar_with_folds(symbol, n_folds=n_folds, corr_type=corr_type)\n\n            ABuEnv.g_market_target = tmp_market\n'"
abupy/WidgetBu/ABuWGSellFactor.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe5\x8d\x96\xe5\x87\xba\xe5\x9b\xa0\xe5\xad\x90\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe9\x80\x89\xe6\x8b\xa9\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport ipywidgets as widgets\n\nfrom ..FactorSellBu.ABuFactorAtrNStop import AbuFactorAtrNStop\nfrom ..FactorSellBu.ABuFactorCloseAtrNStop import AbuFactorCloseAtrNStop\nfrom ..FactorSellBu.ABuFactorPreAtrNStop import AbuFactorPreAtrNStop\nfrom ..FactorSellBu.ABuFactorSellBreak import AbuFactorSellBreak\nfrom ..FactorSellBu.ABuFactorSellDM import AbuDoubleMaSell\nfrom ..FactorSellBu.ABuFactorSellNDay import AbuFactorSellNDay\nfrom ..WidgetBu.ABuWGSFBase import WidgetFactorSellBase\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass SellDMWidget(WidgetFactorSellBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuDoubleMaSell\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuDoubleMaSell\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe7\xad\x96\xe7\x95\xa5\xe6\x98\xaf\xe9\x87\x8f\xe5\x8c\x96\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe7\xbb\x8f\xe5\x85\xb8\xe7\x9a\x84\xe7\xad\x96\xe7\x95\xa5\xe4\xb9\x8b\xe4\xb8\x80\xef\xbc\x8c\xe5\x85\xb6\xe5\xb1\x9e\xe4\xba\x8e\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb7\x9f\xe8\xb8\xaa\xe7\xad\x96\xe7\x95\xa5: \\n\'\n                  u\'1. \xe9\xa2\x84\xe8\xae\xbe\xe4\xb8\xa4\xe6\x9d\xa1\xe5\x9d\x87\xe7\xba\xbf\xef\xbc\x9a\xe5\xa6\x82\xe4\xb8\x80\xe4\xb8\xaama=5\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaama=60, 5\xe7\x9a\x84\xe5\x9d\x87\xe7\xba\xbf\xe8\xa2\xab\xe7\xa7\xb0\xe4\xbd\x9c\xe5\xbf\xab\xe7\xba\xbf\xef\xbc\x8c60\xe7\x9a\x84\xe5\x9d\x87\xe7\xba\xbf\xe8\xa2\xab\xe7\xa7\xb0\xe4\xbd\x9c\xe6\x85\xa2\xe7\xba\xbf\\n\'\n                  u\'2. \xe6\x8b\xa9\xe6\x97\xb6\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe4\xb8\xad\xe5\xbd\x93\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8b\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xef\xbc\x88ma5\xe4\xb8\x8b\xe7\xa9\xbfma60\xef\xbc\x89\xe7\xa7\xb0\xe4\xb8\xba\xe5\xbd\xa2\xe6\x88\x90\xe6\xad\xbb\xe5\x8f\x89\xe5\x8d\x96\xe7\x82\xb9\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe8\x82\xa1\xe7\xa5\xa8\\n\',\n            description=u\'\xe5\x8f\x8c\xe5\x9d\x87\xe7\xba\xbf\xe5\x8d\x96\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.slow_label = widgets.Label(u\'\xe9\xbb\x98\xe8\xae\xa4\xe6\x85\xa2\xe7\xba\xbfma=60:\xe5\xbd\x93\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8b\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xe7\xa7\xb0\xe4\xb8\xba\xe5\xbd\xa2\xe6\x88\x90\xe6\xad\xbb\xe5\x8f\x89\', layout=self.label_layout)\n        self.slow_int = widgets.IntSlider(\n            value=60,\n            min=10,\n            max=120,\n            step=1,\n            description=u\'\xe6\x85\xa2\xe7\xba\xbf\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.slow_box = widgets.VBox([self.slow_label, self.slow_int])\n\n        self.fast_label = widgets.Label(u\'\xe9\xbb\x98\xe8\xae\xa4\xe5\xbf\xab\xe7\xba\xbfma=5:\xe5\xbd\x93\xe5\xbf\xab\xe7\xba\xbf\xe4\xb8\x8b\xe7\xa9\xbf\xe6\x85\xa2\xe7\xba\xbf\xe7\xa7\xb0\xe4\xb8\xba\xe5\xbd\xa2\xe6\x88\x90\xe6\xad\xbb\xe5\x8f\x89\', layout=self.label_layout)\n        self.fast_int = widgets.IntSlider(\n            value=5,\n            min=1,\n            max=90,\n            step=1,\n            description=u\'\xe5\xbf\xab\xe7\xba\xbf\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.fast_box = widgets.VBox([self.fast_label, self.fast_int])\n        self.widget = widgets.VBox([self.description, self.slow_box, self.fast_box, self.add_box],\n                                   # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_sell_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuDoubleMaSell\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuDoubleMaSell, \'slow\': self.slow_int.value, \'fast\': self.fast_int.value}\n        factor_desc_key = u\'\xe5\x8a\xa8\xe6\x80\x81\xe5\x8f\x8c\xe5\x9d\x87\xe6\x85\xa2{}\xe5\xbf\xab{}\xe5\x8d\x96\xe5\x87\xba\'.format(self.slow_int.value, self.fast_int.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuDoubleMaSell""""""\n        return AbuDoubleMaSell\n\n\nclass SellAtrNStopWidget(WidgetFactorSellBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorAtrNStop\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorAtrNStop\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        self.description = widgets.Textarea(\n            value=u\'\xe6\xad\xa2\xe7\x9b\x88\xe7\xad\x96\xe7\x95\xa5 & \xe6\xad\xa2\xe6\x8d\x9f\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'1. \xe7\x9c\x9f\xe5\xae\x9e\xe6\xb3\xa2\xe5\xb9\x85atr\xe4\xbd\x9c\xe4\xb8\xba\xe6\x9c\x80\xe5\xa4\xa7\xe6\xad\xa2\xe7\x9b\x88\xe5\x92\x8c\xe6\x9c\x80\xe5\xa4\xa7\xe6\xad\xa2\xe6\x8d\x9f\xe7\x9a\x84\xe5\xb8\xb8\xe6\x95\xb0\xe5\x80\xbc\\n\'\n                  u\'2. \xe5\xbd\x93stop_loss_n \xe4\xb9\x98\xe4\xbb\xa5 \xe5\xbd\x93\xe6\x97\xa5atr > \xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc \xef\xbc\x8d \xe5\xbd\x93\xe6\x97\xa5\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc->\xe6\xad\xa2\xe6\x8d\x9f\xe5\x8d\x96\xe5\x87\xba\\n\'\n                  u\'3. \xe5\xbd\x93stop_win_n \xe4\xb9\x98\xe4\xbb\xa5 \xe5\xbd\x93\xe6\x97\xa5atr < \xe5\xbd\x93\xe6\x97\xa5\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc \xef\xbc\x8d\xe4\xb9\xb0\xe5\x85\xa5\xe4\xbb\xb7\xe6\xa0\xbc->\xe6\xad\xa2\xe7\x9b\x88\xe5\x8d\x96\xe5\x87\xba\',\n            description=u\'\xe6\xad\xa2\xe7\x9b\x88\xe6\xad\xa2\xe6\x8d\x9f\',\n            disabled=False,\n            layout=self.description_layout\n        )\n        self.stop_loss_n_label = widgets.Label(u\'stop_loss_n\xe4\xb9\x98\xe4\xbb\xa5\xe5\xbd\x93\xe6\x97\xa5atr\xe5\xa4\xa7\xe4\xba\x8e\xe4\xb9\xb0\xe4\xbb\xb7\xe5\x87\x8fclose->\xe6\xad\xa2\xe6\x8d\x9f\',\n                                               layout=self.label_layout)\n        self.stop_loss_n = widgets.FloatSlider(\n            value=1.0,\n            min=0.10,\n            max=10.0,\n            step=0.1,\n            description=\'stop_loss_n\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.1f\',\n        )\n        self.stop_loss_n_box = widgets.VBox([self.stop_loss_n_label, self.stop_loss_n])\n        self.stop_win_n_label = widgets.Label(u\'stop_win_n\xe4\xb9\x98\xe4\xbb\xa5\xe5\xbd\x93\xe6\x97\xa5atr\xe5\xb0\x8f\xe4\xba\x8eclose\xe5\x87\x8f\xe4\xb9\xb0\xe4\xbb\xb7->\xe6\xad\xa2\xe7\x9b\x88\',\n                                              layout=self.label_layout)\n        self.stop_win_n = widgets.FloatSlider(\n            value=3.0,\n            min=0.10,\n            max=10.0,\n            step=0.10,\n            description=\'stop_win_n\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.1f\',\n        )\n        self.stop_win_n_box = widgets.VBox([self.stop_win_n_label, self.stop_win_n])\n        self.widget = widgets.VBox([self.description, self.stop_loss_n_box,\n                                    self.stop_win_n_box, self.add_box],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_sell_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorAtrNStop\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorAtrNStop,\n                       \'stop_win_n\': self.stop_win_n.value,\n                       \'stop_loss_n\': self.stop_loss_n.value}\n        factor_desc_key = u\'n atr\xe6\xad\xa2\xe7\x9b\x88{}\xe6\xad\xa2\xe6\x8d\x9f{}\'.format(self.stop_win_n.value, self.stop_loss_n.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorAtrNStop""""""\n        return AbuFactorAtrNStop\n\n\nclass SellCloseAtrNWidget(WidgetFactorSellBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorCloseAtrNStop\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorCloseAtrNStop\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n        self.description = widgets.Textarea(\n            value=u\'\xe5\x88\xa9\xe6\xb6\xa6\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'1. \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbb\xb7\xe6\xa0\xbc - \xe4\xbb\x8a\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc > \xe4\xb8\x80\xe5\xae\x9a\xe6\x94\xb6\xe7\x9b\x8a\\n\'\n                  u\'2. \xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe6\x9c\x80\xe5\xa4\xa7\xe6\x94\xb6\xe7\x9b\x8a\xe4\xbb\xb7\xe6\xa0\xbc - \xe4\xbb\x8a\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc < close_atr_n * \xe5\xbd\x93\xe6\x97\xa5atr\\n\'\n                  u\'3. \xe5\xbd\x93\xe4\xb9\xb0\xe5\x85\xa5\xe6\x9c\x89\xe4\xb8\x80\xe5\xae\x9a\xe6\x94\xb6\xe7\x9b\x8a\xe5\x90\x8e\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8b\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6\xe8\xb6\x85\xe8\xbf\x87close_atr_n\xe4\xb9\x98\xe4\xbb\xa5\xe5\xbd\x93\xe6\x97\xa5atr->\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88\xe5\x8d\x96\xe5\x87\xba\',\n            description=u\'\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.close_atr_n_label = widgets.Label(u\'\xe6\x94\xb6\xe7\x9b\x8a\xe4\xb8\x8b\xe8\xb7\x8c\xe8\xb6\x85\xe8\xbf\x87close_atr_n\xe4\xb9\x98\xe4\xbb\xa5\xe5\xbd\x93\xe6\x97\xa5atr->\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88\',\n                                               layout=self.label_layout)\n        self.close_atr_n = widgets.FloatSlider(\n            value=1.5,\n            min=0.10,\n            max=10.0,\n            step=0.1,\n            description=\'close_atr_n\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.1f\',\n        )\n        self.close_atr_n_box = widgets.VBox([self.close_atr_n_label, self.close_atr_n])\n        self.widget = widgets.VBox([self.description, self.close_atr_n_box, self.add_box],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_sell_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorCloseAtrNStop\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorCloseAtrNStop,\n                       \'close_atr_n\': self.close_atr_n.value}\n        factor_desc_key = u\'\xe5\x88\xa9\xe6\xb6\xa6\xe4\xbf\x9d\xe6\x8a\xa4\xe6\xad\xa2\xe7\x9b\x88n={}\'.format(self.close_atr_n.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorCloseAtrNStop""""""\n        return AbuFactorCloseAtrNStop\n\n\nclass SellPreAtrNWidget(WidgetFactorSellBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorPreAtrNStop\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorPreAtrNStop\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n        self.description = widgets.Textarea(\n            value=u\'\xe9\xa3\x8e\xe9\x99\xa9\xe6\x8e\xa7\xe5\x88\xb6\xe6\xad\xa2\xe6\x8d\x9f\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'1. \xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x80\xe5\xa4\xa7\xe8\xb7\x8c\xe5\xb9\x85n\xe5\x80\x8datr\xe6\xad\xa2\xe6\x8d\x9f\\n\'\n                  u\'2. \xe5\xbd\x93\xe4\xbb\x8a\xe6\x97\xa5\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\x8b\xe8\xb7\x8c\xe5\xb9\x85\xe5\xba\xa6 > \xe5\xbd\x93\xe6\x97\xa5atr \xe4\xb9\x98\xe4\xbb\xa5 pre_atr_n\xef\xbc\x88\xe4\xb8\x8b\xe8\xb7\x8c\xe6\xad\xa2\xe6\x8d\x9f\xe5\x80\x8d\xe6\x95\xb0\xef\xbc\x89\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\',\n            description=u\'\xe9\xa3\x8e\xe9\x99\xa9\xe6\xad\xa2\xe6\x8d\x9f\',\n            disabled=False,\n            layout=self.description_layout\n        )\n\n        self.pre_atr_n_label = widgets.Label(u\'\xe5\xbd\x93\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xbb\xb7\xe6\xa0\xbc\xe5\xbc\x80\xe5\xa7\x8b\xe5\x89\xa7\xe7\x83\x88\xe4\xb8\x8b\xe8\xb7\x8c\xef\xbc\x8c\xe9\x87\x87\xe5\x8f\x96\xe6\x9e\x9c\xe6\x96\xad\xe5\xb9\xb3\xe4\xbb\x93\xe6\x8e\xaa\xe6\x96\xbd\',\n                                             layout=self.label_layout)\n        self.pre_atr_n = widgets.FloatSlider(\n            value=1.5,\n            min=0.10,\n            max=10.0,\n            step=0.1,\n            description=\'pre_atr_n\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'.1f\',\n        )\n        self.pre_atr_n_box = widgets.VBox([self.pre_atr_n_label, self.pre_atr_n])\n        self.widget = widgets.VBox([self.description, self.pre_atr_n_box, self.add_box],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_sell_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorPreAtrNStop\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorPreAtrNStop,\n                       \'pre_atr_n\': self.pre_atr_n.value}\n        factor_desc_key = u\'\xe9\xa3\x8e\xe9\x99\xa9\xe6\x8e\xa7\xe5\x88\xb6\xe6\xad\xa2\xe6\x8d\x9fn={}\'.format(self.pre_atr_n.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorPreAtrNStop""""""\n        return AbuFactorPreAtrNStop\n\n\nclass SellXDWidget(WidgetFactorSellBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorSellBreak\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorSellBreak\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n        self.description = widgets.Textarea(\n            value=u\'\xe6\xb5\xb7\xe9\xbe\x9f\xe5\x90\x91\xe4\xb8\x8b\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\xba\xe5\xbd\x93\xe5\xa4\xa9\xe6\x94\xb6\xe7\x9b\x98\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8e\xe4\xba\x8eN\xe5\xa4\xa9\xe5\x86\x85\xe7\x9a\x84\xe6\x9c\x80\xe4\xbd\x8e\xe4\xbb\xb7\xef\xbc\x8c\xe4\xbd\x9c\xe4\xb8\xba\xe5\x8d\x96\xe5\x87\xba\xe4\xbf\xa1\xe5\x8f\xb7\xef\xbc\x8c\xe5\x8d\x96\xe5\x87\xba\xe6\x93\x8d\xe4\xbd\x9c\',\n            description=u\'\xe6\xb5\xb7\xe9\xbe\x9f\xe5\x8d\x96\xe5\x87\xba\',\n            disabled=False,\n            layout=self.description_layout\n        )\n        self.xd_label = widgets.Label(u\'\xe7\xaa\x81\xe7\xa0\xb4\xe5\x91\xa8\xe6\x9c\x9f\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\xe6\xaf\x94\xe5\xa6\x8221\xef\xbc\x8c30\xef\xbc\x8c42\xe5\xa4\xa9....\xe7\xaa\x81\xe7\xa0\xb4\',\n                                      layout=self.label_layout)\n        self.xd = widgets.IntSlider(\n            value=10,\n            min=3,\n            max=120,\n            step=1,\n            description=u\'\xe5\x91\xa8\xe6\x9c\x9f\',\n            disabled=False,\n            orientation=\'horizontal\',\n            readout=True,\n            readout_format=\'d\'\n        )\n        self.xd_box = widgets.VBox([self.xd_label, self.xd])\n        self.widget = widgets.VBox([self.description, self.xd_box, self.add_box],  # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_sell_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorSellBreak\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorSellBreak, \'xd\': self.xd.value}\n        factor_desc_key = u\'\xe6\xb5\xb7\xe9\xbe\x9f{}\xe5\xa4\xa9\xe8\xb6\x8b\xe5\x8a\xbf\xe7\xaa\x81\xe7\xa0\xb4\xe5\x8d\x96\xe5\x87\xba\'.format(self.xd.value)\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorSellBreak""""""\n        return AbuFactorSellBreak\n\n\nclass SellNDWidget(WidgetFactorSellBase):\n    """"""\xe5\xaf\xb9\xe5\xba\x94AbuFactorSellNDay\xe7\xad\x96\xe7\x95\xa5widget""""""\n\n    def _init_widget(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xbaAbuFactorSellNDay\xe7\xad\x96\xe7\x95\xa5\xe5\x8f\x82\xe6\x95\xb0\xe7\x95\x8c\xe9\x9d\xa2""""""\n        self.description = widgets.Textarea(\n            value=u\'\xe6\x8c\x81\xe6\x9c\x89N\xe5\xa4\xa9\xe5\x90\x8e\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x9a\\n\'\n                  u\'\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe7\xae\xa1\xe4\xba\xa4\xe6\x98\x93\xe7\x8e\xb0\xe5\x9c\xa8\xe4\xbb\x80\xe4\xb9\x88\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8f\xaa\xe6\x8c\x81\xe6\x9c\x89N\xe5\xa4\xa9\\n\'\n                  u\'\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x8e\xe7\x89\xb9\xe5\xae\x9a\\\'\xe4\xb9\xb0\xe5\x85\xa5\xe7\xad\x96\xe7\x95\xa5\\\'\xe5\xbd\xa2\xe6\x88\x90\xe9\x85\x8d\xe5\x90\x88\\n\xef\xbc\x8c\'\n                  u\'\xe5\x8d\x95\xe7\x8b\xac\xe4\xbd\xbf\xe7\x94\xa8N\xe5\xa4\xa9\xe5\x8d\x96\xe5\x87\xba\xe7\xad\x96\xe7\x95\xa5\xe6\x84\x8f\xe4\xb9\x89\xe4\xb8\x8d\xe5\xa4\xa7\',\n            description=u\'N\xe5\xa4\xa9\xe5\x8d\x96\xe5\x87\xba\',\n            disabled=False,\n            layout=self.description_layout\n        )\n        sell_n_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5\xe5\x90\x8e\xe5\x8f\xaa\xe6\x8c\x81\xe6\x9c\x89\xe5\xa4\xa9\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41\', layout=self.label_layout)\n        self.sell_n = widgets.IntText(\n            value=1,\n            description=u\'N\xe5\xa4\xa9\',\n            disabled=False\n        )\n        sell_n_box = widgets.VBox([sell_n_label, self.sell_n])\n\n        is_sell_today_label = widgets.Label(u\'\xe8\xae\xbe\xe5\xae\x9a\xe4\xb9\xb0\xe5\x85\xa5n\xe5\xa4\xa9\xe5\x90\x8e\xef\xbc\x8c\xe5\xbd\x93\xe5\xa4\xa9\xe8\xbf\x98\xe6\x98\xaf\xe9\x9a\x94\xe5\xa4\xa9\xe5\x8d\x96\xe5\x87\xba\', layout=self.label_layout)\n        self.is_sell_today = widgets.Dropdown(\n            options={u\'N\xe5\xa4\xa9\xe5\x90\x8e\xe9\x9a\x94\xe5\xa4\xa9\xe5\x8d\x96\xe5\x87\xba\': False, u\'N\xe5\xa4\xa9\xe5\x90\x8e\xe5\xbd\x93\xe5\xa4\xa9\xe5\x8d\x96\xe5\x87\xba\': True},\n            value=False,\n            description=u\'\xe5\xbd\x93\xe5\xa4\xa9\xe9\x9a\x94\xe5\xa4\xa9:\',\n        )\n        is_sell_today_box = widgets.VBox([is_sell_today_label, self.is_sell_today])\n\n        self.widget = widgets.VBox([self.description, sell_n_box, is_sell_today_box, self.add_box],\n                                   # border=\'solid 1px\',\n                                   layout=self.widget_layout)\n\n    def make_sell_factor_unique(self):\n        """"""\xe5\xaf\xb9\xe5\xba\x94\xe6\x8c\x89\xe9\x92\xae\xe6\xb7\xbb\xe5\x8a\xa0AbuFactorSellNDay\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe7\xad\x96\xe7\x95\xa5\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1factor_dict\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x94\xaf\xe4\xb8\x80\xe7\xad\x96\xe7\x95\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2factor_desc_key""""""\n        factor_dict = {\'class\': AbuFactorSellNDay, \'sell_n\': self.sell_n.value,\n                       \'is_sell_today\': self.is_sell_today.value}\n        factor_desc_key = u\'\xe6\x8c\x81\xe6\x9c\x89{}\xe5\xa4\xa9{}\xe5\x8d\x96\xe5\x87\xba\'.format(self.sell_n.value, u\'\xe5\xbd\x93\xe5\xa4\xa9\' if self.is_sell_today.value else u\'\xe9\x9a\x94\xe5\xa4\xa9\')\n        return factor_dict, factor_desc_key\n\n    def delegate_class(self):\n        """"""\xe5\xad\x90\xe7\xb1\xbb\xe5\x9b\xa0\xe5\xad\x90\xe6\x89\x80\xe5\xa7\x94\xe6\x89\x98\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\x9b\xa0\xe5\xad\x90\xe7\xb1\xbbAbuFactorSellNDay""""""\n        return AbuFactorSellNDay\n'"
abupy/WidgetBu/ABuWGStockInfo.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\n\nimport ipywidgets as widgets\n\nfrom ..MarketBu.ABuSymbolStock import query_stock_info\nfrom ..MarketBu import ABuIndustries\nfrom ..MarketBu.ABuSymbol import code_to_symbol\nfrom ..UtilBu.ABuDTUtil import catch_error\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuFixes import six\nfrom ..UtilBu.ABuStrUtil import to_unicode\nfrom ..WidgetBu.ABuWGBase import WidgetBase, WidgetSearchBox\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetSearchStockInfo(WidgetBase):\n    def __init__(self):\n        self.stock_info = None\n        self.widget = WidgetSearchBox(self.on_search_result_click)()\n\n    def on_search_result_click(self, select):\n        """"""\xe9\x80\x89\xe4\xb8\xad\xe6\x90\x9c\xe7\xb4\xa2\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x82\xb9\xe5\x87\xbb""""""\n\n        st_symbol = [symbol.split(\':\')[1] if symbol.find(\':\') > 0\n                     else symbol for symbol in list(select[\'new\'])]\n        if len(st_symbol) == 0:\n            return\n\n        # result\xe6\x98\xaf\xe5\xa4\x9a\xe9\x80\x89\xe6\xa1\x86\xef\xbc\x8c\xe5\x80\xbc\xe6\x8b\xbf\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\n        symbol = st_symbol[-1]\n        if self.stock_info is not None and self.stock_info() is not None:\n            self.stock_info().close()\n        self.stock_info = WidgetStockInfo(symbol)\n        self.stock_info.display()\n\n\nclass WidgetStockInfo(WidgetBase):\n    """"""\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xe7\x95\x8c\xe9\x9d\xa2\xe7\xbb\x84\xe4\xbb\xb6\xe7\xb1\xbb""""""\n\n    def __init__(self, symbol_code):\n        """"""\n        \xe6\x9e\x84\xe5\xbb\xba\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\n        :param symbol_code: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2symbol eg usTSLA \xe6\x88\x96\xe8\x80\x85 Symbol\xe5\xaf\xb9\xe8\xb1\xa1\n        """"""\n        if isinstance(symbol_code, six.string_types):\n            symbol_code = code_to_symbol(symbol_code)\n\n        # \xe7\xb1\xbb\xe4\xb8\xad\xe7\x9a\x84symbol\xe5\xaf\xb9\xe8\xb1\xa1\xe4\xb8\xbaSymbol\xe7\xb1\xbb\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8c\x85\xe5\x90\xab\xe5\xb8\x82\xe5\x9c\xba\xef\xbc\x8c\xe5\xad\x90\xe5\xb8\x82\xe5\x9c\xba\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\xe7\x9a\x84\xe5\xaf\xb9\xe8\xb1\xa1\n        self.symbol = symbol_code\n        # \xe9\xbb\x98\xe8\xae\xa4\xe8\xa7\x84\xe5\x88\x99\xe6\x89\x80\xe6\x9c\x89\xe7\xbb\x84\xe4\xbb\xb6\xe6\x9c\x80\xe7\xbb\x88ui\xe6\x88\x90\xe5\x93\x81\xe4\xb8\xbawidget\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe6\x9c\xaa\xe4\xbd\xbf\xe7\x94\xa8\xe5\x9f\xba\xe7\xb1\xbb\xe6\x9d\xa5\xe7\xba\xa6\xe6\x9d\x9f\n        self.widget = self.stock_base_info(self.symbol)\n\n    def other_industries_symbol(self, stock_info):\n        """"""\xe4\xbb\x8e\xe8\x82\xa1\xe7\xa5\xa8\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x85\xb6\xe5\xaf\xb9\xe5\xba\x94\xe8\xa1\x8c\xe4\xb8\x9a\xe7\x9a\x84\xe5\x85\xb6\xe5\xae\x83\xe8\x82\xa1\xe7\xa5\xa8\xef\xbc\x8c\xe6\x9e\x84\xe5\xbb\xba\xe5\xbd\xa2\xe5\x8a\xbf\xe4\xb8\xba\xe6\x8c\x89\xe9\x92\xae\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe5\x8f\xaa\xe5\x8f\x96\xe5\x87\xba10\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8""""""\n        other_co_symbol = ABuIndustries.query_factorize_industry_symbol(\n            stock_info.industry_factorize.values[0], market=self.symbol.market)\n        other_co_bs = []\n        # TODO \xe5\x8a\xa0\xe8\xbd\xbd\xe6\x9b\xb4\xe5\xa4\x9a\xe6\x88\x96\xe8\x80\x85\xe5\x88\x86\xe6\xae\xb5\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x96\xb9\xe5\xbc\x8f\xef\xbc\x8c\xe6\x9a\x82\xe6\x97\xb6\xe5\x8f\xaa\xe5\x8f\x96\xe5\x87\xba10\xe4\xb8\xaa\xe7\x9b\xb8\xe5\x85\xb3\xe7\x9a\x84\xe8\x82\xa1\xe7\xa5\xa8\n        other_co_symbol = other_co_symbol[:10] if len(other_co_symbol) > 10 else other_co_symbol\n        for symbol in other_co_symbol:\n            # \xe9\x80\x9a\xe8\xbf\x87symbol\xe6\x9f\xa5\xe8\xaf\xa2\xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf\n            stock_info = query_stock_info(symbol)\n            if stock_info is None or stock_info.empty:\n                continue\n\n            # \xe6\x9e\x84\xe5\xbb\xbabutton\xe4\xb8\x8a\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\n            co_name_str = self._combine_stock_name(stock_info, only_name=True)\n            button = widgets.Button(description=co_name_str, disabled=False)\n            # \xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe5\xb1\x9e\xe6\x80\xa7symbol\xe5\x9c\xa8button\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x87\x8c\xef\xbc\x8con_button_clicked\xe4\xbd\xbf\xe7\x94\xa8\n            button.symbol = symbol\n\n            def on_button_clicked(bt):\n                # \xe5\x85\xb3\xe9\x97\xad\xe5\xbd\x93\xe5\x89\x8d\xe6\x95\xb4\xe4\xb8\xaa\xe5\xa4\xa7\xe7\x9a\x84widget\xe7\x95\x8c\xe9\x9d\xa2\xef\xbc\x8c\xe9\x87\x8d\xe6\x96\xb0\xe6\x9e\x84\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xa8\xe6\x96\xb0\xe7\x9a\x84\xe7\x95\x8c\xe9\x9d\xa2\n                self.widget.close()\n                symbol_code = code_to_symbol(bt.symbol)\n                self.symbol = symbol_code\n                # \xe9\x87\x8d\xe6\x96\xb0\xe8\xb5\x8b\xe4\xba\x88self.widget\xe5\x80\xbc\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\xb0\xe7\x9a\x84widget\n                self.widget = self.stock_base_info(self.symbol)\n                # \xe9\x87\x8d\xe6\x96\xb0\xe6\x98\xbe\xe7\xa4\xba\xe6\x96\xb0\xe7\x9a\x84\xe7\x95\x8c\xe9\x9d\xa2\n                self.display()\n\n            button.on_click(on_button_clicked)\n            other_co_bs.append(button)\n\n        # \xe5\xb0\x86symbol button\xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c2\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85\xe5\xad\x90symbol button\xe5\xba\x8f\xe5\x88\x97,\n        other_co_bs = self._sub_split(other_co_bs, len(other_co_bs) / 2)\n        # \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe7\xbb\x84\xe5\x8a\xa0\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe8\xa1\x8cbox\xe9\x87\x8c\xe9\x9d\xa2\n        tbs_boxs = [widgets.HBox(tbs) for tbs in other_co_bs]\n        self.other_co_box = widgets.VBox(tbs_boxs)\n        return self.other_co_box\n\n    def _sub_split(self, n_buttons, n_split):\n        """"""\xe5\xb0\x86symbol button\xef\xbc\x8c\xe6\xaf\x8fn_split\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85\xe5\xad\x90symbol button\xe5\xba\x8f\xe5\x88\x97""""""\n        sub_bt_cnt = int(len(n_buttons) / n_split)\n        if sub_bt_cnt == 0:\n            sub_bt_cnt = 1\n        group_adjacent = lambda a, k: zip(*([iter(a)] * k))\n        bts_group = list(group_adjacent(n_buttons, sub_bt_cnt))\n        residue_ind = -(len(n_buttons) % sub_bt_cnt) if sub_bt_cnt > 0 else 0\n        if residue_ind < 0:\n            bts_group.append(n_buttons[residue_ind:])\n        return bts_group\n\n    @catch_error(return_val=\'\')\n    def _combine_stock_name(self, stock_info, only_name=False):\n        """"""\xe9\x80\x9a\xe8\xbf\x87stock_info\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\xac\xe5\x8f\xb8\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9e\x84\xe5\xbb\xba\xe7\x9b\xb8\xe5\x85\xb3\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x90\x8d\xe7\xa7\xb0""""""\n        if only_name:\n            co_name_str = to_unicode(stock_info.co_name.values[0])\n        else:\n            # eg: \xe7\x89\xb9\xe6\x96\xaf\xe6\x8b\x89\xe7\x94\xb5\xe5\x8a\xa8\xe8\xbd\xa6\xef\xbc\x88US.NASDQ:TSLA\xef\xbc\x89\n            co_name_str = u\'{}({}.{}:{})\'.format(to_unicode(stock_info.co_name.values[0]),\n                                                 to_unicode(stock_info.market.values[0]),\n                                                 to_unicode(stock_info.exchange.values[0]),\n                                                 to_unicode(stock_info.symbol.values[0]))\n        return co_name_str\n\n    def stock_base_info(self, symbol_code):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe8\x82\xa1\xe7\xa5\xa8\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x9a\xe5\x85\xac\xe5\x8f\xb8\xe7\xae\x80\xe4\xbb\x8b\xef\xbc\x8c\xe4\xb8\x9a\xe5\x8a\xa1\xef\xbc\x8c\xe5\xb8\x82\xe5\x80\xbc\xef\xbc\x8c\xe5\xb8\x82\xe7\x9b\x88\xe7\x8e\x87\xef\xbc\x8c\xe5\xb8\x82\xe5\x87\x80\xe7\x8e\x87\xef\xbc\x8c\xe6\xaf\x8f\xe8\x82\xa1\xe5\x87\x80\xe8\xb5\x84\xe4\xba\xa7\xef\xbc\x8c\xe6\xb5\x81\xe9\x80\x9a\xe8\x82\xa1\xe6\x9c\xac\xef\xbc\x8c\xe6\x80\xbb\xe8\x82\xa1\xe6\x9c\xac\xef\xbc\x8c\xe6\x9c\xba\xe6\x9e\x84\xe6\x8c\x81\xe8\x82\xa1\xe7\xad\x89\xe4\xbf\xa1\xe6\x81\xaf""""""\n        if not ABuEnv.g_is_ipython:\n            logging.info(\'widget op only support ipython env!\')\n            return\n\n        stock_info = query_stock_info(symbol_code)\n        if stock_info is None or stock_info.empty:\n            logging.info(\'stock_info is None or stock_info.empty!\')\n            return\n\n        # \xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0\n        co_name_str = self._combine_stock_name(stock_info)\n        co_name = widgets.Text(\n            value=co_name_str,\n            description=u\'\xe5\x85\xac\xe5\x8f\xb8\xe5\x90\x8d\xe7\xa7\xb0:\',\n            disabled=False\n        )\n\n        # \xe5\x85\xac\xe5\x8f\xb8\xe7\xae\x80\xe4\xbb\x8b\n        co_intro = None\n        if \'co_intro\' in stock_info:\n            co_intro = widgets.Textarea(\n                value=to_unicode(stock_info.co_intro.values[0]),\n                description=u\'\xe5\x85\xac\xe5\x8f\xb8\xe7\xae\x80\xe4\xbb\x8b:\',\n                disabled=False,\n                layout=widgets.Layout(height=\'226px\')\n            )\n\n        co_site = None\n        if \'co_site\' in stock_info:\n            site = to_unicode(stock_info.co_site.values[0])\n            co_site_str = u\'<p><a target=""_blank"" a href=""{}"">\xe5\x85\xac\xe5\x8f\xb8\xe7\xbd\x91\xe7\xab\x99: {}</a></p>\'.format(\n                site, site)\n            co_site = widgets.HTML(value=co_site_str)\n\n        pv_dict = {\n            \'pe_s_d\': u""\xe5\xb8\x82\xe7\x9b\x88\xe7\x8e\x87(\xe9\x9d\x99)/(\xe5\x8a\xa8):"",\n            \'pb_d\': u""\xe5\xb8\x82\xe5\x87\x80\xe7\x8e\x87(\xe5\x8a\xa8):"",\n            \'pb_MRQ\': u""\xe5\xb8\x82\xe5\x87\x80\xe7\x8e\x87MRQ:"",\n            \'ps_d\': u""\xe5\xb8\x82\xe9\x94\x80\xe7\x8e\x87(\xe5\x8a\xa8):"",\n            \'ps\': u""\xe5\xb8\x82\xe9\x94\x80\xe7\x8e\x87:"",\n            \'pe_s\': u""\xe5\xb8\x82\xe7\x9b\x88\xe7\x8e\x87(\xe9\x9d\x99):""}\n\n        p_widget_tab = self.make_sub_tab_widget(stock_info, pv_dict)\n\n        asset_dict = {\n            \'mv\': u""\xe6\x80\xbb\xe5\xb8\x82\xe5\x80\xbc:"",\n            \'asset\': u""\xe6\xaf\x8f\xe8\x82\xa1\xe5\x87\x80\xe8\xb5\x84\xe4\xba\xa7\xef\xbc\x9a"",\n            \'cc\': u""\xe6\xb5\x81\xe9\x80\x9a\xe8\x82\xa1\xe6\x9c\xac\xef\xbc\x9a""\n        }\n\n        asset_widget_tab = self.make_sub_tab_widget(stock_info, asset_dict)\n\n        equity_dict = {\n            \'equity\': u""\xe6\x80\xbb\xe8\x82\xa1\xe6\x9c\xac:"",\n            \'hk_equity\': u""\xe6\xb8\xaf\xe8\x82\xa1\xe8\x82\xa1\xe6\x9c\xac:"",\n            \'oo\': u""\xe6\x9c\xba\xe6\x9e\x84\xe6\x8c\x81\xe8\x82\xa1:""\n        }\n        equity_widget_tab = self.make_sub_tab_widget(stock_info, equity_dict)\n        accordion = widgets.Accordion(children=[self.other_industries_symbol(stock_info)])\n        industry_str = to_unicode(stock_info.industry.values[0])\n        industry = u\'\xe8\xa1\x8c\xe4\xb8\x9a\xef\xbc\x9a{}\'.format(industry_str)\n        accordion.set_title(0, industry)\n        base_info_widgets = list(filter(lambda widget: widget is not None,\n                                        [co_name, co_intro, co_site, p_widget_tab, asset_widget_tab, equity_widget_tab,\n                                         accordion]))\n        base_info = widgets.VBox(base_info_widgets)\n        return base_info\n\n    def make_sub_tab_widget(self, stock_info, sub_dict):\n        """"""\xe7\x94\xa8\xe4\xba\x8e\xe6\x9e\x84\xe5\xbb\xba\xef\xbc\x9a\xe8\x82\xa1\xe6\x9c\xac/\xe6\xb8\xaf\xe8\x82\xa1\xe8\x82\xa1\xe6\x9c\xac/\xe6\x9c\xba\xe6\x9e\x84\xe6\x8c\x81\xe8\x82\xa1\xe5\xad\x90tab\xef\xbc\x8c\xe5\xb8\x82\xe7\x9b\x88\xe7\x8e\x87/\xe5\xb8\x82\xe5\x87\x80\xe7\x8e\x87/\xe5\xb8\x82\xe9\x94\x80\xe7\x8e\x87\xe5\xad\x90tab, \xe6\x80\xbb\xe5\xb8\x82\xe5\x80\xbc/\xe6\xaf\x8f\xe8\x82\xa1\xe5\x87\x80\xe8\xb5\x84\xe4\xba\xa7/\xe6\xb5\x81\xe9\x80\x9a\xe8\x82\xa1\xe6\x9c\xac\xe5\xad\x90tab""""""\n        sub_widget_array = []\n        sub_widget_table_name = []\n        for sc in sub_dict:\n            if sc in stock_info.columns:\n                sub_name = to_unicode(sub_dict[sc])\n                sub_widget = widgets.Text(\n                    value=to_unicode(stock_info[sc].values[0]),\n                    description=sub_name,\n                    disabled=False\n                )\n                sub_widget_array.append(sub_widget)\n                sub_widget_table_name.append(sub_name)\n\n        sub_widget_tab = widgets.Tab()\n        sub_widget_tab.children = sub_widget_array\n        for ind, name in enumerate(sub_widget_table_name):\n            sub_widget_tab.set_title(ind, name)\n        return sub_widget_tab\n'"
abupy/WidgetBu/ABuWGTLTool.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x87\x8f\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\nfrom contextlib import contextmanager\n\nfrom IPython.display import display\nimport ipywidgets as widgets\n\nfrom ..TLineBu.ABuTL import EShiftDistanceHow, ESkeletonHow\nfrom ..TLineBu.ABuTLExecute import calc_pair_speed\nfrom ..TLineBu.ABuTLJump import calc_jump, calc_jump_line, calc_jump_line_weight\nfrom ..TLineBu.ABuTLGolden import calc_golden\nfrom ..UtilBu import ABuProgress\nfrom ..WidgetBu.ABuWGToolBase import WidgetToolBase, single_fetch_symbol_analyse\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyUnusedLocal\nclass WidgetTLTool(WidgetToolBase):\n    """"""\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    @contextmanager\n    def _init_tip_label_with_step_x(self, callback_analyse, analyse_name, with_step_x=True):\n        """"""step_x\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x9a\xef\xbc\x8c\xe7\xbb\x9f\xe4\xb8\x80\xe6\x9e\x84\xe5\xbb\xba\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe6\x8e\xa5\xe6\x94\xb6\xe8\xb5\x8b\xe4\xba\x88\xe5\x90\x8d\xe5\xad\x97""""""\n        if not callable(callback_analyse):\n            raise TabError(\'callback_analyse must callable!\')\n\n        tip_label = widgets.Label(self.map_tip_target_label(n_target=1), layout=self.label_layout)\n        widget_list = [tip_label]\n        step_x = None\n        if with_step_x:\n            step_x_label = widgets.Label(u\'\xe6\x97\xb6\xe9\x97\xb4\xe6\xad\xa5\xe9\x95\xbf\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\x82\xe6\x95\xb0step_x\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa41.0\',\n                                         layout=self.label_layout)\n            step_x = widgets.FloatSlider(\n                value=1.0,\n                min=0.1,\n                max=2.6,\n                step=0.1,\n                description=u\'\xe6\xad\xa5\xe9\x95\xbf\',\n                disabled=False,\n                orientation=\'horizontal\',\n                readout=True,\n                readout_format=\'.1f\',\n            )\n            # \xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x99\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84ui\xef\xbc\x8c\xe5\x91\xbd\xe5\x90\x8d\xe7\x8b\xac\xe6\x9c\x89\xe7\x9a\x84step_x\n        yield widget_list, step_x\n\n        if with_step_x:\n            # noinspection PyUnboundLocalVariable\n            step_x_box = widgets.VBox([step_x_label, step_x])\n            # noinspection PyTypeChecker\n            widget_list.append(step_x_box)\n\n        analyse_bt = widgets.Button(description=analyse_name, layout=widgets.Layout(width=\'98%\'),\n                                    button_style=\'info\')\n        analyse_bt.on_click(callback_analyse)\n        widget_list.append(analyse_bt)\n\n    def init_rs_ui(self):\n        """"""\xe9\x98\xbb\xe5\x8a\x9b\xe6\x94\xaf\xe6\x92\x91\xe5\x88\x86\xe6\x9e\x90ui""""""\n\n        with self._init_tip_label_with_step_x(\n                self._rs_line_analyse, u\'\xe6\x94\xaf\xe6\x92\x91\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe5\x88\x86\xe6\x9e\x90\', with_step_x=False) as (widget_list, _):\n            self.rs_mode = widgets.RadioButtons(\n                options={u\'\xe5\x8f\xaa\xe5\x88\x86\xe6\x9e\x90\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\': 0, u\'\xe5\x8f\xaa\xe5\x88\x86\xe6\x9e\x90\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\': 1, u\'\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\xe5\x92\x8c\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\': 2},\n                value=0,\n                description=u\'\xe5\x88\x86\xe6\x9e\x90\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.rs_mode)\n            self.only_last = widgets.RadioButtons(\n                options={u\'\xe6\x9c\x80\xe8\xbf\x91\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\': True, u\'\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\': False},\n                value=True,\n                description=u\'\xe6\x9c\x80\xe8\xbf\x91\xe7\x9a\x84\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe5\x92\x8c\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\',\n                disabled=False\n            )\n            widget_list.append(self.only_last)\n        return widgets.VBox(widget_list,  # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_jump_ui(self):\n        """"""\xe8\xb7\xb3\xe7\xa9\xba\xe5\x88\x86\xe6\x9e\x90ui""""""\n\n        with self._init_tip_label_with_step_x(\n                self._jump_line_analyse, u\'\xe8\xb7\xb3\xe7\xa9\xba\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\', with_step_x=False) as (widget_list, _):\n            self.jump_mode = widgets.RadioButtons(\n                options={u\'\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\': 0, u\'\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xe7\xad\x9b\xe9\x80\x89\': 1, u\'\xe7\xbc\xba\xe5\x8f\xa3\xe6\x97\xb6\xe9\x97\xb4\xe5\x8a\xa0\xe6\x9d\x83\xe7\xad\x9b\xe9\x80\x89\': 2},\n                value=0,\n                description=u\'\xe5\x88\x86\xe6\x9e\x90\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.jump_mode)\n\n            power_threshold_label = widgets.Label(u\'\xe7\xbc\xba\xe5\x8f\xa3\xe8\x83\xbd\xe9\x87\x8f\xe9\x98\x80\xe5\x80\xbc\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa42.0(\xe5\x8f\xaa\xe5\xaf\xb9\xe7\xbc\xba\xe5\x8f\xa3\xe7\xad\x9b\xe9\x80\x89\xe7\x94\x9f\xe6\x95\x88)\',\n                                                  layout=self.label_layout)\n            self.power_threshold = widgets.FloatSlider(\n                value=2.0,\n                min=1.5,\n                max=3.5,\n                step=0.1,\n                description=u\'\xe8\x83\xbd\xe9\x87\x8f\',\n                disabled=False,\n                orientation=\'horizontal\',\n                readout=True,\n                readout_format=\'.1f\',\n            )\n            power_threshold_box = widgets.VBox([power_threshold_label, self.power_threshold])\n            widget_list.append(power_threshold_box)\n\n            jump_diff_factor_label = widgets.Label(u\'\xe8\xae\xbe\xe7\xbd\xae\xe8\xb0\x83\xe8\x8a\x82\xe8\xb7\xb3\xe7\xa9\xba\xe9\x98\x80\xe5\x80\xbc\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\',\n                                                   layout=self.label_layout)\n            self.jump_diff_factor = widgets.FloatSlider(\n                value=1.0,\n                min=0.1,\n                max=5.0,\n                step=0.1,\n                description=u\'\xe9\x98\x80\xe5\x80\xbc\',\n                disabled=False,\n                orientation=\'horizontal\',\n                readout=True,\n                readout_format=\'.1f\',\n            )\n            jump_diff_factor_box = widgets.VBox([jump_diff_factor_label, self.jump_diff_factor])\n            widget_list.append(jump_diff_factor_box)\n\n        return widgets.VBox(widget_list,\n                            # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_shift_distance_ui(self):\n        """"""\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94ui""""""\n\n        with self._init_tip_label_with_step_x(\n                self._shift_distance_analyse, u\'\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe5\x88\x86\xe6\x9e\x90\') as (widget_list, step_x):\n            self.shift_distance_step_x = step_x\n            self.shift_distance_mode = widgets.RadioButtons(\n                options={u\'\xe5\xba\x8f\xe5\x88\x97\xe6\x9c\x80\xe5\x90\x8e\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe5\x81\x9a\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe5\x9f\xba\xe7\xa1\x80\': 0, u\'\xe6\x9e\x81\xe9\x99\x90\xe5\x80\xbc\xe5\x81\x9a\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x9f\xba\xe7\xa1\x80\': 1,\n                         u\'\xe5\xba\x8f\xe5\x88\x97sum+\xe6\x9e\x81\xe5\x80\xbc\xe5\x81\x9a\xe4\xb8\xba\xe8\xb7\xaf\xe7\xa8\x8b\xe8\xae\xa1\xe7\xae\x97\xe5\x9f\xba\xe7\xa1\x80\': 2},\n                value=0,\n                description=u\'\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.shift_distance_mode)\n        return widgets.VBox(widget_list,\n                            # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_regress_ui(self):\n        """"""\xe7\xba\xbf\xe6\x80\xa7\xe6\x8b\x9f\xe5\x90\x88ui""""""\n\n        with self._init_tip_label_with_step_x(\n                self._regress_analyse, u\'\xe7\xba\xbf\xe6\x80\xa7\xe6\x8b\x9f\xe5\x90\x88\xe5\x88\x86\xe6\x9e\x90\') as (widget_list, step_x):\n            self.regress_step_x = step_x\n            self.regress_mode_description = widgets.Textarea(\n                value=u\'1. \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe5\xb0\x91\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x9a\\n\'\n                      u\'\xe6\xa3\x80\xe6\xb5\x8b\xe8\x87\xb3\xe5\xb0\x91\xe5\xa4\x9a\xe5\xb0\x91\xe6\xac\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\xef\xbc\x8c\'\n                      u\'\xe9\x80\x9a\xe8\xbf\x87\xe5\xba\xa6\xe9\x87\x8f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe5\x9d\x87\xe7\xba\xbfy_roll_mean\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe5\x92\x8c\xe5\x8e\x9f\xe5\xa7\x8by\xe5\x80\xbc\xe5\x92\x8c\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbfy_fit\xe7\x9a\x84\xe8\xb7\x9d\xe7\xa6\xbb\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8metrics_rmse\\n\'\n                      u\'2. \xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe4\xbc\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x9a\\n\'\n                      u\'\xe5\xaf\xbb\xe6\x89\xbe\xe5\xa4\x9a\xe5\xb0\x91\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\x8b\x9f\xe5\x90\x88\xe5\x9b\x9e\xe5\xbd\x92\xe7\x9a\x84\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xae\x8c\xe7\xbe\x8e\xe7\x9a\x84\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe6\x9b\xb2\xe7\xba\xbfy\xe7\x9a\x84\xe8\xb5\xb0\xe5\x8a\xbf\\n\'\n                      u\'3. \xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x9a\\n\'\n                      u\'\xe9\x80\x9a\xe8\xbf\x87\xe6\xad\xa5\xe9\x95\xbf\xe5\x8f\x82\xe6\x95\xb0\xe5\x9c\xa8\xe5\xad\x90\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xb5\xb0\xe5\x8a\xbf\xe6\x8b\x9f\xe5\x90\x88\xef\xbc\x8c\xe5\xbd\xa2\xe6\x88\x90\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xe5\x8f\x8a\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x89\xe6\x9d\xa1\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\xef\xbc\x8c\xe7\xbb\x84\xe6\x88\x90\xe6\x8b\x9f\xe5\x90\x88\xe9\x80\x9a\xe9\x81\x93\',\n                disabled=False,\n                layout=self.description_layout\n            )\n            widget_list.append(self.regress_mode_description)\n            self.regress_mode = widgets.RadioButtons(\n                options={u\'\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe5\xb0\x91\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\': 0, u\'\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x9c\x80\xe4\xbc\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\xac\xa1\xe6\x95\xb0\': 1,\n                         u\'\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe7\xba\xbf\xe6\x8b\x9f\xe5\x90\x88\xe6\x9b\xb2\xe7\xba\xbf\': 2},\n                value=0,\n                description=u\'\xe6\x8b\x9f\xe5\x90\x88\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.regress_mode)\n        return widgets.VBox(widget_list,\n                            # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_golden_line_ui(self):\n        """"""\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2ui""""""\n        with self._init_tip_label_with_step_x(\n                self._golden_line_analyse, u\'\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x88\x86\xe6\x9e\x90\', with_step_x=False) as (widget_list, _):\n            self.golden_line_mode = widgets.RadioButtons(\n                options={u\'\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe9\x9a\x94\xe5\xb8\xa6\': 0, u\'\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe9\x9a\x94\xe5\xb8\xa6\xef\xbc\x8b\xe5\x85\xb3\xe9\x94\xae\xe6\xaf\x94\xe4\xbe\x8b\': 1,\n                         u\'\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x85\xb3\xe9\x94\xae\xe6\xaf\x94\xe4\xbe\x8b\': 2},\n                value=0,\n                description=u\'\xe5\x88\x86\xe9\x9a\x94\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.golden_line_mode)\n            pt_tip_label = widgets.Label(u\'\xe6\xaf\x94\xe4\xbe\x8b\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\x85\xe5\xaf\xb9\\\'\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x85\xb3\xe9\x94\xae\xe6\xaf\x94\xe4\xbe\x8b\\\'\xe7\x94\x9f\xe6\x95\x88\', layout=self.label_layout)\n            self.pt_range = widgets.FloatRangeSlider(\n                value=[0.2, 0.8],\n                min=0.1,\n                max=0.9,\n                step=0.1,\n                description=u\'\xe6\xaf\x94\xe4\xbe\x8b\xe8\xae\xbe\xe7\xbd\xae:\',\n                disabled=False,\n                continuous_update=False,\n                orientation=\'horizontal\',\n                readout=True,\n                readout_format=\'.1f\',\n            )\n            pt_box = widgets.VBox([pt_tip_label, self.pt_range])\n            widget_list.append(pt_box)\n\n        return widgets.VBox(widget_list,\n                            # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_skeleton_ui(self):\n        """"""\xe4\xbb\xb7\xe6\xa0\xbc\xe9\xaa\xa8\xe6\x9e\xb6ui""""""\n        with self._init_tip_label_with_step_x(\n                self._skeleton_analyse, u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe9\xaa\xa8\xe6\x9e\xb6\xe5\x88\x86\xe6\x9e\x90\') as (widget_list, step_x):\n            self.skeleton_step_x = step_x\n            self.skeleton_mode = widgets.RadioButtons(\n                options={u\'\xe9\xaa\xa8\xe6\x9e\xb6\xe9\x80\x9a\xe9\x81\x93\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 200, u\'\xe4\xb8\x89\xe8\xa7\x92\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 100, u\'\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 0,\n                         u\'\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 1, u\'\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 2, u\'\xe4\xb8\xad\xe4\xbd\x8d\xe6\x95\xb0\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 3,\n                         u\'\xe6\x9c\x80\xe5\x90\x8e\xe5\x85\x83\xe7\xb4\xa0\xe9\xaa\xa8\xe6\x9e\xb6\xe7\x82\xb9\xe4\xbd\x8d\xe5\x80\xbc\': 4},\n                value=200,\n                description=u\'\xe9\xaa\xa8\xe6\x9e\xb6\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.skeleton_mode)\n        return widgets.VBox(widget_list,\n                            # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def init_pair_speed_ui(self):\n        """"""\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe5\x88\x86\xe6\x9e\x90ui""""""\n        with self._init_tip_label_with_step_x(\n                self._pair_speed_analyse, u\'\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe5\x88\x86\xe6\x9e\x90\', with_step_x=False) as (widget_list, _):\n            self.pair_speed_mode = widgets.RadioButtons(\n                options={u\'\xe5\xaf\xb9\xe6\xaf\x94\xe6\x94\xb6\xe7\x9b\x98\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\': \'close\', u\'\xe5\xaf\xb9\xe6\xaf\x94\xe6\xb6\xa8\xe8\xb7\x8c\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\': \'p_change\',\n                         u\'\xe5\xaf\xb9\xe6\xaf\x94\xe6\x9c\x80\xe9\xab\x98\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\': \'high\', u\'\xe5\xaf\xb9\xe6\xaf\x94\xe6\x9c\x80\xe4\xbd\x8e\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\': \'low\'},\n                value=\'close\',\n                description=u\'\xe5\xaf\xb9\xe6\xaf\x94\xe6\xa8\xa1\xe5\xbc\x8f:\',\n                disabled=False\n            )\n            widget_list.append(self.pair_speed_mode)\n            resample_tip_label = widgets.Label(u\'\xe8\xb6\x8b\xe5\x8a\xbf\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe8\xae\xa1\xe7\xae\x97\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\xe5\x91\xa8\xe6\x9c\x9f\', layout=self.label_layout)\n            self.pair_resample = widgets.IntSlider(\n                value=5,\n                min=3,\n                max=10,\n                step=1,\n                description=u\'\xe9\x87\x8d\xe9\x87\x87\xe6\xa0\xb7\',\n                disabled=False,\n                orientation=\'horizontal\',\n                readout=True,\n                readout_format=\'d\'\n            )\n            resample_box = widgets.VBox([resample_tip_label, self.pair_resample])\n            widget_list.append(resample_box)\n        return widgets.VBox(widget_list,\n                            # border=\'solid 1px\',\n                            layout=self.tool_layout)\n\n    def __init__(self, tool_set):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe7\x95\x8c\xe9\x9d\xa2""""""\n        super(WidgetTLTool, self).__init__(tool_set)\n\n        rs_box = self.init_rs_ui()\n        jump_box = self.init_jump_ui()\n        pair_speed = self.init_pair_speed_ui()\n        shift_distance = self.init_shift_distance_ui()\n        regress = self.init_regress_ui()\n        golden = self.init_golden_line_ui()\n        skeleton = self.init_skeleton_ui()\n\n        children = [rs_box, jump_box, pair_speed, shift_distance, regress, golden, skeleton]\n        if self.scroll_factor_box:\n            tl_box = widgets.Box(children,\n                                 layout=self.scroll_widget_layout)\n            # \xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe5\xa5\x97\xe4\xb8\x80\xe5\xb1\x82VBox\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6\xe5\xa4\x96\xe9\x83\xa8\xe7\x9a\x84tab\xe6\x98\xbe\xe7\xa4\xba\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98\n            self.widget = widgets.VBox([tl_box])\n        else:\n            # \xe4\xb8\x80\xe8\xa1\x8c\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xa4\xe4\xb8\xaa\xef\xbc\x8c2\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85sub_children_group\xe5\xba\x8f\xe5\x88\x97,\n            sub_children_group = self._sub_children(children, len(children) / self._sub_children_group_cnt)\n            sub_children_box = [widgets.HBox(sub_children) for sub_children in sub_children_group]\n            self.widget = widgets.VBox(sub_children_box)\n\n    def _pair_speed_analyse(self, bt):\n        """"""\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe5\x88\x86\xe6\x9e\x90action""""""\n        ABuProgress.clear_output()\n        symbol1, symbol2 = self._choice_symbol_pair()\n        start, end, n_folds = self._start_end_n_fold()\n        speed_key = self.pair_speed_mode.value\n        resample = self.pair_resample.value\n        symbol1_speed, symbol2_speed, corr = calc_pair_speed(symbol1, symbol2, resample=resample, speed_key=speed_key,\n                                                             start=start, end=end, n_folds=n_folds, show=True)\n        if symbol1_speed is None:\n            self.info_change_set_mode(\'{} and {}\'.format(symbol1, symbol2))\n        else:\n            logging.info(u\'{}\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6{}\'.format(symbol1, symbol1_speed))\n            logging.info(u\'{}\xe8\xb6\x8b\xe5\x8a\xbf\xe5\x8f\x98\xe5\x8c\x96\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6{}\'.format(symbol2, symbol2_speed))\n            logging.info(u\'{}\xe4\xb8\x8e{}\xe7\x9b\xb8\xe5\x85\xb3\xe5\xba\xa6{}\'.format(symbol2, symbol2, corr))\n            logging.info(u\'{}\xe4\xb8\x8e{}\xe8\xb6\x8b\xe5\x8a\xbf\xe7\x9b\xb8\xe5\x85\xb3\xe6\x95\x8f\xe6\x84\x9f\xe9\x80\x9f\xe5\xba\xa6\xe5\xb7\xae{}\'.format(symbol1, symbol2, (symbol1_speed - symbol2_speed) * corr))\n\n    @single_fetch_symbol_analyse\n    def _jump_line_analyse(self, kl, kl_tl, bt):\n        """"""\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xe5\x88\x86\xe6\x9e\x90action""""""\n        # print(\'\xe6\xad\xa3\xe5\x9c\xa8\xe5\x88\x86\xe6\x9e\x90\xe8\xb7\xb3\xe7\xa9\xba\xe7\xbc\xba\xe5\x8f\xa3\xef\xbc\x8c\xe8\xaf\xb7\xe7\xa8\x8d\xe5\x90\x8e...\')\n        if self.jump_mode.value == 0:\n            jumps = calc_jump(kl, jump_diff_factor=self.jump_diff_factor.value)\n        elif self.jump_mode.value == 1:\n            jumps = calc_jump_line(kl, power_threshold=self.power_threshold.value,\n                                   jump_diff_factor=self.jump_diff_factor.value)\n        else:\n            # \xe6\x9a\x82\xe6\x97\xb6\xe5\x9b\xba\xe5\xae\x9a\xe5\x8a\xa0\xe6\x9d\x83\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xba(0.5, 0.5)\n            jumps = calc_jump_line_weight(kl, sw=(0.5, 0.5), power_threshold=self.power_threshold.value,\n                                          jump_diff_factor=self.jump_diff_factor.value)\n        display(jumps)\n\n    @single_fetch_symbol_analyse\n    def _rs_line_analyse(self, kl, kl_tl, bt):\n        """"""\xe6\x94\xaf\xe6\x92\x91\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe5\x88\x86\xe6\x9e\x90action""""""\n        if self.rs_mode.value == 0:\n            # \xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\n            kl_tl.show_support_trend(only_last=self.only_last.value, show=True, show_step=False)\n        elif self.rs_mode.value == 1:\n            # \xe5\x8f\xaa\xe7\xbb\x98\xe5\x88\xb6\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\n            kl_tl.show_resistance_trend(only_last=self.only_last.value, show=True, show_step=False)\n        else:\n            # \xe6\x94\xaf\xe6\x92\x91\xe7\xba\xbf\xe5\x92\x8c\xe9\x98\xbb\xe5\x8a\x9b\xe7\xba\xbf\xe9\x83\xbd\xe7\xbb\x98\xe5\x88\xb6\n            kl_tl.show_support_resistance_trend(only_last=self.only_last.value, show=True, show_step=False)\n\n    @single_fetch_symbol_analyse\n    def _shift_distance_analyse(self, kl, kl_tl, bt):\n        """"""\xe4\xbd\x8d\xe7\xa7\xbb\xe8\xb7\xaf\xe7\xa8\x8b\xe6\xaf\x94\xe5\x88\x86\xe6\x9e\x90action""""""\n        kl_tl.show_shift_distance(how=EShiftDistanceHow(self.shift_distance_mode.value),\n                                  step_x=self.shift_distance_step_x.value)\n\n    @single_fetch_symbol_analyse\n    def _regress_analyse(self, kl, kl_tl, bt):\n        """"""\xe8\xb5\xb0\xe5\x8a\xbf\xe7\xba\xbf\xe6\x80\xa7\xe5\x9b\x9e\xe5\xbd\x92\xe5\x88\x86\xe6\x9e\x90action""""""\n        if self.regress_mode.value == 0:\n            kl_tl.show_least_valid_poly()\n        elif self.regress_mode.value == 1:\n            kl_tl.show_best_poly()\n        else:\n            kl_tl.show_regress_trend_channel(step_x=self.regress_step_x.value)\n\n    @single_fetch_symbol_analyse\n    def _golden_line_analyse(self, kl, kl_tl, bt):\n        """"""\xe8\xb5\xb0\xe5\x8a\xbf\xe9\xbb\x84\xe9\x87\x91\xe5\x88\x86\xe5\x89\xb2\xe5\x88\x86\xe6\x9e\x90action""""""\n        if self.golden_line_mode.value == 0:\n            kl_tl.show_golden()\n        elif self.golden_line_mode.value == 1:\n            calc_golden(kl)\n        else:\n            kl_tl.show_percents(self.pt_range.value)\n\n    @single_fetch_symbol_analyse\n    def _skeleton_analyse(self, kl, kl_tl, bt):\n        """"""\xe8\xb5\xb0\xe5\x8a\xbf\xe9\xaa\xa8\xe6\x9e\xb6\xe5\x88\x86\xe6\x9e\x90action""""""\n        step_x = self.skeleton_step_x.value\n        skeleton_mode = self.skeleton_mode.value\n        if skeleton_mode == 200:\n            kl_tl.show_skeleton_channel(step_x=step_x)\n        else:\n            kl_tl.show_skeleton(how=ESkeletonHow(skeleton_mode), step_x=step_x)\n'"
abupy/WidgetBu/ABuWGToolBase.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe9\x87\x8f\xe5\x8c\x96\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe6\xa8\xa1\xe5\x9d\x97""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport logging\nimport functools\nfrom contextlib import contextmanager\n\nimport ipywidgets as widgets\nimport pandas as pd\n\nfrom ..CoreBu import ABuEnv\nfrom ..WidgetBu.ABuWGBase import WidgetBase, show_msg_func\nfrom ..WidgetBu.ABuWGBSymbol import WidgetSymbolChoice\nfrom ..WidgetBu.ABuWGBRunBase import WidgetEnvSetMixin, WidgetTimeModeMixin\nfrom ..MarketBu import ABuSymbolPd\nfrom ..MarketBu.ABuDataCheck import browser_down_csv_zip\nfrom ..UtilBu import ABuProgress\nfrom ..TLineBu.ABuTL import AbuTLine\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetToolSet(WidgetBase, WidgetEnvSetMixin, WidgetTimeModeMixin):\n    """"""\xe5\x9f\xba\xe7\xa1\x80\xe8\xae\xbe\xe7\xbd\xae\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n    def __init__(self):\n        """"""\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x9f\xba\xe7\xa1\x80\xe8\xae\xbe\xe7\xbd\xae\xe7\x95\x8c\xe9\x9d\xa2""""""\n\n        mdm_box = self.init_env_set_ui()\n        tm_box = self.init_time_mode_ui()\n        self.sc = WidgetSymbolChoice()\n        self.sc.cs_tip.value = u\'\xe5\xa6\x82\xe6\x9e\x9c\xe8\x82\xa1\xe6\xb1\xa0\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\xe7\x9a\x84symbol\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe6\x9e\x90\'\n        # \xe9\xbb\x98\xe8\xae\xa41\xe5\xb9\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe6\x9e\x90\n        self.run_years.value = 1\n        # self.widget = widgets.Box([self.sc.widget, tm_box, mdm_box], layout=self.widget_layout)\n        self.widget = widgets.VBox([self.sc.widget, tm_box, mdm_box])\n\n    def time_mode_str(self):\n        """"""\xe5\xae\x9e\xe7\x8e\xb0\xe6\xb7\xb7\xe5\x85\xa5WidgetTimeModeMixin\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\x9d\x97\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x88\x86\xe6\x9e\x90""""""\n        return u\'\xe5\x88\x86\xe6\x9e\x90\'\n\n\ndef single_fetch_symbol_analyse(func):\n    """"""\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe7\x9a\x841\xe4\xb8\xaasymbol\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe5\x90\x8e\xe8\xb0\x83\xe7\x94\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0""""""\n\n    @functools.wraps(func)\n    def wrapper(self, bt):\n        symbol = self._choice_symbol_single()\n        kl = self._fetch_single_kl(symbol)\n        ABuProgress.clear_output()\n        # ABuProgress.clear_std_output()\n        if kl is not None:\n            # \xe6\xb8\x85\xe7\x90\x86\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\n            kl_tl = AbuTLine(kl.close, \'kl\')\n            return func(self, kl, kl_tl, bt)\n        else:\n            self.info_change_set_mode(symbol)\n\n    return wrapper\n\n\ndef multi_fetch_symbol_analyse(func):\n    """"""\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\x9a\xe4\xb8\xaasymbol\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbb\x84\xe6\x88\x90\xe5\xad\x97\xe5\x85\xb8\xe5\x90\x8e\xe8\xb0\x83\xe7\x94\xa8\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0""""""\n\n    @functools.wraps(func)\n    def wrapper(self, bt):\n        choice_symbol = self._choice_symbol_multi()\n        kl_dict = self._fetch_multi_kl(choice_symbol)\n        ABuProgress.clear_output()\n        # ABuProgress.clear_std_output()\n        if kl_dict is not None and len(kl_dict) > 0:\n            return func(self, kl_dict, bt)\n        else:\n            self.info_change_set_mode(choice_symbol)\n\n    return wrapper\n\n\ndef multi_fetch_symbol_df_analyse(col_key):\n    """"""\n    \xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\x9a\xe4\xb8\xaasymbol\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbb\x84\xe6\x88\x90\xe5\xad\x97\xe5\x85\xb8\xe5\x90\x8e\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\x8f\x82\xe6\x95\xb0col_key\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\x80\xe5\x88\x97\xe5\xbd\xa2\xe6\x88\x90\xe6\x96\xb0\xe7\x9a\x84dataframe\xef\xbc\x8c\n    \xe5\xb0\x86dataframe\xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99\xe8\xa2\xab\xe8\xa3\x85\xe9\xa5\xb0\xe5\x87\xbd\xe6\x95\xb0\n    :param col_key: \xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\x80\xe5\x88\x97\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x8ceg\xef\xbc\x9ap_change, close\n    """"""\n\n    def decorate(func):\n        @functools.wraps(func)\n        def wrapper(self, bt):\n            choice_symbol = self._choice_symbol_multi()\n            cg_df = self._fetch_multi_kl_col(choice_symbol, col_key=col_key)\n            ABuProgress.clear_output()\n            # ABuProgress.clear_std_output()\n            if cg_df is not None and len(cg_df) > 0:\n                return func(self, cg_df, bt)\n            else:\n                self.info_change_set_mode(choice_symbol)\n\n        return wrapper\n\n    return decorate\n\n\n# noinspection PyUnusedLocal,PyProtectedMember\nclass WidgetToolBase(WidgetBase):\n    """"""\xe6\x8a\x80\xe6\x9c\xaf\xe5\x88\x86\xe6\x9e\x90\xe5\x9f\xba\xe7\xb1\xbb""""""\n\n    def __init__(self, tool_set):\n        """"""\n            \xe6\x9e\x84\xe9\x80\xa0\xe9\x80\x9a\xe7\x94\xa8\xe7\x9a\x84layout css:\n            label_layout, tool_layout, scroll_widget_layout,\n            description_layout\n        """"""\n        if not isinstance(tool_set, WidgetToolSet):\n            raise TypeError(\'tool_set must isinstance WidgetToolSet, not {}!\'.format(type(tool_set)))\n        self.tool_set = tool_set\n        self.label_layout = widgets.Layout(width=\'300px\', align_items=\'stretch\')\n        self.tool_layout = widgets.Layout(align_items=\'stretch\', justify_content=\'space-between\')\n        self.scroll_widget_layout = widgets.Layout(overflow_x=\'scroll\',\n                                                   # flex_direction=\'row\',\n                                                   display=\'flex\')\n        self.description_layout = widgets.Layout(height=\'150px\')\n        # \xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\x8d\xe5\x90\xaf\xe5\x8a\xa8\xe5\x8f\xaf\xe6\xbb\x9a\xe5\x8a\xa8\xe5\x9b\xa0\xe5\xad\x90\xe7\x95\x8c\xe9\x9d\xa2\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\xaf\xb9\xe5\xa4\x96\xe7\x9a\x84widget\xe7\x89\x88\xe6\x9c\xac\xe4\xbb\xa5\xe5\x8f\x8aos\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\x8d\xe7\xbb\x9f\xe4\xb8\x80\n        self.scroll_factor_box = False\n        self._sub_children_group_cnt = 3\n\n    def _sub_children(self, children, n_split):\n        """"""\xe5\xb0\x86children\xe6\xaf\x8fn_split\xe4\xb8\xaa\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\x84\xef\xbc\x8c\xe7\xbb\x84\xe8\xa3\x85\xe5\xad\x90children_group\xe5\xba\x8f\xe5\x88\x97""""""\n        sub_children_cnt = int(len(children) / n_split)\n        if sub_children_cnt == 0:\n            sub_children_cnt = 1\n        group_adjacent = lambda a, k: zip(*([iter(a)] * k))\n        children_group = list(group_adjacent(children, sub_children_cnt))\n        residue_ind = -(len(children) % sub_children_cnt) if sub_children_cnt > 0 else 0\n        if residue_ind < 0:\n            children_group.append(children[residue_ind:])\n        return children_group\n\n    @contextmanager\n    def data_mode_recover(self, is_example_mode):\n        """"""\n        \xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87\xe7\xae\xa1\xe7\x90\x86\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\n        1. \xe4\xb8\x8a\xe6\x96\x87\xe9\x80\x9a\xe8\xbf\x87\xe5\x8f\x82\xe6\x95\xb0is_example_mode\xe4\xb8\x8e\xe5\x85\xa8\xe5\xb1\x80\xe7\x9a\x84\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe5\x90\x8c\xe6\x94\xb9\xe5\x8f\x98\xe8\xae\xbe\xe7\xbd\xae\n        2. \xe4\xb8\x8b\xe6\x96\x87\xe6\x89\xbf\xe6\x8e\xa5\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8a\xe6\x96\x87\xe4\xbf\xae\xe6\x94\xb9\xe4\xba\x86\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe6\x81\xa2\xe5\xa4\x8d\xe4\xb8\x8a\xe6\x96\x87\xe7\x9a\x84\xe4\xbf\xae\xe6\x94\xb9\n        :param is_example_mode: \xe4\xb8\xb4\xe6\x97\xb6\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\n        """"""\n        recover = False\n        if is_example_mode != ABuEnv._g_enable_example_env_ipython:\n            # \xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8enable_example_env_ipython\xe6\x94\xb9\xe5\x8f\x98\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8f\xaa\xe4\xb8\xb4\xe6\x97\xb6\xe6\x94\xb9\xe5\x8f\x98\xe6\xb2\x99\xe7\x9b\x92\xe7\xb1\xbb\xe5\x9e\x8b\n            ABuEnv._g_enable_example_env_ipython = is_example_mode\n            recover = True\n\n        yield\n        if recover:\n            # \xe4\xb8\x8d\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8disable_example_env_ipython\xe6\x94\xb9\xe5\x8f\x98\xe7\xbc\x93\xe5\xad\x98\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\x8f\xaa\xe6\x81\xa2\xe5\xa4\x8d\xe6\xb2\x99\xe7\x9b\x92\xe7\xb1\xbb\xe5\x9e\x8b\n            ABuEnv._g_enable_example_env_ipython = not is_example_mode\n\n    def map_tip_target_label(self, n_target):\n        """"""\n        \xe6\xa0\xb9\xe6\x8d\xaen_target\xe8\xa6\x81\xe5\x9c\xa8\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe9\x80\x89\xe6\x8b\xa9\xe5\x87\xa0\xe4\xb8\xaasymbol\xe6\x98\xa0\xe5\xb0\x84\xe6\x96\x87\xe5\xad\x97\xe6\x8f\x90\xe7\xa4\xba\n        :param n_target: eg\xef\xbc\x9a1\xef\xbc\x8c2\xef\xbc\x8c\xef\xbc\x8d1\n        :return: eg\xef\xbc\x9a\xe9\x9c\x80\xe9\x80\x89\xe6\x8b\xa91\xe4\xb8\xaa\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe5\x9c\xa8\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\n        """"""\n        if n_target == 1:\n            return u\'\xe9\x9c\x80\xe9\x80\x89\xe6\x8b\xa91\xe4\xb8\xaa\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe5\x9c\xa8\\\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\'\n        elif n_target == 2:\n            return u\'\xe9\x9c\x80\xe9\x80\x89\xe6\x8b\xa92\xe4\xb8\xaa\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe5\x9c\xa8\\\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\'\n        else:\n            return u\'\xe9\x9c\x80\xe9\x80\x89\xe6\x8b\xa9\xe5\xa4\x9a\xe4\xb8\xaa(>1\xe4\xb8\xaa)\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe5\x9c\xa8\\\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\'\n\n    def _start_end_n_fold(self):\n        """"""\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xad\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe8\x8e\xb7\xe5\x8f\x96\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x85\xb7\xe4\xbd\x93\xe7\x9a\x84start\xef\xbc\x8cend\xef\xbc\x8cn_folds""""""\n        n_folds = 1\n        start = None\n        end = None\n        if not self.tool_set.run_years.disabled:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xa8\xa1\xe5\xbc\x8f\n            n_folds = self.tool_set.run_years.value\n        if not self.tool_set.start.disabled:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\n            start = self.tool_set.start.value\n        if not self.tool_set.end.disabled:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbb\x93\xe6\x9d\x9f\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\n            end = self.tool_set.end.value\n        return start, end, n_folds\n\n    def info_change_set_mode(self, symbol):\n        """"""\n            \xe5\x9c\xa8\xe4\xb8\x8a\xe5\xb1\x82\xe5\xae\x9a\xe5\x8f\x82\xe6\x95\xb0\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8single_fetch_symbol_analyse\xef\xbc\x8cmulti_fetch_symbol_analyse\n            \xe4\xb8\xad\xe7\xbb\x9f\xe4\xb8\x80\xe5\xa4\x84\xe7\x90\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84case\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe6\x8f\x90\xe9\x86\x92\xe6\x94\xb9\xe5\x8f\x98\xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\x9b\xb4\xe6\x96\xb0\n        """"""\n        # noinspection PyProtectedMember\n        if ABuEnv._g_enable_example_env_ipython:\n            logging.info(\n                u\'\xe5\xbd\x93\xe5\x89\x8d\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\\\'\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xe6\x97\xa0{}\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\'\n                u\'\xe8\xaf\xb7\xe5\x9c\xa8\\\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\\\'\xe4\xb8\xad\xe5\x88\x87\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xb9\xb6\xe7\xa1\xae\xe8\xae\xa4\xe6\x95\xb0\xe6\x8d\xae\xe5\x8f\xaf\xe8\x8e\xb7\xe5\x8f\x96\xef\xbc\x81\'\n                u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xbb\xba\xe8\xae\xae\xe5\x85\x88\xe7\x94\xa8\\\'\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\'\n                u\'\xe4\xb9\x8b\xe5\x90\x8e\xe8\xae\xbe\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\xba\\\'\xe5\xbc\x80\xe6\x94\xbe\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\xef\xbc\x8c\xe8\x81\x94\xe7\xbd\x91\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xbd\xbf\xe7\x94\xa8\\\'\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xe6\xa8\xa1\xe5\xbc\x8f\\\'\'.format(symbol))\n        else:\n            logging.info(u\'{}\xe6\x95\xb0\xe6\x8d\xae\xe8\x8e\xb7\xe5\x8f\x96\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81\'.format(symbol))\n        browser_down_csv_zip()\n\n    def _fetch_single_kl(self, symbol):\n        """"""\n        \xe9\x80\x9a\xe8\xbf\x87_start_end_n_fold\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe5\x8f\x96\n        :param symbol: eg: usTSLA\n        :return: pd.DataFrame\n        """"""\n        start, end, n_folds = self._start_end_n_fold()\n        kl = ABuSymbolPd.make_kl_df(symbol, n_folds=n_folds, start=start, end=end)\n        return kl\n\n    def _fetch_multi_kl(self, choice_symbol):\n        """"""\n        \xe5\xa4\x9a\xe4\xb8\xaasymbol\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87_start_end_n_fold\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe5\x8f\x96\n        :param choice_symbol: eg: [\'usTSLA\', \'usNOAH\']\n        :return: eg: {\'usTSLA\': pd.DataFrame, \'usNOAH\': pd.DataFrame}\n        """"""\n        start, end, n_folds = self._start_end_n_fold()\n\n        kl_dict = {symbol: ABuSymbolPd.make_kl_df(symbol, start=start, end=end, n_folds=n_folds)\n                   for symbol in choice_symbol}\n        kl_dict = {kl_key: kl_dict[kl_key] for kl_key in kl_dict if kl_dict[kl_key] is not None}\n        return kl_dict\n\n    def _fetch_multi_kl_col(self, choice_symbol, col_key, na_val=0):\n        """"""\n         \xe5\xa4\x9a\xe4\xb8\xaasymbol\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87_start_end_n_fold\xe8\x8e\xb7\xe5\x8f\x96\xe6\x97\xb6\xe9\x97\xb4\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe8\x8e\xb7\xe5\x8f\x96,\n         \xe5\xa4\x9a\xe4\xb8\xaasymbol\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe5\xaf\xb9\xe8\xb1\xa1\xe9\x80\x9a\xe8\xbf\x87col_key\xe8\x8e\xb7\xe5\x8f\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe7\x9a\x84\xe9\x87\x91\xe8\x9e\x8d\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x88\x97\n         \xe5\xbd\xa2\xe6\x88\x90\xe6\x96\xb0\xe7\x9a\x84pd.DateFrame\xe5\xaf\xb9\xe8\xb1\xa1\n         :param choice_symbol: eg: [\'usTSLA\', \'usNOAH\']\n         :return: pd.DateFrame\xe5\xaf\xb9\xe8\xb1\xa1\n         """"""\n        start, end, n_folds = self._start_end_n_fold()\n\n        kl_dict = {symbol: ABuSymbolPd.make_kl_df(symbol, start=start, end=end, n_folds=n_folds)\n                   for symbol in choice_symbol}\n        kl_dict = {kl_key: kl_dict[kl_key] for kl_key in kl_dict if kl_dict[kl_key] is not None}\n\n        if len(kl_dict) > 0:\n            kl_col_df = pd.concat({kl_name: kl_dict[kl_name][col_key] for kl_name in kl_dict}, axis=1)\n            # noinspection PyUnresolvedReferences\n            kl_col_df = kl_col_df.fillna(value=na_val)\n            return kl_col_df\n\n    def _choice_symbol_single(self, default=None):\n        """"""\xe5\x8d\x95\xe7\x8b\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0""""""\n        choice_symbols = self.tool_set.sc.choice_symbols.options\n        if choice_symbols is None or len(choice_symbols) == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaasymbol\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\n            symbol = \'usTSLA\' if default is None else default\n            show_msg_func(u\'\xe6\x9c\xaa\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xbb\xe4\xbd\x95symbol\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b{}\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe6\x9e\x90\'.format(symbol))\n        elif choice_symbols is not None and len(choice_symbols) > 1:\n            symbol = choice_symbols[0]\n            show_msg_func(u\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\xe5\xa4\x9a\xe4\xb8\xaasymbol\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa{}\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe6\x9e\x90\'.format(symbol))\n        else:\n            symbol = choice_symbols[-1]\n        return symbol\n\n    def _choice_symbol_pair(self, default=None):\n        """"""\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x88\x86\xe6\x9e\x90\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0""""""\n        choice_symbols = self.tool_set.sc.choice_symbols.options\n        if choice_symbols is None or len(choice_symbols) < 2:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaasymbol\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\n            if default is None:\n                symbol1, symbol2 = \'AU0\', \'XAU\'\n            else:\n                symbol1, symbol2 = default[0], default[1]\n            show_msg_func(u\'\xe9\x9c\x80\xe8\xa6\x81\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\xa4\xe4\xb8\xaasymbol\xef\xbc\x8c\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b{} vs {}\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe6\x9e\x90\'.format(symbol1, symbol2))\n        elif choice_symbols is not None and len(choice_symbols) > 2:\n            symbol1, symbol2 = choice_symbols[0], choice_symbols[1]\n            show_msg_func(u\'\xe5\x88\x86\xe6\x9e\x90\xe8\xae\xbe\xe7\xbd\xae\xe5\xa4\x9a\xe4\xb8\xaasymbol\xe7\x9b\xae\xe6\xa0\x87\xef\xbc\x8c\xe5\x8f\xaa\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa{}\xef\xbc\x8c\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa{}\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe6\x9e\x90\'.format(symbol1, symbol2))\n        else:\n            symbol1, symbol2 = choice_symbols[-2], choice_symbols[-1]\n        return symbol1, symbol2\n\n    def _choice_symbol_multi(self):\n        """"""\xe5\x88\x86\xe6\x9e\x90\xe5\xa4\x9a\xe4\xb8\xaa\xe7\x9b\xae\xe6\xa0\x87\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0""""""\n        choice_symbols = self.tool_set.sc.choice_symbols.options\n        if choice_symbols is None or len(choice_symbols) == 0:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaasymbol\xe9\x83\xbd\xe6\xb2\xa1\xe6\x9c\x89\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\n            choice_symbols = [\'sh600036\', \'sh600809\', \'hk00700\', \'hk03333\']\n            show_msg_func(u\'\xe6\x9c\xaa\xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xbb\xe4\xbd\x95symbol\xe5\xb0\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\xa4\xba\xe4\xbe\x8b\')\n        return choice_symbols\n'"
abupy/WidgetBu/ABuWGUmp.py,0,"b'# -*- encoding:utf-8 -*-\n""""""ump\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xa3\x81\xe5\x88\xa4\xe8\xae\xad\xe7\xbb\x83\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport os\nimport datetime\nfrom contextlib import contextmanager\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetBase, show_msg_toast_func, permission_denied\n# noinspection PyUnresolvedReferences\nfrom ..CoreBu.ABuFixes import filter\nfrom ..CoreBu.ABuStore import load_custom_abu_index, load_custom_ump_index, delete_abu_result_tuple\nfrom ..CoreBu import ABuEnv\nfrom ..CoreBu.ABuStore import dump_custom_ump_index_csv, del_custom_ump_index\nfrom ..CoreBu.ABu import load_abu_result_tuple, store_abu_result_tuple\nfrom ..CoreBu.ABuStore import EStoreAbu, dump_custom_abu_index_csv\nfrom ..TradeBu import ABuMLFeature\nfrom ..TradeBu.ABuMLFeature import AbuFeatureDegExtend\nfrom ..UtilBu.ABuStrUtil import to_unicode\nfrom ..UtilBu.ABuFileUtil import del_file\n\nfrom ..UmpBu.ABuUmpMainDeg import AbuUmpMainDeg, AbuUmpMainDegExtend\nfrom ..UmpBu.ABuUmpMainPrice import AbuUmpMainPrice\nfrom ..UmpBu.ABuUmpMainMul import AbuUmpMainMul\n\nfrom ..UmpBu.ABuUmpEdgeDeg import AbuUmpEdgeDeg, AbuUmpEegeDegExtend\nfrom ..UmpBu.ABuUmpEdgePrice import AbuUmpEdgePrice\nfrom ..UmpBu.ABuUmpEdgeMul import AbuUmpEdgeMul\nfrom ..UmpBu import ABuUmpManager\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\n# noinspection PyProtectedMember\nclass WidgetUmp(WidgetBase):\n    """"""\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xa3\x81\xe5\x88\xa4\xe8\xae\xad\xe7\xbb\x83\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xba\xa4\xe6\x98\x93\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaaui\xe7\xb1\xbb""""""\n\n    # noinspection PyProtectedMember\n    def __init__(self):\n        """"""\xe6\x9e\x84\xe5\xbb\xba\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe5\x90\x84\xe4\xb8\xaa\xe7\xbb\x84\xe4\xbb\xb6\xe5\xbd\xa2\xe6\x88\x90tab""""""\n        sub_widget_tab = widgets.Tab()\n        # \xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        feature_tab = self._init_feature_ui()\n        # \xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xad\xe7\xbb\x83\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        train_tab = self._init_train_ui()\n        # \xe8\xa3\x81\xe5\x88\xa4\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        predict_tab = self._init_predict_ui()\n        # \xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        manager_tab = self._init_manager_ui()\n\n        sub_widget_tab.children = [feature_tab, train_tab, predict_tab, manager_tab]\n        for ind, name in enumerate([u\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\', u\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xad\xe7\xbb\x83\', u\'\xe8\xa3\x81\xe5\x88\xa4\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\', u\'\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\']):\n            sub_widget_tab.set_title(ind, name)\n        self.widget = widgets.VBox([sub_widget_tab])\n\n    def load_abu_result(self):\n        """"""\xe8\xaf\xbb\xe5\x8f\x96\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xe6\x96\x87\xe4\xbb\xb6""""""\n        index_csv_df = load_custom_abu_index()\n        train_options = list()\n        if index_csv_df is not None:\n            train_options = [u\'{}. {}:{}\'.format(ind + 1, index_csv_df.index[ind], to_unicode(description)) for\n                             ind, description\n                             in enumerate(index_csv_df.description)]\n        self.abu_result.options = train_options\n\n    def load_train_ump(self, ump_select_ui):\n        """"""\xe8\xaf\xbb\xe5\x8f\x96\xe5\xb7\xb2\xe7\xbb\x8f\xe5\xae\x8c\xe6\x88\x90\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84ump\xe8\xa3\x81\xe5\x88\xa4\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0csv\xe6\x96\x87\xe4\xbb\xb6""""""\n        index_csv_df = load_custom_ump_index()\n        ump_options = list()\n        if index_csv_df is not None:\n            ump_options = [u\'{}. {}:{}:{}\'.format(\n                ind + 1, u\'\xe4\xb8\xbb\xe8\xa3\x81\' if ump_type_key == \'main\' else u\'\xe8\xbe\xb9\xe8\xa3\x81\', index_csv_df.index[ind],\n                to_unicode(description)) for\n                           ind, (ump_type_key, description) in\n                           enumerate(zip(index_csv_df.is_main_ump, index_csv_df.description))]\n        ump_select_ui.options = ump_options\n\n    def run_before(self):\n        """"""\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xa8\xa1\xe5\x9d\x97\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x89\x8d\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe6\x98\xaf\xe5\x90\xa6\xe5\xbc\x80\xe5\x90\xaf\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xb0\xe5\xbd\x95\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x98\xaf\xe5\x90\xa6\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa3\x81\xe5\x88\xa4\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\xe6\x8b\xa6\xe6\x88\xaa\xe5\xaf\xb9\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae""""""\n        # \xe5\x85\x88clear\xe4\xb8\x80\xe4\xb8\x8bABuMLFeature\xe5\x92\x8cABuUmpManager\n        ABuMLFeature.clear_user_feature()\n        ABuUmpManager.clear_user_ump()\n\n        if self.choice_umps.options is not None and len(self.choice_umps.options) > 0:\n            # \xe6\x9c\x89\xe9\x80\x89\xe6\x8b\xa9\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa3\x81\xe5\x88\xa4\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xba\xe5\xb7\xa5\xe6\x8b\xa6\xe6\x88\xaa\xe5\xb9\xb2\xe9\xa2\x84, \xe6\x89\x93\xe5\xbc\x80\xe7\x94\x9f\xe6\x88\x90\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\xe5\xbc\x80\xe5\x85\xb3\n            self.enable_ml_feature.value = 1\n\n            # \xe6\x89\x93\xe5\xbc\x80\xe4\xbd\xbf\xe7\x94\xa8\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xa3\x81\xe5\x88\xa4\xe5\xbc\x80\xe5\x85\xb3\n            ABuUmpManager.g_enable_user_ump = True\n\n            ump_class_dict = {AbuUmpMainDeg.class_unique_id(): AbuUmpMainDeg,\n                              AbuUmpMainPrice.class_unique_id(): AbuUmpMainPrice,\n                              AbuUmpMainMul.class_unique_id(): AbuUmpMainMul,\n                              AbuUmpMainDegExtend.class_unique_id(): AbuUmpMainDegExtend,\n\n                              AbuUmpEdgeDeg.class_unique_id(): AbuUmpEdgeDeg,\n                              AbuUmpEdgePrice.class_unique_id(): AbuUmpEdgePrice,\n                              AbuUmpEdgeMul.class_unique_id(): AbuUmpEdgeMul,\n                              AbuUmpEegeDegExtend.class_unique_id(): AbuUmpEegeDegExtend}\n            for choice_ump in self.choice_umps.options:\n                unique_class_key = choice_ump.split(\':\')[1]\n                ump_custom_fn = choice_ump.split(\':\')[2]\n                ump_class = ump_class_dict[unique_class_key]\n                ump_object = ump_class(predict=True, market_name=ump_custom_fn)\n                # \xe6\x8a\x8a\xe8\xaf\xbb\xe5\x8f\x96\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe9\x83\xbd\xe5\x81\x9a\xe4\xb8\xba\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe8\xa3\x81\xe5\x88\xa4\xe5\x8a\xa0\xe5\x85\xa5\xe5\x88\xb0ABuUmpManager\xe4\xb8\xad\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\xaf\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa3\x81\xe5\x88\xa4\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\xa4\xe6\x98\x93\xe6\x8b\xa6\xe6\x88\xaa\n                ABuUmpManager.append_user_ump(ump_object)\n\n        ABuEnv.g_enable_ml_feature = self.enable_ml_feature.value\n        if self.enable_ml_feature.value:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xbc\x80\xe5\x90\xaf\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xae\xb0\xe5\xbd\x95\xe7\x89\xb9\xe5\xbe\x81\xe9\x9c\x80\xe8\xa6\x81\xe5\x8a\xa0\xe5\x85\xa5AbuFeatureDegExtend\xe5\x88\xb0ABuMLFeature\n            ABuMLFeature.append_user_feature(AbuFeatureDegExtend)\n\n    def run_end(self, abu_result_tuple, choice_symbols, buy_desc_list, sell_desc_list, ps_desc_list):\n        """"""\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xe7\xb4\xa2\xe5\xbc\x95\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe8\xb4\xae""""""\n\n        if self.enable_ml_feature.value:\n            # \xe5\x8f\xaa\xe6\x9c\x89\xe5\x90\xaf\xe5\x8a\xa8\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe6\x89\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\x9e\xe6\xb5\x8b\n            custom_name = datetime.datetime.now().strftime(""%Y_%m_%d_%H_%M_%S"")\n            store_abu_result_tuple(abu_result_tuple, store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                   custom_name=custom_name)\n            symbol_desc = u\'{}\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\'.format(\n                ABuEnv.g_market_target.value) if choice_symbols is None else u\'{}\xe4\xb8\xaasymbol\'.format(\n                len(choice_symbols))\n            ump_desc = u\'\xe6\x9c\x89\xe8\xa3\x81\xe5\x88\xa4\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe4\xba\xa4\xe6\x98\x93\' \\\n                if self.choice_umps.options is not None and len(self.choice_umps.options) > 0 else u\'\xe6\x97\xa0\xe8\xa3\x81\xe5\x88\xa4\'\n            factor_desc = u\'|\'.join(buy_desc_list + sell_desc_list + ps_desc_list)\n            custom_desc = u\'{}|{}|{}\'.format(symbol_desc, ump_desc, factor_desc)\n            # \xe5\xaf\xb9\xe5\x88\x9a\xe5\x88\x9a\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84store_abu_result_tuple\xe7\x9a\x84\xe7\xbc\x93\xe5\xad\x98\xe8\xbf\x9b\xe8\xa1\x8ccache\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xb4\xa2\xe5\xbc\x95\xe4\xbf\x9d\xe5\xad\x98\n            dump_custom_abu_index_csv(custom_name, custom_desc)\n            # \xe9\x80\x9a\xe7\x9f\xa5\xe8\xae\xad\xe7\xbb\x83\xe7\x95\x8c\xe9\x9d\xa2\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\n            self.load_abu_result()\n\n    def _init_manager_ui(self):\n        """"""\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        description = widgets.Textarea(\n            value=u\'\xe5\x88\xa0\xe9\x99\xa4\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x9a\\n\'\n                  u\'\xe5\x88\xa0\xe9\x99\xa4\xe6\x89\x80\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe5\xb7\xb2\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe6\x9c\xac\xe5\x9c\xb0\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xb0\xa8\xe6\x85\x8e\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x81\\n\'\n                  u\'\xe5\x88\x86\xe4\xba\xab\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xef\xbc\x9a\\n\'\n                  u\'\xe5\xb0\x86\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x86\xe4\xba\xab\xe5\x88\xb0\xe4\xba\xa4\xe6\x98\x93\xe7\xa4\xbe\xe5\x8c\xba\xef\xbc\x8c\xe4\xbe\x9b\xe5\x85\xb6\xe4\xbb\x96\xe4\xba\xa4\xe6\x98\x93\xe8\x80\x85\xe4\xbd\xbf\xe7\x94\xa8\\n\'\n                  u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xef\xbc\x9a\\n\'\n                  u\'\xe4\xbb\x8e\xe4\xba\xa4\xe6\x98\x93\xe7\xa4\xbe\xe5\x8c\xba\xef\xbc\x8c\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe5\xa4\x9a\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\\n\',\n\n            disabled=False,\n            layout=widgets.Layout(height=\'150px\')\n        )\n\n        self.manager_umps = widgets.Select(\n            options=[],\n            description=u\'\xe6\x9c\xac\xe5\x9c\xb0\xe8\xa3\x81\xe5\x88\xa4:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'100%\', align_items=\'stretch\')\n        )\n        self.load_train_ump(self.manager_umps)\n        delete_bt = widgets.Button(description=u\'\xe5\x88\xa0\xe9\x99\xa4\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\', layout=widgets.Layout(width=\'98%\'),\n                                   button_style=\'warning\')\n        delete_bt.on_click(self._do_delete_ump)\n\n        share_bt = widgets.Button(description=u\'\xe5\x88\x86\xe4\xba\xab\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\', layout=widgets.Layout(width=\'98%\'),\n                                  button_style=\'info\')\n        share_bt.on_click(permission_denied)\n        down_bt = widgets.Button(description=u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe5\xa4\x9a\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\', layout=widgets.Layout(width=\'98%\'),\n                                 button_style=\'info\')\n        down_bt.on_click(permission_denied)\n\n        return widgets.VBox([description, self.manager_umps, delete_bt, share_bt, down_bt])\n\n    def _init_predict_ui(self):\n        """"""\xe8\xa3\x81\xe5\x88\xa4\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        description = widgets.Textarea(\n            value=u\'\xe8\xa3\x81\xe5\x88\xa4\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xef\xbc\x9a\\n\'\n                  u\'\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8\\\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xad\xe7\xbb\x83\\\'\xe9\x80\x89\xe4\xb8\xad\\\'\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xef\xbc\x8c\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe5\xb0\x86\xe5\x9c\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\\n\'\n                  u\'\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\x8d\xb3\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe7\xad\x89\xe6\x99\xba\xe8\x83\xbd\xe4\xba\xa4\xe6\x98\x93\xe5\xb9\xb2\xe6\xb6\x89\xe8\xa1\x8c\xe4\xb8\xba\',\n\n            disabled=False,\n            layout=widgets.Layout(height=\'150px\')\n        )\n        # ump\xe5\xb7\xb2\xe9\x80\x89\xe6\xa1\x86\n        self.choice_umps = widgets.SelectMultiple(\n            description=u\'\xe5\xb7\xb2\xe9\x80\x89\xe8\xa3\x81\xe5\x88\xa4:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'100%\', align_items=\'stretch\')\n        )\n        self.choice_umps.observe(self.remove_ump_select, names=\'value\')\n\n        self.umps = widgets.SelectMultiple(\n            description=u\'\xe5\xa4\x87\xe9\x80\x89\xe8\xa3\x81\xe5\x88\xa4:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'100%\', align_items=\'stretch\')\n        )\n        self.umps.observe(self.on_ump_select, names=\'value\')\n        self.load_train_ump(self.umps)\n\n        return widgets.VBox([description, self.choice_umps, self.umps])\n\n    def remove_ump_select(self, select):\n        """"""ump\xe5\xb7\xb2\xe9\x80\x89\xe4\xb8\xad\xe7\x82\xb9\xe5\x87\xbb\xe5\x88\xa0\xe9\x99\xa4\xe8\x82\xa1\xe7\xa5\xa8\xe6\xb1\xa0\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84symbol""""""\n        # FIXME BUG \xe4\xbd\x8e\xe7\x89\x88\xe6\x9c\xacipywidgets\xe4\xb8\x8b\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84\xe4\xb8\x8d\xe5\xaf\xb9\n        self.choice_umps.options = list(set(self.choice_umps.options) - set(select[\'new\']))\n\n    def on_ump_select(self, select):\n        """"""\xe4\xbb\x8e\xe5\xa4\x87\xe9\x80\x89ump\xe4\xb8\xad\xe9\x80\x89\xe6\x8b\xa9\xe6\x94\xbe\xe5\x85\xa5\xe5\x88\xb0\xe5\xb7\xb2\xe9\x80\x89ump\xe4\xb8\xad""""""\n        st_ump = [ump for ump in list(select[\'new\'])]\n        self.choice_umps.options = list(set(st_ump + list(self.choice_umps.options)))\n\n    def _init_train_ui(self):\n        """"""\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xad\xe7\xbb\x83\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        description = widgets.Textarea(\n            value=u\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x9a\\n\'\n                  u\'\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8\\\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\\\'\xe9\x80\x89\xe4\xb8\xad\\\'\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x87\xe7\xa8\x8b\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\\\'\xe5\x8f\xaf\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe5\xbd\x93\xe6\xad\xa4\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\\n\'\n                  u\'\xe6\x89\x80\xe6\x9c\x89\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb0\x86\xe6\x98\xbe\xe7\xa4\xba\xe5\x9c\xa8\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\\\'\xe5\xa4\x87\xe9\x80\x89\xe5\x9b\x9e\xe6\xb5\x8b:\\\'\xe6\xa1\x86\xe4\xb8\xad\\n\'\n                  u\'\xe9\x80\x9a\xe8\xbf\x87\\\'\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe8\xa3\x81\xe5\x88\xa4\\\'\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xa3\x81\xe5\x88\xa4\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe5\x90\x8e\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe5\x9c\xa8\\\'\xe8\xa3\x81\xe5\x88\xa4\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\\\'\xe4\xb8\x8b\xe5\x8f\xaf\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x80\x89\xe6\x8b\xa9\xef\xbc\x8c\xe9\x80\x89\xe4\xb8\xad\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe5\xb0\x86\xe5\x9c\xa8\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\'\n                  u\'\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe7\x94\x9f\xe6\x95\x88\xef\xbc\x8c\xe5\x8d\xb3\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xb8\xad\xe5\xaf\xb9\xe4\xba\xa4\xe6\x98\x93\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe6\x8b\xa6\xe6\x88\xaa\xe7\xad\x89\xe6\x99\xba\xe8\x83\xbd\xe4\xba\xa4\xe6\x98\x93\xe5\xb9\xb2\xe6\xb6\x89\xe8\xa1\x8c\xe4\xb8\xba\',\n\n            disabled=False,\n            layout=widgets.Layout(height=\'150px\')\n        )\n\n        self.abu_result = widgets.Select(\n            options=[],\n            description=u\'\xe5\xa4\x87\xe9\x80\x89\xe5\x9b\x9e\xe6\xb5\x8b:\',\n            disabled=False,\n            layout=widgets.Layout(width=\'100%\', align_items=\'stretch\')\n        )\n        self.load_abu_result()\n\n        train_bt = widgets.Button(description=u\'\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe8\xa3\x81\xe5\x88\xa4\', layout=widgets.Layout(width=\'98%\'),\n                                  button_style=\'info\')\n        train_bt.on_click(self._do_train)\n        delete_bt = widgets.Button(description=u\'\xe5\x88\xa0\xe9\x99\xa4\xe9\x80\x89\xe6\x8b\xa9\xe7\x9a\x84\xe5\xa4\x87\xe9\x80\x89\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x9c\xac\xe5\x9c\xb0\xe6\x95\xb0\xe6\x8d\xae\', layout=widgets.Layout(width=\'98%\'),\n                                   button_style=\'warning\')\n        delete_bt.on_click(self._do_delete_abu_result)\n\n        return widgets.VBox([description, self.abu_result, train_bt, delete_bt])\n\n    def _init_feature_ui(self):\n        """"""\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\xe7\x95\x8c\xe9\x9d\xa2\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96""""""\n        ml_feature_description = widgets.Textarea(\n            value=u\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe9\x87\x87\xe9\x9b\x86\\n\'\n                  u\'\xe8\xa3\x81\xe5\x88\xa4\xe6\x98\xaf\xe5\xbb\xba\xe7\xab\x8b\xe5\x9c\xa8\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe6\x8a\x80\xe6\x9c\xaf\xe5\x9f\xba\xe7\xa1\x80\xe4\xb8\x8a\xe7\x9a\x84\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xbf\x85\xe7\x84\xb6\xe4\xbc\x9a\xe6\xb6\x89\xe5\x8f\x8a\xe5\x88\xb0\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8cabu\xe9\x87\x8f\xe5\x8c\x96\xe7\xb3\xbb\xe7\xbb\x9f\xe6\x94\xaf\xe6\x8c\x81\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x88\x87\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\'\n                  u\'\xe7\x94\x9a\xe8\x87\xb3\xe6\x88\x90\xe4\xba\xa4\xe4\xb9\xb0\xe5\x8d\x95\xe5\xbf\xab\xe7\x85\xa7\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe6\x89\x93\xe5\xbc\x80\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe5\xbc\x80\xe5\x85\xb3\xe5\x8d\xb3\xe5\x8f\xaf\xe5\x9c\xa8\xe7\x94\x9f\xe6\x88\x90\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xe6\x95\xb0\xe6\x8d\xae\xe8\xae\xa2\xe5\x8d\x95\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\x8a\xe5\x8a\xa0\xe4\xb8\x8a\xe4\xb9\xb0\xe5\x85\xa5\xe6\x97\xb6\xe5\x88\xbb\xe7\x9a\x84\xe5\xbe\x88\xe5\xa4\x9a\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\'\n                  u\'\xe6\xaf\x94\xe5\xa6\x82\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xbd\x8d\xe7\xbd\xae\xe3\x80\x81\xe8\xb6\x8b\xe5\x8a\xbf\xe8\xb5\xb0\xe5\x90\x91\xe3\x80\x81\xe6\xb3\xa2\xe5\x8a\xa8\xe6\x83\x85\xe5\x86\xb5\xe7\xad\x89\xe7\xad\x89\xe7\x89\xb9\xe5\xbe\x81, \xe6\xb3\xa8\xe6\x84\x8f\xe9\x9c\x80\xe8\xa6\x81\xe7\x94\x9f\xe6\x88\x90\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x8e\xe5\x9b\x9e\xe6\xb5\x8b\xe9\x80\x9f\xe5\xba\xa6\xe6\x95\x88\xe7\x8e\x87\xe4\xbc\x9a\xe9\x99\x8d\xe4\xbd\x8e\\n\'\n                  u\'\xe5\xa6\x82\xe5\x9c\xa8\xe4\xb8\x8b\xe6\x8b\x89\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\xad\xe9\x80\x89\xe4\xb8\xad\\\'\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x87\xe7\xa8\x8b\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\\\'\xe5\x9c\xa8\xe5\x9b\x9e\xe6\xb5\x8b\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xe5\xb0\x86\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe5\x9c\xa8\\\'\xe8\xa3\x81\xe5\x88\xa4\xe7\x89\xb9\xe5\xbe\x81\xe8\xae\xad\xe7\xbb\x83\\\'\xe5\x8f\xaf\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9f\xa5\xe7\x9c\x8b\xe5\xb9\xb6\xe8\xbf\x9b\xe8\xa1\x8c\'\n                  u\'\xe8\xa3\x81\xe5\x88\xa4\xe8\xae\xad\xe7\xbb\x83\',\n            disabled=False,\n            layout=widgets.Layout(height=\'150px\')\n        )\n\n        self.enable_ml_feature = widgets.Dropdown(\n            options={u\'\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\x8d\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\': 0,\n                     u\'\xe5\x9b\x9e\xe6\xb5\x8b\xe8\xbf\x87\xe7\xa8\x8b\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe7\x89\xb9\xe5\xbe\x81\': 1},\n            value=0,\n            description=u\'\xe7\x89\xb9\xe5\xbe\x81\xe7\x94\x9f\xe6\x88\x90:\',\n        )\n        return widgets.VBox([ml_feature_description, self.enable_ml_feature])\n\n    @contextmanager\n    def _parse_custom(self):\n        """"""\xe4\xbb\x8e\xe8\xae\xb0\xe5\xbd\x95\xe6\x8f\x8f\xe8\xbf\xb0ui\xe6\x96\x87\xe5\xad\x97\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xb8\xad\xe8\xa7\xa3\xe6\x9e\x90abu_custom_name\xe5\x92\x8cabu_custom_desc""""""\n        if self.abu_result.value is None:\n            show_msg_toast_func(u\'\xe6\x9c\xaa\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\xbb\xe4\xbd\x95\xe7\x89\xb9\xe5\xbe\x81\xe5\x9b\x9e\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x81\')\n            return\n\n        s_pos = self.abu_result.value.find(\'.\')\n        e_pos = self.abu_result.value.find(\':\')\n        if s_pos > 0 and e_pos > 0:\n            abu_custom_name = self.abu_result.value[s_pos + 1:e_pos].strip()\n            # \xe6\x88\xaa\xe5\x8f\x96\xe5\x9b\x9e\xe6\xb5\x8b\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xe6\x8f\x8f\xe8\xbf\xb0\xe5\x86\x85\xe5\xae\xb9\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbc\xa0\xe9\x80\x92\xe7\xbb\x99ump_custom_desc\n            abu_custom_desc = self.abu_result.value[e_pos:]\n\n            yield abu_custom_name, abu_custom_desc\n\n            # \xe4\xb8\x8b\xe6\x96\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xb4\xa2\xe5\xbc\x95\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe9\x87\x8d\xe6\x96\xb0\xe5\x8a\xa0\xe8\xbd\xbd\xef\xbc\x8cui\xe5\x88\xb7\xe6\x96\xb0\n            self.load_train_ump(self.umps)\n            self.load_train_ump(self.manager_umps)\n            self.load_abu_result()\n\n    # noinspection PyUnusedLocal\n    def _do_delete_ump(self, bt):\n        """"""\xe6\x89\xa7\xe8\xa1\x8c\xe5\x88\xa0\xe9\x99\xa4\xe5\xb7\xb2\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84ump\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0\xe8\xa1\x8c""""""\n        choice_ump = self.manager_umps.value\n        if choice_ump is None:\n            show_msg_toast_func(u\'\xe6\x9c\xaa\xe9\x80\x89\xe6\x8b\xa9\xe4\xbb\xbb\xe4\xbd\x95\xe6\x9c\xac\xe5\x9c\xb0\xe8\xa3\x81\xe5\x88\xa4\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x81\')\n            return\n\n        is_main_ump = choice_ump.split(\':\')[0].find(u\'\xe4\xb8\xbb\xe8\xa3\x81\') > 0\n        unique_class_key = choice_ump.split(\':\')[1]\n        ump_custom_fn = choice_ump.split(\':\')[2]\n\n        # \xe9\x80\x9a\xe8\xbf\x87\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xbb\xe8\xa3\x81\xef\xbc\x8cump\xe5\x94\xaf\xe4\xb8\x80id\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8acustom name\xe6\x9d\xa5\xe5\x94\xaf\xe4\xb8\x80\xe7\xa1\xae\xe5\xae\x9a\xe8\xa6\x81\xe5\x88\xa0\xe9\x99\xa4\xe7\x9a\x84\xe8\xa3\x81\xe5\x88\xa4\xe5\x85\xb7\xe4\xbd\x93\xe5\x90\x8d\xe7\xa7\xb0\n        del_fn = \'ump_main_{}_{}\'.format(\n            ump_custom_fn, unique_class_key) if is_main_ump else \'ump_edge_{}_{}\'.format(\n            ump_custom_fn, unique_class_key)\n\n        ump_fn = os.path.join(ABuEnv.g_project_data_dir, \'ump\', del_fn)\n        # \xe5\x88\xa0\xe9\x99\xa4ump\xe6\x95\xb0\xe6\x8d\xae\xe6\x96\x87\xe4\xbb\xb6\n        del_file(ump_fn)\n        # \xe5\x88\xa0\xe9\x99\xa4\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0\xe8\xa1\x8c\n        del_custom_ump_index(\'{}:{}\'.format(unique_class_key, ump_custom_fn))\n        show_msg_toast_func(u\'\xe5\x88\xa0\xe9\x99\xa4{}\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x81\'.format(ump_fn))\n\n        # ui\xe5\x88\xb7\xe6\x96\xb0\n        self.load_train_ump(self.umps)\n        self.load_train_ump(self.manager_umps)\n\n    # noinspection PyUnusedLocal\n    def _do_delete_abu_result(self, bt):\n        """"""\xe5\x86\x85\xe9\x83\xa8\xe9\x80\x9a\xe8\xbf\x87\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87_parse_custom\xe8\xaf\xbb\xe5\x8f\x96abu_custom_name\xe5\x88\xa0\xe9\x99\xa4\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xbb\xa5\xe5\x8f\x8a\xe7\xb4\xa2\xe5\xbc\x95\xe6\x8f\x8f\xe8\xbf\xb0\xe8\xa1\x8c""""""\n        with self._parse_custom() as (abu_custom_name, _):\n            delete_abu_result_tuple(store_type=EStoreAbu.E_STORE_CUSTOM_NAME, custom_name=abu_custom_name,\n                                    del_index=True)\n            show_msg_toast_func(u\'\xe5\x88\xa0\xe9\x99\xa4{}\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x81\'.format(abu_custom_name))\n\n    # noinspection PyUnusedLocal\n    def _do_train(self, bt):\n        """"""\n            \xe5\x86\x85\xe9\x83\xa8\xe9\x80\x9a\xe8\xbf\x87\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87_parse_custom\xe8\xaf\xbb\xe5\x8f\x96abu_custom_name\xef\xbc\x8cabu_custom_desc\n            \xe8\xaf\xbb\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8d\x95\xe5\xad\x90\xef\xbc\x8c\xe4\xbe\x9d\xe6\xac\xa1\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83ump\xe4\xb8\xbb\xe8\xa3\x81\xef\xbc\x9a\n\n            1. \xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\n            2. \xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\n            3. mul\xe5\x8d\x95\xe6\xb7\xb7\xe4\xb8\xbb\xe8\xa3\x81\n            4. \xe6\x89\xa9\xe5\xb1\x95\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\n\n            \xe4\xbe\x9d\xe6\xac\xa1\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83ump\xe8\xbe\xb9\xe8\xa3\x81\xef\xbc\x9a\n\n            1. \xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe8\xa3\x81\n            2. \xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xb9\xe8\xa3\x81\n            3. mul\xe5\x8d\x95\xe6\xb7\xb7\xe8\xbe\xb9\xe8\xa3\x81\n            4. \xe6\x89\xa9\xe5\xb1\x95\xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe8\xa3\x81\n        """"""\n\n        # \xe9\x80\x9a\xe8\xbf\x87\xe4\xb8\x8a\xe4\xb8\x8b\xe6\x96\x87_parse_custom\xe8\xaf\xbb\xe5\x8f\x96abu_custom_name\xef\xbc\x8cabu_custom_desc\n        with self._parse_custom() as (abu_custom_name, abu_custom_desc):\n            # \xe8\xaf\xbb\xe5\x8f\x96\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x8d\x95\xe5\xad\x90\n            abu_result_tuple_train = load_abu_result_tuple(store_type=EStoreAbu.E_STORE_CUSTOM_NAME,\n                                                           custom_name=abu_custom_name)\n            orders_pd_train = abu_result_tuple_train.orders_pd\n            if orders_pd_train is None:\n                show_msg_toast_func(u\'\xe7\x89\xb9\xe5\xbe\x81\xe4\xba\xa4\xe6\x98\x93\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x8f\x96\xe5\xa4\xb1\xe8\xb4\xa5\xef\xbc\x81\')\n                return\n\n            if orders_pd_train.shape[0] < 50:\n                show_msg_toast_func(u\'\xe7\x94\x9f\xe6\x88\x90\xe4\xba\xa4\xe6\x98\x93\xe8\xae\xa2\xe5\x8d\x95\xe6\x95\xb0\xe9\x87\x8f\xe5\xb0\x8f\xe4\xba\x8e50\xef\xbc\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe8\xae\xad\xe7\xbb\x83\xe8\xa3\x81\xe5\x88\xa4\xef\xbc\x81\')\n                return\n\n            # gmm\xe8\xae\xad\xe7\xbb\x83\xe9\xbb\x98\xe8\xae\xa4\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xe5\xb0\x91\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe7\x9a\x84\xe5\x86\x85\xe9\x83\xa8\xe8\x87\xaa\xe8\xa1\x8c\xe8\xae\xa1\xe7\xae\x97\n            p_ncs = slice(20, 40, 1) if ABuEnv._g_enable_example_env_ipython else None\n\n            def train_main_ump(ump_class, ump_name):\n                # \xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84ump custom_name, \xe5\x9c\xa8dump_file_fn\xe5\x86\x85\xe9\x83\xa8\xe5\xae\x9e\xe9\x99\x85\xe4\xbc\x9a\xe6\x8b\xbc\xe6\x8e\xa5class_unique_id\n                ump_custom_name = datetime.datetime.now().strftime(""%Y_%m_%d_%H_%M_%S"")\n                _ = ump_class.ump_main_clf_dump(orders_pd_train, p_ncs=p_ncs, market_name=ump_custom_name,\n                                                save_order=False, show_order=False)\n\n                ump_unique = ump_class.class_unique_id()\n                ump_key = \'main\'\n                ump_custom_desc = u\'{}\xe5\x9f\xba\xe4\xba\x8e{}\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe7\xbb\x93\xe6\x9e\x9c\'.format(ump_name, abu_custom_desc)\n                dump_custom_ump_index_csv(ump_custom_name, ump_unique, ump_key, ump_custom_desc)\n\n            # \xe4\xbe\x9d\xe6\xac\xa1\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83ump\xe4\xb8\xbb\xe8\xa3\x81\n            train_main_ump(AbuUmpMainDeg, u\'\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\')\n            train_main_ump(AbuUmpMainPrice, u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe4\xb8\xbb\xe8\xa3\x81\')\n            train_main_ump(AbuUmpMainMul, u\'mul\xe5\x8d\x95\xe6\xb7\xb7\xe4\xb8\xbb\xe8\xa3\x81\')\n            train_main_ump(AbuUmpMainDegExtend, u\'\xe6\x89\xa9\xe5\xb1\x95\xe8\xa7\x92\xe5\xba\xa6\xe4\xb8\xbb\xe8\xa3\x81\')\n\n            def train_edge_ump(ump_class, ump_name):\n                # \xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84ump custom_name, \xe5\x9c\xa8dump_file_fn\xe5\x86\x85\xe9\x83\xa8\xe5\xae\x9e\xe9\x99\x85\xe4\xbc\x9a\xe6\x8b\xbc\xe6\x8e\xa5class_unique_id\n                ump_custom_name = datetime.datetime.now().strftime(""%Y_%m_%d_%H_%M_%S"")\n                _ = ump_class.ump_edge_clf_dump(orders_pd_train, market_name=ump_custom_name)\n\n                ump_unique = ump_class.class_unique_id()\n                ump_key = \'edge\'\n                ump_custom_desc = u\'{}\xe5\x9f\xba\xe4\xba\x8e{}\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe7\xbb\x93\xe6\x9e\x9c\'.format(ump_name, abu_custom_desc)\n                dump_custom_ump_index_csv(ump_custom_name, ump_unique, ump_key, ump_custom_desc)\n                print(u\'\xe8\xbe\xb9\xe8\xa3\x81\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x9a{} \xe5\xae\x8c\xe6\x88\x90\xef\xbc\x81\'.format(ump_custom_desc))\n\n            # \xe4\xbe\x9d\xe6\xac\xa1\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83ump\xe8\xbe\xb9\xe8\xa3\x81\n            train_edge_ump(AbuUmpEdgeDeg, u\'\xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe8\xa3\x81\')\n            train_edge_ump(AbuUmpEdgePrice, u\'\xe4\xbb\xb7\xe6\xa0\xbc\xe8\xbe\xb9\xe8\xa3\x81\')\n            train_edge_ump(AbuUmpEdgeMul, u\'mul\xe5\x8d\x95\xe6\xb7\xb7\xe8\xbe\xb9\xe8\xa3\x81\')\n            train_edge_ump(AbuUmpEegeDegExtend, u\'\xe6\x89\xa9\xe5\xb1\x95\xe8\xa7\x92\xe5\xba\xa6\xe8\xbe\xb9\xe8\xa3\x81\')\n'"
abupy/WidgetBu/ABuWGUpdate.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom ..WidgetBu.ABuWGBRunBase import WidgetTimeModeMixin\n\nimport logging\nfrom collections import OrderedDict\n\nimport ipywidgets as widgets\nfrom ..CoreBu.ABu import run_kl_update\nfrom ..CoreBu import ABuEnv\nfrom ..UtilBu import ABuProgress\nfrom ..WidgetBu.ABuWGBase import WidgetBase\nfrom ..MarketBu.ABuDataCheck import browser_down_csv_zip\nfrom ..CoreBu.ABuEnv import EMarketTargetType, EMarketSourceType\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetUpdate(WidgetBase, WidgetTimeModeMixin):\n    """"""\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\xb1\xbb""""""\n\n    def __init__(self):\n        tm_box = self.init_time_mode_ui()\n        # \xe4\xbf\xae\xe6\x94\xb9\xe4\xb8\xba\xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8\xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f\n        self.time_mode.value = 1\n        # \xe4\xbf\xae\xe6\x94\xb9\xe5\xbc\x80\xe5\xa7\x8b\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xa5\xe6\x9c\x9f\xe6\x97\xb6\xe9\x97\xb4\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        self.start.value = \'2011-08-08\'\n        self.end.value = \'2017-08-08\'\n\n        self.market = widgets.Dropdown(\n            options=OrderedDict({u\'\xe7\xbe\x8e\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_US.value,\n                                 u\'A\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_CN.value,\n                                 u\'\xe6\xb8\xaf\xe8\x82\xa1\': EMarketTargetType.E_MARKET_TARGET_HK.value,\n                                 u\'\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_CN.value,\n                                 u\'\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7\': EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL.value,\n                                 u\'\xe6\x95\xb0\xe5\xad\x97\xe8\xb4\xa7\xe5\xb8\x81\': EMarketTargetType.E_MARKET_TARGET_TC.value}),\n            value=ABuEnv.g_market_target.value,\n            description=u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0\xe5\xb8\x82\xe5\x9c\xba:\',\n        )\n        self.market.observe(self.on_market_change, names=\'value\')\n\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x87\xe6\x8d\xa2""""""\n        self.data_source_accordion = widgets.Accordion()\n        date_source_dict_us = OrderedDict({\n            u\'\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_tx.value,\n            u\'\xe7\x99\xbe\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_bd.value,\n            u\'\xe6\x96\xb0\xe6\xb5\xaa\xe7\xbe\x8e\xe8\x82\xa1(\xe7\xbe\x8e\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_sn_us.value,\n            u\'\xe7\xbd\x91\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_nt.value,\n        })\n\n        date_source_dict_cn = OrderedDict({\n            u\'\xe7\x99\xbe\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_bd.value,\n            u\'\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_tx.value,\n            u\'\xe7\xbd\x91\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_nt.value\n        })\n\n        date_source_dict_hk = OrderedDict({\n            u\'\xe7\xbd\x91\xe6\x98\x93\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_nt.value,\n            u\'\xe8\x85\xbe\xe8\xae\xaf\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_tx.value,\n            u\'\xe7\x99\xbe\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90(\xe7\xbe\x8e\xe8\x82\xa1\xef\xbc\x8cA\xe8\x82\xa1\xef\xbc\x8c\xe6\xb8\xaf\xe8\x82\xa1)\': EMarketSourceType.E_MARKET_SOURCE_bd.value\n        })\n\n        date_source_dict_futures_cn = {u\'\xe6\x96\xb0\xe6\xb5\xaa\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7(\xe5\x9b\xbd\xe5\x86\x85\xe6\x9c\x9f\xe8\xb4\xa7)\': EMarketSourceType.E_MARKET_SOURCE_sn_futures.value}\n        date_source_dict_futures_gb = {u\'\xe6\x96\xb0\xe6\xb5\xaa\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7(\xe5\x9b\xbd\xe9\x99\x85\xe6\x9c\x9f\xe8\xb4\xa7)\': EMarketSourceType.E_MARKET_SOURCE_sn_futures_gb.value}\n        date_source_dict_futures_tc = {u\'\xe7\x81\xab\xe5\xb8\x81\xe7\xbd\x91\xef\xbc\x9a\xe6\xaf\x94\xe7\x89\xb9\xe5\xb8\x81\xef\xbc\x8c\xe8\x8e\xb1\xe7\x89\xb9\xe5\xb8\x81\': EMarketSourceType.E_MARKET_SOURCE_hb_tc.value}\n\n        self.date_source_market_map = {\n            EMarketTargetType.E_MARKET_TARGET_US.value: date_source_dict_us,\n            EMarketTargetType.E_MARKET_TARGET_CN.value: date_source_dict_cn,\n            EMarketTargetType.E_MARKET_TARGET_HK.value: date_source_dict_hk,\n            EMarketTargetType.E_MARKET_TARGET_FUTURES_CN.value: date_source_dict_futures_cn,\n            EMarketTargetType.E_MARKET_TARGET_FUTURES_GLOBAL.value: date_source_dict_futures_gb,\n            EMarketTargetType.E_MARKET_TARGET_TC.value: date_source_dict_futures_tc}\n\n        self.current_date_source_dict = self.date_source_market_map[self.market.value]\n        self.date_source = widgets.RadioButtons(\n            options=list(self.current_date_source_dict.keys()),\n            value=list(self.current_date_source_dict.keys())[0],\n            description=u\'\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90:\',\n            disabled=False\n        )\n        self.date_source.observe(self.on_date_source_change, names=\'value\')\n\n        self.yun_down_bt = widgets.Button(description=u\'\xe7\xbe\x8e\xe8\x82\xa1|A\xe8\x82\xa1|\xe6\xb8\xaf\xe8\x82\xa1|\xe5\xb8\x81\xe7\xb1\xbb|\xe6\x9c\x9f\xe8\xb4\xa76\xe5\xb9\xb4\xe6\x97\xa5k\', layout=widgets.Layout(width=\'50%\'),\n                                          button_style=\'info\')\n        self.yun_down_bt.on_click(self.run_yun_down)\n\n        self.run_kl_update_bt = widgets.Button(description=u\'\xe4\xbb\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0\', layout=widgets.Layout(width=\'50%\'),\n                                               button_style=\'danger\')\n        self.run_kl_update_bt.on_click(self.run_kl_update)\n        description = widgets.Textarea(\n            value=u\'\xe9\x9d\x9e\xe6\xb2\x99\xe7\x9b\x92\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe7\x89\xb9\xe5\x88\xab\xe6\x98\xaf\xe5\x9b\x9e\xe6\xb5\x8b\xe4\xba\xa4\xe6\x98\x93\xe5\xa4\x9a\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe5\x85\xa8\xe5\xb8\x82\xe5\x9c\xba\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\xe5\x9b\x9e\xe6\xb5\x8b\xe5\x89\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x9b\xb4\xe6\x96\xb0\xe3\x80\x82\\n\'\n                  u\'\xe5\xbb\xba\xe8\xae\xae\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbb\x8e\xe4\xba\x91\xe7\x9b\x98\xe4\xb8\x8b\xe8\xbd\xbd\xe5\x85\xa5\xe5\xba\x93\xe5\xae\x8c\xe6\xaf\x95\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xef\xbc\x8c\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe4\xbb\x8e\xe5\x90\x84\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe5\x86\x8d\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9a\x84\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x85\xa5\xe5\xba\x93\xe3\x80\x82\\n\'\n                  u\'abupy\xe5\x86\x85\xe7\xbd\xae\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe9\x83\xbd\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe7\x94\xa8\xe6\x88\xb7\xe5\xad\xa6\xe4\xb9\xa0\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x8d\xe8\x83\xbd\xe4\xbf\x9d\xe8\xaf\x81\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x80\xe7\x9b\xb4\xe9\x80\x9a\xe7\x95\x85\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe5\xa6\x82\xe6\x9e\x9c\xe7\x94\xa8\xe6\x88\xb7\xe5\xbe\x88\xe5\x9c\xa8\xe4\xb9\x8e\xe6\x95\xb0\xe6\x8d\xae\xe8\xb4\xa8\xe9\x87\x8f\xef\xbc\x8c\'\n                  u\'\xe6\xaf\x94\xe5\xa6\x82\xe6\x9c\x89\xe4\xba\x9b\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe4\xbc\x9a\xe6\x9c\x89\xe5\x89\x8d\xe5\xa4\x8d\xe6\x9d\x83\xe6\x95\xb0\xe6\x8d\xae\xe9\x94\x99\xe8\xaf\xaf\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe6\x9c\x89\xe4\xba\x9b\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe6\x88\x90\xe4\xba\xa4\xe9\x87\x8f\xe4\xb8\x8d\xe5\x87\x86\xe7\xa1\xae\xe7\xad\x89\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81\xe6\x8e\xa5\xe5\x85\xa5\xe7\x94\xa8\xe6\x88\xb7\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe3\x80\x82\\n\'\n                  u\'\xe6\x8e\xa5\xe5\x85\xa5\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe8\xaf\xb7\xe9\x98\x85\xe8\xaf\xbb\xe6\x95\x99\xe7\xa8\x8b\xe7\xac\xac19\xe8\x8a\x82\xe4\xb8\xad\xe7\x9b\xb8\xe5\x85\xb3\xe5\x86\x85\xe5\xae\xb9\',\n            disabled=False,\n            layout=widgets.Layout(height=\'200px\')\n        )\n        self.widget = widgets.VBox(\n            [description, self.market, tm_box, self.date_source, self.yun_down_bt, self.run_kl_update_bt])\n\n    # noinspection PyUnusedLocal\n    def run_yun_down(self, bt):\n        """"""\xe6\x89\x93\xe5\xbc\x80\xe6\xb5\x8f\xe8\xa7\x88\xe5\x99\xa8csv zip\xe5\x9c\xb0\xe5\x9d\x80\xe5\x87\x86\xe5\xa4\x87\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb8\x8b\xe8\xbd\xbd""""""\n        browser_down_csv_zip(open_browser=True)\n\n    # noinspection PyUnusedLocal\n    def run_kl_update(self, bt):\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\xbb\xe6\x8e\xa5\xe5\x8f\xa3""""""\n        n_folds = 2\n        start = None\n        end = None\n        if not self.run_years.disabled:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb9\xb4\xe5\x9b\x9e\xe6\xb5\x8b\xe6\xa8\xa1\xe5\xbc\x8f\n            n_folds = self.run_years.value\n        if not self.start.disabled:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe5\xbc\x80\xe5\xa7\x8b\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\n            start = self.start.value\n        if not self.end.disabled:\n            # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbb\x93\xe6\x9d\x9f\xe5\x9b\x9e\xe6\xb5\x8b\xe6\x97\xa5\xe6\x9c\x9f\n            end = self.end.value\n        market = ABuEnv.g_market_target\n\n        logging.info(u\'\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0{}\xe5\xb8\x82\xe5\x9c\xba{}-{}:{}\xe5\xb9\xb4, \xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90{}\'.format(\n            market.value, \'\' if start is None else start, \'\' if end is None else end, n_folds,\n            ABuEnv.g_market_source.value))\n        run_kl_update(start=start, end=end, n_folds=n_folds, market=market, n_jobs=10)\n        logging.info(u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0\xe5\xae\x8c\xe6\x88\x90\')\n\n    def time_mode_str(self):\n        """"""\xe5\xae\x9e\xe7\x8e\xb0\xe6\xb7\xb7\xe5\x85\xa5WidgetTimeModeMixin\xef\xbc\x8c\xe5\xa3\xb0\xe6\x98\x8e\xe6\x97\xb6\xe9\x97\xb4\xe6\xa8\xa1\xe5\x9d\x97\xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0""""""\n        return u\'\xe4\xb8\x8b\xe8\xbd\xbd\xe6\x9b\xb4\xe6\x96\xb0\'\n\n    def on_date_source_change(self, change):\n        """"""\xe6\x95\xb0\xe6\x8d\xae\xe6\xba\x90\xe7\x95\x8c\xe9\x9d\xa2\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x94\xb9\xe5\x8f\x98""""""\n        # \xe6\x94\xb9\xe5\x8f\x98\xe8\xae\xbe\xe7\xbd\xae\xe5\x80\xbc\n        ABuEnv.g_market_source = EMarketSourceType(self.current_date_source_dict[change[\'new\']])\n\n    def on_market_change(self, change):\n        """"""\xe5\x88\x87\xe6\x8d\xa2\xe5\xa4\xa7\xe7\x9b\x98\xe5\xb8\x82\xe5\x9c\xba""""""\n        ABuEnv.g_market_target = EMarketTargetType(change[\'new\'])\n\n        self.current_date_source_dict = self.date_source_market_map[ABuEnv.g_market_target.value]\n\n        options = list(self.current_date_source_dict.keys())\n        self.date_source.options = options\n        self.date_source.value = options[0]\n'"
abupy/WidgetBu/ABuWGVerifyTool.py,0,"b'# -*- encoding:utf-8 -*-\n""""""\xe7\xad\x96\xe7\x95\xa5\xe9\xaa\x8c\xe8\xaf\x81\xe5\xb7\xa5\xe5\x85\xb7\xe5\x9b\xbe\xe5\xbd\xa2\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96""""""\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport ipywidgets as widgets\n\nfrom ..WidgetBu.ABuWGBase import WidgetBase\nfrom ..WidgetBu.ABuWGGridSearch import WidgetGridSearch\nfrom ..WidgetBu.ABuWGCrossVal import WidgetCrossVal\n\n\n__author__ = \'\xe9\x98\xbf\xe5\xb8\x83\'\n__weixin__ = \'abu_quant\'\n\n\nclass WidgetVerifyTool(WidgetBase):\n    """"""\xe7\xad\x96\xe7\x95\xa5\xe9\xaa\x8c\xe8\xaf\x81\xe5\xb7\xa5\xe5\x85\xb7\xe4\xb8\xbb\xe7\x95\x8c\xe9\x9d\xa2\xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0""""""\n\n    def __init__(self):\n        self.grid_search = WidgetGridSearch()\n        self.cross_val = WidgetCrossVal()\n        sub_widget_tab = widgets.Tab()\n        sub_widget_tab.children = [self.grid_search.widget, self.cross_val.widget]\n        for ind, name in enumerate([u\'\xe6\x9c\x80\xe4\xbc\x98\xe5\x8f\x82\xe6\x95\xb0\', u\'\xe4\xba\xa4\xe5\x8f\x89\xe9\xaa\x8c\xe8\xaf\x81\']):\n            sub_widget_tab.set_title(ind, name)\n        self.widget = widgets.VBox([sub_widget_tab])\n'"
abupy/WidgetBu/__init__.py,0,"b""from __future__ import absolute_import\n\nfrom .ABuWGStockInfo import WidgetStockInfo, WidgetSearchStockInfo\nfrom .ABuWGBRunBase import WidgetRunTT\nfrom .ABuWGBSymbol import WidgetSymbolChoice\nfrom .ABuWGBRun import WidgetRunLoopBack\nfrom .ABuWGQuantTool import WidgetQuantTool\nfrom .ABuWGUpdate import WidgetUpdate\nfrom .ABuWGGridSearch import WidgetGridSearch\nfrom .ABuWGCrossVal import WidgetCrossVal\nfrom .ABuWGVerifyTool import WidgetVerifyTool\n\n__all__ = [\n    'WidgetRunLoopBack',\n    'WidgetQuantTool',\n\n    'WidgetStockInfo',\n    'WidgetSearchStockInfo',\n\n    'WidgetRunTT',\n    'WidgetSymbolChoice',\n    'WidgetUpdate',\n\n    'WidgetGridSearch',\n    'WidgetCrossVal',\n\n    'WidgetVerifyTool'\n]\n"""
abupy/ExtBu/empyrical/__init__.py,0,"b'#\n# Copyright 2016 Quantopian, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# flake8: noqa\n\nfrom ._version import get_versions\n__version__ = get_versions()[\'version\']\ndel get_versions\n\nfrom .stats import (\n    cum_returns,\n    cum_returns_final,\n    aggregate_returns,\n    max_drawdown,\n    annual_return,\n    annual_volatility,\n    calmar_ratio,\n    omega_ratio,\n    sharpe_ratio,\n    sortino_ratio,\n    downside_risk,\n    information_ratio,\n    alpha_beta,\n    alpha,\n    beta,\n    alpha_beta_aligned,\n    alpha_aligned,\n    beta_aligned,\n    stability_of_timeseries,\n    tail_ratio,\n    cagr,\n    DAILY,\n    WEEKLY,\n    MONTHLY,\n    YEARLY\n)\n'"
abupy/ExtBu/empyrical/_version.py,0,"b'\n# This file was generated by \'versioneer.py\' (0.16) from\n# revision-control system data, or from the parent directory name of an\n# unpacked source archive. Distribution tarballs contain a pre-generated copy\n# of this file.\n\nimport json\nimport sys\n\nversion_json = \'\'\'\n{\n ""dirty"": false,\n ""error"": null,\n ""full-revisionid"": ""5d38634e0d68e65699383d2a97edaf34ce91fada"",\n ""version"": ""0.2.1""\n}\n\'\'\'  # END VERSION_JSON\n\n\ndef get_versions():\n    return json.loads(version_json)\n'"
abupy/ExtBu/empyrical/stats.py,94,"b'#\n# Copyright 2016 Quantopian, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom __future__ import division\n\nfrom functools import wraps\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom six import iteritems\n\nfrom .utils import nanmean, nanstd, nanmin\n\n\nAPPROX_BDAYS_PER_MONTH = 21\nAPPROX_BDAYS_PER_YEAR = 252\n\nMONTHS_PER_YEAR = 12\nWEEKS_PER_YEAR = 52\n\nDAILY = \'daily\'\nWEEKLY = \'weekly\'\nMONTHLY = \'monthly\'\nYEARLY = \'yearly\'\n\nANNUALIZATION_FACTORS = {\n    DAILY: APPROX_BDAYS_PER_YEAR,\n    WEEKLY: WEEKS_PER_YEAR,\n    MONTHLY: MONTHS_PER_YEAR,\n    YEARLY: 1\n}\n\n\ndef _adjust_returns(returns, adjustment_factor):\n    """"""\n    Returns the returns series adjusted by adjustment_factor. Optimizes for the\n    case of adjustment_factor being 0 by returning returns itself, not a copy!\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n    adjustment_factor : pd.Series or np.ndarray or float or int\n\n    Returns\n    -------\n    pd.Series or np.ndarray\n    """"""\n    if isinstance(adjustment_factor, (float, int)) and adjustment_factor == 0:\n        return returns\n    return returns - adjustment_factor\n\n\ndef annualization_factor(period, annualization):\n    """"""\n    Return annualization factor from period entered or if a custom\n    value is passed in.\n\n    Parameters\n    ----------\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float\n        Annualization factor.\n    """"""\n    if annualization is None:\n        try:\n            factor = ANNUALIZATION_FACTORS[period]\n        except KeyError:\n            raise ValueError(\n                ""Period cannot be \'{}\'. ""\n                ""Can be \'{}\'."".format(\n                    period, ""\', \'"".join(ANNUALIZATION_FACTORS.keys())\n                )\n            )\n    else:\n        factor = annualization\n    return factor\n\n\ndef cum_returns(returns, starting_value=0):\n    """"""\n    Compute cumulative returns from simple returns.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Returns of the strategy as a percentage, noncumulative.\n         - Time series with decimal returns.\n         - Example:\n            2015-07-16    -0.012143\n            2015-07-17    0.045350\n            2015-07-20    0.030957\n            2015-07-21    0.004902.\n    starting_value : float, optional\n       The starting returns.\n\n    Returns\n    -------\n    pd.Series or np.ndarray\n        Series of cumulative returns.\n\n    Notes\n    -----\n    For increased numerical accuracy, convert input to log returns\n    where it is possible to sum instead of multiplying.\n    PI((1+r_i)) - 1 = exp(ln(PI(1+r_i)))     # x = exp(ln(x))\n                    = exp(SIGMA(ln(1+r_i))   # ln(a*b) = ln(a) + ln(b)\n    """"""\n    # df_price.pct_change() adds a nan in first position, we can use\n    # that to have cum_logarithmic_returns start at the origin so that\n    # df_cum.iloc[0] == starting_value\n    # Note that we can\'t add that ourselves as we don\'t know which dt\n    # to use.\n\n    if len(returns) < 1:\n        return type(returns)([])\n\n    if np.isnan(np.asanyarray(returns)[0]):\n        returns = returns.copy()\n        returns[0] = 0.\n\n    df_cum = np.exp(nancumsum(np.log1p(returns)))\n\n    if starting_value == 0:\n        return df_cum - 1\n    else:\n        return df_cum * starting_value\n\n\ndef cum_returns_final(returns, starting_value=0):\n    """"""\n    Compute total returns from simple returns.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Returns of the strategy as a percentage, noncumulative.\n         - Time series with decimal returns.\n         - Example:\n            2015-07-16    -0.012143\n            2015-07-17    0.045350\n            2015-07-20    0.030957\n            2015-07-21    0.004902.\n    starting_value : float, optional\n       The starting returns.\n\n    Returns\n    -------\n    float\n\n    """"""\n\n    if len(returns) == 0:\n        return np.nan\n\n    return cum_returns(np.asanyarray(returns),\n                       starting_value=starting_value)[-1]\n\n\ndef array_wrap(arg_name, _not_specified=object()):\n    """"""\n    Decorator for functions working on array_likes that ensures the type of\n    output matches that of the input, delegating to the input\'s __array_wrap__.\n\n    Parameters\n    ----------\n    arg_name : str\n\n        The name of the array_like arg to the wrapped function. Should be the\n        first positional parameter to the wrapped function.\n\n    """"""\n    def dec(f):\n        @wraps(f)\n        def _wrapit(*args, **kwds):\n            obj = kwds.get(arg_name, _not_specified)\n            if obj is _not_specified:\n                obj = args[0]\n\n            try:\n                wrap = obj.__array_wrap__\n            except AttributeError:\n                wrap = None\n            result = f(*args, **kwds)\n            if wrap:\n                if not isinstance(result, np.ndarray):\n                    result = np.asarray(result)\n                result = wrap(result)\n            return result\n        return _wrapit\n    return dec\n\n\n@array_wrap(\'a\')\ndef nancumsum(a, axis=None, dtype=None):\n    """"""\n    Return the cumulative sum of array elements over a given axis treating Not\n    a Numbers (NaNs) as zero.  The cumulative sum does not change when NaNs are\n    encountered and leading NaNs are replaced by zeros.\n\n    Handles a subset of the edge cases handled by the nancumsum added in numpy\n    1.12.0.\n\n    Parameters\n    ----------\n    a : np.ndarray or pd.Series\n\n        Input array.\n\n    axis : int, optional\n\n        Axis along which the cumulative sum is computed. The default\n        (None) is to compute the cumsum over the flattened array.\n\n    dtype : np.dtype, optional\n\n        Type of the returned array and of the accumulator in which the\n        elements are summed.  If `dtype` is not specified, it defaults\n        to the dtype of `a`, unless `a` has an integer dtype with a\n        precision less than that of the default platform integer.  In\n        that case, the default platform integer is used.\n\n    Returns\n    -------\n    nancumsum : np.ndarray or pd.Series\n\n        A new array that has the same size as a, and the same shape as a.\n\n    See Also\n    --------\n    numpy.cumsum : Cumulative sum across array propagating NaNs.\n\n    """"""\n    y = np.array(a, subok=True)\n    mask = np.isnan(a)\n    np.putmask(y, mask, 0.)\n    result = np.cumsum(y, axis=axis, dtype=dtype)\n    np.putmask(result, mask, np.nan)\n    return result\n\n\ndef aggregate_returns(returns, convert_to):\n    """"""\n    Aggregates returns by week, month, or year.\n\n    Parameters\n    ----------\n    returns : pd.Series\n       Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    convert_to : str\n        Can be \'weekly\', \'monthly\', or \'yearly\'.\n\n    Returns\n    -------\n    pd.Series\n        Aggregated returns.\n    """"""\n\n    def cumulate_returns(x):\n        return cum_returns(x).iloc[-1]\n\n    if convert_to == WEEKLY:\n        grouping = [lambda x: x.year, lambda x: x.isocalendar()[1]]\n    elif convert_to == MONTHLY:\n        grouping = [lambda x: x.year, lambda x: x.month]\n    elif convert_to == YEARLY:\n        grouping = [lambda x: x.year]\n    else:\n        raise ValueError(\n            \'convert_to must be {}, {} or {}\'.format(WEEKLY, MONTHLY, YEARLY)\n        )\n\n    return returns.groupby(grouping).apply(cumulate_returns)\n\n\ndef max_drawdown(returns):\n    """"""\n    Determines the maximum drawdown of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n\n    Returns\n    -------\n    float\n        Maximum drawdown.\n\n    Note\n    -----\n    See https://en.wikipedia.org/wiki/Drawdown_(economics) for more details.\n    """"""\n\n    if len(returns) < 1:\n        return np.nan\n\n    cumulative = cum_returns(returns, starting_value=100)\n    max_return = np.fmax.accumulate(cumulative)\n    return nanmin((cumulative - max_return) / max_return)\n\n\ndef annual_return(returns, period=DAILY, annualization=None):\n    """"""Determines the mean annual growth rate of returns.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Periodic returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float\n        Annual Return as CAGR (Compounded Annual Growth Rate).\n\n    """"""\n\n    if len(returns) < 1:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n\n    num_years = float(len(returns)) / ann_factor\n    start_value = 100\n    # Pass array to ensure index -1 looks up successfully.\n    end_value = cum_returns(np.asanyarray(returns),\n                            starting_value=start_value)[-1]\n    cum_returns_final = (end_value - start_value) / start_value\n    annual_return = (1. + cum_returns_final) ** (1. / num_years) - 1\n\n    return annual_return\n\n\ndef annual_volatility(returns, period=DAILY, alpha=2.0,\n                      annualization=None):\n    """"""\n    Determines the annual volatility of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Periodic returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    alpha : float, optional\n        Scaling relation (Levy stability exponent).\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float\n        Annual volatility.\n    """"""\n\n    if len(returns) < 2:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n\n    volatility = nanstd(returns, ddof=1) * (ann_factor ** (1.0 / alpha))\n\n    return volatility\n\n\ndef calmar_ratio(returns, period=DAILY, annualization=None):\n    """"""\n    Determines the Calmar ratio, or drawdown ratio, of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n\n    Returns\n    -------\n    float\n        Calmar ratio (drawdown ratio) as float. Returns np.nan if there is no\n        calmar ratio.\n\n    Note\n    -----\n    See https://en.wikipedia.org/wiki/Calmar_ratio for more details.\n    """"""\n\n    max_dd = max_drawdown(returns=returns)\n    if max_dd < 0:\n        temp = annual_return(\n            returns=returns,\n            period=period,\n            annualization=annualization\n        ) / abs(max_dd)\n    else:\n        return np.nan\n\n    if np.isinf(temp):\n        return np.nan\n\n    return temp\n\n\ndef omega_ratio(returns, risk_free=0.0, required_return=0.0,\n                annualization=APPROX_BDAYS_PER_YEAR):\n    """"""Determines the Omega ratio of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    risk_free : int, float\n        Constant risk-free return throughout the period\n    required_return : float, optional\n        Minimum acceptance return of the investor. Threshold over which to\n        consider positive vs negative returns. It will be converted to a\n        value appropriate for the period of the returns. E.g. An annual minimum\n        acceptable return of 100 will translate to a minimum acceptable\n        return of 0.018.\n    annualization : int, optional\n        Factor used to convert the required_return into a daily\n        value. Enter 1 if no time period conversion is necessary.\n\n    Returns\n    -------\n    float\n        Omega ratio.\n\n    Note\n    -----\n    See https://en.wikipedia.org/wiki/Omega_ratio for more details.\n\n    """"""\n\n    if len(returns) < 2:\n        return np.nan\n\n    if annualization == 1:\n        return_threshold = required_return\n    elif required_return <= -1:\n        return np.nan\n    else:\n        return_threshold = (1 + required_return) ** \\\n            (1. / annualization) - 1\n\n    returns_less_thresh = returns - risk_free - return_threshold\n\n    numer = sum(returns_less_thresh[returns_less_thresh > 0.0])\n    denom = -1.0 * sum(returns_less_thresh[returns_less_thresh < 0.0])\n\n    if denom > 0.0:\n        return numer / denom\n    else:\n        return np.nan\n\n\ndef sharpe_ratio(returns, risk_free=0, period=DAILY, annualization=None):\n    """"""\n    Determines the Sharpe ratio of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    risk_free : int, float\n        Constant risk-free return throughout the period.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float\n        Sharpe ratio.\n\n        np.nan\n            If insufficient length of returns or if if adjusted returns are 0.\n\n    Note\n    -----\n    See https://en.wikipedia.org/wiki/Sharpe_ratio for more details.\n\n    """"""\n\n    if len(returns) < 2:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n\n    returns_risk_adj = np.asanyarray(_adjust_returns(returns, risk_free))\n    returns_risk_adj = returns_risk_adj[~np.isnan(returns_risk_adj)]\n\n    if np.std(returns_risk_adj, ddof=1) == 0:\n        return np.nan\n\n    return np.mean(returns_risk_adj) / np.std(returns_risk_adj, ddof=1) * \\\n        np.sqrt(ann_factor)\n\n\ndef sortino_ratio(returns, required_return=0, period=DAILY,\n                  annualization=None, _downside_risk=None):\n    """"""\n    Determines the Sortino ratio of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray or pd.DataFrame\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    required_return: float / series\n        minimum acceptable return\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n    _downside_risk : float, optional\n        The downside risk of the given inputs, if known. Will be calculated if\n        not provided.\n\n    Returns\n    -------\n    float, pd.Series\n\n        depends on input type\n        series ==> float\n        DataFrame ==> pd.Series\n\n        Annualized Sortino ratio.\n\n    """"""\n\n    if len(returns) < 2:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n\n    adj_returns = _adjust_returns(returns, required_return)\n    mu = nanmean(adj_returns, axis=0)\n    dsr = (_downside_risk if _downside_risk is not None\n           else downside_risk(returns, required_return))\n    sortino = mu / dsr\n    return sortino * ann_factor\n\n\ndef downside_risk(returns, required_return=0, period=DAILY,\n                  annualization=None):\n    """"""\n    Determines the downside deviation below a threshold\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray or pd.DataFrame\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    required_return: float / series\n        minimum acceptable return\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float, pd.Series\n        depends on input type\n        series ==> float\n        DataFrame ==> pd.Series\n\n        Annualized downside deviation\n\n    """"""\n\n    if len(returns) < 1:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n\n    downside_diff = _adjust_returns(returns, required_return).copy()\n    mask = downside_diff > 0\n    downside_diff[mask] = 0.0\n    squares = np.square(downside_diff)\n    mean_squares = nanmean(squares, axis=0)\n    dside_risk = np.sqrt(mean_squares) * np.sqrt(ann_factor)\n\n    if len(returns.shape) == 2 and isinstance(returns, pd.DataFrame):\n        dside_risk = pd.Series(dside_risk, index=returns.columns)\n    return dside_risk\n\n\ndef information_ratio(returns, factor_returns):\n    """"""\n    Determines the Information ratio of a strategy.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns: float / series\n        Benchmark return to compare returns against.\n\n    Returns\n    -------\n    float\n        The information ratio.\n\n    Note\n    -----\n    See https://en.wikipedia.org/wiki/information_ratio for more details.\n\n    """"""\n    if len(returns) < 2:\n        return np.nan\n\n    active_return = _adjust_returns(returns, factor_returns)\n    tracking_error = nanstd(active_return, ddof=1)\n    if np.isnan(tracking_error):\n        return 0.0\n    if tracking_error == 0:\n        return np.nan\n    return nanmean(active_return) / tracking_error\n\n\ndef _aligned_series(*many_series):\n    """"""\n    Return a new list of series containing the data in the input series, but\n    with their indices aligned. NaNs will be filled in for missing values.\n\n    Parameters\n    ----------\n    many_series : list[pd.Series]\n\n    Returns\n    -------\n    aligned_series : list[pd.Series]\n\n        A new list of series containing the data in the input series, but\n        with their indices aligned. NaNs will be filled in for missing values.\n\n    """"""\n    return [series\n            for col, series in iteritems(pd.concat(many_series, axis=1))]\n\n\ndef alpha_beta(returns, factor_returns, risk_free=0.0, period=DAILY,\n               annualization=None):\n    """"""Calculates annualized alpha and beta.\n\n    Parameters\n    ----------\n    returns : pd.Series\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns : pd.Series\n         Daily noncumulative returns of the factor to which beta is\n         computed. Usually a benchmark such as the market.\n         - This is in the same style as returns.\n    risk_free : int, float, optional\n        Constant risk-free return throughout the period. For example, the\n        interest rate on a three month us treasury bill.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float\n        Alpha.\n    float\n        Beta.\n\n    """"""\n    if len(returns) < 2 or len(factor_returns) < 2:\n        return np.nan, np.nan\n\n    return alpha_beta_aligned(*_aligned_series(returns, factor_returns),\n                              risk_free=risk_free, period=period,\n                              annualization=annualization)\n\n\ndef alpha_beta_aligned(returns, factor_returns, risk_free=0.0, period=DAILY,\n                       annualization=None):\n    """"""Calculates annualized alpha and beta.\n\n    If they are pd.Series, expects returns and factor_returns have already\n    been aligned on their labels.  If np.ndarray, these arguments should have\n    the same shape.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns : pd.Series or np.ndarray\n         Daily noncumulative returns of the factor to which beta is\n         computed. Usually a benchmark such as the market.\n         - This is in the same style as returns.\n    risk_free : int, float, optional\n        Constant risk-free return throughout the period. For example, the\n        interest rate on a three month us treasury bill.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n\n    Returns\n    -------\n    float\n        Alpha.\n    float\n        Beta.\n\n    """"""\n    b = beta_aligned(returns, factor_returns, risk_free)\n    a = alpha_aligned(returns, factor_returns, risk_free, period,\n                      annualization, _beta=b)\n    return a, b\n\n\ndef alpha(returns, factor_returns, risk_free=0.0, period=DAILY,\n          annualization=None, _beta=None):\n    """"""Calculates annualized alpha.\n\n    Parameters\n    ----------\n    returns : pd.Series\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns : pd.Series\n         Daily noncumulative returns of the factor to which beta is\n         computed. Usually a benchmark such as the market.\n         - This is in the same style as returns.\n    risk_free : int, float, optional\n        Constant risk-free return throughout the period. For example, the\n        interest rate on a three month us treasury bill.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n        - See full explanation in :func:`~empyrical.stats.annual_return`.\n    _beta : float, optional\n        The beta for the given inputs, if already known. Will be calculated\n        internally if not provided.\n\n    Returns\n    -------\n    float\n        Alpha.\n    """"""\n    if len(returns) < 2 or len(factor_returns) < 2:\n        return np.nan\n\n    return alpha_aligned(*_aligned_series(returns, factor_returns),\n                         risk_free=risk_free, period=period,\n                         annualization=annualization, _beta=_beta)\n\n\ndef alpha_aligned(returns, factor_returns, risk_free=0.0, period=DAILY,\n                  annualization=None, _beta=None):\n    """"""Calculates annualized alpha.\n\n    If they are pd.Series, expects returns and factor_returns have already\n    been aligned on their labels.  If np.ndarray, these arguments should have\n    the same shape.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns : pd.Series or np.ndarray\n         Daily noncumulative returns of the factor to which beta is\n         computed. Usually a benchmark such as the market.\n         - This is in the same style as returns.\n    risk_free : int, float, optional\n        Constant risk-free return throughout the period. For example, the\n        interest rate on a three month us treasury bill.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n        - See full explanation in :func:`~empyrical.stats.annual_return`.\n    _beta : float, optional\n        The beta for the given inputs, if already known. Will be calculated\n        internally if not provided.\n\n    Returns\n    -------\n    float\n        Alpha.\n    """"""\n    if len(returns) < 2:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n\n    if _beta is None:\n        _beta = beta_aligned(returns, factor_returns, risk_free)\n\n    adj_returns = _adjust_returns(returns, risk_free)\n    adj_factor_returns = _adjust_returns(factor_returns, risk_free)\n    alpha_series = adj_returns - (_beta * adj_factor_returns)\n\n    return nanmean(alpha_series) * ann_factor\n\n\ndef beta(returns, factor_returns, risk_free=0.0):\n    """"""Calculates beta.\n\n    Parameters\n    ----------\n    returns : pd.Series\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns : pd.Series\n         Daily noncumulative returns of the factor to which beta is\n         computed. Usually a benchmark such as the market.\n         - This is in the same style as returns.\n    risk_free : int, float, optional\n        Constant risk-free return throughout the period. For example, the\n        interest rate on a three month us treasury bill.\n\n    Returns\n    -------\n    float\n        Beta.\n    """"""\n    if len(returns) < 2 or len(factor_returns) < 2:\n        return np.nan\n\n    return beta_aligned(*_aligned_series(returns, factor_returns),\n                        risk_free=risk_free)\n\n\ndef beta_aligned(returns, factor_returns, risk_free=0.0):\n    """"""Calculates beta.\n\n    If they are pd.Series, expects returns and factor_returns have already\n    been aligned on their labels.  If np.ndarray, these arguments should have\n    the same shape.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    factor_returns : pd.Series or np.ndarray\n         Daily noncumulative returns of the factor to which beta is\n         computed. Usually a benchmark such as the market.\n         - This is in the same style as returns.\n    risk_free : int, float, optional\n        Constant risk-free return throughout the period. For example, the\n        interest rate on a three month us treasury bill.\n\n    Returns\n    -------\n    float\n        Beta.\n    """"""\n\n    if len(returns) < 2 or len(factor_returns) < 2:\n        return np.nan\n    # Filter out dates with np.nan as a return value\n    joint = np.vstack([_adjust_returns(returns, risk_free),\n                       factor_returns])\n    joint = joint[:, ~np.isnan(joint).any(axis=0)]\n    if joint.shape[1] < 2:\n        return np.nan\n\n    cov = np.cov(joint, ddof=0)\n\n    if np.absolute(cov[1, 1]) < 1.0e-30:\n        return np.nan\n\n    return cov[0, 1] / cov[1, 1]\n\n\ndef stability_of_timeseries(returns):\n    """"""Determines R-squared of a linear fit to the cumulative\n    log returns. Computes an ordinary least squares linear fit,\n    and returns R-squared.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n\n    Returns\n    -------\n    float\n        R-squared.\n\n    """"""\n    if len(returns) < 2:\n        return np.nan\n\n    returns = np.asanyarray(returns)\n    returns = returns[~np.isnan(returns)]\n\n    cum_log_returns = np.log1p(returns).cumsum()\n    rhat = stats.linregress(np.arange(len(cum_log_returns)),\n                            cum_log_returns)[2]\n\n    return rhat ** 2\n\n\ndef tail_ratio(returns):\n    """"""Determines the ratio between the right (95%) and left tail (5%).\n\n    For example, a ratio of 0.25 means that losses are four times\n    as bad as profits.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n         - See full explanation in :func:`~empyrical.stats.cum_returns`.\n\n    Returns\n    -------\n    float\n        tail ratio\n\n    """"""\n\n    if len(returns) < 1:\n        return np.nan\n\n    returns = np.asanyarray(returns)\n    # Be tolerant of nan\'s\n    returns = returns[~np.isnan(returns)]\n    if len(returns) < 1:\n        return np.nan\n\n    return np.abs(np.percentile(returns, 95)) / \\\n        np.abs(np.percentile(returns, 5))\n\n\ndef cagr(returns, period=DAILY, annualization=None):\n    """"""\n    Compute compound annual growth rate.\n\n    Parameters\n    ----------\n    returns : pd.Series or np.ndarray\n        Daily returns of the strategy, noncumulative.\n        - See full explanation in :func:`~empyrical.stats.cum_returns`.\n    period : str, optional\n        Defines the periodicity of the \'returns\' data for purposes of\n        annualizing. Value ignored if `annualization` parameter is specified.\n        Defaults are:\n            \'monthly\':12\n            \'weekly\': 52\n            \'daily\': 252\n    annualization : int, optional\n        Used to suppress default values available in `period` to convert\n        returns into annual returns. Value should be the annual frequency of\n        `returns`.\n        - See full explanation in :func:`~empyrical.stats.annual_return`.\n\n    Returns\n    -------\n    float, np.nan\n        The CAGR value.\n\n    """"""\n    if len(returns) < 1:\n        return np.nan\n\n    ann_factor = annualization_factor(period, annualization)\n    no_years = len(returns) / float(ann_factor)\n    # Pass array to ensure index -1 looks up successfully.\n    ending_value = cum_returns(np.asanyarray(returns), starting_value=1)[-1]\n\n    return ending_value ** (1. / no_years) - 1\n\n\nSIMPLE_STAT_FUNCS = [\n    cum_returns_final,\n    annual_return,\n    annual_volatility,\n    sharpe_ratio,\n    calmar_ratio,\n    stability_of_timeseries,\n    max_drawdown,\n    omega_ratio,\n    sortino_ratio,\n    stats.skew,\n    stats.kurtosis,\n    tail_ratio,\n    cagr\n]\n\nFACTOR_STAT_FUNCS = [\n    information_ratio,\n    alpha,\n    beta,\n]\n'"
abupy/ExtBu/empyrical/utils.py,7,"b'#\n# Copyright 2016 Quantopian, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ntry:\n    # fast versions\n    import bottleneck as bn\n    nanmean = bn.nanmean\n    nanstd = bn.nanstd\n    nansum = bn.nansum\n    nanmax = bn.nanmax\n    nanmin = bn.nanmin\n    nanargmax = bn.nanargmax\n    nanargmin = bn.nanargmin\nexcept ImportError:\n    # slower numpy\n    import numpy as np\n    nanmean = np.nanmean\n    nanstd = np.nanstd\n    nansum = np.nansum\n    nanmax = np.nanmax\n    nanmin = np.nanmin\n    nanargmax = np.nanargmax\n    nanargmin = np.nanargmin\n'"
abupy/ExtBu/futures/__init__.py,0,"b'# Copyright 2009 Brian Quinlan. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n""""""Execute computations asynchronously using threads or processes.""""""\n\n__author__ = \'Brian Quinlan (brian@sweetapp.com)\'\n\nfrom concurrent.futures._base import (FIRST_COMPLETED,\n                                      FIRST_EXCEPTION,\n                                      ALL_COMPLETED,\n                                      CancelledError,\n                                      TimeoutError,\n                                      Future,\n                                      Executor,\n                                      wait,\n                                      as_completed)\nfrom concurrent.futures.thread import ThreadPoolExecutor\n\ntry:\n    from concurrent.futures.process import ProcessPoolExecutor\nexcept ImportError:\n    # some platforms don\'t have multiprocessing\n    pass\n'"
abupy/ExtBu/futures/_base.py,0,"b'# Copyright 2009 Brian Quinlan. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\nimport collections\nimport logging\nimport threading\nimport itertools\nimport time\n\n__author__ = \'Brian Quinlan (brian@sweetapp.com)\'\n\nFIRST_COMPLETED = \'FIRST_COMPLETED\'\nFIRST_EXCEPTION = \'FIRST_EXCEPTION\'\nALL_COMPLETED = \'ALL_COMPLETED\'\n_AS_COMPLETED = \'_AS_COMPLETED\'\n\n# Possible future states (for internal use by the futures package).\nPENDING = \'PENDING\'\nRUNNING = \'RUNNING\'\n# The future was cancelled by the user...\nCANCELLED = \'CANCELLED\'\n# ...and _Waiter.add_cancelled() was called by a worker.\nCANCELLED_AND_NOTIFIED = \'CANCELLED_AND_NOTIFIED\'\nFINISHED = \'FINISHED\'\n\n_FUTURE_STATES = [\n    PENDING,\n    RUNNING,\n    CANCELLED,\n    CANCELLED_AND_NOTIFIED,\n    FINISHED\n]\n\n_STATE_TO_DESCRIPTION_MAP = {\n    PENDING: ""pending"",\n    RUNNING: ""running"",\n    CANCELLED: ""cancelled"",\n    CANCELLED_AND_NOTIFIED: ""cancelled"",\n    FINISHED: ""finished""\n}\n\n# Logger for internal use by the futures package.\nLOGGER = logging.getLogger(""concurrent.futures"")\n\nclass Error(Exception):\n    """"""Base class for all future-related exceptions.""""""\n    pass\n\nclass CancelledError(Error):\n    """"""The Future was cancelled.""""""\n    pass\n\nclass TimeoutError(Error):\n    """"""The operation exceeded the given deadline.""""""\n    pass\n\nclass _Waiter(object):\n    """"""Provides the event that wait() and as_completed() block on.""""""\n    def __init__(self):\n        self.event = threading.Event()\n        self.finished_futures = []\n\n    def add_result(self, future):\n        self.finished_futures.append(future)\n\n    def add_exception(self, future):\n        self.finished_futures.append(future)\n\n    def add_cancelled(self, future):\n        self.finished_futures.append(future)\n\nclass _AsCompletedWaiter(_Waiter):\n    """"""Used by as_completed().""""""\n\n    def __init__(self):\n        super(_AsCompletedWaiter, self).__init__()\n        self.lock = threading.Lock()\n\n    def add_result(self, future):\n        with self.lock:\n            super(_AsCompletedWaiter, self).add_result(future)\n            self.event.set()\n\n    def add_exception(self, future):\n        with self.lock:\n            super(_AsCompletedWaiter, self).add_exception(future)\n            self.event.set()\n\n    def add_cancelled(self, future):\n        with self.lock:\n            super(_AsCompletedWaiter, self).add_cancelled(future)\n            self.event.set()\n\nclass _FirstCompletedWaiter(_Waiter):\n    """"""Used by wait(return_when=FIRST_COMPLETED).""""""\n\n    def add_result(self, future):\n        super(_FirstCompletedWaiter, self).add_result(future)\n        self.event.set()\n\n    def add_exception(self, future):\n        super(_FirstCompletedWaiter, self).add_exception(future)\n        self.event.set()\n\n    def add_cancelled(self, future):\n        super(_FirstCompletedWaiter, self).add_cancelled(future)\n        self.event.set()\n\nclass _AllCompletedWaiter(_Waiter):\n    """"""Used by wait(return_when=FIRST_EXCEPTION and ALL_COMPLETED).""""""\n\n    def __init__(self, num_pending_calls, stop_on_exception):\n        self.num_pending_calls = num_pending_calls\n        self.stop_on_exception = stop_on_exception\n        self.lock = threading.Lock()\n        super(_AllCompletedWaiter, self).__init__()\n\n    def _decrement_pending_calls(self):\n        with self.lock:\n            self.num_pending_calls -= 1\n            if not self.num_pending_calls:\n                self.event.set()\n\n    def add_result(self, future):\n        super(_AllCompletedWaiter, self).add_result(future)\n        self._decrement_pending_calls()\n\n    def add_exception(self, future):\n        super(_AllCompletedWaiter, self).add_exception(future)\n        if self.stop_on_exception:\n            self.event.set()\n        else:\n            self._decrement_pending_calls()\n\n    def add_cancelled(self, future):\n        super(_AllCompletedWaiter, self).add_cancelled(future)\n        self._decrement_pending_calls()\n\nclass _AcquireFutures(object):\n    """"""A context manager that does an ordered acquire of Future conditions.""""""\n\n    def __init__(self, futures):\n        self.futures = sorted(futures, key=id)\n\n    def __enter__(self):\n        for future in self.futures:\n            future._condition.acquire()\n\n    def __exit__(self, *args):\n        for future in self.futures:\n            future._condition.release()\n\ndef _create_and_install_waiters(fs, return_when):\n    if return_when == _AS_COMPLETED:\n        waiter = _AsCompletedWaiter()\n    elif return_when == FIRST_COMPLETED:\n        waiter = _FirstCompletedWaiter()\n    else:\n        pending_count = sum(\n                f._state not in [CANCELLED_AND_NOTIFIED, FINISHED] for f in fs)\n\n        if return_when == FIRST_EXCEPTION:\n            waiter = _AllCompletedWaiter(pending_count, stop_on_exception=True)\n        elif return_when == ALL_COMPLETED:\n            waiter = _AllCompletedWaiter(pending_count, stop_on_exception=False)\n        else:\n            raise ValueError(""Invalid return condition: %r"" % return_when)\n\n    for f in fs:\n        f._waiters.append(waiter)\n\n    return waiter\n\ndef as_completed(fs, timeout=None):\n    """"""An iterator over the given futures that yields each as it completes.\n\n    Args:\n        fs: The sequence of Futures (possibly created by different Executors) to\n            iterate over.\n        timeout: The maximum number of seconds to wait. If None, then there\n            is no limit on the wait time.\n\n    Returns:\n        An iterator that yields the given Futures as they complete (finished or\n        cancelled). If any given Futures are duplicated, they will be returned\n        once.\n\n    Raises:\n        TimeoutError: If the entire result iterator could not be generated\n            before the given timeout.\n    """"""\n    if timeout is not None:\n        end_time = timeout + time.time()\n\n    fs = set(fs)\n    with _AcquireFutures(fs):\n        finished = set(\n                f for f in fs\n                if f._state in [CANCELLED_AND_NOTIFIED, FINISHED])\n        pending = fs - finished\n        waiter = _create_and_install_waiters(fs, _AS_COMPLETED)\n\n    try:\n        for future in finished:\n            yield future\n\n        while pending:\n            if timeout is None:\n                wait_timeout = None\n            else:\n                wait_timeout = end_time - time.time()\n                if wait_timeout < 0:\n                    raise TimeoutError(\n                            \'%d (of %d) futures unfinished\' % (\n                            len(pending), len(fs)))\n\n            waiter.event.wait(wait_timeout)\n\n            with waiter.lock:\n                finished = waiter.finished_futures\n                waiter.finished_futures = []\n                waiter.event.clear()\n\n            for future in finished:\n                yield future\n                pending.remove(future)\n\n    finally:\n        for f in fs:\n            with f._condition:\n                f._waiters.remove(waiter)\n\nDoneAndNotDoneFutures = collections.namedtuple(\n        \'DoneAndNotDoneFutures\', \'done not_done\')\ndef wait(fs, timeout=None, return_when=ALL_COMPLETED):\n    """"""Wait for the futures in the given sequence to complete.\n\n    Args:\n        fs: The sequence of Futures (possibly created by different Executors) to\n            wait upon.\n        timeout: The maximum number of seconds to wait. If None, then there\n            is no limit on the wait time.\n        return_when: Indicates when this function should return. The options\n            are:\n\n            FIRST_COMPLETED - Return when any future finishes or is\n                              cancelled.\n            FIRST_EXCEPTION - Return when any future finishes by raising an\n                              exception. If no future raises an exception\n                              then it is equivalent to ALL_COMPLETED.\n            ALL_COMPLETED -   Return when all futures finish or are cancelled.\n\n    Returns:\n        A named 2-tuple of sets. The first set, named \'done\', contains the\n        futures that completed (is finished or cancelled) before the wait\n        completed. The second set, named \'not_done\', contains uncompleted\n        futures.\n    """"""\n    with _AcquireFutures(fs):\n        done = set(f for f in fs\n                   if f._state in [CANCELLED_AND_NOTIFIED, FINISHED])\n        not_done = set(fs) - done\n\n        if (return_when == FIRST_COMPLETED) and done:\n            return DoneAndNotDoneFutures(done, not_done)\n        elif (return_when == FIRST_EXCEPTION) and done:\n            if any(f for f in done\n                   if not f.cancelled() and f.exception() is not None):\n                return DoneAndNotDoneFutures(done, not_done)\n\n        if len(done) == len(fs):\n            return DoneAndNotDoneFutures(done, not_done)\n\n        waiter = _create_and_install_waiters(fs, return_when)\n\n    waiter.event.wait(timeout)\n    for f in fs:\n        with f._condition:\n            f._waiters.remove(waiter)\n\n    done.update(waiter.finished_futures)\n    return DoneAndNotDoneFutures(done, set(fs) - done)\n\nclass Future(object):\n    """"""Represents the result of an asynchronous computation.""""""\n\n    def __init__(self):\n        """"""Initializes the future. Should not be called by clients.""""""\n        self._condition = threading.Condition()\n        self._state = PENDING\n        self._result = None\n        self._exception = None\n        self._traceback = None\n        self._waiters = []\n        self._done_callbacks = []\n\n    def _invoke_callbacks(self):\n        for callback in self._done_callbacks:\n            try:\n                callback(self)\n            except Exception:\n                LOGGER.exception(\'exception calling callback for %r\', self)\n\n    def __repr__(self):\n        with self._condition:\n            if self._state == FINISHED:\n                if self._exception:\n                    return \'<Future at %s state=%s raised %s>\' % (\n                        hex(id(self)),\n                        _STATE_TO_DESCRIPTION_MAP[self._state],\n                        self._exception.__class__.__name__)\n                else:\n                    return \'<Future at %s state=%s returned %s>\' % (\n                        hex(id(self)),\n                        _STATE_TO_DESCRIPTION_MAP[self._state],\n                        self._result.__class__.__name__)\n            return \'<Future at %s state=%s>\' % (\n                    hex(id(self)),\n                   _STATE_TO_DESCRIPTION_MAP[self._state])\n\n    def cancel(self):\n        """"""Cancel the future if possible.\n\n        Returns True if the future was cancelled, False otherwise. A future\n        cannot be cancelled if it is running or has already completed.\n        """"""\n        with self._condition:\n            if self._state in [RUNNING, FINISHED]:\n                return False\n\n            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\n                return True\n\n            self._state = CANCELLED\n            self._condition.notify_all()\n\n        self._invoke_callbacks()\n        return True\n\n    def cancelled(self):\n        """"""Return True if the future has cancelled.""""""\n        with self._condition:\n            return self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]\n\n    def running(self):\n        """"""Return True if the future is currently executing.""""""\n        with self._condition:\n            return self._state == RUNNING\n\n    def done(self):\n        """"""Return True of the future was cancelled or finished executing.""""""\n        with self._condition:\n            return self._state in [CANCELLED, CANCELLED_AND_NOTIFIED, FINISHED]\n\n    def __get_result(self):\n        if self._exception:\n            # raise type(self._exception), self._exception, self._traceback\n            raise self._exception\n        else:\n            return self._result\n\n    def add_done_callback(self, fn):\n        """"""Attaches a callable that will be called when the future finishes.\n\n        Args:\n            fn: A callable that will be called with this future as its only\n                argument when the future completes or is cancelled. The callable\n                will always be called by a thread in the same process in which\n                it was added. If the future has already completed or been\n                cancelled then the callable will be called immediately. These\n                callables are called in the order that they were added.\n        """"""\n        with self._condition:\n            if self._state not in [CANCELLED, CANCELLED_AND_NOTIFIED, FINISHED]:\n                self._done_callbacks.append(fn)\n                return\n        fn(self)\n\n    def result(self, timeout=None):\n        """"""Return the result of the call that the future represents.\n\n        Args:\n            timeout: The number of seconds to wait for the result if the future\n                isn\'t done. If None, then there is no limit on the wait time.\n\n        Returns:\n            The result of the call that the future represents.\n\n        Raises:\n            CancelledError: If the future was cancelled.\n            TimeoutError: If the future didn\'t finish executing before the given\n                timeout.\n            Exception: If the call raised then that exception will be raised.\n        """"""\n        with self._condition:\n            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\n                raise CancelledError()\n            elif self._state == FINISHED:\n                return self.__get_result()\n\n            self._condition.wait(timeout)\n\n            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\n                raise CancelledError()\n            elif self._state == FINISHED:\n                return self.__get_result()\n            else:\n                raise TimeoutError()\n\n    def exception_info(self, timeout=None):\n        """"""Return a tuple of (exception, traceback) raised by the call that the\n        future represents.\n\n        Args:\n            timeout: The number of seconds to wait for the exception if the\n                future isn\'t done. If None, then there is no limit on the wait\n                time.\n\n        Returns:\n            The exception raised by the call that the future represents or None\n            if the call completed without raising.\n\n        Raises:\n            CancelledError: If the future was cancelled.\n            TimeoutError: If the future didn\'t finish executing before the given\n                timeout.\n        """"""\n        with self._condition:\n            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\n                raise CancelledError()\n            elif self._state == FINISHED:\n                return self._exception, self._traceback\n\n            self._condition.wait(timeout)\n\n            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\n                raise CancelledError()\n            elif self._state == FINISHED:\n                return self._exception, self._traceback\n            else:\n                raise TimeoutError()\n\n    def exception(self, timeout=None):\n        """"""Return the exception raised by the call that the future represents.\n\n        Args:\n            timeout: The number of seconds to wait for the exception if the\n                future isn\'t done. If None, then there is no limit on the wait\n                time.\n\n        Returns:\n            The exception raised by the call that the future represents or None\n            if the call completed without raising.\n\n        Raises:\n            CancelledError: If the future was cancelled.\n            TimeoutError: If the future didn\'t finish executing before the given\n                timeout.\n        """"""\n        return self.exception_info(timeout)[0]\n\n    # The following methods should only be used by Executors and in tests.\n    def set_running_or_notify_cancel(self):\n        """"""Mark the future as running or process any cancel notifications.\n\n        Should only be used by Executor implementations and unit tests.\n\n        If the future has been cancelled (cancel() was called and returned\n        True) then any threads waiting on the future completing (though calls\n        to as_completed() or wait()) are notified and False is returned.\n\n        If the future was not cancelled then it is put in the running state\n        (future calls to running() will return True) and True is returned.\n\n        This method should be called by Executor implementations before\n        executing the work associated with this future. If this method returns\n        False then the work should not be executed.\n\n        Returns:\n            False if the Future was cancelled, True otherwise.\n\n        Raises:\n            RuntimeError: if this method was already called or if set_result()\n                or set_exception() was called.\n        """"""\n        with self._condition:\n            if self._state == CANCELLED:\n                self._state = CANCELLED_AND_NOTIFIED\n                for waiter in self._waiters:\n                    waiter.add_cancelled(self)\n                # self._condition.notify_all() is not necessary because\n                # self.cancel() triggers a notification.\n                return False\n            elif self._state == PENDING:\n                self._state = RUNNING\n                return True\n            else:\n                LOGGER.critical(\'Future %s in unexpected state: %s\',\n                                id(self),\n                                self._state)\n                raise RuntimeError(\'Future in unexpected state\')\n\n    def set_result(self, result):\n        """"""Sets the return value of work associated with the future.\n\n        Should only be used by Executor implementations and unit tests.\n        """"""\n        with self._condition:\n            self._result = result\n            self._state = FINISHED\n            for waiter in self._waiters:\n                waiter.add_result(self)\n            self._condition.notify_all()\n        self._invoke_callbacks()\n\n    def set_exception_info(self, exception, traceback):\n        """"""Sets the result of the future as being the given exception\n        and traceback.\n\n        Should only be used by Executor implementations and unit tests.\n        """"""\n        with self._condition:\n            self._exception = exception\n            self._traceback = traceback\n            self._state = FINISHED\n            for waiter in self._waiters:\n                waiter.add_exception(self)\n            self._condition.notify_all()\n        self._invoke_callbacks()\n\n    def set_exception(self, exception):\n        """"""Sets the result of the future as being the given exception.\n\n        Should only be used by Executor implementations and unit tests.\n        """"""\n        self.set_exception_info(exception, None)\n\nclass Executor(object):\n    """"""This is an abstract base class for concrete asynchronous executors.""""""\n\n    def submit(self, fn, *args, **kwargs):\n        """"""Submits a callable to be executed with the given arguments.\n\n        Schedules the callable to be executed as fn(*args, **kwargs) and returns\n        a Future instance representing the execution of the callable.\n\n        Returns:\n            A Future representing the given call.\n        """"""\n        raise NotImplementedError()\n\n    def map(self, fn, *iterables, **kwargs):\n        """"""Returns a iterator equivalent to map(fn, iter).\n\n        Args:\n            fn: A callable that will take as many arguments as there are\n                passed iterables.\n            timeout: The maximum number of seconds to wait. If None, then there\n                is no limit on the wait time.\n\n        Returns:\n            An iterator equivalent to: map(func, *iterables) but the calls may\n            be evaluated out-of-order.\n\n        Raises:\n            TimeoutError: If the entire result iterator could not be generated\n                before the given timeout.\n            Exception: If fn(*args) raises for any values.\n        """"""\n        timeout = kwargs.get(\'timeout\')\n        if timeout is not None:\n            end_time = timeout + time.time()\n\n        fs = [self.submit(fn, *args) for args in itertools.izip(*iterables)]\n\n        # Yield must be hidden in closure so that the futures are submitted\n        # before the first iterator value is required.\n        def result_iterator():\n            try:\n                for future in fs:\n                    if timeout is None:\n                        yield future.result()\n                    else:\n                        yield future.result(end_time - time.time())\n            finally:\n                for future in fs:\n                    future.cancel()\n        return result_iterator()\n\n    def shutdown(self, wait=True):\n        """"""Clean-up the resources associated with the Executor.\n\n        It is safe to call this method several times. Otherwise, no other\n        methods can be called after this one.\n\n        Args:\n            wait: If True then shutdown will not return until all running\n                futures have finished executing and the resources used by the\n                executor have been reclaimed.\n        """"""\n        pass\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.shutdown(wait=True)\n        return False\n'"
abupy/ExtBu/futures/process.py,0,"b'# Copyright 2009 Brian Quinlan. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n""""""Implements ProcessPoolExecutor.\n\nThe follow diagram and text describe the data-flow through the system:\n\n|======================= In-process =====================|== Out-of-process ==|\n\n+----------+     +----------+       +--------+     +-----------+    +---------+\n|          |  => | Work Ids |    => |        |  => | Call Q    | => |         |\n|          |     +----------+       |        |     +-----------+    |         |\n|          |     | ...      |       |        |     | ...       |    |         |\n|          |     | 6        |       |        |     | 5, call() |    |         |\n|          |     | 7        |       |        |     | ...       |    |         |\n| Process  |     | ...      |       | Local  |     +-----------+    | Process |\n|  Pool    |     +----------+       | Worker |                      |  #1..n  |\n| Executor |                        | Thread |                      |         |\n|          |     +----------- +     |        |     +-----------+    |         |\n|          | <=> | Work Items | <=> |        | <=  | Result Q  | <= |         |\n|          |     +------------+     |        |     +-----------+    |         |\n|          |     | 6: call()  |     |        |     | ...       |    |         |\n|          |     |    future  |     |        |     | 4, result |    |         |\n|          |     | ...        |     |        |     | 3, except |    |         |\n+----------+     +------------+     +--------+     +-----------+    +---------+\n\nExecutor.submit() called:\n- creates a uniquely numbered _WorkItem and adds it to the ""Work Items"" dict\n- adds the id of the _WorkItem to the ""Work Ids"" queue\n\nLocal worker thread:\n- reads work ids from the ""Work Ids"" queue and looks up the corresponding\n  WorkItem from the ""Work Items"" dict: if the work item has been cancelled then\n  it is simply removed from the dict, otherwise it is repackaged as a\n  _CallItem and put in the ""Call Q"". New _CallItems are put in the ""Call Q""\n  until ""Call Q"" is full. NOTE: the size of the ""Call Q"" is kept small because\n  calls placed in the ""Call Q"" can no longer be cancelled with Future.cancel().\n- reads _ResultItems from ""Result Q"", updates the future stored in the\n  ""Work Items"" dict and deletes the dict entry\n\nProcess #1..n:\n- reads _CallItems from ""Call Q"", executes the calls, and puts the resulting\n  _ResultItems in ""Request Q""\n""""""\n\nimport atexit\nfrom concurrent.futures import _base\nimport Queue as queue\nimport multiprocessing\nimport threading\nimport weakref\nimport sys\n\n__author__ = \'Brian Quinlan (brian@sweetapp.com)\'\n\n# Workers are created as daemon threads and processes. This is done to allow the\n# interpreter to exit when there are still idle processes in a\n# ProcessPoolExecutor\'s process pool (i.e. shutdown() was not called). However,\n# allowing workers to die with the interpreter has two undesirable properties:\n#   - The workers would still be running during interpretor shutdown,\n#     meaning that they would fail in unpredictable ways.\n#   - The workers could be killed while evaluating a work item, which could\n#     be bad if the callable being evaluated has external side-effects e.g.\n#     writing to a file.\n#\n# To work around this problem, an exit handler is installed which tells the\n# workers to exit when their work queues are empty and then waits until the\n# threads/processes finish.\n\n_threads_queues = weakref.WeakKeyDictionary()\n_shutdown = False\n\ndef _python_exit():\n    global _shutdown\n    _shutdown = True\n    items = list(_threads_queues.items()) if _threads_queues else ()\n    for t, q in items:\n        q.put(None)\n    for t, q in items:\n        t.join(sys.maxint)\n\n# Controls how many more calls than processes will be queued in the call queue.\n# A smaller number will mean that processes spend more time idle waiting for\n# work while a larger number will make Future.cancel() succeed less frequently\n# (Futures in the call queue cannot be cancelled).\nEXTRA_QUEUED_CALLS = 1\n\nclass _WorkItem(object):\n    def __init__(self, future, fn, args, kwargs):\n        self.future = future\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n\nclass _ResultItem(object):\n    def __init__(self, work_id, exception=None, result=None):\n        self.work_id = work_id\n        self.exception = exception\n        self.result = result\n\nclass _CallItem(object):\n    def __init__(self, work_id, fn, args, kwargs):\n        self.work_id = work_id\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n\ndef _process_worker(call_queue, result_queue):\n    """"""Evaluates calls from call_queue and places the results in result_queue.\n\n    This worker is run in a separate process.\n\n    Args:\n        call_queue: A multiprocessing.Queue of _CallItems that will be read and\n            evaluated by the worker.\n        result_queue: A multiprocessing.Queue of _ResultItems that will written\n            to by the worker.\n        shutdown: A multiprocessing.Event that will be set as a signal to the\n            worker that it should exit when call_queue is empty.\n    """"""\n    while True:\n        call_item = call_queue.get(block=True)\n        if call_item is None:\n            # Wake up queue management thread\n            result_queue.put(None)\n            return\n        try:\n            r = call_item.fn(*call_item.args, **call_item.kwargs)\n        except BaseException:\n            e = sys.exc_info()[1]\n            result_queue.put(_ResultItem(call_item.work_id,\n                                         exception=e))\n        else:\n            result_queue.put(_ResultItem(call_item.work_id,\n                                         result=r))\n\ndef _add_call_item_to_queue(pending_work_items,\n                            work_ids,\n                            call_queue):\n    """"""Fills call_queue with _WorkItems from pending_work_items.\n\n    This function never blocks.\n\n    Args:\n        pending_work_items: A dict mapping work ids to _WorkItems e.g.\n            {5: <_WorkItem...>, 6: <_WorkItem...>, ...}\n        work_ids: A queue.Queue of work ids e.g. Queue([5, 6, ...]). Work ids\n            are consumed and the corresponding _WorkItems from\n            pending_work_items are transformed into _CallItems and put in\n            call_queue.\n        call_queue: A multiprocessing.Queue that will be filled with _CallItems\n            derived from _WorkItems.\n    """"""\n    while True:\n        if call_queue.full():\n            return\n        try:\n            work_id = work_ids.get(block=False)\n        except queue.Empty:\n            return\n        else:\n            work_item = pending_work_items[work_id]\n\n            if work_item.future.set_running_or_notify_cancel():\n                call_queue.put(_CallItem(work_id,\n                                         work_item.fn,\n                                         work_item.args,\n                                         work_item.kwargs),\n                               block=True)\n            else:\n                del pending_work_items[work_id]\n                continue\n\ndef _queue_management_worker(executor_reference,\n                             processes,\n                             pending_work_items,\n                             work_ids_queue,\n                             call_queue,\n                             result_queue):\n    """"""Manages the communication between this process and the worker processes.\n\n    This function is run in a local thread.\n\n    Args:\n        executor_reference: A weakref.ref to the ProcessPoolExecutor that owns\n            this thread. Used to determine if the ProcessPoolExecutor has been\n            garbage collected and that this function can exit.\n        process: A list of the multiprocessing.Process instances used as\n            workers.\n        pending_work_items: A dict mapping work ids to _WorkItems e.g.\n            {5: <_WorkItem...>, 6: <_WorkItem...>, ...}\n        work_ids_queue: A queue.Queue of work ids e.g. Queue([5, 6, ...]).\n        call_queue: A multiprocessing.Queue that will be filled with _CallItems\n            derived from _WorkItems for processing by the process workers.\n        result_queue: A multiprocessing.Queue of _ResultItems generated by the\n            process workers.\n    """"""\n    nb_shutdown_processes = [0]\n    def shutdown_one_process():\n        """"""Tell a worker to terminate, which will in turn wake us again""""""\n        call_queue.put(None)\n        nb_shutdown_processes[0] += 1\n    while True:\n        _add_call_item_to_queue(pending_work_items,\n                                work_ids_queue,\n                                call_queue)\n\n        result_item = result_queue.get(block=True)\n        if result_item is not None:\n            work_item = pending_work_items[result_item.work_id]\n            del pending_work_items[result_item.work_id]\n\n            if result_item.exception:\n                work_item.future.set_exception(result_item.exception)\n            else:\n                work_item.future.set_result(result_item.result)\n            # Delete references to object. See issue16284\n            del work_item\n        # Check whether we should start shutting down.\n        executor = executor_reference()\n        # No more work items can be added if:\n        #   - The interpreter is shutting down OR\n        #   - The executor that owns this worker has been collected OR\n        #   - The executor that owns this worker has been shutdown.\n        if _shutdown or executor is None or executor._shutdown_thread:\n            # Since no new work items can be added, it is safe to shutdown\n            # this thread if there are no pending work items.\n            if not pending_work_items:\n                while nb_shutdown_processes[0] < len(processes):\n                    shutdown_one_process()\n                # If .join() is not called on the created processes then\n                # some multiprocessing.Queue methods may deadlock on Mac OS\n                # X.\n                for p in processes:\n                    p.join()\n                call_queue.close()\n                return\n        del executor\n\n_system_limits_checked = False\n_system_limited = None\ndef _check_system_limits():\n    global _system_limits_checked, _system_limited\n    if _system_limits_checked:\n        if _system_limited:\n            raise NotImplementedError(_system_limited)\n    _system_limits_checked = True\n    try:\n        import os\n        nsems_max = os.sysconf(""SC_SEM_NSEMS_MAX"")\n    except (AttributeError, ValueError):\n        # sysconf not available or setting not available\n        return\n    if nsems_max == -1:\n        # indetermine limit, assume that limit is determined\n        # by available memory only\n        return\n    if nsems_max >= 256:\n        # minimum number of semaphores available\n        # according to POSIX\n        return\n    _system_limited = ""system provides too few semaphores (%d available, 256 necessary)"" % nsems_max\n    raise NotImplementedError(_system_limited)\n\nclass ProcessPoolExecutor(_base.Executor):\n    def __init__(self, max_workers=None):\n        """"""Initializes a new ProcessPoolExecutor instance.\n\n        Args:\n            max_workers: The maximum number of processes that can be used to\n                execute the given calls. If None or not given then as many\n                worker processes will be created as the machine has processors.\n        """"""\n        _check_system_limits()\n\n        if max_workers is None:\n            self._max_workers = multiprocessing.cpu_count()\n        else:\n            self._max_workers = max_workers\n\n        # Make the call queue slightly larger than the number of processes to\n        # prevent the worker processes from idling. But don\'t make it too big\n        # because futures in the call queue cannot be cancelled.\n        self._call_queue = multiprocessing.Queue(self._max_workers +\n                                                 EXTRA_QUEUED_CALLS)\n        self._result_queue = multiprocessing.Queue()\n        self._work_ids = queue.Queue()\n        self._queue_management_thread = None\n        self._processes = set()\n\n        # Shutdown is a two-step process.\n        self._shutdown_thread = False\n        self._shutdown_lock = threading.Lock()\n        self._queue_count = 0\n        self._pending_work_items = {}\n\n    def _start_queue_management_thread(self):\n        # When the executor gets lost, the weakref callback will wake up\n        # the queue management thread.\n        def weakref_cb(_, q=self._result_queue):\n            q.put(None)\n        if self._queue_management_thread is None:\n            self._queue_management_thread = threading.Thread(\n                    target=_queue_management_worker,\n                    args=(weakref.ref(self, weakref_cb),\n                          self._processes,\n                          self._pending_work_items,\n                          self._work_ids,\n                          self._call_queue,\n                          self._result_queue))\n            self._queue_management_thread.daemon = True\n            self._queue_management_thread.start()\n            _threads_queues[self._queue_management_thread] = self._result_queue\n\n    def _adjust_process_count(self):\n        for _ in range(len(self._processes), self._max_workers):\n            p = multiprocessing.Process(\n                    target=_process_worker,\n                    args=(self._call_queue,\n                          self._result_queue))\n            p.start()\n            self._processes.add(p)\n\n    def submit(self, fn, *args, **kwargs):\n        with self._shutdown_lock:\n            if self._shutdown_thread:\n                raise RuntimeError(\'cannot schedule new futures after shutdown\')\n\n            f = _base.Future()\n            w = _WorkItem(f, fn, args, kwargs)\n\n            self._pending_work_items[self._queue_count] = w\n            self._work_ids.put(self._queue_count)\n            self._queue_count += 1\n            # Wake up queue management thread\n            self._result_queue.put(None)\n\n            self._start_queue_management_thread()\n            self._adjust_process_count()\n            return f\n    submit.__doc__ = _base.Executor.submit.__doc__\n\n    def shutdown(self, wait=True):\n        with self._shutdown_lock:\n            self._shutdown_thread = True\n        if self._queue_management_thread:\n            # Wake up queue management thread\n            self._result_queue.put(None)\n            if wait:\n                self._queue_management_thread.join(sys.maxint)\n        # To reduce the risk of openning too many files, remove references to\n        # objects that use file descriptors.\n        self._queue_management_thread = None\n        self._call_queue = None\n        self._result_queue = None\n        self._processes = None\n    shutdown.__doc__ = _base.Executor.shutdown.__doc__\n\natexit.register(_python_exit)\n'"
abupy/ExtBu/futures/thread.py,0,"b'# Copyright 2009 Brian Quinlan. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n""""""Implements ThreadPoolExecutor.""""""\n\nimport atexit\nfrom concurrent.futures import _base\nimport Queue as queue\nimport threading\nimport weakref\nimport sys\n\n__author__ = \'Brian Quinlan (brian@sweetapp.com)\'\n\n# Workers are created as daemon threads. This is done to allow the interpreter\n# to exit when there are still idle threads in a ThreadPoolExecutor\'s thread\n# pool (i.e. shutdown() was not called). However, allowing workers to die with\n# the interpreter has two undesirable properties:\n#   - The workers would still be running during interpretor shutdown,\n#     meaning that they would fail in unpredictable ways.\n#   - The workers could be killed while evaluating a work item, which could\n#     be bad if the callable being evaluated has external side-effects e.g.\n#     writing to a file.\n#\n# To work around this problem, an exit handler is installed which tells the\n# workers to exit when their work queues are empty and then waits until the\n# threads finish.\n\n_threads_queues = weakref.WeakKeyDictionary()\n_shutdown = False\n\ndef _python_exit():\n    global _shutdown\n    _shutdown = True\n    items = list(_threads_queues.items()) if _threads_queues else ()\n    for t, q in items:\n        q.put(None)\n    for t, q in items:\n        t.join(sys.maxint)\n\natexit.register(_python_exit)\n\nclass _WorkItem(object):\n    def __init__(self, future, fn, args, kwargs):\n        self.future = future\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n\n    def run(self):\n        if not self.future.set_running_or_notify_cancel():\n            return\n\n        try:\n            result = self.fn(*self.args, **self.kwargs)\n        except BaseException:\n            e, tb = sys.exc_info()[1:]\n            self.future.set_exception_info(e, tb)\n        else:\n            self.future.set_result(result)\n\ndef _worker(executor_reference, work_queue):\n    try:\n        while True:\n            work_item = work_queue.get(block=True)\n            if work_item is not None:\n                work_item.run()\n                # Delete references to object. See issue16284\n                del work_item\n                continue\n            executor = executor_reference()\n            # Exit if:\n            #   - The interpreter is shutting down OR\n            #   - The executor that owns the worker has been collected OR\n            #   - The executor that owns the worker has been shutdown.\n            if _shutdown or executor is None or executor._shutdown:\n                # Notice other workers\n                work_queue.put(None)\n                return\n            del executor\n    except BaseException:\n        _base.LOGGER.critical(\'Exception in worker\', exc_info=True)\n\nclass ThreadPoolExecutor(_base.Executor):\n    def __init__(self, max_workers):\n        """"""Initializes a new ThreadPoolExecutor instance.\n\n        Args:\n            max_workers: The maximum number of threads that can be used to\n                execute the given calls.\n        """"""\n        self._max_workers = max_workers\n        self._work_queue = queue.Queue()\n        self._threads = set()\n        self._shutdown = False\n        self._shutdown_lock = threading.Lock()\n\n    def submit(self, fn, *args, **kwargs):\n        with self._shutdown_lock:\n            if self._shutdown:\n                raise RuntimeError(\'cannot schedule new futures after shutdown\')\n\n            f = _base.Future()\n            w = _WorkItem(f, fn, args, kwargs)\n\n            self._work_queue.put(w)\n            self._adjust_thread_count()\n            return f\n    submit.__doc__ = _base.Executor.submit.__doc__\n\n    def _adjust_thread_count(self):\n        # When the executor gets lost, the weakref callback will wake up\n        # the worker threads.\n        def weakref_cb(_, q=self._work_queue):\n            q.put(None)\n        # TODO(bquinlan): Should avoid creating new threads if there are more\n        # idle threads than items in the work queue.\n        if len(self._threads) < self._max_workers:\n            t = threading.Thread(target=_worker,\n                                 args=(weakref.ref(self, weakref_cb),\n                                       self._work_queue))\n            t.daemon = True\n            t.start()\n            self._threads.add(t)\n            _threads_queues[t] = self._work_queue\n\n    def shutdown(self, wait=True):\n        with self._shutdown_lock:\n            self._shutdown = True\n            self._work_queue.put(None)\n        if wait:\n            for t in self._threads:\n                t.join(sys.maxint)\n    shutdown.__doc__ = _base.Executor.shutdown.__doc__\n'"
abupy/ExtBu/joblib/__init__.py,2,"b'"""""" Joblib is a set of tools to provide **lightweight pipelining in\nPython**. In particular, joblib offers:\n\n  1. transparent disk-caching of the output values and lazy re-evaluation\n     (memoize pattern)\n\n  2. easy simple parallel computing\n\n  3. logging and tracing of the execution\n\nJoblib is optimized to be **fast** and **robust** in particular on large\ndata and has specific optimizations for `numpy` arrays. It is\n**BSD-licensed**.\n\n\n    ============================== ============================================\n    **User documentation**:        http://pythonhosted.org/joblib\n\n    **Download packages**:         http://pypi.python.org/pypi/joblib#downloads\n\n    **Source code**:               http://github.com/joblib/joblib\n\n    **Report issues**:             http://github.com/joblib/joblib/issues\n    ============================== ============================================\n\n\nVision\n--------\n\nThe vision is to provide tools to easily achieve better performance and\nreproducibility when working with long running jobs.\n\n *  **Avoid computing twice the same thing**: code is rerun over an\n    over, for instance when prototyping computational-heavy jobs (as in\n    scientific development), but hand-crafted solution to alleviate this\n    issue is error-prone and often leads to unreproducible results\n\n *  **Persist to disk transparently**: persisting in an efficient way\n    arbitrary objects containing large data is hard. Using\n    joblib\'s caching mechanism avoids hand-written persistence and\n    implicitly links the file on disk to the execution context of\n    the original Python object. As a result, joblib\'s persistence is\n    good for resuming an application status or computational job, eg\n    after a crash.\n\nJoblib strives to address these problems while **leaving your code and\nyour flow control as unmodified as possible** (no framework, no new\nparadigms).\n\nMain features\n------------------\n\n1) **Transparent and fast disk-caching of output value:** a memoize or\n   make-like functionality for Python functions that works well for\n   arbitrary Python objects, including very large numpy arrays. Separate\n   persistence and flow-execution logic from domain logic or algorithmic\n   code by writing the operations as a set of steps with well-defined\n   inputs and  outputs: Python functions. Joblib can save their\n   computation to disk and rerun it only if necessary::\n\n      >>> from sklearn.externals.joblib import Memory\n      >>> mem = Memory(cachedir=\'/tmp/joblib\')\n      >>> import numpy as np\n      >>> a = np.vander(np.arange(3)).astype(np.float)\n      >>> square = mem.cache(np.square)\n      >>> b = square(a)                                   # doctest: +ELLIPSIS\n      ________________________________________________________________________________\n      [Memory] Calling square...\n      square(array([[ 0.,  0.,  1.],\n             [ 1.,  1.,  1.],\n             [ 4.,  2.,  1.]]))\n      ___________________________________________________________square - 0...s, 0.0min\n\n      >>> c = square(a)\n      >>> # The above call did not trigger an evaluation\n\n2) **Embarrassingly parallel helper:** to make it easy to write readable\n   parallel code and debug it quickly::\n\n      >>> from sklearn.externals.joblib import Parallel, delayed\n      >>> from math import sqrt\n      >>> Parallel(n_jobs=1)(delayed(sqrt)(i**2) for i in range(10))\n      [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\n\n\n3) **Logging/tracing:** The different functionalities will\n   progressively acquire better logging mechanism to help track what\n   has been ran, and capture I/O easily. In addition, Joblib will\n   provide a few I/O primitives, to easily define logging and\n   display streams, and provide a way of compiling a report.\n   We want to be able to quickly inspect what has been run.\n\n4) **Fast compressed Persistence**: a replacement for pickle to work\n   efficiently on Python objects containing large data (\n   *joblib.dump* & *joblib.load* ).\n\n..\n    >>> import shutil ; shutil.rmtree(\'/tmp/joblib/\')\n\n""""""\n\n# PEP0440 compatible formatted version, see:\n# https://www.python.org/dev/peps/pep-0440/\n#\n# Generic release markers:\n# X.Y\n# X.Y.Z # For bugfix releases\n#\n# Admissible pre-release markers:\n# X.YaN # Alpha release\n# X.YbN # Beta release\n# X.YrcN # Release Candidate\n# X.Y # Final release\n#\n# Dev branch marker is: \'X.Y.dev\' or \'X.Y.devN\' where N is an integer.\n# \'X.Y.dev0\' is the canonical version of \'X.Y.dev\'\n#\n\n__version__ = \'0.10.3\'\n\n\nfrom .memory import Memory, MemorizedResult\nfrom .logger import PrintTime\nfrom .logger import Logger\nfrom .hashing import hash\nfrom .numpy_pickle import dump\nfrom .numpy_pickle import load\nfrom .parallel import Parallel\nfrom .parallel import delayed\nfrom .parallel import cpu_count\nfrom .parallel import register_parallel_backend\nfrom .parallel import parallel_backend\nfrom .parallel import effective_n_jobs\n\n\n__all__ = [\'Memory\', \'MemorizedResult\', \'PrintTime\', \'Logger\', \'hash\', \'dump\',\n           \'load\', \'Parallel\', \'delayed\', \'cpu_count\', \'effective_n_jobs\',\n           \'register_parallel_backend\', \'parallel_backend\']\n'"
abupy/ExtBu/joblib/_compat.py,0,"b'""""""\nCompatibility layer for Python 3/Python 2 single codebase\n""""""\nimport sys\n\nPY3_OR_LATER = sys.version_info[0] >= 3\nPY26 = sys.version_info[:2] == (2, 6)\nPY27 = sys.version_info[:2] == (2, 7)\n\ntry:\n    _basestring = basestring\n    _bytes_or_unicode = (str, unicode)\nexcept NameError:\n    _basestring = str\n    _bytes_or_unicode = (bytes, str)\n\n\ndef with_metaclass(meta, *bases):\n    """"""Create a base class with a metaclass.""""""\n    return meta(""NewBase"", bases, {})\n'"
abupy/ExtBu/joblib/_memory_helpers.py,0,"b'try:\n    # Available in Python 3\n    from tokenize import open as open_py_source\n\nexcept ImportError:\n    # Copied from python3 tokenize\n    from codecs import lookup, BOM_UTF8\n    import re\n    from io import TextIOWrapper, open\n    cookie_re = re.compile(""coding[:=]\\s*([-\\w.]+)"")\n\n    def _get_normal_name(orig_enc):\n        """"""Imitates get_normal_name in tokenizer.c.""""""\n        # Only care about the first 12 characters.\n        enc = orig_enc[:12].lower().replace(""_"", ""-"")\n        if enc == ""utf-8"" or enc.startswith(""utf-8-""):\n            return ""utf-8""\n        if enc in (""latin-1"", ""iso-8859-1"", ""iso-latin-1"") or \\\n           enc.startswith((""latin-1-"", ""iso-8859-1-"", ""iso-latin-1-"")):\n            return ""iso-8859-1""\n        return orig_enc\n\n    def _detect_encoding(readline):\n        """"""\n        The detect_encoding() function is used to detect the encoding that\n        should be used to decode a Python source file.  It requires one\n        argment, readline, in the same way as the tokenize() generator.\n\n        It will call readline a maximum of twice, and return the encoding used\n        (as a string) and a list of any lines (left as bytes) it has read in.\n\n        It detects the encoding from the presence of a utf-8 bom or an encoding\n        cookie as specified in pep-0263.  If both a bom and a cookie are\n        present, but disagree, a SyntaxError will be raised.  If the encoding\n        cookie is an invalid charset, raise a SyntaxError.  Note that if a\n        utf-8 bom is found, \'utf-8-sig\' is returned.\n\n        If no encoding is specified, then the default of \'utf-8\' will be\n        returned.\n        """"""\n        bom_found = False\n        encoding = None\n        default = \'utf-8\'\n\n        def read_or_stop():\n            try:\n                return readline()\n            except StopIteration:\n                return b\'\'\n\n        def find_cookie(line):\n            try:\n                line_string = line.decode(\'ascii\')\n            except UnicodeDecodeError:\n                return None\n\n            matches = cookie_re.findall(line_string)\n            if not matches:\n                return None\n            encoding = _get_normal_name(matches[0])\n            try:\n                codec = lookup(encoding)\n            except LookupError:\n                # This behaviour mimics the Python interpreter\n                raise SyntaxError(""unknown encoding: "" + encoding)\n\n            if bom_found:\n                if codec.name != \'utf-8\':\n                    # This behaviour mimics the Python interpreter\n                    raise SyntaxError(\'encoding problem: utf-8\')\n                encoding += \'-sig\'\n            return encoding\n\n        first = read_or_stop()\n        if first.startswith(BOM_UTF8):\n            bom_found = True\n            first = first[3:]\n            default = \'utf-8-sig\'\n        if not first:\n            return default, []\n\n        encoding = find_cookie(first)\n        if encoding:\n            return encoding, [first]\n\n        second = read_or_stop()\n        if not second:\n            return default, [first]\n\n        encoding = find_cookie(second)\n        if encoding:\n            return encoding, [first, second]\n\n        return default, [first, second]\n\n    def open_py_source(filename):\n        """"""Open a file in read only mode using the encoding detected by\n        detect_encoding().\n        """"""\n        buffer = open(filename, \'rb\')\n        encoding, lines = _detect_encoding(buffer.readline)\n        buffer.seek(0)\n        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n        text.mode = \'r\'\n        return text'"
abupy/ExtBu/joblib/_multiprocessing_helpers.py,0,"b'""""""Helper module to factorize the conditional multiprocessing import logic\n\nWe use a distinct module to simplify import statements and avoid introducing\ncircular dependencies (for instance for the assert_spawning name).\n""""""\nimport os\nimport warnings\n\n\n# Obtain possible configuration from the environment, assuming 1 (on)\n# by default, upon 0 set to None. Should instructively fail if some non\n# 0/1 value is set.\nmp = int(os.environ.get(\'JOBLIB_MULTIPROCESSING\', 1)) or None\nif mp:\n    try:\n        import multiprocessing as mp\n    except ImportError:\n        mp = None\n\n# 2nd stage: validate that locking is available on the system and\n#            issue a warning if not\nif mp is not None:\n    try:\n        _sem = mp.Semaphore()\n        del _sem  # cleanup\n    except (ImportError, OSError) as e:\n        mp = None\n        warnings.warn(\'%s.  joblib will operate in serial mode\' % (e,))\n\n\n# 3rd stage: backward compat for the assert_spawning helper\nif mp is not None:\n    try:\n        # Python 3.4+\n        from multiprocessing.context import assert_spawning\n    except ImportError:\n        from multiprocessing.forking import assert_spawning\nelse:\n    assert_spawning = None\n'"
abupy/ExtBu/joblib/_parallel_backends.py,0,"b'""""""\nBackends for embarrassingly parallel code.\n""""""\n\nimport gc\nimport os\nimport sys\nimport warnings\nimport threading\nfrom abc import ABCMeta, abstractmethod\n\nfrom .format_stack import format_exc\nfrom .my_exceptions import WorkerInterrupt, TransportableException\nfrom ._multiprocessing_helpers import mp\nfrom ._compat import with_metaclass\nif mp is not None:\n    from .pool import MemmapingPool\n    from multiprocessing.pool import ThreadPool\n\n\nclass ParallelBackendBase(with_metaclass(ABCMeta)):\n    """"""Helper abc which defines all methods a ParallelBackend must implement""""""\n\n    @abstractmethod\n    def effective_n_jobs(self, n_jobs):\n        """"""Determine the number of jobs that can actually run in parallel\n\n        n_jobs is the number of workers requested by the callers. Passing\n        n_jobs=-1 means requesting all available workers for instance matching\n        the number of CPU cores on the worker host(s).\n\n        This method should return a guesstimate of the number of workers that\n        can actually perform work concurrently. The primary use case is to make\n        it possible for the caller to know in how many chunks to slice the\n        work.\n\n        In general working on larger data chunks is more efficient (less\n        scheduling overhead and better use of CPU cache prefetching heuristics)\n        as long as all the workers have enough work to do.\n        """"""\n\n    @abstractmethod\n    def apply_async(self, func, callback=None):\n        """"""Schedule a func to be run""""""\n\n    def configure(self, n_jobs=1, parallel=None, **backend_args):\n        """"""Reconfigure the backend and return the number of workers.\n\n        This makes it possible to reuse an existing backend instance for\n        successive independent calls to Parallel with different parameters.\n        """"""\n        self.parallel = parallel\n        return self.effective_n_jobs(n_jobs)\n\n    def terminate(self):\n        """"""Shutdown the process or thread pool""""""\n\n    def compute_batch_size(self):\n        """"""Determine the optimal batch size""""""\n        return 1\n\n    def batch_completed(self, batch_size, duration):\n        """"""Callback indicate how long it took to run a batch""""""\n\n    def get_exceptions(self):\n        """"""List of exception types to be captured.""""""\n        return []\n\n    def abort_everything(self, ensure_ready=True):\n        """"""Abort any running tasks\n\n        This is called when an exception has been raised when executing a tasks\n        and all the remaining tasks will be ignored and can therefore be\n        aborted to spare computation resources.\n\n        If ensure_ready is True, the backend should be left in an operating\n        state as future tasks might be re-submitted via that same backend\n        instance.\n\n        If ensure_ready is False, the implementer of this method can decide\n        to leave the backend in a closed / terminated state as no new task\n        are expected to be submitted to this backend.\n\n        Setting ensure_ready to False is an optimization that can be leveraged\n        when aborting tasks via killing processes from a local process pool\n        managed by the backend it-self: if we expect no new tasks, there is no\n        point in re-creating a new working pool.\n        """"""\n        # Does nothing by default: to be overriden in subclasses when canceling\n        # tasks is possible.\n        pass\n\n\nclass SequentialBackend(ParallelBackendBase):\n    """"""A ParallelBackend which will execute all batches sequentially.\n\n    Does not use/create any threading objects, and hence has minimal\n    overhead. Used when n_jobs == 1.\n    """"""\n\n    def effective_n_jobs(self, n_jobs):\n        """"""Determine the number of jobs which are going to run in parallel""""""\n        if n_jobs == 0:\n            raise ValueError(\'n_jobs == 0 in Parallel has no meaning\')\n        return 1\n\n    def apply_async(self, func, callback=None):\n        """"""Schedule a func to be run""""""\n        result = ImmediateResult(func)\n        if callback:\n            callback(result)\n        return result\n\n\nclass PoolManagerMixin(object):\n    """"""A helper class for managing pool of workers.""""""\n\n    def effective_n_jobs(self, n_jobs):\n        """"""Determine the number of jobs which are going to run in parallel""""""\n        if n_jobs == 0:\n            raise ValueError(\'n_jobs == 0 in Parallel has no meaning\')\n        elif mp is None or n_jobs is None:\n            # multiprocessing is not available or disabled, fallback\n            # to sequential mode\n            return 1\n        elif n_jobs < 0:\n            n_jobs = max(mp.cpu_count() + 1 + n_jobs, 1)\n        return n_jobs\n\n    def terminate(self):\n        """"""Shutdown the process or thread pool""""""\n        if self._pool is not None:\n            self._pool.close()\n            self._pool.terminate()  # terminate does a join()\n            self._pool = None\n\n    def apply_async(self, func, callback=None):\n        """"""Schedule a func to be run""""""\n        return self._pool.apply_async(SafeFunction(func), callback=callback)\n\n    def abort_everything(self, ensure_ready=True):\n        """"""Shutdown the pool and restart a new one with the same parameters""""""\n        self.terminate()\n        if ensure_ready:\n            self.configure(n_jobs=self.parallel.n_jobs, parallel=self.parallel,\n                           **self.parallel._backend_args)\n\n\nclass AutoBatchingMixin(object):\n    """"""A helper class for automagically batching jobs.""""""\n\n    # In seconds, should be big enough to hide multiprocessing dispatching\n    # overhead.\n    # This settings was found by running benchmarks/bench_auto_batching.py\n    # with various parameters on various platforms.\n    MIN_IDEAL_BATCH_DURATION = .2\n\n    # Should not be too high to avoid stragglers: long jobs running alone\n    # on a single worker while other workers have no work to process any more.\n    MAX_IDEAL_BATCH_DURATION = 2\n\n    # Batching counters\n    _effective_batch_size = 1\n    _smoothed_batch_duration = 0.0\n\n    def compute_batch_size(self):\n        """"""Determine the optimal batch size""""""\n        old_batch_size = self._effective_batch_size\n        batch_duration = self._smoothed_batch_duration\n        if (batch_duration > 0 and\n                batch_duration < self.MIN_IDEAL_BATCH_DURATION):\n            # The current batch size is too small: the duration of the\n            # processing of a batch of task is not large enough to hide\n            # the scheduling overhead.\n            ideal_batch_size = int(old_batch_size *\n                                   self.MIN_IDEAL_BATCH_DURATION /\n                                   batch_duration)\n            # Multiply by two to limit oscilations between min and max.\n            batch_size = max(2 * ideal_batch_size, 1)\n            self._effective_batch_size = batch_size\n            if self.parallel.verbose >= 10:\n                self.parallel._print(\n                    ""Batch computation too fast (%.4fs.) ""\n                    ""Setting batch_size=%d."", (batch_duration, batch_size))\n        elif (batch_duration > self.MAX_IDEAL_BATCH_DURATION and\n              old_batch_size >= 2):\n            # The current batch size is too big. If we schedule overly long\n            # running batches some CPUs might wait with nothing left to do\n            # while a couple of CPUs a left processing a few long running\n            # batches. Better reduce the batch size a bit to limit the\n            # likelihood of scheduling such stragglers.\n            batch_size = old_batch_size // 2\n            self._effective_batch_size = batch_size\n            if self.parallel.verbose >= 10:\n                self.parallel._print(\n                    ""Batch computation too slow (%.4fs.) ""\n                    ""Setting batch_size=%d."", (batch_duration, batch_size))\n        else:\n            # No batch size adjustment\n            batch_size = old_batch_size\n\n        if batch_size != old_batch_size:\n            # Reset estimation of the smoothed mean batch duration: this\n            # estimate is updated in the multiprocessing apply_async\n            # CallBack as long as the batch_size is constant. Therefore\n            # we need to reset the estimate whenever we re-tune the batch\n            # size.\n            self._smoothed_batch_duration = 0\n\n        return batch_size\n\n    def batch_completed(self, batch_size, duration):\n        """"""Callback indicate how long it took to run a batch""""""\n        if batch_size == self._effective_batch_size:\n            # Update the smoothed streaming estimate of the duration of a batch\n            # from dispatch to completion\n            old_duration = self._smoothed_batch_duration\n            if old_duration == 0:\n                # First record of duration for this batch size after the last\n                # reset.\n                new_duration = duration\n            else:\n                # Update the exponentially weighted average of the duration of\n                # batch for the current effective size.\n                new_duration = 0.8 * old_duration + 0.2 * duration\n            self._smoothed_batch_duration = new_duration\n\n\nclass ThreadingBackend(PoolManagerMixin, ParallelBackendBase):\n    """"""A ParallelBackend which will use a thread pool to execute batches in.\n\n    This is a low-overhead backend but it suffers from the Python Global\n    Interpreter Lock if the called function relies a lot on Python objects.\n    Mostly useful when the execution bottleneck is a compiled extension that\n    explicitly releases the GIL (for instance a Cython loop wrapped in a\n    ""with nogil"" block or an expensive call to a library such as NumPy).\n    """"""\n\n    def configure(self, n_jobs=1, parallel=None, **backend_args):\n        """"""Build a process or thread pool and return the number of workers""""""\n        n_jobs = self.effective_n_jobs(n_jobs)\n        if n_jobs == 1:\n            # Avoid unnecessary overhead and use sequential backend instead.\n            raise FallbackToBackend(SequentialBackend())\n        self.parallel = parallel\n        self._pool = ThreadPool(n_jobs)\n        return n_jobs\n\n\nclass MultiprocessingBackend(PoolManagerMixin, AutoBatchingMixin,\n                             ParallelBackendBase):\n    """"""A ParallelBackend which will use a multiprocessing.Pool.\n\n    Will introduce some communication and memory overhead when exchanging\n    input and output data with the with the worker Python processes.\n    However, does not suffer from the Python Global Interpreter Lock.\n    """"""\n\n    # Environment variables to protect against bad situations when nesting\n    JOBLIB_SPAWNED_PROCESS = ""__JOBLIB_SPAWNED_PARALLEL__""\n\n    def effective_n_jobs(self, n_jobs):\n        """"""Determine the number of jobs which are going to run in parallel.\n\n        This also checks if we are attempting to create a nested parallel\n        loop.\n        """"""\n        if mp is None:\n            return 1\n\n        if mp.current_process().daemon:\n            # Daemonic processes cannot have children\n            if n_jobs != 1:\n                warnings.warn(\n                    \'Multiprocessing-backed parallel loops cannot be nested,\'\n                    \' setting n_jobs=1\',\n                    stacklevel=3)\n            return 1\n\n        elif threading.current_thread().name != \'MainThread\':\n            # Prevent posix fork inside in non-main posix threads\n            warnings.warn(\n                \'Multiprocessing backed parallel loops cannot be nested\'\n                \' below threads, setting n_jobs=1\',\n                stacklevel=3)\n            return 1\n\n        return super(MultiprocessingBackend, self).effective_n_jobs(n_jobs)\n\n    def configure(self, n_jobs=1, parallel=None, **backend_args):\n        """"""Build a process or thread pool and return the number of workers""""""\n        n_jobs = self.effective_n_jobs(n_jobs)\n        if n_jobs == 1:\n            raise FallbackToBackend(SequentialBackend())\n\n        already_forked = int(os.environ.get(self.JOBLIB_SPAWNED_PROCESS, 0))\n        if already_forked:\n            raise ImportError(\n                \'[joblib] Attempting to do parallel computing \'\n                \'without protecting your import on a system that does \'\n                \'not support forking. To use parallel-computing in a \'\n                \'script, you must protect your main loop using ""if \'\n                ""__name__ == \'__main__\'""\n                \'"". Please see the joblib documentation on Parallel \'\n                \'for more information\')\n        # Set an environment variable to avoid infinite loops\n        os.environ[self.JOBLIB_SPAWNED_PROCESS] = \'1\'\n\n        # Make sure to free as much memory as possible before forking\n        gc.collect()\n        self._pool = MemmapingPool(n_jobs, **backend_args)\n        self.parallel = parallel\n        return n_jobs\n\n    def terminate(self):\n        """"""Shutdown the process or thread pool""""""\n        super(MultiprocessingBackend, self).terminate()\n        if self.JOBLIB_SPAWNED_PROCESS in os.environ:\n            del os.environ[self.JOBLIB_SPAWNED_PROCESS]\n\n\nclass ImmediateResult(object):\n    def __init__(self, batch):\n        # Don\'t delay the application, to avoid keeping the input\n        # arguments in memory\n        self.results = batch()\n\n    def get(self):\n        return self.results\n\n\nclass SafeFunction(object):\n    """"""Wrapper that handles the serialization of exception tracebacks.\n\n    If an exception is triggered when calling the inner function, a copy of\n    the full traceback is captured to make it possible to serialize\n    it so that it can be rendered in a different Python process.\n    """"""\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        try:\n            return self.func(*args, **kwargs)\n        except KeyboardInterrupt:\n            # We capture the KeyboardInterrupt and reraise it as\n            # something different, as multiprocessing does not\n            # interrupt processing for a KeyboardInterrupt\n            raise WorkerInterrupt()\n        except:\n            e_type, e_value, e_tb = sys.exc_info()\n            text = format_exc(e_type, e_value, e_tb, context=10, tb_offset=1)\n            raise TransportableException(text, e_type)\n\n\nclass FallbackToBackend(Exception):\n    """"""Raised when configuration should fallback to another backend""""""\n\n    def __init__(self, backend):\n        self.backend = backend\n'"
abupy/ExtBu/joblib/disk.py,0,"b'""""""\nDisk management utilities.\n""""""\n\n# Authors: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n#          Lars Buitinck\n# Copyright (c) 2010 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\n\nimport errno\nimport os\nimport shutil\nimport sys\nimport time\n\n\ndef disk_used(path):\n    """""" Return the disk usage in a directory.""""""\n    size = 0\n    for file in os.listdir(path) + [\'.\']:\n        stat = os.stat(os.path.join(path, file))\n        if hasattr(stat, \'st_blocks\'):\n            size += stat.st_blocks * 512\n        else:\n            # on some platform st_blocks is not available (e.g., Windows)\n            # approximate by rounding to next multiple of 512\n            size += (stat.st_size // 512 + 1) * 512\n    # We need to convert to int to avoid having longs on some systems (we\n    # don\'t want longs to avoid problems we SQLite)\n    return int(size / 1024.)\n\n\ndef memstr_to_bytes(text):\n    """""" Convert a memory text to its value in bytes.\n    """"""\n    kilo = 1024\n    units = dict(K=kilo, M=kilo ** 2, G=kilo ** 3)\n    try:\n        size = int(units[text[-1]] * float(text[:-1]))\n    except (KeyError, ValueError):\n        raise ValueError(\n            ""Invalid literal for size give: %s (type %s) should be ""\n            ""alike \'10G\', \'500M\', \'50K\'."" % (text, type(text)))\n    return size\n\n\ndef mkdirp(d):\n    """"""Ensure directory d exists (like mkdir -p on Unix)\n    No guarantee that the directory is writable.\n    """"""\n    try:\n        os.makedirs(d)\n    except OSError as e:\n        if e.errno != errno.EEXIST:\n            raise\n\n\n# if a rmtree operation fails in rm_subdirs, wait for this much time (in secs),\n# then retry once. if it still fails, raise the exception\nRM_SUBDIRS_RETRY_TIME = 0.1\n\n\ndef rm_subdirs(path, onerror=None):\n    """"""Remove all subdirectories in this path.\n\n    The directory indicated by `path` is left in place, and its subdirectories\n    are erased.\n\n    If onerror is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If onerror is None,\n    an exception is raised.\n    """"""\n\n    # NOTE this code is adapted from the one in shutil.rmtree, and is\n    # just as fast\n\n    names = []\n    try:\n        names = os.listdir(path)\n    except os.error as err:\n        if onerror is not None:\n            onerror(os.listdir, path, sys.exc_info())\n        else:\n            raise\n\n    for name in names:\n        fullname = os.path.join(path, name)\n        if os.path.isdir(fullname):\n            if onerror is not None:\n                shutil.rmtree(fullname, False, onerror)\n            else:\n                # allow the rmtree to fail once, wait and re-try.\n                # if the error is raised again, fail\n                err_count = 0\n                while True:\n                    try:\n                        shutil.rmtree(fullname, False, None)\n                        break\n                    except os.error:\n                        if err_count > 0:\n                            raise\n                        err_count += 1\n                        time.sleep(RM_SUBDIRS_RETRY_TIME)\n'"
abupy/ExtBu/joblib/format_stack.py,0,"b'""""""\nRepresent an exception with a lot of information.\n\nProvides 2 useful functions:\n\nformat_exc: format an exception into a complete traceback, with full\n            debugging instruction.\n\nformat_outer_frames: format the current position in the stack call.\n\nAdapted from IPython\'s VerboseTB.\n""""""\n# Authors: Gael Varoquaux < gael dot varoquaux at normalesup dot org >\n#          Nathaniel Gray <n8gray@caltech.edu>\n#          Fernando Perez <fperez@colorado.edu>\n# Copyright: 2010, Gael Varoquaux\n#            2001-2004, Fernando Perez\n#            2001 Nathaniel Gray\n# License: BSD 3 clause\n\n\nimport inspect\nimport keyword\nimport linecache\nimport os\nimport pydoc\nimport sys\nimport time\nimport tokenize\nimport traceback\n\ntry:                           # Python 2\n    generate_tokens = tokenize.generate_tokens\nexcept AttributeError:         # Python 3\n    generate_tokens = tokenize.tokenize\n\nINDENT = \' \' * 8\n\n\n###############################################################################\n# some internal-use functions\ndef safe_repr(value):\n    """"""Hopefully pretty robust repr equivalent.""""""\n    # this is pretty horrible but should always return *something*\n    try:\n        return pydoc.text.repr(value)\n    except KeyboardInterrupt:\n        raise\n    except:\n        try:\n            return repr(value)\n        except KeyboardInterrupt:\n            raise\n        except:\n            try:\n                # all still in an except block so we catch\n                # getattr raising\n                name = getattr(value, \'__name__\', None)\n                if name:\n                    # ick, recursion\n                    return safe_repr(name)\n                klass = getattr(value, \'__class__\', None)\n                if klass:\n                    return \'%s instance\' % safe_repr(klass)\n            except KeyboardInterrupt:\n                raise\n            except:\n                return \'UNRECOVERABLE REPR FAILURE\'\n\n\ndef eq_repr(value, repr=safe_repr):\n    return \'=%s\' % repr(value)\n\n\n###############################################################################\ndef uniq_stable(elems):\n    """"""uniq_stable(elems) -> list\n\n    Return from an iterable, a list of all the unique elements in the input,\n    but maintaining the order in which they first appear.\n\n    A naive solution to this problem which just makes a dictionary with the\n    elements as keys fails to respect the stability condition, since\n    dictionaries are unsorted by nature.\n\n    Note: All elements in the input must be hashable.\n    """"""\n    unique = []\n    unique_set = set()\n    for nn in elems:\n        if nn not in unique_set:\n            unique.append(nn)\n            unique_set.add(nn)\n    return unique\n\n\n###############################################################################\ndef fix_frame_records_filenames(records):\n    """"""Try to fix the filenames in each record from inspect.getinnerframes().\n\n    Particularly, modules loaded from within zip files have useless filenames\n    attached to their code object, and inspect.getinnerframes() just uses it.\n    """"""\n    fixed_records = []\n    for frame, filename, line_no, func_name, lines, index in records:\n        # Look inside the frame\'s globals dictionary for __file__, which should\n        # be better.\n        better_fn = frame.f_globals.get(\'__file__\', None)\n        if isinstance(better_fn, str):\n            # Check the type just in case someone did something weird with\n            # __file__. It might also be None if the error occurred during\n            # import.\n            filename = better_fn\n        fixed_records.append((frame, filename, line_no, func_name, lines,\n                              index))\n    return fixed_records\n\n\ndef _fixed_getframes(etb, context=1, tb_offset=0):\n    LNUM_POS, LINES_POS, INDEX_POS = 2, 4, 5\n\n    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n\n    # If the error is at the console, don\'t build any context, since it would\n    # otherwise produce 5 blank lines printed out (there is no file at the\n    # console)\n    rec_check = records[tb_offset:]\n    try:\n        rname = rec_check[0][1]\n        if rname == \'<ipython console>\' or rname.endswith(\'<string>\'):\n            return rec_check\n    except IndexError:\n        pass\n\n    aux = traceback.extract_tb(etb)\n    assert len(records) == len(aux)\n    for i, (file, lnum, _, _) in enumerate(aux):\n        maybeStart = lnum - 1 - context // 2\n        start = max(maybeStart, 0)\n        end = start + context\n        lines = linecache.getlines(file)[start:end]\n        # pad with empty lines if necessary\n        if maybeStart < 0:\n            lines = ([\'\\n\'] * -maybeStart) + lines\n        if len(lines) < context:\n            lines += [\'\\n\'] * (context - len(lines))\n        buf = list(records[i])\n        buf[LNUM_POS] = lnum\n        buf[INDEX_POS] = lnum - 1 - start\n        buf[LINES_POS] = lines\n        records[i] = tuple(buf)\n    return records[tb_offset:]\n\n\ndef _format_traceback_lines(lnum, index, lines, lvals=None):\n    numbers_width = 7\n    res = []\n    i = lnum - index\n\n    for line in lines:\n        if i == lnum:\n            # This is the line with the error\n            pad = numbers_width - len(str(i))\n            if pad >= 3:\n                marker = \'-\' * (pad - 3) + \'-> \'\n            elif pad == 2:\n                marker = \'> \'\n            elif pad == 1:\n                marker = \'>\'\n            else:\n                marker = \'\'\n            num = marker + str(i)\n        else:\n            num = \'%*s\' % (numbers_width, i)\n        line = \'%s %s\' % (num, line)\n\n        res.append(line)\n        if lvals and i == lnum:\n            res.append(lvals + \'\\n\')\n        i = i + 1\n    return res\n\n\ndef format_records(records):   # , print_globals=False):\n    # Loop over all records printing context and info\n    frames = []\n    abspath = os.path.abspath\n    for frame, file, lnum, func, lines, index in records:\n        try:\n            file = file and abspath(file) or \'?\'\n        except OSError:\n            # if file is \'<console>\' or something not in the filesystem,\n            # the abspath call will throw an OSError.  Just ignore it and\n            # keep the original file string.\n            pass\n\n        if file.endswith(\'.pyc\'):\n            file = file[:-4] + \'.py\'\n\n        link = file\n\n        args, varargs, varkw, locals = inspect.getargvalues(frame)\n\n        if func == \'?\':\n            call = \'\'\n        else:\n            # Decide whether to include variable details or not\n            try:\n                call = \'in %s%s\' % (func, inspect.formatargvalues(args,\n                                            varargs, varkw, locals,\n                                            formatvalue=eq_repr))\n            except KeyError:\n                # Very odd crash from inspect.formatargvalues().  The\n                # scenario under which it appeared was a call to\n                # view(array,scale) in NumTut.view.view(), where scale had\n                # been defined as a scalar (it should be a tuple). Somehow\n                # inspect messes up resolving the argument list of view()\n                # and barfs out. At some point I should dig into this one\n                # and file a bug report about it.\n                print(""\\nJoblib\'s exception reporting continues...\\n"")\n                call = \'in %s(***failed resolving arguments***)\' % func\n\n        # Initialize a list of names on the current line, which the\n        # tokenizer below will populate.\n        names = []\n\n        def tokeneater(token_type, token, start, end, line):\n            """"""Stateful tokeneater which builds dotted names.\n\n            The list of names it appends to (from the enclosing scope) can\n            contain repeated composite names.  This is unavoidable, since\n            there is no way to disambiguate partial dotted structures until\n            the full list is known.  The caller is responsible for pruning\n            the final list of duplicates before using it.""""""\n\n            # build composite names\n            if token == \'.\':\n                try:\n                    names[-1] += \'.\'\n                    # store state so the next token is added for x.y.z names\n                    tokeneater.name_cont = True\n                    return\n                except IndexError:\n                    pass\n            if token_type == tokenize.NAME and token not in keyword.kwlist:\n                if tokeneater.name_cont:\n                    # Dotted names\n                    names[-1] += token\n                    tokeneater.name_cont = False\n                else:\n                    # Regular new names.  We append everything, the caller\n                    # will be responsible for pruning the list later.  It\'s\n                    # very tricky to try to prune as we go, b/c composite\n                    # names can fool us.  The pruning at the end is easy\n                    # to do (or the caller can print a list with repeated\n                    # names if so desired.\n                    names.append(token)\n            elif token_type == tokenize.NEWLINE:\n                raise IndexError\n        # we need to store a bit of state in the tokenizer to build\n        # dotted names\n        tokeneater.name_cont = False\n\n        def linereader(file=file, lnum=[lnum], getline=linecache.getline):\n            line = getline(file, lnum[0])\n            lnum[0] += 1\n            return line\n\n        # Build the list of names on this line of code where the exception\n        # occurred.\n        try:\n            # This builds the names list in-place by capturing it from the\n            # enclosing scope.\n            for token in generate_tokens(linereader):\n                tokeneater(*token)\n        except (IndexError, UnicodeDecodeError, SyntaxError):\n            # signals exit of tokenizer\n            # SyntaxError can happen when trying to tokenize\n            # a compiled (e.g. .so or .pyd) extension\n            pass\n        except tokenize.TokenError as msg:\n            _m = (""An unexpected error occurred while tokenizing input file %s\\n""\n                  ""The following traceback may be corrupted or invalid\\n""\n                  ""The error message is: %s\\n"" % (file, msg))\n            print(_m)\n\n        # prune names list of duplicates, but keep the right order\n        unique_names = uniq_stable(names)\n\n        # Start loop over vars\n        lvals = []\n        for name_full in unique_names:\n            name_base = name_full.split(\'.\', 1)[0]\n            if name_base in frame.f_code.co_varnames:\n                if name_base in locals.keys():\n                    try:\n                        value = safe_repr(eval(name_full, locals))\n                    except:\n                        value = ""undefined""\n                else:\n                    value = ""undefined""\n                name = name_full\n                lvals.append(\'%s = %s\' % (name, value))\n            #elif print_globals:\n            #    if frame.f_globals.has_key(name_base):\n            #        try:\n            #            value = safe_repr(eval(name_full,frame.f_globals))\n            #        except:\n            #            value = ""undefined""\n            #    else:\n            #        value = ""undefined""\n            #    name = \'global %s\' % name_full\n            #    lvals.append(\'%s = %s\' % (name,value))\n        if lvals:\n            lvals = \'%s%s\' % (INDENT, (\'\\n%s\' % INDENT).join(lvals))\n        else:\n            lvals = \'\'\n\n        level = \'%s\\n%s %s\\n\' % (75 * \'.\', link, call)\n\n        if index is None:\n            frames.append(level)\n        else:\n            frames.append(\'%s%s\' % (level, \'\'.join(\n                _format_traceback_lines(lnum, index, lines, lvals))))\n\n    return frames\n\n\n###############################################################################\ndef format_exc(etype, evalue, etb, context=5, tb_offset=0):\n    """""" Return a nice text document describing the traceback.\n\n        Parameters\n        -----------\n        etype, evalue, etb: as returned by sys.exc_info\n        context: number of lines of the source file to plot\n        tb_offset: the number of stack frame not to use (0 = use all)\n\n    """"""\n    # some locals\n    try:\n        etype = etype.__name__\n    except AttributeError:\n        pass\n\n    # Header with the exception type, python version, and date\n    pyver = \'Python \' + sys.version.split()[0] + \': \' + sys.executable\n    date = time.ctime(time.time())\n    pid = \'PID: %i\' % os.getpid()\n\n    head = \'%s%s%s\\n%s%s%s\' % (\n        etype, \' \' * (75 - len(str(etype)) - len(date)),\n        date, pid, \' \' * (75 - len(str(pid)) - len(pyver)),\n        pyver)\n\n    # Drop topmost frames if requested\n    try:\n        records = _fixed_getframes(etb, context, tb_offset)\n    except:\n        raise\n        print(\'\\nUnfortunately, your original traceback can not be \'\n              \'constructed.\\n\')\n        return \'\'\n\n    # Get (safely) a string form of the exception info\n    try:\n        etype_str, evalue_str = map(str, (etype, evalue))\n    except:\n        # User exception is improperly defined.\n        etype, evalue = str, sys.exc_info()[:2]\n        etype_str, evalue_str = map(str, (etype, evalue))\n    # ... and format it\n    exception = [\'%s: %s\' % (etype_str, evalue_str)]\n    frames = format_records(records)\n    return \'%s\\n%s\\n%s\' % (head, \'\\n\'.join(frames), \'\'.join(exception[0]))\n\n\n###############################################################################\ndef format_outer_frames(context=5, stack_start=None, stack_end=None,\n                        ignore_ipython=True):\n    LNUM_POS, LINES_POS, INDEX_POS = 2, 4, 5\n    records = inspect.getouterframes(inspect.currentframe())\n    output = list()\n\n    for i, (frame, filename, line_no, func_name, lines, index) \\\n                                                in enumerate(records):\n        # Look inside the frame\'s globals dictionary for __file__, which should\n        # be better.\n        better_fn = frame.f_globals.get(\'__file__\', None)\n        if isinstance(better_fn, str):\n            # Check the type just in case someone did something weird with\n            # __file__. It might also be None if the error occurred during\n            # import.\n            filename = better_fn\n            if filename.endswith(\'.pyc\'):\n                filename = filename[:-4] + \'.py\'\n        if ignore_ipython:\n            # Hack to avoid printing the internals of IPython\n            if (os.path.basename(filename) == \'iplib.py\'\n                        and func_name in (\'safe_execfile\', \'runcode\')):\n                break\n        maybeStart = line_no - 1 - context // 2\n        start = max(maybeStart, 0)\n        end = start + context\n        lines = linecache.getlines(filename)[start:end]\n        # pad with empty lines if necessary\n        if maybeStart < 0:\n            lines = ([\'\\n\'] * -maybeStart) + lines\n        if len(lines) < context:\n            lines += [\'\\n\'] * (context - len(lines))\n        buf = list(records[i])\n        buf[LNUM_POS] = line_no\n        buf[INDEX_POS] = line_no - 1 - start\n        buf[LINES_POS] = lines\n        output.append(tuple(buf))\n    return \'\\n\'.join(format_records(output[stack_end:stack_start:-1]))\n'"
abupy/ExtBu/joblib/func_inspect.py,0,"b'""""""\nMy own variation on function-specific inspect-like features.\n""""""\n\n# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n# Copyright (c) 2009 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\nfrom itertools import islice\nimport inspect\nimport warnings\nimport re\nimport os\n\nfrom ._compat import _basestring\nfrom .logger import pformat\nfrom ._memory_helpers import open_py_source\nfrom ._compat import PY3_OR_LATER\n\n\ndef get_func_code(func):\n    """""" Attempts to retrieve a reliable function code hash.\n\n        The reason we don\'t use inspect.getsource is that it caches the\n        source, whereas we want this to be modified on the fly when the\n        function is modified.\n\n        Returns\n        -------\n        func_code: string\n            The function code\n        source_file: string\n            The path to the file in which the function is defined.\n        first_line: int\n            The first line of the code in the source file.\n\n        Notes\n        ------\n        This function does a bit more magic than inspect, and is thus\n        more robust.\n    """"""\n    source_file = None\n    try:\n        code = func.__code__\n        source_file = code.co_filename\n        if not os.path.exists(source_file):\n            # Use inspect for lambda functions and functions defined in an\n            # interactive shell, or in doctests\n            source_code = \'\'.join(inspect.getsourcelines(func)[0])\n            line_no = 1\n            if source_file.startswith(\'<doctest \'):\n                source_file, line_no = re.match(\n                    \'\\<doctest (.*\\.rst)\\[(.*)\\]\\>\', source_file).groups()\n                line_no = int(line_no)\n                source_file = \'<doctest %s>\' % source_file\n            return source_code, source_file, line_no\n        # Try to retrieve the source code.\n        with open_py_source(source_file) as source_file_obj:\n            first_line = code.co_firstlineno\n            # All the lines after the function definition:\n            source_lines = list(islice(source_file_obj, first_line - 1, None))\n        return \'\'.join(inspect.getblock(source_lines)), source_file, first_line\n    except:\n        # If the source code fails, we use the hash. This is fragile and\n        # might change from one session to another.\n        if hasattr(func, \'__code__\'):\n            # Python 3.X\n            return str(func.__code__.__hash__()), source_file, -1\n        else:\n            # Weird objects like numpy ufunc don\'t have __code__\n            # This is fragile, as quite often the id of the object is\n            # in the repr, so it might not persist across sessions,\n            # however it will work for ufuncs.\n            return repr(func), source_file, -1\n\n\ndef _clean_win_chars(string):\n    """"""Windows cannot encode some characters in filename.""""""\n    import urllib\n    if hasattr(urllib, \'quote\'):\n        quote = urllib.quote\n    else:\n        # In Python 3, quote is elsewhere\n        import urllib.parse\n        quote = urllib.parse.quote\n    for char in (\'<\', \'>\', \'!\', \':\', \'\\\\\'):\n        string = string.replace(char, quote(char))\n    return string\n\n\ndef get_func_name(func, resolv_alias=True, win_characters=True):\n    """""" Return the function import path (as a list of module names), and\n        a name for the function.\n\n        Parameters\n        ----------\n        func: callable\n            The func to inspect\n        resolv_alias: boolean, optional\n            If true, possible local aliases are indicated.\n        win_characters: boolean, optional\n            If true, substitute special characters using urllib.quote\n            This is useful in Windows, as it cannot encode some filenames\n    """"""\n    if hasattr(func, \'__module__\'):\n        module = func.__module__\n    else:\n        try:\n            module = inspect.getmodule(func)\n        except TypeError:\n            if hasattr(func, \'__class__\'):\n                module = func.__class__.__module__\n            else:\n                module = \'unknown\'\n    if module is None:\n        # Happens in doctests, eg\n        module = \'\'\n    if module == \'__main__\':\n        try:\n            filename = os.path.abspath(inspect.getsourcefile(func))\n        except:\n            filename = None\n        if filename is not None:\n            # mangling of full path to filename\n            parts = filename.split(os.sep)\n            if parts[-1].startswith(\'<ipython-input\'):\n                # function is defined in an IPython session. The filename\n                # will change with every new kernel instance. This hack\n                # always returns the same filename\n                parts[-1] = \'__ipython-input__\'\n            filename = \'-\'.join(parts)\n            if filename.endswith(\'.py\'):\n                filename = filename[:-3]\n            module = module + \'-\' + filename\n    module = module.split(\'.\')\n    if hasattr(func, \'func_name\'):\n        name = func.func_name\n    elif hasattr(func, \'__name__\'):\n        name = func.__name__\n    else:\n        name = \'unknown\'\n    # Hack to detect functions not defined at the module-level\n    if resolv_alias:\n        # TODO: Maybe add a warning here?\n        if hasattr(func, \'func_globals\') and name in func.func_globals:\n            if not func.func_globals[name] is func:\n                name = \'%s-alias\' % name\n    if inspect.ismethod(func):\n        # We need to add the name of the class\n        if hasattr(func, \'im_class\'):\n            klass = func.im_class\n            module.append(klass.__name__)\n    if os.name == \'nt\' and win_characters:\n        # Stupid windows can\'t encode certain characters in filenames\n        name = _clean_win_chars(name)\n        module = [_clean_win_chars(s) for s in module]\n    return module, name\n\n\ndef getfullargspec(func):\n    """"""Compatibility function to provide inspect.getfullargspec in Python 2\n\n    This should be rewritten using a backport of Python 3 signature\n    once we drop support for Python 2.6. We went for a simpler\n    approach at the time of writing because signature uses OrderedDict\n    which is not available in Python 2.6.\n    """"""\n    try:\n        return inspect.getfullargspec(func)\n    except AttributeError:\n        arg_spec = inspect.getargspec(func)\n        import collections\n        tuple_fields = (\'args varargs varkw defaults kwonlyargs \'\n                        \'kwonlydefaults annotations\')\n        tuple_type = collections.namedtuple(\'FullArgSpec\', tuple_fields)\n\n        return tuple_type(args=arg_spec.args,\n                          varargs=arg_spec.varargs,\n                          varkw=arg_spec.keywords,\n                          defaults=arg_spec.defaults,\n                          kwonlyargs=[],\n                          kwonlydefaults=None,\n                          annotations={})\n\n\ndef _signature_str(function_name, arg_spec):\n    """"""Helper function to output a function signature""""""\n    # inspect.formatargspec can not deal with the same\n    # number of arguments in python 2 and 3\n    arg_spec_for_format = arg_spec[:7 if PY3_OR_LATER else 4]\n\n    arg_spec_str = inspect.formatargspec(*arg_spec_for_format)\n    return \'{0}{1}\'.format(function_name, arg_spec_str)\n\n\ndef _function_called_str(function_name, args, kwargs):\n    """"""Helper function to output a function call""""""\n    template_str = \'{0}({1}, {2})\'\n\n    args_str = repr(args)[1:-1]\n    kwargs_str = \', \'.join(\'%s=%s\' % (k, v)\n                           for k, v in kwargs.items())\n    return template_str.format(function_name, args_str,\n                               kwargs_str)\n\n\ndef filter_args(func, ignore_lst, args=(), kwargs=dict()):\n    """""" Filters the given args and kwargs using a list of arguments to\n        ignore, and a function specification.\n\n        Parameters\n        ----------\n        func: callable\n            Function giving the argument specification\n        ignore_lst: list of strings\n            List of arguments to ignore (either a name of an argument\n            in the function spec, or \'*\', or \'**\')\n        *args: list\n            Positional arguments passed to the function.\n        **kwargs: dict\n            Keyword arguments passed to the function\n\n        Returns\n        -------\n        filtered_args: list\n            List of filtered positional and keyword arguments.\n    """"""\n    args = list(args)\n    if isinstance(ignore_lst, _basestring):\n        # Catch a common mistake\n        raise ValueError(\n            \'ignore_lst must be a list of parameters to ignore \'\n            \'%s (type %s) was given\' % (ignore_lst, type(ignore_lst)))\n    # Special case for functools.partial objects\n    if (not inspect.ismethod(func) and not inspect.isfunction(func)):\n        if ignore_lst:\n            warnings.warn(\'Cannot inspect object %s, ignore list will \'\n                          \'not work.\' % func, stacklevel=2)\n        return {\'*\': args, \'**\': kwargs}\n    arg_spec = getfullargspec(func)\n    arg_names = arg_spec.args + arg_spec.kwonlyargs\n    arg_defaults = arg_spec.defaults or ()\n    arg_defaults = arg_defaults + tuple(arg_spec.kwonlydefaults[k]\n                                        for k in arg_spec.kwonlyargs)\n    arg_varargs = arg_spec.varargs\n    arg_varkw = arg_spec.varkw\n\n    if inspect.ismethod(func):\n        # First argument is \'self\', it has been removed by Python\n        # we need to add it back:\n        args = [func.__self__, ] + args\n    # XXX: Maybe I need an inspect.isbuiltin to detect C-level methods, such\n    # as on ndarrays.\n\n    _, name = get_func_name(func, resolv_alias=False)\n    arg_dict = dict()\n    arg_position = -1\n    for arg_position, arg_name in enumerate(arg_names):\n        if arg_position < len(args):\n            # Positional argument or keyword argument given as positional\n            if arg_name not in arg_spec.kwonlyargs:\n                arg_dict[arg_name] = args[arg_position]\n            else:\n                raise ValueError(\n                    ""Keyword-only parameter \'%s\' was passed as ""\n                    \'positional parameter for %s:\\n\'\n                    \'     %s was called.\'\n                    % (arg_name,\n                       _signature_str(name, arg_spec),\n                       _function_called_str(name, args, kwargs))\n                )\n\n        else:\n            position = arg_position - len(arg_names)\n            if arg_name in kwargs:\n                arg_dict[arg_name] = kwargs.pop(arg_name)\n            else:\n                try:\n                    arg_dict[arg_name] = arg_defaults[position]\n                except (IndexError, KeyError):\n                    # Missing argument\n                    raise ValueError(\n                        \'Wrong number of arguments for %s:\\n\'\n                        \'     %s was called.\'\n                        % (_signature_str(name, arg_spec),\n                           _function_called_str(name, args, kwargs))\n                    )\n\n    varkwargs = dict()\n    for arg_name, arg_value in sorted(kwargs.items()):\n        if arg_name in arg_dict:\n            arg_dict[arg_name] = arg_value\n        elif arg_varkw is not None:\n            varkwargs[arg_name] = arg_value\n        else:\n            raise TypeError(""Ignore list for %s() contains an unexpected ""\n                            ""keyword argument \'%s\'"" % (name, arg_name))\n\n    if arg_varkw is not None:\n        arg_dict[\'**\'] = varkwargs\n    if arg_varargs is not None:\n        varargs = args[arg_position + 1:]\n        arg_dict[\'*\'] = varargs\n\n    # Now remove the arguments to be ignored\n    for item in ignore_lst:\n        if item in arg_dict:\n            arg_dict.pop(item)\n        else:\n            raise ValueError(""Ignore list: argument \'%s\' is not defined for ""\n                             ""function %s""\n                             % (item,\n                                _signature_str(name, arg_spec))\n                             )\n    # XXX: Return a sorted list of pairs?\n    return arg_dict\n\n\ndef format_signature(func, *args, **kwargs):\n    # XXX: Should this use inspect.formatargvalues/formatargspec?\n    module, name = get_func_name(func)\n    module = [m for m in module if m]\n    if module:\n        module.append(name)\n        module_path = \'.\'.join(module)\n    else:\n        module_path = name\n    arg_str = list()\n    previous_length = 0\n    for arg in args:\n        arg = pformat(arg, indent=2)\n        if len(arg) > 1500:\n            arg = \'%s...\' % arg[:700]\n        if previous_length > 80:\n            arg = \'\\n%s\' % arg\n        previous_length = len(arg)\n        arg_str.append(arg)\n    arg_str.extend([\'%s=%s\' % (v, pformat(i)) for v, i in kwargs.items()])\n    arg_str = \', \'.join(arg_str)\n\n    signature = \'%s(%s)\' % (name, arg_str)\n    return module_path, signature\n\n\ndef format_call(func, args, kwargs, object_name=""Memory""):\n    """""" Returns a nicely formatted statement displaying the function\n        call with the given arguments.\n    """"""\n    path, signature = format_signature(func, *args, **kwargs)\n    msg = \'%s\\n[%s] Calling %s...\\n%s\' % (80 * \'_\', object_name,\n                                          path, signature)\n    return msg\n    # XXX: Not using logging framework\n    # self.debug(msg)\n'"
abupy/ExtBu/joblib/hashing.py,9,"b'""""""\nFast cryptographic hash of Python objects, with a special case for fast\nhashing of numpy arrays.\n""""""\n\n# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n# Copyright (c) 2009 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\nimport pickle\nimport hashlib\nimport sys\nimport types\nimport struct\nimport io\n\nfrom ._compat import _bytes_or_unicode, PY3_OR_LATER\n\n\nif PY3_OR_LATER:\n    Pickler = pickle._Pickler\nelse:\n    Pickler = pickle.Pickler\n\n\nclass _ConsistentSet(object):\n    """""" Class used to ensure the hash of Sets is preserved\n        whatever the order of its items.\n    """"""\n    def __init__(self, set_sequence):\n        # Forces order of elements in set to ensure consistent hash.\n        try:\n            # Trying first to order the set assuming the type of elements is\n            # consistent and orderable.\n            # This fails on python 3 when elements are unorderable\n            # but we keep it in a try as it\'s faster.\n            self._sequence = sorted(set_sequence)\n        except TypeError:\n            # If elements are unorderable, sorting them using their hash.\n            # This is slower but works in any case.\n            self._sequence = sorted((hash(e) for e in set_sequence))\n\n\nclass _MyHash(object):\n    """""" Class used to hash objects that won\'t normally pickle """"""\n\n    def __init__(self, *args):\n        self.args = args\n\n\nclass Hasher(Pickler):\n    """""" A subclass of pickler, to do cryptographic hashing, rather than\n        pickling.\n    """"""\n\n    def __init__(self, hash_name=\'md5\'):\n        self.stream = io.BytesIO()\n        # By default we want a pickle protocol that only changes with\n        # the major python version and not the minor one\n        protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER\n                    else pickle.HIGHEST_PROTOCOL)\n        Pickler.__init__(self, self.stream, protocol=protocol)\n        # Initialise the hash obj\n        self._hash = hashlib.new(hash_name)\n\n    def hash(self, obj, return_digest=True):\n        try:\n            self.dump(obj)\n        except pickle.PicklingError as e:\n            e.args += (\'PicklingError while hashing %r: %r\' % (obj, e),)\n            raise\n        dumps = self.stream.getvalue()\n        self._hash.update(dumps)\n        if return_digest:\n            return self._hash.hexdigest()\n\n    def save(self, obj):\n        if isinstance(obj, (types.MethodType, type({}.pop))):\n            # the Pickler cannot pickle instance methods; here we decompose\n            # them into components that make them uniquely identifiable\n            if hasattr(obj, \'__func__\'):\n                func_name = obj.__func__.__name__\n            else:\n                func_name = obj.__name__\n            inst = obj.__self__\n            if type(inst) == type(pickle):\n                obj = _MyHash(func_name, inst.__name__)\n            elif inst is None:\n                # type(None) or type(module) do not pickle\n                obj = _MyHash(func_name, inst)\n            else:\n                cls = obj.__self__.__class__\n                obj = _MyHash(func_name, inst, cls)\n        Pickler.save(self, obj)\n\n    def memoize(self, obj):\n        # We want hashing to be sensitive to value instead of reference.\n        # For example we want [\'aa\', \'aa\'] and [\'aa\', \'aaZ\'[:2]]\n        # to hash to the same value and that\'s why we disable memoization\n        # for strings\n        if isinstance(obj, _bytes_or_unicode):\n            return\n        Pickler.memoize(self, obj)\n\n    # The dispatch table of the pickler is not accessible in Python\n    # 3, as these lines are only bugware for IPython, we skip them.\n    def save_global(self, obj, name=None, pack=struct.pack):\n        # We have to override this method in order to deal with objects\n        # defined interactively in IPython that are not injected in\n        # __main__\n        kwargs = dict(name=name, pack=pack)\n        if sys.version_info >= (3, 4):\n            del kwargs[\'pack\']\n        try:\n            Pickler.save_global(self, obj, **kwargs)\n        except pickle.PicklingError:\n            Pickler.save_global(self, obj, **kwargs)\n            module = getattr(obj, ""__module__"", None)\n            if module == \'__main__\':\n                my_name = name\n                if my_name is None:\n                    my_name = obj.__name__\n                mod = sys.modules[module]\n                if not hasattr(mod, my_name):\n                    # IPython doesn\'t inject the variables define\n                    # interactively in __main__\n                    setattr(mod, my_name, obj)\n\n    dispatch = Pickler.dispatch.copy()\n    # builtin\n    dispatch[type(len)] = save_global\n    # type\n    dispatch[type(object)] = save_global\n    # classobj\n    dispatch[type(Pickler)] = save_global\n    # function\n    dispatch[type(pickle.dump)] = save_global\n\n    def _batch_setitems(self, items):\n        # forces order of keys in dict to ensure consistent hash.\n        try:\n            # Trying first to compare dict assuming the type of keys is\n            # consistent and orderable.\n            # This fails on python 3 when keys are unorderable\n            # but we keep it in a try as it\'s faster.\n            Pickler._batch_setitems(self, iter(sorted(items)))\n        except TypeError:\n            # If keys are unorderable, sorting them using their hash. This is\n            # slower but works in any case.\n            Pickler._batch_setitems(self, iter(sorted((hash(k), v)\n                                                      for k, v in items)))\n\n    def save_set(self, set_items):\n        # forces order of items in Set to ensure consistent hash\n        Pickler.save(self, _ConsistentSet(set_items))\n\n    dispatch[type(set())] = save_set\n\n\nclass NumpyHasher(Hasher):\n    """""" Special case the hasher for when numpy is loaded.\n    """"""\n\n    def __init__(self, hash_name=\'md5\', coerce_mmap=False):\n        """"""\n            Parameters\n            ----------\n            hash_name: string\n                The hash algorithm to be used\n            coerce_mmap: boolean\n                Make no difference between np.memmap and np.ndarray\n                objects.\n        """"""\n        self.coerce_mmap = coerce_mmap\n        Hasher.__init__(self, hash_name=hash_name)\n        # delayed import of numpy, to avoid tight coupling\n        import numpy as np\n        self.np = np\n        if hasattr(np, \'getbuffer\'):\n            self._getbuffer = np.getbuffer\n        else:\n            self._getbuffer = memoryview\n\n    def save(self, obj):\n        """""" Subclass the save method, to hash ndarray subclass, rather\n            than pickling them. Off course, this is a total abuse of\n            the Pickler class.\n        """"""\n        if isinstance(obj, self.np.ndarray) and not obj.dtype.hasobject:\n            # Compute a hash of the object\n            # The update function of the hash requires a c_contiguous buffer.\n            if obj.shape == ():\n                # 0d arrays need to be flattened because viewing them as bytes\n                # raises a ValueError exception.\n                obj_c_contiguous = obj.flatten()\n            elif obj.flags.c_contiguous:\n                obj_c_contiguous = obj\n            elif obj.flags.f_contiguous:\n                obj_c_contiguous = obj.T\n            else:\n                # Cater for non-single-segment arrays: this creates a\n                # copy, and thus aleviates this issue.\n                # XXX: There might be a more efficient way of doing this\n                obj_c_contiguous = obj.flatten()\n\n            # memoryview is not supported for some dtypes, e.g. datetime64, see\n            # https://github.com/numpy/numpy/issues/4983. The\n            # workaround is to view the array as bytes before\n            # taking the memoryview.\n            self._hash.update(\n                self._getbuffer(obj_c_contiguous.view(self.np.uint8)))\n\n            # We store the class, to be able to distinguish between\n            # Objects with the same binary content, but different\n            # classes.\n            if self.coerce_mmap and isinstance(obj, self.np.memmap):\n                # We don\'t make the difference between memmap and\n                # normal ndarrays, to be able to reload previously\n                # computed results with memmap.\n                klass = self.np.ndarray\n            else:\n                klass = obj.__class__\n            # We also return the dtype and the shape, to distinguish\n            # different views on the same data with different dtypes.\n\n            # The object will be pickled by the pickler hashed at the end.\n            obj = (klass, (\'HASHED\', obj.dtype, obj.shape, obj.strides))\n        elif isinstance(obj, self.np.dtype):\n            # Atomic dtype objects are interned by their default constructor:\n            # np.dtype(\'f8\') is np.dtype(\'f8\')\n            # This interning is not maintained by a\n            # pickle.loads + pickle.dumps cycle, because __reduce__\n            # uses copy=True in the dtype constructor. This\n            # non-deterministic behavior causes the internal memoizer\n            # of the hasher to generate different hash values\n            # depending on the history of the dtype object.\n            # To prevent the hash from being sensitive to this, we use\n            # .descr which is a full (and never interned) description of\n            # the array dtype according to the numpy doc.\n            klass = obj.__class__\n            obj = (klass, (\'HASHED\', obj.descr))\n        Hasher.save(self, obj)\n\n\ndef hash(obj, hash_name=\'md5\', coerce_mmap=False):\n    """""" Quick calculation of a hash to identify uniquely Python objects\n        containing numpy arrays.\n\n\n        Parameters\n        -----------\n        hash_name: \'md5\' or \'sha1\'\n            Hashing algorithm used. sha1 is supposedly safer, but md5 is\n            faster.\n        coerce_mmap: boolean\n            Make no difference between np.memmap and np.ndarray\n    """"""\n    if \'numpy\' in sys.modules:\n        hasher = NumpyHasher(hash_name=hash_name, coerce_mmap=coerce_mmap)\n    else:\n        hasher = Hasher(hash_name=hash_name)\n    return hasher.hash(obj)\n'"
abupy/ExtBu/joblib/logger.py,3,"b'""""""\nHelpers for logging.\n\nThis module needs much love to become useful.\n""""""\n\n# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n# Copyright (c) 2008 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\nfrom __future__ import print_function\n\nimport time\nimport sys\nimport os\nimport shutil\nimport logging\nimport pprint\n\nfrom .disk import mkdirp\n\n\ndef _squeeze_time(t):\n    """"""Remove .1s to the time under Windows: this is the time it take to\n    stat files. This is needed to make results similar to timings under\n    Unix, for tests\n    """"""\n    if sys.platform.startswith(\'win\'):\n        return max(0, t - .1)\n    else:\n        return t\n\n\ndef format_time(t):\n    t = _squeeze_time(t)\n    return ""%.1fs, %.1fmin"" % (t, t / 60.)\n\n\ndef short_format_time(t):\n    t = _squeeze_time(t)\n    if t > 60:\n        return ""%4.1fmin"" % (t / 60.)\n    else:\n        return "" %5.1fs"" % (t)\n\n\ndef pformat(obj, indent=0, depth=3):\n    if \'numpy\' in sys.modules:\n        import numpy as np\n        print_options = np.get_printoptions()\n        np.set_printoptions(precision=6, threshold=64, edgeitems=1)\n    else:\n        print_options = None\n    out = pprint.pformat(obj, depth=depth, indent=indent)\n    if print_options:\n        np.set_printoptions(**print_options)\n    return out\n\n\n###############################################################################\n# class `Logger`\n###############################################################################\nclass Logger(object):\n    """""" Base class for logging messages.\n    """"""\n\n    def __init__(self, depth=3):\n        """"""\n            Parameters\n            ----------\n            depth: int, optional\n                The depth of objects printed.\n        """"""\n        self.depth = depth\n\n    def warn(self, msg):\n        logging.warn(""[%s]: %s"" % (self, msg))\n\n    def debug(self, msg):\n        # XXX: This conflicts with the debug flag used in children class\n        logging.debug(""[%s]: %s"" % (self, msg))\n\n    def format(self, obj, indent=0):\n        """""" Return the formated representation of the object.\n        """"""\n        return pformat(obj, indent=indent, depth=self.depth)\n\n\n###############################################################################\n# class `PrintTime`\n###############################################################################\nclass PrintTime(object):\n    """""" Print and log messages while keeping track of time.\n    """"""\n\n    def __init__(self, logfile=None, logdir=None):\n        if logfile is not None and logdir is not None:\n            raise ValueError(\'Cannot specify both logfile and logdir\')\n        # XXX: Need argument docstring\n        self.last_time = time.time()\n        self.start_time = self.last_time\n        if logdir is not None:\n            logfile = os.path.join(logdir, \'joblib.log\')\n        self.logfile = logfile\n        if logfile is not None:\n            mkdirp(os.path.dirname(logfile))\n            if os.path.exists(logfile):\n                # Rotate the logs\n                for i in range(1, 9):\n                    try:\n                        shutil.move(logfile + \'.%i\' % i,\n                                    logfile + \'.%i\' % (i + 1))\n                    except:\n                        ""No reason failing here""\n                # Use a copy rather than a move, so that a process\n                # monitoring this file does not get lost.\n                try:\n                    shutil.copy(logfile, logfile + \'.1\')\n                except:\n                    ""No reason failing here""\n            try:\n                with open(logfile, \'w\') as logfile:\n                    logfile.write(\'\\nLogging joblib python script\\n\')\n                    logfile.write(\'\\n---%s---\\n\' % time.ctime(self.last_time))\n            except:\n                """""" Multiprocessing writing to files can create race\n                    conditions. Rather fail silently than crash the\n                    computation.\n                """"""\n                # XXX: We actually need a debug flag to disable this\n                # silent failure.\n\n    def __call__(self, msg=\'\', total=False):\n        """""" Print the time elapsed between the last call and the current\n            call, with an optional message.\n        """"""\n        if not total:\n            time_lapse = time.time() - self.last_time\n            full_msg = ""%s: %s"" % (msg, format_time(time_lapse))\n        else:\n            # FIXME: Too much logic duplicated\n            time_lapse = time.time() - self.start_time\n            full_msg = ""%s: %.2fs, %.1f min"" % (msg, time_lapse,\n                                                time_lapse / 60)\n        print(full_msg, file=sys.stderr)\n        if self.logfile is not None:\n            try:\n                with open(self.logfile, \'a\') as f:\n                    print(full_msg, file=f)\n            except:\n                """""" Multiprocessing writing to files can create race\n                    conditions. Rather fail silently than crash the\n                    calculation.\n                """"""\n                # XXX: We actually need a debug flag to disable this\n                # silent failure.\n        self.last_time = time.time()\n'"
abupy/ExtBu/joblib/memory.py,0,"b'""""""\nA context object for caching a function\'s return value each time it\nis called with the same input arguments.\n\n""""""\n\n# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n# Copyright (c) 2009 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\n\nfrom __future__ import with_statement\nimport os\nimport shutil\nimport time\nimport pydoc\nimport re\nimport sys\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\nimport functools\nimport traceback\nimport warnings\nimport inspect\nimport json\nimport weakref\nimport io\n\n# Local imports\nfrom . import hashing\nfrom .func_inspect import get_func_code, get_func_name, filter_args\nfrom .func_inspect import format_signature, format_call\nfrom ._memory_helpers import open_py_source\nfrom .logger import Logger, format_time, pformat\nfrom . import numpy_pickle\nfrom .disk import mkdirp, rm_subdirs\nfrom ._compat import _basestring, PY3_OR_LATER\n\nFIRST_LINE_TEXT = ""# first line:""\n\n# TODO: The following object should have a data store object as a sub\n# object, and the interface to persist and query should be separated in\n# the data store.\n#\n# This would enable creating \'Memory\' objects with a different logic for\n# pickling that would simply span a MemorizedFunc with the same\n# store (or do we want to copy it to avoid cross-talks?), for instance to\n# implement HDF5 pickling.\n\n# TODO: Same remark for the logger, and probably use the Python logging\n# mechanism.\n\n\ndef extract_first_line(func_code):\n    """""" Extract the first line information from the function code\n        text if available.\n    """"""\n    if func_code.startswith(FIRST_LINE_TEXT):\n        func_code = func_code.split(\'\\n\')\n        first_line = int(func_code[0][len(FIRST_LINE_TEXT):])\n        func_code = \'\\n\'.join(func_code[1:])\n    else:\n        first_line = -1\n    return func_code, first_line\n\n\nclass JobLibCollisionWarning(UserWarning):\n    """""" Warn that there might be a collision between names of functions.\n    """"""\n\n\ndef _get_func_fullname(func):\n    """"""Compute the part of part associated with a function.\n\n    See code of_cache_key_to_dir() for details\n    """"""\n    modules, funcname = get_func_name(func)\n    modules.append(funcname)\n    return os.path.join(*modules)\n\n\ndef _cache_key_to_dir(cachedir, func, argument_hash):\n    """"""Compute directory associated with a given cache key.\n\n    func can be a function or a string as returned by _get_func_fullname().\n    """"""\n    parts = [cachedir]\n    if isinstance(func, _basestring):\n        parts.append(func)\n    else:\n        parts.append(_get_func_fullname(func))\n\n    if argument_hash is not None:\n        parts.append(argument_hash)\n    return os.path.join(*parts)\n\n\ndef _load_output(output_dir, func_name, timestamp=None, metadata=None,\n                 mmap_mode=None, verbose=0):\n    """"""Load output of a computation.""""""\n    if verbose > 1:\n        signature = """"\n        try:\n            if metadata is not None:\n                args = "", "".join([\'%s=%s\' % (name, value)\n                                  for name, value\n                                  in metadata[\'input_args\'].items()])\n                signature = ""%s(%s)"" % (os.path.basename(func_name),\n                                             args)\n            else:\n                signature = os.path.basename(func_name)\n        except KeyError:\n            pass\n\n        if timestamp is not None:\n            t = ""% 16s"" % format_time(time.time() - timestamp)\n        else:\n            t = """"\n\n        if verbose < 10:\n            print(\'[Memory]%s: Loading %s...\' % (t, str(signature)))\n        else:\n            print(\'[Memory]%s: Loading %s from %s\' % (\n                    t, str(signature), output_dir))\n\n    filename = os.path.join(output_dir, \'output.pkl\')\n    if not os.path.isfile(filename):\n        raise KeyError(\n            ""Non-existing cache value (may have been cleared).\\n""\n            ""File %s does not exist"" % filename)\n    return numpy_pickle.load(filename, mmap_mode=mmap_mode)\n\n\n# An in-memory store to avoid looking at the disk-based function\n# source code to check if a function definition has changed\n_FUNCTION_HASHES = weakref.WeakKeyDictionary()\n\n\n###############################################################################\n# class `MemorizedResult`\n###############################################################################\nclass MemorizedResult(Logger):\n    """"""Object representing a cached value.\n\n    Attributes\n    ----------\n    cachedir: string\n        path to root of joblib cache\n\n    func: function or string\n        function whose output is cached. The string case is intended only for\n        instanciation based on the output of repr() on another instance.\n        (namely eval(repr(memorized_instance)) works).\n\n    argument_hash: string\n        hash of the function arguments\n\n    mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}\n        The memmapping mode used when loading from cache numpy arrays. See\n        numpy.load for the meaning of the different values.\n\n    verbose: int\n        verbosity level (0 means no message)\n\n    timestamp, metadata: string\n        for internal use only\n    """"""\n    def __init__(self, cachedir, func, argument_hash,\n                 mmap_mode=None, verbose=0, timestamp=None, metadata=None):\n        Logger.__init__(self)\n        if isinstance(func, _basestring):\n            self.func = func\n        else:\n            self.func = _get_func_fullname(func)\n        self.argument_hash = argument_hash\n        self.cachedir = cachedir\n        self.mmap_mode = mmap_mode\n\n        self._output_dir = _cache_key_to_dir(cachedir, self.func,\n                                             argument_hash)\n\n        if metadata is not None:\n            self.metadata = metadata\n        else:\n            self.metadata = {}\n            # No error is relevant here.\n            try:\n                with open(os.path.join(self._output_dir, \'metadata.json\'),\n                          \'rb\') as f:\n                    self.metadata = json.load(f)\n            except:\n                pass\n\n        self.duration = self.metadata.get(\'duration\', None)\n        self.verbose = verbose\n        self.timestamp = timestamp\n\n    def get(self):\n        """"""Read value from cache and return it.""""""\n        return _load_output(self._output_dir, _get_func_fullname(self.func),\n                            timestamp=self.timestamp,\n                            metadata=self.metadata, mmap_mode=self.mmap_mode,\n                            verbose=self.verbose)\n\n    def clear(self):\n        """"""Clear value from cache""""""\n        shutil.rmtree(self._output_dir, ignore_errors=True)\n\n    def __repr__(self):\n        return (\'{class_name}(cachedir=""{cachedir}"", func=""{func}"", \'\n                \'argument_hash=""{argument_hash}"")\'.format(\n                    class_name=self.__class__.__name__,\n                    cachedir=self.cachedir,\n                    func=self.func,\n                    argument_hash=self.argument_hash\n                    ))\n\n    def __reduce__(self):\n        return (self.__class__, (self.cachedir, self.func, self.argument_hash),\n                {\'mmap_mode\': self.mmap_mode})\n\n\nclass NotMemorizedResult(object):\n    """"""Class representing an arbitrary value.\n\n    This class is a replacement for MemorizedResult when there is no cache.\n    """"""\n    __slots__ = (\'value\', \'valid\')\n\n    def __init__(self, value):\n        self.value = value\n        self.valid = True\n\n    def get(self):\n        if self.valid:\n            return self.value\n        else:\n            raise KeyError(""No value stored."")\n\n    def clear(self):\n        self.valid = False\n        self.value = None\n\n    def __repr__(self):\n        if self.valid:\n            return \'{class_name}({value})\'.format(\n                class_name=self.__class__.__name__,\n                value=pformat(self.value)\n                )\n        else:\n            return self.__class__.__name__ + \' with no value\'\n\n    # __getstate__ and __setstate__ are required because of __slots__\n    def __getstate__(self):\n        return {""valid"": self.valid, ""value"": self.value}\n\n    def __setstate__(self, state):\n        self.valid = state[""valid""]\n        self.value = state[""value""]\n\n\n###############################################################################\n# class `NotMemorizedFunc`\n###############################################################################\nclass NotMemorizedFunc(object):\n    """"""No-op object decorating a function.\n\n    This class replaces MemorizedFunc when there is no cache. It provides an\n    identical API but does not write anything on disk.\n\n    Attributes\n    ----------\n    func: callable\n        Original undecorated function.\n    """"""\n    # Should be a light as possible (for speed)\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        return self.func(*args, **kwargs)\n\n    def call_and_shelve(self, *args, **kwargs):\n        return NotMemorizedResult(self.func(*args, **kwargs))\n\n    def __reduce__(self):\n        return (self.__class__, (self.func,))\n\n    def __repr__(self):\n        return \'%s(func=%s)\' % (\n                    self.__class__.__name__,\n                    self.func\n            )\n\n    def clear(self, warn=True):\n        # Argument ""warn"" is for compatibility with MemorizedFunc.clear\n        pass\n\n\n###############################################################################\n# class `MemorizedFunc`\n###############################################################################\nclass MemorizedFunc(Logger):\n    """""" Callable object decorating a function for caching its return value\n        each time it is called.\n\n        All values are cached on the filesystem, in a deep directory\n        structure. Methods are provided to inspect the cache or clean it.\n\n        Attributes\n        ----------\n        func: callable\n            The original, undecorated, function.\n\n        cachedir: string\n            Path to the base cache directory of the memory context.\n\n        ignore: list or None\n            List of variable names to ignore when choosing whether to\n            recompute.\n\n        mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}\n            The memmapping mode used when loading from cache\n            numpy arrays. See numpy.load for the meaning of the different\n            values.\n\n        compress: boolean, or integer\n            Whether to zip the stored data on disk. If an integer is\n            given, it should be between 1 and 9, and sets the amount\n            of compression. Note that compressed arrays cannot be\n            read by memmapping.\n\n        verbose: int, optional\n            The verbosity flag, controls messages that are issued as\n            the function is evaluated.\n    """"""\n    #-------------------------------------------------------------------------\n    # Public interface\n    #-------------------------------------------------------------------------\n\n    def __init__(self, func, cachedir, ignore=None, mmap_mode=None,\n                 compress=False, verbose=1, timestamp=None):\n        """"""\n            Parameters\n            ----------\n            func: callable\n                The function to decorate\n            cachedir: string\n                The path of the base directory to use as a data store\n            ignore: list or None\n                List of variable names to ignore.\n            mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}, optional\n                The memmapping mode used when loading from cache\n                numpy arrays. See numpy.load for the meaning of the\n                arguments.\n            compress : boolean, or integer\n                Whether to zip the stored data on disk. If an integer is\n                given, it should be between 1 and 9, and sets the amount\n                of compression. Note that compressed arrays cannot be\n                read by memmapping.\n            verbose: int, optional\n                Verbosity flag, controls the debug messages that are issued\n                as functions are evaluated. The higher, the more verbose\n            timestamp: float, optional\n                The reference time from which times in tracing messages\n                are reported.\n        """"""\n        Logger.__init__(self)\n        self.mmap_mode = mmap_mode\n        self.func = func\n        if ignore is None:\n            ignore = []\n        self.ignore = ignore\n\n        self._verbose = verbose\n        self.cachedir = cachedir\n        self.compress = compress\n        if compress and self.mmap_mode is not None:\n            warnings.warn(\'Compressed results cannot be memmapped\',\n                          stacklevel=2)\n        if timestamp is None:\n            timestamp = time.time()\n        self.timestamp = timestamp\n        mkdirp(self.cachedir)\n        try:\n            functools.update_wrapper(self, func)\n        except:\n            "" Objects like ufunc don\'t like that ""\n        if inspect.isfunction(func):\n            doc = pydoc.TextDoc().document(func)\n            # Remove blank line\n            doc = doc.replace(\'\\n\', \'\\n\\n\', 1)\n            # Strip backspace-overprints for compatibility with autodoc\n            doc = re.sub(\'\\x08.\', \'\', doc)\n        else:\n            # Pydoc does a poor job on other objects\n            doc = func.__doc__\n        self.__doc__ = \'Memoized version of %s\' % doc\n\n    def _cached_call(self, args, kwargs):\n        """"""Call wrapped function and cache result, or read cache if available.\n\n        This function returns the wrapped function output and some metadata.\n\n        Returns\n        -------\n        output: value or tuple\n            what is returned by wrapped function\n\n        argument_hash: string\n            hash of function arguments\n\n        metadata: dict\n            some metadata about wrapped function call (see _persist_input())\n        """"""\n        # Compare the function code with the previous to see if the\n        # function code has changed\n        output_dir, argument_hash = self._get_output_dir(*args, **kwargs)\n        metadata = None\n        # FIXME: The statements below should be try/excepted\n        if not (self._check_previous_func_code(stacklevel=4) and\n                                 os.path.exists(output_dir)):\n            if self._verbose > 10:\n                _, name = get_func_name(self.func)\n                self.warn(\'Computing func %s, argument hash %s in \'\n                          \'directory %s\'\n                        % (name, argument_hash, output_dir))\n            out, metadata = self.call(*args, **kwargs)\n            if self.mmap_mode is not None:\n                # Memmap the output at the first call to be consistent with\n                # later calls\n                out = _load_output(output_dir, _get_func_fullname(self.func),\n                                   timestamp=self.timestamp,\n                                   mmap_mode=self.mmap_mode,\n                                   verbose=self._verbose)\n        else:\n            try:\n                t0 = time.time()\n                out = _load_output(output_dir, _get_func_fullname(self.func),\n                                   timestamp=self.timestamp,\n                                   metadata=metadata, mmap_mode=self.mmap_mode,\n                                   verbose=self._verbose)\n                if self._verbose > 4:\n                    t = time.time() - t0\n                    _, name = get_func_name(self.func)\n                    msg = \'%s cache loaded - %s\' % (name, format_time(t))\n                    print(max(0, (80 - len(msg))) * \'_\' + msg)\n            except Exception:\n                # XXX: Should use an exception logger\n                self.warn(\'Exception while loading results for \'\n                          \'(args=%s, kwargs=%s)\\n %s\' %\n                          (args, kwargs, traceback.format_exc()))\n\n                shutil.rmtree(output_dir, ignore_errors=True)\n                out, metadata = self.call(*args, **kwargs)\n                argument_hash = None\n        return (out, argument_hash, metadata)\n\n    def call_and_shelve(self, *args, **kwargs):\n        """"""Call wrapped function, cache result and return a reference.\n\n        This method returns a reference to the cached result instead of the\n        result itself. The reference object is small and pickeable, allowing\n        to send or store it easily. Call .get() on reference object to get\n        result.\n\n        Returns\n        -------\n        cached_result: MemorizedResult or NotMemorizedResult\n            reference to the value returned by the wrapped function. The\n            class ""NotMemorizedResult"" is used when there is no cache\n            activated (e.g. cachedir=None in Memory).\n        """"""\n        _, argument_hash, metadata = self._cached_call(args, kwargs)\n\n        return MemorizedResult(self.cachedir, self.func, argument_hash,\n            metadata=metadata, verbose=self._verbose - 1,\n            timestamp=self.timestamp)\n\n    def __call__(self, *args, **kwargs):\n        return self._cached_call(args, kwargs)[0]\n\n    def __reduce__(self):\n        """""" We don\'t store the timestamp when pickling, to avoid the hash\n            depending from it.\n            In addition, when unpickling, we run the __init__\n        """"""\n        return (self.__class__, (self.func, self.cachedir, self.ignore,\n                self.mmap_mode, self.compress, self._verbose))\n\n    def format_signature(self, *args, **kwargs):\n        warnings.warn(""MemorizedFunc.format_signature will be removed in a ""\n                      ""future version of joblib."", DeprecationWarning)\n        return format_signature(self.func, *args, **kwargs)\n\n    def format_call(self, *args, **kwargs):\n        warnings.warn(""MemorizedFunc.format_call will be removed in a ""\n                      ""future version of joblib."", DeprecationWarning)\n        return format_call(self.func, args, kwargs)\n\n    #-------------------------------------------------------------------------\n    # Private interface\n    #-------------------------------------------------------------------------\n\n    def _get_argument_hash(self, *args, **kwargs):\n        return hashing.hash(filter_args(self.func, self.ignore,\n                                         args, kwargs),\n                             coerce_mmap=(self.mmap_mode is not None))\n\n    def _get_output_dir(self, *args, **kwargs):\n        """""" Return the directory in which are persisted the result\n            of the function called with the given arguments.\n        """"""\n        argument_hash = self._get_argument_hash(*args, **kwargs)\n        output_dir = os.path.join(self._get_func_dir(self.func),\n                                  argument_hash)\n        return output_dir, argument_hash\n\n    get_output_dir = _get_output_dir  # backward compatibility\n\n    def _get_func_dir(self, mkdir=True):\n        """""" Get the directory corresponding to the cache for the\n            function.\n        """"""\n        func_dir = _cache_key_to_dir(self.cachedir, self.func, None)\n        if mkdir:\n            mkdirp(func_dir)\n        return func_dir\n\n    def _hash_func(self):\n        """"""Hash a function to key the online cache""""""\n        func_code_h = hash(getattr(self.func, \'__code__\', None))\n        return id(self.func), hash(self.func), func_code_h\n\n    def _write_func_code(self, filename, func_code, first_line):\n        """""" Write the function code and the filename to a file.\n        """"""\n        # We store the first line because the filename and the function\n        # name is not always enough to identify a function: people\n        # sometimes have several functions named the same way in a\n        # file. This is bad practice, but joblib should be robust to bad\n        # practice.\n        func_code = u\'%s %i\\n%s\' % (FIRST_LINE_TEXT, first_line, func_code)\n        with io.open(filename, \'w\', encoding=""UTF-8"") as out:\n            out.write(func_code)\n        # Also store in the in-memory store of function hashes\n        is_named_callable = False\n        if PY3_OR_LATER:\n            is_named_callable = (hasattr(self.func, \'__name__\')\n                                 and self.func.__name__ != \'<lambda>\')\n        else:\n            is_named_callable = (hasattr(self.func, \'func_name\')\n                                 and self.func.func_name != \'<lambda>\')\n        if is_named_callable:\n            # Don\'t do this for lambda functions or strange callable\n            # objects, as it ends up being too fragile\n            func_hash = self._hash_func()\n            try:\n                _FUNCTION_HASHES[self.func] = func_hash\n            except TypeError:\n                # Some callable are not hashable\n                pass\n\n    def _check_previous_func_code(self, stacklevel=2):\n        """"""\n            stacklevel is the depth a which this function is called, to\n            issue useful warnings to the user.\n        """"""\n        # First check if our function is in the in-memory store.\n        # Using the in-memory store not only makes things faster, but it\n        # also renders us robust to variations of the files when the\n        # in-memory version of the code does not vary\n        try:\n            if self.func in _FUNCTION_HASHES:\n                # We use as an identifier the id of the function and its\n                # hash. This is more likely to falsely change than have hash\n                # collisions, thus we are on the safe side.\n                func_hash = self._hash_func()\n                if func_hash == _FUNCTION_HASHES[self.func]:\n                    return True\n        except TypeError:\n            # Some callables are not hashable\n            pass\n\n        # Here, we go through some effort to be robust to dynamically\n        # changing code and collision. We cannot inspect.getsource\n        # because it is not reliable when using IPython\'s magic ""%run"".\n        func_code, source_file, first_line = get_func_code(self.func)\n        func_dir = self._get_func_dir()\n        func_code_file = os.path.join(func_dir, \'func_code.py\')\n\n        try:\n            with io.open(func_code_file, encoding=""UTF-8"") as infile:\n                old_func_code, old_first_line = \\\n                            extract_first_line(infile.read())\n        except IOError:\n                self._write_func_code(func_code_file, func_code, first_line)\n                return False\n        if old_func_code == func_code:\n            return True\n\n        # We have differing code, is this because we are referring to\n        # different functions, or because the function we are referring to has\n        # changed?\n\n        _, func_name = get_func_name(self.func, resolv_alias=False,\n                                     win_characters=False)\n        if old_first_line == first_line == -1 or func_name == \'<lambda>\':\n            if not first_line == -1:\n                func_description = \'%s (%s:%i)\' % (func_name,\n                                                source_file, first_line)\n            else:\n                func_description = func_name\n            warnings.warn(JobLibCollisionWarning(\n                ""Cannot detect name collisions for function \'%s\'""\n                        % func_description), stacklevel=stacklevel)\n\n        # Fetch the code at the old location and compare it. If it is the\n        # same than the code store, we have a collision: the code in the\n        # file has not changed, but the name we have is pointing to a new\n        # code block.\n        if not old_first_line == first_line and source_file is not None:\n            possible_collision = False\n            if os.path.exists(source_file):\n                _, func_name = get_func_name(self.func, resolv_alias=False)\n                num_lines = len(func_code.split(\'\\n\'))\n                with open_py_source(source_file) as f:\n                    on_disk_func_code = f.readlines()[\n                        old_first_line - 1:old_first_line - 1 + num_lines - 1]\n                on_disk_func_code = \'\'.join(on_disk_func_code)\n                possible_collision = (on_disk_func_code.rstrip()\n                                      == old_func_code.rstrip())\n            else:\n                possible_collision = source_file.startswith(\'<doctest \')\n            if possible_collision:\n                warnings.warn(JobLibCollisionWarning(\n                        \'Possible name collisions between functions \'\n                        ""\'%s\' (%s:%i) and \'%s\' (%s:%i)"" %\n                        (func_name, source_file, old_first_line,\n                        func_name, source_file, first_line)),\n                                stacklevel=stacklevel)\n\n        # The function has changed, wipe the cache directory.\n        # XXX: Should be using warnings, and giving stacklevel\n        if self._verbose > 10:\n            _, func_name = get_func_name(self.func, resolv_alias=False)\n            self.warn(""Function %s (stored in %s) has changed."" %\n                        (func_name, func_dir))\n        self.clear(warn=True)\n        return False\n\n    def clear(self, warn=True):\n        """""" Empty the function\'s cache.\n        """"""\n        func_dir = self._get_func_dir(mkdir=False)\n        if self._verbose > 0 and warn:\n            self.warn(""Clearing cache %s"" % func_dir)\n        if os.path.exists(func_dir):\n            shutil.rmtree(func_dir, ignore_errors=True)\n        mkdirp(func_dir)\n        func_code, _, first_line = get_func_code(self.func)\n        func_code_file = os.path.join(func_dir, \'func_code.py\')\n        self._write_func_code(func_code_file, func_code, first_line)\n\n    def call(self, *args, **kwargs):\n        """""" Force the execution of the function with the given arguments and\n            persist the output values.\n        """"""\n        start_time = time.time()\n        output_dir, _ = self._get_output_dir(*args, **kwargs)\n        if self._verbose > 0:\n            print(format_call(self.func, args, kwargs))\n        output = self.func(*args, **kwargs)\n        self._persist_output(output, output_dir)\n        duration = time.time() - start_time\n        metadata = self._persist_input(output_dir, duration, args, kwargs)\n\n        if self._verbose > 0:\n            _, name = get_func_name(self.func)\n            msg = \'%s - %s\' % (name, format_time(duration))\n            print(max(0, (80 - len(msg))) * \'_\' + msg)\n        return output, metadata\n\n    # Make public\n    def _persist_output(self, output, dir):\n        """""" Persist the given output tuple in the directory.\n        """"""\n        try:\n            mkdirp(dir)\n            filename = os.path.join(dir, \'output.pkl\')\n            numpy_pickle.dump(output, filename, compress=self.compress)\n            if self._verbose > 10:\n                print(\'Persisting in %s\' % dir)\n        except OSError:\n            "" Race condition in the creation of the directory ""\n\n    def _persist_input(self, output_dir, duration, args, kwargs,\n                       this_duration_limit=0.5):\n        """""" Save a small summary of the call using json format in the\n            output directory.\n\n            output_dir: string\n                directory where to write metadata.\n\n            duration: float\n                time taken by hashing input arguments, calling the wrapped\n                function and persisting its output.\n\n            args, kwargs: list and dict\n                input arguments for wrapped function\n\n            this_duration_limit: float\n                Max execution time for this function before issuing a warning.\n        """"""\n        start_time = time.time()\n        argument_dict = filter_args(self.func, self.ignore,\n                                    args, kwargs)\n\n        input_repr = dict((k, repr(v)) for k, v in argument_dict.items())\n        # This can fail due to race-conditions with multiple\n        # concurrent joblibs removing the file or the directory\n        metadata = {""duration"": duration, ""input_args"": input_repr}\n        try:\n            mkdirp(output_dir)\n            with open(os.path.join(output_dir, \'metadata.json\'), \'w\') as f:\n                json.dump(metadata, f)\n        except:\n            pass\n\n        this_duration = time.time() - start_time\n        if this_duration > this_duration_limit:\n            # This persistence should be fast. It will not be if repr() takes\n            # time and its output is large, because json.dump will have to\n            # write a large file. This should not be an issue with numpy arrays\n            # for which repr() always output a short representation, but can\n            # be with complex dictionaries. Fixing the problem should be a\n            # matter of replacing repr() above by something smarter.\n            warnings.warn(""Persisting input arguments took %.2fs to run.\\n""\n                          ""If this happens often in your code, it can cause ""\n                          ""performance problems \\n""\n                          ""(results will be correct in all cases). \\n""\n                          ""The reason for this is probably some large input ""\n                          ""arguments for a wrapped\\n""\n                          "" function (e.g. large strings).\\n""\n                          ""THIS IS A JOBLIB ISSUE. If you can, kindly provide ""\n                          ""the joblib\'s team with an\\n""\n                          "" example so that they can fix the problem.""\n                          % this_duration, stacklevel=5)\n        return metadata\n\n    def load_output(self, output_dir):\n        """""" Read the results of a previous calculation from the directory\n            it was cached in.\n        """"""\n        warnings.warn(""MemorizedFunc.load_output is deprecated and will be ""\n                      ""removed in a future version\\n""\n                      ""of joblib. A MemorizedResult provides similar features"",\n                      DeprecationWarning)\n        # No metadata available here.\n        return _load_output(output_dir, _get_func_fullname(self.func),\n                            timestamp=self.timestamp,\n                            mmap_mode=self.mmap_mode, verbose=self._verbose)\n\n    # XXX: Need a method to check if results are available.\n\n    #-------------------------------------------------------------------------\n    # Private `object` interface\n    #-------------------------------------------------------------------------\n\n    def __repr__(self):\n        return \'%s(func=%s, cachedir=%s)\' % (\n                    self.__class__.__name__,\n                    self.func,\n                    repr(self.cachedir),\n                    )\n\n\n###############################################################################\n# class `Memory`\n###############################################################################\nclass Memory(Logger):\n    """""" A context object for caching a function\'s return value each time it\n        is called with the same input arguments.\n\n        All values are cached on the filesystem, in a deep directory\n        structure.\n\n        see :ref:`memory_reference`\n    """"""\n    #-------------------------------------------------------------------------\n    # Public interface\n    #-------------------------------------------------------------------------\n\n    def __init__(self, cachedir, mmap_mode=None, compress=False, verbose=1):\n        """"""\n            Parameters\n            ----------\n            cachedir: string or None\n                The path of the base directory to use as a data store\n                or None. If None is given, no caching is done and\n                the Memory object is completely transparent.\n            mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}, optional\n                The memmapping mode used when loading from cache\n                numpy arrays. See numpy.load for the meaning of the\n                arguments.\n            compress: boolean, or integer\n                Whether to zip the stored data on disk. If an integer is\n                given, it should be between 1 and 9, and sets the amount\n                of compression. Note that compressed arrays cannot be\n                read by memmapping.\n            verbose: int, optional\n                Verbosity flag, controls the debug messages that are issued\n                as functions are evaluated.\n        """"""\n        # XXX: Bad explanation of the None value of cachedir\n        Logger.__init__(self)\n        self._verbose = verbose\n        self.mmap_mode = mmap_mode\n        self.timestamp = time.time()\n        self.compress = compress\n        if compress and mmap_mode is not None:\n            warnings.warn(\'Compressed results cannot be memmapped\',\n                          stacklevel=2)\n        if cachedir is None:\n            self.cachedir = None\n        else:\n            self.cachedir = os.path.join(cachedir, \'joblib\')\n            mkdirp(self.cachedir)\n\n    def cache(self, func=None, ignore=None, verbose=None,\n                        mmap_mode=False):\n        """""" Decorates the given function func to only compute its return\n            value for input arguments not cached on disk.\n\n            Parameters\n            ----------\n            func: callable, optional\n                The function to be decorated\n            ignore: list of strings\n                A list of arguments name to ignore in the hashing\n            verbose: integer, optional\n                The verbosity mode of the function. By default that\n                of the memory object is used.\n            mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}, optional\n                The memmapping mode used when loading from cache\n                numpy arrays. See numpy.load for the meaning of the\n                arguments. By default that of the memory object is used.\n\n            Returns\n            -------\n            decorated_func: MemorizedFunc object\n                The returned object is a MemorizedFunc object, that is\n                callable (behaves like a function), but offers extra\n                methods for cache lookup and management. See the\n                documentation for :class:`joblib.memory.MemorizedFunc`.\n        """"""\n        if func is None:\n            # Partial application, to be able to specify extra keyword\n            # arguments in decorators\n            return functools.partial(self.cache, ignore=ignore,\n                                     verbose=verbose, mmap_mode=mmap_mode)\n        if self.cachedir is None:\n            return NotMemorizedFunc(func)\n        if verbose is None:\n            verbose = self._verbose\n        if mmap_mode is False:\n            mmap_mode = self.mmap_mode\n        if isinstance(func, MemorizedFunc):\n            func = func.func\n        return MemorizedFunc(func, cachedir=self.cachedir,\n                                   mmap_mode=mmap_mode,\n                                   ignore=ignore,\n                                   compress=self.compress,\n                                   verbose=verbose,\n                                   timestamp=self.timestamp)\n\n    def clear(self, warn=True):\n        """""" Erase the complete cache directory.\n        """"""\n        if warn:\n            self.warn(\'Flushing completely the cache\')\n        if self.cachedir is not None:\n            rm_subdirs(self.cachedir)\n\n    def eval(self, func, *args, **kwargs):\n        """""" Eval function func with arguments `*args` and `**kwargs`,\n            in the context of the memory.\n\n            This method works similarly to the builtin `apply`, except\n            that the function is called only if the cache is not\n            up to date.\n\n        """"""\n        if self.cachedir is None:\n            return func(*args, **kwargs)\n        return self.cache(func)(*args, **kwargs)\n\n    #-------------------------------------------------------------------------\n    # Private `object` interface\n    #-------------------------------------------------------------------------\n\n    def __repr__(self):\n        return \'%s(cachedir=%s)\' % (\n                    self.__class__.__name__,\n                    repr(self.cachedir),\n                    )\n\n    def __reduce__(self):\n        """""" We don\'t store the timestamp when pickling, to avoid the hash\n            depending from it.\n            In addition, when unpickling, we run the __init__\n        """"""\n        # We need to remove \'joblib\' from the end of cachedir\n        cachedir = self.cachedir[:-7] if self.cachedir is not None else None\n        return (self.__class__, (cachedir,\n                self.mmap_mode, self.compress, self._verbose))\n'"
abupy/ExtBu/joblib/my_exceptions.py,0,"b'""""""\nExceptions\n""""""\n# Author: Gael Varoquaux < gael dot varoquaux at normalesup dot org >\n# Copyright: 2010, Gael Varoquaux\n# License: BSD 3 clause\n\nimport sys\n\nfrom ._compat import PY3_OR_LATER\n\nclass JoblibException(Exception):\n    """"""A simple exception with an error message that you can get to.""""""\n    def __init__(self, *args):\n        # We need to implement __init__ so that it is picked in the\n        # multiple heritance hierarchy in the class created in\n        # _mk_exception. Note: in Python 2, if you implement __init__\n        # in your exception class you need to set .args correctly,\n        # otherwise you can dump an exception instance with pickle but\n        # not load it (at load time an empty .args will be passed to\n        # the constructor). Also we want to be explicit and not use\n        # \'super\' here. Using \'super\' can cause a sibling class method\n        # to be called and we have no control the sibling class method\n        # constructor signature in the exception returned by\n        # _mk_exception.\n        Exception.__init__(self, *args)\n\n    def __repr__(self):\n        if hasattr(self, \'args\') and len(self.args) > 0:\n            message = self.args[0]\n        else:\n            message = \'\'\n\n        name = self.__class__.__name__\n        return \'%s\\n%s\\n%s\\n%s\' % (name, 75 * \'_\', message, 75 * \'_\')\n\n    __str__ = __repr__\n\n\nclass TransportableException(JoblibException):\n    """"""An exception containing all the info to wrap an original\n        exception and recreate it.\n    """"""\n\n    def __init__(self, message, etype):\n        # The next line set the .args correctly. This is needed to\n        # make the exception loadable with pickle\n        JoblibException.__init__(self, message, etype)\n        self.message = message\n        self.etype = etype\n\n\nclass WorkerInterrupt(Exception):\n    """""" An exception that is not KeyboardInterrupt to allow subprocesses\n        to be interrupted.\n    """"""\n    pass\n\n\n_exception_mapping = dict()\n\n\ndef _mk_exception(exception, name=None):\n    # Create an exception inheriting from both JoblibException\n    # and that exception\n    if name is None:\n        name = exception.__name__\n    this_name = \'Joblib%s\' % name\n    if this_name in _exception_mapping:\n        # Avoid creating twice the same exception\n        this_exception = _exception_mapping[this_name]\n    else:\n        if exception is Exception:\n            # JoblibException is already a subclass of Exception. No\n            # need to use multiple inheritance\n            return JoblibException, this_name\n        try:\n            this_exception = type(\n                this_name, (JoblibException, exception), {})\n            _exception_mapping[this_name] = this_exception\n        except TypeError:\n            # This happens if ""Cannot create a consistent method\n            # resolution order"", e.g. because \'exception\' is a\n            # subclass of JoblibException or \'exception\' is not an\n            # acceptable base class\n            this_exception = JoblibException\n\n    return this_exception, this_name\n\n\ndef _mk_common_exceptions():\n    namespace = dict()\n    if PY3_OR_LATER:\n        import builtins as _builtin_exceptions\n        common_exceptions = filter(\n            lambda x: x.endswith(\'Error\'),\n            dir(_builtin_exceptions))\n    else:\n        import exceptions as _builtin_exceptions\n        common_exceptions = dir(_builtin_exceptions)\n\n    for name in common_exceptions:\n        obj = getattr(_builtin_exceptions, name)\n        if isinstance(obj, type) and issubclass(obj, BaseException):\n            this_obj, this_name = _mk_exception(obj, name=name)\n            namespace[this_name] = this_obj\n    return namespace\n\n\n# Updating module locals so that the exceptions pickle right. AFAIK this\n# works only at module-creation time\nlocals().update(_mk_common_exceptions())\n'"
abupy/ExtBu/joblib/numpy_pickle.py,17,"b'""""""Utilities for fast persistence of big data, with optional compression.""""""\n\n# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n# Copyright (c) 2009 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\nimport pickle\nimport os\nimport sys\nimport warnings\ntry:\n    from pathlib import Path\nexcept ImportError:\n    Path = None\n\nfrom .numpy_pickle_utils import _COMPRESSORS\nfrom .numpy_pickle_utils import BinaryZlibFile\nfrom .numpy_pickle_utils import Unpickler, Pickler\nfrom .numpy_pickle_utils import _read_fileobject, _write_fileobject\nfrom .numpy_pickle_utils import _read_bytes, BUFFER_SIZE\nfrom .numpy_pickle_compat import load_compatibility\nfrom .numpy_pickle_compat import NDArrayWrapper\n# For compatibility with old versions of joblib, we need ZNDArrayWrapper\n# to be visible in the current namespace.\n# Explicitly skipping next line from flake8 as it triggers an F401 warning\n# which we don\'t care.\nfrom .numpy_pickle_compat import ZNDArrayWrapper  # noqa\nfrom ._compat import _basestring, PY3_OR_LATER\n\n###############################################################################\n# Utility objects for persistence.\n\n\nclass NumpyArrayWrapper(object):\n    """"""An object to be persisted instead of numpy arrays.\n\n    This object is used to hack into the pickle machinery and read numpy\n    array data from our custom persistence format.\n    More precisely, this object is used for:\n    * carrying the information of the persisted array: subclass, shape, order,\n    dtype. Those ndarray metadata are used to correctly reconstruct the array\n    with low level numpy functions.\n    * determining if memmap is allowed on the array.\n    * reading the array bytes from a file.\n    * reading the array using memorymap from a file.\n    * writing the array bytes to a file.\n\n    Attributes\n    ----------\n    subclass: numpy.ndarray subclass\n        Determine the subclass of the wrapped array.\n    shape: numpy.ndarray shape\n        Determine the shape of the wrapped array.\n    order: {\'C\', \'F\'}\n        Determine the order of wrapped array data. \'C\' is for C order, \'F\' is\n        for fortran order.\n    dtype: numpy.ndarray dtype\n        Determine the data type of the wrapped array.\n    allow_mmap: bool\n        Determine if memory mapping is allowed on the wrapped array.\n        Default: False.\n    """"""\n\n    def __init__(self, subclass, shape, order, dtype, allow_mmap=False):\n        """"""Constructor. Store the useful information for later.""""""\n        self.subclass = subclass\n        self.shape = shape\n        self.order = order\n        self.dtype = dtype\n        self.allow_mmap = allow_mmap\n\n    def write_array(self, array, pickler):\n        """"""Write array bytes to pickler file handle.\n\n        This function is an adaptation of the numpy write_array function\n        available in version 1.10.1 in numpy/lib/format.py.\n        """"""\n        # Set buffer size to 16 MiB to hide the Python loop overhead.\n        buffersize = max(16 * 1024 ** 2 // array.itemsize, 1)\n        if array.dtype.hasobject:\n            # We contain Python objects so we cannot write out the data\n            # directly. Instead, we will pickle it out with version 2 of the\n            # pickle protocol.\n            pickle.dump(array, pickler.file_handle, protocol=2)\n        else:\n            for chunk in pickler.np.nditer(array,\n                                           flags=[\'external_loop\',\n                                                  \'buffered\',\n                                                  \'zerosize_ok\'],\n                                           buffersize=buffersize,\n                                           order=self.order):\n                pickler.file_handle.write(chunk.tostring(\'C\'))\n\n    def read_array(self, unpickler):\n        """"""Read array from unpickler file handle.\n\n        This function is an adaptation of the numpy read_array function\n        available in version 1.10.1 in numpy/lib/format.py.\n        """"""\n        if len(self.shape) == 0:\n            count = 1\n        else:\n            count = unpickler.np.multiply.reduce(self.shape)\n        # Now read the actual data.\n        if self.dtype.hasobject:\n            # The array contained Python objects. We need to unpickle the data.\n            array = pickle.load(unpickler.file_handle)\n        else:\n            if (not PY3_OR_LATER and\n                    unpickler.np.compat.isfileobj(unpickler.file_handle)):\n                # In python 2, gzip.GzipFile is considered as a file so one\n                # can use numpy.fromfile().\n                # For file objects, use np.fromfile function.\n                # This function is faster than the memory-intensive\n                # method below.\n                array = unpickler.np.fromfile(unpickler.file_handle,\n                                              dtype=self.dtype, count=count)\n            else:\n                # This is not a real file. We have to read it the\n                # memory-intensive way.\n                # crc32 module fails on reads greater than 2 ** 32 bytes,\n                # breaking large reads from gzip streams. Chunk reads to\n                # BUFFER_SIZE bytes to avoid issue and reduce memory overhead\n                # of the read. In non-chunked case count < max_read_count, so\n                # only one read is performed.\n                max_read_count = BUFFER_SIZE // min(BUFFER_SIZE,\n                                                    self.dtype.itemsize)\n\n                array = unpickler.np.empty(count, dtype=self.dtype)\n                for i in range(0, count, max_read_count):\n                    read_count = min(max_read_count, count - i)\n                    read_size = int(read_count * self.dtype.itemsize)\n                    data = _read_bytes(unpickler.file_handle,\n                                       read_size, ""array data"")\n                    array[i:i + read_count] = \\\n                        unpickler.np.frombuffer(data, dtype=self.dtype,\n                                                count=read_count)\n                    del data\n\n            if self.order == \'F\':\n                array.shape = self.shape[::-1]\n                array = array.transpose()\n            else:\n                array.shape = self.shape\n\n        return array\n\n    def read_mmap(self, unpickler):\n        """"""Read an array using numpy memmap.""""""\n        offset = unpickler.file_handle.tell()\n        if unpickler.mmap_mode == \'w+\':\n            unpickler.mmap_mode = \'r+\'\n\n        marray = unpickler.np.memmap(unpickler.filename,\n                                     dtype=self.dtype,\n                                     shape=self.shape,\n                                     order=self.order,\n                                     mode=unpickler.mmap_mode,\n                                     offset=offset)\n        # update the offset so that it corresponds to the end of the read array\n        unpickler.file_handle.seek(offset + marray.nbytes)\n\n        return marray\n\n    def read(self, unpickler):\n        """"""Read the array corresponding to this wrapper.\n\n        Use the unpickler to get all information to correctly read the array.\n\n        Parameters\n        ----------\n        unpickler: NumpyUnpickler\n\n        Returns\n        -------\n        array: numpy.ndarray\n\n        """"""\n        # When requested, only use memmap mode if allowed.\n        if unpickler.mmap_mode is not None and self.allow_mmap:\n            array = self.read_mmap(unpickler)\n        else:\n            array = self.read_array(unpickler)\n\n        # Manage array subclass case\n        if (hasattr(array, \'__array_prepare__\') and\n            self.subclass not in (unpickler.np.ndarray,\n                                  unpickler.np.memmap)):\n            # We need to reconstruct another subclass\n            new_array = unpickler.np.core.multiarray._reconstruct(\n                self.subclass, (0,), \'b\')\n            return new_array.__array_prepare__(array)\n        else:\n            return array\n\n###############################################################################\n# Pickler classes\n\n\nclass NumpyPickler(Pickler):\n    """"""A pickler to persist big data efficiently.\n\n    The main features of this object are:\n    * persistence of numpy arrays in a single file.\n    * optional compression with a special care on avoiding memory copies.\n\n    Attributes\n    ----------\n    fp: file\n        File object handle used for serializing the input object.\n    protocol: int\n        Pickle protocol used. Default is pickle.DEFAULT_PROTOCOL under\n        python 3, pickle.HIGHEST_PROTOCOL otherwise.\n    """"""\n\n    dispatch = Pickler.dispatch.copy()\n\n    def __init__(self, fp, protocol=None):\n        self.file_handle = fp\n        self.buffered = isinstance(self.file_handle, BinaryZlibFile)\n\n        # By default we want a pickle protocol that only changes with\n        # the major python version and not the minor one\n        if protocol is None:\n            protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER\n                        else pickle.HIGHEST_PROTOCOL)\n\n        Pickler.__init__(self, self.file_handle, protocol=protocol)\n        # delayed import of numpy, to avoid tight coupling\n        try:\n            import numpy as np\n        except ImportError:\n            np = None\n        self.np = np\n\n    def _create_array_wrapper(self, array):\n        """"""Create and returns a numpy array wrapper from a numpy array.""""""\n        order = \'F\' if (array.flags.f_contiguous and\n                        not array.flags.c_contiguous) else \'C\'\n        allow_mmap = not self.buffered and not array.dtype.hasobject\n        wrapper = NumpyArrayWrapper(type(array),\n                                    array.shape, order, array.dtype,\n                                    allow_mmap=allow_mmap)\n\n        return wrapper\n\n    def save(self, obj):\n        """"""Subclass the Pickler `save` method.\n\n        This is a total abuse of the Pickler class in order to use the numpy\n        persistence function `save` instead of the default pickle\n        implementation. The numpy array is replaced by a custom wrapper in the\n        pickle persistence stack and the serialized array is written right\n        after in the file. Warning: the file produced does not follow the\n        pickle format. As such it can not be read with `pickle.load`.\n        """"""\n        if self.np is not None and type(obj) in (self.np.ndarray,\n                                                 self.np.matrix,\n                                                 self.np.memmap):\n            if type(obj) is self.np.memmap:\n                # Pickling doesn\'t work with memmapped arrays\n                obj = self.np.asanyarray(obj)\n\n            # The array wrapper is pickled instead of the real array.\n            wrapper = self._create_array_wrapper(obj)\n            Pickler.save(self, wrapper)\n\n            # A framer was introduced with pickle protocol 4 and we want to\n            # ensure the wrapper object is written before the numpy array\n            # buffer in the pickle file.\n            # See https://www.python.org/dev/peps/pep-3154/#framing to get\n            # more information on the framer behavior.\n            if self.proto >= 4:\n                self.framer.commit_frame(force=True)\n\n            # And then array bytes are written right after the wrapper.\n            wrapper.write_array(obj, self)\n            return\n\n        return Pickler.save(self, obj)\n\n\nclass NumpyUnpickler(Unpickler):\n    """"""A subclass of the Unpickler to unpickle our numpy pickles.\n\n    Attributes\n    ----------\n    mmap_mode: str\n        The memorymap mode to use for reading numpy arrays.\n    file_handle: file_like\n        File object to unpickle from.\n    filename: str\n        Name of the file to unpickle from. It should correspond to file_handle.\n        This parameter is required when using mmap_mode.\n    np: module\n        Reference to numpy module if numpy is installed else None.\n\n    """"""\n\n    dispatch = Unpickler.dispatch.copy()\n\n    def __init__(self, filename, file_handle, mmap_mode=None):\n        # The next line is for backward compatibility with pickle generated\n        # with joblib versions less than 0.10.\n        self._dirname = os.path.dirname(filename)\n\n        self.mmap_mode = mmap_mode\n        self.file_handle = file_handle\n        # filename is required for numpy mmap mode.\n        self.filename = filename\n        self.compat_mode = False\n        Unpickler.__init__(self, self.file_handle)\n        try:\n            import numpy as np\n        except ImportError:\n            np = None\n        self.np = np\n\n    def load_build(self):\n        """"""Called to set the state of a newly created object.\n\n        We capture it to replace our place-holder objects, NDArrayWrapper or\n        NumpyArrayWrapper, by the array we are interested in. We\n        replace them directly in the stack of pickler.\n        NDArrayWrapper is used for backward compatibility with joblib <= 0.9.\n        """"""\n        Unpickler.load_build(self)\n\n        # For backward compatibility, we support NDArrayWrapper objects.\n        if isinstance(self.stack[-1], (NDArrayWrapper, NumpyArrayWrapper)):\n            if self.np is None:\n                raise ImportError(""Trying to unpickle an ndarray, ""\n                                  ""but numpy didn\'t import correctly"")\n            array_wrapper = self.stack.pop()\n            # If any NDArrayWrapper is found, we switch to compatibility mode,\n            # this will be used to raise a DeprecationWarning to the user at\n            # the end of the unpickling.\n            if isinstance(array_wrapper, NDArrayWrapper):\n                self.compat_mode = True\n            self.stack.append(array_wrapper.read(self))\n\n    # Be careful to register our new method.\n    if PY3_OR_LATER:\n        dispatch[pickle.BUILD[0]] = load_build\n    else:\n        dispatch[pickle.BUILD] = load_build\n\n\n###############################################################################\n# Utility functions\n\ndef dump(value, filename, compress=0, protocol=None, cache_size=None):\n    """"""Persist an arbitrary Python object into one file.\n\n    Parameters\n    -----------\n    value: any Python object\n        The object to store to disk.\n    filename: str or pathlib.Path\n        The path of the file in which it is to be stored. The compression\n        method corresponding to one of the supported filename extensions (\'.z\',\n        \'.gz\', \'.bz2\', \'.xz\' or \'.lzma\') will be used automatically.\n    compress: int from 0 to 9 or bool or 2-tuple, optional\n        Optional compression level for the data. 0 or False is no compression.\n        Higher value means more compression, but also slower read and\n        write times. Using a value of 3 is often a good compromise.\n        See the notes for more details.\n        If compress is True, the compression level used is 3.\n        If compress is a 2-tuple, the first element must correspond to a string\n        between supported compressors (e.g \'zlib\', \'gzip\', \'bz2\', \'lzma\'\n        \'xz\'), the second element must be an integer from 0 to 9, corresponding\n        to the compression level.\n    protocol: positive int\n        Pickle protocol, see pickle.dump documentation for more details.\n    cache_size: positive int, optional\n        This option is deprecated in 0.10 and has no effect.\n\n    Returns\n    -------\n    filenames: list of strings\n        The list of file names in which the data is stored. If\n        compress is false, each array is stored in a different file.\n\n    See Also\n    --------\n    joblib.load : corresponding loader\n\n    Notes\n    -----\n    Memmapping on load cannot be used for compressed files. Thus\n    using compression can significantly slow down loading. In\n    addition, compressed files take extra extra memory during\n    dump and load.\n\n    """"""\n\n    if Path is not None and isinstance(filename, Path):\n        filename = str(filename)\n\n    is_filename = isinstance(filename, _basestring)\n    is_fileobj = hasattr(filename, ""write"")\n\n    compress_method = \'zlib\'  # zlib is the default compression method.\n    if compress is True:\n        # By default, if compress is enabled, we want to be using 3 by default\n        compress_level = 3\n    elif isinstance(compress, tuple):\n        # a 2-tuple was set in compress\n        if len(compress) != 2:\n            raise ValueError(\n                \'Compress argument tuple should contain exactly 2 elements: \'\n                \'(compress method, compress level), you passed {0}\'\n                .format(compress))\n        compress_method, compress_level = compress\n    else:\n        compress_level = compress\n\n    if compress_level is not False and compress_level not in range(10):\n        # Raising an error if a non valid compress level is given.\n        raise ValueError(\n            \'Non valid compress level given: ""{0}"". Possible values are \'\n            \'{1}.\'.format(compress_level, list(range(10))))\n\n    if compress_method not in _COMPRESSORS:\n        # Raising an error if an unsupported compression method is given.\n        raise ValueError(\n            \'Non valid compression method given: ""{0}"". Possible values are \'\n            \'{1}.\'.format(compress_method, _COMPRESSORS))\n\n    if not is_filename and not is_fileobj:\n        # People keep inverting arguments, and the resulting error is\n        # incomprehensible\n        raise ValueError(\n            \'Second argument should be a filename or a file-like object, \'\n            \'%s (type %s) was given.\'\n            % (filename, type(filename))\n        )\n\n    if is_filename and not isinstance(compress, tuple):\n        # In case no explicit compression was requested using both compression\n        # method and level in a tuple and the filename has an explicit\n        # extension, we select the corresponding compressor.\n        if filename.endswith(\'.z\'):\n            compress_method = \'zlib\'\n        elif filename.endswith(\'.gz\'):\n            compress_method = \'gzip\'\n        elif filename.endswith(\'.bz2\'):\n            compress_method = \'bz2\'\n        elif filename.endswith(\'.lzma\'):\n            compress_method = \'lzma\'\n        elif filename.endswith(\'.xz\'):\n            compress_method = \'xz\'\n        else:\n            # no matching compression method found, we unset the variable to\n            # be sure no compression level is set afterwards.\n            compress_method = None\n\n        if compress_method in _COMPRESSORS and compress_level == 0:\n            # we choose a default compress_level of 3 in case it was not given\n            # as an argument (using compress).\n            compress_level = 3\n\n    if not PY3_OR_LATER and compress_method in (\'lzma\', \'xz\'):\n        raise NotImplementedError(""{0} compression is only available for ""\n                                  ""python version >= 3.3. You are using ""\n                                  ""{1}.{2}"".format(compress_method,\n                                                   sys.version_info[0],\n                                                   sys.version_info[1]))\n\n    if cache_size is not None:\n        # Cache size is deprecated starting from version 0.10\n        warnings.warn(""Please do not set \'cache_size\' in joblib.dump, ""\n                      ""this parameter has no effect and will be removed. ""\n                      ""You used \'cache_size={0}\'"".format(cache_size),\n                      DeprecationWarning, stacklevel=2)\n\n    if compress_level != 0:\n        with _write_fileobject(filename, compress=(compress_method,\n                                                   compress_level)) as f:\n            NumpyPickler(f, protocol=protocol).dump(value)\n    elif is_filename:\n        with open(filename, \'wb\') as f:\n            NumpyPickler(f, protocol=protocol).dump(value)\n    else:\n        NumpyPickler(filename, protocol=protocol).dump(value)\n\n    # If the target container is a file object, nothing is returned.\n    if is_fileobj:\n        return\n\n    # For compatibility, the list of created filenames (e.g with one element\n    # after 0.10.0) is returned by default.\n    return [filename]\n\n\ndef _unpickle(fobj, filename="""", mmap_mode=None):\n    """"""Internal unpickling function.""""""\n    # We are careful to open the file handle early and keep it open to\n    # avoid race-conditions on renames.\n    # That said, if data is stored in companion files, which can be\n    # the case with the old persistence format, moving the directory\n    # will create a race when joblib tries to access the companion\n    # files.\n    unpickler = NumpyUnpickler(filename, fobj, mmap_mode=mmap_mode)\n    obj = None\n    try:\n        obj = unpickler.load()\n        if unpickler.compat_mode:\n            warnings.warn(""The file \'%s\' has been generated with a ""\n                          ""joblib version less than 0.10. ""\n                          ""Please regenerate this pickle file.""\n                          % filename,\n                          DeprecationWarning, stacklevel=3)\n    except UnicodeDecodeError as exc:\n        # More user-friendly error message\n        if PY3_OR_LATER:\n            new_exc = ValueError(\n                \'You may be trying to read with \'\n                \'python 3 a joblib pickle generated with python 2. \'\n                \'This feature is not supported by joblib.\')\n            new_exc.__cause__ = exc\n            raise new_exc\n        # Reraise exception with Python 2\n        raise\n\n    return obj\n\n\ndef load(filename, mmap_mode=None):\n    """"""Reconstruct a Python object from a file persisted with joblib.dump.\n\n    Parameters\n    -----------\n    filename: str or pathlib.Path\n        The path of the file from which to load the object\n    mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}, optional\n        If not None, the arrays are memory-mapped from the disk. This\n        mode has no effect for compressed files. Note that in this\n        case the reconstructed object might not longer match exactly\n        the originally pickled object.\n\n    Returns\n    -------\n    result: any Python object\n        The object stored in the file.\n\n    See Also\n    --------\n    joblib.dump : function to save an object\n\n    Notes\n    -----\n\n    This function can load numpy array files saved separately during the\n    dump. If the mmap_mode argument is given, it is passed to np.load and\n    arrays are loaded as memmaps. As a consequence, the reconstructed\n    object might not match the original pickled object. Note that if the\n    file was saved with compression, the arrays cannot be memmaped.\n    """"""\n    if Path is not None and isinstance(filename, Path):\n        filename = str(filename)\n\n    if hasattr(filename, ""read"") and hasattr(filename, ""seek""):\n        with _read_fileobject(filename, """", mmap_mode) as fobj:\n            obj = _unpickle(fobj)\n    else:\n        with open(filename, \'rb\') as f:\n            with _read_fileobject(f, filename, mmap_mode) as fobj:\n                if isinstance(fobj, _basestring):\n                    # if the returned file object is a string, this means we\n                    # try to load a pickle file generated with an version of\n                    # Joblib so we load it with joblib compatibility function.\n                    return load_compatibility(fobj)\n\n                obj = _unpickle(fobj, filename, mmap_mode)\n\n    return obj\n'"
abupy/ExtBu/joblib/numpy_pickle_compat.py,5,"b'""""""Numpy pickle compatibility functions.""""""\n\nimport pickle\nimport os\nimport zlib\nfrom io import BytesIO\n\nfrom ._compat import PY3_OR_LATER\nfrom .numpy_pickle_utils import _ZFILE_PREFIX\nfrom .numpy_pickle_utils import Unpickler\n\n\ndef hex_str(an_int):\n    """"""Convert an int to an hexadecimal string.""""""\n    return \'{0:#x}\'.format(an_int)\n\nif PY3_OR_LATER:\n    def asbytes(s):\n        if isinstance(s, bytes):\n            return s\n        return s.encode(\'latin1\')\nelse:\n    asbytes = str\n\n_MAX_LEN = len(hex_str(2 ** 64))\n_CHUNK_SIZE = 64 * 1024\n\n\ndef read_zfile(file_handle):\n    """"""Read the z-file and return the content as a string.\n\n    Z-files are raw data compressed with zlib used internally by joblib\n    for persistence. Backward compatibility is not guaranteed. Do not\n    use for external purposes.\n    """"""\n    file_handle.seek(0)\n    header_length = len(_ZFILE_PREFIX) + _MAX_LEN\n    length = file_handle.read(header_length)\n    length = length[len(_ZFILE_PREFIX):]\n    length = int(length, 16)\n\n    # With python2 and joblib version <= 0.8.4 compressed pickle header is one\n    # character wider so we need to ignore an additional space if present.\n    # Note: the first byte of the zlib data is guaranteed not to be a\n    # space according to\n    # https://tools.ietf.org/html/rfc6713#section-2.1\n    next_byte = file_handle.read(1)\n    if next_byte != b\' \':\n        # The zlib compressed data has started and we need to go back\n        # one byte\n        file_handle.seek(header_length)\n\n    # We use the known length of the data to tell Zlib the size of the\n    # buffer to allocate.\n    data = zlib.decompress(file_handle.read(), 15, length)\n    assert len(data) == length, (\n        ""Incorrect data length while decompressing %s.""\n        ""The file could be corrupted."" % file_handle)\n    return data\n\n\ndef write_zfile(file_handle, data, compress=1):\n    """"""Write the data in the given file as a Z-file.\n\n    Z-files are raw data compressed with zlib used internally by joblib\n    for persistence. Backward compatibility is not guarantied. Do not\n    use for external purposes.\n    """"""\n    file_handle.write(_ZFILE_PREFIX)\n    length = hex_str(len(data))\n    # Store the length of the data\n    file_handle.write(asbytes(length.ljust(_MAX_LEN)))\n    file_handle.write(zlib.compress(asbytes(data), compress))\n\n###############################################################################\n# Utility objects for persistence.\n\n\nclass NDArrayWrapper(object):\n    """"""An object to be persisted instead of numpy arrays.\n\n    The only thing this object does, is to carry the filename in which\n    the array has been persisted, and the array subclass.\n    """"""\n\n    def __init__(self, filename, subclass, allow_mmap=True):\n        """"""Constructor. Store the useful information for later.""""""\n        self.filename = filename\n        self.subclass = subclass\n        self.allow_mmap = allow_mmap\n\n    def read(self, unpickler):\n        """"""Reconstruct the array.""""""\n        filename = os.path.join(unpickler._dirname, self.filename)\n        # Load the array from the disk\n        # use getattr instead of self.allow_mmap to ensure backward compat\n        # with NDArrayWrapper instances pickled with joblib < 0.9.0\n        allow_mmap = getattr(self, \'allow_mmap\', True)\n        memmap_kwargs = ({} if not allow_mmap\n                         else {\'mmap_mode\': unpickler.mmap_mode})\n        array = unpickler.np.load(filename, **memmap_kwargs)\n        # Reconstruct subclasses. This does not work with old\n        # versions of numpy\n        if (hasattr(array, \'__array_prepare__\') and\n            self.subclass not in (unpickler.np.ndarray,\n                                  unpickler.np.memmap)):\n            # We need to reconstruct another subclass\n            new_array = unpickler.np.core.multiarray._reconstruct(\n                self.subclass, (0,), \'b\')\n            return new_array.__array_prepare__(array)\n        else:\n            return array\n\n\nclass ZNDArrayWrapper(NDArrayWrapper):\n    """"""An object to be persisted instead of numpy arrays.\n\n    This object store the Zfile filename in which\n    the data array has been persisted, and the meta information to\n    retrieve it.\n    The reason that we store the raw buffer data of the array and\n    the meta information, rather than array representation routine\n    (tostring) is that it enables us to use completely the strided\n    model to avoid memory copies (a and a.T store as fast). In\n    addition saving the heavy information separately can avoid\n    creating large temporary buffers when unpickling data with\n    large arrays.\n    """"""\n\n    def __init__(self, filename, init_args, state):\n        """"""Constructor. Store the useful information for later.""""""\n        self.filename = filename\n        self.state = state\n        self.init_args = init_args\n\n    def read(self, unpickler):\n        """"""Reconstruct the array from the meta-information and the z-file.""""""\n        # Here we a simply reproducing the unpickling mechanism for numpy\n        # arrays\n        filename = os.path.join(unpickler._dirname, self.filename)\n        array = unpickler.np.core.multiarray._reconstruct(*self.init_args)\n        with open(filename, \'rb\') as f:\n            data = read_zfile(f)\n        state = self.state + (data,)\n        array.__setstate__(state)\n        return array\n\n\nclass ZipNumpyUnpickler(Unpickler):\n    """"""A subclass of the Unpickler to unpickle our numpy pickles.""""""\n\n    dispatch = Unpickler.dispatch.copy()\n\n    def __init__(self, filename, file_handle, mmap_mode=None):\n        """"""Constructor.""""""\n        self._filename = os.path.basename(filename)\n        self._dirname = os.path.dirname(filename)\n        self.mmap_mode = mmap_mode\n        self.file_handle = self._open_pickle(file_handle)\n        Unpickler.__init__(self, self.file_handle)\n        try:\n            import numpy as np\n        except ImportError:\n            np = None\n        self.np = np\n\n    def _open_pickle(self, file_handle):\n        return BytesIO(read_zfile(file_handle))\n\n    def load_build(self):\n        """"""Set the state of a newly created object.\n\n        We capture it to replace our place-holder objects,\n        NDArrayWrapper, by the array we are interested in. We\n        replace them directly in the stack of pickler.\n        """"""\n        Unpickler.load_build(self)\n        if isinstance(self.stack[-1], NDArrayWrapper):\n            if self.np is None:\n                raise ImportError(""Trying to unpickle an ndarray, ""\n                                  ""but numpy didn\'t import correctly"")\n            nd_array_wrapper = self.stack.pop()\n            array = nd_array_wrapper.read(self)\n            self.stack.append(array)\n\n    # Be careful to register our new method.\n    if PY3_OR_LATER:\n        dispatch[pickle.BUILD[0]] = load_build\n    else:\n        dispatch[pickle.BUILD] = load_build\n\n\ndef load_compatibility(filename):\n    """"""Reconstruct a Python object from a file persisted with joblib.dump.\n\n    This function ensures the compatibility with joblib old persistence format\n    (<= 0.9.3).\n\n    Parameters\n    -----------\n    filename: string\n        The name of the file from which to load the object\n\n    Returns\n    -------\n    result: any Python object\n        The object stored in the file.\n\n    See Also\n    --------\n    joblib.dump : function to save an object\n\n    Notes\n    -----\n\n    This function can load numpy array files saved separately during the\n    dump.\n    """"""\n    with open(filename, \'rb\') as file_handle:\n        # We are careful to open the file handle early and keep it open to\n        # avoid race-conditions on renames. That said, if data is stored in\n        # companion files, moving the directory will create a race when\n        # joblib tries to access the companion files.\n        unpickler = ZipNumpyUnpickler(filename, file_handle=file_handle)\n        try:\n            obj = unpickler.load()\n        except UnicodeDecodeError as exc:\n            # More user-friendly error message\n            if PY3_OR_LATER:\n                new_exc = ValueError(\n                    \'You may be trying to read with \'\n                    \'python 3 a joblib pickle generated with python 2. \'\n                    \'This feature is not supported by joblib.\')\n                new_exc.__cause__ = exc\n                raise new_exc\n        finally:\n            if hasattr(unpickler, \'file_handle\'):\n                unpickler.file_handle.close()\n        return obj\n'"
abupy/ExtBu/joblib/numpy_pickle_utils.py,0,"b'""""""Utilities for fast persistence of big data, with optional compression.""""""\n\n# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>\n# Copyright (c) 2009 Gael Varoquaux\n# License: BSD Style, 3 clauses.\n\nimport pickle\nimport sys\nimport io\nimport zlib\nimport gzip\nimport bz2\nimport warnings\nimport contextlib\nfrom contextlib import closing\n\nfrom ._compat import PY3_OR_LATER, PY26, PY27, _basestring\n\ntry:\n    from threading import RLock\nexcept ImportError:\n    from dummy_threading import RLock\n\nif PY3_OR_LATER:\n    Unpickler = pickle._Unpickler\n    Pickler = pickle._Pickler\n    xrange = range\nelse:\n    Unpickler = pickle.Unpickler\n    Pickler = pickle.Pickler\n\ntry:\n    import numpy as np\nexcept ImportError:\n    np = None\n\ntry:\n    import lzma\nexcept ImportError:\n    lzma = None\n\n\n# Magic numbers of supported compression file formats.        \'\n_ZFILE_PREFIX = b\'ZF\'  # used with pickle files created before 0.9.3.\n_ZLIB_PREFIX = b\'\\x78\'\n_GZIP_PREFIX = b\'\\x1f\\x8b\'\n_BZ2_PREFIX = b\'BZ\'\n_XZ_PREFIX = b\'\\xfd\\x37\\x7a\\x58\\x5a\'\n_LZMA_PREFIX = b\'\\x5d\\x00\'\n\n# Supported compressors\n_COMPRESSORS = (\'zlib\', \'bz2\', \'lzma\', \'xz\', \'gzip\')\n_COMPRESSOR_CLASSES = [gzip.GzipFile, bz2.BZ2File]\nif lzma is not None:\n    _COMPRESSOR_CLASSES.append(lzma.LZMAFile)\n\n# The max magic number length of supported compression file types.\n_MAX_PREFIX_LEN = max(len(prefix)\n                      for prefix in (_ZFILE_PREFIX, _GZIP_PREFIX, _BZ2_PREFIX,\n                                     _XZ_PREFIX, _LZMA_PREFIX))\n\n# Buffer size used in io.BufferedReader and io.BufferedWriter\n_IO_BUFFER_SIZE = 1024 ** 2\n\n\n###############################################################################\n# Cache file utilities\ndef _detect_compressor(fileobj):\n    """"""Return the compressor matching fileobj.\n\n    Parameters\n    ----------\n    fileobj: file object\n\n    Returns\n    -------\n    str in {\'zlib\', \'gzip\', \'bz2\', \'lzma\', \'xz\', \'compat\', \'not-compressed\'}\n    """"""\n    # Ensure we read the first bytes.\n    fileobj.seek(0)\n    first_bytes = fileobj.read(_MAX_PREFIX_LEN)\n    fileobj.seek(0)\n\n    if first_bytes.startswith(_ZLIB_PREFIX):\n        return ""zlib""\n    elif first_bytes.startswith(_GZIP_PREFIX):\n        return ""gzip""\n    elif first_bytes.startswith(_BZ2_PREFIX):\n        return ""bz2""\n    elif first_bytes.startswith(_LZMA_PREFIX):\n        return ""lzma""\n    elif first_bytes.startswith(_XZ_PREFIX):\n        return ""xz""\n    elif first_bytes.startswith(_ZFILE_PREFIX):\n        return ""compat""\n\n    return ""not-compressed""\n\n\ndef _buffered_read_file(fobj):\n    """"""Return a buffered version of a read file object.""""""\n    if PY26 or (PY27 and isinstance(fobj, bz2.BZ2File)):\n        # Python 2.6 doesn\'t fully support io.BufferedReader.\n        # Python 2.7 doesn\'t work with BZ2File through a buffer: ""no\n        # attribute \'readable\'"" error.\n        return fobj\n    else:\n        return io.BufferedReader(fobj, buffer_size=_IO_BUFFER_SIZE)\n\n\ndef _buffered_write_file(fobj):\n    """"""Return a buffered version of a write file object.""""""\n    if PY26 or (PY27 and isinstance(fobj, bz2.BZ2File)):\n        # Python 2.6 doesn\'t fully support io.BufferedWriter.\n        # Python 2.7 doesn\'t work with BZ2File through a buffer: no attribute\n        # \'writable\'.\n        # BZ2File doesn\'t implement the file object context manager in python 2\n        # so we wrap the fileobj using `closing`.\n        return closing(fobj)\n    else:\n        return io.BufferedWriter(fobj, buffer_size=_IO_BUFFER_SIZE)\n\n\n@contextlib.contextmanager\ndef _read_fileobject(fileobj, filename, mmap_mode=None):\n    """"""Utility function opening the right fileobject from a filename.\n\n    The magic number is used to choose between the type of file object to open:\n    * regular file object (default)\n    * zlib file object\n    * gzip file object\n    * bz2 file object\n    * lzma file object (for xz and lzma compressor)\n\n    Parameters\n    ----------\n    fileobj: file object\n    compressor: str in {\'zlib\', \'gzip\', \'bz2\', \'lzma\', \'xz\', \'compat\',\n                        \'not-compressed\'}\n    filename: str\n        filename path corresponding to the fileobj parameter.\n    mmap_mode: str\n        memory map mode that should be used to open the pickle file. This\n        parameter is useful to verify that the user is not trying to one with\n        compression. Default: None.\n\n    Returns\n    -------\n        a file like object\n\n    """"""\n    # Detect if the fileobj contains compressed data.\n    compressor = _detect_compressor(fileobj)\n    if isinstance(fileobj, tuple(_COMPRESSOR_CLASSES)):\n        compressor = fileobj.__class__.__name__\n    if compressor == \'compat\':\n        # Compatibility with old pickle mode: simply return the input\n        # filename ""as-is"" and let the compatibility function be called by the\n        # caller.\n        warnings.warn(""The file \'%s\' has been generated with a joblib ""\n                      ""version less than 0.10. ""\n                      ""Please regenerate this pickle file."" % filename,\n                      DeprecationWarning, stacklevel=2)\n        yield filename\n    else:\n        # Checking if incompatible load parameters with the type of file:\n        # mmap_mode cannot be used with compressed file or in memory buffers\n        # such as io.BytesIO.\n        if ((compressor in _COMPRESSORS or\n                isinstance(fileobj, tuple(_COMPRESSOR_CLASSES))) and\n                mmap_mode is not None):\n            warnings.warn(\'File ""%(filename)s"" is compressed using \'\n                          \'""%(compressor)s"" which is not compatible with \'\n                          \'mmap_mode ""%(mmap_mode)s"" flag passed. mmap_mode \'\n                          \'option will be ignored.\'\n                          % locals(), stacklevel=2)\n        if isinstance(fileobj, io.BytesIO) and mmap_mode is not None:\n            warnings.warn(\'In memory persistence is not compatible with \'\n                          \'mmap_mode ""%(mmap_mode)s"" flag passed. mmap_mode \'\n                          \'option will be ignored.\'\n                          % locals(), stacklevel=2)\n\n        # if the passed fileobj is in the supported list of decompressor\n        # objects (GzipFile, BZ2File, LzmaFile), we simply return it.\n        if isinstance(fileobj, tuple(_COMPRESSOR_CLASSES)):\n            yield fileobj\n        # otherwise, based on the compressor detected in the file, we open the\n        # correct decompressor file object, wrapped in a buffer.\n        elif compressor == \'zlib\':\n            yield _buffered_read_file(BinaryZlibFile(fileobj, \'rb\'))\n        elif compressor == \'gzip\':\n            yield _buffered_read_file(BinaryGzipFile(fileobj, \'rb\'))\n        elif compressor == \'bz2\':\n            if PY3_OR_LATER:\n                yield _buffered_read_file(bz2.BZ2File(fileobj, \'rb\'))\n            else:\n                # In python 2, BZ2File doesn\'t support a fileobj opened in\n                # binary mode. In this case, we pass the filename.\n                yield _buffered_read_file(bz2.BZ2File(fileobj.name, \'rb\'))\n        elif (compressor == \'lzma\' or compressor == \'xz\'):\n            if lzma is not None:\n                yield _buffered_read_file(lzma.LZMAFile(fileobj, \'rb\'))\n            else:\n                raise NotImplementedError(""Lzma decompression is not ""\n                                          ""available for this version of ""\n                                          ""python ({0}.{1})""\n                                          .format(sys.version_info[0],\n                                                  sys.version_info[1]))\n        # No compression detected => returning the input file object (open)\n        else:\n            yield fileobj\n\n\ndef _write_fileobject(filename, compress=(""zlib"", 3)):\n    """"""Return the right compressor file object in write mode.""""""\n    compressmethod = compress[0]\n    compresslevel = compress[1]\n    if compressmethod == ""gzip"":\n        return _buffered_write_file(BinaryGzipFile(filename, \'wb\',\n                                    compresslevel=compresslevel))\n    elif compressmethod == ""bz2"":\n        return _buffered_write_file(bz2.BZ2File(filename, \'wb\',\n                                                compresslevel=compresslevel))\n    elif lzma is not None and compressmethod == ""xz"":\n        return _buffered_write_file(lzma.LZMAFile(filename, \'wb\',\n                                                  check=lzma.CHECK_NONE,\n                                                  preset=compresslevel))\n    elif lzma is not None and compressmethod == ""lzma"":\n        return _buffered_write_file(lzma.LZMAFile(filename, \'wb\',\n                                                  preset=compresslevel,\n                                                  format=lzma.FORMAT_ALONE))\n    else:\n        return _buffered_write_file(BinaryZlibFile(filename, \'wb\',\n                                    compresslevel=compresslevel))\n\n\n###############################################################################\n#  Joblib zlib compression file object definition\n\n_MODE_CLOSED = 0\n_MODE_READ = 1\n_MODE_READ_EOF = 2\n_MODE_WRITE = 3\n_BUFFER_SIZE = 8192\n\n\nclass BinaryZlibFile(io.BufferedIOBase):\n    """"""A file object providing transparent zlib (de)compression.\n\n    A BinaryZlibFile can act as a wrapper for an existing file object, or refer\n    directly to a named file on disk.\n\n    Note that BinaryZlibFile provides only a *binary* file interface: data read\n    is returned as bytes, and data to be written should be given as bytes.\n\n    This object is an adaptation of the BZ2File object and is compatible with\n    versions of python >= 2.6.\n\n    If filename is a str or bytes object, it gives the name\n    of the file to be opened. Otherwise, it should be a file object,\n    which will be used to read or write the compressed data.\n\n    mode can be \'rb\' for reading (default) or \'wb\' for (over)writing\n\n    If mode is \'wb\', compresslevel can be a number between 1\n    and 9 specifying the level of compression: 1 produces the least\n    compression, and 9 (default) produces the most compression.\n    """"""\n\n    wbits = zlib.MAX_WBITS\n\n    def __init__(self, filename, mode=""rb"", compresslevel=9):\n        # This lock must be recursive, so that BufferedIOBase\'s\n        # readline(), readlines() and writelines() don\'t deadlock.\n        self._lock = RLock()\n        self._fp = None\n        self._closefp = False\n        self._mode = _MODE_CLOSED\n        self._pos = 0\n        self._size = -1\n\n        if not isinstance(compresslevel, int) or not (1 <= compresslevel <= 9):\n            raise ValueError(""compresslevel must be between an integer ""\n                             ""between 1 and 9, you gave {0}""\n                             .format(compresslevel))\n\n        if mode == ""rb"":\n            mode_code = _MODE_READ\n            self._decompressor = zlib.decompressobj(self.wbits)\n            self._buffer = b""""\n            self._buffer_offset = 0\n        elif mode == ""wb"":\n            mode_code = _MODE_WRITE\n            self._compressor = zlib.compressobj(compresslevel,\n                                                zlib.DEFLATED,\n                                                self.wbits,\n                                                zlib.DEF_MEM_LEVEL,\n                                                0)\n        else:\n            raise ValueError(""Invalid mode: %r"" % (mode,))\n\n        if isinstance(filename, _basestring):\n            self._fp = open(filename, mode)\n            self._closefp = True\n            self._mode = mode_code\n        elif hasattr(filename, ""read"") or hasattr(filename, ""write""):\n            self._fp = filename\n            self._mode = mode_code\n        else:\n            raise TypeError(""filename must be a str or bytes object, ""\n                            ""or a file"")\n\n    def close(self):\n        """"""Flush and close the file.\n\n        May be called more than once without error. Once the file is\n        closed, any other operation on it will raise a ValueError.\n        """"""\n        with self._lock:\n            if self._mode == _MODE_CLOSED:\n                return\n            try:\n                if self._mode in (_MODE_READ, _MODE_READ_EOF):\n                    self._decompressor = None\n                elif self._mode == _MODE_WRITE:\n                    self._fp.write(self._compressor.flush())\n                    self._compressor = None\n            finally:\n                try:\n                    if self._closefp:\n                        self._fp.close()\n                finally:\n                    self._fp = None\n                    self._closefp = False\n                    self._mode = _MODE_CLOSED\n                    self._buffer = b""""\n                    self._buffer_offset = 0\n\n    @property\n    def closed(self):\n        """"""True if this file is closed.""""""\n        return self._mode == _MODE_CLOSED\n\n    def fileno(self):\n        """"""Return the file descriptor for the underlying file.""""""\n        self._check_not_closed()\n        return self._fp.fileno()\n\n    def seekable(self):\n        """"""Return whether the file supports seeking.""""""\n        return self.readable() and self._fp.seekable()\n\n    def readable(self):\n        """"""Return whether the file was opened for reading.""""""\n        self._check_not_closed()\n        return self._mode in (_MODE_READ, _MODE_READ_EOF)\n\n    def writable(self):\n        """"""Return whether the file was opened for writing.""""""\n        self._check_not_closed()\n        return self._mode == _MODE_WRITE\n\n    # Mode-checking helper functions.\n\n    def _check_not_closed(self):\n        if self.closed:\n            fname = getattr(self._fp, \'name\', None)\n            msg = ""I/O operation on closed file""\n            if fname is not None:\n                msg += "" {0}"".format(fname)\n            msg += "".""\n            raise ValueError(msg)\n\n    def _check_can_read(self):\n        if self._mode not in (_MODE_READ, _MODE_READ_EOF):\n            self._check_not_closed()\n            raise io.UnsupportedOperation(""File not open for reading"")\n\n    def _check_can_write(self):\n        if self._mode != _MODE_WRITE:\n            self._check_not_closed()\n            raise io.UnsupportedOperation(""File not open for writing"")\n\n    def _check_can_seek(self):\n        if self._mode not in (_MODE_READ, _MODE_READ_EOF):\n            self._check_not_closed()\n            raise io.UnsupportedOperation(""Seeking is only supported ""\n                                          ""on files open for reading"")\n        if not self._fp.seekable():\n            raise io.UnsupportedOperation(""The underlying file object ""\n                                          ""does not support seeking"")\n\n    # Fill the readahead buffer if it is empty. Returns False on EOF.\n    def _fill_buffer(self):\n        if self._mode == _MODE_READ_EOF:\n            return False\n        # Depending on the input data, our call to the decompressor may not\n        # return any data. In this case, try again after reading another block.\n        while self._buffer_offset == len(self._buffer):\n            try:\n                rawblock = (self._decompressor.unused_data or\n                            self._fp.read(_BUFFER_SIZE))\n\n                if not rawblock:\n                    raise EOFError\n            except EOFError:\n                # End-of-stream marker and end of file. We\'re good.\n                self._mode = _MODE_READ_EOF\n                self._size = self._pos\n                return False\n            else:\n                self._buffer = self._decompressor.decompress(rawblock)\n            self._buffer_offset = 0\n        return True\n\n    # Read data until EOF.\n    # If return_data is false, consume the data without returning it.\n    def _read_all(self, return_data=True):\n        # The loop assumes that _buffer_offset is 0. Ensure that this is true.\n        self._buffer = self._buffer[self._buffer_offset:]\n        self._buffer_offset = 0\n\n        blocks = []\n        while self._fill_buffer():\n            if return_data:\n                blocks.append(self._buffer)\n            self._pos += len(self._buffer)\n            self._buffer = b""""\n        if return_data:\n            return b"""".join(blocks)\n\n    # Read a block of up to n bytes.\n    # If return_data is false, consume the data without returning it.\n    def _read_block(self, n_bytes, return_data=True):\n        # If we have enough data buffered, return immediately.\n        end = self._buffer_offset + n_bytes\n        if end <= len(self._buffer):\n            data = self._buffer[self._buffer_offset: end]\n            self._buffer_offset = end\n            self._pos += len(data)\n            return data if return_data else None\n\n        # The loop assumes that _buffer_offset is 0. Ensure that this is true.\n        self._buffer = self._buffer[self._buffer_offset:]\n        self._buffer_offset = 0\n\n        blocks = []\n        while n_bytes > 0 and self._fill_buffer():\n            if n_bytes < len(self._buffer):\n                data = self._buffer[:n_bytes]\n                self._buffer_offset = n_bytes\n            else:\n                data = self._buffer\n                self._buffer = b""""\n            if return_data:\n                blocks.append(data)\n            self._pos += len(data)\n            n_bytes -= len(data)\n        if return_data:\n            return b"""".join(blocks)\n\n    def read(self, size=-1):\n        """"""Read up to size uncompressed bytes from the file.\n\n        If size is negative or omitted, read until EOF is reached.\n        Returns b\'\' if the file is already at EOF.\n        """"""\n        with self._lock:\n            self._check_can_read()\n            if size == 0:\n                return b""""\n            elif size < 0:\n                return self._read_all()\n            else:\n                return self._read_block(size)\n\n    def readinto(self, b):\n        """"""Read up to len(b) bytes into b.\n\n        Returns the number of bytes read (0 for EOF).\n        """"""\n        with self._lock:\n            return io.BufferedIOBase.readinto(self, b)\n\n    def write(self, data):\n        """"""Write a byte string to the file.\n\n        Returns the number of uncompressed bytes written, which is\n        always len(data). Note that due to buffering, the file on disk\n        may not reflect the data written until close() is called.\n        """"""\n        with self._lock:\n            self._check_can_write()\n            # Convert data type if called by io.BufferedWriter.\n            if not PY26 and isinstance(data, memoryview):\n                data = data.tobytes()\n\n            compressed = self._compressor.compress(data)\n            self._fp.write(compressed)\n            self._pos += len(data)\n            return len(data)\n\n    # Rewind the file to the beginning of the data stream.\n    def _rewind(self):\n        self._fp.seek(0, 0)\n        self._mode = _MODE_READ\n        self._pos = 0\n        self._decompressor = zlib.decompressobj(self.wbits)\n        self._buffer = b""""\n        self._buffer_offset = 0\n\n    def seek(self, offset, whence=0):\n        """"""Change the file position.\n\n        The new position is specified by offset, relative to the\n        position indicated by whence. Values for whence are:\n\n            0: start of stream (default); offset must not be negative\n            1: current stream position\n            2: end of stream; offset must not be positive\n\n        Returns the new file position.\n\n        Note that seeking is emulated, so depending on the parameters,\n        this operation may be extremely slow.\n        """"""\n        with self._lock:\n            self._check_can_seek()\n\n            # Recalculate offset as an absolute file position.\n            if whence == 0:\n                pass\n            elif whence == 1:\n                offset = self._pos + offset\n            elif whence == 2:\n                # Seeking relative to EOF - we need to know the file\'s size.\n                if self._size < 0:\n                    self._read_all(return_data=False)\n                offset = self._size + offset\n            else:\n                raise ValueError(""Invalid value for whence: %s"" % (whence,))\n\n            # Make it so that offset is the number of bytes to skip forward.\n            if offset < self._pos:\n                self._rewind()\n            else:\n                offset -= self._pos\n\n            # Read and discard data until we reach the desired position.\n            self._read_block(offset, return_data=False)\n\n            return self._pos\n\n    def tell(self):\n        """"""Return the current file position.""""""\n        with self._lock:\n            self._check_not_closed()\n            return self._pos\n\n\nclass BinaryGzipFile(BinaryZlibFile):\n    """"""A file object providing transparent gzip (de)compression.\n\n    If filename is a str or bytes object, it gives the name\n    of the file to be opened. Otherwise, it should be a file object,\n    which will be used to read or write the compressed data.\n\n    mode can be \'rb\' for reading (default) or \'wb\' for (over)writing\n\n    If mode is \'wb\', compresslevel can be a number between 1\n    and 9 specifying the level of compression: 1 produces the least\n    compression, and 9 (default) produces the most compression.\n    """"""\n\n    wbits = 31  # zlib compressor/decompressor wbits value for gzip format.\n\n\n# Utility functions/variables from numpy required for writing arrays.\n# We need at least the functions introduced in version 1.9 of numpy. Here,\n# we use the ones from numpy 1.10.2.\nBUFFER_SIZE = 2 ** 18  # size of buffer for reading npz files in bytes\n\n\ndef _read_bytes(fp, size, error_template=""ran out of data""):\n    """"""Read from file-like object until size bytes are read.\n\n    Raises ValueError if not EOF is encountered before size bytes are read.\n    Non-blocking objects only supported if they derive from io objects.\n\n    Required as e.g. ZipExtFile in python 2.6 can return less data than\n    requested.\n\n    This function was taken from numpy/lib/format.py in version 1.10.2.\n\n    Parameters\n    ----------\n    fp: file-like object\n    size: int\n    error_template: str\n\n    Returns\n    -------\n    a bytes object\n        The data read in bytes.\n\n    """"""\n    data = bytes()\n    while True:\n        # io files (default in python3) return None or raise on\n        # would-block, python2 file will truncate, probably nothing can be\n        # done about that.  note that regular files can\'t be non-blocking\n        try:\n            r = fp.read(size - len(data))\n            data += r\n            if len(r) == 0 or len(data) == size:\n                break\n        except io.BlockingIOError:\n            pass\n    if len(data) != size:\n        msg = ""EOF: reading %s, expected %d bytes got %d""\n        raise ValueError(msg % (error_template, size, len(data)))\n    else:\n        return data\n'"
abupy/ExtBu/joblib/parallel.py,0,"b'""""""\nHelpers for embarrassingly parallel code.\n""""""\n# Author: Gael Varoquaux < gael dot varoquaux at normalesup dot org >\n# Copyright: 2010, Gael Varoquaux\n# License: BSD 3 clause\n\nfrom __future__ import division\n\nimport os\nimport sys\nfrom math import sqrt\nimport functools\nimport time\nimport threading\nimport itertools\nfrom numbers import Integral\nfrom contextlib import contextmanager\ntry:\n    import cPickle as pickle\nexcept:\n    import pickle\n\nfrom ._multiprocessing_helpers import mp\n\nfrom .format_stack import format_outer_frames\nfrom .logger import Logger, short_format_time\nfrom .my_exceptions import TransportableException, _mk_exception\nfrom .disk import memstr_to_bytes\nfrom ._parallel_backends import (FallbackToBackend, MultiprocessingBackend,\n                                 ThreadingBackend, SequentialBackend)\nfrom ._compat import _basestring\nfrom .func_inspect import getfullargspec\n\n# Make sure that those two classes are part of the public joblib.parallel API\n# so that 3rd party backend implementers can import them from here.\nfrom ._parallel_backends import AutoBatchingMixin  # noqa\nfrom ._parallel_backends import ParallelBackendBase  # noqa\n\nBACKENDS = {\n    \'multiprocessing\': MultiprocessingBackend,\n    \'threading\': ThreadingBackend,\n    \'sequential\': SequentialBackend,\n}\n\n# name of the backend used by default by Parallel outside of any context\n# managed by ``parallel_backend``.\nDEFAULT_BACKEND = \'multiprocessing\'\nDEFAULT_N_JOBS = 1\n\n# Thread local value that can be overriden by the ``parallel_backend`` context\n# manager\n_backend = threading.local()\n\n\ndef get_active_backend():\n    """"""Return the active default backend""""""\n    active_backend_and_jobs = getattr(_backend, \'backend_and_jobs\', None)\n    if active_backend_and_jobs is not None:\n        return active_backend_and_jobs\n    # We are outside of the scope of any parallel_backend context manager,\n    # create the default backend instance now\n    active_backend = BACKENDS[DEFAULT_BACKEND]()\n    return active_backend, DEFAULT_N_JOBS\n\n\n@contextmanager\ndef parallel_backend(backend, n_jobs=-1, **backend_params):\n    """"""Change the default backend used by Parallel inside a with block.\n\n    If ``backend`` is a string it must match a previously registered\n    implementation using the ``register_parallel_backend`` function.\n\n    Alternatively backend can be passed directly as an instance.\n\n    By default all available workers will be used (``n_jobs=-1``) unless the\n    caller passes an explicit value for the ``n_jobs`` parameter.\n\n    This is an alternative to passing a ``backend=\'backend_name\'`` argument to\n    the ``Parallel`` class constructor. It is particularly useful when calling\n    into library code that uses joblib internally but does not expose the\n    backend argument in its own API.\n\n    >>> from operator import neg\n    >>> with parallel_backend(\'threading\'):\n    ...     print(Parallel()(delayed(neg)(i + 1) for i in range(5)))\n    ...\n    [-1, -2, -3, -4, -5]\n\n    Warning: this function is experimental and subject to change in a future\n    version of joblib.\n\n    .. versionadded:: 0.10\n\n    """"""\n    if isinstance(backend, _basestring):\n        backend = BACKENDS[backend](**backend_params)\n    old_backend_and_jobs = getattr(_backend, \'backend_and_jobs\', None)\n    try:\n        _backend.backend_and_jobs = (backend, n_jobs)\n        # return the backend instance to make it easier to write tests\n        yield backend, n_jobs\n    finally:\n        if old_backend_and_jobs is None:\n            if getattr(_backend, \'backend_and_jobs\', None) is not None:\n                del _backend.backend_and_jobs\n        else:\n            _backend.backend_and_jobs = old_backend_and_jobs\n\n\n# Under Linux or OS X the default start method of multiprocessing\n# can cause third party libraries to crash. Under Python 3.4+ it is possible\n# to set an environment variable to switch the default start method from\n# \'fork\' to \'forkserver\' or \'spawn\' to avoid this issue albeit at the cost\n# of causing semantic changes and some additional pool instantiation overhead.\nif hasattr(mp, \'get_context\'):\n    method = os.environ.get(\'JOBLIB_START_METHOD\', \'\').strip() or None\n    DEFAULT_MP_CONTEXT = mp.get_context(method=method)\nelse:\n    DEFAULT_MP_CONTEXT = None\n\n\nclass BatchedCalls(object):\n    """"""Wrap a sequence of (func, args, kwargs) tuples as a single callable""""""\n\n    def __init__(self, iterator_slice):\n        self.items = list(iterator_slice)\n        self._size = len(self.items)\n\n    def __call__(self):\n        return [func(*args, **kwargs) for func, args, kwargs in self.items]\n\n    def __len__(self):\n        return self._size\n\n\n###############################################################################\n# CPU count that works also when multiprocessing has been disabled via\n# the JOBLIB_MULTIPROCESSING environment variable\ndef cpu_count():\n    """"""Return the number of CPUs.""""""\n    if mp is None:\n        return 1\n    return mp.cpu_count()\n\n\n###############################################################################\n# For verbosity\n\ndef _verbosity_filter(index, verbose):\n    """""" Returns False for indices increasingly apart, the distance\n        depending on the value of verbose.\n\n        We use a lag increasing as the square of index\n    """"""\n    if not verbose:\n        return True\n    elif verbose > 10:\n        return False\n    if index == 0:\n        return False\n    verbose = .5 * (11 - verbose) ** 2\n    scale = sqrt(index / verbose)\n    next_scale = sqrt((index + 1) / verbose)\n    return (int(next_scale) == int(scale))\n\n\n###############################################################################\ndef delayed(function, check_pickle=True):\n    """"""Decorator used to capture the arguments of a function.\n\n    Pass `check_pickle=False` when:\n\n    - performing a possibly repeated check is too costly and has been done\n      already once outside of the call to delayed.\n\n    - when used in conjunction `Parallel(backend=\'threading\')`.\n\n    """"""\n    # Try to pickle the input function, to catch the problems early when\n    # using with multiprocessing:\n    if check_pickle:\n        pickle.dumps(function)\n\n    def delayed_function(*args, **kwargs):\n        return function, args, kwargs\n    try:\n        delayed_function = functools.wraps(function)(delayed_function)\n    except AttributeError:\n        "" functools.wraps fails on some callable objects ""\n    return delayed_function\n\n\n###############################################################################\nclass BatchCompletionCallBack(object):\n    """"""Callback used by joblib.Parallel\'s multiprocessing backend.\n\n    This callable is executed by the parent process whenever a worker process\n    has returned the results of a batch of tasks.\n\n    It is used for progress reporting, to update estimate of the batch\n    processing duration and to schedule the next batch of tasks to be\n    processed.\n\n    """"""\n    def __init__(self, dispatch_timestamp, batch_size, parallel):\n        self.dispatch_timestamp = dispatch_timestamp\n        self.batch_size = batch_size\n        self.parallel = parallel\n\n    def __call__(self, out):\n        self.parallel.n_completed_tasks += self.batch_size\n        this_batch_duration = time.time() - self.dispatch_timestamp\n\n        self.parallel._backend.batch_completed(self.batch_size,\n                                               this_batch_duration)\n        self.parallel.print_progress()\n        if self.parallel._original_iterator is not None:\n            self.parallel.dispatch_next()\n\n\n###############################################################################\ndef register_parallel_backend(name, factory, make_default=False):\n    """"""Register a new Parallel backend factory.\n\n    The new backend can then be selected by passing its name as the backend\n    argument to the Parallel class. Moreover, the default backend can be\n    overwritten globally by setting make_default=True.\n\n    The factory can be any callable that takes no argument and return an\n    instance of ``ParallelBackendBase``.\n\n    Warning: this function is experimental and subject to change in a future\n    version of joblib.\n\n    .. versionadded:: 0.10\n\n    """"""\n    BACKENDS[name] = factory\n    if make_default:\n        global DEFAULT_BACKEND\n        DEFAULT_BACKEND = name\n\n\ndef effective_n_jobs(n_jobs=-1):\n    """"""Determine the number of jobs that can actually run in parallel\n\n    n_jobs is the is the number of workers requested by the callers.\n    Passing n_jobs=-1 means requesting all available workers for instance\n    matching the number of CPU cores on the worker host(s).\n\n    This method should return a guesstimate of the number of workers that can\n    actually perform work concurrently with the currently enabled default\n    backend. The primary use case is to make it possible for the caller to know\n    in how many chunks to slice the work.\n\n    In general working on larger data chunks is more efficient (less\n    scheduling overhead and better use of CPU cache prefetching heuristics)\n    as long as all the workers have enough work to do.\n\n    Warning: this function is experimental and subject to change in a future\n    version of joblib.\n\n    .. versionadded:: 0.10\n\n    """"""\n    backend, _ = get_active_backend()\n    return backend.effective_n_jobs(n_jobs=n_jobs)\n\n\n###############################################################################\nclass Parallel(Logger):\n    \'\'\' Helper class for readable parallel mapping.\n\n        Parameters\n        -----------\n        n_jobs: int, default: 1\n            The maximum number of concurrently running jobs, such as the number\n            of Python worker processes when backend=""multiprocessing""\n            or the size of the thread-pool when backend=""threading"".\n            If -1 all CPUs are used. If 1 is given, no parallel computing code\n            is used at all, which is useful for debugging. For n_jobs below -1,\n            (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all\n            CPUs but one are used.\n        backend: str or None, default: \'multiprocessing\'\n            Specify the parallelization backend implementation.\n            Supported backends are:\n              - ""multiprocessing"" used by default, can induce some\n                communication and memory overhead when exchanging input and\n                output data with the worker Python processes.\n              - ""threading"" is a very low-overhead backend but it suffers\n                from the Python Global Interpreter Lock if the called function\n                relies a lot on Python objects. ""threading"" is mostly useful\n                when the execution bottleneck is a compiled extension that\n                explicitly releases the GIL (for instance a Cython loop wrapped\n                in a ""with nogil"" block or an expensive call to a library such\n                as NumPy).\n              - finally, you can register backends by calling\n                register_parallel_backend. This will allow you to implement\n                a backend of your liking.\n        verbose: int, optional\n            The verbosity level: if non zero, progress messages are\n            printed. Above 50, the output is sent to stdout.\n            The frequency of the messages increases with the verbosity level.\n            If it more than 10, all iterations are reported.\n        timeout: float, optional\n            Timeout limit for each task to complete.  If any task takes longer\n            a TimeOutError will be raised. Only applied when n_jobs != 1\n        pre_dispatch: {\'all\', integer, or expression, as in \'3*n_jobs\'}\n            The number of batches (of tasks) to be pre-dispatched.\n            Default is \'2*n_jobs\'. When batch_size=""auto"" this is reasonable\n            default and the multiprocessing workers should never starve.\n        batch_size: int or \'auto\', default: \'auto\'\n            The number of atomic tasks to dispatch at once to each\n            worker. When individual evaluations are very fast, multiprocessing\n            can be slower than sequential computation because of the overhead.\n            Batching fast computations together can mitigate this.\n            The ``\'auto\'`` strategy keeps track of the time it takes for a batch\n            to complete, and dynamically adjusts the batch size to keep the time\n            on the order of half a second, using a heuristic. The initial batch\n            size is 1.\n            ``batch_size=""auto""`` with ``backend=""threading""`` will dispatch\n            batches of a single task at a time as the threading backend has\n            very little overhead and using larger batch size has not proved to\n            bring any gain in that case.\n        temp_folder: str, optional\n            Folder to be used by the pool for memmaping large arrays\n            for sharing memory with worker processes. If None, this will try in\n            order:\n            - a folder pointed by the JOBLIB_TEMP_FOLDER environment variable,\n            - /dev/shm if the folder exists and is writable: this is a RAMdisk\n              filesystem available by default on modern Linux distributions,\n            - the default system temporary folder that can be overridden\n              with TMP, TMPDIR or TEMP environment variables, typically /tmp\n              under Unix operating systems.\n            Only active when backend=""multiprocessing"".\n        max_nbytes int, str, or None, optional, 1M by default\n            Threshold on the size of arrays passed to the workers that\n            triggers automated memory mapping in temp_folder. Can be an int\n            in Bytes, or a human-readable string, e.g., \'1M\' for 1 megabyte.\n            Use None to disable memmaping of large arrays.\n            Only active when backend=""multiprocessing"".\n        mmap_mode: {None, \'r+\', \'r\', \'w+\', \'c\'}\n            Memmapping mode for numpy arrays passed to workers.\n            See \'max_nbytes\' parameter documentation for more details.\n\n        Notes\n        -----\n\n        This object uses the multiprocessing module to compute in\n        parallel the application of a function to many different\n        arguments. The main functionality it brings in addition to\n        using the raw multiprocessing API are (see examples for details):\n\n            * More readable code, in particular since it avoids\n              constructing list of arguments.\n\n            * Easier debugging:\n                - informative tracebacks even when the error happens on\n                  the client side\n                - using \'n_jobs=1\' enables to turn off parallel computing\n                  for debugging without changing the codepath\n                - early capture of pickling errors\n\n            * An optional progress meter.\n\n            * Interruption of multiprocesses jobs with \'Ctrl-C\'\n\n            * Flexible pickling control for the communication to and from\n              the worker processes.\n\n            * Ability to use shared memory efficiently with worker\n              processes for large numpy-based datastructures.\n\n        Examples\n        --------\n\n        A simple example:\n\n        >>> from math import sqrt\n        >>> from sklearn.externals.joblib import Parallel, delayed\n        >>> Parallel(n_jobs=1)(delayed(sqrt)(i**2) for i in range(10))\n        [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\n\n        Reshaping the output when the function has several return\n        values:\n\n        >>> from math import modf\n        >>> from sklearn.externals.joblib import Parallel, delayed\n        >>> r = Parallel(n_jobs=1)(delayed(modf)(i/2.) for i in range(10))\n        >>> res, i = zip(*r)\n        >>> res\n        (0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5)\n        >>> i\n        (0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0)\n\n        The progress meter: the higher the value of `verbose`, the more\n        messages::\n\n            >>> from time import sleep\n            >>> from sklearn.externals.joblib import Parallel, delayed\n            >>> r = Parallel(n_jobs=2, verbose=5)(delayed(sleep)(.1) for _ in range(10)) #doctest: +SKIP\n            [Parallel(n_jobs=2)]: Done   1 out of  10 | elapsed:    0.1s remaining:    0.9s\n            [Parallel(n_jobs=2)]: Done   3 out of  10 | elapsed:    0.2s remaining:    0.5s\n            [Parallel(n_jobs=2)]: Done   6 out of  10 | elapsed:    0.3s remaining:    0.2s\n            [Parallel(n_jobs=2)]: Done   9 out of  10 | elapsed:    0.5s remaining:    0.1s\n            [Parallel(n_jobs=2)]: Done  10 out of  10 | elapsed:    0.5s finished\n\n        Traceback example, note how the line of the error is indicated\n        as well as the values of the parameter passed to the function that\n        triggered the exception, even though the traceback happens in the\n        child process::\n\n         >>> from heapq import nlargest\n         >>> from sklearn.externals.joblib import Parallel, delayed\n         >>> Parallel(n_jobs=2)(delayed(nlargest)(2, n) for n in (range(4), \'abcde\', 3)) #doctest: +SKIP\n         #...\n         ---------------------------------------------------------------------------\n         Sub-process traceback:\n         ---------------------------------------------------------------------------\n         TypeError                                          Mon Nov 12 11:37:46 2012\n         PID: 12934                                    Python 2.7.3: /usr/bin/python\n         ...........................................................................\n         /usr/lib/python2.7/heapq.pyc in nlargest(n=2, iterable=3, key=None)\n             419         if n >= size:\n             420             return sorted(iterable, key=key, reverse=True)[:n]\n             421\n             422     # When key is none, use simpler decoration\n             423     if key is None:\n         --> 424         it = izip(iterable, count(0,-1))                    # decorate\n             425         result = _nlargest(n, it)\n             426         return map(itemgetter(0), result)                   # undecorate\n             427\n             428     # General case, slowest method\n\n         TypeError: izip argument #1 must support iteration\n         ___________________________________________________________________________\n\n\n        Using pre_dispatch in a producer/consumer situation, where the\n        data is generated on the fly. Note how the producer is first\n        called a 3 times before the parallel loop is initiated, and then\n        called to generate new data on the fly. In this case the total\n        number of iterations cannot be reported in the progress messages::\n\n         >>> from math import sqrt\n         >>> from sklearn.externals.joblib import Parallel, delayed\n\n         >>> def producer():\n         ...     for i in range(6):\n         ...         print(\'Produced %s\' % i)\n         ...         yield i\n\n         >>> out = Parallel(n_jobs=2, verbose=100, pre_dispatch=\'1.5*n_jobs\')(\n         ...                         delayed(sqrt)(i) for i in producer()) #doctest: +SKIP\n         Produced 0\n         Produced 1\n         Produced 2\n         [Parallel(n_jobs=2)]: Done 1 jobs     | elapsed:  0.0s\n         Produced 3\n         [Parallel(n_jobs=2)]: Done 2 jobs     | elapsed:  0.0s\n         Produced 4\n         [Parallel(n_jobs=2)]: Done 3 jobs     | elapsed:  0.0s\n         Produced 5\n         [Parallel(n_jobs=2)]: Done 4 jobs     | elapsed:  0.0s\n         [Parallel(n_jobs=2)]: Done 5 out of 6 | elapsed:  0.0s remaining: 0.0s\n         [Parallel(n_jobs=2)]: Done 6 out of 6 | elapsed:  0.0s finished\n    \'\'\'\n    def __init__(self, n_jobs=1, backend=None, verbose=0, timeout=None,\n                 pre_dispatch=\'2 * n_jobs\', batch_size=\'auto\',\n                 temp_folder=None, max_nbytes=\'1M\', mmap_mode=\'r\'):\n        active_backend, default_n_jobs = get_active_backend()\n        if backend is None and n_jobs == 1:\n            # If we are under a parallel_backend context manager, look up\n            # the default number of jobs and use that instead:\n            n_jobs = default_n_jobs\n        self.n_jobs = n_jobs\n        self.verbose = verbose\n        self.timeout = timeout\n        self.pre_dispatch = pre_dispatch\n\n        if isinstance(max_nbytes, _basestring):\n            max_nbytes = memstr_to_bytes(max_nbytes)\n\n        self._backend_args = dict(\n            max_nbytes=max_nbytes,\n            mmap_mode=mmap_mode,\n            temp_folder=temp_folder,\n            verbose=max(0, self.verbose - 50),\n        )\n        if DEFAULT_MP_CONTEXT is not None:\n            self._backend_args[\'context\'] = DEFAULT_MP_CONTEXT\n\n        if backend is None:\n            backend = active_backend\n        elif hasattr(backend, \'Pool\') and hasattr(backend, \'Lock\'):\n            # Make it possible to pass a custom multiprocessing context as\n            # backend to change the start method to forkserver or spawn or\n            # preload modules on the forkserver helper process.\n            self._backend_args[\'context\'] = backend\n            backend = MultiprocessingBackend()\n        else:\n            try:\n                backend_factory = BACKENDS[backend]\n            except KeyError:\n                raise ValueError(""Invalid backend: %s, expected one of %r""\n                                 % (backend, sorted(BACKENDS.keys())))\n            backend = backend_factory()\n\n        if (batch_size == \'auto\' or isinstance(batch_size, Integral) and\n                batch_size > 0):\n            self.batch_size = batch_size\n        else:\n            raise ValueError(\n                ""batch_size must be \'auto\' or a positive integer, got: %r""\n                % batch_size)\n\n        self._backend = backend\n        self._output = None\n        self._jobs = list()\n        self._managed_backend = False\n\n        # This lock is used coordinate the main thread of this process with\n        # the async callback thread of our the pool.\n        self._lock = threading.Lock()\n\n    def __enter__(self):\n        self._managed_backend = True\n        self._initialize_backend()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self._terminate_backend()\n        self._managed_backend = False\n\n    def _initialize_backend(self):\n        """"""Build a process or thread pool and return the number of workers""""""\n        try:\n            return self._backend.configure(n_jobs=self.n_jobs, parallel=self,\n                                           **self._backend_args)\n        except FallbackToBackend as e:\n            # Recursively initialize the backend in case of requested fallback.\n            self._backend = e.backend\n            return self._initialize_backend()\n\n    def _effective_n_jobs(self):\n        if self._backend:\n            return self._backend.effective_n_jobs(self.n_jobs)\n        return 1\n\n    def _terminate_backend(self):\n        if self._backend is not None:\n            self._backend.terminate()\n\n    def _dispatch(self, batch):\n        """"""Queue the batch for computing, with or without multiprocessing\n\n        WARNING: this method is not thread-safe: it should be only called\n        indirectly via dispatch_one_batch.\n\n        """"""\n        # If job.get() catches an exception, it closes the queue:\n        if self._aborting:\n            return\n\n        self.n_dispatched_tasks += len(batch)\n        self.n_dispatched_batches += 1\n\n        dispatch_timestamp = time.time()\n        cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)\n        job = self._backend.apply_async(batch, callback=cb)\n        self._jobs.append(job)\n\n    def dispatch_next(self):\n        """"""Dispatch more data for parallel processing\n\n        This method is meant to be called concurrently by the multiprocessing\n        callback. We rely on the thread-safety of dispatch_one_batch to protect\n        against concurrent consumption of the unprotected iterator.\n\n        """"""\n        if not self.dispatch_one_batch(self._original_iterator):\n            self._iterating = False\n            self._original_iterator = None\n\n    def dispatch_one_batch(self, iterator):\n        """"""Prefetch the tasks for the next batch and dispatch them.\n\n        The effective size of the batch is computed here.\n        If there are no more jobs to dispatch, return False, else return True.\n\n        The iterator consumption and dispatching is protected by the same\n        lock so calling this function should be thread safe.\n\n        """"""\n        if self.batch_size == \'auto\':\n            batch_size = self._backend.compute_batch_size()\n        else:\n            # Fixed batch size strategy\n            batch_size = self.batch_size\n\n        with self._lock:\n            tasks = BatchedCalls(itertools.islice(iterator, batch_size))\n            if len(tasks) == 0:\n                # No more tasks available in the iterator: tell caller to stop.\n                return False\n            else:\n                self._dispatch(tasks)\n                return True\n\n    def _print(self, msg, msg_args):\n        """"""Display the message on stout or stderr depending on verbosity""""""\n        # XXX: Not using the logger framework: need to\n        # learn to use logger better.\n        if not self.verbose:\n            return\n        if self.verbose < 50:\n            writer = sys.stderr.write\n        else:\n            writer = sys.stdout.write\n        msg = msg % msg_args\n        writer(\'[%s]: %s\\n\' % (self, msg))\n\n    def print_progress(self):\n        """"""Display the process of the parallel execution only a fraction\n           of time, controlled by self.verbose.\n        """"""\n        if not self.verbose:\n            return\n        elapsed_time = time.time() - self._start_time\n\n        # Original job iterator becomes None once it has been fully\n        # consumed : at this point we know the total number of jobs and we are\n        # able to display an estimation of the remaining time based on already\n        # completed jobs. Otherwise, we simply display the number of completed\n        # tasks.\n        if self._original_iterator is not None:\n            if _verbosity_filter(self.n_dispatched_batches, self.verbose):\n                return\n            self._print(\'Done %3i tasks      | elapsed: %s\',\n                        (self.n_completed_tasks,\n                         short_format_time(elapsed_time), ))\n        else:\n            index = self.n_completed_tasks\n            # We are finished dispatching\n            total_tasks = self.n_dispatched_tasks\n            # We always display the first loop\n            if not index == 0:\n                # Display depending on the number of remaining items\n                # A message as soon as we finish dispatching, cursor is 0\n                cursor = (total_tasks - index + 1 -\n                          self._pre_dispatch_amount)\n                frequency = (total_tasks // self.verbose) + 1\n                is_last_item = (index + 1 == total_tasks)\n                if (is_last_item or cursor % frequency):\n                    return\n            remaining_time = (elapsed_time / index) * \\\n                             (self.n_dispatched_tasks - index * 1.0)\n            # only display status if remaining time is greater or equal to 0\n            self._print(\'Done %3i out of %3i | elapsed: %s remaining: %s\',\n                        (index,\n                         total_tasks,\n                         short_format_time(elapsed_time),\n                         short_format_time(remaining_time),\n                         ))\n\n    def retrieve(self):\n        self._output = list()\n        while self._iterating or len(self._jobs) > 0:\n            if len(self._jobs) == 0:\n                # Wait for an async callback to dispatch new jobs\n                time.sleep(0.01)\n                continue\n            # We need to be careful: the job list can be filling up as\n            # we empty it and Python list are not thread-safe by default hence\n            # the use of the lock\n            with self._lock:\n                job = self._jobs.pop(0)\n            try:\n                # check if timeout supported in backend future implementation\n                if \'timeout\' in getfullargspec(job.get).args:\n                    self._output.extend(job.get(timeout=self.timeout))\n                else:\n                    self._output.extend(job.get())\n            except BaseException as exception:\n                # Note: we catch any BaseException instead of just Exception\n                # instances to also include KeyboardInterrupt.\n\n                # Stop dispatching any new job in the async callback thread\n                self._aborting = True\n\n                if isinstance(exception, TransportableException):\n                    # Capture exception to add information on the local\n                    # stack in addition to the distant stack\n                    this_report = format_outer_frames(context=10,\n                                                      stack_start=1)\n                    report = """"""Multiprocessing exception:\n%s\n---------------------------------------------------------------------------\nSub-process traceback:\n---------------------------------------------------------------------------\n%s"""""" % (this_report, exception.message)\n                    # Convert this to a JoblibException\n                    exception_type = _mk_exception(exception.etype)[0]\n                    exception = exception_type(report)\n\n                # If the backends allows it, cancel or kill remaining running\n                # tasks without waiting for the results as we will raise\n                # the exception we got back to the caller instead of returning\n                # any result.\n                backend = self._backend\n                if (backend is not None and\n                        hasattr(backend, \'abort_everything\')):\n                    # If the backend is managed externally we need to make sure\n                    # to leave it in a working state to allow for future jobs\n                    # scheduling.\n                    ensure_ready = self._managed_backend\n                    backend.abort_everything(ensure_ready=ensure_ready)\n                raise exception\n\n    def __call__(self, iterable):\n        if self._jobs:\n            raise ValueError(\'This Parallel instance is already running\')\n        # A flag used to abort the dispatching of jobs in case an\n        # exception is found\n        self._aborting = False\n        if not self._managed_backend:\n            n_jobs = self._initialize_backend()\n        else:\n            n_jobs = self._effective_n_jobs()\n\n        iterator = iter(iterable)\n        pre_dispatch = self.pre_dispatch\n\n        if pre_dispatch == \'all\' or n_jobs == 1:\n            # prevent further dispatch via multiprocessing callback thread\n            self._original_iterator = None\n            self._pre_dispatch_amount = 0\n        else:\n            self._original_iterator = iterator\n            if hasattr(pre_dispatch, \'endswith\'):\n                pre_dispatch = eval(pre_dispatch)\n            self._pre_dispatch_amount = pre_dispatch = int(pre_dispatch)\n\n            # The main thread will consume the first pre_dispatch items and\n            # the remaining items will later be lazily dispatched by async\n            # callbacks upon task completions.\n            iterator = itertools.islice(iterator, pre_dispatch)\n\n        self._start_time = time.time()\n        self.n_dispatched_batches = 0\n        self.n_dispatched_tasks = 0\n        self.n_completed_tasks = 0\n        try:\n            # Only set self._iterating to True if at least a batch\n            # was dispatched. In particular this covers the edge\n            # case of Parallel used with an exhausted iterator.\n            while self.dispatch_one_batch(iterator):\n                self._iterating = True\n            else:\n                self._iterating = False\n\n            if pre_dispatch == ""all"" or n_jobs == 1:\n                # The iterable was consumed all at once by the above for loop.\n                # No need to wait for async callbacks to trigger to\n                # consumption.\n                self._iterating = False\n            self.retrieve()\n            # Make sure that we get a last message telling us we are done\n            elapsed_time = time.time() - self._start_time\n            self._print(\'Done %3i out of %3i | elapsed: %s finished\',\n                        (len(self._output), len(self._output),\n                         short_format_time(elapsed_time)))\n        finally:\n            if not self._managed_backend:\n                self._terminate_backend()\n            self._jobs = list()\n        output = self._output\n        self._output = None\n        return output\n\n    def __repr__(self):\n        return \'%s(n_jobs=%s)\' % (self.__class__.__name__, self.n_jobs)\n'"
abupy/ExtBu/joblib/pool.py,12,"b'""""""Custom implementation of multiprocessing.Pool with custom pickler.\n\nThis module provides efficient ways of working with data stored in\nshared memory with numpy.memmap arrays without inducing any memory\ncopy between the parent and child processes.\n\nThis module should not be imported if multiprocessing is not\navailable as it implements subclasses of multiprocessing Pool\nthat uses a custom alternative to SimpleQueue.\n\n""""""\n# Author: Olivier Grisel <olivier.grisel@ensta.org>\n# Copyright: 2012, Olivier Grisel\n# License: BSD 3 clause\n\nfrom mmap import mmap\nimport errno\nimport os\nimport stat\nimport sys\nimport threading\nimport atexit\nimport tempfile\nimport shutil\nimport warnings\nfrom time import sleep\n\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None\n\nfrom pickle import whichmodule\ntry:\n    # Python 2 compat\n    from cPickle import loads\n    from cPickle import dumps\nexcept ImportError:\n    from pickle import loads\n    from pickle import dumps\n    import copyreg\n\n# Customizable pure Python pickler in Python 2\n# customizable C-optimized pickler under Python 3.3+\nfrom pickle import Pickler\n\nfrom pickle import HIGHEST_PROTOCOL\nfrom io import BytesIO\n\nfrom ._multiprocessing_helpers import mp, assert_spawning\n# We need the class definition to derive from it not the multiprocessing.Pool\n# factory function\nfrom multiprocessing.pool import Pool\n\ntry:\n    import numpy as np\n    from numpy.lib.stride_tricks import as_strided\nexcept ImportError:\n    np = None\n\nfrom .numpy_pickle import load\nfrom .numpy_pickle import dump\nfrom .hashing import hash\n\n# Some system have a ramdisk mounted by default, we can use it instead of /tmp\n# as the default folder to dump big arrays to share with subprocesses\nSYSTEM_SHARED_MEM_FS = \'/dev/shm\'\n\n# Folder and file permissions to chmod temporary files generated by the\n# memmaping pool. Only the owner of the Python process can access the\n# temporary files and folder.\nFOLDER_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR\nFILE_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR\n\n###############################################################################\n# Support for efficient transient pickling of numpy data structures\n\n\ndef _get_backing_memmap(a):\n    """"""Recursively look up the original np.memmap instance base if any.""""""\n    b = getattr(a, \'base\', None)\n    if b is None:\n        # TODO: check scipy sparse datastructure if scipy is installed\n        # a nor its descendants do not have a memmap base\n        return None\n\n    elif isinstance(b, mmap):\n        # a is already a real memmap instance.\n        return a\n\n    else:\n        # Recursive exploration of the base ancestry\n        return _get_backing_memmap(b)\n\n\ndef has_shareable_memory(a):\n    """"""Return True if a is backed by some mmap buffer directly or not.""""""\n    return _get_backing_memmap(a) is not None\n\n\ndef _strided_from_memmap(filename, dtype, mode, offset, order, shape, strides,\n                         total_buffer_len):\n    """"""Reconstruct an array view on a memory mapped file.""""""\n    if mode == \'w+\':\n        # Do not zero the original data when unpickling\n        mode = \'r+\'\n\n    if strides is None:\n        # Simple, contiguous memmap\n        return np.memmap(filename, dtype=dtype, shape=shape, mode=mode,\n                         offset=offset, order=order)\n    else:\n        # For non-contiguous data, memmap the total enclosing buffer and then\n        # extract the non-contiguous view with the stride-tricks API\n        base = np.memmap(filename, dtype=dtype, shape=total_buffer_len,\n                         mode=mode, offset=offset, order=order)\n        return as_strided(base, shape=shape, strides=strides)\n\n\ndef _reduce_memmap_backed(a, m):\n    """"""Pickling reduction for memmap backed arrays.\n\n    a is expected to be an instance of np.ndarray (or np.memmap)\n    m is expected to be an instance of np.memmap on the top of the ``base``\n    attribute ancestry of a. ``m.base`` should be the real python mmap object.\n    """"""\n    # offset that comes from the striding differences between a and m\n    a_start, a_end = np.byte_bounds(a)\n    m_start = np.byte_bounds(m)[0]\n    offset = a_start - m_start\n\n    # offset from the backing memmap\n    offset += m.offset\n\n    if m.flags[\'F_CONTIGUOUS\']:\n        order = \'F\'\n    else:\n        # The backing memmap buffer is necessarily contiguous hence C if not\n        # Fortran\n        order = \'C\'\n\n    if a.flags[\'F_CONTIGUOUS\'] or a.flags[\'C_CONTIGUOUS\']:\n        # If the array is a contiguous view, no need to pass the strides\n        strides = None\n        total_buffer_len = None\n    else:\n        # Compute the total number of items to map from which the strided\n        # view will be extracted.\n        strides = a.strides\n        total_buffer_len = (a_end - a_start) // a.itemsize\n    return (_strided_from_memmap,\n            (m.filename, a.dtype, m.mode, offset, order, a.shape, strides,\n             total_buffer_len))\n\n\ndef reduce_memmap(a):\n    """"""Pickle the descriptors of a memmap instance to reopen on same file.""""""\n    m = _get_backing_memmap(a)\n    if m is not None:\n        # m is a real mmap backed memmap instance, reduce a preserving striding\n        # information\n        return _reduce_memmap_backed(a, m)\n    else:\n        # This memmap instance is actually backed by a regular in-memory\n        # buffer: this can happen when using binary operators on numpy.memmap\n        # instances\n        return (loads, (dumps(np.asarray(a), protocol=HIGHEST_PROTOCOL),))\n\n\nclass ArrayMemmapReducer(object):\n    """"""Reducer callable to dump large arrays to memmap files.\n\n    Parameters\n    ----------\n    max_nbytes: int\n        Threshold to trigger memmaping of large arrays to files created\n        a folder.\n    temp_folder: str\n        Path of a folder where files for backing memmaped arrays are created.\n    mmap_mode: \'r\', \'r+\' or \'c\'\n        Mode for the created memmap datastructure. See the documentation of\n        numpy.memmap for more details. Note: \'w+\' is coerced to \'r+\'\n        automatically to avoid zeroing the data on unpickling.\n    verbose: int, optional, 0 by default\n        If verbose > 0, memmap creations are logged.\n        If verbose > 1, both memmap creations, reuse and array pickling are\n        logged.\n    prewarm: bool, optional, False by default.\n        Force a read on newly memmaped array to make sure that OS pre-cache it\n        memory. This can be useful to avoid concurrent disk access when the\n        same data array is passed to different worker processes.\n    """"""\n\n    def __init__(self, max_nbytes, temp_folder, mmap_mode, verbose=0,\n                 context_id=None, prewarm=True):\n        self._max_nbytes = max_nbytes\n        self._temp_folder = temp_folder\n        self._mmap_mode = mmap_mode\n        self.verbose = int(verbose)\n        self._prewarm = prewarm\n        if context_id is not None:\n            warnings.warn(\'context_id is deprecated and ignored in joblib\'\n                          \' 0.9.4 and will be removed in 0.11\',\n                          DeprecationWarning)\n\n    def __call__(self, a):\n        m = _get_backing_memmap(a)\n        if m is not None:\n            # a is already backed by a memmap file, let\'s reuse it directly\n            return _reduce_memmap_backed(a, m)\n\n        if (not a.dtype.hasobject\n                and self._max_nbytes is not None\n                and a.nbytes > self._max_nbytes):\n            # check that the folder exists (lazily create the pool temp folder\n            # if required)\n            try:\n                os.makedirs(self._temp_folder)\n                os.chmod(self._temp_folder, FOLDER_PERMISSIONS)\n            except OSError as e:\n                if e.errno != errno.EEXIST:\n                    raise e\n\n            # Find a unique, concurrent safe filename for writing the\n            # content of this array only once.\n            basename = ""%d-%d-%s.pkl"" % (\n                os.getpid(), id(threading.current_thread()), hash(a))\n            filename = os.path.join(self._temp_folder, basename)\n\n            # In case the same array with the same content is passed several\n            # times to the pool subprocess children, serialize it only once\n\n            # XXX: implement an explicit reference counting scheme to make it\n            # possible to delete temporary files as soon as the workers are\n            # done processing this data.\n            if not os.path.exists(filename):\n                if self.verbose > 0:\n                    print(""Memmaping (shape=%r, dtype=%s) to new file %s"" % (\n                        a.shape, a.dtype, filename))\n                for dumped_filename in dump(a, filename):\n                    os.chmod(dumped_filename, FILE_PERMISSIONS)\n\n                if self._prewarm:\n                    # Warm up the data to avoid concurrent disk access in\n                    # multiple children processes\n                    load(filename, mmap_mode=self._mmap_mode).max()\n            elif self.verbose > 1:\n                print(""Memmaping (shape=%s, dtype=%s) to old file %s"" % (\n                    a.shape, a.dtype, filename))\n\n            # The worker process will use joblib.load to memmap the data\n            return (load, (filename, self._mmap_mode))\n        else:\n            # do not convert a into memmap, let pickler do its usual copy with\n            # the default system pickler\n            if self.verbose > 1:\n                print(""Pickling array (shape=%r, dtype=%s)."" % (\n                    a.shape, a.dtype))\n            return (loads, (dumps(a, protocol=HIGHEST_PROTOCOL),))\n\n\n###############################################################################\n# Enable custom pickling in Pool queues\n\nclass CustomizablePickler(Pickler):\n    """"""Pickler that accepts custom reducers.\n\n    HIGHEST_PROTOCOL is selected by default as this pickler is used\n    to pickle ephemeral datastructures for interprocess communication\n    hence no backward compatibility is required.\n\n    `reducers` is expected to be a dictionary with key/values\n    being `(type, callable)` pairs where `callable` is a function that\n    give an instance of `type` will return a tuple `(constructor,\n    tuple_of_objects)` to rebuild an instance out of the pickled\n    `tuple_of_objects` as would return a `__reduce__` method. See the\n    standard library documentation on pickling for more details.\n\n    """"""\n\n    # We override the pure Python pickler as its the only way to be able to\n    # customize the dispatch table without side effects in Python 2.6\n    # to 3.2. For Python 3.3+ leverage the new dispatch_table\n    # feature from http://bugs.python.org/issue14166 that makes it possible\n    # to use the C implementation of the Pickler which is faster.\n\n    def __init__(self, writer, reducers=None, protocol=HIGHEST_PROTOCOL):\n        Pickler.__init__(self, writer, protocol=protocol)\n        if reducers is None:\n            reducers = {}\n        if hasattr(Pickler, \'dispatch\'):\n            # Make the dispatch registry an instance level attribute instead of\n            # a reference to the class dictionary under Python 2\n            self.dispatch = Pickler.dispatch.copy()\n        else:\n            # Under Python 3 initialize the dispatch table with a copy of the\n            # default registry\n            self.dispatch_table = copyreg.dispatch_table.copy()\n        for type, reduce_func in reducers.items():\n            self.register(type, reduce_func)\n\n    def register(self, type, reduce_func):\n        """"""Attach a reducer function to a given type in the dispatch table.""""""\n        if hasattr(Pickler, \'dispatch\'):\n            # Python 2 pickler dispatching is not explicitly customizable.\n            # Let us use a closure to workaround this limitation.\n            def dispatcher(self, obj):\n                reduced = reduce_func(obj)\n                self.save_reduce(obj=obj, *reduced)\n            self.dispatch[type] = dispatcher\n        else:\n            self.dispatch_table[type] = reduce_func\n\n\nclass CustomizablePicklingQueue(object):\n    """"""Locked Pipe implementation that uses a customizable pickler.\n\n    This class is an alternative to the multiprocessing implementation\n    of SimpleQueue in order to make it possible to pass custom\n    pickling reducers, for instance to avoid memory copy when passing\n    memory mapped datastructures.\n\n    `reducers` is expected to be a dict with key / values being\n    `(type, callable)` pairs where `callable` is a function that, given an\n    instance of `type`, will return a tuple `(constructor, tuple_of_objects)`\n    to rebuild an instance out of the pickled `tuple_of_objects` as would\n    return a `__reduce__` method.\n\n    See the standard library documentation on pickling for more details.\n    """"""\n\n    def __init__(self, context, reducers=None):\n        self._reducers = reducers\n        self._reader, self._writer = context.Pipe(duplex=False)\n        self._rlock = context.Lock()\n        if sys.platform == \'win32\':\n            self._wlock = None\n        else:\n            self._wlock = context.Lock()\n        self._make_methods()\n\n    def __getstate__(self):\n        assert_spawning(self)\n        return (self._reader, self._writer, self._rlock, self._wlock,\n                self._reducers)\n\n    def __setstate__(self, state):\n        (self._reader, self._writer, self._rlock, self._wlock,\n         self._reducers) = state\n        self._make_methods()\n\n    def empty(self):\n        return not self._reader.poll()\n\n    def _make_methods(self):\n        self._recv = recv = self._reader.recv\n        racquire, rrelease = self._rlock.acquire, self._rlock.release\n\n        def get():\n            racquire()\n            try:\n                return recv()\n            finally:\n                rrelease()\n\n        self.get = get\n\n        if self._reducers:\n            def send(obj):\n                buffer = BytesIO()\n                CustomizablePickler(buffer, self._reducers).dump(obj)\n                self._writer.send_bytes(buffer.getvalue())\n            self._send = send\n        else:\n            self._send = send = self._writer.send\n        if self._wlock is None:\n            # writes to a message oriented win32 pipe are atomic\n            self.put = send\n        else:\n            wlock_acquire, wlock_release = (\n                self._wlock.acquire, self._wlock.release)\n\n            def put(obj):\n                wlock_acquire()\n                try:\n                    return send(obj)\n                finally:\n                    wlock_release()\n\n            self.put = put\n\n\nclass PicklingPool(Pool):\n    """"""Pool implementation with customizable pickling reducers.\n\n    This is useful to control how data is shipped between processes\n    and makes it possible to use shared memory without useless\n    copies induces by the default pickling methods of the original\n    objects passed as arguments to dispatch.\n\n    `forward_reducers` and `backward_reducers` are expected to be\n    dictionaries with key/values being `(type, callable)` pairs where\n    `callable` is a function that, given an instance of `type`, will return a\n    tuple `(constructor, tuple_of_objects)` to rebuild an instance out of the\n    pickled `tuple_of_objects` as would return a `__reduce__` method.\n    See the standard library documentation about pickling for more details.\n\n    """"""\n\n    def __init__(self, processes=None, forward_reducers=None,\n                 backward_reducers=None, **kwargs):\n        if forward_reducers is None:\n            forward_reducers = dict()\n        if backward_reducers is None:\n            backward_reducers = dict()\n        self._forward_reducers = forward_reducers\n        self._backward_reducers = backward_reducers\n        poolargs = dict(processes=processes)\n        poolargs.update(kwargs)\n        super(PicklingPool, self).__init__(**poolargs)\n\n    def _setup_queues(self):\n        context = getattr(self, \'_ctx\', mp)\n        self._inqueue = CustomizablePicklingQueue(context,\n                                                  self._forward_reducers)\n        self._outqueue = CustomizablePicklingQueue(context,\n                                                   self._backward_reducers)\n        self._quick_put = self._inqueue._send\n        self._quick_get = self._outqueue._recv\n\n\ndef delete_folder(folder_path):\n    """"""Utility function to cleanup a temporary folder if still existing.""""""\n    try:\n        if os.path.exists(folder_path):\n            shutil.rmtree(folder_path)\n    except WindowsError:\n        warnings.warn(""Failed to clean temporary folder: %s"" % folder_path)\n\n\nclass MemmapingPool(PicklingPool):\n    """"""Process pool that shares large arrays to avoid memory copy.\n\n    This drop-in replacement for `multiprocessing.pool.Pool` makes\n    it possible to work efficiently with shared memory in a numpy\n    context.\n\n    Existing instances of numpy.memmap are preserved: the child\n    suprocesses will have access to the same shared memory in the\n    original mode except for the \'w+\' mode that is automatically\n    transformed as \'r+\' to avoid zeroing the original data upon\n    instantiation.\n\n    Furthermore large arrays from the parent process are automatically\n    dumped to a temporary folder on the filesystem such as child\n    processes to access their content via memmaping (file system\n    backed shared memory).\n\n    Note: it is important to call the terminate method to collect\n    the temporary folder used by the pool.\n\n    Parameters\n    ----------\n    processes: int, optional\n        Number of worker processes running concurrently in the pool.\n    initializer: callable, optional\n        Callable executed on worker process creation.\n    initargs: tuple, optional\n        Arguments passed to the initializer callable.\n    temp_folder: str, optional\n        Folder to be used by the pool for memmaping large arrays\n        for sharing memory with worker processes. If None, this will try in\n        order:\n        - a folder pointed by the JOBLIB_TEMP_FOLDER environment variable,\n        - /dev/shm if the folder exists and is writable: this is a RAMdisk\n          filesystem available by default on modern Linux distributions,\n        - the default system temporary folder that can be overridden\n          with TMP, TMPDIR or TEMP environment variables, typically /tmp\n          under Unix operating systems.\n    max_nbytes int or None, optional, 1e6 by default\n        Threshold on the size of arrays passed to the workers that\n        triggers automated memory mapping in temp_folder.\n        Use None to disable memmaping of large arrays.\n    mmap_mode: {\'r+\', \'r\', \'w+\', \'c\'}\n        Memmapping mode for numpy arrays passed to workers.\n        See \'max_nbytes\' parameter documentation for more details.\n    forward_reducers: dictionary, optional\n        Reducers used to pickle objects passed from master to worker\n        processes: see below.\n    backward_reducers: dictionary, optional\n        Reducers used to pickle return values from workers back to the\n        master process.\n    verbose: int, optional\n        Make it possible to monitor how the communication of numpy arrays\n        with the subprocess is handled (pickling or memmaping)\n    prewarm: bool or str, optional, ""auto"" by default.\n        If True, force a read on newly memmaped array to make sure that OS pre-\n        cache it in memory. This can be useful to avoid concurrent disk access\n        when the same data array is passed to different worker processes.\n        If ""auto"" (by default), prewarm is set to True, unless the Linux shared\n        memory partition /dev/shm is available and used as temp_folder.\n\n    `forward_reducers` and `backward_reducers` are expected to be\n    dictionaries with key/values being `(type, callable)` pairs where\n    `callable` is a function that give an instance of `type` will return\n    a tuple `(constructor, tuple_of_objects)` to rebuild an instance out\n    of the pickled `tuple_of_objects` as would return a `__reduce__`\n    method. See the standard library documentation on pickling for more\n    details.\n\n    """"""\n\n    def __init__(self, processes=None, temp_folder=None, max_nbytes=1e6,\n                 mmap_mode=\'r\', forward_reducers=None, backward_reducers=None,\n                 verbose=0, context_id=None, prewarm=False, **kwargs):\n        if forward_reducers is None:\n            forward_reducers = dict()\n        if backward_reducers is None:\n            backward_reducers = dict()\n        if context_id is not None:\n            warnings.warn(\'context_id is deprecated and ignored in joblib\'\n                          \' 0.9.4 and will be removed in 0.11\',\n                          DeprecationWarning)\n\n        # Prepare a sub-folder name for the serialization of this particular\n        # pool instance (do not create in advance to spare FS write access if\n        # no array is to be dumped):\n        use_shared_mem = False\n        pool_folder_name = ""joblib_memmaping_pool_%d_%d"" % (\n            os.getpid(), id(self))\n        if temp_folder is None:\n            temp_folder = os.environ.get(\'JOBLIB_TEMP_FOLDER\', None)\n        if temp_folder is None:\n            if os.path.exists(SYSTEM_SHARED_MEM_FS):\n                try:\n                    temp_folder = SYSTEM_SHARED_MEM_FS\n                    pool_folder = os.path.join(temp_folder, pool_folder_name)\n                    if not os.path.exists(pool_folder):\n                        os.makedirs(pool_folder)\n                    use_shared_mem = True\n                except IOError:\n                    # Missing rights in the the /dev/shm partition,\n                    # fallback to regular temp folder.\n                    temp_folder = None\n        if temp_folder is None:\n            # Fallback to the default tmp folder, typically /tmp\n            temp_folder = tempfile.gettempdir()\n        temp_folder = os.path.abspath(os.path.expanduser(temp_folder))\n        pool_folder = os.path.join(temp_folder, pool_folder_name)\n        self._temp_folder = pool_folder\n\n        # Register the garbage collector at program exit in case caller forgets\n        # to call terminate explicitly: note we do not pass any reference to\n        # self to ensure that this callback won\'t prevent garbage collection of\n        # the pool instance and related file handler resources such as POSIX\n        # semaphores and pipes\n        pool_module_name = whichmodule(delete_folder, \'delete_folder\')\n\n        def _cleanup():\n            # In some cases the Python runtime seems to set delete_folder to\n            # None just before exiting when accessing the delete_folder\n            # function from the closure namespace. So instead we reimport\n            # the delete_folder function explicitly.\n            # https://github.com/joblib/joblib/issues/328\n            # We cannot just use from \'joblib.pool import delete_folder\'\n            # because joblib should only use relative imports to allow\n            # easy vendoring.\n            delete_folder = __import__(\n                pool_module_name, fromlist=[\'delete_folder\']).delete_folder\n            delete_folder(pool_folder)\n\n        atexit.register(_cleanup)\n\n        if np is not None:\n            # Register smart numpy.ndarray reducers that detects memmap backed\n            # arrays and that is alse able to dump to memmap large in-memory\n            # arrays over the max_nbytes threshold\n            if prewarm == ""auto"":\n                prewarm = not use_shared_mem\n            forward_reduce_ndarray = ArrayMemmapReducer(\n                max_nbytes, pool_folder, mmap_mode, verbose,\n                prewarm=prewarm)\n            forward_reducers[np.ndarray] = forward_reduce_ndarray\n            forward_reducers[np.memmap] = reduce_memmap\n\n            # Communication from child process to the parent process always\n            # pickles in-memory numpy.ndarray without dumping them as memmap\n            # to avoid confusing the caller and make it tricky to collect the\n            # temporary folder\n            backward_reduce_ndarray = ArrayMemmapReducer(\n                None, pool_folder, mmap_mode, verbose)\n            backward_reducers[np.ndarray] = backward_reduce_ndarray\n            backward_reducers[np.memmap] = reduce_memmap\n\n        poolargs = dict(\n            processes=processes,\n            forward_reducers=forward_reducers,\n            backward_reducers=backward_reducers)\n        poolargs.update(kwargs)\n        super(MemmapingPool, self).__init__(**poolargs)\n\n    def terminate(self):\n        n_retries = 10\n        for i in range(n_retries):\n            try:\n                super(MemmapingPool, self).terminate()\n                break\n            except WindowsError as e:\n                # Workaround  occasional ""[Error 5] Access is denied"" issue\n                # when trying to terminate a process under windows.\n                sleep(0.1)\n                if i + 1 == n_retries:\n                    warnings.warn(""Failed to terminate worker processes in ""\n                                  "" multiprocessing pool: %r"" % e)\n        delete_folder(self._temp_folder)\n'"
abupy/ExtBu/joblib/testing.py,0,"b'""""""\nHelper for testing.\n""""""\n\nimport sys\nimport warnings\nimport os.path\nimport re\nimport subprocess\nimport threading\n\nfrom sklearn.externals.joblib._compat import PY3_OR_LATER\n\n\ndef warnings_to_stdout():\n    """""" Redirect all warnings to stdout.\n    """"""\n    showwarning_orig = warnings.showwarning\n\n    def showwarning(msg, cat, fname, lno, file=None, line=0):\n        showwarning_orig(msg, cat, os.path.basename(fname), line, sys.stdout)\n\n    warnings.showwarning = showwarning\n    #warnings.simplefilter(\'always\')\n\n\ntry:\n    from nose.tools import assert_raises_regex\nexcept ImportError:\n    # For Python 2.7\n    try:\n        from nose.tools import assert_raises_regexp as assert_raises_regex\n    except ImportError:\n        # for Python 2.6\n        def assert_raises_regex(expected_exception, expected_regexp,\n                                callable_obj=None, *args, **kwargs):\n            """"""Helper function to check for message patterns in exceptions""""""\n\n            not_raised = False\n            try:\n                callable_obj(*args, **kwargs)\n                not_raised = True\n            except Exception as e:\n                error_message = str(e)\n                if not re.compile(expected_regexp).search(error_message):\n                    raise AssertionError(""Error message should match pattern ""\n                                         ""%r. %r does not."" %\n                                         (expected_regexp, error_message))\n            if not_raised:\n                raise AssertionError(""Should have raised %r"" %\n                                     expected_exception(expected_regexp))\n\n\ndef check_subprocess_call(cmd, timeout=1, stdout_regex=None,\n                          stderr_regex=None):\n    """"""Runs a command in a subprocess with timeout in seconds.\n\n    Also checks returncode is zero, stdout if stdout_regex is set, and\n    stderr if stderr_regex is set.\n    """"""\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE)\n\n    def kill_process():\n        proc.kill()\n\n    timer = threading.Timer(timeout, kill_process)\n    try:\n        timer.start()\n        stdout, stderr = proc.communicate()\n\n        if PY3_OR_LATER:\n            stdout, stderr = stdout.decode(), stderr.decode()\n        if proc.returncode != 0:\n            message = (\n                \'Non-zero return code: {0}.\\nStdout:\\n{1}\\n\'\n                \'Stderr:\\n{2}\').format(\n                    proc.returncode, stdout, stderr)\n            raise ValueError(message)\n\n        if (stdout_regex is not None and\n                not re.search(stdout_regex, stdout)):\n            raise ValueError(\n                ""Unexpected stdout: {0!r} does not match:\\n{1!r}"".format(\n                    stdout_regex, stdout))\n        if (stderr_regex is not None and\n                not re.search(stderr_regex, stderr)):\n            raise ValueError(\n                ""Unexpected stderr: {0!r} does not match:\\n{1!r}"".format(\n                    stderr_regex, stderr))\n\n    finally:\n        timer.cancel()\n'"
