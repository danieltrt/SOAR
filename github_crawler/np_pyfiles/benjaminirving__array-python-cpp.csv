file_path,api_count,code
python_test.py,4,"b'# Python running example\n\nfrom __future__ import print_function\n\nimport numpy as np\nfrom rect import PyRectangle\n\n# Initialising the wrapped c++ function\nR1 = PyRectangle(0, 0, 9, 9);\n\n# Test1: Doing the area example calculation\nprint(""Test 1, Area: "", R1.getArea())\n\n# Test2: Passing a list from python to c++\nlist1 = [1, 2, 3, 4, 5]\nprint(""Test 2, Sum list: "", R1.sum_vec(list1))\n\n# Test3: Passing a numpy array from python to c++\nlist2 = np.array([1, 2, 3, 4, 5])\nprint("" Test 3, Sum list: "", R1.sum_vec(list2))\n\n# Test4: Passing a 2D list from python to c++\nlist3 = [[1, 2, 3], [4, 5, 6]]\nprint(""Test 4, Sum list: "", R1.sum_mat(list3))\n\n# Test5: Passing a 2D numpy array from python to c++\n# Passing by value makes a second copy so best to pass by reference as demonstrated in the next example\nlist4 = np.array([[1, 2, 3], [4, 5, 6]])\nprint(""Test 5, Sum list: "", R1.sum_mat(list4))\n\n# Test6: Passing a 2D numpy array from python to c++ as a constant reference\nlist5 = np.array([[1, 2, 3], [4, 5, 6]])\nprint(""Test 6, Sum list: "", R1.sum_mat_ref(list5))\n\n# Test7: Returning a 2D numpy array from c++\nlist6 = np.array([[1, 2, 3], [4, 5, 6]])\nprint(""Test 7, Sum list: "", R1.ret_mat(list6))\n\n# This should work with any n-dimensional array\n'"
setup.py,0,"b'# Cython compile instructions\n\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\n# Use python setup.py build_ext --inplace\n# to compile\n\nsetup(\n  name = ""rectangleapp"",\n  ext_modules = cythonize(\'*.pyx\'),\n)\n'"
