file_path,api_count,code
ch01-intro.py,5,"b'\n# coding: utf-8\n\n# # Chapter 1: Computing with Python\n\n# ### Overview: a typical Python-based scientific computing stack.\n# ![software stack](pics/software-stack-overview.png)\n# \n# * Resources:\n# - [SciPy](http://www.scipy.org)\n# - [Python Numeric & Scientific topics](http://wiki.python.org/moin/NumericAndScientific)\n\n# ## Interpreter\n# - The easist way to execute Python code: run the program directly.\n# - Use Jupyter magic command to write Python source file to disk:\n\n# In[1]:\n\n\nget_ipython().run_cell_magic(\'writefile\', \'hello.py\', \'print(""Hello from Python!"")\')\n\n\n# * Use the ! system shell command (included in the Python Jupyter kernel) to interactively run Python with hello.py as its argument.\n\n# In[2]:\n\n\nget_ipython().system(\'python hello.py\')\n\n\n# In[3]:\n\n\nget_ipython().system(\'python --version\')\n\n\n# ## Input and output caching\n# \n# * Input & output history can be accessed using __In__ (a list) & __Out__ (a dictionary). Both can be indexed with a cell number. \n\n# In[4]:\n\n\n3 * 3\n\n\n# In[5]:\n\n\nIn[1]\n\n\n# * A single underscore = the most recent output; \n# * A double underscore = the _next_ most recent output.\n\n# In[6]:\n\n\n1+1\n\n\n# In[7]:\n\n\n2+2\n\n\n# In[8]:\n\n\n_, __\n\n\n# In[9]:\n\n\n# In = a list\nIn\n\n\n# In[10]:\n\n\n# Out = a dictionary\nOut\n\n\n# In[11]:\n\n\n# Suppress output results by ending statement with a semicolon\n1+2;\n\n\n# ## Autocompletion\n# \n# * The __Tab__ key activates autocompletion (displays list of symbol names that are valid completions of what has been typed thus far.)\n\n# In[12]:\n\n\nimport os\n\n\n# * Results of typing ""os.w"", followed by \\t:\n# \n# ![autocompletion](pics/autocompletion.png)\n\n# ## Documentation\n# \n# * ""Docstrings"" provide a built-in reference manual for most Python modules. Display the docstring by appending a Python object with ""?"".\n\n# In[13]:\n\n\nimport math\n\n\n# In[14]:\n\n\nget_ipython().run_line_magic(\'pinfo\', \'math.cos\')\n\n\n# ## Interaction with System Shell\n# \n# * Anything after ! is evaluated using the system shell, such as bash.\n# * (I use Ubuntu Linux as my laptop OS. Your Windows equivalents will vary.)\n\n# In[15]:\n\n\nget_ipython().system(\'touch file1.py file2.py file3.py\')\n\n\n# In[16]:\n\n\nget_ipython().system(\'ls file*\')\n\n\n# In[17]:\n\n\n# output of a system shell command\n# can be captured in a Python variable\nfiles = get_ipython().getoutput(\'ls file*\')\n\n\n# In[18]:\n\n\nlen(files)\n\n\n# In[19]:\n\n\nfiles\n\n\n# In[20]:\n\n\n# pass Python variable values to shell commands\n# by prefixing the variable name with $.\nfile = ""file1.py""\n\n\n# In[21]:\n\n\nget_ipython().system(\'ls -l $file\')\n\n\n# ## IPython Extensions\n# \n# * Commands start with one or two ""%"" characters. A single % is used for single-line commands; dual %% is used for cells (multiple lines).\n# \n# * %lsmagic returns a list of available commands.\n\n# In[23]:\n\n\nget_ipython().run_line_magic(\'pinfo\', \'%lsmagic\')\n\n\n# ## Running scripts\n\n# In[24]:\n\n\nget_ipython().run_cell_magic(\'writefile\', \'fib.py\', \'\\ndef fib(N): \\n    """""" \\n    Return a list of the first N Fibonacci numbers.\\n    """""" \\n    f0, f1 = 0, 1\\n    f = [1] * N\\n    for n in range(1, N):\\n        f[n] = f0 + f1\\n        f0, f1 = f1, f[n]\\n\\n    return f\\n\\nprint(fib(10))\')\n\n\n# In[25]:\n\n\nget_ipython().system(\'python fib.py\')\n\n\n# In[26]:\n\n\nget_ipython().run_line_magic(\'run\', \'fib.py\')\n\n\n# In[27]:\n\n\nfib(6)\n\n\n# ## Listing all defined symbols\n# \n# * __%who__ lists all defined symbols\n# * __%whos__ provides more detailed info.\n\n# In[28]:\n\n\nget_ipython().run_line_magic(\'who\', \'\')\n\n\n# In[29]:\n\n\nget_ipython().run_line_magic(\'whos\', \'\')\n\n\n# ## Debugger\n# \n# * Use __%debug__ to step directly into the Python debugger.\n\n# In[30]:\n\n\n# fib function fails - can\'t use floating point numbers.\nfib(1.0)\n\n\n# In[32]:\n\n\nget_ipython().run_line_magic(\'debug\', \'\')\n\n\n# ## Resetting the Python namespace\n\n# In[34]:\n\n\nget_ipython().run_line_magic(\'reset\', \'\')\n\n\n# ## Timing and profiling code\n# \n# * __%timeit__ and __%time__ provide simple benchmarking utilities.\n\n# In[35]:\n\n\n# first, re-define fibonacci code used above.\ndef fib(N): \n    """""" \n    Return a list of the first N Fibonacci numbers.\n    """""" \n    f0, f1 = 0, 1\n    f = [1] * N\n    for n in range(1, N):\n        f[n] = f0 + f1\n        f0, f1 = f1, f[n]\n\n    return f\n\n\n# In[36]:\n\n\nget_ipython().run_line_magic(\'timeit\', \'fib(50)\')\n\n\n# In[37]:\n\n\n# %time only runs once. less accurate estimate.\nresult = get_ipython().run_line_magic(\'time\', \'fib(100)\')\n\n\n# In[38]:\n\n\nlen(result)\n\n\n# * The __cProfile__ module provides __%prun__ (for statements) and __%run__ (for external scripts) profiling commands.\n\n# In[39]:\n\n\nimport numpy as np\n\ndef random_walker_max_distance(M, N):\n    """"""\n    Simulate N random walkers taking M steps\n    Return the largest distance from the starting point.\n    """"""\n    trajectories = [np.random.randn(M).cumsum() \n                    for _ in range(N)]\n    return np.max(np.abs(trajectories))\n\n\n# In[40]:\n\n\n# returns call counts, runtime & cume runtime for\n# each function.\nget_ipython().run_line_magic(\'prun\', \'random_walker_max_distance(400, 10000)\')\n\n\n# ### Jupyter: External image rendering\n\n# In[41]:\n\n\nfrom IPython.display import display, Image, HTML, Math\n\n\n# In[42]:\n\n\nImage(url=\'http://python.org/images/python-logo.gif\')\n\n\n# ### Jupyter: HTML rendering\n\n# In[47]:\n\n\nimport scipy, numpy, matplotlib\nmodules = [numpy, matplotlib, scipy]\n\nrow = ""<tr><td>%s</td><td>%s</td></tr>""\nrows = ""\\n"".join(\n    [row % \n     (module.__name__, module.__version__) \n     for module in modules])\ntable = ""<table><tr><th>Library</th><th>Version</th></tr> %s </table>"" % rows\n\n\n# In[48]:\n\n\nHTML(table)\n\n\n# In[50]:\n\n\n# another method\nclass HTMLdisplayer(object):\n    def __init__(self,code):\n        self.code = code\n    def _repr_html_(self):\n        return self.code\n    \nHTMLdisplayer(table)\n\n\n# ### Jupyter: Formula rendering using Latex\n\n# In[53]:\n\n\nMath(r\'\\hat{H} = -\\frac{1}{2}\\epsilon \\hat{\\sigma}_z-\\frac{1}{2}\\delta \\hat{\\sigma}_x\')\n\n\n# ### Jupyter: UI Widgets\n# \n# ** Needs debugging: slider widget doesn\'t appear. **\n\n# In[54]:\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import stats\n\ndef f(mu):\n    X = stats.norm(loc=mu, scale=np.sqrt(mu))\n    N = stats.poisson(mu)\n    x = np.linspace(0, X.ppf(0.999))\n    n = np.arange(0, x[-1])\n    \n    fig, ax = plt.subplots()\n    ax.plot(x, X.pdf(x), color=\'black\', lw=2, label=""Normal($\\mu=%d, \\sigma^2=%d$)"" % (mu,mu))\n    ax.bar(n, N.pmf(n), align=\'edge\', label=r""Poisson($\\lambda=%d$)"" % mu)\n    ax.set_ylim(0, X.pdf(x).max() * 1.25)\n    ax.legend(loc=2, ncol=2)\n    plt.close(fig)\n    return fig\n\n\n# In[55]:\n\n\nfrom ipywidgets import interact\nimport ipywidgets as widgets\n\n\n# In[58]:\n\n\ninteract(f, mu=widgets.FloatSlider(min=1.0, max=20.0, step=1.0));\n\n\n# ## nbconvert to HTML file\n\n# In[59]:\n\n\nget_ipython().system(\'jupyter nbconvert --to html ch01-intro.ipynb\')\n\n\n# ## nbconvert to PDF file\n# * [Requires a LaTeX environment](https://nbconvert.readthedocs.io/en/latest/install.html#installing-tex) to be installed.\n# * On this system (Ubuntu Linux): ```sudo apt-get install texlive-xetex```\n\n# In[60]:\n\n\nget_ipython().system(\'jupyter nbconvert --to pdf ch01-intro.ipynb;\')\n\n\n# ## nbconvert to pure Python source code\n\n# In[4]:\n\n\nget_ipython().system(\'jupyter nbconvert ch01-intro.ipynb --to python\')\n\n\n# In[5]:\n\n\nget_ipython().system(\'ls ch01*\')\n\n'"
fib.py,0,"b'\ndef fib(N): \n    """""" \n    Return a list of the first N Fibonacci numbers.\n    """""" \n    f0, f1 = 0, 1\n    f = [1] * N\n    for n in range(1, N):\n        f[n] = f0 + f1\n        f0, f1 = f1, f[n]\n\n    return f\n\nprint(fib(10))'"
file1.py,0,b''
file2.py,0,b''
file3.py,0,b''
hello.py,0,"b'print(""Hello from Python!"")'"
setup.py,1,"b""# usage: $python setup.py build_ext --inplace \n# instructs distutils to build extension module in same directory as source.\n\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\nimport numpy as np\n\nsetup(ext_modules=cythonize('cy_sum.pyx'),\n    include_dirs=[np.get_include()],\n    requires=['Cython','numpy'])"""
.ipynb_checkpoints/ch01-intro-checkpoint.py,5,"b'\n# coding: utf-8\n\n# # Chapter 1: Computing with Python\n\n# ### Overview: a typical Python-based scientific computing stack.\n# ![software stack](pics/software-stack-overview.png)\n# \n# * Resources:\n# - [SciPy](http://www.scipy.org)\n# - [Python Numeric & Scientific topics](http://wiki.python.org/moin/NumericAndScientific)\n\n# ## Interpreter\n# - The easist way to execute Python code: run the program directly.\n# - Use Jupyter magic command to write Python source file to disk:\n\n# In[1]:\n\n\nget_ipython().run_cell_magic(\'writefile\', \'hello.py\', \'print(""Hello from Python!"")\')\n\n\n# * Use the ! system shell command (included in the Python Jupyter kernel) to interactively run Python with hello.py as its argument.\n\n# In[2]:\n\n\nget_ipython().system(\'python hello.py\')\n\n\n# In[3]:\n\n\nget_ipython().system(\'python --version\')\n\n\n# ## Input and output caching\n# \n# * Input & output history can be accessed using __In__ (a list) & __Out__ (a dictionary). Both can be indexed with a cell number. \n\n# In[4]:\n\n\n3 * 3\n\n\n# In[5]:\n\n\nIn[1]\n\n\n# * A single underscore = the most recent output; \n# * A double underscore = the _next_ most recent output.\n\n# In[6]:\n\n\n1+1\n\n\n# In[7]:\n\n\n2+2\n\n\n# In[8]:\n\n\n_, __\n\n\n# In[9]:\n\n\n# In = a list\nIn\n\n\n# In[10]:\n\n\n# Out = a dictionary\nOut\n\n\n# In[11]:\n\n\n# Suppress output results by ending statement with a semicolon\n1+2;\n\n\n# ## Autocompletion\n# \n# * The __Tab__ key activates autocompletion (displays list of symbol names that are valid completions of what has been typed thus far.)\n\n# In[12]:\n\n\nimport os\n\n\n# * Results of typing ""os.w"", followed by \\t:\n# \n# ![autocompletion](pics/autocompletion.png)\n\n# ## Documentation\n# \n# * ""Docstrings"" provide a built-in reference manual for most Python modules. Display the docstring by appending a Python object with ""?"".\n\n# In[13]:\n\n\nimport math\n\n\n# In[14]:\n\n\nget_ipython().run_line_magic(\'pinfo\', \'math.cos\')\n\n\n# ## Interaction with System Shell\n# \n# * Anything after ! is evaluated using the system shell, such as bash.\n# * (I use Ubuntu Linux as my laptop OS. Your Windows equivalents will vary.)\n\n# In[15]:\n\n\nget_ipython().system(\'touch file1.py file2.py file3.py\')\n\n\n# In[16]:\n\n\nget_ipython().system(\'ls file*\')\n\n\n# In[17]:\n\n\n# output of a system shell command\n# can be captured in a Python variable\nfiles = get_ipython().getoutput(\'ls file*\')\n\n\n# In[18]:\n\n\nlen(files)\n\n\n# In[19]:\n\n\nfiles\n\n\n# In[20]:\n\n\n# pass Python variable values to shell commands\n# by prefixing the variable name with $.\nfile = ""file1.py""\n\n\n# In[21]:\n\n\nget_ipython().system(\'ls -l $file\')\n\n\n# ## IPython Extensions\n# \n# * Commands start with one or two ""%"" characters. A single % is used for single-line commands; dual %% is used for cells (multiple lines).\n# \n# * %lsmagic returns a list of available commands.\n\n# In[23]:\n\n\nget_ipython().run_line_magic(\'pinfo\', \'%lsmagic\')\n\n\n# ## Running scripts\n\n# In[24]:\n\n\nget_ipython().run_cell_magic(\'writefile\', \'fib.py\', \'\\ndef fib(N): \\n    """""" \\n    Return a list of the first N Fibonacci numbers.\\n    """""" \\n    f0, f1 = 0, 1\\n    f = [1] * N\\n    for n in range(1, N):\\n        f[n] = f0 + f1\\n        f0, f1 = f1, f[n]\\n\\n    return f\\n\\nprint(fib(10))\')\n\n\n# In[25]:\n\n\nget_ipython().system(\'python fib.py\')\n\n\n# In[26]:\n\n\nget_ipython().run_line_magic(\'run\', \'fib.py\')\n\n\n# In[27]:\n\n\nfib(6)\n\n\n# ## Listing all defined symbols\n# \n# * __%who__ lists all defined symbols\n# * __%whos__ provides more detailed info.\n\n# In[28]:\n\n\nget_ipython().run_line_magic(\'who\', \'\')\n\n\n# In[29]:\n\n\nget_ipython().run_line_magic(\'whos\', \'\')\n\n\n# ## Debugger\n# \n# * Use __%debug__ to step directly into the Python debugger.\n\n# In[30]:\n\n\n# fib function fails - can\'t use floating point numbers.\nfib(1.0)\n\n\n# In[32]:\n\n\nget_ipython().run_line_magic(\'debug\', \'\')\n\n\n# ## Resetting the Python namespace\n\n# In[34]:\n\n\nget_ipython().run_line_magic(\'reset\', \'\')\n\n\n# ## Timing and profiling code\n# \n# * __%timeit__ and __%time__ provide simple benchmarking utilities.\n\n# In[35]:\n\n\n# first, re-define fibonacci code used above.\ndef fib(N): \n    """""" \n    Return a list of the first N Fibonacci numbers.\n    """""" \n    f0, f1 = 0, 1\n    f = [1] * N\n    for n in range(1, N):\n        f[n] = f0 + f1\n        f0, f1 = f1, f[n]\n\n    return f\n\n\n# In[36]:\n\n\nget_ipython().run_line_magic(\'timeit\', \'fib(50)\')\n\n\n# In[37]:\n\n\n# %time only runs once. less accurate estimate.\nresult = get_ipython().run_line_magic(\'time\', \'fib(100)\')\n\n\n# In[38]:\n\n\nlen(result)\n\n\n# * The __cProfile__ module provides __%prun__ (for statements) and __%run__ (for external scripts) profiling commands.\n\n# In[39]:\n\n\nimport numpy as np\n\ndef random_walker_max_distance(M, N):\n    """"""\n    Simulate N random walkers taking M steps\n    Return the largest distance from the starting point.\n    """"""\n    trajectories = [np.random.randn(M).cumsum() \n                    for _ in range(N)]\n    return np.max(np.abs(trajectories))\n\n\n# In[40]:\n\n\n# returns call counts, runtime & cume runtime for\n# each function.\nget_ipython().run_line_magic(\'prun\', \'random_walker_max_distance(400, 10000)\')\n\n\n# ### Jupyter: External image rendering\n\n# In[41]:\n\n\nfrom IPython.display import display, Image, HTML, Math\n\n\n# In[42]:\n\n\nImage(url=\'http://python.org/images/python-logo.gif\')\n\n\n# ### Jupyter: HTML rendering\n\n# In[47]:\n\n\nimport scipy, numpy, matplotlib\nmodules = [numpy, matplotlib, scipy]\n\nrow = ""<tr><td>%s</td><td>%s</td></tr>""\nrows = ""\\n"".join(\n    [row % \n     (module.__name__, module.__version__) \n     for module in modules])\ntable = ""<table><tr><th>Library</th><th>Version</th></tr> %s </table>"" % rows\n\n\n# In[48]:\n\n\nHTML(table)\n\n\n# In[50]:\n\n\n# another method\nclass HTMLdisplayer(object):\n    def __init__(self,code):\n        self.code = code\n    def _repr_html_(self):\n        return self.code\n    \nHTMLdisplayer(table)\n\n\n# ### Jupyter: Formula rendering using Latex\n\n# In[53]:\n\n\nMath(r\'\\hat{H} = -\\frac{1}{2}\\epsilon \\hat{\\sigma}_z-\\frac{1}{2}\\delta \\hat{\\sigma}_x\')\n\n\n# ### Jupyter: UI Widgets\n# \n# ** Needs debugging: slider widget doesn\'t appear. **\n\n# In[54]:\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import stats\n\ndef f(mu):\n    X = stats.norm(loc=mu, scale=np.sqrt(mu))\n    N = stats.poisson(mu)\n    x = np.linspace(0, X.ppf(0.999))\n    n = np.arange(0, x[-1])\n    \n    fig, ax = plt.subplots()\n    ax.plot(x, X.pdf(x), color=\'black\', lw=2, label=""Normal($\\mu=%d, \\sigma^2=%d$)"" % (mu,mu))\n    ax.bar(n, N.pmf(n), align=\'edge\', label=r""Poisson($\\lambda=%d$)"" % mu)\n    ax.set_ylim(0, X.pdf(x).max() * 1.25)\n    ax.legend(loc=2, ncol=2)\n    plt.close(fig)\n    return fig\n\n\n# In[55]:\n\n\nfrom ipywidgets import interact\nimport ipywidgets as widgets\n\n\n# In[58]:\n\n\ninteract(f, mu=widgets.FloatSlider(min=1.0, max=20.0, step=1.0));\n\n\n# ## nbconvert to HTML file\n\n# In[59]:\n\n\nget_ipython().system(\'jupyter nbconvert --to html ch01-intro.ipynb\')\n\n\n# ## nbconvert to PDF file\n# * [Requires a LaTeX environment](https://nbconvert.readthedocs.io/en/latest/install.html#installing-tex) to be installed.\n# * On this system (Ubuntu Linux): ```sudo apt-get install texlive-xetex```\n\n# In[60]:\n\n\nget_ipython().system(\'jupyter nbconvert --to pdf ch01-intro.ipynb;\')\n\n\n# ## nbconvert to pure Python source code\n\n# In[4]:\n\n\nget_ipython().system(\'jupyter nbconvert ch01-intro.ipynb --to python\')\n\n\n# In[5]:\n\n\nget_ipython().system(\'ls ch01*\')\n\n'"
