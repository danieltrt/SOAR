file_path,api_count,code
diabetes_prediction_with_knn.py,2,"b""# Using KNN Algorithm to predict if a person will have diabetes or not\n# importing libraries\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# loading the dataset\n\ndata = pd.read_csv('diabetes.csv')\n\nprint(data.head())\n\n# Replace columns like [Gluscose,BloodPressure,SkinThickness,BMI,Insulin] with Zero as values with mean of respective column\n\n\nzero_not_accepted = ['Glucose','BloodPressure','SkinThickness','BMI','Insulin']\n# for col in zero_not_accepted:\n#     for i in data[col]:\n#         if i==0:\n#             colSum = sum(data[col])\n#             meanCol=colSum/len(data[col])\n#             data[col]=meanCol\n\nfor col in zero_not_accepted:\n    data[col]= data[col].replace(0,np.NaN)\n    mean = int(data[col].mean(skipna=True))\n    data[col] = data[col].replace(np.NaN,mean)\n\n# extracting independent variables\n\nX = data.iloc[:,0:8]\n# extracting dependent variable\n\ny = data.iloc[:,8]\n# Explorning data to know relation before processing\n\nsns.heatmap(data.corr())\n\nplt.figure(figsize=(25,7))\nsns.countplot(x='Age',hue='Outcome',data=data,palette='Set1')\n\n# splitting dataset into training and testing set\n\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)\n\n# feature scaling\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n# loading model - KNN\n\nclassifier = KNeighborsClassifier(n_neighbors=11,p=2,metric='euclidean')\n# fitting model\n\nclassifier.fit(X_train,y_train)\n\n# making predictions\n\ny_pred = classifier.predict(X_test)\n# evaluating model\n\nconf_matrix = confusion_matrix(y_test,y_pred)\nprint(conf_matrix)\nprint(f1_score(y_test,y_pred))\n\n# accuracy\n\nprint(accuracy_score(y_test,y_pred))\n\nplt.show()"""
