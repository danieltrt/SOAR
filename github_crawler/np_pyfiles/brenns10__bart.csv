file_path,api_count,code
bart/__init__.py,0,b''
bart/app.py,0,"b'#-*- coding: utf-8 -*-\n""""""\nWeb application (API) for BART solver.\n""""""\n\nimport uuid\n\nimport flask\nfrom flask import request\n\nfrom bart.fares import STATIONS, FARES_DICT\nfrom bart.solver import BartScipySolver\n\napp = flask.Flask(__name__)\nsolver = BartScipySolver(FARES_DICT)\ntokens = {}\n\nTRAVEL_REQUIRED_ARGS = {\'start\', \'end\', \'id\'}\n\n\nclass BadRequestError(Exception):\n\n    status_code = 400\n\n    def __init__(self, message, status_code=None):\n        self.message = message\n        if status_code:\n            self.status_code = status_code\n\n    def to_dict(self):\n        return {\'status\': \'ERROR\', \'message\': self.message}\n\n\n@app.errorhandler(BadRequestError)\ndef handle_bad_request(error):\n    response = flask.jsonify(error.to_dict())\n    response.status_code = error.status_code\n    return response\n\n\ndef get_template_args():\n    return {\n        \'title\': \'BART Solver Admin\',\n    }\n\n\n@app.route(\'/\')\ndef index():\n    return flask.render_template(\'index.html\', **get_template_args())\n\n\n@app.route(\'/api/v1/status\', methods=[\'GET\'])\ndef status():\n    return flask.jsonify(\n        status=""OK"",\n    )\n\n\n@app.route(\'/api/v1/stations\', methods=[\'GET\'])\ndef stations():\n    return flask.jsonify(\n        status=""OK"",\n        stations=STATIONS,\n    )\n\n\n@app.route(\'/api/v1/travel\', methods=[\'POST\'])\ndef travel():\n    if not request.is_json:\n        raise BadRequestError(\'requests must be JSON encoded\')\n\n    args = request.get_json()\n\n    if not TRAVEL_REQUIRED_ARGS.issubset(args.keys()):\n        raise BadRequestError(\'missing args: \' + \', \'.join(\n            TRAVEL_REQUIRED_ARGS.difference(args.keys())))\n\n    start = args[\'start\']\n    end = args[\'end\']\n\n    if start not in STATIONS or end not in STATIONS:\n        raise BadRequestError(\'one or more specified station does not exist\')\n\n    args[\'token\'] = uuid.uuid4()\n    args[\'fare_orig\'] = FARES_DICT[(start, end)]\n    count = args.get(\'count\', 1)\n    for _ in range(count):\n        solver.add_traveler(start, end, args)\n\n    tokens[args[\'token\']] = \'processing\'\n\n    return flask.jsonify(\n        status=""OK"",\n        token=args[\'token\'],\n        fare_orig=args[\'fare_orig\'],\n    )\n\n\n@app.route(\'/api/v1/calculate\', methods=[\'GET\'])\ndef calculate():\n    global solver\n    solver.solve()  # it\'s really that simple :P\n    discount = solver.discount_rate()\n    for x in range(solver.num_stations()):\n        for passenger in solver.iter_dst(x):\n            passenger[\'fare_opt\'] = passenger[\'fare_orig\'] * discount\n            tokens[passenger[\'token\']] = passenger\n    old_solver = solver\n    solver = BartScipySolver(FARES_DICT)\n    return flask.jsonify(\n        status=""OK"",\n        cost_orig=old_solver.cost_orig,\n        cost_opt=old_solver.cost_opt,\n        discount=discount,\n    )\n\n\n@app.route(\'/api/v1/result/<uuid:token>\', methods=[\'GET\'])\ndef result(token):\n    res = tokens.get(token, None)\n    if not res:\n        raise BadRequestError(\'No ride associated with that token\', 404)\n\n    if res == \'processing\':\n        return flask.jsonify(\n            status=""PROCESSING"",\n        )\n    else:\n        del tokens[token]\n        return flask.jsonify(\n            status=""OK"",\n            **res\n        )\n\n\nif __name__ == \'__main__\':\n    app.run()\n'"
bart/fares.py,1,"b'""""""\nFrom the BART Fare Chart 2016:\nhttps://www.bart.gov/sites/default/files/docs/2016%20Fare%20Chart.pdf\n""""""\nimport numpy as np\n\n# Copy-pasted the triangular chart, comma separated them, and made lists:\n_raw_fares = [\n    [4.40],\n    [7.65,3.20],\n    [3.20,7.65,3.20],\n    [3.20,3.20,7.95,3.75],\n    [3.20,3.20,3.20,8.15,3.95],\n    [3.05,3.20,3.20,3.65,8.40,4.15],\n    [1.95,3.05,3.20,3.40,3.80,8.55,4.30],\n    [1.95,1.95,3.05,3.35,3.65,4.05,8.80,4.55],\n    [1.95,1.95,1.95,3.05,3.45,3.75,4.15,8.90,4.60],\n    [1.95,1.95,1.95,1.95,3.25,3.60,3.90,4.30,8.95,4.65],\n    [1.95,1.95,1.95,1.95,1.95,3.25,3.60,3.90,4.30,8.95,4.65],\n    [1.95,1.95,1.95,1.95,1.95,1.95,3.25,3.60,3.90,4.30,8.95,4.65],\n    [1.95,1.95,1.95,1.95,1.95,1.95,1.95,3.25,3.60,3.90,4.30,8.95,4.65],\n    [3.20,3.20,3.20,3.20,3.45,3.55,3.80,3.95,4.15,4.10,4.30,4.55,9.15,4.90],\n    [1.95,3.45,3.45,3.45,3.45,3.60,3.70,3.95,4.10,4.20,4.20,4.35,4.65,9.25,4.95],\n    [1.95,1.95,3.45,3.45,3.45,3.45,3.60,3.70,3.95,4.10,4.20,4.20,4.35,4.65,9.25,4.95],\n    [1.95,1.95,1.95,3.65,3.65,3.65,3.65,3.80,3.90,4.10,4.20,4.30,4.30,4.45,4.75,9.35,5.05],\n    [1.95,1.95,1.95,1.95,3.85,3.85,3.85,3.85,4.05,4.10,4.25,4.30,4.45,4.40,4.60,4.85,9.50,5.20],\n    [1.95,1.95,2.45,2.45,2.65,4.50,4.50,4.50,4.50,4.60,4.65,4.80,4.85,5.00,4.95,5.15,5.40,10.00,5.75],\n    [1.95,2.65,2.90,3.05,3.05,3.25,4.90,4.90,4.90,4.90,4.95,5.05,5.20,5.25,5.35,5.35,5.55,5.80,10.40,6.10],\n    [1.95,1.95,3.20,3.45,3.50,3.50,3.60,5.25,5.25,5.25,5.25,5.35,5.40,5.50,5.60,5.75,5.70,5.90,6.15,10.75,6.50],\n    [1.95,1.95,1.95,3.45,3.60,3.65,3.65,3.80,5.40,5.40,5.40,5.40,5.50,5.55,5.70,5.75,5.90,5.85,6.05,6.30,10.90,6.65],\n    [1.95,1.95,1.95,1.95,3.90,4.00,4.05,4.05,4.20,5.80,5.80,5.80,5.80,5.90,5.95,6.10,6.15,6.30,6.25,6.45,6.70,11.30,7.05],\n    [1.95,1.95,1.95,3.05,3.55,4.10,4.20,4.25,4.25,4.40,6.00,6.00,6.00,6.00,6.10,6.15,6.30,6.35,6.50,6.45,6.65,6.90,11.50,7.25],\n    [1.95,1.95,1.95,1.95,3.65,4.05,4.60,4.75,4.75,4.75,4.90,6.55,6.55,6.55,6.55,6.60,6.65,6.80,6.90,7.00,7.00,7.15,7.40,12.05,7.75],\n    [4.75,4.20,4.00,3.60,3.45,2.95,2.35,1.95,1.95,1.95,1.95,1.95,3.85,3.85,3.85,3.85,4.05,4.10,4.25,4.30,4.45,4.40,4.60,4.85,9.45,5.15],\n    [1.95,4.75,4.25,4.05,3.65,3.50,3.10,2.50,1.95,1.95,1.95,1.95,2.00,4.00,4.00,4.00,4.00,4.15,4.15,4.30,4.40,4.50,4.50,4.65,4.95,9.55,5.25],\n    [1.95,1.95,4.85,4.30,4.10,3.70,3.55,3.20,2.60,1.95,1.95,1.95,1.95,2.15,4.10,4.10,4.10,4.10,4.20,4.25,4.40,4.45,4.55,4.55,4.75,5.00,9.60,5.30],\n    [1.95,1.95,1.95,5.00,4.50,4.30,3.90,3.75,3.40,2.95,2.10,2.05,2.25,2.25,2.45,4.30,4.30,4.30,4.30,4.35,4.40,4.55,4.65,4.75,4.75,4.90,5.20,9.80,5.50],\n    [1.95,1.95,1.95,1.95,5.20,4.65,4.45,4.05,3.90,3.55,3.20,2.40,2.35,2.55,2.55,2.70,4.45,4.45,4.45,4.45,4.55,4.60,4.75,4.80,4.90,4.90,5.10,5.35,9.95,5.65],\n    [1.95,1.95,1.95,1.95,1.95,5.35,4.85,4.65,4.25,4.10,3.75,3.35,2.70,2.70,2.90,2.90,3.05,4.65,4.65,4.65,4.65,4.75,4.80,4.95,5.00,5.15,5.10,5.30,5.55,10.15,5.90],\n    [2.90,2.55,2.25,1.95,1.95,1.95,4.75,4.25,4.05,3.65,3.50,3.05,2.45,1.95,1.95,1.95,1.95,1.95,3.45,3.45,3.45,3.45,3.60,3.70,3.95,4.10,4.20,4.20,4.35,4.65,9.25,4.95],\n    [1.95,3.20,3.00,2.75,2.40,2.30,2.15,4.90,4.40,4.20,3.80,3.65,3.30,2.75,1.95,1.95,1.95,1.95,1.95,3.85,3.85,3.85,3.85,4.05,4.15,4.30,4.35,4.50,4.45,4.65,4.90,9.50,5.25],\n    [1.95,1.95,3.40,3.20,3.05,2.75,2.60,2.45,5.10,4.60,4.40,4.00,3.85,3.45,3.10,2.30,2.25,1.95,1.95,2.15,4.20,4.20,4.20,4.20,4.30,4.35,4.45,4.55,4.70,4.65,4.85,5.10,9.70,5.45],\n    [6.00,7.95,7.95,9.40,9.20,9.05,8.75,8.60,8.45,11.10,10.60,10.40,10.00,9.85,9.45,9.10,8.30,8.25,7.95,7.95,8.15,10.20,10.20,10.20,10.20,10.30,10.35,10.45,10.55,10.70,10.65,10.85,11.10,15.70,11.45],\n    [7.95,1.95,1.95,2.50,3.70,3.50,3.30,3.15,3.10,2.90,5.40,4.90,4.70,4.30,4.10,3.80,3.40,2.75,2.70,2.50,2.50,2.65,4.50,4.50,4.50,4.50,4.60,4.65,4.80,4.85,4.95,4.95,5.15,5.40,10.00,5.70],\n    [1.95,7.95,1.95,2.40,2.85,3.95,3.70,3.55,3.35,3.35,3.25,5.65,5.10,4.90,4.50,4.35,4.00,3.60,3.05,3.05,2.85,2.85,3.05,4.75,4.75,4.75,4.75,4.80,4.85,5.00,5.10,5.20,5.20,5.35,5.65,10.25,5.95],\n    [1.95,1.95,8.55,2.55,2.85,3.30,4.20,4.00,3.85,3.65,3.60,3.50,5.90,5.40,5.20,4.80,4.65,4.30,3.90,3.40,3.40,3.30,3.30,3.40,5.00,5.00,5.00,5.00,5.10,5.15,5.30,5.35,5.50,5.45,5.65,5.90,10.55,6.25],\n    [1.95,1.95,2.55,9.00,3.00,3.35,3.60,4.50,4.30,4.15,3.95,3.90,3.80,6.20,5.70,5.50,5.10,4.95,4.60,4.20,3.70,3.70,3.60,3.60,3.70,5.30,5.30,5.30,5.30,5.40,5.45,5.60,5.65,5.80,5.75,5.95,6.20,10.80,6.55],\n    [1.95,1.95,1.95,3.25,9.65,3.65,3.80,4.10,5.00,4.80,4.65,4.45,4.40,4.30,6.70,6.20,6.00,5.55,5.40,5.05,4.70,4.15,4.15,4.10,4.10,4.20,5.80,5.80,5.80,5.80,5.85,5.95,6.10,6.15,6.25,6.25,6.45,6.70,11.30,7.00],\n    [1.95,1.95,1.95,1.95,3.70,9.95,3.95,4.15,4.40,5.35,5.15,4.95,4.80,4.75,4.65,7.05,6.50,6.30,5.90,5.75,5.40,5.05,4.50,4.50,4.40,4.40,4.50,6.15,6.15,6.15,6.15,6.20,6.25,6.40,6.50,6.60,6.60,6.75,7.05,11.65,7.35],\n    [3.70,3.35,2.60,1.95,1.95,1.95,8.55,2.55,2.85,3.30,4.20,4.00,3.85,3.65,3.60,3.50,5.90,5.40,5.20,4.80,4.65,4.30,3.90,3.40,3.40,3.30,3.30,3.40,5.00,5.00,5.00,5.00,5.10,5.15,5.30,5.35,5.50,5.45,5.65,5.90,10.50,6.25],\n    [1.95,4.65,4.30,3.85,3.55,1.95,3.50,9.80,3.80,4.00,4.25,5.15,4.95,4.80,4.60,4.55,4.45,6.85,6.35,6.15,5.75,5.60,5.20,4.85,4.35,4.35,4.25,4.25,4.35,5.95,5.95,5.95,5.95,6.05,6.10,6.25,6.30,6.45,6.40,6.60,6.85,11.45,7.15],\n    [1.95,1.95,4.80,4.50,4.00,3.70,1.95,3.65,9.95,3.95,4.15,4.40,5.30,5.10,4.95,4.75,4.70,4.65,7.00,6.50,6.30,5.90,5.75,5.40,5.00,4.50,4.50,4.40,4.40,4.50,6.15,6.15,6.15,6.15,6.20,6.25,6.40,6.45,6.60,6.55,6.75,7.00,11.60,7.35],\n]\n\n# Couldn\'t really copy/paste this one.\n_raw_stations = [\n    \'Millbrae\',\n    \'SFO Airport\',\n    \'San Bruno\',\n    \'South San Francisco\',\n    \'Colma\',\n    \'Daly City\',\n    \'Balboa Park\',\n    \'Glen Park\',\n    \'24th St Mission\',\n    \'16th St Mission\',\n    \'Civic Center/UN Plaza\',\n    \'Powell\',\n    \'Montgomery\',\n    \'Embarcadero\',\n    \'West Oakland\',\n    \'12th St/Oakland\',\n    \'19th St/Oakland\',\n    \'MacArthur\',\n    \'Rockridge\',\n    \'Orinda\',\n    \'Lafayette\',\n    \'Walnut Creek\',\n    \'Pleasant Hill/Contra Costa\',\n    \'Concord\',\n    \'North Concord/Martinez\',\n    \'Pittsburg/Bay Point\',\n    \'Ashby\',\n    \'Downtown Berkeley\',\n    \'North Berkeley\',\n    \'El Cerrito Plaza\',\n    \'El Cerrito del Norte\',\n    \'Richmond\',\n    \'Lake Merritt\',\n    \'Fruitvale\',\n    \'Coliseum\',\n    \'OAK Airport\',\n    \'San Leandro\',\n    \'Bay Fair\',\n    \'Hayward\',\n    \'South Hayward\',\n    \'Union City\',\n    \'Fremont\',\n    \'Castro Valley\',\n    \'West Dublin/Pleasanton\',\n    \'Dublin/Pleasanton\',\n]\n\n# http://www.bart.gov/guide\n# Section: ""Fares and Tickets"" -> BART Excursion Fare\n_self_fare = 5.75\n\n# NOW WE POST-PROCESS\n_num_stations = len(_raw_stations)\n\n# Insert the self-fare for every row.\n_raw_fares.insert(0, [])\nfor station in _raw_fares:\n    station.insert(0, _self_fare)\n\n# Pad with -1\'s, which we will replace later.\n_raw_fares = [[-1] * (_num_stations - len(x)) + x for x in _raw_fares]\n\n# Now add the ""transpose"" fares in.\nFARES = np.rot90(np.array(_raw_fares))\nfor row in range(_num_stations):\n    for col in range(row + 1, _num_stations):\n        FARES[col, row] = FARES[row, col]\nSTATIONS = _raw_stations\n\n# Create a ""FARES_DICT"" object mapping (src, dst) to fare\nFARES_DICT = {}\nfor i, src in enumerate(STATIONS):\n    for j, dst in enumerate(STATIONS):\n        FARES_DICT[(src, dst)] = FARES[i, j]\n'"
bart/solver.py,9,"b'# -*- coding: utf-8 -*-\n""""""\nSolver for the underlying Integer Linear Program of the BART problem.\n""""""\n\nimport numpy as np\nimport scipy.optimize\n\n\ndef row_sum(A):\n    return A.sum(axis=1)\n\n\ndef col_sum(A):\n    return A.sum(axis=0)\n\n\nsrc_sum = row_sum\ndst_sum = col_sum\n\n\nclass BartScipySolver(object):\n    """"""\n    All solvers should provide the following interface:\n    * __init__(fares)\n    * add_traveler(start, end, data)\n    * solve()\n    * discount_rate()\n    * cost_orig, cost_opt, num_stations()\n    * iter_src(station), iter_dst(station)\n    """"""\n\n    def __init__(self, fares):\n        """"""\n        Create an instance of the BART problem given a set of stations with\n        fares for traveling between them.\n\n        :param fares: dictionary containing fares\n        :type fare_matrix: dict: (string, string) -> float\n        """"""\n        self.fares = fares\n        self.travelers = {}\n        self.station_by_name = {}\n        self.station_by_index = []\n        self.res = None\n\n    def _get_index(self, station):\n        """"""Return the index of a station.""""""\n        if station in self.station_by_name:\n            return self.station_by_name[station]\n        else:\n            index = len(self.station_by_name)\n            self.station_by_name[station] = index\n            self.station_by_index.append(station)\n            return index\n\n    def _get_station(self, index):\n        """"""Return the name of a station by index.""""""\n        return self.station_by_index[index]\n\n    def _get_fare_matrix(self):\n        """"""Create a fare matrix for all stations currently used.""""""\n        N = self.num_stations()\n        matrix = np.zeros((N, N), dtype=np.float64)\n        for i in range(N):\n            src = self._get_station(i)\n            for j in range(N):\n                dst = self._get_station(j)\n                matrix[i, j] = self.fares[(src, dst)]\n        return matrix\n\n    def num_stations(self):\n        return len(self.station_by_name)\n\n    def iter_dst(self, dst):\n        """"""\n        Iterate over all traveler data objects going to dst.\n        """"""\n        for src in range(self.num_stations()):\n            yield from self.travelers.get((src, dst), [])\n\n    def iter_src(self, src):\n        """"""\n        Iterate over all traveler data objects going from src.\n        """"""\n        for dst in range(self.num_stations()):\n            yield from self.travelers.get((src, dst), [])\n\n    def add_traveler(self, src, dst, data):\n        """"""\n        Add a traveler to the BART problem instance, with an associated ID.\n        Problem must not have been solved yet.\n\n        :param src: starting station name\n        :type src: str\n        ;param dst: ending station name\n        :type dst: str\n        :param data: traveler data dict\n        :type data: dict\n        """"""\n        assert not self.res\n\n        # Get indices for stations\n        src_idx = self._get_index(src)\n        dst_idx = self._get_index(dst)\n\n        # Add the traveler\'s ID to the current list going that way.\n        existing_travelers = self.travelers.get((src_idx, dst_idx), [])\n        existing_travelers.append(data)\n        self.travelers[(src_idx, dst_idx)] = existing_travelers\n\n    def solve(self):\n        """"""\n        Solve the problem.\n        """"""\n        assert not self.res\n        N = self.num_stations()\n\n        # Special case for solving empty problem.\n        if not N:\n            self.res = True\n            self.cost_opt = 0\n            self.cost_orig = 0\n            return\n\n        # Construct a ""traveler matrix""\n        matrix = np.zeros((N, N), dtype=np.int32)\n        for (src, dst), travelers in self.travelers.items():\n            matrix[src, dst] = len(travelers)\n\n        # Create linear program formulation of BART problem.\n        b = np.hstack([src_sum(matrix), dst_sum(matrix)]).astype(np.float)\n\n        A_src_const = np.repeat(np.identity(N), N, axis=1)\n        A_dst_const = np.hstack([np.identity(N) for _ in range(N)])\n        A = np.vstack([A_src_const, A_dst_const])\n\n        fare_matrix = self._get_fare_matrix()\n        c = fare_matrix.reshape(N ** 2)\n\n        # Solve linear program and save important attributes.\n        self.res = scipy.optimize.linprog(c, A_eq=A, b_eq=b,\n                                          options={\'maxiter\': float(\'inf\')})\n        print(self.res)\n        self.cost_opt = self.res.fun\n        self.cost_orig = np.sum(fare_matrix * matrix)\n        self.ticket_matrix = self.res.x.reshape(matrix.shape)\n\n        # It\'s unimodular so this should be true :P\n        assert np.all(np.equal(np.mod(self.ticket_matrix, 1), 0))\n        self.ticket_matrix = self.ticket_matrix.astype(np.int32)\n\n        # Assign exit tickets to riders. It\'s not as bad as the triple nested\n        # loop makes it look.\n        src_riders = list(map(self.iter_src, range(N)))\n        dst_riders = list(map(self.iter_dst, range(N)))\n        for src in range(N):\n            for dst in range(N):\n                for _ in range(int(self.ticket_matrix[src, dst])):\n                    src_rider = next(src_riders[src])\n                    print(src_rider)\n                    dst_rider = next(dst_riders[dst])\n                    dst_rider[\'exit_id\'] = src_rider[\'id\']\n\n    def discount_rate(self):\n        """"""\n        Return the fraction of their original cost that riders pay.\n        Problem must have been solved first.\n        """"""\n        assert self.res\n        if self.cost_orig == 0:\n            return 0\n        return self.cost_opt / self.cost_orig\n'"
