file_path,api_count,code
myproject/dicom/__init__.py,0,b'\n'
myproject/dicom/admin.py,0,b'from django.contrib import admin\n\n# Register your models here.\n'
myproject/dicom/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass DicomConfig(AppConfig):\n    name = 'dicom'\n"""
myproject/dicom/models.py,0,b'from django.db import models\n\n# Create your models here.\n'
myproject/dicom/tests.py,0,b'from django.test import TestCase\n\n# Create your tests here.\n'
myproject/dicom/views.py,0,"b'import base64\nimport os\nimport time\nimport traceback\nfrom io import BytesIO\n\nimport imageio\nimport matplotlib.pyplot as plt\nfrom django.core.files.storage import FileSystemStorage\nfrom django.http import JsonResponse\nfrom django.shortcuts import redirect, render\nfrom termcolor import colored\n\nfrom myproject import settings\n\n\ndef send_to_dcom(request):\n   return redirect(\'medical/app\')\n\n\ndef ajax_server(request):\n    start = time.time()\n    d = dict()\n    generic = dict()\n    medinfo = dict()\n\n    try:\n\n        print(\'FILE--->\',str(request.FILES[\'imgInp\'])[-3:])\n\n        if request.method == \'POST\' and (\'imgInp\' in request.FILES) and request.FILES[\'imgInp\'] and  str(request.FILES[\'imgInp\'])[-3:].upper() ==\'DCM\':\n            file = request.FILES[\'imgInp\']\n            fs = FileSystemStorage()\n            filename = fs.save(file.name, file)\n            full_path_file = os.path.join(settings.MEDIA_ROOT, filename)\n            print(colored(\'path->\', \'red\'), full_path_file)\n\n            generic[\'name\'] = filename\n            generic[\'size\'] = os.path.getsize(full_path_file)\n            try:\n                if full_path_file[-3:].upper() == \'DCM\':\n                    dcpimg = imageio.imread(full_path_file)\n                    for keys in dcpimg.meta:\n\n                        medinfo[keys] = str(dcpimg.meta[keys])\n\n                    if len(dcpimg.shape) ==4:\n                        dcpimg = dcpimg[0,0]\n                    elif len(dcpimg.shape) ==3:\n                        dcpimg = dcpimg[0]\n\n                    fig = plt.gcf()\n                    fig.set_size_inches(18.5, 10.5)\n                    plt.imshow(dcpimg, cmap=\'gray\')\n                    plt.colorbar()\n                    figure = BytesIO()\n                    plt.savefig(figure, format=\'jpg\', dpi=300)\n\n                    plt.close()\n                    d[\'url\'] = {\'base64\': \'data:image/png;base64,\' + base64.b64encode(figure.getvalue()).decode()}\n\n                # medinfo.update(dcpimg.meta)\n\n            except Exception as e:\n\n                traceback.print_tb(e)\n\n\n\n\n\n            fs.delete(filename)\n    except Exception as e:\n        traceback.print_tb(e)\n\n\n\n\n    generic[\'process time\'] = time.time() - start\n    d[\'generic\'] = generic\n\n\n    d[\'med\'] = medinfo\n\n\n    print(colored(d, \'red\'))\n    return JsonResponse(d)\n\n\n\n\n\ndef app_render(request):\n    print(settings.BASE_DIR)\n    d = {\'title\': \'DICOM viewer\',\'info\':\'DICOM SERVER SIDE RENDER\'}\n    return render(request, ""main_template.html"", d)\n\n\n\n\n'"
myproject/myproject/__init__.py,0,b'\n'
myproject/myproject/settings.py,0,"b'""""""\nDjango settings for myproject project.\n\nGenerated by \'django-admin startproject\' using Django 2.1.2.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/2.1/ref/settings/\n""""""\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \'!8ked@*d!)qvam+=iyww%x1*en0+t_2o&n=ye-$d6#1#3^cx@#\'\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.messages\',\n    \'django.contrib.staticfiles\',\n    \'dicom\',\n]\n\nMIDDLEWARE = [\n    \'django.middleware.security.SecurityMiddleware\',\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n    \'django.contrib.messages.middleware.MessageMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n]\n\nROOT_URLCONF = \'myproject.urls\'\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [os.path.join(BASE_DIR, \'myproject/templates\')],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.contrib.messages.context_processors.messages\',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'myproject.wsgi.application\'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\n\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.sqlite3\',\n        \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.1/topics/i18n/\n\nLANGUAGE_CODE = \'en-us\'\n\nTIME_ZONE = \'UTC\'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\n\nSTATIC_URL = \'/static/\'\n\nSTATICFILES_DIRS = [(\n    os.path.join(BASE_DIR, \'myproject/static_content\')\n),]\n\n\nMEDIA_URL = \'/media/\'\nMEDIA_ROOT = os.path.join(BASE_DIR, \'myproject/temp\')\n\n\n\n\n'"
myproject/myproject/urls.py,0,"b'""""""myproject URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/2.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n""""""\nfrom dicom import views\nfrom django.urls import path\n\n\nurlpatterns = [\n    path(\'\', views.send_to_dcom),\n    path(\'medical/app\',views.app_render),\n    path(\'medical/process.ajax\',views.ajax_server),\n\n\n\n\n]\n'"
myproject/myproject/wsgi.py,0,"b'""""""\nWSGI config for myproject project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/\n""""""\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'myproject.settings\')\n\napplication = get_wsgi_application()\n'"
