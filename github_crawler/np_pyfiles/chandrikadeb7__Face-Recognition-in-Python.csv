file_path,api_count,code
1. face dataset.py,0,"b'import cv2\nimport os\n\ncam = cv2.VideoCapture(0)\ncam.set(3, 640) # set video width\ncam.set(4, 480) # set video height\n\n#make sure \'haarcascade_frontalface_default.xml\' is in the same folder as this code\nface_detector = cv2.CascadeClassifier(\'haarcascade_frontalface_default.xml\')\n\n# For each person, enter one numeric face id (must enter number start from 1, this is the lable of person 1)\nface_id = input(\'\\n enter user id end press <return> ==>  \')\n\nprint(""\\n [INFO] Initializing face capture. Look the camera and wait ..."")\n# Initialize individual sampling face count\ncount = 0\n\n#start detect your face and take 30 pictures\nwhile(True):\n\n    ret, img = cam.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_detector.detectMultiScale(gray, 1.3, 5)\n\n    for (x,y,w,h) in faces:\n\n        cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)     \n        count += 1\n\n        # Save the captured image into the datasets folder\n        cv2.imwrite(""dataset/User."" + str(face_id) + \'.\' + str(count) + "".jpg"", gray[y:y+h,x:x+w])\n\n        cv2.imshow(\'image\', img)\n\n    k = cv2.waitKey(100) & 0xff # Press \'ESC\' for exiting video\n    if k == 27:\n        break\n    elif count >= 30: # Take 30 face sample and stop video\n         break\n\n# Do a bit of cleanup\nprint(""\\n [INFO] Exiting Program and cleanup stuff"")\ncam.release()\ncv2.destroyAllWindows()\n\n\n'"
2. face training.py,3,"b'import cv2\nimport numpy as np\nfrom PIL import Image #pillow package\nimport os\n\n# Path for face image database\npath = \'dataset\'\n\nrecognizer = cv2.face.LBPHFaceRecognizer_create()\ndetector = cv2.CascadeClassifier(""haarcascade_frontalface_default.xml"");\n\n# function to get the images and label data\ndef getImagesAndLabels(path):\n\n    imagePaths = [os.path.join(path,f) for f in os.listdir(path)]     \n    faceSamples=[]\n    ids = []\n\n    for imagePath in imagePaths:\n\n        PIL_img = Image.open(imagePath).convert(\'L\') # convert it to grayscale\n        img_numpy = np.array(PIL_img,\'uint8\')\n\n        id = int(os.path.split(imagePath)[-1].split(""."")[1])\n        faces = detector.detectMultiScale(img_numpy)\n\n        for (x,y,w,h) in faces:\n            faceSamples.append(img_numpy[y:y+h,x:x+w])\n            ids.append(id)\n\n    return faceSamples,ids\n\nprint (""\\n [INFO] Training faces. It will take a few seconds. Wait ..."")\nfaces,ids = getImagesAndLabels(path)\nrecognizer.train(faces, np.array(ids))\n\n# Save the model into trainer/trainer.yml\nrecognizer.write(\'trainer/trainer.yml\') # recognizer.save() worked on Mac, but not on Pi\n\n# Print the numer of faces trained and end program\nprint(""\\n [INFO] {0} faces trained. Exiting Program"".format(len(np.unique(ids))))\n'"
3. face recognition.py,0,"b'import cv2\nimport numpy as np\nimport os \n\nrecognizer = cv2.face.LBPHFaceRecognizer_create()\nrecognizer.read(\'trainer/trainer.yml\')   #load trained model\ncascadePath = ""haarcascade_frontalface_default.xml""\nfaceCascade = cv2.CascadeClassifier(cascadePath);\n\nfont = cv2.FONT_HERSHEY_SIMPLEX\n\n#iniciate id counter, the number of persons you want to include\nid = 2 #two persons \n\n\nnames = [\'\',\'Chandrika\',\'Aditya\']  #key in names, start from the second place, leave first empty\n\n# Initialize and start realtime video capture\ncam = cv2.VideoCapture(0)\ncam.set(3, 640) # set video widht\ncam.set(4, 480) # set video height\n\n# Define min window size to be recognized as a face\nminW = 0.1*cam.get(3)\nminH = 0.1*cam.get(4)\n\nwhile True:\n\n    ret, img =cam.read()\n\n    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\n    faces = faceCascade.detectMultiScale( \n        gray,\n        scaleFactor = 1.2,\n        minNeighbors = 5,\n        minSize = (int(minW), int(minH)),\n       )\n\n    for(x,y,w,h) in faces:\n\n        cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)\n\n        id, confidence = recognizer.predict(gray[y:y+h,x:x+w])\n\n        # Check if confidence is less them 100 ==> ""0"" is perfect match \n        if (confidence < 100):\n            id = names[id]\n            confidence = ""  {0}%"".format(round(100 - confidence))\n        else:\n            id = ""unknown""\n            confidence = ""  {0}%"".format(round(100 - confidence))\n        \n        cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)\n        cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  \n    \n    cv2.imshow(\'camera\',img) \n\n    k = cv2.waitKey(10) & 0xff # Press \'ESC\' for exiting video\n    if k == 27:\n        break\n\n# Do a bit of cleanup\nprint(""\\n [INFO] Exiting Program and cleanup stuff"")\ncam.release()\ncv2.destroyAllWindows()\n'"
