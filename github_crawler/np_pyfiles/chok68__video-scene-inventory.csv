file_path,api_count,code
main.py,0,"b'""""""\nmain auxiliary module to run detections\n""""""\n\nimport os\nimport argparse\nimport scenedetector\nimport scenesetting\nimport scenepicture\nimport sceneexposition\nimport logging\n\ndef process_video(args):\n  """"""\n  process video specified in args.video_filename\n  """"""\n\n  # started\n  logger = logging.getLogger(\'vsi_application\')\n  logger.debug(""process_video(): started"")\n\n  scenedet = scenedetector.SceneDetector(args.video_filename)\n  scene_list = scenedet.get_scenes_list()\n  logger.debug(\'scene_list\')\n\n  # Setting \xe2\x80\x93 Where are we? (Image classifier telling where are we, what are seeing: desert, nature, a room, etc.)\n  sceneset = scenesetting.SceneSettingDetector()\n\n  # Exposition \xe2\x80\x93 Necessary information. Quick and Clever\n  sceneexp = sceneexposition.SceneExpositionDetector()\n\n  # show list of scenes obtained\n  logger.info(\'List of scenes obtained:\')\n  for i, scene in enumerate(scene_list):\n      logger.info(\'    Scene %2d: Start %s / Frame %d, End %s / Frame %d\' % (\n        i+1,\n        scene[0].get_timecode(), scene[0].get_frames(),\n        scene[1].get_timecode(), scene[1].get_frames(),))\n\n  # for each scene...\n  for scene_index, scene in enumerate(scene_list):\n\n    # the scene number\n    scene_number = scene_index + 1\n\n    # extract picture from scene\n    scenepic = scenepicture.ScenePictureExtractor(args.video_filename, scene_number, scene, args.output_dirname)\n    picture_filename = scenepic.get_picture_filename()\n    msg = \'   *** processing scene picture: ""{}"" number {}/{}\'.format(picture_filename, scene_number, len(scene_list))\n    logger.debug(msg)\n\n    # Setting \xe2\x80\x93 Where are we? (Image classifier telling where are we, what are seeing: desert, nature, a room, etc.)\n    sceneset.detect(picture_filename)\n    scene_categories = sceneset.get_categories()\n\n    # Exposition \xe2\x80\x93 Necessary information. Quick and Clever\n    sceneexp.detect(picture_filename)\n\n  # finished\n  logger.debug(""process_video(): finished"")\n\ndef main():\n  """"""\n  main function\n  """"""\n\n  # setup logger\n  logger = logging.getLogger(\'vsi_application\')\n  logger.setLevel(logging.DEBUG)\n  ch = logging.StreamHandler()\n  ch.setLevel(logging.DEBUG)\n  formatter = logging.Formatter(\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\')\n  ch.setFormatter(formatter)\n  logger.addHandler(ch)\n\n  # start app and parse args\n  logger.debug(\'App started\')\n  parser = argparse.ArgumentParser(description=\'Show video scene inventory.\')\n  parser.add_argument(\'video_filename\', type=str, help=\'pass a video as input\')\n  parser.add_argument(\'output_dirname\', type=str, help=\'specify where to store output results\')\n  args = parser.parse_args()\n\n  # make output dir\n  args.output_dirname = os.path.join(args.output_dirname, os.path.basename(args.video_filename))\n  os.makedirs(args.output_dirname)\n\n  # process video\n  process_video(args)\n\n  # finished\n  logger.debug(\'App finished\')\n'"
scenedetector.py,0,"b'import os\n\nimport scenedetect\nfrom scenedetect.video_manager import VideoManager\nfrom scenedetect.scene_manager import SceneManager\nfrom scenedetect.frame_timecode import FrameTimecode\nfrom scenedetect.stats_manager import StatsManager\nfrom scenedetect.detectors import ContentDetector\n\nimport logging\n\nclass SceneDetector:\n  """"""\n  Detect scenes changes in video\n  """"""\n  logger = None\n  video_filename = None\n  stats_filename = None\n\n  def __init__(self, video_filename):\n    self.logger = logging.getLogger(\'vsi_application.scenedetector.SceneDetector\')\n    self.logger.info(\'on __init__\')\n    self.video_filename = video_filename\n    self.stats_filename = \'my-video-stats.csv\'\n    self.run()\n\n  def get_scenes_list(self):\n    return self.scene_list\n\n  def run(self):\n    self.logger.info(\'run(): started\')\n    self.logger.info(""Running PySceneDetect API test..."")\n    self.logger.info(""PySceneDetect version being used: %s"" % str(scenedetect.__version__))\n\n    # Create a video_manager point to video file testvideo.mp4\n    video_manager = VideoManager([self.video_filename])\n    stats_manager = StatsManager()\n    scene_manager = SceneManager(stats_manager)\n    # Add ContentDetector algorithm (constructor takes detector options like threshold).\n    scene_manager.add_detector(ContentDetector())\n    base_timecode = video_manager.get_base_timecode()\n    print (\'base_timecode\', base_timecode)\n\n    try:\n      # If stats file exists, load it.\n      if os.path.exists(self.stats_filename):\n        # Read stats from CSV file opened in read mode:\n        with open(self.stats_filename, \'r\') as stats_file:\n          stats_manager.load_from_csv(stats_file, base_timecode)\n\n      # Set video_manager duration\n      start_time = base_timecode\n\n      # Set downscale factor to improve processing speed.\n      video_manager.set_downscale_factor()\n\n      # Start video_manager.\n      video_manager.start()\n\n      # Perform scene detection on video_manager.\n      scene_manager.detect_scenes(frame_source=video_manager,\n                                  start_time=start_time)\n\n      # Obtain list of detected scenes.\n      self.scene_list = scene_manager.get_scene_list(base_timecode)\n      # Like FrameTimecodes, each scene in the scene_list can be sorted if the\n      # list of scenes becomes unsorted.\n\n      """"""\n      # We only write to the stats file if a save is required:\n      if stats_manager.is_save_required():\n        with open(self.stats_filename, \'w\') as stats_file:\n          stats_manager.save_to_csv(stats_file, base_timecode)\n      """"""\n\n    finally:\n      video_manager.release()\n      self.logger.info(\'run(): finished\')\n'"
sceneexposition.py,0,"b'import logging\nimport os\nimport sys\nimport random\nimport math\nimport numpy as np\nimport skimage.io\nimport matplotlib\nimport matplotlib.pyplot as plt\nROOT_DIR = os.path.abspath(""."")\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn import utils\nimport mrcnn.model as modellib\nfrom mrcnn import visualize\nsys.path.append(os.path.join(ROOT_DIR, ""samples/coco/""))  # To find local version\nimport coco\nfrom PIL import Image, ImageDraw, ImageFont\n\nclass InferenceConfig(coco.CocoConfig):\n    # Set batch size to 1 since we\'ll be running inference on\n    # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 1\n\nclass SceneExpositionDetector:\n  """"""\n  Detect scene exposition \xe2\x80\x93 Necessary information. Quick and Clever\n  """"""\n  logger = None\n\n  def __init__(self):\n    self.logger = logging.getLogger(\'vsi_application.sceneexposition.SceneExpositionDetector\')\n    self.logger.info(\'on __init__\')\n\n    # Directory to save logs and trained model\n    MODEL_DIR = os.path.join(ROOT_DIR, ""logs"")\n\n    # Local path to trained weights file\n    COCO_MODEL_PATH = os.path.join(ROOT_DIR, ""mask_rcnn_coco.h5"")\n    # Download COCO trained weights from Releases if needed\n    if not os.path.exists(COCO_MODEL_PATH):\n        utils.download_trained_weights(COCO_MODEL_PATH)\n\n    # set properties\n    config = InferenceConfig()\n    config.display()\n\n    # Create model object in inference mode.\n    self.model = modellib.MaskRCNN(mode=""inference"", model_dir=MODEL_DIR, config=config)\n\n    # Load weights trained on MS-COCO\n    self.model.load_weights(COCO_MODEL_PATH, by_name=True)\n\n    # COCO Class names\n    # Index of the class in the list is its ID. For example, to get ID of\n    # the teddy bear class, use: class_names.index(\'teddy bear\')\n    self.class_names = [\'BG\', \'person\', \'bicycle\', \'car\', \'motorcycle\', \'airplane\',\n                   \'bus\', \'train\', \'truck\', \'boat\', \'traffic light\',\n                   \'fire hydrant\', \'stop sign\', \'parking meter\', \'bench\', \'bird\',\n                   \'cat\', \'dog\', \'horse\', \'sheep\', \'cow\', \'elephant\', \'bear\',\n                   \'zebra\', \'giraffe\', \'backpack\', \'umbrella\', \'handbag\', \'tie\',\n                   \'suitcase\', \'frisbee\', \'skis\', \'snowboard\', \'sports ball\',\n                   \'kite\', \'baseball bat\', \'baseball glove\', \'skateboard\',\n                   \'surfboard\', \'tennis racket\', \'bottle\', \'wine glass\', \'cup\',\n                   \'fork\', \'knife\', \'spoon\', \'bowl\', \'banana\', \'apple\',\n                   \'sandwich\', \'orange\', \'broccoli\', \'carrot\', \'hot dog\', \'pizza\',\n                   \'donut\', \'cake\', \'chair\', \'couch\', \'potted plant\', \'bed\',\n                   \'dining table\', \'toilet\', \'tv\', \'laptop\', \'mouse\', \'remote\',\n                   \'keyboard\', \'cell phone\', \'microwave\', \'oven\', \'toaster\',\n                   \'sink\', \'refrigerator\', \'book\', \'clock\', \'vase\', \'scissors\',\n                   \'teddy bear\', \'hair drier\', \'toothbrush\']\n\n    \n  def get_scenes_list(self):\n    return self.scene_list\n\n  def detect(self, picture_filename):\n    self.logger.info(\'detect(): started\')\n\n    # Run Object Detection\n    image = skimage.io.imread(picture_filename)\n    results = self.model.detect([image], verbose=1)\n\n    # open image to get figsize\n    img = Image.open(picture_filename).convert(\'RGBA\')\n\n    # plot results\n    r = results[0]\n    _, ax = plt.subplots(1, figsize=(16, 16))\n    visualize.display_instances(image, r[\'rois\'], r[\'masks\'], r[\'class_ids\'], \n                                self.class_names, r[\'scores\'], ax=ax)\n\n    output_picture_filename = picture_filename + \'-exposition.jpg\'\n    plt.savefig(output_picture_filename)\n\n    # finished\n    self.logger.info(\'detect(): finished\')\n'"
scenepicture.py,0,"b'import logging\nimport cv2\nimport os\n\nclass ScenePictureExtractor:\n  """"""\n  Extract a picture from a passed scene time\n  """"""\n  logger = None\n  video_filename = None\n  output_dirname = None\n  picture_filename = None # saved picture filename (this script output)\n  scene = None\n  scene_index = None\n\n  def __init__(self, video_filename, scene_index, scene, output_dirname):\n    # started\n    self.logger = logging.getLogger(\'vsi_application.scenepicture.ScenePictureExtractor\')\n    self.logger.info(\'__init__(): started\')\n    self.logger.debug(video_filename)\n    self.video_filename = video_filename\n    self.scene = scene\n    self.scene_index = scene_index\n    self.output_dirname = output_dirname\n\n    # run\n    self.run()\n\n    # finished\n    self.logger.info(\'__init__(): finished\')\n\n  def get_picture_filename(self):\n    return self.picture_filename\n\n  def run(self):\n    self.logger.info(\'run(): started\')\n    self.logger.debug(\'   opening video...\')\n\n    # create output dir\n    try:\n      os.mkdir(self.output_dirname)\n    except:\n      pass\n\n    # calculate center frame\n    center_frame_num = self.scene[0].frame_num + int((self.scene[1].frame_num - self.scene[0].frame_num) / 2)\n    self.logger.debug(\'   center_frame_num \' + str(center_frame_num))\n\n    # capture specific frame\n    count = 0\n    cap = cv2.VideoCapture(self.video_filename)\n    while cap.isOpened():\n      # Extract the frame\n      ok, frame = cap.read()\n\n      if not ok:\n        break\n\n      if count == center_frame_num:\n        #scene_filename = \'scene-center-frame-%#05d.jpg\' % (count+1)\n        scene_filename = \'scene-\' + f\'{self.scene_index:05}\' + \'--\' + self.scene[0].get_timecode() + \'--\' + self.scene[1].get_timecode()\n        scene_filename = scene_filename.replace(\':\', \'-\')\n        scene_filename = scene_filename.replace(\'.\', \'-\')\n        scene_filename = scene_filename + \'.jpg\'\n        self.picture_filename = os.path.join(self.output_dirname, scene_filename)\n        cv2.imwrite(self.picture_filename, frame)\n        self.logger.debug(\'   saved scene picture: \' + self.picture_filename)\n\n      count = count + 1\n      #self.logger.debug(\'   on frame: \' + str(count))\n\n    self.logger.info(\'run(): finished\')\n'"
scenesetting.py,3,"b'import os\nimport numpy as np\nfrom urllib.request import urlopen\nfrom PIL import Image, ImageDraw, ImageFont\nfrom cv2 import resize\nimport sys\n\nfrom vgg16_places_365 import VGG16_Places365\nimport logging\n\nclass SceneSettingDetector:\n  """"""\n  Detect scenes setting (place detection using places365)\n  """"""\n  logger = None\n  model = None\n  categories = None\n\n  NUMBER_OF_PREDICTIONS = 5\n\n  def __init__(self):\n\n    # started\n    self.logger = logging.getLogger(\'vsi_application.scenesetting.SceneSettingDetector\')\n    self.logger.info(\'__init__(): started\')\n\n    ### init\n    self.model = VGG16_Places365(weights=\'places\')\n    file_name = \'categories_places365.txt\'\n    if not os.access(file_name, os.W_OK):\n      synset_url = \'https://raw.githubusercontent.com/csailvision/places365/master/categories_places365.txt\'\n      #os.system(\'wget \' + synset_url)\n    classes = list()\n    with open(file_name) as class_file:\n        for line in class_file:\n            classes.append(line.strip().split(\' \')[0][3:])\n    self.categories = tuple(classes)\n\n    # finished\n    self.logger.info(\'__init__(): finished\')\n\n  def get_categories(self):\n    return self.categories\n    \n  def detect(self, picture_filename):\n    self.logger.info(\'detect(): started\')\n\n    image = Image.open(picture_filename)\n    image = np.array(image, dtype=np.uint8)\n    image = resize(image, (224, 224))\n    image = np.expand_dims(image, 0)\n\n    preds = self.model.predict(image)[0]\n    top_preds = np.argsort(preds)[::-1][0:self.NUMBER_OF_PREDICTIONS]\n\n    self.logger.info(\'--SCENE CATEGORIES:\')\n    # output the prediction\n    for i in range(0, 5):\n        self.logger.info(self.categories[top_preds[i]])\n\n    # save into image\n    img = Image.open(picture_filename)\n    draw = ImageDraw.Draw(img)\n    # font = ImageFont.truetype(<font-file>, <font-size>)\n    font = ImageFont.truetype(""arial.ttf"", 16)\n    text_y = 20\n    for i in range(0, 5):\n      # draw.text((x, y),""Sample Text"",(r,g,b))\n      draw.text((0, text_y), self.categories[top_preds[i]], (255,255,255), font=font)\n      text_y = text_y + 20\n    output_picture_filename = picture_filename + \'-setting.jpg\'\n    img.save(output_picture_filename)\n\n    self.logger.info(\'detect(): finished\')\n'"
toy-imports.py,0,"b'# Breakthrough/PySceneDetect\nfrom __future__ import print_function\nimport os\nimport scenedetect\nfrom scenedetect.video_manager import VideoManager\nfrom scenedetect.scene_manager import SceneManager\nfrom scenedetect.frame_timecode import FrameTimecode\nfrom scenedetect.stats_manager import StatsManager\nfrom scenedetect.detectors import ContentDetector\n\n# GKalliatakis/Keras-VGG16-places365\nimport os\nimport numpy as np\nfrom urllib.request import urlopen\nfrom PIL import Image\nfrom cv2 import resize\nimport sys\nfrom vgg16_places_365 import VGG16_Places365\n\n# oarriaga/face_classification\nimport sys\nimport cv2\nfrom keras.models import load_model\nimport numpy as np\nfrom utils.datasets import get_labels\nfrom utils.inference import detect_faces\nfrom utils.inference import draw_text\nfrom utils.inference import draw_bounding_box\nfrom utils.inference import apply_offsets\nfrom utils.inference import load_detection_model\nfrom utils.inference import load_image\nfrom utils.preprocessor import preprocess_input\n\n# matterport/Mask_RCNN\n# Root directory of the project\nROOT_DIR = os.path.abspath(""."")\nimport os\nimport sys\nimport random\nimport math\nimport numpy as np\nimport skimage.io\nimport matplotlib\nimport matplotlib.pyplot as plt\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn import utils\nimport mrcnn.model as modellib\nfrom mrcnn import visualize\nsys.path.append(os.path.join(ROOT_DIR, ""samples/coco/""))  # To find local version\nimport coco\n'"
vgg16_places_365.py,3,"b'# -*- coding: utf-8 -*-\n\'\'\'VGG16-places365 model for Keras\n\n# Reference:\n- [Places: A 10 million Image Database for Scene Recognition](http://places2.csail.mit.edu/PAMI_places.pdf)\n\'\'\'\n\nfrom __future__ import division, print_function\nimport os\n\nimport warnings\nimport numpy as np\n\nfrom keras import backend as K\nfrom keras.layers import Input\nfrom keras.layers.core import Activation, Dense, Flatten\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.models import Model\nfrom keras.layers import Conv2D\nfrom keras.regularizers import l2\nfrom keras.layers.core import Dropout\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.applications.imagenet_utils import _obtain_input_shape\nfrom keras.engine.topology import get_source_inputs\nfrom keras.utils.data_utils import get_file\nfrom keras.utils import layer_utils\nfrom keras.preprocessing import image\nfrom keras.applications.imagenet_utils import preprocess_input\n\nWEIGHTS_PATH = \'https://github.com/GKalliatakis/Keras-VGG16-places365/releases/download/v1.0/vgg16-places365_weights_tf_dim_ordering_tf_kernels.h5\'\nWEIGHTS_PATH_NO_TOP = \'https://github.com/GKalliatakis/Keras-VGG16-places365/releases/download/v1.0/vgg16-places365_weights_tf_dim_ordering_tf_kernels_notop.h5\'\n\n\ndef VGG16_Places365(include_top=True, weights=\'places\',\n                    input_tensor=None, input_shape=None,\n                    pooling=None,\n                    classes=365):\n    """"""Instantiates the VGG16-places365 architecture.\n\n    Optionally loads weights pre-trained\n    on Places. Note that when using TensorFlow,\n    for best performance you should set\n    `image_data_format=""channels_last""` in your Keras config\n    at ~/.keras/keras.json.\n\n    The model and the weights are compatible with both\n    TensorFlow and Theano. The data format\n    convention used by the model is the one\n    specified in your Keras config file.\n\n    # Arguments\n        include_top: whether to include the 3 fully-connected\n            layers at the top of the network.\n        weights: one of `None` (random initialization),\n                 \'places\' (pre-training on Places),\n                 or the path to the weights file to be loaded.\n        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\n            to use as image input for the model.\n        input_shape: optional shape tuple, only to be specified\n            if `include_top` is False (otherwise the input shape\n            has to be `(224, 224, 3)` (with `channels_last` data format)\n            or `(3, 224, 244)` (with `channels_first` data format).\n            It should have exactly 3 inputs channels,\n            and width and height should be no smaller than 48.\n            E.g. `(200, 200, 3)` would be one valid value.\n        pooling: Optional pooling mode for feature extraction\n            when `include_top` is `False`.\n            - `None` means that the output of the model will be\n                the 4D tensor output of the\n                last convolutional layer.\n            - `avg` means that global average pooling\n                will be applied to the output of the\n                last convolutional layer, and thus\n                the output of the model will be a 2D tensor.\n            - `max` means that global max pooling will\n                be applied.\n        classes: optional number of classes to classify images\n            into, only to be specified if `include_top` is True, and\n            if no `weights` argument is specified.\n    # Returns\n        A Keras model instance.\n    # Raises\n        ValueError: in case of invalid argument for `weights`, or invalid input shape\n        """"""\n    if not (weights in {\'places\', None} or os.path.exists(weights)):\n        raise ValueError(\'The `weights` argument should be either \'\n                         \'`None` (random initialization), `places` \'\n                         \'(pre-training on Places), \'\n                         \'or the path to the weights file to be loaded.\')\n\n    if weights == \'places\' and include_top and classes != 365:\n        raise ValueError(\'If using `weights` as places with `include_top`\'\n                         \' as true, `classes` should be 365\')\n\n\n    # Determine proper input shape\n    input_shape = _obtain_input_shape(input_shape,\n                                      default_size=224,\n                                      min_size=48,\n                                      data_format=K.image_data_format(),\n                                      require_flatten =include_top)\n\n    if input_tensor is None:\n        img_input = Input(shape=input_shape)\n    else:\n        if not K.is_keras_tensor(input_tensor):\n            img_input = Input(tensor=input_tensor, shape=input_shape)\n        else:\n            img_input = input_tensor\n\n    # Block 1\n    x = Conv2D(filters=64, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block1_conv1\')(img_input)\n\n    x = Conv2D(filters=64, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block1_conv2\')(x)\n\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""block1_pool"", padding=\'valid\')(x)\n\n    # Block 2\n    x = Conv2D(filters=128, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block2_conv1\')(x)\n\n    x = Conv2D(filters=128, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block2_conv2\')(x)\n\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""block2_pool"", padding=\'valid\')(x)\n\n    # Block 3\n    x = Conv2D(filters=256, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block3_conv1\')(x)\n\n    x = Conv2D(filters=256, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block3_conv2\')(x)\n\n    x = Conv2D(filters=256, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block3_conv3\')(x)\n\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""block3_pool"", padding=\'valid\')(x)\n\n    # Block 4\n    x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block4_conv1\')(x)\n\n    x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block4_conv2\')(x)\n\n    x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block4_conv3\')(x)\n\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""block4_pool"", padding=\'valid\')(x)\n\n    # Block 5\n    x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block5_conv1\')(x)\n\n    x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block5_conv2\')(x)\n\n    x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding=\'same\',\n               kernel_regularizer=l2(0.0002),\n               activation=\'relu\', name=\'block5_conv3\')(x)\n\n    x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""block5_pool"", padding=\'valid\')(x)\n\n    if include_top:\n        # Classification block\n        x = Flatten(name=\'flatten\')(x)\n        x = Dense(4096, activation=\'relu\', name=\'fc1\')(x)\n        x = Dropout(0.5, name=\'drop_fc1\')(x)\n\n        x = Dense(4096, activation=\'relu\', name=\'fc2\')(x)\n        x = Dropout(0.5, name=\'drop_fc2\')(x)\n        \n        x = Dense(365, activation=\'softmax\', name=""predictions"")(x)\n\n    else:\n        if pooling == \'avg\':\n            x = GlobalAveragePooling2D()(x)\n        elif pooling == \'max\':\n            x = GlobalMaxPooling2D()(x)\n\n    # Ensure that the model takes into account\n    # any potential predecessors of `input_tensor`.\n    if input_tensor is not None:\n        inputs = get_source_inputs(input_tensor)\n    else:\n        inputs = img_input\n\n    # Create model.\n    model = Model(inputs, x, name=\'vgg16-places365\')\n\n    # load weights\n    if weights == \'places\':\n        if include_top:\n            weights_path = get_file(\'vgg16-places365_weights_tf_dim_ordering_tf_kernels.h5\',\n                                    WEIGHTS_PATH,\n                                    cache_subdir=\'models\')\n        else:\n            weights_path = get_file(\'vgg16-places365_weights_tf_dim_ordering_tf_kernels_notop.h5\',\n                                    WEIGHTS_PATH_NO_TOP,\n                                    cache_subdir=\'models\')\n\n        model.load_weights(weights_path)\n\n        if K.backend() == \'theano\':\n            layer_utils.convert_all_kernels_in_model(model)\n\n        if K.image_data_format() == \'channels_first\':\n            if include_top:\n                maxpool = model.get_layer(name=\'block5_pool\')\n                shape = maxpool.output_shape[1:]\n                dense = model.get_layer(name=\'fc1\')\n                layer_utils.convert_dense_weights_data_format(dense, shape, \'channels_first\')\n\n            if K.backend() == \'tensorflow\':\n                warnings.warn(\'You are using the TensorFlow backend, yet you \'\n                              \'are using the Theano \'\n                              \'image data format convention \'\n                              \'(`image_data_format=""channels_first""`). \'\n                              \'For best performance, set \'\n                              \'`image_data_format=""channels_last""` in \'\n                              \'your Keras config \'\n                              \'at ~/.keras/keras.json.\')\n\n    elif weights is not None:\n        model.load_weights(weights)\n\n    return model\n\n\nif __name__ == \'__main__\':\n    import urllib2\n    import numpy as np\n    from PIL import Image\n    from cv2 import resize\n\n    TEST_IMAGE_URL = \'http://places2.csail.mit.edu/imgs/demo/6.jpg\'\n\n    image = Image.open(urllib2.urlopen(TEST_IMAGE_URL))\n    image = np.array(image, dtype=np.uint8)\n    image = resize(image, (224, 224))\n    image = np.expand_dims(image, 0)\n\n    model = VGG16_Places365(weights=\'places\')\n    predictions_to_return = 5\n    preds = model.predict(image)[0]\n    top_preds = np.argsort(preds)[::-1][0:predictions_to_return]\n\n    # load the class label\n    file_name = \'categories_places365.txt\'\n    if not os.access(file_name, os.W_OK):\n        synset_url = \'https://raw.githubusercontent.com/csailvision/places365/master/categories_places365.txt\'\n        os.system(\'wget \' + synset_url)\n    classes = list()\n    with open(file_name) as class_file:\n        for line in class_file:\n            classes.append(line.strip().split(\' \')[0][3:])\n    classes = tuple(classes)\n\n    print(\'--PREDICTED SCENE CATEGORIES:\')\n    # output the prediction\n    for i in range(0, 5):\n        print(classes[top_preds[i]])\n\n    # --PREDICTED SCENE CATEGORIES:\n    # cafeteria\n    # food_court\n    # restaurant_patio\n    # banquet_hall\n    # restaurant\n'"
vsi.py,0,"b'""""""\nvideo scene inventory runner\n""""""\n\nfrom main import main\n\nif __name__ == \'__main__\':\n  main()\n'"
mrcnn/__init__.py,0,b'\n'
mrcnn/config.py,5,"b'""""""\nMask R-CNN\nBase Configurations class.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n""""""\n\nimport numpy as np\n\n\n# Base Configuration Class\n# Don\'t use this class directly. Instead, sub-class it and override\n# the configurations you need to change.\n\nclass Config(object):\n    """"""Base configuration class. For custom configurations, create a\n    sub-class that inherits from this one and override properties\n    that need to be changed.\n    """"""\n    # Name the configurations. For example, \'COCO\', \'Experiment 3\', ...etc.\n    # Useful if your code needs to do things differently depending on which\n    # experiment is running.\n    NAME = None  # Override in sub-classes\n\n    # NUMBER OF GPUs to use. For CPU training, use 1\n    GPU_COUNT = 1\n\n    # Number of images to train with on each GPU. A 12GB GPU can typically\n    # handle 2 images of 1024x1024px.\n    # Adjust based on your GPU memory and image sizes. Use the highest\n    # number that your GPU can handle for best performance.\n    IMAGES_PER_GPU = 2\n\n    # Number of training steps per epoch\n    # This doesn\'t need to match the size of the training set. Tensorboard\n    # updates are saved at the end of each epoch, so setting this to a\n    # smaller number means getting more frequent TensorBoard updates.\n    # Validation stats are also calculated at each epoch end and they\n    # might take a while, so don\'t set this too small to avoid spending\n    # a lot of time on validation stats.\n    STEPS_PER_EPOCH = 1000\n\n    # Number of validation steps to run at the end of every training epoch.\n    # A bigger number improves accuracy of validation stats, but slows\n    # down the training.\n    VALIDATION_STEPS = 50\n\n    # Backbone network architecture\n    # Supported values are: resnet50, resnet101.\n    # You can also provide a callable that should have the signature\n    # of model.resnet_graph. If you do so, you need to supply a callable\n    # to COMPUTE_BACKBONE_SHAPE as well\n    BACKBONE = ""resnet101""\n\n    # Only useful if you supply a callable to BACKBONE. Should compute\n    # the shape of each layer of the FPN Pyramid.\n    # See model.compute_backbone_shapes\n    COMPUTE_BACKBONE_SHAPE = None\n\n    # The strides of each layer of the FPN Pyramid. These values\n    # are based on a Resnet101 backbone.\n    BACKBONE_STRIDES = [4, 8, 16, 32, 64]\n\n    # Size of the fully-connected layers in the classification graph\n    FPN_CLASSIF_FC_LAYERS_SIZE = 1024\n\n    # Size of the top-down layers used to build the feature pyramid\n    TOP_DOWN_PYRAMID_SIZE = 256\n\n    # Number of classification classes (including background)\n    NUM_CLASSES = 1  # Override in sub-classes\n\n    # Length of square anchor side in pixels\n    RPN_ANCHOR_SCALES = (32, 64, 128, 256, 512)\n\n    # Ratios of anchors at each cell (width/height)\n    # A value of 1 represents a square anchor, and 0.5 is a wide anchor\n    RPN_ANCHOR_RATIOS = [0.5, 1, 2]\n\n    # Anchor stride\n    # If 1 then anchors are created for each cell in the backbone feature map.\n    # If 2, then anchors are created for every other cell, and so on.\n    RPN_ANCHOR_STRIDE = 1\n\n    # Non-max suppression threshold to filter RPN proposals.\n    # You can increase this during training to generate more propsals.\n    RPN_NMS_THRESHOLD = 0.7\n\n    # How many anchors per image to use for RPN training\n    RPN_TRAIN_ANCHORS_PER_IMAGE = 256\n\n    # ROIs kept after non-maximum suppression (training and inference)\n    POST_NMS_ROIS_TRAINING = 2000\n    POST_NMS_ROIS_INFERENCE = 1000\n\n    # If enabled, resizes instance masks to a smaller size to reduce\n    # memory load. Recommended when using high-resolution images.\n    USE_MINI_MASK = True\n    MINI_MASK_SHAPE = (56, 56)  # (height, width) of the mini-mask\n\n    # Input image resizing\n    # Generally, use the ""square"" resizing mode for training and predicting\n    # and it should work well in most cases. In this mode, images are scaled\n    # up such that the small side is = IMAGE_MIN_DIM, but ensuring that the\n    # scaling doesn\'t make the long side > IMAGE_MAX_DIM. Then the image is\n    # padded with zeros to make it a square so multiple images can be put\n    # in one batch.\n    # Available resizing modes:\n    # none:   No resizing or padding. Return the image unchanged.\n    # square: Resize and pad with zeros to get a square image\n    #         of size [max_dim, max_dim].\n    # pad64:  Pads width and height with zeros to make them multiples of 64.\n    #         If IMAGE_MIN_DIM or IMAGE_MIN_SCALE are not None, then it scales\n    #         up before padding. IMAGE_MAX_DIM is ignored in this mode.\n    #         The multiple of 64 is needed to ensure smooth scaling of feature\n    #         maps up and down the 6 levels of the FPN pyramid (2**6=64).\n    # crop:   Picks random crops from the image. First, scales the image based\n    #         on IMAGE_MIN_DIM and IMAGE_MIN_SCALE, then picks a random crop of\n    #         size IMAGE_MIN_DIM x IMAGE_MIN_DIM. Can be used in training only.\n    #         IMAGE_MAX_DIM is not used in this mode.\n    IMAGE_RESIZE_MODE = ""square""\n    IMAGE_MIN_DIM = 800\n    IMAGE_MAX_DIM = 1024\n    # Minimum scaling ratio. Checked after MIN_IMAGE_DIM and can force further\n    # up scaling. For example, if set to 2 then images are scaled up to double\n    # the width and height, or more, even if MIN_IMAGE_DIM doesn\'t require it.\n    # Howver, in \'square\' mode, it can be overruled by IMAGE_MAX_DIM.\n    IMAGE_MIN_SCALE = 0\n\n    # Image mean (RGB)\n    MEAN_PIXEL = np.array([123.7, 116.8, 103.9])\n\n    # Number of ROIs per image to feed to classifier/mask heads\n    # The Mask RCNN paper uses 512 but often the RPN doesn\'t generate\n    # enough positive proposals to fill this and keep a positive:negative\n    # ratio of 1:3. You can increase the number of proposals by adjusting\n    # the RPN NMS threshold.\n    TRAIN_ROIS_PER_IMAGE = 200\n\n    # Percent of positive ROIs used to train classifier/mask heads\n    ROI_POSITIVE_RATIO = 0.33\n\n    # Pooled ROIs\n    POOL_SIZE = 7\n    MASK_POOL_SIZE = 14\n\n    # Shape of output mask\n    # To change this you also need to change the neural network mask branch\n    MASK_SHAPE = [28, 28]\n\n    # Maximum number of ground truth instances to use in one image\n    MAX_GT_INSTANCES = 100\n\n    # Bounding box refinement standard deviation for RPN and final detections.\n    RPN_BBOX_STD_DEV = np.array([0.1, 0.1, 0.2, 0.2])\n    BBOX_STD_DEV = np.array([0.1, 0.1, 0.2, 0.2])\n\n    # Max number of final detections\n    DETECTION_MAX_INSTANCES = 100\n\n    # Minimum probability value to accept a detected instance\n    # ROIs below this threshold are skipped\n    DETECTION_MIN_CONFIDENCE = 0.7\n\n    # Non-maximum suppression threshold for detection\n    DETECTION_NMS_THRESHOLD = 0.3\n\n    # Learning rate and momentum\n    # The Mask RCNN paper uses lr=0.02, but on TensorFlow it causes\n    # weights to explode. Likely due to differences in optimizer\n    # implementation.\n    LEARNING_RATE = 0.001\n    LEARNING_MOMENTUM = 0.9\n\n    # Weight decay regularization\n    WEIGHT_DECAY = 0.0001\n\n    # Loss weights for more precise optimization.\n    # Can be used for R-CNN training setup.\n    LOSS_WEIGHTS = {\n        ""rpn_class_loss"": 1.,\n        ""rpn_bbox_loss"": 1.,\n        ""mrcnn_class_loss"": 1.,\n        ""mrcnn_bbox_loss"": 1.,\n        ""mrcnn_mask_loss"": 1.\n    }\n\n    # Use RPN ROIs or externally generated ROIs for training\n    # Keep this True for most situations. Set to False if you want to train\n    # the head branches on ROI generated by code rather than the ROIs from\n    # the RPN. For example, to debug the classifier head without having to\n    # train the RPN.\n    USE_RPN_ROIS = True\n\n    # Train or freeze batch normalization layers\n    #     None: Train BN layers. This is the normal mode\n    #     False: Freeze BN layers. Good when using a small batch size\n    #     True: (don\'t use). Set layer in training mode even when predicting\n    TRAIN_BN = False  # Defaulting to False since batch size is often small\n\n    # Gradient norm clipping\n    GRADIENT_CLIP_NORM = 5.0\n\n    def __init__(self):\n        """"""Set values of computed attributes.""""""\n        # Effective batch size\n        self.BATCH_SIZE = self.IMAGES_PER_GPU * self.GPU_COUNT\n\n        # Input image size\n        if self.IMAGE_RESIZE_MODE == ""crop"":\n            self.IMAGE_SHAPE = np.array([self.IMAGE_MIN_DIM, self.IMAGE_MIN_DIM, 3])\n        else:\n            self.IMAGE_SHAPE = np.array([self.IMAGE_MAX_DIM, self.IMAGE_MAX_DIM, 3])\n\n        # Image meta data length\n        # See compose_image_meta() for details\n        self.IMAGE_META_SIZE = 1 + 3 + 3 + 4 + 1 + self.NUM_CLASSES\n\n    def display(self):\n        """"""Display Configuration values.""""""\n        print(""\\nConfigurations:"")\n        for a in dir(self):\n            if not a.startswith(""__"") and not callable(getattr(self, a)):\n                print(""{:30} {}"".format(a, getattr(self, a)))\n        print(""\\n"")\n'"
mrcnn/model.py,124,"b'""""""\nMask R-CNN\nThe main Mask R-CNN model implementation.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n""""""\n\nimport os\nimport random\nimport datetime\nimport re\nimport math\nimport logging\nfrom collections import OrderedDict\nimport multiprocessing\nimport numpy as np\nimport skimage.transform\nimport tensorflow as tf\nimport keras\nimport keras.backend as K\nimport keras.layers as KL\nimport keras.engine as KE\nimport keras.models as KM\n\nfrom mrcnn import utils\n\n# Requires TensorFlow 1.3+ and Keras 2.0.8+.\nfrom distutils.version import LooseVersion\nassert LooseVersion(tf.__version__) >= LooseVersion(""1.3"")\nassert LooseVersion(keras.__version__) >= LooseVersion(\'2.0.8\')\n\n\n############################################################\n#  Utility Functions\n############################################################\n\ndef log(text, array=None):\n    """"""Prints a text message. And, optionally, if a Numpy array is provided it\n    prints it\'s shape, min, and max values.\n    """"""\n    if array is not None:\n        text = text.ljust(25)\n        text += (""shape: {:20}  min: {:10.5f}  max: {:10.5f}  {}"".format(\n            str(array.shape),\n            array.min() if array.size else """",\n            array.max() if array.size else """",\n            array.dtype))\n    print(text)\n\n\nclass BatchNorm(KL.BatchNormalization):\n    """"""Extends the Keras BatchNormalization class to allow a central place\n    to make changes if needed.\n\n    Batch normalization has a negative effect on training if batches are small\n    so this layer is often frozen (via setting in Config class) and functions\n    as linear layer.\n    """"""\n    def call(self, inputs, training=None):\n        """"""\n        Note about training values:\n            None: Train BN layers. This is the normal mode\n            False: Freeze BN layers. Good when batch size is small\n            True: (don\'t use). Set layer in training mode even when making inferences\n        """"""\n        return super(self.__class__, self).call(inputs, training=training)\n\n\ndef compute_backbone_shapes(config, image_shape):\n    """"""Computes the width and height of each stage of the backbone network.\n    \n    Returns:\n        [N, (height, width)]. Where N is the number of stages\n    """"""\n    if callable(config.BACKBONE):\n        return config.COMPUTE_BACKBONE_SHAPE(image_shape)\n\n    # Currently supports ResNet only\n    assert config.BACKBONE in [""resnet50"", ""resnet101""]\n    return np.array(\n        [[int(math.ceil(image_shape[0] / stride)),\n            int(math.ceil(image_shape[1] / stride))]\n            for stride in config.BACKBONE_STRIDES])\n\n\n############################################################\n#  Resnet Graph\n############################################################\n\n# Code adopted from:\n# https://github.com/fchollet/deep-learning-models/blob/master/resnet50.py\n\ndef identity_block(input_tensor, kernel_size, filters, stage, block,\n                   use_bias=True, train_bn=True):\n    """"""The identity_block is the block that has no conv layer at shortcut\n    # Arguments\n        input_tensor: input tensor\n        kernel_size: default 3, the kernel size of middle conv layer at main path\n        filters: list of integers, the nb_filters of 3 conv layer at main path\n        stage: integer, current stage label, used for generating layer names\n        block: \'a\',\'b\'..., current block label, used for generating layer names\n        use_bias: Boolean. To use or not use a bias in conv layers.\n        train_bn: Boolean. Train or freeze Batch Norm layers\n    """"""\n    nb_filter1, nb_filter2, nb_filter3 = filters\n    conv_name_base = \'res\' + str(stage) + block + \'_branch\'\n    bn_name_base = \'bn\' + str(stage) + block + \'_branch\'\n\n    x = KL.Conv2D(nb_filter1, (1, 1), name=conv_name_base + \'2a\',\n                  use_bias=use_bias)(input_tensor)\n    x = BatchNorm(name=bn_name_base + \'2a\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.Conv2D(nb_filter2, (kernel_size, kernel_size), padding=\'same\',\n                  name=conv_name_base + \'2b\', use_bias=use_bias)(x)\n    x = BatchNorm(name=bn_name_base + \'2b\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.Conv2D(nb_filter3, (1, 1), name=conv_name_base + \'2c\',\n                  use_bias=use_bias)(x)\n    x = BatchNorm(name=bn_name_base + \'2c\')(x, training=train_bn)\n\n    x = KL.Add()([x, input_tensor])\n    x = KL.Activation(\'relu\', name=\'res\' + str(stage) + block + \'_out\')(x)\n    return x\n\n\ndef conv_block(input_tensor, kernel_size, filters, stage, block,\n               strides=(2, 2), use_bias=True, train_bn=True):\n    """"""conv_block is the block that has a conv layer at shortcut\n    # Arguments\n        input_tensor: input tensor\n        kernel_size: default 3, the kernel size of middle conv layer at main path\n        filters: list of integers, the nb_filters of 3 conv layer at main path\n        stage: integer, current stage label, used for generating layer names\n        block: \'a\',\'b\'..., current block label, used for generating layer names\n        use_bias: Boolean. To use or not use a bias in conv layers.\n        train_bn: Boolean. Train or freeze Batch Norm layers\n    Note that from stage 3, the first conv layer at main path is with subsample=(2,2)\n    And the shortcut should have subsample=(2,2) as well\n    """"""\n    nb_filter1, nb_filter2, nb_filter3 = filters\n    conv_name_base = \'res\' + str(stage) + block + \'_branch\'\n    bn_name_base = \'bn\' + str(stage) + block + \'_branch\'\n\n    x = KL.Conv2D(nb_filter1, (1, 1), strides=strides,\n                  name=conv_name_base + \'2a\', use_bias=use_bias)(input_tensor)\n    x = BatchNorm(name=bn_name_base + \'2a\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.Conv2D(nb_filter2, (kernel_size, kernel_size), padding=\'same\',\n                  name=conv_name_base + \'2b\', use_bias=use_bias)(x)\n    x = BatchNorm(name=bn_name_base + \'2b\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.Conv2D(nb_filter3, (1, 1), name=conv_name_base +\n                  \'2c\', use_bias=use_bias)(x)\n    x = BatchNorm(name=bn_name_base + \'2c\')(x, training=train_bn)\n\n    shortcut = KL.Conv2D(nb_filter3, (1, 1), strides=strides,\n                         name=conv_name_base + \'1\', use_bias=use_bias)(input_tensor)\n    shortcut = BatchNorm(name=bn_name_base + \'1\')(shortcut, training=train_bn)\n\n    x = KL.Add()([x, shortcut])\n    x = KL.Activation(\'relu\', name=\'res\' + str(stage) + block + \'_out\')(x)\n    return x\n\n\ndef resnet_graph(input_image, architecture, stage5=False, train_bn=True):\n    """"""Build a ResNet graph.\n        architecture: Can be resnet50 or resnet101\n        stage5: Boolean. If False, stage5 of the network is not created\n        train_bn: Boolean. Train or freeze Batch Norm layers\n    """"""\n    assert architecture in [""resnet50"", ""resnet101""]\n    # Stage 1\n    x = KL.ZeroPadding2D((3, 3))(input_image)\n    x = KL.Conv2D(64, (7, 7), strides=(2, 2), name=\'conv1\', use_bias=True)(x)\n    x = BatchNorm(name=\'bn_conv1\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n    C1 = x = KL.MaxPooling2D((3, 3), strides=(2, 2), padding=""same"")(x)\n    # Stage 2\n    x = conv_block(x, 3, [64, 64, 256], stage=2, block=\'a\', strides=(1, 1), train_bn=train_bn)\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block=\'b\', train_bn=train_bn)\n    C2 = x = identity_block(x, 3, [64, 64, 256], stage=2, block=\'c\', train_bn=train_bn)\n    # Stage 3\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block=\'a\', train_bn=train_bn)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=\'b\', train_bn=train_bn)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=\'c\', train_bn=train_bn)\n    C3 = x = identity_block(x, 3, [128, 128, 512], stage=3, block=\'d\', train_bn=train_bn)\n    # Stage 4\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block=\'a\', train_bn=train_bn)\n    block_count = {""resnet50"": 5, ""resnet101"": 22}[architecture]\n    for i in range(block_count):\n        x = identity_block(x, 3, [256, 256, 1024], stage=4, block=chr(98 + i), train_bn=train_bn)\n    C4 = x\n    # Stage 5\n    if stage5:\n        x = conv_block(x, 3, [512, 512, 2048], stage=5, block=\'a\', train_bn=train_bn)\n        x = identity_block(x, 3, [512, 512, 2048], stage=5, block=\'b\', train_bn=train_bn)\n        C5 = x = identity_block(x, 3, [512, 512, 2048], stage=5, block=\'c\', train_bn=train_bn)\n    else:\n        C5 = None\n    return [C1, C2, C3, C4, C5]\n\n\n############################################################\n#  Proposal Layer\n############################################################\n\ndef apply_box_deltas_graph(boxes, deltas):\n    """"""Applies the given deltas to the given boxes.\n    boxes: [N, (y1, x1, y2, x2)] boxes to update\n    deltas: [N, (dy, dx, log(dh), log(dw))] refinements to apply\n    """"""\n    # Convert to y, x, h, w\n    height = boxes[:, 2] - boxes[:, 0]\n    width = boxes[:, 3] - boxes[:, 1]\n    center_y = boxes[:, 0] + 0.5 * height\n    center_x = boxes[:, 1] + 0.5 * width\n    # Apply deltas\n    center_y += deltas[:, 0] * height\n    center_x += deltas[:, 1] * width\n    height *= tf.exp(deltas[:, 2])\n    width *= tf.exp(deltas[:, 3])\n    # Convert back to y1, x1, y2, x2\n    y1 = center_y - 0.5 * height\n    x1 = center_x - 0.5 * width\n    y2 = y1 + height\n    x2 = x1 + width\n    result = tf.stack([y1, x1, y2, x2], axis=1, name=""apply_box_deltas_out"")\n    return result\n\n\ndef clip_boxes_graph(boxes, window):\n    """"""\n    boxes: [N, (y1, x1, y2, x2)]\n    window: [4] in the form y1, x1, y2, x2\n    """"""\n    # Split\n    wy1, wx1, wy2, wx2 = tf.split(window, 4)\n    y1, x1, y2, x2 = tf.split(boxes, 4, axis=1)\n    # Clip\n    y1 = tf.maximum(tf.minimum(y1, wy2), wy1)\n    x1 = tf.maximum(tf.minimum(x1, wx2), wx1)\n    y2 = tf.maximum(tf.minimum(y2, wy2), wy1)\n    x2 = tf.maximum(tf.minimum(x2, wx2), wx1)\n    clipped = tf.concat([y1, x1, y2, x2], axis=1, name=""clipped_boxes"")\n    clipped.set_shape((clipped.shape[0], 4))\n    return clipped\n\n\nclass ProposalLayer(KE.Layer):\n    """"""Receives anchor scores and selects a subset to pass as proposals\n    to the second stage. Filtering is done based on anchor scores and\n    non-max suppression to remove overlaps. It also applies bounding\n    box refinement deltas to anchors.\n\n    Inputs:\n        rpn_probs: [batch, anchors, (bg prob, fg prob)]\n        rpn_bbox: [batch, anchors, (dy, dx, log(dh), log(dw))]\n        anchors: [batch, (y1, x1, y2, x2)] anchors in normalized coordinates\n\n    Returns:\n        Proposals in normalized coordinates [batch, rois, (y1, x1, y2, x2)]\n    """"""\n\n    def __init__(self, proposal_count, nms_threshold, config=None, **kwargs):\n        super(ProposalLayer, self).__init__(**kwargs)\n        self.config = config\n        self.proposal_count = proposal_count\n        self.nms_threshold = nms_threshold\n\n    def call(self, inputs):\n        # Box Scores. Use the foreground class confidence. [Batch, num_rois, 1]\n        scores = inputs[0][:, :, 1]\n        # Box deltas [batch, num_rois, 4]\n        deltas = inputs[1]\n        deltas = deltas * np.reshape(self.config.RPN_BBOX_STD_DEV, [1, 1, 4])\n        # Anchors\n        anchors = inputs[2]\n\n        # Improve performance by trimming to top anchors by score\n        # and doing the rest on the smaller subset.\n        pre_nms_limit = tf.minimum(6000, tf.shape(anchors)[1])\n        ix = tf.nn.top_k(scores, pre_nms_limit, sorted=True,\n                         name=""top_anchors"").indices\n        scores = utils.batch_slice([scores, ix], lambda x, y: tf.gather(x, y),\n                                   self.config.IMAGES_PER_GPU)\n        deltas = utils.batch_slice([deltas, ix], lambda x, y: tf.gather(x, y),\n                                   self.config.IMAGES_PER_GPU)\n        pre_nms_anchors = utils.batch_slice([anchors, ix], lambda a, x: tf.gather(a, x),\n                                    self.config.IMAGES_PER_GPU,\n                                    names=[""pre_nms_anchors""])\n\n        # Apply deltas to anchors to get refined anchors.\n        # [batch, N, (y1, x1, y2, x2)]\n        boxes = utils.batch_slice([pre_nms_anchors, deltas],\n                                  lambda x, y: apply_box_deltas_graph(x, y),\n                                  self.config.IMAGES_PER_GPU,\n                                  names=[""refined_anchors""])\n\n        # Clip to image boundaries. Since we\'re in normalized coordinates,\n        # clip to 0..1 range. [batch, N, (y1, x1, y2, x2)]\n        window = np.array([0, 0, 1, 1], dtype=np.float32)\n        boxes = utils.batch_slice(boxes,\n                                  lambda x: clip_boxes_graph(x, window),\n                                  self.config.IMAGES_PER_GPU,\n                                  names=[""refined_anchors_clipped""])\n\n        # Filter out small boxes\n        # According to Xinlei Chen\'s paper, this reduces detection accuracy\n        # for small objects, so we\'re skipping it.\n\n        # Non-max suppression\n        def nms(boxes, scores):\n            indices = tf.image.non_max_suppression(\n                boxes, scores, self.proposal_count,\n                self.nms_threshold, name=""rpn_non_max_suppression"")\n            proposals = tf.gather(boxes, indices)\n            # Pad if needed\n            padding = tf.maximum(self.proposal_count - tf.shape(proposals)[0], 0)\n            proposals = tf.pad(proposals, [(0, padding), (0, 0)])\n            return proposals\n        proposals = utils.batch_slice([boxes, scores], nms,\n                                      self.config.IMAGES_PER_GPU)\n        return proposals\n\n    def compute_output_shape(self, input_shape):\n        return (None, self.proposal_count, 4)\n\n\n############################################################\n#  ROIAlign Layer\n############################################################\n\ndef log2_graph(x):\n    """"""Implementation of Log2. TF doesn\'t have a native implementation.""""""\n    return tf.log(x) / tf.log(2.0)\n\n\nclass PyramidROIAlign(KE.Layer):\n    """"""Implements ROI Pooling on multiple levels of the feature pyramid.\n\n    Params:\n    - pool_shape: [height, width] of the output pooled regions. Usually [7, 7]\n\n    Inputs:\n    - boxes: [batch, num_boxes, (y1, x1, y2, x2)] in normalized\n             coordinates. Possibly padded with zeros if not enough\n             boxes to fill the array.\n    - image_meta: [batch, (meta data)] Image details. See compose_image_meta()\n    - Feature maps: List of feature maps from different levels of the pyramid.\n                    Each is [batch, height, width, channels]\n\n    Output:\n    Pooled regions in the shape: [batch, num_boxes, height, width, channels].\n    The width and height are those specific in the pool_shape in the layer\n    constructor.\n    """"""\n\n    def __init__(self, pool_shape, **kwargs):\n        super(PyramidROIAlign, self).__init__(**kwargs)\n        self.pool_shape = tuple(pool_shape)\n\n    def call(self, inputs):\n        # Crop boxes [batch, num_boxes, (y1, x1, y2, x2)] in normalized coords\n        boxes = inputs[0]\n\n        # Image meta\n        # Holds details about the image. See compose_image_meta()\n        image_meta = inputs[1]\n\n        # Feature Maps. List of feature maps from different level of the\n        # feature pyramid. Each is [batch, height, width, channels]\n        feature_maps = inputs[2:]\n\n        # Assign each ROI to a level in the pyramid based on the ROI area.\n        y1, x1, y2, x2 = tf.split(boxes, 4, axis=2)\n        h = y2 - y1\n        w = x2 - x1\n        # Use shape of first image. Images in a batch must have the same size.\n        image_shape = parse_image_meta_graph(image_meta)[\'image_shape\'][0]\n        # Equation 1 in the Feature Pyramid Networks paper. Account for\n        # the fact that our coordinates are normalized here.\n        # e.g. a 224x224 ROI (in pixels) maps to P4\n        image_area = tf.cast(image_shape[0] * image_shape[1], tf.float32)\n        roi_level = log2_graph(tf.sqrt(h * w) / (224.0 / tf.sqrt(image_area)))\n        roi_level = tf.minimum(5, tf.maximum(\n            2, 4 + tf.cast(tf.round(roi_level), tf.int32)))\n        roi_level = tf.squeeze(roi_level, 2)\n\n        # Loop through levels and apply ROI pooling to each. P2 to P5.\n        pooled = []\n        box_to_level = []\n        for i, level in enumerate(range(2, 6)):\n            ix = tf.where(tf.equal(roi_level, level))\n            level_boxes = tf.gather_nd(boxes, ix)\n\n            # Box indices for crop_and_resize.\n            box_indices = tf.cast(ix[:, 0], tf.int32)\n\n            # Keep track of which box is mapped to which level\n            box_to_level.append(ix)\n\n            # Stop gradient propogation to ROI proposals\n            level_boxes = tf.stop_gradient(level_boxes)\n            box_indices = tf.stop_gradient(box_indices)\n\n            # Crop and Resize\n            # From Mask R-CNN paper: ""We sample four regular locations, so\n            # that we can evaluate either max or average pooling. In fact,\n            # interpolating only a single value at each bin center (without\n            # pooling) is nearly as effective.""\n            #\n            # Here we use the simplified approach of a single value per bin,\n            # which is how it\'s done in tf.crop_and_resize()\n            # Result: [batch * num_boxes, pool_height, pool_width, channels]\n            pooled.append(tf.image.crop_and_resize(\n                feature_maps[i], level_boxes, box_indices, self.pool_shape,\n                method=""bilinear""))\n\n        # Pack pooled features into one tensor\n        pooled = tf.concat(pooled, axis=0)\n\n        # Pack box_to_level mapping into one array and add another\n        # column representing the order of pooled boxes\n        box_to_level = tf.concat(box_to_level, axis=0)\n        box_range = tf.expand_dims(tf.range(tf.shape(box_to_level)[0]), 1)\n        box_to_level = tf.concat([tf.cast(box_to_level, tf.int32), box_range],\n                                 axis=1)\n\n        # Rearrange pooled features to match the order of the original boxes\n        # Sort box_to_level by batch then box index\n        # TF doesn\'t have a way to sort by two columns, so merge them and sort.\n        sorting_tensor = box_to_level[:, 0] * 100000 + box_to_level[:, 1]\n        ix = tf.nn.top_k(sorting_tensor, k=tf.shape(\n            box_to_level)[0]).indices[::-1]\n        ix = tf.gather(box_to_level[:, 2], ix)\n        pooled = tf.gather(pooled, ix)\n\n        # Re-add the batch dimension\n        pooled = tf.expand_dims(pooled, 0)\n        return pooled\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0][:2] + self.pool_shape + (input_shape[2][-1], )\n\n\n############################################################\n#  Detection Target Layer\n############################################################\n\ndef overlaps_graph(boxes1, boxes2):\n    """"""Computes IoU overlaps between two sets of boxes.\n    boxes1, boxes2: [N, (y1, x1, y2, x2)].\n    """"""\n    # 1. Tile boxes2 and repeat boxes1. This allows us to compare\n    # every boxes1 against every boxes2 without loops.\n    # TF doesn\'t have an equivalent to np.repeat() so simulate it\n    # using tf.tile() and tf.reshape.\n    b1 = tf.reshape(tf.tile(tf.expand_dims(boxes1, 1),\n                            [1, 1, tf.shape(boxes2)[0]]), [-1, 4])\n    b2 = tf.tile(boxes2, [tf.shape(boxes1)[0], 1])\n    # 2. Compute intersections\n    b1_y1, b1_x1, b1_y2, b1_x2 = tf.split(b1, 4, axis=1)\n    b2_y1, b2_x1, b2_y2, b2_x2 = tf.split(b2, 4, axis=1)\n    y1 = tf.maximum(b1_y1, b2_y1)\n    x1 = tf.maximum(b1_x1, b2_x1)\n    y2 = tf.minimum(b1_y2, b2_y2)\n    x2 = tf.minimum(b1_x2, b2_x2)\n    intersection = tf.maximum(x2 - x1, 0) * tf.maximum(y2 - y1, 0)\n    # 3. Compute unions\n    b1_area = (b1_y2 - b1_y1) * (b1_x2 - b1_x1)\n    b2_area = (b2_y2 - b2_y1) * (b2_x2 - b2_x1)\n    union = b1_area + b2_area - intersection\n    # 4. Compute IoU and reshape to [boxes1, boxes2]\n    iou = intersection / union\n    overlaps = tf.reshape(iou, [tf.shape(boxes1)[0], tf.shape(boxes2)[0]])\n    return overlaps\n\n\ndef detection_targets_graph(proposals, gt_class_ids, gt_boxes, gt_masks, config):\n    """"""Generates detection targets for one image. Subsamples proposals and\n    generates target class IDs, bounding box deltas, and masks for each.\n\n    Inputs:\n    proposals: [N, (y1, x1, y2, x2)] in normalized coordinates. Might\n               be zero padded if there are not enough proposals.\n    gt_class_ids: [MAX_GT_INSTANCES] int class IDs\n    gt_boxes: [MAX_GT_INSTANCES, (y1, x1, y2, x2)] in normalized coordinates.\n    gt_masks: [height, width, MAX_GT_INSTANCES] of boolean type.\n\n    Returns: Target ROIs and corresponding class IDs, bounding box shifts,\n    and masks.\n    rois: [TRAIN_ROIS_PER_IMAGE, (y1, x1, y2, x2)] in normalized coordinates\n    class_ids: [TRAIN_ROIS_PER_IMAGE]. Integer class IDs. Zero padded.\n    deltas: [TRAIN_ROIS_PER_IMAGE, NUM_CLASSES, (dy, dx, log(dh), log(dw))]\n            Class-specific bbox refinements.\n    masks: [TRAIN_ROIS_PER_IMAGE, height, width). Masks cropped to bbox\n           boundaries and resized to neural network output size.\n\n    Note: Returned arrays might be zero padded if not enough target ROIs.\n    """"""\n    # Assertions\n    asserts = [\n        tf.Assert(tf.greater(tf.shape(proposals)[0], 0), [proposals],\n                  name=""roi_assertion""),\n    ]\n    with tf.control_dependencies(asserts):\n        proposals = tf.identity(proposals)\n\n    # Remove zero padding\n    proposals, _ = trim_zeros_graph(proposals, name=""trim_proposals"")\n    gt_boxes, non_zeros = trim_zeros_graph(gt_boxes, name=""trim_gt_boxes"")\n    gt_class_ids = tf.boolean_mask(gt_class_ids, non_zeros,\n                                   name=""trim_gt_class_ids"")\n    gt_masks = tf.gather(gt_masks, tf.where(non_zeros)[:, 0], axis=2,\n                         name=""trim_gt_masks"")\n\n    # Handle COCO crowds\n    # A crowd box in COCO is a bounding box around several instances. Exclude\n    # them from training. A crowd box is given a negative class ID.\n    crowd_ix = tf.where(gt_class_ids < 0)[:, 0]\n    non_crowd_ix = tf.where(gt_class_ids > 0)[:, 0]\n    crowd_boxes = tf.gather(gt_boxes, crowd_ix)\n    crowd_masks = tf.gather(gt_masks, crowd_ix, axis=2)\n    gt_class_ids = tf.gather(gt_class_ids, non_crowd_ix)\n    gt_boxes = tf.gather(gt_boxes, non_crowd_ix)\n    gt_masks = tf.gather(gt_masks, non_crowd_ix, axis=2)\n\n    # Compute overlaps matrix [proposals, gt_boxes]\n    overlaps = overlaps_graph(proposals, gt_boxes)\n\n    # Compute overlaps with crowd boxes [anchors, crowds]\n    crowd_overlaps = overlaps_graph(proposals, crowd_boxes)\n    crowd_iou_max = tf.reduce_max(crowd_overlaps, axis=1)\n    no_crowd_bool = (crowd_iou_max < 0.001)\n\n    # Determine positive and negative ROIs\n    roi_iou_max = tf.reduce_max(overlaps, axis=1)\n    # 1. Positive ROIs are those with >= 0.5 IoU with a GT box\n    positive_roi_bool = (roi_iou_max >= 0.5)\n    positive_indices = tf.where(positive_roi_bool)[:, 0]\n    # 2. Negative ROIs are those with < 0.5 with every GT box. Skip crowds.\n    negative_indices = tf.where(tf.logical_and(roi_iou_max < 0.5, no_crowd_bool))[:, 0]\n\n    # Subsample ROIs. Aim for 33% positive\n    # Positive ROIs\n    positive_count = int(config.TRAIN_ROIS_PER_IMAGE *\n                         config.ROI_POSITIVE_RATIO)\n    positive_indices = tf.random_shuffle(positive_indices)[:positive_count]\n    positive_count = tf.shape(positive_indices)[0]\n    # Negative ROIs. Add enough to maintain positive:negative ratio.\n    r = 1.0 / config.ROI_POSITIVE_RATIO\n    negative_count = tf.cast(r * tf.cast(positive_count, tf.float32), tf.int32) - positive_count\n    negative_indices = tf.random_shuffle(negative_indices)[:negative_count]\n    # Gather selected ROIs\n    positive_rois = tf.gather(proposals, positive_indices)\n    negative_rois = tf.gather(proposals, negative_indices)\n\n    # Assign positive ROIs to GT boxes.\n    positive_overlaps = tf.gather(overlaps, positive_indices)\n    roi_gt_box_assignment = tf.cond(\n        tf.greater(tf.shape(positive_overlaps)[1], 0),\n        true_fn = lambda: tf.argmax(positive_overlaps, axis=1),\n        false_fn = lambda: tf.cast(tf.constant([]),tf.int64)\n    )\n    roi_gt_boxes = tf.gather(gt_boxes, roi_gt_box_assignment)\n    roi_gt_class_ids = tf.gather(gt_class_ids, roi_gt_box_assignment)\n\n    # Compute bbox refinement for positive ROIs\n    deltas = utils.box_refinement_graph(positive_rois, roi_gt_boxes)\n    deltas /= config.BBOX_STD_DEV\n\n    # Assign positive ROIs to GT masks\n    # Permute masks to [N, height, width, 1]\n    transposed_masks = tf.expand_dims(tf.transpose(gt_masks, [2, 0, 1]), -1)\n    # Pick the right mask for each ROI\n    roi_masks = tf.gather(transposed_masks, roi_gt_box_assignment)\n\n    # Compute mask targets\n    boxes = positive_rois\n    if config.USE_MINI_MASK:\n        # Transform ROI coordinates from normalized image space\n        # to normalized mini-mask space.\n        y1, x1, y2, x2 = tf.split(positive_rois, 4, axis=1)\n        gt_y1, gt_x1, gt_y2, gt_x2 = tf.split(roi_gt_boxes, 4, axis=1)\n        gt_h = gt_y2 - gt_y1\n        gt_w = gt_x2 - gt_x1\n        y1 = (y1 - gt_y1) / gt_h\n        x1 = (x1 - gt_x1) / gt_w\n        y2 = (y2 - gt_y1) / gt_h\n        x2 = (x2 - gt_x1) / gt_w\n        boxes = tf.concat([y1, x1, y2, x2], 1)\n    box_ids = tf.range(0, tf.shape(roi_masks)[0])\n    masks = tf.image.crop_and_resize(tf.cast(roi_masks, tf.float32), boxes,\n                                     box_ids,\n                                     config.MASK_SHAPE)\n    # Remove the extra dimension from masks.\n    masks = tf.squeeze(masks, axis=3)\n\n    # Threshold mask pixels at 0.5 to have GT masks be 0 or 1 to use with\n    # binary cross entropy loss.\n    masks = tf.round(masks)\n\n    # Append negative ROIs and pad bbox deltas and masks that\n    # are not used for negative ROIs with zeros.\n    rois = tf.concat([positive_rois, negative_rois], axis=0)\n    N = tf.shape(negative_rois)[0]\n    P = tf.maximum(config.TRAIN_ROIS_PER_IMAGE - tf.shape(rois)[0], 0)\n    rois = tf.pad(rois, [(0, P), (0, 0)])\n    roi_gt_boxes = tf.pad(roi_gt_boxes, [(0, N + P), (0, 0)])\n    roi_gt_class_ids = tf.pad(roi_gt_class_ids, [(0, N + P)])\n    deltas = tf.pad(deltas, [(0, N + P), (0, 0)])\n    masks = tf.pad(masks, [[0, N + P], (0, 0), (0, 0)])\n\n    return rois, roi_gt_class_ids, deltas, masks\n\n\nclass DetectionTargetLayer(KE.Layer):\n    """"""Subsamples proposals and generates target box refinement, class_ids,\n    and masks for each.\n\n    Inputs:\n    proposals: [batch, N, (y1, x1, y2, x2)] in normalized coordinates. Might\n               be zero padded if there are not enough proposals.\n    gt_class_ids: [batch, MAX_GT_INSTANCES] Integer class IDs.\n    gt_boxes: [batch, MAX_GT_INSTANCES, (y1, x1, y2, x2)] in normalized\n              coordinates.\n    gt_masks: [batch, height, width, MAX_GT_INSTANCES] of boolean type\n\n    Returns: Target ROIs and corresponding class IDs, bounding box shifts,\n    and masks.\n    rois: [batch, TRAIN_ROIS_PER_IMAGE, (y1, x1, y2, x2)] in normalized\n          coordinates\n    target_class_ids: [batch, TRAIN_ROIS_PER_IMAGE]. Integer class IDs.\n    target_deltas: [batch, TRAIN_ROIS_PER_IMAGE, NUM_CLASSES,\n                    (dy, dx, log(dh), log(dw), class_id)]\n                   Class-specific bbox refinements.\n    target_mask: [batch, TRAIN_ROIS_PER_IMAGE, height, width)\n                 Masks cropped to bbox boundaries and resized to neural\n                 network output size.\n\n    Note: Returned arrays might be zero padded if not enough target ROIs.\n    """"""\n\n    def __init__(self, config, **kwargs):\n        super(DetectionTargetLayer, self).__init__(**kwargs)\n        self.config = config\n\n    def call(self, inputs):\n        proposals = inputs[0]\n        gt_class_ids = inputs[1]\n        gt_boxes = inputs[2]\n        gt_masks = inputs[3]\n\n        # Slice the batch and run a graph for each slice\n        # TODO: Rename target_bbox to target_deltas for clarity\n        names = [""rois"", ""target_class_ids"", ""target_bbox"", ""target_mask""]\n        outputs = utils.batch_slice(\n            [proposals, gt_class_ids, gt_boxes, gt_masks],\n            lambda w, x, y, z: detection_targets_graph(\n                w, x, y, z, self.config),\n            self.config.IMAGES_PER_GPU, names=names)\n        return outputs\n\n    def compute_output_shape(self, input_shape):\n        return [\n            (None, self.config.TRAIN_ROIS_PER_IMAGE, 4),  # rois\n            (None, 1),  # class_ids\n            (None, self.config.TRAIN_ROIS_PER_IMAGE, 4),  # deltas\n            (None, self.config.TRAIN_ROIS_PER_IMAGE, self.config.MASK_SHAPE[0],\n             self.config.MASK_SHAPE[1])  # masks\n        ]\n\n    def compute_mask(self, inputs, mask=None):\n        return [None, None, None, None]\n\n\n############################################################\n#  Detection Layer\n############################################################\n\ndef refine_detections_graph(rois, probs, deltas, window, config):\n    """"""Refine classified proposals and filter overlaps and return final\n    detections.\n\n    Inputs:\n        rois: [N, (y1, x1, y2, x2)] in normalized coordinates\n        probs: [N, num_classes]. Class probabilities.\n        deltas: [N, num_classes, (dy, dx, log(dh), log(dw))]. Class-specific\n                bounding box deltas.\n        window: (y1, x1, y2, x2) in image coordinates. The part of the image\n            that contains the image excluding the padding.\n\n    Returns detections shaped: [N, (y1, x1, y2, x2, class_id, score)] where\n        coordinates are normalized.\n    """"""\n    # Class IDs per ROI\n    class_ids = tf.argmax(probs, axis=1, output_type=tf.int32)\n    # Class probability of the top class of each ROI\n    indices = tf.stack([tf.range(probs.shape[0]), class_ids], axis=1)\n    class_scores = tf.gather_nd(probs, indices)\n    # Class-specific bounding box deltas\n    deltas_specific = tf.gather_nd(deltas, indices)\n    # Apply bounding box deltas\n    # Shape: [boxes, (y1, x1, y2, x2)] in normalized coordinates\n    refined_rois = apply_box_deltas_graph(\n        rois, deltas_specific * config.BBOX_STD_DEV)\n    # Clip boxes to image window\n    refined_rois = clip_boxes_graph(refined_rois, window)\n\n    # TODO: Filter out boxes with zero area\n\n    # Filter out background boxes\n    keep = tf.where(class_ids > 0)[:, 0]\n    # Filter out low confidence boxes\n    if config.DETECTION_MIN_CONFIDENCE:\n        conf_keep = tf.where(class_scores >= config.DETECTION_MIN_CONFIDENCE)[:, 0]\n        keep = tf.sets.set_intersection(tf.expand_dims(keep, 0),\n                                        tf.expand_dims(conf_keep, 0))\n        keep = tf.sparse_tensor_to_dense(keep)[0]\n\n    # Apply per-class NMS\n    # 1. Prepare variables\n    pre_nms_class_ids = tf.gather(class_ids, keep)\n    pre_nms_scores = tf.gather(class_scores, keep)\n    pre_nms_rois = tf.gather(refined_rois,   keep)\n    unique_pre_nms_class_ids = tf.unique(pre_nms_class_ids)[0]\n\n    def nms_keep_map(class_id):\n        """"""Apply Non-Maximum Suppression on ROIs of the given class.""""""\n        # Indices of ROIs of the given class\n        ixs = tf.where(tf.equal(pre_nms_class_ids, class_id))[:, 0]\n        # Apply NMS\n        class_keep = tf.image.non_max_suppression(\n                tf.gather(pre_nms_rois, ixs),\n                tf.gather(pre_nms_scores, ixs),\n                max_output_size=config.DETECTION_MAX_INSTANCES,\n                iou_threshold=config.DETECTION_NMS_THRESHOLD)\n        # Map indices\n        class_keep = tf.gather(keep, tf.gather(ixs, class_keep))\n        # Pad with -1 so returned tensors have the same shape\n        gap = config.DETECTION_MAX_INSTANCES - tf.shape(class_keep)[0]\n        class_keep = tf.pad(class_keep, [(0, gap)],\n                            mode=\'CONSTANT\', constant_values=-1)\n        # Set shape so map_fn() can infer result shape\n        class_keep.set_shape([config.DETECTION_MAX_INSTANCES])\n        return class_keep\n\n    # 2. Map over class IDs\n    nms_keep = tf.map_fn(nms_keep_map, unique_pre_nms_class_ids,\n                         dtype=tf.int64)\n    # 3. Merge results into one list, and remove -1 padding\n    nms_keep = tf.reshape(nms_keep, [-1])\n    nms_keep = tf.gather(nms_keep, tf.where(nms_keep > -1)[:, 0])\n    # 4. Compute intersection between keep and nms_keep\n    keep = tf.sets.set_intersection(tf.expand_dims(keep, 0),\n                                    tf.expand_dims(nms_keep, 0))\n    keep = tf.sparse_tensor_to_dense(keep)[0]\n    # Keep top detections\n    roi_count = config.DETECTION_MAX_INSTANCES\n    class_scores_keep = tf.gather(class_scores, keep)\n    num_keep = tf.minimum(tf.shape(class_scores_keep)[0], roi_count)\n    top_ids = tf.nn.top_k(class_scores_keep, k=num_keep, sorted=True)[1]\n    keep = tf.gather(keep, top_ids)\n\n    # Arrange output as [N, (y1, x1, y2, x2, class_id, score)]\n    # Coordinates are normalized.\n    detections = tf.concat([\n        tf.gather(refined_rois, keep),\n        tf.to_float(tf.gather(class_ids, keep))[..., tf.newaxis],\n        tf.gather(class_scores, keep)[..., tf.newaxis]\n        ], axis=1)\n\n    # Pad with zeros if detections < DETECTION_MAX_INSTANCES\n    gap = config.DETECTION_MAX_INSTANCES - tf.shape(detections)[0]\n    detections = tf.pad(detections, [(0, gap), (0, 0)], ""CONSTANT"")\n    return detections\n\n\nclass DetectionLayer(KE.Layer):\n    """"""Takes classified proposal boxes and their bounding box deltas and\n    returns the final detection boxes.\n\n    Returns:\n    [batch, num_detections, (y1, x1, y2, x2, class_id, class_score)] where\n    coordinates are normalized.\n    """"""\n\n    def __init__(self, config=None, **kwargs):\n        super(DetectionLayer, self).__init__(**kwargs)\n        self.config = config\n\n    def call(self, inputs):\n        rois = inputs[0]\n        mrcnn_class = inputs[1]\n        mrcnn_bbox = inputs[2]\n        image_meta = inputs[3]\n\n        # Get windows of images in normalized coordinates. Windows are the area\n        # in the image that excludes the padding.\n        # Use the shape of the first image in the batch to normalize the window\n        # because we know that all images get resized to the same size.\n        m = parse_image_meta_graph(image_meta)\n        image_shape = m[\'image_shape\'][0]\n        window = norm_boxes_graph(m[\'window\'], image_shape[:2])\n        \n        # Run detection refinement graph on each item in the batch\n        detections_batch = utils.batch_slice(\n            [rois, mrcnn_class, mrcnn_bbox, window],\n            lambda x, y, w, z: refine_detections_graph(x, y, w, z, self.config),\n            self.config.IMAGES_PER_GPU)\n\n        # Reshape output\n        # [batch, num_detections, (y1, x1, y2, x2, class_score)] in\n        # normalized coordinates\n        return tf.reshape(\n            detections_batch,\n            [self.config.BATCH_SIZE, self.config.DETECTION_MAX_INSTANCES, 6])\n\n    def compute_output_shape(self, input_shape):\n        return (None, self.config.DETECTION_MAX_INSTANCES, 6)\n\n\n############################################################\n#  Region Proposal Network (RPN)\n############################################################\n\ndef rpn_graph(feature_map, anchors_per_location, anchor_stride):\n    """"""Builds the computation graph of Region Proposal Network.\n\n    feature_map: backbone features [batch, height, width, depth]\n    anchors_per_location: number of anchors per pixel in the feature map\n    anchor_stride: Controls the density of anchors. Typically 1 (anchors for\n                   every pixel in the feature map), or 2 (every other pixel).\n\n    Returns:\n        rpn_logits: [batch, H, W, 2] Anchor classifier logits (before softmax)\n        rpn_probs: [batch, H, W, 2] Anchor classifier probabilities.\n        rpn_bbox: [batch, H, W, (dy, dx, log(dh), log(dw))] Deltas to be\n                  applied to anchors.\n    """"""\n    # TODO: check if stride of 2 causes alignment issues if the feature map\n    # is not even.\n    # Shared convolutional base of the RPN\n    shared = KL.Conv2D(512, (3, 3), padding=\'same\', activation=\'relu\',\n                       strides=anchor_stride,\n                       name=\'rpn_conv_shared\')(feature_map)\n\n    # Anchor Score. [batch, height, width, anchors per location * 2].\n    x = KL.Conv2D(2 * anchors_per_location, (1, 1), padding=\'valid\',\n                  activation=\'linear\', name=\'rpn_class_raw\')(shared)\n\n    # Reshape to [batch, anchors, 2]\n    rpn_class_logits = KL.Lambda(\n        lambda t: tf.reshape(t, [tf.shape(t)[0], -1, 2]))(x)\n\n    # Softmax on last dimension of BG/FG.\n    rpn_probs = KL.Activation(\n        ""softmax"", name=""rpn_class_xxx"")(rpn_class_logits)\n\n    # Bounding box refinement. [batch, H, W, anchors per location, depth]\n    # where depth is [x, y, log(w), log(h)]\n    x = KL.Conv2D(anchors_per_location * 4, (1, 1), padding=""valid"",\n                  activation=\'linear\', name=\'rpn_bbox_pred\')(shared)\n\n    # Reshape to [batch, anchors, 4]\n    rpn_bbox = KL.Lambda(lambda t: tf.reshape(t, [tf.shape(t)[0], -1, 4]))(x)\n\n    return [rpn_class_logits, rpn_probs, rpn_bbox]\n\n\ndef build_rpn_model(anchor_stride, anchors_per_location, depth):\n    """"""Builds a Keras model of the Region Proposal Network.\n    It wraps the RPN graph so it can be used multiple times with shared\n    weights.\n\n    anchors_per_location: number of anchors per pixel in the feature map\n    anchor_stride: Controls the density of anchors. Typically 1 (anchors for\n                   every pixel in the feature map), or 2 (every other pixel).\n    depth: Depth of the backbone feature map.\n\n    Returns a Keras Model object. The model outputs, when called, are:\n    rpn_logits: [batch, H, W, 2] Anchor classifier logits (before softmax)\n    rpn_probs: [batch, W, W, 2] Anchor classifier probabilities.\n    rpn_bbox: [batch, H, W, (dy, dx, log(dh), log(dw))] Deltas to be\n                applied to anchors.\n    """"""\n    input_feature_map = KL.Input(shape=[None, None, depth],\n                                 name=""input_rpn_feature_map"")\n    outputs = rpn_graph(input_feature_map, anchors_per_location, anchor_stride)\n    return KM.Model([input_feature_map], outputs, name=""rpn_model"")\n\n\n############################################################\n#  Feature Pyramid Network Heads\n############################################################\n\ndef fpn_classifier_graph(rois, feature_maps, image_meta,\n                         pool_size, num_classes, train_bn=True,\n                         fc_layers_size=1024):\n    """"""Builds the computation graph of the feature pyramid network classifier\n    and regressor heads.\n\n    rois: [batch, num_rois, (y1, x1, y2, x2)] Proposal boxes in normalized\n          coordinates.\n    feature_maps: List of feature maps from different layers of the pyramid,\n                  [P2, P3, P4, P5]. Each has a different resolution.\n    - image_meta: [batch, (meta data)] Image details. See compose_image_meta()\n    pool_size: The width of the square feature map generated from ROI Pooling.\n    num_classes: number of classes, which determines the depth of the results\n    train_bn: Boolean. Train or freeze Batch Norm layers\n    fc_layers_size: Size of the 2 FC layers\n\n    Returns:\n        logits: [N, NUM_CLASSES] classifier logits (before softmax)\n        probs: [N, NUM_CLASSES] classifier probabilities\n        bbox_deltas: [N, (dy, dx, log(dh), log(dw))] Deltas to apply to\n                     proposal boxes\n    """"""\n    # ROI Pooling\n    # Shape: [batch, num_boxes, pool_height, pool_width, channels]\n    x = PyramidROIAlign([pool_size, pool_size],\n                        name=""roi_align_classifier"")([rois, image_meta] + feature_maps)\n    # Two 1024 FC layers (implemented with Conv2D for consistency)\n    x = KL.TimeDistributed(KL.Conv2D(fc_layers_size, (pool_size, pool_size), padding=""valid""),\n                           name=""mrcnn_class_conv1"")(x)\n    x = KL.TimeDistributed(BatchNorm(), name=\'mrcnn_class_bn1\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n    x = KL.TimeDistributed(KL.Conv2D(fc_layers_size, (1, 1)),\n                           name=""mrcnn_class_conv2"")(x)\n    x = KL.TimeDistributed(BatchNorm(), name=\'mrcnn_class_bn2\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    shared = KL.Lambda(lambda x: K.squeeze(K.squeeze(x, 3), 2),\n                       name=""pool_squeeze"")(x)\n\n    # Classifier head\n    mrcnn_class_logits = KL.TimeDistributed(KL.Dense(num_classes),\n                                            name=\'mrcnn_class_logits\')(shared)\n    mrcnn_probs = KL.TimeDistributed(KL.Activation(""softmax""),\n                                     name=""mrcnn_class"")(mrcnn_class_logits)\n\n    # BBox head\n    # [batch, boxes, num_classes * (dy, dx, log(dh), log(dw))]\n    x = KL.TimeDistributed(KL.Dense(num_classes * 4, activation=\'linear\'),\n                           name=\'mrcnn_bbox_fc\')(shared)\n    # Reshape to [batch, boxes, num_classes, (dy, dx, log(dh), log(dw))]\n    s = K.int_shape(x)\n    mrcnn_bbox = KL.Reshape((s[1], num_classes, 4), name=""mrcnn_bbox"")(x)\n\n    return mrcnn_class_logits, mrcnn_probs, mrcnn_bbox\n\n\ndef build_fpn_mask_graph(rois, feature_maps, image_meta,\n                         pool_size, num_classes, train_bn=True):\n    """"""Builds the computation graph of the mask head of Feature Pyramid Network.\n\n    rois: [batch, num_rois, (y1, x1, y2, x2)] Proposal boxes in normalized\n          coordinates.\n    feature_maps: List of feature maps from different layers of the pyramid,\n                  [P2, P3, P4, P5]. Each has a different resolution.\n    image_meta: [batch, (meta data)] Image details. See compose_image_meta()\n    pool_size: The width of the square feature map generated from ROI Pooling.\n    num_classes: number of classes, which determines the depth of the results\n    train_bn: Boolean. Train or freeze Batch Norm layers\n\n    Returns: Masks [batch, roi_count, height, width, num_classes]\n    """"""\n    # ROI Pooling\n    # Shape: [batch, boxes, pool_height, pool_width, channels]\n    x = PyramidROIAlign([pool_size, pool_size],\n                        name=""roi_align_mask"")([rois, image_meta] + feature_maps)\n\n    # Conv layers\n    x = KL.TimeDistributed(KL.Conv2D(256, (3, 3), padding=""same""),\n                           name=""mrcnn_mask_conv1"")(x)\n    x = KL.TimeDistributed(BatchNorm(),\n                           name=\'mrcnn_mask_bn1\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.TimeDistributed(KL.Conv2D(256, (3, 3), padding=""same""),\n                           name=""mrcnn_mask_conv2"")(x)\n    x = KL.TimeDistributed(BatchNorm(),\n                           name=\'mrcnn_mask_bn2\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.TimeDistributed(KL.Conv2D(256, (3, 3), padding=""same""),\n                           name=""mrcnn_mask_conv3"")(x)\n    x = KL.TimeDistributed(BatchNorm(),\n                           name=\'mrcnn_mask_bn3\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.TimeDistributed(KL.Conv2D(256, (3, 3), padding=""same""),\n                           name=""mrcnn_mask_conv4"")(x)\n    x = KL.TimeDistributed(BatchNorm(),\n                           name=\'mrcnn_mask_bn4\')(x, training=train_bn)\n    x = KL.Activation(\'relu\')(x)\n\n    x = KL.TimeDistributed(KL.Conv2DTranspose(256, (2, 2), strides=2, activation=""relu""),\n                           name=""mrcnn_mask_deconv"")(x)\n    x = KL.TimeDistributed(KL.Conv2D(num_classes, (1, 1), strides=1, activation=""sigmoid""),\n                           name=""mrcnn_mask"")(x)\n    return x\n\n\n############################################################\n#  Loss Functions\n############################################################\n\ndef smooth_l1_loss(y_true, y_pred):\n    """"""Implements Smooth-L1 loss.\n    y_true and y_pred are typically: [N, 4], but could be any shape.\n    """"""\n    diff = K.abs(y_true - y_pred)\n    less_than_one = K.cast(K.less(diff, 1.0), ""float32"")\n    loss = (less_than_one * 0.5 * diff**2) + (1 - less_than_one) * (diff - 0.5)\n    return loss\n\n\ndef rpn_class_loss_graph(rpn_match, rpn_class_logits):\n    """"""RPN anchor classifier loss.\n\n    rpn_match: [batch, anchors, 1]. Anchor match type. 1=positive,\n               -1=negative, 0=neutral anchor.\n    rpn_class_logits: [batch, anchors, 2]. RPN classifier logits for FG/BG.\n    """"""\n    # Squeeze last dim to simplify\n    rpn_match = tf.squeeze(rpn_match, -1)\n    # Get anchor classes. Convert the -1/+1 match to 0/1 values.\n    anchor_class = K.cast(K.equal(rpn_match, 1), tf.int32)\n    # Positive and Negative anchors contribute to the loss,\n    # but neutral anchors (match value = 0) don\'t.\n    indices = tf.where(K.not_equal(rpn_match, 0))\n    # Pick rows that contribute to the loss and filter out the rest.\n    rpn_class_logits = tf.gather_nd(rpn_class_logits, indices)\n    anchor_class = tf.gather_nd(anchor_class, indices)\n    # Cross entropy loss\n    loss = K.sparse_categorical_crossentropy(target=anchor_class,\n                                             output=rpn_class_logits,\n                                             from_logits=True)\n    loss = K.switch(tf.size(loss) > 0, K.mean(loss), tf.constant(0.0))\n    return loss\n\n\ndef rpn_bbox_loss_graph(config, target_bbox, rpn_match, rpn_bbox):\n    """"""Return the RPN bounding box loss graph.\n\n    config: the model config object.\n    target_bbox: [batch, max positive anchors, (dy, dx, log(dh), log(dw))].\n        Uses 0 padding to fill in unsed bbox deltas.\n    rpn_match: [batch, anchors, 1]. Anchor match type. 1=positive,\n               -1=negative, 0=neutral anchor.\n    rpn_bbox: [batch, anchors, (dy, dx, log(dh), log(dw))]\n    """"""\n    # Positive anchors contribute to the loss, but negative and\n    # neutral anchors (match value of 0 or -1) don\'t.\n    rpn_match = K.squeeze(rpn_match, -1)\n    indices = tf.where(K.equal(rpn_match, 1))\n\n    # Pick bbox deltas that contribute to the loss\n    rpn_bbox = tf.gather_nd(rpn_bbox, indices)\n\n    # Trim target bounding box deltas to the same length as rpn_bbox.\n    batch_counts = K.sum(K.cast(K.equal(rpn_match, 1), tf.int32), axis=1)\n    target_bbox = batch_pack_graph(target_bbox, batch_counts,\n                                   config.IMAGES_PER_GPU)\n\n    # TODO: use smooth_l1_loss() rather than reimplementing here\n    #       to reduce code duplication\n    diff = K.abs(target_bbox - rpn_bbox)\n    less_than_one = K.cast(K.less(diff, 1.0), ""float32"")\n    loss = (less_than_one * 0.5 * diff**2) + (1 - less_than_one) * (diff - 0.5)\n\n    loss = K.switch(tf.size(loss) > 0, K.mean(loss), tf.constant(0.0))\n    return loss\n\n\ndef mrcnn_class_loss_graph(target_class_ids, pred_class_logits,\n                           active_class_ids):\n    """"""Loss for the classifier head of Mask RCNN.\n\n    target_class_ids: [batch, num_rois]. Integer class IDs. Uses zero\n        padding to fill in the array.\n    pred_class_logits: [batch, num_rois, num_classes]\n    active_class_ids: [batch, num_classes]. Has a value of 1 for\n        classes that are in the dataset of the image, and 0\n        for classes that are not in the dataset.\n    """"""\n    # During model building, Keras calls this function with\n    # target_class_ids of type float32. Unclear why. Cast it\n    # to int to get around it.\n    target_class_ids = tf.cast(target_class_ids, \'int64\')\n\n    # Find predictions of classes that are not in the dataset.\n    pred_class_ids = tf.argmax(pred_class_logits, axis=2)\n    # TODO: Update this line to work with batch > 1. Right now it assumes all\n    #       images in a batch have the same active_class_ids\n    pred_active = tf.gather(active_class_ids[0], pred_class_ids)\n\n    # Loss\n    loss = tf.nn.sparse_softmax_cross_entropy_with_logits(\n        labels=target_class_ids, logits=pred_class_logits)\n\n    # Erase losses of predictions of classes that are not in the active\n    # classes of the image.\n    loss = loss * pred_active\n\n    # Computer loss mean. Use only predictions that contribute\n    # to the loss to get a correct mean.\n    loss = tf.reduce_sum(loss) / tf.reduce_sum(pred_active)\n    return loss\n\n\ndef mrcnn_bbox_loss_graph(target_bbox, target_class_ids, pred_bbox):\n    """"""Loss for Mask R-CNN bounding box refinement.\n\n    target_bbox: [batch, num_rois, (dy, dx, log(dh), log(dw))]\n    target_class_ids: [batch, num_rois]. Integer class IDs.\n    pred_bbox: [batch, num_rois, num_classes, (dy, dx, log(dh), log(dw))]\n    """"""\n    # Reshape to merge batch and roi dimensions for simplicity.\n    target_class_ids = K.reshape(target_class_ids, (-1,))\n    target_bbox = K.reshape(target_bbox, (-1, 4))\n    pred_bbox = K.reshape(pred_bbox, (-1, K.int_shape(pred_bbox)[2], 4))\n\n    # Only positive ROIs contribute to the loss. And only\n    # the right class_id of each ROI. Get their indices.\n    positive_roi_ix = tf.where(target_class_ids > 0)[:, 0]\n    positive_roi_class_ids = tf.cast(\n        tf.gather(target_class_ids, positive_roi_ix), tf.int64)\n    indices = tf.stack([positive_roi_ix, positive_roi_class_ids], axis=1)\n\n    # Gather the deltas (predicted and true) that contribute to loss\n    target_bbox = tf.gather(target_bbox, positive_roi_ix)\n    pred_bbox = tf.gather_nd(pred_bbox, indices)\n\n    # Smooth-L1 Loss\n    loss = K.switch(tf.size(target_bbox) > 0,\n                    smooth_l1_loss(y_true=target_bbox, y_pred=pred_bbox),\n                    tf.constant(0.0))\n    loss = K.mean(loss)\n    return loss\n\n\ndef mrcnn_mask_loss_graph(target_masks, target_class_ids, pred_masks):\n    """"""Mask binary cross-entropy loss for the masks head.\n\n    target_masks: [batch, num_rois, height, width].\n        A float32 tensor of values 0 or 1. Uses zero padding to fill array.\n    target_class_ids: [batch, num_rois]. Integer class IDs. Zero padded.\n    pred_masks: [batch, proposals, height, width, num_classes] float32 tensor\n                with values from 0 to 1.\n    """"""\n    # Reshape for simplicity. Merge first two dimensions into one.\n    target_class_ids = K.reshape(target_class_ids, (-1,))\n    mask_shape = tf.shape(target_masks)\n    target_masks = K.reshape(target_masks, (-1, mask_shape[2], mask_shape[3]))\n    pred_shape = tf.shape(pred_masks)\n    pred_masks = K.reshape(pred_masks,\n                           (-1, pred_shape[2], pred_shape[3], pred_shape[4]))\n    # Permute predicted masks to [N, num_classes, height, width]\n    pred_masks = tf.transpose(pred_masks, [0, 3, 1, 2])\n\n    # Only positive ROIs contribute to the loss. And only\n    # the class specific mask of each ROI.\n    positive_ix = tf.where(target_class_ids > 0)[:, 0]\n    positive_class_ids = tf.cast(\n        tf.gather(target_class_ids, positive_ix), tf.int64)\n    indices = tf.stack([positive_ix, positive_class_ids], axis=1)\n\n    # Gather the masks (predicted and true) that contribute to loss\n    y_true = tf.gather(target_masks, positive_ix)\n    y_pred = tf.gather_nd(pred_masks, indices)\n\n    # Compute binary cross entropy. If no positive ROIs, then return 0.\n    # shape: [batch, roi, num_classes]\n    loss = K.switch(tf.size(y_true) > 0,\n                    K.binary_crossentropy(target=y_true, output=y_pred),\n                    tf.constant(0.0))\n    loss = K.mean(loss)\n    return loss\n\n\n############################################################\n#  Data Generator\n############################################################\n\ndef load_image_gt(dataset, config, image_id, augment=False, augmentation=None,\n                  use_mini_mask=False):\n    """"""Load and return ground truth data for an image (image, mask, bounding boxes).\n\n    augment: (deprecated. Use augmentation instead). If true, apply random\n        image augmentation. Currently, only horizontal flipping is offered.\n    augmentation: Optional. An imgaug (https://github.com/aleju/imgaug) augmentation.\n        For example, passing imgaug.augmenters.Fliplr(0.5) flips images\n        right/left 50% of the time.\n    use_mini_mask: If False, returns full-size masks that are the same height\n        and width as the original image. These can be big, for example\n        1024x1024x100 (for 100 instances). Mini masks are smaller, typically,\n        224x224 and are generated by extracting the bounding box of the\n        object and resizing it to MINI_MASK_SHAPE.\n\n    Returns:\n    image: [height, width, 3]\n    shape: the original shape of the image before resizing and cropping.\n    class_ids: [instance_count] Integer class IDs\n    bbox: [instance_count, (y1, x1, y2, x2)]\n    mask: [height, width, instance_count]. The height and width are those\n        of the image unless use_mini_mask is True, in which case they are\n        defined in MINI_MASK_SHAPE.\n    """"""\n    # Load image and mask\n    image = dataset.load_image(image_id)\n    mask, class_ids = dataset.load_mask(image_id)\n    original_shape = image.shape\n    image, window, scale, padding, crop = utils.resize_image(\n        image,\n        min_dim=config.IMAGE_MIN_DIM,\n        min_scale=config.IMAGE_MIN_SCALE,\n        max_dim=config.IMAGE_MAX_DIM,\n        mode=config.IMAGE_RESIZE_MODE)\n    mask = utils.resize_mask(mask, scale, padding, crop)\n\n    # Random horizontal flips.\n    # TODO: will be removed in a future update in favor of augmentation\n    if augment:\n        logging.warning(""\'augment\' is deprecated. Use \'augmentation\' instead."")\n        if random.randint(0, 1):\n            image = np.fliplr(image)\n            mask = np.fliplr(mask)\n\n    # Augmentation\n    # This requires the imgaug lib (https://github.com/aleju/imgaug)\n    if augmentation:\n        import imgaug\n\n        # Augmenters that are safe to apply to masks\n        # Some, such as Affine, have settings that make them unsafe, so always\n        # test your augmentation on masks\n        MASK_AUGMENTERS = [""Sequential"", ""SomeOf"", ""OneOf"", ""Sometimes"",\n                           ""Fliplr"", ""Flipud"", ""CropAndPad"",\n                           ""Affine"", ""PiecewiseAffine""]\n\n        def hook(images, augmenter, parents, default):\n            """"""Determines which augmenters to apply to masks.""""""\n            return augmenter.__class__.__name__ in MASK_AUGMENTERS\n\n        # Store shapes before augmentation to compare\n        image_shape = image.shape\n        mask_shape = mask.shape\n        # Make augmenters deterministic to apply similarly to images and masks\n        det = augmentation.to_deterministic()\n        image = det.augment_image(image)\n        # Change mask to np.uint8 because imgaug doesn\'t support np.bool\n        mask = det.augment_image(mask.astype(np.uint8),\n                                 hooks=imgaug.HooksImages(activator=hook))\n        # Verify that shapes didn\'t change\n        assert image.shape == image_shape, ""Augmentation shouldn\'t change image size""\n        assert mask.shape == mask_shape, ""Augmentation shouldn\'t change mask size""\n        # Change mask back to bool\n        mask = mask.astype(np.bool)\n\n    # Note that some boxes might be all zeros if the corresponding mask got cropped out.\n    # and here is to filter them out\n    _idx = np.sum(mask, axis=(0, 1)) > 0\n    mask = mask[:, :, _idx]\n    class_ids = class_ids[_idx]\n    # Bounding boxes. Note that some boxes might be all zeros\n    # if the corresponding mask got cropped out.\n    # bbox: [num_instances, (y1, x1, y2, x2)]\n    bbox = utils.extract_bboxes(mask)\n\n    # Active classes\n    # Different datasets have different classes, so track the\n    # classes supported in the dataset of this image.\n    active_class_ids = np.zeros([dataset.num_classes], dtype=np.int32)\n    source_class_ids = dataset.source_class_ids[dataset.image_info[image_id][""source""]]\n    active_class_ids[source_class_ids] = 1\n\n    # Resize masks to smaller size to reduce memory usage\n    if use_mini_mask:\n        mask = utils.minimize_mask(bbox, mask, config.MINI_MASK_SHAPE)\n\n    # Image meta data\n    image_meta = compose_image_meta(image_id, original_shape, image.shape,\n                                    window, scale, active_class_ids)\n\n    return image, image_meta, class_ids, bbox, mask\n\n\ndef build_detection_targets(rpn_rois, gt_class_ids, gt_boxes, gt_masks, config):\n    """"""Generate targets for training Stage 2 classifier and mask heads.\n    This is not used in normal training. It\'s useful for debugging or to train\n    the Mask RCNN heads without using the RPN head.\n\n    Inputs:\n    rpn_rois: [N, (y1, x1, y2, x2)] proposal boxes.\n    gt_class_ids: [instance count] Integer class IDs\n    gt_boxes: [instance count, (y1, x1, y2, x2)]\n    gt_masks: [height, width, instance count] Ground truth masks. Can be full\n              size or mini-masks.\n\n    Returns:\n    rois: [TRAIN_ROIS_PER_IMAGE, (y1, x1, y2, x2)]\n    class_ids: [TRAIN_ROIS_PER_IMAGE]. Integer class IDs.\n    bboxes: [TRAIN_ROIS_PER_IMAGE, NUM_CLASSES, (y, x, log(h), log(w))]. Class-specific\n            bbox refinements.\n    masks: [TRAIN_ROIS_PER_IMAGE, height, width, NUM_CLASSES). Class specific masks cropped\n           to bbox boundaries and resized to neural network output size.\n    """"""\n    assert rpn_rois.shape[0] > 0\n    assert gt_class_ids.dtype == np.int32, ""Expected int but got {}"".format(\n        gt_class_ids.dtype)\n    assert gt_boxes.dtype == np.int32, ""Expected int but got {}"".format(\n        gt_boxes.dtype)\n    assert gt_masks.dtype == np.bool_, ""Expected bool but got {}"".format(\n        gt_masks.dtype)\n\n    # It\'s common to add GT Boxes to ROIs but we don\'t do that here because\n    # according to XinLei Chen\'s paper, it doesn\'t help.\n\n    # Trim empty padding in gt_boxes and gt_masks parts\n    instance_ids = np.where(gt_class_ids > 0)[0]\n    assert instance_ids.shape[0] > 0, ""Image must contain instances.""\n    gt_class_ids = gt_class_ids[instance_ids]\n    gt_boxes = gt_boxes[instance_ids]\n    gt_masks = gt_masks[:, :, instance_ids]\n\n    # Compute areas of ROIs and ground truth boxes.\n    rpn_roi_area = (rpn_rois[:, 2] - rpn_rois[:, 0]) * \\\n        (rpn_rois[:, 3] - rpn_rois[:, 1])\n    gt_box_area = (gt_boxes[:, 2] - gt_boxes[:, 0]) * \\\n        (gt_boxes[:, 3] - gt_boxes[:, 1])\n\n    # Compute overlaps [rpn_rois, gt_boxes]\n    overlaps = np.zeros((rpn_rois.shape[0], gt_boxes.shape[0]))\n    for i in range(overlaps.shape[1]):\n        gt = gt_boxes[i]\n        overlaps[:, i] = utils.compute_iou(\n            gt, rpn_rois, gt_box_area[i], rpn_roi_area)\n\n    # Assign ROIs to GT boxes\n    rpn_roi_iou_argmax = np.argmax(overlaps, axis=1)\n    rpn_roi_iou_max = overlaps[np.arange(\n        overlaps.shape[0]), rpn_roi_iou_argmax]\n    # GT box assigned to each ROI\n    rpn_roi_gt_boxes = gt_boxes[rpn_roi_iou_argmax]\n    rpn_roi_gt_class_ids = gt_class_ids[rpn_roi_iou_argmax]\n\n    # Positive ROIs are those with >= 0.5 IoU with a GT box.\n    fg_ids = np.where(rpn_roi_iou_max > 0.5)[0]\n\n    # Negative ROIs are those with max IoU 0.1-0.5 (hard example mining)\n    # TODO: To hard example mine or not to hard example mine, that\'s the question\n    # bg_ids = np.where((rpn_roi_iou_max >= 0.1) & (rpn_roi_iou_max < 0.5))[0]\n    bg_ids = np.where(rpn_roi_iou_max < 0.5)[0]\n\n    # Subsample ROIs. Aim for 33% foreground.\n    # FG\n    fg_roi_count = int(config.TRAIN_ROIS_PER_IMAGE * config.ROI_POSITIVE_RATIO)\n    if fg_ids.shape[0] > fg_roi_count:\n        keep_fg_ids = np.random.choice(fg_ids, fg_roi_count, replace=False)\n    else:\n        keep_fg_ids = fg_ids\n    # BG\n    remaining = config.TRAIN_ROIS_PER_IMAGE - keep_fg_ids.shape[0]\n    if bg_ids.shape[0] > remaining:\n        keep_bg_ids = np.random.choice(bg_ids, remaining, replace=False)\n    else:\n        keep_bg_ids = bg_ids\n    # Combine indices of ROIs to keep\n    keep = np.concatenate([keep_fg_ids, keep_bg_ids])\n    # Need more?\n    remaining = config.TRAIN_ROIS_PER_IMAGE - keep.shape[0]\n    if remaining > 0:\n        # Looks like we don\'t have enough samples to maintain the desired\n        # balance. Reduce requirements and fill in the rest. This is\n        # likely different from the Mask RCNN paper.\n\n        # There is a small chance we have neither fg nor bg samples.\n        if keep.shape[0] == 0:\n            # Pick bg regions with easier IoU threshold\n            bg_ids = np.where(rpn_roi_iou_max < 0.5)[0]\n            assert bg_ids.shape[0] >= remaining\n            keep_bg_ids = np.random.choice(bg_ids, remaining, replace=False)\n            assert keep_bg_ids.shape[0] == remaining\n            keep = np.concatenate([keep, keep_bg_ids])\n        else:\n            # Fill the rest with repeated bg rois.\n            keep_extra_ids = np.random.choice(\n                keep_bg_ids, remaining, replace=True)\n            keep = np.concatenate([keep, keep_extra_ids])\n    assert keep.shape[0] == config.TRAIN_ROIS_PER_IMAGE, \\\n        ""keep doesn\'t match ROI batch size {}, {}"".format(\n            keep.shape[0], config.TRAIN_ROIS_PER_IMAGE)\n\n    # Reset the gt boxes assigned to BG ROIs.\n    rpn_roi_gt_boxes[keep_bg_ids, :] = 0\n    rpn_roi_gt_class_ids[keep_bg_ids] = 0\n\n    # For each kept ROI, assign a class_id, and for FG ROIs also add bbox refinement.\n    rois = rpn_rois[keep]\n    roi_gt_boxes = rpn_roi_gt_boxes[keep]\n    roi_gt_class_ids = rpn_roi_gt_class_ids[keep]\n    roi_gt_assignment = rpn_roi_iou_argmax[keep]\n\n    # Class-aware bbox deltas. [y, x, log(h), log(w)]\n    bboxes = np.zeros((config.TRAIN_ROIS_PER_IMAGE,\n                       config.NUM_CLASSES, 4), dtype=np.float32)\n    pos_ids = np.where(roi_gt_class_ids > 0)[0]\n    bboxes[pos_ids, roi_gt_class_ids[pos_ids]] = utils.box_refinement(\n        rois[pos_ids], roi_gt_boxes[pos_ids, :4])\n    # Normalize bbox refinements\n    bboxes /= config.BBOX_STD_DEV\n\n    # Generate class-specific target masks\n    masks = np.zeros((config.TRAIN_ROIS_PER_IMAGE, config.MASK_SHAPE[0], config.MASK_SHAPE[1], config.NUM_CLASSES),\n                     dtype=np.float32)\n    for i in pos_ids:\n        class_id = roi_gt_class_ids[i]\n        assert class_id > 0, ""class id must be greater than 0""\n        gt_id = roi_gt_assignment[i]\n        class_mask = gt_masks[:, :, gt_id]\n\n        if config.USE_MINI_MASK:\n            # Create a mask placeholder, the size of the image\n            placeholder = np.zeros(config.IMAGE_SHAPE[:2], dtype=bool)\n            # GT box\n            gt_y1, gt_x1, gt_y2, gt_x2 = gt_boxes[gt_id]\n            gt_w = gt_x2 - gt_x1\n            gt_h = gt_y2 - gt_y1\n            # Resize mini mask to size of GT box\n            placeholder[gt_y1:gt_y2, gt_x1:gt_x2] = \\\n                np.round(skimage.transform.resize(\n                    class_mask, (gt_h, gt_w), order=1, mode=""constant"")).astype(bool)\n            # Place the mini batch in the placeholder\n            class_mask = placeholder\n\n        # Pick part of the mask and resize it\n        y1, x1, y2, x2 = rois[i].astype(np.int32)\n        m = class_mask[y1:y2, x1:x2]\n        mask = skimage.transform.resize(m, config.MASK_SHAPE, order=1, mode=""constant"")\n        masks[i, :, :, class_id] = mask\n\n    return rois, roi_gt_class_ids, bboxes, masks\n\n\ndef build_rpn_targets(image_shape, anchors, gt_class_ids, gt_boxes, config):\n    """"""Given the anchors and GT boxes, compute overlaps and identify positive\n    anchors and deltas to refine them to match their corresponding GT boxes.\n\n    anchors: [num_anchors, (y1, x1, y2, x2)]\n    gt_class_ids: [num_gt_boxes] Integer class IDs.\n    gt_boxes: [num_gt_boxes, (y1, x1, y2, x2)]\n\n    Returns:\n    rpn_match: [N] (int32) matches between anchors and GT boxes.\n               1 = positive anchor, -1 = negative anchor, 0 = neutral\n    rpn_bbox: [N, (dy, dx, log(dh), log(dw))] Anchor bbox deltas.\n    """"""\n    # RPN Match: 1 = positive anchor, -1 = negative anchor, 0 = neutral\n    rpn_match = np.zeros([anchors.shape[0]], dtype=np.int32)\n    # RPN bounding boxes: [max anchors per image, (dy, dx, log(dh), log(dw))]\n    rpn_bbox = np.zeros((config.RPN_TRAIN_ANCHORS_PER_IMAGE, 4))\n\n    # Handle COCO crowds\n    # A crowd box in COCO is a bounding box around several instances. Exclude\n    # them from training. A crowd box is given a negative class ID.\n    crowd_ix = np.where(gt_class_ids < 0)[0]\n    if crowd_ix.shape[0] > 0:\n        # Filter out crowds from ground truth class IDs and boxes\n        non_crowd_ix = np.where(gt_class_ids > 0)[0]\n        crowd_boxes = gt_boxes[crowd_ix]\n        gt_class_ids = gt_class_ids[non_crowd_ix]\n        gt_boxes = gt_boxes[non_crowd_ix]\n        # Compute overlaps with crowd boxes [anchors, crowds]\n        crowd_overlaps = utils.compute_overlaps(anchors, crowd_boxes)\n        crowd_iou_max = np.amax(crowd_overlaps, axis=1)\n        no_crowd_bool = (crowd_iou_max < 0.001)\n    else:\n        # All anchors don\'t intersect a crowd\n        no_crowd_bool = np.ones([anchors.shape[0]], dtype=bool)\n\n    # Compute overlaps [num_anchors, num_gt_boxes]\n    overlaps = utils.compute_overlaps(anchors, gt_boxes)\n\n    # Match anchors to GT Boxes\n    # If an anchor overlaps a GT box with IoU >= 0.7 then it\'s positive.\n    # If an anchor overlaps a GT box with IoU < 0.3 then it\'s negative.\n    # Neutral anchors are those that don\'t match the conditions above,\n    # and they don\'t influence the loss function.\n    # However, don\'t keep any GT box unmatched (rare, but happens). Instead,\n    # match it to the closest anchor (even if its max IoU is < 0.3).\n    #\n    # 1. Set negative anchors first. They get overwritten below if a GT box is\n    # matched to them. Skip boxes in crowd areas.\n    anchor_iou_argmax = np.argmax(overlaps, axis=1)\n    anchor_iou_max = overlaps[np.arange(overlaps.shape[0]), anchor_iou_argmax]\n    rpn_match[(anchor_iou_max < 0.3) & (no_crowd_bool)] = -1\n    # 2. Set an anchor for each GT box (regardless of IoU value).\n    # TODO: If multiple anchors have the same IoU match all of them\n    gt_iou_argmax = np.argmax(overlaps, axis=0)\n    rpn_match[gt_iou_argmax] = 1\n    # 3. Set anchors with high overlap as positive.\n    rpn_match[anchor_iou_max >= 0.7] = 1\n\n    # Subsample to balance positive and negative anchors\n    # Don\'t let positives be more than half the anchors\n    ids = np.where(rpn_match == 1)[0]\n    extra = len(ids) - (config.RPN_TRAIN_ANCHORS_PER_IMAGE // 2)\n    if extra > 0:\n        # Reset the extra ones to neutral\n        ids = np.random.choice(ids, extra, replace=False)\n        rpn_match[ids] = 0\n    # Same for negative proposals\n    ids = np.where(rpn_match == -1)[0]\n    extra = len(ids) - (config.RPN_TRAIN_ANCHORS_PER_IMAGE -\n                        np.sum(rpn_match == 1))\n    if extra > 0:\n        # Rest the extra ones to neutral\n        ids = np.random.choice(ids, extra, replace=False)\n        rpn_match[ids] = 0\n\n    # For positive anchors, compute shift and scale needed to transform them\n    # to match the corresponding GT boxes.\n    ids = np.where(rpn_match == 1)[0]\n    ix = 0  # index into rpn_bbox\n    # TODO: use box_refinement() rather than duplicating the code here\n    for i, a in zip(ids, anchors[ids]):\n        # Closest gt box (it might have IoU < 0.7)\n        gt = gt_boxes[anchor_iou_argmax[i]]\n\n        # Convert coordinates to center plus width/height.\n        # GT Box\n        gt_h = gt[2] - gt[0]\n        gt_w = gt[3] - gt[1]\n        gt_center_y = gt[0] + 0.5 * gt_h\n        gt_center_x = gt[1] + 0.5 * gt_w\n        # Anchor\n        a_h = a[2] - a[0]\n        a_w = a[3] - a[1]\n        a_center_y = a[0] + 0.5 * a_h\n        a_center_x = a[1] + 0.5 * a_w\n\n        # Compute the bbox refinement that the RPN should predict.\n        rpn_bbox[ix] = [\n            (gt_center_y - a_center_y) / a_h,\n            (gt_center_x - a_center_x) / a_w,\n            np.log(gt_h / a_h),\n            np.log(gt_w / a_w),\n        ]\n        # Normalize\n        rpn_bbox[ix] /= config.RPN_BBOX_STD_DEV\n        ix += 1\n\n    return rpn_match, rpn_bbox\n\n\ndef generate_random_rois(image_shape, count, gt_class_ids, gt_boxes):\n    """"""Generates ROI proposals similar to what a region proposal network\n    would generate.\n\n    image_shape: [Height, Width, Depth]\n    count: Number of ROIs to generate\n    gt_class_ids: [N] Integer ground truth class IDs\n    gt_boxes: [N, (y1, x1, y2, x2)] Ground truth boxes in pixels.\n\n    Returns: [count, (y1, x1, y2, x2)] ROI boxes in pixels.\n    """"""\n    # placeholder\n    rois = np.zeros((count, 4), dtype=np.int32)\n\n    # Generate random ROIs around GT boxes (90% of count)\n    rois_per_box = int(0.9 * count / gt_boxes.shape[0])\n    for i in range(gt_boxes.shape[0]):\n        gt_y1, gt_x1, gt_y2, gt_x2 = gt_boxes[i]\n        h = gt_y2 - gt_y1\n        w = gt_x2 - gt_x1\n        # random boundaries\n        r_y1 = max(gt_y1 - h, 0)\n        r_y2 = min(gt_y2 + h, image_shape[0])\n        r_x1 = max(gt_x1 - w, 0)\n        r_x2 = min(gt_x2 + w, image_shape[1])\n\n        # To avoid generating boxes with zero area, we generate double what\n        # we need and filter out the extra. If we get fewer valid boxes\n        # than we need, we loop and try again.\n        while True:\n            y1y2 = np.random.randint(r_y1, r_y2, (rois_per_box * 2, 2))\n            x1x2 = np.random.randint(r_x1, r_x2, (rois_per_box * 2, 2))\n            # Filter out zero area boxes\n            threshold = 1\n            y1y2 = y1y2[np.abs(y1y2[:, 0] - y1y2[:, 1]) >=\n                        threshold][:rois_per_box]\n            x1x2 = x1x2[np.abs(x1x2[:, 0] - x1x2[:, 1]) >=\n                        threshold][:rois_per_box]\n            if y1y2.shape[0] == rois_per_box and x1x2.shape[0] == rois_per_box:\n                break\n\n        # Sort on axis 1 to ensure x1 <= x2 and y1 <= y2 and then reshape\n        # into x1, y1, x2, y2 order\n        x1, x2 = np.split(np.sort(x1x2, axis=1), 2, axis=1)\n        y1, y2 = np.split(np.sort(y1y2, axis=1), 2, axis=1)\n        box_rois = np.hstack([y1, x1, y2, x2])\n        rois[rois_per_box * i:rois_per_box * (i + 1)] = box_rois\n\n    # Generate random ROIs anywhere in the image (10% of count)\n    remaining_count = count - (rois_per_box * gt_boxes.shape[0])\n    # To avoid generating boxes with zero area, we generate double what\n    # we need and filter out the extra. If we get fewer valid boxes\n    # than we need, we loop and try again.\n    while True:\n        y1y2 = np.random.randint(0, image_shape[0], (remaining_count * 2, 2))\n        x1x2 = np.random.randint(0, image_shape[1], (remaining_count * 2, 2))\n        # Filter out zero area boxes\n        threshold = 1\n        y1y2 = y1y2[np.abs(y1y2[:, 0] - y1y2[:, 1]) >=\n                    threshold][:remaining_count]\n        x1x2 = x1x2[np.abs(x1x2[:, 0] - x1x2[:, 1]) >=\n                    threshold][:remaining_count]\n        if y1y2.shape[0] == remaining_count and x1x2.shape[0] == remaining_count:\n            break\n\n    # Sort on axis 1 to ensure x1 <= x2 and y1 <= y2 and then reshape\n    # into x1, y1, x2, y2 order\n    x1, x2 = np.split(np.sort(x1x2, axis=1), 2, axis=1)\n    y1, y2 = np.split(np.sort(y1y2, axis=1), 2, axis=1)\n    global_rois = np.hstack([y1, x1, y2, x2])\n    rois[-remaining_count:] = global_rois\n    return rois\n\n\ndef data_generator(dataset, config, shuffle=True, augment=False, augmentation=None,\n                   random_rois=0, batch_size=1, detection_targets=False,\n                   no_augmentation_sources=None):\n    """"""A generator that returns images and corresponding target class ids,\n    bounding box deltas, and masks.\n\n    dataset: The Dataset object to pick data from\n    config: The model config object\n    shuffle: If True, shuffles the samples before every epoch\n    augment: (deprecated. Use augmentation instead). If true, apply random\n        image augmentation. Currently, only horizontal flipping is offered.\n    augmentation: Optional. An imgaug (https://github.com/aleju/imgaug) augmentation.\n        For example, passing imgaug.augmenters.Fliplr(0.5) flips images\n        right/left 50% of the time.\n    random_rois: If > 0 then generate proposals to be used to train the\n                 network classifier and mask heads. Useful if training\n                 the Mask RCNN part without the RPN.\n    batch_size: How many images to return in each call\n    detection_targets: If True, generate detection targets (class IDs, bbox\n        deltas, and masks). Typically for debugging or visualizations because\n        in trainig detection targets are generated by DetectionTargetLayer.\n    no_augmentation_sources: Optional. List of sources to exclude for\n        augmentation. A source is string that identifies a dataset and is\n        defined in the Dataset class.\n\n    Returns a Python generator. Upon calling next() on it, the\n    generator returns two lists, inputs and outputs. The contents\n    of the lists differs depending on the received arguments:\n    inputs list:\n    - images: [batch, H, W, C]\n    - image_meta: [batch, (meta data)] Image details. See compose_image_meta()\n    - rpn_match: [batch, N] Integer (1=positive anchor, -1=negative, 0=neutral)\n    - rpn_bbox: [batch, N, (dy, dx, log(dh), log(dw))] Anchor bbox deltas.\n    - gt_class_ids: [batch, MAX_GT_INSTANCES] Integer class IDs\n    - gt_boxes: [batch, MAX_GT_INSTANCES, (y1, x1, y2, x2)]\n    - gt_masks: [batch, height, width, MAX_GT_INSTANCES]. The height and width\n                are those of the image unless use_mini_mask is True, in which\n                case they are defined in MINI_MASK_SHAPE.\n\n    outputs list: Usually empty in regular training. But if detection_targets\n        is True then the outputs list contains target class_ids, bbox deltas,\n        and masks.\n    """"""\n    b = 0  # batch item index\n    image_index = -1\n    image_ids = np.copy(dataset.image_ids)\n    error_count = 0\n    no_augmentation_sources = no_augmentation_sources or []\n\n    # Anchors\n    # [anchor_count, (y1, x1, y2, x2)]\n    backbone_shapes = compute_backbone_shapes(config, config.IMAGE_SHAPE)\n    anchors = utils.generate_pyramid_anchors(config.RPN_ANCHOR_SCALES,\n                                             config.RPN_ANCHOR_RATIOS,\n                                             backbone_shapes,\n                                             config.BACKBONE_STRIDES,\n                                             config.RPN_ANCHOR_STRIDE)\n\n    # Keras requires a generator to run indefinitely.\n    while True:\n        try:\n            # Increment index to pick next image. Shuffle if at the start of an epoch.\n            image_index = (image_index + 1) % len(image_ids)\n            if shuffle and image_index == 0:\n                np.random.shuffle(image_ids)\n\n            # Get GT bounding boxes and masks for image.\n            image_id = image_ids[image_index]\n\n            # If the image source is not to be augmented pass None as augmentation\n            if dataset.image_info[image_id][\'source\'] in no_augmentation_sources:\n                image, image_meta, gt_class_ids, gt_boxes, gt_masks = \\\n                load_image_gt(dataset, config, image_id, augment=augment,\n                              augmentation=None,\n                              use_mini_mask=config.USE_MINI_MASK)\n            else:\n                image, image_meta, gt_class_ids, gt_boxes, gt_masks = \\\n                    load_image_gt(dataset, config, image_id, augment=augment,\n                                augmentation=augmentation,\n                                use_mini_mask=config.USE_MINI_MASK)\n\n            # Skip images that have no instances. This can happen in cases\n            # where we train on a subset of classes and the image doesn\'t\n            # have any of the classes we care about.\n            if not np.any(gt_class_ids > 0):\n                continue\n\n            # RPN Targets\n            rpn_match, rpn_bbox = build_rpn_targets(image.shape, anchors,\n                                                    gt_class_ids, gt_boxes, config)\n\n            # Mask R-CNN Targets\n            if random_rois:\n                rpn_rois = generate_random_rois(\n                    image.shape, random_rois, gt_class_ids, gt_boxes)\n                if detection_targets:\n                    rois, mrcnn_class_ids, mrcnn_bbox, mrcnn_mask =\\\n                        build_detection_targets(\n                            rpn_rois, gt_class_ids, gt_boxes, gt_masks, config)\n\n            # Init batch arrays\n            if b == 0:\n                batch_image_meta = np.zeros(\n                    (batch_size,) + image_meta.shape, dtype=image_meta.dtype)\n                batch_rpn_match = np.zeros(\n                    [batch_size, anchors.shape[0], 1], dtype=rpn_match.dtype)\n                batch_rpn_bbox = np.zeros(\n                    [batch_size, config.RPN_TRAIN_ANCHORS_PER_IMAGE, 4], dtype=rpn_bbox.dtype)\n                batch_images = np.zeros(\n                    (batch_size,) + image.shape, dtype=np.float32)\n                batch_gt_class_ids = np.zeros(\n                    (batch_size, config.MAX_GT_INSTANCES), dtype=np.int32)\n                batch_gt_boxes = np.zeros(\n                    (batch_size, config.MAX_GT_INSTANCES, 4), dtype=np.int32)\n                batch_gt_masks = np.zeros(\n                    (batch_size, gt_masks.shape[0], gt_masks.shape[1],\n                     config.MAX_GT_INSTANCES), dtype=gt_masks.dtype)\n                if random_rois:\n                    batch_rpn_rois = np.zeros(\n                        (batch_size, rpn_rois.shape[0], 4), dtype=rpn_rois.dtype)\n                    if detection_targets:\n                        batch_rois = np.zeros(\n                            (batch_size,) + rois.shape, dtype=rois.dtype)\n                        batch_mrcnn_class_ids = np.zeros(\n                            (batch_size,) + mrcnn_class_ids.shape, dtype=mrcnn_class_ids.dtype)\n                        batch_mrcnn_bbox = np.zeros(\n                            (batch_size,) + mrcnn_bbox.shape, dtype=mrcnn_bbox.dtype)\n                        batch_mrcnn_mask = np.zeros(\n                            (batch_size,) + mrcnn_mask.shape, dtype=mrcnn_mask.dtype)\n\n            # If more instances than fits in the array, sub-sample from them.\n            if gt_boxes.shape[0] > config.MAX_GT_INSTANCES:\n                ids = np.random.choice(\n                    np.arange(gt_boxes.shape[0]), config.MAX_GT_INSTANCES, replace=False)\n                gt_class_ids = gt_class_ids[ids]\n                gt_boxes = gt_boxes[ids]\n                gt_masks = gt_masks[:, :, ids]\n\n            # Add to batch\n            batch_image_meta[b] = image_meta\n            batch_rpn_match[b] = rpn_match[:, np.newaxis]\n            batch_rpn_bbox[b] = rpn_bbox\n            batch_images[b] = mold_image(image.astype(np.float32), config)\n            batch_gt_class_ids[b, :gt_class_ids.shape[0]] = gt_class_ids\n            batch_gt_boxes[b, :gt_boxes.shape[0]] = gt_boxes\n            batch_gt_masks[b, :, :, :gt_masks.shape[-1]] = gt_masks\n            if random_rois:\n                batch_rpn_rois[b] = rpn_rois\n                if detection_targets:\n                    batch_rois[b] = rois\n                    batch_mrcnn_class_ids[b] = mrcnn_class_ids\n                    batch_mrcnn_bbox[b] = mrcnn_bbox\n                    batch_mrcnn_mask[b] = mrcnn_mask\n            b += 1\n\n            # Batch full?\n            if b >= batch_size:\n                inputs = [batch_images, batch_image_meta, batch_rpn_match, batch_rpn_bbox,\n                          batch_gt_class_ids, batch_gt_boxes, batch_gt_masks]\n                outputs = []\n\n                if random_rois:\n                    inputs.extend([batch_rpn_rois])\n                    if detection_targets:\n                        inputs.extend([batch_rois])\n                        # Keras requires that output and targets have the same number of dimensions\n                        batch_mrcnn_class_ids = np.expand_dims(\n                            batch_mrcnn_class_ids, -1)\n                        outputs.extend(\n                            [batch_mrcnn_class_ids, batch_mrcnn_bbox, batch_mrcnn_mask])\n\n                yield inputs, outputs\n\n                # start a new batch\n                b = 0\n        except (GeneratorExit, KeyboardInterrupt):\n            raise\n        except:\n            # Log it and skip the image\n            logging.exception(""Error processing image {}"".format(\n                dataset.image_info[image_id]))\n            error_count += 1\n            if error_count > 5:\n                raise\n\n\n############################################################\n#  MaskRCNN Class\n############################################################\n\nclass MaskRCNN():\n    """"""Encapsulates the Mask RCNN model functionality.\n\n    The actual Keras model is in the keras_model property.\n    """"""\n\n    def __init__(self, mode, config, model_dir):\n        """"""\n        mode: Either ""training"" or ""inference""\n        config: A Sub-class of the Config class\n        model_dir: Directory to save training logs and trained weights\n        """"""\n        assert mode in [\'training\', \'inference\']\n        self.mode = mode\n        self.config = config\n        self.model_dir = model_dir\n        self.set_log_dir()\n        self.keras_model = self.build(mode=mode, config=config)\n\n    def build(self, mode, config):\n        """"""Build Mask R-CNN architecture.\n            input_shape: The shape of the input image.\n            mode: Either ""training"" or ""inference"". The inputs and\n                outputs of the model differ accordingly.\n        """"""\n        assert mode in [\'training\', \'inference\']\n\n        # Image size must be dividable by 2 multiple times\n        h, w = config.IMAGE_SHAPE[:2]\n        if h / 2**6 != int(h / 2**6) or w / 2**6 != int(w / 2**6):\n            raise Exception(""Image size must be dividable by 2 at least 6 times ""\n                            ""to avoid fractions when downscaling and upscaling.""\n                            ""For example, use 256, 320, 384, 448, 512, ... etc. "")\n\n        # Inputs\n        input_image = KL.Input(\n            shape=[None, None, 3], name=""input_image"")\n        input_image_meta = KL.Input(shape=[config.IMAGE_META_SIZE],\n                                    name=""input_image_meta"")\n        if mode == ""training"":\n            # RPN GT\n            input_rpn_match = KL.Input(\n                shape=[None, 1], name=""input_rpn_match"", dtype=tf.int32)\n            input_rpn_bbox = KL.Input(\n                shape=[None, 4], name=""input_rpn_bbox"", dtype=tf.float32)\n\n            # Detection GT (class IDs, bounding boxes, and masks)\n            # 1. GT Class IDs (zero padded)\n            input_gt_class_ids = KL.Input(\n                shape=[None], name=""input_gt_class_ids"", dtype=tf.int32)\n            # 2. GT Boxes in pixels (zero padded)\n            # [batch, MAX_GT_INSTANCES, (y1, x1, y2, x2)] in image coordinates\n            input_gt_boxes = KL.Input(\n                shape=[None, 4], name=""input_gt_boxes"", dtype=tf.float32)\n            # Normalize coordinates\n            gt_boxes = KL.Lambda(lambda x: norm_boxes_graph(\n                x, K.shape(input_image)[1:3]))(input_gt_boxes)\n            # 3. GT Masks (zero padded)\n            # [batch, height, width, MAX_GT_INSTANCES]\n            if config.USE_MINI_MASK:\n                input_gt_masks = KL.Input(\n                    shape=[config.MINI_MASK_SHAPE[0],\n                           config.MINI_MASK_SHAPE[1], None],\n                    name=""input_gt_masks"", dtype=bool)\n            else:\n                input_gt_masks = KL.Input(\n                    shape=[config.IMAGE_SHAPE[0], config.IMAGE_SHAPE[1], None],\n                    name=""input_gt_masks"", dtype=bool)\n        elif mode == ""inference"":\n            # Anchors in normalized coordinates\n            input_anchors = KL.Input(shape=[None, 4], name=""input_anchors"")\n\n        # Build the shared convolutional layers.\n        # Bottom-up Layers\n        # Returns a list of the last layers of each stage, 5 in total.\n        # Don\'t create the thead (stage 5), so we pick the 4th item in the list.\n        if callable(config.BACKBONE):\n            _, C2, C3, C4, C5 = config.BACKBONE(input_image, stage5=True,\n                                                train_bn=config.TRAIN_BN)\n        else:\n            _, C2, C3, C4, C5 = resnet_graph(input_image, config.BACKBONE,\n                                             stage5=True, train_bn=config.TRAIN_BN)\n        # Top-down Layers\n        # TODO: add assert to varify feature map sizes match what\'s in config\n        P5 = KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (1, 1), name=\'fpn_c5p5\')(C5)\n        P4 = KL.Add(name=""fpn_p4add"")([\n            KL.UpSampling2D(size=(2, 2), name=""fpn_p5upsampled"")(P5),\n            KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (1, 1), name=\'fpn_c4p4\')(C4)])\n        P3 = KL.Add(name=""fpn_p3add"")([\n            KL.UpSampling2D(size=(2, 2), name=""fpn_p4upsampled"")(P4),\n            KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (1, 1), name=\'fpn_c3p3\')(C3)])\n        P2 = KL.Add(name=""fpn_p2add"")([\n            KL.UpSampling2D(size=(2, 2), name=""fpn_p3upsampled"")(P3),\n            KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (1, 1), name=\'fpn_c2p2\')(C2)])\n        # Attach 3x3 conv to all P layers to get the final feature maps.\n        P2 = KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (3, 3), padding=""SAME"", name=""fpn_p2"")(P2)\n        P3 = KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (3, 3), padding=""SAME"", name=""fpn_p3"")(P3)\n        P4 = KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (3, 3), padding=""SAME"", name=""fpn_p4"")(P4)\n        P5 = KL.Conv2D(config.TOP_DOWN_PYRAMID_SIZE, (3, 3), padding=""SAME"", name=""fpn_p5"")(P5)\n        # P6 is used for the 5th anchor scale in RPN. Generated by\n        # subsampling from P5 with stride of 2.\n        P6 = KL.MaxPooling2D(pool_size=(1, 1), strides=2, name=""fpn_p6"")(P5)\n\n        # Note that P6 is used in RPN, but not in the classifier heads.\n        rpn_feature_maps = [P2, P3, P4, P5, P6]\n        mrcnn_feature_maps = [P2, P3, P4, P5]\n\n        # Anchors\n        if mode == ""training"":\n            anchors = self.get_anchors(config.IMAGE_SHAPE)\n            # Duplicate across the batch dimension because Keras requires it\n            # TODO: can this be optimized to avoid duplicating the anchors?\n            anchors = np.broadcast_to(anchors, (config.BATCH_SIZE,) + anchors.shape)\n            # A hack to get around Keras\'s bad support for constants\n            anchors = KL.Lambda(lambda x: tf.Variable(anchors), name=""anchors"")(input_image)\n        else:\n            anchors = input_anchors\n\n        # RPN Model\n        rpn = build_rpn_model(config.RPN_ANCHOR_STRIDE,\n                              len(config.RPN_ANCHOR_RATIOS), config.TOP_DOWN_PYRAMID_SIZE)\n        # Loop through pyramid layers\n        layer_outputs = []  # list of lists\n        for p in rpn_feature_maps:\n            layer_outputs.append(rpn([p]))\n        # Concatenate layer outputs\n        # Convert from list of lists of level outputs to list of lists\n        # of outputs across levels.\n        # e.g. [[a1, b1, c1], [a2, b2, c2]] => [[a1, a2], [b1, b2], [c1, c2]]\n        output_names = [""rpn_class_logits"", ""rpn_class"", ""rpn_bbox""]\n        outputs = list(zip(*layer_outputs))\n        outputs = [KL.Concatenate(axis=1, name=n)(list(o))\n                   for o, n in zip(outputs, output_names)]\n\n        rpn_class_logits, rpn_class, rpn_bbox = outputs\n\n        # Generate proposals\n        # Proposals are [batch, N, (y1, x1, y2, x2)] in normalized coordinates\n        # and zero padded.\n        proposal_count = config.POST_NMS_ROIS_TRAINING if mode == ""training""\\\n            else config.POST_NMS_ROIS_INFERENCE\n        rpn_rois = ProposalLayer(\n            proposal_count=proposal_count,\n            nms_threshold=config.RPN_NMS_THRESHOLD,\n            name=""ROI"",\n            config=config)([rpn_class, rpn_bbox, anchors])\n\n        if mode == ""training"":\n            # Class ID mask to mark class IDs supported by the dataset the image\n            # came from.\n            active_class_ids = KL.Lambda(\n                lambda x: parse_image_meta_graph(x)[""active_class_ids""]\n                )(input_image_meta)\n\n            if not config.USE_RPN_ROIS:\n                # Ignore predicted ROIs and use ROIs provided as an input.\n                input_rois = KL.Input(shape=[config.POST_NMS_ROIS_TRAINING, 4],\n                                      name=""input_roi"", dtype=np.int32)\n                # Normalize coordinates\n                target_rois = KL.Lambda(lambda x: norm_boxes_graph(\n                    x, K.shape(input_image)[1:3]))(input_rois)\n            else:\n                target_rois = rpn_rois\n\n            # Generate detection targets\n            # Subsamples proposals and generates target outputs for training\n            # Note that proposal class IDs, gt_boxes, and gt_masks are zero\n            # padded. Equally, returned rois and targets are zero padded.\n            rois, target_class_ids, target_bbox, target_mask =\\\n                DetectionTargetLayer(config, name=""proposal_targets"")([\n                    target_rois, input_gt_class_ids, gt_boxes, input_gt_masks])\n\n            # Network Heads\n            # TODO: verify that this handles zero padded ROIs\n            mrcnn_class_logits, mrcnn_class, mrcnn_bbox =\\\n                fpn_classifier_graph(rois, mrcnn_feature_maps, input_image_meta,\n                                     config.POOL_SIZE, config.NUM_CLASSES,\n                                     train_bn=config.TRAIN_BN,\n                                     fc_layers_size=config.FPN_CLASSIF_FC_LAYERS_SIZE)\n\n            mrcnn_mask = build_fpn_mask_graph(rois, mrcnn_feature_maps,\n                                              input_image_meta,\n                                              config.MASK_POOL_SIZE,\n                                              config.NUM_CLASSES,\n                                              train_bn=config.TRAIN_BN)\n\n            # TODO: clean up (use tf.identify if necessary)\n            output_rois = KL.Lambda(lambda x: x * 1, name=""output_rois"")(rois)\n\n            # Losses\n            rpn_class_loss = KL.Lambda(lambda x: rpn_class_loss_graph(*x), name=""rpn_class_loss"")(\n                [input_rpn_match, rpn_class_logits])\n            rpn_bbox_loss = KL.Lambda(lambda x: rpn_bbox_loss_graph(config, *x), name=""rpn_bbox_loss"")(\n                [input_rpn_bbox, input_rpn_match, rpn_bbox])\n            class_loss = KL.Lambda(lambda x: mrcnn_class_loss_graph(*x), name=""mrcnn_class_loss"")(\n                [target_class_ids, mrcnn_class_logits, active_class_ids])\n            bbox_loss = KL.Lambda(lambda x: mrcnn_bbox_loss_graph(*x), name=""mrcnn_bbox_loss"")(\n                [target_bbox, target_class_ids, mrcnn_bbox])\n            mask_loss = KL.Lambda(lambda x: mrcnn_mask_loss_graph(*x), name=""mrcnn_mask_loss"")(\n                [target_mask, target_class_ids, mrcnn_mask])\n\n            # Model\n            inputs = [input_image, input_image_meta,\n                      input_rpn_match, input_rpn_bbox, input_gt_class_ids, input_gt_boxes, input_gt_masks]\n            if not config.USE_RPN_ROIS:\n                inputs.append(input_rois)\n            outputs = [rpn_class_logits, rpn_class, rpn_bbox,\n                       mrcnn_class_logits, mrcnn_class, mrcnn_bbox, mrcnn_mask,\n                       rpn_rois, output_rois,\n                       rpn_class_loss, rpn_bbox_loss, class_loss, bbox_loss, mask_loss]\n            model = KM.Model(inputs, outputs, name=\'mask_rcnn\')\n        else:\n            # Network Heads\n            # Proposal classifier and BBox regressor heads\n            mrcnn_class_logits, mrcnn_class, mrcnn_bbox =\\\n                fpn_classifier_graph(rpn_rois, mrcnn_feature_maps, input_image_meta,\n                                     config.POOL_SIZE, config.NUM_CLASSES,\n                                     train_bn=config.TRAIN_BN,\n                                     fc_layers_size=config.FPN_CLASSIF_FC_LAYERS_SIZE)\n\n            # Detections\n            # output is [batch, num_detections, (y1, x1, y2, x2, class_id, score)] in \n            # normalized coordinates\n            detections = DetectionLayer(config, name=""mrcnn_detection"")(\n                [rpn_rois, mrcnn_class, mrcnn_bbox, input_image_meta])\n\n            # Create masks for detections\n            detection_boxes = KL.Lambda(lambda x: x[..., :4])(detections)\n            mrcnn_mask = build_fpn_mask_graph(detection_boxes, mrcnn_feature_maps,\n                                              input_image_meta,\n                                              config.MASK_POOL_SIZE,\n                                              config.NUM_CLASSES,\n                                              train_bn=config.TRAIN_BN)\n\n            model = KM.Model([input_image, input_image_meta, input_anchors],\n                             [detections, mrcnn_class, mrcnn_bbox,\n                                 mrcnn_mask, rpn_rois, rpn_class, rpn_bbox],\n                             name=\'mask_rcnn\')\n\n        # Add multi-GPU support.\n        if config.GPU_COUNT > 1:\n            from mrcnn.parallel_model import ParallelModel\n            model = ParallelModel(model, config.GPU_COUNT)\n\n        return model\n\n    def find_last(self):\n        """"""Finds the last checkpoint file of the last trained model in the\n        model directory.\n        Returns:\n            The path of the last checkpoint file\n        """"""\n        # Get directory names. Each directory corresponds to a model\n        dir_names = next(os.walk(self.model_dir))[1]\n        key = self.config.NAME.lower()\n        dir_names = filter(lambda f: f.startswith(key), dir_names)\n        dir_names = sorted(dir_names)\n        if not dir_names:\n            import errno\n            raise FileNotFoundError(\n                errno.ENOENT,\n                ""Could not find model directory under {}"".format(self.model_dir))\n        # Pick last directory\n        dir_name = os.path.join(self.model_dir, dir_names[-1])\n        # Find the last checkpoint\n        checkpoints = next(os.walk(dir_name))[2]\n        checkpoints = filter(lambda f: f.startswith(""mask_rcnn""), checkpoints)\n        checkpoints = sorted(checkpoints)\n        if not checkpoints:\n            import errno\n            raise FileNotFoundError(\n                errno.ENOENT, ""Could not find weight files in {}"".format(dir_name))\n        checkpoint = os.path.join(dir_name, checkpoints[-1])\n        return checkpoint\n\n    def load_weights(self, filepath, by_name=False, exclude=None):\n        """"""Modified version of the corresponding Keras function with\n        the addition of multi-GPU support and the ability to exclude\n        some layers from loading.\n        exclude: list of layer names to exclude\n        """"""\n        import h5py\n        # Conditional import to support versions of Keras before 2.2\n        # TODO: remove in about 6 months (end of 2018)\n        try:\n            from keras.engine import saving\n        except ImportError:\n            # Keras before 2.2 used the \'topology\' namespace.\n            from keras.engine import topology as saving\n\n        if exclude:\n            by_name = True\n\n        if h5py is None:\n            raise ImportError(\'`load_weights` requires h5py.\')\n        f = h5py.File(filepath, mode=\'r\')\n        if \'layer_names\' not in f.attrs and \'model_weights\' in f:\n            f = f[\'model_weights\']\n\n        # In multi-GPU training, we wrap the model. Get layers\n        # of the inner model because they have the weights.\n        keras_model = self.keras_model\n        layers = keras_model.inner_model.layers if hasattr(keras_model, ""inner_model"")\\\n            else keras_model.layers\n\n        # Exclude some layers\n        if exclude:\n            layers = filter(lambda l: l.name not in exclude, layers)\n\n        if by_name:\n            saving.load_weights_from_hdf5_group_by_name(f, layers)\n        else:\n            saving.load_weights_from_hdf5_group(f, layers)\n        if hasattr(f, \'close\'):\n            f.close()\n\n        # Update the log directory\n        self.set_log_dir(filepath)\n\n    def get_imagenet_weights(self):\n        """"""Downloads ImageNet trained weights from Keras.\n        Returns path to weights file.\n        """"""\n        from keras.utils.data_utils import get_file\n        TF_WEIGHTS_PATH_NO_TOP = \'https://github.com/fchollet/deep-learning-models/\'\\\n                                 \'releases/download/v0.2/\'\\\n                                 \'resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\'\n        weights_path = get_file(\'resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\',\n                                TF_WEIGHTS_PATH_NO_TOP,\n                                cache_subdir=\'models\',\n                                md5_hash=\'a268eb855778b3df3c7506639542a6af\')\n        return weights_path\n\n    def compile(self, learning_rate, momentum):\n        """"""Gets the model ready for training. Adds losses, regularization, and\n        metrics. Then calls the Keras compile() function.\n        """"""\n        # Optimizer object\n        optimizer = keras.optimizers.SGD(\n            lr=learning_rate, momentum=momentum,\n            clipnorm=self.config.GRADIENT_CLIP_NORM)\n        # Add Losses\n        # First, clear previously set losses to avoid duplication\n        self.keras_model._losses = []\n        self.keras_model._per_input_losses = {}\n        loss_names = [\n            ""rpn_class_loss"",  ""rpn_bbox_loss"",\n            ""mrcnn_class_loss"", ""mrcnn_bbox_loss"", ""mrcnn_mask_loss""]\n        for name in loss_names:\n            layer = self.keras_model.get_layer(name)\n            if layer.output in self.keras_model.losses:\n                continue\n            loss = (\n                tf.reduce_mean(layer.output, keepdims=True)\n                * self.config.LOSS_WEIGHTS.get(name, 1.))\n            self.keras_model.add_loss(loss)\n\n        # Add L2 Regularization\n        # Skip gamma and beta weights of batch normalization layers.\n        reg_losses = [\n            keras.regularizers.l2(self.config.WEIGHT_DECAY)(w) / tf.cast(tf.size(w), tf.float32)\n            for w in self.keras_model.trainable_weights\n            if \'gamma\' not in w.name and \'beta\' not in w.name]\n        self.keras_model.add_loss(tf.add_n(reg_losses))\n\n        # Compile\n        self.keras_model.compile(\n            optimizer=optimizer,\n            loss=[None] * len(self.keras_model.outputs))\n\n        # Add metrics for losses\n        for name in loss_names:\n            if name in self.keras_model.metrics_names:\n                continue\n            layer = self.keras_model.get_layer(name)\n            self.keras_model.metrics_names.append(name)\n            loss = (\n                tf.reduce_mean(layer.output, keepdims=True)\n                * self.config.LOSS_WEIGHTS.get(name, 1.))\n            self.keras_model.metrics_tensors.append(loss)\n\n    def set_trainable(self, layer_regex, keras_model=None, indent=0, verbose=1):\n        """"""Sets model layers as trainable if their names match\n        the given regular expression.\n        """"""\n        # Print message on the first call (but not on recursive calls)\n        if verbose > 0 and keras_model is None:\n            log(""Selecting layers to train"")\n\n        keras_model = keras_model or self.keras_model\n\n        # In multi-GPU training, we wrap the model. Get layers\n        # of the inner model because they have the weights.\n        layers = keras_model.inner_model.layers if hasattr(keras_model, ""inner_model"")\\\n            else keras_model.layers\n\n        for layer in layers:\n            # Is the layer a model?\n            if layer.__class__.__name__ == \'Model\':\n                print(""In model: "", layer.name)\n                self.set_trainable(\n                    layer_regex, keras_model=layer, indent=indent + 4)\n                continue\n\n            if not layer.weights:\n                continue\n            # Is it trainable?\n            trainable = bool(re.fullmatch(layer_regex, layer.name))\n            # Update layer. If layer is a container, update inner layer.\n            if layer.__class__.__name__ == \'TimeDistributed\':\n                layer.layer.trainable = trainable\n            else:\n                layer.trainable = trainable\n            # Print trainable layer names\n            if trainable and verbose > 0:\n                log(""{}{:20}   ({})"".format("" "" * indent, layer.name,\n                                            layer.__class__.__name__))\n\n    def set_log_dir(self, model_path=None):\n        """"""Sets the model log directory and epoch counter.\n\n        model_path: If None, or a format different from what this code uses\n            then set a new log directory and start epochs from 0. Otherwise,\n            extract the log directory and the epoch counter from the file\n            name.\n        """"""\n        # Set date and epoch counter as if starting a new model\n        self.epoch = 0\n        now = datetime.datetime.now()\n\n        # If we have a model path with date and epochs use them\n        if model_path:\n            # Continue from we left of. Get epoch and date from the file name\n            # A sample model path might look like:\n            # /path/to/logs/coco20171029T2315/mask_rcnn_coco_0001.h5\n            regex = r"".*/[\\w-]+(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})/mask\\_rcnn\\_[\\w-]+(\\d{4})\\.h5""\n            m = re.match(regex, model_path)\n            if m:\n                now = datetime.datetime(int(m.group(1)), int(m.group(2)), int(m.group(3)),\n                                        int(m.group(4)), int(m.group(5)))\n                # Epoch number in file is 1-based, and in Keras code it\'s 0-based.\n                # So, adjust for that then increment by one to start from the next epoch\n                self.epoch = int(m.group(6)) - 1 + 1\n                print(\'Re-starting from epoch %d\' % self.epoch)\n\n        # Directory for training logs\n        self.log_dir = os.path.join(self.model_dir, ""{}{:%Y%m%dT%H%M}"".format(\n            self.config.NAME.lower(), now))\n\n        # Create log_dir if not exists\n        if not os.path.exists(self.log_dir):\n            os.makedirs(self.log_dir)\n\n        # Path to save after each epoch. Include placeholders that get filled by Keras.\n        self.checkpoint_path = os.path.join(self.log_dir, ""mask_rcnn_{}_*epoch*.h5"".format(\n            self.config.NAME.lower()))\n        self.checkpoint_path = self.checkpoint_path.replace(\n            ""*epoch*"", ""{epoch:04d}"")\n\n    def train(self, train_dataset, val_dataset, learning_rate, epochs, layers,\n              augmentation=None, custom_callbacks=None, no_augmentation_sources=None):\n        """"""Train the model.\n        train_dataset, val_dataset: Training and validation Dataset objects.\n        learning_rate: The learning rate to train with\n        epochs: Number of training epochs. Note that previous training epochs\n                are considered to be done alreay, so this actually determines\n                the epochs to train in total rather than in this particaular\n                call.\n        layers: Allows selecting wich layers to train. It can be:\n            - A regular expression to match layer names to train\n            - One of these predefined values:\n              heads: The RPN, classifier and mask heads of the network\n              all: All the layers\n              3+: Train Resnet stage 3 and up\n              4+: Train Resnet stage 4 and up\n              5+: Train Resnet stage 5 and up\n        augmentation: Optional. An imgaug (https://github.com/aleju/imgaug)\n            augmentation. For example, passing imgaug.augmenters.Fliplr(0.5)\n            flips images right/left 50% of the time. You can pass complex\n            augmentations as well. This augmentation applies 50% of the\n            time, and when it does it flips images right/left half the time\n            and adds a Gaussian blur with a random sigma in range 0 to 5.\n\n                augmentation = imgaug.augmenters.Sometimes(0.5, [\n                    imgaug.augmenters.Fliplr(0.5),\n                    imgaug.augmenters.GaussianBlur(sigma=(0.0, 5.0))\n                ])\n\t    custom_callbacks: Optional. Add custom callbacks to be called\n\t        with the keras fit_generator method. Must be list of type keras.callbacks. \n        no_augmentation_sources: Optional. List of sources to exclude for\n            augmentation. A source is string that identifies a dataset and is\n            defined in the Dataset class.\n        """"""\n        assert self.mode == ""training"", ""Create model in training mode.""\n\n        # Pre-defined layer regular expressions\n        layer_regex = {\n            # all layers but the backbone\n            ""heads"": r""(mrcnn\\_.*)|(rpn\\_.*)|(fpn\\_.*)"",\n            # From a specific Resnet stage and up\n            ""3+"": r""(res3.*)|(bn3.*)|(res4.*)|(bn4.*)|(res5.*)|(bn5.*)|(mrcnn\\_.*)|(rpn\\_.*)|(fpn\\_.*)"",\n            ""4+"": r""(res4.*)|(bn4.*)|(res5.*)|(bn5.*)|(mrcnn\\_.*)|(rpn\\_.*)|(fpn\\_.*)"",\n            ""5+"": r""(res5.*)|(bn5.*)|(mrcnn\\_.*)|(rpn\\_.*)|(fpn\\_.*)"",\n            # All layers\n            ""all"": "".*"",\n        }\n        if layers in layer_regex.keys():\n            layers = layer_regex[layers]\n\n        # Data generators\n        train_generator = data_generator(train_dataset, self.config, shuffle=True,\n                                         augmentation=augmentation,\n                                         batch_size=self.config.BATCH_SIZE,\n                                         no_augmentation_sources=no_augmentation_sources)\n        val_generator = data_generator(val_dataset, self.config, shuffle=True,\n                                       batch_size=self.config.BATCH_SIZE)\n\n        # Callbacks\n        callbacks = [\n            keras.callbacks.TensorBoard(log_dir=self.log_dir,\n                                        histogram_freq=0, write_graph=True, write_images=False),\n            keras.callbacks.ModelCheckpoint(self.checkpoint_path,\n                                            verbose=0, save_weights_only=True),\n        ]\n\t\n        # Add custom callbacks to the list\n        if custom_callbacks:\n            callbacks += custom_callbacks\n\n        # Train\n        log(""\\nStarting at epoch {}. LR={}\\n"".format(self.epoch, learning_rate))\n        log(""Checkpoint Path: {}"".format(self.checkpoint_path))\n        self.set_trainable(layers)\n        self.compile(learning_rate, self.config.LEARNING_MOMENTUM)\n\n        # Work-around for Windows: Keras fails on Windows when using\n        # multiprocessing workers. See discussion here:\n        # https://github.com/matterport/Mask_RCNN/issues/13#issuecomment-353124009\n        if os.name is \'nt\':\n            workers = 0\n        else:\n            workers = multiprocessing.cpu_count()\n\n        self.keras_model.fit_generator(\n            train_generator,\n            initial_epoch=self.epoch,\n            epochs=epochs,\n            steps_per_epoch=self.config.STEPS_PER_EPOCH,\n            callbacks=callbacks,\n            validation_data=val_generator,\n            validation_steps=self.config.VALIDATION_STEPS,\n            max_queue_size=100,\n            workers=workers,\n            use_multiprocessing=True,\n        )\n        self.epoch = max(self.epoch, epochs)\n\n    def mold_inputs(self, images):\n        """"""Takes a list of images and modifies them to the format expected\n        as an input to the neural network.\n        images: List of image matrices [height,width,depth]. Images can have\n            different sizes.\n\n        Returns 3 Numpy matrices:\n        molded_images: [N, h, w, 3]. Images resized and normalized.\n        image_metas: [N, length of meta data]. Details about each image.\n        windows: [N, (y1, x1, y2, x2)]. The portion of the image that has the\n            original image (padding excluded).\n        """"""\n        molded_images = []\n        image_metas = []\n        windows = []\n        for image in images:\n            # Resize image\n            # TODO: move resizing to mold_image()\n            molded_image, window, scale, padding, crop = utils.resize_image(\n                image,\n                min_dim=self.config.IMAGE_MIN_DIM,\n                min_scale=self.config.IMAGE_MIN_SCALE,\n                max_dim=self.config.IMAGE_MAX_DIM,\n                mode=self.config.IMAGE_RESIZE_MODE)\n            molded_image = mold_image(molded_image, self.config)\n            # Build image_meta\n            image_meta = compose_image_meta(\n                0, image.shape, molded_image.shape, window, scale,\n                np.zeros([self.config.NUM_CLASSES], dtype=np.int32))\n            # Append\n            molded_images.append(molded_image)\n            windows.append(window)\n            image_metas.append(image_meta)\n        # Pack into arrays\n        molded_images = np.stack(molded_images)\n        image_metas = np.stack(image_metas)\n        windows = np.stack(windows)\n        return molded_images, image_metas, windows\n\n    def unmold_detections(self, detections, mrcnn_mask, original_image_shape,\n                          image_shape, window):\n        """"""Reformats the detections of one image from the format of the neural\n        network output to a format suitable for use in the rest of the\n        application.\n\n        detections: [N, (y1, x1, y2, x2, class_id, score)] in normalized coordinates\n        mrcnn_mask: [N, height, width, num_classes]\n        original_image_shape: [H, W, C] Original image shape before resizing\n        image_shape: [H, W, C] Shape of the image after resizing and padding\n        window: [y1, x1, y2, x2] Pixel coordinates of box in the image where the real\n                image is excluding the padding.\n\n        Returns:\n        boxes: [N, (y1, x1, y2, x2)] Bounding boxes in pixels\n        class_ids: [N] Integer class IDs for each bounding box\n        scores: [N] Float probability scores of the class_id\n        masks: [height, width, num_instances] Instance masks\n        """"""\n        # How many detections do we have?\n        # Detections array is padded with zeros. Find the first class_id == 0.\n        zero_ix = np.where(detections[:, 4] == 0)[0]\n        N = zero_ix[0] if zero_ix.shape[0] > 0 else detections.shape[0]\n\n        # Extract boxes, class_ids, scores, and class-specific masks\n        boxes = detections[:N, :4]\n        class_ids = detections[:N, 4].astype(np.int32)\n        scores = detections[:N, 5]\n        masks = mrcnn_mask[np.arange(N), :, :, class_ids]\n\n        # Translate normalized coordinates in the resized image to pixel\n        # coordinates in the original image before resizing\n        window = utils.norm_boxes(window, image_shape[:2])\n        wy1, wx1, wy2, wx2 = window\n        shift = np.array([wy1, wx1, wy1, wx1])\n        wh = wy2 - wy1  # window height\n        ww = wx2 - wx1  # window width\n        scale = np.array([wh, ww, wh, ww])\n        # Convert boxes to normalized coordinates on the window\n        boxes = np.divide(boxes - shift, scale)\n        # Convert boxes to pixel coordinates on the original image\n        boxes = utils.denorm_boxes(boxes, original_image_shape[:2])\n\n        # Filter out detections with zero area. Happens in early training when\n        # network weights are still random\n        exclude_ix = np.where(\n            (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]) <= 0)[0]\n        if exclude_ix.shape[0] > 0:\n            boxes = np.delete(boxes, exclude_ix, axis=0)\n            class_ids = np.delete(class_ids, exclude_ix, axis=0)\n            scores = np.delete(scores, exclude_ix, axis=0)\n            masks = np.delete(masks, exclude_ix, axis=0)\n            N = class_ids.shape[0]\n\n        # Resize masks to original image size and set boundary threshold.\n        full_masks = []\n        for i in range(N):\n            # Convert neural network mask to full size mask\n            full_mask = utils.unmold_mask(masks[i], boxes[i], original_image_shape)\n            full_masks.append(full_mask)\n        full_masks = np.stack(full_masks, axis=-1)\\\n            if full_masks else np.empty(original_image_shape[:2] + (0,))\n\n        return boxes, class_ids, scores, full_masks\n\n    def detect(self, images, verbose=0):\n        """"""Runs the detection pipeline.\n\n        images: List of images, potentially of different sizes.\n\n        Returns a list of dicts, one dict per image. The dict contains:\n        rois: [N, (y1, x1, y2, x2)] detection bounding boxes\n        class_ids: [N] int class IDs\n        scores: [N] float probability scores for the class IDs\n        masks: [H, W, N] instance binary masks\n        """"""\n        assert self.mode == ""inference"", ""Create model in inference mode.""\n        assert len(\n            images) == self.config.BATCH_SIZE, ""len(images) must be equal to BATCH_SIZE""\n\n        if verbose:\n            log(""Processing {} images"".format(len(images)))\n            for image in images:\n                log(""image"", image)\n\n        # Mold inputs to format expected by the neural network\n        molded_images, image_metas, windows = self.mold_inputs(images)\n\n        # Validate image sizes\n        # All images in a batch MUST be of the same size\n        image_shape = molded_images[0].shape\n        for g in molded_images[1:]:\n            assert g.shape == image_shape,\\\n                ""After resizing, all images must have the same size. Check IMAGE_RESIZE_MODE and image sizes.""\n\n        # Anchors\n        anchors = self.get_anchors(image_shape)\n        # Duplicate across the batch dimension because Keras requires it\n        # TODO: can this be optimized to avoid duplicating the anchors?\n        anchors = np.broadcast_to(anchors, (self.config.BATCH_SIZE,) + anchors.shape)\n\n        if verbose:\n            log(""molded_images"", molded_images)\n            log(""image_metas"", image_metas)\n            log(""anchors"", anchors)\n        # Run object detection\n        detections, _, _, mrcnn_mask, _, _, _ =\\\n            self.keras_model.predict([molded_images, image_metas, anchors], verbose=0)\n        # Process detections\n        results = []\n        for i, image in enumerate(images):\n            final_rois, final_class_ids, final_scores, final_masks =\\\n                self.unmold_detections(detections[i], mrcnn_mask[i],\n                                       image.shape, molded_images[i].shape,\n                                       windows[i])\n            results.append({\n                ""rois"": final_rois,\n                ""class_ids"": final_class_ids,\n                ""scores"": final_scores,\n                ""masks"": final_masks,\n            })\n        return results\n\n    def detect_molded(self, molded_images, image_metas, verbose=0):\n        """"""Runs the detection pipeline, but expect inputs that are\n        molded already. Used mostly for debugging and inspecting\n        the model.\n\n        molded_images: List of images loaded using load_image_gt()\n        image_metas: image meta data, also returned by load_image_gt()\n\n        Returns a list of dicts, one dict per image. The dict contains:\n        rois: [N, (y1, x1, y2, x2)] detection bounding boxes\n        class_ids: [N] int class IDs\n        scores: [N] float probability scores for the class IDs\n        masks: [H, W, N] instance binary masks\n        """"""\n        assert self.mode == ""inference"", ""Create model in inference mode.""\n        assert len(molded_images) == self.config.BATCH_SIZE,\\\n            ""Number of images must be equal to BATCH_SIZE""\n\n        if verbose:\n            log(""Processing {} images"".format(len(molded_images)))\n            for image in molded_images:\n                log(""image"", image)\n\n        # Validate image sizes\n        # All images in a batch MUST be of the same size\n        image_shape = molded_images[0].shape\n        for g in molded_images[1:]:\n            assert g.shape == image_shape, ""Images must have the same size""\n\n        # Anchors\n        anchors = self.get_anchors(image_shape)\n        # Duplicate across the batch dimension because Keras requires it\n        # TODO: can this be optimized to avoid duplicating the anchors?\n        anchors = np.broadcast_to(anchors, (self.config.BATCH_SIZE,) + anchors.shape)\n\n        if verbose:\n            log(""molded_images"", molded_images)\n            log(""image_metas"", image_metas)\n            log(""anchors"", anchors)\n        # Run object detection\n        detections, _, _, mrcnn_mask, _, _, _ =\\\n            self.keras_model.predict([molded_images, image_metas, anchors], verbose=0)\n        # Process detections\n        results = []\n        for i, image in enumerate(molded_images):\n            window = [0, 0, image.shape[0], image.shape[1]]\n            final_rois, final_class_ids, final_scores, final_masks =\\\n                self.unmold_detections(detections[i], mrcnn_mask[i],\n                                       image.shape, molded_images[i].shape,\n                                       window)\n            results.append({\n                ""rois"": final_rois,\n                ""class_ids"": final_class_ids,\n                ""scores"": final_scores,\n                ""masks"": final_masks,\n            })\n        return results\n\n    def get_anchors(self, image_shape):\n        """"""Returns anchor pyramid for the given image size.""""""\n        backbone_shapes = compute_backbone_shapes(self.config, image_shape)\n        # Cache anchors and reuse if image shape is the same\n        if not hasattr(self, ""_anchor_cache""):\n            self._anchor_cache = {}\n        if not tuple(image_shape) in self._anchor_cache:\n            # Generate Anchors\n            a = utils.generate_pyramid_anchors(\n                self.config.RPN_ANCHOR_SCALES,\n                self.config.RPN_ANCHOR_RATIOS,\n                backbone_shapes,\n                self.config.BACKBONE_STRIDES,\n                self.config.RPN_ANCHOR_STRIDE)\n            # Keep a copy of the latest anchors in pixel coordinates because\n            # it\'s used in inspect_model notebooks.\n            # TODO: Remove this after the notebook are refactored to not use it\n            self.anchors = a\n            # Normalize coordinates\n            self._anchor_cache[tuple(image_shape)] = utils.norm_boxes(a, image_shape[:2])\n        return self._anchor_cache[tuple(image_shape)]\n\n    def ancestor(self, tensor, name, checked=None):\n        """"""Finds the ancestor of a TF tensor in the computation graph.\n        tensor: TensorFlow symbolic tensor.\n        name: Name of ancestor tensor to find\n        checked: For internal use. A list of tensors that were already\n                 searched to avoid loops in traversing the graph.\n        """"""\n        checked = checked if checked is not None else []\n        # Put a limit on how deep we go to avoid very long loops\n        if len(checked) > 500:\n            return None\n        # Convert name to a regex and allow matching a number prefix\n        # because Keras adds them automatically\n        if isinstance(name, str):\n            name = re.compile(name.replace(""/"", r""(\\_\\d+)*/""))\n\n        parents = tensor.op.inputs\n        for p in parents:\n            if p in checked:\n                continue\n            if bool(re.fullmatch(name, p.name)):\n                return p\n            checked.append(p)\n            a = self.ancestor(p, name, checked)\n            if a is not None:\n                return a\n        return None\n\n    def find_trainable_layer(self, layer):\n        """"""If a layer is encapsulated by another layer, this function\n        digs through the encapsulation and returns the layer that holds\n        the weights.\n        """"""\n        if layer.__class__.__name__ == \'TimeDistributed\':\n            return self.find_trainable_layer(layer.layer)\n        return layer\n\n    def get_trainable_layers(self):\n        """"""Returns a list of layers that have weights.""""""\n        layers = []\n        # Loop through all layers\n        for l in self.keras_model.layers:\n            # If layer is a wrapper, find inner trainable layer\n            l = self.find_trainable_layer(l)\n            # Include layer if it has weights\n            if l.get_weights():\n                layers.append(l)\n        return layers\n\n    def run_graph(self, images, outputs, image_metas=None):\n        """"""Runs a sub-set of the computation graph that computes the given\n        outputs.\n\n        image_metas: If provided, the images are assumed to be already\n            molded (i.e. resized, padded, and normalized)\n\n        outputs: List of tuples (name, tensor) to compute. The tensors are\n            symbolic TensorFlow tensors and the names are for easy tracking.\n\n        Returns an ordered dict of results. Keys are the names received in the\n        input and values are Numpy arrays.\n        """"""\n        model = self.keras_model\n\n        # Organize desired outputs into an ordered dict\n        outputs = OrderedDict(outputs)\n        for o in outputs.values():\n            assert o is not None\n\n        # Build a Keras function to run parts of the computation graph\n        inputs = model.inputs\n        if model.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n        kf = K.function(model.inputs, list(outputs.values()))\n\n        # Prepare inputs\n        if image_metas is None:\n            molded_images, image_metas, _ = self.mold_inputs(images)\n        else:\n            molded_images = images\n        image_shape = molded_images[0].shape\n        # Anchors\n        anchors = self.get_anchors(image_shape)\n        # Duplicate across the batch dimension because Keras requires it\n        # TODO: can this be optimized to avoid duplicating the anchors?\n        anchors = np.broadcast_to(anchors, (self.config.BATCH_SIZE,) + anchors.shape)\n        model_in = [molded_images, image_metas, anchors]\n\n        # Run inference\n        if model.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            model_in.append(0.)\n        outputs_np = kf(model_in)\n\n        # Pack the generated Numpy arrays into a a dict and log the results.\n        outputs_np = OrderedDict([(k, v)\n                                  for k, v in zip(outputs.keys(), outputs_np)])\n        for k, v in outputs_np.items():\n            log(k, v)\n        return outputs_np\n\n\n############################################################\n#  Data Formatting\n############################################################\n\ndef compose_image_meta(image_id, original_image_shape, image_shape,\n                       window, scale, active_class_ids):\n    """"""Takes attributes of an image and puts them in one 1D array.\n\n    image_id: An int ID of the image. Useful for debugging.\n    original_image_shape: [H, W, C] before resizing or padding.\n    image_shape: [H, W, C] after resizing and padding\n    window: (y1, x1, y2, x2) in pixels. The area of the image where the real\n            image is (excluding the padding)\n    scale: The scaling factor applied to the original image (float32)\n    active_class_ids: List of class_ids available in the dataset from which\n        the image came. Useful if training on images from multiple datasets\n        where not all classes are present in all datasets.\n    """"""\n    meta = np.array(\n        [image_id] +                  # size=1\n        list(original_image_shape) +  # size=3\n        list(image_shape) +           # size=3\n        list(window) +                # size=4 (y1, x1, y2, x2) in image cooredinates\n        [scale] +                     # size=1\n        list(active_class_ids)        # size=num_classes\n    )\n    return meta\n\n\ndef parse_image_meta(meta):\n    """"""Parses an array that contains image attributes to its components.\n    See compose_image_meta() for more details.\n\n    meta: [batch, meta length] where meta length depends on NUM_CLASSES\n\n    Returns a dict of the parsed values.\n    """"""\n    image_id = meta[:, 0]\n    original_image_shape = meta[:, 1:4]\n    image_shape = meta[:, 4:7]\n    window = meta[:, 7:11]  # (y1, x1, y2, x2) window of image in in pixels\n    scale = meta[:, 11]\n    active_class_ids = meta[:, 12:]\n    return {\n        ""image_id"": image_id.astype(np.int32),\n        ""original_image_shape"": original_image_shape.astype(np.int32),\n        ""image_shape"": image_shape.astype(np.int32),\n        ""window"": window.astype(np.int32),\n        ""scale"": scale.astype(np.float32),\n        ""active_class_ids"": active_class_ids.astype(np.int32),\n    }\n\n\ndef parse_image_meta_graph(meta):\n    """"""Parses a tensor that contains image attributes to its components.\n    See compose_image_meta() for more details.\n\n    meta: [batch, meta length] where meta length depends on NUM_CLASSES\n\n    Returns a dict of the parsed tensors.\n    """"""\n    image_id = meta[:, 0]\n    original_image_shape = meta[:, 1:4]\n    image_shape = meta[:, 4:7]\n    window = meta[:, 7:11]  # (y1, x1, y2, x2) window of image in in pixels\n    scale = meta[:, 11]\n    active_class_ids = meta[:, 12:]\n    return {\n        ""image_id"": image_id,\n        ""original_image_shape"": original_image_shape,\n        ""image_shape"": image_shape,\n        ""window"": window,\n        ""scale"": scale,\n        ""active_class_ids"": active_class_ids,\n    }\n\n\ndef mold_image(images, config):\n    """"""Expects an RGB image (or array of images) and subtracts\n    the mean pixel and converts it to float. Expects image\n    colors in RGB order.\n    """"""\n    return images.astype(np.float32) - config.MEAN_PIXEL\n\n\ndef unmold_image(normalized_images, config):\n    """"""Takes a image normalized with mold() and returns the original.""""""\n    return (normalized_images + config.MEAN_PIXEL).astype(np.uint8)\n\n\n############################################################\n#  Miscellenous Graph Functions\n############################################################\n\ndef trim_zeros_graph(boxes, name=None):\n    """"""Often boxes are represented with matrices of shape [N, 4] and\n    are padded with zeros. This removes zero boxes.\n\n    boxes: [N, 4] matrix of boxes.\n    non_zeros: [N] a 1D boolean mask identifying the rows to keep\n    """"""\n    non_zeros = tf.cast(tf.reduce_sum(tf.abs(boxes), axis=1), tf.bool)\n    boxes = tf.boolean_mask(boxes, non_zeros, name=name)\n    return boxes, non_zeros\n\n\ndef batch_pack_graph(x, counts, num_rows):\n    """"""Picks different number of values from each row\n    in x depending on the values in counts.\n    """"""\n    outputs = []\n    for i in range(num_rows):\n        outputs.append(x[i, :counts[i]])\n    return tf.concat(outputs, axis=0)\n\n\ndef norm_boxes_graph(boxes, shape):\n    """"""Converts boxes from pixel coordinates to normalized coordinates.\n    boxes: [..., (y1, x1, y2, x2)] in pixel coordinates\n    shape: [..., (height, width)] in pixels\n\n    Note: In pixel coordinates (y2, x2) is outside the box. But in normalized\n    coordinates it\'s inside the box.\n\n    Returns:\n        [..., (y1, x1, y2, x2)] in normalized coordinates\n    """"""\n    h, w = tf.split(tf.cast(shape, tf.float32), 2)\n    scale = tf.concat([h, w, h, w], axis=-1) - tf.constant(1.0)\n    shift = tf.constant([0., 0., 1., 1.])\n    return tf.divide(boxes - shift, scale)\n\n\ndef denorm_boxes_graph(boxes, shape):\n    """"""Converts boxes from normalized coordinates to pixel coordinates.\n    boxes: [..., (y1, x1, y2, x2)] in normalized coordinates\n    shape: [..., (height, width)] in pixels\n\n    Note: In pixel coordinates (y2, x2) is outside the box. But in normalized\n    coordinates it\'s inside the box.\n\n    Returns:\n        [..., (y1, x1, y2, x2)] in pixel coordinates\n    """"""\n    h, w = tf.split(tf.cast(shape, tf.float32), 2)\n    scale = tf.concat([h, w, h, w], axis=-1) - tf.constant(1.0)\n    shift = tf.constant([0., 0., 1., 1.])\n    return tf.cast(tf.round(tf.multiply(boxes, scale) + shift), tf.int32)\n'"
mrcnn/parallel_model.py,2,"b'""""""\nMask R-CNN\nMulti-GPU Support for Keras.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n\nIdeas and a small code snippets from these sources:\nhttps://github.com/fchollet/keras/issues/2436\nhttps://medium.com/@kuza55/transparent-multi-gpu-training-on-tensorflow-with-keras-8b0016fd9012\nhttps://github.com/avolkov1/keras_experiments/blob/master/keras_exp/multigpu/\nhttps://github.com/fchollet/keras/blob/master/keras/utils/training_utils.py\n""""""\n\nimport tensorflow as tf\nimport keras.backend as K\nimport keras.layers as KL\nimport keras.models as KM\n\n\nclass ParallelModel(KM.Model):\n    """"""Subclasses the standard Keras Model and adds multi-GPU support.\n    It works by creating a copy of the model on each GPU. Then it slices\n    the inputs and sends a slice to each copy of the model, and then\n    merges the outputs together and applies the loss on the combined\n    outputs.\n    """"""\n\n    def __init__(self, keras_model, gpu_count):\n        """"""Class constructor.\n        keras_model: The Keras model to parallelize\n        gpu_count: Number of GPUs. Must be > 1\n        """"""\n        self.inner_model = keras_model\n        self.gpu_count = gpu_count\n        merged_outputs = self.make_parallel()\n        super(ParallelModel, self).__init__(inputs=self.inner_model.inputs,\n                                            outputs=merged_outputs)\n\n    def __getattribute__(self, attrname):\n        """"""Redirect loading and saving methods to the inner model. That\'s where\n        the weights are stored.""""""\n        if \'load\' in attrname or \'save\' in attrname:\n            return getattr(self.inner_model, attrname)\n        return super(ParallelModel, self).__getattribute__(attrname)\n\n    def summary(self, *args, **kwargs):\n        """"""Override summary() to display summaries of both, the wrapper\n        and inner models.""""""\n        super(ParallelModel, self).summary(*args, **kwargs)\n        self.inner_model.summary(*args, **kwargs)\n\n    def make_parallel(self):\n        """"""Creates a new wrapper model that consists of multiple replicas of\n        the original model placed on different GPUs.\n        """"""\n        # Slice inputs. Slice inputs on the CPU to avoid sending a copy\n        # of the full inputs to all GPUs. Saves on bandwidth and memory.\n        input_slices = {name: tf.split(x, self.gpu_count)\n                        for name, x in zip(self.inner_model.input_names,\n                                           self.inner_model.inputs)}\n\n        output_names = self.inner_model.output_names\n        outputs_all = []\n        for i in range(len(self.inner_model.outputs)):\n            outputs_all.append([])\n\n        # Run the model call() on each GPU to place the ops there\n        for i in range(self.gpu_count):\n            with tf.device(\'/gpu:%d\' % i):\n                with tf.name_scope(\'tower_%d\' % i):\n                    # Run a slice of inputs through this replica\n                    zipped_inputs = zip(self.inner_model.input_names,\n                                        self.inner_model.inputs)\n                    inputs = [\n                        KL.Lambda(lambda s: input_slices[name][i],\n                                  output_shape=lambda s: (None,) + s[1:])(tensor)\n                        for name, tensor in zipped_inputs]\n                    # Create the model replica and get the outputs\n                    outputs = self.inner_model(inputs)\n                    if not isinstance(outputs, list):\n                        outputs = [outputs]\n                    # Save the outputs for merging back together later\n                    for l, o in enumerate(outputs):\n                        outputs_all[l].append(o)\n\n        # Merge outputs on CPU\n        with tf.device(\'/cpu:0\'):\n            merged = []\n            for outputs, name in zip(outputs_all, output_names):\n                # Concatenate or average outputs?\n                # Outputs usually have a batch dimension and we concatenate\n                # across it. If they don\'t, then the output is likely a loss\n                # or a metric value that gets averaged across the batch.\n                # Keras expects losses and metrics to be scalars.\n                if K.int_shape(outputs[0]) == ():\n                    # Average\n                    m = KL.Lambda(lambda o: tf.add_n(o) / len(outputs), name=name)(outputs)\n                else:\n                    # Concatenate\n                    m = KL.Concatenate(axis=0, name=name)(outputs)\n                merged.append(m)\n        return merged\n\n\nif __name__ == ""__main__"":\n    # Testing code below. It creates a simple model to train on MNIST and\n    # tries to run it on 2 GPUs. It saves the graph so it can be viewed\n    # in TensorBoard. Run it as:\n    #\n    # python3 parallel_model.py\n\n    import os\n    import numpy as np\n    import keras.optimizers\n    from keras.datasets import mnist\n    from keras.preprocessing.image import ImageDataGenerator\n\n    GPU_COUNT = 2\n\n    # Root directory of the project\n    ROOT_DIR = os.path.abspath(""../"")\n\n    # Directory to save logs and trained model\n    MODEL_DIR = os.path.join(ROOT_DIR, ""logs"")\n\n    def build_model(x_train, num_classes):\n        # Reset default graph. Keras leaves old ops in the graph,\n        # which are ignored for execution but clutter graph\n        # visualization in TensorBoard.\n        tf.reset_default_graph()\n\n        inputs = KL.Input(shape=x_train.shape[1:], name=""input_image"")\n        x = KL.Conv2D(32, (3, 3), activation=\'relu\', padding=""same"",\n                      name=""conv1"")(inputs)\n        x = KL.Conv2D(64, (3, 3), activation=\'relu\', padding=""same"",\n                      name=""conv2"")(x)\n        x = KL.MaxPooling2D(pool_size=(2, 2), name=""pool1"")(x)\n        x = KL.Flatten(name=""flat1"")(x)\n        x = KL.Dense(128, activation=\'relu\', name=""dense1"")(x)\n        x = KL.Dense(num_classes, activation=\'softmax\', name=""dense2"")(x)\n\n        return KM.Model(inputs, x, ""digit_classifier_model"")\n\n    # Load MNIST Data\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n    x_train = np.expand_dims(x_train, -1).astype(\'float32\') / 255\n    x_test = np.expand_dims(x_test, -1).astype(\'float32\') / 255\n\n    print(\'x_train shape:\', x_train.shape)\n    print(\'x_test shape:\', x_test.shape)\n\n    # Build data generator and model\n    datagen = ImageDataGenerator()\n    model = build_model(x_train, 10)\n\n    # Add multi-GPU support.\n    model = ParallelModel(model, GPU_COUNT)\n\n    optimizer = keras.optimizers.SGD(lr=0.01, momentum=0.9, clipnorm=5.0)\n\n    model.compile(loss=\'sparse_categorical_crossentropy\',\n                  optimizer=optimizer, metrics=[\'accuracy\'])\n\n    model.summary()\n\n    # Train\n    model.fit_generator(\n        datagen.flow(x_train, y_train, batch_size=64),\n        steps_per_epoch=50, epochs=10, verbose=1,\n        validation_data=(x_test, y_test),\n        callbacks=[keras.callbacks.TensorBoard(log_dir=MODEL_DIR,\n                                               write_graph=True)]\n    )\n'"
mrcnn/utils.py,80,"b'""""""\nMask R-CNN\nCommon utility functions and classes.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n""""""\n\nimport sys\nimport os\nimport math\nimport random\nimport numpy as np\nimport tensorflow as tf\nimport scipy\nimport skimage.color\nimport skimage.io\nimport skimage.transform\nimport urllib.request\nimport shutil\nimport warnings\n\n# URL from which to download the latest COCO trained weights\nCOCO_MODEL_URL = ""https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5""\n\n\n############################################################\n#  Bounding Boxes\n############################################################\n\ndef extract_bboxes(mask):\n    """"""Compute bounding boxes from masks.\n    mask: [height, width, num_instances]. Mask pixels are either 1 or 0.\n\n    Returns: bbox array [num_instances, (y1, x1, y2, x2)].\n    """"""\n    boxes = np.zeros([mask.shape[-1], 4], dtype=np.int32)\n    for i in range(mask.shape[-1]):\n        m = mask[:, :, i]\n        # Bounding box.\n        horizontal_indicies = np.where(np.any(m, axis=0))[0]\n        vertical_indicies = np.where(np.any(m, axis=1))[0]\n        if horizontal_indicies.shape[0]:\n            x1, x2 = horizontal_indicies[[0, -1]]\n            y1, y2 = vertical_indicies[[0, -1]]\n            # x2 and y2 should not be part of the box. Increment by 1.\n            x2 += 1\n            y2 += 1\n        else:\n            # No mask for this instance. Might happen due to\n            # resizing or cropping. Set bbox to zeros\n            x1, x2, y1, y2 = 0, 0, 0, 0\n        boxes[i] = np.array([y1, x1, y2, x2])\n    return boxes.astype(np.int32)\n\n\ndef compute_iou(box, boxes, box_area, boxes_area):\n    """"""Calculates IoU of the given box with the array of the given boxes.\n    box: 1D vector [y1, x1, y2, x2]\n    boxes: [boxes_count, (y1, x1, y2, x2)]\n    box_area: float. the area of \'box\'\n    boxes_area: array of length boxes_count.\n\n    Note: the areas are passed in rather than calculated here for\n    efficiency. Calculate once in the caller to avoid duplicate work.\n    """"""\n    # Calculate intersection areas\n    y1 = np.maximum(box[0], boxes[:, 0])\n    y2 = np.minimum(box[2], boxes[:, 2])\n    x1 = np.maximum(box[1], boxes[:, 1])\n    x2 = np.minimum(box[3], boxes[:, 3])\n    intersection = np.maximum(x2 - x1, 0) * np.maximum(y2 - y1, 0)\n    union = box_area + boxes_area[:] - intersection[:]\n    iou = intersection / union\n    return iou\n\n\ndef compute_overlaps(boxes1, boxes2):\n    """"""Computes IoU overlaps between two sets of boxes.\n    boxes1, boxes2: [N, (y1, x1, y2, x2)].\n\n    For better performance, pass the largest set first and the smaller second.\n    """"""\n    # Areas of anchors and GT boxes\n    area1 = (boxes1[:, 2] - boxes1[:, 0]) * (boxes1[:, 3] - boxes1[:, 1])\n    area2 = (boxes2[:, 2] - boxes2[:, 0]) * (boxes2[:, 3] - boxes2[:, 1])\n\n    # Compute overlaps to generate matrix [boxes1 count, boxes2 count]\n    # Each cell contains the IoU value.\n    overlaps = np.zeros((boxes1.shape[0], boxes2.shape[0]))\n    for i in range(overlaps.shape[1]):\n        box2 = boxes2[i]\n        overlaps[:, i] = compute_iou(box2, boxes1, area2[i], area1)\n    return overlaps\n\n\ndef compute_overlaps_masks(masks1, masks2):\n    """"""Computes IoU overlaps between two sets of masks.\n    masks1, masks2: [Height, Width, instances]\n    """"""\n    \n    # If either set of masks is empty return empty result\n    if masks1.shape[0] == 0 or masks2.shape[0] == 0:\n        return np.zeros((masks1.shape[0], masks2.shape[-1]))\n    # flatten masks and compute their areas\n    masks1 = np.reshape(masks1 > .5, (-1, masks1.shape[-1])).astype(np.float32)\n    masks2 = np.reshape(masks2 > .5, (-1, masks2.shape[-1])).astype(np.float32)\n    area1 = np.sum(masks1, axis=0)\n    area2 = np.sum(masks2, axis=0)\n\n    # intersections and union\n    intersections = np.dot(masks1.T, masks2)\n    union = area1[:, None] + area2[None, :] - intersections\n    overlaps = intersections / union\n\n    return overlaps\n\n\ndef non_max_suppression(boxes, scores, threshold):\n    """"""Performs non-maximum suppression and returns indices of kept boxes.\n    boxes: [N, (y1, x1, y2, x2)]. Notice that (y2, x2) lays outside the box.\n    scores: 1-D array of box scores.\n    threshold: Float. IoU threshold to use for filtering.\n    """"""\n    assert boxes.shape[0] > 0\n    if boxes.dtype.kind != ""f"":\n        boxes = boxes.astype(np.float32)\n\n    # Compute box areas\n    y1 = boxes[:, 0]\n    x1 = boxes[:, 1]\n    y2 = boxes[:, 2]\n    x2 = boxes[:, 3]\n    area = (y2 - y1) * (x2 - x1)\n\n    # Get indicies of boxes sorted by scores (highest first)\n    ixs = scores.argsort()[::-1]\n\n    pick = []\n    while len(ixs) > 0:\n        # Pick top box and add its index to the list\n        i = ixs[0]\n        pick.append(i)\n        # Compute IoU of the picked box with the rest\n        iou = compute_iou(boxes[i], boxes[ixs[1:]], area[i], area[ixs[1:]])\n        # Identify boxes with IoU over the threshold. This\n        # returns indices into ixs[1:], so add 1 to get\n        # indices into ixs.\n        remove_ixs = np.where(iou > threshold)[0] + 1\n        # Remove indices of the picked and overlapped boxes.\n        ixs = np.delete(ixs, remove_ixs)\n        ixs = np.delete(ixs, 0)\n    return np.array(pick, dtype=np.int32)\n\n\ndef apply_box_deltas(boxes, deltas):\n    """"""Applies the given deltas to the given boxes.\n    boxes: [N, (y1, x1, y2, x2)]. Note that (y2, x2) is outside the box.\n    deltas: [N, (dy, dx, log(dh), log(dw))]\n    """"""\n    boxes = boxes.astype(np.float32)\n    # Convert to y, x, h, w\n    height = boxes[:, 2] - boxes[:, 0]\n    width = boxes[:, 3] - boxes[:, 1]\n    center_y = boxes[:, 0] + 0.5 * height\n    center_x = boxes[:, 1] + 0.5 * width\n    # Apply deltas\n    center_y += deltas[:, 0] * height\n    center_x += deltas[:, 1] * width\n    height *= np.exp(deltas[:, 2])\n    width *= np.exp(deltas[:, 3])\n    # Convert back to y1, x1, y2, x2\n    y1 = center_y - 0.5 * height\n    x1 = center_x - 0.5 * width\n    y2 = y1 + height\n    x2 = x1 + width\n    return np.stack([y1, x1, y2, x2], axis=1)\n\n\ndef box_refinement_graph(box, gt_box):\n    """"""Compute refinement needed to transform box to gt_box.\n    box and gt_box are [N, (y1, x1, y2, x2)]\n    """"""\n    box = tf.cast(box, tf.float32)\n    gt_box = tf.cast(gt_box, tf.float32)\n\n    height = box[:, 2] - box[:, 0]\n    width = box[:, 3] - box[:, 1]\n    center_y = box[:, 0] + 0.5 * height\n    center_x = box[:, 1] + 0.5 * width\n\n    gt_height = gt_box[:, 2] - gt_box[:, 0]\n    gt_width = gt_box[:, 3] - gt_box[:, 1]\n    gt_center_y = gt_box[:, 0] + 0.5 * gt_height\n    gt_center_x = gt_box[:, 1] + 0.5 * gt_width\n\n    dy = (gt_center_y - center_y) / height\n    dx = (gt_center_x - center_x) / width\n    dh = tf.log(gt_height / height)\n    dw = tf.log(gt_width / width)\n\n    result = tf.stack([dy, dx, dh, dw], axis=1)\n    return result\n\n\ndef box_refinement(box, gt_box):\n    """"""Compute refinement needed to transform box to gt_box.\n    box and gt_box are [N, (y1, x1, y2, x2)]. (y2, x2) is\n    assumed to be outside the box.\n    """"""\n    box = box.astype(np.float32)\n    gt_box = gt_box.astype(np.float32)\n\n    height = box[:, 2] - box[:, 0]\n    width = box[:, 3] - box[:, 1]\n    center_y = box[:, 0] + 0.5 * height\n    center_x = box[:, 1] + 0.5 * width\n\n    gt_height = gt_box[:, 2] - gt_box[:, 0]\n    gt_width = gt_box[:, 3] - gt_box[:, 1]\n    gt_center_y = gt_box[:, 0] + 0.5 * gt_height\n    gt_center_x = gt_box[:, 1] + 0.5 * gt_width\n\n    dy = (gt_center_y - center_y) / height\n    dx = (gt_center_x - center_x) / width\n    dh = np.log(gt_height / height)\n    dw = np.log(gt_width / width)\n\n    return np.stack([dy, dx, dh, dw], axis=1)\n\n\n############################################################\n#  Dataset\n############################################################\n\nclass Dataset(object):\n    """"""The base class for dataset classes.\n    To use it, create a new class that adds functions specific to the dataset\n    you want to use. For example:\n\n    class CatsAndDogsDataset(Dataset):\n        def load_cats_and_dogs(self):\n            ...\n        def load_mask(self, image_id):\n            ...\n        def image_reference(self, image_id):\n            ...\n\n    See COCODataset and ShapesDataset as examples.\n    """"""\n\n    def __init__(self, class_map=None):\n        self._image_ids = []\n        self.image_info = []\n        # Background is always the first class\n        self.class_info = [{""source"": """", ""id"": 0, ""name"": ""BG""}]\n        self.source_class_ids = {}\n\n    def add_class(self, source, class_id, class_name):\n        assert ""."" not in source, ""Source name cannot contain a dot""\n        # Does the class exist already?\n        for info in self.class_info:\n            if info[\'source\'] == source and info[""id""] == class_id:\n                # source.class_id combination already available, skip\n                return\n        # Add the class\n        self.class_info.append({\n            ""source"": source,\n            ""id"": class_id,\n            ""name"": class_name,\n        })\n\n    def add_image(self, source, image_id, path, **kwargs):\n        image_info = {\n            ""id"": image_id,\n            ""source"": source,\n            ""path"": path,\n        }\n        image_info.update(kwargs)\n        self.image_info.append(image_info)\n\n    def image_reference(self, image_id):\n        """"""Return a link to the image in its source Website or details about\n        the image that help looking it up or debugging it.\n\n        Override for your dataset, but pass to this function\n        if you encounter images not in your dataset.\n        """"""\n        return """"\n\n    def prepare(self, class_map=None):\n        """"""Prepares the Dataset class for use.\n\n        TODO: class map is not supported yet. When done, it should handle mapping\n              classes from different datasets to the same class ID.\n        """"""\n\n        def clean_name(name):\n            """"""Returns a shorter version of object names for cleaner display.""""""\n            return "","".join(name.split("","")[:1])\n\n        # Build (or rebuild) everything else from the info dicts.\n        self.num_classes = len(self.class_info)\n        self.class_ids = np.arange(self.num_classes)\n        self.class_names = [clean_name(c[""name""]) for c in self.class_info]\n        self.num_images = len(self.image_info)\n        self._image_ids = np.arange(self.num_images)\n\n        # Mapping from source class and image IDs to internal IDs\n        self.class_from_source_map = {""{}.{}"".format(info[\'source\'], info[\'id\']): id\n                                      for info, id in zip(self.class_info, self.class_ids)}\n        self.image_from_source_map = {""{}.{}"".format(info[\'source\'], info[\'id\']): id\n                                      for info, id in zip(self.image_info, self.image_ids)}\n\n        # Map sources to class_ids they support\n        self.sources = list(set([i[\'source\'] for i in self.class_info]))\n        self.source_class_ids = {}\n        # Loop over datasets\n        for source in self.sources:\n            self.source_class_ids[source] = []\n            # Find classes that belong to this dataset\n            for i, info in enumerate(self.class_info):\n                # Include BG class in all datasets\n                if i == 0 or source == info[\'source\']:\n                    self.source_class_ids[source].append(i)\n\n    def map_source_class_id(self, source_class_id):\n        """"""Takes a source class ID and returns the int class ID assigned to it.\n\n        For example:\n        dataset.map_source_class_id(""coco.12"") -> 23\n        """"""\n        return self.class_from_source_map[source_class_id]\n\n    def get_source_class_id(self, class_id, source):\n        """"""Map an internal class ID to the corresponding class ID in the source dataset.""""""\n        info = self.class_info[class_id]\n        assert info[\'source\'] == source\n        return info[\'id\']\n\n    def append_data(self, class_info, image_info):\n        self.external_to_class_id = {}\n        for i, c in enumerate(self.class_info):\n            for ds, id in c[""map""]:\n                self.external_to_class_id[ds + str(id)] = i\n\n        # Map external image IDs to internal ones.\n        self.external_to_image_id = {}\n        for i, info in enumerate(self.image_info):\n            self.external_to_image_id[info[""ds""] + str(info[""id""])] = i\n\n    @property\n    def image_ids(self):\n        return self._image_ids\n\n    def source_image_link(self, image_id):\n        """"""Returns the path or URL to the image.\n        Override this to return a URL to the image if it\'s available online for easy\n        debugging.\n        """"""\n        return self.image_info[image_id][""path""]\n\n    def load_image(self, image_id):\n        """"""Load the specified image and return a [H,W,3] Numpy array.\n        """"""\n        # Load image\n        image = skimage.io.imread(self.image_info[image_id][\'path\'])\n        # If grayscale. Convert to RGB for consistency.\n        if image.ndim != 3:\n            image = skimage.color.gray2rgb(image)\n        # If has an alpha channel, remove it for consistency\n        if image.shape[-1] == 4:\n            image = image[..., :3]\n        return image\n\n    def load_mask(self, image_id):\n        """"""Load instance masks for the given image.\n\n        Different datasets use different ways to store masks. Override this\n        method to load instance masks and return them in the form of am\n        array of binary masks of shape [height, width, instances].\n\n        Returns:\n            masks: A bool array of shape [height, width, instance count] with\n                a binary mask per instance.\n            class_ids: a 1D array of class IDs of the instance masks.\n        """"""\n        # Override this function to load a mask from your dataset.\n        # Otherwise, it returns an empty mask.\n        mask = np.empty([0, 0, 0])\n        class_ids = np.empty([0], np.int32)\n        return mask, class_ids\n\n\ndef resize_image(image, min_dim=None, max_dim=None, min_scale=None, mode=""square""):\n    """"""Resizes an image keeping the aspect ratio unchanged.\n\n    min_dim: if provided, resizes the image such that it\'s smaller\n        dimension == min_dim\n    max_dim: if provided, ensures that the image longest side doesn\'t\n        exceed this value.\n    min_scale: if provided, ensure that the image is scaled up by at least\n        this percent even if min_dim doesn\'t require it.\n    mode: Resizing mode.\n        none: No resizing. Return the image unchanged.\n        square: Resize and pad with zeros to get a square image\n            of size [max_dim, max_dim].\n        pad64: Pads width and height with zeros to make them multiples of 64.\n               If min_dim or min_scale are provided, it scales the image up\n               before padding. max_dim is ignored in this mode.\n               The multiple of 64 is needed to ensure smooth scaling of feature\n               maps up and down the 6 levels of the FPN pyramid (2**6=64).\n        crop: Picks random crops from the image. First, scales the image based\n              on min_dim and min_scale, then picks a random crop of\n              size min_dim x min_dim. Can be used in training only.\n              max_dim is not used in this mode.\n\n    Returns:\n    image: the resized image\n    window: (y1, x1, y2, x2). If max_dim is provided, padding might\n        be inserted in the returned image. If so, this window is the\n        coordinates of the image part of the full image (excluding\n        the padding). The x2, y2 pixels are not included.\n    scale: The scale factor used to resize the image\n    padding: Padding added to the image [(top, bottom), (left, right), (0, 0)]\n    """"""\n    # Keep track of image dtype and return results in the same dtype\n    image_dtype = image.dtype\n    # Default window (y1, x1, y2, x2) and default scale == 1.\n    h, w = image.shape[:2]\n    window = (0, 0, h, w)\n    scale = 1\n    padding = [(0, 0), (0, 0), (0, 0)]\n    crop = None\n\n    if mode == ""none"":\n        return image, window, scale, padding, crop\n\n    # Scale?\n    if min_dim:\n        # Scale up but not down\n        scale = max(1, min_dim / min(h, w))\n    if min_scale and scale < min_scale:\n        scale = min_scale\n\n    # Does it exceed max dim?\n    if max_dim and mode == ""square"":\n        image_max = max(h, w)\n        if round(image_max * scale) > max_dim:\n            scale = max_dim / image_max\n\n    # Resize image using bilinear interpolation\n    if scale != 1:\n        image = skimage.transform.resize(\n            image, (round(h * scale), round(w * scale)),\n            order=1, mode=""constant"", preserve_range=True)\n\n    # Need padding or cropping?\n    if mode == ""square"":\n        # Get new height and width\n        h, w = image.shape[:2]\n        top_pad = (max_dim - h) // 2\n        bottom_pad = max_dim - h - top_pad\n        left_pad = (max_dim - w) // 2\n        right_pad = max_dim - w - left_pad\n        padding = [(top_pad, bottom_pad), (left_pad, right_pad), (0, 0)]\n        image = np.pad(image, padding, mode=\'constant\', constant_values=0)\n        window = (top_pad, left_pad, h + top_pad, w + left_pad)\n    elif mode == ""pad64"":\n        h, w = image.shape[:2]\n        # Both sides must be divisible by 64\n        assert min_dim % 64 == 0, ""Minimum dimension must be a multiple of 64""\n        # Height\n        if h % 64 > 0:\n            max_h = h - (h % 64) + 64\n            top_pad = (max_h - h) // 2\n            bottom_pad = max_h - h - top_pad\n        else:\n            top_pad = bottom_pad = 0\n        # Width\n        if w % 64 > 0:\n            max_w = w - (w % 64) + 64\n            left_pad = (max_w - w) // 2\n            right_pad = max_w - w - left_pad\n        else:\n            left_pad = right_pad = 0\n        padding = [(top_pad, bottom_pad), (left_pad, right_pad), (0, 0)]\n        image = np.pad(image, padding, mode=\'constant\', constant_values=0)\n        window = (top_pad, left_pad, h + top_pad, w + left_pad)\n    elif mode == ""crop"":\n        # Pick a random crop\n        h, w = image.shape[:2]\n        y = random.randint(0, (h - min_dim))\n        x = random.randint(0, (w - min_dim))\n        crop = (y, x, min_dim, min_dim)\n        image = image[y:y + min_dim, x:x + min_dim]\n        window = (0, 0, min_dim, min_dim)\n    else:\n        raise Exception(""Mode {} not supported"".format(mode))\n    return image.astype(image_dtype), window, scale, padding, crop\n\n\ndef resize_mask(mask, scale, padding, crop=None):\n    """"""Resizes a mask using the given scale and padding.\n    Typically, you get the scale and padding from resize_image() to\n    ensure both, the image and the mask, are resized consistently.\n\n    scale: mask scaling factor\n    padding: Padding to add to the mask in the form\n            [(top, bottom), (left, right), (0, 0)]\n    """"""\n    # Suppress warning from scipy 0.13.0, the output shape of zoom() is\n    # calculated with round() instead of int()\n    with warnings.catch_warnings():\n        warnings.simplefilter(""ignore"")\n        mask = scipy.ndimage.zoom(mask, zoom=[scale, scale, 1], order=0)\n    if crop is not None:\n        y, x, h, w = crop\n        mask = mask[y:y + h, x:x + w]\n    else:\n        mask = np.pad(mask, padding, mode=\'constant\', constant_values=0)\n    return mask\n\n\ndef minimize_mask(bbox, mask, mini_shape):\n    """"""Resize masks to a smaller version to reduce memory load.\n    Mini-masks can be resized back to image scale using expand_masks()\n\n    See inspect_data.ipynb notebook for more details.\n    """"""\n    mini_mask = np.zeros(mini_shape + (mask.shape[-1],), dtype=bool)\n    for i in range(mask.shape[-1]):\n        # Pick slice and cast to bool in case load_mask() returned wrong dtype\n        m = mask[:, :, i].astype(bool)\n        y1, x1, y2, x2 = bbox[i][:4]\n        m = m[y1:y2, x1:x2]\n        if m.size == 0:\n            raise Exception(""Invalid bounding box with area of zero"")\n        # Resize with bilinear interpolation\n        m = skimage.transform.resize(m, mini_shape, order=1, mode=""constant"")\n        mini_mask[:, :, i] = np.around(m).astype(np.bool)\n    return mini_mask\n\n\ndef expand_mask(bbox, mini_mask, image_shape):\n    """"""Resizes mini masks back to image size. Reverses the change\n    of minimize_mask().\n\n    See inspect_data.ipynb notebook for more details.\n    """"""\n    mask = np.zeros(image_shape[:2] + (mini_mask.shape[-1],), dtype=bool)\n    for i in range(mask.shape[-1]):\n        m = mini_mask[:, :, i]\n        y1, x1, y2, x2 = bbox[i][:4]\n        h = y2 - y1\n        w = x2 - x1\n        # Resize with bilinear interpolation\n        m = skimage.transform.resize(m, (h, w), order=1, mode=""constant"")\n        mask[y1:y2, x1:x2, i] = np.around(m).astype(np.bool)\n    return mask\n\n\n# TODO: Build and use this function to reduce code duplication\ndef mold_mask(mask, config):\n    pass\n\n\ndef unmold_mask(mask, bbox, image_shape):\n    """"""Converts a mask generated by the neural network to a format similar\n    to its original shape.\n    mask: [height, width] of type float. A small, typically 28x28 mask.\n    bbox: [y1, x1, y2, x2]. The box to fit the mask in.\n\n    Returns a binary mask with the same size as the original image.\n    """"""\n    threshold = 0.5\n    y1, x1, y2, x2 = bbox\n    mask = skimage.transform.resize(mask, (y2 - y1, x2 - x1), order=1, mode=""constant"")\n    mask = np.where(mask >= threshold, 1, 0).astype(np.bool)\n\n    # Put the mask in the right location.\n    full_mask = np.zeros(image_shape[:2], dtype=np.bool)\n    full_mask[y1:y2, x1:x2] = mask\n    return full_mask\n\n\n############################################################\n#  Anchors\n############################################################\n\ndef generate_anchors(scales, ratios, shape, feature_stride, anchor_stride):\n    """"""\n    scales: 1D array of anchor sizes in pixels. Example: [32, 64, 128]\n    ratios: 1D array of anchor ratios of width/height. Example: [0.5, 1, 2]\n    shape: [height, width] spatial shape of the feature map over which\n            to generate anchors.\n    feature_stride: Stride of the feature map relative to the image in pixels.\n    anchor_stride: Stride of anchors on the feature map. For example, if the\n        value is 2 then generate anchors for every other feature map pixel.\n    """"""\n    # Get all combinations of scales and ratios\n    scales, ratios = np.meshgrid(np.array(scales), np.array(ratios))\n    scales = scales.flatten()\n    ratios = ratios.flatten()\n\n    # Enumerate heights and widths from scales and ratios\n    heights = scales / np.sqrt(ratios)\n    widths = scales * np.sqrt(ratios)\n\n    # Enumerate shifts in feature space\n    shifts_y = np.arange(0, shape[0], anchor_stride) * feature_stride\n    shifts_x = np.arange(0, shape[1], anchor_stride) * feature_stride\n    shifts_x, shifts_y = np.meshgrid(shifts_x, shifts_y)\n\n    # Enumerate combinations of shifts, widths, and heights\n    box_widths, box_centers_x = np.meshgrid(widths, shifts_x)\n    box_heights, box_centers_y = np.meshgrid(heights, shifts_y)\n\n    # Reshape to get a list of (y, x) and a list of (h, w)\n    box_centers = np.stack(\n        [box_centers_y, box_centers_x], axis=2).reshape([-1, 2])\n    box_sizes = np.stack([box_heights, box_widths], axis=2).reshape([-1, 2])\n\n    # Convert to corner coordinates (y1, x1, y2, x2)\n    boxes = np.concatenate([box_centers - 0.5 * box_sizes,\n                            box_centers + 0.5 * box_sizes], axis=1)\n    return boxes\n\n\ndef generate_pyramid_anchors(scales, ratios, feature_shapes, feature_strides,\n                             anchor_stride):\n    """"""Generate anchors at different levels of a feature pyramid. Each scale\n    is associated with a level of the pyramid, but each ratio is used in\n    all levels of the pyramid.\n\n    Returns:\n    anchors: [N, (y1, x1, y2, x2)]. All generated anchors in one array. Sorted\n        with the same order of the given scales. So, anchors of scale[0] come\n        first, then anchors of scale[1], and so on.\n    """"""\n    # Anchors\n    # [anchor_count, (y1, x1, y2, x2)]\n    anchors = []\n    for i in range(len(scales)):\n        anchors.append(generate_anchors(scales[i], ratios, feature_shapes[i],\n                                        feature_strides[i], anchor_stride))\n    return np.concatenate(anchors, axis=0)\n\n\n############################################################\n#  Miscellaneous\n############################################################\n\ndef trim_zeros(x):\n    """"""It\'s common to have tensors larger than the available data and\n    pad with zeros. This function removes rows that are all zeros.\n\n    x: [rows, columns].\n    """"""\n    assert len(x.shape) == 2\n    return x[~np.all(x == 0, axis=1)]\n\n\ndef compute_matches(gt_boxes, gt_class_ids, gt_masks,\n                    pred_boxes, pred_class_ids, pred_scores, pred_masks,\n                    iou_threshold=0.5, score_threshold=0.0):\n    """"""Finds matches between prediction and ground truth instances.\n\n    Returns:\n        gt_match: 1-D array. For each GT box it has the index of the matched\n                  predicted box.\n        pred_match: 1-D array. For each predicted box, it has the index of\n                    the matched ground truth box.\n        overlaps: [pred_boxes, gt_boxes] IoU overlaps.\n    """"""\n    # Trim zero padding\n    # TODO: cleaner to do zero unpadding upstream\n    gt_boxes = trim_zeros(gt_boxes)\n    gt_masks = gt_masks[..., :gt_boxes.shape[0]]\n    pred_boxes = trim_zeros(pred_boxes)\n    pred_scores = pred_scores[:pred_boxes.shape[0]]\n    # Sort predictions by score from high to low\n    indices = np.argsort(pred_scores)[::-1]\n    pred_boxes = pred_boxes[indices]\n    pred_class_ids = pred_class_ids[indices]\n    pred_scores = pred_scores[indices]\n    pred_masks = pred_masks[..., indices]\n\n    # Compute IoU overlaps [pred_masks, gt_masks]\n    overlaps = compute_overlaps_masks(pred_masks, gt_masks)\n\n    # Loop through predictions and find matching ground truth boxes\n    match_count = 0\n    pred_match = -1 * np.ones([pred_boxes.shape[0]])\n    gt_match = -1 * np.ones([gt_boxes.shape[0]])\n    for i in range(len(pred_boxes)):\n        # Find best matching ground truth box\n        # 1. Sort matches by score\n        sorted_ixs = np.argsort(overlaps[i])[::-1]\n        # 2. Remove low scores\n        low_score_idx = np.where(overlaps[i, sorted_ixs] < score_threshold)[0]\n        if low_score_idx.size > 0:\n            sorted_ixs = sorted_ixs[:low_score_idx[0]]\n        # 3. Find the match\n        for j in sorted_ixs:\n            # If ground truth box is already matched, go to next one\n            if gt_match[j] > 0:\n                continue\n            # If we reach IoU smaller than the threshold, end the loop\n            iou = overlaps[i, j]\n            if iou < iou_threshold:\n                break\n            # Do we have a match?\n            if pred_class_ids[i] == gt_class_ids[j]:\n                match_count += 1\n                gt_match[j] = i\n                pred_match[i] = j\n                break\n\n    return gt_match, pred_match, overlaps\n\n\ndef compute_ap(gt_boxes, gt_class_ids, gt_masks,\n               pred_boxes, pred_class_ids, pred_scores, pred_masks,\n               iou_threshold=0.5):\n    """"""Compute Average Precision at a set IoU threshold (default 0.5).\n\n    Returns:\n    mAP: Mean Average Precision\n    precisions: List of precisions at different class score thresholds.\n    recalls: List of recall values at different class score thresholds.\n    overlaps: [pred_boxes, gt_boxes] IoU overlaps.\n    """"""\n    # Get matches and overlaps\n    gt_match, pred_match, overlaps = compute_matches(\n        gt_boxes, gt_class_ids, gt_masks,\n        pred_boxes, pred_class_ids, pred_scores, pred_masks,\n        iou_threshold)\n\n    # Compute precision and recall at each prediction box step\n    precisions = np.cumsum(pred_match > -1) / (np.arange(len(pred_match)) + 1)\n    recalls = np.cumsum(pred_match > -1).astype(np.float32) / len(gt_match)\n\n    # Pad with start and end values to simplify the math\n    precisions = np.concatenate([[0], precisions, [0]])\n    recalls = np.concatenate([[0], recalls, [1]])\n\n    # Ensure precision values decrease but don\'t increase. This way, the\n    # precision value at each recall threshold is the maximum it can be\n    # for all following recall thresholds, as specified by the VOC paper.\n    for i in range(len(precisions) - 2, -1, -1):\n        precisions[i] = np.maximum(precisions[i], precisions[i + 1])\n\n    # Compute mean AP over recall range\n    indices = np.where(recalls[:-1] != recalls[1:])[0] + 1\n    mAP = np.sum((recalls[indices] - recalls[indices - 1]) *\n                 precisions[indices])\n\n    return mAP, precisions, recalls, overlaps\n\n\ndef compute_ap_range(gt_box, gt_class_id, gt_mask,\n                     pred_box, pred_class_id, pred_score, pred_mask,\n                     iou_thresholds=None, verbose=1):\n    """"""Compute AP over a range or IoU thresholds. Default range is 0.5-0.95.""""""\n    # Default is 0.5 to 0.95 with increments of 0.05\n    iou_thresholds = iou_thresholds or np.arange(0.5, 1.0, 0.05)\n    \n    # Compute AP over range of IoU thresholds\n    AP = []\n    for iou_threshold in iou_thresholds:\n        ap, precisions, recalls, overlaps =\\\n            compute_ap(gt_box, gt_class_id, gt_mask,\n                        pred_box, pred_class_id, pred_score, pred_mask,\n                        iou_threshold=iou_threshold)\n        if verbose:\n            print(""AP @{:.2f}:\\t {:.3f}"".format(iou_threshold, ap))\n        AP.append(ap)\n    AP = np.array(AP).mean()\n    if verbose:\n        print(""AP @{:.2f}-{:.2f}:\\t {:.3f}"".format(\n            iou_thresholds[0], iou_thresholds[-1], AP))\n    return AP\n\n\ndef compute_recall(pred_boxes, gt_boxes, iou):\n    """"""Compute the recall at the given IoU threshold. It\'s an indication\n    of how many GT boxes were found by the given prediction boxes.\n\n    pred_boxes: [N, (y1, x1, y2, x2)] in image coordinates\n    gt_boxes: [N, (y1, x1, y2, x2)] in image coordinates\n    """"""\n    # Measure overlaps\n    overlaps = compute_overlaps(pred_boxes, gt_boxes)\n    iou_max = np.max(overlaps, axis=1)\n    iou_argmax = np.argmax(overlaps, axis=1)\n    positive_ids = np.where(iou_max >= iou)[0]\n    matched_gt_boxes = iou_argmax[positive_ids]\n\n    recall = len(set(matched_gt_boxes)) / gt_boxes.shape[0]\n    return recall, positive_ids\n\n\n# ## Batch Slicing\n# Some custom layers support a batch size of 1 only, and require a lot of work\n# to support batches greater than 1. This function slices an input tensor\n# across the batch dimension and feeds batches of size 1. Effectively,\n# an easy way to support batches > 1 quickly with little code modification.\n# In the long run, it\'s more efficient to modify the code to support large\n# batches and getting rid of this function. Consider this a temporary solution\ndef batch_slice(inputs, graph_fn, batch_size, names=None):\n    """"""Splits inputs into slices and feeds each slice to a copy of the given\n    computation graph and then combines the results. It allows you to run a\n    graph on a batch of inputs even if the graph is written to support one\n    instance only.\n\n    inputs: list of tensors. All must have the same first dimension length\n    graph_fn: A function that returns a TF tensor that\'s part of a graph.\n    batch_size: number of slices to divide the data into.\n    names: If provided, assigns names to the resulting tensors.\n    """"""\n    if not isinstance(inputs, list):\n        inputs = [inputs]\n\n    outputs = []\n    for i in range(batch_size):\n        inputs_slice = [x[i] for x in inputs]\n        output_slice = graph_fn(*inputs_slice)\n        if not isinstance(output_slice, (tuple, list)):\n            output_slice = [output_slice]\n        outputs.append(output_slice)\n    # Change outputs from a list of slices where each is\n    # a list of outputs to a list of outputs and each has\n    # a list of slices\n    outputs = list(zip(*outputs))\n\n    if names is None:\n        names = [None] * len(outputs)\n\n    result = [tf.stack(o, axis=0, name=n)\n              for o, n in zip(outputs, names)]\n    if len(result) == 1:\n        result = result[0]\n\n    return result\n\n\ndef download_trained_weights(coco_model_path, verbose=1):\n    """"""Download COCO trained weights from Releases.\n\n    coco_model_path: local path of COCO trained weights\n    """"""\n    if verbose > 0:\n        print(""Downloading pretrained model to "" + coco_model_path + "" ..."")\n    with urllib.request.urlopen(COCO_MODEL_URL) as resp, open(coco_model_path, \'wb\') as out:\n        shutil.copyfileobj(resp, out)\n    if verbose > 0:\n        print(""... done downloading pretrained model!"")\n\n\ndef norm_boxes(boxes, shape):\n    """"""Converts boxes from pixel coordinates to normalized coordinates.\n    boxes: [N, (y1, x1, y2, x2)] in pixel coordinates\n    shape: [..., (height, width)] in pixels\n\n    Note: In pixel coordinates (y2, x2) is outside the box. But in normalized\n    coordinates it\'s inside the box.\n\n    Returns:\n        [N, (y1, x1, y2, x2)] in normalized coordinates\n    """"""\n    h, w = shape\n    scale = np.array([h - 1, w - 1, h - 1, w - 1])\n    shift = np.array([0, 0, 1, 1])\n    return np.divide((boxes - shift), scale).astype(np.float32)\n\n\ndef denorm_boxes(boxes, shape):\n    """"""Converts boxes from normalized coordinates to pixel coordinates.\n    boxes: [N, (y1, x1, y2, x2)] in normalized coordinates\n    shape: [..., (height, width)] in pixels\n\n    Note: In pixel coordinates (y2, x2) is outside the box. But in normalized\n    coordinates it\'s inside the box.\n\n    Returns:\n        [N, (y1, x1, y2, x2)] in pixel coordinates\n    """"""\n    h, w = shape\n    scale = np.array([h - 1, w - 1, h - 1, w - 1])\n    shift = np.array([0, 0, 1, 1])\n    return np.around(np.multiply(boxes, scale) + shift).astype(np.int32)\n'"
mrcnn/visualize.py,30,"b'""""""\nMask R-CNN\nDisplay and Visualization Functions.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n""""""\n\nimport os\nimport sys\nimport random\nimport itertools\nimport colorsys\n\nimport numpy as np\nfrom skimage.measure import find_contours\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches,  lines\nfrom matplotlib.patches import Polygon\nimport IPython.display\n\n# Root directory of the project\nROOT_DIR = os.path.abspath(""../"")\n\n# Import Mask RCNN\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn import utils\n\n\n############################################################\n#  Visualization\n############################################################\n\ndef display_images(images, titles=None, cols=4, cmap=None, norm=None,\n                   interpolation=None):\n    """"""Display the given set of images, optionally with titles.\n    images: list or array of image tensors in HWC format.\n    titles: optional. A list of titles to display with each image.\n    cols: number of images per row\n    cmap: Optional. Color map to use. For example, ""Blues"".\n    norm: Optional. A Normalize instance to map values to colors.\n    interpolation: Optional. Image interpolation to use for display.\n    """"""\n    titles = titles if titles is not None else [""""] * len(images)\n    rows = len(images) // cols + 1\n    plt.figure(figsize=(14, 14 * rows // cols))\n    i = 1\n    for image, title in zip(images, titles):\n        plt.subplot(rows, cols, i)\n        plt.title(title, fontsize=9)\n        plt.axis(\'off\')\n        plt.imshow(image.astype(np.uint8), cmap=cmap,\n                   norm=norm, interpolation=interpolation)\n        i += 1\n    plt.show()\n\n\ndef random_colors(N, bright=True):\n    """"""\n    Generate random colors.\n    To get visually distinct colors, generate them in HSV space then\n    convert to RGB.\n    """"""\n    brightness = 1.0 if bright else 0.7\n    hsv = [(i / N, 1, brightness) for i in range(N)]\n    colors = list(map(lambda c: colorsys.hsv_to_rgb(*c), hsv))\n    random.shuffle(colors)\n    return colors\n\n\ndef apply_mask(image, mask, color, alpha=0.5):\n    """"""Apply the given mask to the image.\n    """"""\n    for c in range(3):\n        image[:, :, c] = np.where(mask == 1,\n                                  image[:, :, c] *\n                                  (1 - alpha) + alpha * color[c] * 255,\n                                  image[:, :, c])\n    return image\n\n\ndef display_instances(image, boxes, masks, class_ids, class_names,\n                      scores=None, title="""",\n                      figsize=(16, 16), ax=None,\n                      show_mask=True, show_bbox=True,\n                      colors=None, captions=None):\n    """"""\n    boxes: [num_instance, (y1, x1, y2, x2, class_id)] in image coordinates.\n    masks: [height, width, num_instances]\n    class_ids: [num_instances]\n    class_names: list of class names of the dataset\n    scores: (optional) confidence scores for each box\n    title: (optional) Figure title\n    show_mask, show_bbox: To show masks and bounding boxes or not\n    figsize: (optional) the size of the image\n    colors: (optional) An array or colors to use with each object\n    captions: (optional) A list of strings to use as captions for each object\n    """"""\n    # Number of instances\n    N = boxes.shape[0]\n    if not N:\n        print(""\\n*** No instances to display *** \\n"")\n    else:\n        assert boxes.shape[0] == masks.shape[-1] == class_ids.shape[0]\n\n    # If no axis is passed, create one and automatically call show()\n    auto_show = False\n    if not ax:\n        _, ax = plt.subplots(1, figsize=figsize)\n        auto_show = True\n\n    # Generate random colors\n    colors = colors or random_colors(N)\n\n    # Show area outside image boundaries.\n    height, width = image.shape[:2]\n    ax.set_ylim(height + 10, -10)\n    ax.set_xlim(-10, width + 10)\n    ax.axis(\'off\')\n    ax.set_title(title)\n\n    masked_image = image.astype(np.uint32).copy()\n    for i in range(N):\n        color = colors[i]\n\n        # Bounding box\n        if not np.any(boxes[i]):\n            # Skip this instance. Has no bbox. Likely lost in image cropping.\n            continue\n        y1, x1, y2, x2 = boxes[i]\n        if show_bbox:\n            p = patches.Rectangle((x1, y1), x2 - x1, y2 - y1, linewidth=2,\n                                alpha=0.7, linestyle=""dashed"",\n                                edgecolor=color, facecolor=\'none\')\n            ax.add_patch(p)\n\n        # Label\n        if not captions:\n            class_id = class_ids[i]\n            score = scores[i] if scores is not None else None\n            label = class_names[class_id]\n            x = random.randint(x1, (x1 + x2) // 2)\n            caption = ""{} {:.3f}"".format(label, score) if score else label\n        else:\n            caption = captions[i]\n        ax.text(x1, y1 + 8, caption,\n                color=\'w\', size=11, backgroundcolor=""none"")\n\n        # Mask\n        mask = masks[:, :, i]\n        if show_mask:\n            masked_image = apply_mask(masked_image, mask, color)\n\n        # Mask Polygon\n        # Pad to ensure proper polygons for masks that touch image edges.\n        padded_mask = np.zeros(\n            (mask.shape[0] + 2, mask.shape[1] + 2), dtype=np.uint8)\n        padded_mask[1:-1, 1:-1] = mask\n        contours = find_contours(padded_mask, 0.5)\n        for verts in contours:\n            # Subtract the padding and flip (y, x) to (x, y)\n            verts = np.fliplr(verts) - 1\n            p = Polygon(verts, facecolor=""none"", edgecolor=color)\n            ax.add_patch(p)\n    ax.imshow(masked_image.astype(np.uint8))\n    if auto_show:\n        plt.show()\n\n\ndef display_differences(image,\n                        gt_box, gt_class_id, gt_mask,\n                        pred_box, pred_class_id, pred_score, pred_mask,\n                        class_names, title="""", ax=None,\n                        show_mask=True, show_box=True,\n                        iou_threshold=0.5, score_threshold=0.5):\n    """"""Display ground truth and prediction instances on the same image.""""""\n    # Match predictions to ground truth\n    gt_match, pred_match, overlaps = utils.compute_matches(\n        gt_box, gt_class_id, gt_mask,\n        pred_box, pred_class_id, pred_score, pred_mask,\n        iou_threshold=iou_threshold, score_threshold=score_threshold)\n    # Ground truth = green. Predictions = red\n    colors = [(0, 1, 0, .8)] * len(gt_match)\\\n           + [(1, 0, 0, 1)] * len(pred_match)\n    # Concatenate GT and predictions\n    class_ids = np.concatenate([gt_class_id, pred_class_id])\n    scores = np.concatenate([np.zeros([len(gt_match)]), pred_score])\n    boxes = np.concatenate([gt_box, pred_box])\n    masks = np.concatenate([gt_mask, pred_mask], axis=-1)\n    # Captions per instance show score/IoU\n    captions = ["""" for m in gt_match] + [""{:.2f} / {:.2f}"".format(\n        pred_score[i],\n        (overlaps[i, int(pred_match[i])]\n            if pred_match[i] > -1 else overlaps[i].max()))\n            for i in range(len(pred_match))]\n    # Set title if not provided\n    title = title or ""Ground Truth and Detections\\n GT=green, pred=red, captions: score/IoU""\n    # Display\n    display_instances(\n        image,\n        boxes, masks, class_ids,\n        class_names, scores, ax=ax,\n        show_bbox=show_box, show_mask=show_mask,\n        colors=colors, captions=captions,\n        title=title)\n\n\ndef draw_rois(image, rois, refined_rois, mask, class_ids, class_names, limit=10):\n    """"""\n    anchors: [n, (y1, x1, y2, x2)] list of anchors in image coordinates.\n    proposals: [n, 4] the same anchors but refined to fit objects better.\n    """"""\n    masked_image = image.copy()\n\n    # Pick random anchors in case there are too many.\n    ids = np.arange(rois.shape[0], dtype=np.int32)\n    ids = np.random.choice(\n        ids, limit, replace=False) if ids.shape[0] > limit else ids\n\n    fig, ax = plt.subplots(1, figsize=(12, 12))\n    if rois.shape[0] > limit:\n        plt.title(""Showing {} random ROIs out of {}"".format(\n            len(ids), rois.shape[0]))\n    else:\n        plt.title(""{} ROIs"".format(len(ids)))\n\n    # Show area outside image boundaries.\n    ax.set_ylim(image.shape[0] + 20, -20)\n    ax.set_xlim(-50, image.shape[1] + 20)\n    ax.axis(\'off\')\n\n    for i, id in enumerate(ids):\n        color = np.random.rand(3)\n        class_id = class_ids[id]\n        # ROI\n        y1, x1, y2, x2 = rois[id]\n        p = patches.Rectangle((x1, y1), x2 - x1, y2 - y1, linewidth=2,\n                              edgecolor=color if class_id else ""gray"",\n                              facecolor=\'none\', linestyle=""dashed"")\n        ax.add_patch(p)\n        # Refined ROI\n        if class_id:\n            ry1, rx1, ry2, rx2 = refined_rois[id]\n            p = patches.Rectangle((rx1, ry1), rx2 - rx1, ry2 - ry1, linewidth=2,\n                                  edgecolor=color, facecolor=\'none\')\n            ax.add_patch(p)\n            # Connect the top-left corners of the anchor and proposal for easy visualization\n            ax.add_line(lines.Line2D([x1, rx1], [y1, ry1], color=color))\n\n            # Label\n            label = class_names[class_id]\n            ax.text(rx1, ry1 + 8, ""{}"".format(label),\n                    color=\'w\', size=11, backgroundcolor=""none"")\n\n            # Mask\n            m = utils.unmold_mask(mask[id], rois[id]\n                                  [:4].astype(np.int32), image.shape)\n            masked_image = apply_mask(masked_image, m, color)\n\n    ax.imshow(masked_image)\n\n    # Print stats\n    print(""Positive ROIs: "", class_ids[class_ids > 0].shape[0])\n    print(""Negative ROIs: "", class_ids[class_ids == 0].shape[0])\n    print(""Positive Ratio: {:.2f}"".format(\n        class_ids[class_ids > 0].shape[0] / class_ids.shape[0]))\n\n\n# TODO: Replace with matplotlib equivalent?\ndef draw_box(image, box, color):\n    """"""Draw 3-pixel width bounding boxes on the given image array.\n    color: list of 3 int values for RGB.\n    """"""\n    y1, x1, y2, x2 = box\n    image[y1:y1 + 2, x1:x2] = color\n    image[y2:y2 + 2, x1:x2] = color\n    image[y1:y2, x1:x1 + 2] = color\n    image[y1:y2, x2:x2 + 2] = color\n    return image\n\n\ndef display_top_masks(image, mask, class_ids, class_names, limit=4):\n    """"""Display the given image and the top few class masks.""""""\n    to_display = []\n    titles = []\n    to_display.append(image)\n    titles.append(""H x W={}x{}"".format(image.shape[0], image.shape[1]))\n    # Pick top prominent classes in this image\n    unique_class_ids = np.unique(class_ids)\n    mask_area = [np.sum(mask[:, :, np.where(class_ids == i)[0]])\n                 for i in unique_class_ids]\n    top_ids = [v[0] for v in sorted(zip(unique_class_ids, mask_area),\n                                    key=lambda r: r[1], reverse=True) if v[1] > 0]\n    # Generate images and titles\n    for i in range(limit):\n        class_id = top_ids[i] if i < len(top_ids) else -1\n        # Pull masks of instances belonging to the same class.\n        m = mask[:, :, np.where(class_ids == class_id)[0]]\n        m = np.sum(m * np.arange(1, m.shape[-1] + 1), -1)\n        to_display.append(m)\n        titles.append(class_names[class_id] if class_id != -1 else ""-"")\n    display_images(to_display, titles=titles, cols=limit + 1, cmap=""Blues_r"")\n\n\ndef plot_precision_recall(AP, precisions, recalls):\n    """"""Draw the precision-recall curve.\n\n    AP: Average precision at IoU >= 0.5\n    precisions: list of precision values\n    recalls: list of recall values\n    """"""\n    # Plot the Precision-Recall curve\n    _, ax = plt.subplots(1)\n    ax.set_title(""Precision-Recall Curve. AP@50 = {:.3f}"".format(AP))\n    ax.set_ylim(0, 1.1)\n    ax.set_xlim(0, 1.1)\n    _ = ax.plot(recalls, precisions)\n\n\ndef plot_overlaps(gt_class_ids, pred_class_ids, pred_scores,\n                  overlaps, class_names, threshold=0.5):\n    """"""Draw a grid showing how ground truth objects are classified.\n    gt_class_ids: [N] int. Ground truth class IDs\n    pred_class_id: [N] int. Predicted class IDs\n    pred_scores: [N] float. The probability scores of predicted classes\n    overlaps: [pred_boxes, gt_boxes] IoU overlaps of predictions and GT boxes.\n    class_names: list of all class names in the dataset\n    threshold: Float. The prediction probability required to predict a class\n    """"""\n    gt_class_ids = gt_class_ids[gt_class_ids != 0]\n    pred_class_ids = pred_class_ids[pred_class_ids != 0]\n\n    plt.figure(figsize=(12, 10))\n    plt.imshow(overlaps, interpolation=\'nearest\', cmap=plt.cm.Blues)\n    plt.yticks(np.arange(len(pred_class_ids)),\n               [""{} ({:.2f})"".format(class_names[int(id)], pred_scores[i])\n                for i, id in enumerate(pred_class_ids)])\n    plt.xticks(np.arange(len(gt_class_ids)),\n               [class_names[int(id)] for id in gt_class_ids], rotation=90)\n\n    thresh = overlaps.max() / 2.\n    for i, j in itertools.product(range(overlaps.shape[0]),\n                                  range(overlaps.shape[1])):\n        text = """"\n        if overlaps[i, j] > threshold:\n            text = ""match"" if gt_class_ids[j] == pred_class_ids[i] else ""wrong""\n        color = (""white"" if overlaps[i, j] > thresh\n                 else ""black"" if overlaps[i, j] > 0\n                 else ""grey"")\n        plt.text(j, i, ""{:.3f}\\n{}"".format(overlaps[i, j], text),\n                 horizontalalignment=""center"", verticalalignment=""center"",\n                 fontsize=9, color=color)\n\n    plt.tight_layout()\n    plt.xlabel(""Ground Truth"")\n    plt.ylabel(""Predictions"")\n\n\ndef draw_boxes(image, boxes=None, refined_boxes=None,\n               masks=None, captions=None, visibilities=None,\n               title="""", ax=None):\n    """"""Draw bounding boxes and segmentation masks with different\n    customizations.\n\n    boxes: [N, (y1, x1, y2, x2, class_id)] in image coordinates.\n    refined_boxes: Like boxes, but draw with solid lines to show\n        that they\'re the result of refining \'boxes\'.\n    masks: [N, height, width]\n    captions: List of N titles to display on each box\n    visibilities: (optional) List of values of 0, 1, or 2. Determine how\n        prominent each bounding box should be.\n    title: An optional title to show over the image\n    ax: (optional) Matplotlib axis to draw on.\n    """"""\n    # Number of boxes\n    assert boxes is not None or refined_boxes is not None\n    N = boxes.shape[0] if boxes is not None else refined_boxes.shape[0]\n\n    # Matplotlib Axis\n    if not ax:\n        _, ax = plt.subplots(1, figsize=(12, 12))\n\n    # Generate random colors\n    colors = random_colors(N)\n\n    # Show area outside image boundaries.\n    margin = image.shape[0] // 10\n    ax.set_ylim(image.shape[0] + margin, -margin)\n    ax.set_xlim(-margin, image.shape[1] + margin)\n    ax.axis(\'off\')\n\n    ax.set_title(title)\n\n    masked_image = image.astype(np.uint32).copy()\n    for i in range(N):\n        # Box visibility\n        visibility = visibilities[i] if visibilities is not None else 1\n        if visibility == 0:\n            color = ""gray""\n            style = ""dotted""\n            alpha = 0.5\n        elif visibility == 1:\n            color = colors[i]\n            style = ""dotted""\n            alpha = 1\n        elif visibility == 2:\n            color = colors[i]\n            style = ""solid""\n            alpha = 1\n\n        # Boxes\n        if boxes is not None:\n            if not np.any(boxes[i]):\n                # Skip this instance. Has no bbox. Likely lost in cropping.\n                continue\n            y1, x1, y2, x2 = boxes[i]\n            p = patches.Rectangle((x1, y1), x2 - x1, y2 - y1, linewidth=2,\n                                  alpha=alpha, linestyle=style,\n                                  edgecolor=color, facecolor=\'none\')\n            ax.add_patch(p)\n\n        # Refined boxes\n        if refined_boxes is not None and visibility > 0:\n            ry1, rx1, ry2, rx2 = refined_boxes[i].astype(np.int32)\n            p = patches.Rectangle((rx1, ry1), rx2 - rx1, ry2 - ry1, linewidth=2,\n                                  edgecolor=color, facecolor=\'none\')\n            ax.add_patch(p)\n            # Connect the top-left corners of the anchor and proposal\n            if boxes is not None:\n                ax.add_line(lines.Line2D([x1, rx1], [y1, ry1], color=color))\n\n        # Captions\n        if captions is not None:\n            caption = captions[i]\n            # If there are refined boxes, display captions on them\n            if refined_boxes is not None:\n                y1, x1, y2, x2 = ry1, rx1, ry2, rx2\n            x = random.randint(x1, (x1 + x2) // 2)\n            ax.text(x1, y1, caption, size=11, verticalalignment=\'top\',\n                    color=\'w\', backgroundcolor=""none"",\n                    bbox={\'facecolor\': color, \'alpha\': 0.5,\n                          \'pad\': 2, \'edgecolor\': \'none\'})\n\n        # Masks\n        if masks is not None:\n            mask = masks[:, :, i]\n            masked_image = apply_mask(masked_image, mask, color)\n            # Mask Polygon\n            # Pad to ensure proper polygons for masks that touch image edges.\n            padded_mask = np.zeros(\n                (mask.shape[0] + 2, mask.shape[1] + 2), dtype=np.uint8)\n            padded_mask[1:-1, 1:-1] = mask\n            contours = find_contours(padded_mask, 0.5)\n            for verts in contours:\n                # Subtract the padding and flip (y, x) to (x, y)\n                verts = np.fliplr(verts) - 1\n                p = Polygon(verts, facecolor=""none"", edgecolor=color)\n                ax.add_patch(p)\n    ax.imshow(masked_image.astype(np.uint8))\n\n\ndef display_table(table):\n    """"""Display values in a table format.\n    table: an iterable of rows, and each row is an iterable of values.\n    """"""\n    html = """"\n    for row in table:\n        row_html = """"\n        for col in row:\n            row_html += ""<td>{:40}</td>"".format(str(col))\n        html += ""<tr>"" + row_html + ""</tr>""\n    html = ""<table>"" + html + ""</table>""\n    IPython.display.display(IPython.display.HTML(html))\n\n\ndef display_weight_stats(model):\n    """"""Scans all the weights in the model and returns a list of tuples\n    that contain stats about each weight.\n    """"""\n    layers = model.get_trainable_layers()\n    table = [[""WEIGHT NAME"", ""SHAPE"", ""MIN"", ""MAX"", ""STD""]]\n    for l in layers:\n        weight_values = l.get_weights()  # list of Numpy arrays\n        weight_tensors = l.weights  # list of TF tensors\n        for i, w in enumerate(weight_values):\n            weight_name = weight_tensors[i].name\n            # Detect problematic layers. Exclude biases of conv layers.\n            alert = """"\n            if w.min() == w.max() and not (l.__class__.__name__ == ""Conv2D"" and i == 1):\n                alert += ""<span style=\'color:red\'>*** dead?</span>""\n            if np.abs(w.min()) > 1000 or np.abs(w.max()) > 1000:\n                alert += ""<span style=\'color:red\'>*** Overflow?</span>""\n            # Add row\n            table.append([\n                weight_name + alert,\n                str(w.shape),\n                ""{:+9.4f}"".format(w.min()),\n                ""{:+10.4f}"".format(w.max()),\n                ""{:+9.4f}"".format(w.std()),\n            ])\n    display_table(table)\n'"
scenedetect/__init__.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect Module\n\nThis file contains the PySceneDetect version string (displayed when calling\n\'scenedetect version\'), the about string for license/copyright information\n(when calling \'scenedetect about\'), and imports of the most frequently used\nclasses so they can be accessed directly from the scenedetect module.\n""""""\n\n# Standard Library Imports\n\nfrom __future__ import print_function\nimport sys\nimport os\nimport time\n\n\n# PySceneDetect Library Imports\n\n# Commonly used classes for easier use directly from the scenedetect namespace (e.g.\n# scenedetect.SceneManager instead of scenedetect.scene_manager.SceneManager).\n\nfrom scenedetect.scene_manager import SceneManager\nfrom scenedetect.frame_timecode import FrameTimecode\nfrom scenedetect.video_manager import VideoManager\nfrom scenedetect.detectors import ThresholdDetector, ContentDetector\nfrom scenedetect.__main__ import main\n\n\n# Used for module identification and when printing version & about info.\n# (scenedetect version and scenedetect about)\n\n__version__ = \'v0.5-beta-1\'\n\n# About & copyright message string shown for the \'about\' CLI command (scenedetect about).\n\nABOUT_STRING = """"""\nSite/Updates: https://github.com/Breakthrough/PySceneDetect/\nDocumentation: http://pyscenedetect.readthedocs.org/\n\nCopyright (C) 2012-2018 Brandon Castellano. All rights reserved.\n\nPySceneDetect is released under the BSD 2-Clause license. See the\nincluded LICENSE file or visit the PySceneDetect website for details.\nThis software uses the following third-party components:\n\n  > NumPy [Copyright (C) 2018, Numpy Developers]\n  > OpenCV [Copyright (C) 2018, OpenCV Team]\n  > click [Copyright (C) 2018, Armin Ronacher]\n\nThis software may also invoke the following third-party executables:\n\n  > FFmpeg [Copyright (C) 2018, Fabrice Bellard]\n  > mkvmerge [Copyright (C) 2005-2016, Matroska]\n\nIf included with your distribution of PySceneDetect, see the included\nLICENSE-FFMPEG and LICENSE-MKVMERGE files for details.\n\nFFmpeg and mkvmerge are distributed only with certain PySceneDetect\nreleases, in order to allow for automatic video splitting capability.\nIf they were not included with your distribution, they can usually be\ninstalled from your operating system\'s package manager, or downloaded\nfrom the following URLs:\n\n    FFmpeg:   [ https://ffmpeg.org/download.html ]\n    mkvmerge: [ https://mkvtoolnix.download/downloads.html ]\n        (Note that mkvmerge is a part of the mkvtoolnix package.)\n\nOnce installed, ensure the respective program can be accessed from the\nsame location running PySceneDetect by calling the `ffmpeg` or\n`mkvmerge` command from a terminal/command prompt.\n\nPySceneDetect will automatically use whichever program is available on\nthe computer, depending on the specified command-line options.\n\nAdditionally, certain Windows distributions may include a compiled\nPython distribution. For license information regarding the distributed\nversion of Python, see the included LICENSE-PYTHON file for details,\nor visit the following URL: [ https://docs.python.org/3/license.html ]\n\nTHE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED.\n""""""\n\n'"
scenedetect/__main__.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.__main__ Module\n\nProvides entry point for PySceneDetect\'s command-line interface (CLI)\nfunctionality (in addition to using in other scripts via `import scenedetect`)\nby installing the module and running the `scenedetect` command, or by calling:\n\n  > python -m scenedetect\n\nThis module provides a high-level main() function, utilizing the scenedetect.cli\nmodule, itself based on the click library, to provide command-line interface (CLI)\nparsing functionality.  Also note that a convenience script scenedetect.py is also\nincluded for development purposes (allows ./scenedetect.py vs python -m scenedetect)\n\nInstalling PySceneDetect (using `python setup.py install` in the parent directory)\nwill also add the `scenedetect` command to %PATH% be used from anywhere.\n""""""\n\n# PySceneDetect Library Imports\nfrom scenedetect.cli import CliContext\nfrom scenedetect.cli import scenedetect_cli as cli\n\ndef main():\n    """""" Main: PySceneDetect command-line interface (CLI) entry point.\n\n    Passes control flow to the CLI parser (using the click library), whose\n    entry point is the decorated scenedetect.cli.scenedetect_cli function.\n    """"""\n\n    cli_ctx = CliContext()  # CliContext object passed between CLI commands.\n    try:\n        # pylint: disable=unexpected-keyword-arg, no-value-for-parameter\n        cli.main(obj=cli_ctx)   # Parse CLI arguments with registered callbacks.\n    finally:\n        cli_ctx.cleanup()\n\nif __name__ == \'__main__\':\n    main()\n'"
scenedetect/frame_timecode.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect Frame Timecode Module\n\nThis module contains the FrameTimecode object, which is used as a way for PySceneDetect\nto store frame-accurate timestamps of each cut.  This is done by also specifying the\nvideo framerate with the timecode, allowing a frame number to be converted to/from\na floating-point number of seconds, or string in the form ""HH:MM:SS[.nnn]"" (where the\n""[.nnn]"" part is optional).\n\nExample:\n    A FrameTimecode can be created by specifying the frame number as an integer, along\n    with the framerate:\n\n        $ t = FrameTimecode(timecode = 0, fps = 29.97)\n\n    It can also be created from a floating-point number of seconds.  Note that calling\n    t.get_frames() will return 200 in this case (10.0 seconds at 20.0 frames/sec):\n\n        $ t = FrameTimecode(timecode = 10.0, fps = 20.0)\n\n    Timecode can also be specified as a string in ""HH:MM:SS[.nnn]"" format.  Note that\n    calling t.get_frames() will return 600 in this case (1 minute, or 60 seconds, at\n    10 frames/sec):\n\n        $ t = FrameTimecode(timecode = ""00:01:00.000"", fps = 10)\n\nFrameTimecode objects can be added and subtracted.  Note, however, that a negative\ntimecode is not representable by a FrameTimecode, and subtractions towards zero\nwill wrap at 0.  For example, calling t.get_frame() in this case will return 0:\n\n    $ t = FrameTimecode(0, 10) - FrameTimecode(10, 10)\n\n (i.e. calling get_frame() on FrameTimecode)\nUnit tests for the FrameTimecode object can be found in tests/test_timecode.py.\n""""""\n\n# Standard Library Imports\nimport math\n\n# PySceneDetect Library Imports\nfrom scenedetect.platform import STRING_TYPE\n\nMINIMUM_FRAMES_PER_SECOND_FLOAT = 1.0 / 1000.0\nMINIMUM_FRAMES_PER_SECOND_DELTA_FLOAT = 1.0 / 100000\n\n\nclass FrameTimecode(object):\n    """""" Object for frame-based timecodes, using the video framerate\n    to compute back and forth between frame number and second/timecode formats.\n\n    The passed argument is declared valid if it meets one of three valid types:\n      1) string: standard timecode HH:MM:SS[.nnn]:\n            in string form \'HH:MM:SS\' or \'HH:MM:SS.nnn\', or\n            in list/tuple form [HH, MM, SS] or [HH, MM, SS.nnn]\n      2) float: number of seconds S[.SSS], where S >= 0.0:\n            in string form \'Ss\' or \'S.SSSs\' (e.g. \'5s\', \'1.234s\'), or\n            in integer or floating point form S or S.SSS\n      3) int: Exact number of frames N, where N >= 0:\n            in either integer or string form N or \'N\'\n\n    Arguments:\n        timecode (str, float, int, or FrameTimecode):  A timecode or frame\n            number, given in any of the above valid formats/types.  This\n            argument is always required.\n        fps (float, or FrameTimecode, conditionally required): The framerate\n            to base all frame to time arithmetic on (if FrameTimecode, copied\n            from the passed framerate), to allow frame-accurate arithmetic. The\n            framerate must be the same when combining FrameTimecode objects\n            in operations. This argument is required argument, unless the\n            passed timecode is of type FrameTimecode, from which it is copied.\n    Raises:\n        TypeError, ValueError\n    """"""\n\n    def __init__(self, timecode=None, fps=None):\n        # type: (Union[int, float, str, FrameTimecode], float,\n        #        Union[int, float, str, FrameTimecode])\n        # The following two properties are what is used to keep track of time\n        # in a frame-specific manner.  Note that once the framerate is set,\n        # the value should never be modified (only read if required).\n        self.framerate = None\n        self.frame_num = None\n\n        # Copy constructor.  Only the timecode argument is used in this case.\n        if isinstance(timecode, FrameTimecode):\n            self.framerate = timecode.framerate\n            self.frame_num = timecode.frame_num\n            if fps is not None:\n                raise TypeError(\'Framerate cannot be overwritten when copying a FrameTimecode.\')\n        else:\n            # Ensure other arguments are consistent with API.\n            if fps is None:\n                raise TypeError(\'Framerate (fps) is a required argument.\')\n            if isinstance(fps, FrameTimecode):\n                fps = fps.framerate\n\n            # Process the given framerate, if it was not already set.\n            if not isinstance(fps, (int, float)):\n                raise TypeError(\'Framerate must be of type int/float.\')\n            elif (isinstance(fps, int) and not fps > 0) or (\n                    isinstance(fps, float) and not fps >= MINIMUM_FRAMES_PER_SECOND_FLOAT):\n                raise ValueError(\'Framerate must be positive and greater than zero.\')\n            self.framerate = float(fps)\n\n        # Process the timecode value, storing it as an exact number of frames.\n        if isinstance(timecode, (str, STRING_TYPE)):\n            self.frame_num = self._parse_timecode_string(timecode)\n        else:\n            self.frame_num = self._parse_timecode_number(timecode)\n\n        # Alternative formats under consideration (require unit tests before adding):\n\n        # Standard timecode in list format [HH, MM, SS.nnn]\n        #elif isinstance(timecode, (list, tuple)) and len(timecode) == 3:\n        #    if any(not isinstance(x, (int, float)) for x in timecode):\n        #        raise ValueError(\'Timecode components must be of type int/float.\')\n        #    hrs, mins, secs = timecode\n        #    if not (hrs >= 0 and mins >= 0 and secs >= 0 and mins < 60\n        #            and secs < 60):\n        #        raise ValueError(\'Timecode components must be positive.\')\n        #    secs += (((hrs * 60.0) + mins) * 60.0)\n        #    self.frame_num = int(secs * self.framerate)\n\n\n    def get_frames(self):\n        # type: () -> int\n        """""" Get the current time/position in number of frames.  This is the\n        equivalent of accessing the self.frame_num property (which, along\n        with the specified framerate, forms the base for all of the other\n        time measurement calculations, e.g. the get_seconds() method).\n\n        Returns:\n            An integer of the current time/frame number.\n        """"""\n        return int(self.frame_num)\n\n\n    def get_framerate(self):\n        # type: () -> float\n        """""" Get Framerate: Returns the framerate used by the FrameTimecode object.\n\n        Returns:\n            Framerate (float) of the current FrameTimecode object, in frames per second.\n        """"""\n        return self.framerate\n\n\n    def equal_framerate(self, fps):\n        # type: (float) -> bool\n        """""" Equal Framerate: Determines if the passed framerate is equal to that of the\n        FrameTimecode object.\n\n        Arguments:\n            fps:    Framerate (float) to compare against within the precision constant\n                    MINIMUM_FRAMES_PER_SECOND_DELTA_FLOAT defined in this module.\n\n        Returns:\n            True if passed fps matches the FrameTimecode object\'s framerate, False otherwise.\n\n        """"""\n        return math.fabs(self.framerate - fps) < MINIMUM_FRAMES_PER_SECOND_DELTA_FLOAT\n\n\n    def get_seconds(self):\n        # type: () -> float\n        """""" Get the frame\'s position in number of seconds.\n\n        Returns:\n            A float of the current time/position in seconds.\n        """"""\n        return float(self.frame_num) / self.framerate\n\n\n    def get_timecode(self, precision=3, use_rounding=True):\n        # type: (int, bool) -> str\n        """""" Get a formatted timecode string of the form HH:MM:SS[.nnn].\n\n        Args:\n            precision:     The number of decimal places to include in the output [.nnn].\n            use_rounding:  True (default) to round the output to the desired precision.\n\n        Returns:\n            A string with a formatted timecode (HH:MM:SS[.nnn]).\n        """"""\n        # Compute hours and minutes based off of seconds, and update seconds.\n        secs = self.get_seconds()\n        base = 60.0 * 60.0\n        hrs = int(secs / base)\n        secs -= (hrs * base)\n        base = 60.0\n        mins = int(secs / base)\n        secs -= (mins * base)\n        # Convert seconds into string based on required precision.\n        if precision > 0:\n            if use_rounding:\n                secs = round(secs, precision)\n            msec = format(secs, \'.%df\' % precision)[-precision:]\n            secs = \'%02d.%s\' % (int(secs), msec)\n        else:\n            secs = \'%02d\' % int(round(secs, 0)) if use_rounding else \'%02d\' % int(secs)\n        # Return hours, minutes, and seconds as a formatted timecode string.\n        return \'%02d:%02d:%s\' % (hrs, mins, secs)\n\n\n    def _seconds_to_frames(self, seconds):\n        # type: (float) -> int\n        """""" Converts the passed value seconds to the nearest number of frames using\n        the current FrameTimecode object\'s FPS (self.framerate).\n\n        Returns:\n            Integer number of frames the passed number of seconds represents using\n            the current FrameTimecode\'s framerate property.\n        """"""\n        return int(seconds * self.framerate)\n\n\n    def _parse_timecode_number(self, timecode):\n        # type: (Union[int, float]) -> int\n        """""" Parses a timecode number, storing it as the exact number of frames.\n        Can be passed as frame number (int), seconds (float)\n\n        Raises:\n            TypeError, ValueError\n        """"""\n        # Process the timecode value, storing it as an exact number of frames.\n        # Exact number of frames N\n        if isinstance(timecode, int):\n            if timecode < 0:\n                raise ValueError(\'Timecode frame number must be positive and greater than zero.\')\n            return timecode\n        # Number of seconds S\n        elif isinstance(timecode, float):\n            if timecode < 0.0:\n                raise ValueError(\'Timecode value must be positive and greater than zero.\')\n            return self._seconds_to_frames(timecode)\n        # FrameTimecode\n        elif isinstance(timecode, FrameTimecode):\n            return timecode.frame_num\n        elif timecode is None:\n            raise TypeError(\'Timecode/frame number must be specified!\')\n        else:\n            raise TypeError(\'Timecode format/type unrecognized.\')\n\n\n    def _parse_timecode_string(self, timecode_string):\n        # type: (str) -> int\n        """""" Parses a string based on the three possible forms (in timecode format,\n        as an integer number of frames, or floating-point seconds, ending with \'s\').\n        Requires that the framerate property is set before calling this method.\n        Assuming a framerate of 30.0 FPS, the strings \'00:05:00.000\', \'00:05:00\',\n        \'9000\', \'300s\', and \'300.0s\' are all possible valid values, all representing\n        a period of time equal to 5 minutes, 300 seconds, or 9000 frames (at 30 FPS).\n\n        Raises:\n            TypeError, ValueError\n        """"""\n        if self.framerate is None:\n            raise TypeError(\'self.framerate must be set before calling _parse_timecode_string.\')\n        # Number of seconds S\n        if timecode_string.endswith(\'s\'):\n            secs = timecode_string[:-1]\n            if not secs.replace(\'.\', \'\').isdigit():\n                raise ValueError(\'All characters in timecode seconds string must be digits.\')\n            secs = float(secs)\n            if secs < 0.0:\n                raise ValueError(\'Timecode seconds value must be positive.\')\n            return int(secs * self.framerate)\n        # Exact number of frames N\n        elif timecode_string.isdigit():\n            timecode = int(timecode_string)\n            if timecode < 0:\n                raise ValueError(\'Timecode frame number must be positive.\')\n            return timecode\n        # Standard timecode in string format \'HH:MM:SS[.nnn]\'\n        else:\n            tc_val = timecode_string.split(\':\')\n            if not (len(tc_val) == 3 and tc_val[0].isdigit() and tc_val[1].isdigit()\n                    and tc_val[2].replace(\'.\', \'\').isdigit()):\n                raise ValueError(\'Unrecognized or improperly formatted timecode string.\')\n            hrs, mins = int(tc_val[0]), int(tc_val[1])\n            secs = float(tc_val[2]) if \'.\' in tc_val[2] else int(tc_val[2])\n            if not (hrs >= 0 and mins >= 0 and secs >= 0 and mins < 60 and secs < 60):\n                raise ValueError(\'Invalid timecode range (values outside allowed range).\')\n            secs += (((hrs * 60.0) + mins) * 60.0)\n            return int(secs * self.framerate)\n\n\n    def __iadd__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> FrameTimecode\n        if isinstance(other, int):\n            self.frame_num += other\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                self.frame_num += other.frame_num\n            else:\n                raise ValueError(\'FrameTimecode instances require equal framerate for addition.\')\n        # Check if value to add is in number of seconds.\n        elif isinstance(other, float):\n            self.frame_num += self._seconds_to_frames(other)\n        else:\n            raise TypeError(\'Unsupported type for performing addition with FrameTimecode.\')\n        if self.frame_num < 0:     # Required to allow adding negative seconds/frames.\n            self.frame_num = 0\n        return self\n\n\n    def __add__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> FrameTimecode\n        to_return = FrameTimecode(timecode=self)\n        to_return += other\n        return to_return\n\n\n    def __isub__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> FrameTimecode\n        if isinstance(other, int):\n            self.frame_num -= other\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                self.frame_num -= other.frame_num\n            else:\n                raise ValueError(\'FrameTimecode instances require equal framerate for subtraction.\')\n        # Check if value to add is in number of seconds.\n        elif isinstance(other, float):\n            self.frame_num -= self._seconds_to_frames(other)\n        else:\n            raise TypeError(\'Unsupported type for performing subtraction with FrameTimecode.\')\n        if self.frame_num < 0:\n            self.frame_num = 0\n        return self\n\n\n    def __sub__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> FrameTimecode\n        to_return = FrameTimecode(timecode=self)\n        to_return -= other\n        return to_return\n\n\n    def __eq__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> bool\n        if isinstance(other, int):\n            return self.frame_num == other\n        elif isinstance(other, float):\n            return self.get_seconds() == other\n        elif isinstance(other, str):\n            return self.frame_num == self._parse_timecode_string(other)\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                return self.frame_num == other.frame_num\n            else:\n                raise TypeError(\n                    \'FrameTimecode objects must have the same framerate to be compared.\')\n        elif other is None:\n            return False\n        else:\n            raise TypeError(\'Unsupported type for performing == with FrameTimecode.\')\n\n\n    def __ne__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> bool\n        return not self == other\n\n\n    def __lt__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> bool\n        if isinstance(other, int):\n            return self.frame_num < other\n        elif isinstance(other, float):\n            return self.get_seconds() < other\n        elif isinstance(other, str):\n            return self.frame_num < self._parse_timecode_string(other)\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                return self.frame_num < other.frame_num\n            else:\n                raise TypeError(\n                    \'FrameTimecode objects must have the same framerate to be compared.\')\n        #elif other is None:\n        #    return False\n        else:\n            raise TypeError(\'Unsupported type for performing < with FrameTimecode.\')\n\n\n    def __le__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> bool\n        if isinstance(other, int):\n            return self.frame_num <= other\n        elif isinstance(other, float):\n            return self.get_seconds() <= other\n        elif isinstance(other, str):\n            return self.frame_num <= self._parse_timecode_string(other)\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                return self.frame_num <= other.frame_num\n            else:\n                raise TypeError(\n                    \'FrameTimecode objects must have the same framerate to be compared.\')\n        #elif other is None:\n        #    return False\n        else:\n            raise TypeError(\'Unsupported type for performing <= with FrameTimecode.\')\n\n\n    def __gt__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> bool\n        if isinstance(other, int):\n            return self.frame_num > other\n        elif isinstance(other, float):\n            return self.get_seconds() > other\n        elif isinstance(other, str):\n            return self.frame_num > self._parse_timecode_string(other)\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                return self.frame_num > other.frame_num\n            else:\n                raise TypeError(\n                    \'FrameTimecode objects must have the same framerate to be compared.\')\n        #elif other is None:\n        #    return False\n        else:\n            raise TypeError(\'Unsupported type (%s) for performing > with FrameTimecode.\' %\n                            type(other).__name__)\n\n\n    def __ge__(self, other):\n        # type: (Union[int, float, str, FrameTimecode]) -> bool\n        if isinstance(other, int):\n            return self.frame_num >= other\n        elif isinstance(other, float):\n            return self.get_seconds() >= other\n        elif isinstance(other, str):\n            return self.frame_num >= self._parse_timecode_string(other)\n        elif isinstance(other, FrameTimecode):\n            if self.equal_framerate(other.framerate):\n                return self.frame_num >= other.frame_num\n            else:\n                raise TypeError(\n                    \'FrameTimecode objects must have the same framerate to be compared.\')\n        #elif other is None:\n        #    return False\n        else:\n            raise TypeError(\'Unsupported type for performing >= with FrameTimecode.\')\n\n\n\n    def __int__(self):\n        return self.frame_num\n\n    def __float__(self):\n        return self.get_seconds()\n\n    def __str__(self):\n        return self.get_timecode()\n\n    def __repr__(self):\n        return \'FrameTimecode(frame=%d, fps=%f)\' % (self.frame_num, self.framerate)\n\n'"
scenedetect/platform.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.platform Module\n\nThis file contains all platform/library/OS-specific compatibility fixes,\nintended to improve the systems that are able to run PySceneDetect, and allow\nfor maintaining backwards compatibility with existing libraries going forwards.\n\nSpecifically, this module adds compatibility wrappers for Python\'s Queue/queue\n(Python 2/3, respectively) as scenedetect.platform.queue, and for OpenCV 2.x,\ncopies the OpenCV VideoCapture property constants from the cv2.cv namespace\ndirectly to the cv2 namespace.  This ensures that the cv2 API is consistent\nwith those changes made to it in OpenCV 3.0 and above.  This module also\nincludes an alias for the unicode/string types in Python 2/3 as STRING_TYPE\nintended to help with parsing string types from the CLI parser.\n""""""\n\n# Standard Library Imports\nfrom __future__ import print_function\nimport sys\nimport os\nimport platform\nimport struct\nimport csv\n\n# Third-Party Library Imports\nimport cv2\n\n\n# pylint: disable=unused-import\n\n# Python 2/3 Queue/queue library (scenedetect.platform.queue)\nif sys.version_info[0] == 2:\n    import Queue as queue\nelse:\n    import queue\n\n# tqdm Library (scenedetect.platform.tqdm will be module or None)\ntry:\n    from tqdm import tqdm\nexcept ImportError:\n    tqdm = None\n\n# pylint: enable=unused-import\n\n\n# String type (used to allow FrameTimecode object to take both unicode and native\n# string objects when being constructed via scenedetect.platform.STRING_TYPE).\n# pylint: disable=invalid-name, undefined-variable\nif sys.version_info[0] == 2:\n    STRING_TYPE = unicode\nelse:\n    STRING_TYPE = str\n# pylint: enable=invalid-name, undefined-variable\n\n\n# Compatibility fix for OpenCV v2.x (copies CAP_PROP_* properties from the\n# cv2.cv namespace to the cv2 namespace, as the cv2.cv namespace was removed\n# with the release of OpenCV 3.0).\n# pylint: disable=c-extension-no-member\nif cv2.__version__[0] == \'2\' or not (\n        cv2.__version__[0].isdigit() and int(cv2.__version__[0]) >= 3):\n    cv2.CAP_PROP_FRAME_WIDTH = cv2.cv.CV_CAP_PROP_FRAME_WIDTH\n    cv2.CAP_PROP_FRAME_HEIGHT = cv2.cv.CV_CAP_PROP_FRAME_HEIGHT\n    cv2.CAP_PROP_FPS = cv2.cv.CV_CAP_PROP_FPS\n    cv2.CAP_PROP_POS_MSEC = cv2.cv.CV_CAP_PROP_POS_MSEC\n    cv2.CAP_PROP_POS_FRAMES = cv2.cv.CV_CAP_PROP_POS_FRAMES\n    cv2.CAP_PROP_FRAME_COUNT = cv2.cv.CV_CAP_PROP_FRAME_COUNT\n# pylint: enable=c-extension-no-member\n\ndef check_opencv_ffmpeg_dll():\n    # type: () -> bool\n    """""" Check OpenCV FFmpeg DLL: Checks if OpenCV video support is available on Windows.\n\n    Always returns True on non-Windows platforms, or for OpenCV versions that do\n    not follow the X.Y.Z version numbering pattern.\n\n    Returns:\n        (bool) True if OpenCV video support is detected (e.g. the appropriate\n        opencv_ffmpegXYZ.dll file is in PATH), False otherwise.\n    """"""\n    if platform.system() == \'Windows\' and (\n            cv2.__version__[0].isdigit() and cv2.__version__.find(\'.\') > 0):\n        is_64_bit_str = \'_64\' if struct.calcsize(""P"") == 8 else \'\'\n        dll_filename = \'opencv_ffmpeg{OPENCV_VERSION}{IS_64_BIT}.dll\'.format(\n            OPENCV_VERSION=cv2.__version__.replace(\'.\', \'\'),\n            IS_64_BIT=is_64_bit_str)\n        return any([os.path.exists(os.path.join(path_path, dll_filename))\n                    for path_path in os.environ[\'PATH\'].split(\';\')]), dll_filename\n    return True\n\n\n\ndef _get_cv2_param(param_name):\n    # type: (str) -> Union[?, None]\n    if param_name.startswith(\'CV_\'):\n        param_name = param_name[3:]\n    try:\n        return getattr(cv2, param_name)\n    except AttributeError:\n        return None\n\ndef get_cv2_imwrite_params():\n    # type: () -> Dict[str, Union[int, None]]\n    return {\n        \'jpg\': _get_cv2_param(\'IMWRITE_JPEG_QUALITY\'),\n        \'png\': _get_cv2_param(\'IMWRITE_PNG_COMPRESSION\'),\n        \'webp\': _get_cv2_param(\'IMWRITE_WEBP_QUALITY\')\n    }\n\n# Functonality for obtaining csv reader/writer handles with uniform line terminations.\ndef get_csv_reader(file_handle):\n    # type: (File) -> csv.reader\n    """""" Returns a csv.reader object using the passed file handle. """"""\n    return csv.reader(file_handle, lineterminator=\'\\n\')\n\n\ndef get_csv_writer(file_handle):\n    # type: (File) -> csv.writer\n    """""" Returns a csv.writer object using the passed file handle. """"""\n    return csv.writer(file_handle, lineterminator=\'\\n\')\n\n'"
scenedetect/scene_detector.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.scene_detector Module\n\nThis module implements the base SceneDetector class, from which all scene\ndetectors in the scenedetect.dectectors module are derived from.\n\nThe SceneDetector class represents the interface which detection algorithms\nare expected to provide in order to be compatible with PySceneDetect.\n""""""\n\n# pylint: disable=unused-argument\n\nclass SceneDetector(object):\n    """"""Base class to inheret from when implementing a scene detection algorithm.""""""\n    def __init__(self):\n        self.stats_manager = None\n        self._metric_keys = []\n        self.cli_name = \'detect-none\'\n\n    def is_processing_required(self, frame_num):\n        # type: (int) -> bool\n        """""" Is Processing Required: Test if all calculations for a given frame are already done.\n\n        Returns:\n            (bool) True if the SceneDetector\'s stats_manager property is set to a valid\n            StatsManager object, which contains all of the required frame metrics/calculations\n            for the given frame (and thus, does not require decoding it). Returns False\n            otherwise (i.e. the frame_img passed to process_frame is required).\n        """"""\n        return not (self.stats_manager is not None and\n                self.stats_manager.metrics_exist(frame_num, self._metric_keys))\n\n    def get_metrics(self):\n        # type: () -> List[str]\n        """""" Get Metrics:  Get a list of all metric names/keys used by the detector.\n\n        Returns:\n            A List[str] of the frame metric key names that will be used by\n            the detector when a StatsManager is passed to process_frame.\n        """"""\n        return self._metric_keys\n\n    def process_frame(self, frame_num, frame_img):\n        # type: (int, numpy.ndarray) -> Tuple[bool, Union[None, List[int]]\n        """""" Process Frame: Computes/stores metrics and detects any scene changes.\n\n        Prototype method, no actual detection.\n\n        Returns:\n            List of frame numbers of cuts to be added to the cutting list.\n        """"""\n        return []\n\n    def post_process(self, frame_num):\n        # type: (int) -> List[int]\n        """""" Post Process: Performs any processing after the last frame has been read.\n\n        Prototype method, no actual detection.\n\n        Returns:\n            List of frame numbers of cuts to be added to the cutting list.\n        """"""\n        return []\n\n'"
scenedetect/scene_manager.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.scene_manager Module\n\nThis module implements the SceneManager object, which is used to coordinate\nSceneDetectors and frame sources (e.g. VideoManagers, VideoCaptures), creating\na SceneResult object for each detected scene.\n\nThe SceneManager also facilitates passing a StatsManager, if any is defined,\nto the associated SceneDetectors for caching of frame metrics.\n""""""\n\n\n# Standard Library Imports\nfrom __future__ import print_function\nimport math\n\n# Third-Library Imports\nimport cv2\nfrom scenedetect.platform import tqdm\n\n# PySceneDetect Library Imports\nfrom scenedetect.frame_timecode import FrameTimecode\nfrom scenedetect.platform import get_csv_writer\nfrom scenedetect.stats_manager import FrameMetricRegistered\n\n\ndef write_scene_list(output_csv_file, scene_list, cut_list=None):\n    """""" Writes the given list of scenes to an output file handle in CSV format.\n\n    Arguments:\n        output_csv_file: Handle to open file in write mode.\n        scene_list: List of pairs of FrameTimecodes denoting each scene\'s start/end FrameTimecode.\n        cut_list: Optional list of FrameTimecode objects denoting the cut list (i.e. the frames\n            in the video that need to be split to generate individual scenes). If not passed,\n            the start times of each scene (besides the 0th scene) is used instead.\n    """"""\n    # type: (File, List[Tuple[FrameTimecode, FrameTimecode]], Optional[List[FrameTimecode]]) -> None\n    csv_writer = get_csv_writer(output_csv_file)\n    # Output Timecode List\n    csv_writer.writerow(\n        [""Timecode List:""] +\n        cut_list if cut_list else [start.get_timecode() for start, _ in scene_list[1:]])\n    csv_writer.writerow([\n        ""Scene Number"",\n        ""Start Frame"", ""Start Timecode"", ""Start Time (seconds)"",\n        ""End Frame"", ""End Timecode"", ""End Time (seconds)"",\n        ""Length (frames)"", ""Length (timecode)"", ""Length (seconds)""])\n    for i, (start, end) in enumerate(scene_list):\n        duration = end - start\n        csv_writer.writerow([\n            \'%d\' % (i+1),\n            \'%d\' % start.get_frames(), start.get_timecode(), \'%.3f\' % start.get_seconds(),\n            \'%d\' % end.get_frames(), end.get_timecode(), \'%.3f\' % end.get_seconds(),\n            \'%d\' % duration.get_frames(), duration.get_timecode(), \'%.3f\' % duration.get_seconds()])\n\n\n\n\nclass SceneManager(object):\n    """""" The SceneManager facilitates detection of scenes via the detect_scenes() method,\n    given a video source (scenedetect.VideoManager or cv2.VideoCapture), and SceneDetector\n    algorithms added via the add_detector() method.\n\n    Can also optionally take a StatsManager instance during construction to cache intermediate\n    scene detection calculations, making subsequent calls to detect_scenes() much faster,\n    allowing the cached values to be saved/loaded to/from disk, and also manually determining\n    the optimal threshold values or other options for various detection algorithms.\n    """"""\n\n    def __init__(self, stats_manager=None):\n        # type: (Optional[StatsManager])\n        self._cutting_list = []\n        self._detector_list = []\n        self._stats_manager = stats_manager\n        self._num_frames = 0\n        self._start_frame = 0\n\n    def add_detector(self, detector):\n        # type: (SceneDetector) -> None\n        """""" Adds/registers a SceneDetector (e.g. ContentDetector, ThresholdDetector) to\n        run when detect_scenes is called.\n        """"""\n        detector.stats_manager = self._stats_manager\n        self._detector_list.append(detector)\n        if self._stats_manager is not None:\n            # Allow multiple detection algorithms of the same type to be added\n            # by suppressing any FrameMetricRegistered exceptions due to attempts\n            # to re-register the same frame metric keys.\n            try:\n                self._stats_manager.register_metrics(detector.get_metrics())\n            except FrameMetricRegistered:\n                pass\n\n    def get_num_detectors(self):\n        # type: () -> int\n        """""" Gets number of registered scene detectors added via add_detector. """"""\n        return len(self._detector_list)\n\n    def clear(self):\n        # type: () -> None\n        """""" Clears all cuts/scenes and resets the SceneManager\'s position.\n\n        Any statistics generated are still saved in the StatsManager object\n        passed to the SceneManager\'s constructor, and thus, subsequent\n        calls to detect_scenes, using the same frame source reset at the\n        initial time (if it is a VideoManager, use the reset() method),\n        will use the cached frame metrics that were computed and saved\n        in the previous call to detect_scenes.\n        """"""\n        self._cutting_list.clear()\n        self._num_frames = 0\n        self._start_frame = 0\n\n\n    def clear_detectors(self):\n        # type: () -> None\n        """""" Removes all scene detectors added to the SceneManager via add_detector(). """"""\n        self._detector_list.clear()\n\n\n    def _add_cut(self, frame_num):\n        # type: (int) -> None\n        # Adds a cut to the cutting list.\n        self._cutting_list.append(frame_num)\n\n    def _add_cuts(self, cut_list):\n        # type: (List[int]) -> None\n        # Adds a list of cuts to the cutting list.\n        self._cutting_list += cut_list\n\n\n    def get_scene_list(self, base_timecode):\n        # type: (FrameTimecode) -> List[Tuple[FrameTimecode, FrameTimecode]]\n        """""" Returns a list of tuples of start/end FrameTimecodes for each scene.\n\n        The scene list is generated from the cutting list (get_cut_list), noting that each\n        scene is contiguous, starting from the first and ending at the last frame of the input.\n\n        Returns:\n            List of tuples in the form (start_time, end_time), where both start_time and\n            end_time are FrameTimecode objects representing the exact time/frame where each\n            detected scene in the video begins and ends.\n        """"""\n        # Scene list, where scenes are tuples of (Start FrameTimecode, End FrameTimecode),\n        # and base_timecode is the base FrameTimecode of the video used in detect_scenes.\n        scene_list = []\n        if not self._cutting_list:\n            return scene_list\n        cut_list = self.get_cut_list(base_timecode)\n        # Initialize last_cut to the first frame we processed,as it will be\n        # the start timecode for the first scene in the list.\n        last_cut = base_timecode + self._start_frame\n        for cut in cut_list:\n            scene_list.append((last_cut, cut))\n            last_cut = cut\n        # Last scene is from last cut to end of video.\n        scene_list.append((last_cut, base_timecode + self._num_frames))\n\n        return scene_list\n\n    def get_cut_list(self, base_timecode):\n        # type: (FrameTimecode) -> List[FrameTimecode]\n        """""" Returns a list of FrameTimecodes of the detected scene changes/cuts.\n\n        Unlike get_scene_list, the cutting list returns a list of FrameTimecodes representing\n        the point in the input video(s) where a new scene was detected, and thus the frame\n        where the input should be cut/split. The cutting list, in turn, is used to generate\n        the scene list, noting that each scene is contiguous starting from the first frame\n        and ending at the last frame detected.\n\n        Returns:\n            List of FrameTimecode objects denoting the points in time where a scene change\n            was detected in the input video(s), which can also be passed to external tools\n            for automated splitting of the input into individual scenes.\n        """"""\n\n        return [FrameTimecode(cut, base_timecode)\n                for cut in self._get_cutting_list()]\n\n\n    def _get_cutting_list(self):\n        # type: () -> list\n        """""" Returns a sorted list of unique frame numbers of any detected scene cuts. """"""\n        # We remove duplicates here by creating a set then back to a list and sort it.\n        return sorted(list(set(self._cutting_list)))\n\n\n    def _process_frame(self, frame_num, frame_im):\n        # type(int, numpy.ndarray) -> None\n        """""" Adds any cuts detected with the current frame to the cutting list. """"""\n        for detector in self._detector_list:\n            self._add_cuts(detector.process_frame(frame_num, frame_im))\n\n    def _is_processing_required(self, frame_num):\n        # type(int) -> bool\n        """""" Is Processing Required: Returns True if frame metrics not in StatsManager,\n        False otherwise.\n        """"""\n        return all([detector.is_processing_required(frame_num) for detector in self._detector_list])\n\n    def _post_process(self, frame_num):\n        # type(int, numpy.ndarray) -> None\n        """""" Adds any remaining cuts to the cutting list after processing the last frame. """"""\n        for detector in self._detector_list:\n            self._add_cuts(detector.post_process(frame_num))\n\n\n    def detect_scenes(self, frame_source, start_time=0, end_time=None, frame_skip=0,\n                      show_progress=True):\n        # type: (VideoManager, Union[int, FrameTimecode],\n        #        Optional[Union[int, FrameTimecode]], Optional[bool]) -> int\n        """""" Perform scene detection on the given frame_source using the added SceneDetectors.\n\n        Blocks until all frames in the frame_source have been processed. Results\n        can be obtained by calling the get_scene_list() method afterwards.\n\n        Arguments:\n            frame_source (scenedetect.VideoManager or cv2.VideoCapture):  A source of\n                frames to process (using frame_source.read() as in VideoCapture).\n                VideoManager is preferred as it allows concatenation of multiple videos\n                as well as seeking, by defining start time and end time/duration.\n            start_time (int or FrameTimecode): Time/frame the passed frame_source object\n                is currently at in time (i.e. the frame # read() will return next).\n                Must be passed if the frame_source has been seeked past frame 0\n                (i.e. calling set_duration on a VideoManager or seeking a VideoCapture).\n            end_time (int or FrameTimecode): Maximum number of frames to detect\n                (set to None to detect all available frames). Only needed for OpenCV\n                VideoCapture objects, as VideoManager allows set_duration.\n            frame_skip (int): Number of frames to skip (i.e. process every 1 in N+1\n                frames, where N is frame_skip, processing only 1/N+1 percent of the\n                video, speeding up the detection time at the expense of accuracy).\n            show_progress (bool): If True, and the tqdm module is available, displays\n                a progress bar with the progress, framerate, and expected time to\n                complete processing the video frame source.\n        Returns:\n            Number of frames read and processed from the frame source.\n        Raises:\n            ValueError\n        """"""\n\n        if frame_skip > 0 and self._stats_manager is not None:\n            raise ValueError(\'frame_skip must be 0 when using a StatsManager.\')\n\n        start_frame = 0\n        curr_frame = 0\n        end_frame = None\n\n        total_frames = math.trunc(frame_source.get(cv2.CAP_PROP_FRAME_COUNT))\n\n        if isinstance(start_time, FrameTimecode):\n            start_frame = start_time.get_frames()\n        elif start_time is not None:\n            start_frame = int(start_time)\n        self._start_frame = start_frame\n\n        curr_frame = start_frame\n\n        if isinstance(end_time, FrameTimecode):\n            end_frame = end_time.get_frames()\n        elif end_time is not None:\n            end_frame = int(end_time)\n\n        if end_frame is not None:\n            total_frames = end_frame\n        if start_frame is not None:\n            total_frames -= start_frame\n\n        progress_bar = None\n        if tqdm and show_progress:\n            progress_bar = tqdm(\n                total=total_frames, unit=\'frames\')\n        try:\n\n            while True:\n                if end_frame is not None and curr_frame >= end_frame:\n                    break\n                # We don\'t compensate for frame_skip here as the frame_skip option\n                # is not allowed when using a StatsManager, and thus processing is\n                # always required for all frames when using frame_skip.\n                if (self._is_processing_required(self._num_frames + start_frame)\n                        or self._is_processing_required(self._num_frames + start_frame + 1)):\n                    ret_val, frame_im = frame_source.read()\n                else:\n                    ret_val = frame_source.grab()\n                    frame_im = None\n\n                if not ret_val:\n                    break\n                self._process_frame(self._num_frames + start_frame, frame_im)\n\n                curr_frame += 1\n                self._num_frames += 1\n                if progress_bar:\n                    progress_bar.update(1)\n\n                if frame_skip > 0:\n                    for _ in range(frame_skip):\n                        if not frame_source.grab():\n                            break\n                        curr_frame += 1\n                        self._num_frames += 1\n                        if progress_bar:\n                            progress_bar.update(1)\n\n            self._post_process(curr_frame)\n\n            num_frames = curr_frame - start_frame\n\n        finally:\n            if progress_bar:\n                progress_bar.close()\n\n        return num_frames\n\n'"
scenedetect/stats_manager.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the\n# included LICENSE file or visit one of the following pages for details:\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#  - https://github.com/Breakthrough/PySceneDetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n# OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.stats_manager Module\n\nThis file contains the StatsManager class, which provides a key-value store for\neach SceneDetector to read/write the metrics calculated for each frame.\nThe StatsManager must be registered to a SceneManager by passing it to the\nSceneManager\'s constructor.\n\nThe entire StatsManager can be saved to and loaded from a human-readable CSV file,\nalso allowing both precise determination of the threshold or other optimal values\nfor video files.\n\nThe StatsManager can also be used to cache the calculation results of the scene\ndetectors being used, speeding up subsequent scene detection runs using the\nsame pair of SceneManager/StatsManager objects.\n""""""\n\n# Standard Library Imports\nfrom __future__ import print_function\nimport logging\n\n# PySceneDetect Library Imports\nfrom scenedetect.frame_timecode import MINIMUM_FRAMES_PER_SECOND_FLOAT\nfrom scenedetect.platform import get_csv_reader\nfrom scenedetect.platform import get_csv_writer\n\n\nCOLUMN_NAME_FPS = ""Frame Rate:""\nCOLUMN_NAME_FRAME_NUMBER = ""Frame Number""\nCOLUMN_NAME_TIMECODE = ""Timecode""\n\n\nclass FrameMetricRegistered(Exception):\n    def __init__(self, metric_key, message =\n                 ""Attempted to re-register frame metric key.""):\n        # type: (str, str)\n        # Pass message string to base Exception class.\n        super(FrameMetricRegistered, self).__init__(message)\n        self.metric_key = metric_key\n\nclass FrameMetricNotRegistered(Exception):\n    def __init__(self, metric_key, message =\n                 ""Attempted to get/set frame metrics for unregistered metric key.""):\n        # type: (str, str)\n        # Pass message string to base Exception class.\n        super(FrameMetricNotRegistered, self).__init__(message)\n        self.metric_key = metric_key\n\nclass StatsFileCorrupt(Exception):\n    def __init__(self, message =\n                 ""Could not load frame metric data data from passed CSV file.""):\n        # type: (str, str)\n        # Pass message string to base Exception class.\n        super(StatsFileCorrupt, self).__init__(message)\n\nclass StatsFileFramerateMismatch(Exception):\n    def __init__(self, base_timecode_fps, stats_file_fps, message =\n                 ""Framerate differs between stats file and base timecode.""):\n        # type: (str, str)\n        # Pass message string to base Exception class.\n        super(StatsFileFramerateMismatch, self).__init__(message)\n        self.base_timecode_fps = base_timecode_fps\n        self.stats_file_fps = stats_file_fps\n\nclass NoMetricsRegistered(Exception):\n    pass\n\nclass NoMetricsSet(Exception):\n    pass\n\n\n\nclass StatsManager(object):\n\n    def __init__(self):\n        # type: ()\n        # Frame metrics is a dict of frame (int): metric_dict (Dict[str, float])\n        # of each frame metric key and the value it represents (usually float).\n        self._frame_metrics = dict()        # Dict[FrameTimecode, Dict[str, float]]\n        self._registered_metrics = set()    # Set of frame metric keys.\n        self._loaded_metrics = set()        # Metric keys loaded from stats file.\n        self._stats_writer = None\n        self._metrics_updated = False\n\n    def register_metrics(self, metric_keys):\n        # type: (List[str]) -> bool\n        """""" Register Metrics\n\n        Register a list of metric keys that will be used by the detector.\n        Used to ensure that multiple detector keys don\'t overlap.\n\n        Raises:\n            FrameMetricRegistered\n        """"""\n        for metric_key in metric_keys:\n            if metric_key not in self._registered_metrics:\n                self._registered_metrics.add(metric_key)\n            else:\n                raise FrameMetricRegistered(metric_key)\n\n    def get_metrics(self, frame_number, metric_keys):\n        # type: (int, List[str]) -> List[Union[None, int, float, str]]\n        return [self._get_metric(frame_number, metric_key) for metric_key in metric_keys]\n\n    def set_metrics(self, frame_number, metric_kv_dict):\n        # type: (int, Dict[str, Union[None, int, float, str]]) -> None\n        for metric_key in metric_kv_dict:\n            self._set_metric(frame_number, metric_key, metric_kv_dict[metric_key])\n\n    def metrics_exist(self, frame_number, metric_keys):\n        # type: (int, List[str]) -> bool\n        return all([self._metric_exists(frame_number, metric_key) for metric_key in metric_keys])\n    \n    def is_save_required(self):\n        return self._metrics_updated\n\n    def save_to_csv(self, csv_file, base_timecode, force_save=True):\n        # type: (File [w], FrameTimecode, bool) -> None\n        csv_writer = get_csv_writer(csv_file)\n        # Ensure we need to write to the file, and that we have data to do so with.\n        if ((self.is_save_required() or force_save) and\n             self._registered_metrics and self._frame_metrics):\n            # Header rows.\n            metric_keys = sorted(list(self._registered_metrics.union(self._loaded_metrics)))\n            csv_writer.writerow([COLUMN_NAME_FPS, \'%.10f\' % base_timecode.get_framerate()])\n            csv_writer.writerow(\n                [COLUMN_NAME_FRAME_NUMBER, COLUMN_NAME_TIMECODE] + metric_keys)\n            frame_keys = sorted(self._frame_metrics.keys())\n            print(""Writing %d frames to CSV..."" % len(frame_keys))\n            for frame_key in frame_keys:\n                frame_timecode = base_timecode + frame_key\n                csv_writer.writerow(\n                    [frame_timecode.get_frames(), frame_timecode.get_timecode()] + \n                    [str(metric) for metric in self.get_metrics(frame_key, metric_keys)])\n        else:\n            if not self._registered_metrics:\n                raise NoMetricsRegistered()\n            if not self._frame_metrics:\n                raise NoMetricsSet()\n            \n\n    def load_from_csv(self, csv_file, base_timecode = None, reset_save_required=True):\n        # type: (File [r], Optional[FrameTimecode]) -> int\n        csv_reader = get_csv_reader(csv_file)\n        num_cols = None\n        num_metrics = None\n        num_frames = None\n        # First row: Framerate, [video_framerate]\n        try:\n            row = next(csv_reader)\n        except StopIteration:\n            # If the file is blank or we couldn\'t decode anything, assume the file was empty.\n            return\n        # First Row (FPS = [...]) and ensure framerate equals base_timecode if set.\n        if not len(row) == 2 or not row[0] == COLUMN_NAME_FPS:\n            raise StatsFileCorrupt()\n        stats_file_framerate = float(row[1])\n        if stats_file_framerate < MINIMUM_FRAMES_PER_SECOND_FLOAT:\n            raise StatsFileCorrupt(""Invalid framerate detected in CSV stats file ""\n                                   ""(decoded FPS: %f)."" % stats_file_framerate)\n        if base_timecode is not None and not base_timecode.equal_framerate(stats_file_framerate):\n            raise StatsFileFramerateMismatch(base_timecode.get_framerate(), stats_file_framerate)\n        # Second Row: Frame Num, Timecode, [metrics...]\n        try:\n            row = next(csv_reader)\n        except StopIteration:\n            raise StatsFileCorrupt(""Header row(s) missing."")\n        if not row or not len(row) >= 2:\n            raise StatsFileCorrupt()\n        if row[0] != COLUMN_NAME_FRAME_NUMBER or row[1] != COLUMN_NAME_TIMECODE:\n            raise StatsFileCorrupt()\n        num_cols = len(row)\n        num_metrics = num_cols - 2\n        if not num_metrics > 0:\n            raise StatsFileCorrupt(\'No metrics defined in CSV file.\')\n        metric_keys = row[2:]\n        num_frames = 0\n        for row in csv_reader:\n            metric_dict = {}\n            if not len(row) == num_cols:\n                raise StatsFileCorrupt(\'Wrong number of columns detected in stats file row.\')\n            for i, metric_str in enumerate(row[2:]):\n                if metric_str and metric_str != \'None\':\n                    try:\n                        metric_dict[metric_keys[i]] = float(metric_str)\n                    except ValueError:\n                        raise StatsFileCorrupt(\'Corrupted value in stats file: %s\' % metric_str)\n            self.set_metrics(int(row[0]), metric_dict)\n            num_frames += 1\n        logging.info(\'Loaded %d metrics for %d frames.\', num_metrics, num_frames)\n        if reset_save_required:\n            self._metrics_updated = False\n        return num_frames\n\n\n    def _get_metric(self, frame_number, metric_key):\n        # type: (int, str) -> Union[None, int, float, str]\n        if self._metric_exists(frame_number, metric_key):\n            return self._frame_metrics[frame_number][metric_key]\n        return None\n\n    def _set_metric(self, frame_number, metric_key, metric_value):\n        self._metrics_updated = True\n        # type: (int, str, Union[None, int, float, str]) -> None\n        if not frame_number in self._frame_metrics:\n            self._frame_metrics[frame_number] = dict()\n        self._frame_metrics[frame_number][metric_key] = metric_value\n\n    def _metric_exists(self, frame_number, metric_key):\n        # type: (int, List[str]) -> bool\n        return (frame_number in self._frame_metrics and\n                metric_key in self._frame_metrics[frame_number])\n\n\n'"
scenedetect/video_manager.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.video_manager Module\n\nThis file contains the VideoManager class, which provides a consistent\ninterface to reading videos.\n\nThis module includes both single-threaded (VideoManager) and asynchronous\n(VideoManagerAsync) video manager classes, which can be used to pass a\nvideo (or sequence of videos) and a start and end time/duration to a\nSceneManager object for performing scene detection analysis.\n\nThe VideoManager class attempts to emulate some methods of the OpenCV\ncv2.VideoCapture object, and can be used interchangably with one with\nrespect to a SceneManager object.\n""""""\n\n\n# Standard Library Imports\nfrom __future__ import print_function\nimport os\nimport math\n\n# Third-Party Library Imports\nimport cv2\n\n# PySceneDetect Library Imports\nfrom scenedetect.platform import STRING_TYPE\nimport scenedetect.frame_timecode\nfrom scenedetect.frame_timecode import FrameTimecode\n\n\nclass VideoOpenFailure(Exception):\n    """""" VideoOpenFailure: Raised when an OpenCV VideoCapture object fails to open (i.e. calling\n    the isOpened() method returns a non True value). """"""\n    def __init__(self, file_list=None, message=\n                 ""OpenCV VideoCapture object failed to return True when calling isOpened().""):\n        # type: (Iterable[(str, str)], str)\n        # Pass message string to base Exception class.\n        super(VideoOpenFailure, self).__init__(message)\n        # list of (filename: str, filepath: str)\n        self.file_list = file_list\n\n\nclass VideoFramerateUnavailable(Exception):\n    """""" VideoFramerateUnavailable: Raised when the framerate cannot be determined from the video,\n    and the framerate has not been overriden/forced in the VideoManager. """"""\n    def __init__(self, file_name=None, file_path=None, message=\n                 ""OpenCV VideoCapture object failed to return framerate when calling ""\n                 ""get(cv2.CAP_PROP_FPS).""):\n        # type: (str, str, str)\n        # Pass message string to base Exception class.\n        super(VideoFramerateUnavailable, self).__init__(message)\n        # Set other exception properties.\n        self.file_name = file_name\n        self.file_path = file_path\n\n\nclass VideoParameterMismatch(Exception):\n    """""" VideoParameterMismatch: Raised when opening multiple videos with a VideoManager, and some\n    of the video parameters (frame height, frame width, and framerate/FPS) do not match. """"""\n    def __init__(self, file_list=None, message=\n                 ""OpenCV VideoCapture object parameters do not match.""):\n        # type: (Iterable[Tuple[int, float, float, str, str]], str)\n        # Pass message string to base Exception class.\n        super(VideoParameterMismatch, self).__init__(message)\n        # list of (param_mismatch_type: int, parameter value, expected value,\n        #          filename: str, filepath: str)\n        # where param_mismatch_type is an OpenCV CAP_PROP (e.g. CAP_PROP_FPS).\n        self.file_list = file_list\n\n\nclass VideoDecodingInProgress(RuntimeError):\n    """""" VideoDecodingInProgress: Raised when attempting to call certain VideoManager methods that\n    must be called *before* start() has been called. """"""\n    pass\n\nclass VideoDecoderNotStarted(RuntimeError):\n    """""" VideoDecodingInProgress: Raised when attempting to call certain VideoManager methods that\n    must be called *after* start() has been called. """"""\n    pass\n\nclass InvalidDownscaleFactor(ValueError):\n    """""" InvalidDownscaleFactor: Raised when trying to set invalid downscale factor. """"""\n    def __init__(self, message=""Downscale factor must be a positive integer greater than zero.""):\n        super(InvalidDownscaleFactor, self).__init__(message)\n\n\n# The default downscale factor for a video of size W x H enforces the constraint\n# that W >= 200 to ensure an adequate amount of pixels for scene detection.\nDEFAULT_DOWNSCALE_FACTORS = {\n    3200: 12,        # ~4k\n    2100: 8,        # ~2k\n    1700: 6,        # ~1080p\n    1200: 5,\n    900: 4,         # ~720p\n    600: 3,\n    400: 2        # ~480p\n}\n\n\ndef compute_downscale_factor(frame_width):\n    # type: (int) -> int\n    """""" Compute Downscale Factor: Returns the optimal default downscale factor based on\n    a video\'s resolution (specifically, the width parameter).\n\n    Returns:\n        int: The defalt downscale factor to use with a video of frame_height x frame_width.\n    """"""\n    for width in sorted(DEFAULT_DOWNSCALE_FACTORS, reverse=True):\n        if frame_width >= width:\n            return DEFAULT_DOWNSCALE_FACTORS[width]\n    return 1\n\n\ndef get_video_name(video_file):\n    # type: (str) -> Tuple[str, str]\n    """""" Get Video Name: Returns a string representing the video file/device name.\n\n    Returns:\n        str: Video file name or device ID. In the case of a video, only the file\n            name is returned, not the whole path. For a device, the string format\n            is \'Device 123\', where 123 is the integer ID of the capture device.\n    """"""\n    if isinstance(video_file, int):\n        return (\'Device %d\' % video_file, video_file)\n    return (os.path.split(video_file)[1], video_file)\n\n\ndef get_num_frames(cap_list):\n    # type: (List[cv2.VideoCapture]) -> int\n    """""" Get Number of Frames: Returns total number of frames in the cap_list.\n\n    Calls get(CAP_PROP_FRAME_COUNT) and returns the sum for all VideoCaptures.\n    """"""\n    return sum([math.trunc(cap.get(cv2.CAP_PROP_FRAME_COUNT)) for cap in cap_list])\n\n\ndef open_captures(video_files, framerate=None, validate_parameters=True):\n    # type: (Iterable[str], float, bool) -> Tuple[List[VideoCapture], float, Tuple[int, int]]\n    """""" Open Captures - helper function to open all capture objects, set the framerate,\n    and ensure that all open captures have been opened and the framerates match on a list\n    of video file paths, or a list containing a single device ID.\n\n    Arguments:\n        video_files (list of str(s)/int): A list of one or more paths (str), or a list\n            of a single integer device ID, to open as an OpenCV VideoCapture object.\n            A ValueError will be raised if the list does not conform to the above.\n        framerate (float, optional): Framerate to assume when opening the video_files.\n            If not set, the first open video is used for deducing the framerate of\n            all videos in the sequence.\n        validate_parameters (bool, optional): If true, will ensure that the frame sizes\n            (width, height) and frame rate (FPS) of all passed videos is the same.\n            A VideoParameterMismatch is raised if the framerates do not match.\n\n    Returns:\n        A tuple of form (cap_list, framerate, framesize) where cap_list is a list of open\n        OpenCV VideoCapture objects in the same order as the video_files list, framerate\n        is a float of the video(s) framerate(s), and framesize is a tuple of (width, height)\n        where width and height are integers representing the frame size in pixels.\n\n    Raises:\n        ValueError, IOError, VideoFramerateUnavailable, VideoParameterMismatch\n    """"""\n    is_device = False\n    if not video_files:\n        raise ValueError(""Expected at least 1 video file or device ID."")\n    if isinstance(video_files[0], int):\n        if len(video_files) > 1:\n            raise ValueError(""If device ID is specified, no video sources may be appended."")\n        elif video_files[0] < 0:\n            raise ValueError(""Invalid/negative device ID specified."")\n        is_device = True\n    elif not all([isinstance(video_file, (str, STRING_TYPE)) for video_file in video_files]):\n        raise ValueError(""Unexpected element type in video_files list (expected str(s)/int)."")\n    elif framerate is not None and not isinstance(framerate, float):\n        raise TypeError(""Expected type float for parameter framerate."")\n    # Check if files exist.\n    if not is_device and any([not os.path.exists(video_file) for video_file in video_files]):\n        raise IOError(""Video file(s) not found."")\n    cap_list = []\n\n    try:\n        cap_list = [cv2.VideoCapture(video_file) for video_file in video_files]\n        video_names = [get_video_name(video_file) for video_file in video_files]\n        closed_caps = [video_names[i] for i, cap in\n                       enumerate(cap_list) if not cap.isOpened()]\n        if closed_caps:\n            raise VideoOpenFailure(closed_caps)\n\n        cap_framerates = [cap.get(cv2.CAP_PROP_FPS) for cap in cap_list]\n        cap_framerate, check_framerate = validate_capture_framerate(\n            video_names, cap_framerates, framerate)\n        # Store frame sizes as integers (VideoCapture.get() returns float).\n        cap_frame_sizes = [(math.trunc(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),\n                            math.trunc(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n                           for cap in cap_list]\n        cap_frame_size = cap_frame_sizes[0]\n\n        # If we need to validate the parameters, we check that the FPS and width/height\n        # of all open captures is identical (or almost identical in the case of FPS).\n        if validate_parameters:\n            validate_capture_parameters(\n                video_names=video_names, cap_frame_sizes=cap_frame_sizes,\n                check_framerate=check_framerate, cap_framerates=cap_framerates)\n\n    except:\n        release_captures(cap_list)\n        raise\n\n    return (cap_list, cap_framerate, cap_frame_size)\n\n\ndef release_captures(cap_list):\n    # type: (Iterable[VideoCapture]) -> None\n    """""" Close Captures:  Calls the release() method on every capture in cap_list. """"""\n    for cap in cap_list:\n        cap.release()\n\n\ndef close_captures(cap_list):\n    # type: (Iterable[VideoCapture]) -> None\n    """""" Close Captures:  Calls the close() method on every capture in cap_list. """"""\n    for cap in cap_list:\n        cap.close()\n\n\ndef validate_capture_framerate(video_names, cap_framerates, framerate=None):\n    # type: (List[Tuple[str, str]], List[float], Optional[float]) -> Tuple[float, bool]\n    """""" Validate Capture Framerate: Ensures that the passed capture framerates are valid and equal.\n\n    Raises:\n        ValueError, TypeError, VideoFramerateUnavailable\n    """"""\n    check_framerate = True\n    cap_framerate = cap_framerates[0]\n    if framerate is not None:\n        if isinstance(framerate, float):\n            if framerate < scenedetect.frame_timecode.MINIMUM_FRAMES_PER_SECOND_FLOAT:\n                raise ValueError(""Invalid framerate (must be a positive non-zero value)."")\n            cap_framerate = framerate\n            check_framerate = False\n        else:\n            raise TypeError(""Expected float for framerate, got %s."" % type(framerate).__name__)\n    else:\n        unavailable_framerates = [(video_names[i][0], video_names[i][1]) for\n                                  i, fps in enumerate(cap_framerates) if fps <\n                                  scenedetect.frame_timecode.MINIMUM_FRAMES_PER_SECOND_FLOAT]\n        if unavailable_framerates:\n            raise VideoFramerateUnavailable(unavailable_framerates)\n    return (cap_framerate, check_framerate)\n\n\ndef validate_capture_parameters(video_names, cap_frame_sizes, check_framerate=False,\n                                cap_framerates=None):\n    # type: (List[Tuple[str, str]], List[Tuple[int, int]], Optional[bool],\n    #        Optional[List[float]]) -> None\n    """""" Validate Capture Parameters: Ensures that all passed capture frame sizes and (optionally)\n    framerates are equal.  Raises VideoParameterMismatch if there is a mismatch.\n\n    Raises:\n        VideoParameterMismatch\n    """"""\n    bad_params = []\n    max_framerate_delta = scenedetect.frame_timecode.MINIMUM_FRAMES_PER_SECOND_FLOAT\n    # Check heights/widths match.\n    bad_params += [(cv2.CAP_PROP_FRAME_WIDTH, frame_size[0],\n                    cap_frame_sizes[0][0], video_names[i][0], video_names[i][1]) for\n                   i, frame_size in enumerate(cap_frame_sizes)\n                   if abs(frame_size[0] - cap_frame_sizes[0][0]) > 0]\n    bad_params += [(cv2.CAP_PROP_FRAME_HEIGHT, frame_size[1],\n                    cap_frame_sizes[0][1], video_names[i][0], video_names[i][1]) for\n                   i, frame_size in enumerate(cap_frame_sizes)\n                   if abs(frame_size[1] - cap_frame_sizes[0][1]) > 0]\n    # Check framerates if required.\n    if check_framerate:\n        bad_params += [(cv2.CAP_PROP_FPS, fps, cap_framerates[0], video_names[i][0],\n                        video_names[i][1]) for i, fps in enumerate(cap_framerates)\n                       if math.fabs(fps - cap_framerates[0]) > max_framerate_delta]\n\n    if bad_params:\n        raise VideoParameterMismatch(bad_params)\n\n\nclass VideoManager(object):\n    """""" Object for providing a cv2.VideoCapture-like interface to a set of one or more\n    video files, or a single device ID.  Similar to VideoManagerAsync, but runs in the\n    same thread that it is created in.  Supports seeking and setting end time/duration.\n    """"""\n    def __init__(self, video_files, framerate=None, logger=None):\n        # type: (List[str], Optional[float])\n        """""" VideoManager Constructor Method (__init__)\n\n        Arguments:\n            video_files (list of str(s)/int): A list of one or more paths (str), or a list\n                of a single integer device ID, to open as an OpenCV VideoCapture object.\n            framerate (float, optional): Framerate to assume when storing FrameTimecodes.\n                If not set (i.e. is None), it will be deduced from the first open capture\n                in video_files, else raises a VideoFramerateUnavailable exception.\n\n        Raises:\n            ValueError, TypeError, IOError, VideoOpenFailure, VideoFramerateUnavailable,\n            VideoFramerateMismatch\n        """"""\n        if not video_files:\n            raise ValueError(""At least one string/integer must be passed in the video_files list."")\n        # These VideoCaptures are only open in this process.\n        self._cap_list, self._cap_framerate, self._cap_framesize = open_captures(\n            video_files=video_files, framerate=framerate)\n        self._end_of_video = False\n        self._start_time = self.get_base_timecode()\n        self._end_time = None\n        self._curr_time = self.get_base_timecode()\n        self._last_frame = None\n        self._curr_cap, self._curr_cap_idx = None, None\n        self._video_file_paths = video_files\n        self._logger = logger\n        if self._logger is not None:\n            self._logger.info(\n                \'Loaded %d video%s, framerate: %.2f FPS, resolution: %d x %d\',\n                len(self._cap_list), \'s\' if len(self._cap_list) > 1 else \'\',\n                self.get_framerate(), *self.get_framesize())\n        self._started = False\n        self._downscale_factor = 1\n        self._frame_length = get_num_frames(self._cap_list)\n\n    def set_downscale_factor(self, downscale_factor=None):\n        # type: (Optional[int]) -> None\n        """""" Set Downscale Factor - sets the downscale/subsample factor of returned frames.\n\n        If N is the downscale_factor, the size of the frames returned becomes\n        frame_width/N x frame_height/N via subsampling.\n\n        If downscale_factor is None, the downscale factor is computed automatically\n        based on the current video\'s resolution.  A downscale_factor of 1 indicates\n        no downscaling.\n        """"""\n        if downscale_factor is None:\n            self._downscale_factor = compute_downscale_factor(self.get_framesize()[0])\n        else:\n            if not downscale_factor > 0:\n                raise InvalidDownscaleFactor()\n            self._downscale_factor = downscale_factor\n        if self._logger is not None:\n            effective_framesize = self.get_framesize_effective()\n            self._logger.info(\n                \'Downscale factor set to %d, effective resolution: %d x %d\',\n                self._downscale_factor, effective_framesize[0], effective_framesize[1])\n\n\n    def get_num_videos(self):\n        # type: () -> int\n        """""" Get Number of Videos - returns the length of the capture list (self._cap_list),\n        representing the number of videos the VideoManager has opened.\n        Returns:\n            (int) Number of videos, equal to length of capture list.\n        """"""\n        return len(self._cap_list)\n\n\n    def get_video_paths(self):\n        # type: () -> List[str]\n        """""" Get Video Paths - returns list of strings containing paths to the open video(s).\n        Returns:\n            (List[str]) List of paths to the video files opened by the VideoManager.\n        """"""\n        return list(self._video_file_paths)\n\n\n    def get_framerate(self):\n        # type: () -> float\n        """""" Get Framerate - returns the framerate the VideoManager is assuming for all\n        open VideoCaptures.  Obtained from either the capture itself, or the passed\n        framerate parameter when the VideoManager object was constructed.\n        Returns:\n            (float) Framerate, in frames/sec.\n        """"""\n        return self._cap_framerate\n\n\n    def get_base_timecode(self):\n        # type: () -> FrameTimecode\n        """""" Get Base Timecode - returns a FrameTimecode object at frame 0 / time 00:00:00.\n\n        The timecode returned by this method can be used to perform arithmetic (e.g.\n        addition), passing the resulting values back to the VideoManager (e.g. for the\n        set_duration() method), as the framerate of the returned FrameTimecode object\n        matches that of the VideoManager.\n\n        As such, this method is equivalent to creating a FrameTimecode at frame 0 with\n        the VideoManager framerate, for example, given a VideoManager called obj,\n        the following expression will evaluate as True:\n            obj.get_base_timecode() == FrameTimecode(0, obj.get_framerate())\n\n        Furthermore, the base timecode object returned by a particular VideoManager\n        should not be passed to another one, unless you first verify that their\n        framerates are the same.\n\n        Returns:\n            FrameTimecode object set to frame 0/time 00:00:00 with the video(s) framerate.\n        """"""\n        return FrameTimecode(timecode=0, fps=self._cap_framerate)\n\n\n    def get_current_timecode(self):\n        # type: () -> FrameTimecode\n        """""" Get Current Timecode - returns a FrameTimecode object at current VideoManager position.\n\n        Returns:\n            FrameTimecode object at the current VideoManager position with the video(s) framerate.\n        """"""\n        return self._curr_time\n\n\n    def get_framesize(self):\n        # type: () -> Tuple[int, int]\n        """""" Get Frame Size - returns the frame size of the video(s) open in the\n        VideoManager\'s capture objects.\n\n        Returns:\n            Tuple[int, int]: Video frame size in the form (width, height) where width\n                and height represent the size of the video frame in pixels.\n        """"""\n        return self._cap_framesize\n\n    def get_framesize_effective(self):\n        # type: () -> Tuple[int, int]\n        """""" Get Frame Size - returns the frame size of the video(s) open in the\n        VideoManager\'s capture objects, divided by the current downscale factor.\n\n        Returns:\n            Tuple[int, int]: Video frame size in the form (width, height) where width\n                and height represent the size of the video frame in pixels.\n        """"""\n        return [num_pixels / self._downscale_factor for num_pixels in self._cap_framesize]\n\n\n    def set_duration(self, duration=None, start_time=None, end_time=None):\n        # type: (Optional[FrameTimecode], Optional[FrameTimecode], Optional[FrameTimecode]) -> None\n        """""" Set Duration - sets the duration/length of the video(s) to decode, as well as\n        the start/end times.  Must be called before start() is called, otherwise a\n        VideoDecodingInProgress exception will be thrown.  May be called after reset()\n        as well.\n\n        Arguments:\n            duration (Optional[FrameTimecode]): The (maximum) duration in time to\n                decode from the opened video(s). Mutually exclusive with end_time\n                (i.e. if duration is set, end_time must be None).\n            start_time (Optional[FrameTimecode]): The time/first frame at which to\n                start decoding frames from. If set, the input video(s) will be\n                seeked to when start() is called, at which point the frame at\n                start_time can be obtained by calling retrieve().\n            end_time (Optional[FrameTimecode]): The time at which to stop decoding\n                frames from the opened video(s). Mutually exclusive with duration\n                (i.e. if end_time is set, duration must be None).\n\n        Raises:\n            VideoDecodingInProgress\n        """"""\n        if self._started:\n            raise VideoDecodingInProgress()\n\n        # Ensure any passed timecodes have the proper framerate.\n        if ((duration is not None and not duration.equal_framerate(self._cap_framerate)) or\n                (start_time is not None and not start_time.equal_framerate(self._cap_framerate)) or\n                (end_time is not None and not end_time.equal_framerate(self._cap_framerate))):\n            raise ValueError(""FrameTimecode framerate does not match."")\n\n        if duration is not None and end_time is not None:\n            raise TypeError(""Only one of duration and end_time may be specified, not both."")\n\n        if start_time is not None:\n            self._start_time = start_time\n\n        if end_time is not None:\n            if end_time < start_time:\n                raise ValueError(""end_time is before start_time in time."")\n            self._end_time = end_time\n        elif duration is not None:\n            # Need to subtract 1 here as end_time is inclusive.\n            self._end_time = self._start_time + duration - 1\n\n        if self._end_time is not None:\n            self._frame_length = max(self._frame_length, self._end_time.get_frames())\n        self._frame_length -= self._start_time.get_frames()\n\n        if self._logger is not None:\n            self._logger.info(\n                \'Duration set, start: %s, duration: %s, end: %s.\',\n                start_time.get_timecode() if start_time is not None else start_time,\n                duration.get_timecode() if duration is not None else duration,\n                end_time.get_timecode() if end_time is not None else end_time)\n\n\n    def start(self):\n        # type: () -> None\n        """""" Start - starts video decoding and seeks to start time.  Raises\n        exception VideoDecodingInProgress if the method is called after the\n        decoder process has already been started.\n\n        Raises:\n            VideoDecodingInProgress\n        """"""\n        if self._started:\n            raise VideoDecodingInProgress()\n\n        self._started = True\n        self._get_next_cap()\n        self.seek(self._start_time)\n\n\n    def seek(self, timecode):\n        # type: (FrameTimecode) -> bool\n        """""" Seek - seeks forwards to the passed timecode.\n\n        Only supports seeking forwards (i.e. timecode must be greater than the\n        current VideoManager position).  Can only be used after the start()\n        method has been called.\n\n        Arguments:\n            timecode (FrameTimecode): Time in video to seek forwards to.\n\n        Returns:\n            True if seeking succeeded, False if no more frames / end of video.\n\n        Raises:\n            VideoDecoderNotStarted\n        """"""\n        if not self._started:\n            raise VideoDecoderNotStarted()\n\n        while self._curr_time < timecode:\n            if self._curr_cap is None and not self._get_next_cap():\n                return False\n            if self._curr_cap.grab():\n                self._curr_time += 1\n            else:\n                if not self._get_next_cap():\n                    return False\n        return True\n\n\n    def release(self):\n        # type: () -> None\n        """""" Release (cv2.VideoCapture method), releases all open capture(s). """"""\n        release_captures(self._cap_list)\n        self._cap_list = []\n        self._started = False\n\n\n    def reset(self):\n        # type: () -> None\n        """""" Reset - Reopens captures passed to the constructor of the VideoManager.\n\n        Can only be called after the release method has been called.\n\n        Raises:\n            VideoDecodingInProgress\n        """"""\n        if self._started:\n            raise VideoDecodingInProgress()\n\n        self._started = False\n        self._end_of_video = False\n        self._curr_time = self.get_base_timecode()\n        self._cap_list, self._cap_framerate, self._cap_framesize = open_captures(\n            video_files=self._video_file_paths, framerate=self._curr_time.get_framerate())\n        self._curr_cap, self._curr_cap_idx = None, None\n\n\n    def get(self, capture_prop, index=None):\n        # type: (int, Optional[int]) -> Union[float, int]\n        """""" Get (cv2.VideoCapture method) - obtains capture properties from the current\n        VideoCapture object in use.  Index represents the same index as the original\n        video_files list passed to the constructor.  Getting/setting the position (POS)\n        properties has no effect; seeking is implemented using VideoDecoder methods.\n\n        Note that getting the property CAP_PROP_FRAME_COUNT will return the integer sum of\n        the frame count for all VideoCapture objects if index is not specified (or is None),\n        otherwise the frame count for the given VideoCapture index is returned instead.\n\n        Arguments:\n            capture_prop: OpenCV VideoCapture property to get (i.e. CAP_PROP_FPS).\n            index (optional): Index in file_list of capture to get property from (default\n                is zero). Index is not checked and will raise exception if out of bounds.\n\n        Returns:\n            Return value from calling get(property) on the VideoCapture object.\n        """"""\n        if capture_prop == cv2.CAP_PROP_FRAME_COUNT and index is None:\n            return self._frame_length\n        elif index is None:\n            index = 0\n        return self._cap_list[index].get(capture_prop)\n\n\n    def grab(self):\n        # type: () -> bool\n        """""" Grab (cv2.VideoCapture method) - retrieves a frame but does not return it.\n\n        Returns:\n            bool: True if a frame was grabbed, False otherwise.\n\n        Raises:\n            VideoDecoderNotStarted\n        """"""\n        if not self._started:\n            raise VideoDecoderNotStarted()\n\n        grabbed = False\n        if self._curr_cap is not None and self._end_of_video != True:\n            while not grabbed:\n                grabbed = self._curr_cap.grab()\n                if not grabbed and not self._get_next_cap():\n                    break\n                else:\n                    self._curr_time += 1\n        if self._end_time is not None and self._curr_time > self._end_time:\n            grabbed = False\n            self._last_frame = None\n        return grabbed\n\n\n    def retrieve(self):\n        # type: () -> Tuple[bool, Union[None, numpy.ndarray]]\n        """""" Retrieve (cv2.VideoCapture method) - retrieves and returns a frame.\n\n        Frame returned corresponds to last call to get().\n\n        Returns:\n            Tuple[bool, Union[None, numpy.ndarray]]: Returns tuple of\n                (True, frame_image) if a frame was grabbed during the last call\n                to grab(), and where frame_image is a numpy ndarray of the\n                decoded frame, otherwise returns (False, None).\n\n        Raises:\n            VideoDecoderNotStarted\n        """"""\n        if not self._started:\n            raise VideoDecoderNotStarted()\n\n        retrieved = False\n        if self._curr_cap is not None and self._end_of_video != True:\n            while not retrieved:\n                retrieved, self._last_frame = self._curr_cap.retrieve()\n                if not retrieved and not self._get_next_cap():\n                    break\n                if self._downscale_factor > 1:\n                    self._last_frame = self._last_frame[\n                        ::self._downscale_factor, ::self._downscale_factor, :]\n        if self._end_time is not None and self._curr_time > self._end_time:\n            retrieved = False\n            self._last_frame = None\n        return (retrieved, self._last_frame)\n\n\n    def read(self):\n        # type: () -> Tuple[bool, Union[None, numpy.ndarray]]\n        """""" Read (cv2.VideoCapture method) - retrieves and returns a frame.\n\n        Returns:\n            Tuple[bool, Union[None, numpy.ndarray]]: Returns tuple of\n                (True, frame_image) if a frame was grabbed, where frame_image\n                is a numpy ndarray of the decoded frame, otherwise (False, None).\n\n        Raises:\n            VideoDecoderNotStarted\n        """"""\n        if not self._started:\n            raise VideoDecoderNotStarted()\n\n        read_frame = False\n        if self._curr_cap is not None and self._end_of_video != True:\n            while not read_frame:\n                read_frame, self._last_frame = self._curr_cap.read()\n                if not read_frame and not self._get_next_cap():\n                    break\n                if self._downscale_factor > 1:\n                    self._last_frame = self._last_frame[\n                        ::self._downscale_factor, ::self._downscale_factor, :]\n        if self._end_time is not None and self._curr_time > self._end_time:\n            read_frame = False\n            self._last_frame = None\n        if read_frame:\n            self._curr_time += 1\n        return (read_frame, self._last_frame)\n\n\n    def _get_next_cap(self):\n        # type: () -> bool\n        self._curr_cap = None\n        if self._curr_cap_idx is None:\n            self._curr_cap_idx = 0\n            self._curr_cap = self._cap_list[0]\n            return True\n        else:\n            if not (self._curr_cap_idx + 1) < len(self._cap_list):\n                self._end_of_video = True\n                return False\n            self._curr_cap_idx += 1\n            self._curr_cap = self._cap_list[self._curr_cap_idx]\n            return True\n'"
scenedetect/video_splitter.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" TODO.\n\nThis file contains functions to split videos with a scene list using\nexternal tools (e.g. mkvmerge, ffmpeg).\n\n""""""\n\nimport logging\nimport subprocess\nimport math\nimport time\nfrom string import Template\n\nfrom scenedetect.platform import tqdm\n\n\ndef is_mkvmerge_available():\n    # type: () -> bool\n    """""" Is mkvmerge Available: Gracefully checks if mkvmerge command is available.\n\n    Returns:\n        (bool) True if the mkvmerge command is available, False otherwise.\n    """"""\n    ret_val = None\n    try:\n        ret_val = subprocess.call([\'mkvmerge\', \'--quiet\'])\n    except OSError:\n        return False\n    if ret_val is not None and ret_val != 2:\n        return False\n    return True\n\n\ndef is_ffmpeg_available():\n    # type: () -> bool\n    """""" Is ffmpeg Available: Gracefully checks if ffmpeg command is available.\n\n    Returns:\n        (bool) True if the ffmpeg command is available, False otherwise.\n    """"""\n    ret_val = None\n    try:\n        ret_val = subprocess.call([\'ffmpeg\', \'-v\', \'quiet\'])\n    except OSError:\n        return False\n    if ret_val is not None and ret_val != 1:\n        return False\n    return True\n\n\n\ndef split_video_mkvmerge(input_video_paths, scene_list, output_file_prefix,\n                         video_name, suppress_output=False):\n    # type: (List[str], List[FrameTimecode, FrameTimecode], Optional[str],\n    #        Optional[bool]) -> None\n    """""" Calls the mkvmerge command on the input video(s), splitting it at the\n    passed timecodes, where each scene is written in sequence from 001. """"""\n\n    if not input_video_paths:\n        return\n    ret_val = None\n    # mkvmerge automatically appends \'-$SCENE_NUMBER\'.\n    output_file_name = output_file_prefix.replace(\'-${SCENE_NUMBER}\', \'\')\n    output_file_name = output_file_prefix.replace(\'-$SCENE_NUMBER\', \'\')\n    output_file_template = Template(output_file_name)\n    output_file_name = output_file_template.safe_substitute(\n        VIDEO_NAME=video_name,\n        SCENE_NUMBER=\'\')\n\n    try:\n        call_list = [\'mkvmerge\']\n        if suppress_output:\n            call_list.append(\'--quiet\')\n        call_list += [\n            \'-o\', output_file_name,\n            \'--split\',\n            #\'timecodes:%s\' % \',\'.join(\n            #    [start_time.get_timecode() for start_time, _ in scene_list[1:]]),\n            \'parts:%s\' % \',\'.join(\n                [\'%s-%s\' % (start_time.get_timecode(), end_time.get_timecode())\n                 for start_time, end_time in scene_list]),\n            \' +\'.join(input_video_paths)]\n        total_frames = scene_list[-1][1].get_frames() - scene_list[0][0].get_frames()\n        processing_start_time = time.time()\n        ret_val = subprocess.call(call_list)\n        if not suppress_output:\n            print(\'\')\n            logging.info(\'Average processing speed %.2f frames/sec.\',\n                         float(total_frames) / (time.time() - processing_start_time))\n    except OSError:\n        logging.error(\'mkvmerge could not be found on the system.\'\n                      \' Please install mkvmerge to enable video output support.\')\n        raise\n    if ret_val is not None and ret_val != 0:\n        logging.error(\'Error splitting video (mkvmerge returned %d).\', ret_val)\n\n\ndef split_video_ffmpeg(input_video_paths, scene_list, output_file_template, video_name,\n                       arg_override=\'-c:v libx264 -preset fast -crf 21 -c:a copy\',\n                       hide_progress=False, suppress_output=False):\n    # type: (List[str], List[Tuple[FrameTimecode, FrameTimecode]], Optional[str],\n    #        Optional[str], Optional[bool]) -> None\n    """""" Calls the ffmpeg command on the input video(s), generating a new video for\n    each scene based on the start/end timecodes. """"""\n\n    if not input_video_paths:\n        return\n\n    if len(input_video_paths) > 1:\n        # TODO: Add support for splitting multiple/appended input videos.\n        # https://trac.ffmpeg.org/wiki/Concatenate#samecodec\n        # Requires generating a temporary file list for ffmpeg.\n        logging.error(\'Splitting multiple input videos with ffmpeg is not supported yet.\')\n        raise NotImplementedError()\n\n    arg_override = arg_override.replace(\'\\\\""\', \'""\')\n\n    ret_val = None\n    arg_override = arg_override.split(\' \')\n    filename_template = Template(output_file_template)\n    scene_num_format = \'%0\'\n    scene_num_format += str(max(3, math.floor(math.log(len(scene_list), 10)) + 1)) + \'d\'\n\n    try:\n        progress_bar = None\n        total_frames = 1 + scene_list[-1][1].get_frames() - scene_list[0][0].get_frames()\n        if tqdm and not hide_progress:\n            progress_bar = tqdm(total=total_frames, unit=\'frame\', miniters=1)\n        processing_start_time = time.time()\n        for i, (start_time, end_time) in enumerate(scene_list):\n            duration = (end_time - start_time)\n            # Fix FFmpeg start timecode frame shift.\n            start_time -= 1\n            call_list = [\'ffmpeg\']\n            if suppress_output:\n                call_list += [\'-v\', \'quiet\']\n            elif i > 0:\n                # Only show ffmpeg output for the first call, which will display any\n                # errors if it fails, and then break the loop. We only show error messages\n                # for the remaining calls.\n                call_list += [\'-v\', \'error\']\n            call_list += [\n                \'-y\',\n                \'-ss\',\n                start_time.get_timecode(),\n                \'-i\',\n                input_video_paths[0]]\n            call_list += arg_override\n            call_list += [\n                \'-strict\',\n                \'-2\',\n                \'-t\',\n                duration.get_timecode(),\n                \'-sn\',\n                filename_template.safe_substitute(\n                    VIDEO_NAME=video_name,\n                    SCENE_NUMBER=scene_num_format % (i + 1))\n                ]\n            ret_val = subprocess.call(call_list)\n            if not suppress_output and i == 0 and len(scene_list) > 1:\n                logging.info(\n                    \'Output from ffmpeg for Scene 1 shown above, splitting remaining scenes...\')\n            if ret_val != 0:\n                break\n            if progress_bar:\n                progress_bar.update(duration.get_frames())\n        if progress_bar:\n            print(\'\')\n            logging.info(\'Average processing speed %.2f frames/sec.\',\n                         float(total_frames) / (time.time() - processing_start_time))\n    except OSError:\n        logging.error(\'ffmpeg could not be found on the system.\'\n                      \' Please install ffmpeg to enable video output support.\')\n    if ret_val is not None and ret_val != 0:\n        logging.error(\'Error splitting video (ffmpeg returned %d).\', ret_val)\n\n'"
utils/__init__.py,0,b''
utils/data_augmentation.py,32,"b'import numpy as np\nfrom random import shuffle\nfrom .preprocessor import preprocess_input\nfrom .preprocessor import _imread as imread\nfrom .preprocessor import _imresize as imresize\nfrom .preprocessor import to_categorical\nimport scipy.ndimage as ndi\nimport cv2\n\nclass ImageGenerator(object):\n    """""" Image generator with saturation, brightness, lighting, contrast,\n    horizontal flip and vertical flip transformations. It supports\n    bounding boxes coordinates.\n\n    TODO:\n        - Finish support for not using bounding_boxes\n            - Random crop\n            - Test other transformations\n    """"""\n    def __init__(self, ground_truth_data, batch_size, image_size,\n                train_keys, validation_keys,\n                ground_truth_transformer=None,\n                path_prefix=None,\n                saturation_var=0.5,\n                brightness_var=0.5,\n                contrast_var=0.5,\n                lighting_std=0.5,\n                horizontal_flip_probability=0.5,\n                vertical_flip_probability=0.5,\n                do_random_crop=False,\n                grayscale=False,\n                zoom_range=[0.75, 1.25],\n                translation_factor=.3):\n\n        self.ground_truth_data = ground_truth_data\n        self.ground_truth_transformer = ground_truth_transformer\n        self.batch_size = batch_size\n        self.path_prefix = path_prefix\n        self.train_keys = train_keys\n        self.validation_keys = validation_keys\n        self.image_size = image_size\n        self.grayscale = grayscale\n        self.color_jitter = []\n        if saturation_var:\n            self.saturation_var = saturation_var\n            self.color_jitter.append(self.saturation)\n        if brightness_var:\n            self.brightness_var = brightness_var\n            self.color_jitter.append(self.brightness)\n        if contrast_var:\n            self.contrast_var = contrast_var\n            self.color_jitter.append(self.contrast)\n        self.lighting_std = lighting_std\n        self.horizontal_flip_probability = horizontal_flip_probability\n        self.vertical_flip_probability = vertical_flip_probability\n        self.do_random_crop = do_random_crop\n        self.zoom_range = zoom_range\n        self.translation_factor = translation_factor\n\n    def _do_random_crop(self, image_array):\n        """"""IMPORTANT: random crop only works for classification since the\n        current implementation does no transform bounding boxes""""""\n        height = image_array.shape[0]\n        width = image_array.shape[1]\n        x_offset = np.random.uniform(0, self.translation_factor * width)\n        y_offset = np.random.uniform(0, self.translation_factor * height)\n        offset = np.array([x_offset, y_offset])\n        scale_factor = np.random.uniform(self.zoom_range[0],\n                                        self.zoom_range[1])\n        crop_matrix = np.array([[scale_factor, 0],\n                                [0, scale_factor]])\n\n        image_array = np.rollaxis(image_array, axis=-1, start=0)\n        image_channel = [ndi.interpolation.affine_transform(image_channel,\n                        crop_matrix, offset=offset, order=0, mode=\'nearest\',\n                        cval=0.0) for image_channel in image_array]\n\n        image_array = np.stack(image_channel, axis=0)\n        image_array = np.rollaxis(image_array, 0, 3)\n        return image_array\n\n    def do_random_rotation(self, image_array):\n        """"""IMPORTANT: random rotation only works for classification since the\n        current implementation does no transform bounding boxes""""""\n        height = image_array.shape[0]\n        width = image_array.shape[1]\n        x_offset = np.random.uniform(0, self.translation_factor * width)\n        y_offset = np.random.uniform(0, self.translation_factor * height)\n        offset = np.array([x_offset, y_offset])\n        scale_factor = np.random.uniform(self.zoom_range[0],\n                                        self.zoom_range[1])\n        crop_matrix = np.array([[scale_factor, 0],\n                                [0, scale_factor]])\n\n        image_array = np.rollaxis(image_array, axis=-1, start=0)\n        image_channel = [ndi.interpolation.affine_transform(image_channel,\n                        crop_matrix, offset=offset, order=0, mode=\'nearest\',\n                        cval=0.0) for image_channel in image_array]\n\n        image_array = np.stack(image_channel, axis=0)\n        image_array = np.rollaxis(image_array, 0, 3)\n        return image_array\n\n    def _gray_scale(self, image_array):\n        return image_array.dot([0.299, 0.587, 0.114])\n\n    def saturation(self, image_array):\n        gray_scale = self._gray_scale(image_array)\n        alpha = 2.0 * np.random.random() * self.brightness_var\n        alpha = alpha + 1 - self.saturation_var\n        image_array = alpha * image_array + (1 - alpha) * gray_scale[:, :, None]\n        return np.clip(image_array, 0, 255)\n\n    def brightness(self, image_array):\n        alpha = 2 * np.random.random() * self.brightness_var\n        alpha = alpha + 1 - self.saturation_var\n        image_array = alpha * image_array\n        return np.clip(image_array, 0, 255)\n\n    def contrast(self, image_array):\n        gray_scale = (self._gray_scale(image_array).mean() *\n                        np.ones_like(image_array))\n        alpha = 2 * np.random.random() * self.contrast_var\n        alpha = alpha + 1 - self.contrast_var\n        image_array = image_array * alpha + (1 - alpha) * gray_scale\n        return np.clip(image_array, 0, 255)\n\n    def lighting(self, image_array):\n        covariance_matrix = np.cov(image_array.reshape(-1,3) /\n                                    255.0, rowvar=False)\n        eigen_values, eigen_vectors = np.linalg.eigh(covariance_matrix)\n        noise = np.random.randn(3) * self.lighting_std\n        noise = eigen_vectors.dot(eigen_values * noise) * 255\n        image_array = image_array + noise\n        return np.clip(image_array, 0 ,255)\n\n    def horizontal_flip(self, image_array, box_corners=None):\n        if np.random.random() < self.horizontal_flip_probability:\n            image_array = image_array[:, ::-1]\n            if box_corners != None:\n                box_corners[:, [0, 2]] = 1 - box_corners[:, [2, 0]]\n        return image_array, box_corners\n\n    def vertical_flip(self, image_array, box_corners=None):\n        if (np.random.random() < self.vertical_flip_probability):\n            image_array = image_array[::-1]\n            if box_corners != None:\n                box_corners[:, [1, 3]] = 1 - box_corners[:, [3, 1]]\n        return image_array, box_corners\n\n    def transform(self, image_array, box_corners=None):\n        shuffle(self.color_jitter)\n        for jitter in self.color_jitter:\n            image_array = jitter(image_array)\n\n        if self.lighting_std:\n            image_array = self.lighting(image_array)\n\n        if self.horizontal_flip_probability > 0:\n            image_array, box_corners = self.horizontal_flip(image_array,\n                                                            box_corners)\n\n        if self.vertical_flip_probability > 0:\n            image_array, box_corners = self.vertical_flip(image_array,\n                                                            box_corners)\n        return image_array, box_corners\n\n    def preprocess_images(self, image_array):\n        return preprocess_input(image_array)\n\n    def flow(self, mode=\'train\'):\n            while True:\n                if mode ==\'train\':\n                    shuffle(self.train_keys)\n                    keys = self.train_keys\n                elif mode == \'val\' or  mode == \'demo\':\n                    shuffle(self.validation_keys)\n                    keys = self.validation_keys\n                else:\n                    raise Exception(\'invalid mode: %s\' % mode)\n\n                inputs = []\n                targets = []\n                for key in keys:\n                    image_path = self.path_prefix + key\n                    image_array = imread(image_path)\n                    image_array = imresize(image_array, self.image_size)\n\n                    num_image_channels = len(image_array.shape)\n                    if num_image_channels != 3:\n                        continue\n\n                    ground_truth = self.ground_truth_data[key]\n\n                    if self.do_random_crop:\n                        image_array = self._do_random_crop(image_array)\n\n                    image_array = image_array.astype(\'float32\')\n                    if mode == \'train\' or mode == \'demo\':\n                        if self.ground_truth_transformer != None:\n                            image_array, ground_truth = self.transform(\n                                                                image_array,\n                                                                ground_truth)\n                            ground_truth = (\n                                self.ground_truth_transformer.assign_boxes(\n                                                            ground_truth))\n                        else:\n                            image_array = self.transform(image_array)[0]\n\n                    if self.grayscale:\n                        image_array = cv2.cvtColor(image_array.astype(\'uint8\'),\n                                        cv2.COLOR_RGB2GRAY).astype(\'float32\')\n                        image_array = np.expand_dims(image_array, -1)\n\n                    inputs.append(image_array)\n                    targets.append(ground_truth)\n                    if len(targets) == self.batch_size:\n                        inputs = np.asarray(inputs)\n                        targets = np.asarray(targets)\n                        # this will not work for boxes\n                        targets = to_categorical(targets)\n                        if mode == \'train\' or mode == \'val\':\n                            inputs = self.preprocess_images(inputs)\n                            yield self._wrap_in_dictionary(inputs, targets)\n                        if mode == \'demo\':\n                            yield self._wrap_in_dictionary(inputs, targets)\n                        inputs = []\n                        targets = []\n\n    def _wrap_in_dictionary(self, image_array, targets):\n        return [{\'input_1\':image_array},\n                {\'predictions\':targets}]\n'"
utils/datasets.py,10,"b'from scipy.io import loadmat\nimport pandas as pd\nimport numpy as np\nfrom random import shuffle\nimport os\nimport cv2\n\nclass DataManager(object):\n    """"""Class for loading fer2013 emotion classification dataset or\n        imdb gender classification dataset.""""""\n    def __init__(self, dataset_name=\'imdb\', dataset_path=None, image_size=(48, 48)):\n\n        self.dataset_name = dataset_name\n        self.dataset_path = dataset_path\n        self.image_size = image_size\n        if self.dataset_path != None:\n            self.dataset_path = dataset_path\n        elif self.dataset_name == \'imdb\':\n            self.dataset_path = \'../datasets/imdb_crop/imdb.mat\'\n        elif self.dataset_name == \'fer2013\':\n            self.dataset_path = \'../datasets/fer2013/fer2013.csv\'\n        elif self.dataset_name == \'KDEF\':\n            self.dataset_path = \'../datasets/KDEF/\'\n        else:\n            raise Exception(\'Incorrect dataset name, please input imdb or fer2013\')\n\n    def get_data(self):\n        if self.dataset_name == \'imdb\':\n            ground_truth_data = self._load_imdb()\n        elif self.dataset_name == \'fer2013\':\n            ground_truth_data = self._load_fer2013()\n        elif self.dataset_name == \'KDEF\':\n            ground_truth_data = self._load_KDEF()\n        return ground_truth_data\n\n    def _load_imdb(self):\n        face_score_treshold = 3\n        dataset = loadmat(self.dataset_path)\n        image_names_array = dataset[\'imdb\'][\'full_path\'][0, 0][0]\n        gender_classes = dataset[\'imdb\'][\'gender\'][0, 0][0]\n        face_score = dataset[\'imdb\'][\'face_score\'][0, 0][0]\n        second_face_score = dataset[\'imdb\'][\'second_face_score\'][0, 0][0]\n        face_score_mask = face_score > face_score_treshold\n        second_face_score_mask = np.isnan(second_face_score)\n        unknown_gender_mask = np.logical_not(np.isnan(gender_classes))\n        mask = np.logical_and(face_score_mask, second_face_score_mask)\n        mask = np.logical_and(mask, unknown_gender_mask)\n        image_names_array = image_names_array[mask]\n        gender_classes = gender_classes[mask].tolist()\n        image_names = []\n        for image_name_arg in range(image_names_array.shape[0]):\n            image_name = image_names_array[image_name_arg][0]\n            image_names.append(image_name)\n        return dict(zip(image_names, gender_classes))\n\n    def _load_fer2013(self):\n        data = pd.read_csv(self.dataset_path)\n        pixels = data[\'pixels\'].tolist()\n        width, height = 48, 48\n        faces = []\n        for pixel_sequence in pixels:\n            face = [int(pixel) for pixel in pixel_sequence.split(\' \')]\n            face = np.asarray(face).reshape(width, height)\n            face = cv2.resize(face.astype(\'uint8\'), self.image_size)\n            faces.append(face.astype(\'float32\'))\n        faces = np.asarray(faces)\n        faces = np.expand_dims(faces, -1)\n        emotions = pd.get_dummies(data[\'emotion\']).as_matrix()\n        return faces, emotions\n\n    def _load_KDEF(self):\n        class_to_arg = get_class_to_arg(self.dataset_name)\n        num_classes = len(class_to_arg)\n\n        file_paths = []\n        for folder, subfolders, filenames in os.walk(self.dataset_path):\n            for filename in filenames:\n                if filename.lower().endswith((\'.jpg\')):\n                    file_paths.append(os.path.join(folder, filename))\n\n        num_faces = len(file_paths)\n        y_size, x_size = self.image_size\n        faces = np.zeros(shape=(num_faces, y_size, x_size))\n        emotions = np.zeros(shape=(num_faces, num_classes))\n        for file_arg, file_path in enumerate(file_paths):\n            image_array = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)\n            image_array = cv2.resize(image_array, (y_size, x_size))\n            faces[file_arg] = image_array\n            file_basename = os.path.basename(file_path)\n            file_emotion = file_basename[4:6]\n            # there are two file names in the dataset that don\'t match the given classes\n            try:\n                emotion_arg = class_to_arg[file_emotion]\n            except:\n                continue\n            emotions[file_arg, emotion_arg] = 1\n        faces = np.expand_dims(faces, -1)\n        return faces, emotions\n\ndef get_labels(dataset_name):\n    if dataset_name == \'fer2013\':\n        return {0:\'angry\',1:\'disgust\',2:\'fear\',3:\'happy\',\n                4:\'sad\',5:\'surprise\',6:\'neutral\'}\n    elif dataset_name == \'imdb\':\n        return {0:\'woman\', 1:\'man\'}\n    elif dataset_name == \'KDEF\':\n        return {0:\'AN\', 1:\'DI\', 2:\'AF\', 3:\'HA\', 4:\'SA\', 5:\'SU\', 6:\'NE\'}\n    else:\n        raise Exception(\'Invalid dataset name\')\n\ndef get_class_to_arg(dataset_name=\'fer2013\'):\n    if dataset_name == \'fer2013\':\n        return {\'angry\':0, \'disgust\':1, \'fear\':2, \'happy\':3, \'sad\':4,\n                \'surprise\':5, \'neutral\':6}\n    elif dataset_name == \'imdb\':\n        return {\'woman\':0, \'man\':1}\n    elif dataset_name == \'KDEF\':\n        return {\'AN\':0, \'DI\':1, \'AF\':2, \'HA\':3, \'SA\':4, \'SU\':5, \'NE\':6}\n    else:\n        raise Exception(\'Invalid dataset name\')\n\ndef split_imdb_data(ground_truth_data, validation_split=.2, do_shuffle=False):\n    ground_truth_keys = sorted(ground_truth_data.keys())\n    if do_shuffle == True:\n        shuffle(ground_truth_keys)\n    training_split = 1 - validation_split\n    num_train = int(training_split * len(ground_truth_keys))\n    train_keys = ground_truth_keys[:num_train]\n    validation_keys = ground_truth_keys[num_train:]\n    return train_keys, validation_keys\n\ndef split_data(x, y, validation_split=.2):\n    num_samples = len(x)\n    num_train_samples = int((1 - validation_split)*num_samples)\n    train_x = x[:num_train_samples]\n    train_y = y[:num_train_samples]\n    val_x = x[num_train_samples:]\n    val_y = y[num_train_samples:]\n    train_data = (train_x, train_y)\n    val_data = (val_x, val_y)\n    return train_data, val_data\n\n'"
utils/grad_cam.py,20,"b'import cv2\nimport h5py\nimport keras\nimport keras.backend as K\nfrom keras.layers.core import Lambda\nfrom keras.models import Sequential\nfrom keras.models import load_model\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.framework import ops\n\nfrom .preprocessor import preprocess_input\n\n\ndef reset_optimizer_weights(model_filename):\n    model = h5py.File(model_filename, \'r+\')\n    del model[\'optimizer_weights\']\n    model.close()\n\n\ndef target_category_loss(x, category_index, num_classes):\n    return tf.multiply(x, K.one_hot([category_index], num_classes))\n\n\ndef target_category_loss_output_shape(input_shape):\n    return input_shape\n\n\ndef normalize(x):\n    # utility function to normalize a tensor by its L2 norm\n    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n\n\ndef load_image(image_array):\n    image_array = np.expand_dims(image_array, axis=0)\n    image_array = preprocess_input(image_array)\n    return image_array\n\n\ndef register_gradient():\n    if ""GuidedBackProp"" not in ops._gradient_registry._registry:\n        @ops.RegisterGradient(""GuidedBackProp"")\n        def _GuidedBackProp(op, gradient):\n            dtype = op.inputs[0].dtype\n            guided_gradient = (gradient * tf.cast(gradient > 0., dtype) *\n                               tf.cast(op.inputs[0] > 0., dtype))\n            return guided_gradient\n\n\ndef compile_saliency_function(model, activation_layer=\'conv2d_7\'):\n    input_image = model.input\n    layer_output = model.get_layer(activation_layer).output\n    max_output = K.max(layer_output, axis=3)\n    saliency = K.gradients(K.sum(max_output), input_image)[0]\n    return K.function([input_image, K.learning_phase()], [saliency])\n\n\ndef modify_backprop(model, name, task):\n    graph = tf.get_default_graph()\n    with graph.gradient_override_map({\'Relu\': name}):\n\n        # get layers that have an activation\n        activation_layers = [layer for layer in model.layers\n                             if hasattr(layer, \'activation\')]\n\n        # replace relu activation\n        for layer in activation_layers:\n            if layer.activation == keras.activations.relu:\n                layer.activation = tf.nn.relu\n\n        # re-instanciate a new model\n        if task == \'gender\':\n            model_path = \'../trained_models/gender_models/gender_mini_XCEPTION.21-0.95.hdf5\'\n        elif task == \'emotion\':\n            model_path = \'../trained_models/emotion_models/fer2013_mini_XCEPTION.102-0.66.hdf5\'\n            # model_path = \'../trained_models/fer2013_mini_XCEPTION.119-0.65.hdf5\'\n            # model_path = \'../trained_models/fer2013_big_XCEPTION.54-0.66.hdf5\'\n        new_model = load_model(model_path, compile=False)\n    return new_model\n\n\ndef deprocess_image(x):\n    """""" Same normalization as in:\n    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n    """"""\n    if np.ndim(x) > 3:\n        x = np.squeeze(x)\n    # normalize tensor: center on 0., ensure std is 0.1\n    x = x - x.mean()\n    x = x / (x.std() + 1e-5)\n    x = x * 0.1\n\n    # clip to [0, 1]\n    x = x + 0.5\n    x = np.clip(x, 0, 1)\n\n    # convert to RGB array\n    x = x * 255\n    if K.image_dim_ordering() == \'th\':\n        x = x.transpose((1, 2, 0))\n    x = np.clip(x, 0, 255).astype(\'uint8\')\n    return x\n\ndef compile_gradient_function(input_model, category_index, layer_name):\n    model = Sequential()\n    model.add(input_model)\n\n    num_classes = model.output_shape[1]\n    target_layer = lambda x: target_category_loss(x, category_index, num_classes)\n    model.add(Lambda(target_layer,\n                     output_shape = target_category_loss_output_shape))\n\n    loss = K.sum(model.layers[-1].output)\n    conv_output = model.layers[0].get_layer(layer_name).output\n    gradients = normalize(K.gradients(loss, conv_output)[0])\n    gradient_function = K.function([model.layers[0].input, K.learning_phase()],\n                                                    [conv_output, gradients])\n    return gradient_function\n\ndef calculate_gradient_weighted_CAM(gradient_function, image):\n    output, evaluated_gradients = gradient_function([image, False])\n    output, evaluated_gradients = output[0, :], evaluated_gradients[0, :, :, :]\n    weights = np.mean(evaluated_gradients, axis = (0, 1))\n    CAM = np.ones(output.shape[0 : 2], dtype=np.float32)\n    for weight_arg, weight in enumerate(weights):\n        CAM = CAM + (weight * output[:, :, weight_arg])\n    CAM = cv2.resize(CAM, (64, 64))\n    CAM = np.maximum(CAM, 0)\n    heatmap = CAM / np.max(CAM)\n\n    #Return to BGR [0..255] from the preprocessed image\n    image = image[0, :]\n    image = image - np.min(image)\n    image = np.minimum(image, 255)\n\n    CAM = cv2.applyColorMap(np.uint8(255 * heatmap), cv2.COLORMAP_JET)\n    CAM = np.float32(CAM) + np.float32(image)\n    CAM = 255 * CAM / np.max(CAM)\n    return np.uint8(CAM), heatmap\n\ndef calculate_guided_gradient_CAM(preprocessed_input, gradient_function, saliency_function):\n    CAM, heatmap = calculate_gradient_weighted_CAM(gradient_function, preprocessed_input)\n    saliency = saliency_function([preprocessed_input, 0])\n    gradCAM = saliency[0] * heatmap[..., np.newaxis]\n    #return deprocess_image(gradCAM)\n    return deprocess_image(saliency[0])\n    #return saliency[0]\n\ndef calculate_guided_gradient_CAM_v2(preprocessed_input, gradient_function,\n                                    saliency_function, target_size=(128, 128)):\n    CAM, heatmap = calculate_gradient_weighted_CAM(gradient_function, preprocessed_input)\n    heatmap = np.squeeze(heatmap)\n    heatmap = cv2.resize(heatmap.astype(\'uint8\'), target_size)\n    saliency = saliency_function([preprocessed_input, 0])\n    saliency = np.squeeze(saliency[0])\n    saliency = cv2.resize(saliency.astype(\'uint8\'), target_size)\n    gradCAM = saliency * heatmap\n    gradCAM =  deprocess_image(gradCAM)\n    return np.expand_dims(gradCAM, -1)\n\n\nif __name__ == \'__main__\':\n    import pickle\n    faces = pickle.load(open(\'faces.pkl\',\'rb\'))\n    face = faces[0]\n    model_filename = \'../../trained_models/emotion_models/mini_XCEPTION.523-0.65.hdf5\'\n    #reset_optimizer_weights(model_filename)\n    model = load_model(model_filename)\n\n    preprocessed_input = load_image(face)\n    predictions = model.predict(preprocessed_input)\n    predicted_class = np.argmax(predictions)\n    gradient_function = compile_gradient_function(model, predicted_class, \'conv2d_6\')\n    register_gradient()\n    guided_model = modify_backprop(model, \'GuidedBackProp\')\n    saliency_function = compile_saliency_function(guided_model)\n    guided_gradCAM = calculate_guided_gradient_CAM(preprocessed_input,\n                                gradient_function, saliency_function)\n\n    cv2.imwrite(\'guided_gradCAM.jpg\', guided_gradCAM)\n\n\n'"
utils/inference.py,2,"b'import cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom keras.preprocessing import image\n\ndef load_image(image_path, grayscale=False, target_size=None):\n    pil_image = image.load_img(image_path, grayscale, target_size)\n    return image.img_to_array(pil_image)\n\ndef load_detection_model(model_path):\n    detection_model = cv2.CascadeClassifier(model_path)\n    return detection_model\n\ndef detect_faces(detection_model, gray_image_array):\n    return detection_model.detectMultiScale(gray_image_array, 1.3, 5)\n\ndef draw_bounding_box(face_coordinates, image_array, color):\n    x, y, w, h = face_coordinates\n    cv2.rectangle(image_array, (x, y), (x + w, y + h), color, 2)\n\ndef apply_offsets(face_coordinates, offsets):\n    x, y, width, height = face_coordinates\n    x_off, y_off = offsets\n    return (x - x_off, x + width + x_off, y - y_off, y + height + y_off)\n\ndef draw_text(coordinates, image_array, text, color, x_offset=0, y_offset=0,\n                                                font_scale=2, thickness=2):\n    x, y = coordinates[:2]\n    cv2.putText(image_array, text, (x + x_offset, y + y_offset),\n                cv2.FONT_HERSHEY_SIMPLEX,\n                font_scale, color, thickness, cv2.LINE_AA)\n\ndef get_colors(num_classes):\n    colors = plt.cm.hsv(np.linspace(0, 1, num_classes)).tolist()\n    colors = np.asarray(colors) * 255\n    return colors\n\n'"
utils/preprocessor.py,3,"b""import numpy as np\nfrom scipy.misc.pilutil import imread, imresize\n\ndef preprocess_input(x, v2=True):\n    x = x.astype('float32')\n    x = x / 255.0\n    if v2:\n        x = x - 0.5\n        x = x * 2.0\n    return x\n\ndef _imread(image_name):\n        return imread(image_name)\n\ndef _imresize(image_array, size):\n        return imresize(image_array, size)\n\ndef to_categorical(integer_classes, num_classes=2):\n    integer_classes = np.asarray(integer_classes, dtype='int')\n    num_samples = integer_classes.shape[0]\n    categorical = np.zeros((num_samples, num_classes))\n    categorical[np.arange(num_samples), integer_classes] = 1\n    return categorical\n\n"""
utils/visualizer.py,14,"b'import numpy as np\nimport matplotlib.cm as cm\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport matplotlib.pyplot as plt\nimport numpy.ma as ma\nimport cv2\nfrom .inference import draw_text\n\ndef make_mosaic(images, num_rows, num_cols, border=1, class_names=None):\n    num_images = len(images)\n    image_shape = images.shape[1:]\n    mosaic = ma.masked_all((num_rows * image_shape[0] + (num_rows - 1) * border,\n                            num_cols * image_shape[1] + (num_cols - 1) * border),\n                            dtype=np.float32)\n    paddedh = image_shape[0] + border\n    paddedw = image_shape[1] + border\n    for image_arg in range(num_images):\n        row = int(np.floor(image_arg / num_cols))\n        col = image_arg % num_cols\n        image = np.squeeze(images[image_arg])\n        image_shape = image.shape\n        mosaic[row * paddedh:row * paddedh + image_shape[0],\n               col * paddedw:col * paddedw + image_shape[1]] = image\n    return mosaic\n\ndef make_mosaic_v2(images, num_mosaic_rows=None,\n                num_mosaic_cols=None, border=1):\n    images = np.squeeze(images)\n    num_images, image_pixels_rows, image_pixels_cols = images.shape\n    if num_mosaic_rows is None and num_mosaic_cols is None:\n        box_size = int(np.ceil(np.sqrt(num_images)))\n        num_mosaic_rows = num_mosaic_cols = box_size\n    num_mosaic_pixel_rows = num_mosaic_rows * (image_pixels_rows + border)\n    num_mosaic_pixel_cols = num_mosaic_cols * (image_pixels_cols + border)\n    mosaic = np.empty(shape=(num_mosaic_pixel_rows, num_mosaic_pixel_cols))\n    mosaic_col_arg = 0\n    mosaic_row_arg = 0\n    for image_arg in range(num_images):\n        if image_arg % num_mosaic_cols == 0 and image_arg != 0:\n            mosaic_col_arg = mosaic_col_arg + 1\n            mosaic_row_arg = 0\n        x0 = image_pixels_cols * (mosaic_row_arg)\n        x1 = image_pixels_cols * (mosaic_row_arg + 1)\n        y0 = image_pixels_rows * (mosaic_col_arg)\n        y1 = image_pixels_rows * (mosaic_col_arg + 1)\n        image = images[image_arg]\n        mosaic[y0:y1, x0:x1] = image\n        mosaic_row_arg = mosaic_row_arg + 1\n    return mosaic\n\ndef pretty_imshow(axis, data, vmin=None, vmax=None, cmap=None):\n    if cmap is None:\n        cmap = cm.jet\n    if vmin is None:\n        vmin = data.min()\n    if vmax is None:\n        vmax = data.max()\n    cax = None\n    divider = make_axes_locatable(axis)\n    cax = divider.append_axes(\'right\', size=\'5%\', pad=0.05)\n    image = axis.imshow(data, vmin=vmin, vmax=vmax,\n                        interpolation=\'nearest\', cmap=cmap)\n    plt.colorbar(image, cax=cax)\n\ndef normal_imshow(axis, data, vmin=None, vmax=None,\n                        cmap=None, axis_off=True):\n    if cmap is None:\n        cmap = cm.jet\n    if vmin is None:\n        vmin = data.min()\n    if vmax is None:\n        vmax = data.max()\n    image = axis.imshow(data, vmin=vmin, vmax=vmax,\n                        interpolation=\'nearest\', cmap=cmap)\n    if axis_off:\n        plt.axis(\'off\')\n    return image\n\ndef display_image(face, class_vector=None,\n                    class_decoder=None, pretty=False):\n    if class_vector is not None and class_decoder is None:\n        raise Exception(\'Provide class decoder\')\n    face = np.squeeze(face)\n    color_map = None\n    if len(face.shape) < 3:\n        color_map = \'gray\'\n    plt.figure()\n    if class_vector is not None:\n        class_arg = np.argmax(class_vector)\n        class_name = class_decoder[class_arg]\n        plt.title(class_name)\n    if pretty:\n        pretty_imshow(plt.gca(), face, cmap=color_map)\n    else:\n        plt.imshow(face, color_map)\n\ndef draw_mosaic(data, num_rows, num_cols, class_vectors=None,\n                            class_decoder=None, cmap=\'gray\'):\n\n    if class_vectors is not None and class_decoder is None:\n        raise Exception(\'Provide class decoder\')\n\n    figure, axis_array = plt.subplots(num_rows, num_cols)\n    figure.set_size_inches(8, 8, forward=True)\n    titles = []\n    if class_vectors is not None:\n        for vector_arg in range(len(class_vectors)):\n            class_arg = np.argmax(class_vectors[vector_arg])\n            class_name = class_decoder[class_arg]\n            titles.append(class_name)\n\n    image_arg = 0\n    for row_arg in range(num_rows):\n        for col_arg in range(num_cols):\n            image = data[image_arg]\n            image = np.squeeze(image)\n            axis_array[row_arg, col_arg].axis(\'off\')\n            axis_array[row_arg, col_arg].imshow(image, cmap=cmap)\n            axis_array[row_arg, col_arg].set_title(titles[image_arg])\n            image_arg = image_arg + 1\n    plt.tight_layout()\n\nif __name__ == \'__main__\':\n    #from utils.data_manager import DataManager\n    from utils.utils import get_labels\n    from keras.models import load_model\n    import pickle\n\n    #dataset_name = \'fer2013\'\n    #model_path = \'../trained_models/emotion_models/simple_CNN.985-0.66.hdf5\'\n    dataset_name = \'fer2013\'\n    class_decoder = get_labels(dataset_name)\n    #data_manager = DataManager(dataset_name)\n    #faces, emotions = data_manager.get_data()\n    faces = pickle.load(open(\'faces.pkl\', \'rb\'))\n    emotions = pickle.load(open(\'emotions.pkl\', \'rb\'))\n    pretty_imshow(plt.gca(), make_mosaic(faces[:4], 2, 2), cmap=\'gray\')\n    plt.show()\n\n    """"""\n    image_arg = 0\n    face = faces[image_arg:image_arg + 1]\n    emotion = emotions[image_arg:image_arg + 1]\n    display_image(face, emotion, class_decoder)\n    plt.show()\n\n    normal_imshow(plt.gca(), make_mosaic(faces[:4], 3, 3), cmap=\'gray\')\n    plt.show()\n\n    draw_mosaic(faces, 2, 2, emotions, class_decoder)\n    plt.show()\n\n    """"""\n    model = load_model(\'../trained_models/emotion_models/simple_CNN.985-0.66.hdf5\')\n    conv1_weights = model.layers[2].get_weights()\n    kernel_conv1_weights = conv1_weights[0]\n    kernel_conv1_weights = np.squeeze(kernel_conv1_weights)\n    kernel_conv1_weights = np.rollaxis(kernel_conv1_weights, 2, 0)\n    kernel_conv1_weights = np.expand_dims(kernel_conv1_weights, -1)\n    num_kernels = kernel_conv1_weights.shape[0]\n    box_size = int(np.ceil(np.sqrt(num_kernels)))\n    print(\'Box size:\', box_size)\n\n    print(\'Kernel shape\', kernel_conv1_weights.shape)\n    plt.figure(figsize=(15, 15))\n    plt.title(\'conv1 weights\')\n    pretty_imshow(plt.gca(),\n            make_mosaic(kernel_conv1_weights, box_size, box_size),\n            cmap=cm.binary)\n    plt.show()\n'"
samples/balloon/balloon.py,6,"b'""""""\nMask R-CNN\nTrain on the toy Balloon dataset and implement color splash effect.\n\nCopyright (c) 2018 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n\n------------------------------------------------------------\n\nUsage: import the module (see Jupyter notebooks for examples), or run from\n       the command line as such:\n\n    # Train a new model starting from pre-trained COCO weights\n    python3 balloon.py train --dataset=/path/to/balloon/dataset --weights=coco\n\n    # Resume training a model that you had trained earlier\n    python3 balloon.py train --dataset=/path/to/balloon/dataset --weights=last\n\n    # Train a new model starting from ImageNet weights\n    python3 balloon.py train --dataset=/path/to/balloon/dataset --weights=imagenet\n\n    # Apply color splash to an image\n    python3 balloon.py splash --weights=/path/to/weights/file.h5 --image=<URL or path to file>\n\n    # Apply color splash to video using the last weights you trained\n    python3 balloon.py splash --weights=last --video=<URL or path to file>\n""""""\n\nimport os\nimport sys\nimport json\nimport datetime\nimport numpy as np\nimport skimage.draw\n\n# Root directory of the project\nROOT_DIR = os.path.abspath(""../../"")\n\n# Import Mask RCNN\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn.config import Config\nfrom mrcnn import model as modellib, utils\n\n# Path to trained weights file\nCOCO_WEIGHTS_PATH = os.path.join(ROOT_DIR, ""mask_rcnn_coco.h5"")\n\n# Directory to save logs and model checkpoints, if not provided\n# through the command line argument --logs\nDEFAULT_LOGS_DIR = os.path.join(ROOT_DIR, ""logs"")\n\n############################################################\n#  Configurations\n############################################################\n\n\nclass BalloonConfig(Config):\n    """"""Configuration for training on the toy  dataset.\n    Derives from the base Config class and overrides some values.\n    """"""\n    # Give the configuration a recognizable name\n    NAME = ""balloon""\n\n    # We use a GPU with 12GB memory, which can fit two images.\n    # Adjust down if you use a smaller GPU.\n    IMAGES_PER_GPU = 2\n\n    # Number of classes (including background)\n    NUM_CLASSES = 1 + 1  # Background + balloon\n\n    # Number of training steps per epoch\n    STEPS_PER_EPOCH = 100\n\n    # Skip detections with < 90% confidence\n    DETECTION_MIN_CONFIDENCE = 0.9\n\n\n############################################################\n#  Dataset\n############################################################\n\nclass BalloonDataset(utils.Dataset):\n\n    def load_balloon(self, dataset_dir, subset):\n        """"""Load a subset of the Balloon dataset.\n        dataset_dir: Root directory of the dataset.\n        subset: Subset to load: train or val\n        """"""\n        # Add classes. We have only one class to add.\n        self.add_class(""balloon"", 1, ""balloon"")\n\n        # Train or validation dataset?\n        assert subset in [""train"", ""val""]\n        dataset_dir = os.path.join(dataset_dir, subset)\n\n        # Load annotations\n        # VGG Image Annotator saves each image in the form:\n        # { \'filename\': \'28503151_5b5b7ec140_b.jpg\',\n        #   \'regions\': {\n        #       \'0\': {\n        #           \'region_attributes\': {},\n        #           \'shape_attributes\': {\n        #               \'all_points_x\': [...],\n        #               \'all_points_y\': [...],\n        #               \'name\': \'polygon\'}},\n        #       ... more regions ...\n        #   },\n        #   \'size\': 100202\n        # }\n        # We mostly care about the x and y coordinates of each region\n        annotations = json.load(open(os.path.join(dataset_dir, ""via_region_data.json"")))\n        annotations = list(annotations.values())  # don\'t need the dict keys\n\n        # The VIA tool saves images in the JSON even if they don\'t have any\n        # annotations. Skip unannotated images.\n        annotations = [a for a in annotations if a[\'regions\']]\n\n        # Add images\n        for a in annotations:\n            # Get the x, y coordinaets of points of the polygons that make up\n            # the outline of each object instance. There are stores in the\n            # shape_attributes (see json format above)\n            polygons = [r[\'shape_attributes\'] for r in a[\'regions\'].values()]\n\n            # load_mask() needs the image size to convert polygons to masks.\n            # Unfortunately, VIA doesn\'t include it in JSON, so we must read\n            # the image. This is only managable since the dataset is tiny.\n            image_path = os.path.join(dataset_dir, a[\'filename\'])\n            image = skimage.io.imread(image_path)\n            height, width = image.shape[:2]\n\n            self.add_image(\n                ""balloon"",\n                image_id=a[\'filename\'],  # use file name as a unique image id\n                path=image_path,\n                width=width, height=height,\n                polygons=polygons)\n\n    def load_mask(self, image_id):\n        """"""Generate instance masks for an image.\n       Returns:\n        masks: A bool array of shape [height, width, instance count] with\n            one mask per instance.\n        class_ids: a 1D array of class IDs of the instance masks.\n        """"""\n        # If not a balloon dataset image, delegate to parent class.\n        image_info = self.image_info[image_id]\n        if image_info[""source""] != ""balloon"":\n            return super(self.__class__, self).load_mask(image_id)\n\n        # Convert polygons to a bitmap mask of shape\n        # [height, width, instance_count]\n        info = self.image_info[image_id]\n        mask = np.zeros([info[""height""], info[""width""], len(info[""polygons""])],\n                        dtype=np.uint8)\n        for i, p in enumerate(info[""polygons""]):\n            # Get indexes of pixels inside the polygon and set them to 1\n            rr, cc = skimage.draw.polygon(p[\'all_points_y\'], p[\'all_points_x\'])\n            mask[rr, cc, i] = 1\n\n        # Return mask, and array of class IDs of each instance. Since we have\n        # one class ID only, we return an array of 1s\n        return mask.astype(np.bool), np.ones([mask.shape[-1]], dtype=np.int32)\n\n    def image_reference(self, image_id):\n        """"""Return the path of the image.""""""\n        info = self.image_info[image_id]\n        if info[""source""] == ""balloon"":\n            return info[""path""]\n        else:\n            super(self.__class__, self).image_reference(image_id)\n\n\ndef train(model):\n    """"""Train the model.""""""\n    # Training dataset.\n    dataset_train = BalloonDataset()\n    dataset_train.load_balloon(args.dataset, ""train"")\n    dataset_train.prepare()\n\n    # Validation dataset\n    dataset_val = BalloonDataset()\n    dataset_val.load_balloon(args.dataset, ""val"")\n    dataset_val.prepare()\n\n    # *** This training schedule is an example. Update to your needs ***\n    # Since we\'re using a very small dataset, and starting from\n    # COCO trained weights, we don\'t need to train too long. Also,\n    # no need to train all layers, just the heads should do it.\n    print(""Training network heads"")\n    model.train(dataset_train, dataset_val,\n                learning_rate=config.LEARNING_RATE,\n                epochs=30,\n                layers=\'heads\')\n\n\ndef color_splash(image, mask):\n    """"""Apply color splash effect.\n    image: RGB image [height, width, 3]\n    mask: instance segmentation mask [height, width, instance count]\n\n    Returns result image.\n    """"""\n    # Make a grayscale copy of the image. The grayscale copy still\n    # has 3 RGB channels, though.\n    gray = skimage.color.gray2rgb(skimage.color.rgb2gray(image)) * 255\n    # Copy color pixels from the original color image where mask is set\n    if mask.shape[-1] > 0:\n        # We\'re treating all instances as one, so collapse the mask into one layer\n        mask = (np.sum(mask, -1, keepdims=True) >= 1)\n        splash = np.where(mask, image, gray).astype(np.uint8)\n    else:\n        splash = gray.astype(np.uint8)\n    return splash\n\n\ndef detect_and_color_splash(model, image_path=None, video_path=None):\n    assert image_path or video_path\n\n    # Image or video?\n    if image_path:\n        # Run model detection and generate the color splash effect\n        print(""Running on {}"".format(args.image))\n        # Read image\n        image = skimage.io.imread(args.image)\n        # Detect objects\n        r = model.detect([image], verbose=1)[0]\n        # Color splash\n        splash = color_splash(image, r[\'masks\'])\n        # Save output\n        file_name = ""splash_{:%Y%m%dT%H%M%S}.png"".format(datetime.datetime.now())\n        skimage.io.imsave(file_name, splash)\n    elif video_path:\n        import cv2\n        # Video capture\n        vcapture = cv2.VideoCapture(video_path)\n        width = int(vcapture.get(cv2.CAP_PROP_FRAME_WIDTH))\n        height = int(vcapture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n        fps = vcapture.get(cv2.CAP_PROP_FPS)\n\n        # Define codec and create video writer\n        file_name = ""splash_{:%Y%m%dT%H%M%S}.avi"".format(datetime.datetime.now())\n        vwriter = cv2.VideoWriter(file_name,\n                                  cv2.VideoWriter_fourcc(*\'MJPG\'),\n                                  fps, (width, height))\n\n        count = 0\n        success = True\n        while success:\n            print(""frame: "", count)\n            # Read next image\n            success, image = vcapture.read()\n            if success:\n                # OpenCV returns images as BGR, convert to RGB\n                image = image[..., ::-1]\n                # Detect objects\n                r = model.detect([image], verbose=0)[0]\n                # Color splash\n                splash = color_splash(image, r[\'masks\'])\n                # RGB -> BGR to save image to video\n                splash = splash[..., ::-1]\n                # Add image to video writer\n                vwriter.write(splash)\n                count += 1\n        vwriter.release()\n    print(""Saved to "", file_name)\n\n\n############################################################\n#  Training\n############################################################\n\nif __name__ == \'__main__\':\n    import argparse\n\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(\n        description=\'Train Mask R-CNN to detect balloons.\')\n    parser.add_argument(""command"",\n                        metavar=""<command>"",\n                        help=""\'train\' or \'splash\'"")\n    parser.add_argument(\'--dataset\', required=False,\n                        metavar=""/path/to/balloon/dataset/"",\n                        help=\'Directory of the Balloon dataset\')\n    parser.add_argument(\'--weights\', required=True,\n                        metavar=""/path/to/weights.h5"",\n                        help=""Path to weights .h5 file or \'coco\'"")\n    parser.add_argument(\'--logs\', required=False,\n                        default=DEFAULT_LOGS_DIR,\n                        metavar=""/path/to/logs/"",\n                        help=\'Logs and checkpoints directory (default=logs/)\')\n    parser.add_argument(\'--image\', required=False,\n                        metavar=""path or URL to image"",\n                        help=\'Image to apply the color splash effect on\')\n    parser.add_argument(\'--video\', required=False,\n                        metavar=""path or URL to video"",\n                        help=\'Video to apply the color splash effect on\')\n    args = parser.parse_args()\n\n    # Validate arguments\n    if args.command == ""train"":\n        assert args.dataset, ""Argument --dataset is required for training""\n    elif args.command == ""splash"":\n        assert args.image or args.video,\\\n               ""Provide --image or --video to apply color splash""\n\n    print(""Weights: "", args.weights)\n    print(""Dataset: "", args.dataset)\n    print(""Logs: "", args.logs)\n\n    # Configurations\n    if args.command == ""train"":\n        config = BalloonConfig()\n    else:\n        class InferenceConfig(BalloonConfig):\n            # Set batch size to 1 since we\'ll be running inference on\n            # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU\n            GPU_COUNT = 1\n            IMAGES_PER_GPU = 1\n        config = InferenceConfig()\n    config.display()\n\n    # Create model\n    if args.command == ""train"":\n        model = modellib.MaskRCNN(mode=""training"", config=config,\n                                  model_dir=args.logs)\n    else:\n        model = modellib.MaskRCNN(mode=""inference"", config=config,\n                                  model_dir=args.logs)\n\n    # Select weights file to load\n    if args.weights.lower() == ""coco"":\n        weights_path = COCO_WEIGHTS_PATH\n        # Download weights file\n        if not os.path.exists(weights_path):\n            utils.download_trained_weights(weights_path)\n    elif args.weights.lower() == ""last"":\n        # Find last trained weights\n        weights_path = model.find_last()\n    elif args.weights.lower() == ""imagenet"":\n        # Start from ImageNet trained weights\n        weights_path = model.get_imagenet_weights()\n    else:\n        weights_path = args.weights\n\n    # Load weights\n    print(""Loading weights "", weights_path)\n    if args.weights.lower() == ""coco"":\n        # Exclude the last layers because they require a matching\n        # number of classes\n        model.load_weights(weights_path, by_name=True, exclude=[\n            ""mrcnn_class_logits"", ""mrcnn_bbox_fc"",\n            ""mrcnn_bbox"", ""mrcnn_mask""])\n    else:\n        model.load_weights(weights_path, by_name=True)\n\n    # Train or evaluate\n    if args.command == ""train"":\n        train(model)\n    elif args.command == ""splash"":\n        detect_and_color_splash(model, image_path=args.image,\n                                video_path=args.video)\n    else:\n        print(""\'{}\' is not recognized. ""\n              ""Use \'train\' or \'splash\'"".format(args.command))\n'"
samples/coco/coco.py,6,"b'""""""\nMask R-CNN\nConfigurations and data loading code for MS COCO.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n\n------------------------------------------------------------\n\nUsage: import the module (see Jupyter notebooks for examples), or run from\n       the command line as such:\n\n    # Train a new model starting from pre-trained COCO weights\n    python3 coco.py train --dataset=/path/to/coco/ --model=coco\n\n    # Train a new model starting from ImageNet weights. Also auto download COCO dataset\n    python3 coco.py train --dataset=/path/to/coco/ --model=imagenet --download=True\n\n    # Continue training a model that you had trained earlier\n    python3 coco.py train --dataset=/path/to/coco/ --model=/path/to/weights.h5\n\n    # Continue training the last model you trained\n    python3 coco.py train --dataset=/path/to/coco/ --model=last\n\n    # Run COCO evaluatoin on the last model you trained\n    python3 coco.py evaluate --dataset=/path/to/coco/ --model=last\n""""""\n\nimport os\nimport sys\nimport time\nimport numpy as np\nimport imgaug  # https://github.com/aleju/imgaug (pip3 install imgaug)\n\n# Download and install the Python COCO tools from https://github.com/waleedka/coco\n# That\'s a fork from the original https://github.com/pdollar/coco with a bug\n# fix for Python 3.\n# I submitted a pull request https://github.com/cocodataset/cocoapi/pull/50\n# If the PR is merged then use the original repo.\n# Note: Edit PythonAPI/Makefile and replace ""python"" with ""python3"".\nfrom pycocotools.coco import COCO\nfrom pycocotools.cocoeval import COCOeval\nfrom pycocotools import mask as maskUtils\n\nimport zipfile\nimport urllib.request\nimport shutil\n\n# Root directory of the project\nROOT_DIR = os.path.abspath(""../../"")\n\n# Import Mask RCNN\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn.config import Config\nfrom mrcnn import model as modellib, utils\n\n# Path to trained weights file\nCOCO_MODEL_PATH = os.path.join(ROOT_DIR, ""mask_rcnn_coco.h5"")\n\n# Directory to save logs and model checkpoints, if not provided\n# through the command line argument --logs\nDEFAULT_LOGS_DIR = os.path.join(ROOT_DIR, ""logs"")\nDEFAULT_DATASET_YEAR = ""2014""\n\n############################################################\n#  Configurations\n############################################################\n\n\nclass CocoConfig(Config):\n    """"""Configuration for training on MS COCO.\n    Derives from the base Config class and overrides values specific\n    to the COCO dataset.\n    """"""\n    # Give the configuration a recognizable name\n    NAME = ""coco""\n\n    # We use a GPU with 12GB memory, which can fit two images.\n    # Adjust down if you use a smaller GPU.\n    IMAGES_PER_GPU = 2\n\n    # Uncomment to train on 8 GPUs (default is 1)\n    # GPU_COUNT = 8\n\n    # Number of classes (including background)\n    NUM_CLASSES = 1 + 80  # COCO has 80 classes\n\n\n############################################################\n#  Dataset\n############################################################\n\nclass CocoDataset(utils.Dataset):\n    def load_coco(self, dataset_dir, subset, year=DEFAULT_DATASET_YEAR, class_ids=None,\n                  class_map=None, return_coco=False, auto_download=False):\n        """"""Load a subset of the COCO dataset.\n        dataset_dir: The root directory of the COCO dataset.\n        subset: What to load (train, val, minival, valminusminival)\n        year: What dataset year to load (2014, 2017) as a string, not an integer\n        class_ids: If provided, only loads images that have the given classes.\n        class_map: TODO: Not implemented yet. Supports maping classes from\n            different datasets to the same class ID.\n        return_coco: If True, returns the COCO object.\n        auto_download: Automatically download and unzip MS-COCO images and annotations\n        """"""\n\n        if auto_download is True:\n            self.auto_download(dataset_dir, subset, year)\n\n        coco = COCO(""{}/annotations/instances_{}{}.json"".format(dataset_dir, subset, year))\n        if subset == ""minival"" or subset == ""valminusminival"":\n            subset = ""val""\n        image_dir = ""{}/{}{}"".format(dataset_dir, subset, year)\n\n        # Load all classes or a subset?\n        if not class_ids:\n            # All classes\n            class_ids = sorted(coco.getCatIds())\n\n        # All images or a subset?\n        if class_ids:\n            image_ids = []\n            for id in class_ids:\n                image_ids.extend(list(coco.getImgIds(catIds=[id])))\n            # Remove duplicates\n            image_ids = list(set(image_ids))\n        else:\n            # All images\n            image_ids = list(coco.imgs.keys())\n\n        # Add classes\n        for i in class_ids:\n            self.add_class(""coco"", i, coco.loadCats(i)[0][""name""])\n\n        # Add images\n        for i in image_ids:\n            self.add_image(\n                ""coco"", image_id=i,\n                path=os.path.join(image_dir, coco.imgs[i][\'file_name\']),\n                width=coco.imgs[i][""width""],\n                height=coco.imgs[i][""height""],\n                annotations=coco.loadAnns(coco.getAnnIds(\n                    imgIds=[i], catIds=class_ids, iscrowd=None)))\n        if return_coco:\n            return coco\n\n    def auto_download(self, dataDir, dataType, dataYear):\n        """"""Download the COCO dataset/annotations if requested.\n        dataDir: The root directory of the COCO dataset.\n        dataType: What to load (train, val, minival, valminusminival)\n        dataYear: What dataset year to load (2014, 2017) as a string, not an integer\n        Note:\n            For 2014, use ""train"", ""val"", ""minival"", or ""valminusminival""\n            For 2017, only ""train"" and ""val"" annotations are available\n        """"""\n\n        # Setup paths and file names\n        if dataType == ""minival"" or dataType == ""valminusminival"":\n            imgDir = ""{}/{}{}"".format(dataDir, ""val"", dataYear)\n            imgZipFile = ""{}/{}{}.zip"".format(dataDir, ""val"", dataYear)\n            imgURL = ""http://images.cocodataset.org/zips/{}{}.zip"".format(""val"", dataYear)\n        else:\n            imgDir = ""{}/{}{}"".format(dataDir, dataType, dataYear)\n            imgZipFile = ""{}/{}{}.zip"".format(dataDir, dataType, dataYear)\n            imgURL = ""http://images.cocodataset.org/zips/{}{}.zip"".format(dataType, dataYear)\n        # print(""Image paths:""); print(imgDir); print(imgZipFile); print(imgURL)\n\n        # Create main folder if it doesn\'t exist yet\n        if not os.path.exists(dataDir):\n            os.makedirs(dataDir)\n\n        # Download images if not available locally\n        if not os.path.exists(imgDir):\n            os.makedirs(imgDir)\n            print(""Downloading images to "" + imgZipFile + "" ..."")\n            with urllib.request.urlopen(imgURL) as resp, open(imgZipFile, \'wb\') as out:\n                shutil.copyfileobj(resp, out)\n            print(""... done downloading."")\n            print(""Unzipping "" + imgZipFile)\n            with zipfile.ZipFile(imgZipFile, ""r"") as zip_ref:\n                zip_ref.extractall(dataDir)\n            print(""... done unzipping"")\n        print(""Will use images in "" + imgDir)\n\n        # Setup annotations data paths\n        annDir = ""{}/annotations"".format(dataDir)\n        if dataType == ""minival"":\n            annZipFile = ""{}/instances_minival2014.json.zip"".format(dataDir)\n            annFile = ""{}/instances_minival2014.json"".format(annDir)\n            annURL = ""https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0""\n            unZipDir = annDir\n        elif dataType == ""valminusminival"":\n            annZipFile = ""{}/instances_valminusminival2014.json.zip"".format(dataDir)\n            annFile = ""{}/instances_valminusminival2014.json"".format(annDir)\n            annURL = ""https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0""\n            unZipDir = annDir\n        else:\n            annZipFile = ""{}/annotations_trainval{}.zip"".format(dataDir, dataYear)\n            annFile = ""{}/instances_{}{}.json"".format(annDir, dataType, dataYear)\n            annURL = ""http://images.cocodataset.org/annotations/annotations_trainval{}.zip"".format(dataYear)\n            unZipDir = dataDir\n        # print(""Annotations paths:""); print(annDir); print(annFile); print(annZipFile); print(annURL)\n\n        # Download annotations if not available locally\n        if not os.path.exists(annDir):\n            os.makedirs(annDir)\n        if not os.path.exists(annFile):\n            if not os.path.exists(annZipFile):\n                print(""Downloading zipped annotations to "" + annZipFile + "" ..."")\n                with urllib.request.urlopen(annURL) as resp, open(annZipFile, \'wb\') as out:\n                    shutil.copyfileobj(resp, out)\n                print(""... done downloading."")\n            print(""Unzipping "" + annZipFile)\n            with zipfile.ZipFile(annZipFile, ""r"") as zip_ref:\n                zip_ref.extractall(unZipDir)\n            print(""... done unzipping"")\n        print(""Will use annotations in "" + annFile)\n\n    def load_mask(self, image_id):\n        """"""Load instance masks for the given image.\n\n        Different datasets use different ways to store masks. This\n        function converts the different mask format to one format\n        in the form of a bitmap [height, width, instances].\n\n        Returns:\n        masks: A bool array of shape [height, width, instance count] with\n            one mask per instance.\n        class_ids: a 1D array of class IDs of the instance masks.\n        """"""\n        # If not a COCO image, delegate to parent class.\n        image_info = self.image_info[image_id]\n        if image_info[""source""] != ""coco"":\n            return super(CocoDataset, self).load_mask(image_id)\n\n        instance_masks = []\n        class_ids = []\n        annotations = self.image_info[image_id][""annotations""]\n        # Build mask of shape [height, width, instance_count] and list\n        # of class IDs that correspond to each channel of the mask.\n        for annotation in annotations:\n            class_id = self.map_source_class_id(\n                ""coco.{}"".format(annotation[\'category_id\']))\n            if class_id:\n                m = self.annToMask(annotation, image_info[""height""],\n                                   image_info[""width""])\n                # Some objects are so small that they\'re less than 1 pixel area\n                # and end up rounded out. Skip those objects.\n                if m.max() < 1:\n                    continue\n                # Is it a crowd? If so, use a negative class ID.\n                if annotation[\'iscrowd\']:\n                    # Use negative class ID for crowds\n                    class_id *= -1\n                    # For crowd masks, annToMask() sometimes returns a mask\n                    # smaller than the given dimensions. If so, resize it.\n                    if m.shape[0] != image_info[""height""] or m.shape[1] != image_info[""width""]:\n                        m = np.ones([image_info[""height""], image_info[""width""]], dtype=bool)\n                instance_masks.append(m)\n                class_ids.append(class_id)\n\n        # Pack instance masks into an array\n        if class_ids:\n            mask = np.stack(instance_masks, axis=2).astype(np.bool)\n            class_ids = np.array(class_ids, dtype=np.int32)\n            return mask, class_ids\n        else:\n            # Call super class to return an empty mask\n            return super(CocoDataset, self).load_mask(image_id)\n\n    def image_reference(self, image_id):\n        """"""Return a link to the image in the COCO Website.""""""\n        info = self.image_info[image_id]\n        if info[""source""] == ""coco"":\n            return ""http://cocodataset.org/#explore?id={}"".format(info[""id""])\n        else:\n            super(CocoDataset, self).image_reference(image_id)\n\n    # The following two functions are from pycocotools with a few changes.\n\n    def annToRLE(self, ann, height, width):\n        """"""\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        """"""\n        segm = ann[\'segmentation\']\n        if isinstance(segm, list):\n            # polygon -- a single object might consist of multiple parts\n            # we merge all parts into one mask rle code\n            rles = maskUtils.frPyObjects(segm, height, width)\n            rle = maskUtils.merge(rles)\n        elif isinstance(segm[\'counts\'], list):\n            # uncompressed RLE\n            rle = maskUtils.frPyObjects(segm, height, width)\n        else:\n            # rle\n            rle = ann[\'segmentation\']\n        return rle\n\n    def annToMask(self, ann, height, width):\n        """"""\n        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.\n        :return: binary mask (numpy 2D array)\n        """"""\n        rle = self.annToRLE(ann, height, width)\n        m = maskUtils.decode(rle)\n        return m\n\n\n############################################################\n#  COCO Evaluation\n############################################################\n\ndef build_coco_results(dataset, image_ids, rois, class_ids, scores, masks):\n    """"""Arrange resutls to match COCO specs in http://cocodataset.org/#format\n    """"""\n    # If no results, return an empty list\n    if rois is None:\n        return []\n\n    results = []\n    for image_id in image_ids:\n        # Loop through detections\n        for i in range(rois.shape[0]):\n            class_id = class_ids[i]\n            score = scores[i]\n            bbox = np.around(rois[i], 1)\n            mask = masks[:, :, i]\n\n            result = {\n                ""image_id"": image_id,\n                ""category_id"": dataset.get_source_class_id(class_id, ""coco""),\n                ""bbox"": [bbox[1], bbox[0], bbox[3] - bbox[1], bbox[2] - bbox[0]],\n                ""score"": score,\n                ""segmentation"": maskUtils.encode(np.asfortranarray(mask))\n            }\n            results.append(result)\n    return results\n\n\ndef evaluate_coco(model, dataset, coco, eval_type=""bbox"", limit=0, image_ids=None):\n    """"""Runs official COCO evaluation.\n    dataset: A Dataset object with valiadtion data\n    eval_type: ""bbox"" or ""segm"" for bounding box or segmentation evaluation\n    limit: if not 0, it\'s the number of images to use for evaluation\n    """"""\n    # Pick COCO images from the dataset\n    image_ids = image_ids or dataset.image_ids\n\n    # Limit to a subset\n    if limit:\n        image_ids = image_ids[:limit]\n\n    # Get corresponding COCO image IDs.\n    coco_image_ids = [dataset.image_info[id][""id""] for id in image_ids]\n\n    t_prediction = 0\n    t_start = time.time()\n\n    results = []\n    for i, image_id in enumerate(image_ids):\n        # Load image\n        image = dataset.load_image(image_id)\n\n        # Run detection\n        t = time.time()\n        r = model.detect([image], verbose=0)[0]\n        t_prediction += (time.time() - t)\n\n        # Convert results to COCO format\n        # Cast masks to uint8 because COCO tools errors out on bool\n        image_results = build_coco_results(dataset, coco_image_ids[i:i + 1],\n                                           r[""rois""], r[""class_ids""],\n                                           r[""scores""],\n                                           r[""masks""].astype(np.uint8))\n        results.extend(image_results)\n\n    # Load results. This modifies results with additional attributes.\n    coco_results = coco.loadRes(results)\n\n    # Evaluate\n    cocoEval = COCOeval(coco, coco_results, eval_type)\n    cocoEval.params.imgIds = coco_image_ids\n    cocoEval.evaluate()\n    cocoEval.accumulate()\n    cocoEval.summarize()\n\n    print(""Prediction time: {}. Average {}/image"".format(\n        t_prediction, t_prediction / len(image_ids)))\n    print(""Total time: "", time.time() - t_start)\n\n\n############################################################\n#  Training\n############################################################\n\n\nif __name__ == \'__main__\':\n    import argparse\n\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(\n        description=\'Train Mask R-CNN on MS COCO.\')\n    parser.add_argument(""command"",\n                        metavar=""<command>"",\n                        help=""\'train\' or \'evaluate\' on MS COCO"")\n    parser.add_argument(\'--dataset\', required=True,\n                        metavar=""/path/to/coco/"",\n                        help=\'Directory of the MS-COCO dataset\')\n    parser.add_argument(\'--year\', required=False,\n                        default=DEFAULT_DATASET_YEAR,\n                        metavar=""<year>"",\n                        help=\'Year of the MS-COCO dataset (2014 or 2017) (default=2014)\')\n    parser.add_argument(\'--model\', required=True,\n                        metavar=""/path/to/weights.h5"",\n                        help=""Path to weights .h5 file or \'coco\'"")\n    parser.add_argument(\'--logs\', required=False,\n                        default=DEFAULT_LOGS_DIR,\n                        metavar=""/path/to/logs/"",\n                        help=\'Logs and checkpoints directory (default=logs/)\')\n    parser.add_argument(\'--limit\', required=False,\n                        default=500,\n                        metavar=""<image count>"",\n                        help=\'Images to use for evaluation (default=500)\')\n    parser.add_argument(\'--download\', required=False,\n                        default=False,\n                        metavar=""<True|False>"",\n                        help=\'Automatically download and unzip MS-COCO files (default=False)\',\n                        type=bool)\n    args = parser.parse_args()\n    print(""Command: "", args.command)\n    print(""Model: "", args.model)\n    print(""Dataset: "", args.dataset)\n    print(""Year: "", args.year)\n    print(""Logs: "", args.logs)\n    print(""Auto Download: "", args.download)\n\n    # Configurations\n    if args.command == ""train"":\n        config = CocoConfig()\n    else:\n        class InferenceConfig(CocoConfig):\n            # Set batch size to 1 since we\'ll be running inference on\n            # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU\n            GPU_COUNT = 1\n            IMAGES_PER_GPU = 1\n            DETECTION_MIN_CONFIDENCE = 0\n        config = InferenceConfig()\n    config.display()\n\n    # Create model\n    if args.command == ""train"":\n        model = modellib.MaskRCNN(mode=""training"", config=config,\n                                  model_dir=args.logs)\n    else:\n        model = modellib.MaskRCNN(mode=""inference"", config=config,\n                                  model_dir=args.logs)\n\n    # Select weights file to load\n    if args.model.lower() == ""coco"":\n        model_path = COCO_MODEL_PATH\n    elif args.model.lower() == ""last"":\n        # Find last trained weights\n        model_path = model.find_last()\n    elif args.model.lower() == ""imagenet"":\n        # Start from ImageNet trained weights\n        model_path = model.get_imagenet_weights()\n    else:\n        model_path = args.model\n\n    # Load weights\n    print(""Loading weights "", model_path)\n    model.load_weights(model_path, by_name=True)\n\n    # Train or evaluate\n    if args.command == ""train"":\n        # Training dataset. Use the training set and 35K from the\n        # validation set, as as in the Mask RCNN paper.\n        dataset_train = CocoDataset()\n        dataset_train.load_coco(args.dataset, ""train"", year=args.year, auto_download=args.download)\n        if args.year in \'2014\':\n            dataset_train.load_coco(args.dataset, ""valminusminival"", year=args.year, auto_download=args.download)\n        dataset_train.prepare()\n\n        # Validation dataset\n        dataset_val = CocoDataset()\n        val_type = ""val"" if args.year in \'2017\' else ""minival""\n        dataset_val.load_coco(args.dataset, val_type, year=args.year, auto_download=args.download)\n        dataset_val.prepare()\n\n        # Image Augmentation\n        # Right/Left flip 50% of the time\n        augmentation = imgaug.augmenters.Fliplr(0.5)\n\n        # *** This training schedule is an example. Update to your needs ***\n\n        # Training - Stage 1\n        print(""Training network heads"")\n        model.train(dataset_train, dataset_val,\n                    learning_rate=config.LEARNING_RATE,\n                    epochs=40,\n                    layers=\'heads\',\n                    augmentation=augmentation)\n\n        # Training - Stage 2\n        # Finetune layers from ResNet stage 4 and up\n        print(""Fine tune Resnet stage 4 and up"")\n        model.train(dataset_train, dataset_val,\n                    learning_rate=config.LEARNING_RATE,\n                    epochs=120,\n                    layers=\'4+\',\n                    augmentation=augmentation)\n\n        # Training - Stage 3\n        # Fine tune all layers\n        print(""Fine tune all layers"")\n        model.train(dataset_train, dataset_val,\n                    learning_rate=config.LEARNING_RATE / 10,\n                    epochs=160,\n                    layers=\'all\',\n                    augmentation=augmentation)\n\n    elif args.command == ""evaluate"":\n        # Validation dataset\n        dataset_val = CocoDataset()\n        val_type = ""val"" if args.year in \'2017\' else ""minival""\n        coco = dataset_val.load_coco(args.dataset, val_type, year=args.year, return_coco=True, auto_download=args.download)\n        dataset_val.prepare()\n        print(""Running COCO evaluation on {} images."".format(args.limit))\n        evaluate_coco(model, dataset_val, coco, ""bbox"", limit=int(args.limit))\n    else:\n        print(""\'{}\' is not recognized. ""\n              ""Use \'train\' or \'evaluate\'"".format(args.command))\n'"
samples/nucleus/nucleus.py,11,"b'""""""\nMask R-CNN\nTrain on the nuclei segmentation dataset from the\nKaggle 2018 Data Science Bowl\nhttps://www.kaggle.com/c/data-science-bowl-2018/\n\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n\n------------------------------------------------------------\n\nUsage: import the module (see Jupyter notebooks for examples), or run from\n       the command line as such:\n\n    # Train a new model starting from ImageNet weights\n    python3 nucleus.py train --dataset=/path/to/dataset --subset=train --weights=imagenet\n\n    # Train a new model starting from specific weights file\n    python3 nucleus.py train --dataset=/path/to/dataset --subset=train --weights=/path/to/weights.h5\n\n    # Resume training a model that you had trained earlier\n    python3 nucleus.py train --dataset=/path/to/dataset --subset=train --weights=last\n\n    # Generate submission file\n    python3 nucleus.py detect --dataset=/path/to/dataset --subset=train --weights=<last or /path/to/weights.h5>\n""""""\n\n# Set matplotlib backend\n# This has to be done before other importa that might\n# set it, but only if we\'re running in script mode\n# rather than being imported.\nif __name__ == \'__main__\':\n    import matplotlib\n    # Agg backend runs without a display\n    matplotlib.use(\'Agg\')\n    import matplotlib.pyplot as plt\n\nimport os\nimport sys\nimport json\nimport datetime\nimport numpy as np\nimport skimage.io\nfrom imgaug import augmenters as iaa\n\n# Root directory of the project\nROOT_DIR = os.path.abspath(""../../"")\n\n# Import Mask RCNN\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn.config import Config\nfrom mrcnn import utils\nfrom mrcnn import model as modellib\nfrom mrcnn import visualize\n\n# Path to trained weights file\nCOCO_WEIGHTS_PATH = os.path.join(ROOT_DIR, ""mask_rcnn_coco.h5"")\n\n# Directory to save logs and model checkpoints, if not provided\n# through the command line argument --logs\nDEFAULT_LOGS_DIR = os.path.join(ROOT_DIR, ""logs"")\n\n# Results directory\n# Save submission files here\nRESULTS_DIR = os.path.join(ROOT_DIR, ""results/nucleus/"")\n\n# The dataset doesn\'t have a standard train/val split, so I picked\n# a variety of images to surve as a validation set.\nVAL_IMAGE_IDS = [\n    ""0c2550a23b8a0f29a7575de8c61690d3c31bc897dd5ba66caec201d201a278c2"",\n    ""92f31f591929a30e4309ab75185c96ff4314ce0a7ead2ed2c2171897ad1da0c7"",\n    ""1e488c42eb1a54a3e8412b1f12cde530f950f238d71078f2ede6a85a02168e1f"",\n    ""c901794d1a421d52e5734500c0a2a8ca84651fb93b19cec2f411855e70cae339"",\n    ""8e507d58f4c27cd2a82bee79fe27b069befd62a46fdaed20970a95a2ba819c7b"",\n    ""60cb718759bff13f81c4055a7679e81326f78b6a193a2d856546097c949b20ff"",\n    ""da5f98f2b8a64eee735a398de48ed42cd31bf17a6063db46a9e0783ac13cd844"",\n    ""9ebcfaf2322932d464f15b5662cae4d669b2d785b8299556d73fffcae8365d32"",\n    ""1b44d22643830cd4f23c9deadb0bd499fb392fb2cd9526d81547d93077d983df"",\n    ""97126a9791f0c1176e4563ad679a301dac27c59011f579e808bbd6e9f4cd1034"",\n    ""e81c758e1ca177b0942ecad62cf8d321ffc315376135bcbed3df932a6e5b40c0"",\n    ""f29fd9c52e04403cd2c7d43b6fe2479292e53b2f61969d25256d2d2aca7c6a81"",\n    ""0ea221716cf13710214dcd331a61cea48308c3940df1d28cfc7fd817c83714e1"",\n    ""3ab9cab6212fabd723a2c5a1949c2ded19980398b56e6080978e796f45cbbc90"",\n    ""ebc18868864ad075548cc1784f4f9a237bb98335f9645ee727dac8332a3e3716"",\n    ""bb61fc17daf8bdd4e16fdcf50137a8d7762bec486ede9249d92e511fcb693676"",\n    ""e1bcb583985325d0ef5f3ef52957d0371c96d4af767b13e48102bca9d5351a9b"",\n    ""947c0d94c8213ac7aaa41c4efc95d854246550298259cf1bb489654d0e969050"",\n    ""cbca32daaae36a872a11da4eaff65d1068ff3f154eedc9d3fc0c214a4e5d32bd"",\n    ""f4c4db3df4ff0de90f44b027fc2e28c16bf7e5c75ea75b0a9762bbb7ac86e7a3"",\n    ""4193474b2f1c72f735b13633b219d9cabdd43c21d9c2bb4dfc4809f104ba4c06"",\n    ""f73e37957c74f554be132986f38b6f1d75339f636dfe2b681a0cf3f88d2733af"",\n    ""a4c44fc5f5bf213e2be6091ccaed49d8bf039d78f6fbd9c4d7b7428cfcb2eda4"",\n    ""cab4875269f44a701c5e58190a1d2f6fcb577ea79d842522dcab20ccb39b7ad2"",\n    ""8ecdb93582b2d5270457b36651b62776256ade3aaa2d7432ae65c14f07432d49"",\n]\n\n\n############################################################\n#  Configurations\n############################################################\n\nclass NucleusConfig(Config):\n    """"""Configuration for training on the nucleus segmentation dataset.""""""\n    # Give the configuration a recognizable name\n    NAME = ""nucleus""\n\n    # Adjust depending on your GPU memory\n    IMAGES_PER_GPU = 6\n\n    # Number of classes (including background)\n    NUM_CLASSES = 1 + 1  # Background + nucleus\n\n    # Number of training and validation steps per epoch\n    STEPS_PER_EPOCH = (657 - len(VAL_IMAGE_IDS)) // IMAGES_PER_GPU\n    VALIDATION_STEPS = max(1, len(VAL_IMAGE_IDS) // IMAGES_PER_GPU)\n\n    # Don\'t exclude based on confidence. Since we have two classes\n    # then 0.5 is the minimum anyway as it picks between nucleus and BG\n    DETECTION_MIN_CONFIDENCE = 0\n\n    # Backbone network architecture\n    # Supported values are: resnet50, resnet101\n    BACKBONE = ""resnet50""\n\n    # Input image resizing\n    # Random crops of size 512x512\n    IMAGE_RESIZE_MODE = ""crop""\n    IMAGE_MIN_DIM = 512\n    IMAGE_MAX_DIM = 512\n    IMAGE_MIN_SCALE = 2.0\n\n    # Length of square anchor side in pixels\n    RPN_ANCHOR_SCALES = (8, 16, 32, 64, 128)\n\n    # ROIs kept after non-maximum supression (training and inference)\n    POST_NMS_ROIS_TRAINING = 1000\n    POST_NMS_ROIS_INFERENCE = 2000\n\n    # Non-max suppression threshold to filter RPN proposals.\n    # You can increase this during training to generate more propsals.\n    RPN_NMS_THRESHOLD = 0.9\n\n    # How many anchors per image to use for RPN training\n    RPN_TRAIN_ANCHORS_PER_IMAGE = 64\n\n    # Image mean (RGB)\n    MEAN_PIXEL = np.array([43.53, 39.56, 48.22])\n\n    # If enabled, resizes instance masks to a smaller size to reduce\n    # memory load. Recommended when using high-resolution images.\n    USE_MINI_MASK = True\n    MINI_MASK_SHAPE = (56, 56)  # (height, width) of the mini-mask\n\n    # Number of ROIs per image to feed to classifier/mask heads\n    # The Mask RCNN paper uses 512 but often the RPN doesn\'t generate\n    # enough positive proposals to fill this and keep a positive:negative\n    # ratio of 1:3. You can increase the number of proposals by adjusting\n    # the RPN NMS threshold.\n    TRAIN_ROIS_PER_IMAGE = 128\n\n    # Maximum number of ground truth instances to use in one image\n    MAX_GT_INSTANCES = 200\n\n    # Max number of final detections per image\n    DETECTION_MAX_INSTANCES = 400\n\n\nclass NucleusInferenceConfig(NucleusConfig):\n    # Set batch size to 1 to run one image at a time\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 1\n    # Don\'t resize imager for inferencing\n    IMAGE_RESIZE_MODE = ""pad64""\n    # Non-max suppression threshold to filter RPN proposals.\n    # You can increase this during training to generate more propsals.\n    RPN_NMS_THRESHOLD = 0.7\n\n\n############################################################\n#  Dataset\n############################################################\n\nclass NucleusDataset(utils.Dataset):\n\n    def load_nucleus(self, dataset_dir, subset):\n        """"""Load a subset of the nuclei dataset.\n\n        dataset_dir: Root directory of the dataset\n        subset: Subset to load. Either the name of the sub-directory,\n                such as stage1_train, stage1_test, ...etc. or, one of:\n                * train: stage1_train excluding validation images\n                * val: validation images from VAL_IMAGE_IDS\n        """"""\n        # Add classes. We have one class.\n        # Naming the dataset nucleus, and the class nucleus\n        self.add_class(""nucleus"", 1, ""nucleus"")\n\n        # Which subset?\n        # ""val"": use hard-coded list above\n        # ""train"": use data from stage1_train minus the hard-coded list above\n        # else: use the data from the specified sub-directory\n        assert subset in [""train"", ""val"", ""stage1_train"", ""stage1_test"", ""stage2_test""]\n        subset_dir = ""stage1_train"" if subset in [""train"", ""val""] else subset\n        dataset_dir = os.path.join(dataset_dir, subset_dir)\n        if subset == ""val"":\n            image_ids = VAL_IMAGE_IDS\n        else:\n            # Get image ids from directory names\n            image_ids = next(os.walk(dataset_dir))[1]\n            if subset == ""train"":\n                image_ids = list(set(image_ids) - set(VAL_IMAGE_IDS))\n\n        # Add images\n        for image_id in image_ids:\n            self.add_image(\n                ""nucleus"",\n                image_id=image_id,\n                path=os.path.join(dataset_dir, image_id, ""images/{}.png"".format(image_id)))\n\n    def load_mask(self, image_id):\n        """"""Generate instance masks for an image.\n       Returns:\n        masks: A bool array of shape [height, width, instance count] with\n            one mask per instance.\n        class_ids: a 1D array of class IDs of the instance masks.\n        """"""\n        info = self.image_info[image_id]\n        # Get mask directory from image path\n        mask_dir = os.path.join(os.path.dirname(os.path.dirname(info[\'path\'])), ""masks"")\n\n        # Read mask files from .png image\n        mask = []\n        for f in next(os.walk(mask_dir))[2]:\n            if f.endswith("".png""):\n                m = skimage.io.imread(os.path.join(mask_dir, f)).astype(np.bool)\n                mask.append(m)\n        mask = np.stack(mask, axis=-1)\n        # Return mask, and array of class IDs of each instance. Since we have\n        # one class ID, we return an array of ones\n        return mask, np.ones([mask.shape[-1]], dtype=np.int32)\n\n    def image_reference(self, image_id):\n        """"""Return the path of the image.""""""\n        info = self.image_info[image_id]\n        if info[""source""] == ""nucleus"":\n            return info[""id""]\n        else:\n            super(self.__class__, self).image_reference(image_id)\n\n\n############################################################\n#  Training\n############################################################\n\ndef train(model, dataset_dir, subset):\n    """"""Train the model.""""""\n    # Training dataset.\n    dataset_train = NucleusDataset()\n    dataset_train.load_nucleus(dataset_dir, subset)\n    dataset_train.prepare()\n\n    # Validation dataset\n    dataset_val = NucleusDataset()\n    dataset_val.load_nucleus(dataset_dir, ""val"")\n    dataset_val.prepare()\n\n    # Image augmentation\n    # http://imgaug.readthedocs.io/en/latest/source/augmenters.html\n    augmentation = iaa.SomeOf((0, 2), [\n        iaa.Fliplr(0.5),\n        iaa.Flipud(0.5),\n        iaa.OneOf([iaa.Affine(rotate=90),\n                   iaa.Affine(rotate=180),\n                   iaa.Affine(rotate=270)]),\n        iaa.Multiply((0.8, 1.5)),\n        iaa.GaussianBlur(sigma=(0.0, 5.0))\n    ])\n\n    # *** This training schedule is an example. Update to your needs ***\n\n    # If starting from imagenet, train heads only for a bit\n    # since they have random weights\n    print(""Train network heads"")\n    model.train(dataset_train, dataset_val,\n                learning_rate=config.LEARNING_RATE,\n                epochs=20,\n                augmentation=augmentation,\n                layers=\'heads\')\n\n    print(""Train all layers"")\n    model.train(dataset_train, dataset_val,\n                learning_rate=config.LEARNING_RATE,\n                epochs=40,\n                augmentation=augmentation,\n                layers=\'all\')\n\n\n############################################################\n#  RLE Encoding\n############################################################\n\ndef rle_encode(mask):\n    """"""Encodes a mask in Run Length Encoding (RLE).\n    Returns a string of space-separated values.\n    """"""\n    assert mask.ndim == 2, ""Mask must be of shape [Height, Width]""\n    # Flatten it column wise\n    m = mask.T.flatten()\n    # Compute gradient. Equals 1 or -1 at transition points\n    g = np.diff(np.concatenate([[0], m, [0]]), n=1)\n    # 1-based indicies of transition points (where gradient != 0)\n    rle = np.where(g != 0)[0].reshape([-1, 2]) + 1\n    # Convert second index in each pair to lenth\n    rle[:, 1] = rle[:, 1] - rle[:, 0]\n    return "" "".join(map(str, rle.flatten()))\n\n\ndef rle_decode(rle, shape):\n    """"""Decodes an RLE encoded list of space separated\n    numbers and returns a binary mask.""""""\n    rle = list(map(int, rle.split()))\n    rle = np.array(rle, dtype=np.int32).reshape([-1, 2])\n    rle[:, 1] += rle[:, 0]\n    rle -= 1\n    mask = np.zeros([shape[0] * shape[1]], np.bool)\n    for s, e in rle:\n        assert 0 <= s < mask.shape[0]\n        assert 1 <= e <= mask.shape[0], ""shape: {}  s {}  e {}"".format(shape, s, e)\n        mask[s:e] = 1\n    # Reshape and transpose\n    mask = mask.reshape([shape[1], shape[0]]).T\n    return mask\n\n\ndef mask_to_rle(image_id, mask, scores):\n    ""Encodes instance masks to submission format.""\n    assert mask.ndim == 3, ""Mask must be [H, W, count]""\n    # If mask is empty, return line with image ID only\n    if mask.shape[-1] == 0:\n        return ""{},"".format(image_id)\n    # Remove mask overlaps\n    # Multiply each instance mask by its score order\n    # then take the maximum across the last dimension\n    order = np.argsort(scores)[::-1] + 1  # 1-based descending\n    mask = np.max(mask * np.reshape(order, [1, 1, -1]), -1)\n    # Loop over instance masks\n    lines = []\n    for o in order:\n        m = np.where(mask == o, 1, 0)\n        # Skip if empty\n        if m.sum() == 0.0:\n            continue\n        rle = rle_encode(m)\n        lines.append(""{}, {}"".format(image_id, rle))\n    return ""\\n"".join(lines)\n\n\n############################################################\n#  Detection\n############################################################\n\ndef detect(model, dataset_dir, subset):\n    """"""Run detection on images in the given directory.""""""\n    print(""Running on {}"".format(dataset_dir))\n\n    # Create directory\n    if not os.path.exists(RESULTS_DIR):\n        os.makedirs(RESULTS_DIR)\n    submit_dir = ""submit_{:%Y%m%dT%H%M%S}"".format(datetime.datetime.now())\n    submit_dir = os.path.join(RESULTS_DIR, submit_dir)\n    os.makedirs(submit_dir)\n\n    # Read dataset\n    dataset = NucleusDataset()\n    dataset.load_nucleus(dataset_dir, subset)\n    dataset.prepare()\n    # Load over images\n    submission = []\n    for image_id in dataset.image_ids:\n        # Load image and run detection\n        image = dataset.load_image(image_id)\n        # Detect objects\n        r = model.detect([image], verbose=0)[0]\n        # Encode image to RLE. Returns a string of multiple lines\n        source_id = dataset.image_info[image_id][""id""]\n        rle = mask_to_rle(source_id, r[""masks""], r[""scores""])\n        submission.append(rle)\n        # Save image with masks\n        visualize.display_instances(\n            image, r[\'rois\'], r[\'masks\'], r[\'class_ids\'],\n            dataset.class_names, r[\'scores\'],\n            show_bbox=False, show_mask=False,\n            title=""Predictions"")\n        plt.savefig(""{}/{}.png"".format(submit_dir, dataset.image_info[image_id][""id""]))\n\n    # Save to csv file\n    submission = ""ImageId,EncodedPixels\\n"" + ""\\n"".join(submission)\n    file_path = os.path.join(submit_dir, ""submit.csv"")\n    with open(file_path, ""w"") as f:\n        f.write(submission)\n    print(""Saved to "", submit_dir)\n\n\n############################################################\n#  Command Line\n############################################################\n\nif __name__ == \'__main__\':\n    import argparse\n\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(\n        description=\'Mask R-CNN for nuclei counting and segmentation\')\n    parser.add_argument(""command"",\n                        metavar=""<command>"",\n                        help=""\'train\' or \'detect\'"")\n    parser.add_argument(\'--dataset\', required=False,\n                        metavar=""/path/to/dataset/"",\n                        help=\'Root directory of the dataset\')\n    parser.add_argument(\'--weights\', required=True,\n                        metavar=""/path/to/weights.h5"",\n                        help=""Path to weights .h5 file or \'coco\'"")\n    parser.add_argument(\'--logs\', required=False,\n                        default=DEFAULT_LOGS_DIR,\n                        metavar=""/path/to/logs/"",\n                        help=\'Logs and checkpoints directory (default=logs/)\')\n    parser.add_argument(\'--subset\', required=False,\n                        metavar=""Dataset sub-directory"",\n                        help=""Subset of dataset to run prediction on"")\n    args = parser.parse_args()\n\n    # Validate arguments\n    if args.command == ""train"":\n        assert args.dataset, ""Argument --dataset is required for training""\n    elif args.command == ""detect"":\n        assert args.subset, ""Provide --subset to run prediction on""\n\n    print(""Weights: "", args.weights)\n    print(""Dataset: "", args.dataset)\n    if args.subset:\n        print(""Subset: "", args.subset)\n    print(""Logs: "", args.logs)\n\n    # Configurations\n    if args.command == ""train"":\n        config = NucleusConfig()\n    else:\n        config = NucleusInferenceConfig()\n    config.display()\n\n    # Create model\n    if args.command == ""train"":\n        model = modellib.MaskRCNN(mode=""training"", config=config,\n                                  model_dir=args.logs)\n    else:\n        model = modellib.MaskRCNN(mode=""inference"", config=config,\n                                  model_dir=args.logs)\n\n    # Select weights file to load\n    if args.weights.lower() == ""coco"":\n        weights_path = COCO_WEIGHTS_PATH\n        # Download weights file\n        if not os.path.exists(weights_path):\n            utils.download_trained_weights(weights_path)\n    elif args.weights.lower() == ""last"":\n        # Find last trained weights\n        weights_path = model.find_last()\n    elif args.weights.lower() == ""imagenet"":\n        # Start from ImageNet trained weights\n        weights_path = model.get_imagenet_weights()\n    else:\n        weights_path = args.weights\n\n    # Load weights\n    print(""Loading weights "", weights_path)\n    if args.weights.lower() == ""coco"":\n        # Exclude the last layers because they require a matching\n        # number of classes\n        model.load_weights(weights_path, by_name=True, exclude=[\n            ""mrcnn_class_logits"", ""mrcnn_bbox_fc"",\n            ""mrcnn_bbox"", ""mrcnn_mask""])\n    else:\n        model.load_weights(weights_path, by_name=True)\n\n    # Train or evaluate\n    if args.command == ""train"":\n        train(model, args.dataset, args.subset)\n    elif args.command == ""detect"":\n        detect(model, args.dataset, args.subset)\n    else:\n        print(""\'{}\' is not recognized. ""\n              ""Use \'train\' or \'detect\'"".format(args.command))\n'"
samples/shapes/shapes.py,13,"b'""""""\nMask R-CNN\nConfigurations and data loading code for the synthetic Shapes dataset.\nThis is a duplicate of the code in the noteobook train_shapes.ipynb for easy\nimport into other notebooks, such as inspect_model.ipynb.\n\nCopyright (c) 2017 Matterport, Inc.\nLicensed under the MIT License (see LICENSE for details)\nWritten by Waleed Abdulla\n""""""\n\nimport os\nimport sys\nimport math\nimport random\nimport numpy as np\nimport cv2\n\n# Root directory of the project\nROOT_DIR = os.path.abspath(""../../"")\n\n# Import Mask RCNN\nsys.path.append(ROOT_DIR)  # To find local version of the library\nfrom mrcnn.config import Config\nfrom mrcnn import utils\n\n\nclass ShapesConfig(Config):\n    """"""Configuration for training on the toy shapes dataset.\n    Derives from the base Config class and overrides values specific\n    to the toy shapes dataset.\n    """"""\n    # Give the configuration a recognizable name\n    NAME = ""shapes""\n\n    # Train on 1 GPU and 8 images per GPU. We can put multiple images on each\n    # GPU because the images are small. Batch size is 8 (GPUs * images/GPU).\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 8\n\n    # Number of classes (including background)\n    NUM_CLASSES = 1 + 3  # background + 3 shapes\n\n    # Use small images for faster training. Set the limits of the small side\n    # the large side, and that determines the image shape.\n    IMAGE_MIN_DIM = 128\n    IMAGE_MAX_DIM = 128\n\n    # Use smaller anchors because our image and objects are small\n    RPN_ANCHOR_SCALES = (8, 16, 32, 64, 128)  # anchor side in pixels\n\n    # Reduce training ROIs per image because the images are small and have\n    # few objects. Aim to allow ROI sampling to pick 33% positive ROIs.\n    TRAIN_ROIS_PER_IMAGE = 32\n\n    # Use a small epoch since the data is simple\n    STEPS_PER_EPOCH = 100\n\n    # use small validation steps since the epoch is small\n    VALIDATION_STEPS = 5\n\n\nclass ShapesDataset(utils.Dataset):\n    """"""Generates the shapes synthetic dataset. The dataset consists of simple\n    shapes (triangles, squares, circles) placed randomly on a blank surface.\n    The images are generated on the fly. No file access required.\n    """"""\n\n    def load_shapes(self, count, height, width):\n        """"""Generate the requested number of synthetic images.\n        count: number of images to generate.\n        height, width: the size of the generated images.\n        """"""\n        # Add classes\n        self.add_class(""shapes"", 1, ""square"")\n        self.add_class(""shapes"", 2, ""circle"")\n        self.add_class(""shapes"", 3, ""triangle"")\n\n        # Add images\n        # Generate random specifications of images (i.e. color and\n        # list of shapes sizes and locations). This is more compact than\n        # actual images. Images are generated on the fly in load_image().\n        for i in range(count):\n            bg_color, shapes = self.random_image(height, width)\n            self.add_image(""shapes"", image_id=i, path=None,\n                           width=width, height=height,\n                           bg_color=bg_color, shapes=shapes)\n\n    def load_image(self, image_id):\n        """"""Generate an image from the specs of the given image ID.\n        Typically this function loads the image from a file, but\n        in this case it generates the image on the fly from the\n        specs in image_info.\n        """"""\n        info = self.image_info[image_id]\n        bg_color = np.array(info[\'bg_color\']).reshape([1, 1, 3])\n        image = np.ones([info[\'height\'], info[\'width\'], 3], dtype=np.uint8)\n        image = image * bg_color.astype(np.uint8)\n        for shape, color, dims in info[\'shapes\']:\n            image = self.draw_shape(image, shape, dims, color)\n        return image\n\n    def image_reference(self, image_id):\n        """"""Return the shapes data of the image.""""""\n        info = self.image_info[image_id]\n        if info[""source""] == ""shapes"":\n            return info[""shapes""]\n        else:\n            super(self.__class__).image_reference(self, image_id)\n\n    def load_mask(self, image_id):\n        """"""Generate instance masks for shapes of the given image ID.\n        """"""\n        info = self.image_info[image_id]\n        shapes = info[\'shapes\']\n        count = len(shapes)\n        mask = np.zeros([info[\'height\'], info[\'width\'], count], dtype=np.uint8)\n        for i, (shape, _, dims) in enumerate(info[\'shapes\']):\n            mask[:, :, i:i + 1] = self.draw_shape(mask[:, :, i:i + 1].copy(),\n                                                  shape, dims, 1)\n        # Handle occlusions\n        occlusion = np.logical_not(mask[:, :, -1]).astype(np.uint8)\n        for i in range(count - 2, -1, -1):\n            mask[:, :, i] = mask[:, :, i] * occlusion\n            occlusion = np.logical_and(\n                occlusion, np.logical_not(mask[:, :, i]))\n        # Map class names to class IDs.\n        class_ids = np.array([self.class_names.index(s[0]) for s in shapes])\n        return mask, class_ids.astype(np.int32)\n\n    def draw_shape(self, image, shape, dims, color):\n        """"""Draws a shape from the given specs.""""""\n        # Get the center x, y and the size s\n        x, y, s = dims\n        if shape == \'square\':\n            image = cv2.rectangle(image, (x - s, y - s),\n                                  (x + s, y + s), color, -1)\n        elif shape == ""circle"":\n            image = cv2.circle(image, (x, y), s, color, -1)\n        elif shape == ""triangle"":\n            points = np.array([[(x, y - s),\n                                (x - s / math.sin(math.radians(60)), y + s),\n                                (x + s / math.sin(math.radians(60)), y + s),\n                                ]], dtype=np.int32)\n            image = cv2.fillPoly(image, points, color)\n        return image\n\n    def random_shape(self, height, width):\n        """"""Generates specifications of a random shape that lies within\n        the given height and width boundaries.\n        Returns a tuple of three valus:\n        * The shape name (square, circle, ...)\n        * Shape color: a tuple of 3 values, RGB.\n        * Shape dimensions: A tuple of values that define the shape size\n                            and location. Differs per shape type.\n        """"""\n        # Shape\n        shape = random.choice([""square"", ""circle"", ""triangle""])\n        # Color\n        color = tuple([random.randint(0, 255) for _ in range(3)])\n        # Center x, y\n        buffer = 20\n        y = random.randint(buffer, height - buffer - 1)\n        x = random.randint(buffer, width - buffer - 1)\n        # Size\n        s = random.randint(buffer, height // 4)\n        return shape, color, (x, y, s)\n\n    def random_image(self, height, width):\n        """"""Creates random specifications of an image with multiple shapes.\n        Returns the background color of the image and a list of shape\n        specifications that can be used to draw the image.\n        """"""\n        # Pick random background color\n        bg_color = np.array([random.randint(0, 255) for _ in range(3)])\n        # Generate a few random shapes and record their\n        # bounding boxes\n        shapes = []\n        boxes = []\n        N = random.randint(1, 4)\n        for _ in range(N):\n            shape, color, dims = self.random_shape(height, width)\n            shapes.append((shape, color, dims))\n            x, y, s = dims\n            boxes.append([y - s, x - s, y + s, x + s])\n        # Apply non-max suppression wit 0.3 threshold to avoid\n        # shapes covering each other\n        keep_ixs = utils.non_max_suppression(\n            np.array(boxes), np.arange(N), 0.3)\n        shapes = [s for i, s in enumerate(shapes) if i in keep_ixs]\n        return bg_color, shapes\n'"
scenedetect/cli/__init__.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.cli Module\n\nThis file contains the implementation of the PySceneDetect command-line\ninterface (CLI) parser logic for the PySceneDetect application (""business logic""),\nwhich uses the click library. The main CLI entry-point function is the\nfunction scenedetect_cli, which is a chained command group.\n\nThe scenedetect.cli module coordinates first parsing all actions to take and\ntheir validity, storing them in the CliContext, finally performing scene\ndetection only after the input videos have been loaded and all CLI arguments\nparsed and validated.\n\nSome of this parsing functionality is shared between the scenedetect.cli\nmodule and the scenedetect.cli.CliContext object.\n""""""\n\n\n# Standard Library Imports\nfrom __future__ import print_function\nimport sys\nimport string\nimport logging\n\n# Third-Party Library Imports\nimport click\n\n# PySceneDetect Library Imports\nimport scenedetect\nfrom scenedetect.cli.context import CliContext\nfrom scenedetect.frame_timecode import FrameTimecode\nfrom scenedetect.video_manager import VideoManager\n\nfrom scenedetect.video_splitter import is_mkvmerge_available\nfrom scenedetect.video_splitter import is_ffmpeg_available\n\n\n\n\n\ndef get_help_command_preface(command_name=\'scenedetect\'):\n    """""" Preface/intro help message shown at the beginning of the help command. """"""\n    return """"""\nThe PySceneDetect command-line interface is grouped into commands which\ncan be combined together, each containing its own set of arguments:\n\n > {command_name} ([options]) [command] ([options]) ([...other command(s)...])\n\nWhere [command] is the name of the command, and ([options]) are the\narguments/options associated with the command, if any. Options\nassociated with the {command_name} command below (e.g. --input,\n--framerate) must be specified before any commands. The order of\ncommands is not strict, but each command should only be specified once.\n\nCommands can also be combined, for example, running the \'detect-threshold\'\nand \'detect-content\' (specifying options for the latter):\n\n > {command_name} input -i vid0001.mp4 detect-threshold detect-content --threshold 20\n\nA list of all commands is printed below. Help for a particular command\ncan be printed by specifying \'help [command]\', or \'help all\' to print\nthe help information for every command.\n\nLastly, there are several commands used for displaying application\nversion and copyright information (e.g. {command_name} about):\n\n    version: Displays the version of PySceneDetect being used.\n    about:   Displays PySceneDetect license and copyright information.\n"""""".format(**{\'command_name\': command_name})\n\n\nCLICK_CONTEXT_SETTINGS = dict(help_option_names=[\'-h\', \'--help\'])\n\nCOMMAND_DICT = []\n\n\ndef add_cli_command(cli, command):\n    # type: (Callable[[...] -> None], Callable[]\n    """"""Adds the CLI command to the cli object as well as to the COMMAND_DICT.""""""\n    cli.add_command(command)\n    COMMAND_DICT.append(command)\n\ndef parse_timecode(cli_ctx, value):\n    # type: (CliContext, str) -> Union[FrameTimecode, None]\n    """""" Parses a user input string expected to be a timecode, given a CLI context.\n    \n    Returns:\n        (FrameTimecode) Timecode set to value with the CliContext VideoManager framerate.\n            If value is None, skips processing and returns None.\n\n    Raises:\n        click.BadParameter\n     """"""\n    cli_ctx.check_input_open()\n    if value is None:\n        return value\n    try:\n        timecode = FrameTimecode(\n            timecode=value, fps=cli_ctx.video_manager.get_framerate())\n        return timecode\n    except (ValueError, TypeError):\n        raise click.BadParameter(\n            \'timecode must be in frames (1234), seconds (123.4s), or HH:MM:SS (00:02:03.400)\')\n\n\ndef print_command_help(ctx, command):\n    ctx_name = ctx.info_name\n    ctx.info_name = command.name\n    click.echo(click.style(\'PySceneDetect %s Command\' % command.name, fg=\'cyan\'))\n    click.echo(click.style(\'----------------------------------------------------\', fg=\'cyan\'))\n    click.echo(command.get_help(ctx))\n    click.echo(\'\')\n    ctx.info_name = ctx_name\n\n\ndef print_command_list_header():\n    click.echo(click.style(\'PySceneDetect Option/Command List:\', fg=\'green\'))\n    click.echo(click.style(\'----------------------------------------------------\', fg=\'green\'))\n    click.echo(\'\')\n\n\ndef print_help_header():\n    click.echo(click.style(\'----------------------------------------------------\', fg=\'yellow\'))\n    click.echo(click.style(\' PySceneDetect %s Help\' % scenedetect.__version__, fg=\'yellow\'))\n    click.echo(click.style(\'----------------------------------------------------\', fg=\'yellow\'))\n\n\ndef duplicate_command(ctx, param_hint):\n    # type: (str) -> None\n    """""" Duplicate Command: Called when a command is duplicated to stop parsing and raise an error.\n    \n    Called when a one-time use command is specified multiple times, displaying the appropriate\n    error and usage information.\n\n    Raises:\n        click.BadParameter\n    """"""\n    ctx.obj.options_processed = False\n    error_strs = []\n    error_strs.append(\'Error: Command %s specified multiple times.\' % param_hint)\n    error_strs.append(\'The %s command may appear only one time.\')\n        \n    logging.error(\'\\n\'.join(error_strs))\n    raise click.BadParameter(\'\\n  Command %s may only be specified once.\' % param_hint,\n                             param_hint=\'%s command\' % param_hint)\n\n@click.group(\n    chain=True, context_settings=CLICK_CONTEXT_SETTINGS)\n@click.option(\n    \'--input\', \'-i\',\n    multiple=True, required=False, metavar=\'VIDEO\',\n    type=click.Path(exists=True, file_okay=True, readable=True, resolve_path=True), help=\n    \'[Required] Input video file.\'\n    \' May be specified multiple times to concatenate several videos together.\')\n@click.option(\n    \'--output\', \'-o\',\n    multiple=False, required=False, metavar=\'DIR\',\n    type=click.Path(exists=False, dir_okay=True, writable=True, resolve_path=True), help=\n    \'Output directory for all files (stats file, output videos, images, log files, etc...).\')\n@click.option(\n    \'--framerate\', \'-f\', metavar=\'FPS\',\n    type=click.FLOAT, default=None, help=\n    \'Force framerate, in frames/sec (e.g. -f 29.97). Disables check to ensure that all\'\n    \' input videos have the same framerates.\')\n@click.option(\n    \'--downscale\', \'-d\', metavar=\'N\',\n    type=click.INT, default=None, help=\n    \'Integer factor to downscale frames by (e.g. 2, 3, 4...), where the frame is scaled\'\n    \' to width/N x height/N (thus -d 1 implies no downscaling). Each increment speeds up processing\'\n    \' by a factor of 4 (e.g. -d 2 is 4 times quicker than -d 1). Higher values can be used for\'\n    \' high definition content with minimal effect on accuracy.\'\n    \' [default: 2 for SD, 4 for 720p, 6 for 1080p, 12 for 4k]\')\n@click.option(\n    \'--frame-skip\', \'-fs\', metavar=\'N\', show_default=True,\n    type=click.INT, default=0, help=\n    \'Skips N frames during processing (-fs 1 skips every other frame, processing 50% of the video,\'\n    \' -fs 2 processes 33% of the frames, -fs 3 processes 25%, etc...).\'\n    \' Reduces processing speed at expense of accuracy.\')\n@click.option(\n    \'--stats\', \'-s\', metavar=\'CSV\',\n    type=click.Path(exists=False, file_okay=True, writable=True, resolve_path=False), help=\n    \'Path to stats file (.csv) for writing frame metrics to. If the file exists, any\'\n    \' metrics will be processed, otherwise a new file will be created. Can be used to determine\'\n    \' optimal values for various scene detector options, and to cache frame calculations in order\'\n    \' to speed up multiple detection runs.\')\n@click.option(\n    \'--verbosity\', \'-v\', metavar=\'LEVEL\',\n    type=click.Choice([\'none\', \'debug\', \'info\', \'warning\', \'error\']), default=\'info\', help=\n    \'Level of debug/info/error information to show. Setting to none will\'\n    \' suppress all output except that generated by actions (e.g. timecode list output).\')\n@click.option(\n    \'--logfile\', \'-l\', metavar=\'LOG\',\n    type=click.Path(exists=False, file_okay=True, writable=True, resolve_path=False), help=\n    \'Path to log file for writing application logging information, mainly for debugging.\'\n    \' Make sure to set ""-il debug"" as well if you are submitting a bug report.\')\n@click.option(\n    \'--quiet\', \'-q\',\n    is_flag=True, flag_value=True, help=\n    \'Suppresses all output of PySceneDetect except for those from the specified\'\n    \' commands. Equivalent to setting ""--info-level none"", and overrides the current info-\'\n    \'level, even if --info-level/-il is specified.\')\n@click.pass_context\ndef scenedetect_cli(ctx, input, output, framerate, downscale, frame_skip, stats,\n                    verbosity, logfile, quiet):\n    ctx.call_on_close(ctx.obj.process_input)\n\n    logging.disable(logging.NOTSET)\n\n    format_str = \'[PySceneDetect] %(message)s\'\n    if verbosity.lower() == \'none\':\n        verbosity = None\n    elif verbosity.lower() == \'debug\':\n        format_str = \'%(levelname)s: %(module)s.%(funcName)s(): %(message)s\'\n\n    if quiet:\n        verbosity = None\n\n    ctx.obj.output_directory = output\n    if logfile is not None:\n        logfile = ctx.obj.get_output_file_path(logfile)\n        logging.basicConfig(\n            filename=logfile, filemode=\'a\', format=format_str,\n            level=getattr(logging, verbosity.upper()) if verbosity is not None else verbosity)\n        logging.info(\'Version: %s\', scenedetect.__version__)\n        logging.info(\'Info Level: %s\', verbosity)\n    else:\n        if verbosity is not None:\n            logging.basicConfig(format=format_str,\n                                level=getattr(logging, verbosity.upper()))\n        else:\n            logging.disable(logging.CRITICAL)\n\n    ctx.obj.quiet_mode = True if verbosity is None else False\n\n    if stats is not None and frame_skip != 0:\n        ctx.obj.options_processed = False\n        error_strs = [\n            \'Unable to detect scenes with stats file if frame skip is not 1.\',\n            \'  Either remove the -fs/--frame-skip option, or the -s/--stats file.\\n\']\n        logging.error(\'\\n\'.join(error_strs))\n        raise click.BadParameter(\'\\n  Combining the -s/--stats and -fs/--frame-skip options is not supported.\', param_hint=\'frame skip + stats file\')\n    try:\n        if ctx.obj.output_directory is not None:\n            logging.info(\'Output directory set:\\n  %s\', ctx.obj.output_directory)\n        ctx.obj.parse_options(\n            input_list=input, framerate=framerate, stats_file=stats, downscale=downscale,\n            frame_skip=frame_skip)\n    except:\n        logging.error(\'Could not parse CLI options.\')\n        raise\n\n\n@click.command(\'help\', add_help_option=False)\n@click.argument(\'command_name\', required=False, type=click.STRING)\n@click.pass_context\ndef help_command(ctx, command_name):\n    """""" Print help for command (help [command]).\n    """"""\n    ctx.obj.options_processed = False\n    if command_name is not None:\n        if command_name.lower() == \'all\':\n            print_help_header()\n            click.echo(get_help_command_preface(ctx.parent.info_name))\n            print_command_list_header()\n            click.echo(ctx.parent.get_help())\n            click.echo(\'\')\n            for command in COMMAND_DICT:\n                print_command_help(ctx, command)\n        else:\n            command = None\n            for command_ref in COMMAND_DICT:\n                if command_name == command_ref.name:\n                    command = command_ref\n                    break\n            if command is None:\n                error_strs = [\n                    \'unknown command.\', \'List of valid commands:\',\n                    \'  %s\' % \', \'.join([command.name for command in COMMAND_DICT]) ]\n                raise click.BadParameter(\'\\n\'.join(error_strs), param_hint=\'command name\')\n            click.echo(\'\')\n            print_command_help(ctx, command)\n    else:\n        print_help_header()\n        click.echo(get_help_command_preface(ctx.parent.info_name))\n        print_command_list_header()\n        click.echo(ctx.parent.get_help())\n        click.echo(""\\nType \'%s help [command]\' for usage/help of [command], or"" % ctx.parent.info_name)\n        click.echo(""\'%s help all\' to list usage information for every command."" % (ctx.parent.info_name))\n    ctx.exit()\n\n\n@click.command(\'about\', add_help_option=False)\n@click.pass_context\ndef about_command(ctx):\n    """""" Print license/copyright info. """"""\n    ctx.obj.process_input_flag = False\n    click.echo(click.style(\'----------------------------------------------------\', fg=\'cyan\'))\n    click.echo(click.style(\' About PySceneDetect %s\' % scenedetect.__version__, fg=\'yellow\'))\n    click.echo(click.style(\'----------------------------------------------------\', fg=\'cyan\'))\n    click.echo(scenedetect.ABOUT_STRING)\n    ctx.exit()\n\n\n@click.command(\'version\', add_help_option=False)\n@click.pass_context\ndef version_command(ctx):\n    """""" Print version of PySceneDetect. """"""\n    ctx.obj.process_input_flag = False\n    click.echo(click.style(\'PySceneDetect %s\' % scenedetect.__version__, fg=\'yellow\'))\n    ctx.exit()\n\n\n@click.command(\'time\')\n@click.option(\n    \'--start\', \'-s\', metavar=\'TIMECODE\',\n    type=click.STRING, default=\'0\', show_default=True, help=\n    \'Time in video to begin detecting scenes. TIMECODE can be specified as exact\'\n    \' number of frames (-s 100 to start at frame 100), time in seconds followed by s\'\n    \' (-s 100s to start at 100 seconds), or a timecode in the format HH:MM:SS or HH:MM:SS.nnn\'\n    \' (-s 00:01:40 to start at 1m40s).\')\n@click.option(\n    \'--duration\', \'-d\', metavar=\'TIMECODE\',\n    type=click.STRING, default=None, help=\n    \'Maximum time in video to process. TIMECODE format is the same as other\'\n    \' arguments. Mutually exclusive with --end / -e.\')\n@click.option(\n    \'--end\', \'-e\', metavar=\'TIMECODE\',\n    type=click.STRING, default=None, help=\n    \'Time in video to end detecting scenes. TIMECODE format is the same as other\'\n    \' arguments. Mutually exclusive with --duration / -d.\')\n@click.pass_context\ndef time_command(ctx, start, duration, end):\n    """""" Set start/end/duration of input video(s).\n    \n    Time values can be specified as frames (NNNN), seconds (NNNN.NNs), or as\n    a timecode (HH:MM:SS.nnn). For example, to start scene detection at 1 minute,\n    and stop after 100 seconds:\n\n    time --start 00:01:00 --duration 100s\n\n    Note that --end and --duration are mutually exclusive (i.e. only one of the two\n    can be set). Lastly, the following is an example using absolute frame numbers\n    to process frames 0 through 1000:\n\n    time --start 0 --end 1000\n    """"""\n    start = parse_timecode(ctx.obj, start)\n    duration = parse_timecode(ctx.obj, duration)\n    end = parse_timecode(ctx.obj, end)\n\n    ctx.obj.time_command(start, duration, end)\n\n\n@click.command(\'detect-content\')\n@click.option(\n    \'--threshold\', \'-t\', metavar=\'VAL\',\n    type=click.FLOAT, default=30.0, show_default=True, help=\n    \'Threshold value (float) that the delta_hsv frame metric must exceed to trigger a new scene.\'\n    \' Refers to frame metric delta_hsv_avg in stats file.\')\n#@click.option(\n#    \'--intensity-cutoff\', \'-i\', metavar=\'VAL\',\n#    type=click.FLOAT, default=None, show_default=True, help=\n#    \'[Optional] Intensity cutoff threshold to disable scene cut detection. Useful for avoiding.\'\n#    \' scene changes triggered by flashes. Refers to frame metric delta_lum in stats file.\')\n@click.option(\n    \'--min-scene-len\', \'-m\', metavar=\'FRAMES\',\n    type=click.INT, default=15, show_default=True, help=\n    \'Minimum size/length of any scene, in number of frames.\')\n@click.pass_context\ndef detect_content_command(ctx, threshold, min_scene_len): #, intensity_cutoff):\n    """""" Perform content detection algorithm on input video(s).\n\n    detect-content\n\n    detect-content --threshold 27.5\n    """"""\n\n    #if intensity_cutoff is not None:\n    #    raise NotImplementedError()\n\n    logging.debug(\'Detecting content, parameters:\\n\'\n                  \'  threshold: %d, min-scene-len: %d\',\n                  threshold, min_scene_len)\n\n    # Initialize detector and add to scene manager.\n    # Need to ensure that a detector is not added twice, or will cause\n    # a frame metric key error when registering the detector.\n    ctx.obj.add_detector(scenedetect.detectors.ContentDetector(\n        threshold=threshold, min_scene_len=min_scene_len))\n\n@click.command(\'detect-threshold\')\n@click.option(\n    \'--threshold\', \'-t\', metavar=\'VAL\',\n    type=click.IntRange(0, 255), default=12, show_default=True, help=\n    \'Threshold value (integer) that the delta_rgb frame metric must exceed to trigger a new scene.\'\n    \' Refers to frame metric delta_rgb in stats file.\')\n@click.option(\n    \'--min-scene-len\', \'-m\', metavar=\'FRAMES\',\n    type=click.INT, default=15, show_default=True, help=\n    \'Minimum size/length of any scene, in number of frames.\')\n@click.option(\n    \'--fade-bias\', \'-f\', metavar=\'PERCENT\',\n    type=click.IntRange(-100, 100), default=0, show_default=True, help=\n    \'Percent (%) from -100 to 100 of timecode skew for where cuts should be placed. -100\'\n    \' indicates the start frame, +100 indicates the end frame, and 0 is the middle of both.\')\n@click.option(\n    \'--add-last-scene\', \'-l\',\n    is_flag=True, flag_value=True, help=\n    \'If set, if the video ends on a fade-out, an additional scene will be generated for the\'\n    \' last fade out position.\')\n@click.option(\n    \'--min-percent\', \'-p\', metavar=\'PERCENT\',\n    type=click.IntRange(0, 100), default=95, show_default=True, help=\n    \'Percent (%) from 0 to 100 of amount of pixels that must meet the threshold value in order\'\n    \'to trigger a scene change.\')\n@click.option(\n    \'--block-size\', \'-b\', metavar=\'N\',\n    type=click.IntRange(1, 128), default=8, show_default=True, help=\n    \'Number of rows in image to sum per iteration (can be tuned for performance in some cases).\')\n@click.pass_context\ndef detect_threshold_command(ctx, threshold, min_scene_len, fade_bias, add_last_scene,\n                             min_percent, block_size):\n    """"""  Perform threshold detection algorithm on input video(s).\n    \n    detect-threshold\n\n    detect-threshold --threshold 15\n    """"""\n\n    logging.debug(\'Detecting threshold, parameters:\\n\'\n                  \'  threshold: %d, min-scene-len: %d, fade-bias: %d,\\n\'\n                  \'  add-last-scene: %s, min-percent: %d, block-size: %d\',\n                  threshold, min_scene_len, fade_bias,\n                  \'yes\' if add_last_scene else \'no\', min_percent, block_size)\n\n    # Handle case where add_last_scene is not set and is None.\n    add_last_scene = True if add_last_scene else False\n\n    # Convert min_percent and fade_bias from integer to floats (0.0-1.0 and -1.0-+1.0 respectively).\n    min_percent /= 100.0\n    fade_bias /= 100.0\n    ctx.obj.add_detector(scenedetect.detectors.ThresholdDetector(\n        threshold=threshold, min_scene_len=min_scene_len, fade_bias=fade_bias,\n        add_final_scene=add_last_scene, min_percent=min_percent, block_size=block_size))\n\n\n@click.command(\'list-scenes\', add_help_option=False)\n@click.option(\n    \'--output\', \'-o\', metavar=\'DIR\',\n    type=click.Path(exists=False, dir_okay=True, writable=True, resolve_path=False), help=\n    \'Output directory to save videos to. Overrides global option -o/--output if set.\')\n@click.option(\n    \'--filename\', \'-f\', metavar=\'NAME\', default=\'$VIDEO_NAME-Scenes.csv\',\n    type=click.STRING, show_default=True, help=\n    \'Filename format to use for the scene list CSV file. You can use the\'\n    \' $VIDEO_NAME macro in the file name.\')\n@click.option(\n    \'--no-output-file\', \'-n\',\n    is_flag=True, flag_value=True, help=\n    \'Disable writing scene list CSV file to disk.  If set, -o/--output and\'\n    \' -f/--filename are ignored.\')\n@click.option(\n    \'--quiet\', \'-q\',\n    is_flag=True, flag_value=True, help=\n    \'Suppresses output of the table printed by the list-scenes command.\')\n@click.pass_context\ndef list_scenes_command(ctx, output, filename, no_output_file, quiet):\n    """""" Prints scene list and outputs to a CSV file. The default filename is\n    $VIDEO_NAME-Scenes.csv. """"""\n    if ctx.obj.list_scenes:\n        duplicate_command(ctx, \'list-scenes\')\n    ctx.obj.list_scenes_command(output, filename, no_output_file, quiet)\n    ctx.obj.list_scenes = True\n\n\n\n\n@click.command(\'split-video\', add_help_option=False)\n@click.option(\n    \'--output\', \'-o\', metavar=\'DIR\',\n    type=click.Path(exists=False, dir_okay=True, writable=True, resolve_path=False), help=\n    \'Output directory to save videos to. Overrides global option -o/--output if set.\')\n@click.option(\n    \'--filename\', \'-f\', metavar=\'NAME\', default=\'$VIDEO_NAME-Scene-$SCENE_NUMBER\',\n    type=click.STRING, show_default=True, help=\n    \'File name format, to use when saving image files. You can use the\'\n    \' $VIDEO_NAME and $SCENE_NUMBER macros in the file name.\')\n@click.option(\n    \'--high-quality\', \'-h\',\n    is_flag=True, flag_value=True, help=\n    \'Encode video with higher quality, overrides -f option if present.\'\n    \' Equivalent to specifying --rate-factor 17 and --preset slow.\')\n@click.option(\n    \'--override-args\', \'-a\', metavar=\'ARGS\',\n    type=click.STRING, help=\n    \'Override codec arguments/options passed to FFmpeg when splitting and re-encoding\'\n    \' scenes. Use double quotes ("") around specified arguments. Must specify at least\'\n    \' audio/video codec to use (e.g. -a ""-c:v [...] and -c:a [...]""). [default:\'\n    \' ""-c:v libx264 -preset veryfast -crf 22 -c:a copy""]\')\n@click.option(\n    \'--quiet\', \'-q\',\n    is_flag=True, flag_value=True, help=\n    \'Suppresses output from external video splitting tool.\')\n@click.option(\n    \'--copy\', \'-c\',\n    is_flag=True, flag_value=True, help=\n    \'Copy instead of re-encode using mkvmerge instead of ffmpeg for splitting videos.\'\n    \' All other arguments except -o/--output and -q/--quiet are ignored in this mode,\'\n    \' and output files will be named $VIDEO_NAME-$SCENE_NUMBER.mkv.\'\n    \' Significantly faster when splitting videos, however,\'\n    \' output videos sometimes may not be split exactly, especially if the scenes\'\n    \' are very short in length, or the input video is heavily compressed. This can\'\n    \' lead to smaller scenes being merged with others, or scene boundaries being\'\n    \' shifted in time - thus when using this option, the number of videos written\'\n    \' may not match the number of scenes that was detected. If this option is set,\'\n    \' the --ffmpeg-args / --high-quality options will be ignored.\')\n@click.option(\n    \'--rate-factor\', \'-crf\', metavar=\'RATE\', default=None,\n    type=click.IntRange(0, 100), help=\n    \'Video encoding quality (x264 constant rate factor), from 0-100, where lower\'\n    \' values represent better quality, with 0 indicating lossless.\'\n    \' [default: 22, if -h/--high-quality is set: 17]\')\n@click.option(\n    \'--preset\', \'-p\', metavar=\'LEVEL\', default=None,\n    type=click.Choice([\n        \'ultrafast\', \'superfast\', \'veryfast\', \'faster\', \'fast\', \'medium\',\n        \'slow\', \'slower\', \'veryslow\']),\n    help=\n    \'Video compression quality preset (x264 preset). Can be one of: ultrafast, superfast,\'\n    \' veryfast, faster, fast, medium, slow, slower, and veryslow. Faster modes take less\'\n    \' time to run, but the output files may be larger.\'\n    \' [default: veryfast, if -h/--high quality is set: slow]\')\n@click.pass_context\ndef split_video_command(ctx, output, filename, high_quality, override_args, quiet, copy,\n                        rate_factor, preset):\n    """"""Split input video(s) using ffmpeg or mkvmerge.""""""\n    if ctx.obj.split_video:\n        logging.warning(\'split-video command is specified twice.\')\n    ctx.obj.check_input_open()\n    ctx.obj.split_video = True\n    ctx.obj.split_quiet = True if quiet else False\n    ctx.obj.split_directory = output\n    ctx.obj.split_name_format = filename\n    if copy:\n        ctx.obj.split_mkvmerge = True\n        if high_quality:\n            logging.warning(\'-h/--high-quality flag ignored due to -c/--copy.\')\n        if override_args:\n            logging.warning(\'-f/--ffmpeg-args option ignored due to -c/--copy.\')\n    if not override_args:\n        if rate_factor is None:\n            rate_factor = 22 if not high_quality else 17\n        if preset is None:\n            preset = \'veryfast\' if not high_quality else \'slow\'\n        override_args = (\'-c:v libx264 -preset {PRESET} -crf {RATE_FACTOR} -c:a copy\'.format(\n            PRESET=preset, RATE_FACTOR=rate_factor))\n    if not copy:\n        logging.info(\'FFmpeg codec args set: %s\', override_args)\n    if filename:\n        logging.info(\'Video output file name format: %s\', filename)\n    if ctx.obj.split_directory is not None:\n        logging.info(\'Video output path set:  \\n%s\', ctx.obj.split_directory)\n    ctx.obj.split_args = override_args\n\n    mkvmerge_available = is_mkvmerge_available()\n    ffmpeg_available = is_ffmpeg_available()\n    if not (mkvmerge_available or ffmpeg_available) or (\n            (not mkvmerge_available and copy) or (not ffmpeg_available and not copy)):\n        split_tool = \'ffmpeg/mkvmerge\'\n        if (not mkvmerge_available and copy):\n            split_tool = \'mkvmerge\'\n        elif (not ffmpeg_available and not copy):\n            split_tool = \'ffmpeg\'\n        error_strs = [\n            ""{EXTERN_TOOL} is required for split-video{EXTRA_ARGS}."".format(\n                EXTERN_TOOL=split_tool, EXTRA_ARGS=\' -c/--copy\' if copy else \'\'),\n            ""Install the above tool%s to enable video splitting support."" % (\'s\' if split_tool.find(\'/\') > 0 else \'\')]\n        if mkvmerge_available:\n            error_strs += [\'You can also specify `split-video -c/--copy` to use mkvmerge for splitting.\']\n        error_str = \'\\n\'.join(error_strs)\n        logging.debug(error_str)\n        ctx.obj.options_processed = False\n        raise click.BadParameter(error_str, param_hint=\'split-video\')\n\n\n\n@click.command(\'save-images\', add_help_option=False)\n@click.option(\n    \'--output\', \'-o\', metavar=\'DIR\',\n    type=click.Path(exists=False, dir_okay=True, writable=True, resolve_path=False), help=\n    \'Output directory to save images to. Overrides global option -o/--output if set.\')\n@click.option(\n    \'--filename\', \'-f\', metavar=\'NAME\', default=\'$VIDEO_NAME-Scene-$SCENE_NUMBER-$IMAGE_NUMBER\',\n    type=click.STRING, show_default=True, help=\n    \'Filename format, *without* extension, to use when saving image files. You can use the\'\n    \' $VIDEO_NAME, $SCENE_NUMBER, and $IMAGE_NUMBER macros in the file name.\')\n@click.option(\n    \'--num-images\', \'-n\', metavar=\'N\', default=2, #4,\n    type=click.INT, help=\n    \'Number of images to generate. Will always include start/end frame,\'\n    \' unless N = 1, in which case the image will be the frame at the mid-point\'\n    \' in the scene.\')\n@click.option(\n    \'--jpeg\', \'-j\',\n    is_flag=True, flag_value=True, help=\n    \'Set output format to JPEG. [default]\')\n@click.option(\n    \'--webp\', \'-w\',\n    is_flag=True, flag_value=True, help=\n    \'Set output format to WebP.\')\n@click.option(\n    \'--quality\', \'-q\', metavar=\'Q\', default=None,\n    type=click.IntRange(0, 100), help=\n    \'JPEG/WebP encoding quality, from 0-100 (higher indicates better quality).\'\n    \' For WebP, 100 indicates lossless. [default: JPEG: 95, WebP: 100]\')\n@click.option(\n    \'--png\', \'-p\',\n    is_flag=True, flag_value=True, help=\n    \'Set output format to PNG.\')\n@click.option(\n    \'--compression\', \'-c\', metavar=\'C\', default=None,\n    type=click.IntRange(0, 9), help=\n    \'PNG compression rate, from 0-9. Higher values produce smaller files but result\'\n    \' in longer compression time. This setting does not affect image quality, only\'\n    \' file size. [default: 3]\')\n@click.pass_context\ndef save_images_command(ctx, output, filename, num_images, jpeg, webp, quality, png, compression):\n    """""" Create images for each detected scene. """"""\n    if ctx.obj.save_images:\n        duplicate_command(ctx, \'save-images\')\n    ctx.obj.save_images_command(num_images, output, filename, jpeg, webp, quality, png, compression)\n\n\n\n# Generate pallette image of average N colours in video.\n@click.command(\'colors\', add_help_option=False)\n@click.option(\n    \'--colors\', \'-c\', metavar=\'N\',\n    type=click.INT, default=4, help=\n    \'Number of color averages to generate.\')\n@click.option(\n    \'--generate-pallette\', \'-p\', metavar=\'N\',\n    type=click.INT, default=4, help=\n    \'Flag which, if set, saves an image with the colors in a grid as for use as a pallette.\')\n@click.pass_context\ndef colors_command(ctx):\n    raise NotImplementedError()\n\n\n\n\n# Info/Terminating Commands:\nadd_cli_command(scenedetect_cli, help_command)\nadd_cli_command(scenedetect_cli, about_command)\nadd_cli_command(scenedetect_cli, version_command)\n\n# Commands Added To Help List:\nadd_cli_command(scenedetect_cli, time_command)\nadd_cli_command(scenedetect_cli, detect_content_command)\nadd_cli_command(scenedetect_cli, detect_threshold_command)\nadd_cli_command(scenedetect_cli, list_scenes_command)\n\nadd_cli_command(scenedetect_cli, save_images_command)\nadd_cli_command(scenedetect_cli, split_video_command)\n'"
scenedetect/cli/context.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.cli.context Module\n\nThis file contains the implementation of the PySceneDetect command-line\ninterface (CLI) context class CliContext, used for the main application\nstate/context and logic to run the PySceneDetect CLI.\n""""""\n\n# Standard Library Imports\nfrom __future__ import print_function\nimport logging\nimport os\nimport time\nimport math\nfrom string import Template\n\n# Third-Party Library Imports\nimport click\nimport cv2\nfrom scenedetect.platform import tqdm\n\n# PySceneDetect Library Imports\nimport scenedetect.detectors\n\nfrom scenedetect.frame_timecode import FrameTimecode\n\nfrom scenedetect.scene_manager import SceneManager\nfrom scenedetect.scene_manager import write_scene_list\n\nfrom scenedetect.stats_manager import StatsManager\nfrom scenedetect.stats_manager import StatsFileCorrupt\nfrom scenedetect.stats_manager import StatsFileFramerateMismatch\n\nfrom scenedetect.video_manager import VideoManager\nfrom scenedetect.video_manager import VideoOpenFailure\nfrom scenedetect.video_manager import VideoFramerateUnavailable\nfrom scenedetect.video_manager import VideoParameterMismatch\nfrom scenedetect.video_manager import InvalidDownscaleFactor\nfrom scenedetect.video_manager import VideoDecodingInProgress\nfrom scenedetect.video_manager import VideoDecoderNotStarted\n\nfrom scenedetect.video_splitter import is_mkvmerge_available\nfrom scenedetect.video_splitter import is_ffmpeg_available\nfrom scenedetect.video_splitter import split_video_mkvmerge\nfrom scenedetect.video_splitter import split_video_ffmpeg\n\nfrom scenedetect.platform import get_cv2_imwrite_params\nfrom scenedetect.platform import check_opencv_ffmpeg_dll\n\n\ndef get_plural(val_list):\n    return \'s\' if len(val_list) > 1 else \'\'\n\nclass CliContext(object):\n    """""" Context of the command-line interface passed between the various sub-commands.\n\n    Pools all options, processing the main program options as they come in (e.g. those\n    not passed to a command), followed by parsing each sub-command\'s options, preparing\n    the actions to be executed in the process_input() method, which is called after the\n    whole command line has been processed (successfully nor not).\n    \n    This class and the cli.__init__ module make up the bulk of the PySceneDetect\n    application logic for the command line.  \n    """"""\n    def __init__(self):\n        # Properties for main scenedetect command options (-i, -s, etc...) and CliContext logic.\n        self.options_processed = False          # True when CLI option parsing is complete.\n        self.scene_manager = None               # detect-content, detect-threshold, etc...\n        self.video_manager = None               # -i/--input, -d/--downscale\n        self.base_timecode = None               # -f/--framerate\n        self.start_frame = 0                    # time -s/--start\n        self.stats_manager = StatsManager()     # -s/--stats\n        self.stats_file_path = None             # -s/--stats\n        self.output_directory = None            # -o/--output\n        self.quiet_mode = False                 # -q/--quiet or -v/--verbosity quiet\n        self.frame_skip = 0                     # -fs/--frame-skip\n        # Properties for save-images command.\n        self.save_images = False                # save-images command\n        self.image_extension = \'jpg\'            # save-images -j/--jpeg, -w/--webp, -p/--png\n        self.image_directory = None             # save-images -o/--output\n        self.image_param = None                 # save-images -q/--quality if -j/-w, -c/--compression if -p\n        self.image_name_format = \'$VIDEO_NAME-Scene-$SCENE_NUMBER-$IMAGE_NUMBER\' # save-images -f/--name-format\n        self.num_images = 2                     # save-images -n/--num-images\n        self.imwrite_params = get_cv2_imwrite_params()\n        # Properties for split-video command.\n        self.split_video = False                # split-video command\n        self.split_mkvmerge = False             # split-video -c/--copy\n        self.split_args = None                  # split-video -a/--override-args\n        self.split_directory = None             # split-video -o/--output\n        self.split_name_format = \'$VIDEO_NAME-Scene-$SCENE_NUMBER\'  # split-video -f/--filename\n        self.split_quiet = False                # split-video -q/--quiet\n        # Properties for list-scenes command.\n        self.list_scenes = False                # list-scenes command\n        self.print_scene_list = False           # list-scenes --quiet/-q\n        self.scene_list_directory = None        # list-scenes -o/--output\n        self.scene_list_name_format = None      # list-scenes -f/--filename\n        self.scene_list_output = False          # list-scenes -n/--no-output\n\n        \n\n    def cleanup(self):\n        try:\n            logging.debug(\'Cleaning up...\\n\\n\')\n        finally:\n            if self.video_manager is not None:\n                self.video_manager.release()\n\n\n    def _generate_images(self, scene_list, video_name,\n                         image_name_template = \'$VIDEO_NAME-Scene-$SCENE_NUMBER-$IMAGE_NUMBER\',\n                         output_dir=None):\n        # type: (List[Tuple[FrameTimecode, FrameTimecode]) -> None\n\n        if self.num_images != 2:\n            raise NotImplementedError()\n\n        if not scene_list:\n            return\n        if not self.options_processed:\n            return\n        self.check_input_open()\n\n        imwrite_param = []\n        if self.image_param is not None:\n            imwrite_param = [self.imwrite_params[self.image_extension], self.image_param]\n        click.echo(imwrite_param)\n\n        # Reset video manager and downscale factor.\n        self.video_manager.release()\n        self.video_manager.reset()\n        self.video_manager.set_downscale_factor(1)\n        self.video_manager.start()\n\n        filename_template = Template(image_name_template)\n\n        # Setup flags and init progress bar if available.\n        completed = True\n        logging.info(\'Generating output images (%d per scene)...\', self.num_images)\n        progress_bar = None\n        if tqdm and not self.quiet_mode:\n            progress_bar = tqdm(\n                total=len(scene_list) * 2, unit=\'images\')\n\n        \n        scene_num_format = \'%0\'\n        scene_num_format += str(max(3, math.floor(math.log(len(scene_list), 10)) + 1)) + \'d\'\n        image_num_format = \'%0\'\n        image_num_format += str(math.floor(math.log(self.num_images, 10)) + 2) + \'d\'\n\n\n        for i, (start_time, end_time) in enumerate(scene_list):\n            # TODO: Interpolate timecodes if num_frames_per_scene != 2.\n            self.video_manager.seek(start_time)\n            self.video_manager.grab()\n            ret_val, frame_im = self.video_manager.retrieve()\n            if ret_val:\n                cv2.imwrite(\n                    self.get_output_file_path(\n                        \'%s.%s\' % (filename_template.safe_substitute(\n                                VIDEO_NAME=video_name,\n                                SCENE_NUMBER=scene_num_format % (i+1),\n                                IMAGE_NUMBER=image_num_format % (1)\n                        ), self.image_extension),\n                        output_dir=output_dir), frame_im, imwrite_param)\n            else:\n                completed = False\n                break\n            if progress_bar:\n                progress_bar.update(1)\n            self.video_manager.seek(end_time - 1)\n            self.video_manager.grab()\n            ret_val, frame_im = self.video_manager.retrieve()\n            if ret_val:\n                cv2.imwrite(\n                    self.get_output_file_path(\n                        \'%s.%s\' % (filename_template.safe_substitute(\n                                VIDEO_NAME=video_name,\n                                SCENE_NUMBER=\'%03d\' % (i+1),\n                                IMAGE_NUMBER=\'%02d\' % (2)\n                        ), self.image_extension),\n                        output_dir=output_dir), frame_im, imwrite_param)\n            else:\n                completed = False\n                break\n            if progress_bar:\n                progress_bar.update(1)\n                \n        if not completed:\n            logging.error(\'Could not generate all output images.\')\n\n\n    def get_output_file_path(self, file_path, output_dir=None):\n        # type: (str, Optional[str]) -> str\n        \'\'\'Returns path to output file_path passed as argument, and creates directories if necessary.\'\'\'\n        if file_path is None:\n            return None\n        output_dir = self.output_directory if output_dir is None else output_dir\n        # If an output directory is defined and the file path is a relative path, open\n        # the file handle in the output directory instead of the working directory.\n        if output_dir is not None and not os.path.isabs(file_path):\n            file_path = os.path.join(output_dir, file_path)\n        # Now that file_path is an absolute path, let\'s make sure all the directories\n        # exist for us to start writing files there.\n        os.makedirs(os.path.split(os.path.abspath(file_path))[0], exist_ok=True)\n        return file_path\n\n    def _open_stats_file(self):\n        \n        if self.stats_file_path is not None:\n            if os.path.exists(self.stats_file_path):\n                logging.info(\'Loading frame metrics from stats file: %s\',\n                    os.path.basename(self.stats_file_path))\n                try:\n                    with open(self.stats_file_path, \'rt\') as stats_file:\n                        self.stats_manager.load_from_csv(stats_file, self.base_timecode)\n                except StatsFileCorrupt:\n                    error_strs = [\n                        \'Could not load stats file.\', \'Failed to parse stats file:\',\n                        \'Could not load frame metrics from stats file - file is corrupt or not a\'\n                        \' valid PySceneDetect stats file. If the file exists, ensure that it is\'\n                        \' a valid stats file CSV, otherwise delete it and run PySceneDetect again\'\n                        \' to re-generate the stats file.\']\n                    logging.error(\'\\n\'.join(error_strs))\n                    raise click.BadParameter(\'\\n  Could not load given stats file, see above output for details.\', param_hint=\'input stats file\')\n                except StatsFileFramerateMismatch as ex:\n                    error_strs = [\n                        \'could not load stats file.\', \'Failed to parse stats file:\',\n                        \'Framerate differs between stats file (%.2f FPS) and input\'\n                        \' video%s (%.2f FPS)\' % (\n                            ex.stats_file_fps,\n                            \'s\' if self.video_manager.get_num_videos() > 1 else \'\',\n                            ex.base_timecode_fps),\n                        \'Ensure the correct stats file path was given, or delete and re-generate\'\n                        \' the stats file.\']\n                    logging.error(\'\\n\'.join(error_strs))\n                    raise click.BadParameter(\n                        \'framerate differs between given stats file and input video(s).\',\n                        param_hint=\'input stats file\')\n\n\n    def process_input(self):\n        # type: () -> None\n        """""" Process Input: Processes input video(s) and generates output as per CLI commands.\n        \n        Run after all command line options/sub-commands have been parsed.\n        """"""\n        logging.debug(\'Processing input...\')\n        if not self.options_processed:\n            logging.debug(\'Skipping processing, CLI options were not parsed successfully.\')\n            return\n        self.check_input_open()\n        if not self.scene_manager.get_num_detectors() > 0:\n            logging.error(\'No scene detectors specified (detect-content, detect-threshold, etc...),\\n\'\n                          \'  or failed to process all command line arguments.\')\n            return\n\n        # Handle scene detection commands (detect-content, detect-threshold, etc...).\n        self.video_manager.start()\n        base_timecode = self.video_manager.get_base_timecode()\n\n        start_time = time.time()\n        logging.info(\'Detecting scenes...\')\n\n        num_frames = self.scene_manager.detect_scenes(\n            frame_source=self.video_manager, start_time=self.start_frame,\n            frame_skip=self.frame_skip, show_progress=not self.quiet_mode)\n\n        duration = time.time() - start_time\n        logging.info(\'Processed %d frames in %.1f seconds (average %.2f FPS).\',\n                     num_frames, duration, float(num_frames)/duration)\n\n        # Handle -s/--statsfile option.\n        if self.stats_file_path is not None:\n            if self.stats_manager.is_save_required():\n                with open(self.stats_file_path, \'wt\') as stats_file:\n                    logging.info(\'Saving frame metrics to stats file: %s\',\n                                 os.path.basename(self.stats_file_path))\n                    self.stats_manager.save_to_csv(\n                        stats_file, base_timecode)\n            else:\n                logging.debug(\'No frame metrics updated, skipping update of the stats file.\')\n        \n        # Get list of detected cuts and scenes from the SceneManager to generate the required output\n        # files with based on the given commands (list-scenes, split-video, save-images, etc...).\n        cut_list = self.scene_manager.get_cut_list(base_timecode)\n        scene_list = self.scene_manager.get_scene_list(base_timecode)\n        video_paths = self.video_manager.get_video_paths()\n        video_name = os.path.basename(video_paths[0])\n        if video_name.rfind(\'.\') >= 0:\n            video_name = video_name[:video_name.rfind(\'.\')]\n        \n        # Ensure we don\'t divide by zero.\n        if scene_list:\n            logging.info(\'Detected %d scenes, average shot length %.1f seconds.\',\n                        len(scene_list),\n                        sum([(end_time - start_time).get_seconds()\n                            for start_time, end_time in scene_list]) / float(len(scene_list)))\n        else:\n            logging.info(\'No scenes detected.\')\n\n        # Handle list-scenes command.\n        if self.scene_list_output:\n            scene_list_filename = Template(self.scene_list_name_format).safe_substitute(\n                VIDEO_NAME=video_name)\n            if not scene_list_filename.lower().endswith(\'.csv\'):\n                scene_list_filename += \'.csv\'\n            scene_list_path = self.get_output_file_path(scene_list_filename, self.scene_list_directory)\n            logging.info(\'Writing scene list to CSV file:\\n  %s\', scene_list_path)\n            with open(scene_list_path, \'wt\') as scene_list_file:\n                write_scene_list(scene_list_file, scene_list, cut_list)\n        # Handle `list-scenes`.\n        if self.print_scene_list:\n            logging.info(""""""Scene List:\n-----------------------------------------------------------------------\n | Scene # | Start Frame |  Start Time  |  End Frame  |   End Time   |\n-----------------------------------------------------------------------\n%s\n-----------------------------------------------------------------------\n"""""", \'\\n\'.join(\n    [\' |  %5d  | %11d | %s | %11d | %s |\' % (\n        i+1,\n        start_time.get_frames(), start_time.get_timecode(),\n        end_time.get_frames(), end_time.get_timecode())\n     for i, (start_time, end_time) in enumerate(scene_list)]))\n\n\n        if cut_list:\n            logging.info(\'Comma-separated timecode list:\\n  %s\',\n                         \',\'.join([cut.get_timecode() for cut in cut_list]))\n\n        # Handle save-images command.\n        if self.save_images:\n            self._generate_images(scene_list=scene_list, video_name=video_name,\n                                  image_name_template=self.image_name_format,\n                                  output_dir=self.image_directory)\n\n        # Handle split-video command.\n        if self.split_video:\n            # Add proper extension to filename template if required.\n            dot_pos = self.split_name_format.rfind(\'.\')\n            if self.split_mkvmerge and not self.split_name_format.endswith(\'.mkv\'):\n                self.split_name_format += \'.mkv\'\n            # Don\'t add if we find an extension between 2 and 4 characters\n            elif not (dot_pos >= 0) or (\n                    dot_pos >= 0 and not\n                    ((len(self.split_name_format) - (dot_pos+1) <= 4 >= 2))):\n                self.split_name_format += \'.mp4\'\n                \n            output_file_prefix = self.get_output_file_path(\n                self.split_name_format, output_dir=self.split_directory)\n            mkvmerge_available = is_mkvmerge_available()\n            ffmpeg_available = is_ffmpeg_available()\n            if mkvmerge_available and (self.split_mkvmerge or not ffmpeg_available):\n                if not (self.split_mkvmerge):\n                    logging.warning(\'ffmpeg not found, falling back to fast copy mode (split-video -c/--copy).\')\n                logging.info(\'Splitting input video%s using mkvmerge, output path template:\\n  %s\',\n                             \'s\' if len(video_paths) > 1 else \'\', output_file_prefix)\n                split_video_mkvmerge(video_paths, scene_list, output_file_prefix, video_name,\n                                     suppress_output=self.quiet_mode or self.split_quiet)\n            elif ffmpeg_available:\n                if self.split_mkvmerge:\n                    logging.warning(\'mkvmerge not found, falling back to normal split mode (split-video).\')\n                logging.info(\'Splitting input video%s using ffmpeg, output path template:\\n  %s\',\n                    \'s\' if len(video_paths) > 1 else \'\', output_file_prefix)\n                split_video_ffmpeg(video_paths, scene_list, output_file_prefix,\n                                   video_name, arg_override=self.split_args,\n                                   hide_progress=self.quiet_mode,\n                                   suppress_output=self.quiet_mode or self.split_quiet)\n            else:\n                if not (mkvmerge_available or ffmpeg_available):\n                    error_strs = [""ffmpeg/mkvmerge is required for split-video [-c/--copy].""]\n                else:\n                    error_strs = [\n                        ""{EXTERN_TOOL} is required for split-video{EXTRA_ARGS}."".format(\n                            EXTERN_TOOL=\'mkvmerge\' if self.split_mkvmerge else \'ffmpeg\',\n                            EXTRA_ARGS=\' -c/--copy\' if self.split_mkvmerge else \'\')]\n                error_strs += [""Install one of the above tools to enable the split-video command.""]\n                error_str = \'\\n\'.join(error_strs)\n                logging.debug(error_str)\n                raise click.BadParameter(error_str, param_hint=\'split-video\')\n                \n            logging.info(\'Video splitting completed, individual scenes written to disk.\')\n\n\n\n    def check_input_open(self):\n        if self.video_manager is None or not self.video_manager.get_num_videos() > 0:\n            error_strs = [""No input video(s) specified."",\n                          ""Make sure \'--input VIDEO\' is specified at the start of the command.""]\n            error_str = \'\\n\'.join(error_strs)\n            logging.debug(error_str)\n            raise click.BadParameter(error_str, param_hint=\'input video\')\n\n\n    def add_detector(self, detector):\n        self.check_input_open()\n        options_processed_orig = self.options_processed\n        self.options_processed = False\n        try:\n            self.scene_manager.add_detector(detector)\n        except scenedetect.stats_manager.FrameMetricRegistered:\n            raise click.BadParameter(message=\'Cannot specify detection algorithm twice.\',\n                                     param_hint=detector.cli_name)\n        self.options_processed = options_processed_orig\n\n\n    def _init_video_manager(self, input_list, framerate, downscale):\n\n        self.base_timecode = None\n\n        logging.debug(\'Initializing VideoManager.\')\n        video_manager_initialized = False\n        try:\n            self.video_manager = VideoManager(\n                video_files=input_list, framerate=framerate, logger=logging)\n            video_manager_initialized = True\n            self.base_timecode = self.video_manager.get_base_timecode()\n            self.video_manager.set_downscale_factor(downscale)\n        except VideoOpenFailure as ex:\n            error_strs = [\'could not open video%s.\' % get_plural(ex.file_list),\n                \'Failed to open the following video file%s:\' % get_plural(ex.file_list)]\n            error_strs += [\'  %s\' % file_name[0] for file_name in ex.file_list]\n            dll_okay, dll_name = check_opencv_ffmpeg_dll()\n            if not dll_okay:\n                error_strs += [\n                    \'Error: OpenCV dependency %s not found.\' % dll_name,\n                    \'Ensure that you installed the Python OpenCV module, and that the\',\n                    \'%s file can be found to enable video support.\' % dll_name]\n            logging.debug(\'\\n\'.join(error_strs[1:]))\n            if not dll_okay:\n                click.echo(click.style(\n                    \'\\nOpenCV dependency missing, video input/decoding not available.\\n\', fg=\'red\'))\n            raise click.BadParameter(\'\\n\'.join(error_strs), param_hint=\'input video\')\n        except VideoFramerateUnavailable as ex:\n            error_strs = [\'could not get framerate from video(s)\',\n                          \'Failed to obtain framerate for video file %s.\' % ex.file_name]\n            error_strs.append(\'Specify framerate manually with the -f / --framerate option.\')\n            logging.debug(\'\\n\'.join(error_strs))\n            raise click.BadParameter(\'\\n\'.join(error_strs), param_hint=\'input video\')\n        except VideoParameterMismatch as ex:\n            error_strs = [\'video parameters do not match.\', \'List of mismatched parameters:\']\n            for param in ex.file_list:\n                if param[0] == cv2.CAP_PROP_FPS:\n                    param_name = \'FPS\'\n                if param[0] == cv2.CAP_PROP_FRAME_WIDTH:\n                    param_name = \'Frame width\'\n                if param[0] == cv2.CAP_PROP_FRAME_HEIGHT:\n                    param_name = \'Frame height\'\n                error_strs.append(\'  %s mismatch in video %s (got %.2f, expected %.2f)\' % (\n                    param_name, param[3], param[1], param[2]))\n            error_strs.append(\n                \'Multiple videos may only be specified if they have the same framerate and\'\n                \' resolution. -f / --framerate may be specified to override the framerate.\')\n            logging.debug(\'\\n\'.join(error_strs))\n            raise click.BadParameter(\'\\n\'.join(error_strs), param_hint=\'input videos\')\n        except InvalidDownscaleFactor as ex:\n            error_strs = [\'Downscale value is not > 0.\', str(ex)]\n            logging.debug(\'\\n\'.join(error_strs))\n            raise click.BadParameter(\'\\n\'.join(error_strs), param_hint=\'downscale factor\')\n        return video_manager_initialized\n\n\n    def parse_options(self, input_list, framerate, stats_file, downscale, frame_skip):\n        """""" Parse Options: Parses all CLI arguments passed to scenedetect [options]. """"""\n        if not input_list:\n            return\n\n        logging.debug(\'Parsing program options.\')\n\n        self.frame_skip = frame_skip\n\n        video_manager_initialized = self._init_video_manager(\n            input_list=input_list, framerate=framerate, downscale=downscale)\n\n        # Ensure VideoManager is initialized, and open StatsManager if --stats is specified.\n        if not video_manager_initialized:\n            self.video_manager = None\n            logging.info(\'VideoManager not initialized.\')\n        else:\n            logging.debug(\'VideoManager initialized.\')\n            self.stats_file_path = self.get_output_file_path(stats_file)\n            if self.stats_file_path is not None:\n                self.check_input_open()\n                self._open_stats_file()\n\n        # Init SceneManager.\n        self.scene_manager = SceneManager(self.stats_manager)\n\n        self.options_processed = True\n\n                \n    def time_command(self, start=None, duration=None, end=None):\n        \n        logging.debug(\'Setting video time:\\n    start: %s, duration: %s, end: %s\',\n            start, duration, end)\n\n        self.check_input_open()\n\n        if duration is not None and end is not None:\n            raise click.BadParameter(\n                \'Only one of --duration/-d or --end/-e can be specified, not both.\',\n                param_hint=\'time\')\n\n        self.video_manager.set_duration(start_time=start, duration=duration, end_time=end)\n        \n        if start is not None:\n            self.start_frame = start.get_frames()\n\n\n    def list_scenes_command(self, output_path, filename_format, no_output_mode, quiet_mode):\n        self.check_input_open()\n        \n        self.print_scene_list = True if quiet_mode is None else not quiet_mode\n        self.scene_list_directory = output_path\n        self.scene_list_name_format = filename_format\n        if self.scene_list_name_format is not None:\n            logging.info(\'Scene list CSV file name format:\\n  %s\', self.scene_list_name_format)\n        self.scene_list_output = False if no_output_mode else True\n        if self.scene_list_directory is not None:\n            logging.info(\'Scene list output directory set:\\n  %s\', self.scene_list_directory)\n\n    def save_images_command(self, num_images, output, name_format, jpeg, webp, quality, png, compression):\n        self.check_input_open()\n\n        num_flags = sum([True if flag else False for flag in [jpeg, webp, png]])\n        if num_flags <= 1:\n            \n            # Ensure the format exists.\n            extension = \'jpg\'   # Default is jpg.\n            if png:\n                extension = \'png\'\n            elif webp: \n                extension = \'webp\'\n            if not extension in self.imwrite_params or self.imwrite_params[extension] is None:\n                error_strs = [\n                    \'Image encoder type %s not supported.\' % extension.upper(),\n                    \'The specified encoder type could not be found in the current OpenCV module.\',\n                    \'To enable this output format, please update the installed version of OpenCV.\',\n                    \'If you build OpenCV, ensure the the proper dependencies are enabled. \']\n                logging.debug(\'\\n\'.join(error_strs))\n                raise click.BadParameter(\'\\n\'.join(error_strs), param_hint=\'save-images\')\n\n            self.save_images = True\n            self.image_directory = output\n            self.image_extension = extension\n            self.image_param = compression if png else quality\n            self.image_name_format = name_format\n            self.num_images = num_images\n            \n            image_type = \'JPEG\' if self.image_extension == \'jpg\' else self.image_extension.upper()\n            image_param_type = \'\'\n            if self.image_param:\n                image_param_type = \'Compression\' if image_type == \'PNG\' else \'Quality\'\n                image_param_type = \' [%s: %d]\' % (image_param_type, self.image_param)\n            logging.info(\'Image output format set: %s%s\', image_type, image_param_type)\n            if self.image_directory is not None:\n                logging.info(\'Image output directory set:\\n  %s\',\n                             os.path.abspath(self.image_directory))\n\n        else:\n            self.options_processed = False\n            logging.error(\'Multiple image type flags set for save-images command.\')\n            raise click.BadParameter(\n                \'Only one image type (JPG/PNG/WEBP) can be specified.\', param_hint=\'save-images\')\n\n'"
scenedetect/detectors/__init__.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n\n"""""" PySceneDetect scenedetect.detectors Module\n\nThis module contains implementations of scene detection algorithms by inhereting\nfrom the base SceneDetector class (in scenedetect.scene_detector) and implementing\nthe required methods. This allows implementation of other generic algorithms as\nwell as custom scenario-specific algorithms.\n\nIndividual detectors are imported in this file for easy access from other\nmodules (i.e. from scenedetect.detectors import ContentDetector).\n""""""\n\n# PySceneDetect Detection Algorithm Imports\nfrom scenedetect.detectors.content_detector import ContentDetector\nfrom scenedetect.detectors.threshold_detector import ThresholdDetector\n\n# Algorithms being ported:\n#from scenedetect.detectors.motion_detector import MotionDetector\n\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#                                                                             #\n#          Detection Methods & Algorithms Planned or In Development           #\n#                                                                             #\n#\n# class EdgeDetector(SceneDetector):\n#    """"""Detects fast cuts/slow fades by using edge detection on adjacent frames.\n#\n#    Computes the difference image between subsequent frames after applying a\n#    Sobel filter (can also use a high-pass or other edge detection filters) and\n#    comparing the result with a set threshold (may be found using -stats mode).\n#    Detects both fast cuts and slow fades, although some parameters may need to\n#    be modified for accurate slow fade detection.\n#    """"""\n#    def __init__(self):\n#        super(EdgeDetector, self).__init__()\n#                                                                             #\n#                                                                             #\n# class DissolveDetector(SceneDetector):\n#    """"""Detects slow fades (dissolve cuts) via changes in the HSV colour space.\n#\n#    Detects slow fades only; to detect fast cuts between content scenes, the\n#    ContentDetector should be used instead.\n#    """"""\n#\n#    def __init__(self):\n#        super(DissolveDetector, self).__init__()\n#                                                                             #\n#                                                                             #\n# class HistogramDetector(SceneDetector):\n#    """"""Detects fast cuts via histogram changes between sequential frames.\n#\n#    Detects fast cuts between content (using histogram deltas, much like the\n#    ContentDetector uses HSV colourspace deltas), as well as both fades and\n#    cuts to/from black (using a threshold, much like the ThresholdDetector).\n#    """"""\n#\n#    def __init__(self):\n#        super(DissolveDetector, self).__init__()\n#                                                                             #\n#                                                                             #\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n\n'"
scenedetect/detectors/content_detector.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.detectors.content_detector Module\n\nThis module implements the ContentDetector, which compares the difference\nin content between adjacent frames against a set threshold/score, which if\nexceeded, triggers a scene cut.\n""""""\n\n# Third-Party Library Imports\nimport numpy\nimport cv2\n\n# PySceneDetect Library Imports\nfrom scenedetect.scene_detector import SceneDetector\n\n\nclass ContentDetector(SceneDetector):\n    """"""Detects fast cuts using changes in colour and intensity between frames.\n\n    Since the difference between frames is used, unlike the ThresholdDetector,\n    only fast cuts are detected with this method.  To detect slow fades between\n    content scenes still using HSV information, use the DissolveDetector.\n    """"""\n\n    def __init__(self, threshold = 30.0, min_scene_len = 15):\n        super(ContentDetector, self).__init__()\n        self.threshold = threshold\n        self.min_scene_len = min_scene_len  # minimum length of any given scene, in frames\n        self.last_frame = None\n        self.last_scene_cut = None\n        self.last_hsv = None\n        self._metric_keys = [\'content_val\', \'delta_hue\', \'delta_sat\', \'delta_lum\']\n        self.cli_name = \'detect-content\'\n\n    def process_frame(self, frame_num, frame_img):\n        # type: (int, numpy.ndarray) -> bool, Optional[int]\n        """"""\n\n        Returns:\n        \n        """"""\n        # Similar to ThresholdDetector, but using the HSV colour space DIFFERENCE instead\n        # of single-frame RGB/grayscale intensity (thus cannot detect slow fades with this method).\n        cut_list = []\n        metric_keys = self._metric_keys\n        _unused = \'\'\n\n        if self.last_frame is not None:\n            # Change in average of HSV (hsv), (h)ue only, (s)aturation only, (l)uminance only.\n            delta_hsv_avg, delta_h, delta_s, delta_v = 0.0, 0.0, 0.0, 0.0\n            \n            if (self.stats_manager is not None and\n                self.stats_manager.metrics_exist(frame_num, metric_keys)):\n                delta_hsv_avg, delta_h, delta_s, delta_v = self.stats_manager.get_metrics(\n                    frame_num, metric_keys)\n\n            else:\n                num_pixels = frame_img.shape[0] * frame_img.shape[1]\n                curr_hsv = cv2.split(cv2.cvtColor(frame_img, cv2.COLOR_BGR2HSV))\n                last_hsv = self.last_hsv\n                if not last_hsv:\n                    last_hsv = cv2.split(cv2.cvtColor(self.last_frame, cv2.COLOR_BGR2HSV))\n\n                delta_hsv = [0, 0, 0, 0]\n                for i in range(3):\n                    num_pixels = curr_hsv[i].shape[0] * curr_hsv[i].shape[1]\n                    curr_hsv[i] = curr_hsv[i].astype(numpy.int32)\n                    last_hsv[i] = last_hsv[i].astype(numpy.int32)\n                    delta_hsv[i] = numpy.sum(numpy.abs(curr_hsv[i] - last_hsv[i])) / float(num_pixels)\n                delta_hsv[3] = sum(delta_hsv[0:3]) / 3.0\n                delta_h, delta_s, delta_v, delta_hsv_avg = delta_hsv\n\n                if self.stats_manager is not None:\n                    self.stats_manager.set_metrics(frame_num, {\n                        metric_keys[0]: delta_hsv_avg, metric_keys[1]: delta_h,\n                        metric_keys[2]: delta_s, metric_keys[3]: delta_v})\n\n                self.last_hsv = curr_hsv\n\n            if delta_hsv_avg >= self.threshold:\n                if self.last_scene_cut is None or (\n                    (frame_num - self.last_scene_cut) >= self.min_scene_len):\n                    cut_list.append(frame_num)\n                    self.last_scene_cut = frame_num\n\n            if self.last_frame is not None and self.last_frame is not _unused:\n                del self.last_frame\n                \n        # If we have the next frame computed, don\'t copy the current frame\n        # into last_frame since we won\'t use it on the next call anyways.\n        if (self.stats_manager is not None and\n            self.stats_manager.metrics_exist(frame_num+1, metric_keys)):\n            self.last_frame = _unused\n        else:\n            self.last_frame = frame_img.copy()\n\n        return cut_list\n\n\n    #def post_process(self, frame_num):\n    #    """""" Not used for ContentDetector, as unlike ThresholdDetector, cuts\n    #    are always written as they are found.\n    #    """"""\n    #    return []\n\n'"
scenedetect/detectors/motion_detector.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses Numpy, OpenCV, click, pytest, mkvmerge, and ffmpeg. See\n# the included LICENSE-* files, or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n# Third-Party Library Imports\nimport cv2\nimport numpy\n\n\nfrom scenedetect.scene_detector import SceneDetector\n\nclass MotionDetector(SceneDetector):\n    """"""Detects motion events in scenes containing a static background.\n\n    Uses background subtraction followed by noise removal (via morphological\n    opening) to generate a frame score compared against the set threshold.\n\n    Attributes:\n        threshold:  floating point value compared to each frame\'s score, which\n            represents average intensity change per pixel (lower values are\n            more sensitive to motion changes).  Default 0.5, must be > 0.0.\n        num_frames_post_scene:  Number of frames to include in each motion\n            event after the frame score falls below the threshold, adding any\n            subsequent motion events to the same scene.\n        kernel_size:  Size of morphological opening kernel for noise removal.\n            Setting to -1 (default) will auto-compute based on video resolution\n            (typically 3 for SD, 5-7 for HD). Must be an odd integer > 1.\n    """"""\n    def __init__(self, threshold = 0.50, num_frames_post_scene = 30,\n                 kernel_size = -1):\n        """"""Initializes motion-based scene detector object.""""""\n        # Requires porting to v0.5 API.\n        raise NotImplementedError()\n\n        self.threshold = float(threshold)\n        self.num_frames_post_scene = int(num_frames_post_scene)\n\n        self.kernel_size = int(kernel_size)\n        if self.kernel_size < 0:\n            # Set kernel size when process_frame first runs based on\n            # video resolution (480p = 3x3, 720p = 5x5, 1080p = 7x7).\n            pass\n\n        self.bg_subtractor = cv2.createBackgroundSubtractorMOG2( \n            detectShadows = False )\n\n        self.last_frame_score = 0.0\n\n        self.in_motion_event = False\n        self.first_motion_frame_index = -1\n        self.last_motion_frame_index = -1\n        self.cli_name = \'detect-motion\'\n        return\n\n    def process_frame(self, frame_num, frame_img, frame_metrics, scene_list):\n\n        # Value to return indiciating if a scene cut was found or not.\n        cut_detected = False\n\n        frame_grayscale = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        masked_frame = self.bg_subtractor.apply(frame_grayscale)\n\n        kernel = numpy.ones((self.kernel_size, self.kernel_size), numpy.uint8)\n        filtered_frame = cv2.morphologyEx(fgmask, cv2.MORPH_OPEN, kernel)\n\n        frame_score = numpy.sum(filtered_frame) / float( \n            filtered_frame.shape[0] * filtered_frame.shape[1] )\n\n        return cut_detected\n\n    def post_process(self, scene_list, frame_num):\n        """"""Writes the last scene if the video ends while in a motion event.\n        """"""\n\n        # If the last fade detected was a fade out, we add a corresponding new\n        # scene break to indicate the end of the scene.  This is only done for\n        # fade-outs, as a scene cut is already added when a fade-in is found.\n\n        if self.in_motion_event:\n            # Write new scene based on first and last motion event frames.\n            pass\n        return self.in_motion_event\n\n\n'"
scenedetect/detectors/threshold_detector.py,0,"b'# -*- coding: utf-8 -*-\n#\n#         PySceneDetect: Python-Based Video Scene Detector\n#   ---------------------------------------------------------------\n#     [  Site: http://www.bcastell.com/projects/pyscenedetect/   ]\n#     [  Github: https://github.com/Breakthrough/PySceneDetect/  ]\n#     [  Documentation: http://pyscenedetect.readthedocs.org/    ]\n#\n# Copyright (C) 2012-2018 Brandon Castellano <http://www.bcastell.com>.\n#\n# PySceneDetect is licensed under the BSD 2-Clause License; see the included\n# LICENSE file, or visit one of the following pages for details:\n#  - https://github.com/Breakthrough/PySceneDetect/\n#  - http://www.bcastell.com/projects/pyscenedetect/\n#\n# This software uses the Numpy, OpenCV, click, tqdm, and pytest libraries.\n# See the included LICENSE files or one of the above URLs for more information.\n#\n# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n"""""" PySceneDetect scenedetect.detectors.threshold_detector Module\n\nThis module implements the ThresholdDetector, which uses a set intensity level\nto detect scene cuts when the average frame intensity passes the set threshold.\n""""""\n\n# Third-Party Library Imports\nimport numpy\n\n# PySceneDetect Library Imports\nfrom scenedetect.scene_detector import SceneDetector\n\n\nclass ThresholdDetector(SceneDetector):\n    """"""Detects fast cuts/slow fades in from and out to a given threshold level.\n\n    Detects both fast cuts and slow fades so long as an appropriate threshold\n    is chosen (especially taking into account the minimum grey/black level).\n\n    Attributes:\n        threshold:  8-bit intensity value that each pixel value (R, G, and B)\n            must be <= to in order to trigger a fade in/out.\n        min_percent:  Float between 0.0 and 1.0 which represents the minimum\n            percent of pixels in a frame that must meet the threshold value in\n            order to trigger a fade in/out.\n        min_scene_len:  Unsigned integer greater than 0 representing the\n            minimum length, in frames, of a scene (or subsequent scene cut).\n        fade_bias:  Float between -1.0 and +1.0 representing the percentage of\n            timecode skew for the start of a scene (-1.0 causing a cut at the\n            fade-to-black, 0.0 in the middle, and +1.0 causing the cut to be\n            right at the position where the threshold is passed).\n        add_final_scene:  Boolean indicating if the video ends on a fade-out to\n            generate an additional scene at this timecode.\n        block_size:  Number of rows in the image to sum per iteration (can be\n            tuned to increase performance in some cases; should be computed\n            programmatically in the future).\n    """"""\n    def __init__(self, threshold = 12, min_percent = 0.95, min_scene_len = 15,\n                 fade_bias = 0.0, add_final_scene = False, block_size = 8):\n        """"""Initializes threshold-based scene detector object.""""""\n\n        super(ThresholdDetector, self).__init__()\n        self.threshold = int(threshold)\n        self.fade_bias = fade_bias\n        self.min_percent = min_percent\n        self.min_scene_len = min_scene_len\n        self.last_frame_avg = None\n        self.last_scene_cut = None\n        # Whether to add an additional scene or not when ending on a fade out\n        # (as cuts are only added on fade ins; see post_process() for details).\n        self.add_final_scene = add_final_scene\n        # Where the last fade (threshold crossing) was detected.\n        self.last_fade = { \n            \'frame\': 0,         # frame number where the last detected fade is\n            \'type\': None        # type of fade, can be either \'in\' or \'out\'\n          }\n        self.block_size = block_size\n        self._metric_keys = [\'delta_rgb\']\n        self.cli_name = \'detect-threshold\'\n\n    def compute_frame_average(self, frame):\n        """"""Computes the average pixel value/intensity over the whole frame.\n\n        The value is computed by adding up the 8-bit R, G, and B values for\n        each pixel, and dividing by the number of pixels multiplied by 3.\n\n        Returns:\n            Floating point value representing average pixel intensity.\n        """"""\n        num_pixel_values = float(\n            frame.shape[0] * frame.shape[1] * frame.shape[2])\n        avg_pixel_value = numpy.sum(frame[:,:,:]) / num_pixel_values\n        return avg_pixel_value\n\n    def frame_under_threshold(self, frame):\n        """"""Check if the frame is below (true) or above (false) the threshold.\n\n        Instead of using the average, we check all pixel values (R, G, and B)\n        meet the given threshold (within the minimum percent).  This ensures\n        that the threshold is not exceeded while maintaining some tolerance for\n        compression and noise.\n\n        This is the algorithm used for absolute mode of the threshold detector.\n\n        Returns:\n            Boolean, True if the number of pixels whose R, G, and B values are\n            all <= the threshold is within min_percent pixels, or False if not.\n        """"""\n        # First we compute the minimum number of pixels that need to meet the\n        # threshold. Internally, we check for values greater than the threshold\n        # as it\'s more likely that a given frame contains actual content. This\n        # is done in blocks of rows, so in many cases we only have to check a\n        # small portion of the frame instead of inspecting every single pixel.\n        num_pixel_values = float(frame.shape[0] * frame.shape[1] * frame.shape[2])\n        min_pixels = int(num_pixel_values * (1.0 - self.min_percent))\n\n        curr_frame_amt = 0\n        curr_frame_row = 0\n\n        while curr_frame_row < frame.shape[0]:\n            # Add and total the number of individual pixel values (R, G, and B)\n            # in the current row block that exceed the threshold. \n            curr_frame_amt += int(\n                numpy.sum(frame[curr_frame_row : \n                    curr_frame_row + self.block_size,:,:] > self.threshold))\n            # If we\'ve already exceeded the most pixels allowed to be above the\n            # threshold, we can skip processing the rest of the pixels. \n            if curr_frame_amt > min_pixels:\n                return False\n            curr_frame_row += self.block_size\n        return True\n\n    def process_frame(self, frame_num, frame_img):\n        # Compare the # of pixels under threshold in current_frame & last_frame.\n        # If absolute value of pixel intensity delta is above the threshold,\n        # then we trigger a new scene cut/break.\n\n        # List of cuts to return.\n        cut_found = False\n        cut_list = []\n\n        # The metric used here to detect scene breaks is the percent of pixels\n        # less than or equal to the threshold; however, since this differs on\n        # user-supplied values, we supply the average pixel intensity as this\n        # frame metric instead (to assist with manually selecting a threshold).\n        frame_amt = 0.0\n        frame_avg = 0.0\n\n        if (self.stats_manager is not None and\n            self.stats_manager.metrics_exist(frame_num, self._metric_keys)):\n            frame_avg = self.stats_manager.get_metrics(frame_num, self._metric_keys)[0]\n        else:\n            frame_avg = self.compute_frame_average(frame_img)\n            if self.stats_manager is not None:\n                self.stats_manager.set_metrics(frame_num, {\n                    self._metric_keys[0]: frame_avg })\n\n        if self.last_frame_avg is not None:\n            if self.last_fade[\'type\'] == \'in\' and self.frame_under_threshold(frame_img):\n                # Just faded out of a scene, wait for next fade in.\n                self.last_fade[\'type\'] = \'out\'\n                self.last_fade[\'frame\'] = frame_num\n            elif self.last_fade[\'type\'] == \'out\' and not self.frame_under_threshold(frame_img):\n                # Just faded into a new scene, compute timecode for the scene\n                # split based on the fade bias.\n                f_in = frame_num\n                f_out = self.last_fade[\'frame\']\n                f_split = int((f_in + f_out + int(self.fade_bias * (f_in - f_out))) / 2)\n                # Only add the scene if min_scene_len frames have passed. \n                if self.last_scene_cut is None or (\n                    (frame_num - self.last_scene_cut) >= self.min_scene_len):\n                    cut_list.append(f_split)\n                    cut_found = True\n                    self.last_scene_cut = frame_num\n                self.last_fade[\'type\'] = \'in\'\n                self.last_fade[\'frame\'] = frame_num\n        else:\n            self.last_fade[\'frame\'] = 0\n            if self.frame_under_threshold(frame_img):\n                self.last_fade[\'type\'] = \'out\'\n            else:\n                self.last_fade[\'type\'] = \'in\'\n        # Before returning, we keep track of the last frame average (can also\n        # be used to compute fades independently of the last fade type).\n        self.last_frame_avg = frame_avg\n        return cut_list\n\n    def post_process(self, frame_num):\n        """"""Writes a final scene cut if the last detected fade was a fade-out.\n\n        Only writes the scene cut if add_final_scene is true, and the last fade\n        that was detected was a fade-out.  There is no bias applied to this cut\n        (since there is no corresponding fade-in) so it will be located at the\n        exact frame where the fade-out crossed the detection threshold.\n        """"""\n\n        # If the last fade detected was a fade out, we add a corresponding new\n        # scene break to indicate the end of the scene.  This is only done for\n        # fade-outs, as a scene cut is already added when a fade-in is found.\n        cut_times = []\n        cut_added = False\n        if self.last_fade[\'type\'] == \'out\' and self.add_final_scene and (\n            self.last_scene_cut is None or\n            (frame_num - self.last_scene_cut) >= self.min_scene_len):\n            cut_times.append(self.last_fade[\'frame\'])\n            cut_added = True\n        return cut_times\n'"
