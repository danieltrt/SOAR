file_path,api_count,code
example0/ex.py,2,"b'import numpy as np\nimport example\n\na = np.ones((10,3))\nb = np.ones((10,3))*3\nc = example.add_arrays(a, b)\n\nprint(c)\n'"
example1/ex.py,1,"b'# \n# christian.jaques@gmail.com\n#\n# demo code for the use of PyBind with the inclusion of a C module\n# check the use of ""extern ""C""{"" in display_array.h\n# \nimport numpy as np\nimport wrapper\n\n\n# instantiate a Python array that\'ll be sent to C++ and C\nb = np.ones(10)*3\nwrapper.display(b)  # example function that displays the array\n\n'"
example1/setup.py,0,"b'# Christian Jaques, CBI group, Idiap, 2018\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nimport sys\nimport setuptools\nimport os\n\n__version__ = \'0.0.2\'\n\n\nclass get_pybind_include(object):\n    """"""Helper class to determine the pybind11 include path\n    The purpose of this class is to postpone importing pybind11\n    until it is actually installed, so that the ``get_include()``\n    method can be invoked. """"""\n\n    def __init__(self, user=False):\n        self.user = user\n\n    def __str__(self):\n        import pybind11\n        return pybind11.get_include(self.user)\n\n\next_modules = [\n    Extension(\n        \'wrapper\',\n        sources=[\'example.cpp\', \'display_array.c\'],\n        include_dirs=[\n            # Path to pybind11 headers\n            get_pybind_include(),\n            get_pybind_include(user=True)#,\n            #\'./\'\n        ],\n        language=\'c++\'\n    ),\n]\n\n\n# As of Python 3.6, CCompiler has a `has_flag` method.\n# cf http://bugs.python.org/issue26689\ndef has_flag(compiler, flagname):\n    """"""Return a boolean indicating whether a flag name is supported on\n    the specified compiler.\n    """"""\n    import tempfile\n    with tempfile.NamedTemporaryFile(\'w\', suffix=\'.cpp\') as f:\n        f.write(\'int main (int argc, char **argv) { return 0; }\')\n        try:\n            compiler.compile([f.name], extra_postargs=[flagname])\n        except setuptools.distutils.errors.CompileError:\n            return False\n    return True\n\n\ndef cpp_flag(compiler):\n    """"""Return the -std=c++[11/14] compiler flag.\n    The c++14 is prefered over c++11 (when it is available).\n    """"""\n    if has_flag(compiler, \'-std=c++14\'):\n        return \'-std=c++14\'\n    elif has_flag(compiler, \'-std=c++11\'):\n        return \'-std=c++11\'\n    else:\n        raise RuntimeError(\'Unsupported compiler -- at least C++11 support \'\n                           \'is needed!\')\n\n\nclass BuildExt(build_ext):\n    """"""A custom build extension for adding compiler-specific options.""""""\n    c_opts = {\n        \'msvc\': [\'/EHsc\'],\n        \'unix\': [],\n    }\n\n    if sys.platform == \'darwin\':\n        # https://stackoverflow.com/questions/25595098/force-setup-py-to-use-my-custom-compiler\n        # solves the problem ""invalid argument \'-std=c++14\' not allowed with \'C\'"" --> use clang++ instead of clang\n        os.environ[""CC""] = ""clang++""\n        os.environ[""CXX""] = ""clang++""\n        c_opts[\'unix\'] += [\'-stdlib=libc++\', \'-mmacosx-version-min=10.7\']\n\n    def build_extensions(self):\n        ct = self.compiler.compiler_type\n        opts = self.c_opts.get(ct, [])\n        if ct == \'unix\':\n            opts.append(\'-DVERSION_INFO=""%s""\' % self.distribution.get_version())\n            opts.append(cpp_flag(self.compiler))\n            if has_flag(self.compiler, \'-fvisibility=hidden\'):\n                opts.append(\'-fvisibility=hidden\')\n        elif ct == \'msvc\':\n            opts.append(\'/DVERSION_INFO=\\\\""%s\\\\""\' % self.distribution.get_version())\n        for ext in self.extensions:\n            ext.extra_compile_args = opts\n        build_ext.build_extensions(self)\n\nsetup(\n    name=\'wrapper\',\n    version=__version__,\n    author=\'Christian Jaques\',\n    author_email=\'christian.jaques@idiap.ch\',\n    url=\'http://www.christianjaques.com/code/\',\n    description=\'PyBind example 1\',\n    long_description=\'\',\n    ext_modules=ext_modules,\n    install_requires=[\'pybind11>=2.2\'],\n    cmdclass={\'build_ext\': BuildExt},\n    zip_safe=False,\n)\n'"
