file_path,api_count,code
setup.py,0,"b'import sys\n\ntry:\n    from skbuild import setup\nexcept ImportError:\n    raise ImportError(\'scikit-build is required for installing\')\n\nsetup(\n    name=""pcl-py"",\n    version=""0.2.5"",\n    description=""Cython bindings of Point Cloud Library (PCL)"",\n    long_description=\'(see project homepage)\',\n    author=\'Jacob Zhong\',\n    author_email=\'cmpute@gmail.com\',\n    url=\'https://github.com/cmpute/pcl.py\',\n    download_url=\'https://github.com/cmpute/pcl.py/archive/master.zip\',\n    license=\'BSD-3-Clause\',\n    packages=[\'pcl\', \'pcl.common\', \'pcl.filters\', \'pcl.io\', \'pcl.visualization\'],\n    install_requires=[\'numpy>=1.11\'],\n    setup_requires=[\'cython>=0.29\', \'scikit-build\'],\n    extras_require={\'test\': [\'pytest\']},\n    classifiers=[\n        \'Programming Language :: C++\',\n        \'Programming Language :: Cython\',\n        \'Programming Language :: Python :: 3\',\n        \'License :: OSI Approved :: BSD License\',\n        \'Operating System :: OS Independent\',\n        \'Development Status :: 2 - Pre-Alpha\',\n        \'Topic :: Scientific/Engineering\'\n    ],\n    keywords=[\'pcl\', \'pointcloud\', \'numpy\', \'cython\', \'binding\'],\n)\n'"
setup_test.py,0,"b'import sys\nfrom skbuild import setup\n\nsetup(\n    name=""pcl_tests"",\n    version = ""0.0"",\n    packages = [""test""],\n    package_data={\'test\':[\'data/*.pcd\']},\n    setup_requires=[""pytest-runner""],\n    tests_require=[""pytest""],\n    cmake_args=[\'-DSETUP_TEST:BOOL=ON\']\n)\n'"
pcl/__init__.py,22,"b'from pcl.PointField import *\nfrom pcl.PointCloud import *\n\nfrom pcl.common import *\nfrom pcl.filters import *\nfrom pcl.io import *\nfrom pcl.visualization import *\n\ndef get_include():\n    import pcl, os\n    return os.path.join(os.path.dirname(pcl.__file__), \'include\')\n\n############################ Helper Functions #############################\n\nimport numpy as np\n\ndef create_xyz(data):\n    \'\'\'\n    Create PointXYZ point cloud from ordinary nx3 array, or equivalent list representation\n    \'\'\'\n    data = np.array(data, copy=False)\n    if data.shape[-1] != 3:\n        return ValueError(""Each point should contain 3 values"")\n\n    dt = np.dtype(dict(names=[\'x\',\'y\',\'z\'], formats=[\'f4\',\'f4\',\'f4\'], itemsize=16))\n    arr = np.empty(len(data), dtype=dt)\n    arr[\'x\'], arr[\'y\'], arr[\'z\'] = data[:,0], data[:,1], data[:,2]\n    return PointCloud(arr, \'XYZ\')\n\ndef create_rgb(data):\n    \'\'\'\n    Create RGB point cloud from ordinary nx3 array, or equivalent list representation.\n    Note that RGB value should be represented in integer of 0~255\n    \'\'\'\n    data = np.array(data, copy=False)\n    if data.shape[-1] != 3:\n        return ValueError(""Each point should contain 3 values"")\n\n    rgb_dt = np.dtype(dict(names=[\'b\',\'g\',\'r\'], formats=[\'u1\',\'u1\',\'u1\'], itemsize=16))\n    rgb_arr = np.empty(len(data), dtype=rgb_dt)\n    rgb_arr[\'r\'], rgb_arr[\'g\'], rgb_arr[\'b\'] = data[:,0], data[:,1], data[:,2]\n    return PointCloud(rgb_arr.view(\'u4\'), \'RGB\')\n\ndef create_xyzrgb(data):\n    \'\'\'\n    Create PointXYZRGB point cloud from ordinary nx6 array, or equivalent list representation\n    Note that RGB value should be represented in integer of 0~255\n    \'\'\'\n    data = np.array(data, copy=False)\n    if data.shape[-1] != 6:\n        return ValueError(""Each point should contain 3 values"")\n\n    rgb_dt = np.dtype(dict(names=[\'b\',\'g\',\'r\'], formats=[\'u1\',\'u1\',\'u1\'], itemsize=4))\n    rgb_arr = np.empty(len(data), dtype=rgb_dt)\n    rgb_arr[\'r\'], rgb_arr[\'g\'], rgb_arr[\'b\'] = data[:,3], data[:,4], data[:,5]\n    cloud_dt = np.dtype(dict(names=[\'x\',\'y\',\'z\',\'rgb\'], formats=[\'f4\',\'f4\',\'f4\',\'u4\'], offsets=[0,4,8,16], itemsize=20))\n    cloud_arr = np.empty(len(data), dtype=cloud_dt)\n    cloud_arr[\'x\'], cloud_arr[\'y\'], cloud_arr[\'z\'], cloud_arr[\'rgb\'] = data[:,0], data[:,1], data[:,2], rgb_arr.view(\'u4\')\n    return PointCloud(cloud_arr, \'XYZRGB\')\n\ndef create_xyzrgba(data):\n    \'\'\'\n    Create PointXYZRGBA point cloud from ordinary nx6 array, or equivalent list representation\n    \'\'\'\n    data = np.array(data, copy=False)\n    if data.shape[-1] != 7:\n        return ValueError(""Each point should contain 3 values"")\n\n    rgba_dt = np.dtype(dict(names=[\'b\',\'g\',\'r\',\'a\'], formats=[\'u1\',\'u1\',\'u1\',\'u1\'], itemsize=4))\n    rgba_arr = np.empty(len(data), dtype=rgba_dt)\n    rgba_arr[\'r\'], rgba_arr[\'g\'], rgba_arr[\'b\'], rgba_arr[\'a\'] = data[:,3], data[:,4], data[:,5], data[:,6]\n    cloud_dt = np.dtype(dict(names=[\'x\',\'y\',\'z\',\'rgba\'], formats=[\'f4\',\'f4\',\'f4\',\'u4\'], offsets=[0,4,8,16], itemsize=20))\n    cloud_arr = np.empty(len(data), dtype=cloud_dt)\n    cloud_arr[\'x\'], cloud_arr[\'y\'], cloud_arr[\'z\'], cloud_arr[\'rgba\'] = data[:,0], data[:,1], data[:,2], rgba_arr.view(\'u4\')\n    return PointCloud(cloud_arr, \'XYZRGBA\')\n\ndef create_xyzi(data):\n    \'\'\'\n    Create PointXYZI point cloud from ordinary nx4 array, or equivalent list representation\n    \'\'\'\n    data = np.array(data, copy=False)\n    if data.shape[-1] != 4:\n        return ValueError(""Each point should contain 4 values"")\n\n    dt = np.dtype(dict(names=[\'x\',\'y\',\'z\',\'intensity\'], formats=[\'f4\',\'f4\',\'f4\',\'f4\'], offsets=[0,4,8,16], itemsize=32))\n    arr = np.empty(len(data), dtype=dt)\n    arr[\'x\'], arr[\'y\'], arr[\'z\'], arr[\'intensity\'] = data[:,0], data[:,1], data[:,2], data[:,3]\n    return PointCloud(arr, \'XYZI\')\n\ndef create_normal(data):\n    \'\'\'\n    Create Normal (point type) point cloud from ordinary nx3 or nx4 array, or equivalent list representation\n    \'\'\'\n    data = np.array(data, copy=False)\n    if data.shape[-1] not in [3,4]:\n        return ValueError(""Each point should contain 4 values"")\n\n    dt = np.dtype(dict(names=[\'normal_x\',\'normal_y\',\'normal_z\',\'curvature\'], formats=[\'f4\',\'f4\',\'f4\',\'f4\'], offsets=[0,4,8,16], itemsize=32))\n    arr = np.empty(len(data), dtype=dt)\n    arr[\'normal_x\'], arr[\'normal_y\'], arr[\'normal_z\'] = data[:,0], data[:,1], data[:,2]\n    if data.shape[-1] == 4:\n        arr[\'curvature\'] = data[:,3]\n    else:\n        arr[\'curvature\'] = 0\n    return PointCloud(arr, \'NORMAL\')\n\n'"
pcl/ros.py,0,"b'try:\n    import rospy\n    ros_exist = True\nexcept ImportError:\n    ros_exist = False\n\nros_error = SystemError(""Please make sure that ROS has been properly set up!"")\n'"
test/__init__.py,0,b''
test/test_io.py,0,"b'import os.path as osp\nimport unittest\nfrom pcl import load_pcd\n\nclass TestLoaders(unittest.TestCase):\n    def test_load_pcd(self):\n        cloud = load_pcd(osp.dirname(__file__) + ""/data/car6.pcd"")\n        print(osp.dirname(__file__) + ""/data/car6.pcd"")\n        assert len(cloud) == 10031\n        with self.assertRaises(IOError):\n            load_pcd(""some/path/to/nothing.pcd"")\n'"
test/test_pointcloud.py,27,"b'import pcl\nimport numpy as np\nimport unittest\n\nclass TestNumpyInitialize(unittest.TestCase):\n    def test_normal_init(self):\n        cloud_array = np.array([[1,2,3],[2,3,4]], dtype=\'f4\')\n        with self.assertRaises(ValueError):\n            cloud = pcl.PointCloud(cloud_array)\n\n        # add padding zeros after points\n        cloud_array_pad = np.insert(cloud_array, 3, 0, axis=1)\n        cloud = pcl.PointCloud(cloud_array_pad)\n        assert len(cloud) == 2\n        assert np.allclose(cloud.xyz, cloud_array)\n        assert len(cloud.fields) == 3\n        assert cloud.names == [\'x\', \'y\', \'z\']\n\n    def test_list_init(self):\n        cloud = pcl.PointCloud([(1,2,3),(2,3,4)], \'xyz\')\n        assert len(cloud) == 2\n        assert np.allclose(cloud.xyz, [[1,2,3],[2,3,4]])\n        assert cloud.names == [\'x\', \'y\', \'z\']\n\n    def test_struct_init(self):\n        cloud_array = np.array([(1,2,3),(2,3,4)],\n            dtype={\'names\':[\'x\',\'y\',\'z\'], \'formats\':[\'f4\',\'f4\',\'f4\'], \'itemsize\':16})\n        cloud = pcl.PointCloud(cloud_array)\n        assert len(cloud) == 2\n        assert np.allclose(cloud.xyz, [[1,2,3],[2,3,4]])\n        assert cloud.names == [\'x\', \'y\', \'z\']\n\n        cloud = pcl.PointCloud(np.array([(1,2,3,5),(2,3,4,5)], \n            dtype={\'names\':[\'x\',\'y\',\'z\',\'i\'], \'formats\':[\'f4\',\'f4\',\'f4\',\'i1\'], \'offsets\':[0,4,8,16]}))\n        assert len(cloud) == 2\n        assert np.allclose(cloud.xyz, [[1,2,3],[2,3,4]])\n        assert cloud.names == [\'x\', \'y\', \'z\', \'i\']\n\n    def test_copy_init(self):\n        cloud_array = np.array([[1,2,3],[2,3,4]], dtype=\'f4\')\n        cloud = pcl.PointCloud([(1,2,3),(2,3,4)], \'xyz\')\n        copy = pcl.PointCloud(cloud)\n        assert np.all(copy.xyz == cloud_array)\n        assert copy == cloud\n        cloud.xyz[0,0] = 0\n        assert np.any(cloud.xyz != cloud_array)\n        assert np.all(copy.xyz == cloud_array)\n\n    def test_point_type(self):\n        cloud = pcl.PointCloud([(1,2,3,255),(2,3,4,255)], \'xyzrgb\')\n        assert len(cloud) == 2\n        assert cloud.names == [\'x\', \'y\', \'z\', \'rgb\']\n        assert len(cloud.rgb) == 2\n\n    def test_origin(self):\n        cloud = pcl.PointCloud([(1,2,3),(2,3,4)])\n        assert np.all(cloud.sensor_origin == np.zeros(3))\n        cloud.sensor_origin = [1, 2, 3]\n        assert np.all(cloud.sensor_origin == np.array([1,2,3]))\n\n    def test_orientation(self):\n        cloud = pcl.PointCloud([(1,2,3),(2,3,4)])\n        assert np.all(cloud.sensor_orientation == np.array([0,0,0,1]))\n        cloud.sensor_orientation = [1, 2, 3, 1]\n        assert np.all(cloud.sensor_orientation == np.array([1,2,3,1]))\n\n    def test_field_operations(self):\n        cloud = pcl.PointCloud([(1,2,3),(2,3,4)])\n        new_fields = np.array([(4,5),(6,7)], dtype=[(\'f1\',\'f4\'),(\'f2\',\'f8\')])\n        cloud = cloud.append_fields(new_fields)\n        assert cloud.names == [\'x\', \'y\', \'z\', \'f1\', \'f2\']\n        assert len(cloud.to_ndarray()) == 2\n        assert np.all(cloud.xyz == np.array([(1,2,3),(2,3,4)]))\n\n        cloud = pcl.PointCloud([(1,2,3),(2,3,4)])\n        new_fields = np.array([(4,5),(6,7)], dtype=[(\'f1\',\'f4\'),(\'f2\',\'f8\')])\n        cloud = cloud.insert_fields(new_fields, [1,1])\n        assert cloud.names == [\'x\', \'f2\', \'f1\', \'y\', \'z\']\n        assert len(cloud.to_ndarray()) == 2\n        with self.assertRaises(ValueError):\n            _ = cloud.xyz\n\n    def test_creators(self):\n        cloud = pcl.create_xyz([[1,2,3], [4,5,6]])\n        assert np.all(cloud.xyz == np.array([[1,2,3], [4,5,6]]))\n        assert cloud.ptype == ""XYZ""\n\n        cloud = pcl.create_xyzrgb([[1,2,3,1,2,3], [4,5,6,4,5,6]])\n        assert np.all(cloud.xyz == np.array([[1,2,3], [4,5,6]]))\n        assert cloud.ptype == ""XYZRGB""\n\n        cloud = pcl.create_xyzrgba([[1,2,3,1,2,3,1], [4,5,6,4,5,6,4]])\n        assert np.all(cloud.xyz == np.array([[1,2,3], [4,5,6]]))\n        assert cloud.ptype == ""XYZRGBA""\n\n        cloud = pcl.create_normal([[1,2,3,3], [4,5,6,6]])\n        assert np.all(cloud.normal == np.array([[1,2,3], [4,5,6]]))\n        assert cloud.ptype == ""NORMAL""\n\n        cloud = pcl.create_normal([[1,2,3], [4,5,6]])\n        assert np.all(cloud.normal == np.array([[1,2,3], [4,5,6]]))\n        assert np.all(cloud[\'curvature\'] == 0)\n        assert cloud.ptype == ""NORMAL""\n\n    def test_infer_ptype(self):\n        c1 = pcl.create_xyz(np.random.rand(10, 3))\n        c2 = pcl.create_normal(np.random.rand(10, 3))\n        c3 = c1.append_fields(c2)\n        c3.infer_ptype()\n        assert c3.ptype == \'XYZN\'\n'"
test/test_visualizer.py,11,"b'import unittest\nimport numpy as np\nimport pcl\n\nclass TestLoaders(unittest.TestCase):\n    def test_load_pointcloud(self):\n        cloud1 = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        cloud2 = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        \n        viewer = pcl.Visualizer()\n        viewer.addPointCloud(cloud1)\n        viewer.addCoordinateSystem()\n        viewer.removeCoordinateSystem()\n        \n        v1 = viewer.createViewPort(0, 0, 0.5, 1)\n        v2 = viewer.createViewPort(0.5, 0, 1, 1)\n        viewer.addPointCloud(cloud1, viewport=v1, id=""cloud1"")\n        viewer.addPointCloud(cloud2, viewport=v2, id=""cloud2"")\n        \n        viewer.spinOnce(time=1000)\n        viewer.close()\n\n    def test_add_callback(self):\n        def key_callback(event):\n            print(event.KeyCode, event.KeySym)\n        def mouse_callback(event):\n            print(event.X, event.Y, event.Type, event.Button)\n        def picking_callback(event):\n            print(event.Point, event.PointIndex)\n        def area_callback(event):\n            print(event.PointsIndices)\n\n        cloud = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        viewer = pcl.Visualizer()\n        viewer.addPointCloud(cloud)\n        viewer.registerKeyboardCallback(key_callback)\n        viewer.registerMouseCallback(mouse_callback)\n        viewer.registerPointPickingCallback(picking_callback)\n        viewer.registerAreaPickingCallback(area_callback)\n\n        viewer.spinOnce(time=2000)\n        viewer.close()\n\n    def test_add_shape(self):\n        cloud = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        \n        viewer = pcl.Visualizer()\n        viewer.addPointCloud(cloud)\n        \n        viewer.addLine([-1,-1,-1], [1,1,1])\n        viewer.addArrow([1,-1,-1], [-1,1,1], line_color=[0.7,0,0], text_color=[0,3,0,0])\n        viewer.addSphere([0,0,0], 1)\n\n        viewer.addText(""Text"", -1, 1, fontsize=100)\n        viewer.addText3D(""Text3D"", [-1,1,-1], text_scale=2)\n        \n        viewer.spinOnce(time=500)\n        viewer.updateSphere([0,0,0], 2)\n        viewer.spinOnce(time=500)\n        \n        viewer.close()\n\n    def test_color_handlers(self):\n        viewer = pcl.Visualizer()\n\n        cloud = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        viewer.addPointCloud(cloud, field=""y"", id=""cloud1"")\n\n        cloud = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        viewer.addPointCloud(cloud, color=[0.8,0.2,0], id=""cloud2"")\n\n        cloud = pcl.PointCloud(np.random.rand(100, 4).astype(\'f4\'))\n        viewer.addPointCloud(cloud, color_handler=lambda: np.random.rand(100, 4)*255, id=""cloud3"")\n\n        viewer.spinOnce(time=2000)\n        viewer.close()\n\n    def test_add_normal(self):\n        viewer = pcl.Visualizer()\n\n        cloud_data = np.random.rand(100, 6)\n        cloud_data[:, 3:] = np.clip(cloud_data[:, 3:] * 128 + 128, 0, 256)\n        cloud = pcl.create_xyzrgb(cloud_data)\n        normals = pcl.create_normal(np.random.rand(100, 4))\n        viewer.addPointCloud(cloud)\n        viewer.addPointCloudNormals(cloud, normals, level=2, scale=0.1, id=""cloudn"")\n\n        viewer.spinOnce(time=2000)\n        viewer.close()\n'"
pcl/common/__init__.py,0,b'from pcl.common.PCLBase import PCLBase\n'
pcl/filters/__init__.py,0,b'from pcl.filters._filters import *\n'
pcl/io/__init__.py,0,b'from pcl.io._io import *\n'
pcl/registration/__init__.py,0,b'from pcl.registration._registration import *\n'
pcl/visualization/__init__.py,0,b'from pcl.visualization._visualization import *\n'
