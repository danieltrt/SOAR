file_path,api_count,code
Advanced/decorators.py,0,"b'import time\ndef time_it(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args,**kwargs)\n        end = time.time()\n        print(func.__name__ +"" took "" + str((end-start)*1000) + ""mil sec"")\n        return result\n    return wrapper\n\n@time_it\ndef calc_square(numbers):\n    result = []\n    for number in numbers:\n        result.append(number*number)\n    return result\n\n@time_it\ndef calc_cube(numbers):\n    result = []\n    for number in numbers:\n        result.append(number*number*number)\n    return result\n\narray = range(1,100000)\nout_square = calc_square(array)\nout_cube = calc_cube(array)\n'"
Basics/13_read_write_file.py,0,"b'def count_num_in_file(file_path, num):\n    count = 0\n    with open(file_path,""r"") as f:\n        for line in f.readlines():\n            tokens = line.split("","")\n            count += count_num_in_tokens(tokens, num)\n\n    return count\n\ndef count_num_in_tokens(tokens, num):\n    count = 0\n    for token in tokens:\n        if num == int(token):\n            count+=1\n    return count\n\n\ndef sum_numbers(file_path):\n    output_lines = []\n    with open(file_path,""r"") as f:\n        for line in f.readlines():\n            tokens = line.split("","")\n            total = sum_tokens(tokens)\n            output_lines.append(""sum: "" + str(total) + "" | "" + line)\n    with open(file_path,""w"") as f:\n        f.writelines(output_lines)\n\ndef sum_tokens(tokens):\n    sum = 0\n    for token in tokens:\n        sum += int(token)\n    return sum\n\nsum_numbers(""C:\\\\Code\\\\Py\\\\Basics\\\\input.txt"")'"
Basics/14_json_addressbook.py,0,"b'import json\nf = open(""C:\\\\data\\\\book.txt"",""w+"")\nphone_book = {}\ncommand = """"\nwhile command != \'exit\':\n    command = input(\'Enter a command(options: new,get,save): \')\n    if command == ""new"":\n        name = input(\'Enter name of the person\')\n        p = input(\'Phone number: \')\n        a = input(\'Address: \')\n        phone_book[name] = {\'phone\': p, \'address\': a}\n    elif command == \'get\':\n        name = input(\'Enter name of the person\')\n        if name in phone_book:\n            print(phone_book[name])\n        else:\n            print(\'person not found in address book\')\n    elif command == \'save\':\n        f.write(json.dumps(phone_book))\n'"
Basics/16_exception.py,0,"b'x=input(""Enter number1: "")\ny=input(""Enter number2: "")\ntry:\n    z = int(x) / int(y)\nexcept ZeroDivisionError as e:\n    print(\'Division by zero exception\')\n    z = None\nexcept TypeError as e:\n    print(\'Type error exception\')\n    z = None\nprint(""Division is: "", z)'"
Basics/17_class.py,0,"b'class Human:\n    def __init__(self, n, o):\n        self.name = n\n        self.occupation = o\n\n    def do_work(self):\n        if self.occupation == ""tennis player"":\n            print(self.name, ""plays tennis"")\n        elif self.occupation == ""actor"":\n            print(self.name, ""shoots film"")\n\n    def speaks(self):\n        print(self.name, ""says how are you?"")\n\ntom = Human(""tom cruise"",""actor"")\ntom.do_work()\ntom.speaks()\n\nmaria = Human(""maria sharapova"",""tennis player"")\nmaria.do_work()\nmaria.speaks()'"
Basics/18_inheritance.py,0,"b'class Vehicle:\n    def general_usage(self):\n        print(""general use: transporation"")\n\nclass Car(Vehicle):\n    def __init__(self):\n        print(""I\'m car"")\n        self.wheels = 4\n        self.has_roof = True\n\n    def specific_usage(self):\n        self.general_usage()\n        print(""specific use: commute to work, vacation with family"")\n\nclass MotorCycle(Vehicle):\n    def __init__(self):\n        print(""I\'m motor cycle"")\n        self.wheels = 2\n        self.has_roof = False\n\n    def specific_usage(self):\n        self.general_usage()\n        print(""specific use: road trip, racing"")\n\nc = Car()\nm = MotorCycle()\n\nprint(issubclass(Car,MotorCycle))'"
Basics/19_multiple_inheritance.py,0,"b'class Father():\n   def skills(self):\n       print(""gardening,programming"")\n\nclass Mother():\n   def skills(self):\n       print(""cooking,art"")\n\nclass Child(Father,Mother):\n    def skills(self):\n        Father.skills(self)\n        Mother.skills(self)\n        print(""sports"")\n\nc = Child()\nc.skills()\n'"
Basics/20_raise_exception.py,0,"b'def process_file():\n   try:\n       f=open(""c:\\\\code\\\\data.txt"")\n       x=1/0\n   except FileNotFoundError as e:\n       print(""inside except"")\n   finally:\n       print(""cleaning up file"")\n       f.close()\n\n\n\n\nprocess_file()\n\n'"
Basics/21_iterators.py,0,"b'class RemoteControl():\n    def __init__(self):\n        self.channels = [""HBO"",""cnn"",""abc"",""espn""]\n        self.index = -1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.index += 1\n        if self.index == len(self.channels):\n            raise StopIteration\n\n        return self.channels[self.index]\n\nr = RemoteControl()\nitr=iter(r)\nprint(next(itr))\nprint(next(itr))\nprint(next(itr))\nprint(next(itr))\nprint(next(itr))\n\n\n'"
Basics/22_Generators.py,0,"b'def fib():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a+b\n\nfor f in fib():\n    if f > 100:\n        break\n    print(f)\n'"
Basics/address.py,0,"b'book = {}\nbook[\'tom\'] = {\n    \'name\': \'tom\',\n    \'address\': \'1 red street, NY\',\n    \'phone\': 98989898\n}\nbook[\'bob\'] = {\n    \'name\': \'bob\',\n    \'address\': \'1 green street, NY\',\n    \'phone\': 23424234\n}\n\nimport json\ns=json.dumps(book)\nwith open(""c://data//book.txt"",""w"") as f:\n    f.write(s)'"
Basics/area.py,0,"b'def calculate_area(base, height):\n    print(""__name__: "",__name__)\n    return 1/2*(base*height)\n\nif __name__ == ""__main__"":\n    print(""I am in area.py"")\n    a=calculate_area(10, 20)\n    print(""area: "",a)\n'"
Basics/caller.py,0,"b'import area\nprint(""I am in caller.py"")\narea.calculate_area(5,10)'"
Basics/dict_tuple.py,0,"b'def add_and_multiple(n1,n2):\n    \'\'\'\n    Exercise 2\n    :param n1: Number 1\n    :param n2: Number 2\n    :return: a tuple containing sum and multiplication of two input numbers\n    \'\'\'\n    sum = n1 + n2\n    mult = n1 * n2\n    return sum, mult\n\ndef age_dictionary():\n    \'\'\'\n    Exercise 1\n    This program asks for person name and age and builds a dictionary using that\n    Later on you can input person name and it will tell you the age of that person\n    :return:\n    \'\'\'\n    d = {}\n    while True:\n        person = input(""Enter name of the person(To stop don\'t enter anything and hi Enter key):"")\n        if person == \'\':\n            break\n        age = input(""Enter age:"")\n        d[person] = age\n\n    print(""Building dictionary is complete.Now enter name of the person and I\'ll tell you his/her age"")\n    while True:\n        name = input(""Enter name of the person(To stop don\'t enter anything and hi Enter key):"")\n        if name == \'\':\n            break\n        if name in d:\n            print (""Age of"", name, ""is:"", d[name])\n        else:\n            print (""I don\'t know the age of"",name)\n    print (""Age dictionary program is finished now"")\n\n# Exercise 1\nage_dictionary()\n\n# Exercise 2\nn1=4\nn2=6\ns,m=add_and_multiple(n1,n2)\nprint(""sum:"",s,""multipication:"",m,"" Input numbers:"",n1,""and"",n2)\n'"
Basics/for.py,0,"b'\n\n# ============ Exercises =============== #\ndef ex_expense_break():\n    """"""\n    Your monthly expense list (from Jan to May) looks like this,\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    Write a program that asks you to enter an expense amount and program\n    should tell you in which month that expense occurred.\n    """"""\n\n    month_list = [""January"", ""February"", ""March"", ""April"", ""May""]\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input(""Enter expense amount: "")\n    e = int(e)\n\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n\n    if month != -1:\n        print(\'You spent\',e,\'in\',month_list[month])\n    else:\n        print(\'You didn\\\'t spend\',e,\'in any month\')\n\n\ndef ex_print_shape():\n    """"""\n    Write a program that prints following shape\n    *\n    **\n    ***\n    ****\n    *****\n    """"""\n    for i in range(1,6):\n        s = \'\'\n        for j in range(i):\n            s += \'*\'\n        print(s)\n\n\ndef ex_heads_tails():\n    """"""\n    After flipping a coin 10 times you got this result,\n    result = [""heads"",""tails"",""tails"",""heads"",""tails"",""heads"",""heads"",""tails"",""tails"",""tails""]\n    Using for loop figure out \xe2\x80\x9cheads\xe2\x80\x9d count.\n    """"""\n    result = [""heads"",""tails"",""tails"",""heads"",""tails"",""heads"",""heads"",""tails"",""tails"",""tails""]\n    count = 0\n    for item in result:\n        if item == ""heads"":\n            count += 1\n    print(""Heads count: "",count)\n\n\n# ============ Demo =============== #\ndef demo_break_marathon():\n    """"""break demo using running race""""""\n    for i in range(26):\n        print(""You ran"",i+1,""miles."") # i starts with zero hence adding 1\n        tired = input(""Are you tired? "")\n        if tired == \'yes\':\n            break\n\n    if i == 26:\n        print(""Hurray! You are a rock star! You just finished marathon!"")\n    else:\n        print(""You didn\'t finish marathon but hey congrats anyways! You still ran"", i+1,""miles"")\n\n\ndef demo_continue():\n    """"""Print square of all numbers between 1 to 10 except even numbers""""""\n    for i in range(1,11):\n        if i % 2 == 0:\n            continue\n    print(i*i)\n\n\n\n'"
Basics/functions.py,0,"b'def print_pattern(n=5):\n    \'\'\'\n    :param n: Integer number representing number of lines\n    to be printed in a pattern. If n=3 it will print,\n      *\n      **\n      ***\n    If n=4, it will print,\n      *\n      **\n      ***\n      ****\n    Default value for n is 5. So if function caller doesn\'t\n    supply the input number then it will assume it to be 5\n    :return: None\n    \'\'\'\n    # we need to run two for loops. Outer loop prints patterns line by line\n    # where as inner loop print the content of that specific lines\n    for i in range(n):\n        s = \'\'\n        for j in range(i+1):\n            s = s + \'*\'\n        print(s)\n\ndef calculate_area(dimension1,dimension2,shape=""triangle""):\n    \'\'\'\n    :param dimension1: In case of triangle it is ""base"". For rectangle it is ""length"".\n    :param dimension2: In case of triangle it is ""height"". For rectangle it is ""width"".\n    :param shape: Either ""triangle"" or ""rectangle""\n    :return: Area of a shape\n    \'\'\'\n    if shape==""triangle"":\n        area=1/2*(dimension1*dimension2) # Triangle area is : 1/2(Base*Height)\n    elif shape==""rectangle"":\n        area=dimension1*dimension2 # Rectangle area is: Length*Width\n    else:\n        print(""***Error: Input shape is neither triangle nor rectangle."")\n        area=None # If user didn\'t supply ""triangle"" or ""rectangle"" as shape then return None\n    return area\n\n# ------------------ Shape area exercise ------------------------- #\n# Calculate area of triangle whose base is 10 and height is 5\nbase=10\nheight=5\ntriangle_area=calculate_area(base,height,""triangle"")\nprint(""Area of triangle is:"",triangle_area)\n\n# Calculate area of a rectangle whose length is 20 and width is 30\nlength=20\nwidth=30\nrectangle_area=calculate_area(length,width,""rectangle"")\nprint(""Area of rectangle is:"",rectangle_area)\n\n# Calculate area of a triangle without supplying shape argument in a function call\ntriangle_area=calculate_area(base,height) # Here third argument is missing\nprint(""Area of triangle with no shape supplied: "",triangle_area)\n\n# -------------------- Pattern exercise ------------------------- #\nprint(""Print pattern with input=3"")\nprint_pattern(3)\nprint(""Print pattern with input=4"")\nprint_pattern(4)\nprint(""Print pattern with no input number"")\nprint_pattern() # Not supplying any input will use default argument which is 5\n\n\n'"
Basics/if.py,0,"b'def city_checker():\n    \'\'\'if chapter exercise (a)\'\'\'\n\n    usa = [""atlanta"", ""new york"", ""chicago"", ""baltimore""]\n    uk = [""london"", ""bristol"", ""cambridge""]\n    india = [""mumbai"", ""delhi"", ""banglore""]\n\n    city = input(""Enter city name: "")\n\n    if city in usa:\n        print(city,""is in usa"")\n    elif city in uk:\n        print(city,""is in uk"")\n    elif city in india:\n        print(city,""is in india"")\n    else:\n        print(""I won\'t be able to tell you which country"",city,""is in! Sorry!"")\n\n\ndef city_country_checker():\n    \'\'\'if chapter exercise (b)\'\'\'\n\n    usa = [""atlanta"", ""new york"", ""chicago"", ""baltimore""]\n    uk = [""london"", ""bristol"", ""cambridge""]\n    india = [""mumbai"", ""delhi"", ""banglore""]\n\n    city1 = input(""Enter city 1: "")\n    city2 = input(""Enter city 2: "")\n\n    if city1 in usa and city2 in usa:\n        print(""Both cities are in USA"")\n    elif city1 in uk and city2 in uk:\n        print(""Both cities are in uk"")\n    elif city1 in india and city2 in india:\n        print(""Both cities are in India"")\n    else:\n        print(""They don\'t belong to same country"")\n\n\ndef cuisine_checker():\n    \'\'\'If tutorial\'\'\'\n\n    indian = [""samosa"",""kachori"", ""dal"", ""naan"" ]\n    chinese = [""egg roll"", ""fried rice"", ""pot sticker""]\n    italian = [""pizza"", ""pasta"", ""risotto""]\n\n    dish = input(""Enter a dish name: "")\n    if dish in indian:\n        print(dish,""is an indian cuisine"")\n    elif dish in chinese:\n        print(dish,""is a chinese cuisine"")\n    elif dish in italian:\n        print(dish,""is an italian cuisine"")\n    else:\n        print(""Based on whatever little knowledge I\'ve, I can\'t tell which cuisine is"",dish)\n\n\ncity_checker()'"
Basics/myprogram.py,0,"b'import sys\nsys.path.append(""C:\\Code"")\nimport functions as f\narea = f.calculate_square_area(10)\narea = f.calculate_triangle_area(5,10)\nprint(area)'"
Basics/test.py,0,"b""def sum(a,b):\n    return a+b\n\nn1=int(input('enter first number: '))\nn2=int(input('enter first number: '))\nprint('sum is: ',sum(n1,n2))\n"""
Basics/variable_numbers_strings.py,0,"b'variables\n=========\n>>> first=""Tom""\n>>> middle=""Cruise""\n>>> last=""Mapother""\n>>> print(""Full Name:"",first,middle,last)\nFull Name: Tom Cruise Mapother\n\nnumbers\n=======\n(1) Find out an area of a triangle whose base is 15 meter and height is 22 meter. The mathematical equation for an area of a triangle is: Area = \xc2\xbd*Base*Height\n>>> base=15\n>>> height=22\n>>> area=1/2*(base*height)\n>>> area\n165.0\n\n(2) You bought 9 packets of potato chips from a store. Each packet costs 1.49 dollar and you gave shopkeeper 20 dollar. Find out using python, how many dollars is the shopkeeper going to give you back? \n>>> num_packets=9\n>>> cost_per_packet=1.49\n>>> total_cost=num_packets*cost_per_packet\n>>> money_paid=20\n>>> cash_back=money_paid-total_cost\n>>> cash_back\n6.59\n\n(3) The bathroom of your home is an exact square. You want to replace tiles in it. Length of this bathroom is 5.5 feet. How many square foot of tiles you need to buy? Equation for an area of a square is: Area = Length to the power of 2. Find it out using python.\n>>> length=5.5\n>>> area=length**2\n>>> area\n30.25\n\nstrings\n=======\n(1) Create a string variable to store this text ""Earth revolves around the sun"",\n    (a) Print substring \xe2\x80\x9crevolves\xe2\x80\x9d \n    (b) Print substring \xe2\x80\x9csun\xe2\x80\x9d using negative index\n>>> s=""Earth revolves around the sun""\n>>> s[6:14]\n\'revolves\'\n>>> s[-3:]\n\'sun\'\n(2) Create a string variable to store this text ""Earth revolves around the \xe2\x80\x9csun\xe2\x80\x9d"" and print it\n>>> s=\'Earth revolves around the \xe2\x80\x9csun\xe2\x80\x9d\'\n>>> s\n\'Earth revolves around the \xe2\x80\x9csun\xe2\x80\x9d\'\n(3) Create three string variables with values \xe2\x80\x9cI love eating\xe2\x80\x9c, \xe2\x80\x9cveggies\xe2\x80\x9d, \xe2\x80\x9cfruits\xe2\x80\x9d \n    (a) Print \xe2\x80\x9cI love eating veggies and fruits\xe2\x80\x9d (Hint: Use + operator)\n>>> s1=""I love eating""\n>>> s2=""veggies""\n>>> s3=""fruits""\n>>> s1+"" "" +s2+"" and ""+s3\n\'I love eating veggies and fruits\'\n    (b) Create fourth variable to store number of fruits you eat everyday. Say for example you eat 2 fruits everyday, in that case print \xe2\x80\x9cI love eating 2 fruits everyday\xe2\x80\x9d\n>>> num_fruits=2\n>>> s1+"" ""+str(num_fruits)+"" ""+s3+"" everyday""\n\'I love eating 2 fruits everyday\'\n'"
Basics/word_occurences.py,0,"b's = ""I work in bloomberg founded by bloomberg work work""\n\ntokens = s.split("" "")\nd = {}\nfor token in tokens:\n    if token in d:\n        d[token] += 1\n    else:\n        d[token] = 1\n\nprint(d)'"
Debugging/conditional_breakpoint.py,0,"b'expense_list = [1230, 2240, 1500, 1678, 2020, 1580, 2240, 1500, 1245, 2300, 1246, 3400, 1580, 2240, 1500, 3240, 2240, 1500, 1245, 2300, 1246, 3400, 1580, 2240, 2467, 1245, 2300, 1246, 3400, 1580, 2240, 1500, 3240, 2240, 1500, 1245, 2300, 1246, 3400, 1580, 2240]\ntotal_expense = 0\nfor expense in expense_list:\n    total_expense += expense\n\nprint(""total expense is: "", total_expense)\n\n'"
Debugging/debugging.py,0,"b""def add_num(a,b):\n    '''Return sum of two numbers'''\n    s=a+b\n    return s\n\nn1=input('enter first number:')\nn1=int(n1)\nn2=input('enter second number:')\nn2=int(n2)\ns = add_num(n1,n2)\nprint ('sum is: ',s);"""
Debugging/watches_callstack.py,0,b'def foo():\n    bar()\n\ndef bar():\n    pass\n\nfoo()\n\n\n\n'
Modules/argparse_tutorial.py,0,"b'import argparse\n\nif __name__ == ""__main__"":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(""--number1"", help=""first number"")\n    parser.add_argument(""--number2"", help=""second number"")\n    parser.add_argument(""--operation"", help=""operation"", \\\n                        choices=[""add"",""subtract"",""multiply""])\n\n    args = parser.parse_args()\n\n    print(args.number1)\n    print(args.number2)\n    print(args.operation)\n\n    n1=int(args.number1)\n    n2=int(args.number2)\n    result = None\n    if args.operation == ""add"":\n        result=n1+n2\n    elif args.operation == ""subtract"":\n        result=n1-n2\n    elif args.operation == ""multiply"":\n        result=n1*n2\n\n\n    print(""Result:"",result)'"
Modules/pandas_tutorial.py,0,"b'""""""\nIntroducing pandas using namespace pd,\nsuch that you can call pandas class using pd instead of pandas.\n""""""\n\nimport pandas as pd\n\n# Dict object, with arbitrary data.\nstats = {\n    \'Month\': [\'Jan\', \'Feb\', \'March\', \'April\'],\n    \'Expenses\': [2350, 3400, 2700, 2200],\n    \'Income\': [4000, 4000, 4000, 4000]\n}\n\n# stats is now a pandas data frame object.\ndf = pd.DataFrame(stats)\n# df = df.set_index(\'Month\')\nprint(df.Month)\n'"
Modules/urllib_demo.py,0,"b""from urllib.request import urlopen\nwith urlopen('http://www.agilemanifesto.org/') as response:\n     for line in response:\n         line = line.decode('utf-8')  # Decoding the binary data to text.\n         print(line)\n"""
Multiprocessing/multiprocessing_introduction.py,0,"b'import time\nimport multiprocessing\n\ndef calc_square(numbers):\n    for n in numbers:\n        print(\'square \' + str(n*n))\n\ndef calc_cube(numbers):\n    for n in numbers:\n        print(\'cube \' + str(n*n*n))\n\nif __name__ == ""__main__"":\n    arr = [2,3,8]\n    p1 = multiprocessing.Process(target=calc_square, args=(arr,))\n    p2 = multiprocessing.Process(target=calc_cube, args=(arr,))\n\n    p1.start()\n    p2.start()\n\n    p1.join()\n    p2.join()\n\n    print(""Done!"")'"
Multiprocessing/multiprocessing_lock.py,0,"b""import time\nimport multiprocessing\n\ndef deposit(balance, lock):\n    for i in range(100):\n        time.sleep(0.01)\n        lock.acquire()\n        balance.value = balance.value + 1\n        lock.release()\n\ndef withdraw(balance, lock):\n    for i in range(100):\n        time.sleep(0.01)\n        lock.acquire()\n        balance.value = balance.value - 1\n        lock.release()\n\nif __name__ == '__main__':\n    balance = multiprocessing.Value('i', 200)\n    lock = multiprocessing.Lock()\n    d = multiprocessing.Process(target=deposit, args=(balance,lock))\n    w = multiprocessing.Process(target=withdraw, args=(balance,lock))\n    d.start()\n    w.start()\n    d.join()\n    w.join()\n    print(balance.value)\n"""
Multiprocessing/multiprocessing_pool.py,0,"b'from multiprocessing import Pool\n\n\ndef f(n):\n    return n*n\n\nif __name__ == ""__main__"":\n    p = Pool(processes=3)\n    result = p.map(f,[1,2,3,4,5])\n    for n in result:\n        print(n)\n'"
Multiprocessing/multiprocessing_queue_pipe.py,0,"b'import multiprocessing\n\ndef calc_square(numbers, q):\n    for n in numbers:\n        q.put(n*n)\n\nif __name__ == ""__main__"":\n    numbers = [2,3,5]\n    q = multiprocessing.Queue()\n    p = multiprocessing.Process(target=calc_square, args=(numbers,q))\n\n    p.start()\n    p.join()\n\n    while q.empty() is False:\n        print(q.get())\n\n\n\n\n'"
Multiprocessing/multiprocessing_value_array.py,0,"b'import multiprocessing\n\ndef calc_square(numbers, result, v):\n    v.value = 5.67\n    for idx, n in enumerate(numbers):\n        result[idx] = n*n\n\nif __name__ == ""__main__"":\n    numbers = [2,3,5]\n    result = multiprocessing.Array(\'i\',3)\n    v = multiprocessing.Value(\'d\', 0.0)\n    p = multiprocessing.Process(target=calc_square, args=(numbers, result, v))\n\n    p.start()\n    p.join()\n\n    print(v.value)'"
Multiprocessing/multithreading_producer_consumer.py,0,"b'import time\nfrom random import randint\nimport threading\n\nqueue = []\n\ndef produce():\n    for i in range(0,5):\n        time.sleep(1)\n        queue.append(randint(0,9))\n\ndef consume():\n    while True:\n        if len(queue) > 0:\n            \n\nif ""__name__""==""__main__"":\n    p = threading.Thread(target=produce)\n    c = threading.Thread(target=consume)\n\n'"
Multiprocessing/multthreading_introduction.py,0,"b'import time\nimport threading\n\ndef calc_square(numbers):\n    print(""calculate square numbers"")\n    for n in numbers:\n        time.sleep(1)\n        print(\'square:\',n*n)\n\ndef calc_cube(numbers):\n    print(""calculate cube of numbers"")\n    for n in numbers:\n        time.sleep(1)\n        print(\'cube:\',n*n*n)\n\narr = [2,3,8,9]\n\nt = time.time()\n\nt1= threading.Thread(target=calc_square, args=(arr,))\nt2= threading.Thread(target=calc_cube, args=(arr,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint(""done in : "",time.time()-t)\nprint(""Hah... I am done with all my work now!"")\n'"
jupyter/pandas_tutorial_on_stock_price.py,0,"b'# Pandas Tutorial On Stock Price Analysis\n\n# This tutorial will cover how to retrieve stock price from google finance using pandas data reader. The analysis of stock is done by plotting its high, low, close, volumne values in table and a chart. Charts are of two types,\n# \n# 1. Line Chart\n# 2. Bar Chart\n# \n# If you don\'t know what is stock then first **watch this video to gain understanding on fundamentals of stocks and investing**,\n# https://www.youtube.com/embed/XRO6lEu9-5w\n\nimport pandas.io.data as web\ndf = web.DataReader(\'AAPL\', \'google\', \'2016/1/1\', \'2017/1/1\')\ndf.head()\ndf.plot(y=\'Close\', color=""Green"")\ndf.plot.bar(y=\'Volume\')\n\n'"
numpy/numpy_tutorail_2.py,1,"b'import numpy as np\n\na=np.array([[1,2,3],[4,5,6]])\n'"
numpy/numpy_tutorial.py,2,"b'import numpy as np\nimport time\nimport sys\nSIZE = 1000000\nl1 = range(SIZE)\nl2 = range(SIZE)\na1=np.arange(SIZE)\na2=np.arange(SIZE)\n\n# python list\nstart = time.time()\nresult = [(x+y) for x,y in zip(l1,l2)]\nprint(""python list took: "",(time.time()-start)*1000)\n# numpy array\nstart= time.time()\nresult = a1 + a2\nprint(""numpy took: "", (time.time()-start)*1000)\n\n\n'"
unittesting_pytest/init.py,0,b''
DataStructures/3_LinkedList/3_linked_list.py,0,"b'class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def print(self):\n        if self.head is None:\n            print(""Linked list is empty"")\n            return\n        itr = self.head\n        llstr = \'\'\n        while itr:\n            llstr += str(itr.data) + \' --> \'\n            itr = itr.next\n        print(llstr)\n\n    def get_length(self):\n        count = 0\n        itr = self.head\n        while itr:\n            count+=1\n            itr = itr.next\n\n        return count\n\n    def insert_at_begining(self, data):\n        node = Node(data, self.head)\n        self.head = node\n\n    def insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data, None)\n            return\n\n        itr = self.head\n\n        while itr.next:\n            itr = itr.next\n\n        itr.next = Node(data, None)\n\n    def insert_at(self, index, data):\n        if index<0 or index>self.get_length():\n            raise Exception(""Invalid Index"")\n\n        if index==0:\n            self.insert_at_begining(data)\n            return\n\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                node = Node(data, itr.next)\n                itr.next = node\n                break\n\n            itr = itr.next\n            count += 1\n\n    def remove_at(self, index):\n        if index<0 or index>=self.get_length():\n            raise Exception(""Invalid Index"")\n\n        if index==0:\n            self.head = self.head.next\n            return\n\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                itr.next = itr.next.next\n                break\n\n            itr = itr.next\n            count+=1\n\n    def insert_values(self, data_list):\n        self.head = None\n        for data in data_list:\n            self.insert_at_end(data)\n\n\nif __name__ == \'__main__\':\n    ll = LinkedList()\n    ll.insert_values([""banana"",""mango"",""grapes"",""orange""])\n    ll.insert_at(1,""blueberry"")\n    ll.remove_at(2)\n    ll.print()\n\n    ll.insert_values([45,7,12,567,99])\n    ll.insert_at_end(67)\n    ll.print()\n\n'"
DataStructures/7_Tree/7_tree.py,0,"b'class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.children = []\n        self.parent = None\n\n    def get_level(self):\n        level = 0\n        p = self.parent\n        while p:\n            level += 1\n            p = p.parent\n\n        return level\n\n    def print_tree(self):\n        spaces = \' \' * self.get_level() * 3\n        prefix = spaces + ""|__"" if self.parent else """"\n        print(prefix + self.data)\n        if self.children:\n            for child in self.children:\n                child.print_tree()\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\ndef build_product_tree():\n    root = TreeNode(""Electronics"")\n\n    laptop = TreeNode(""Laptop"")\n    laptop.add_child(TreeNode(""Mac""))\n    laptop.add_child(TreeNode(""Surface""))\n    laptop.add_child(TreeNode(""Thinkpad""))\n\n    cellphone = TreeNode(""Cell Phone"")\n    cellphone.add_child(TreeNode(""iPhone""))\n    cellphone.add_child(TreeNode(""Google Pixel""))\n    cellphone.add_child(TreeNode(""Vivo""))\n\n    tv = TreeNode(""TV"")\n    tv.add_child(TreeNode(""Samsung""))\n    tv.add_child(TreeNode(""LG""))\n\n    root.add_child(laptop)\n    root.add_child(cellphone)\n    root.add_child(tv)\n\n    root.print_tree()\n\nif __name__ == \'__main__\':\n    build_product_tree()'"
DataStructures/8_Binary_Tree_1/binary_tree_part_1.py,0,"b'class BinarySearchTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def add_child(self, data):\n        if data == self.data:\n            return # node already exist\n\n        if data < self.data:\n            if self.left:\n                self.left.add_child(data)\n            else:\n                self.left = BinarySearchTreeNode(data)\n        else:\n            if self.right:\n                self.right.add_child(data)\n            else:\n                self.right = BinarySearchTreeNode(data)\n\n\n    def search(self, val):\n        if self.data == val:\n            return True\n\n        if val < self.data:\n            if self.left:\n                return self.left.search(val)\n            else:\n                return False\n\n        if val > self.data:\n            if self.right:\n                return self.right.search(val)\n            else:\n                return False\n\n    def in_order_traversal(self):\n        elements = []\n        if self.left:\n            elements += self.left.in_order_traversal()\n\n        elements.append(self.data)\n\n        if self.right:\n            elements += self.right.in_order_traversal()\n\n        return elements\n\n\ndef build_tree(elements):\n    print(""Building tree with these elements:"",elements)\n    root = BinarySearchTreeNode(elements[0])\n\n    for i in range(1,len(elements)):\n        root.add_child(elements[i])\n\n    return root\n\nif __name__ == \'__main__\':\n    countries = [""India"",""Pakistan"",""Germany"", ""USA"",""China"",""India"",""UK"",""USA""]\n    country_tree = build_tree(countries)\n\n    print(""UK is in the list? "", country_tree.search(""UK""))\n    print(""Sweden is in the list? "", country_tree.search(""Sweden""))\n\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    print(""In order traversal gives this sorted list:"",numbers_tree.in_order_traversal())'"
DataStructures/9_Binary_Tree_2/binary_tree_part_2.py,0,"b'class BinarySearchTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def add_child(self, data):\n        if data == self.data:\n            return # node already exist\n\n        if data < self.data:\n            if self.left:\n                self.left.add_child(data)\n            else:\n                self.left = BinarySearchTreeNode(data)\n        else:\n            if self.right:\n                self.right.add_child(data)\n            else:\n                self.right = BinarySearchTreeNode(data)\n\n\n    def search(self, val):\n        if self.data == val:\n            return True\n\n        if val < self.data:\n            if self.left:\n                return self.left.search(val)\n            else:\n                return False\n\n        if val > self.data:\n            if self.right:\n                return self.right.search(val)\n            else:\n                return False\n\n    def in_order_traversal(self):\n        elements = []\n        if self.left:\n            elements += self.left.in_order_traversal()\n\n        elements.append(self.data)\n\n        if self.right:\n            elements += self.right.in_order_traversal()\n\n        return elements\n\n    def delete(self, val):\n        if val < self.data:\n            if self.left:\n                self.left = self.left.delete(val)\n        elif val > self.data:\n            if self.right:\n                self.right = self.right.delete(val)\n        else:\n            if self.left is None and self.right is None:\n                return None\n            elif self.left is None:\n                return self.right\n            elif self.right is None:\n                return self.right\n\n            min_val = self.right.find_min()\n            self.data = min_val\n            self.right = self.right.delete(min_val)\n\n        return self\n\n    def find_max(self):\n        if self.right is None:\n            return self.data\n        return self.right.find_max()\n\n    def find_min(self):\n        if self.left is None:\n            return self.data\n        return self.left.find_min()\n\n\ndef build_tree(elements):\n    print(""Building tree with these elements:"",elements)\n    root = BinarySearchTreeNode(elements[0])\n\n    for i in range(1,len(elements)):\n        root.add_child(elements[i])\n\n    return root\n\nif __name__ == \'__main__\':\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    numbers_tree.delete(20)\n    print(""After deleting 20 "",numbers_tree.in_order_traversal()) # this should print [1, 4, 9, 17, 18, 23, 34]\n\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    numbers_tree.delete(9)\n    print(""After deleting 9 "",numbers_tree.in_order_traversal())  # this should print [1, 4, 17, 18, 20, 23, 34]\n\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    numbers_tree.delete(17)\n    print(""After deleting 17 "",numbers_tree.in_order_traversal())  # this should print [1, 4, 9, 18, 20, 23, 34]'"
ML/1_linear_reg/linearReg.py,0,"b""# Data Preprocessing Template\n\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('Data.csv')\n\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nsc_y = StandardScaler()\ny_train = sc_y.fit_transform(y_train)\n"""
ML/3_gradient_descent/gradient_descent.py,2,"b'import numpy as np\n\ndef gradient_descent(x,y):\n    m_curr = b_curr = 0\n    iterations = 10000\n    n = len(x)\n    learning_rate = 0.08\n\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (""m {}, b {}, cost {} iteration {}"".format(m_curr,b_curr,cost, i))\n\nx = np.array([1,2,3,4,5])\ny = np.array([5,7,9,11,13])\n\ngradient_descent(x,y)'"
pandas/1_intro/pandas_intro.py,0,"b'# This program shows that without using pandas getting answers on below questions is hard and not convinient\n# (1) Max temperature in New York in month of January\n# (2) List of days when it rained\n# (3) Average speed of wind in month of january\n__parsed_rows = []\n\ndef parse_csv():\n    import csv\n    __file_path = ""nyc_weather.csv""\n    __index = {\n        \'date\': 0,\n        \'temperature\': 1,\n        \'DewPoint\': 2,\n        \'Humidity\': 3,\n        \'Sea_Level_PressureIn\': 4,\n        \'VisibilityMiles\': 5,\n        \'WindSpeedMPH\': 6,\n        \'PrecipitationIn\': 7,\n        \'CloudCover\': 8,\n        \'Events\' : 9,\n        \'WindDirDegrees\': 10\n    }\n\n    global __parsed_rows\n    with open(__file_path, ""r"") as f:\n        reader = csv.reader(f)\n        next(reader, None)\n        for row in reader:\n            __parsed_rows.append({\n                \'date\':  row[__index[\'date\']],\n                \'temperature\': row[__index[\'temperature\']],\n                \'DewPoint\': row[__index[\'DewPoint\']],\n                \'Humidity\': row[__index[\'Humidity\']],\n                \'Sea_Level_PressureIn\': row[__index[\'Sea_Level_PressureIn\']],\n                \'VisibilityMiles\': row[__index[\'VisibilityMiles\']],\n                \'WindSpeedMPH\': row[__index[\'WindSpeedMPH\']],\n                \'PrecipitationIn\': row[__index[\'PrecipitationIn\']],\n                \'CloudCover\': row[__index[\'CloudCover\']],\n                \'Events\': row[__index[\'Events\']],\n                \'WindDirDegrees\': row[__index[\'WindDirDegrees\']]\n            })\n\n\ndef get_days_for_event(event_name):\n    days = []\n    for row in __parsed_rows:\n        if row[\'Events\'] == event_name:\n            days.append(row[\'date\'])\n    return days\n\ndef get_max_temperature():\n    max_temp = 0\n    for row in __parsed_rows:\n        if int(row[\'temperature\']) > max_temp:\n            max_temp = int(row[\'temperature\'])\n    return max_temp\n\ndef get_average_wind_speed():\n    total = 0\n    count = 0\n    for row in __parsed_rows:\n        speed = 0 if row[\'WindSpeedMPH\']==\'\' else int(row[\'WindSpeedMPH\'])\n        total += speed\n        count+=1\n    return total/count\n\nif __name__==""__main__"":\n    parse_csv()\n\n    print(""Max temperature is: "",get_max_temperature())\n    print (""Days of rain: "", get_days_for_event(\'Rain\'))\n    print(""Average wind speed is: "", get_average_wind_speed())\n\n\n\n\n\n'"
unittesting_pytest/custom_markers/mathlib.py,0,"b'def calc_total(a,b):\n    return a+b\n\ndef calc_multiply(a,b):\n    return a*b\n\n\n\n\n\n\n\n'"
unittesting_pytest/custom_markers/test_mathlib.py,0,b'import mathlib\nimport pytest\n\n@pytest.mark.windows\ndef test_windows_1():\n    assert True\n\n@pytest.mark.windows\ndef test_windows_2():\n    assert True\n\n@pytest.mark.mac\ndef test_mac_1():\n    assert True\n\n@pytest.mark.mac\ndef test_mac_2():\n    assert True'
unittesting_pytest/fixtures/__init__.py,0,b''
unittesting_pytest/fixtures/mydb.py,0,"b'class MyDB:\n    def __init__(self):\n        self.connection = Connection()\n\n    def connect(self, connection_string):\n        return self.connection\n\nclass Connection:\n    def __init__(self):\n        self.cur = Cursor()\n\n    def cursor(self):\n        return self.cur\n\n    def close(self):\n        pass\n\nclass Cursor():\n    def execute(self, query):\n        if query == ""select id from employee_db where name=John"":\n            return 123\n        elif query == ""select id from employee_db where name=Tom"":\n            return 789\n        else:\n            return -1\n\n    def close(self):\n        pass\n\n\n\n'"
unittesting_pytest/fixtures/test_mydb.py,0,"b'from fixtures.mydb import MyDB\n\nimport pytest\n\n@pytest.fixture(scope=""module"")\ndef cur():\n    print(""setting up"")\n    db = MyDB()\n    conn = db.connect(""server"")\n    curs = conn.cursor()\n    yield curs\n    curs.close()\n    conn.close()\n    print(""closing DB"")\n\ndef test_johns_id(cur):\n    id = cur.execute(""select id from employee_db where name=John"")\n    assert id == 123\n\ndef test_toms_id(cur):\n    id = cur.execute(""select id from employee_db where name=Tom"")\n    assert id == 789\n'"
unittesting_pytest/parametrize/mathlib.py,0,b'def calc_square(num):\n    return num*num'
unittesting_pytest/parametrize/test_mathlib.py,0,"b'import mathlib\nimport pytest\n\n@pytest.mark.parametrize(""test_input, expected_output"",\n                         [\n                             (5, 25),\n                             (9, 81),\n                             (10, 100)\n                         ]\n                         )\ndef test_calc_square(test_input, expected_output):\n    result = mathlib.calc_square(test_input)\n    assert result == expected_output\n\n'"
Basics/Hindi/10_name_/caller.py,0,"b'import utility\n\nprint(""In caller.py: "",__name__)\n'"
Basics/Hindi/10_name_/utility.py,0,"b'def foo():\n    print(""In utility.py ==> foo()"")\n\nif __name__==\'__main__\':\n    foo()\n\n\n\n\n\n'"
Basics/Hindi/12_read_write_file/12_read_write_file.py,0,"b'# read file\nf=open(""funny.txt"",""r"")\nfor line in f:\n    print(line)\nf.close()\n\n# readlines()\nf=open(""funny.txt"",""r"")\nlines = f.readlines()\nprint(lines)\n\n# write file\nf=open(""love.txt"",""w"")\nf.write(""I love python"")\nf.close()\n\n# same file when you write i love javascript the previous line goes away\nf=open(""love.txt"",""w"")\nf.write(""I love javascript"")\nf.close()\n\n# You can use append mode to stop having previous lines overwritten\nf=open(""love.txt"",""a"")\nf.write(""I love javascript"")\nf.close()\n\n# show a picture of file open modes (12:12 in old video)\n\n# writelines\nf=open(""love.txt"",""w"")\nf.writelines([""I love C++\\n"",""I love scala""])\nf.close()\n\n# with statement\nwith open(""funny.txt"",""r"") as f:\n    for line in f:\n        print(line)\n\n# https://www.cricketworldcup.com/teams/india/players/107\nplayer_scores = {}\nwith open(""scores.csv"",""r"") as f:\n    for line in f:\n        tokens = line.split(\',\')\n        player = tokens[0]\n        score = int(tokens[1])\n        if player in player_scores:\n            player_scores[player].append(score)\n        else:\n            player_scores[player] = [score]\n\nprint(player_scores)\n\nfor player, score_list in player_scores.items():\n    min_score=min(score_list)\n    max_score=max(score_list)\n    avg_score=sum(score_list)/len(score_list)\n\n    print(f""{player}==>Min:{min_score}, Max:{max_score}, Avg:{avg_score}"")\n'"
Basics/Hindi/1_Variables/1_variables.py,0,"b'rent=8000\npetrol=500.5\ngroceries=2050.5\nprint(rent)\ntotal=rent+petrol+groceries\n\ngabbar=""amjad khan""\njay=""amitabh""\nthakur=""sanjiv kumar""\n\nprint(""actors in sholey: "",gabbar,jay,thakur)\n\nprint(type(rent))\nprint(type(groceries))\nprint(type(gabbar))\n\n# boolean\nlearn_python=True\nlearn_fortran=False\n\n# variable naming rules\n# no keywords: example True, for\n# no special characters: foo+bar\n# they must begin with a letter or _\n# other characters can be letters (a to Z, A to Z) or numbers (0 to 9)\n# names are case sensitive\n\nbade_bhai=10\nbade_Bhai=5\nprint(bade_bhai)\nprint(bade_Bhai)\n\n# above naming convention is called snake_case\n\n# In python you can assign variable any value, not like strict typed language where\n# you have to declare data type of a variable in advance\n\nfoo=5\nfoo=""jalebi""\nbar=foo\nprint(""bar id"",id(bar))\nprint(""foo id"",id(foo))\nbar=""samosa""\nfoo=""kachodi"" # at this point nothing is point to jalebi object and it will be garbage collected'"
Basics/Hindi/2_numbers/2_numbers.py,0,"b'# 1. Use python to find area of triangle\n# area = (1/2)*base*height\nbase=10.26\nheight=20.572\narea=(1/2)*base*height\nprint(""area is:"",area) # area is: 105.53435999999999\n# to show area till 2 decimal places\nprint(""area rounded to 2 decimal place:"",round(area,2)) # 105.53\n\n# 2. basic airthmetic using numbers\nprint(1+2) # 3\nprint(1/2) # 0.5\nprint(17%3) # 2\nprint(3**2) # 9\nprint(10+2*3) # 16\nprint((10+2)*3) # 36\n\n# 3. Number data types (int, float, complex numbers)\nprint(type(area)) # float\nfoo=2.3e-3\nprint(foo) # 0.0023\nprint(type(1)) # int\nprint(0x12) # 18\nprint(type(0x12)) # int\nc1=2+3j\nprint(type(c1)) # complex\nc2=3-4j\nprint(c1+c2) # 5-j\n\n# 4. Internal representation of numbers\n# (a) integers are stored in simple binary format\nprint(format(5,\'b\')) # 4 bytes (or 32 bits), visual of binary presentation\n# (b) floats use IEEE754 standard : https://en.wikipedia.org/wiki/IEEE_754\nprint(6-5.7) # this prints 0.29999999 and not 0.3. why? Due to IEEE 754 standard\n\n\n\n'"
Basics/Hindi/4_user_input/4_user_input.py,0,"b'n1=input(""Enter first number"")\nn2=input(""Enter second number"")\nsum=float(n1)+float(n2)\nprint(""Sum is:"",sum)'"
Basics/Hindi/6_if/6_if.py,0,"b'# while mentioning topics say that timeline is in video description\n# so you don\'t need to watch entire video\n\nn=input(""Enter a number"")\nn=int(n)\nif n%2==0:\n    print(""Number is even"")\nelse:\n    print(""Number is odd"")\n\n\t\n# Show the execution by debugging\n# If is called control statement as it controls the flow of code execution\n\n# go to idle and explain different operators\n\n# ==\n# !=\n# >\n# <\n# >=\n# <=\n#\n# 3>2 and 4>1\n# 3>1 or 4>8\n# not 4==4\n\n\n# Cousine checker. Explains if..elif..else\nindian=[""samosa"",""kachori"",""dal"",""naan""]\npakistani=[""nihari"",""paya"",""karahi""]\nbangladesi=[""panta bhat"",""chorchori"",""fuchka""]\n\ndish=input(""Enter a dish name:"")\n\nif dish in indian:\n    print(f""{dish} is Indian"")\nelif dish in pakistani:\n    print(f""{dish} is pakistani"")\nelif dish in bangladesi:\n    print(f""{dish} is bangladesi"")\nelse:\n    print(f""Based on my limited knowledge, I don\'t know which cuisine is {dish}"")\n\t\n\n# Ternary operator\nprint(""Ternary operator demo"")\nn=input(""Enter a number:"")\nn=int(n)\nmessage=""Number is even"" if n%2==0 else ""Number is odd""\nprint(message)\t\n'"
Basics/Hindi/7_for/7_for.py,0,"b'# expense total using simple sum\nexpenses = [1200,1500,1300,1700]\ntotal = expenses[0] + expenses[1] + expenses[2] + expenses[3]\nprint(total)\n\n# expense total using for loop\ntotal = 0\nfor expense in expenses:\n    total = total + expense\nprint(total)\n\n# explain for loop iterations by debugging code\n\n# range() function\nprint(range(1,11))\nprint(list(range(1,11)))\nfor i in range(1,11):\n    print(i)\n\n# in monthly expense list print month number, expense and then total\ntotal = 0\nfor i in range(len(expenses)):\n    print(f""Month {i+1}, expense: {expenses[i]}"")\n    total += expenses[i]\nprint(f""Total expenses is {total}"")\n\n# break\nkey_location=""chair""\nlocations = [""sofa"",""garage"",""chair"",""table"",""closet""]\nfor loc in locations:\n    if loc == key_location:\n        print(""Key found at:"",loc)\n        break\n    else:\n        print(""Key not found in:"",loc)\n\n# continue: print odd numbers between 1 to 10\nfor i in range(11):\n    if i%2==0:\n        continue\n    print(i)\n\n# while loop\nnum=0\nwhile num<=10:\n    print(num)\n    num=num+1'"
Basics/Hindi/7_for/for_loop.py,0,b'# while loop\nn=0\n\nwhile n<=10:\n    print(n)\n    n=n+1\n'
Basics/Hindi/8_functions/8_functions.py,0,"b'# Calculate expense sum for two lists without function\nbharat_expenses = [20,30,45]\nbilal_expenses = [45,67,34]\n\ntotal=0\nfor item in bharat_expenses:\n    total+=item\nprint(""Bharat\'s total:"",total)\n\ntotal=0\nfor item in bilal_expenses:\n    total+=item\nprint(""Bilal\'s total:"",total)\n\n# Calculate expense sum for two lists by using a function\ndef find_total(exp):\n    \'\'\'\n    This function takes list of numbers as input and returns sum of that list\n    :param exp: input list\n    :return: total sum\n    \'\'\'\n    total=0\n    for item in exp:\n        total+=item\n    return total\n\nbharat_total=find_total(bharat_expenses)\nprint(""Bharat\'s total:"",bharat_total)\n\nbilal_total=find_total(bilal_expenses)\nprint(""Bilal\'s total:"",bilal_total)\n\n# Explain argument, return value, function body with visuals\n\n# documentation strings\nprint(help(find_total))\n\n# Positional argument vs named arguments\ndef cylinder_volume(radius,height=1):\n    print(""radius is:"",radius)\n    print(""height is:"",height)\n    area = 3.14*(radius**2)*height\n    return area\n\nr=5\nh=10\nprint(cylinder_volume(height=h,radius=r))\n\n# default arguments\nr=5\nh=10\nprint(cylinder_volume(radius=r))\n\n# global vs local variables\n'"
Basics/Hindi/9_modules/main.py,0,"b'# import sys\n# sys.path.append(""C:\\\\Code\\\\modules"")\n\nfrom utility import area\n\nprint(area.area_circle(3))\nprint(area.area_square(3))'"
DataScience/BangloreHomePrices/server/server.py,0,"b'from flask import Flask, request, jsonify\nimport util\n\napp = Flask(__name__)\n\n@app.route(\'/get_location_names\', methods=[\'GET\'])\ndef get_location_names():\n    response = jsonify({\n        \'locations\': util.get_location_names()\n    })\n    response.headers.add(\'Access-Control-Allow-Origin\', \'*\')\n\n    return response\n\n@app.route(\'/predict_home_price\', methods=[\'GET\', \'POST\'])\ndef predict_home_price():\n    total_sqft = float(request.form[\'total_sqft\'])\n    location = request.form[\'location\']\n    bhk = int(request.form[\'bhk\'])\n    bath = int(request.form[\'bath\'])\n\n    response = jsonify({\n        \'estimated_price\': util.get_estimated_price(location,total_sqft,bhk,bath)\n    })\n    response.headers.add(\'Access-Control-Allow-Origin\', \'*\')\n\n    return response\n\nif __name__ == ""__main__"":\n    print(""Starting Python Flask Server For Home Price Prediction..."")\n    util.load_saved_artifacts()\n    app.run()'"
DataScience/BangloreHomePrices/server/util.py,1,"b'import pickle\nimport json\nimport numpy as np\n\n__locations = None\n__data_columns = None\n__model = None\n\ndef get_estimated_price(location,sqft,bhk,bath):\n    try:\n        loc_index = __data_columns.index(location.lower())\n    except:\n        loc_index = -1\n\n    x = np.zeros(len(__data_columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index>=0:\n        x[loc_index] = 1\n\n    return round(__model.predict([x])[0],2)\n\n\ndef load_saved_artifacts():\n    print(""loading saved artifacts...start"")\n    global  __data_columns\n    global __locations\n\n    with open(""./artifacts/columns.json"", ""r"") as f:\n        __data_columns = json.load(f)[\'data_columns\']\n        __locations = __data_columns[3:]  # first 3 columns are sqft, bath, bhk\n\n    global __model\n    if __model is None:\n        with open(\'./artifacts/banglore_home_prices_model.pickle\', \'rb\') as f:\n            __model = pickle.load(f)\n    print(""loading saved artifacts...done"")\n\ndef get_location_names():\n    return __locations\n\ndef get_data_columns():\n    return __data_columns\n\nif __name__ == \'__main__\':\n    load_saved_artifacts()\n    print(get_location_names())\n    print(get_estimated_price(\'1st Phase JP Nagar\',1000, 3, 3))\n    print(get_estimated_price(\'1st Phase JP Nagar\', 1000, 2, 2))\n    print(get_estimated_price(\'Kalhalli\', 1000, 2, 2)) # other location\n    print(get_estimated_price(\'Ejipura\', 1000, 2, 2))  # other location'"
DataStructures/2_Arrays/Solution/1_expenses.py,0,"b'# 1. Let us say your expense for every month are listed below,\n# \t1. January -  2200\n#  \t2. February - 2350\n#     3. March - 2600\n#     4. April - 2130\n#     5. May - 2190\n#\n# Create a list to store these monthly expenses and using that find out,\n#\n# 1. In Feb, how many dollars you spent extra compare to January?\n# 2. Find out your total expense in first quarter (first three months) of the year.\n# 3. Find out if you spent exactly 2000 dollars in any month\n# 4. June month just finished and your expense is 1980 dollar. Add this item to our monthly expense list\n# 5. You returned an item that you bought in a month of April and\n# got a refund of 200$. Make a correction to your monthly expense list\n# based on this\n\nexp = [2200,2350,2600,2130,2190]\n\n# 1. In Feb, how many dollars you spent extra compare to January?\nprint(""In feb this much extra was spent compared to jan:"",exp[1]-exp[0]) # 150\n\n# 2. Find out your total expense in first quarter (first three months) of the year\nprint(""Expense for first quarter:"",exp[0]+exp[1]+exp[2]) # 7150\n\n# 3. Find out if you spent exactly 2000 dollars in any month\nprint(""Did I spent 2000$ in any month? "", 2000 in exp) # False\n\n# 4. June month just finished and your expense is 1980 dollar. Add this item to our monthly expense list\nexp.append(1980)\nprint(""Expenses at the end of June:"",exp) # [2200, 2350, 2600, 2130, 2190, 1980]\n\n# 5. You returned an item that you bought in a month of April and\n# got a refund of 200$. Make a correction to your monthly expense list\n# based on this\nexp[3] = exp[3] - 200\nprint(""Expenses after 200$ return in April:"",exp) # [2200, 2350, 2600, 1930, 2190, 1980]\n'"
DataStructures/2_Arrays/Solution/2_marvel.py,0,"b""# 2. You have a list of your favourite marvel super heros\n# heros=['spider man','thor','hulk','iron man','captain america']\n# Using this list\n\nheros=['spider man','thor','hulk','iron man','captain america']\n# 1. Length of the list\nprint(len(heros))\n# 2. Add 'black panther' at the end of this list\nheros.append('black panther')\nprint(heros)\n# 3. You realize that you need to add 'black panther' after 'hulk',\n# so remove it from the list first and then add it after 'hulk'\nheros.remove('black panther')\nheros.insert(3,'black panther')\nprint(heros)\n# 4. Now you don't like thor and hulk because they get angry easily :)\n#    So you want to remove thor and hulk from list and replace them with doctor strange (because he is cool).\n#    Do that with one line of code.\nheros[1:3]=['doctor strange']\nprint(heros)\n# 5. Sort the list in alphabetical order\nheros.sort()\nprint(heros)\n"""
DataStructures/2_Arrays/Solution/3_odd_even_numbers.py,0,"b'max = int(input(""Enter max number: ""))\n\nodd_numbers = []\n\nfor i in range(max):\n    if i%2 == 1:\n        odd_numbers.append(i)\n\nprint(""Odd numbers: "",odd_numbers)\n'"
DataStructures/3_LinkedList/Solution/doubly_linked_list_exercise.py,0,"b'class Node:\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def print_forward(self):\n        if self.head is None:\n            print(""Linked list is empty"")\n            return\n\n        itr = self.head\n        llstr = \'\'\n        while itr:\n            llstr += str(itr.data) + \' --> \'\n            itr = itr.next\n        print(llstr)\n\n    def print_backward(self):\n        if self.head is None:\n            print(""Linked list is empty"")\n            return\n\n        last_node = self.get_last_node()\n        itr = last_node\n        llstr = \'\'\n        while itr:\n            llstr += itr.data + \'-->\'\n            itr = itr.prev\n        print(""Link list in reverse: "", llstr)\n\n    def get_last_node(self):\n        itr = self.head\n        while itr.next:\n            itr = itr.next\n\n        return itr\n\n    def get_length(self):\n        count = 0\n        itr = self.head\n        while itr:\n            count+=1\n            itr = itr.next\n\n        return count\n\n    def insert_at_begining(self, data):\n        node = Node(data, self.head, None)\n        self.head.prev = node\n        self.head = node\n\n    def insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data, None, None)\n            return\n\n        itr = self.head\n\n        while itr.next:\n            itr = itr.next\n\n        itr.next = Node(data, None, itr)\n\n    def insert_at(self, index, data):\n        if index<0 or index>self.get_length():\n            raise Exception(""Invalid Index"")\n\n        if index==0:\n            self.insert_at_begining(data)\n            return\n\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                node = Node(data, itr.next, itr)\n                if node.next:\n                    node.next.prev = node\n                itr.next = node\n                break\n\n            itr = itr.next\n            count += 1\n\n    def remove_at(self, index):\n        if index<0 or index>=self.get_length():\n            raise Exception(""Invalid Index"")\n\n        if index==0:\n            self.head = self.head.next\n            self.head.prev = None\n            return\n\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index:\n                itr.prev.next = itr.next\n                if itr.next:\n                    itr.next.prev = itr.prev\n                break\n\n            itr = itr.next\n            count+=1\n\n    def insert_values(self, data_list):\n        self.head = None\n        for data in data_list:\n            self.insert_at_end(data)\n\n\nif __name__ == \'__main__\':\n    ll = DoublyLinkedList()\n    ll.insert_values([""banana"",""mango"",""grapes"",""orange""])\n    ll.print_forward()\n    ll.print_backward()\n    ll.insert_at_end(""figs"")\n    ll.print_forward()\n    ll.insert_at(0,""jackfruit"")\n    ll.print_forward()\n    ll.insert_at(6,""dates"")\n    ll.print_forward()\n    ll.insert_at(2,""kiwi"")\n    ll.print_forward()\n\n\n'"
DataStructures/3_LinkedList/Solution/singly_linked_list_exercise.py,0,"b'class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def print(self):\n        if self.head is None:\n            print(""Linked list is empty"")\n            return\n\n        itr = self.head\n        llstr = \'\'\n        while itr:\n            llstr += str(itr.data) + \' --> \'\n            itr = itr.next\n        print(llstr)\n\n    def get_length(self):\n        count = 0\n        itr = self.head\n        while itr:\n            count+=1\n            itr = itr.next\n\n        return count\n\n    def insert_at_begining(self, data):\n        node = Node(data, self.head)\n        self.head = node\n\n    def insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data, None)\n            return\n\n        itr = self.head\n\n        while itr.next:\n            itr = itr.next\n\n        itr.next = Node(data, None)\n\n    def insert_at(self, index, data):\n        if index<0 or index>self.get_length():\n            raise Exception(""Invalid Index"")\n\n        if index==0:\n            self.insert_at_begining(data)\n            return\n\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                node = Node(data, itr.next)\n                itr.next = node\n                break\n\n            itr = itr.next\n            count += 1\n\n    def remove_at(self, index):\n        if index<0 or index>=self.get_length():\n            raise Exception(""Invalid Index"")\n\n        if index==0:\n            self.head = self.head.next\n            return\n\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                itr.next = itr.next.next\n                break\n\n            itr = itr.next\n            count+=1\n\n    def insert_values(self, data_list):\n        self.head = None\n        for data in data_list:\n            self.insert_at_end(data)\n\n\n    def insert_after_value(self, data_after, data_to_insert):\n        if self.head is None:\n            return\n\n        if self.head.data==data_after:\n            self.head.next = Node(data_to_insert,self.head.next)\n            return\n\n        itr = self.head\n        while itr:\n            if itr.data == data_after:\n                itr.next = Node(data_to_insert, itr.next)\n                break\n\n            itr = itr.next\n\n    def remove_by_value(self, data):\n        if self.head is None:\n            return\n\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n\n        itr = self.head\n        while itr.next:\n            if itr.next.data == data:\n                itr.next = itr.next.next\n                break\n            itr = itr.next\n\nif __name__ == \'__main__\':\n    ll = LinkedList()\n    ll.insert_values([""banana"",""mango"",""grapes"",""orange""])\n    ll.print()\n    ll.insert_after_value(""mango"",""apple"")\n    ll.print()\n    ll.remove_by_value(""orange"")\n    ll.print()\n    ll.remove_by_value(""figs"")\n    ll.print()\n    ll.remove_by_value(""banana"")\n    ll.remove_by_value(""mango"")\n    ll.remove_by_value(""apple"")\n    ll.remove_by_value(""grapes"")\n    ll.print()\n\n    # ll.insert_values([45,7,12,567,99])\n    # ll.insert_at_end(67)\n    # ll.print()\n\n'"
DataStructures/5_Stack/Exercise/balance_paran.py,0,"b'from collections import deque\n\nclass Stack:\n    def __init__(self):\n        self.container = deque()\n\n    def push(self, val):\n        self.container.append(val)\n\n    def pop(self):\n        return self.container.pop()\n\n    def peek(self):\n        return self.container[-1]\n\n    def is_empty(self):\n        return len(self.container) == 0\n\n    def size(self):\n        return len(self.container)\n\ndef is_match(ch1, ch2):\n    match_dict = {\n        \')\': \'(\',\n        \']\': \'[\',\n        \'}\': \'{\'\n    }\n    return match_dict[ch1] == ch2\n\n\ndef is_balanced(s):\n    stack = Stack()\n    for ch in s:\n        if ch==\'(\' or ch==\'{\' or ch == \'[\':\n            stack.push(ch)\n        if ch==\')\' or ch==\'}\' or ch == \']\':\n            if stack.size()==0:\n                return False\n            if not is_match(ch,stack.pop()):\n                return False\n\n    return stack.size()==0\n\n\nif __name__ == \'__main__\':\n    print(is_balanced(""({a+b})""))\n    print(is_balanced(""))((a+b}{""))\n    print(is_balanced(""((a+b))""))\n    print(is_balanced(""((a+g))""))\n    print(is_balanced(""))""))\n    print(is_balanced(""[a+b]*(x+2y)*{gg+kk}""))\n'"
DataStructures/5_Stack/Exercise/reverse_string.py,0,"b'from collections import deque\n\nclass Stack:\n    def __init__(self):\n        self.container = deque()\n\n    def push(self, val):\n        self.container.append(val)\n\n    def pop(self):\n        return self.container.pop()\n\n    def peek(self):\n        return self.container[-1]\n\n    def is_empty(self):\n        return len(self.container) == 0\n\n    def size(self):\n        return len(self.container)\n\ndef reverse_string(s):\n    stack = Stack()\n\n    for ch in s:\n        stack.push(ch)\n\n    rstr = \'\'\n    while stack.size()!=0:\n        rstr += stack.pop()\n\n    return rstr\n\n\nif __name__ == \'__main__\':\n    print(reverse_string(""We will conquere COVI-19""))\n    print(reverse_string(""I am the king""))'"
DataStructures/6_Queue/Exercise/binary_numbers.py,0,"b'from collections import deque\n\nclass Queue:\n    def __init__(self):\n        self.buffer = deque()\n\n    def enqueue(self, val):\n        self.buffer.appendleft(val)\n\n    def dequeue(self):\n        if len(self.buffer)==0:\n            print(""Queue is empty"")\n            return\n\n        return self.buffer.pop()\n\n    def is_empty(self):\n        return len(self.buffer) == 0\n\n    def size(self):\n        return len(self.buffer)\n\n    def front(self):\n        return self.buffer[-1]\n\ndef produce_binary_numbers(n):\n    numbers_queue = Queue()\n    numbers_queue.enqueue(""1"")\n\n    for i in range(n):\n        front = numbers_queue.front()\n        print(""   "", front)\n        numbers_queue.enqueue(front + ""0"")\n        numbers_queue.enqueue(front + ""1"")\n\n        numbers_queue.dequeue()\n\n\nif __name__ == \'__main__\':\n    produce_binary_numbers(10)'"
DataStructures/6_Queue/Exercise/food_ordering_system.py,0,"b'import threading\nimport time\n\nfrom collections import deque\n\nclass Queue:\n    def __init__(self):\n        self.buffer = deque()\n\n    def enqueue(self, val):\n        self.buffer.appendleft(val)\n\n    def dequeue(self):\n        if len(self.buffer)==0:\n            print(""Queue is empty"")\n            return\n\n        return self.buffer.pop()\n\n    def is_empty(self):\n        return len(self.buffer) == 0\n\n    def size(self):\n        return len(self.buffer)\n\nfood_order_queue = Queue()\n\ndef place_orders(orders):\n    for order in orders:\n        print(""Placing order for:"",order)\n        food_order_queue.enqueue(order)\n        time.sleep(0.5)\n\n\ndef serve_orders():\n    time.sleep(1)\n    while True:\n        order = food_order_queue.dequeue()\n        print(""Now serving: "",order)\n        time.sleep(2)\n\nif __name__ == \'__main__\':\n    orders = [\'pizza\',\'samosa\',\'pasta\',\'biryani\',\'burger\']\n    t1 = threading.Thread(target=place_orders, args=(orders,))\n    t2 = threading.Thread(target=serve_orders)\n\n    t1.start()\n    t2.start()'"
DataStructures/7_Tree/Exercise/location_hierarchy.py,0,"b'class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.children = []\n        self.parent = None\n\n    def get_level(self):\n        level = 0\n        p = self.parent\n        while p:\n            level += 1\n            p = p.parent\n\n        return level\n\n    def print_tree(self, level):\n        if self.get_level() > level:\n            return\n        spaces = \' \' * self.get_level() * 3\n        prefix = spaces + ""|__"" if self.parent else """"\n        print(prefix + self.data)\n        if self.children:\n            for child in self.children:\n                child.print_tree(level)\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\ndef build_location_tree():\n    root = TreeNode(""Global"")\n\n    india = TreeNode(""India"")\n\n    gujarat = TreeNode(""Gujarat"")\n    gujarat.add_child(TreeNode(""Ahmedabad""))\n    gujarat.add_child(TreeNode(""Baroda""))\n\n    karnataka = TreeNode(""Karnataka"")\n    karnataka.add_child(TreeNode(""Bangluru""))\n    karnataka.add_child(TreeNode(""Mysore""))\n\n    india.add_child(gujarat)\n    india.add_child(karnataka)\n\n    usa = TreeNode(""USA"")\n\n    nj = TreeNode(""New Jersey"")\n    nj.add_child(TreeNode(""Princeton""))\n    nj.add_child(TreeNode(""Trenton""))\n\n    california = TreeNode(""California"")\n    california.add_child(TreeNode(""San Francisco""))\n    california.add_child(TreeNode(""Mountain View""))\n    california.add_child(TreeNode(""Palo Alto""))\n\n    usa.add_child(nj)\n    usa.add_child(california)\n\n    root.add_child(india)\n    root.add_child(usa)\n\n    return root\n\n\nif __name__ == \'__main__\':\n    root_node = build_location_tree()\n    root_node.print_tree(3)\n\n\n'"
DataStructures/7_Tree/Exercise/management_hierarchy.py,0,"b'class TreeNode:\n    def __init__(self, name, designation):\n        self.name = name\n        self.designation = designation\n        self.children = []\n        self.parent = None\n\n    def get_level(self):\n        level = 0\n        p = self.parent\n        while p:\n            level += 1\n            p = p.parent\n\n        return level\n\n    def print_tree(self, property_name):\n        if property_name == \'both\':\n            value = self.name + "" ("" + self.designation + "")""\n        elif property_name == \'name\':\n            value = self.name\n        else:\n            value = self.designation\n\n        spaces = \' \' * self.get_level() * 3\n        prefix = spaces + ""|__"" if self.parent else """"\n        print(prefix + value)\n        if self.children:\n            for child in self.children:\n                child.print_tree(property_name)\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\ndef build_management_tree():\n    # CTO Hierarchy\n    infra_head = TreeNode(""Vishwa"",""Infrastructure Head"")\n    infra_head.add_child(TreeNode(""Dhaval"",""Cloud Manager""))\n    infra_head.add_child(TreeNode(""Abhijit"", ""App Manager""))\n\n    cto = TreeNode(""Chinmay"", ""CTO"")\n    cto.add_child(infra_head)\n    cto.add_child(TreeNode(""Aamir"", ""Application Head""))\n\n    # HR hierarchy\n    hr_head = TreeNode(""Gels"",""HR Head"")\n\n    hr_head.add_child(TreeNode(""Peter"",""Recruitment Manager""))\n    hr_head.add_child(TreeNode(""Waqas"", ""Policy Manager""))\n\n    ceo = TreeNode(""Nilupul"", ""CEO"")\n    ceo.add_child(cto)\n    ceo.add_child(hr_head)\n\n    return ceo\n\n\nif __name__ == \'__main__\':\n    root_node = build_management_tree()\n    root_node.print_tree(""name"")\n    root_node.print_tree(""designation"")\n    root_node.print_tree(""both"")\n'"
DataStructures/8_Binary_Tree_1/Exercise/binary_tree_part_1_exercise.py,0,"b'class BinarySearchTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def add_child(self, data):\n        if data == self.data:\n            return # node already exist\n\n        if data < self.data:\n            if self.left:\n                self.left.add_child(data)\n            else:\n                self.left = BinarySearchTreeNode(data)\n        else:\n            if self.right:\n                self.right.add_child(data)\n            else:\n                self.right = BinarySearchTreeNode(data)\n\n\n    def search(self, val):\n        if self.data == val:\n            return True\n\n        if val < self.data:\n            if self.left:\n                return self.left.search(val)\n            else:\n                return False\n\n        if val > self.data:\n            if self.right:\n                return self.right.search(val)\n            else:\n                return False\n\n    def in_order_traversal(self):\n        elements = []\n        if self.left:\n            elements += self.left.in_order_traversal()\n\n        elements.append(self.data)\n\n        if self.right:\n            elements += self.right.in_order_traversal()\n\n        return elements\n\n    def post_order_traversal(self):\n        elements = []\n        if self.left:\n            elements += self.left.post_order_traversal()\n        if self.right:\n            elements += self.right.post_order_traversal()\n\n        elements.append(self.data)\n\n        return elements\n\n    def pre_order_traversal(self):\n        elements = [self.data]\n        if self.left:\n            elements += self.left.pre_order_traversal()\n        if self.right:\n            elements += self.right.pre_order_traversal()\n\n        return elements\n\n    def find_max(self):\n        if self.right is None:\n            return self.data\n        return self.right.find_max()\n\n    def find_min(self):\n        if self.left is None:\n            return self.data\n        return self.left.find_min()\n\n    def calculate_sum(self):\n        left_sum = self.left.calculate_sum() if self.left else 0\n        right_sum = self.right.calculate_sum() if self.right else 0\n        return self.data + left_sum + right_sum\n\ndef build_tree(elements):\n    root = BinarySearchTreeNode(elements[0])\n\n    for i in range(1,len(elements)):\n        root.add_child(elements[i])\n\n    return root\n\nif __name__ == \'__main__\':\n    numbers = [17, 4, 1, 20, 9, 23, 18, 34]\n\n    numbers = [15,12,7,14,27,20,23,88 ]\n\n    numbers_tree = build_tree(numbers)\n    print(""Input numbers:"",numbers)\n    print(""Min:"",numbers_tree.find_min())\n    print(""Max:"",numbers_tree.find_max())\n    print(""Sum:"", numbers_tree.calculate_sum())\n    print(""In order traversal:"", numbers_tree.in_order_traversal())\n    print(""Pre order traversal:"", numbers_tree.pre_order_traversal())\n    print(""Post order traversal:"", numbers_tree.post_order_traversal())'"
DataStructures/9_Binary_Tree_2/Exercise/binary_tree_part_2_exercise.py,0,"b'class BinarySearchTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def add_child(self, data):\n        if data == self.data:\n            return # node already exist\n\n        if data < self.data:\n            if self.left:\n                self.left.add_child(data)\n            else:\n                self.left = BinarySearchTreeNode(data)\n        else:\n            if self.right:\n                self.right.add_child(data)\n            else:\n                self.right = BinarySearchTreeNode(data)\n\n\n    def search(self, val):\n        if self.data == val:\n            return True\n\n        if val < self.data:\n            if self.left:\n                return self.left.search(val)\n            else:\n                return False\n\n        if val > self.data:\n            if self.right:\n                return self.right.search(val)\n            else:\n                return False\n\n    def in_order_traversal(self):\n        elements = []\n        if self.left:\n            elements += self.left.in_order_traversal()\n\n        elements.append(self.data)\n\n        if self.right:\n            elements += self.right.in_order_traversal()\n\n        return elements\n\n    def delete(self, val):\n        if val < self.data:\n            if self.left:\n                self.left = self.left.delete(val)\n        elif val > self.data:\n            if self.right:\n                self.right = self.right.delete(val)\n        else:\n            if self.left is None and self.right is None:\n                return None\n            elif self.left is None:\n                return self.right\n            elif self.right is None:\n                return self.right\n\n            max_val = self.left.find_max()\n            self.data = max_val\n            self.left = self.left.delete(max_val)\n\n        return self\n\n    def find_max(self):\n        if self.right is None:\n            return self.data\n        return self.right.find_max()\n\n    def find_min(self):\n        if self.left is None:\n            return self.data\n        return self.left.find_min()\n\n\ndef build_tree(elements):\n    print(""Building tree with these elements:"",elements)\n    root = BinarySearchTreeNode(elements[0])\n\n    for i in range(1,len(elements)):\n        root.add_child(elements[i])\n\n    return root\n\nif __name__ == \'__main__\':\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    numbers_tree.delete(20)\n    print(""After deleting 20 "",numbers_tree.in_order_traversal()) # this should print [1, 4, 9, 17, 18, 23, 34]\n\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    numbers_tree.delete(9)\n    print(""After deleting 9 "",numbers_tree.in_order_traversal())  # this should print [1, 4, 17, 18, 20, 23, 34]\n\n    numbers_tree = build_tree([17, 4, 1, 20, 9, 23, 18, 34])\n    numbers_tree.delete(17)\n    print(""After deleting 17 "",numbers_tree.in_order_traversal())  # this should print [1, 4, 9, 18, 20, 23, 34]\n'"
ML/3_gradient_descent/Exercise/ex_gradient_descent.py,2,"b'\'\'\' Good students always try to solve exercise on their own first and then look at the ready made solution\n    I know you are an awesome student !! :)\n    Hence you will look into this code only after you have done your due diligence.\n    If you are not an awesome student who is full of laziness then only you will come here\n    without writing single line of code on your own. In that case anyways you are going to\n    face my anger with fire and fury !!!\n\'\'\'\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport math\n\ndef predict_using_sklean():\n    df = pd.read_csv(""test_scores.csv"")\n    r = LinearRegression()\n    r.fit(df[[\'math\']],df.cs)\n    return r.coef_, r.intercept_\n\ndef gradient_descent(x,y):\n    m_curr = 0\n    b_curr = 0\n    iterations = 1000000\n    n = len(x)\n    learning_rate = 0.0002\n\n    cost_previous = 0\n\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1/n)*sum([value**2 for value in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        if math.isclose(cost, cost_previous, rel_tol=1e-20):\n            break\n        cost_previous = cost\n        print (""m {}, b {}, cost {}, iteration {}"".format(m_curr,b_curr,cost, i))\n\n    return m_curr, b_curr\n\nif __name__ == ""__main__"":\n    df = pd.read_csv(""test_scores.csv"")\n    x = np.array(df.math)\n    y = np.array(df.cs)\n\n    m, b = gradient_descent(x,y)\n    print(""Using gradient descent function: Coef {} Intercept {}"".format(m, b))\n\n    m_sklearn, b_sklearn = predict_using_sklean()\n    print(""Using sklearn: Coef {} Intercept {}"".format(m_sklearn,b_sklearn))\n\n'"
pandas/4_read_write_to_excel/read_write_with_flask/flask_with_excel.py,0,"b'from flask import *\nimport pandas as pd\nimport os\nimport re\napp = Flask(__name__)\n\n@app.route(""/"")\ndef show_tables():\n    filename = \'example2.xlsx\'\n    data = pd.read_excel(filename,sheetname=\'Sheet1\')\n    data = data.fillna(\'\')\n    return render_template(\'index.html\',tables=[re.sub(\' mytable\', \'"" id=""example\', data.to_html(classes=\'mytable\'))],\n    titles = [\'Excel Data to Flask\'])\n\n\n\n@app.route(\'/insert\', methods= [\'POST\',\'GET\'])\ndef insert():\n    q1 = request.form[\'num1\']\n    q2 = request.form[\'num2\']\n    print(q1,q2)\n    df = pd.DataFrame({\'a\': [q1],\n                       \'b\': [q2]})\n\n    book = pd.read_excel(\'example2.xlsx\')\n    writer = pd.ExcelWriter(\'example2.xlsx\', engine=\'openpyxl\')\n    book.to_excel(writer, startrow=0, index=False)\n    df.to_excel(writer, startrow=len(book) + 1, header=False, index=False)\n    writer.save()\n    return redirect(\'/\')\n\n@app.route(\'/save\', methods= [\'POST\',\'GET\'])\ndef save():\n    url = \'http://127.0.0.1:5000/\'\n    urll = request.get_data()\n    print(urll)\n    data = pd.read_html(urll)\n    print(data)\n    writer = pd.ExcelWriter(\'example2.xlsx\', engine=\'openpyxl\')\n    data[0].drop(\'Unnamed: 0\', axis=1).to_excel(writer, sheet_name=\'Sheet1\', index=False)\n\n    writer.save()\n    return redirect(\'/\')\n\nif __name__ == ""__main__"":\n    app.run(debug=True)\n'"
Basics/Hindi/11_dict_tuple/Exercise/11_dict_exercise_1_country_population.py,0,"b'population = {\n    \'china\': 143,\n    \'india\': 136,\n    \'usa\': 32,\n    \'pakistan\': 21\n}\n\ndef add():\n    country=input(""Enter country name to add:"")\n    country=country.lower()\n    if country in population:\n        print(""Country already exist in our dataset. Terminating"")\n        return\n    p=input(f""Enter population for {country}"")\n    p=float(p)\n    population[country]=p # Adds new key value pair to dictionary\n    print_all()\n\ndef remove():\n    country = input(""Enter country name to remove:"")\n    country = country.lower()\n    if country not in population:\n        print(""Country doesn\'t exist in our dataset. Terminating"")\n        return\n    del population[country]\n    print_all()\n\ndef query():\n    country = input(""Enter country name to query:"")\n    country = country.lower()\n    if country not in population:\n        print(""Country doesn\'t exist in our dataset. Terminating"")\n        return\n    print(f""Population of {country} is: {population[country]} crore"")\n\ndef print_all():\n    for country, p in population.items():\n        print(f""{country}==>{p}"")\n\ndef main():\n    op=input(""Enter operation (add, remove, query or print):"")\n    if op.lower() == \'add\':\n        add()\n    elif op.lower() == \'remove\':\n        remove()\n    elif op.lower() == \'query\':\n        query()\n    elif op.lower() == \'print\':\n        print_all()\n\nif __name__ == \'__main__\':\n    main()'"
Basics/Hindi/11_dict_tuple/Exercise/11_dict_exercise_2_stocks.py,0,"b'import statistics\n\nstocks = {\n    \'info\': [600,630,620],\n    \'ril\': [1430,1490,1567],\n    \'mtl\': [234,180,160]\n}\n\ndef print_all():\n    for stock,price_list in stocks.items():\n        avg = statistics.mean(price_list)\n        print(f""{stock} ==> {price_list} ==> avg: "",round(avg,2))\n\n\ndef add():\n    s = input(""Enter a stock ticker to add:"")\n    p = input(""Enter price of this stock:"")\n    p=float(p)\n    if s in stocks:\n        stocks[s].append(p)\n    else:\n        stocks[s] = [p]\n    print_all()\n\n\ndef main():\n    op=input(""Enter operation (print, add or amend):"")\n    if op.lower() == \'print\':\n        print_all()\n    elif op.lower() == \'add\':\n        add()\n    else:\n        print(""Unsupported operation:"",op)\n\nif __name__ == \'__main__\':\n    main()\n'"
Basics/Hindi/11_dict_tuple/Exercise/11_dict_exercise_3_circle.py,0,"b'import math\n\ndef circle_calc(radius):\n    area=math.pi*(radius**2)\n    circumference=2*math.pi*radius\n    diameter=2*radius\n    return area, circumference,diameter\n\nif __name__==""__main__"":\n    r=input(""Enter a radius:"")\n    r=float(r)\n    area, c, d = circle_calc(r)\n    print(f""area {area}, circumference {c}, diameter {d}"")'"
Basics/Hindi/12_read_write_file/Exercise/exercise_1_poem.py,0,"b'word_stats={}\n\nwith open(""poem.txt"",""r"") as f:\n    for line in f:\n      words=line.split(\' \')\n      for word in words:\n        if word in word_stats:\n          word_stats[word]+=1\n        else:\n          word_stats[word] = 1\n\nprint(word_stats)\n\nword_occurances = list(word_stats.values())\nmax_count = max(word_occurances)\nprint(""Max occurances of any word is:"",max_count)\n\nprint(""Words with max occurances are: "")\nfor word, count in word_stats.items():\n    if count==max_count:\n        print(word)'"
Basics/Hindi/12_read_write_file/Exercise/exercise_2_stocks.py,0,"b'with open(""stocks.csv"",""r"") as f, open(""output.csv"",""w"") as out:\n    out.write(""Company Name,PE Ratio, PB Ratio\\n"")\n    next(f) # This will skip first line in the file which is a header\n    for line in f:\n        tokens=line.split(\',\')\n        stock = tokens[0]\n        price = float(tokens[1])\n        eps = float(tokens[2])\n        book = float(tokens[3])\n        pe = round(price/eps,2)\n        pb = round(price/book,2)\n        out.write(f""{stock},{pe},{pb}\\n"")\n'"
Basics/Hindi/2_numbers/Exercise/2_numbers_exercise.py,0,"b'# Exercise\n# 1. You have a football field that is 92 meter long and 48.8 meter wide. Find out total\n#    area using python and print it\nlength=92\nwidth=48.8\narea=length*width\nprint(""area of football field:"",area) # Ans: 4489.599999999999\n\n# 2. You bought 9 packets of potato chips from a store. Each packet costs 1.49 dollar\n#    and you gave shopkeeper 20 dollar.\n#    Find out using python, how many dollars is the shopkeeper going to give you back?\nnum_packets=9\ncost_per_packet=1.49\ntotal_cost=num_packets*cost_per_packet\nmoney_paid=20\ncash_back=money_paid-total_cost\nprint(""Cash back:"",cash_back) # Ans: 6.59\n\n# 3. You want to replace tiles in your bathroom which is exactly square and 5.5 feet\n#    is its length. If tiles cost 500 rs per square feet, how much will be the total\n#    cost to replace all tiles. Calculate and print the cost using python\n#    Hint: Use power operator (**) to find area of a square\nlength=5.5\narea=length**2 # area of square is length power 2\ncost=area*500\nprint(""total cost for bathroom tiles replacement:"",cost) # Ans: 15125.0\n\n# 4. Print binary representation of number 17\nnum=17\nprint(\'Binary of number 17 is:\',format(num,\'b\')) # Ans: 10001'"
Basics/Hindi/3_strings/Exercise/3_string_exercise_answer.py,0,"b'# 1. Create 3 variables to store street, city and country, now create address variable to\n# store entire address. Use two ways of creating this variable, one using + operator and the other using f-string.\n# Now Print the address in such a way that the street, city and country prints in a separate line\nstreet = ""13 patli gali""\ncity = ""New Delhi""\ncountry = ""India""\naddress = street + \'\\n\' + city + \'\\n\' + country\nprint(""Address using + operator:"",address)\naddress = f\'{street}\\n{city}\\n{country}\'\nprint(""Address using f-string:"",address)\n\n# 2. Create a variable to store the string ""Earth revolves around the sun""\n#     1. Print ""revolves"" using slice operator\n#     2. Print ""sun"" using negative index\ns=\'Earth revolves around the sun\'\nprint(s[6:14])\nprint(s[-3:])\n\n# 3. Create two variables to store how many fruits and vegetables you eat in a day.\n# Now Print ""I eat x veggies and y fruits daily"" where x and y presents vegetables and fruits that you eat everyday.\n# Use python f string for this.\nnum_fruits=10\nnum_veggies=5\nprint(f""I eat {num_veggies} veggies and {num_fruits} daily"")\n\n# 4. I have a string variable called s=\'maine 200 banana khaye\'. This of course is a\n# wrong statement, the correct statement is \'maine 10 samosa khaye\'.\n# Replace incorrect words in original strong with new ones and print the new string.\n# Also try to do this in one line.\ns=\'maine 200 banana khaye\'\ns=s.replace(\'banana\',\'samosa\')\ns=s.replace(\'200\',\'10\')\nprint(""Using two line replace:"",s)\n\ns=\'maine 200 banana khaye\'\ns=s.replace(\'banana\',\'samosa\').replace(\'200\',\'10\')\nprint(""Using single line:"",s)'"
Basics/Hindi/4_user_input/Exercise/4_user_input_exercise.py,0,"b'# 1. Write a program that can find area of a triangle. It should take base and height as\n# an input from user and using that it should print an area of a triangle\nprint(""This program helps you calculate an area of a triangle"")\nbase=input(""Enter base:"")\nheight=input(""Enter height:"")\narea=(1/2)*float(base)*float(height)\nprint(""Area of a triangle is:"",area)\n# 2. Write a program that takes file name with extension as an input and\n# prints just the file name without extension (you can assume that file extensions\n# are always 3 character long)\n\nfile_name = input(""Enter a file name with extension:"")\nprint(""File name without extension:"",file_name[:len(file_name)-4])'"
Basics/Hindi/5_lists/Exercise/5_lists_exercise.py,0,"b'# 1. Let us say your expense for every month are listed below,\n# \t1. January -  2200\n#  \t2. February - 2350\n#     3. March - 2600\n#     4. April - 2130\n#     5. May - 2190\n#\n# Create a list to store these monthly expenses and using that find out,\n#\n# 1. In Feb, how many dollars you spent extra compare to January?\n# 2. Find out your total expense in first quarter (first three months) of the year.\n# 3. Find out if you spent exactly 2000 dollars in any month\n# 4. June month just finished and your expense is 1980 dollar. Add this item to our monthly expense list\n# 5. You returned an item that you bought in a month of April and\n# got a refund of 200$. Make a correction to your monthly expense list\n# based on this\n\nexp = [2200,2350,2600,2130,2190]\n\n# 1. In Feb, how many dollars you spent extra compare to January?\nprint(""In feb this much extra was spent compared to jan:"",exp[1]-exp[0]) # 150\n\n# 2. Find out your total expense in first quarter (first three months) of the year\nprint(""Expense for first quarter:"",exp[0]+exp[1]+exp[2]) # 7150\n\n# 3. Find out if you spent exactly 2000 dollars in any month\nprint(""Did I spent 2000$ in any month? "", 2000 in exp) # False\n\n# 4. June month just finished and your expense is 1980 dollar. Add this item to our monthly expense list\nexp.append(1980)\nprint(""Expenses at the end of June:"",exp) # [2200, 2350, 2600, 2130, 2190, 1980]\n\n# 5. You returned an item that you bought in a month of April and\n# got a refund of 200$. Make a correction to your monthly expense list\n# based on this\nexp[3] = exp[3] - 200\nprint(""Expenses after 200$ return in April:"",exp) # [2200, 2350, 2600, 1930, 2190, 1980]\n\n# 2. You have a list of your favourite marvel super heros\n# heros=[\'spider man\',\'thor\',\'hulk\',\'iron man\',\'captain america\']\n# Using this list\n\nheros=[\'spider man\',\'thor\',\'hulk\',\'iron man\',\'captain america\']\n# 1. Length of the list\nprint(len(heros))\n# 2. Add \'black panther\' at the end of this list\nheros.append(\'black panther\')\nprint(heros)\n# 3. You realize that you need to add \'black panther\' after \'hulk\',\n# so remove it from the list first and then add it after \'hulk\'\nheros.remove(\'black panther\')\nheros.insert(3,\'black panther\')\nprint(heros)\n# 4. Now you don\'t like thor and hulk because they get angry easily :)\n#    So you want to remove thor and hulk from list and replace them with doctor strange (because he is cool).\n#    Do that with one line of code.\nheros[1:3]=[\'doctor strange\']\nprint(heros)\n# 5. Sort the list in alphabetical order\nheros.sort()\nprint(heros)\n'"
Basics/Hindi/6_if/Exercise/6_exercise1_1.py,0,"b'## Exercise: Python If Condition\n# 1. Using following list of cities per country,\n#     ```\n#     india = [""mumbai"", ""banglore"", ""chennai"", ""delhi""]\n#     pakistan = [""lahore"",""karachi"",""islamabad""]\n#     bangladesh = [""dhaka"", ""khulna"", ""rangpur""]\n#     ```\n# Write a program that asks user to enter a city name and it should tell which country the city belongs to\n\nindia = [""mumbai"", ""banglore"", ""chennai"", ""delhi""]\npakistan = [""lahore"", ""karachi"", ""islamabad""]\nbangladesh = [""dhaka"", ""khulna"", ""rangpur""]\n\ncity = input(""Enter city name: "")\n\nif city in india:\n    print(f""{city} is in india"")\nelif city in pakistan:\n    print(f""{city} is in pakistan"")\nelif city in bangladesh:\n    print(f""{city} is in bangladesh"")\nelse:\n    print(f""I won\'t be able to tell you which country {city} is in! Sorry!"")\n'"
Basics/Hindi/6_if/Exercise/6_exercise1_2.py,0,"b'## Exercise: Python If Condition\n# 1. Using following list of cities per country,\n#     ```\n#     india = [""mumbai"", ""banglore"", ""chennai"", ""delhi""]\n#     pakistan = [""lahore"",""karachi"",""islamabad""]\n#     bangladesh = [""dhaka"", ""khulna"", ""rangpur""]\n#     ```\n#Write a program that asks user to enter two cities and it tells you if they both are in same country or not. For example if I enter mumbai and chennai, it will print ""Both cities are in India"" but if I enter mumbai and dhaka it should print ""They don\'t belong to same country""\n\nindia = [""mumbai"", ""banglore"", ""chennai"", ""delhi""]\npakistan = [""lahore"", ""karachi"", ""islamabad""]\nbangladesh = [""dhaka"", ""khulna"", ""rangpur""]\n\ncity1 = input(""Enter city 1: "")\ncity2 = input(""Enter city 2: "")\n\nif city1 in india and city2 in india:\n    print(""Both cities are in india"")\nelif city1 in pakistan and city2 in pakistan:\n    print(""Both cities are in pakistan"")\nelif city1 in bangladesh and bangladesh in india:\n    print(""Both cities are in bangladesh"")\nelse:\n    print(""They don\'t belong to same country"")'"
Basics/Hindi/6_if/Exercise/6_exercise2.py,0,"b'## Exercise: Python If Condition\n# 2. Write a python program that can tell you if your sugar is normal or not. Normal fasting level sugar range is 80 to 100.\n#     1. Ask user to enter his fasting sugar level\n#     2. If it is below 80 to 100 range then print that sugar is low\n#     3. If it is above 100 then print that it is high otherwise print that it is normal\nsugar=input(""Please enter your fasting sugar level:"")\nsugar=float(sugar)\nif sugar<80:\n    print(""Your sugar is low, go eat some jalebi :)"")\nelif sugar>100:\n    print(""Your sugar is high, stop eating all mithais..!"")\nelse:\n    print(""Your sugar is normal, relax and enjoy your life!"")'"
Basics/Hindi/7_for/Exercise/7_for_exercise.py,0,"b'# ## Exercise: Python for loop\n# 1. After flipping a coin 10 times you got this result,\n# ```\n# result = [""heads"",""tails"",""tails"",""heads"",""tails"",""heads"",""heads"",""tails"",""tails"",""tails""]\n# ```\n# Using for loop figure out how many times you got heads\nprint(""\\nExercise 1\\n"")\nresult = [""heads"",""tails"",""tails"",""heads"",""tails"",""heads"",""heads"",""tails"",""tails"",""tails""]\ncount = 0\nfor item in result:\n    if item == ""heads"":\n        count += 1\nprint(""Heads count: "",count)\n\n\n# 2. Print square of all numbers between 1 to 10 except even numbers\nprint(""\\nExercise 2\\n"")\nfor i in range(1,11):\n    if i % 2 == 0:\n        continue\n    print(i*i)\n\n# 3. Your monthly expense list (from Jan to May) looks like this,\n# ```\n# expense_list = [2340, 2500, 2100, 3100, 2980]\n# ```\n# Write a program that asks you to enter an expense amount and program\n# should tell you in which month that expense occurred. If expense is not\n# found then it should print that as well.\nprint(""\\nExercise 3\\n"")\nmonth_list = [""January"", ""February"", ""March"", ""April"", ""May""]\nexpense_list = [2340, 2500, 2100, 3100, 2980]\ne = input(""Enter expense amount: "")\ne = int(e)\n\nmonth = -1\nfor i in range(len(expense_list)):\n    if e == expense_list[i]:\n        month = i\n        break\n\nif month != -1:\n    print(f\'You spent {e} in {month_list[month]}\')\nelse:\n    print(f\'You didn\\\'t spend {e} in any month\')\n\n# 4. Lets say you are running a 5 km race. Write a program that,\n#    1. Upon completing each 1 km asks you ""are you tired?""\n#    2. If you reply ""yes"" then it should break and print ""you didn\'t finish the race""\n#    3. If you reply ""no"" then it should continue and ask ""are you tired"" on every km\n#    4. If you finish all 5 km then it should print congratulations message\n\nprint(""\\nExercise 4\\n"")\n\nfor i in range(5):\n    print(f""You ran {i+1} miles"") # i starts with zero hence adding 1\n    tired = input(""Are you tired? "")\n    if tired == \'yes\':\n        break\n\nif i == 4: # 4 because the index starts from 0\n    print(""Hurray! You are a rock star! You just finished 5 km race!"")\nelse:\n    print(""You didn\'t finish 5 km race but hey congrats anyways! You still ran {i+1} miles"")\n\n# 5. Write a program that prints following shape\n# ```\n# *\n# **\n# ***\n# ****\n# *****\n# ```\nprint(""\\nExercise 5\\n"")\n\nfor i in range(1,6):\n    s = \'\'\n    for j in range(i):\n        s += \'*\'\n    print(s)'"
Basics/Hindi/8_functions/Exercise/8_functions_exercise.py,0,"b'def print_pattern(n=5):\n    \'\'\'\n    :param n: Integer number representing number of lines\n    to be printed in a pattern. If n=3 it will print,\n      *\n      **\n      ***\n    If n=4, it will print,\n      *\n      **\n      ***\n      ****\n    Default value for n is 5. So if function caller doesn\'t\n    supply the input number then it will assume it to be 5\n    :return: None\n    \'\'\'\n    # we need to run two for loops. Outer loop prints patterns line by line\n    # where as inner loop print the content of that specific lines\n    for i in range(n):\n        s = \'\'\n        for j in range(i+1):\n            s = s + \'*\'\n        print(s)\n\ndef calculate_area(dimension1,dimension2,shape=""triangle""):\n    \'\'\'\n    :param dimension1: In case of triangle it is ""base"". For rectangle it is ""length"".\n    :param dimension2: In case of triangle it is ""height"". For rectangle it is ""width"".\n    :param shape: Either ""triangle"" or ""rectangle""\n    :return: Area of a shape\n    \'\'\'\n    if shape==""triangle"":\n        area=1/2*(dimension1*dimension2) # Triangle area is : 1/2(Base*Height)\n    elif shape==""rectangle"":\n        area=dimension1*dimension2 # Rectangle area is: Length*Width\n    else:\n        print(""Error: Input shape is neither triangle nor rectangle."")\n        area=None # If user didn\'t supply ""triangle"" or ""rectangle"" as shape then return None\n    return area\n\n\n# 1. Write a function called calculate_area that takes base and height as an input and returns and area of a triangle. Equation of an area of a triangle is,\n# ```\n# area = (1/2)*base*height\n# ```\n#\n# 2. Modify above function to take third parameter shape type. It can be either ""triangle"" or ""rectangle"". Based on shape type it will calculate area. Equation of rectangle\'s area is,\n# ```\n# rectangle area=length*width\n# ```\n# If no shape is supplied then it should take triangle as a default shape\n\n# Calculate area of triangle whose base is 10 and height is 5\nbase=10\nheight=5\ntriangle_area=calculate_area(base,height,""triangle"")\nprint(""Area of triangle is:"",triangle_area)\n\n# Calculate area of a rectangle whose length is 20 and width is 30\nlength=20\nwidth=30\nrectangle_area=calculate_area(length,width,""rectangle"")\nprint(""Area of rectangle is:"",rectangle_area)\n\n# Calculate area of a triangle without supplying shape argument in a function call\ntriangle_area=calculate_area(base,height) # Here third argument is missing\nprint(""Area of triangle with no shape supplied: "",triangle_area)\n\n\n# 3. Write a function called print_pattern that takes integer number as an argument and prints following pattern if input number is 3,\n# ```\n# *\n# **\n# ***\n# ```\n# if input is 4 then it should print\n# ```\n# *\n# **\n# ***\n# ****\n# ```\n# Basically number of lines it prints is equal to that number. (Hint: you need to use two for loops)\n\nprint(""Print pattern with input=3"")\nprint_pattern(3)\nprint(""Print pattern with input=4"")\nprint_pattern(4)\nprint(""Print pattern with no input number"")\nprint_pattern() # Not supplying any input will use default argument which is 5'"
Basics/Hindi/9_modules/utility/area.py,0,b'import math\n\ndef area_circle(radius):\n    return math.pi*(radius**2)\n\ndef area_square(length):\n    return length**2\n\n'
