file_path,api_count,code
npytools.py,10,"b'# -*- coding: utf-8 -*-\n\n""""""Core functions.""""""\n\n\n#------------------------------------------------------------------------------\n# Imports\n#------------------------------------------------------------------------------\n\nimport atexit\nimport logging\nimport os\nfrom pathlib import Path\nimport subprocess\n\nimport click\nimport numpy as np\n\nnp.set_printoptions(precision=4, suppress=True, edgeitems=2, threshold=50)\n\n\ndef _git_version():\n    """"""Return the git version.""""""\n    curdir = os.getcwd()\n    os.chdir(str(Path(__file__).parent))\n    try:\n        with open(os.devnull, \'w\') as fnull:\n            version = (\'-git-\' + subprocess.check_output(\n                       [\'git\', \'describe\', \'--abbrev=8\', \'--dirty\', \'--always\', \'--tags\'],\n                       stderr=fnull).strip().decode(\'ascii\'))\n            return version\n    except (OSError, subprocess.CalledProcessError):  # pragma: no cover\n        return """"\n    finally:\n        os.chdir(curdir)\n\n\n__author__ = \'Cyrille Rossant\'\n__email__ = \'cyrille.rossant at gmail.com\'\n__version__ = \'0.1.0\'\n__version_git__ = __version__ + _git_version()\n\n\n# Set a null handler on the root logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(logging.NullHandler())\nlogger.propagate = False\n\n\n@atexit.register\ndef on_exit():  # pragma: no cover\n    # Close the logging handlers.\n    for handler in logger.handlers:\n        handler.close()\n        logger.removeHandler(handler)\n\n\n#------------------------------------------------------------------------------\n# Utils\n#------------------------------------------------------------------------------\n\ndef _sizeof(num, suffix=\'\'):\n    for unit in [\'\', \'K\', \'M\', \'G\', \'T\', \'P\', \'E\', \'Z\']:\n        if abs(num) < 1000.0:\n            return ""%.1f%s%s"" % (num, unit, suffix)\n        num /= 1000.0\n    return ""%.1f%s%s"" % (num, \'Y\', suffix)\n\n\ndef _tabulate(table):\n    a = max(len(str(x)) for x, _ in table)\n    b = max(len(str(x)) for _, x in table)\n    header = \'+%s+%s+\' % (\'-\' * (a + 2), \'-\' * (b + 2))\n    table_str = [\n        (\'| {0: <\' + str(a) + \'} | {1: <\' + str(b) + \'} |\').format(name, str(value))\n        for name, value in table]\n    table_str = [header] + table_str + [header]\n    return \'\\n\'.join(table_str)\n\n\ndef _array_info_table(arr, show_stats=False):\n    size = arr.size\n    table = [\n        (\'shape\', arr.shape),\n        (\'dtype\', arr.dtype),\n        (\'filesize\', _sizeof(arr.size * arr.itemsize)),\n        (\'size\', size),\n    ]\n    if show_stats:\n        zero = size - np.count_nonzero(arr)\n        table += [\n            (\'min\', arr.min()),\n            (\'mean\', arr.mean()),\n            (\'median\', np.median(arr)),\n            (\'max\', arr.max()),\n            (\'zero\', \'%d (%d%%)\' % (zero, 100 * float(zero) / size)),\n            (\'nan\', np.isnan(arr).sum()),\n            (\'inf\', np.isinf(arr).sum()),\n        ]\n    return table\n\n\n#------------------------------------------------------------------------------\n# CLI commands\n#------------------------------------------------------------------------------\n\n@click.command(\'npyshow\')\n@click.argument(\'paths\', type=click.Path(exists=True), nargs=-1)\n@click.option(\'-n\', default=2, help=""Number of first/last elements to show."")\n@click.option(\'--show-array/--no-show-array\', default=True, help=""Whether to show the array."")\n@click.option(\n    \'--show-stats/--no-show-stats\', default=False,\n    help=""Whether to show basic statistics about the array ""\n    ""(requires to load the entire array in memory)"")\n@click.pass_context\ndef npyshow(ctx, paths, show_array=True, n=2, show_stats=False):\n    """"""Show array information of a NPY file and possibly display it.""""""\n    np.set_printoptions(edgeitems=n)\n    for path in paths:\n        if not path.endswith(\'.npy\'):\n            continue\n        arr = np.load(path, mmap_mode=\'r\')\n        table = _array_info_table(arr, show_stats=show_stats)\n        click.echo(path)\n        click.echo(_tabulate(table))\n        if show_array:\n            click.echo(arr)\n        arr._mmap.close()\n\n\n@click.command(\'npyplot\')\n@click.argument(\'path\', type=click.Path(exists=True), nargs=1)\n@click.pass_context\ndef npyplot(ctx, path):\n    import matplotlib as mpl\n    import matplotlib.pyplot as plt\n\n    plt.style.use(\'dark_background\')\n    mpl.rcParams[\'toolbar\'] = \'None\'\n\n    f, ax = plt.subplots()\n    arr = np.load(path).squeeze()\n    if arr.ndim == 1:\n        ax.plot(arr)\n    elif arr.ndim == 2:\n        m, M = min(arr.shape), max(arr.shape)\n        arr = arr.reshape((M, m))\n        if m == 2:\n            ax.plot(arr[:, 0], arr[:, 1])\n        if 3 <= m <= 5:\n            ax.plot(arr)\n        else:\n            ax.imshow(arr)\n    elif arr.ndim == 3:\n        arr = np.transpose(arr, np.argsort(arr.shape)[::-1])\n        ax.imshow(arr[..., :3].astype(np.float64), vmin=arr.min(), vmax=arr.max())\n    f.canvas.window().statusBar().setVisible(False)\n    plt.show()\n'"
setup.py,0,"b'# -*- coding: utf-8 -*-\n# flake8: noqa\n\n""""""Installation script.""""""\n\n\n#------------------------------------------------------------------------------\n# Imports\n#------------------------------------------------------------------------------\n\nimport os\nimport os.path as op\nimport re\n\nfrom setuptools import setup, find_packages\n\n\n#------------------------------------------------------------------------------\n# Setup\n#------------------------------------------------------------------------------\n\ncurdir = op.dirname(op.realpath(__file__))\nwith open(op.join(curdir, \'README.md\')) as f:\n    readme = f.read()\n\n\n# Find version number from `__init__.py` without executing it.\nfilename = op.join(curdir, \'npytools.py\')\nwith open(filename, \'r\') as f:\n    version = re.search(r""__version__ = \'([^\']+)\'"", f.read()).group(1)\n\n\nsetup(\n    name=\'npytools\',\n    version=version,\n    license=""BSD"",\n    description=\'Command-line utilities for the NumPy file format\',\n    long_description=readme,\n    author=\'Cyrille Rossant (cortex-lab/UCL/IBL)\',\n    author_email=\'cyrille.rossant at gmail.com\',\n    url=\'https://github.com/cortex-lab/npytools\',\n    packages=find_packages(),\n    package_dir={\'npytools\': \'npytools\'},\n    package_data={\n        \'npytools\': [],\n    },\n    entry_points={\n        \'console_scripts\': [\n            \'npyshow = npytools:npyshow\',\n            \'npyplot = npytools:npyplot\',\n        ],\n    },\n    include_package_data=True,\n    keywords=\'\',\n    classifiers=[\n        \'Development Status :: 4 - Beta\',\n        \'Intended Audience :: Developers\',\n        \'License :: OSI Approved :: BSD License\',\n        \'Natural Language :: English\',\n        \'Programming Language :: Python :: 3\',\n        \'Programming Language :: Python :: 3.7\',\n    ],\n)\n'"
test_npytools.py,1,"b'# -*- coding: utf-8 -*-\n\n""""""Tests of core functions.""""""\n\n\n#------------------------------------------------------------------------------\n# Imports\n#------------------------------------------------------------------------------\n\nimport numpy as np\n\nfrom npytools import _sizeof, _array_info_table, _tabulate\n\n\n#------------------------------------------------------------------------------\n# Utils\n#------------------------------------------------------------------------------\n\ndef test_sizeof():\n    assert _sizeof(1e24)\n\n\ndef test_array_info_table():\n    arr = np.random.rand(10, 10)\n    table = _array_info_table(arr, show_stats=True)\n    assert table\n\n\ndef test_tabulate():\n    assert _tabulate([(\'a\', 1), (\'b\', 2)])\n'"
