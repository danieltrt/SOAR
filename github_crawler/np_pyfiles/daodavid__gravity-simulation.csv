file_path,api_count,code
local_deploy.py,0,"b""from setuptools import setup\nsetup(name='dao-gravity-simulation',\nversion='0.1',\ndescription='installing gravity simulation',\nurl='https://github.com/daodavid/gravity-simulation',\nauthor='daodeiv',\nauthor_email='dstankov1993@gmail.com',\nlicense='dadeiv-gravity',\npackages=['gravity_simulation'],\nzip_safe=True)\n\n"""
setup.py,0,"b'import setuptools\n\nwith open(""README.md"",\'r\')  as fh:\n    long_description = fh.read()\n\nprint(long_description)    \n#https://www.codementor.io/@ajayagrawal295/how-to-publish-your-own-python-package-12tbhi20tf\nsetuptools.setup(\n   name=""gravity-simulation"",\n   version=""2.0.1"",\n   description =""calculation and visualization of n-bodies gravity"",\n   long_description=long_description,\n   long_description_content_type=""text/markdown"",\n   url=""https://github.com/daodavid/gravity-simulation"",\n   author_email= ""dstankov1993@gmail.com"",\n   license=""MIT"",\n     classifiers=[\n        ""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: MIT License"",\n        ""Operating System :: OS Independent"",\n    ],\n   packages=[""gravity_simulation""],\n   include_package_data=True\n)\n'"
examples/2000bodies.py,0,"b""from gravity_simulation.gravity import GravityField\nfrom gravity_simulation.gravity import Body\n\nfield = GravityField()\n# v = (0,10)\n# print(v[1])\nfield.generate_random(3500,mass=[100,500],r = [-40,40])\n\n\nfield.add_body(Body(x0=22,y0=22,v_x=0,v_y=0,mass = 15000))\n\n\nfield.add_body(Body(x0=-22,y0=-22,v_x=0,v_y=0,mass = 15000))\n\n\n\n\nfield.run(1300,C = 0.01)\nfield.save_animation(reduce_size_body=200,frames=200,title='galaxy')"""
examples/5000b.py,0,"b""from gravity_simulation.gravity import GravityField\nfrom gravity_simulation.gravity import Body\n\nfield = GravityField()\n# v = (0,10)\n# print(v[1])\nfield.generate_random(500,mass=[1000,3000],r = [-120,-80])\nfield.generate_random(500,mass=[1000,3000],r = [80,120])\n\nfield.generate_random(2500,mass=[100,500],r = [-120,120])\n\n\nfield.add_body(Body(x0=-90,y0=-90,v_x=0,v_y=0,mass = 15000))\n\n\nfield.add_body(Body(x0=90,y0=90,v_x=0,v_y=0,mass = 15000))\n\n\n\n\nfield.run(500,C = 0.1)\nfield.save_animation(reduce_size_body=200,frames=200,title='galaxy')"""
examples/9-bodies.py,7,"b'from gravity_simulation.gravity import *\n\n\nfield = GravityField()\n\nfield.add_body(Body(15, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=30))\nfield.add_body(Body(6, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=50))\nfield.add_body(Body(-3, 0 ,np.cos(np.pi / 4)/(10*20), np.cos(np.pi / 4)/(10*20),mass=1500))\nfield.add_body(Body(-6, -6 , -0.01*np.cos(np.pi / 4)/100, -0.001*np.cos(np.pi / 4) ,mass=60))\nfield.add_body(Body(-10, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=100))\nfield.add_body(Body(-19, 0 ,np.cos(np.pi / 4)/(10*20), np.cos(np.pi / 4)/(10*20),mass=100))\nfield.add_body(Body(20, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=100))\n\n\n\n\nfield.run(47000, C=0.001)\nfield.save_animation(frames=100,figsize =(6,6),reduce_size_body=1)'"
examples/example.py,11,"b'\nfield = GravityField()\n\n\n# field.add_body(Body(15, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=30))\n# field.add_body(Body(6, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=50))\n# field.add_body(Body(-3, 0 ,np.cos(np.pi / 4)/(10*20), np.cos(np.pi / 4)/(10*20),mass=1500))\n# field.add_body(Body(-6, -6 , -0.01*np.cos(np.pi / 4)/100, -0.001*np.cos(np.pi / 4) ,mass=60))\n# field.add_body(Body(-10, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=100))\n# field.add_body(Body(-19, 0 ,np.cos(np.pi / 4)/(10*20), np.cos(np.pi / 4)/(10*20),mass=100))\n# field.add_body(Body(-20, -6 , -0.01*np.cos(np.pi / 4)/100, -0.001*np.cos(np.pi / 4) ,mass=60))\nfield.add_body(Body(30, 6 , -np.cos(np.pi / 4)/100, 0.01*np.cos(np.pi / 4) ,mass=100))\n\nfield.add_body(Body(-15, -20 , np.cos(np.pi / 4)/(10**100), np.cos(np.pi / 4)/10**100 ,mass=100))\n\n\n\n# for i in range(10):\n#     v = uniform(0,0.1)\n\n#     alpha = uniform(0,360)\n#     x1 = uniform(-20,200)\n#     x2 = uniform(-20,200)\n#     m = uniform(20,600)   \n#     field.add_body(Body(x1, x2 , -v*np.cos((alpha/360)*np.pi / 4)/100, v*np.sin((alpha/360)*np.pi) ,mass=m))    \n\n# for i in range(2):\n#     v = uniform(0,0.1)\n\n#     alpha = uniform(0,360)\n#     x1 = uniform(-20,200)\n#     x2 = uniform(-20,200)\n#     m = uniform(11000,15000)   \n#     field.add_body(Body(x1, x2 , -v*np.cos((alpha/360)*np.pi / 4)/100, v*np.sin((alpha/360)*np.pi) ,mass=m))        \n\nfield.run(100, C=0.1, number_frames=100, approx_error=0.000001)\nfield.save_animation()\n'"
examples/galaxy2.py,0,"b""from gravity_simulation.gravity import GravityField\nfrom gravity_simulation.gravity import Body\n\nfield = GravityField()\n\nfield = GravityField()\n\n\nfield.generate_random(2000, mass=[100, 900], r_x=[0, 2000], r_y=[\n                      0, 6000], r_0=-1000, alpha=[0, 360], velocity=[0, 500])\nfield.add_body(Body(x0=0, y0=0, v_x=100, v_y=100, mass=9999))\n\n\nfield.generate_random(2000, mass=[100, 900], r_x=[0, 1000], r_y=[0, 6000], alpha=[0, 360],r_0=19000,velocity=[0,500])\nfield.add_body(Body(x0=1000,y0=1000,v_x=100,v_y=100,mass=9999))\n\n\n\n#field.generate_random(2100, mass=[1000, 2000], r_x=[-500, 2000], r_y=[-1000, 0],r_0=15000,velocity=[0,1500], alpha=[0, 360])\n\n\nfield.run(2500, C=0.3)\nfield.save_animation(frames=150, title='galaxy', size_body=5)  # size_body=100"""
examples/galaxy3.py,0,"b""from gravity_simulation.gravity import GravityField\nfrom gravity_simulation.gravity import Body\n\nfield = GravityField()\n# v = (0,10)\n# print(v[1])\n\n#galaxy1 \n#field.generate_random(20,mass=[600,3000],r = [-10000,-5000])\n#field.add_body(Body(x0=-1400,y0=-900,v_x=0,v_y=0,mass = 15000))\n#field.generate_random(2000,mass=[100,300],r = [-10000,-5000])\n\n\n#galaxy2 \nfield.generate_random(1120,mass=[1000,3000],r = [-5000,5000])\n#field.add_body(Body(x0=1200,y0=1200,v_x=0,v_y=0,mass = 15000))\nfield.generate_random(5000,mass=[100,1500],r = [-5000,5000])\n\n\n\n\n\n\n\n\n\n\nfield.run(2000,C = 0.6)\nfield.save_animation(reduce_size_body=300,frames=150,title='galaxy')"""
examples/q.py,4,"b""import numba, numpy as np\n\n# Define the row-wise function to be vectorized:\n\n\ndef f(a,b):\n    b = a.sum() \n\n# Apply the function to an array with five rows:\na = np.arange(10).reshape(5,2)\nb = f(a)   \nprint(b)\n\n\n@vectorize(signature='(m),(m,n),(),(m)->(m)' )\ndef inner3(a,b,m,M):\n    c = a+b\n    d = np.sum(c,axis=1)\n    return d\n\nm = np.array(['1','1'])\nM = m\ny = x =np.array([[11, 12],\n                  [21, 22]])\nres = inner3(x,y,m,M)"""
examples/rab.py,0,"b'from gravity_simulation.gravity import *\n\n\n\n\nfor i in range(100):\n    for j in range(30):\n        j = j+2\n        field = GravityField()\n        field.generate_random(j, mass=[1000, 3000], r=[-50, 50])\n        field.run(157000, C=0.003)\n        field.save_animation(reduce_size_body=100, frames=150)\n'"
examples/t2.py,2,"b'\nimport numba, numpy as np\nfrom numba import guvectorize\nfrom numba import vectorize\nfrom numba import  float64,int64,f8\n#from numbapro import guvectorize\n\n@vectorize([""float64(float64, float64)""], nopython=False)\ndef F(a,b):\n     return (a+b)*5\n    #d = np.sum(c,axis=1)\n    #return d\n\nx = y = np.array([[11, 12],\n                   [21, 22]])\n\nM = [1,2]\n\nres = F(x,y)   \nprint(res)'"
gravity_simulation/__init__.py,16,"b'""""""Gravity simulation API\n\nThe module has an API for calculation and visualization of N-bodies \ninteraction under gravity forces\n\nExample:\n     \n    from gravity_simulation.gravity import GravityField\n    from gravity_simulation.gravity import Body\n    \n    field = GravityField()\n        field.add_body(Body(15, 6, -np.cos(np.pi / 4)/100,\n                        0.01*np.cos(np.pi / 4), mass=30))\n        field.add_body(Body(6, 6, -np.cos(np.pi / 4)/100,\n                        0.01*np.cos(np.pi / 4), mass=50))\n        field.add_body(Body(-3, 0, np.cos(np.pi / 4)/(10*20),\n                        np.cos(np.pi / 4)/(10*20), mass=1500))\n        field.add_body(Body(-6, -6, -0.01*np.cos(np.pi / 4) /\n                        100, -0.001*np.cos(np.pi / 4), mass=60))\n        field.add_body(Body(-10, 6, -np.cos(np.pi / 4)/100,\n                        0.01*np.cos(np.pi / 4), mass=100))\n        field.add_body(Body(-19, 0, np.cos(np.pi / 4)/(10*20),\n                        np.cos(np.pi / 4)/(10*20), mass=100))\n        field.add_body(Body(-20, -6, -0.01*np.cos(np.pi / 4) /\n                        100, -0.001*np.cos(np.pi / 4), mass=60))\n        field.add_body(Body(30, 6, -np.cos(np.pi / 4)/100,\n                        0.01*np.cos(np.pi / 4), mass=100))\n        \n        X, Y = field.run(17000, C=0.01)\n        field.save_animation(frames=80, figsize=(6, 6), reduce_size_body=5)\n        $ python example_google.py\n\nThe implementation is fully vectorized in order to achieve high performance.\n\nAttributes:\n   gravity.GravityField : class\n   gravity.Body : class\n   gravity.calculate_gravity :method \n\n   https://github.com/daodavid/gravity-simulation\n\n""""""'"
gravity_simulation/gravity.py,49,"b'# vectorized computation\nimport numpy as np\nfrom numba import float64, int64, f8, float32\nfrom numba import guvectorize\n\n# visualizing\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML\nfrom mpl_toolkits.mplot3d import Axes3D\nimport mpl_toolkits.mplot3d.axes3d as p3\nimport pandas as pd\n\n# common python\nfrom datetime import datetime\nimport warnings\nfrom random import *\nimport sys\n\nfrom numba import jit\n\n\nclass Body:\n    \'\'\' The class constructs the particle\'\'\'\n\n    def __init__(self,  x0, y0, v_x, v_y, mass=30):\n        \'\'\'\n        Parameters:\n        x0 : number\n        x coordintate\n\n        y : number\n        y coordintate\n\n        v_x : number\n        velocity of x coord.\n\n        v_y : number\n        velocity of y coord.\n\n        mass : number\n        Mass of body\n\n        \'\'\'\n        # the moment coordinates\n        self._mcoord = np.array([x0, y0])\n\n        # the moment velocity\n        self._mvelocity = np.array([v_x, v_y])\n\n        self._mass = mass\n\n\n@guvectorize([""float64[:, :],  float64[:] , float64 ,float64 ,float64[:, :]""], ""(n, m), (n) ,(),()-> (n, m)"", nopython=False, fastmath=True, forceobj=True)\ndef acc(x_ij, M_i, G=0.1, approx_error=0.001, out=None):\n    \'\'\'\n            calculation of accelaration given particles ( many to many )\n            Parameters : \n            x_ij : ndarray\n            cordinataes of particle\n            M_i : ndarray\n            masses of particles\n\n            Return :\n                    a_ij : ndarray\n                    accelaration of every particle\t \n\n    \'\'\'\n    # number of particles\n    n = x_ij.shape[0]\n\n    for i in range(x_ij.shape[0]):\n        acc = 0\n        # separate particles : one to many\n        X_i = x_ij[i]\n        x_kj = np.delete(x_ij, i, axis=0)\n        m = M_i[i]\n        m_k = np.delete(M_i, i).reshape(-1, 1)\n\n        # dr matrix contain all delta elemenets [[x_i0 - x_10, x_i1 - x_i1],[...,...],[x_i0 - x_k0, x_i1- x_k1]]\n        dr_kj = x_kj - X_i\n\n        # [(x_i0-x_k0)^2,(x_i1-x_k1)^2]\n        mod_dr_kj = dr_kj**2\n        #[sum_k (x_i0-x_k0)^2, sum_k (x_i1-x_k1)^2]\n        mod_dr_k = np.sum(mod_dr_kj, axis=1)\n\n        # when |dr| --> 0 then F--> infinity\n        error_value = approx_error\n        if (mod_dr_k < error_value).any():\n            #message = \'|dr|, |dr|-->0 , , there for the dr has been repalced by configured error value {}  \'.format(error_value)\n            mod_dr_k[mod_dr_k < error_value] = error_value\n            # print(message)\n\n        # if x_kj.shape[0] > 2 :\n            # warnings.showwarning(\n            # message, filename=\'gravity.py\', lineno=135, category=RuntimeWarning)\n\n        mod_dr_k = mod_dr_k.reshape(-1, 1)\n        F = G*m*m_k*(dr_kj/mod_dr_k)\n\n        out[i] = np.sum(F, axis=0)*(1/m)\n\n\nclass GravityField:\n\n    \'\'\'The class holds all bodies and provide its updatin in time.\n\n    Args :\n            x_cordinates : keeps the evolution of all bodies coordinates on the X axis through iterations\n            y_cordinates : keeps the evolution of all bodies coordinates on the Y axis through iterations\n\n    Attributes: \n    add_body(Body) :  adding new body on the field\n    run() :  start the process of calculation and updating of  corrdinates of Bodies\n    save_animation() : creates an animation mp4\n\n    Example : \n\n                    field = GravityField()\n                    field.add_body(Body(15, 6, -np.cos(np.pi / 4)/100,\n                                                                                    0.01*np.cos(np.pi / 4), mass=30))\n                    field.add_body(Body(6, 6, -np.cos(np.pi / 4)/100,\n                                                                                    0.01*np.cos(np.pi / 4), mass=50))\n                    field.add_body(Body(-3, 0, np.cos(np.pi / 4)/(10*20),\n                                                                                    np.cos(np.pi / 4)/(10*20), mass=1500))\n                    field.add_body(Body(-6, -6, -0.01*np.cos(np.pi / 4) /\n                                                                                    100, -0.001*np.cos(np.pi / 4), mass=60))\n                    field.add_body(Body(-10, 6, -np.cos(np.pi / 4)/100,\n                                                                                    0.01*np.cos(np.pi / 4), mass=100))\n                    field.add_body(Body(-19, 0, np.cos(np.pi / 4)/(10*20),\n                                                                                    np.cos(np.pi / 4)/(10*20), mass=100))\n                    field.add_body(Body(-20, -6, -0.01*np.cos(np.pi / 4) /\n                                                                                    100, -0.001*np.cos(np.pi / 4), mass=60))\n                    field.add_body(Body(30, 6, -np.cos(np.pi / 4)/100,\n                                                                                    0.01*np.cos(np.pi / 4), mass=100))\n\n                    X, Y = field.run(17000, C=0.01)\n                    field.save_animation(frames=80, figsize=(6, 6), reduce_size_body=5)\n\n    \'\'\'\n\n    def __init__(self, integratin_setp=0.1, G=0.01):\n        # gravity constant\n        self.g = G\n\n        self.h = integratin_setp\n        # curent coordinates and velocity of all bodies\n        self._mcoords = np.array([])  # [id,x,y]\n        self._mvelocity = np.array([])  # [id,v_x,v_y]\n\n        # all  x cordinates for all  particule\n        self.x_cordinates = np.array([])\n        # all y cordinat for all particlues in all time  [ , ]\n        self.y_cordinates = np.array([])\n        self._masses = np.array([])\n        self._force = np.array([])\n\n    def add_body(self, b):\n\n        if self._mcoords.size != 0:\n            self._mcoords = np.append(self._mcoords, [b._mcoord], axis=0)\n            self._mvelocity = np.append(\n                self._mvelocity, [b._mvelocity], axis=0)\n        else:\n            self._mcoords = np.array([b._mcoord])\n            self._mvelocity = np.array([b._mvelocity])\n\n        self._masses = np.append(self._masses, b._mass)\n\n        if self.x_cordinates.size != 0:\n            self.x_cordinates = np.append([self.x_cordinates], b._mcoord[0])\n            self.y_cordinates = np.append([self.y_cordinates], b._mcoord[1])\n        else:\n            self.x_cordinates = np.array(b._mcoord[0])\n            self.y_cordinates = np.array(b._mcoord[1])\n\n    def __leapFrog_step1(self):\n        """""" leap frog integration : step 1 \n                        x = x + v_1*self.h/2\n         """"""\n\n        #self.x1 = self.x1 + self.v1 * self.h / 2\n        #self.x2 = self.x2 + self.v2 * self.h / 2\n        self._mcoords = self._mcoords + self._mvelocity*(self.h/2)\n\n        # moment state\n        x = self._mcoords[:, 0]\n        y = self._mcoords[:, 1]\n\n        # insert new cordinates\n        if self.x_cordinates.shape == x.shape:\n            self.x_cordinates = np.array([self.x_cordinates, x])\n            self.y_cordinates = np.array([self.y_cordinates, y])\n        else:\n            self.x_cordinates = np.append(self.x_cordinates, [x], axis=0)\n            self.y_cordinates = np.append(self.y_cordinates, [y], axis=0)\n\n    def __leapFrog_step2(self):\n        \'\'\'leap frog integration : step 2\n                 v_{1/2} = v_1 + a(x_{1/2})*h\n        \'\'\'\n        a = acc(self._mcoords, self._masses, self.g,  self.approx_error)\n        self._mvelocity = self._mvelocity + a*self.h\n\n    def run(self, n, C=0.01, approx_error=0.001):\n        \'\'\'  Starting point \n\n        Parametes :\n                n  : number\n                number of itetaion (integration)\n                C  : float number\n                Integration step using in leap frog integration process\n\n                approx_error : float \n                Very special setting.Handled error comes form when dr-->0 and F-->infinity\n\n        Return : \n                X,Y pandas data frames \n                returns the  evolution  of all coordinates \n                of X, Y in time\n\n        \xd0\x95xample :\n         \'\'\'\n\n        self.h = C\n        self.number_iter = n\n        #self.number_frames = number_frames\n        #self.frame_step = int(n/number_frames)\n        self.approx_error = approx_error\n        self.number_of_bodies = self._mvelocity.shape[0]\n        self.error = approx_error\n        self.number_iteration = n\n\n        print(\'start calculation {}\'.format(datetime.now()))\n\n        for i in range(self.number_iteration):\n            self.__leapFrog_step1()\n            self.__leapFrog_step2()\n\n            # print out progress bar\n            p = ((i+1)/self.number_iteration)*100\n            sys.stdout.write(""\\r%d%%"" % p)\n            sys.stdout.flush()\n\n        print(\' calculation  completed :{}\'.format(datetime.now()))\n\n        self.__save__()\n        return self.__result__()\n\n    def __save__(self):\n        columns = [\'body_\' + str(i) for i in range(self.x_cordinates[0].size)]\n        self.X_cordinates = pd.DataFrame(self.x_cordinates, columns=columns)\n        self.Y_cordinates = pd.DataFrame(self.y_cordinates, columns=columns)\n        print(\'calculation complete succsefuly\')\n\n    def __result__(self):\n\n        return self.X_cordinates, self.Y_cordinates\n\n    def __update_anim__(self, i, arg):\n        arg.clf()\n        k = self.frame_step*i\n\n        linewidth = 1/self.number_of_bodies\n\n        X, Y = self.x_cordinates, self.y_cordinates\n\n        body_size = self.size_body*self._masses/self.number_of_bodies\n\n        x_plot, y_plot = X[k], Y[k]\n        plt.scatter(x_plot, y_plot, color=\'skyblue\', s=body_size)\n        if self.show_trajectory:\n            plt.plot(X, Y, color=\'skyblue\', linewidth=linewidth)\n        title = plt.title(self.title)\n        plt.setp(title, color=\'skyblue\')\n\n    def save_animation(self, frames=50, name=None, **kwargs):\n        \'\'\'\n        Save animation in mp4\n\n        Parameters :\n                frames : int\n                the number of frames wich  will be genarated\n\n                name : str\n                name of the file \n\n                **kwargs \n                        can be passed some plot setting \n                        as title ,figsize ,reduce_size_body\n\n                example :\n\n         save_animation(frames = 100 , name = \'my_animation\' ,figsize=(6, 6),\n                                                                        reduce_size_body=20,title=\'N body generation\')\n\n\n        \'\'\'\n\n        N = self._mcoords.shape[0]\n        self.title = \'gravity simulation number of bodies = {}\'.format(N)\n        if N < 20:\n            self.show_trajectory = True\n        else:\n            self.show_trajectory = False\n\n        self.size_body = 10\n        figsize = (6, 6)\n        for key, value in kwargs.items():\n            if key == \'title\':\n                self.title = value\n            elif key == \'figsize\':\n                figsize = value\n            elif key == \'size_body\':\n                self.size_body = value\n            elif key == show_trajectory:\n                self.show_trajectory = value\n\n        fig = plt.figure(figsize=figsize)\n        plt.style.use(\'dark_background\')\n\n        self.frame_step = int(self.number_iter/frames)\n\n        Writer = animation.writers[\'ffmpeg\']\n        writer = Writer(fps=15, metadata=dict(artist=\'Me\'), bitrate=1800)\n\n        anim = animation.FuncAnimation(plt.gcf(), self.__update_anim__, interval=1, fargs=(\n            fig,), frames=frames, blit=False)\n\n        if name is None:\n            random_name = str(np.random.randint(0, 100))\n            name = (\'exm.{} ,b_{}, itr={}\').format(\n                random_name, N, self.number_iteration)\n\n        name = name+\'.mp4\'\n        print(\'start rendering {}\'.format(datetime.now()))\n        anim.save(name, writer=writer)\n        print(\'end rendering {}\'.format(datetime.now()))\n        # HTML(anim.to_html5_video())  ### for notebooks\n\n    def generate_random(self, N_bodies, mass=[20, 500], r_x=[-5, 5], r_y=[-5, 5], r_0=0, velocity=[-5, 5], alpha=[0, 360]):\n        for i in range(N_bodies):\n\n            # pass\n            v = np.random.randint(velocity[0], velocity[1])\n            a = np.random.randint(alpha[0], alpha[1])\n            radius_x = np.random.randint(r_x[0], r_x[1])\n            radius_y = np.random.randint(r_y[0], r_y[1])\n            m = np.random.randint(mass[0], mass[1])\n            self.add_body(Body(r_0 + radius_x*np.cos((a/360)*2*np.pi), r_0 + radius_y*np.sin(\n                (a/360)*2*np.pi), v*np.cos((a/360)*2*np.pi), v*np.sin((a/360)*2*np.pi), mass=m))\n\n\nfield = GravityField()\n\n\nfield.generate_random(2000, mass=[100, 900], r_x=[0, 2000], r_y=[\n                      0, 6000], r_0=-1000, alpha=[0, 360], velocity=[0, 500])\nfield.add_body(Body(x0=0, y0=0, v_x=100, v_y=100, mass=9999))\n\n\nfield.generate_random(2000, mass=[100, 900], r_x=[0, 1000], r_y=[0, 6000], alpha=[0, 360],r_0=19000,velocity=[0,500])\nfield.add_body(Body(x0=1000,y0=1000,v_x=100,v_y=100,mass=9999))\n\n\n\n#field.generate_random(2100, mass=[1000, 2000], r_x=[-500, 2000], r_y=[-1000, 0],r_0=15000,velocity=[0,1500], alpha=[0, 360])\n\n\nfield.run(2500, C=0.3)\nfield.save_animation(frames=150, title=\'galaxy\', size_body=5)  # size_body=100\n'"
gravity_simulation/test.py,32,"b'import numpy as np\nfrom numba import guvectorize\n\n# from datetime import datetime\n# # for i in range(10000,10020) :\n# #     start = datetime.now()\n# #     a = np.full((i+10000, i+10000), 100)\n# #     #print(a.shape)\n# #     np.sum(a)\n# #     print(datetime.now()-start)\n\n# # @guvectorize([(int64[:], int64, int64[:])], \'(n),()->(n)\')\n\n\n# def add(a, b):\n#     d = a - b\n#     return d\n\n\n\n\n# x = y = np.array([[11, 12],\n#                   [21, 22]])\n\n                \n\n# # k = np.vectorize(sum, signature=\'()->(n)\', excluded=[\'b\'])\n# k = np.vectorize(add, signature=\'(),()->()\', excluded=[\'b\'])\n   \n# res = k(x,y)\n# print(res)\n\n\n# # = k(a=x,b=y)\n# #print(res)\n\n# def inner1d(a , b  ):  #signature = (i),(i)->()\n#   c = a+b\n#   return c\n\n\n# #k = np.vectorize(inner1d, signature=\'(),()->()\', excluded=[\'b\'])\n# #res = k(x,y)\n\n# x = y = np.array([1,2])  \n# y = x =np.array([[11, 12],\n#                   [21, 22]])\n\n\n# #k = np.vectorize(inner1d, signature=\'(i),(i)->(i)\')  #excluded=[\'b\']\n# #res = k(x,y)\n# #print(res)\n\n# def inner(a,b):\n#   c = a*b\n#   return c\n\n# k = np.vectorize(inner, signature=\'(m,n),(n,p)->(m,p)\')  #excluded=[\'b\']\n# #k = np.vectorize(inner, signature=\'(i),(i)->(i)\')  #excluded=[\'b\']\n# res = k(x,y)\n# #print(res)\n\n\n# def inner2(a,b):\n#   c = a+b\n#   return c\n\n# k = np.vectorize(inner2, signature=\'(m,n),(m,n)->(m,p)\')  #excluded=[\'b\']\n# #k = np.vectorize(inner, signature=\'(i),(i)->(i)\')  #excluded=[\'b\']\n# res = k(x,y)\n# #print(res)\n\n# def inner3(a,b):\n#   c = a+b\n#   return c\n\n# k = np.vectorize(inner3, signature=\'(m),(m,n)->(m,n)\')  #importen\n# #k = np.vectorize(inner, signature=\'(i),(i)->(i)\')  #excluded=[\'b\']\n# #res = k(x,y)\n# #print(res)\n\n\n# k = np.vectorize(inner3, signature=\'(m),(m,n)->(m,n)\')\n# \'\'\'\n# https://docs.scipy.org/doc/numpy-1.13.0/reference/c-api.generalized-ufuncs.html\n\n# \'\'\'\n# res = k(x,y)\n# print(res)\n\n\n# def inner3(a,b):\n#     c = a+b\n#     d = np.sum(c,axis=1)\n#     return d\n\n\n# k = np.vectorize(inner3, signature=\'(m),(m,n)->(m)\')\n# res = k(x,y)\n# #print(res)\n\n\n\n# k = np.vectorize(inner3, signature=\'(m),(m,n),(),(m)->(m)\')\n# res = k(x,y,m,M)\n\n# #@np.vectorize(signature=\'(m),(m,n),(),(m)->(m)\')\n# def inner3(a,b,m,M):\n#     c = a+b\n#     d = np.sum(c,axis=1)\n#     return d\n\n\n# k = np.vectorize(inner3, signature=\'(m_i),(m_i,n),(),(m_i)->(m_i)\')\n# res = k(x,y,m,M)\n# print(int(2.62917283e-05))\n\n\n\nfrom numba import vectorize, float64\n@guvectorize([""void(float64[:,:], float64[:,:], float64[:,:])""],\n             ""(m,n),(n,p)->(m,p)"")\ndef w(a, b, result):\n       c = a*b\n       return c\n\n\n\n# @vectorize(signature=\'(m),(m,n),(),(m)->(m)\' )\n# def inner3(a,b,m,M):\n#     c = a+b\n#     d = np.sum(c,axis=1)\n#     return d\n\n# m = np.array([\'1\',\'1\'])\n# M = m\ny = x =np.array([[1, 2],\n                  [1, 2]])\n# res = inner3(x,y,m,M)\n\nv = w(x,y)\n\nprint(w)\nprint(int(8.34895083e-312))\n\nprint(np.sum)\n\n\n\n\ndef gravity_force(X_i, x_kj, M_i, M_kn, g=0.001, error_value=0.00001):\n    \'\'\'\'\n    G_ik = sum_i g*(M_i.M_kn)* (r_i - r_k)/( (r_i1 - r_k1)^2 +(r_i2 - r_k2)^2 )\n    G_i = S_i g.m.M(r_i - r_k)/(|r_i - r_k|^2)\n\n    The core method using for calculation of force Gravity\n    on one particle. The force is the sum of all forces coming from other particles\n\n    This method calculates gravity force which acts on particle X_i.\n    The force G is a sum of all forces producing from every particle.\n\n    The method is written in NumPy thus it is  vectorized in order to achieve the highest performance\n\n    Parameters :\n\n        X_i  : ndarray [ , ]\n        radius vector X_i = [x_ij]\n        example :\n         X_1 = [x_10,x_11] = [x(axis), y(axis)]\n\n        x_kj : ndarray\n        matrix of all coords exclude X_i\n        x_kj= [ [x_10, x_11 ], [..., ... ] , [x_k0,x_k1] ]\n\n        g : number \n        gravity constant \n\n        error_value : float\n        special parameter setting  for fixing of  problem in case when the modul |r|\n        tends to zero then the F tend to infinity and the model is broken (in real world this cannot happens)\n        the error value is the min distance in which the bodies interact one each other \n        with the same constant force in order to prevent Infinity values.\n        when this value is aachieve the method will show RuntimeWarning\n\n    Return :\n        Sum of all  gravity forces coming from particles x_kj wich acts on particle X_i\n\n    \'\'\'\n    # prevent calculation of force of body respect to itself\n    index1, index2 = np.where(x_kj[:, 0] == X_i[0])[\n        0], np.where(x_kj[:, 1] == X_i[1])[0]\n    if ((index1 == index2).any()):\n        x_kj = np.delete(x_kj, index1, axis=0)\n        M_kn = np.delete(M_kn, index1)\n\n    # dr matrix contain all delta elemes [[x_i0 - x_10, x_i1 - x_i1],[...,...],[x_i0 - x_k0, x_i1- x_k1]]\n    dr_kj = x_kj - X_i  #\n    # return [(x_i0-x_k0)^2,(x_i1-x_k1)^2]\n    mod_dr_kj = dr_kj**2\n    # return [sum_k (x_i0-x_k0)^2, sum_k (x_i1-x_k1)^2]\n    mod_dr_k = np.sum(mod_dr_kj, axis=1)\n\n    # when |dr| --> 0 then F--> infinity\n    error_value = 0.0000001\n    if (mod_dr_k < error_value).any():\n        message = \'|dr|, |dr|-->0 , , there for the dr has been repalced by configured error value {}  \'.format(\n            error_value)\n        mod_dr_k[mod_dr_k < error_value] = error_value\n        if x_kj.shape[0] > 2:\n            warnings.showwarning(\n                message, filename=\'gravity.py\', lineno=135, category=RuntimeWarning)\n\n    mod_dr_k = mod_dr_k.reshape(-1, 1)\n    M_kn = M_kn.reshape(-1, 1)\n\n    G = g*M_i*M_kn*(dr_kj/mod_dr_k)\n    sum_force = np.sum(G, axis=0)\n    return sum_force\n'"
resources/convert_to_gift.py,0,"b' ffmpeg -i bodies\\=1558\\,N\\=447233.mp4  a.gif'"
