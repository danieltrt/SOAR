file_path,api_count,code
Python Code/ITS/OsciloscopioTimeReal.py,35,"b'#Eladio Jimenez 13-10699\r\n#Kheyter Chassaigne 13-10274\r\nimport cv2\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.pylab as pyl\r\nimport serial\r\nimport time\r\n\r\ndef EscribirArchivo(Valor):#, f2, f3, f4, d1, d2):\r\n\r\n    f1 = Valor\r\n\r\n    list(Valor)\r\n    Valores = Valor.split("" "")\r\n\r\n    if len(Valores) == 1:\r\n        #f1 = str(Valores[0])\r\n        out_file.write(f1 + "" "" + ""\\n"")\r\n\r\n        list(f1)\r\n        # f1.insert(1,\',\')\r\n        coma = f1.split(\'.\')\r\n        # coma.insert(1,\',\')\r\n        f1 = "","".join(coma)\r\n        # print(f1)\r\n        excel_file.write(f1 + "" "" + ""\\n"")\r\n    else:\r\n        if len(Valores) == 2:\r\n\r\n            f1 = Valores[0]\r\n            f2 = Valores[1]\r\n            out_file.write(str(f1) + "" "" + str(f2) + "" "" + ""\\n"")\r\n\r\n            list(str(f1))\r\n            coma = f1.split(\'.\')\r\n            f1 = "","".join(coma)\r\n            list(str(f2))\r\n            coma = f2.split(\'.\')\r\n            f2 = "","".join(coma)\r\n            excel_file.write(f1 + "" "" + f2 + "" "" + ""\\n"")\r\n        else:\r\n            if len(Valores) == 3:\r\n                f1 = Valores[0]\r\n                f2 = Valores[1]\r\n                f3 = Valores[2]\r\n                out_file.write(str(f1) + "" "" + str(f2) + "" "" + str(f3) + "" "" + ""\\n"")\r\n\r\n                list(str(f1))\r\n                coma = f1.split(\'.\')\r\n                f1 = "","".join(coma)\r\n                list(str(f2))\r\n                coma = f2.split(\'.\')\r\n                f2 = "","".join(coma)\r\n                list(str(f3))\r\n                coma = f3.split(\'.\')\r\n                f3 = "","".join(coma)\r\n\r\n                excel_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + ""\\n"")\r\n            else:\r\n                f1 = Valores[0]\r\n                f2 = Valores[1]\r\n                f3 = Valores[2]\r\n                f4 = Valores[3]\r\n                out_file.write(str(f1) + "" "" + str(f2) + "" "" + str(f3) + "" "" + str(f4) + "" "" + ""\\n"")\r\n\r\n                list(str(f1))\r\n                coma = f1.split(\'.\')\r\n                f1 = "","".join(coma)\r\n                list(str(f2))\r\n                coma = f2.split(\'.\')\r\n                f2 = "","".join(coma)\r\n                list(str(f3))\r\n                coma = f3.split(\'.\')\r\n                f3 = "","".join(coma)\r\n                list(str(f4))\r\n                coma = f4.split(\'.\')\r\n                f4 = "","".join(coma)\r\n                excel_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + ""\\n"")\r\n\r\n    # Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\r\n    #out_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + d1 + "" "" + d2 + ""\\n"")\r\n\r\n\r\ndef DecodDig1(V):\r\n    #01000000 es 64\r\n    V = int(V)\r\n    d = V & 64\r\n    return d >> 6 #Falta shiftear 6 valores a la derecha\r\n\r\ndef DecodDig2(V):\r\n    #00100000 es 32\r\n    V = int(V)\r\n    d = V & 32\r\n    return d >> 5 #Falta shiftear 5 valores a la derecha\r\n\r\n\r\ndef DecodAnalog(V1,V2):\r\n    #print(\'V1\'+"" = ""+str(V1)+""  Su tipo es: "")\r\n    #print(type(V1))\r\n    a=int(V1)\r\n    b=int(V2)\r\n    #print(type(a_))\r\n    #a = np.fromstring(V1, dtype=np.uint8)\r\n    #print(\'a = \' + str(a)+ "" ""+ str(a[0]))\r\n    #b = np.fromstring(V2, dtype=np.int8)\r\n    #print(\'b = \'+str(b[0]))\r\n\r\n    a1 = a & 0x1F#31\r\n    b1 = b << 1\r\n    c = a1 << 8\r\n    d = b1 & 0x00FF#255\r\n    d = c | d\r\n\r\n    Analogico = d >> 1\r\n    #print(Analogico)\r\n    #Analogico = ((2 ** 7) * (a[0] & 31) + b[0])\r\n\r\n    flotante = Analogico * 3.3 / ((2 ** 12) - 1)\r\n\r\n    return flotante\r\n\r\ndef DecodificadorSerial(Paquete, Sensor):\r\n\r\n    #""Paquete"" es de 8 bytes, 1 byte por caracter\r\n    if len(Paquete)== 2:\r\n        f1 = DecodAnalog(Paquete[0], Paquete[1])\r\n        Valor = str(f1)\r\n        EscribirArchivo(Valor)\r\n    else:\r\n        if len(Paquete) == 4:\r\n            f1 = DecodAnalog(Paquete[0], Paquete[1])\r\n            f2 = DecodAnalog(Paquete[2], Paquete[3])\r\n            Valor = str(f1)+"" ""+str(f2)\r\n            EscribirArchivo(Valor)\r\n        else:\r\n            if len(Paquete) == 6:\r\n                f1 = DecodAnalog(Paquete[0], Paquete[1])\r\n                f2 = DecodAnalog(Paquete[2], Paquete[3])\r\n                f3 = DecodAnalog(Paquete[4], Paquete[5])\r\n                Valor = str(f1) + "" "" + str(f2) + "" "" + str(f3)\r\n                EscribirArchivo(Valor)\r\n            else:\r\n                f1 = DecodAnalog(Paquete[0], Paquete[1])\r\n                f2 = DecodAnalog(Paquete[2], Paquete[3])\r\n                f3 = DecodAnalog(Paquete[4], Paquete[5])\r\n                f4 = DecodAnalog(Paquete[6], Paquete[7])\r\n                Valor = str(f1) + "" "" + str(f2) + "" "" + str(f3) + "" "" + str(f4)\r\n                EscribirArchivo(Valor)\r\n\r\n    d1 = DecodDig1(Paquete[0])\r\n    d2 = DecodDig2(Paquete[0])\r\n\r\n    #f2 = DecodAnalog(Paquete[2], Paquete[3])\r\n    #f3 = DecodAnalog(Paquete[4], Paquete[5])\r\n    #f4 = DecodAnalog(Paquete[6], Paquete[7])\r\n    #Escribir en archivo\r\n    #Escribir en un archivo todos los valores de los analogicos y digitales por columna\r\n    #Columnas: f1 f2 f3 f4 d1 d2\r\n    #, f2, f3, f4, d1, d2)\r\n\r\n    list(Valor)\r\n    Valores = Valor.split("" "")\r\n\r\n    if Sensor == 1:\r\n        SensorAnalog = Valores[0]\r\n    else:\r\n        if Sensor == 2:\r\n            SensorAnalog = Valores[1]\r\n        else:\r\n            if Sensor == 3:\r\n                SensorAnalog = Valores[2]\r\n            else:\r\n                if Sensor == 4:\r\n                    SensorAnalog = Valores[3]\r\n\r\n    return str(SensorAnalog) + "" "" +str(d1) + "" "" + str(d2)\r\n#---------------------------------------------------------------------------------------\r\nplt.ion()\r\n\r\n#Inicializacion de vectores\r\n\r\n#Vector que obtendra todos los datos del serial\r\ncontenido = np.zeros((0, 1), dtype=np.float)\r\n\r\n#Vectores para leer las coordenadas del archivo\r\nX = np.zeros((0, 1), dtype=np.float)\r\nY = np.zeros((0, 1), dtype=np.float)\r\n#VectorGraficador = np.zeros((0, 1), dtype=np.float)\r\nVectorGraficador = []\r\n\r\n#Leer por serial\r\nruta = ""SenalSensorSerial.txt""\r\nexcel_file = open(""excel_File.txt"",""w"")\r\n\r\nwith open(ruta,""w"") as out_file:\r\n    with serial.Serial(\'COM5\', 115200, timeout=1) as ser:\r\n        print(""El puerto serial usado es: "")\r\n        print(ser)\r\n\r\n        Calibracion = np.zeros((0, 1), dtype=np.float)\r\n\r\n        start_time = time.time()\r\n        cont=0\r\n        Time = 0\r\n        n=300 #0.7ms -> n=500 #1ms -> n=\r\n        Bytes = 9\r\n        Sensor = 1\r\n        while( Time < 40  ):\r\n\r\n            stop_time = time.time()\r\n            Time = stop_time - start_time\r\n\r\n            if ser.in_waiting > 1:\r\n\r\n                Datos = ser.read(size = Bytes)#ser.in_waiting)\r\n\r\n                while(Datos[0] < 244):\r\n                    print(""Esperando cabecera"")\r\n                    ser.reset_input_buffer()\r\n                    Datos = ser.read(size=Bytes)\r\n\r\n                if Bytes == 3:\r\n                    aux = str(Datos[0])+"" ""+str(Datos[1])+"" ""+str(Datos[2])\r\n                    #Cabecera = 241\r\n                else:\r\n                    if Bytes == 5:\r\n                        aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2]) + "" "" + str(Datos[3]) + "" "" + str(Datos[4])\r\n                        #Cabecera = 242\r\n                    else:\r\n                        if Bytes == 7:\r\n                            aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2]) + "" "" + str(Datos[3]) + "" "" + str(Datos[4])+ "" "" + str(Datos[5]) + "" "" + str(Datos[6])\r\n                            #Cabecera = 243\r\n                        else:\r\n                            aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2]) + "" "" + str(Datos[3]) + "" "" + str(Datos[4])+ "" "" + str(Datos[5]) + "" "" + str(Datos[6])+ "" "" + str(Datos[7]) + "" "" + str(Datos[8])\r\n                            #Cabecera = 244\r\n\r\n                #header = 241 con un solo analogico F1\r\n                Paquetes = aux.split("" "") #Cabecera ASCII 248\r\n                Paquetes.pop(0)\r\n\r\n                #print(type(Paquetes))\r\n                ###print(Paquetes[0]+"" ""+Paquetes[1])\r\n                Valor = DecodificadorSerial(Paquetes, Sensor)\r\n                #print(Valor)\r\n\r\n                list(Valor)\r\n                valores = Valor.split("" "")\r\n\r\n                #print(valores[0])\r\n                valor = valores[0]\r\n                print(valor)\r\n                #Pila\r\n                #VectorGraficador = np.vstack([VectorGraficador, valor])\r\n\r\n                #Intentos de lista\r\n                #VectorGraficador += [valor]\r\n                #VectorGraficador = list()\r\n\r\n                #Lista\r\n                valor = float(valor)\r\n                VectorGraficador.append(valor)\r\n                if(Time<3):\r\n                    Calibracion = np.vstack([Calibracion, valor])\r\n                if(Time>3 and Time<3.2):\r\n                    print(""Calibracion lista"")\r\n\r\n                #print(type(VectorGraficador))\r\n                #print(len(VectorGraficador))\r\n                #print(VectorGraficador)\r\n\r\n\r\n                if( len(VectorGraficador) > n):\r\n                    Y=VectorGraficador[0:n]#[-9:]\r\n                    nmedio=n/2\r\n                    nmedio=int(nmedio)\r\n\r\n                    #print(nmedio)\r\n                    del VectorGraficador[0:nmedio]\r\n                    #print(type(VectorGraficador))\r\n                    #print(Y)\r\n                    X=np.arange(0, len(Y))\r\n                    #n=len(X)-1\r\n\r\n                    #n=0; n = n+10\r\n\r\n                # Graficar\r\n                    plt.figure(1)\r\n                    plt.clf()\r\n                    plt.plot(X, Y, marker=\'.\')  # c=\'b\')\r\n                    plt.axis(\'tight\')\r\n                    plt.title(""Se\xc3\xb1al captada por los sensores"")\r\n                    plt.legend()\r\n                    plt.ylim(-0.3, 3.3)\r\n                    # plt.show()\r\n                    plt.draw()\r\n                    plt.waitforbuttonpress(0.02)\r\n\r\n                #if(len(VectorGraficador))\r\n\r\n\r\n#------\r\n\r\nexcel_file.close()\r\n#Leer Archivo\r\n#Vectores para leer las coordenadas del archivo\r\nX = np.zeros((0, 1), dtype=np.float)\r\nY = np.zeros((0, 1), dtype=np.float)\r\nYaux = np.zeros((0, 1), dtype=np.float)\r\nVectorSplit = np.zeros((0, 1), dtype=np.float)\r\n#XSEP = np.zeros((0, 1), dtype=np.float)\r\n#XSEP = np.vstack([XSEP, Valor a agregar])\r\n\r\ntry:\r\n    with open(""SenalSensorSerial.txt"", ""r"") as out_file:\r\n\r\n        #print(""HOLA"")\r\n        #print(""Aqui toy"")\r\n        lines = out_file.readlines()\r\n\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n\r\n            if Sensor == 1:\r\n                Y = np.vstack([Y, Lectura[0]])\r\n                #print(Lectura[0])\r\n            else:\r\n                if Sensor == 2:\r\n                    Y = np.vstack([Y, Lectura[1]])\r\n                else:\r\n                    if Sensor == 3:\r\n                        Y = np.vstack([Y, Lectura[2]])\r\n                    else:\r\n                        Y = np.vstack([Y, Lectura[3]])\r\n        #print(""Aqui toy"")\r\n        print(Calibracion)\r\n        ##vector = np.arange(0, 4)\r\n        #print(Calibracion)\r\n        Ref = np.mean(Calibracion)\r\n        #print(""Aqui toy 3"")\r\n        #prom = np.mean(Y)\r\n        print(""Valor referencia: "" + str(Ref))\r\n        Indmax = np.argmax(Y)\r\n        Vmax=Y[Indmax]\r\n        #print(""Vmax: ""+str(Vmax))\r\n        Vresta = (Vmax - Ref)/2\r\n        #print(""Vresta: ""+str(Vresta))\r\n        ##print(type(prom))\r\n        ##print(type(Vresta))\r\n        Vcorte = Ref + Vresta\r\n        #print(""El valor de corte sera: "" + str(Vcorte))\r\n        #print(""La longitud del vector original es: ""+str(len(Y)))\r\n\r\n        #Todos los valores del vector que sean mayores al voltaje de corte\r\n        Yaux = Y > Vcorte\r\n        Ynew = Y[Yaux]\r\n\r\n        #print(Y)\r\n        print(""Yaux:"")\r\n        #print(type(Yaux))\r\n        print(Yaux)\r\n\r\n        Ynew_ind = np.where(Yaux > 0)\r\n        Xnew = Ynew_ind[0] #Ynew=Y[new_ind[0]]\r\n\r\n        #-------Extra\r\n        Yauxd = Y < Vcorte\r\n        Xd = np.where(Yauxd > 0)\r\n        Xdeteccion = Xd[0]\r\n        #----------------\r\n        print(""Xdeteccion: ""+str(Xdeteccion))\r\n        print(""Xnew: "" + str(Xnew))\r\n\r\n        ##Ynew=np.nonzero(Yaux)\r\n        #print(""La longitud del nuevo vector es: ""+str(len(Ynew)))\r\n        #print(""Ynew_ind: "")\r\n        #print(Ynew_ind)\r\n        #print(""Y[Ynew_ind]: "")\r\n        #print(Y[Ynew_ind[0]])\r\n        #print(""Zeros: Y[Ynew_ind[1]] "")\r\n        #print(Y[Ynew_ind[1]])\r\n        #print(""Ynew: "")\r\n        #print(Ynew)\r\n\r\n        #Separacion de picos\r\n        Indmin = np.argmin(Ynew)\r\n        Vmin=Ynew[Indmin]\r\n        print(""Vmin: "" + str(Vmin))\r\n\r\n        Ysepi = Ynew < (Vmin + 0.1)\r\n        Ysepv = Ynew[Ysepi]\r\n        Ysep_ind = np.where(Ysepi > 0)\r\n\r\n        Xsep = Xnew[Ysep_ind[0]]#Ynew[Ysep_ind[0]] #Valores minimos en ""x""\r\n        print(Xsep)\r\n\r\n        s=[]\r\n        saux=[]\r\n        s.append(0)\r\n\r\n        for i in range(len(Xsep)-1):\r\n            DifX = Xsep[i+1]-Xsep[i]\r\n            if(DifX > 30):\r\n                #s.append(i)\r\n                s.append(i+1)\r\n        #179 espacios entre min\r\n        #227 espacios entre min\r\n\r\n        #170 estapacion entre min (Bien)\r\n        #\r\n\r\n\r\n\r\n        #-------------Extra\r\n        for i in range(len(Xdeteccion)-1):\r\n            DifX = Xdeteccion[i + 1] - Xdeteccion[i]\r\n            if (DifX > 10):\r\n                saux.append(i)\r\n                saux.append(i + 1)\r\n        #--------------------------\r\n\r\n        print(""Longitud de saux: ""+str(len(saux)))\r\n        print(""saux: ""+str(saux))\r\n\r\n        print(""Longitud de s: ""+str(len(s)))\r\n        print(""s: ""+str(s))\r\n        CanVeh = len(s)/2\r\n\r\n        Xisep = []\r\n        XSep = []\r\n        XSepM = []\r\n        XSEP = []\r\n        YSEP = []\r\n\r\n        #Extra\r\n        Xisepaux=[]\r\n\r\n        #El vector ""s"" contiene los valores limitrofes (indices de Xsep) de los minimos en el eje ""x""\r\n\r\n        for i in range(len(s)):\r\n            Xisep.append(Xsep[s[i]]) #Valores de Xisep son los valores de los indices de Xsep respectivos (pares de minimos)\r\n\r\n        #-----------Extra\r\n        for i in range(len(saux)):\r\n            Xisepaux.append(Xdeteccion[saux[i]])  # Valores de Xisep son los valores de los indices de Xsep respectivos (pares de minimos)\r\n        #--------\r\n\r\n        #print(""Vamos bien"")\r\n\r\n        #----------------------Extra\r\n        listAux=[]\r\n        for i in range(len(Xisepaux)):\r\n            if i % 2 == 0:\r\n                listAux.append(Xisepaux[i]+1)\r\n            else: listAux.append(Xisepaux[i]-1)\r\n        #----------\r\n\r\n        #Xisepaux=Xisep para la prueba\r\n        for i in range(len(Xisepaux)):\r\n            ind = np.where(Xnew == listAux[i])#(Xisepaux[i]))\r\n            XSep.append(ind[0])\r\n\r\n        for i in range(len(XSep)):\r\n            if i % 2 != 0:\r\n                Dif = XSep[i] - XSep[i - 1]\r\n                if Dif > 35:\r\n                    XSepM.append(XSep[i-1])\r\n                    XSepM.append(XSep[i])\r\n\r\n        print(""Vamos bien"")\r\n        print(""CantVeh: ""+str(CanVeh))\r\n        i=0\r\n        print(""CanVeh en entero es: "")\r\n        print(int(CanVeh))\r\n\r\n        print(""Vamos bien: "" + str(i) + "" Hasta: "" + str(int(CanVeh)))\r\n\r\n        print(""Xisep: "" + str(Xisep))\r\n        print(""Xisepaux: "" + str(Xisepaux))\r\n\r\n        print(""XSep: "" + str(XSep))\r\n        print(""Su longitud es: "" + str(len(XSep)))\r\n\r\n        print(""XSepM: "" + str(XSepM))\r\n        print(""Su longitud es: "" + str(len(XSepM)))\r\n\r\n        #print(type(Xnew))\r\n        #print(type(VectorSplit))\r\n        #imin = int(XSep[i])\r\n        #imax = int(XSep[i+1])\r\n        #print(""Indices: min es ""+str(imin)+"" max es ""+str(imax))\r\n        #VectorSplit = Xnew[imin:imax]\r\n        #print(""VectorSplit de prueba: ""+str(VectorSplit))\r\n\r\n        #s=saux\r\n        while(i<int(len(XSepM))):\r\n\r\n            #print(""El valor ""+str(i)+"" es: ""+str(int(XSep[i])))\r\n\r\n            #XSEP = np.vstack([XSEP, Xnew[int(XSep[i]):int(XSep[i+1])]])\r\n            XSEP.append(Xnew[int(XSepM[i]):int(XSepM[i+1])])#XSepM es XSep modificado\r\n            YSEP.append(Ynew[int(XSepM[i]):int(XSepM[i+1])])\r\n\r\n            i=i+2\r\n            #print(""i= ""+str(i))\r\n\r\n        #print(""Vamos bien"")\r\n        #print(""XSep: ""+str(XSep))\r\n        #print(""XSEP: ""+str(XSEP))\r\n\r\n        #XSEP contiene en sus posiciones los arreglos en X que se van a graficar\r\n        #YSEP contiene los valores en Y que se van a graficar\r\n\r\n        #print(""Ysepi:"")\r\n        #print(Ysepi)\r\n        #print(""Ysepv:"")\r\n        #print(Ysepv)\r\n        #print(""Xsep:"")\r\n        #print(Xsep)\r\n\r\n        #print(""La longitud del vector de discriminacion es: ""+str(len(Ysepv)))\r\n        #print(""Longitud de XSEP: ""+str(len(XSEP)))\r\n        print(""Han pasado ""+str(len(XSEP))+"" vehiculos"")\r\n        Amplitud=[]\r\n        for i in range(len(YSEP)):\r\n            Amplitud.append(np.mean(YSEP[i]))\r\n\r\n        print(Amplitud)\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n\r\nX=np.arange(0, len(Y))\r\n#Xnew=np.arange(0, len(Ynew))\r\n\r\nwith open(""EjeTiempoX.txt"", ""w"") as file:\r\n    for i in range(len(X)):\r\n        file.write(str(i) + "" "" + ""\\n"")\r\n\r\n#print(len(X))\r\n#print(len(Y))\r\n\r\n#Graficar\r\nplt.figure()\r\nplt.clf()\r\nplt.plot(X, Y, marker = \'.\')# c=\'b\')\r\nplt.axis(\'tight\')\r\nplt.title(""Se\xc3\xb1al captada por los sensores"")\r\nplt.legend()\r\n#plt.ylim(1.5, 3)\r\n#plt.show()\r\nplt.draw()\r\nplt.waitforbuttonpress()\r\n\r\n#Histograma\r\npyl.figure()\r\npyl.hist(Y)\r\npyl.show()\r\npyl.title(""Histograma de toda la se\xc3\xb1al"")\r\npyl.waitforbuttonpress()\r\n\r\n#Graficar\r\nplt.figure()\r\nplt.clf()\r\nplt.plot(Xnew, Ynew, marker = \'.\')# c=\'b\')\r\nplt.axis(\'tight\')\r\nplt.title(""Se\xc3\xb1al filtrada captada por los sensores"")\r\nplt.legend()\r\n#plt.show()\r\nplt.draw()\r\nplt.waitforbuttonpress()\r\n\r\n#Histograma\r\npyl.figure()\r\npyl.hist(Ynew)\r\npyl.show()\r\npyl.title(""Histograma de la se\xc3\xb1al de interes"")\r\npyl.waitforbuttonpress()\r\n\r\n#Graficar\r\nplt.figure()\r\nplt.clf()\r\nplt.plot(Xsep, Ysepv, marker=\'*\')#, marker = \'.\')# c=\'b\')\r\nplt.axis(\'tight\')\r\nplt.title(""Valores minimos"")\r\nplt.legend()\r\n#plt.show()\r\nplt.draw()\r\nplt.waitforbuttonpress()\r\n\r\n#Histograma\r\npyl.figure()\r\npyl.hist(Xsep, bins=100)\r\npyl.show()\r\npyl.title(""Histograma de la se\xc3\xb1al de Valores minimos"")\r\npyl.waitforbuttonpress()\r\n\r\n# Graficar iterativamente\r\nfor i in range(len(XSEP)):\r\n    plt.figure()\r\n    # plt.clf()\r\n    plt.plot(XSEP[i], YSEP[i], marker=\'.\')  # c=\'b\')\r\n    plt.axis(\'tight\')\r\n    plt.title(""Vehiculo numero: "" + str(i+1))\r\n    # plt.legend()\r\n    plt.ylim((Vmin-0.1), (Vmax+0.1))\r\n    # plt.show()\r\n    plt.draw()\r\n    plt.waitforbuttonpress()\r\n\r\n# Graficar iterativamente\r\nfor i in range(len(XSEP)):\r\n    plt.figure()\r\n    # plt.clf()\r\n    plt.hist(YSEP[i], bins=50)\r\n    plt.title(""Histograma del Vehiculo numero: "" + str(i+1))\r\n    plt.draw()\r\n    plt.waitforbuttonpress()\r\n\r\n'"
Python Code/Osciloscopio/OsciloscopioDeArchivo.py,11,"b'#Eladio Jimenez 13-10699\n#Kheyter Chassaigne 13-10274\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport serial\nimport time\n\n#Escribe Se\xc3\xb1al en archivo y la lee para ser graficada\n\ndef EscribirArchivo(f1):#, f2, f3, f4, d1, d2):\n\n    f1 = str(f1)#, \'UTF-8\')\n    #f2 = str(f2)#, \'UTF-8\')\n    #f3 = str(f3)#, \'UTF-8\')\n    #f4 = str(f4)#, \'UTF-8\')\n    #d1 = str(d1)#, \'UTF-8\')\n    #d2 = str(d2)#, \'UTF-8\')\n\n    out_file.write(f1 + "" "" + ""\\n"")\n\n    # Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\n    #out_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + d1 + "" "" + d2 + ""\\n"")\n\n\ndef DecodDig1(V):\n    #01000000 es 64\n\n    V = np.fromstring(V, dtype=np.int8)\n\n    d = V[0] & 64\n    return d >> 6 #Falta shiftear 6 valores a la derecha\n\ndef DecodDig2(V):\n    #00100000 es 32\n\n    V = np.fromstring(V, dtype=np.int8)\n\n    d = V[0] & 32\n    return d >> 5 #Falta shiftear 5 valores a la derecha\n\n\ndef DecodAnalog(V1,V2):\n\n    #print(\'V1\'+"" = ""+str(V1)+""  Su tipo es: "")\n    #print(type(V1))\n\n    a=int(V1)\n    b=int(V2)\n    #print(type(a_))\n    #a = np.fromstring(V1, dtype=np.uint8)\n    #print(\'a = \' + str(a)+ "" ""+ str(a[0]))\n    #b = np.fromstring(V2, dtype=np.int8)\n    #print(\'b = \'+str(b[0]))\n\n    a1 = a & 0x1F#31\n    b1 = b << 1\n    c = a1 << 8\n    d = b1 & 0x00FF#255\n    d = c | d\n\n    Analogico = d >> 1\n    print(Analogico)\n    #Analogico = ((2 ** 7) * (a[0] & 31) + b[0])\n\n    flotante = Analogico * 3.3 / ((2 ** 12) - 1)\n\n    return flotante\n\ndef DecodificadorSerial(Paquete):\n\n    #""Paquete"" es de 8 bytes, 1 byte por caracter\n\n    f1 = DecodAnalog(Paquete[0], Paquete[1])\n    #f2 = DecodAnalog(Paquete[2], Paquete[3])\n    #f3 = DecodAnalog(Paquete[4], Paquete[5])\n    #f4 = DecodAnalog(Paquete[6], Paquete[7])\n\n    #d1 = DecodDig1(Paquete[0])\n    #d2 = DecodDig2(Paquete[1])\n\n    #Escribir en archivo\n    #Escribir en un archivo todos los valores de los analogicos y digitales por columna\n    #Columnas: f1 f2 f3 f4 d1 d2\n    EscribirArchivo(f1)#, f2, f3, f4, d1, d2)\n\n#---------------------------------------------------------------------------------------\nplt.ion()\n\n#Inicializacion de vectores\n\n#Vector que obtendra todos los datos del serial\ncontenido = np.zeros((0, 1), dtype=np.float)\n\n#Vectores para leer las coordenadas del archivo\nX = np.zeros((0, 1), dtype=np.float)\nY = np.zeros((0, 1), dtype=np.float)\n\n#Leer por serial\nruta = ""SenalSensorSerial.txt""\n\nwith open(ruta,""w"") as out_file:\n    with serial.Serial(\'COM5\', 115200, timeout=1) as ser:\n        print(""El puerto serial usado es: "")\n        print(ser)\n        start_time = time.time()\n        cont=0\n        Time = 0\n        while( Time < 10 ):\n\n            stop_time = time.time()\n            Time = stop_time - start_time\n\n            if( ser.in_waiting > 1):\n\n                Datos = ser.read(size=3)#ser.in_waiting)\n                aux = str(Datos[0])+"" ""+str(Datos[1])+"" ""+str(Datos[2])\n                #print(type(Datos))\n                #StringDatos = str(Datos)\n                #print(type(StringDatos))\n                ##v_ = StringDatos.encode(\'utf-8\')\n\n                #print(aux)\n                #print(Datos)\n\n                #header = 241 con un solo analogico\n                Paquetes = aux.split("" "") #Cabecera ASCII 248\n                Paquetes.pop(0)\n                #print(Paquetes[0])+"" ""+Paquetes[1])\n                DecodificadorSerial(Paquetes)\n                #for i in range(len(Paquetes)):\n                    ##X = np.vstack([X, cont])\n                    #print(""Paquete:"" + str(i))\n                    #print(Paquetes[i])\n                    #print(""Decodificacion:"")\n                    #DecodificadorSerial(Paquetes[i])\n\n\n                    #cont = cont + 1\n#------------------------------------------\n\n#Leer Archivo\n\ntry:\n    with open(""SenalSensorSerial.txt"", ""r"") as out_file:\n        lines = out_file.readlines()\n\n        for line in lines:\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\n            Y = np.vstack([Y, Lectura[0]])\n\n\nexcept:\n    print(""Error al abrir el archivo"")\n    out_file.close()\n\nX=np.arange(0, len(Y))\nprint(len(X))\nprint(len(Y))\n\n#Graficar\nplt.figure(1)\nplt.clf()\nplt.plot(X, Y, marker = \'.\')# c=\'b\')\nplt.axis(\'tight\')\nplt.title(""Se\xc3\xb1al captada por los sensores"")\nplt.legend()\n#plt.show()\nplt.draw()\nplt.waitforbuttonpress()'"
Python Code/Osciloscopio/OsciloscopioTimeReal.py,15,"b'#Eladio Jimenez 13-10699\n#Kheyter Chassaigne 13-10274\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport serial\nimport time\n\n#Grafica acumulativa\n\ndef EscribirArchivo(f1):#, f2, f3, f4, d1, d2):\n\n    f1 = str(f1)#, \'UTF-8\')\n    #f2 = str(f2)#, \'UTF-8\')\n    #f3 = str(f3)#, \'UTF-8\')\n    #f4 = str(f4)#, \'UTF-8\')\n    #d1 = str(d1)#, \'UTF-8\')\n    #d2 = str(d2)#, \'UTF-8\')\n\n    out_file.write(f1 + "" "" + ""\\n"")\n\n    # Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\n    #out_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + d1 + "" "" + d2 + ""\\n"")\n\n\ndef DecodDig1(V):\n    #01000000 es 64\n\n    V = np.fromstring(V, dtype=np.int8)\n\n    d = V[0] & 64\n    return d >> 6 #Falta shiftear 6 valores a la derecha\n\ndef DecodDig2(V):\n    #00100000 es 32\n\n    V = np.fromstring(V, dtype=np.int8)\n\n    d = V[0] & 32\n    return d >> 5 #Falta shiftear 5 valores a la derecha\n\n\ndef DecodAnalog(V1,V2):\n    #print(\'V1\'+"" = ""+str(V1)+""  Su tipo es: "")\n    #print(type(V1))\n\n    a=int(V1)\n    b=int(V2)\n    #print(type(a_))\n    #a = np.fromstring(V1, dtype=np.uint8)\n    #print(\'a = \' + str(a)+ "" ""+ str(a[0]))\n    #b = np.fromstring(V2, dtype=np.int8)\n    #print(\'b = \'+str(b[0]))\n\n    a1 = a & 0x1F#31\n    b1 = b << 1\n    c = a1 << 8\n    d = b1 & 0x00FF#255\n    d = c | d\n\n    Analogico = d >> 1\n    print(Analogico)\n    #Analogico = ((2 ** 7) * (a[0] & 31) + b[0])\n\n    flotante = Analogico * 3.3 / ((2 ** 12) - 1)\n\n    return Analogico#flotante\n\ndef DecodificadorSerial(Paquete):\n\n    #""Paquete"" es de 8 bytes, 1 byte por caracter\n    f1 = DecodAnalog(Paquete[0], Paquete[1])\n    #f2 = DecodAnalog(Paquete[2], Paquete[3])\n    #f3 = DecodAnalog(Paquete[4], Paquete[5])\n    #f4 = DecodAnalog(Paquete[6], Paquete[7])\n\n    #d1 = DecodDig1(Paquete[0])\n    #d2 = DecodDig2(Paquete[1])\n\n    #Escribir en archivo\n    #Escribir en un archivo todos los valores de los analogicos y digitales por columna\n    #Columnas: f1 f2 f3 f4 d1 d2\n    EscribirArchivo(f1)#, f2, f3, f4, d1, d2)\n    return f1\n#---------------------------------------------------------------------------------------\nplt.ion()\n\n#Inicializacion de vectores\n\n#Vector que obtendra todos los datos del serial\ncontenido = np.zeros((0, 1), dtype=np.float)\n\n#Vectores para leer las coordenadas del archivo\nX = np.zeros((0, 1), dtype=np.float)\nY = np.zeros((0, 1), dtype=np.float)\nVectorGraficador = np.zeros((0, 1), dtype=np.float)\n\n\n#Leer por serial\nruta = ""SenalSensorSerial.txt""\n\nwith open(ruta,""w"") as out_file:\n    with serial.Serial(\'COM5\', 115200, timeout=1) as ser:\n        print(""El puerto serial usado es: "")\n        print(ser)\n        start_time = time.time()\n        cont=0\n        Time = 0\n        n=0\n        while( Time < 15 ):\n\n            stop_time = time.time()\n            Time = stop_time - start_time\n\n            if( ser.in_waiting > 1):\n\n                Datos = ser.read(size=3)#ser.in_waiting)\n                aux = str(Datos[0])+"" ""+str(Datos[1])+"" ""+str(Datos[2])\n\n                #print(aux)\n                #print(Datos)\n\n                #header = 241 con un solo analogico F1\n                Paquetes = aux.split("" "") #Cabecera ASCII 248\n                print(Paquetes[0] + "" "" + Paquetes[1]+"" ""+Paquetes[2])\n                Paquetes.pop(0)\n                #print(type(Paquetes))\n                print(Paquetes[0]+"" ""+Paquetes[1])\n                valor = DecodificadorSerial(Paquetes)\n                #print(valor)\n                VectorGraficador = np.vstack([VectorGraficador, valor])\n                if( len(VectorGraficador) > 1+n):\n                    Y=VectorGraficador#[-9:]\n                    #print(type(VectorGraficador))\n                    #print(Y)\n                    X=np.arange(n, n+len(Y))\n                    #n=len(X)-1\n\n                    #n=0; n = n+10\n\n                    # Graficar\n                    plt.figure(1)\n                    #plt.clf()\n                    plt.plot(X, Y, marker=\'.\')  # c=\'b\')\n                    plt.axis(\'tight\')\n                    plt.title(""Se\xc3\xb1al captada por los sensores"")\n                    plt.legend()\n                    # plt.show()\n                    plt.draw()\n                    plt.waitforbuttonpress(0.02)\n                #if(len(VectorGraficador))\n\n\n#------\n\n#Leer Archivo\n#Vectores para leer las coordenadas del archivo\nX = np.zeros((0, 1), dtype=np.float)\nY = np.zeros((0, 1), dtype=np.float)\n\ntry:\n    with open(""SenalSensorSerial.txt"", ""r"") as out_file:\n        lines = out_file.readlines()\n\n        for line in lines:\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\n            Y = np.vstack([Y, Lectura[0]])\n\n\nexcept:\n    print(""Error al abrir el archivo"")\n    out_file.close()\n\nX=np.arange(0, len(Y))\nprint(len(X))\nprint(len(Y))\n\n#Graficar\nplt.figure(2)\nplt.clf()\nplt.plot(X, Y, marker = \'.\')# c=\'b\')\nplt.axis(\'tight\')\nplt.title(""Se\xc3\xb1al captada por los sensores"")\nplt.legend()\n#plt.show()\nplt.draw()\nplt.waitforbuttonpress()'"
Python Code/Osciloscopio/PruebaGraficarArchivo.py,12,"b'#Eladio Jimenez 13-10699\n#Kheyter Chassaigne 13-10274\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport serial\n\n#Prueba para escribir y leer archivo\n\nplt.ion()\nn=100\n\n#------------------------------------------\n#Inicializacion de vectores\n\n#Vector que obtendra todos los datos del serial\ncontenido = np.zeros((0, 1), dtype=np.float)\n\n#Vectores para leer las coordenadas del archivo\nX = np.zeros((0, 1), dtype=np.float)\nY = np.zeros((0, 1), dtype=np.float)\n\n#Simulacion de recepcion del serial (Se llena un vector)\n\n#Revertir Protocolo\n#0xFF 0xDDAAAAA\n\n#Llenado de vector de coordenadas\nfor i in range(0,n):\n    contenido = np.vstack([contenido, i])\n\n#Pasamos el vector ""contenido"" a bytes\nts = contenido.tostring()#En bytes\n\n#Pasamos ""ts"" que esta en bytes a una lista de floats\ncont= np.fromstring(ts,dtype=np.float) #En floats\n\n#Pasamos la lista de floats a una lista de strings\nTS = [str(elem) for elem in cont]\n#La funcion TS="" "".join(TS) #Necesita que el contenido de la lista sean strings y asi los concatena\n#print(TS)\n\n#------------------------------------------\n\n#Nombre del archivo\nruta = ""SenalSensor.txt""\n\n#Escribir archivo\n\nf=open(ruta, ""w"")\n\nprint(ts)\nprint(TS)\nprint(contenido)\nprint(cont)\n\nfor i in range(0,n):\n    #Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\n    f.write(TS[i]+"" ""+TS[i]+""\\n"")\nf.close()\n\n#Leer Archivo\n\ntry:\n    f=open(ruta,""r"")\nexcept:\n    print(""Error al abrir el archivo"")\n    f.close()\n\nlines = f.readlines()\n\nfor line in lines:\n    Lectura = np.fromstring(line, dtype=float, sep=\' \')\n    #print (\'Leyendo\')\n    #print(Lectura)\n    X = np.vstack([X, Lectura[0]])\n    Y = np.vstack([Y, Lectura[1]])\n    #coord=line.split() para esto se deberia leer la linea en vez de el vector\nf.close()\n\n#Graficar\nplt.figure(1)\nplt.clf()\n\n#v= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#v = np.vstack([v,v])\nv=np.arange(0,10000)\n\naux=np.arange(0, len(Y))\n\n\nprint(aux)\nprint(Y)\n\n\ny=np.sin(v)\nplt.plot(X, Y, c=\'b\')#, label=""Se\xc3\xb1al captada"")\n#plt.plot(X, Y, marker=\'.\', c=\'b\', linewidth=0)#, label=""Se\xc3\xb1al captada"")\nplt.axis(\'tight\')#equal\')\nplt.title(""Se\xc3\xb1al captada por los sensores"")\nplt.legend()\n#plt.show()\nplt.draw()\nplt.waitforbuttonpress()'"
Python Code/ITS/Interfaz main/Interfaz_serial.py,26,"b'import pygame as pg\r\nimport random\r\nfrom os import path\r\nfrom sprites_serial import *  # import sprites\r\nfrom settings import *\r\nimport time\r\nimport random\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.pylab as pyl\r\nimport serial\r\n\r\n#Variales Globales\r\ntpause = 0\r\ntpause1 = 0\r\ntaux = 0\r\ntime_count = 2\r\nclock_s1 = 0\r\nclock_s2 = 0\r\ntime_count1 = 0\r\ntime_count2 = 0\r\nestadoEspera = 0\r\nstart_time1 = 0\r\nchangeTime = 0\r\ncount_p = 0\r\nestado = ""000000""\r\nSTOP = 0\r\nmanual_Mode = 0\r\n\r\n#Inicializacion de vectores\r\n\r\n#Vector que obtendra todos los datos del serial\r\ncontenido = np.zeros((0, 1), dtype=np.float)\r\n\r\n#Vectores para leer las coordenadas del archivo\r\nX = np.zeros((0, 1), dtype=np.float)\r\nY = np.zeros((0, 1), dtype=np.float)\r\niden_veh = np.zeros((0, 1), dtype=np.float)\r\n#VectorGraficador = np.zeros((0, 1), dtype=np.float)\r\nVectorGraficador = []\r\n\r\n#Leer por serial\r\nruta = ""SenalSensorSerial.txt""\r\nexcel_file = open(""excel_File.txt"",""w"")\r\n\r\nCalibracion = np.zeros((0, 1), dtype=np.float)\r\ncont = 0\r\nTime = 0\r\nn = 500  # 0.7ms -> n=500 #1ms -> n=\r\nBytes = 9\r\nSensor = 2\r\n\r\n#Variables de control\r\n\r\n#Valor detectado por los digitales\r\nd1 = 0\r\nd2 = 0\r\nflanco = 0\r\n\r\n#Cantidad de carros (pasado)\r\nveh1 = 0\r\nveh2 = 0\r\n\r\n#Distancia del ultrasonido a los vehiculos\r\ncola1 = 0\r\ncola2 = 0\r\n\r\n#Tiempo por semaforo (pasado)\r\nTIME_1P = 0\r\nTIME_2P = 0\r\n\r\n#Deteccion de veh\r\nbandera = 0\r\n\r\n#Funciones de recepcion por serial----------------------------------------------------------------------------------------------------------------------------------------------\r\ndef EscribirArchivo(Valor):#, f2, f3, f4, d1, d2):\r\n\r\n    f1 = Valor\r\n\r\n    list(Valor)\r\n    Valores = Valor.split("" "")\r\n\r\n    if len(Valores) == 1:\r\n        #f1 = str(Valores[0])\r\n        out_file.write(f1 + "" "" + ""\\n"")\r\n\r\n        list(f1)\r\n        # f1.insert(1,\',\')\r\n        coma = f1.split(\'.\')\r\n        # coma.insert(1,\',\')\r\n        f1 = "","".join(coma)\r\n        # print(f1)\r\n        excel_file.write(f1 + "" "" + ""\\n"")\r\n    else:\r\n        if len(Valores) == 2:\r\n\r\n            f1 = Valores[0]\r\n            f2 = Valores[1]\r\n            out_file.write(str(f1) + "" "" + str(f2) + "" "" + ""\\n"")\r\n\r\n            list(str(f1))\r\n            coma = f1.split(\'.\')\r\n            f1 = "","".join(coma)\r\n            list(str(f2))\r\n            coma = f2.split(\'.\')\r\n            f2 = "","".join(coma)\r\n            excel_file.write(f1 + "" "" + f2 + "" "" + ""\\n"")\r\n        else:\r\n            if len(Valores) == 3:\r\n                f1 = Valores[0]\r\n                f2 = Valores[1]\r\n                f3 = Valores[2]\r\n                out_file.write(str(f1) + "" "" + str(f2) + "" "" + str(f3) + "" "" + ""\\n"")\r\n\r\n                list(str(f1))\r\n                coma = f1.split(\'.\')\r\n                f1 = "","".join(coma)\r\n                list(str(f2))\r\n                coma = f2.split(\'.\')\r\n                f2 = "","".join(coma)\r\n                list(str(f3))\r\n                coma = f3.split(\'.\')\r\n                f3 = "","".join(coma)\r\n\r\n                excel_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + ""\\n"")\r\n            else:\r\n                f1 = Valores[0]\r\n                f2 = Valores[1]\r\n                f3 = Valores[2]\r\n                f4 = Valores[3]\r\n                out_file.write(str(f1) + "" "" + str(f2) + "" "" + str(f3) + "" "" + str(f4) + "" "" + ""\\n"")\r\n\r\n                list(str(f1))\r\n                coma = f1.split(\'.\')\r\n                f1 = "","".join(coma)\r\n                list(str(f2))\r\n                coma = f2.split(\'.\')\r\n                f2 = "","".join(coma)\r\n                list(str(f3))\r\n                coma = f3.split(\'.\')\r\n                f3 = "","".join(coma)\r\n                list(str(f4))\r\n                coma = f4.split(\'.\')\r\n                f4 = "","".join(coma)\r\n                excel_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + ""\\n"")\r\n\r\n    # Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\r\n    #out_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + d1 + "" "" + d2 + ""\\n"")\r\n\r\n\r\ndef DecodDig1(V):\r\n    #01000000 es 64\r\n    V = int(V)\r\n    d = V & 64\r\n    return d >> 6 #Falta shiftear 6 valores a la derecha\r\n\r\ndef DecodDig2(V):\r\n    #00100000 es 32\r\n    V = int(V)\r\n    d = V & 32\r\n    return d >> 5 #Falta shiftear 5 valores a la derecha\r\n\r\ndef DecodAnalogD(V1,V2):\r\n    a=int(V1)\r\n    b=int(V2)\r\n\r\n    a1 = a & 0x1F#31\r\n    b1 = b << 1\r\n    c = a1 << 8\r\n    d = b1 & 0x00FF#255\r\n    d = c | d\r\n\r\n    Analogico = d >> 1\r\n    flotante = Analogico/4.2#*10/58\r\n\r\n    return flotante\r\n\r\n\r\n\r\ndef DecodAnalogV(V1,V2):\r\n    a=int(V1)\r\n    b=int(V2)\r\n\r\n    a1 = a & 0x1F#31\r\n    b1 = b << 1\r\n    c = a1 << 8\r\n    d = b1 & 0x00FF#255\r\n    d = c | d\r\n\r\n    Analogico = d >> 1\r\n    flotante = Analogico * 3.3 / ((2 ** 12) - 1)\r\n\r\n    return flotante\r\n\r\ndef DecodificadorSerial(Paquete, Sensor):\r\n\r\n    global d1,d2,cola1,cola2\r\n    #""Paquete"" es de 8 bytes, 1 byte por caracter\r\n    if len(Paquete)== 2:\r\n        f1 = DecodAnalogV(Paquete[0], Paquete[1])\r\n        Valor = str(f1)\r\n        EscribirArchivo(Valor)\r\n    else:\r\n        if len(Paquete) == 4:\r\n            f1 = DecodAnalogV(Paquete[0], Paquete[1])\r\n            f2 = DecodAnalogV(Paquete[2], Paquete[3])\r\n            Valor = str(f1)+"" ""+str(f2)\r\n            EscribirArchivo(Valor)\r\n        else:\r\n            if len(Paquete) == 6:\r\n                f1 = DecodAnalogV(Paquete[0], Paquete[1])\r\n                f2 = DecodAnalogV(Paquete[2], Paquete[3])\r\n                #Distancia\r\n                f3 = DecodAnalogD(Paquete[4], Paquete[5])\r\n                Valor = str(f1) + "" "" + str(f2) + "" "" + str(int(f3))\r\n                EscribirArchivo(Valor)\r\n            else:\r\n                f1 = DecodAnalogV(Paquete[0], Paquete[1])\r\n                f2 = DecodAnalogV(Paquete[2], Paquete[3])\r\n                #Distancia\r\n                f3 = DecodAnalogD(Paquete[4], Paquete[5])\r\n                f4 = DecodAnalogD(Paquete[6], Paquete[7])\r\n                Valor = str(f1) + "" "" + str(f2) + "" "" + str(int(f3)) + "" "" + str(int(f4))\r\n                EscribirArchivo(Valor)\r\n\r\n    d1 = DecodDig1(Paquete[0])\r\n    d2 = DecodDig2(Paquete[0])\r\n\r\n\r\n    list(Valor)\r\n    Valores = Valor.split("" "")\r\n    cola1 = int(Valores[2])\r\n    cola2 = int(Valores[3])\r\n    if Sensor == 1:\r\n        SensorAnalog = Valores[0]\r\n    else:\r\n        if Sensor == 2:\r\n            SensorAnalog = Valores[1]\r\n        else:\r\n            if Sensor == 3:\r\n                SensorAnalog = Valores[2]\r\n                #cola1 = int(SensorAnalog)\r\n            else:\r\n                if Sensor == 4:\r\n                    SensorAnalog = Valores[3]\r\n                    #cola2 = int(SensorAnalog)\r\n\r\n    return str(SensorAnalog) + "" "" +str(d1) + "" "" + str(d2)\r\n\r\n#Interfaz-----------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nclass Game():\r\n    def __init__(self):\r\n        pg.init()\r\n        pg.mixer.init()\r\n        self.ventana = pg.display.set_mode((ancho, largo))\r\n        pg.display.set_caption(NAME)\r\n        self.Clock = pg.time.Clock()\r\n        self.running = True\r\n\r\n    def new(self):\r\n        # inicia un nuevo juego\r\n\r\n        self.playing = True\r\n\r\n        self.canal1=0\r\n        self.canal2=0\r\n        self.tiempos = """"\r\n        #Ultima distancia del ultrasonido para detectar cola\r\n        self.COLA_1 = 0\r\n        self.COLA_2 = 0\r\n        #Indicia el nivel de cola segun la distancia con el ultrasonido\r\n        self.nivel_cola_1 = 0\r\n        self.nivel_cola_2 = 0\r\n        self.count = 0\r\n\r\n        self.all_sprites = pg.sprite.Group()\r\n        self.all_Buttons = pg.sprite.Group()\r\n        self.all_LEDS1 = pg.sprite.Group()\r\n        self.all_LEDS2 = pg.sprite.Group()\r\n        self.all_Veh = pg.sprite.Group()\r\n\r\n        self.inf_font = pg.font.Font(pg.font.match_font(""times new roman""), 20)\r\n        self.message_font = pg.font.Font(pg.font.match_font(""times new roman""), 25)\r\n        self.subTitle_font = pg.font.Font(pg.font.match_font(""times new roman""), 30)\r\n        self.title_font = pg.font.Font(pg.font.match_font(""times new roman""), 40)\r\n\r\n        self.Buttons = {""B0"": Button(self, 800, 225, ""Modo Manual"", self.PRUEBA, 1, 1, 0,""red""),\r\n                        ""B1"": Button(self, 700, 400, ""Semaforo 1"", self.PRUEBA, 0, 0, 1,""red""),\r\n                        ""B2"": Button(self, 900, 400, ""Semaforo 2"", self.PRUEBA, 0, 0, 2,""red""),\r\n                        ""B_On_Off"": Button(self, 800, 115, """", self.PRUEBA, 0, 1, 0,""blue"")}\r\n\r\n        self.semaforos = {""S1"": Semaforo(self, ""Semaforo 1"", 225-100, 220, 1), #148,180\r\n                          ""S2"": Semaforo(self, ""Semaforo 2"", 225+100, 220, 2)} #336,180\r\n\r\n        self.maquina = MaquinaEstados(self, self.semaforos[""S1""], self.semaforos[""S2""], self.Buttons[""B1""],\r\n                                      self.Buttons[""B2""])\r\n\r\n        #Vehicle(self, 65, 400, ""car"", ""Carro"", num_s1[0])\r\n        #Vehicle(self, 160, 400, ""truck"", ""Camioneta"", num_s1[1])\r\n\r\n        #Vehicle(self, 270, 400, ""car"", ""Carro"", num_s2[0])\r\n        #Vehicle(self, 375, 400, ""truck"", ""Camioneta"", num_s2[1])\r\n\r\n    def run(self, start_time, TIME_1, TIME_2, Periodo):\r\n        # game loop\r\n        global changeTime, time_count2, time_count1, veh1, veh2, iden_veh, bandera\r\n        while self.playing:\r\n            self.Clock.tick(FPS)\r\n            self.events(start_time)\r\n            self.serial_data(start_time)\r\n            self.countVeh()\r\n\r\n            self.COLA_1 = int(cola1)\r\n            self.COLA_2 = int(cola2)\r\n            colas = self.cola()\r\n\r\n            list(colas)\r\n            c = colas.split("" "")\r\n\r\n            self.nivel_cola_1 = c[0]\r\n            self.nivel_cola_2 = c[1]\r\n\r\n\r\n            if changeTime == 1:\r\n                #Archivos por canal\r\n\r\n                self.count += 1\r\n                if estado == ""100001"":\r\n                    bandera = 0\r\n                elif estado == ""001100"":\r\n                    bandera = 1\r\n\r\n                if veh1 > 0 or veh2 > 0:\r\n                    self.tiempos = self.controlSystem(TIME_1, TIME_2)\r\n\r\n                else:\r\n                    self.tiempos = str(TIME_1)+"" ""+str(TIME_2)\r\n                    veh1 = self.canal1\r\n                    veh2 = self.canal2\r\n\r\n                    self.canal1 = 0\r\n                    self.canal2 = 0\r\n                #-----------------\r\n\r\n                list(self.tiempos)\r\n                T = self.tiempos.split("" "")\r\n\r\n                TIME_1 = int(T[0])\r\n                time_count1 = TIME_1\r\n                TIME_2 = int(T[1])\r\n                time_count2 = TIME_1\r\n\r\n                Periodo = TIME_1 + TIME_2\r\n                changeTime = 0\r\n\r\n            self.update(start_time)\r\n            self.drawing(start_time, TIME_1, TIME_2, Periodo)\r\n\r\n    def controlSystem(self, TIME_1, TIME_2):\r\n        global veh1,veh2,TIME_1P,TIME_2P\r\n        #d1,d2,cola1,cola2\r\n        #d1,cola2->self.canal1,self.COLA_2\r\n        #d2,cola1->self.canal2,self.COLA_1\r\n        time_1 = 0\r\n        time_2 = 0\r\n        Pquit = 0\r\n        n = 2 #valor de division del tiempo agregado\r\n        estado1 = ""Mantenemos""\r\n        estado2 = ""Mantenemos""\r\n        c1v = veh1\r\n        c2v = veh2\r\n        veh1 = veh1/TIME_1P\r\n        veh2 = veh2/TIME_2P\r\n        c1 = self.canal1\r\n        c2 = self.canal2\r\n        self.canal1 = self.canal1/TIME_1\r\n        self.canal2 = self.canal2/TIME_2\r\n\r\n        #Comparacion pasado\r\n        if veh2 == self.canal2:\r\n            estado2 = ""Mantenemos""\r\n        elif veh2 > self.canal2:\r\n            estado2 = ""Disminuimos""\r\n        elif veh2 < self.canal2:\r\n            estado2 = ""Aumentamos""\r\n\r\n        if veh1 == self.canal1:\r\n            estado1 = ""Mantenemos""\r\n        elif veh1 > self.canal1:\r\n            estado1 = ""Disminuimos""\r\n        elif veh1 < self.canal1:\r\n            estado1 = ""Aumentamos""\r\n\r\n        if estado1 == ""Mantenemos"" and estado2 == ""Mantenemos"":\r\n\r\n            #NO IMPORTA cual sea el caso, tiene el mismo tiempo del pasado, por haber pasado la misma cantidad de vehiculos\r\n            tiempos = self.controlCola(estado1, estado2, TIME_1, TIME_2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n            print(""Tiempo queda igual"")\r\n            time_plus1 = 0\r\n            time_plus2 = 0\r\n            time_1 = int(t[0])\r\n            time_2 = int(t[1])\r\n\r\n        elif estado1 == ""Disminuimos"" and estado2 == ""Disminuimos"":\r\n            if veh1 > 0:\r\n                Pquit = abs(((veh1 - self.canal1) * 1) / veh1)\r\n                time_plus1 = Pquit * TIME_1\r\n            else:\r\n                time_plus1 = 0\r\n\r\n            if veh2 > 0:\r\n                Pquit = abs(((veh2 - self.canal2) * 1) / veh2)\r\n                time_plus2 = Pquit * TIME_2\r\n            else:\r\n                time_plus2 = 0\r\n\r\n            tiempos = self.controlCola(estado1, estado2, time_plus1, time_plus2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = TIME_1 - time_plus1/n\r\n            time_2 = TIME_2 - time_plus2/n\r\n\r\n        elif estado1 == ""Disminuimos"" and estado2 == ""Aumentamos"":\r\n\r\n            if veh1 > 0:\r\n                Pquit = abs(((veh1-self.canal1) * 1)/veh1)\r\n                time_plus1 = Pquit * TIME_1\r\n            else:\r\n                time_plus1 = 0\r\n\r\n            if veh2 > 0:\r\n                Pquit = abs(((veh2 - self.canal2) * 1) / veh2)\r\n                time_plus2 = Pquit * TIME_2\r\n            else:\r\n                time_plus2 = 0\r\n\r\n            tiempos = self.controlCola(estado1, estado2, time_plus1, time_plus2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = TIME_1 - time_plus1/n\r\n            time_2 = TIME_2 + time_plus2/n\r\n\r\n        elif estado1 == ""Aumentamos"" and estado2 == ""Disminuimos"":\r\n            if veh1 > 0:\r\n                Pquit = abs(((veh1-self.canal1) * 1)/veh1)\r\n                time_plus1 = Pquit * TIME_1\r\n            else:\r\n                time_plus1 = 0\r\n\r\n            if veh2 > 0:\r\n                Pquit = abs(((veh2 - self.canal2) * 1) / veh2)\r\n                time_plus2 = Pquit * TIME_2\r\n            else:\r\n                time_plus2 = 0\r\n\r\n            tiempos = self.controlCola(estado1, estado2, time_plus1, time_plus2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = TIME_1 + time_plus1/n\r\n            time_2 = TIME_2 - time_plus2/n\r\n\r\n        elif estado1 == ""Aumentamos"" and estado2 == ""Aumentamos"":\r\n            if veh1 > 0:\r\n                Pquit = abs(((veh1-self.canal1) * 1)/veh1)\r\n                time_plus1 = Pquit * TIME_1\r\n            else:\r\n                time_plus1 = 0\r\n\r\n            if veh2 > 0:\r\n                Pquit = abs(((veh2 - self.canal2) * 1) / veh2)\r\n                time_plus2 = Pquit * TIME_2\r\n            else:\r\n                time_plus2 = 0\r\n\r\n            tiempos = self.controlCola(estado1, estado2, time_plus1, time_plus2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = TIME_1 + time_plus1/n\r\n            time_2 = TIME_2 + time_plus2/n\r\n\r\n        elif estado1 == ""Mantenemos"" and estado2 == ""Disminuimos"":\r\n            if veh2 > 0:\r\n                Pquit = abs(((veh2 - self.canal2) * 1) / veh2)\r\n                time_plus2 = Pquit * TIME_2\r\n            else:\r\n                time_plus2 = 0\r\n\r\n            tiempos = self.controlCola(estado1, estado2, TIME_1, time_plus2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = time_plus1\r\n            time_2 = TIME_2 - time_plus2/n\r\n\r\n\r\n        elif estado1 == ""Mantenemos"" and estado2 == ""Aumentamos"":\r\n            if veh2 > 0:\r\n                Pquit = abs(((veh2 - self.canal2) * 1) / veh2)\r\n                time_plus2 = Pquit * TIME_2\r\n            else:\r\n                time_plus2 = 0\r\n            print(""time_plus2 antes de controlCola: ""+str(time_plus2))\r\n            tiempos = self.controlCola(estado1, estado2, TIME_1, time_plus2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = time_plus1\r\n            time_2 = TIME_2 + time_plus2/n\r\n\r\n        elif estado1 == ""Disminuimos"" and estado2 == ""Mantenemos"":\r\n            if veh1 > 0:\r\n                Pquit = abs(((veh1-self.canal1) * 1)/veh1)\r\n                time_plus1 = Pquit * TIME_1\r\n            else:\r\n                time_plus1 = 0\r\n            tiempos = self.controlCola(estado1, estado2, time_plus1, TIME_2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = TIME_1 - time_plus1/n\r\n            time_2 = time_plus2\r\n\r\n        elif estado1 == ""Aumentamos"" and estado2 == ""Mantenemos"":\r\n            if veh1 > 0:\r\n                Pquit = abs(((veh1-self.canal1) * 1)/veh1)\r\n                time_plus1 = Pquit * TIME_1\r\n            else:\r\n                time_plus1 = 0\r\n\r\n            tiempos = self.controlCola(estado1, estado2, time_plus1, TIME_2)\r\n            list(tiempos)\r\n            t = tiempos.split("" "")\r\n\r\n            time_plus1 = int(t[0])\r\n            time_plus2 = int(t[1])\r\n\r\n            time_1 = TIME_1 + time_plus1/n\r\n            time_2 = time_plus2\r\n\r\n        if time_1 < 5:\r\n            time_1 = 5\r\n        if time_2 < 5:\r\n            time_2 = 5\r\n\r\n        TIME_1P = TIME_1\r\n        TIME_2P = TIME_2\r\n        veh1=c1\r\n        veh2=c2\r\n        self.canal1=0\r\n        self.canal2=0\r\n        self.COLA_1=0\r\n        self.COLA_2=0\r\n\r\n        return str(int(time_1))+"" ""+str(int(time_2))\r\n\r\n    def controlCola(self,estado1, estado2, time_1, time_2):\r\n        #Afecta al tiempo que se va a agregar\r\n        time_1 = time_1\r\n        time_2 = time_2\r\n\r\n        colas = self.cola()\r\n        list(colas)\r\n        C = colas.split("" "")\r\n        cola_1 = int(C[0])\r\n        cola_2 = int(C[1])\r\n\r\n        #Se alteran los estados agregar, excepto en el estado ""Mantenemos"" donde se altera el tiempo asignado\r\n\r\n        if cola_2 == 0:\r\n            time_1 = time_1\r\n\r\n        elif cola_2 == 1:\r\n            if estado1 == ""Aumentamos"":\r\n                time_1 = 0.75 * time_1\r\n            elif estado1 == ""Mantenemos"":\r\n                time_1 = time_1\r\n            elif estado1 == ""Disminuimos"":\r\n                time_1 = 1 * time_1\r\n\r\n        elif cola_2 == 2:\r\n            if estado1 == ""Aumentamos"":\r\n                time_1 = 0.5 * time_1\r\n            elif estado1 == ""Mantenemos"":\r\n                time_1 = time_1\r\n            elif estado1 == ""Disminuimos"":\r\n                time_1 = 1 * time_1\r\n\r\n        elif cola_2 == 3:\r\n            if estado1 == ""Aumentamos"":\r\n                time_1 = 0.25 * time_1\r\n            elif estado1 == ""Mantenemos"":\r\n                time_1 = 0.8 * time_1\r\n            elif estado1 == ""Disminuimos"":\r\n                time_1 = 1.2 * time_1\r\n\r\n        elif cola_2 == 4:\r\n            if estado1 == ""Aumentamos"":\r\n                time_1 = 0.0 * time_1\r\n            elif estado1 == ""Mantenemos"":\r\n                time_1 = 0.8 * time_1\r\n            elif estado1 == ""Disminuimos"":\r\n                time_1 = 1.3 * time_1\r\n\r\n        if cola_1 == 0:\r\n            time_2 = time_2\r\n\r\n        elif cola_1 == 1:\r\n            if estado2 == ""Aumentamos"":\r\n                time_2 = 0.75 * time_2\r\n            elif estado2 == ""Mantenemos"":\r\n                time_2 = time_2\r\n            elif estado2 == ""Disminuimos"":\r\n                time_2 = 1 * time_2\r\n\r\n        elif cola_1 == 2:\r\n            if estado2 == ""Aumentamos"":\r\n                time_2 = 0.5 * time_2\r\n            elif estado2 == ""Mantenemos"":\r\n                time_2 = time_2\r\n            elif estado2 == ""Disminuimos"":\r\n                time_2 = 1 * time_2\r\n\r\n        elif cola_1 == 3:\r\n            if estado2 == ""Aumentamos"":\r\n                time_2 = 0.25 * time_2\r\n            elif estado2 == ""Mantenemos"":\r\n                time_2 = 0.8 * time_2\r\n            elif estado2 == ""Disminuimos"":\r\n                time_2 = 1.2 * time_2\r\n\r\n        elif cola_1 == 4:\r\n            if estado2 == ""Aumentamos"":\r\n                time_2 = 0.0 * time_2\r\n            elif estado2 == ""Mantenemos"":\r\n                time_2 = 0.8 * time_2\r\n            elif estado2 == ""Disminuimos"":\r\n                time_2 = 1.3 * time_2\r\n\r\n\r\n        return str(int(time_1)) + "" "" + str(int(time_2))\r\n\r\n    def cola(self):\r\n        #n=6\r\n        #global nivel_1, nivel_2\r\n        nivel_1 = 0\r\n        nivel_2 = 0\r\n\r\n        if self.COLA_1 < 27:\r\n            nivel_1 = 1\r\n            if self.COLA_1 < 21:\r\n                nivel_1 = 2\r\n                if self.COLA_1 < 15:\r\n                    nivel_1 = 3\r\n                    if self.COLA_1 < 8:\r\n                        nivel_1 = 4\r\n        elif self.COLA_1 >= 27:\r\n            nivel_1 = 0\r\n\r\n        if self.COLA_2 < 27:\r\n            nivel_2 = 1\r\n            if self.COLA_2 < 21:\r\n                nivel_2 = 2\r\n                if self.COLA_2 < 15:\r\n                    nivel_2 = 3\r\n                    if self.COLA_2 < 8:\r\n                        nivel_2 = 4\r\n        elif self.COLA_2 >= 27:\r\n            nivel_2 = 0\r\n\r\n        return str(nivel_1)+"" ""+str(nivel_2)\r\n\r\n\r\n    def countVeh(self):\r\n        global flanco, d1, d2\r\n        if d1 == 1:\r\n            if flanco == 0:\r\n                self.canal1 += 1\r\n                flanco = 1\r\n        elif d2 == 0:\r\n            flanco = 0\r\n\r\n        if d2 == 1:\r\n            if flanco == 0:\r\n                self.canal2 += 1\r\n                flanco = 1\r\n        elif d1 == 0:\r\n            flanco = 0\r\n\r\n    def ESTADO(self,estado):\r\n        ESTADO = 0\r\n        if estado == ""000000"":\r\n            ESTADO = 0  #0 en hexadecimal\r\n        elif estado == ""100001"":\r\n            ESTADO = 33 #21 en hexadecimal\r\n        elif estado == ""001100"":\r\n            ESTADO = 12 #C en hexadecimal\r\n        elif estado == ""010001"":\r\n            ESTADO = 17 #11 en hexadecimal\r\n        elif estado == ""001010"":\r\n            ESTADO = 10 #A en hexadecimal\r\n        elif estado == ""001001"":\r\n            ESTADO = 9  #9 en hexadecimal\r\n\r\n        return ESTADO\r\n\r\n\r\n    def serial_data(self,start_time):\r\n        global contenido,VectorGraficador,X,Y,Calibracion,cont,n,Time,Bytes,Sensor, estado\r\n\r\n        stop_time = time.time()\r\n        Time = stop_time - start_time\r\n\r\n        if ser.in_waiting > 1:\r\n\r\n            Datos = ser.read(size=Bytes)\r\n\r\n            while (Datos[0] < 244):\r\n                print(""Esperando cabecera"")\r\n                ser.reset_input_buffer()\r\n                Datos = ser.read(size=Bytes)\r\n\r\n            if Bytes == 3:\r\n                aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2])\r\n                # Cabecera = 241\r\n            else:\r\n                if Bytes == 5:\r\n                    aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2]) + "" "" + str(Datos[3]) + "" "" + str(Datos[4])\r\n                    # Cabecera = 242\r\n                else:\r\n                    if Bytes == 7:\r\n                        aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2]) + "" "" + str(Datos[3]) + "" "" + str(Datos[4]) + "" "" + str(Datos[5]) + "" "" + str(Datos[6])\r\n                        # Cabecera = 243\r\n                    else:\r\n                        aux = str(Datos[0]) + "" "" + str(Datos[1]) + "" "" + str(Datos[2]) + "" "" + str(Datos[3]) + "" "" + str(Datos[4]) + "" "" + str(Datos[5]) + "" "" + str(Datos[6]) + "" "" + str(Datos[7]) + "" "" + str(Datos[8])\r\n                        # Cabecera = 244\r\n\r\n            # header = 241 con un solo analogico F1\r\n            Paquetes = aux.split("" "")  # Cabecera ASCII 248\r\n            Paquetes.pop(0)\r\n            Valor = DecodificadorSerial(Paquetes, Sensor)\r\n            list(Valor)\r\n            valores = Valor.split("" "")\r\n            valor = valores[0]\r\n\r\n            # Lista\r\n            valor = float(valor)\r\n\r\n            VectorGraficador.append(valor)\r\n            if (Time < 3):\r\n                Calibracion = np.vstack([Calibracion, valor])\r\n            elif (Time > 3 and Time < 3.2):\r\n                print(""Calibracion lista"")\r\n            #Envio del estado actual\r\n            dat = self.ESTADO(estado)\r\n            #print(type(dat))\r\n            ser.write(bytearray([dat]))\r\n\r\n    def events(self,start_time):\r\n        # game loop events\r\n        self.serial_data(start_time)\r\n        global manual_Mode, estado, STOP, estadoEspera, tpause1, tpause, start_time1\r\n        for event in pg.event.get():\r\n            if event.type == pg.QUIT:\r\n                if self.playing == True:\r\n                    self.playing = False\r\n                self.running = False\r\n\r\n            if event.type == pg.MOUSEBUTTONDOWN:\r\n                mouse_pos = pg.mouse.get_pos()\r\n                for button in self.all_Buttons:\r\n                    button.checkClick(mouse_pos)\r\n                    if button.activo == 1 and button.manual == 1:\r\n                        manual_Mode = button.manualMode\r\n\r\n\r\n            if self.Buttons[""B_On_Off""].estado == ""OFF"":\r\n                self.playing = False\r\n                self.running = False\r\n\r\n            if manual_Mode == 1:\r\n                for button in self.all_Buttons:\r\n                    button.setActivo()\r\n\r\n                if estado == ""000000"":\r\n                    if self.Buttons[""B1""].estado == ""ON"":\r\n                        estado = ""100001""\r\n                    elif self.Buttons[""B2""].estado == ""ON"":\r\n                        estado = ""001100""\r\n\r\n                elif estado == ""100001"":\r\n                    if self.Buttons[""B1""].estado == ""OFF"" or self.Buttons[""B2""].estado == ""ON"":\r\n                        estado = ""010001""\r\n                        STOP = 0\r\n                        estadoEspera = 1\r\n                        tpause1 = tpause\r\n                        if self.Buttons[""B1""].estado == ""OFF"":\r\n                            STOP = 1\r\n                    elif self.Buttons[""B1""].estado == ""ON"" or self.Buttons[""B2""].estado == ""OFF"":\r\n                        estado = ""100001""\r\n\r\n                elif estado == ""001100"":\r\n                    if self.Buttons[""B1""].estado == ""ON"" or self.Buttons[""B2""].estado == ""OFF"":\r\n                        estado = ""001010""\r\n                        STOP = 0\r\n                        estadoEspera = 1\r\n                        tpause1 = tpause\r\n                        if self.Buttons[""B2""].estado == ""OFF"":\r\n                            STOP = 1\r\n                    elif self.Buttons[""B2""].estado == ""ON"" or self.Buttons[""B1""].estado == ""OFF"":\r\n                        estado = ""001100""\r\n\r\n                elif estado == ""001001"":\r\n                    if self.Buttons[""B1""].estado == ""ON"":\r\n                        estado = ""100001""\r\n                    elif self.Buttons[""B2""].estado == ""ON"":\r\n                        estado = ""001100""\r\n                    elif self.Buttons[""B1""].estado == ""OFF"" or self.Buttons[""B2""].estado == ""OFF"":\r\n                        estado = ""001001""\r\n\r\n            else:\r\n                for button in self.all_Buttons:\r\n                    if button.manual != 1:\r\n                        if button.control != 1:\r\n                            button.setDesactivo()\r\n\r\n            # Control automatico se hace en draw\r\n\r\n            if event.type == pg.MOUSEBUTTONUP:\r\n                # mouse_pos = pg.mouse.get_pos()\r\n\r\n                for button in self.all_Buttons:\r\n                    button.Onpull()\r\n\r\n    def update(self,start_time):\r\n        # game loop update\r\n        self.serial_data(start_time)\r\n        self.all_sprites.update()\r\n\r\n    def drawing(self, start_time, TIME_1, TIME_2, Periodo):\r\n        self.serial_data(start_time)\r\n\r\n        global manual_Mode, estado, STOP, tpause1, tpause, estadoEspera, clock_s1, clock_s2, time_count1, time_count2, time_count, changeTime, cola1, cola2, Sensor#, nivel_2, nivel_1  # , taux\r\n\r\n        pg.display.set_caption(""{:.0f}"".format(self.Clock.get_fps()))\r\n        self.ventana.fill(BLACK)\r\n        self.all_sprites.draw(self.ventana)\r\n        self.draw_text(self.ventana, ""Sistema de Monitoreo y Control de Vialidad"", 550, 50, self.title_font, BLUE)#550, 50\r\n        self.draw_text(self.ventana, ""Semaforos"", 225, 110, self.title_font, WHITE)#110\r\n        self.draw_text(self.ventana, ""Vehiculos por canal"", 225, 320, self.title_font, WHITE)\r\n\r\n        self.draw_text(self.ventana, self.semaforos[""S1""].name, self.semaforos[""S1""].posX, self.semaforos[""S1""].posY - 50, self.message_font, WHITE)\r\n        self.draw_text(self.ventana, self.semaforos[""S2""].name, self.semaforos[""S2""].posX, self.semaforos[""S2""].posY - 50, self.message_font, WHITE)\r\n\r\n        for button in self.all_Buttons:\r\n            if button.activo == 1 or button.manual == 1:\r\n                self.draw_text(self.ventana, button.description, button.rect.centerx, button.rect.centery - 50,\r\n                               self.subTitle_font, WHITE)\r\n                self.draw_text(self.ventana, button.estado, button.rect.centerx + 50, button.rect.centery,\r\n                               self.inf_font, WHITE)\r\n            else:\r\n                button.setOFF()\r\n\r\n        self.draw_text(self.ventana, ""Canal 1"", 225-70, 375, self.subTitle_font, WHITE)#subTitle_font\r\n        self.draw_text(self.ventana, str(self.canal1), 225-70, 415, self.subTitle_font, WHITE)\r\n        self.draw_text(self.ventana, ""Canal 2"", 225+70, 375, self.subTitle_font, WHITE)\r\n        self.draw_text(self.ventana, str(self.canal2), 225+70, 415, self.subTitle_font, WHITE)\r\n        self.draw_text(self.ventana, ""Cola:"", 225 - 170, 460, self.subTitle_font, WHITE)\r\n        self.draw_text(self.ventana, str(self.nivel_cola_2), 225 + 70, 460, self.subTitle_font, WHITE)\r\n        self.draw_text(self.ventana, str(self.nivel_cola_1), 225 - 70, 460, self.subTitle_font, WHITE)\r\n\r\n        #for veh in self.all_Veh:\r\n            #self.draw_text(self.ventana, veh.description, veh.rect.centerx, veh.rect.centery - 40, self.message_font, WHITE)\r\n            #self.draw_text(self.ventana, veh.num, veh.rect.centerx, veh.rect.centery + 40, self.inf_font, WHITE)\r\n\r\n        if manual_Mode == 1:\r\n            self.draw_text(self.ventana, ""Habilitar Semaforo por emergencia"", 800, 290, self.message_font, WHITE)\r\n\r\n        # if manual_Mode == 0 and estado!=""000000"":\r\n        self.clock_semaforos(start_time, TIME_1, TIME_2, Periodo)\r\n\r\n        # Modo automatico\r\n        if manual_Mode == 0:\r\n            if estado == ""100001"":\r\n\r\n                if clock_s1 == 0:  # Marca el tiempo de entrada\r\n                    clock_s1 = 1\r\n                    tpause1 = tpause\r\n                    time_count2 = TIME_1\r\n                    time_count1 = TIME_1\r\n\r\n                elif clock_s1 == 1:  # Mantiene en estado actual\r\n                    estado = ""100001""\r\n                    clock_s1 = 1\r\n                elif clock_s1 == 2:  # Estado siguiente\r\n                    estado = ""010001""\r\n                    STOP = 0\r\n                    estadoEspera = 1  # analogo de clock_s1\r\n                    tpause1 = tpause\r\n                    self.COLA_2 = int(cola2)\r\n                    clock_s1 = 0\r\n\r\n            elif estado == ""001100"":\r\n\r\n                if clock_s2 == 0:  # Marca el tiempo de entrada\r\n                    clock_s2 = 1\r\n                    tpause1 = tpause\r\n                    time_count1 = TIME_2\r\n                    time_count2 = TIME_2\r\n\r\n                elif clock_s2 == 1:  # Mantiene en estado actual\r\n                    estado = ""001100""\r\n                    clock_s2 = 1\r\n                elif clock_s2 == 2:  # Estado siguiente\r\n                    estado = ""001010""\r\n                    STOP = 0\r\n                    estadoEspera = 1\r\n                    tpause1 = tpause\r\n                    self.COLA_1 = int(cola1)\r\n                    clock_s2 = 0\r\n\r\n        if estado == ""001010"":\r\n\r\n            if estadoEspera != 1:\r\n\r\n                if STOP == 1:\r\n                    estado = ""001001""\r\n                    STOP = 0\r\n\r\n                elif STOP == 0:\r\n                    estado = ""100001""\r\n\r\n\r\n        elif estado == ""010001"":\r\n\r\n            if estadoEspera != 1:\r\n\r\n                if STOP == 1:\r\n                    estado = ""001001""\r\n                    STOP = 0\r\n\r\n                elif STOP == 0:\r\n                    estado = ""001100""\r\n\r\n        if estado == ""100001"":\r\n            self.maquina.estado10()\r\n        elif estado == ""001100"":\r\n            self.maquina.estado01()\r\n        elif estado == ""001010"":\r\n            self.maquina.estadoT10()\r\n        elif estado == ""010001"":\r\n            self.maquina.estadoT01()\r\n        elif estado == ""001001"":\r\n            self.maquina.estadoOff()\r\n        else:\r\n            estado = ""000000""\r\n\r\n        pg.display.flip()\r\n\r\n\r\n    def clock_semaforos(self, start_time, TIME_1, TIME_2, Periodo):\r\n\r\n        global tpause, time_count1, time_count2, time_count, start_time1, estadoEspera, estado, tpause1, clock_s1, clock_s2, manual_Mode, changeTime, count_p\r\n        stop_time = time.time()\r\n        Time = stop_time - start_time\r\n        reference = Time - tpause1\r\n\r\n        if clock_s1 == 1:\r\n\r\n            if reference > TIME_1 - time_count:\r\n                clock_s1 = 2\r\n\r\n        elif clock_s2 == 1:\r\n            if reference > TIME_2 - time_count:\r\n                clock_s2 = 2\r\n\r\n        if reference > time_count + 1:\r\n            estadoEspera = 0\r\n\r\n        if Time > 1 and Time < 1.15:\r\n            tpause = Time\r\n\r\n        taux = Time - tpause\r\n\r\n        if taux > 1 and taux < 1.2:\r\n            if manual_Mode == 0 and estado != ""000000"":\r\n                count_p += 1\r\n            else:\r\n                count_p = 0\r\n\r\n            tpause = Time\r\n            time_count1 = time_count1 - 1\r\n            time_count2 = time_count2 - 1\r\n\r\n        if time_count1 <= 0:\r\n            time_count1 = 0\r\n\r\n        if time_count2 <= 0:\r\n            time_count2 = 0\r\n\r\n        if Periodo == count_p:\r\n            changeTime = 1\r\n            count_p = 0\r\n\r\n        if manual_Mode == 0 and estado != ""000000"":\r\n            self.draw_time(time_count1, 225-100, 270)\r\n            self.draw_time(time_count2, 225+100, 270)\r\n\r\n    def draw_new_game_screen(self):\r\n        # draw the new game screen\r\n        pass\r\n\r\n    def draw_game_over_screen(self):\r\n        # draw the game over screen\r\n        pass\r\n\r\n    RED = (255, 0, 0)\r\n\r\n    def draw_text(self, surface, value, x, y, font, color):\r\n        # draw text in the screen\r\n        text_image = font.render(value, True, color)\r\n        rect = text_image.get_rect()\r\n        rect.center = (x, y)\r\n        surface.blit(text_image, rect)\r\n\r\n    def draw_time(self, t, x, y):\r\n        if t >= 0:\r\n            num = str(t)\r\n        else:\r\n            num = ""0""\r\n            print(""Error Tiempo negativo: "" + str(t))\r\n        self.draw_text(self.ventana, num, x, y, self.subTitle_font, WHITE)\r\n\r\n\r\n\r\n    def PRUEBA(self):\r\n        print(""Estoy probando... Quien lea esto es marico"")\r\n\r\n#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\ngame = Game()\r\ngame.draw_new_game_screen()\r\nstart_time = time.time()\r\n\r\nplt.ion()\r\n\r\n#Tiempo inicial\r\nTIME_1 = 15\r\nTIME_1P = TIME_1\r\ntime_count1 = TIME_1\r\nTIME_2 = 15\r\nTIME_2P = TIME_2\r\ntime_count2 = TIME_2\r\nPeriodo = TIME_1 + TIME_2\r\n\r\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nwith open(ruta,""w"") as out_file:\r\n    with serial.Serial(\'COM5\', 115200, timeout=1) as ser:\r\n        print(""El puerto serial usado es: "")\r\n        print(ser)\r\n\r\n        while game.running:\r\n            game.Clock.tick(FPS)\r\n            game.new()\r\n            game.run(start_time, TIME_1, TIME_2, Periodo)  # ,tpause,taux)\r\n            game.draw_game_over_screen()\r\n\r\nexcel_file.close()\r\npg.quit()\r\n\r\nprint(""Finalice"")\r\n\r\n#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n#Leer Archivo\r\n#Vectores para leer las coordenadas del archivo\r\nX = np.zeros((0, 1), dtype=np.float)\r\nY = np.zeros((0, 1), dtype=np.float)\r\nYaux = np.zeros((0, 1), dtype=np.float)\r\nVectorSplit = np.zeros((0, 1), dtype=np.float)\r\n\r\nVmin = 0\r\nVmax = 0\r\n\r\ntry:\r\n    with open(""SenalSensorSerial.txt"", ""r"") as out_file:\r\n\r\n        lines = out_file.readlines()\r\n\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n\r\n            if Sensor == 1:\r\n                Y = np.vstack([Y, Lectura[0]])\r\n\r\n            else:\r\n                if Sensor == 2:\r\n                    Y = np.vstack([Y, Lectura[1]])\r\n                else:\r\n                    if Sensor == 3:\r\n                        Y = np.vstack([Y, Lectura[2]])\r\n                    else:\r\n                        Y = np.vstack([Y, Lectura[3]])\r\n\r\n        if Sensor == 1 or Sensor == 2:\r\n\r\n            print(Calibracion)\r\n            Ref = np.mean(Calibracion)\r\n            print(""Valor referencia: "" + str(Ref))\r\n            Indmax = np.argmax(Y)\r\n            Vmax=Y[Indmax]\r\n            Vresta = (Vmax - Ref)/2\r\n            Vcorte = Ref + Vresta\r\n\r\n            #Todos los valores del vector que sean mayores al voltaje de corte\r\n            Yaux = Y > Vcorte\r\n            Ynew = Y[Yaux]\r\n\r\n            #print(Y)\r\n            print(""Yaux:"")\r\n            print(Yaux)\r\n\r\n            Ynew_ind = np.where(Yaux > 0)\r\n            Xnew = Ynew_ind[0] #Ynew=Y[new_ind[0]]\r\n\r\n            #-------Extra\r\n            Yauxd = Y < Vcorte\r\n            Xd = np.where(Yauxd > 0)\r\n            Xdeteccion = Xd[0]\r\n            #----------------\r\n            print(""Xdeteccion: ""+str(Xdeteccion))\r\n            print(""Xnew: "" + str(Xnew))\r\n\r\n            #Separacion de picos\r\n            Indmin = np.argmin(Ynew)\r\n            Vmin=Ynew[Indmin]\r\n            print(""Vmin: "" + str(Vmin))\r\n\r\n            Ysepi = Ynew < (Vmin + 0.1)\r\n            Ysepv = Ynew[Ysepi]\r\n            Ysep_ind = np.where(Ysepi > 0)\r\n\r\n            Xsep = Xnew[Ysep_ind[0]]\r\n            print(Xsep)\r\n\r\n            s=[]\r\n            saux=[]\r\n            s.append(0)\r\n\r\n            for i in range(len(Xsep)-1):\r\n                DifX = Xsep[i+1]-Xsep[i]\r\n                if(DifX > 30):\r\n\r\n                    s.append(i+1)\r\n\r\n            #-------------Extra\r\n            for i in range(len(Xdeteccion)-1):\r\n                DifX = Xdeteccion[i + 1] - Xdeteccion[i]\r\n                if (DifX > 10):\r\n                    saux.append(i)\r\n                    saux.append(i + 1)\r\n            #--------------------------\r\n\r\n            print(""Longitud de saux: ""+str(len(saux)))\r\n            print(""saux: ""+str(saux))\r\n\r\n            print(""Longitud de s: ""+str(len(s)))\r\n            print(""s: ""+str(s))\r\n            CanVeh = len(s)/2\r\n\r\n            Xisep = []\r\n            XSep = []\r\n            XSepM = []\r\n            XSEP = []\r\n            YSEP = []\r\n\r\n            #Extra\r\n            Xisepaux=[]\r\n\r\n            #El vector ""s"" contiene los valores limitrofes (indices de Xsep) de los minimos en el eje ""x""\r\n\r\n            for i in range(len(s)):\r\n                Xisep.append(Xsep[s[i]]) #Valores de Xisep son los valores de los indices de Xsep respectivos (pares de minimos)\r\n\r\n            #-----------Extra\r\n            for i in range(len(saux)):\r\n                Xisepaux.append(Xdeteccion[saux[i]])  # Valores de Xisep son los valores de los indices de Xsep respectivos (pares de minimos)\r\n\r\n            #----------------------Extra\r\n            listAux=[]\r\n            for i in range(len(Xisepaux)):\r\n                if i % 2 == 0:\r\n                    listAux.append(Xisepaux[i]+1)\r\n                else: listAux.append(Xisepaux[i]-1)\r\n            #----------\r\n\r\n            #Xisepaux=Xisep para la prueba\r\n            for i in range(len(Xisepaux)):\r\n                ind = np.where(Xnew == listAux[i])#(Xisepaux[i]))\r\n                XSep.append(ind[0])\r\n\r\n            for i in range(len(XSep)):\r\n                if i % 2 != 0:\r\n                    Dif = XSep[i] - XSep[i - 1]\r\n                    if Dif > 35:\r\n                        XSepM.append(XSep[i-1])\r\n                        XSepM.append(XSep[i])\r\n            i=0\r\n            while(i<int(len(XSepM))):\r\n\r\n                #print(""El valor ""+str(i)+"" es: ""+str(int(XSep[i])))\r\n\r\n                XSEP.append(Xnew[int(XSepM[i]):int(XSepM[i+1])])#XSepM es XSep modificado\r\n                YSEP.append(Ynew[int(XSepM[i]):int(XSepM[i+1])])\r\n\r\n                i=i+2\r\n\r\n            print(""Han pasado ""+str(len(XSEP))+"" vehiculos"")\r\n            Media=[]\r\n            Ind_max = []\r\n            V_max = []\r\n            vehiculos = []\r\n            #-----------\r\n            Media_Camioneta = 0 #Valor medio de las camionetas\r\n            Media_Carro = 0 #Valor medio de los carros\r\n            V_max_camioneta = 0 #Valor maximo de camioneta\r\n            V_max_carro = 0 #Valor maximo de camioneta\r\n            #-----------\r\n            carro = 0\r\n            camioneta = 0\r\n\r\n            for i in range(len(YSEP)):\r\n                Media.append(np.mean(YSEP[i]))\r\n                Ind_max.append(np.argmax(YSEP[i]))\r\n                V_max.append(YSEP[i][Ind_max[i]])\r\n            print(""Media: ""+str(Media))\r\n            print(""Indice maximo: ""+str(Ind_max))\r\n            print(""Valor maximo: ""+str(V_max))\r\n\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n\r\nX=np.arange(0, len(Y))\r\n\r\n\r\nwith open(""EjeTiempoX.txt"", ""w"") as file:\r\n    for i in range(len(X)):\r\n        file.write(str(i) + "" "" + ""\\n"")\r\n\r\nTipoSensor = """"\r\nValor_Sensor = """"\r\n\r\nif Sensor == 1 or Sensor == 2:\r\n    TipoSensor = ""Infrarrojo""\r\n    Valor_Sensor = ""Voltaje""\r\nelif Sensor == 3 or Sensor == 4:\r\n    TipoSensor = ""Ultrasonido""\r\n    Valor_Sensor = ""Distancia""\r\n\r\n#Graficar\r\nplt.figure()\r\nplt.clf()\r\nplt.plot(X, Y, marker = \'.\')# c=\'b\')\r\nplt.axis(\'tight\')\r\nplt.title(""Se\xc3\xb1al captada por sensor "" + TipoSensor)\r\nplt.legend()\r\nplt.xlabel(""Tiempo"")\r\nplt.ylabel(Valor_Sensor)\r\nplt.draw()\r\nplt.waitforbuttonpress()\r\n\r\n#Histograma\r\npyl.figure()\r\npyl.hist(Y)\r\npyl.show()\r\npyl.title(""Histograma de toda la se\xc3\xb1al"")\r\npyl.waitforbuttonpress()\r\n\r\nif Sensor == 1 or Sensor == 2:\r\n    #Graficar\r\n    plt.figure()\r\n    plt.clf()\r\n    plt.plot(Xnew, Ynew, marker = \'.\')# c=\'b\')\r\n    plt.axis(\'tight\')\r\n    plt.title(""Se\xc3\xb1al filtrada captada por sensor infrarrojo"")\r\n    plt.legend()\r\n    plt.draw()\r\n    plt.waitforbuttonpress()\r\n\r\n    #Histograma\r\n    pyl.figure()\r\n    pyl.hist(Ynew)\r\n    pyl.show()\r\n    pyl.title(""Histograma de la se\xc3\xb1al de interes"")\r\n    pyl.waitforbuttonpress()\r\n\r\n    #Graficar\r\n    plt.figure()\r\n    plt.clf()\r\n    plt.plot(Xsep, Ysepv, marker=\'*\')\r\n    plt.axis(\'tight\')\r\n    plt.title(""Valores minimos"")\r\n    plt.legend()\r\n    #plt.show()\r\n    plt.draw()\r\n    plt.waitforbuttonpress()\r\n\r\n    #Histograma\r\n    pyl.figure()\r\n    pyl.hist(Xsep, bins=100)\r\n    pyl.show()\r\n    pyl.title(""Histograma de la se\xc3\xb1al de Valores minimos"")\r\n    pyl.waitforbuttonpress()\r\n\r\n    # Graficar iterativamente\r\n    for i in range(len(XSEP)):\r\n        plt.figure()\r\n        plt.plot(XSEP[i], YSEP[i], marker=\'.\')  # c=\'b\')\r\n        plt.axis(\'tight\')\r\n        plt.title(""Vehiculo numero: "" + str(i+1))\r\n        plt.ylim((Vmin-0.1), (Vmax+0.1))\r\n        plt.draw()\r\n        plt.waitforbuttonpress()\r\n\r\n    # Graficar iterativamente\r\n    for i in range(len(XSEP)):\r\n        plt.figure()\r\n        plt.hist(YSEP[i], bins=50)\r\n        plt.title(""Histograma del Vehiculo numero: "" + str(i+1))\r\n        plt.draw()\r\n        plt.waitforbuttonpress()\r\n\r\n\r\n'"
Python Code/ITS/Interfaz main/settings.py,0,"b'from os import path\r\nancho,largo =1100,500#1350, 700 #480,600\r\nFPS=200\r\nNAME=""jumpy!""\r\n\r\nWHITE=(255,255,255)\r\nBLACK=(0,0,0)\r\nRED=(255,0,0)\r\nBLUE=(0,0,255)\r\nGREEN=(0,255,0)\r\nGREY=(155,155,155)\r\n\r\ngame_folder=path.dirname(__file__)\r\nimg_folder=path.join(game_folder,""pngs"")\r\nsnd_folder=path.join(game_folder,""snds"")'"
Python Code/ITS/Interfaz main/sprites_serial.py,0,"b'import pygame as pg\r\nimport random\r\nfrom os import path\r\nfrom settings import *\r\n\r\n\r\nclass Sprite(pg.sprite.Sprite):\r\n\tdef __init__(self,game):\r\n\t\tself.game = game\r\n\t\tself.layer = 0\r\n\t\tself.groups = self.game.all_sprites\r\n\r\n\t\tpg.sprite.Sprite.__init__(self,self.groups)\r\n\r\n\tdef update(self):\r\n\t\tpass\r\n\r\nclass Button(pg.sprite.Sprite):\r\n\tdef __init__(self,game,x,y,description, accion, manual,activo,semaforo,color):\r\n\t\tself.color = color\r\n\t\tself.game = game\r\n\t\tself.layer = 0\r\n\t\tself.groups = self.game.all_sprites , self.game.all_Buttons\r\n\t\tself.x = x\r\n\t\tself.y = y\r\n\t\tself.accion = accion\r\n\t\tself.estado = ""OFF""\r\n\t\tself.manualMode = 0\r\n\t\tself.manual = manual\r\n\t\tself.activo = activo\r\n\t\tself.semaforo = semaforo\r\n\t\tself.control = 0\r\n\r\n\t\tpg.sprite.Sprite.__init__(self,self.groups)\r\n\t\tif self.color == ""red"":\r\n\r\n\t\t\tself.image = pg.image.load(""Red_Button.png"")\r\n\t\t\tself.image.set_colorkey(BLACK)\r\n\r\n\t\t\tself.imgBig = pg.transform.scale(self.image, (50, 50))#, DestSurface=None)\r\n\t\t\tself.imgSmall = pg.transform.scale(self.image, (30, 30))\r\n\t\t\tself.image = self.imgBig\r\n\r\n\t\telif self.color == ""blue"":\r\n\t\t\tself.control = 1\r\n\t\t\tself.estado = ""ON""\r\n\t\t\tself.image = pg.image.load(""Blue_Button.png"")\r\n\t\t\tself.image.set_colorkey(BLACK)\r\n\r\n\t\t\tself.imgBig = pg.transform.scale(self.image, (50, 50))  # , DestSurface=None)\r\n\t\t\tself.imgSmall = pg.transform.scale(self.image, (30, 30))\r\n\t\t\tself.image = self.imgBig\r\n\r\n\r\n\t\tif self.activo == 0:\r\n\t\t\tself.image = pg.Surface((30,30))#None\r\n\t\t\tself.image.fill(BLACK)\r\n\r\n\t\tself.rect = self.image.get_rect() #None\r\n\t\tself.rect.center=(x,y)\r\n\t\tself.description = description\r\n\r\n\r\n\t\t#pantalla = pg.display.set_mode((340, 280))\r\n\t\t#ventana.blit(imagen),(551,548))# (100, 100))\r\n\t\t#pg.display.update()\r\n\r\n\r\n\r\n\tdef update(self):\r\n\t\tpass\r\n\tdef setActivo(self):\r\n\t\tself.activo=1\r\n\tdef setDesactivo(self):\r\n\t\tself.activo=0\r\n\tdef setOFF(self):\r\n\t\tself.estado = ""OFF""\r\n\tdef setON(self):\r\n\t\tself.estado = ""ON""\r\n\r\n\tdef Onclick(self):\r\n\t\tif self.activo == 1 or self.manual == 1:\r\n\t\t\tif self.estado == ""OFF"":\r\n\t\t\t\tself.estado = ""ON""\r\n\r\n\t\t\t\tif self.manual == 1:\r\n\t\t\t\t\tself.manualMode = 1\r\n\r\n\t\t\telse:\r\n\t\t\t\tself.estado = ""OFF""\r\n\r\n\t\t\t\tif self.manual == 1:\r\n\t\t\t\t\tself.manualMode = 0\r\n\r\n\r\n\t\t\tself.image = self.imgSmall\r\n\t\t\tself.rect = self.image.get_rect()\r\n\t\t\tself.rect.center = (self.x, self.y)\r\n\t\t\tself.accion()\r\n\tdef checkClick(self, mouse_pos):\r\n\t\tif self.rect.collidepoint(mouse_pos):\r\n\t\t\tself.Onclick()\r\n\r\n\tdef Onpull(self):\r\n\t\tif self.activo == 1 or self.manual == 1:\r\n\t\t\tself.image = self.imgBig\r\n\t\t\tself.rect = self.image.get_rect()\r\n\t\t\tself.rect.center = (self.x, self.y)\r\n\t\telse:\r\n\t\t\tself.image = pg.Surface((30, 30))\r\n\t\t\tself.image.fill(BLACK)\r\n\r\nclass LED(pg.sprite.Sprite):\r\n\tdef __init__(self, game, x, y, color, description,semaforo):\r\n\t\tself.game = game\r\n\t\tself.layer = 0\r\n\t\tself.semaforo = semaforo\r\n\t\tif semaforo == 1:\r\n\t\t\tself.groups = self.game.all_sprites, self.game.all_LEDS1\r\n\t\telse:\r\n\t\t\tif semaforo == 2:\r\n\t\t\t\tself.groups = self.game.all_sprites, self.game.all_LEDS2\r\n\t\tself.x = x\r\n\t\tself.y = y\r\n\t\tself.color = color\r\n\t\tself.description = description\r\n\t\tself.estado = 0\r\n\r\n\t\tpg.sprite.Sprite.__init__(self, self.groups)\r\n\r\n\t\t#Luces brillantes\r\n\t\tself.image = pg.image.load(""Luz_verde_b.jpg"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgGreen = pg.transform.scale(self.image, (50, 50))\r\n\r\n\t\tself.image = pg.image.load(""Luz_roja_b.jpg"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgRed = pg.transform.scale(self.image, (50, 50))\r\n\r\n\t\tself.image = pg.image.load(""Luz_amarilla_b.jpg"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgYellow = pg.transform.scale(self.image, (50, 50))\r\n\r\n\t\t#Luces opacas\r\n\t\tself.image = pg.image.load(""Luz_verde_opaca.png"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgGreenO = pg.transform.scale(self.image, (50, 50))\r\n\r\n\t\tself.image = pg.image.load(""Luz_roja_opaca.png"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgRedO = pg.transform.scale(self.image, (50, 50))\r\n\r\n\t\tself.image = pg.image.load(""Luz_amarilla_opaca.png"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgYellowO = pg.transform.scale(self.image, (50, 50))\r\n\r\n\r\n\t\tif self.color == ""green"":\r\n\t\t\tself.image = self.imgGreenO\r\n\t\t\t#self.image.fill((0, 0, 255,127))\r\n\t\t\t#self.imgGreenOff = self.image\r\n\t\telse:\r\n\t\t\tif self.color == ""red"":\r\n\t\t\t\tself.image = self.imgRedO\r\n\t\t\t\t#self.image.fill((0, 0, 255))\r\n\t\t\telse:\r\n\t\t\t\tif self.color == ""yellow"":\r\n\t\t\t\t\tself.image = self.imgYellowO\r\n\t\t\t\t\t#self.image.fill((0, 0, 255))\r\n\r\n\t\tself.rect = self.image.get_rect()  # None\r\n\t\tself.rect.center = (x, y)\r\n\r\n\tdef OnLED(self):\r\n\t\tself.estado = 1\r\n\t\tif self.color == ""green"":\r\n\t\t\tself.image = self.imgGreen\r\n\t\telif self.color == ""red"":\r\n\t\t\tself.image = self.imgRed\r\n\t\telif self.color == ""yellow"":\r\n\t\t\tself.image = self.imgYellow\r\n\r\n\t\tself.rect = self.image.get_rect()  # None\r\n\t\tself.rect.center = (self.x, self.y)\r\n\r\n\tdef OffLED(self):\r\n\t\tself.estado = 0\r\n\t\tif self.color == ""green"":\r\n\t\t\tself.image = self.imgGreenO\r\n\t\telse:\r\n\t\t\tif self.color == ""red"":\r\n\t\t\t\tself.image = self.imgRedO\r\n\t\t\telse:\r\n\t\t\t\tif self.color == ""yellow"":\r\n\t\t\t\t\tself.image = self.imgYellowO\r\n\r\n\t\tself.rect = self.image.get_rect()  # None\r\n\t\tself.rect.center = (self.x, self.y)\r\n\r\n\tdef Color(self):\r\n\r\n\t\tif self.color == ""red"":\r\n\t\t\tself.image = self.imgRed\r\n\t\telse:\r\n\t\t\tif self.color == ""green"":\r\n\t\t\t\tself.image = self.imgGreen\r\n\t\t\telse:\r\n\t\t\t\tif self.color == ""yellow"":\r\n\t\t\t\t\tself.image = self.imgYellow\r\n\r\nclass Vehicle(pg.sprite.Sprite):\r\n\tdef __init__(self, game, x, y, type, description, num):\r\n\t\tself.game = game\r\n\t\tself.layer = 0\r\n\t\tself.groups = self.game.all_sprites, self.game.all_Veh\r\n\t\tself.x = x\r\n\t\tself.y = y\r\n\t\tself.description = description\r\n\t\tself.type = type\r\n\t\tself.num = str(num)\r\n\t\t#self.estado = ""off""\r\n\r\n\t\tpg.sprite.Sprite.__init__(self, self.groups)\r\n\r\n\t\tself.image = pg.image.load(""carro_b.jpg"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imgCar = pg.transform.scale(self.image, (70, 25))  # , DestSurface=None)\r\n\r\n\t\tself.image = pg.image.load(""Camioneta.jpg"")\r\n\t\tself.image.set_colorkey(BLACK)\r\n\t\tself.imageTruck = pg.transform.scale(self.image, (90, 50))  # , DestSurface=None)\r\n\r\n\t\tif self.type == ""car"":\r\n\t\t\tself.image = self.imgCar\r\n\t\telse:\r\n\t\t\tif self.type == ""truck"":\r\n\t\t\t\tself.image = self.imageTruck\r\n\r\n\t\tself.rect = self.image.get_rect()  # None\r\n\t\tself.rect.center = (x, y)\r\n#""""""\r\nclass Semaforo():\r\n\r\n\tdef __init__(self,game,name,X,Y,semaforo):\r\n\t\tself.game = game\r\n\t\tself.name = name\r\n\t\tself.posX = X\r\n\t\tself.posY = Y\r\n\t\tself.leds = {""green"":LED(game, X-50, Y, ""green"", "" "",semaforo), ""yellow"":LED(game, X, Y, ""yellow"",name,semaforo), ""red"":LED(game, X+50, Y, ""red"", "" "",semaforo)}\r\n\r\n\tdef setGreen(self):\r\n\t\tself.leds[""green""].OnLED()\r\n\t\tself.leds[""yellow""].OffLED()\r\n\t\tself.leds[""red""].OffLED()\r\n\r\n\tdef setYellow(self):\r\n\t\tself.leds[""yellow""].OnLED()\r\n\t\tself.leds[""green""].OffLED()\r\n\t\tself.leds[""red""].OffLED()\r\n\r\n\tdef setRed(self):\r\n\t\tself.leds[""red""].OnLED()\r\n\t\tself.leds[""yellow""].OffLED()\r\n\t\tself.leds[""green""].OffLED()\r\n\r\nclass MaquinaEstados():\r\n\tdef __init__(self,game,S1,S2,B1,B2):\r\n\t\tself.game = game\r\n\t\tself.Semaforos = {""S1"":S1,""S2"":S2}\r\n\t\tself.Buttons = {""B1"":B1,""B2"":B2}\r\n\r\n\t#Estados\r\n\tdef estado10(self):\r\n\t\tself.Semaforos[""S1""].setGreen()\r\n\t\tself.Buttons[""B1""].setON()\r\n\t\tself.Semaforos[""S2""].setRed()\r\n\t\tself.Buttons[""B2""].setOFF()\r\n\r\n\tdef estado01(self):\r\n\t\tself.Semaforos[""S2""].setGreen()\r\n\t\tself.Buttons[""B2""].setON()\r\n\t\tself.Semaforos[""S1""].setRed()\r\n\t\tself.Buttons[""B1""].setOFF()\r\n\r\n\tdef estadoT01(self):\r\n\t\tself.Semaforos[""S1""].setYellow()\r\n\t\tself.Buttons[""B1""].setON()\r\n\t\tself.Semaforos[""S2""].setRed()\r\n\t\tself.Buttons[""B2""].setOFF()\r\n\r\n\tdef estadoT10(self):\r\n\t\tself.Semaforos[""S2""].setYellow()\r\n\t\tself.Buttons[""B2""].setON()\r\n\t\tself.Semaforos[""S1""].setRed()\r\n\t\tself.Buttons[""B1""].setOFF()\r\n\r\n\tdef estadoOff(self):\r\n\t\tself.Semaforos[""S2""].setRed()\r\n\t\tself.Buttons[""B2""].setOFF()\r\n\t\tself.Semaforos[""S1""].setRed()\r\n\t\tself.Buttons[""B1""].setOFF()\r\n\r\n'"
Python Code/ITS/Ruido/FFT_Ruido.py,51,"b'import matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom numpy import pi\r\nfrom scipy.fftpack import fft, fftfreq\r\n\r\n""""""\r\nn = 2 ** 6  # N\xc3\xbamero de intervalos\r\nf = 400.0  # Hz\r\ndt = 1 / (f * 16)  # Espaciado, 16 puntos por per\xc3\xadodo\r\nt = np.linspace(0, (n - 1) * dt, n)  # Intervalo de tiempo en segundos\r\ny = np.sin(2 * pi * f * t) - 0.5 * np.sin(2 * pi * 2 * f * t)  # Se\xc3\xb1al\r\nplt.figure()\r\nplt.plot(t, y)\r\nplt.plot(t, y, \'ko\')\r\nplt.xlabel(\'Tiempo (s)\')\r\nplt.ylabel(\'$y(t)$\')\r\n#plt.show()\r\nplt.waitforbuttonpress()\r\n\r\nY = fft(y) / n  # Normalizada\r\nfrq = fftfreq(n, dt)  # Recuperamos las frecuencias\r\nplt.figure()\r\nplt.vlines(frq, 0, Y.imag)  # Representamos la parte imaginaria\r\nplt.annotate(s=u\'f = 400 Hz\', xy=(400.0, -0.5), xytext=(400.0 + 1000.0, -0.5 - 0.35), arrowprops=dict(arrowstyle = ""->""))\r\nplt.annotate(s=u\'f = -400 Hz\', xy=(-400.0, 0.5), xytext=(-400.0 - 2000.0, 0.5 + 0.15), arrowprops=dict(arrowstyle = ""->""))\r\nplt.annotate(s=u\'f = 800 Hz\', xy=(800.0, 0.25), xytext=(800.0 + 600.0, 0.25 + 0.35), arrowprops=dict(arrowstyle = ""->""))\r\nplt.annotate(s=u\'f = -800 Hz\', xy=(-800.0, -0.25), xytext=(-800.0 - 1000.0, -0.25 - 0.35), arrowprops=dict(arrowstyle = ""->""))\r\nplt.ylim(-1, 1)\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Im($Y$)\')\r\n#plt.show()\r\nplt.waitforbuttonpress()\r\n\r\nn2 = 2 ** 5\r\nt2 = np.linspace(0, 0.012, n2)  # Intervalo de tiempo en segundos\r\ndt2 = t2[1] - t2[0]\r\ny2 = np.sin(2 * pi * f * t2) - 0.5 * np.sin(2 * pi * 2 * f * t2)  # Se\xc3\xb1al\r\nY2 = fft(y2) / n2  # Transformada normalizada\r\nfrq2 = fftfreq(n2, dt2)\r\nfig = plt.figure(figsize=(6, 8))\r\nax1 = fig.add_subplot(211)\r\nax1.plot(t2, y2)\r\nax1.set_xlabel(\'Tiempo (s)\')\r\nax1.set_ylabel(\'$y_2(t)$\')\r\nax2 = fig.add_subplot(212)\r\nax2.vlines(frq2, 0, Y2.imag)\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Im($Y_2$)\')\r\n#plt.show()\r\nplt.waitforbuttonpress()\r\n\r\nt3 = np.linspace(0, 0.012 + 9 * dt2, 10 * n2)  # Intervalo de tiempo en segundos\r\ny3 = np.append(y2, np.zeros(9 * n2))  # Se\xc3\xb1al\r\nY3 = fft(y3) / (10 * n2)  # Transformada normalizada\r\nfrq3 = fftfreq(10 * n2, dt2)\r\nfig = plt.figure(figsize=(6, 8))\r\nax1 = fig.add_subplot(211)\r\nax1.plot(t3, y3)\r\nax1.set_xlabel(\'Tiempo (s)\')\r\nax1.set_ylabel(\'$y_3(t)$\')\r\nax2 = fig.add_subplot(212)\r\nax2.vlines(frq3, 0, Y3.imag)\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Im($Y_3$)\')\r\n#plt.show()\r\nplt.waitforbuttonpress()\r\n""""""\r\n\r\n#ARCHIVO------------------------------------------------------------\r\n\r\nY = np.zeros((0, 1), dtype=np.float)\r\ntry:\r\n    with open(""SenalSensorSerial_ruido0.txt"", ""r"") as out_file:\r\n        lines = out_file.readlines()\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n            Y = np.vstack([Y, Lectura[1]])\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n#--------------------------------------------------------------------\r\n#Y=Y-2\r\n#n4 = 2 ** 8\r\n#t4 = np.linspace(0, 0.05, n4)\r\nt4 = np.linspace(0, 14.110, len(Y))\r\nprint(len(Y))\r\ndt4 = t4[1] - t4[0]\r\n###y4 = np.sin(2 * pi * f * t4) - 0.5 * np.sin(2 * pi * 2 * f * t4)\r\n##y5 = y4 * np.blackman(n4)\r\n#y5 = Y * np.blackman(len(Y))\r\n#t4 = np.linspace(0, 0.12 + 4 * dt4, 5 * n4)\r\nt4 = np.linspace(0, 70.56 + 4*dt4, 5 * len(Y))\r\n#y4 = np.append(y4, np.zeros(4 * n4))\r\ny4 = np.append(Y, np.zeros(4*len(Y)))\r\n##y5 = np.append(y5, np.zeros(4 * n4))\r\n#y5 = np.append(y5, np.zeros(len(Y)))\r\n#Y4 = fft(y4) / (5 * n4)\r\nY4 = fft(y4) / (5*len(Y))#(5 * n4)\r\n##Y5 = fft(y5) / (5 * n4)\r\n#Y5 = fft(y5) / (2 * len(Y))\r\n#frq4 = fftfreq(5 * n4, dt4)\r\nfrq4 = fftfreq(5*len(Y), 1/4000)#dt4)\r\n#frq4 = np.linspace(0, 5*len(Y), 1/1000)\r\nfig = plt.figure(figsize=(6, 8))\r\nax1 = fig.add_subplot(411)\r\nax1.plot(t4, y4)\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'$y_4(t)$\')\r\nax2 = fig.add_subplot(412)\r\n#ax2.vlines(frq4, 0, abs(Y4))  # Espectro de amplitud\r\nax2.plot(frq4, abs(Y4))  # Espectro de amplitud\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Abs($Y_4$)\')\r\nplt.xlim(-1000,1000)\r\n\r\nax3 = fig.add_subplot(413)\r\nax3.vlines(frq4, 0, abs(Y4))  # Espectro de amplitud\r\n#ax2.plot(frq4, abs(Y4))  # Espectro de amplitud\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Abs($Y_4$)\')\r\nplt.xlim(-1000,1000)\r\n\r\n#plt.xlim(-10, 10)\r\n#ax3 = fig.add_subplot(413)\r\n#ax3.plot(t4, y5)\r\n#plt.xlabel(\'Frecuencia (Hz)\')\r\n#plt.ylabel(\'$y_5(t)$\')\r\n#ax4 = fig.add_subplot(414)\r\n#ax4.vlines(frq4, 0, abs(Y5))  # Espectro de amplitud\r\n#plt.xlabel(\'Frecuencia (Hz)\')\r\n#plt.ylabel(\'Abs($Y_5$)\')\r\n#plt.show()\r\nplt.waitforbuttonpress()\r\n\r\n\r\n#ARCHIVO------------------------------------------------------------\r\n\r\nY = np.zeros((0, 1), dtype=np.float)\r\ntry:\r\n    with open(""SenalSensorSerial_ruido1.txt"", ""r"") as out_file:\r\n        lines = out_file.readlines()\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n            Y = np.vstack([Y, Lectura[1]])\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n#--------------------------------------------------------------------\r\n#Y=Y-2\r\n#n4 = 2 ** 8\r\n#t4 = np.linspace(0, 0.05, n4)\r\nt4 = np.linspace(0, 130, len(Y))\r\nprint(len(Y))\r\ndt4 = t4[1] - t4[0]\r\n###y4 = np.sin(2 * pi * f * t4) - 0.5 * np.sin(2 * pi * 2 * f * t4)\r\n##y5 = y4 * np.blackman(n4)\r\n#y5 = Y * np.blackman(len(Y))\r\n#t4 = np.linspace(0, 0.12 + 4 * dt4, 5 * n4)\r\nt4 = np.linspace(0, 70.56 + 4*dt4, 5 * len(Y))\r\n#y4 = np.append(y4, np.zeros(4 * n4))\r\ny4 = np.append(Y, np.zeros(4*len(Y)))\r\n##y5 = np.append(y5, np.zeros(4 * n4))\r\n#y5 = np.append(y5, np.zeros(len(Y)))\r\n#Y4 = fft(y4) / (5 * n4)\r\nY4 = fft(y4) / (5*len(Y))#(5 * n4)\r\n##Y5 = fft(y5) / (5 * n4)\r\n#Y5 = fft(y5) / (2 * len(Y))\r\n#frq4 = fftfreq(5 * n4, dt4)\r\nfrq4 = fftfreq(5*len(Y), 1/4000)#dt4)\r\n#frq4 = np.linspace(0, 5*len(Y), 1/1000)\r\nfig = plt.figure(figsize=(6, 8))\r\nax1 = fig.add_subplot(411)\r\nax1.plot(t4, y4)\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'$y_4(t)$\')\r\nax2 = fig.add_subplot(412)\r\n#ax2.vlines(frq4, 0, abs(Y4))  # Espectro de amplitud\r\nax2.plot(frq4, abs(Y4))  # Espectro de amplitud\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Abs($Y_4$)\')\r\nplt.xlim(-1000,1000)\r\n\r\nax3 = fig.add_subplot(413)\r\nax3.vlines(frq4, 0, abs(Y4))  # Espectro de amplitud\r\n#ax2.plot(frq4, abs(Y4))  # Espectro de amplitud\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Abs($Y_4$)\')\r\nplt.xlim(-1000,1000)\r\n\r\n#plt.xlim(-10, 10)\r\n#ax3 = fig.add_subplot(413)\r\n#ax3.plot(t4, y5)\r\n#plt.xlabel(\'Frecuencia (Hz)\')\r\n#plt.ylabel(\'$y_5(t)$\')\r\n#ax4 = fig.add_subplot(414)\r\n#ax4.vlines(frq4, 0, abs(Y5))  # Espectro de amplitud\r\n#plt.xlabel(\'Frecuencia (Hz)\')\r\n#plt.ylabel(\'Abs($Y_5$)\')\r\n#plt.show()\r\nplt.waitforbuttonpress()\r\n\r\n\r\n#ARCHIVO------------------------------------------------------------\r\n\r\nY = np.zeros((0, 1), dtype=np.float)\r\ntry:\r\n    with open(""SenalSensorSerial_ruido2.txt"", ""r"") as out_file:\r\n        lines = out_file.readlines()\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n            Y = np.vstack([Y, Lectura[1]])\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n#--------------------------------------------------------------------\r\n#Y=Y-2\r\n#n4 = 2 ** 8\r\n#t4 = np.linspace(0, 0.05, n4)\r\nt4 = np.linspace(0, 1996, len(Y))\r\nprint(len(Y))\r\ndt4 = t4[1] - t4[0]\r\n###y4 = np.sin(2 * pi * f * t4) - 0.5 * np.sin(2 * pi * 2 * f * t4)\r\n##y5 = y4 * np.blackman(n4)\r\n#y5 = Y * np.blackman(len(Y))\r\n#t4 = np.linspace(0, 0.12 + 4 * dt4, 5 * n4)\r\nt4 = np.linspace(0, 70.56 + 4*dt4, 5 * len(Y))\r\n#y4 = np.append(y4, np.zeros(4 * n4))\r\ny4 = np.append(Y, np.zeros(4*len(Y)))\r\n##y5 = np.append(y5, np.zeros(4 * n4))\r\n#y5 = np.append(y5, np.zeros(len(Y)))\r\n#Y4 = fft(y4) / (5 * n4)\r\nY4 = fft(y4) / (5*len(Y))#(5 * n4)\r\n##Y5 = fft(y5) / (5 * n4)\r\n#Y5 = fft(y5) / (2 * len(Y))\r\n#frq4 = fftfreq(5 * n4, dt4)\r\nfrq4 = fftfreq(5*len(Y), 1/4000)#dt4)\r\n#frq4 = np.linspace(0, 5*len(Y), 1/1000)\r\nfig = plt.figure(figsize=(6, 8))\r\nax1 = fig.add_subplot(411)\r\nax1.plot(t4, y4)\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'$y_4(t)$\')\r\nax2 = fig.add_subplot(412)\r\n#ax2.vlines(frq4, 0, abs(Y4))  # Espectro de amplitud\r\nax2.plot(frq4, abs(Y4))  # Espectro de amplitud\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Abs($Y_4$)\')\r\nplt.xlim(-1000,1000)\r\n\r\nax3 = fig.add_subplot(413)\r\nax3.vlines(frq4, 0, abs(Y4))  # Espectro de amplitud\r\n#ax2.plot(frq4, abs(Y4))  # Espectro de amplitud\r\nplt.xlabel(\'Frecuencia (Hz)\')\r\nplt.ylabel(\'Abs($Y_4$)\')\r\nplt.xlim(-1000,1000)\r\n\r\n#plt.xlim(-10, 10)\r\n#ax3 = fig.add_subplot(413)\r\n#ax3.plot(t4, y5)\r\n#plt.xlabel(\'Frecuencia (Hz)\')\r\n#plt.ylabel(\'$y_5(t)$\')\r\n#ax4 = fig.add_subplot(414)\r\n#ax4.vlines(frq4, 0, abs(Y5))  # Espectro de amplitud\r\n#plt.xlabel(\'Frecuencia (Hz)\')\r\n#plt.ylabel(\'Abs($Y_5$)\')\r\nplt.show()\r\n#plt.waitforbuttonpress()'"
Python Code/ITS/Scripts apoyo/GraficadorArchivo.py,12,"b'#Eladio Jimenez 13-10699\r\n#Kheyter Chassaigne 13-10274\r\nimport cv2\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nimport serial\r\n\r\nplt.ion()\r\nn=100\r\n\r\n#------------------------------------------\r\n#Inicializacion de vectores\r\n\r\n#Vector que obtendra todos los datos del serial\r\ncontenido = np.zeros((0, 1), dtype=np.float)\r\n\r\n#Vectores para leer las coordenadas del archivo\r\nX = np.zeros((0, 1), dtype=np.float)\r\nY = np.zeros((0, 1), dtype=np.float)\r\n\r\n#Simulacion de recepcion del serial (Se llena un vector)\r\n\r\n#Revertir Protocolo\r\n#0xFF 0xDDAAAAA\r\n\r\n#Llenado de vector de coordenadas\r\nfor i in range(0,n):\r\n    contenido = np.vstack([contenido, i])\r\n\r\n#Pasamos el vector ""contenido"" a bytes\r\nts = contenido.tostring()#En bytes\r\n\r\n#Pasamos ""ts"" que esta en bytes a una lista de floats\r\ncont = np.fromstring(ts,dtype=np.float) #En floats\r\n\r\n#Pasamos la lista de floats a una lista de strings\r\nTS = [str(elem) for elem in cont]\r\n#La funcion TS="" "".join(TS) #Necesita que el contenido de la lista sean strings y asi los concatena\r\n#print(TS)\r\n\r\n#------------------------------------------\r\n\r\n#Nombre del archivo\r\nruta = ""SenalSensor.txt""\r\n\r\n#Escribir archivo\r\n\r\nf=open(ruta, ""w"")\r\n\r\nprint(ts)\r\nprint(TS)\r\nprint(contenido)\r\nprint(cont)\r\n\r\nfor i in range(0,n):\r\n    #Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\r\n    f.write(TS[i]+"" ""+TS[i]+""\\n"")\r\nf.close()\r\n\r\n#Leer Archivo\r\n\r\nruta2=""SenalSensorSerial.txt""\r\n\r\ntry:\r\n    f=open(ruta2,""r"")\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    f.close()\r\n\r\nlines = f.readlines()\r\n\r\nfor line in lines:\r\n    Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n    #print (\'Leyendo\')\r\n    #print(Lectura)\r\n    X = np.vstack([X, Lectura[0]])\r\n    Y = np.vstack([Y, Lectura[1]])\r\n    #coord=line.split() para esto se deberia leer la linea en vez de el vector\r\nf.close()\r\n\r\n#Graficar\r\nplt.figure(1)\r\nplt.clf()\r\n\r\n#v= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n#v = np.vstack([v,v])\r\nv=np.arange(0,10000)\r\n\r\naux=np.arange(0, len(Y))\r\n\r\n\r\nprint(aux)\r\nprint(Y)\r\n\r\n\r\ny=np.sin(v)\r\nplt.plot(X, Y, c=\'b\')#, label=""Se\xc3\xb1al captada"")\r\n#plt.plot(X, Y, marker=\'.\', c=\'b\', linewidth=0)#, label=""Se\xc3\xb1al captada"")\r\nplt.axis(\'tight\')#equal\')\r\nplt.title(""Se\xc3\xb1al captada por los sensores"")\r\nplt.legend()\r\n#plt.show()\r\nplt.draw()\r\nplt.waitforbuttonpress()'"
Python Code/ITS/Scripts apoyo/Histograma de Errores.py,5,"b'#Eladio Jimenez 13-10699\r\n#Kheyter Chassaigne 13-10274\r\n\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.pylab as pyl\r\nimport numpy as np\r\n#from matplotlib.pylab import hist, show\r\nY = np.zeros((0, 1), dtype=np.float)\r\nYhist = np.zeros((0, 1), dtype=np.float)\r\nruta= ""SenalSensorSerial.txt""\r\n\r\ntry:\r\n    with open(ruta, ""r"") as out_file:\r\n        lines = out_file.readlines()\r\n\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n            Y = np.vstack([Y, Lectura[0]])\r\n\r\n        Indmin=1.1\r\n        Indmax=2\r\n        Yhist = np.histogram(Y, bins=10, range=(int(Indmin),int(Indmax)))\r\n        print(Yhist)\r\n        #Analisis de caracteristicas para identificar si es carro o camioneta\r\n\r\n        #plt.plot(Xhist, Ynew, marker=\'.\')  # c=\'b\')\r\n\r\n        pyl.figure()\r\n        pyl.title(""Histograma de toda la se\xc3\xb1al completa"")\r\n        pyl.hist(Y)\r\n        #pyl.show()\r\n        pyl.waitforbuttonpress()\r\n\r\n        plt.figure()\r\n        plt.title(""Histograma de toda la se\xc3\xb1al recortada"")\r\n        #plt.hist(Y)\r\n        plt.hist(Y, bins=10, range=(int(Indmin),int(Indmax)))\r\n        plt.xlim(1, 1.35)\r\n        # pyl.show()\r\n        plt.waitforbuttonpress()\r\n\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n\r\n\r\n\r\n'"
Python Code/ITS/Scripts apoyo/Osciloscopio.py,11,"b'#Eladio Jimenez 13-10699\r\n#Kheyter Chassaigne 13-10274\r\nimport cv2\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport serial\r\nimport time\r\n\r\ndef EscribirArchivo(f1):#, f2, f3, f4, d1, d2):\r\n\r\n    f1 = str(f1)#, \'UTF-8\')\r\n    #f2 = str(f2)#, \'UTF-8\')\r\n    #f3 = str(f3)#, \'UTF-8\')\r\n    #f4 = str(f4)#, \'UTF-8\')\r\n    #d1 = str(d1)#, \'UTF-8\')\r\n    #d2 = str(d2)#, \'UTF-8\')\r\n\r\n    out_file.write(f1 + "" "" + ""\\n"")\r\n\r\n    # Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\r\n    #out_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + d1 + "" "" + d2 + ""\\n"")\r\n\r\n\r\ndef DecodDig1(V):\r\n    #01000000 es 64\r\n\r\n    V = np.fromstring(V, dtype=np.int8)\r\n\r\n    d = V[0] & 64\r\n    return d >> 6 #Falta shiftear 6 valores a la derecha\r\n\r\ndef DecodDig2(V):\r\n    #00100000 es 32\r\n\r\n    V = np.fromstring(V, dtype=np.int8)\r\n\r\n    d = V[0] & 32\r\n    return d >> 5 #Falta shiftear 5 valores a la derecha\r\n\r\n\r\ndef DecodAnalog(V1,V2):\r\n\r\n    #print(\'V1\'+"" = ""+str(V1)+""  Su tipo es: "")\r\n    #print(type(V1))\r\n\r\n    a=int(V1)\r\n    b=int(V2)\r\n    #print(type(a_))\r\n    #a = np.fromstring(V1, dtype=np.uint8)\r\n    #print(\'a = \' + str(a)+ "" ""+ str(a[0]))\r\n    #b = np.fromstring(V2, dtype=np.int8)\r\n    #print(\'b = \'+str(b[0]))\r\n\r\n    a1 = a & 0x1F#31\r\n    b1 = b << 1\r\n    c = a1 << 8\r\n    d = b1 & 0x00FF#255\r\n    d = c | d\r\n\r\n    Analogico = d >> 1\r\n    print(Analogico)\r\n    #Analogico = ((2 ** 7) * (a[0] & 31) + b[0])\r\n\r\n    flotante = Analogico * 3.3 / ((2 ** 12) - 1)\r\n\r\n    return flotante\r\n\r\ndef DecodificadorSerial(Paquete):\r\n\r\n    #""Paquete"" es de 8 bytes, 1 byte por caracter\r\n\r\n    f1 = DecodAnalog(Paquete[0], Paquete[1])\r\n    #f2 = DecodAnalog(Paquete[2], Paquete[3])\r\n    #f3 = DecodAnalog(Paquete[4], Paquete[5])\r\n    #f4 = DecodAnalog(Paquete[6], Paquete[7])\r\n\r\n    #d1 = DecodDig1(Paquete[0])\r\n    #d2 = DecodDig2(Paquete[1])\r\n\r\n    #Escribir en archivo\r\n    #Escribir en un archivo todos los valores de los analogicos y digitales por columna\r\n    #Columnas: f1 f2 f3 f4 d1 d2\r\n    EscribirArchivo(f1)#, f2, f3, f4, d1, d2)\r\n\r\n#---------------------------------------------------------------------------------------\r\nplt.ion()\r\n\r\n#Inicializacion de vectores\r\n\r\n#Vector que obtendra todos los datos del serial\r\ncontenido = np.zeros((0, 1), dtype=np.float)\r\n\r\n#Vectores para leer las coordenadas del archivo\r\nX = np.zeros((0, 1), dtype=np.float)\r\nY = np.zeros((0, 1), dtype=np.float)\r\n\r\n#Leer por serial\r\nruta = ""SenalSensorSerial.txt""\r\n\r\nwith open(ruta,""w"") as out_file:\r\n    with serial.Serial(\'COM5\', 115200, timeout=1) as ser:\r\n        print(""El puerto serial usado es: "")\r\n        print(ser)\r\n        start_time = time.time()\r\n        cont=0\r\n        Time = 0\r\n        while( Time < 10 ):\r\n\r\n            stop_time = time.time()\r\n            Time = stop_time - start_time\r\n\r\n            if( ser.in_waiting > 1):\r\n\r\n                Datos = ser.read(size=3)#ser.in_waiting)\r\n                aux = str(Datos[0])+"" ""+str(Datos[1])+"" ""+str(Datos[2])\r\n                #print(type(Datos))\r\n                #StringDatos = str(Datos)\r\n                #print(type(StringDatos))\r\n                ##v_ = StringDatos.encode(\'utf-8\')\r\n\r\n                #print(aux)\r\n                #print(Datos)\r\n\r\n                #header = 241 con un solo analogico\r\n                Paquetes = aux.split("" "") #Cabecera ASCII 248\r\n                Paquetes.pop(0)\r\n                #print(Paquetes[0])+"" ""+Paquetes[1])\r\n                DecodificadorSerial(Paquetes)\r\n                #for i in range(len(Paquetes)):\r\n                    ##X = np.vstack([X, cont])\r\n                    #print(""Paquete:"" + str(i))\r\n                    #print(Paquetes[i])\r\n                    #print(""Decodificacion:"")\r\n                    #DecodificadorSerial(Paquetes[i])\r\n\r\n\r\n                    #cont = cont + 1\r\n#------------------------------------------\r\n\r\n#Leer Archivo\r\n\r\ntry:\r\n    with open(""SenalSensorSerial.txt"", ""r"") as out_file:\r\n        lines = out_file.readlines()\r\n\r\n        for line in lines:\r\n            Lectura = np.fromstring(line, dtype=float, sep=\' \')\r\n            Y = np.vstack([Y, Lectura[0]])\r\n\r\n\r\nexcept:\r\n    print(""Error al abrir el archivo"")\r\n    out_file.close()\r\n\r\nX=np.arange(0, len(Y))\r\nprint(len(X))\r\nprint(len(Y))\r\n\r\n#Graficar\r\nplt.figure(1)\r\nplt.clf()\r\nplt.plot(X, Y, marker = \'.\')# c=\'b\')\r\nplt.axis(\'tight\')\r\nplt.title(""Se\xc3\xb1al captada por los sensores"")\r\nplt.legend()\r\n#plt.show()\r\nplt.draw()\r\nplt.waitforbuttonpress()'"
Python Code/ITS/Scripts apoyo/OsiloscopioSerial.py,2,"b'#Eladio Jimenez 13-10699\r\n#Kheyter Chassaigne 13-10274\r\nimport cv2\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport serial\r\n\r\n#Ciclo{\r\n#Recibir por serial contenido\r\n#Decodificar\r\n#Graficar\r\n#Guardar en archivo\r\n#}\r\n\r\ndef Graficar(X, Y):\r\n\r\n    plt.plot(X, Y, c=\'b\')  # plt.plot(X, Y, marker=\'.\', c=\'b\', linewidth=0)#, label=""Se\xc3\xb1al captada"")\r\n    plt.axis(\'tight\')  # equal\')\r\n    plt.title(""Se\xc3\xb1al captada por los sensores"")\r\n    plt.legend()\r\n    plt.draw()\r\n    plt.waitforbuttonpress()\r\n\r\ndef EscribirArchivo(f1, f2, f3, f4, d1, d2):\r\n\r\n    f1 = str(f1, \'UTF-8\')\r\n    f2 = str(f2, \'UTF-8\')\r\n    f3 = str(f3, \'UTF-8\')\r\n    f4 = str(f4, \'UTF-8\')\r\n    d1 = str(d1, \'UTF-8\')\r\n    d2 = str(d2, \'UTF-8\')\r\n\r\n    # Se escriben en el archivo los vectores X y Y formando las coordenadas por filas\r\n    out_file.write(f1 + "" "" + f2 + "" "" + f3 + "" "" + f4 + "" "" + d1 + "" "" + d2 + ""\\n"")\r\n\r\n\r\ndef DecodDig1(V):\r\n    #01000000 es 64\r\n    d = V & 64\r\n    return d >> 6 #Falta shiftear 6 valores a la derecha\r\n\r\ndef DecodDig2(V):\r\n    #00100000 es 32\r\n    d = V & 32\r\n    return d >> 5 #Falta shiftear 5 valores a la derecha\r\n\r\n\r\ndef DecodAnalog(V1,V2):\r\n\r\n    a = np.fromstring(V1, dtype=np.int)\r\n    b = np.fromstring(V2, dtype=np.int)\r\n    Analogico = ((2 ** 7) * (a & 31) + b)\r\n\r\n    flotante = Analogico * 3.3 / ((2 ** 12) - 1)\r\n\r\n    return flotante\r\n\r\ndef DecodificadorSerial(Paquete, cont):\r\n\r\n    #""Paquete"" es de 8 bytes, 1 byte por caracter\r\n\r\n    f1 = DecodAnalog(Paquete[0], Paquete[1])\r\n    f2 = DecodAnalog(Paquete[2], Paquete[3])\r\n    f3 = DecodAnalog(Paquete[4], Paquete[5])\r\n    f4 = DecodAnalog(Paquete[6], Paquete[7])\r\n\r\n    d1 = DecodDig1(Paquete[0])\r\n    d2 = DecodDig2(Paquete[1])\r\n\r\n    #Escribir en archivo\r\n    EscribirArchivo(f1, f2, f3, f4, d1, d2)\r\n\r\n    X = cont\r\n    Y = f1 #Asigno el que quiera graficar\r\n\r\n    #Graficar\r\n    Graficar(X, Y)\r\n\r\n    #Escribir en un archivo todos los valores de los analogicos y digitales por columna\r\n    #Columnas: f1 f2 f3 f4 d1 d2\r\n\r\n\r\n\r\n\r\nplt.ion()\r\nplt.figure(1)\r\nplt.clf()\r\n\r\ncont = 0\r\n\r\nser = serial.Serial(\'COM5\')     # open serial port\r\nprint(ser.name)                 # check which port was really used\r\nwith open(""SenalSensorSerial.txt"",""w"") as out_file:\r\n    with serial.Serial(\'COM5\', 115200, timeout=1) as ser:\r\n\r\n        start_time = time.time()\r\n\r\n        while( time < 5 ):\r\n\r\n            stop_time = time.time()\r\n            time = stop_time - start_time\r\n\r\n            if( ser.in_waiting > 1):\r\n\r\n                Datos = ser.read(ser.in_waiting)\r\n                StringDatos = str(Datos, \'UTF-8\')\r\n                Paquetes = StringDatos.split(""\xc2\xba"")#Cabecera\r\n                for i in range(Paquetes):\r\n                    DecodificadorSerial(Paquetes[i], cont)\r\n                    cont++\r\n\r\n                #plt.waitforbuttonpress()\r\n'"
