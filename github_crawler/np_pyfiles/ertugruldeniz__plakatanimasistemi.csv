file_path,api_count,code
fonksiyonlar.py,2,"b'import cv2\n# Opencv K\xc3\xbct\xc3\xbcphanesini Projeme Dahil ediyorum.\nimport numpy as np\n#Numpy k\xc3\xbct\xc3\xbchanesi dahil etme i\xc5\x9flemi // Maskeleme i\xc5\x9flemlerinde kullan\xc4\xb1lacak\n\ndef resimAc(sec):\n    # Dosyadan resim okumak i\xc3\xa7in dosyam\xc4\xb1n yolunu seciyoruz.\n    img = cv2.imread(""Resim/"" + sec)\n    cv2.namedWindow(""1-Orjinal Resim"", cv2.WINDOW_NORMAL)\n    # resm g\xc3\xb6stermek i\xc3\xa7in bir pencere olu\xc5\x9fturma\n    cv2.imshow(""1-Orjinal Resim"", img)\n    # Ekranda resim g\xc3\xb6sterme i\xc5\x9flemi\n    return img\n\n# RGB uzay\xc4\xb1ndan Gri seviyeli resme d\xc3\xb6n\xc3\xbc\xc5\x9f i\xc5\x9flemi\ndef griyecevir(img):\n    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    cv2.namedWindow(""2-Griye Donusturme \xc4\xb0slemi"", cv2.WINDOW_NORMAL)\n    # Pencre Olu\xc5\x9ftur\n    cv2.imshow(""2-Griye Donusturme \xc4\xb0slemi"", img_gray)\n    # Resmi G\xc3\xb6ster\n    return img_gray\n\n#2. Gauss Filtreleme , Medyan ortalama ile ayn\xc4\xb1 i\xc5\x9fi yapan fonk.\n## g\xc3\xbcr\xc3\xbclt\xc3\xbc azalt\xc4\xb1c\xc4\xb1 yumu\xc5\x9fatma i\xc5\x9flemi\n#Her pikselin yo\xc4\x9funlu\xc4\x9funu, yak\xc4\xb1ndaki piksellerin yo\xc4\x9funluk ortalamas\xc4\xb1n\xc4\xb1n a\xc4\x9f\xc4\xb1rl\xc4\xb1kl\xc4\xb1 ortalamas\xc4\xb1 ile de\xc4\x9fi\xc5\x9ftirir\n#Di\xc4\x9fer \xc3\xbc\xc3\xa7 filtre kenarlar\xc4\xb1 p\xc3\xbcr\xc3\xbczs\xc3\xbcz hale getirirken sesleri kald\xc4\xb1r\xc4\xb1r, ancak bu filtre, kenar #koruyarak g\xc3\xb6r\xc3\xbcnt\xc3\xbcn\xc3\xbcn g\xc3\xbcr\xc3\xbclt\xc3\xbcy\xc3\xbc azaltabilir. \n\ndef gurultuAzalt(img_gray):\n    gurultuazalt = cv2.bilateralFilter(img_gray, 9, 75, 75)\n    cv2.namedWindow(""3-G\xc3\xbcr\xc3\xbclt\xc3\xbc Temizleme islemi"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""3-G\xc3\xbcr\xc3\xbclt\xc3\xbc Temizleme islemi"", gurultuazalt)\n    return  gurultuazalt\n\n# Daha iyi sonu\xc3\xa7 elde etmek i\xc3\xa7in histogram e\xc5\x9fitleme i\xc5\x9flemi yap\xc4\xb1yoruz\ndef histogramEsitleme(gurultuazalt):\n    histogram_e = cv2.equalizeHist(gurultuazalt)\n    cv2.namedWindow(""4-Histogram esitleme islemi"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""4-Histogram esitleme islemi"", histogram_e)\n    return histogram_e\n\n\n# A\xc3\xa7ma \xc4\xb0\xc5\x9flemi(Opening):\n#A\xc5\x9f\xc4\xb1nd\xc4\xb1rma ile k\xc3\xbc\xc3\xa7\xc3\xbck par\xc3\xa7alar yok edildikten sonra dilation ile g\xc3\xb6r\xc3\xbcnt\xc3\xbc tekrar geni\xc5\x9fletilerek k\xc3\xbc\xc3\xa7\xc3\xbck par\xc3\xa7alar\xc4\xb1n kaybolmas\xc4\xb1 sa\xc4\x9flan\xc4\xb1r.\n#g\xc3\xbcr\xc3\xbclt\xc3\xbclerin etkisi azalt\xc4\xb1l\xc4\xb1r.\ndef morfolojikIslem(h_esitleme):\n    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))\n    morfolojikresim = cv2.morphologyEx(h_esitleme, cv2.MORPH_OPEN, kernel, iterations=15)\n    cv2.namedWindow(""5-Morfolojik acilim"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""5-Morfolojik acilim"", morfolojikresim)\n    return  morfolojikresim\n\n\n#Resim \xc3\xbczerinde d\xc3\xbczensiz b\xc3\xb6l\xc3\xbcmleri dengelemek.\n# veya iki resim aras\xc4\xb1ndaki de\xc4\x9fi\xc5\x9fiklikleri saptamak i\xc3\xa7in g\xc3\xb6r\xc3\xbcnt\xc3\xbc \xc3\xa7\xc4\xb1karma kullan\xc4\xb1l\xc4\xb1r.(Image subtraction).\ndef goruntuCikarma(h_esitleme,morfolojik_resim):\n    # G\xc3\xb6r\xc3\xbcnt\xc3\xbc \xc3\xa7\xc4\xb1karma (Morph g\xc3\xb6r\xc3\xbcnt\xc3\xbcs\xc3\xbcn\xc3\xbc histogram e\xc5\x9fitlenmi\xc5\x9f g\xc3\xb6r\xc3\xbcnt\xc3\xbcs\xc3\xbcnden \xc3\xa7\xc4\xb1karmak)\n    gcikarilmisresim = cv2.subtract(h_esitleme, morfolojik_resim)\n    cv2.namedWindow(""6-Goruntu cikarma"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""6-Goruntu cikarma"", gcikarilmisresim)\n    return gcikarilmisresim\n\n\n\n#   g\xc3\xb6r\xc3\xbcnt\xc3\xbcdeki her pikseli siyah bir piksel ile de\xc4\x9fi\xc5\x9ftirir; Formul var ona g\xc3\xb6re yap\xc4\xb1yor\n# g\xc3\xb6r\xc3\xbcnt\xc3\xbc yo\xc4\x9funlu\xc4\x9fu bu sabitten b\xc3\xbcy\xc3\xbckse beyaz bir piksel\ndef goruntuEsikle(goruntucikarma):\n    ret, goruntuesikle = cv2.threshold(goruntucikarma, 0, 255, cv2.THRESH_OTSU)\n    cv2.namedWindow(""7-Goruntu Esikleme"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""7-Goruntu Esikleme"", goruntuesikle)\n    return goruntuesikle\n\n\n#G\xc3\xb6r\xc3\xbcnt\xc3\xbcn\xc3\xbcn kenarlar\xc4\xb1n\xc4\xb1 alg\xc4\xb1lamak i\xc3\xa7in canny edge kulland\xc4\xb1m\ndef cannyEdge(goruntuesikleme):\n    canny_goruntu = cv2.Canny(goruntuesikleme, 250, 255)\n    cv2.namedWindow(""8-Canny Edge"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""8-Canny Edge"", canny_goruntu)\n    canny_goruntu = cv2.convertScaleAbs(canny_goruntu)\n    return canny_goruntu\n\n\n#Dilatasyon operat\xc3\xb6r\xc3\xbc, girdi olarak iki veri alan\xc4\xb1n\xc4\xb1 al\xc4\xb1r.\n# Birincisi dilate edilecek olan resimdir. \xc4\xb0kincisi, yap\xc4\xb1land\xc4\xb1rma unsuru cekirdek\n#Dilate, B\xc3\xbcy\xc3\xbcmek, Geni\xc5\x9fletmek\ndef genisletmeIslemi(cannedge_goruntu):\n    # Kenarlar\xc4\xb1 g\xc3\xbc\xc3\xa7lendirmek i\xc3\xa7in genle\xc5\x9fme\n    cekirdek = np.ones((3, 3), np.uint8)\n    # Geni\xc5\x9fletme i\xc3\xa7in \xc3\xa7ekirdek olu\xc5\x9fturma\n    gen_goruntu = cv2.dilate(cannedge_goruntu, cekirdek, iterations=1)\n    cv2.namedWindow(""9-Genisletme"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""9-Genisletme"", gen_goruntu)\n    return gen_goruntu\n\n\ndef konturIslemi(img,gen_goruntu):\n    # Kenarlara dayanan resimdeki Konturlar\xc4\xb1 Bulma\n    new, contours, hierarchy = cv2.findContours(gen_goruntu, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]\n    # Rakamlar\xc4\xb1 alana g\xc3\xb6re s\xc4\xb1ralama, b\xc3\xb6ylece say\xc4\xb1 plakas\xc4\xb1 ilk 10 konturda olacak\n    screenCnt = None\n    # kontur dng i\xc5\x9flemi\n    for c in contours:\n        # yakla\xc5\x9f\xc4\xb1k \xc3\xa7izgi belirliyoruz\n        peri = cv2.arcLength(c, True)\n        approx = cv2.approxPolyDP(c, 0.06 * peri, True)  # % 6 hata ile yakla\xc5\x9f\xc4\xb1kl\xc4\xb1k\n        # Yakla\xc5\x9f\xc4\xb1k konturuzun d\xc3\xb6rt noktas\xc4\xb1 varsa, o zaman\n        # ----Plakam\xc4\xb1z\xc4\xb1 yakla\xc5\x9f\xc4\xb1k olarak buldu\xc4\x9fumuzu varsayabiliriz.\n\n        if len(approx) == 4:  # Konturu 4 k\xc3\xb6\xc5\x9feli olarak se\xc3\xa7iyoruz\n            screenCnt = approx\n            break\n    \t\n    final = cv2.drawContours(img, [screenCnt],-1, (9, 236, 255), 3)  # KAREN\xc4\xb0N RENG\xc4\xb0 VE \xc3\x87\xc4\xb0Z\xc4\xb0M\xc4\xb0\n    # Se\xc3\xa7ilen konturun orijinal resimde \xc3\xa7izilmesi\n    cv2.namedWindow(""10-Konturlu Goruntu"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""10-Konturlu Goruntu"", final)\n    return  screenCnt\n\n##Belirnenen alan d\xc4\xb1\xc5\x9f\xc4\xb1nda kalan yerleri maskeleme\ndef maskelemeIslemi(img_gray,img,screenCnt):\n    # Numara plakas\xc4\xb1 d\xc4\xb1\xc5\x9f\xc4\xb1ndaki k\xc4\xb1sm\xc4\xb1 maskeleme\n    mask = np.zeros(img_gray.shape, np.uint8)\n    yeni_goruntu = cv2.drawContours(mask, [screenCnt], 0, 255, -1, )\n    yeni_goruntu = cv2.bitwise_and(img, img, mask=mask)\n    cv2.namedWindow(""11-Plaka"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""11-Plaka"", yeni_goruntu)\n    return yeni_goruntu\n\ndef plakaIyilestir(yeni_goruntu):\n    # Daha fazla i\xc5\x9flem i\xc3\xa7in numara plakas\xc4\xb1n\xc4\xb1 geli\xc5\x9ftirmek i\xc3\xa7in histogram e\xc5\x9fitleme\n    y, cr, cb = cv2.split(cv2.cvtColor(yeni_goruntu, cv2.COLOR_RGB2YCrCb))\n    # G\xc3\xb6r\xc3\xbcnt\xc3\xbcy\xc3\xbc YCrCb modeline d\xc3\xb6n\xc3\xbc\xc5\x9ft\xc3\xbcrme ve 3 kanal\xc4\xb1 b\xc3\xb6lme\n    y = cv2.equalizeHist(y)\n    # Histogram e\xc5\x9fitleme uygulama\n    son_resim = cv2.cvtColor(cv2.merge([y, cr, cb]), cv2.COLOR_YCrCb2RGB)\n    # 3 kanal\xc4\xb1 birle\xc5\x9ftirme\n    #cv2.namedWindow(""Gelismis_plaka_no"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Gelismis_plaka_no"", son_resim)\n    return son_resim\n'"
fonksiyonlar1.py,2,"b'import cv2\n# Opencv K\xc3\xbct\xc3\xbcphanesini Projeme Dahil ediyorum.\nimport numpy as np\n#Numpy k\xc3\xbct\xc3\xbchanesi dahil etme i\xc5\x9flemi // Maskeleme i\xc5\x9flemlerinde kullan\xc4\xb1lacak\n\ndef resimAc(sec):\n    # Dosyadan resim okumak i\xc3\xa7in dosyam\xc4\xb1n yolunu seciyoruz.\n    img = cv2.imread(""Resim/"" + sec)\n    #cv2.namedWindow(""Orjinal Resim"", cv2.WINDOW_NORMAL)\n    # resm g\xc3\xb6stermek i\xc3\xa7in bir pencere olu\xc5\x9fturma\n    #cv2.imshow(""Orjinal Resim"", img)\n    # Ekranda resim g\xc3\xb6sterme i\xc5\x9flemi\n    return img\n\n# RGB uzay\xc4\xb1ndan Gri seviyeli resme d\xc3\xb6n\xc3\xbc\xc5\x9f i\xc5\x9flemi\ndef griyecevir(img):\n    img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    #cv2.namedWindow(""Gray Converted Image"", cv2.WINDOW_NORMAL)\n    # Pencre Olu\xc5\x9ftur\n    #cv2.imshow(""Gray Converted Image"", img_gray)\n    # Resmi G\xc3\xb6ster\n    return img_gray\n\n#2. Gauss Filtreleme , Medyan ortalama ile ayn\xc4\xb1 i\xc5\x9fi yapan fonk.\n## g\xc3\xbcr\xc3\xbclt\xc3\xbc azalt\xc4\xb1c\xc4\xb1 yumu\xc5\x9fatma i\xc5\x9flemi\n#Her pikselin yo\xc4\x9funlu\xc4\x9funu, yak\xc4\xb1ndaki piksellerin yo\xc4\x9funluk ortalamas\xc4\xb1n\xc4\xb1n a\xc4\x9f\xc4\xb1rl\xc4\xb1kl\xc4\xb1 ortalamas\xc4\xb1 ile de\xc4\x9fi\xc5\x9ftirir\n#Di\xc4\x9fer \xc3\xbc\xc3\xa7 filtre kenarlar\xc4\xb1 p\xc3\xbcr\xc3\xbczs\xc3\xbcz hale getirirken sesleri kald\xc4\xb1r\xc4\xb1r, ancak bu filtre, kenar #koruyarak g\xc3\xb6r\xc3\xbcnt\xc3\xbcn\xc3\xbcn g\xc3\xbcr\xc3\xbclt\xc3\xbcy\xc3\xbc azaltabilir. \n\ndef gurultuAzalt(img_gray):\n    gurultuazalt = cv2.bilateralFilter(img_gray, 9, 75, 75)\n    #cv2.namedWindow(""G\xc3\xbcr\xc3\xbclt\xc3\xbc Temizleme islemi"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""G\xc3\xbcr\xc3\xbclt\xc3\xbc Temizleme islemi"", gurultuazalt)\n    return  gurultuazalt\n\n# Daha iyi sonu\xc3\xa7 elde etmek i\xc3\xa7in histogram e\xc5\x9fitleme i\xc5\x9flemi yap\xc4\xb1yoruz\ndef histogramEsitleme(gurultuazalt):\n    histogram_e = cv2.equalizeHist(gurultuazalt)\n    #cv2.namedWindow(""Histogram esitleme islemi"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Histogram esitleme islemi"", histogram_e)\n    return histogram_e\n\n\n# A\xc3\xa7ma \xc4\xb0\xc5\x9flemi(Opening):\n#A\xc5\x9f\xc4\xb1nd\xc4\xb1rma ile k\xc3\xbc\xc3\xa7\xc3\xbck par\xc3\xa7alar yok edildikten sonra dilation ile g\xc3\xb6r\xc3\xbcnt\xc3\xbc tekrar geni\xc5\x9fletilerek k\xc3\xbc\xc3\xa7\xc3\xbck par\xc3\xa7alar\xc4\xb1n kaybolmas\xc4\xb1 sa\xc4\x9flan\xc4\xb1r.\n#g\xc3\xbcr\xc3\xbclt\xc3\xbclerin etkisi azalt\xc4\xb1l\xc4\xb1r.\ndef morfolojikIslem(h_esitleme):\n    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))\n    morfolojikresim = cv2.morphologyEx(h_esitleme, cv2.MORPH_OPEN, kernel, iterations=15)\n    #cv2.namedWindow(""Morfolojik acilim"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Morfolojik acilim"", morfolojikresim)\n    return  morfolojikresim\n\n\n#Resim \xc3\xbczerinde d\xc3\xbczensiz b\xc3\xb6l\xc3\xbcmleri dengelemek.\n# veya iki resim aras\xc4\xb1ndaki de\xc4\x9fi\xc5\x9fiklikleri saptamak i\xc3\xa7in g\xc3\xb6r\xc3\xbcnt\xc3\xbc \xc3\xa7\xc4\xb1karma kullan\xc4\xb1l\xc4\xb1r.(Image subtraction).\ndef goruntuCikarma(h_esitleme,morfolojik_resim):\n    # G\xc3\xb6r\xc3\xbcnt\xc3\xbc \xc3\xa7\xc4\xb1karma (Morph g\xc3\xb6r\xc3\xbcnt\xc3\xbcs\xc3\xbcn\xc3\xbc histogram e\xc5\x9fitlenmi\xc5\x9f g\xc3\xb6r\xc3\xbcnt\xc3\xbcs\xc3\xbcnden \xc3\xa7\xc4\xb1karmak)\n    gcikarilmisresim = cv2.subtract(h_esitleme, morfolojik_resim)\n    #cv2.namedWindow(""Goruntu cikarma"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Goruntu cikarma"", gcikarilmisresim)\n    return gcikarilmisresim\n\n\n\n#   g\xc3\xb6r\xc3\xbcnt\xc3\xbcdeki her pikseli siyah bir piksel ile de\xc4\x9fi\xc5\x9ftirir; Formul var ona g\xc3\xb6re yap\xc4\xb1yor\n# g\xc3\xb6r\xc3\xbcnt\xc3\xbc yo\xc4\x9funlu\xc4\x9fu bu sabitten b\xc3\xbcy\xc3\xbckse beyaz bir piksel\ndef goruntuEsikle(goruntucikarma):\n    ret, goruntuesikle = cv2.threshold(goruntucikarma, 0, 255, cv2.THRESH_OTSU)\n    #cv2.namedWindow(""Goruntu Esikleme"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Goruntu Esikleme"", goruntuesikle)\n    return goruntuesikle\n\n\n#G\xc3\xb6r\xc3\xbcnt\xc3\xbcn\xc3\xbcn kenarlar\xc4\xb1n\xc4\xb1 alg\xc4\xb1lamak i\xc3\xa7in canny edge kulland\xc4\xb1m\ndef cannyEdge(goruntuesikleme):\n    canny_goruntu = cv2.Canny(goruntuesikleme, 250, 255)\n    #cv2.namedWindow(""Canny Edge"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Canny Edge"", canny_goruntu)\n    canny_goruntu = cv2.convertScaleAbs(canny_goruntu)\n    return canny_goruntu\n\n\n#Dilatasyon operat\xc3\xb6r\xc3\xbc, girdi olarak iki veri alan\xc4\xb1n\xc4\xb1 al\xc4\xb1r.\n# Birincisi dilate edilecek olan resimdir. \xc4\xb0kincisi, yap\xc4\xb1land\xc4\xb1rma unsuru cekirdek\n#Dilate, B\xc3\xbcy\xc3\xbcmek, Geni\xc5\x9fletmek\ndef genisletmeIslemi(cannedge_goruntu):\n    # Kenarlar\xc4\xb1 g\xc3\xbc\xc3\xa7lendirmek i\xc3\xa7in genle\xc5\x9fme\n    cekirdek = np.ones((3, 3), np.uint8)\n    # Geni\xc5\x9fletme i\xc3\xa7in \xc3\xa7ekirdek olu\xc5\x9fturma\n    gen_goruntu = cv2.dilate(cannedge_goruntu, cekirdek, iterations=1)\n    #cv2.namedWindow(""Genisletme"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Genisletme"", gen_goruntu)\n    return gen_goruntu\n\n\ndef konturIslemi(img,gen_goruntu):\n    # Kenarlara dayanan resimdeki Konturlar\xc4\xb1 Bulma\n    new, contours, hierarchy = cv2.findContours(gen_goruntu, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]\n    # Rakamlar\xc4\xb1 alana g\xc3\xb6re s\xc4\xb1ralama, b\xc3\xb6ylece say\xc4\xb1 plakas\xc4\xb1 ilk 10 konturda olacak\n    screenCnt = None\n    # kontur dng i\xc5\x9flemi\n    for c in contours:\n        # yakla\xc5\x9f\xc4\xb1k \xc3\xa7izgi belirliyoruz\n        peri = cv2.arcLength(c, True)\n        approx = cv2.approxPolyDP(c, 0.06 * peri, True)  # % 6 hata ile yakla\xc5\x9f\xc4\xb1kl\xc4\xb1k\n        # Yakla\xc5\x9f\xc4\xb1k konturuzun d\xc3\xb6rt noktas\xc4\xb1 varsa, o zaman\n        # ----Plakam\xc4\xb1z\xc4\xb1 yakla\xc5\x9f\xc4\xb1k olarak buldu\xc4\x9fumuzu varsayabiliriz.\n\n        if len(approx) == 4:  # Konturu 4 k\xc3\xb6\xc5\x9feli olarak se\xc3\xa7iyoruz\n            screenCnt = approx\n            break\n    \t\n    final = cv2.drawContours(img, [screenCnt],-1, (9, 236, 255), 3)  # KAREN\xc4\xb0N RENG\xc4\xb0 VE \xc3\x87\xc4\xb0Z\xc4\xb0M\xc4\xb0\n    # Se\xc3\xa7ilen konturun orijinal resimde \xc3\xa7izilmesi\n    #cv2.namedWindow(""Konturlu Goruntu"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Konturlu Goruntu"", final)\n    return  screenCnt\n\n##Belirnenen alan d\xc4\xb1\xc5\x9f\xc4\xb1nda kalan yerleri maskeleme\ndef maskelemeIslemi(img_gray,img,screenCnt):\n    # Numara plakas\xc4\xb1 d\xc4\xb1\xc5\x9f\xc4\xb1ndaki k\xc4\xb1sm\xc4\xb1 maskeleme\n    mask = np.zeros(img_gray.shape, np.uint8)\n    yeni_goruntu = cv2.drawContours(mask, [screenCnt], 0, 255, -1, )\n    yeni_goruntu = cv2.bitwise_and(img, img, mask=mask)\n    cv2.namedWindow(""Son_resim"", cv2.WINDOW_NORMAL)\n    cv2.imshow(""Son_resim"", yeni_goruntu)\n    return yeni_goruntu\n\ndef plakaIyilestir(yeni_goruntu):\n    # Daha fazla i\xc5\x9flem i\xc3\xa7in numara plakas\xc4\xb1n\xc4\xb1 geli\xc5\x9ftirmek i\xc3\xa7in histogram e\xc5\x9fitleme\n    y, cr, cb = cv2.split(cv2.cvtColor(yeni_goruntu, cv2.COLOR_RGB2YCrCb))\n    # G\xc3\xb6r\xc3\xbcnt\xc3\xbcy\xc3\xbc YCrCb modeline d\xc3\xb6n\xc3\xbc\xc5\x9ft\xc3\xbcrme ve 3 kanal\xc4\xb1 b\xc3\xb6lme\n    y = cv2.equalizeHist(y)\n    # Histogram e\xc5\x9fitleme uygulama\n    son_resim = cv2.cvtColor(cv2.merge([y, cr, cb]), cv2.COLOR_YCrCb2RGB)\n    # 3 kanal\xc4\xb1 birle\xc5\x9ftirme\n    #cv2.namedWindow(""Gelismis_plaka_no"", cv2.WINDOW_NORMAL)\n    #cv2.imshow(""Gelismis_plaka_no"", son_resim)\n    return son_resim\n'"
islem.py,0,"b'import fonksiyonlar as fonk\n\ndef goruntu():\n\n    try:\n\n        sec=input(""Resim Ad\xc4\xb1:"")\n\n        if(sec!=""""): #Se\xc3\xa7ilen dosya ad\xc4\xb1 null de\xc4\x9filse\n\n\n            img=fonk.resimAc(sec)  #Resim A\xc3\xa7ma \xc4\xb0\xc5\x9flemi\n\n            img_gray=fonk.griyecevir(img)  #griye cevirme fonk\n\n\n            gurultuazalt=fonk.gurultuAzalt(img_gray) #Gurultu azaltma fonksiyonu\n\n\n            h_esitleme=fonk.histogramEsitleme(gurultuazalt) #Histogram E\xc5\x9fitleme\n\n\n            morfolojik_resim=fonk.morfolojikIslem(h_esitleme) #Morfolojik islem\n\n\n            goruntucikarma=fonk.goruntuCikarma(h_esitleme,morfolojik_resim) #Goruntu \xc3\x87\xc4\xb1karma \xc4\xb0\xc5\x9flemi\n\n\n            goruntuesikleme=fonk.goruntuEsikle(goruntucikarma)  ##Goruntu E\xc5\x9fikleme \xc4\xb0\xc5\x9flemi\n\n\n            cannedge_goruntu=fonk.cannyEdge(goruntuesikleme)     #Canny_Edge \xc4\xb0\xc5\x9flemi\n\n\n            gen_goruntu=fonk.genisletmeIslemi(cannedge_goruntu)  #Dilated (Geni\xc5\x9fletme \xc4\xb0\xc5\x9flemi)\n\n\n            screenCnt=fonk.konturIslemi(img,gen_goruntu)                   #Kontur \xc4\xb0\xc5\x9flemi\n\n\n            yeni_goruntu=fonk.maskelemeIslemi(img_gray,img,screenCnt)    #Maskeleme \xc4\xb0\xc5\x9flemi\n\n\n            fonk.plakaIyilestir(yeni_goruntu)   #Maskelenmi\xc5\x9f g\xc3\xb6r\xc3\xbcnt\xc3\xbc \xc3\xbczerinde i\xc5\x9flemler.\n\n\n            fonk.cv2.waitKey()  #Bir tu\xc5\x9fa basarsan pencereyi kapat\xc4\xb1r.\n\n    except :\n        print(""L\xc3\xbctfen Resim ad\xc4\xb1n\xc4\xb1 kontrol ediniz..."")\n'"
kamera.py,1,"b""def kamera():\n\n    import numpy as np\n    import cv2\n    cap = cv2.VideoCapture(0)  # harici bir kamerada i=0 yerine i=1,2,3..vs kullanabiliriz\n    while (True):\n\n        # \xc3\x87er\xc3\xa7eveler halinde g\xc3\xb6r\xc3\xbcnt\xc3\xbc yakalar\n        ret, frame = cap.read()\n\n        # \xc3\x9czerinde i\xc5\x9flem yapaca\xc4\x9f\xc4\xb1m\xc4\xb1z \xc3\xa7er\xc3\xa7eve buraya gelsin\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        ##G\xc3\xbcr\xc3\xbclt\xc3\xbc Temizleme islemi\n        noise_removal = cv2.bilateralFilter(gray, 9, 75, 75)\n        # Daha iyi sonu\xc3\xa7 elde etmek i\xc3\xa7in histogram e\xc5\x9fitleme yap\xc4\xb1ld\xc4\xb1\n        equal_histogram = cv2.equalizeHist(noise_removal)\n\n        # Dikd\xc3\xb6rtgen yap\xc4\xb1 eleman\xc4\xb1 ile morfolojik a\xc3\xa7\xc4\xb1l\xc4\xb1m\n        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))\n        morph_image = cv2.morphologyEx(equal_histogram, cv2.MORPH_OPEN, kernel, iterations=15)\n\n        # G\xc3\xb6r\xc3\xbcnt\xc3\xbc \xc3\xa7\xc4\xb1karma (Morph g\xc3\xb6r\xc3\xbcnt\xc3\xbcs\xc3\xbcn\xc3\xbc histogram e\xc5\x9fitlenmi\xc5\x9f g\xc3\xb6r\xc3\xbcnt\xc3\xbcs\xc3\xbcnden \xc3\xa7\xc4\xb1karmak)\n        sub_morp_image = cv2.subtract(equal_histogram, morph_image)\n\n        # G\xc3\xb6r\xc3\xbcnt\xc3\xbcy\xc3\xbc e\xc5\x9fikleme\n        ret, thresh_image = cv2.threshold(sub_morp_image, 0, 255, cv2.THRESH_OTSU)\n\n        # Canny Edge alg\xc4\xb1lama uygulanmas\xc4\xb1\n        canny_image = cv2.Canny(thresh_image, 250, 255)\n        # Display Image\n        canny_image = cv2.convertScaleAbs(canny_image)\n\n        # Kenarlar\xc4\xb1 g\xc3\xbc\xc3\xa7lendirmek i\xc3\xa7in genle\xc5\x9fme\n        kernel = np.ones((3, 3), np.uint8)\n\n        # Geni\xc5\x9fletme i\xc3\xa7in \xc3\xa7ekirdek olu\xc5\x9fturma\n        dilated_image = cv2.dilate(canny_image, kernel, iterations=1)\n\n        # Sonu\xc3\xa7 \xc3\x87er\xc3\xa7eveyi G\xc3\xb6r\xc3\xbcnt\xc3\xbcleme:\n        cv2.imshow('Son_Hal', dilated_image)\n\n        if cv2.waitKey(1) & 0xFF == ord('q'):  # q ile \xc3\xa7\xc4\xb1k\xc4\xb1\xc5\x9f yapabilirsiniz\n            break\n\n   \n\n    cap.release()\n    cv2.destroyAllWindows()\n"""
main.py,0,"b'import islem\n\nimport kamera\n\nprint(""""""        \n##############################################                                            # \n#                                            #\n#                                            #\n#----------- PLAKA TANIMA S\xc4\xb0STEM\xc4\xb0NE----------#\n#                                            #\n#                                            #\n##############################################"""""")\n\nprint(""Resimden plaka tan\xc4\xb1ma i\xc5\x9flemi yapmak i\xc3\xa7in 1\'e"")\nprint(""Kamera\'dan plaka tan\xc4\xb1ma i\xc5\x9flemi yapmak i\xc3\xa7in 2\'ye"")\n\ntry:\n    secim = int(input(""Se\xc3\xa7iminiz:""))\n\n    if secim == 1:\n        islem.goruntu()\n    elif secim == 2:\n        kamera.kamera()\n    else:\n        exit()\n\nexcept ValueError:\n    print(""Hatal\xc4\xb1 se\xc3\xa7im L\xc3\xbctfen men\xc3\xbcden se\xc3\xa7im yap\xc4\xb1n\xc4\xb1z."")\n\n'"
