file_path,api_count,code
setup.py,0,"b'from __future__ import absolute_import, with_statement, print_function, division\nfrom setuptools import setup, Extension, find_packages\nimport os\nimport numpy.distutils.misc_util\n\ndef readme(short=False):\n    with open(""README.rst"") as f:\n        if short:\n            return f.readlines()[1].strip()\n        else:\n            return f.read()\n\ndef get_version(short=False):\n    with open(""README.rst"") as f:\n        for line in f:\n            if "":Version:"" in line:\n                ver = line.split("":"")[2].strip()\n                if short:\n                    subver = ver.split(""."")\n                    return ""%s.%s"" % tuple(subver[:2])\n                else:\n                    return ver\n\npyoscode_module = Extension(\n    name=""_pyoscode"",\n    sources=[""pyoscode/_pyoscode.cpp""],\n    include_dirs=[\'include\'],\n    extra_compile_args=[\'-std=c++11\']\n    )\n\nsetup(\n    name=""pyoscode"",\n    version=""0.1.2"",\n    description=readme(short=True),\n    long_description=readme(),\n    url=""https://github.com/fruzsinaagocs/oscode"",\n    author=""Fruzsina Agocs, Will Handley, Mike Hobson, and Anthony Lasenby"",\n    author_email=""fa325@cam.ac.uk"",\n    packages=find_packages(),\n    install_requires=[""numpy"", ""scipy""],\n    extras_require={""plotting:"": ""matplotlib"",\n    ""docs"":[""sphinx"",""sphinx-rtd-theme"",""numpydoc""]},\n    setup_requires=[""pytest-runner""],\n    tests_require=[""pytest""],\n    include_package_data=True,\n    license=""oscode"",\n    ext_modules=[pyoscode_module],\n    include_dirs=numpy.distutils.misc_util.get_numpy_include_dirs(),\n    keywords=""PPS, cosmic inflation, cosmology, oscillatory, ODE"",\n    classifiers=[\n                \'Intended Audience :: Developers\',\n                \'Intended Audience :: Science/Research\',\n                \'Natural Language :: English\',\n                \'Programming Language :: Python :: 2.7\',\n                \'Programming Language :: Python :: 3.4\',\n                \'Programming Language :: Python :: 3.5\',\n                \'Programming Language :: Python :: 3.6\',\n                \'Programming Language :: Python :: 3.7\',\n                \'Topic :: Scientific/Engineering\',\n                \'Topic :: Scientific/Engineering :: Astronomy\',\n                \'Topic :: Scientific/Engineering :: Physics\',\n                \'Topic :: Scientific/Engineering :: Visualization\',\n                \'Topic :: Scientific/Engineering :: Mathematics\',\n                \'Operating System :: OS Independent\',\n    ],\n)\n\n'"
examples/airy.py,0,"b""import pyoscode\nimport numpy\nfrom scipy.special import airy\nfrom matplotlib import pyplot as plt\n\n# Define the frequency and friction term over the range of integration\nts = numpy.linspace(1,1000,5000)\nws = numpy.sqrt(ts)\ngs = numpy.zeros_like(ws)\n# Define the range of integration and the initial conditions\nti = 1.0\ntf = 1000.0\nx0 = airy(-ti)[0] + 1j*airy(-ti)[2]\ndx0 = -airy(-ti)[1] - 1j*airy(-ti)[3]\n# Solve the system\nsol = pyoscode.solve(ts, ws, gs, ti, tf, x0, dx0)\nt = numpy.asarray(sol['t'])\nx = numpy.asarray(sol['sol'])\ntypes = numpy.asarray(sol['types'])\n# Plot the solution\nana_t = numpy.linspace(1,35.0,1000)\nplt.plot(ana_t,[airy(-T)[0] for T in ana_t],label='true solution')\nplt.plot(t[types==0],x[types==0],'.',color='red',label='RK steps')\nplt.plot(t[types==1],x[types==1],'.',color='green',label='WKB steps')\nplt.legend()\nplt.xlim((1.0,35.0))\nplt.ylim((-1.0,1.0))\nplt.xlabel('t')\nplt.ylabel('Ai(-t)')\nplt.savefig('airy-example.png')\n\n"""
examples/plot_burst.py,3,"b'import matplotlib.pyplot as plt\nimport numpy as np\n\n# Code to plot results from solving the burst equation with oscode in C++,\n# written in ""output.txt""\nn = 100\nf = ""output.txt""\ndata = np.genfromtxt(f, delimiter=\', \')\nt = data[:,0]\nx = data[:,1]\ntypes = data[:,2]\n# Analytic solution (real part)\nts = np.linspace(-200,200,40000)\nxs = 100.0*(1+ts**2)**0.5/100.0*(np.cos(100.0*np.arctan(ts)))\nfig, ax = plt.subplots(1,2)\n\nax[0].plot(ts,xs,label=\'true solution\',lw=1)\nax[0].plot(t[types==1],x[types==1],\'.\',color=\'green\',label=\'WKB steps\')\nax[0].plot(t[types==0],x[types==0],\'.\',color=\'red\',label=\'RK steps\')\nax[0].set_xlabel(\'t\')\nax[0].set_ylabel(\'Re[x(t)]\')\n\nax[1].plot(ts,xs,label=\'true solution\',lw=1)\nax[1].plot(t[types==1],x[types==1],\'.\',color=\'green\',label=\'WKB steps\')\nax[1].plot(t[types==0],x[types==0],\'.\',color=\'red\',label=\'RK steps\')\nax[1].set_xlim((-2,2))\nax[1].set_ylim((-10,10))\nax[1].legend()\n\nplt.tight_layout()\nplt.show()\n#plt.savefig(\'burst-example.png\')\n'"
pyoscode/__init__.py,0,"b'import sys\nimport os\nimport _pyoscode\nimport numpy\n\ndef solve(ts, ws, gs, ti, tf, x0, dx0, logw=False, logg=False, order=3,\nrtol=1e-4, atol=0.0, h=None, full_output=""""):\n    """"""Solve a differential equation with the RKWKB method.\n    \n    Parameters\n    ----------\n    ts: numpy.ndarray [float] or list [float]\n       An array of real numbers representing the values of the independe\n       nt variable at which the frequency and friction term are evaluated. \n\n    ws: numpy.ndarray [complex] or list [complex]\n       An array-like object of real or complex \n       numbers, representing the values of frequency w at the points given in ts.\n\n    gs: numpy.ndarray [complex] or list [complex]\n        An array-like object of real or complex numbers representing the values\n        of the friction term g at the points given in ts.\n\n    ti,tf: float\n        Start and end of integration range.\n\n    x0, dx0: complex\n        Initial values of the dependent variable and its derivative.\n\n    logw, logg: boolean, optional\n        If true, the array of frequencies and friction values, respectively, will be\n        exponentiated (False, False by default).\n\n    order: int, optional\n        Order of WKB approximation to use, 3 (the highest value) by default.\n    \n    rtol, atol: float, optional\n        Relative and absolute tolerance of the solver, 1e-4 and 0 by default.\n        Note that atol at the moment is not implemented. \n\n    h: float, optional\n        Size of the initial step, 1 by default.\n\n    full_output: str , optional\n        If given, the return dictionary will be written to a file with the supplied\n        name.\n    \n    Returns\n    -------\n    A dictionary with the following keywords and values:\n\n        sol: list [complex]\n            A list containing the solution evaluated at timepoints listed under\n            the \'t\' keyword.\n\n        dsol: list [complex]\n            A list containint the first deriv ative of the solution evaluated at\n            timepoints listed under the \'t\' keyword.\n\n        t: list [float]\n            Contains the values of the independent variable where the solver\n            stepped, i.e. evaluated the solution at. This is not determined by\n            the user, rather these are the internal steps the solver naturally\n            takes when integrating.\n\n        types: list [float]\n            A list of True/False values corresponding to the step types the\n            solver chose at the timepoints listed under the keyword \'t\'. If\n            True, the step was WKB, and RK otherwise.\n     \n    """"""\n    # Set direction of integration if initial stepsize, h, not given\n    if h==None:\n        h = numpy.sign(tf - ti)\n        # Handle the case of ti = tf\n        if h==0:\n            h=1\n    \n    # Run oscode from module library\n    resdict = _pyoscode.solve(ts, ws, gs, ti, tf, x0, dx0, logw=logw, logg=logg,\n    order=order, rtol=rtol, atol=atol, h=h, full_output=full_output) \n    \n    return resdict\n'"
tests/test_arrays.py,13,"b'import numpy as np\nimport pyoscode\nimport pytest\n\ndef test_different_size():\n    # Different size arrays\n    ts = np.linspace(1,50,2000)\n    ws = np.linspace(1,50,2001)\n    gs = np.zeros_like(ws)\n    ti = 1.0\n    tf = 50.0\n    x0 = 1.0\n    dx0 = 0.0\n    with pytest.raises(TypeError):\n        pyoscode.solve(ts,ws,gs,ti,tf,x0,dx0)\n    return None;\n\ndef test_too_small():\n    # Same size arrays but too small\n    ts = np.linspace(1,50,1)\n    ws = np.linspace(1,50,1)\n    gs = np.zeros_like(ws)\n    ti = 1.0\n    tf = 50.0\n    x0 = 1.0\n    dx0 = 0.0\n    with pytest.raises(TypeError):\n        pyoscode.solve(ts,ws,gs,ti,tf,x0,dx0)\n    return None;\n\ndef test_outside_range_ti():\n    # ti outside ts\n    ts = np.linspace(1,50,1000)\n    ws = np.linspace(1,50,1000)\n    gs = np.zeros_like(ws)\n    ti = 0.5\n    tf = 50.0\n    x0 = 1.0\n    dx0 = 0.0\n    with pytest.raises(TypeError):\n        pyoscode.solve(ts,ws,gs,ti,tf,x0,dx0)\n    return None;\n\ndef test_outside_range_tf():\n    # ti outside ts\n    ts = np.linspace(1,50,1000)\n    ws = np.linspace(1,50,1000)\n    gs = np.zeros_like(ws)\n    ti = 1.0\n    tf = -5.0\n    x0 = 1.0\n    dx0 = 0.0\n    with pytest.raises(TypeError):\n        pyoscode.solve(ts,ws,gs,ti,tf,x0,dx0)\n    return None;\n\ndef test_not_monotonous():\n    # ts not strictly monotonous\n    ts = np.random.rand(1000)\n    ws = ts\n    gs = ws\n    ti = ts[0]\n    tf = ts[-1]\n    x0 = 1.0\n    dx0 = 0.0\n    with pytest.raises(TypeError):\n        pyoscode.solve(ts,ws,gs,ti,tf,x0,dx0)\n    return None;\n\n'"
pyoscode/docs/source/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Configuration file for the Sphinx documentation builder.\n#\n# This file does only contain a selection of the most common options. For a\n# full list see the documentation:\n# http://www.sphinx-doc.org/en/master/config\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\nsys.path.append(os.path.abspath(\'../../../\'))\n\n\n# -- Project information -----------------------------------------------------\n\nproject = u\'oscode\'\ncopyright = u\'2019, Fruzsina Agocs, Will Handley, Mike Hobson, and Anthony Lasenby\'\nauthor = u\'Fruzsina Agocs, Will Handley, Mike Hobson, and Anthony Lasenby\'\n\n# The short X.Y version\nversion = u\'\'\n# The full version, including alpha/beta/rc tags\nrelease = u\'1.0\'\n\n\n# -- General configuration ---------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.doctest\',\n    \'sphinx.ext.intersphinx\',\n    \'sphinx.ext.todo\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.mathjax\',\n    \'sphinx.ext.ifconfig\',\n    \'sphinx.ext.viewcode\',\n    \'sphinx.ext.githubpages\',\n    \'numpydoc\'\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = \'.rst\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [u\'_build\', \'Thumbs.db\', \'.DS_Store\']\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don\'t match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``[\'localtoc.html\', \'relations.html\', \'sourcelink.html\',\n# \'searchbox.html\']``.\n#\n# html_sidebars = {}\n\n\n# -- Options for HTMLHelp output ---------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'oscodedoc\'\n\n\n# -- Options for LaTeX output ------------------------------------------------\n\nlatex_elements = {\n    # The paper size (\'letterpaper\' or \'a4paper\').\n    #\n    # \'papersize\': \'letterpaper\',\n\n    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n    #\n    # \'pointsize\': \'10pt\',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # \'preamble\': \'\',\n\n    # Latex figure (float) alignment\n    #\n    # \'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, \'oscode.tex\', u\'oscode Documentation\',\n     u\'Fruzsina Agocs, Will Handley, Mike Hobson, and Anthony Lasenby\', \'manual\'),\n]\n\n\n# -- Options for manual page output ------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, \'oscode\', u\'oscode Documentation\',\n     [author], 1)\n]\n\n\n# -- Options for Texinfo output ----------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, \'oscode\', u\'oscode Documentation\',\n     author, \'oscode\', \'One line description of project.\',\n     \'Miscellaneous\'),\n]\n\n\n# -- Options for Epub output -------------------------------------------------\n\n# Bibliographic Dublin Core info.\nepub_title = project\nepub_author = author\nepub_publisher = author\nepub_copyright = copyright\n\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = \'\'\n\n# A unique identification for the text.\n#\n# epub_uid = \'\'\n\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = [\'search.html\']\n\n\n# -- Extension configuration -------------------------------------------------\n\n# -- Options for todo extension ----------------------------------------------\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = True\n\n# To mock out import of modules with C dependencies\nimport sys\nfrom mock import Mock as MagicMock\n\nclass Mock(MagicMock):\n    @classmethod\n    def __getattr__(cls,name):\n        return MagicMock()\n\nMOCK_MODULES = [""_pyoscode""]\nsys.modules.update((mod_name, Mock()) for mod_name in MOCK_MODULES)\n'"
