file_path,api_count,code
images/src/array3d.py,0,"b""from itertools import product\nfrom math import atan2, pi, sqrt\n\nfrom pyx import canvas, color, deco, path, text, trafo, unit\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\nunit.set(xscale=1.6, wscale=1.5)\n\nfrontplane = canvas.canvas()\nbackplane = canvas.canvas()\nxcells = 4\nycells = 3\nxshift = 0.8\nyshift = 1.2\ndist = 0.2\nmyred = color.rgb(0.8, 0, 0)\nmygreen = color.rgb(0, 0.6, 0)\nmyblue = color.rgb(0, 0, 0.8)\nfor c, start in ((frontplane, 0), (backplane, xcells*ycells)):\n    c.stroke(path.rect(0, 0, 4, 3),\n             [deco.filled([color.grey(1), color.transparency(0.2)])])\n    for x in range(1, xcells):\n        c.stroke(path.line(x, 0, x, ycells))\n    for y in range(1, ycells):\n        c.stroke(path.line(0, y, xcells, y))\n    for entry in range(xcells*ycells):\n        x = entry % 4\n        y = ycells - entry // 4\n        c.text(x+0.5, y-0.5, str(start+entry),\n               [text.halign.center, text.valign.middle])\nc = canvas.canvas()\nc.insert(backplane, [trafo.translate(xshift, yshift)])\nfor x, y in product((0, xcells), (0, ycells)):\n    c.stroke(path.line(x, y, x+xshift, y+yshift))\nc.insert(frontplane)\ndx = -dist*yshift/sqrt(xshift**2+yshift**2)\ndy = dist*xshift/sqrt(xshift**2+yshift**2)\nc.stroke(path.line(dx, ycells+dy, dx+xshift, ycells+dy+yshift),\n         [deco.earrow, myred])\nc.text(0.5*xshift+2*dx, ycells+0.5*yshift+2*dy, 'axis 0',\n       [text.halign.center, myred,\n        trafo.rotate(180/pi*atan2(yshift, xshift))])\nc.stroke(path.line(-dist, ycells, -dist, 0),\n         [deco.earrow, mygreen])\nc.text(-2*dist, 0.5*ycells, 'axis 1',\n       [text.halign.center, mygreen, trafo.rotate(90)])\nc.stroke(path.line(0, -dist, xcells, -dist),\n         [deco.earrow, myblue])\nc.text(0.5*xcells, -2*dist, 'axis 2',\n       [text.halign.center, text.valign.top, myblue])\nc.writePDFfile()\n"""
images/src/arraygraphics.py,3,"b'from itertools import product\nimport os\nimport sys\n\nimport numpy as np\nfrom pyx import canvas, color, path, text, unit\n\ndef arraygraphics(a, idxstr, title=True, xscale=1.0,\n               fgcolor=color.grey(1), bgcolor=color.hsb(0.9, 1, 0.5)):\n    """"""create a graphical representation of a two-dimensional array\n    \n    a         array containing the data to be shown\n    slicestr  string defining the slice to be highlighted\n    xscale    PyX scaling for text\n    fgcolor   color of highlighted data\n    bgcolor   color of highlighted cells\n\n    """"""\n    assert a.ndim == 2\n    n0, n1 = a.shape\n    highlighted = np.zeros_like(a, dtype=bool)\n    exec(""highlighted{} = True"".format(idxstr))\n    unit.set(xscale=xscale)\n    text.set(text.LatexRunner)\n    text.preamble(r\'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}\')\n    c = canvas.canvas()\n    for ny, nx in zip(*np.nonzero(highlighted)):\n        c.fill(path.rect(nx, n0-ny, 1, -1), [bgcolor])\n    c.stroke(path.rect(0, 0, n1, n0))\n    for nx in range(1, n1):\n        c.stroke(path.line(nx, 0, nx, n0))\n    for ny in range(1, n0):\n        c.stroke(path.line(0, ny, n1, ny))\n    textcentered = [text.halign.center, text.valign.middle]\n    textcentered_highlighted = textcentered+[fgcolor]\n    for nx in range(n1):\n        for ny in range(n0):\n            if highlighted[ny, nx]:\n                textattrs = textcentered_highlighted\n            else:\n                textattrs = textcentered\n            c.text(nx+0.5, n0-ny-0.5, a[ny, nx], textattrs)\n    if title:\n        textcolor = bgcolor\n    else:\n        textcolor = color.grey(1)\n    titlestr = r""\\Large a""+idxstr.replace(\'%\', \'\\%\')\n    c.text(0.5*n1, n0+0.4, titlestr, [text.halign.center, textcolor])\n    return c\n\nif __name__ == \'__main__\':\n    a = np.arange(40).reshape(5, 8)\n    basename = os.path.splitext(sys.argv[0])[0]\n    for nr, idxstr in enumerate((\'[2, -3]\', \'[:3, :5]\', \'[-3:, -3:]\',\n                                 \'[:, 3]\', \'[1, 3:6]\', \'[1::2, ::3]\',\n                                 \'[a % 3 == 0]\',\n                                 \'[(1, 1, 2, 2, 3, 3), (3, 4, 2, 5, 3, 4)]\')):\n        for title in (True, False):\n            filename = \'_\'.join([basename, str(nr)])\n            if not title:\n                filename = filename+\'_wo\'\n            arraygraphics(a, idxstr, title=title).writePDFfile(filename)\n'"
images/src/axes.py,0,"b""from pyx import canvas, color, deco, path, text, trafo, unit\n\ntext.set(text.LatexRunner)\ncolor0 = color.rgb(0.8, 0, 0)\ncolor1 = color.rgb(0, 0, 0.8)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\ntext.preamble(r'\\usepackage{color}')\ntext.preamble(r'\\definecolor{axis0}{rgb}{%s, %s, %s}' % (color0.r, color0.g, color0.b))\ntext.preamble(r'\\definecolor{axis1}{rgb}{%s, %s, %s}' % (color1.r, color1.g, color1.b))\nunit.set(xscale=1.6, wscale=1.5)\n\ndx = 2\ndy = 0.8\nc = canvas.canvas()\nfor nx in range(3):\n    for ny in range(3):\n        c.text(nx*dx, -ny*dy,\n               r'a[\\textcolor{axis0}{%s}, \\textcolor{axis1}{%s}]' % (ny, nx),\n               [text.halign.center])\nbox = c.bbox()\npd = 0.1\nxoff = box.left()-pd\npdx = 0.2\npdy = 0.5\nc.stroke(path.curve(xoff, box.top()+pd,\n                    xoff-pdx, box.top()-pdy,\n                    xoff-pdx, box.bottom()+pdy,\n                    xoff, box.bottom()-pd))\nxoff = box.right()+pd\nc.stroke(path.curve(xoff, box.top()+pd,\n                    xoff+pdx, box.top()-pdy,\n                    xoff+pdx, box.bottom()+pdy,\n                    xoff, box.bottom()-pd))\nx = box.left()-pdx-0.4\nc.stroke(path.line(x, box.top(), x, box.bottom()), [deco.earrow, color0])\nc.text(x-0.1, 0.5*(box.top()+box.bottom()), 'axis 0',\n       [text.halign.center, color0, trafo.rotate(90)])\ny = box.top()+0.4\nc.stroke(path.line(box.left(), y, box.right(), y), [deco.earrow, color1])\nc.text(0.5*(box.left()+box.right()), y+0.1, 'axis 1', [text.halign.center, color1])\nc.writePDFfile()\n"""
images/src/broadcast.py,0,"b""from pyx import canvas, color, deco, path, text, style, trafo, unit\n\ndef drawgrid(c, nxcells, nycells, yoff, gridcolor=color.grey(0), arange=None):\n    c.stroke(path.rect(0, yoff, nxcells, nycells), [gridcolor])\n    for nx in range(nxcells-1):\n        c.stroke(path.line(nx+1, yoff, nx+1, yoff+nycells), [gridcolor])\n    for ny in range(nycells-1):\n        c.stroke(path.line(0, yoff+ny+1, nxcells, yoff+ny+1), [gridcolor])\n    entry = '1'\n    if arange is not None:\n        for nx in range(nxcells):\n            for ny in range(nycells):\n                if arange:\n                    entry = str(4*ny+nx)\n                c.text(nx+0.5, 2.5-ny, entry,\n                       [text.halign.center, text.valign.middle, gridcolor])\n\ndef array34(arange, hlshape=None):\n    c = canvas.canvas()\n    if hlshape is None:\n        c.text(2, 3.3, 'shape=(3, 4)', [text.halign.center])\n    else:\n        c.text(2, 3.3, 'shape=%s' % repr(hlshape), [text.halign.center])\n    if hlshape is not None:\n        if len(hlshape) == 1:\n            hlshape = (1, hlshape[0])\n    if arange:\n        gridcolor = color.grey(0)\n    else:\n        gridcolor = color.grey(0.5)\n    if hlshape is None:\n        arange = True\n    elif (hlshape[0] in (1, 3)) and (hlshape[1] in (1, 4)):\n        arange = False\n    else:\n        arange = None\n    drawgrid(c, 4, 3, 0, gridcolor, arange=arange)\n    if hlshape is not None:\n        c.stroke(path.rect(0, 3, hlshape[1], -hlshape[0]),\n                 [deco.filled([color.rgb(1, 0.8, 0.4)])])\n        drawgrid(c, hlshape[1], hlshape[0], 3-hlshape[0], arange=False)\n    if arange is None:\n        alertcolor = color.rgb(0.6, 0, 0)\n        c.stroke(path.line(0, 0, 4, 3), [alertcolor, style.linewidth.Thick])\n        c.stroke(path.line(0, 3, 4, 0), [alertcolor, style.linewidth.Thick])\n    return c\n\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\nunit.set(xscale=1.6, wscale=1.5)\n\nxcells = 4\nycells = 3\ngridcolor = color.grey(0.5)\n\nc = canvas.canvas()\n\nc.insert(array34(True))\nc.insert(array34(False, (1,)), [trafo.translate(5, 0)])\nc.insert(array34(False, (4,)), [trafo.translate(10, 0)])\nc.insert(array34(False, (3,)), [trafo.translate(5, -4.5)])\nc.insert(array34(False, (3, 1)), [trafo.translate(10, -4.5)])\n\nc.writePDFfile()\n"""
images/src/diffusion.py,0,"b""from pyx import canvas, color, deco, path, text, unit\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\ntext.preamble(r'\\usepackage{nicefrac}')\nunit.set(xscale=1.4, wscale=1.2)\n\nc = canvas.canvas()\nr = 0.05\nfor n in range(1, 5):\n    c.stroke(path.circle(n, 0, r))\n    c.stroke(path.circle(-n, 0, r))\nc.stroke(path.circle(0, 0, r), [deco.filled([color.grey(0)])])\ndx = 0.1\ndy = 0.3\nc.stroke(path.curve(dx, dx, dy, dy, 1-dy, dy, 1-dx, dx), [deco.earrow])\nc.text(0.5, dy+0.1, '+1', [text.halign.center])\nc.stroke(path.curve(-dx, dx, -dy, dy, -1+dy, dy, -1+dx, dx), [deco.earrow])\nc.text(-0.5, dy+0.1, '-1', [text.halign.center])\nc.writePDFfile()\n"""
images/src/eratosthenes.py,0,"b""import os\nimport sys\n\nimport numpy as np\nfrom pyx import canvas, color, path, text, unit\n\ndef draw_grid():\n    c.stroke(path.rect(0, 0, 25, 2))\n    for n in range(24):\n        c.stroke(path.line(n+1, 0, n+1, 2))\n    c.stroke(path.line(0, 1, 25, 1))\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\nunit.set(xscale=1.7, wscale=2.5)\n\nc = canvas.canvas()\nc.fill(path.rect(0, 1, 2, 1), [color.grey(0.7)])\nc.text(0.5, 1.5, '0', [text.halign.center, text.valign.middle])\nc.text(1.5, 1.5, '1', [text.halign.center, text.valign.middle])\nbasename = os.path.splitext(sys.argv[0])[0]\nbaseprimes = [0, 2, 3, 5, 7]\nncolor = len(baseprimes)-1\ncancelled = set([0, 1])\nfor nr, baseprime in enumerate(baseprimes):\n    if nr == 0:\n        for n in range(2, 50):\n            x = n % 25\n            y = 2-(n//25)\n            c.text(x+0.5, y-0.5, str(n), [text.halign.center, text.valign.middle])\n    else:\n        cancelled.add(baseprime)\n        hvalue = 1.1*(nr-1)/(ncolor-1)\n        hvalue = hvalue-int(hvalue)\n        primecolor = color.hsb(hvalue, 1, 0.8)\n        x = baseprime % 25\n        y = 2-(baseprime//25)\n        c.fill(path.rect(x, y, 1, -1), [primecolor])\n        c.text(x+0.5, y-0.5, r'\\textbf{%s}' % baseprime,\n               [text.halign.center, text.valign.middle, color.grey(1)])\n        for n in range(baseprime**2, 50, baseprime):\n            if not n in cancelled:\n                cancelled.add(n)\n                x = n % 25\n                y = 2-(n//25)\n                c.stroke(path.line(x, y-1, x+1, y), [primecolor])\n                c.stroke(path.line(x, y, x+1, y-1), [primecolor])\n    draw_grid()\n    c.writePDFfile('%s_%s' % (basename, nr+1))\n\nfor n in range(50):\n    if not n in cancelled:\n        x = n % 25\n        y = 2-(n//25)\n        c.fill(path.rect(x, y, 1, -1), [color.hsb(0.15, 1, 0.8)])\n        c.text(x+0.5, y-0.5, r'\\textbf{%s}' % n,\n               [text.halign.center, text.valign.middle, color.grey(1)])\ndraw_grid()\nc.writePDFfile('%s_%s' % (basename, nr+2))\n\n"""
images/src/faces.py,3,"b""import numpy as np\nfrom scipy import misc\nimport matplotlib.pyplot as plt\n\nface = misc.face(gray=True)\n\nplt.imshow(face, cmap=plt.cm.gray)\nplt.savefig('face0.png')\nplt.clf()\n\nbwimage = np.zeros_like(face)\nbwimage[face > 128] = 255\nplt.imshow(bwimage, cmap=plt.cm.gray)\nplt.savefig('face1.png')\nplt.clf()\n\nframedface = np.zeros_like(face)\nframedface[31:-30, 31:-30] = face[31:-30, 31:-30]\nplt.imshow(framedface, cmap=plt.cm.gray)\nplt.savefig('face2.png')\nplt.clf()\n\ndarkface = 255*(face/255)**1.5\nplt.imshow(darkface, cmap=plt.cm.gray)\nplt.savefig('face3.png')\nplt.clf()\n\nsy, sx = face.shape\ny, x = np.ogrid[0:sy, 0:sx]\ncenterx, centery = (660, 300)\nmask = ((y - centery)**2 + (x - centerx)**2) > 230**2\nface[mask] = 0\nplt.imshow(face, cmap=plt.cm.gray)\nplt.savefig('face4.png')\n"""
images/src/fibonacci.py,5,"b""from collections import deque\n\nimport numpy as np\nfrom pyx import canvas, color, deco, path, text, unit\n\nclass Fibonacci():\n    def __init__(self, nsquares):\n        self.nsquares = nsquares\n        self.corners = deque([np.array([0, 0]), np.array([1, 0]),\n                              np.array([1, 1]), np.array([0, 1])])\n        self.counter = 1\n        self.initialize_pyx()\n        self.c = canvas.canvas()\n        self.draw()\n\n    def initialize_pyx(self):\n        text.set(text.LatexRunner)\n        text.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\n        unit.set(xscale=2.5, wscale=7)\n\n    def draw(self):\n        p = path.path(path.moveto(*self.corners[0]),\n                      path.lineto(*self.corners[1]),\n                      path.lineto(*self.corners[2]),\n                      path.lineto(*self.corners[3]),\n                      path.closepath())\n        fillcolor = color.hsb(2/3*(1-(self.counter-1)/(self.nsquares-1)), 0.2, 1)\n        self.c.stroke(p, [deco.filled([fillcolor])])\n        x, y = 0.5*(self.corners[0]+self.corners[2])\n        s = int(np.sum(np.abs(self.corners[1]-self.corners[0])))\n        self.c.text(x, y, str(s),\n                    [text.halign.center, text.valign.middle,\n                     text.size(min(s, 5))])\n        self.counter = self.counter+1\n\n    def draw_next(self):\n        corners_old = [a.copy() for a in self.corners]\n        self.corners[0] = corners_old[1].copy()\n        self.corners[3] = corners_old[2].copy()\n        rotate = np.array([[0, 1], [-1, 0]])\n        delta = np.dot(rotate, (self.corners[2]-self.corners[1]))\n        self.corners[1] = corners_old[1]+delta\n        self.corners[2] = corners_old[2]+delta\n        self.draw()\n        self.corners[0] = corners_old[0].copy()\n        self.corners[3] = corners_old[3].copy()\n        self.corners.rotate(-1)\n\n    def writePDF(self):\n        for n in range(self.nsquares-1):\n            self.draw_next()\n        self.c.writePDFfile()\n\nFibonacci(8).writePDF()\n"""
images/src/listindexing1.py,0,"b'from pyx import canvas, color, deco, path, style, text, unit\n\ndef draw_square(x, y, kante):\n    c.stroke(path.rect(x, y, kante, kante), [style.linewidth.thick, deco.filled([color.grey(1)])])\n\ntext.set(text.LatexRunner)\ntext.preamble(r\'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}\')\nunit.set(xscale=1.6, wscale=1.2)\nc = canvas.canvas()\n\nkante = 1\ndist = 0.2\nnrboxes = 8\n\nboxcolor = color.rgb(1, 0.7, 0.4)\nc.fill(path.rect(-0.3*dist, -0.2, 5*kante+4.6*dist, kante+0.4), [boxcolor])\nc.fill(path.rect(-0.3*dist+5*(kante+dist), -0.2, 3*kante+2.6*dist, kante+0.4), [boxcolor])\n\nfor n in range(nrboxes):\n    x = n*(kante+dist)\n    draw_square(x, 0, kante)\n    c.text(x+0.5*kante, 0.5*kante, str(n), [text.halign.center, text.valign.middle])\n\nfor n in range(nrboxes+1):\n    x = n*(kante+dist)\n    c.stroke(path.line(x-0.5*dist, -0.5, x-0.5*dist, -0.1), [deco.earrow])\n    c.text(x-0.5*dist, -0.7, str(n), [text.halign.center, text.valign.top])\n\nc.text(2.5*kante+2*dist, kante+0.4, ""a[0:5]"", [text.halign.center])\nc.text(6.5*kante+6*dist, kante+0.4, ""a[5:8]"", [text.halign.center])\n\nc.writePDFfile()\n'"
images/src/listindexing2.py,0,"b'from pyx import canvas, color, deco, path, style, text, unit\n\ndef draw_square(x, y, kante):\n    c.fill(path.rect(x, y, kante, kante), [color.grey(1)])\n    c.stroke(path.line(x, y, x+kante, y+kante), [style.linewidth.thick, color.grey(0.5)])\n    c.stroke(path.rect(x, y, kante, kante), [style.linewidth.thick])\n\ntext.set(text.LatexRunner)\ntext.preamble(r\'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}\')\nunit.set(xscale=1.2, wscale=1.2)\nc = canvas.canvas()\n\nkante = 1\ndist = 0.15\npunkte = 1\nnrboxes = 3\nnrpoints = 3\n\nldist = 0.05\nboxcolor = color.rgb(1, 0.7, 0.4)\nc.fill(path.rect(-0.3*dist, -0.2, 7*kante+6.6*dist, kante+0.4), [boxcolor])\nfor n in range(nrboxes):\n    x = n*(kante+dist)\n    draw_square(x, 0, kante)\n    c.text(x+ldist*kante, (1-ldist)*kante, n, [text.valign.top])\n    nstr = """"\n    if n>0: nstr = ""%+i"" % n\n    c.text(x+(1-0.5*ldist)*kante, ldist*kante, \'-N\'+nstr, [text.halign.right])\n    x = (n+nrboxes)*(kante+dist)+dist+punkte\n    draw_square(x, 0, kante)\n    c.text(x+ldist*kante, (1-ldist)*kante, \'N\'+str(n-3), [text.valign.top])\n    c.text(x+(1-0.5*ldist)*kante, ldist*kante, str(n-3), [text.halign.right])\n\nxoffset = nrboxes*(kante+dist)\nfor n in range(nrpoints):\n    c.fill(path.circle(xoffset+(0.5+n)*punkte/nrpoints, 0.5*kante, 0.05*kante))\n\nc.writePDFfile()\n'"
images/src/mandelbrot.py,2,"b""# image needs to be cropped before including it into\n# the presentation\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnpts = 1500\nnthres = 50\nniter = 1000\nxmin = -2\nxmax = 1\nymin = -1.5\nymax = 1.5\n\ny, x = np.ogrid[ymin:ymax:npts*1j, xmin:xmax:npts*1j]\nc = x+1j*y\nz = c\nfor j in range(niter):\n    z = z**2+c\nimdata = (np.abs(z) < nthres)\nplt.imshow(imdata, cmap='gray',\n           extent=(xmin, xmax, ymin, ymax), origin='bottom')\nplt.xlabel('Re(c)', fontsize=20)\nplt.ylabel('Im(c)', fontsize=20)\nplt.savefig('mandelbrot.png', dpi=200)\n"""
images/src/mandelbrot_detail.py,7,"b""import numpy as np\nimport matplotlib.pyplot as plt\n\nnpts = 1500\nnthres = 5000\nniter = 2000\nxmin = -1.74892\nxmax = -1.74887\nymin = 0.0006\nymax = 0.00065\n\ny, x = np.ogrid[ymin:ymax:npts*1j, xmin:xmax:npts*1j]\nc = x+1j*y\nz = np.ma.zeros((npts, npts), dtype=complex)\nimdata = np.ma.zeros((npts, npts), dtype=float)\nfor j in range(niter):\n    z = z**2+c\n    imdata[np.abs(z) > nthres] = imdata[np.abs(z) > nthres]+j\n    z[np.abs(z) > nthres] = np.ma.masked\n    imdata[np.abs(z) > nthres] = np.ma.masked\nimdata.mask = False\nimdata = np.sqrt(imdata)\nplt.imsave('mandelbrot_detail.png', imdata, cmap='afmhot')\n"""
images/src/matrixmult.py,3,"b""from itertools import product\n\nimport numpy as np\nfrom pyx import canvas, color, deco, path, text, trafo, unit\n\ndef matrix_22(m, dx=0.5, dy=0.5, pd=0.1, pdx=0.1, pdy=0.3):\n    c = canvas.canvas()\n    for nx in range(2):\n        for ny in range(2):\n            c.text(nx*dx, -ny*dy, str(m[ny, nx]), [text.halign.center])\n    box = c.bbox()\n    xoff = box.left()-pd\n    c.stroke(path.curve(xoff, box.top()+pd,\n                        xoff-pdx, box.top()-pdy,\n                        xoff-pdx, box.bottom()+pdy,\n                        xoff, box.bottom()-pd))\n    xoff = box.right()+pd\n    c.stroke(path.curve(xoff, box.top()+pd,\n                        xoff+pdx, box.top()-pdy,\n                        xoff+pdx, box.bottom()+pdy,\n                        xoff, box.bottom()-pd))\n    return c\n\n\ntext.set(text.LatexRunner)\ncolor0 = color.rgb(0.8, 0, 0)\ncolor1 = color.rgb(0, 0, 0.8)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\ntext.preamble(r'\\usepackage{color}')\ntext.preamble(r'\\definecolor{axis0}{rgb}{%s, %s, %s}' % (color0.r, color0.g, color0.b))\ntext.preamble(r'\\definecolor{axis1}{rgb}{%s, %s, %s}' % (color1.r, color1.g, color1.b))\nunit.set(xscale=1.5, wscale=1.5)\n\nc = canvas.canvas()\nm1 = np.arange(4).reshape(2, 2)\nc_m1 = matrix_22(m1)\nm2 = np.arange(4, 8).reshape(2, 2)\nc_m2 = matrix_22(m2)\nm3 = np.dot(m1, m2)\nc_m3 = matrix_22(m3, dx=0.7)\nc.insert(c_m1)\nc.insert(c_m2, [trafo.translate(c_m1.bbox().width()+0.1, 0)])\nend  = c_m1.bbox().right()+c_m2.bbox().width()+0.1\ndist2 = 0.6\nc.insert(c_m3, [trafo.translate(end+dist2-c_m3.bbox().left(), 0)])\nycenter = 0.5*(c_m1.bbox().top()+c_m1.bbox().bottom())\nfor dy in (-0.05, 0.05):\n    c.stroke(path.line(end+0.15, ycenter+dy,\n                       end+dist2-0.15, ycenter+dy))\n\nc_tot = canvas.canvas()\nfor y in range(4):\n    c_tot.insert(c, [trafo.translate(0, 1.5*y)])\n\ndx = 0.2\ncolorprops = [color.rgb(0.8, 0.2, 0), color.transparency(0.2)]\narrowprops = [deco.earrow]+colorprops\nfor lineno, (ny, nx) in enumerate(product((0, 1), repeat=2)):\n    yoff = 1.5*(3-lineno)+0.17\n    c_tot.stroke(path.line(-dx, yoff-0.5*ny, 0.5+dx, yoff-0.5*ny), arrowprops)\n    xoff = c_m1.bbox().width()+0.1+0.5*nx\n    c_tot.stroke(path.line(xoff, yoff+0.2, xoff, yoff-0.7), arrowprops)\n    wd = 0.55\n    ht = 0.45\n    xoff = end+dist2-c_m3.bbox().left()+0.7*nx\n    c_tot.stroke(path.rect(xoff-0.5*wd, yoff-0.5*ny-0.5*ht, wd, ht), colorprops)\nc_tot.writePDFfile()\n"""
images/src/polyfit.py,4,"b""import numpy as np\nimport numpy.polynomial.polynomial as P\n\nfrom pyx import color, deco, graph, style, text, unit\n\nnp.random.seed(987)\nx = np.pi*np.linspace(0, 1, 100)\ny = np.sin(x)+0.1*np.random.rand(100)\nfit = P.Polynomial(P.polyfit(x, y, 2))\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\nunit.set(xscale=1.2)\n\ng = graph.graphxy(width=8,\n        x=graph.axis.lin(title=r'\\Large $x$', divisor=np.pi,\n            texter=graph.axis.texter.rational(suffix=r'\\pi')),\n        y=graph.axis.lin(min=0, max=1.1, title=r'\\Large $y$',\n            parter=graph.axis.parter.lin(tickdists=[0.2])))\norigdata = list(zip(x, y))\nsymbolattrs = [deco.filled, color.hsb(0.6, 1, 0.7)]\ng.plot(graph.data.points(origdata, x=1, y=2),\n       [graph.style.symbol(graph.style.symbol.circle, 0.07,\n                           symbolattrs=symbolattrs)])\nfitdata = list(zip(x, fit(x)))\nlineattrs = [color.hsb(0.05, 1, 0.7), style.linewidth.THick]\ng.plot(graph.data.points(fitdata, x=1, y=2),\n       [graph.style.line(lineattrs=lineattrs)])\ng.writePDFfile()\n"""
images/src/random_pi.py,0,"b""from pyx import canvas, color, path, text, unit\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\ntext.preamble(r'\\usepackage{nicefrac}')\nunit.set(xscale=1.6, wscale=1.2)\n\nc = canvas.canvas()\nside = 4\nlightcolor = color.hsb(0.65, 0.2, 1)\ndarkcolor = color.hsb(0.65, 1, 1)\nc.fill(path.path(path.moveto(0, 0),\n                 path.lineto(side, 0),\n                 path.arc(0, 0, side, 0, 90),\n                 path.closepath()), [lightcolor])\nc.stroke(path.path(path.arc(0, 0, side, 0, 90)), [darkcolor])\nc.stroke(path.rect(0, 0, side, side))\nticklen = 0.15\nfor tick in (0, 1):\n    dist = tick*side\n    c.stroke(path.line(dist, 0, dist, -ticklen))\n    c.text(dist, -1.5*ticklen, str(tick), [text.halign.center, text.valign.top])\n    c.stroke(path.line(0, dist, -ticklen, dist))\n    c.text(-1.5*ticklen, dist, str(tick), [text.halign.right, text.valign.middle])\nc.text(0.4*side, 0.4*side, r'\\huge$\\nicefrac{\\pi}{4}$',\n       [text.halign.center, text.valign.middle, darkcolor])\nc.writePDFfile()\n"""
images/src/rgbarray.py,0,"b'from pyx import canvas, color, graph, path, style, unit\n\ndef frontplane(z, nxmax, mymax, facecolor, edgecolor, trans):\n    p = path.path(path.moveto(*projector(0, z, 0)),\n                  path.lineto(*projector(nxmax, z, 0)),\n                  path.lineto(*projector(nxmax, z, nymax)),\n                  path.lineto(*projector(0, z, nymax)),\n                  path.closepath())\n    c.fill(p, [facecolor, color.transparency(trans)])\n    c.stroke(p, [edgecolor])\n    for nx in range(1, nxmax):\n        x0, y0 = projector(nx, z, 0)\n        x1, y1 = projector(nx, z, nymax)\n        c.stroke(path.line(x0, y0, x1, y1), [edgecolor])\n    for ny in range(1, nymax):\n        x0, y0 = projector(0, z, ny)\n        x1, y1 = projector(nxmax, z, ny)\n        c.stroke(path.line(x0, y0, x1, y1), [edgecolor])\n\ndef corner(nx, ny, z, facecolor, edgecolor, trans, xdir, ydir):\n    if xdir:\n        p = path.path(path.moveto(*projector(nx, z, ny)),\n                      path.lineto(*projector(nx-1, z, ny)),\n                      path.lineto(*projector(nx-1, z+1, ny)),\n                      path.lineto(*projector(nx, z+1, ny)),\n                      path.closepath())\n        c.fill(p, [facecolor, color.transparency(trans)])\n    if ydir:\n        p = path.path(path.moveto(*projector(nx, z, ny)),\n                      path.lineto(*projector(nx, z, ny+1)),\n                      path.lineto(*projector(nx, z+1, ny+1)),\n                      path.lineto(*projector(nx, z+1, ny)),\n                      path.closepath())\n        c.fill(p, [facecolor, color.transparency(trans)])\n    x0, y0 = projector(nx, z, ny)\n    x1, y1 = projector(nx, z+1, ny)\n    c.stroke(path.line(x0, y0, x1, y1), [edgecolor])\n\nprojector = graph.graphxyz.central(60, -50, 25).point\n\nunit.set(wscale=1.5)\nc = canvas.canvas()\nnxmax = 7\nnymax = 5\ntrans = 0.4\nedgecolors = (color.rgb(0, 0, 0.8),\n              color.rgb(0, 0.6, 0),\n              color.rgb(0.8, 0, 0))\nw = 0.3\nfacecolors = (color.rgb(w, w, 1),\n              color.rgb(w, 1, w),\n              color.rgb(1, w, w))\nfor nplane, (edgecolor, facecolor) in enumerate(zip(edgecolors, facecolors)):\n    zoff = 1.04*(2-nplane)\n    frontplane(zoff+1, nxmax, nymax, facecolor, edgecolor, trans)\n    for nx in range(nxmax, -1, -1):\n        for ny in range(nymax+1):\n            corner(nx, ny, zoff, facecolor, edgecolor, trans,\n                   nx != 0, ny != nymax)\n    frontplane(zoff, nxmax, nymax, facecolor, edgecolor, trans)\n    x0, y0 = projector(nxmax, zoff+1, nymax)\n    x1, y1 = projector(0, zoff+1, nymax)\n    x2, y2 = projector(0, zoff+1, 0)\n    p = path.path(path.moveto(x0, y0), path.lineto(x1, y1),\n                  path.lineto(x2, y2))\n    c.stroke(p, [edgecolor])\nc.writePDFfile()\n'"
images/src/strides.py,0,"b""import sys\nimport os.path\n\nfrom pyx import canvas, color, deco, path, text, unit\n\ndef make_stride_figure(c, lowerstride, uperstride=1, nrentries=6):\n    ht = 0.5\n    wd = 2\n    dist = 0.2\n    textcolor = color.hsb(0.02, 1, 0.6)\n    for n in range(nrentries):\n        x = n*(wd+dist)\n        c.stroke(path.rect(x, 0, wd, ht))\n        c.text(x+0.5*wd, 0.5*ht, str(n), [text.halign.center, text.valign.middle])\n\n    for n in range(nrentries-1):\n        x = n*(wd+dist)\n        c.stroke(path.curve(x-dist/3, ht+0.5*dist,\n                            x+0.3*wd, ht+3*dist,\n                            x+0.7*wd, ht+3*dist,\n                            x+wd+dist/3, ht+0.5*dist),\n                 [deco.earrow.large])\n        c.text(x+0.5*wd, ht+3.2*dist, r'\\Large 8', [text.halign.center, textcolor])\n\n    if lowerstride:\n        for n in range((nrentries-1)//lowerstride):\n            x = n*lowerstride*(wd+dist)\n            c.stroke(path.curve(x-dist/3, -0.5*dist,\n                                x+0.5*wd, -5*dist,\n                                x+(lowerstride-0.5)*wd+lowerstride*dist, -5*dist,\n                                x+lowerstride*wd+(lowerstride-0.7)*dist, -0.5*dist),\n                     [deco.earrow.large])\n            c.text(x+0.5*lowerstride*wd+dist,-5.2*dist, r'\\Large %i' % (lowerstride*8),\n                   [text.halign.center, text.valign.top, textcolor])\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage[sfdefault,scaled=.85,lining]{FiraSans}\\usepackage{newtxsf}')\nunit.set(xscale=1.6, wscale=1.5)\n\nfor stride in (0, 2, 3):\n    c = canvas.canvas()\n    make_stride_figure(c, stride)\n    c.writePDFfile('_'.join([os.path.splitext(sys.argv[0])[0], str(stride)]))\n"""
images/src/yourturn.py,3,"b'from itertools import product\nfrom math import pi\n\nimport numpy as np\nimport bpy\n\nnpts = 100\nradius = 3\nheight = 0.2\nphi = np.linspace(0, pi, npts)\n\nlowervertices = [(x, y, -height) for x, y in zip(radius*np.cos(phi), radius*np.sin(phi))]\nuppervertices = [(x, y, height) for x, y in zip(radius*np.cos(phi), radius*np.sin(phi))]\narrowvertices = [(radius, 0, 2*height), (radius, 0, -2*height), (radius, -6*height, 0)]\nvertices = lowervertices + uppervertices + arrowvertices\noffset = len(vertices)\n\nloweredges = [(n, n+1) for n in range(npts-1)]\nupperedges = [(n, n+1) for n in range(npts, 2*npts-1)]\nverticaledges = [(n, n+npts) for n in range(npts)]\narrowedges = [(offset-1, offset-2), (offset-2, offset-3), (offset-3, offset-1)]\nedges = loweredges + upperedges + verticaledges + arrowedges\n\ncylinderfaces = [(n, n+1, n+1+npts, n+npts) for n in range(npts-1)]\narrowfaces = [(offset-3, offset-2, offset-1)]\nfaces = cylinderfaces + arrowfaces\n\nmesh = bpy.data.meshes.new(name=\'Cylinder Arrow Mesh\')\nmesh.from_pydata(vertices, edges, faces)\nobj = bpy.data.objects.new(\'Cylinder Arrow\', mesh)\nobj.location = bpy.context.scene.cursor_location\n\nmat = bpy.data.materials.new(name=\'Cylinder Arrow Material\')\nmat.diffuse_color = (1, 0.6, 0.0)\nobj.active_material = mat\n\nscene = bpy.context.scene\nscene.objects.link(obj)\nscene.objects.active = obj\n\nlamp = bpy.data.lamps.new(name=""Arrow Lamp"", type=\'POINT\')\nlamp_object = bpy.data.objects.new(name=""Arrow Lamp"", object_data=lamp)\nscene.objects.link(lamp_object)\nlamp_object.location = (5, -0.4, 0.2)\nlamp_object.select = True\nscene.objects.active = lamp_object\n\ncam = bpy.data.cameras.new(""Camera"")\ncam_object = bpy.data.objects.new(""Camera"", cam)\ncam_object.location = (-2.0, -1.0, 2.0)\nscene.objects.link(cam_object)\n\nworld = scene.world\nworld.horizon_color = (1, 1, 1)\n'"
