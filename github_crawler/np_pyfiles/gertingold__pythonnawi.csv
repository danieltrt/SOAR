file_path,api_count,code
manuskript/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Python f\xc3\xbcr Naturwissenschaftler documentation build configuration file, created by\n# sphinx-quickstart on Thu Oct  6 18:06:19 2016.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport sys\nimport os\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#sys.path.insert(0, os.path.abspath(\'.\'))\nsys.path.append(os.path.abspath(\'sphinxext\'))\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\nneeds_sphinx = \'1.5\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    \'sphinx.ext.doctest\',\n    \'sphinx.ext.mathjax\',\n    \'ipython_console_highlighting\',\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix of source filenames.\nsource_suffix = \'.rst\'\n\n# The encoding of source files.\nsource_encoding = \'utf-8\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# General information about the project.\nproject = u\'Python f\xc3\xbcr Naturwissenschaftler\'\ncopyright = u\'2012-2017, Gert-Ludwig Ingold, Lizenz: CC BY 4.0 International\'\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = \'2017\'\n# The full version, including alpha/beta/rc tags.\nrelease = \'2017beta\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\nlanguage = \'de\'\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = \'\'\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = \'%B %d, %Y\'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = [\'_build\']\n\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n\n# If true, \'()\' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n# If true, keep warnings as ""system message"" paragraphs in the built documents.\n#keep_warnings = False\n\nnumfig = True\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = \'haiku\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# ""<project> v<release> documentation"".\nhtml_title = u\'Python f\xc3\xbcr Naturwissenschaftler\'\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = u\'Python f\xc3\xbcr Naturwissenschaftler\'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n\n# If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = \'%b %d, %Y\'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\n#html_domain_indices = True\n\n# If false, no index is generated.\nhtml_use_index = False\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n\n# If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n\n# If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = \'\'\n\n# This is the file name suffix for HTML files (e.g. "".xhtml"").\n#html_file_suffix = None\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'pythonnawidoc\'\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n  (\'index\', \'pythonnawi.tex\', u\'Python f\xc3\xbcr Naturwissenschaftler\',\n   u\'Gert-Ludwig Ingold\', \'manual\'),\n]\n\nlatex_elements = {\n\'figure_align\': \'tbp\',\n# The paper size (\'letterpaper\' or \'a4paper\').\n\'papersize\': \'a4paper\',\n\n# The font size (\'10pt\', \'11pt\' or \'12pt\').\n\'pointsize\': \'10pt\',\n\n# Additional stuff for the LaTeX preamble.\n\'preamble\': ur\'\'\'\n\\hypersetup{pdftitle={%s},\n            pdfauthor={Gert-Ludwig Ingold <gert.ingold@physik.uni-augsburg.de>},\n            pdfsubject={Manuskript zur Vorlesung \xc2\xbb%s\xc2\xab},\n            pdfkeywords={Programmieren, Python, Vorlesungsmanuskript, PHM-0043}}\n            \\DeclareUnicodeCharacter{2248}{\\ensuremath{\\approx}}\n\'\'\' % (latex_documents[0][2], latex_documents[0][2]),\n\n\'printindex\': \'\',\n\'sphinxsetup\': \'VerbatimBorderColor={rgb}{1,1,1},VerbatimColor={rgb}{0.95,0.95,0.95}\'\n}\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For ""manual"" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_domain_indices = True\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (\'index\', \'pythonnawi\', u\'Python f\xc3\xbcr Naturwissenschaftler\',\n     [u\'Gert-Ludwig Ingold\'], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  (\'index\', \'pythonnawi\', u\'Python f\xc3\xbcr Naturwissenschaftler\',\n   u\'Gert-Ludwig Ingold\', \'pythonnawi\', u\'Python f\xc3\xbcr Naturwissenschaftler\',\n   \'Miscellaneous\'),\n]\n\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n\n# How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n#texinfo_show_urls = \'footnote\'\n\n# If true, do not generate a @detailmenu in the ""Top"" node\'s menu.\n#texinfo_no_detailmenu = False\n'"
manuskript/sphinxext/ipython_console_highlighting.py,0,"b'""""""reST directive for syntax-highlighting ipython interactive sessions.\n\nXXX - See what improvements can be made based on the new (as of Sept 2009)\n\'pycon\' lexer for the python console.  At the very least it will give better\nhighlighted tracebacks.\n""""""\n\n#-----------------------------------------------------------------------------\n# Needed modules\n\n# Standard library\nimport re\n\n# Third party\nfrom pygments.lexer import Lexer, do_insertions\nfrom pygments.lexers.agile import (PythonConsoleLexer, PythonLexer, \n                                   PythonTracebackLexer)\nfrom pygments.token import Comment, Generic\n\nfrom sphinx import highlighting\n\n#-----------------------------------------------------------------------------\n# Global constants\nline_re = re.compile(\'.*?\\n\')\n\n#-----------------------------------------------------------------------------\n# Code begins - classes and functions\n\nclass IPythonConsoleLexer(Lexer):\n    """"""\n    For IPython console output or doctests, such as:\n\n    .. sourcecode:: ipython\n\n      In [1]: a = \'foo\'\n\n      In [2]: a\n      Out[2]: \'foo\'\n\n      In [3]: print a\n      foo\n\n      In [4]: 1 / 0\n\n    Notes:\n\n      - Tracebacks are not currently supported.\n\n      - It assumes the default IPython prompts, not customized ones.\n    """"""\n    \n    name = \'IPython console session\'\n    aliases = [\'ipython\']\n    mimetypes = [\'text/x-ipython-console\']\n    input_prompt = re.compile(""(In \\[[0-9]+\\]: )|(   \\.\\.\\.+:)"")\n    output_prompt = re.compile(""(Out\\[[0-9]+\\]: )|(   \\.\\.\\.+:)"")\n    continue_prompt = re.compile(""   \\.\\.\\.+:"")\n    tb_start = re.compile(""\\-+"")\n\n    def get_tokens_unprocessed(self, text):\n        pylexer = PythonLexer(**self.options)\n        tblexer = PythonTracebackLexer(**self.options)\n\n        curcode = \'\'\n        insertions = []\n        for match in line_re.finditer(text):\n            line = match.group()\n            input_prompt = self.input_prompt.match(line)\n            continue_prompt = self.continue_prompt.match(line.rstrip())\n            output_prompt = self.output_prompt.match(line)\n            if line.startswith(""#""):\n                insertions.append((len(curcode),\n                                   [(0, Comment, line)]))\n            elif input_prompt is not None:\n                insertions.append((len(curcode),\n                                   [(0, Generic.Prompt, input_prompt.group())]))\n                curcode += line[input_prompt.end():]\n            elif continue_prompt is not None:\n                insertions.append((len(curcode),\n                                   [(0, Generic.Prompt, continue_prompt.group())]))\n                curcode += line[continue_prompt.end():]\n            elif output_prompt is not None:\n                # Use the \'error\' token for output.  We should probably make\n                # our own token, but error is typicaly in a bright color like\n                # red, so it works fine for our output prompts.\n                insertions.append((len(curcode),\n                                   [(0, Generic.Error, output_prompt.group())]))\n                curcode += line[output_prompt.end():]\n            else:\n                if curcode:\n                    for item in do_insertions(insertions,\n                                              pylexer.get_tokens_unprocessed(curcode)):\n                        yield item\n                        curcode = \'\'\n                        insertions = []\n                yield match.start(), Generic.Output, line\n        if curcode:\n            for item in do_insertions(insertions,\n                                      pylexer.get_tokens_unprocessed(curcode)):\n                yield item\n\n\ndef setup(app):\n    """"""Setup as a sphinx extension.""""""\n\n    # This is only a lexer, so adding it below to pygments appears sufficient.\n    # But if somebody knows that the right API usage should be to do that via\n    # sphinx, by all means fix it here.  At least having this setup.py\n    # suppresses the sphinx warning we\'d get without it.\n    pass\n\n#-----------------------------------------------------------------------------\n# Register the extension as a valid pygments lexer\nhighlighting.lexers[\'ipython\'] = IPythonConsoleLexer()\n'"
manuskript/images/numpy/array3d.py,0,"b""from itertools import product\nfrom math import atan2, pi, sqrt\n\nfrom pyx import canvas, color, deco, path, text, trafo, unit\n\ntext.set(text.LatexRunner)\ntext.preamble(r'\\usepackage{arev}\\usepackage[T1]{fontenc}')\nunit.set(xscale=1.2, wscale=1.5)\n\nfrontplane = canvas.canvas()\nbackplane = canvas.canvas()\nxcells = 4\nycells = 3\nxshift = 0.8\nyshift = 1.2\ndist = 0.2\nmyred = color.rgb(0.8, 0, 0)\nmygreen = color.rgb(0, 0.6, 0)\nmyblue = color.rgb(0, 0, 0.8)\nfor c, start in ((frontplane, 0), (backplane, xcells*ycells)):\n    c.stroke(path.rect(0, 0, 4, 3),\n             [deco.filled([color.grey(1), color.transparency(0.2)])])\n    for x in range(1, xcells):\n        c.stroke(path.line(x, 0, x, ycells))\n    for y in range(1, ycells):\n        c.stroke(path.line(0, y, xcells, y))\n    for entry in range(xcells*ycells):\n        x = entry % 4\n        y = ycells - entry // 4\n        c.text(x+0.5, y-0.5, str(start+entry),\n               [text.halign.center, text.valign.middle])\nc = canvas.canvas()\nc.insert(backplane, [trafo.translate(xshift, yshift)])\nfor x, y in product((0, xcells), (0, ycells)):\n    c.stroke(path.line(x, y, x+xshift, y+yshift))\nc.insert(frontplane)\ndx = -dist*yshift/sqrt(xshift**2+yshift**2)\ndy = dist*xshift/sqrt(xshift**2+yshift**2)\nc.stroke(path.line(dx, ycells+dy, dx+xshift, ycells+dy+yshift),\n         [deco.earrow, myred])\nc.text(0.5*xshift+2*dx, ycells+0.5*yshift+2*dy, 'axis 0',\n       [text.halign.center, myred,\n        trafo.rotate(180/pi*atan2(yshift, xshift))])\nc.stroke(path.line(-dist, ycells, -dist, 0),\n         [deco.earrow, mygreen])\nc.text(-2*dist, 0.5*ycells, 'axis 1',\n       [text.halign.center, mygreen, trafo.rotate(90)])\nc.stroke(path.line(0, -dist, xcells, -dist),\n         [deco.earrow, myblue])\nc.text(0.5*xcells, -2*dist, 'axis 2',\n       [text.halign.center, text.valign.top, myblue])\nc.writePDFfile()\n"""
manuskript/images/numpy/axes.py,0,"b'from pyx import canvas, color, deco, path, text, trafo, unit\n\ntext.set(text.LatexRunner)\ncolor0 = color.rgb(0.8, 0, 0)\ncolor1 = color.rgb(0, 0, 0.8)\ntext.preamble(r\'\\usepackage{arev}\\usepackage[T1]{fontenc}\')\ntext.preamble(r\'\\usepackage{color}\')\ntext.preamble(r\'\\definecolor{axis0}{rgb}{%s, %s, %s}\' % (color0.r, color0.g, color0.b))\ntext.preamble(r\'\\definecolor{axis1}{rgb}{%s, %s, %s}\' % (color1.r, color1.g, color1.b))\nunit.set(xscale=1.2, wscale=1.5)\n\ndx = 2\ndy = 0.8\nc = canvas.canvas()\nfor nx in range(3):\n    for ny in range(3):\n        c.text(nx*dx, -ny*dy,\n               r\'a[\\textcolor{axis0}{%s}, \\textcolor{axis1}{%s}]\' % (ny, nx),\n               [text.halign.center])\nbox = c.bbox()\npd = 0.1\nxoff = box.left()-pd\npdx = 0.2\npdy = 0.5\nc.stroke(path.curve(xoff, box.top()+pd,\n                    xoff-pdx, box.top()-pdy,\n                    xoff-pdx, box.bottom()+pdy,\n                    xoff, box.bottom()-pd))\nxoff = box.right()+pd\nc.stroke(path.curve(xoff, box.top()+pd,\n                    xoff+pdx, box.top()-pdy,\n                    xoff+pdx, box.bottom()+pdy,\n                    xoff, box.bottom()-pd))\nx = box.left()-pdx-0.4\nc.stroke(path.line(x, box.top(), x, box.bottom()), [deco.earrow, color0])\nc.text(x-0.1, 0.5*(box.top()+box.bottom()), \'axis 0\',\n       [text.halign.center, color0, trafo.rotate(90)])\ny = box.top()+0.4\nc.stroke(path.line(box.left(), y, box.right(), y), [deco.earrow, color1])\nc.text(0.5*(box.left()+box.right()), y+0.1, \'axis 1\', [text.halign.center, color1])\nc.writePDFfile()\nc.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/numpy/broadcast.py,0,"b'from pyx import canvas, color, deco, path, text, style, trafo, unit\n\ndef drawgrid(c, nxcells, nycells, yoff, gridcolor=color.grey(0), arange=None):\n    c.stroke(path.rect(0, yoff, nxcells, nycells), [gridcolor])\n    for nx in range(nxcells-1):\n        c.stroke(path.line(nx+1, yoff, nx+1, yoff+nycells), [gridcolor])\n    for ny in range(nycells-1):\n        c.stroke(path.line(0, yoff+ny+1, nxcells, yoff+ny+1), [gridcolor])\n    entry = \'1\'\n    if arange is not None:\n        for nx in range(nxcells):\n            for ny in range(nycells):\n                if arange:\n                    entry = str(4*ny+nx)\n                c.text(nx+0.5, 2.5-ny, entry,\n                       [text.halign.center, text.valign.middle, gridcolor])\n\ndef array34(arange, hlshape=None):\n    c = canvas.canvas()\n    if hlshape is None:\n        c.text(2, 3.3, \'shape=(3, 4)\', [text.halign.center])\n    else:\n        c.text(2, 3.3, \'shape=%s\' % repr(hlshape), [text.halign.center])\n    if hlshape is not None:\n        if len(hlshape) == 1:\n            hlshape = (1, hlshape[0])\n    if arange:\n        gridcolor = color.grey(0)\n    else:\n        gridcolor = color.grey(0.5)\n    if hlshape is None:\n        arange = True\n    elif (hlshape[0] in (1, 3)) and (hlshape[1] in (1, 4)):\n        arange = False\n    else:\n        arange = None\n    drawgrid(c, 4, 3, 0, gridcolor, arange=arange)\n    if hlshape is not None:\n        c.stroke(path.rect(0, 3, hlshape[1], -hlshape[0]),\n                 [deco.filled([color.rgb(1, 0.8, 0.4)])])\n        drawgrid(c, hlshape[1], hlshape[0], 3-hlshape[0], arange=False)\n    if arange is None:\n        alertcolor = color.rgb(0.6, 0, 0)\n        c.stroke(path.line(0, 0, 4, 3), [alertcolor, style.linewidth.Thick])\n        c.stroke(path.line(0, 3, 4, 0), [alertcolor, style.linewidth.Thick])\n    return c\n\n\ntext.set(text.LatexRunner)\ntext.preamble(r\'\\usepackage{arev}\\usepackage[T1]{fontenc}\')\nunit.set(xscale=1.2, wscale=1.5)\n\nxcells = 4\nycells = 3\ngridcolor = color.grey(0.5)\n\nc = canvas.canvas()\n\nc.insert(array34(True))\nc.insert(array34(False, (1,)), [trafo.translate(5, 0)])\nc.insert(array34(False, (4,)), [trafo.translate(10, 0)])\nc.insert(array34(False, (3,)), [trafo.translate(5, -4.5)])\nc.insert(array34(False, (3, 1)), [trafo.translate(10, -4.5)])\n\nc.writePDFfile()\nc.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/numpy/brownianmotion.py,4,"b""import numpy as np\nimport matplotlib.pyplot as plt\n\nstories = 50\nlength = 10000\njumps = np.random.choice(np.array([-1, 1]), size=(length, stories))\ntrajectories = np.cumsum(jumps, axis=0)\nplt.xlabel('$t$', fontsize=20)\nplt.ylabel('$x$', fontsize=20)\nplt.plot(trajectories)\nplt.savefig('brownianmotion1.png')\nplt.clf()\nplt.xlabel('$t$', fontsize=20)\nplt.ylabel(r'$\\langle x\\rangle$', fontsize=20)\nplt.plot(np.mean(trajectories, axis=1))\nplt.savefig('brownianmotion2.png')\nplt.clf()\nplt.xlabel('$t$', fontsize=20)\nplt.ylabel(r'$\\langle x^2\\rangle-\\langle x\\rangle^2$', fontsize=20)\nplt.plot(np.var(trajectories, axis=1))\nplt.savefig('brownianmotion3.png')\n"""
manuskript/images/numpy/eratosthenes.py,0,"b'import os\nimport sys\n\nimport numpy as np\nfrom pyx import canvas, color, path, text, trafo, unit\n\ndef draw_grid():\n    c.stroke(path.rect(0, 0, 25, 2))\n    for n in range(24):\n        c.stroke(path.line(n+1, 0, n+1, 2))\n    c.stroke(path.line(0, 1, 25, 1))\n\ntext.set(text.LatexRunner)\ntext.preamble(r\'\\usepackage{arev}\\usepackage[T1]{fontenc}\')\nunit.set(xscale=1.2, wscale=2.5)\n\ncgesamt = canvas.canvas()\nc = canvas.canvas()\nc.fill(path.rect(0, 1, 2, 1), [color.grey(0.7)])\nc.text(0.5, 1.5, \'0\', [text.halign.center, text.valign.middle])\nc.text(1.5, 1.5, \'1\', [text.halign.center, text.valign.middle])\nbasename = os.path.splitext(sys.argv[0])[0]\nbaseprimes = [0, 2, 3, 5, 7]\nncolor = len(baseprimes)-1\ncancelled = set([0, 1])\nfor nr, baseprime in enumerate(baseprimes):\n    if nr == 0:\n        for n in range(2, 50):\n            x = n % 25\n            y = 2-(n//25)\n            c.text(x+0.5, y-0.5, str(n), [text.halign.center, text.valign.middle])\n    else:\n        cancelled.add(baseprime)\n        hvalue = 1.1*(nr-1)/(ncolor-1)\n        hvalue = hvalue-int(hvalue)\n        primecolor = color.hsb(hvalue, 1, 0.8)\n        x = baseprime % 25\n        y = 2-(baseprime//25)\n        c.fill(path.rect(x, y, 1, -1), [primecolor])\n        c.text(x+0.5, y-0.5, r\'\\textbf{%s}\' % baseprime,\n               [text.halign.center, text.valign.middle, color.grey(1)])\n        for n in range(baseprime**2, 50, baseprime):\n            if not n in cancelled:\n                cancelled.add(n)\n                x = n % 25\n                y = 2-(n//25)\n                c.stroke(path.line(x, y-1, x+1, y), [primecolor])\n                c.stroke(path.line(x, y, x+1, y-1), [primecolor])\n    draw_grid()\n    cc = canvas.canvas()\n    cc.items = c.items[:]\n    cgesamt.insert(cc, [trafo.translate(0, -2.3*(nr+1))])\n\nfor n in range(50):\n    if not n in cancelled:\n        x = n % 25\n        y = 2-(n//25)\n        c.fill(path.rect(x, y, 1, -1), [color.hsb(0.15, 1, 0.8)])\n        c.text(x+0.5, y-0.5, r\'\\textbf{%s}\' % n,\n               [text.halign.center, text.valign.middle, color.grey(1)])\ndraw_grid()\ncgesamt.insert(c, [trafo.translate(0, -2.3*(nr+2))])\ncgesamt.writePDFfile()\ncgesamt.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/numpy/face.py,4,"b""import numpy as np\nfrom scipy import misc\nimport matplotlib.pyplot as plt\n\nface = misc.face(gray=True)\n\nplt.imshow(face > 128, cmap=plt.cm.gray)\nplt.savefig('face1.png')\nplt.clf()\nshiftedface = face/128-1\npowerface = np.abs(shiftedface)**2\nsignface = np.sign(shiftedface)\ncontrastface = 128*(signface*powerface+1)\nplt.imshow(contrastface, cmap=plt.cm.gray)\nplt.savefig('face2.png')\nplt.clf()\nframedface = np.zeros_like(face)\nfwidth = 30\nframedface[fwidth:-fwidth, fwidth:-fwidth] = face[fwidth:-fwidth, fwidth:-fwidth]\nplt.imshow(framedface, cmap=plt.cm.gray)\nplt.savefig('face3.png')\nplt.clf()\nsy, sx = face.shape\ny, x = np.ogrid[:sy, :sx]\ncenterx, centery = 660, 300\nmask = ((y-centery)**2+(x-centerx)**2) > 230**2\nface[mask] = 0\nplt.imshow(face, cmap=plt.cm.gray)\nplt.savefig('face4.png')\n"""
manuskript/images/numpy/mandelbrot1.py,2,"b""import numpy as np\nimport matplotlib.pyplot as plt\n\nniter = 2000\nnpts = 1000\ny, x = np.ogrid[-1.5:1.5:npts*1j, -2:1:npts*1j]\nc = x+1j*y\nz = c\nfor n in range(niter):\n    z = z**2+c\nimdata = np.abs(z) < 2\nplt.imshow(imdata, extent=(-2, 1, -1.5, 1.5),\n           cmap='gray', interpolation='none')\nplt.xlabel('$\\mathrm{Re}(c)$', fontsize=20)\nplt.ylabel('$\\mathrm{Im}(c)$', fontsize=20)\nplt.savefig('mandelbrot1.png')\n"""
manuskript/images/numpy/mandelbrot2.py,4,"b""import numpy as np\nimport matplotlib.pyplot as plt\n\nniter = 200\nnpts = 1000\nxmin = -0.68\nxmax = -0.66\nymin = 0.45\nymax = 0.47\ny, x = np.ogrid[ymax:ymin:npts*1j, xmin:xmax:npts*1j]\nc = x+1j*y\nz = np.zeros_like(c)\noutput = np.zeros(c.shape, dtype=np.int)\nfor n in range(niter):\n    notdone = np.abs(z) < 2\n    output[notdone] = n\n    z[notdone] = z[notdone]**2+c[notdone]\nplt.imshow(output, extent=(xmin, xmax, ymin, ymax),\n           cmap='Paired', interpolation='none')\nplt.xlabel('$\\mathrm{Re}(c)$', fontsize=20)\nplt.ylabel('$\\mathrm{Im}(c)$', fontsize=20)\nplt.savefig('mandelbrot2.png')\n"""
manuskript/images/numpy/strides.py,0,"b'import sys\nimport os.path\n\nfrom pyx import canvas, color, deco, path, text, trafo, unit\n\ndef make_stride_figure(lowerstride, uperstride=1, nrentries=6):\n    c = canvas.canvas()\n    ht = 0.5\n    wd = 2\n    dist = 0.2\n    textcolor = color.hsb(0.02, 1, 0.6)\n    for n in range(nrentries):\n        x = n*(wd+dist)\n        c.stroke(path.rect(x, 0, wd, ht))\n        c.text(x+0.5*wd, 0.5*ht, str(n), [text.halign.center, text.valign.middle])\n\n    for n in range(nrentries-1):\n        x = n*(wd+dist)\n        c.stroke(path.curve(x-dist/3, ht+0.5*dist,\n                            x+0.3*wd, ht+3*dist,\n                            x+0.7*wd, ht+3*dist,\n                            x+wd+dist/3, ht+0.5*dist),\n                 [deco.earrow.large])\n        c.text(x+0.5*wd, ht+3.2*dist, r\'\\Large 8\', [text.halign.center, textcolor])\n\n    if lowerstride:\n        for n in range((nrentries-1)//lowerstride):\n            x = n*lowerstride*(wd+dist)\n            c.stroke(path.curve(x-dist/3, -0.5*dist,\n                                x+0.5*wd, -5*dist,\n                                x+(lowerstride-0.5)*wd+lowerstride*dist, -5*dist,\n                                x+lowerstride*wd+(lowerstride-0.7)*dist, -0.5*dist),\n                     [deco.earrow.large])\n            c.text(x+0.5*lowerstride*wd+dist,-5.2*dist, r\'\\Large %i\' % (lowerstride*8),\n                   [text.halign.center, text.valign.top, textcolor])\n    return c\n\ntext.set(text.LatexRunner)\ntext.preamble(r\'\\usepackage{arev}\\usepackage[T1]{fontenc}\\usepackage{amsmath}\')\nunit.set(xscale=1.2, wscale=1.5)\n\nc = canvas.canvas()\nc.insert(make_stride_figure(0), [trafo.translate(0, 9)])\nc.text(0, 11.3, r""\\Large(8,)"", [color.rgb(0, 0, 0.8)])\nc.text(-2, 9.5, r""\\Large $\\begin{pmatrix}0 & 1 & 2 & 3 & 4 & 5\\end{pmatrix}$"",\n       [text.halign.right, text.valign.middle])\nc.insert(make_stride_figure(3), [trafo.translate(0, 5)])\nc.text(0, 7.3, r""\\Large(24, 8)"", [color.rgb(0, 0, 0.8)])\nc.text(-2, 5.5, r""\\Large $\\begin{pmatrix}0 & 1 & 2 \\\\ 3 & 4 & 5\\end{pmatrix}$"",\n       [text.halign.right, text.valign.middle])\nc.insert(make_stride_figure(2), [trafo.translate(0, 0)])\nc.text(0, 2.3, r""\\Large(16, 8)"", [color.rgb(0, 0, 0.8)])\nc.text(-2, 0.5, r""\\Large $\\begin{pmatrix}0 & 1 \\\\ 2 & 3 \\\\ 4 & 5\\end{pmatrix}$"",\n       [text.halign.right, text.valign.middle])\nc.writePDFfile()\nc.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/parallel/mandelbrot_tiles.py,3,"b'from concurrent import futures\nfrom functools import partial\nfrom itertools import product\nimport os\nimport numpy as np\nfrom pyx import color, deco, graph, path\n\ndef mandelbrot_iteration(niter, *args):\n    nx, ny, c = args[0]\n    z = np.zeros_like(c)\n    for n in range(niter):\n        z = z**2+c\n    return nx, ny, os.getpid(), np.abs(z) < 2\n\nnpts = 1024\nxmin = -2\nxmax = 1\nwidth = npts\nymin = -1.5\nymax = 1.5\nheight = npts\nniter = 2000\n\ny, x = np.ogrid[ymin:ymax:height*1j, xmin:xmax:width*1j]\nc = x+1j*y\n\nnexponent = 2\nn = 2**nexponent\nnlen = npts//n\nclist = []\nfor nx, ny in product(range(n), repeat=2):\n    clist.append((nx, ny, c[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen]))\nex = futures.ProcessPoolExecutor(max_workers=4)\nresults = list(ex.map(partial(mandelbrot_iteration, niter), clist))\n\ndata = []\nprocdict = {}\nfor r in results:\n    nx, ny, procid, partialdata = r\n    for mx, my in product(range(nlen), repeat=2):\n        cval = c[nx*nlen+mx, ny*nlen+my]\n        data.append((cval.real, cval.imag, partialdata[mx, my]))\n    procdict[(nx, ny)] = procid\nprocids = set(procdict.values())\ncolors = [color.hsb(n/(len(procids)-1)*0.67, 1, 1) for n in range(len(procids))]\nproccolors = dict(zip(procids, colors))\n\ng = graph.graphxy(width=8, height=8,\n        x=graph.axis.lin(),\n        y=graph.axis.lin())\ng.plot(graph.data.points(data, x=1, y=2, color=3),\n       [graph.style.density(keygraph=None)])\n\ndx = (xmax-xmin)/n\ndy = (ymax-ymin)/n\nfor k, v in procdict.items():\n    nx, ny = k\n    tilecolor = proccolors[v]\n    xll, yll = g.pos(xmin+dx*nx, ymin+dy*ny)\n    xur, yur = g.pos(xmin+dx*(nx+1), ymin+dy*(ny+1))\n    g.fill(path.rect(xll, yll, xur-xll, yur-yll),\n           [deco.stroked([color.grey(0)]), tilecolor, color.transparency(0.5)])\ng.writePDFfile()\n'"
manuskript/images/parallel/numba_parallel.py,0,"b'from pyx import color, deco, graph, style\n\nwith open(\'numba_parallel.dat\') as fh:\n    t_cpu = float(fh.readline().rstrip(\'\\n\').split()[1])\n    t_parallel = []\n    for _ in range(8):\n        elems = fh.readline().rstrip(\'\\n\').split()\n        t_parallel.append((int(elems[0]), float(elems[1])))\nt_parallel = [(n, t_cpu/t) for n, t in t_parallel]\n\ng = graph.graphxy(width=8,\n        x=graph.axis.linear(min=1, max=8, title=""Zahl der Threads""),\n        y=graph.axis.linear(title=""Beschleunigung""))\ng.plot(graph.data.points(t_parallel, x=1, y=2),\n       [graph.style.line([style.linestyle.dotted]),\n        graph.style.symbol(symbol=graph.style.symbol.circle,\n                           size=0.1,\n                           symbolattrs=[deco.filled([color.grey(1)])])\n       ])\ng.writePDFfile()\ng.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/parallel/parallel.py,4,"b'from concurrent import futures\nfrom functools import partial\nfrom itertools import product\nimport os\nimport time\n\nimport numpy as np\nfrom pyx import canvas, color, deco, path, text, unit\n\ndef mandelbrot_tile(nitermax, nx, ny, cx, cy):\n    start = time.time()\n    x = np.zeros_like(cx)\n    y = np.zeros_like(cx)\n    data = np.zeros(cx.shape, dtype=np.int)\n    for n in range(nitermax):\n        x2 = x*x\n        y2 = y*y\n        notdone = x2+y2 < 4\n        data[notdone] = n\n        x[notdone], y[notdone] = (x2[notdone]-y2[notdone]+cx[notdone],\n                                  2*x[notdone]*y[notdone]+cy[notdone])\n    ende = time.time()\n    return (nx, ny, os.getpid(), start, ende, data)\n\ndef mandelbrot(xmin, xmax, width, ymin, ymax, height,\n               npts, ndiv, niter, max_workers=4):\n    y, x = np.mgrid[ymin:ymax:height*1j, xmin:xmax:width*1j]\n    nlen = npts//ndiv\n    clist = [(nx, ny,\n              x[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen],\n              y[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen])\n             for nx, ny in product(range(ndiv), repeat=2)]\n    start = time.time()\n    ex = futures.ProcessPoolExecutor(max_workers=max_workers)\n    wait_for = [ex.submit(partial(mandelbrot_tile, niter), nx, ny, cx, cy)\n                for (nx, ny, cx, cy) in clist]\n    results = [f.result()[0:5] for f in futures.as_completed(wait_for)]\n    ende = time.time()\n    processids = sorted(set([r[2] for r in results]))\n    processdict = dict(zip(processids, range(len(processids))))\n    return (len(processdict), start, ende,\n            [(processdict[r[2]], r[3]-start, r[4]-start) for r in results])\n\nnpts = 1024\nxmin = -2\nxmax = 1\nwidth = npts\nymin = -1.5\nymax = 1.5\nheight = npts\nniter = 2000\n\ncnvs = canvas.canvas()\nunit.set(wscale=0.8)\ncellheight = 0.17\n\nfor nr, ndiv in enumerate((2, 4, 8, 16, 32)):\n    nrproc, start, ende, data = mandelbrot(xmin, xmax, width, ymin, ymax, height,\n                      npts, ndiv, niter)\n    offset = -(nrproc+1.2)*cellheight*nr\n    cnvs.text(-0.2, offset+2*cellheight, ""$n=%s$"" % ndiv,\n              [text.halign.right, text.valign.middle])\n    cnvs.stroke(path.line(0, -0.2*cellheight+offset, 0,\n        (nrproc+0.2)*cellheight+offset))\n    cnvs.stroke(path.line(ende-start, -0.2*cellheight+offset, ende-start,\n        (nrproc+0.2)*cellheight+offset))\n    for d in data:\n        colours = color.hsb(0.667*d[0]/(nrproc-1), 1, 0.3)\n        colourf = color.hsb(0.667*d[0]/(nrproc-1), 0.2, 1)\n        cnvs.stroke(path.rect(d[1], d[0]*cellheight+offset, (d[2]-d[1]), 0.8*cellheight),\n                [colours, deco.filled([colourf])])\n\ncnvs.writePDFfile()\ncnvs.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/parallel/parallel_time.py,0,"b'from pyx import color, deco, graph, style\n\ncpus = [\'i7-3770\', \'i5-4690\']\ndata = {}\nfor cpu in cpus:\n    data[cpu] = []\n    with open(cpu+\'.dat\') as fh:\n        for line in fh:\n            nr, t1, t4 = line.rstrip(\'\\n\').split()\n            nr = int(nr)\n            t1 = float(t1)\n            t4 = float(t4)\n            data[cpu].append((t1, t4))\n    data[cpu] = [(2**nr, data[cpu][0][0]/t4, t1/t4)\n                 for nr, (t1, t4) in enumerate(data[cpu])]\n\nlogparter = graph.axis.parter.log(tickpreexps=\n                [graph.axis.parter.preexp([graph.axis.tick.rational(1, 1)], 2)])\ng = graph.graphxy(width=8,\n        x=graph.axis.log(min=1, max=128, parter=logparter,\n                         title=\'Unterteilungen einer Achse\'),\n        y=graph.axis.lin(min=0, title=\'Beschleunigung\'),\n        key=graph.key.key(pos=""tl""))\nfor nr, cpu in enumerate(cpus):\n    g.plot(graph.data.points(data[cpu], x=1, y=2, title=cpu),\n            [graph.style.line(lineattrs=[style.linestyle.dotted]),\n             graph.style.symbol(symbol=graph.style.symbol.circle,\n    \t         size=0.1, symbolattrs=[deco.filled([color.grey(nr)])])\n\t    ])\n    g.plot(graph.data.points(data[cpu], x=1, y=3, title=cpu),\n            [graph.style.line(lineattrs=[style.linestyle.solid]),\n             graph.style.symbol(symbol=graph.style.symbol.circle,\n\t\t size=0.1, symbolattrs=[deco.filled([color.grey(nr)])])\n            ])\ng.writePDFfile()\ng.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/parallel/parallel_timing.py,7,"b'from concurrent import futures\nfrom itertools import product\nfrom functools import partial\nimport time\n\nimport numpy as np\n\ndef mandelbrot_tile(nitermax, nx, ny, cx, cy):\n    x = np.zeros_like(cx)\n    y = np.zeros_like(cx)\n    data = np.zeros(cx.shape, dtype=np.int)\n    for n in range(nitermax):\n        x2 = x*x\n        y2 = y*y\n        notdone = x2+y2 < 4\n        data[notdone] = n\n        x[notdone], y[notdone] = (x2[notdone]-y2[notdone]+cx[notdone],\n                                  2*x[notdone]*y[notdone]+cy[notdone])\n    return (nx, ny, data)\n\ndef mandelbrot(xmin, xmax, ymin, ymax, npts, nitermax, ndiv, max_workers=4):\n    start = time.time()\n    cy, cx = np.mgrid[ymin:ymax:npts*1j, xmin:xmax:npts*1j]\n    nlen = npts//ndiv\n    paramlist = [(nx, ny,\n                  cx[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen],\n                  cy[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen])\n                 for nx, ny in product(range(ndiv), repeat=2)]\n    with futures.ProcessPoolExecutor(max_workers=max_workers) as executors:\n        wait_for = [executors.submit(partial(mandelbrot_tile, nitermax),\n                                             nx, ny, cx, cy)\n                    for (nx, ny, cx, cy) in paramlist]\n        results = [f.result() for f in futures.as_completed(wait_for)]\n    data = np.zeros(cx.shape, dtype=np.int)\n    for nx, ny, result in results:\n        data[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen] = result\n    return time.time()-start\n\ndef mandelbrot_single(xmin, xmax, ymin, ymax, npts, nitermax, ndiv):\n    start = time.time()\n    cy, cx = np.mgrid[ymin:ymax:npts*1j, xmin:xmax:npts*1j]\n    nlen = npts//ndiv\n    paramlist = [(nx, ny,\n                  cx[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen],\n                  cy[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen])\n                 for nx, ny in product(range(ndiv), repeat=2)]\n    data = np.zeros(cx.shape, dtype=np.int)\n    for nx, ny, cx, cy in paramlist:\n        nx, ny, result = mandelbrot_tile(nitermax, nx, ny, cx, cy)\n        data[nx*nlen:(nx+1)*nlen, ny*nlen:(ny+1)*nlen] = result\n    return time.time()-start\n\nnitermax = 2000\nnpts = 1024\nxmin = -2\nxmax = 1\nymin = -1.5\nymax = 1.5\n\nfor ndiv in (1, 2, 4, 8, 16, 32, 64, 128,):\n    t1 = mandelbrot_single(xmin, xmax, ymin, ymax, npts, nitermax, ndiv)\n    t4 = mandelbrot(xmin, xmax, ymin, ymax, npts, nitermax, ndiv)\n    print(ndiv, t1, t4)\n'"
manuskript/images/profiling/profiling_1.py,3,"b'import numpy as np\nimport math\nimport timeit\nimport matplotlib.pyplot as plt\n\ndef f_numpy(nmax):\n    x = np.linspace(0, np.pi, nmax)\n    result = np.sin(x)\n\ndef f_math(nmax):\n    dx = math.pi/(nmax-1)\n    result = [math.sin(n*dx) for n in xrange(nmax)]\n\nx = []\ny = []\nfor n in np.logspace(0.31, 6, 20):\n    nint = int(n)\n    t_numpy = timeit.timeit(""f_numpy(%i)"" % nint,\n                            ""from __main__ import f_numpy"",\n                            number=20)\n    t_math = timeit.timeit(""f_math(%i)"" % nint,\n                            ""from __main__ import f_math"",\n                            number=20)\n    x.append(nint)\n    y.append(t_math/t_numpy)\nplt.plot(x, y)\nplt.xscale(""log"")\nplt.savefig(""profiling_1.png"")\nplt.close()\n'"
manuskript/images/profiling/profiling_2.py,3,"b'import numpy as np\nimport numexpr as ne\nimport timeit\nimport matplotlib.pyplot as plt\n\ndef f_numpy(nmax):\n    x = np.linspace(0, 1, nmax)\n    result = ((5*x-2)*x+1)*x-7\n\ndef f_numexpr(nmax):\n    x = np.linspace(0, 1, nmax)\n    result = ne.evaluate(""5*x**3-2*x**2+x-7"")\n\nx = []\ny = []\nfor n in np.logspace(0.31, 6, 20):\n    nint = int(n)\n    print nint\n    t_numpy = timeit.timeit(""f_numpy(%i)"" % nint,\n                            ""from __main__ import f_numpy"",\n                            number=20)\n    t_numexpr = timeit.timeit(""f_numexpr(%i)"" % nint,\n                            ""from __main__ import f_numexpr"",\n                            number=20)\n    x.append(nint)\n    y.append(t_numpy/t_numexpr)\nplt.plot(x, y)\nplt.xscale(""log"")\nplt.savefig(""profiling_2.png"")\nplt.close()\n'"
manuskript/images/symbols/question.py,0,"b'from pyx import canvas, color, text\n\ntext.set(text.LatexRunner)\nc = canvas.canvas()\nt = text.text(0, 0, r""\\sffamily\\bfseries ?"")\ntblarge = t.bbox().enlarged(0.1)\nc.fill(tblarge.path(), [color.rgb(0.8, 0.5, 0)])\nc.insert(t, [color.grey(1)])\n\nc.writePDFfile()\nc.writeGSfile(device=""png16m"", resolution=600)\n'"
manuskript/images/symbols/weiterfuehrend.py,0,"b'# *-* coding: utf-8 *-*\nimport sys, os\nsys.path.insert(0, os.path.expanduser(\'~/PyX-0.10\'))\nfrom pyx import *\n\ntext.set(mode=""latex"")\nc = canvas.canvas()\nt = text.text(0, 0, r""\\sffamily\\bfseries +"")\ntblarge = t.bbox().enlarged(0.1)\nc.fill(tblarge.path(), [color.rgb(0,0.8,0)])\nc.insert(t, [color.grey(1)])\nbasefilename = os.path.splitext(sys.argv[0])[0]\nc.writePDFfile(basefilename)\nc.pipeGS(""%s.png"" % basefilename, resolution=600)\n'"
