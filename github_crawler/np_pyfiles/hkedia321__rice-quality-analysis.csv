file_path,api_count,code
code.py,1,"b'import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef get_classificaton(ratio):\n\tratio =round(ratio,1)\n\ttoret=""""\n\tif(ratio>=3):\n\t\ttoret=""Slender""\n\telif(ratio>=2.1 and ratio<3):\n\t\ttoret=""Medium""\n\telif(ratio>=1.1 and ratio<2.1):\n\t\ttoret=""Bold""\n\telif(ratio<=1):\n\t\ttoret=""Round""\n\ttoret=""(""+toret+"")""\n\treturn toret\n#rnjn\nprint ""Starting""\nimg = cv2.imread(\'rice.png\',0)#load in greyscale mode\n\n#convert into binary\nret,binary = cv2.threshold(img,160,255,cv2.THRESH_BINARY)# 160 - threshold, 255 - value to assign, THRESH_BINARY_INV - Inverse binary\n\n#averaging filter\nkernel = np.ones((5,5),np.float32)/9\ndst = cv2.filter2D(binary,-1,kernel)# -1 : depth of the destination image\n\n\nkernel2 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(3,3))\n\n#erosion\nerosion = cv2.erode(dst,kernel2,iterations = 1)\n\n#dilation \ndilation = cv2.dilate(erosion,kernel2,iterations = 1)\n\n#edge detection\nedges = cv2.Canny(dilation,100,200)\n\n### Size detection\n_,contours,hierarchy = cv2.findContours(erosion, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\nprint ""No. of rice grains="",len(contours)\ntotal_ar=0\nfor cnt in contours:\n\tx,y,w,h = cv2.boundingRect(cnt)\n\taspect_ratio = float(w)/h\n\tif(aspect_ratio<1):\n\t\taspect_ratio=1/aspect_ratio\n\tprint round(aspect_ratio,2),get_classificaton(aspect_ratio)\n\ttotal_ar+=aspect_ratio\navg_ar=total_ar/len(contours)\nprint ""Average Aspect Ratio="",round(avg_ar,2),get_classificaton(avg_ar)\n#plot the images\nimgs_row=2\nimgs_col=3\nplt.subplot(imgs_row,imgs_col,1),plt.imshow(img,\'gray\')\nplt.title(""Original image"")\n\nplt.subplot(imgs_row,imgs_col,2),plt.imshow(binary,\'gray\')\nplt.title(""Binary image"")\n\nplt.subplot(imgs_row,imgs_col,3),plt.imshow(dst,\'gray\')\nplt.title(""Filtered image"")\n\nplt.subplot(imgs_row,imgs_col,4),plt.imshow(erosion,\'gray\')\nplt.title(""Eroded image"")\n\nplt.subplot(imgs_row,imgs_col,5),plt.imshow(dilation,\'gray\')\nplt.title(""Dialated image"")\n\nplt.subplot(imgs_row,imgs_col,6),plt.imshow(edges,\'gray\')\nplt.title(""Edge detect"")\n\nplt.show()\n\n'"
