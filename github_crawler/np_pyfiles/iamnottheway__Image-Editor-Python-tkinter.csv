file_path,api_count,code
imageEd/MoveWindow.py,0,"b'# @HarowitzBlack -> author\n# A MOVABLE TOP AND A SEXY CLOSE BUTTON FOR THE NAKED BITCH!!!\n# @candiedpussy :p -> awesome name, isn\'t it? NEVER USE IT! I\'ll sue you for intellectual \n# property theft!!! lol :o, (.)(.)\n\n\nfrom tkinter import *\nfrom PIL import ImageTk, Image\n\nBG_COLOR = \'#24272b\'\n\nclass MovableWindow():\n\n\t\'\'\'\n\t\tCANVAS WHICH IS MOVABLE WHEN CLICKED AND DRAGGED\n\t\'\'\'\n\n\tdef __init__(self,parent):\n\t\tself.parent = parent\n\t\t# create a canvas which is movable\n\t\tself.Holder = Frame(self.parent,width = 260,height=20,bg = BG_COLOR)\n\t\tself.Holder.grid(row = 0,column = 1,ipady=2)\n\t\tself.MovableCanvas = Canvas(self.Holder,width = 260,height = 25,\\\n\t\t\tbg = BG_COLOR,highlightthickness=0)\n\t\tself.MovableCanvas.bind(\'<Button-1>\',self.ClickTopLevel)\n\t\tself.MovableCanvas.bind(\'<B1-Motion>\',self.DragTopLevel)\n\t\tself.MovableCanvas.grid(row = 0,column = 1,sticky = W)\n\n\t\t# CLOSE WINDOW BUTTON\n\t\tself.closeXmarker = ImageTk.PhotoImage(file=""icons/cc.png"")\n\t\tself.closeBrushWin = Button(self.Holder,width = 20,height=20,bd = 0,bg = BG_COLOR,command=self.parent.withdraw,\\\n\t\t\tcursor=\'hand2\',activebackground=BG_COLOR,highlightthickness=0)\n\t\tself.closeBrushWin.config(image=self.closeXmarker)\n\t\tself.closeBrushWin.grid(row=0,column=2,sticky=E,padx = 7)\n\n\tdef ClickTopLevel(self,event):\n\t\tself.TopLevelXPos,self.TopLevelYPos = event.x,event.y\n\t\n\tdef DragTopLevel(self,event):\n\t\t#print(event)\n\t\tself.childWin = self.parent\n\t\tx = self.childWin.winfo_pointerx() - self.TopLevelXPos\n\t\ty = self.childWin.winfo_pointery() - self.TopLevelYPos\n\t\t#self.childWin.config(cursor = \'fleur\')\n\t\tself.childWin.geometry(\'+{x}+{y}\'.format(x=x,y=y))'"
imageEd/canvasdraw.py,0,"b'from tkinter import *\nfrom colors import COLORS\nimport random\n\nroot = Tk()\nroot.resizable(0,0)\n\ndef Draw(event):\n  x,y = event.x,event.y\n  point = Sheet.create_oval(x,y,x+50,y+50,fill = COLORS[random.randint(0,len(COLORS)-1)])\n  del point\n\ndef clearscrn():\n  Sheet.delete(""all"")\n\nSheet = Canvas(root,bg = ""white"",width = 400,height = 400)\nSheet.pack()\n\nbtn = Button(root,text=""clear all"",command=clearscrn)\nbtn.pack()\n\nroot.bind(\'<B1-Motion>\',Draw)\nroot.mainloop()'"
imageEd/color_palette.py,0,"b'from tkinter import *\nfrom colors import COLORS\nimport random\n\ndef get_color(*args):\n\tcurrent_color = ColorPaletteCanvas.itemcget(""current"",""tags"")\n\tprint(current_color)\n\nroot = Tk()\nroot.geometry(""300x300+300+200"")\nroot.config(bg=""#333"")\nroot.resizable(0,0)\nroot.title(""color pallette"")\n\nColorPaletteCanvas = Canvas(root,width = 210,height = 220,bg = \'white\',cursor = \'tcross\')\nColorPaletteCanvas.grid(row = 0,column=1,padx = 10,pady = 10)\n\t\t# colors inside the palette\nx_pos = 0\ny_pos = 0\n\t\t# final x coord of the canvas is 200\n\t\t# and y coord is 100. -20 from them\nfor c in COLORS:\n\tcolorsInside = ColorPaletteCanvas.create_rectangle(x_pos,y_pos,x_pos+10,y_pos+10,fill = c,tags=(""{0}"".format(c)))\n\t#showing all the colors on the screen\n\tx_pos += 10\n\tif x_pos > 200:\n\t\ty_pos += 10\n\t\tx_pos = 0\n\n# current is a keyword. It points to the current object. Alternative: CURRENT\n# gets the current clicked color from the palette\nColorPaletteCanvas.tag_bind(""current"",\'<Button-1>\',get_color)\n#print(ColorPaletteCanvas.find_withtag(CURRENT[0])\n# prints what typeof item it is\n#print(ColorPaletteCanvas.type(colorsInside))\n#print(tags)\nroot.mainloop()'"
imageEd/colors.py,0,"b""COLORS = ['snow', 'ghost white', 'white smoke', 'gainsboro', 'floral white', 'old lace',\n    'linen', 'antique white', 'papaya whip', 'blanched almond', 'bisque', 'peach puff',\n    'navajo white', 'lemon chiffon', 'mint cream', 'azure', 'alice blue', 'lavender',\n    'lavender blush', 'misty rose', 'dark slate gray', 'dim gray', 'slate gray',\n    'light slate gray', 'gray', 'light grey', 'midnight blue', 'navy', 'cornflower blue', 'dark slate blue',\n    'slate blue', 'medium slate blue', 'light slate blue', 'medium blue', 'royal blue',  'blue',\n    'dodger blue', 'deep sky blue', 'sky blue', 'light sky blue', 'steel blue', 'light steel blue',\n    'light blue', 'powder blue', 'pale turquoise', 'dark turquoise', 'medium turquoise', 'turquoise',\n    'cyan', 'light cyan', 'cadet blue', 'medium aquamarine', 'aquamarine', 'dark green', 'dark olive green',\n    'dark sea green', 'sea green', 'medium sea green', 'light sea green', 'pale green', 'spring green',\n    'lawn green', 'medium spring green', 'green yellow', 'lime green', 'yellow green',\n    'forest green', 'olive drab', 'dark khaki', 'khaki', 'pale goldenrod', 'light goldenrod yellow',\n    'light yellow', 'yellow', 'gold', 'light goldenrod', 'goldenrod', 'dark goldenrod', 'rosy brown',\n    'indian red', 'saddle brown', 'sandy brown',\n    'dark salmon', 'salmon', 'light salmon', 'orange', 'dark orange',\n    'coral', 'light coral', 'tomato', 'orange red', 'red', 'hot pink', 'deep pink', 'pink', 'light pink',\n    'pale violet red', 'maroon', 'medium violet red', 'violet red',\n    'medium orchid', 'dark orchid', 'dark violet', 'blue violet', 'purple', 'medium purple',\n    'thistle', 'snow2', 'snow3',\n    'snow4', 'seashell2', 'seashell3', 'seashell4', 'AntiqueWhite1', 'AntiqueWhite2',\n    'AntiqueWhite3', 'AntiqueWhite4', 'bisque2', 'bisque3', 'bisque4', 'PeachPuff2',\n    'PeachPuff3', 'PeachPuff4', 'NavajoWhite2', 'NavajoWhite3', 'NavajoWhite4',\n    'LemonChiffon2', 'LemonChiffon3', 'LemonChiffon4', 'cornsilk2', 'cornsilk3',\n    'cornsilk4', 'ivory2', 'ivory3', 'ivory4', 'honeydew2', 'honeydew3', 'honeydew4',\n    'LavenderBlush2', 'LavenderBlush3', 'LavenderBlush4', 'MistyRose2', 'MistyRose3',\n    'MistyRose4', 'azure2', 'azure3', 'azure4', 'SlateBlue1', 'SlateBlue2', 'SlateBlue3',\n    'SlateBlue4', 'RoyalBlue1', 'RoyalBlue2', 'RoyalBlue3', 'RoyalBlue4', 'blue2', 'blue4',\n    'DodgerBlue2', 'DodgerBlue3', 'DodgerBlue4', 'SteelBlue1', 'SteelBlue2',\n    'SteelBlue3', 'SteelBlue4', 'DeepSkyBlue2', 'DeepSkyBlue3', 'DeepSkyBlue4',\n    'SkyBlue1', 'SkyBlue2', 'SkyBlue3', 'SkyBlue4', 'LightSkyBlue1', 'LightSkyBlue2',\n    'LightSkyBlue3', 'LightSkyBlue4', 'SlateGray1', 'SlateGray2', 'SlateGray3',\n    'SlateGray4', 'LightSteelBlue1', 'LightSteelBlue2', 'LightSteelBlue3',\n    'LightSteelBlue4', 'LightBlue1', 'LightBlue2', 'LightBlue3', 'LightBlue4',\n    'LightCyan2', 'LightCyan3', 'LightCyan4', 'PaleTurquoise1', 'PaleTurquoise2',\n    'PaleTurquoise3', 'PaleTurquoise4', 'CadetBlue1', 'CadetBlue2', 'CadetBlue3',\n    'CadetBlue4', 'turquoise1', 'turquoise2', 'turquoise3', 'turquoise4', 'cyan2', 'cyan3',\n    'cyan4', 'DarkSlateGray1', 'DarkSlateGray2', 'DarkSlateGray3', 'DarkSlateGray4',\n    'aquamarine2', 'aquamarine4', 'DarkSeaGreen1', 'DarkSeaGreen2', 'DarkSeaGreen3',\n    'DarkSeaGreen4', 'SeaGreen1', 'SeaGreen2', 'SeaGreen3', 'PaleGreen1', 'PaleGreen2',\n    'PaleGreen3', 'PaleGreen4', 'SpringGreen2', 'SpringGreen3', 'SpringGreen4',\n    'green2', 'green3', 'green4', 'chartreuse2', 'chartreuse3', 'chartreuse4',\n    'OliveDrab1', 'OliveDrab2', 'OliveDrab4', 'DarkOliveGreen1', 'DarkOliveGreen2',\n    'DarkOliveGreen3', 'DarkOliveGreen4', 'khaki1', 'khaki2', 'khaki3', 'khaki4',\n    'LightGoldenrod1', 'LightGoldenrod2', 'LightGoldenrod3', 'LightGoldenrod4',\n    'LightYellow2', 'LightYellow3', 'LightYellow4', 'yellow2', 'yellow3', 'yellow4',\n    'gold2', 'gold3', 'gold4', 'goldenrod1', 'goldenrod2', 'goldenrod3', 'goldenrod4',\n    'DarkGoldenrod1', 'DarkGoldenrod2', 'DarkGoldenrod3', 'DarkGoldenrod4',\n    'RosyBrown1', 'RosyBrown2', 'RosyBrown3', 'RosyBrown4', 'IndianRed1', 'IndianRed2',\n    'IndianRed3', 'IndianRed4', 'sienna1', 'sienna2', 'sienna3', 'sienna4', 'burlywood1',\n    'burlywood2', 'burlywood3', 'burlywood4', 'wheat1', 'wheat2', 'wheat3', 'wheat4', 'tan1',\n    'tan2', 'tan4', 'chocolate1', 'chocolate2', 'chocolate3', 'firebrick1', 'firebrick2',\n    'firebrick3', 'firebrick4', 'brown1', 'brown2', 'brown3', 'brown4', 'salmon1', 'salmon2',\n    'salmon3', 'salmon4', 'LightSalmon2', 'LightSalmon3', 'LightSalmon4', 'orange2',\n    'orange3', 'orange4', 'DarkOrange1', 'DarkOrange2', 'DarkOrange3', 'DarkOrange4',\n    'coral1', 'coral2', 'coral3', 'coral4', 'tomato2', 'tomato3', 'tomato4', 'OrangeRed2',\n    'OrangeRed3', 'OrangeRed4', 'red2', 'red3', 'red4', 'DeepPink2', 'DeepPink3', 'DeepPink4',\n    'HotPink1', 'HotPink2', 'HotPink3', 'HotPink4', 'pink1', 'pink2', 'pink3', 'pink4',\n    'LightPink1', 'LightPink2', 'LightPink3', 'LightPink4', 'PaleVioletRed1',\n    'PaleVioletRed2', 'PaleVioletRed3', 'PaleVioletRed4', 'maroon1', 'maroon2',\n    'maroon3', 'maroon4', 'VioletRed1', 'VioletRed2', 'VioletRed3', 'VioletRed4',\n    'magenta2', 'magenta3', 'magenta4', 'orchid1', 'orchid2', 'orchid3', 'orchid4', 'plum1',\n    'plum2', 'plum3', 'plum4', 'MediumOrchid1', 'MediumOrchid2', 'MediumOrchid3',\n    'MediumOrchid4', 'DarkOrchid1', 'DarkOrchid2', 'DarkOrchid3', 'DarkOrchid4',\n    'purple1', 'purple2', 'purple3', 'purple4', 'MediumPurple1', 'MediumPurple2',\n    'MediumPurple3', 'MediumPurple4', 'thistle1', 'thistle2', 'thistle3', 'thistle4',\n    'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8', 'gray9', 'gray10',\n    'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17', 'gray18', 'gray19',\n    'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26', 'gray27', 'gray28',\n    'gray29', 'gray30', 'gray31', 'gray32', 'gray33', 'gray34', 'gray35', 'gray36', 'gray37',\n    'gray38', 'gray39', 'gray40', 'gray42', 'gray43', 'gray44', 'gray45', 'gray46', 'gray47',\n    'gray48', 'gray49', 'gray50', 'gray51', 'gray52', 'gray53', 'gray54', 'gray55', 'gray56',\n    'gray57', 'gray58', 'gray59', 'gray60', 'gray61', 'gray62', 'gray63', 'gray64', 'gray65',\n    'gray66', 'gray67', 'gray68', 'gray69', 'gray70', 'gray71', 'gray72', 'gray73', 'gray74',\n    'gray75', 'gray76', 'gray77', 'gray78', 'gray79', 'gray80', 'gray81', 'gray82', 'gray83',\n    'gray84', 'gray85', 'gray86', 'gray87', 'gray88', 'gray89', 'gray90', 'gray91', 'gray92',\n    'gray93', 'gray94', 'gray95', 'gray97', 'gray98', 'gray99']"""
imageEd/imged.py,1,"b'import os\nimport random\nimport numpy as np\nfrom tkinter import *\nfrom PIL import ImageTk, Image\nfrom tkinter import filedialog\nfrom skimage import io,color\nfrom colors import COLORS\nfrom MoveWindow import MovableWindow\n\n\n\nBG_COLOR = \'#24272b\'\nSIZE = [800,600]\n\nIMAGE_PATH = ""empty""\n\n\nclass ImageOperations():\n\t# basic image operations\t\n\tdef __init__(self,path2img):\n\t\tself.path2img = path2img\n\n\t# converts an image as an array\n\tdef GetImageAsArray(self):\n\t\tself.image = self.path2img\n\t\tself.img2ar = []\n\t\ttry:\n\t\t\tself.img2ar = io.imread(self.image)\n\t\texcept Exception as e:\n\t\t\tprint(e)\n\t\treturn self.img2ar\n\n\t# converts the array to an image and saves\n\tdef SaveArray2Img(self,array,path = \'/home/freezer9/Desktop/\',imageName=\'ebab.png\'):\n\t\tself.array,self.imageName,self.path = array,imageName,path \n\t\tself.path = self.path + self.imageName\n\t\tio.imsave(self.path,self.array)\n\t\tprint(""Image saved @ {}"".format(self.path))\n\n\nclass ImageEffects():\n\tdef __init__(self):\n\t\tpass\n\n\tdef AddaBox(self,array,row,col,colorAr):\n\t\tself.array,self.row,self.col,self.colorAr = array,row,col,colorAr\n\t\tself.array[:self.row,:self.col] = self.colorAr\n\t\tprint(\'Added a box\')\n\t\treturn self.array\n\n\tdef ColorGradient(self,array,rainbwRow,rowHeight = \'NONE\'):\n\t\t# creates a spectrum of random colors\n\t\t# rainbwRow is the height of the box, max height depends on the image dimensions\n\t\tself.rowHeight = rowHeight\n\t\tself.rainbwRow = rainbwRow\n\t\tif self.rowHeight == \'MAX\':\n\t\t\tself.rainbwRow = max(array.shape)\n\t\tself.array = array\n\t\twhile self.rainbwRow > 0:\n\t\t\tself.array = self.AddaBox(self.array,self.rainbwRow,250,[random.randint(0,255),random.randint(0,255),random.randint(0,255)])\n\t\t\tself.rainbwRow -= 2\n\t\treturn self.array\n\n\tdef ColorPixelate(self,array):\n\t\t# changew the image into random color spots\n\t\tself.array = array\n\t\tself.maxNum = max(self.array.shape)\n\t\tfor row in range(0,self.maxNum):\n\t\t\tfor col in range(0,self.maxNum):\n\t\t\t\t# randomly change the color of 1px \n\t\t\t\tself.array[row,col] = [random.randint(0,255),random.randint(0,255),random.randint(0,255)]\n\t\treturn self.array\n\n\tdef Convert2Gray(self,array):\n\t\t# converts to grayscale\n\t\tself.array = array\n\t\treturn color.rgb2gray(self.array)\n\n\tdef grayscaleFilter1(self,array,TintMagnitude):\n\t\t# dim the gray scale or brighten it up\n\t\t# gray scale values range from 0 - 1 (sigmoid function to make a number range from 0-1)\n\t\tself.array,self.TintMagnitude = array,TintMagnitude\n\t\t# convert to gray\n\t\tself.array = self.Convert2Gray(self.array)\n\t\tself.array = (self.TintMagnitude * self.array)\n\t\treturn self.array\n\n\n# EDIT PICTURE \nclass PictureEdit(MovableWindow):\n\n\tdef __init__(self,parent):\n\t\tself.parent = parent\n\t\tself.PictureEditWin()\n\n\tdef PictureEditWin(self):\n\t\tself.PicEdWin = Toplevel(self.parent)\n\t\tself.PicEdWin.title(""Picture Effects"")\n\t\tself.PicEdWin.geometry(""300x300+900+150"")\n\t\tself.PicEdWin.config(bg = BG_COLOR)\n\t\tself.PicEdWin.resizable(0,0)\n\t\tself.PicEdWin.overrideredirect(1)\n\t\tMovableWindow.__init__(self,self.PicEdWin)\n\t\tself.grayLab = Label(self.PicEdWin,text = ""grayscale"",bg=BG_COLOR,fg = ""#fff"")\n\t\tself.grayLab.grid(row = 1,column=1,sticky=W,padx = 10)\n\t\tself.grayscaleSlider = Scale(self.PicEdWin, from_=0, to=100,orient=HORIZONTAL,\\\n\t\t\twidth = 10,bd = 0,bg = ""#333"",fg = \'white\',length = 250,highlightthickness=1)\n\t\tself.grayscaleSlider.grid(row = 2,column=1)\n\n\t\tself.okButton = Button(self.PicEdWin,text = ""ok"",command = self.getGrayScaleValue,bd = 0,bg = BG_COLOR,width = 1,\\\n\t\t\theight = 1).grid(row = 3,column=1,\\\n\t\t\tipadx = 1,ipady= 0)\n\n\tdef getGrayScaleValue(self):\n\t\t# return the slider value which ranges btwn 0 - 1\n\t\treturn self.grayscaleSlider.get()/100\n\n\t# find a way to get the image location into this stuff\n\tdef ConvertToGray(self,imPath):\n\t\tself.graytintMag = self.getGrayScaleValue()\n\t\tself.imPath = imPath\n\t\tself.imgOp = ImageOperations(self.imPath)\n\t\tself.imAr = self.imgOp.GetImageAsArray()\n\t\tself.imEffects = ImageEffects()\n\t\tself.imEffects.grayscaleFilter1(self.imAr,self.graytintMag)\n\n# Main Parent window class\nclass WindowApp(PictureEdit):\n\n\tdef __init__(self,master):\n\t\tself.master = master\n\t\tself.master.geometry(""800x600+200+100"")\n\t\tself.master.config(bg = BG_COLOR)\n\t\tself.master.title(\'ImgEd\')\n\t\tself.master.resizable(0,0)\n\t\t# container to hold the tools\n\t\tself.ToolBoxFrame = Frame(self.master,width = SIZE[0],height= 50,bg=""blue"")\n\t\tself.ToolBoxFrame.grid(row = 1,column= 1,padx = 10,pady = 5,sticky = W)\n\t\t# add icon to open img button\n\t\tself.openImgBtn = Button(self.ToolBoxFrame,command = self.open_img,width = 20,height = 20,bd = 0,cursor = ""hand2"")\n\t\tself.FolderOpenIcon = ImageTk.PhotoImage(file=""icons/folder-open-resize.png"")\n\t\tself.openImgBtn.config(image= self.FolderOpenIcon)\n\t\tself.openImgBtn.grid(row =  1,column=2,sticky = W)\n\t\t# create a button and add an icon \n\t\tself.BrushButton = Button(self.ToolBoxFrame,width = 20,height = 20,text = \'bb\',bd = 0,cursor = ""hand2"",command = self.StartDraw)\n\t\tself.BrushIcon = ImageTk.PhotoImage(file=""icons/brush-resize.png"")\n\t\tself.BrushButton.config(image = self.BrushIcon)\n\t\tself.BrushButton.grid(row = 1,column = 3)\n\t\t# camera edit button\n\t\tself.PicEditButton = Button(self.ToolBoxFrame,text = ""C"",width = 20,height = 20,bd = 0,cursor=\'hand2\',command=self.ShowPicEditor)\n\t\tself.PicEditIcon = ImageTk.PhotoImage(file=""icons/cam.png"")\n\t\tself.PicEditButton.config(image = self.PicEditIcon)\n\t\tself.PicEditButton.grid(row = 1,column = 4)\n\n\tdef ShowPicEditor(self):\n\t\tsuper().__init__(self.master)\n\t\t\n\n\tdef openfn(self):\n\t\tself.filename = filedialog.askopenfilename(title=\'open\')\n\t\treturn self.filename\n\n\tdef open_img(self):\n\t\ttry:\n\t\t\tself.path = self.openfn()\n\t\t\tself.master.title(self.path)\n\t\t\tself.DrawCanvas = Canvas(self.master,width = SIZE[0],height = SIZE[1],bg = \'#333\')\n\t\t\tself.DrawCanvas.grid(row = 2,column = 1)\n\t\t\tself.img = Image.open(self.path)\n\t\t\tself.img = self.img.resize((700, 500), Image.ANTIALIAS)\n\t\t\t# image converted to photoimg object\n\t\t\tself.img = ImageTk.PhotoImage(self.img)\n\t\t\tself.DrawCanvas.create_image(SIZE[0]/2,SIZE[1]/2,image=self.img)\n\t\t\t# convert the image into an numpy array for further processing\n\t\t\tself.imgIO = ImageOperations(self.path)\n\t\t\tself.imageAsArray = self.imgIO.GetImageAsArray()\n\t\texcept:\n\t\t\t# if the open file dialog box is closed without opening any image just ignore the error\n\t\t\tpass\n\n\tdef GetCurrentPath(self):\n\t\treturn self.path \n\n\t# function to draw stuff on the canvas\n\tdef StartDraw(self):\n\t\tself.BrushWin = EditWindow(self.master)\n\t\tself.BrushWin.BrushEffects()\n\t\t# callback function to draw the stuff\n\t\tself.master.bind(\'<B1-Motion>\',self.Draw)\n\n\tdef Draw(self,event,thickness = 5):\n\t\ttry:\n\t\t\tself.event = event\n\t\t\t# gets the current size of the brush\n\t\t\tself.thickness = self.BrushWin.refreshBrushthk()\n\t\t\tself.DrawCanvas.config(cursor=""tcross"")\n\t\t\tself.x,self.y = self.event.x,self.event.y\n\t\t\tself.point = self.DrawCanvas.create_oval(self.x,self.y,self.x+self.thickness,self.y+self.thickness,fill = COLORS[random.randint(0,len(COLORS)-1)])\n\t\t\tdel self.point\n\t\texcept:\n\t\t\tprint(""NOTHING TO DRAW ON YOU DUMBFUCK!"")\n\n\nclass EditWindow(MovableWindow):\n\n\tdef __init__(self,parent):\n\t\tself.parent = parent\n\t\tself.TopLevelXPos = 0\n\t\tself.TopLevelYPos = 0\n\t\t#self.path = path\n\t\t\n\tdef BrushEffects(self):\n\t\tself.editWin = Toplevel(self.parent)\n\t\tself.editWin.title(""Brush Effects"")\n\t\tself.editWin.geometry(""300x300+900+150"")\n\t\tself.editWin.config(bg = BG_COLOR)\n\t\tself.editWin.resizable(0,0)\n\t\tself.editWin.overrideredirect(1)\n\t\t#  bind the mouse-button to the window, so that when\n\t\t# the user holds the window it moves\n\t\t# create a canvas to drag the window, so that it doesn\'t affect oher widgets\n\t\t# call the movable window class\n\t\tMovableWindow.__init__(self,self.editWin)\n\t\t# BRUSH-THICKNESS \n\t\tself.thicknessLabel = Label(self.editWin,text = ""Thickness :"",bg = BG_COLOR,fg=""snow"")\n\t\tself.thicknessLabel.grid(row = 1,column=1,sticky = W)\n\t\t# slider\n\t\tself.BrushThickness = Scale(self.editWin, from_=0, to=100,orient=HORIZONTAL,width = 10,bd = 0,bg = ""#333"",fg = \'white\',\\\n\t\t\tlength = 250)\n\t\tself.BrushThickness.grid(row=2,column=1,padx = 5)\n\t\t# refresh thickness button\n\t\tself.RefreshThicknessBtn = ImageTk.PhotoImage(file=""icons/tick.png"")\n\t\tself.SetBrushThicknessBtn = Button(self.editWin,width=20,height=20,text = \'v\',bd = 0,command=self.refreshBrushthk,cursor = ""hand2"")\n\t\tself.SetBrushThicknessBtn.config(image = self.RefreshThicknessBtn)\n\t\tself.SetBrushThicknessBtn.grid(row=2,column=2,padx = 5)\n\n\t\t# COLOR PALETTE\n\t\tself.ColorPaletteLabel = Label(self.editWin,text = \'Color Palette\',fg = \'white\',bg = BG_COLOR)\n\t\tself.ColorPaletteLabel.grid(row = 3,column = 1,pady = 5,sticky =W)\n\t\tself.ColorPaletteCanvas = Canvas(self.editWin,width = 210,height = 100,bg = \'white\',cursor = \'tcross\')\n\t\tself.ColorPaletteCanvas.grid(row = 4,column=1,pady = 2)\n\t\t# colors inside the palette\n\t\tx_pos = 0\n\t\ty_pos = 0\n\t\t# final x coord of the canvas is 200\n\t\t# and y coord is 100. -20 from them\n\t\tfor c in COLORS:\n\t\t\tself.colorsInside = self.ColorPaletteCanvas.create_rectangle(x_pos,y_pos,x_pos+10,y_pos+10,fill = c)\n\t\t\t#showing all the colors on the screen\n\t\t\tx_pos += 10\n\t\t\tif x_pos > 200:\n\t\t\t\ty_pos += 10\n\t\t\t\tx_pos = 0\n\t\t\n\tdef refreshBrushthk(self):\n\t\t# store the thickness to use in the label\n\t\tself.LabelThickness = self.BrushThickness.get()\n\t\tself.thicknessLabel.config(text = ""Thickness : {}"".format(self.LabelThickness))\n\t\treturn self.BrushThickness.get()\n\n\n\n\ndef Tester(imgPath):\n\tim = ImageOperations(imgPath)\n\teffects = ImageEffects()\n\tbab = im.GetImageAsArray()\n\toriginal_image = bab # store a copy of the array\n\timageShape = bab.shape \n\timageRow,imageCol = imageShape[0],imageShape[1]\n\t#bab = effects.AddaBox(bab,startRow,250,[0,0,0])\n\t#bab = effects.ColorGradient(bab,250,\'MAX\')\n\t#bab = effects.ColorPixelate(bab)\n\tbab = effects.brightORdimGray(bab,[0.5])\n\tim.SaveArray2Img(bab)\n\tos.system(\'gnome-open {}\\n\\n\'.format(\'ebab.png\'))\n\ndef TestSigmoid(x):\n\treturn 1.0 / (1.0 + np.exp(-1.0 * x))\n\ndef run():\n\troot = Tk()\n\twin = WindowApp(root)\n\troot.mainloop()\n\n#Tester(\'baboon.png\')\nrun()\n\n\n\n'"
imageEd/resizeimg.py,0,"b'from tkinter import *\nfrom tkinter import filedialog\nfrom PIL import ImageTk, Image\nimport random\n\ndef openfn():\n\tfilename = filedialog.askopenfilename(title=\'open\')\n\treturn filename\n\ndef resizeImage():\n\tpath = openfn()\n\timage = Image.open(path)\n\timage = image.resize((20,20),Image.ANTIALIAS)\n\timage.save(\'{}.png\'.format(random.randint(12345,21322)))\n\tprint(\'resized and Saved!\')\n\nroot = Tk()\nroot.resizable(0,0)\nroot.geometry(""200x200"")\nbtn = Button(root,text=\'resize image\',command=resizeImage).pack()\nroot.mainloop()\n\n\n'"
