file_path,api_count,code
notebooks/helpers_05_08.py,7,"b""\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom ipywidgets import interact\n\n\ndef visualize_tree(estimator, X, y, boundaries=True,\n                   xlim=None, ylim=None, ax=None):\n    ax = ax or plt.gca()\n    \n    # Plot the training points\n    ax.scatter(X[:, 0], X[:, 1], c=y, s=30, cmap='viridis',\n               clim=(y.min(), y.max()), zorder=3)\n    ax.axis('tight')\n    ax.axis('off')\n    if xlim is None:\n        xlim = ax.get_xlim()\n    if ylim is None:\n        ylim = ax.get_ylim()\n    \n    # fit the estimator\n    estimator.fit(X, y)\n    xx, yy = np.meshgrid(np.linspace(*xlim, num=200),\n                         np.linspace(*ylim, num=200))\n    Z = estimator.predict(np.c_[xx.ravel(), yy.ravel()])\n\n    # Put the result into a color plot\n    n_classes = len(np.unique(y))\n    Z = Z.reshape(xx.shape)\n    contours = ax.contourf(xx, yy, Z, alpha=0.3,\n                           levels=np.arange(n_classes + 1) - 0.5,\n                           cmap='viridis', clim=(y.min(), y.max()),\n                           zorder=1)\n\n    ax.set(xlim=xlim, ylim=ylim)\n    \n    # Plot the decision boundaries\n    def plot_boundaries(i, xlim, ylim):\n        if i >= 0:\n            tree = estimator.tree_\n        \n            if tree.feature[i] == 0:\n                ax.plot([tree.threshold[i], tree.threshold[i]], ylim, '-k', zorder=2)\n                plot_boundaries(tree.children_left[i],\n                                [xlim[0], tree.threshold[i]], ylim)\n                plot_boundaries(tree.children_right[i],\n                                [tree.threshold[i], xlim[1]], ylim)\n        \n            elif tree.feature[i] == 1:\n                ax.plot(xlim, [tree.threshold[i], tree.threshold[i]], '-k', zorder=2)\n                plot_boundaries(tree.children_left[i], xlim,\n                                [ylim[0], tree.threshold[i]])\n                plot_boundaries(tree.children_right[i], xlim,\n                                [tree.threshold[i], ylim[1]])\n            \n    if boundaries:\n        plot_boundaries(0, xlim, ylim)\n\n\ndef plot_tree_interactive(X, y):\n    def interactive_tree(depth=5):\n        clf = DecisionTreeClassifier(max_depth=depth, random_state=0)\n        visualize_tree(clf, X, y)\n\n    return interact(interactive_tree, depth=[1, 5])\n\n\ndef randomized_tree_interactive(X, y):\n    N = int(0.75 * X.shape[0])\n    \n    xlim = (X[:, 0].min(), X[:, 0].max())\n    ylim = (X[:, 1].min(), X[:, 1].max())\n    \n    def fit_randomized_tree(random_state=0):\n        clf = DecisionTreeClassifier(max_depth=15)\n        i = np.arange(len(y))\n        rng = np.random.RandomState(random_state)\n        rng.shuffle(i)\n        visualize_tree(clf, X[i[:N]], y[i[:N]], boundaries=False,\n                       xlim=xlim, ylim=ylim)\n    \n    interact(fit_randomized_tree, random_state=[0, 100]);"""
tools/add_book_info.py,0,"b'import os\n\nimport nbformat\nfrom nbformat.v4.nbbase import new_markdown_cell\n\nfrom generate_contents import iter_notebooks, NOTEBOOK_DIR\n\n\nBOOK_COMMENT = ""<!--BOOK_INFORMATION-->""\n\n\nBOOK_INFO = BOOK_COMMENT + """"""\n<img align=""left"" style=""padding-right:10px;"" src=""figures/PDSH-cover-small.png"">\n\n*This notebook contains an excerpt from the [Python Data Science Handbook](http://shop.oreilly.com/product/0636920034919.do) by Jake VanderPlas; the content is available [on GitHub](https://github.com/jakevdp/PythonDataScienceHandbook).*\n\n*The text is released under the [CC-BY-NC-ND license](https://creativecommons.org/licenses/by-nc-nd/3.0/us/legalcode), and code is released under the [MIT license](https://opensource.org/licenses/MIT). If you find this content useful, please consider supporting the work by [buying the book](http://shop.oreilly.com/product/0636920034919.do)!*""""""\n\n\ndef add_book_info():\n    for nb_name in iter_notebooks():\n        nb_file = os.path.join(NOTEBOOK_DIR, nb_name)\n        nb = nbformat.read(nb_file, as_version=4)\n\n        is_comment = lambda cell: cell.source.startswith(BOOK_COMMENT)\n\n        if is_comment(nb.cells[0]):\n            print(\'- amending comment for {0}\'.format(nb_name))\n            nb.cells[0].source = BOOK_INFO\n        else:\n            print(\'- inserting comment for {0}\'.format(nb_name))\n            nb.cells.insert(0, new_markdown_cell(BOOK_INFO))\n        nbformat.write(nb, nb_file)\n\n\nif __name__ == \'__main__\':\n    add_book_info()\n'"
tools/add_navigation.py,0,"b'import os\nimport itertools\n\nfrom ipykernel import kernelspec as ks\nimport nbformat\nfrom nbformat.v4.nbbase import new_markdown_cell\n\nfrom generate_contents import NOTEBOOK_DIR, REG, iter_notebooks, get_notebook_title\n\n\ndef prev_this_next(it):\n    a, b, c = itertools.tee(it,3)\n    next(c)\n    return zip(itertools.chain([None], a), b, itertools.chain(c, [None]))\n\n\nPREV_TEMPLATE = ""< [{title}]({url}) ""\nCONTENTS = ""| [Contents](Index.ipynb) |""\nNEXT_TEMPLATE = "" [{title}]({url}) >""\nNAV_COMMENT = ""<!--NAVIGATION-->\\n""\n\nCOLAB_LINK = """"""\n\n<a href=""https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/{notebook_filename}""><img align=""left"" src=""https://colab.research.google.com/assets/colab-badge.svg"" alt=""Open in Colab"" title=""Open and Execute in Google Colaboratory""></a>\n""""""\n\n\ndef iter_navbars():\n    for prev_nb, nb, next_nb in prev_this_next(iter_notebooks()):\n        navbar = NAV_COMMENT\n        if prev_nb:\n            navbar += PREV_TEMPLATE.format(title=get_notebook_title(prev_nb),\n                                           url=prev_nb)\n        navbar += CONTENTS\n        if next_nb:\n            navbar += NEXT_TEMPLATE.format(title=get_notebook_title(next_nb),\n                                           url=next_nb)\n\n        navbar += COLAB_LINK.format(notebook_filename=os.path.basename(nb))\n            \n        yield os.path.join(NOTEBOOK_DIR, nb), navbar\n\n\ndef write_navbars():\n    for nb_name, navbar in iter_navbars():\n        nb = nbformat.read(nb_name, as_version=4)\n        nb_file = os.path.basename(nb_name)\n        is_comment = lambda cell: cell.source.startswith(NAV_COMMENT)\n\n        if is_comment(nb.cells[1]):\n            print(""- amending navbar for {0}"".format(nb_file))\n            nb.cells[1].source = navbar\n        else:\n            print(""- inserting navbar for {0}"".format(nb_file))\n            nb.cells.insert(1, new_markdown_cell(source=navbar))\n\n        if is_comment(nb.cells[-1]):\n            nb.cells[-1].source = navbar\n        else:\n            nb.cells.append(new_markdown_cell(source=navbar))\n        nbformat.write(nb, nb_name)\n\n\nif __name__ == \'__main__\':\n    write_navbars()\n'"
tools/fix_kernelspec.py,0,"b'import os\n\nimport nbformat\n\nfrom generate_contents import iter_notebooks, NOTEBOOK_DIR\n\ndef fix_kernelspec():\n    for nb_name in iter_notebooks():\n        nb_file = os.path.join(NOTEBOOK_DIR, nb_name)\n        nb = nbformat.read(nb_file, as_version=4)\n\n        print(""- Updating kernelspec for {0}"".format(nb_name))\n        nb[\'metadata\'][\'kernelspec\'][\'display_name\'] = \'Python 3\'\n\n        nbformat.write(nb, nb_file)\n\n\nif __name__ == \'__main__\':\n    fix_kernelspec()\n'"
tools/generate_contents.py,0,"b'import os\nimport re\nimport itertools\nimport nbformat\n\nNOTEBOOK_DIR = os.path.join(os.path.dirname(__file__), \'..\', \'notebooks\')\n\nCHAPTERS = {""00"": ""Preface"",\n            ""01"": ""IPython: Beyond Normal Python"",\n            ""02"": ""NumPy"",\n            ""03"": ""Pandas"",\n            ""04"": ""Matplotlib"",\n            ""05"": ""Machine Learning""}\n\nREG = re.compile(r\'(\\d\\d)\\.(\\d\\d)-(.*)\\.ipynb\')\n\n\ndef iter_notebooks():\n    return sorted(nb for nb in os.listdir(NOTEBOOK_DIR) if REG.match(nb))\n\n\ndef get_notebook_title(nb_file):\n    nb = nbformat.read(os.path.join(NOTEBOOK_DIR, nb_file), as_version=4)\n    for cell in nb.cells:\n        if cell.source.startswith(\'#\'):\n            return cell.source[1:].splitlines()[0].strip()\n\n\ndef gen_contents(directory=None):\n    for nb in iter_notebooks():\n        if directory:\n            nb_url = os.path.join(directory, nb)\n        else:\n            nb_url = nb\n        chapter, section, title = REG.match(nb).groups()\n        title = get_notebook_title(nb)\n        if section == \'00\':\n            if chapter in [\'00\', \'06\']:\n                yield \'\\n### [{0}]({1})\'.format(title, nb_url)\n            else:\n                yield \'\\n### [{0}. {1}]({2})\'.format(int(chapter),\n                                                     title, nb_url)\n        else:\n            yield ""- [{0}]({1})"".format(title, nb_url)\n\n\ndef print_contents(directory=None):\n    print(\'\\n\'.join(gen_contents(directory)))\n\n\nif __name__ == \'__main__\':\n    print_contents()\n    print(\'\\n\', 70 * \'#\', \'\\n\')\n    print_contents(\'http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/\')\n'"
website/copy_notebooks.py,0,"b'""""""\nThis script copies all notebooks from the book into the website directory, and\ncreates pages which wrap them and link together.\n""""""\nimport os\nimport nbformat\nimport shutil\n\nPAGEFILE = """"""title: {title}\nurl:\nsave_as: {htmlfile}\nTemplate: {template}\n\n{{% notebook notebooks/{notebook_file} cells[{cells}] %}}\n""""""\n\nINTRO_TEXT = """"""This website contains the full text of the [Python Data Science Handbook](http://shop.oreilly.com/product/0636920034919.do) by Jake VanderPlas; the content is available [on GitHub](https://github.com/jakevdp/PythonDataScienceHandbook) in the form of Jupyter notebooks.\n\nThe text is released under the [CC-BY-NC-ND license](https://creativecommons.org/licenses/by-nc-nd/3.0/us/legalcode), and code is released under the [MIT license](https://opensource.org/licenses/MIT).\n\nIf you find this content useful, please consider supporting the work by [buying the book](http://shop.oreilly.com/product/0636920034919.do)!\n""""""\n\n\ndef abspath_from_here(*args):\n    here = os.path.dirname(__file__)\n    path = os.path.join(here, *args)\n    return os.path.abspath(path)\n\nNB_SOURCE_DIR = abspath_from_here(\'..\', \'notebooks\')\nNB_DEST_DIR = abspath_from_here(\'content\', \'notebooks\')\nPAGE_DEST_DIR = abspath_from_here(\'content\', \'pages\')\n\n\ndef copy_notebooks():\n    if not os.path.exists(NB_DEST_DIR):\n        os.makedirs(NB_DEST_DIR)\n    if not os.path.exists(PAGE_DEST_DIR):\n        os.makedirs(PAGE_DEST_DIR)\n\n    nblist = sorted(nb for nb in os.listdir(NB_SOURCE_DIR)\n                    if nb.endswith(\'.ipynb\'))\n    name_map = {nb: nb.rsplit(\'.\', 1)[0].lower() + \'.html\'\n                for nb in nblist}\n\n    figsource = abspath_from_here(\'..\', \'notebooks\', \'figures\')\n    figdest = abspath_from_here(\'content\', \'figures\')\n\n    if os.path.exists(figdest):\n        shutil.rmtree(figdest)\n    shutil.copytree(figsource, figdest)\n\n    figurelist = os.listdir(abspath_from_here(\'content\', \'figures\'))\n    figure_map = {os.path.join(\'figures\', fig) : os.path.join(\'/PythonDataScienceHandbook/figures\', fig)\n                  for fig in figurelist}\n\n    for nb in nblist:\n        base, ext = os.path.splitext(nb)\n        print(\'-\', nb)\n\n        content = nbformat.read(os.path.join(NB_SOURCE_DIR, nb),\n                                as_version=4)\n\n        if nb == \'Index.ipynb\':\n            # content[0] is the title\n            # content[1] is the cover image\n            # content[2] is the license\n            cells = \'1:\'\n            template = \'page\'\n            title = \'Python Data Science Handbook\'\n            content.cells[2].source = INTRO_TEXT\n        else:\n            # content[0] is the book information\n            # content[1] is the navigation bar\n            # content[2] is the title\n            cells = \'2:\'\n            template = \'booksection\'\n            title = content.cells[2].source\n            if not title.startswith(\'#\') or len(title.splitlines()) > 1:\n                raise ValueError(\'title not found in third cell\')\n            title = title.lstrip(\'#\').strip()\n\n            # put nav below title\n            content.cells.insert(0, content.cells.pop(2))\n\n        # Replace internal URLs and figure links in notebook\n        for cell in content.cells:\n            if cell.cell_type == \'markdown\':\n                for nbname, htmlname in name_map.items():\n                    if nbname in cell.source:\n                        cell.source = cell.source.replace(nbname, htmlname)\n                for figname, newfigname in figure_map.items():\n                    if figname in cell.source:\n                        cell.source = cell.source.replace(figname, newfigname)\n            if cell.source.startswith(""<!--NAVIGATION-->""):\n                # Undo replacement of notebook link in the colab badge\n                cell.source = nb.join(cell.source.rsplit(name_map[nb], 1))\n\n        nbformat.write(content, os.path.join(NB_DEST_DIR, nb))\n\n        pagefile = os.path.join(PAGE_DEST_DIR, base + \'.md\')\n        htmlfile = base.lower() + \'.html\'\n        with open(pagefile, \'w\') as f:\n            f.write(PAGEFILE.format(title=title,\n                                    htmlfile=htmlfile,\n                                    notebook_file=nb,\n                                    template=template,\n                                    cells=cells))\n\nif __name__ == \'__main__\':\n    copy_notebooks()\n'"
website/fabfile.py,0,"b'from fabric.api import *\nimport fabric.contrib.project as project\nimport os\nimport shutil\nimport sys\nimport SocketServer\n\nfrom pelican.server import ComplexHTTPRequestHandler\n\n# Local path configuration (can be absolute or relative to fabfile)\nenv.deploy_path = \'output\'\nDEPLOY_PATH = env.deploy_path\n\n# Remote server configuration\nproduction = \'root@localhost:22\'\ndest_path = \'/var/www\'\n\n# Rackspace Cloud Files configuration settings\nenv.cloudfiles_username = \'my_rackspace_username\'\nenv.cloudfiles_api_key = \'my_rackspace_api_key\'\nenv.cloudfiles_container = \'my_cloudfiles_container\'\n\n# Github Pages configuration\nenv.github_pages_branch = ""master""\n\n# Port for `serve`\nPORT = 8000\n\ndef clean():\n    """"""Remove generated files""""""\n    if os.path.isdir(DEPLOY_PATH):\n        shutil.rmtree(DEPLOY_PATH)\n        os.makedirs(DEPLOY_PATH)\n\ndef build():\n    """"""Build local version of site""""""\n    local(\'pelican -s pelicanconf.py\')\n\ndef rebuild():\n    """"""`build` with the delete switch""""""\n    local(\'pelican -d -s pelicanconf.py\')\n\ndef regenerate():\n    """"""Automatically regenerate site upon file modification""""""\n    local(\'pelican -r -s pelicanconf.py\')\n\ndef serve():\n    """"""Serve site at http://localhost:8000/""""""\n    os.chdir(env.deploy_path)\n\n    class AddressReuseTCPServer(SocketServer.TCPServer):\n        allow_reuse_address = True\n\n    server = AddressReuseTCPServer((\'\', PORT), ComplexHTTPRequestHandler)\n\n    sys.stderr.write(\'Serving on port {0} ...\\n\'.format(PORT))\n    server.serve_forever()\n\ndef reserve():\n    """"""`build`, then `serve`""""""\n    build()\n    serve()\n\ndef preview():\n    """"""Build production version of site""""""\n    local(\'pelican -s publishconf.py\')\n\ndef cf_upload():\n    """"""Publish to Rackspace Cloud Files""""""\n    rebuild()\n    with lcd(DEPLOY_PATH):\n        local(\'swift -v -A https://auth.api.rackspacecloud.com/v1.0 \'\n              \'-U {cloudfiles_username} \'\n              \'-K {cloudfiles_api_key} \'\n              \'upload -c {cloudfiles_container} .\'.format(**env))\n\n@hosts(production)\ndef publish():\n    """"""Publish to production via rsync""""""\n    local(\'pelican -s publishconf.py\')\n    project.rsync_project(\n        remote_dir=dest_path,\n        exclude="".DS_Store"",\n        local_dir=DEPLOY_PATH.rstrip(\'/\') + \'/\',\n        delete=True,\n        extra_opts=\'-c\',\n    )\n\ndef gh_pages():\n    """"""Publish to GitHub Pages""""""\n    rebuild()\n    local(""ghp-import -b {github_pages_branch} {deploy_path} -p"".format(**env))\n'"
website/pelicanconf.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*- #\nfrom __future__ import unicode_literals\n\nAUTHOR = \'Jake VanderPlas\'\nSITENAME = \'Python Data Science Handbook\'\nSITESUBTITLE = u\'Essential Tools for Working with Data\'\nSITEURL = \'\'\nSITESUBURL = \'PythonDataScienceHandbook/\'\nPATH = \'content\'\nTIMEZONE = \'America/Los_Angeles\'\nDEFAULT_LANG = \'en\'\n\n# Feed generation is usually not desired when developing\nFEED_ALL_ATOM = None\nCATEGORY_FEED_ATOM = None\nTRANSLATION_FEED_ATOM = None\nAUTHOR_FEED_ATOM = None\nAUTHOR_FEED_RSS = None\n\n# Set the article URL\nARTICLE_URL = \'blog/{date:%Y}/{date:%m}/{date:%d}/{slug}/\'\nARTICLE_SAVE_AS = \'blog/{date:%Y}/{date:%m}/{date:%d}/{slug}/index.html\'\n\nDEFAULT_PAGINATION = 10\n\n# Uncomment following line if you want document-relative URLs when developing\n#RELATIVE_URLS = True\n\n#MARKUP = (\'md\', \'ipynb\')\n#PLUGINS = [\'ipynb.markup\']\n\nMARKUP = [\'md\']\nPLUGIN_PATHS = [\'./plugins\', \'./plugins/pelican-plugins\']\nPLUGINS = [\n    \'summary\',       # auto-summarizing articles\n    \'feed_summary\',  # use summaries for RSS, not full articles\n    \'ipynb.liquid\',  # for embedding notebooks\n    \'liquid_tags.img\',  # embedding images\n    \'liquid_tags.video\',  # embedding videos\n    \'liquid_tags.include_code\',  # including code blocks\n    \'liquid_tags.literal\'\n]\nIGNORE_FILES = [\'.ipynb_checkpoints\']\n\n# for liquid tags\nCODE_DIR = \'downloads/code\'\nNOTEBOOK_DIR = \'downloads/notebooks\'\n\n# THEME SETTINGS\nTHEME = \'./theme/\'\n\nABOUT_PAGE = \'/pages/about.html\'\nTWITTER_USERNAME = \'jakevdp\'\nGITHUB_USERNAME = \'jakevdp\'\nSTACKOVERFLOW_ADDRESS = \'http://stackoverflow.com/users/2937831/jakevdp\'\nAUTHOR_WEBSITE = \'http://vanderplas.com\'\nAUTHOR_BLOG = \'http://jakevdp.github.io\'\nAUTHOR_CV = ""http://staff.washington.edu/jakevdp/media/pdfs/CV.pdf""\nSHOW_ARCHIVES = True\nSHOW_FEED = False  # Need to address large feeds\n\nENABLE_MATHJAX = True\n\nSTATIC_PATHS = [\'images\', \'figures\', \'videos\', \'downloads\', \'favicon.ico\']\n\n# Footer info\n\nLICENSE_URL = ""https://github.com/jakevdp/jakevdp.github.io-source/blob/master/LICENSE""\nLICENSE = ""MIT""\n'"
website/publishconf.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*- #\nfrom __future__ import unicode_literals\n\n# This file is only used if you use `make publish` or\n# explicitly specify it as your config file.\n\nimport os\nimport sys\nsys.path.append(os.curdir)\nfrom pelicanconf import *\n\nSITEURL = \'http://jakevdp.github.io/PythonDataScienceHandbook\'\nRELATIVE_URLS = False\n\nSHOW_FEED = False\nFEED_ALL_ATOM = \'feeds/all.atom.xml\'\nCATEGORY_FEED_ATOM = \'feeds/%s.atom.xml\'\nFEED_USE_SUMMARY = True  # from the feed_summary plugin\n\nDELETE_OUTPUT_DIRECTORY = True\n\nDISQUS_SITENAME = ""pythonicperambulations""\nGOOGLE_ANALYTICS = ""UA-34061646-1""\n'"
