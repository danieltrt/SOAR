file_path,api_count,code
fuzzer/generator.py,2,"b'import random\nimport numpy as np\nimport pickle\n\ntry:\n    with open(\'data.pickle\', \'rb\') as f:\n        callables, data_possibilities, data_types = pickle.load(f)\nexcept FileNotFoundError:\n    exclude = [\'lookfor\', \'memmap\', \'fromregex\', \'fromfile\', \'chararray\',\n               \'show_config\', \'save\', \'savez\', \'savez_compressed\',\n               \'int_asbuffer\']\n\n    callables = [\'np.\'+a\n                 for a in dir(np)\n                 if a not in exclude and callable(getattr(np,a))]\n\n    callables += [\'\']  # Allows creation of tuples :)\n\n    data_possibilities = [\n        \'""A""\', \'(""A""*0x100)\', \'(""A""*0x1000)\',\n        \'0\', \'1\', \'-1\',\n        \'(2**32)\', \'(2**32+1)\', \'(2**32-1)\',\n        \'(2**64)\', \'(2**64+1)\', \'(2**64-1)\',\n        \'[]\',\'()\',\'{}\', \'set()\',\n        \'(1,)\', \'(""A"",)\',\n    ]\n\n    data_types = set()\n\n\ndef generate():\n    c = random.choice(callables)\n    vals = \', \'.join(\n        random.choice(data_possibilities)\n        for _ in range(random.randint(0, 5))\n    )\n    t = ""%s(%s)"" % (c, vals)\n\n    print (""-----------------------------------\\n%s\\n--------------"" % t)\n\n    return t\n\ndef register(t):\n    te = eval(t, {\'np\':np})\n    tt = str(type(te))\n    if (tt not in data_types) or (random.randint(0, 10**5) == 0):\n        data_possibilities.append(t)\n        data_types.add(tt)\n        for a in dir(te):\n            try:\n                if callable(getattr(te,a)):\n                    callables.append(t + \'.\' + a)\n            except TypeError: # Happens sometimes for data attribute of np.Str_ objects\n                pass\n\n        with open(\'data.pickle\', \'wb\') as f:\n            pickle.dump((callables, data_possibilities, data_types), f)\n'"
fuzzer/main.py,0,"b'import generator\nfrom ctypes import CDLL\nimport numpy as np\n\n# Initializes the harness and sets it up for work\nharness = CDLL(""harness/harness.so"")\n\nwhile True:\n    t = generator.generate()\n    harness.register_testcase(bytes(\'import numpy as np\\n\'+t, \'ascii\'))\n    try:\n        exec(t, {\'np\':np})\n    except:\n        # If the exec fails, then we should not store\n        continue\n    generator.register(t)\n'"
