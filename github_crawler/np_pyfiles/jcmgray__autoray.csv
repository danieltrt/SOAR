file_path,api_count,code
setup.py,0,"b'from setuptools import setup, find_packages\nimport versioneer\n\n\ndef readme():\n    with open(\'README.rst\') as f:\n        import re\n        long_desc = f.read()\n        # strip out the raw html images\n        long_desc = re.sub(\'\\.\\. raw::[\\S\\s]*?>\\n\\n\', """", long_desc)\n        return long_desc\n\n\nshort_desc = (\'Write backend agnostic numeric code \'\n              \'compatible with any numpy-ish array library.\')\n\nsetup(\n    name=\'autoray\',\n    description=short_desc,\n    long_description=readme(),\n    url=\'http://github.com/jcmgray/autoray\',\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    author=\'Johnnie Gray\',\n    author_email=""johnniemcgray@gmail.com"",\n    license=\'Apache\',\n    packages=find_packages(exclude=[\'deps\', \'tests*\']),\n    install_requires=[\n        \'numpy\',\n    ],\n    extras_require={\n        \'tests\': [\n            \'coverage\',\n            \'pytest\',\n            \'pytest-cov\',\n        ],\n    },\n    python_requires=\'>=3.5\',\n    classifiers=[\n        \'Development Status :: 3 - Alpha\',\n        \'License :: OSI Approved :: Apache Software License\',\n        \'Programming Language :: Python :: 3\',\n        \'Programming Language :: Python :: 3.5\',\n        \'Programming Language :: Python :: 3.6\',\n        \'Programming Language :: Python :: 3.7\',\n        \'Programming Language :: Python :: 3.8\',\n    ],\n    keywords=\'array agnostic numeric numpy cupy dask tensorflow jax autograd\',\n)\n'"
versioneer.py,0,"b'\n# Version: 0.18\n\n""""""The Versioneer - like a rocketeer, but for versions.\n\nThe Versioneer\n==============\n\n* like a rocketeer, but for versions!\n* https://github.com/warner/python-versioneer\n* Brian Warner\n* License: Public Domain\n* Compatible With: python2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, and pypy\n* [![Latest Version]\n(https://pypip.in/version/versioneer/badge.svg?style=flat)\n](https://pypi.python.org/pypi/versioneer/)\n* [![Build Status]\n(https://travis-ci.org/warner/python-versioneer.png?branch=master)\n](https://travis-ci.org/warner/python-versioneer)\n\nThis is a tool for managing a recorded version number in distutils-based\npython projects. The goal is to remove the tedious and error-prone ""update\nthe embedded version string"" step from your release process. Making a new\nrelease should be as easy as recording a new tag in your version-control\nsystem, and maybe making new tarballs.\n\n\n## Quick Install\n\n* `pip install versioneer` to somewhere to your $PATH\n* add a `[versioneer]` section to your setup.cfg (see below)\n* run `versioneer install` in your source tree, commit the results\n\n## Version Identifiers\n\nSource trees come from a variety of places:\n\n* a version-control system checkout (mostly used by developers)\n* a nightly tarball, produced by build automation\n* a snapshot tarball, produced by a web-based VCS browser, like github\'s\n  ""tarball from tag"" feature\n* a release tarball, produced by ""setup.py sdist"", distributed through PyPI\n\nWithin each source tree, the version identifier (either a string or a number,\nthis tool is format-agnostic) can come from a variety of places:\n\n* ask the VCS tool itself, e.g. ""git describe"" (for checkouts), which knows\n  about recent ""tags"" and an absolute revision-id\n* the name of the directory into which the tarball was unpacked\n* an expanded VCS keyword ($Id$, etc)\n* a `_version.py` created by some earlier build step\n\nFor released software, the version identifier is closely related to a VCS\ntag. Some projects use tag names that include more than just the version\nstring (e.g. ""myproject-1.2"" instead of just ""1.2""), in which case the tool\nneeds to strip the tag prefix to extract the version identifier. For\nunreleased software (between tags), the version identifier should provide\nenough information to help developers recreate the same tree, while also\ngiving them an idea of roughly how old the tree is (after version 1.2, before\nversion 1.3). Many VCS systems can report a description that captures this,\nfor example `git describe --tags --dirty --always` reports things like\n""0.7-1-g574ab98-dirty"" to indicate that the checkout is one revision past the\n0.7 tag, has a unique revision id of ""574ab98"", and is ""dirty"" (it has\nuncommitted changes.\n\nThe version identifier is used for multiple purposes:\n\n* to allow the module to self-identify its version: `myproject.__version__`\n* to choose a name and prefix for a \'setup.py sdist\' tarball\n\n## Theory of Operation\n\nVersioneer works by adding a special `_version.py` file into your source\ntree, where your `__init__.py` can import it. This `_version.py` knows how to\ndynamically ask the VCS tool for version information at import time.\n\n`_version.py` also contains `$Revision$` markers, and the installation\nprocess marks `_version.py` to have this marker rewritten with a tag name\nduring the `git archive` command. As a result, generated tarballs will\ncontain enough information to get the proper version.\n\nTo allow `setup.py` to compute a version too, a `versioneer.py` is added to\nthe top level of your source tree, next to `setup.py` and the `setup.cfg`\nthat configures it. This overrides several distutils/setuptools commands to\ncompute the version when invoked, and changes `setup.py build` and `setup.py\nsdist` to replace `_version.py` with a small static file that contains just\nthe generated version data.\n\n## Installation\n\nSee [INSTALL.md](./INSTALL.md) for detailed installation instructions.\n\n## Version-String Flavors\n\nCode which uses Versioneer can learn about its version string at runtime by\nimporting `_version` from your main `__init__.py` file and running the\n`get_versions()` function. From the ""outside"" (e.g. in `setup.py`), you can\nimport the top-level `versioneer.py` and run `get_versions()`.\n\nBoth functions return a dictionary with different flavors of version\ninformation:\n\n* `[\'version\']`: A condensed version string, rendered using the selected\n  style. This is the most commonly used value for the project\'s version\n  string. The default ""pep440"" style yields strings like `0.11`,\n  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the ""Styles"" section\n  below for alternative styles.\n\n* `[\'full-revisionid\']`: detailed revision identifier. For Git, this is the\n  full SHA1 commit id, e.g. ""1076c978a8d3cfc70f408fe5974aa6c092c949ac"".\n\n* `[\'date\']`: Date and time of the latest `HEAD` commit. For Git, it is the\n  commit date in ISO 8601 format. This will be None if the date is not\n  available.\n\n* `[\'dirty\']`: a boolean, True if the tree has uncommitted changes. Note that\n  this is only accurate if run in a VCS checkout, otherwise it is likely to\n  be False or None\n\n* `[\'error\']`: if the version string could not be computed, this will be set\n  to a string describing the problem, otherwise it will be None. It may be\n  useful to throw an exception in setup.py if this is set, to avoid e.g.\n  creating tarballs with a version string of ""unknown"".\n\nSome variants are more useful than others. Including `full-revisionid` in a\nbug report should allow developers to reconstruct the exact code being tested\n(or indicate the presence of local changes that should be shared with the\ndevelopers). `version` is suitable for display in an ""about"" box or a CLI\n`--version` output: it can be easily compared against release notes and lists\nof bugs fixed in various releases.\n\nThe installer adds the following text to your `__init__.py` to place a basic\nversion in `YOURPROJECT.__version__`:\n\n    from ._version import get_versions\n    __version__ = get_versions()[\'version\']\n    del get_versions\n\n## Styles\n\nThe setup.cfg `style=` configuration controls how the VCS information is\nrendered into a version string.\n\nThe default style, ""pep440"", produces a PEP440-compliant string, equal to the\nun-prefixed tag name for actual releases, and containing an additional ""local\nversion"" section with more detail for in-between builds. For Git, this is\nTAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags\n--dirty --always`. For example ""0.11+2.g1076c97.dirty"" indicates that the\ntree is like the ""1076c97"" commit but has uncommitted changes ("".dirty""), and\nthat this commit is two revisions (""+2"") beyond the ""0.11"" tag. For released\nsoftware (exactly equal to a known tag), the identifier will only contain the\nstripped tag, e.g. ""0.11"".\n\nOther styles are available. See [details.md](details.md) in the Versioneer\nsource tree for descriptions.\n\n## Debugging\n\nVersioneer tries to avoid fatal errors: if something goes wrong, it will tend\nto return a version of ""0+unknown"". To investigate the problem, run `setup.py\nversion`, which will run the version-lookup code in a verbose mode, and will\ndisplay the full contents of `get_versions()` (including the `error` string,\nwhich may help identify what went wrong).\n\n## Known Limitations\n\nSome situations are known to cause problems for Versioneer. This details the\nmost significant ones. More can be found on Github\n[issues page](https://github.com/warner/python-versioneer/issues).\n\n### Subprojects\n\nVersioneer has limited support for source trees in which `setup.py` is not in\nthe root directory (e.g. `setup.py` and `.git/` are *not* siblings). The are\ntwo common reasons why `setup.py` might not be in the root:\n\n* Source trees which contain multiple subprojects, such as\n  [Buildbot](https://github.com/buildbot/buildbot), which contains both\n  ""master"" and ""slave"" subprojects, each with their own `setup.py`,\n  `setup.cfg`, and `tox.ini`. Projects like these produce multiple PyPI\n  distributions (and upload multiple independently-installable tarballs).\n* Source trees whose main purpose is to contain a C library, but which also\n  provide bindings to Python (and perhaps other langauges) in subdirectories.\n\nVersioneer will look for `.git` in parent directories, and most operations\nshould get the right version string. However `pip` and `setuptools` have bugs\nand implementation details which frequently cause `pip install .` from a\nsubproject directory to fail to find a correct version string (so it usually\ndefaults to `0+unknown`).\n\n`pip install --editable .` should work correctly. `setup.py install` might\nwork too.\n\nPip-8.1.1 is known to have this problem, but hopefully it will get fixed in\nsome later version.\n\n[Bug #38](https://github.com/warner/python-versioneer/issues/38) is tracking\nthis issue. The discussion in\n[PR #61](https://github.com/warner/python-versioneer/pull/61) describes the\nissue from the Versioneer side in more detail.\n[pip PR#3176](https://github.com/pypa/pip/pull/3176) and\n[pip PR#3615](https://github.com/pypa/pip/pull/3615) contain work to improve\npip to let Versioneer work correctly.\n\nVersioneer-0.16 and earlier only looked for a `.git` directory next to the\n`setup.cfg`, so subprojects were completely unsupported with those releases.\n\n### Editable installs with setuptools <= 18.5\n\n`setup.py develop` and `pip install --editable .` allow you to install a\nproject into a virtualenv once, then continue editing the source code (and\ntest) without re-installing after every change.\n\n""Entry-point scripts"" (`setup(entry_points={""console_scripts"": ..})`) are a\nconvenient way to specify executable scripts that should be installed along\nwith the python package.\n\nThese both work as expected when using modern setuptools. When using\nsetuptools-18.5 or earlier, however, certain operations will cause\n`pkg_resources.DistributionNotFound` errors when running the entrypoint\nscript, which must be resolved by re-installing the package. This happens\nwhen the install happens with one version, then the egg_info data is\nregenerated while a different version is checked out. Many setup.py commands\ncause egg_info to be rebuilt (including `sdist`, `wheel`, and installing into\na different virtualenv), so this can be surprising.\n\n[Bug #83](https://github.com/warner/python-versioneer/issues/83) describes\nthis one, but upgrading to a newer version of setuptools should probably\nresolve it.\n\n### Unicode version strings\n\nWhile Versioneer works (and is continually tested) with both Python 2 and\nPython 3, it is not entirely consistent with bytes-vs-unicode distinctions.\nNewer releases probably generate unicode version strings on py2. It\'s not\nclear that this is wrong, but it may be surprising for applications when then\nwrite these strings to a network connection or include them in bytes-oriented\nAPIs like cryptographic checksums.\n\n[Bug #71](https://github.com/warner/python-versioneer/issues/71) investigates\nthis question.\n\n\n## Updating Versioneer\n\nTo upgrade your project to a new release of Versioneer, do the following:\n\n* install the new Versioneer (`pip install -U versioneer` or equivalent)\n* edit `setup.cfg`, if necessary, to include any new configuration settings\n  indicated by the release notes. See [UPGRADING](./UPGRADING.md) for details.\n* re-run `versioneer install` in your source tree, to replace\n  `SRC/_version.py`\n* commit any changed files\n\n## Future Directions\n\nThis tool is designed to make it easily extended to other version-control\nsystems: all VCS-specific components are in separate directories like\nsrc/git/ . The top-level `versioneer.py` script is assembled from these\ncomponents by running make-versioneer.py . In the future, make-versioneer.py\nwill take a VCS name as an argument, and will construct a version of\n`versioneer.py` that is specific to the given VCS. It might also take the\nconfiguration arguments that are currently provided manually during\ninstallation by editing setup.py . Alternatively, it might go the other\ndirection and include code from all supported VCS systems, reducing the\nnumber of intermediate scripts.\n\n\n## License\n\nTo make Versioneer easier to embed, all its code is dedicated to the public\ndomain. The `_version.py` that it creates is also in the public domain.\nSpecifically, both are released under the Creative Commons ""Public Domain\nDedication"" license (CC0-1.0), as described in\nhttps://creativecommons.org/publicdomain/zero/1.0/ .\n\n""""""\n\nfrom __future__ import print_function\ntry:\n    import configparser\nexcept ImportError:\n    import ConfigParser as configparser\nimport errno\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_root():\n    """"""Get the project root directory.\n\n    We require that all commands are run from the project root, i.e. the\n    directory that contains setup.py, setup.cfg, and versioneer.py .\n    """"""\n    root = os.path.realpath(os.path.abspath(os.getcwd()))\n    setup_py = os.path.join(root, ""setup.py"")\n    versioneer_py = os.path.join(root, ""versioneer.py"")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        # allow \'python path/to/setup.py COMMAND\'\n        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\n        setup_py = os.path.join(root, ""setup.py"")\n        versioneer_py = os.path.join(root, ""versioneer.py"")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        err = (""Versioneer was unable to run the project root directory. ""\n               ""Versioneer requires setup.py to be executed from ""\n               ""its immediate directory (like \'python setup.py COMMAND\'), ""\n               ""or in a way that lets it use sys.argv[0] to find the root ""\n               ""(like \'python path/to/setup.py COMMAND\')."")\n        raise VersioneerBadRootError(err)\n    try:\n        # Certain runtime workflows (setup.py install/develop in a setuptools\n        # tree) execute all dependencies in a single python process, so\n        # ""versioneer"" may be imported multiple times, and python\'s shared\n        # module-import table will cache the first one. So we can\'t use\n        # os.path.dirname(__file__), as that will find whichever\n        # versioneer.py was first imported, even in later projects.\n        me = os.path.realpath(os.path.abspath(__file__))\n        me_dir = os.path.normcase(os.path.splitext(me)[0])\n        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\n        if me_dir != vsr_dir:\n            print(""Warning: build in %s is using versioneer.py from %s""\n                  % (os.path.dirname(me), versioneer_py))\n    except NameError:\n        pass\n    return root\n\n\ndef get_config_from_root(root):\n    """"""Read the project setup.cfg file to determine Versioneer config.""""""\n    # This might raise EnvironmentError (if setup.cfg is missing), or\n    # configparser.NoSectionError (if it lacks a [versioneer] section), or\n    # configparser.NoOptionError (if it lacks ""VCS=""). See the docstring at\n    # the top of versioneer.py for instructions on writing your setup.cfg .\n    setup_cfg = os.path.join(root, ""setup.cfg"")\n    parser = configparser.SafeConfigParser()\n    with open(setup_cfg, ""r"") as f:\n        parser.readfp(f)\n    VCS = parser.get(""versioneer"", ""VCS"")  # mandatory\n\n    def get(parser, name):\n        if parser.has_option(""versioneer"", name):\n            return parser.get(""versioneer"", name)\n        return None\n    cfg = VersioneerConfig()\n    cfg.VCS = VCS\n    cfg.style = get(parser, ""style"") or """"\n    cfg.versionfile_source = get(parser, ""versionfile_source"")\n    cfg.versionfile_build = get(parser, ""versionfile_build"")\n    cfg.tag_prefix = get(parser, ""tag_prefix"")\n    if cfg.tag_prefix in (""\'\'"", \'""""\'):\n        cfg.tag_prefix = """"\n    cfg.parentdir_prefix = get(parser, ""parentdir_prefix"")\n    cfg.verbose = get(parser, ""verbose"")\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\n# these dictionaries contain VCS-specific tools\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %s"" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %s"" % (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %s (error)"" % dispcmd)\n            print(""stdout was %s"" % stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\nLONG_VERSION_PY[\'git\'] = \'\'\'\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain. Generated by\n# versioneer-0.18 (https://github.com/warner/python-versioneer)\n\n""""""Git implementation of _version.py.""""""\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef get_keywords():\n    """"""Get the keywords needed to look up the version information.""""""\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = ""%(DOLLAR)sFormat:%%d%(DOLLAR)s""\n    git_full = ""%(DOLLAR)sFormat:%%H%(DOLLAR)s""\n    git_date = ""%(DOLLAR)sFormat:%%ci%(DOLLAR)s""\n    keywords = {""refnames"": git_refnames, ""full"": git_full, ""date"": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_config():\n    """"""Create, populate and return the VersioneerConfig() object.""""""\n    # these strings are filled in when \'setup.py versioneer\' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = ""git""\n    cfg.style = ""%(STYLE)s""\n    cfg.tag_prefix = ""%(TAG_PREFIX)s""\n    cfg.parentdir_prefix = ""%(PARENTDIR_PREFIX)s""\n    cfg.versionfile_source = ""%(VERSIONFILE_SOURCE)s""\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %%s"" %% dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %%s"" %% (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %%s (error)"" %% dispcmd)\n            print(""stdout was %%s"" %% stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %%s but none started with prefix %%s"" %%\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %%d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%%s\', no digits"" %% "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %%s"" %% "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %%s"" %% r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %%s not under git control"" %% root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%%s*"" %% tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%%s\'""\n                               %% describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%%s\' doesn\'t start with prefix \'%%s\'""\n                print(fmt %% (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%%s\' doesn\'t start with prefix \'%%s\'""\n                               %% (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%%d.g%%s"" %% (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%%d.g%%s"" %% (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%%d"" %% pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%%d"" %% pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%%d"" %% pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%%s"" %% pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%%d"" %% pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%%s"" %% pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%%d"" %% pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%%d"" %% pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%%d-g%%s"" %% (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%%d-g%%s"" %% (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%%s\'"" %% style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\ndef get_versions():\n    """"""Get version information or return default if unable to do so.""""""\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don\'t do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\'/\'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {""version"": ""0+unknown"", ""full-revisionid"": None,\n                ""dirty"": None,\n                ""error"": ""unable to find root of source tree"",\n                ""date"": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None,\n            ""error"": ""unable to compute version"", ""date"": None}\n\'\'\'\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%s\', no digits"" % "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %s"" % "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %s"" % r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %s not under git control"" % root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%s*"" % tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%s\'""\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                print(fmt % (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef do_vcs_install(manifest_in, versionfile_source, ipy):\n    """"""Git-specific installation logic for Versioneer.\n\n    For Git, this means creating/changing .gitattributes to mark _version.py\n    for export-subst keyword substitution.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n    files = [manifest_in, versionfile_source]\n    if ipy:\n        files.append(ipy)\n    try:\n        me = __file__\n        if me.endswith("".pyc"") or me.endswith("".pyo""):\n            me = os.path.splitext(me)[0] + "".py""\n        versioneer_file = os.path.relpath(me)\n    except NameError:\n        versioneer_file = ""versioneer.py""\n    files.append(versioneer_file)\n    present = False\n    try:\n        f = open("".gitattributes"", ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(versionfile_source):\n                if ""export-subst"" in line.strip().split()[1:]:\n                    present = True\n        f.close()\n    except EnvironmentError:\n        pass\n    if not present:\n        f = open("".gitattributes"", ""a+"")\n        f.write(""%s export-subst\\n"" % versionfile_source)\n        f.close()\n        files.append("".gitattributes"")\n    run_command(GITS, [""add"", ""--""] + files)\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %s but none started with prefix %s"" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\nSHORT_VERSION_PY = """"""\n# This file was generated by \'versioneer.py\' (0.18) from\n# revision-control system data, or from the parent directory name of an\n# unpacked source archive. Distribution tarballs contain a pre-generated copy\n# of this file.\n\nimport json\n\nversion_json = \'\'\'\n%s\n\'\'\'  # END VERSION_JSON\n\n\ndef get_versions():\n    return json.loads(version_json)\n""""""\n\n\ndef versions_from_file(filename):\n    """"""Try to determine the version from _version.py if present.""""""\n    try:\n        with open(filename) as f:\n            contents = f.read()\n    except EnvironmentError:\n        raise NotThisMethod(""unable to read _version.py"")\n    mo = re.search(r""version_json = \'\'\'\\n(.*)\'\'\'  # END VERSION_JSON"",\n                   contents, re.M | re.S)\n    if not mo:\n        mo = re.search(r""version_json = \'\'\'\\r\\n(.*)\'\'\'  # END VERSION_JSON"",\n                       contents, re.M | re.S)\n    if not mo:\n        raise NotThisMethod(""no version_json in _version.py"")\n    return json.loads(mo.group(1))\n\n\ndef write_to_version_file(filename, versions):\n    """"""Write the given version number to the given _version.py file.""""""\n    os.unlink(filename)\n    contents = json.dumps(versions, sort_keys=True,\n                          indent=1, separators=("","", "": ""))\n    with open(filename, ""w"") as f:\n        f.write(SHORT_VERSION_PY % contents)\n\n    print(""set %s to \'%s\'"" % (filename, versions[""version""]))\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%d.g%s"" % (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%d.g%s"" % (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%d"" % pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%d"" % pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%s"" % pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%s"" % pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%s\'"" % style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\nclass VersioneerBadRootError(Exception):\n    """"""The project root directory is unknown or missing key files.""""""\n\n\ndef get_versions(verbose=False):\n    """"""Get the project version from whatever source is available.\n\n    Returns dict with two keys: \'version\' and \'full\'.\n    """"""\n    if ""versioneer"" in sys.modules:\n        # see the discussion in cmdclass.py:get_cmdclass()\n        del sys.modules[""versioneer""]\n\n    root = get_root()\n    cfg = get_config_from_root(root)\n\n    assert cfg.VCS is not None, ""please set [versioneer]VCS= in setup.cfg""\n    handlers = HANDLERS.get(cfg.VCS)\n    assert handlers, ""unrecognized VCS \'%s\'"" % cfg.VCS\n    verbose = verbose or cfg.verbose\n    assert cfg.versionfile_source is not None, \\\n        ""please set versioneer.versionfile_source""\n    assert cfg.tag_prefix is not None, ""please set versioneer.tag_prefix""\n\n    versionfile_abs = os.path.join(root, cfg.versionfile_source)\n\n    # extract version from first of: _version.py, VCS command (e.g. \'git\n    # describe\'), parentdir. This is meant to work for developers using a\n    # source checkout, for users of a tarball created by \'setup.py sdist\',\n    # and for users of a tarball/zipball created by \'git archive\' or github\'s\n    # download-from-tag feature or the equivalent in other VCSes.\n\n    get_keywords_f = handlers.get(""get_keywords"")\n    from_keywords_f = handlers.get(""keywords"")\n    if get_keywords_f and from_keywords_f:\n        try:\n            keywords = get_keywords_f(versionfile_abs)\n            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)\n            if verbose:\n                print(""got version from expanded keyword %s"" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        ver = versions_from_file(versionfile_abs)\n        if verbose:\n            print(""got version from file %s %s"" % (versionfile_abs, ver))\n        return ver\n    except NotThisMethod:\n        pass\n\n    from_vcs_f = handlers.get(""pieces_from_vcs"")\n    if from_vcs_f:\n        try:\n            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)\n            ver = render(pieces, cfg.style)\n            if verbose:\n                print(""got version from VCS %s"" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        if cfg.parentdir_prefix:\n            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n            if verbose:\n                print(""got version from parentdir %s"" % ver)\n            return ver\n    except NotThisMethod:\n        pass\n\n    if verbose:\n        print(""unable to compute version"")\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None, ""error"": ""unable to compute version"",\n            ""date"": None}\n\n\ndef get_version():\n    """"""Get the short version string for this project.""""""\n    return get_versions()[""version""]\n\n\ndef get_cmdclass():\n    """"""Get the custom setuptools/distutils subclasses used by Versioneer.""""""\n    if ""versioneer"" in sys.modules:\n        del sys.modules[""versioneer""]\n        # this fixes the ""python setup.py develop"" case (also \'install\' and\n        # \'easy_install .\'), in which subdependencies of the main project are\n        # built (using setup.py bdist_egg) in the same python process. Assume\n        # a main project A and a dependency B, which use different versions\n        # of Versioneer. A\'s setup.py imports A\'s Versioneer, leaving it in\n        # sys.modules by the time B\'s setup.py is executed, causing B to run\n        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a\n        # sandbox that restores sys.modules to it\'s pre-build state, so the\n        # parent is protected against the child\'s ""import versioneer"". By\n        # removing ourselves from sys.modules here, before the child build\n        # happens, we protect the child from the parent\'s versioneer too.\n        # Also see https://github.com/warner/python-versioneer/issues/52\n\n    cmds = {}\n\n    # we add ""version"" to both distutils and setuptools\n    from distutils.core import Command\n\n    class cmd_version(Command):\n        description = ""report generated version string""\n        user_options = []\n        boolean_options = []\n\n        def initialize_options(self):\n            pass\n\n        def finalize_options(self):\n            pass\n\n        def run(self):\n            vers = get_versions(verbose=True)\n            print(""Version: %s"" % vers[""version""])\n            print("" full-revisionid: %s"" % vers.get(""full-revisionid""))\n            print("" dirty: %s"" % vers.get(""dirty""))\n            print("" date: %s"" % vers.get(""date""))\n            if vers[""error""]:\n                print("" error: %s"" % vers[""error""])\n    cmds[""version""] = cmd_version\n\n    # we override ""build_py"" in both distutils and setuptools\n    #\n    # most invocation pathways end up running build_py:\n    #  distutils/build -> build_py\n    #  distutils/install -> distutils/build ->..\n    #  setuptools/bdist_wheel -> distutils/install ->..\n    #  setuptools/bdist_egg -> distutils/install_lib -> build_py\n    #  setuptools/install -> bdist_egg ->..\n    #  setuptools/develop -> ?\n    #  pip install:\n    #   copies source tree to a tempdir before running egg_info/etc\n    #   if .git isn\'t copied too, \'git describe\' will fail\n    #   then does setup.py bdist_wheel, or sometimes setup.py install\n    #  setup.py egg_info -> ?\n\n    # we override different ""build_py"" commands for both environments\n    if ""setuptools"" in sys.modules:\n        from setuptools.command.build_py import build_py as _build_py\n    else:\n        from distutils.command.build_py import build_py as _build_py\n\n    class cmd_build_py(_build_py):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_py.run(self)\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if cfg.versionfile_build:\n                target_versionfile = os.path.join(self.build_lib,\n                                                  cfg.versionfile_build)\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n    cmds[""build_py""] = cmd_build_py\n\n    if ""cx_Freeze"" in sys.modules:  # cx_freeze enabled?\n        from cx_Freeze.dist import build_exe as _build_exe\n        # nczeczulin reports that py2exe won\'t like the pep440-style string\n        # as FILEVERSION, but it can be used for PRODUCTVERSION, e.g.\n        # setup(console=[{\n        #   ""version"": versioneer.get_version().split(""+"", 1)[0], # FILEVERSION\n        #   ""product_version"": versioneer.get_version(),\n        #   ...\n\n        class cmd_build_exe(_build_exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _build_exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, ""w"") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {""DOLLAR"": ""$"",\n                             ""STYLE"": cfg.style,\n                             ""TAG_PREFIX"": cfg.tag_prefix,\n                             ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                             ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                             })\n        cmds[""build_exe""] = cmd_build_exe\n        del cmds[""build_py""]\n\n    if \'py2exe\' in sys.modules:  # py2exe enabled?\n        try:\n            from py2exe.distutils_buildexe import py2exe as _py2exe  # py3\n        except ImportError:\n            from py2exe.build_exe import py2exe as _py2exe  # py2\n\n        class cmd_py2exe(_py2exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _py2exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, ""w"") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {""DOLLAR"": ""$"",\n                             ""STYLE"": cfg.style,\n                             ""TAG_PREFIX"": cfg.tag_prefix,\n                             ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                             ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                             })\n        cmds[""py2exe""] = cmd_py2exe\n\n    # we override different ""sdist"" commands for both environments\n    if ""setuptools"" in sys.modules:\n        from setuptools.command.sdist import sdist as _sdist\n    else:\n        from distutils.command.sdist import sdist as _sdist\n\n    class cmd_sdist(_sdist):\n        def run(self):\n            versions = get_versions()\n            self._versioneer_generated_versions = versions\n            # unless we update this, the command will keep using the old\n            # version\n            self.distribution.metadata.version = versions[""version""]\n            return _sdist.run(self)\n\n        def make_release_tree(self, base_dir, files):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            _sdist.make_release_tree(self, base_dir, files)\n            # now locate _version.py in the new base_dir directory\n            # (remembering that it may be a hardlink) and replace it with an\n            # updated value\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n            print(""UPDATING %s"" % target_versionfile)\n            write_to_version_file(target_versionfile,\n                                  self._versioneer_generated_versions)\n    cmds[""sdist""] = cmd_sdist\n\n    return cmds\n\n\nCONFIG_ERROR = """"""\nsetup.cfg is missing the necessary Versioneer configuration. You need\na section like:\n\n [versioneer]\n VCS = git\n style = pep440\n versionfile_source = src/myproject/_version.py\n versionfile_build = myproject/_version.py\n tag_prefix =\n parentdir_prefix = myproject-\n\nYou will also need to edit your setup.py to use the results:\n\n import versioneer\n setup(version=versioneer.get_version(),\n       cmdclass=versioneer.get_cmdclass(), ...)\n\nPlease read the docstring in ./versioneer.py for configuration instructions,\nedit setup.cfg, and re-run the installer or \'python versioneer.py setup\'.\n""""""\n\nSAMPLE_CONFIG = """"""\n# See the docstring in versioneer.py for instructions. Note that you must\n# re-run \'versioneer.py setup\' after changing this section, and commit the\n# resulting files.\n\n[versioneer]\n#VCS = git\n#style = pep440\n#versionfile_source =\n#versionfile_build =\n#tag_prefix =\n#parentdir_prefix =\n\n""""""\n\nINIT_PY_SNIPPET = """"""\nfrom ._version import get_versions\n__version__ = get_versions()[\'version\']\ndel get_versions\n""""""\n\n\ndef do_setup():\n    """"""Main VCS-independent setup function for installing Versioneer.""""""\n    root = get_root()\n    try:\n        cfg = get_config_from_root(root)\n    except (EnvironmentError, configparser.NoSectionError,\n            configparser.NoOptionError) as e:\n        if isinstance(e, (EnvironmentError, configparser.NoSectionError)):\n            print(""Adding sample versioneer config to setup.cfg"",\n                  file=sys.stderr)\n            with open(os.path.join(root, ""setup.cfg""), ""a"") as f:\n                f.write(SAMPLE_CONFIG)\n        print(CONFIG_ERROR, file=sys.stderr)\n        return 1\n\n    print("" creating %s"" % cfg.versionfile_source)\n    with open(cfg.versionfile_source, ""w"") as f:\n        LONG = LONG_VERSION_PY[cfg.VCS]\n        f.write(LONG % {""DOLLAR"": ""$"",\n                        ""STYLE"": cfg.style,\n                        ""TAG_PREFIX"": cfg.tag_prefix,\n                        ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                        ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                        })\n\n    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),\n                       ""__init__.py"")\n    if os.path.exists(ipy):\n        try:\n            with open(ipy, ""r"") as f:\n                old = f.read()\n        except EnvironmentError:\n            old = """"\n        if INIT_PY_SNIPPET not in old:\n            print("" appending to %s"" % ipy)\n            with open(ipy, ""a"") as f:\n                f.write(INIT_PY_SNIPPET)\n        else:\n            print("" %s unmodified"" % ipy)\n    else:\n        print("" %s doesn\'t exist, ok"" % ipy)\n        ipy = None\n\n    # Make sure both the top-level ""versioneer.py"" and versionfile_source\n    # (PKG/_version.py, used by runtime code) are in MANIFEST.in, so\n    # they\'ll be copied into source distributions. Pip won\'t be able to\n    # install the package without this.\n    manifest_in = os.path.join(root, ""MANIFEST.in"")\n    simple_includes = set()\n    try:\n        with open(manifest_in, ""r"") as f:\n            for line in f:\n                if line.startswith(""include ""):\n                    for include in line.split()[1:]:\n                        simple_includes.add(include)\n    except EnvironmentError:\n        pass\n    # That doesn\'t cover everything MANIFEST.in can do\n    # (http://docs.python.org/2/distutils/sourcedist.html#commands), so\n    # it might give some false negatives. Appending redundant \'include\'\n    # lines is safe, though.\n    if ""versioneer.py"" not in simple_includes:\n        print("" appending \'versioneer.py\' to MANIFEST.in"")\n        with open(manifest_in, ""a"") as f:\n            f.write(""include versioneer.py\\n"")\n    else:\n        print("" \'versioneer.py\' already in MANIFEST.in"")\n    if cfg.versionfile_source not in simple_includes:\n        print("" appending versionfile_source (\'%s\') to MANIFEST.in"" %\n              cfg.versionfile_source)\n        with open(manifest_in, ""a"") as f:\n            f.write(""include %s\\n"" % cfg.versionfile_source)\n    else:\n        print("" versionfile_source already in MANIFEST.in"")\n\n    # Make VCS-specific changes. For git, this means creating/changing\n    # .gitattributes to mark _version.py for export-subst keyword\n    # substitution.\n    do_vcs_install(manifest_in, cfg.versionfile_source, ipy)\n    return 0\n\n\ndef scan_setup_py():\n    """"""Validate the contents of setup.py against Versioneer\'s expectations.""""""\n    found = set()\n    setters = False\n    errors = 0\n    with open(""setup.py"", ""r"") as f:\n        for line in f.readlines():\n            if ""import versioneer"" in line:\n                found.add(""import"")\n            if ""versioneer.get_cmdclass()"" in line:\n                found.add(""cmdclass"")\n            if ""versioneer.get_version()"" in line:\n                found.add(""get_version"")\n            if ""versioneer.VCS"" in line:\n                setters = True\n            if ""versioneer.versionfile_source"" in line:\n                setters = True\n    if len(found) != 3:\n        print("""")\n        print(""Your setup.py appears to be missing some important items"")\n        print(""(but I might be wrong). Please make sure it has something"")\n        print(""roughly like the following:"")\n        print("""")\n        print("" import versioneer"")\n        print("" setup( version=versioneer.get_version(),"")\n        print(""        cmdclass=versioneer.get_cmdclass(),  ...)"")\n        print("""")\n        errors += 1\n    if setters:\n        print(""You should remove lines like \'versioneer.VCS = \' and"")\n        print(""\'versioneer.versionfile_source = \' . This configuration"")\n        print(""now lives in setup.cfg, and should be removed from setup.py"")\n        print("""")\n        errors += 1\n    return errors\n\n\nif __name__ == ""__main__"":\n    cmd = sys.argv[1]\n    if cmd == ""setup"":\n        errors = do_setup()\n        errors += scan_setup_py()\n        if errors:\n            sys.exit(1)\n'"
autoray/__init__.py,0,"b""from .autoray import (\n    infer_backend,\n    get_lib_fn,\n    do,\n    conj,\n    transpose,\n    dag,\n    real,\n    imag,\n    reshape,\n    to_backend_dtype,\n    astype,\n    get_dtype_name,\n    to_numpy,\n    register_function,\n    # the numpy mimic submodule\n    numpy,\n)\n\n\n__all__ = (\n    'do',\n    'infer_backend',\n    'get_lib_fn',\n    'conj',\n    'transpose',\n    'dag',\n    'real',\n    'imag',\n    'reshape',\n    'to_backend_dtype',\n    'get_dtype_name',\n    'astype',\n    'to_numpy',\n    'register_function',\n    # the numpy mimic submodule\n    'numpy',\n)\n\nfrom ._version import get_versions\n__version__ = get_versions()['version']\ndel get_versions\n"""
autoray/_version.py,0,"b'\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain. Generated by\n# versioneer-0.18 (https://github.com/warner/python-versioneer)\n\n""""""Git implementation of _version.py.""""""\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef get_keywords():\n    """"""Get the keywords needed to look up the version information.""""""\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = ""$Format:%d$""\n    git_full = ""$Format:%H$""\n    git_date = ""$Format:%ci$""\n    keywords = {""refnames"": git_refnames, ""full"": git_full, ""date"": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_config():\n    """"""Create, populate and return the VersioneerConfig() object.""""""\n    # these strings are filled in when \'setup.py versioneer\' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = ""git""\n    cfg.style = ""pep440""\n    cfg.tag_prefix = """"\n    cfg.parentdir_prefix = "".""\n    cfg.versionfile_source = ""autoray/_version.py""\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %s"" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %s"" % (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %s (error)"" % dispcmd)\n            print(""stdout was %s"" % stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %s but none started with prefix %s"" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%s\', no digits"" % "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %s"" % "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %s"" % r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %s not under git control"" % root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%s*"" % tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%s\'""\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                print(fmt % (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%d.g%s"" % (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%d.g%s"" % (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%d"" % pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%d"" % pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%s"" % pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%s"" % pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%s\'"" % style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\ndef get_versions():\n    """"""Get version information or return default if unable to do so.""""""\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don\'t do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\'/\'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {""version"": ""0+unknown"", ""full-revisionid"": None,\n                ""dirty"": None,\n                ""error"": ""unable to find root of source tree"",\n                ""date"": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None,\n            ""error"": ""unable to compute version"", ""date"": None}\n'"
autoray/autoray.py,1,"b'""""""\r\nAUTORAY - backend agnostic array operations.\r\n\r\n\r\nCopyright 2019 Johnnie Gray\r\n\r\nLicensed under the Apache License, Version 2.0 (the ""License"");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an ""AS IS"" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n""""""\r\n\r\nimport importlib\r\nimport functools\r\nfrom collections import OrderedDict\r\n\r\nimport numpy as _numpy\r\n\r\n\r\ndef do(fn, *args, like=None, **kwargs):\r\n    """"""Do function named ``fn`` on ``(*args, **kwargs)``, peforming single\r\n    dispatch to retrieve ``fn`` based on whichever library defines the class of\r\n    the ``args[0]``, or the ``like`` keyword argument if specified.\r\n\r\n    Examples\r\n    --------\r\n\r\n    Works on numpy arrays:\r\n\r\n        >>> import numpy as np\r\n        >>> x_np = np.random.uniform(size=[5])\r\n        >>> y_np = do(\'sqrt\', x_np)\r\n        >>> y_np\r\n        array([0.32464973, 0.90379787, 0.85037325, 0.88729814, 0.46768083])\r\n\r\n        >>> type(y_np)\r\n        numpy.ndarray\r\n\r\n    Works on cupy arrays:\r\n\r\n        >>> import cupy as cp\r\n        >>> x_cp = cp.random.uniform(size=[5])\r\n        >>> y_cp = do(\'sqrt\', x_cp)\r\n        >>> y_cp\r\n        array([0.44541656, 0.88713113, 0.92626237, 0.64080557, 0.69620767])\r\n\r\n        >>> type(y_cp)\r\n        cupy.core.core.ndarray\r\n\r\n    Works on tensorflow arrays:\r\n\r\n        >>> import tensorflow as tf\r\n        >>> x_tf = tf.random.uniform(shape=[5])\r\n        >>> y_tf = do(\'sqrt\', x_tf)\r\n        >>> y_tf\r\n        <tf.Tensor \'Sqrt_1:0\' shape=(5,) dtype=float32>\r\n\r\n        >>> type(y_tf)\r\n        tensorflow.python.framework.ops.Tensor\r\n\r\n    You get the idea.\r\n\r\n    For functions that don\'t dispatch on the first argument you can use the\r\n    ``like`` keyword:\r\n\r\n        >>> do(\'eye\', 3, like=x_tf)\r\n        <tf.Tensor: id=91, shape=(3, 3), dtype=float32>\r\n    """"""\r\n    if like is None:\r\n        backend = infer_backend(args[0])\r\n    elif isinstance(like, str):\r\n        backend = like\r\n    else:\r\n        backend = infer_backend(like)\r\n\r\n    return get_lib_fn(backend, fn)(*args, **kwargs)\r\n\r\n\r\ndef infer_backend(array):\r\n    """"""Get the name of the library that defined the class of ``array`` - unless\r\n    ``array`` is directly a subclass of ``numpy.ndarray``, in which case assume\r\n    ``numpy`` is the desired backend.\r\n    """"""\r\n    if isinstance(array, _numpy.ndarray):\r\n        return \'numpy\'\r\n    return array.__class__.__module__.split(\'.\')[0]\r\n\r\n\r\ndef get_lib_fn(backend, fn):\r\n    """"""Cached retrieval of correct function for backend\r\n\r\n    Parameters\r\n    ----------\r\n    backend : str\r\n        The module defining the array class to dispatch on.\r\n    fn : str\r\n        The function to retrieve.\r\n\r\n    Returns\r\n    -------\r\n    callable\r\n    """"""\r\n\r\n    try:\r\n        lib_fn = _FUNCS[backend, fn]\r\n    except KeyError:\r\n        # alias for global module,\r\n        #     e.g. \'decimal\' -> \'math\'\r\n        module = _MODULE_ALIASES.get(backend, backend)\r\n\r\n        # submodule where function is found for backend,\r\n        #     e.g. [\'tensorflow\', trace\'] -> \'tensorflow.linalg\'\r\n        try:\r\n            full_location = _SUBMODULE_ALIASES[backend, fn]\r\n\r\n            # if explicit submodule alias given, don\'t use prepended location\r\n            #     for example, (\'torch\', \'linalg.svd\') -> torch.svd\r\n            only_fn = fn.split(\'.\')[-1]\r\n\r\n        except KeyError:\r\n            full_location = module\r\n\r\n            # move any prepended location into the full module path\r\n            #     e.g. \'fn=linalg.eigh\' -> [\'linalg\', \'eigh\']\r\n            split_fn = fn.split(\'.\')\r\n            full_location = \'.\'.join([full_location] + split_fn[:-1])\r\n            only_fn = split_fn[-1]\r\n\r\n        # cached lookup of custom name function might take\r\n        #     e.g. [\'tensorflow\', \'sum\'] -> \'reduce_sum\'\r\n        fn_name = _FUNC_ALIASES.get((backend, fn), only_fn)\r\n\r\n        # import the function into the cache\r\n        try:\r\n            lib = importlib.import_module(full_location)\r\n        except ImportError:\r\n            # sometimes libraries hack an attribute to look like submodule\r\n            mod, submod = full_location.split(\'.\')\r\n            lib = getattr(importlib.import_module(mod), submod)\r\n\r\n        # check for a custom wrapper but default to identity\r\n        wrapper = _CUSTOM_WRAPPERS.get((backend, fn), lambda fn: fn)\r\n\r\n        # store the function!\r\n        lib_fn = _FUNCS[backend, fn] = wrapper(getattr(lib, fn_name))\r\n\r\n    return lib_fn\r\n\r\n\r\n# ---------------------- special top level functions ------------------------ #\r\n\r\ndef conj(x):\r\n    """"""Array conjugate.\r\n    """"""\r\n    return do(\'conj\', x)\r\n\r\n\r\ndef transpose(x, *args):\r\n    """"""Array transpose.\r\n    """"""\r\n    return do(\'transpose\', x, *args)\r\n\r\n\r\ndef dag(x):\r\n    """"""Array Hermitian transpose.\r\n    """"""\r\n    try:\r\n        return x.H\r\n    except AttributeError:\r\n        return do(\'conj\', do(\'transpose\', x))\r\n\r\n\r\ndef real(x):\r\n    """"""Array real part.\r\n    """"""\r\n    return do(\'real\', x)\r\n\r\n\r\ndef imag(x):\r\n    """"""Array imaginary part.\r\n    """"""\r\n    return do(\'imag\', x)\r\n\r\n\r\ndef reshape(x, shape):\r\n    """"""Array reshaped.\r\n    """"""\r\n    try:\r\n        return x.reshape(shape)\r\n    except AttributeError:\r\n        return do(\'reshape\', x, shape)\r\n\r\n\r\ndef to_backend_dtype(dtype_name, like):\r\n    """"""Turn string specifier ``dtype_name`` into dtype of backend ``like``.\r\n    """"""\r\n    if not isinstance(like, str):\r\n        like = infer_backend(like)\r\n\r\n    try:\r\n        return get_lib_fn(like, dtype_name)\r\n    except AttributeError:\r\n        return dtype_name\r\n\r\n\r\ndef get_dtype_name(x):\r\n    """"""Find string specifier ``dtype_name`` of array ``x``.\r\n    """"""\r\n    try:\r\n        return x.dtype.name\r\n    except AttributeError:\r\n        # let modules provide their own\r\n        return do(\'get_dtype_name\', x)\r\n\r\n\r\ndef astype(x, dtype_name, **kwargs):\r\n    """"""Cast array as type ``dtype_name`` - tries ``x.astype`` first.\r\n    """"""\r\n    try:\r\n        return x.astype(dtype_name, **kwargs)\r\n    except AttributeError:\r\n        return do(\'astype\', x, dtype_name, **kwargs)\r\n\r\n\r\ndef to_numpy(x):\r\n    """"""Get a numpy version of array ``x``.\r\n    """"""\r\n    return do(\'to_numpy\', x)\r\n\r\n\r\n# -------------------------- some common wrappers --------------------------- #\r\n\r\ndef svd_not_full_matrices_wrapper(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def default_not_full_matrices(*args, **kwargs):\r\n        kwargs.setdefault(\'full_matrices\', False)\r\n        return fn(*args, **kwargs)\r\n\r\n    return default_not_full_matrices\r\n\r\n\r\ndef svd_sUV_to_UsVH_wrapper(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(*args, **kwargs):\r\n        s, U, V = fn(*args, **kwargs)\r\n        return U, s, dag(V)\r\n\r\n    return numpy_like\r\n\r\n\r\ndef svd_UsV_to_UsVH_wrapper(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(*args, **kwargs):\r\n        U, s, V = fn(*args, **kwargs)\r\n        return U, s, dag(V)\r\n\r\n    return numpy_like\r\n\r\n\r\ndef svd_manual_full_matrices_kwarg(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(*args, full_matrices=False, **kwargs):\r\n        U, s, VH = fn(*args, **kwargs)\r\n\r\n        if not full_matrices:\r\n            U, VH = U[:, :s.size], VH[:s.size, :]\r\n\r\n        return U, s, VH\r\n\r\n    return numpy_like\r\n\r\n\r\ndef qr_allow_fat(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(a, **kwargs):\r\n        m, n = a.shape\r\n\r\n        if m >= n:\r\n            # square or thin\r\n            return fn(a, **kwargs)\r\n\r\n        Q, R_sq = fn(a[:, :m])\r\n        R_r = dag(Q) @ a[:, m:]\r\n        R = do(\'concatenate\', (R_sq, R_r), axis=1, like=a)\r\n\r\n        return Q, R\r\n\r\n    return numpy_like\r\n\r\n\r\ndef tril_to_band_part(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(x, k=0):\r\n\r\n        if k < 0:\r\n            raise ValueError(""\'k\' must be positive to recreate \'numpy.tril\' ""\r\n                             ""behaviour with \'tensorflow.matrix_band_part\'."")\r\n\r\n        return fn(x, -1, k)\r\n\r\n    return numpy_like\r\n\r\n\r\ndef triu_to_band_part(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(x, k=0):\r\n\r\n        if k > 0:\r\n            raise ValueError(""\'k\' must be negative to recreate \'numpy.triu\' ""\r\n                             ""behaviour with \'tensorflow.matrix_band_part\'."")\r\n\r\n        return fn(x, -k, -1)\r\n\r\n    return numpy_like\r\n\r\n\r\ndef scale_random_uniform_manually(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(low=0.0, high=1.0, size=None, **kwargs):\r\n        if size is None:\r\n            size = ()\r\n\r\n        x = fn(size=size, **kwargs)\r\n\r\n        if (low != 0.0) or (high != 1.0):\r\n            x = (high - low) * x + low\r\n\r\n        return x\r\n\r\n    return numpy_like\r\n\r\n\r\ndef scale_random_normal_manually(fn):\r\n\r\n    @functools.wraps(fn)\r\n    def numpy_like(loc=0.0, scale=1.0, size=None, **kwargs):\r\n        if size is None:\r\n            size = ()\r\n\r\n        x = fn(size=size, **kwargs)\r\n\r\n        if (loc != 0.0) or (scale != 1.0):\r\n            x = scale * x + loc\r\n\r\n        return x\r\n\r\n    return numpy_like\r\n\r\n\r\ndef translate_wrapper(fn, translator):\r\n    """"""Wrap a function to match the api of another according to a translation.\r\n    The ``translator`` entries in the form of an ordered dict should have\r\n    entries like:\r\n\r\n        (desired_kwarg: (backend_kwarg, default_value))\r\n\r\n    with the order defining the args of the function.\r\n    """"""\r\n\r\n    @functools.wraps(fn)\r\n    def translated_function(*args, **kwargs):\r\n        new_kwargs = {}\r\n        translation = translator.copy()\r\n\r\n        # convert args\r\n        for arg_value in args:\r\n            new_arg_name = translation.popitem(last=False)[1][0]\r\n            new_kwargs[new_arg_name] = arg_value\r\n\r\n        # convert kwargs -  but only those in the translation\r\n        for key, value in kwargs.items():\r\n            try:\r\n                new_kwargs[translation.pop(key)[0]] = value\r\n            except KeyError:\r\n                new_kwargs[key] = value\r\n\r\n        # set remaining default kwargs\r\n        for key, value in translation.items():\r\n            new_kwargs[value[0]] = value[1]\r\n\r\n        return fn(**new_kwargs)\r\n\r\n    return translated_function\r\n\r\n\r\ndef make_translator(t):\r\n    return functools.partial(translate_wrapper, translator=OrderedDict(t))\r\n\r\n\r\ndef complex_add_re_im(re, im):\r\n    return re + 1j * im\r\n\r\n\r\n# --------------- object to act as drop-in replace for numpy ---------------- #\r\n\r\n_partial_functions = {}\r\n\r\n\r\nclass NumpyMimic:\r\n    """"""A class to mimic the syntax of using `numpy` directly.\r\n    """"""\r\n\r\n    def __init__(self, submodule=None):\r\n        self.submodule = submodule\r\n\r\n    def __getattribute__(self, fn):\r\n\r\n        # look out for certain submodules which are not functions\r\n        if fn == \'linalg\':\r\n            return numpy_linalg\r\n        if fn == \'random\':\r\n            return numpy_random\r\n\r\n        # if this is the e.g. linalg mimic, preprend \'linalg.\'\r\n        submod = object.__getattribute__(self, \'submodule\')\r\n        if submod is not None:\r\n            fn = ""."".join((submod, fn))\r\n\r\n        # cache the correct partial function\r\n        try:\r\n            pfn = _partial_functions[fn]\r\n        except KeyError:\r\n            pfn = _partial_functions[fn] = functools.partial(do, fn)\r\n\r\n        return pfn\r\n\r\n    @staticmethod\r\n    def __repr__():\r\n        return ""<autoray.numpy>""\r\n\r\n\r\nnumpy = NumpyMimic()\r\nnumpy_linalg = NumpyMimic(\'linalg\')\r\nnumpy_random = NumpyMimic(\'random\')\r\n\r\n\r\n# --------------------------------------------------------------------------- #\r\n#                    storage & backend specific functions                     #\r\n# --------------------------------------------------------------------------- #\r\n\r\n# global (non function specific) aliases\r\n_MODULE_ALIASES = {\'decimal\': \'math\', \'builtins\': \'numpy\'}\r\n\r\n# lookup for when functions are elsewhere than the expected location\r\n_SUBMODULE_ALIASES = {}\r\n\r\n# lookup for when functions are simply called something else\r\n_FUNC_ALIASES = {}\r\n\r\n# custom wrappers for when functions don\'t just have different location or\r\n#     name. For example, when kwargs need to be translated or results modified\r\n_CUSTOM_WRAPPERS = {}\r\n\r\n# actual cache of funtions to use - this is populated lazily and can be used\r\n#     to directly set an implementation of a function for a specific backend\r\n_FUNCS = {}\r\n\r\n\r\n# ------------------------------ standard-lib ------------------------------- #\r\n\r\n_MODULE_ALIASES[\'decimal\'] = \'math\'\r\n_MODULE_ALIASES[\'builtins\'] = \'numpy\'\r\n\r\n\r\n# ---------------------------------- numpy ---------------------------------- #\r\n\r\ndef numpy_to_numpy(x):\r\n    return do(\'array\', x)\r\n\r\n\r\n_FUNCS[\'numpy\', \'to_numpy\'] = numpy_to_numpy\r\n_FUNCS[\'numpy\', \'complex\'] = complex_add_re_im\r\n_FUNCS[\'builtins\', \'to_numpy\'] = numpy_to_numpy\r\n_SUBMODULE_ALIASES[\'numpy\', \'linalg.expm\'] = \'scipy.linalg\'\r\n_CUSTOM_WRAPPERS[\'numpy\', \'linalg.svd\'] = svd_not_full_matrices_wrapper\r\n\r\n\r\n# ---------------------------------- cupy ----------------------------------- #\r\n\r\ndef cupy_to_numpy(x):  # pragma: no cover\r\n    return x.get()\r\n\r\n\r\n_FUNCS[\'cupy\', \'to_numpy\'] = cupy_to_numpy\r\n_FUNCS[\'cupy\', \'complex\'] = complex_add_re_im\r\n_CUSTOM_WRAPPERS[\'cupy\', \'linalg.svd\'] = svd_not_full_matrices_wrapper\r\n\r\n\r\n# ----------------------------------- jax ----------------------------------- #\r\n\r\n\r\n_JAX_RANDOM_KEY = None\r\n\r\n\r\ndef jax_random_seed(seed=None):\r\n    from jax.random import PRNGKey\r\n    global _JAX_RANDOM_KEY\r\n    if seed is None:\r\n        from random import SystemRandom\r\n        seed = SystemRandom().randint(-2**63, 2**63 - 1)  # inclusive high\r\n    _JAX_RANDOM_KEY = PRNGKey(seed)\r\n\r\n\r\ndef jax_random_get_key():\r\n    from jax.random import split\r\n    global _JAX_RANDOM_KEY\r\n    if _JAX_RANDOM_KEY is None:\r\n        jax_random_seed()\r\n    _JAX_RANDOM_KEY, subkey = split(_JAX_RANDOM_KEY)\r\n    return subkey\r\n\r\n\r\ndef jax_random_uniform(low=0.0, high=1.0, size=None, **kwargs):\r\n    from jax.random import uniform\r\n    if size is None:\r\n        size = ()\r\n    return uniform(jax_random_get_key(), shape=size,\r\n                   minval=low, maxval=high, **kwargs)\r\n\r\n\r\ndef jax_random_normal(loc=0.0, scale=1.0, size=None, **kwargs):\r\n    from jax.random import normal\r\n    if size is None:\r\n        size = ()\r\n    x = normal(jax_random_get_key(), shape=size, **kwargs)\r\n    if scale != 1.0:\r\n        x *= scale\r\n    if loc != 0.0:\r\n        x += loc\r\n    return x\r\n\r\n\r\ndef jax_to_numpy(x):\r\n    return x.__array__()\r\n\r\n\r\n_FUNCS[\'jax\', \'to_numpy\'] = jax_to_numpy\r\n_FUNCS[\'jax\', \'random.seed\'] = jax_random_seed\r\n_FUNCS[\'jax\', \'random.uniform\'] = jax_random_uniform\r\n_FUNCS[\'jax\', \'random.normal\'] = jax_random_normal\r\n_MODULE_ALIASES[\'jax\'] = \'jax.numpy\'\r\n_SUBMODULE_ALIASES[\'jax\', \'complex\'] = \'jax.lax\'\r\n_CUSTOM_WRAPPERS[\'jax\', \'linalg.qr\'] = qr_allow_fat\r\n_CUSTOM_WRAPPERS[\'jax\', \'linalg.svd\'] = svd_not_full_matrices_wrapper\r\n\r\n\r\n# -------------------------------- autograd --------------------------------- #\r\n\r\n_MODULE_ALIASES[\'autograd\'] = \'autograd.numpy\'\r\n_CUSTOM_WRAPPERS[\'autograd\', \'linalg.svd\'] = svd_not_full_matrices_wrapper\r\n_FUNCS[\'autograd\', \'complex\'] = complex_add_re_im\r\n\r\n\r\n# ---------------------------------- dask ----------------------------------- #\r\n\r\ndef dask_to_numpy(x):\r\n    return x.compute()\r\n\r\n\r\n_FUNCS[\'dask\', \'to_numpy\'] = dask_to_numpy\r\n_FUNCS[\'dask\', \'complex\'] = complex_add_re_im\r\n_MODULE_ALIASES[\'dask\'] = \'dask.array\'\r\n_CUSTOM_WRAPPERS[\'dask\', \'linalg.svd\'] = svd_manual_full_matrices_kwarg\r\n\r\n\r\n# ---------------------------------- mars ----------------------------------- #\r\n\r\ndef mars_to_numpy(x):\r\n    return x.execute()\r\n\r\n\r\n_FUNCS[\'mars\', \'to_numpy\'] = mars_to_numpy\r\n_FUNCS[\'mars\', \'complex\'] = complex_add_re_im\r\n_MODULE_ALIASES[\'mars\'] = \'mars.tensor\'\r\n\r\n\r\n# ----------------------------------- ctf ----------------------------------- #\r\n\r\n\r\ndef ctf_array(x):\r\n    return do(\'astensor\', x, like=\'ctf\')\r\n\r\n\r\ndef ctf_to_numpy(x):\r\n    return x.to_nparray()\r\n\r\n\r\ndef ctf_get_dtype_name(x):\r\n    return x.dtype.__name__\r\n\r\n\r\n_FUNCS[\'ctf\', \'array\'] = ctf_array\r\n_FUNCS[\'ctf\', \'to_numpy\'] = ctf_to_numpy\r\n_FUNCS[\'ctf\', \'get_dtype_name\'] = ctf_get_dtype_name\r\n_SUBMODULE_ALIASES[\'ctf\', \'linalg.svd\'] = \'ctf\'\r\n_SUBMODULE_ALIASES[\'ctf\', \'linalg.eigh\'] = \'ctf\'\r\n_SUBMODULE_ALIASES[\'ctf\', \'linalg.qr\'] = \'ctf\'\r\n\r\n\r\n# ------------------------------- tensorflow -------------------------------- #\r\n\r\ndef tensorflow_to_numpy(x):\r\n    return x.numpy()\r\n\r\n\r\n_FUNCS[\'tensorflow\', \'to_numpy\'] = tensorflow_to_numpy\r\n\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'log\'] = \'tensorflow.math\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'conj\'] = \'tensorflow.math\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'real\'] = \'tensorflow.math\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'imag\'] = \'tensorflow.math\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'power\'] = \'tensorflow.math\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'count_nonzero\'] = \'tensorflow.math\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'diag\'] = \'tensorflow.linalg\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'trace\'] = \'tensorflow.linalg\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'tril\'] = \'tensorflow.linalg\'\r\n_SUBMODULE_ALIASES[\'tensorflow\', \'triu\'] = \'tensorflow.linalg\'\r\n\r\n_FUNC_ALIASES[\'tensorflow\', \'sum\'] = \'reduce_sum\'\r\n_FUNC_ALIASES[\'tensorflow\', \'min\'] = \'reduce_min\'\r\n_FUNC_ALIASES[\'tensorflow\', \'max\'] = \'reduce_max\'\r\n_FUNC_ALIASES[\'tensorflow\', \'mean\'] = \'reduce_mean\'\r\n_FUNC_ALIASES[\'tensorflow\', \'prod\'] = \'reduce_prod\'\r\n_FUNC_ALIASES[\'tensorflow\', \'concatenate\'] = \'concat\'\r\n_FUNC_ALIASES[\'tensorflow\', \'clip\'] = \'clip_by_value\'\r\n_FUNC_ALIASES[\'tensorflow\', \'arange\'] = \'range\'\r\n_FUNC_ALIASES[\'tensorflow\', \'tril\'] = \'band_part\'\r\n_FUNC_ALIASES[\'tensorflow\', \'triu\'] = \'band_part\'\r\n_FUNC_ALIASES[\'tensorflow\', \'diag\'] = \'tensor_diag\'\r\n_FUNC_ALIASES[\'tensorflow\', \'array\'] = \'convert_to_tensor\'\r\n_FUNC_ALIASES[\'tensorflow\', \'astype\'] = \'cast\'\r\n_FUNC_ALIASES[\'tensorflow\', \'power\'] = \'pow\'\r\n\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'linalg.svd\'] = svd_sUV_to_UsVH_wrapper\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'linalg.qr\'] = qr_allow_fat\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'tril\'] = tril_to_band_part\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'triu\'] = triu_to_band_part\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'random.uniform\'] = make_translator([\r\n    (\'low\', (\'minval\', 0.0)),\r\n    (\'high\', (\'maxval\', 1.0)),\r\n    (\'size\', (\'shape\', ())),\r\n])\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'random.normal\'] = make_translator([\r\n    (\'loc\', (\'mean\', 0.0)),\r\n    (\'scale\', (\'stddev\', 1.0)),\r\n    (\'size\', (\'shape\', ())),\r\n])\r\n_CUSTOM_WRAPPERS[\'tensorflow\', \'clip\'] = make_translator([\r\n    (\'a\', (\'t\', 0.0)),\r\n    (\'a_min\', (\'clip_value_min\',)),\r\n    (\'a_max\', (\'clip_value_max\',)),\r\n])\r\n\r\n\r\n# ---------------------------------- torch ---------------------------------- #\r\n\r\ndef torch_transpose(x, axes=None):\r\n    if axes is None:\r\n        axes = reversed(range(0, x.ndimension()))\r\n    return x.permute(*axes)\r\n\r\n\r\ndef torch_count_nonzero(x):\r\n    return do(\'sum\', x != 0, like=x)\r\n\r\n\r\ndef torch_astype(x, dtype):\r\n    return x.to(dtype=to_backend_dtype(dtype, like=x))\r\n\r\n\r\ndef torch_get_dtype_name(x):\r\n    return str(x.dtype).split(\'.\')[-1]\r\n\r\n\r\ndef torch_to_numpy(x):\r\n    return x.detach().cpu().numpy()\r\n\r\n\r\ndef torch_linalg_solve(a, b):\r\n    return do(\'solve\', b, a)[0]\r\n\r\n\r\ndef torch_linalg_lstsq(a, b):\r\n    return do(\'lstsq\', b, a)[0]\r\n\r\n\r\ndef torch_linalg_eigh(x):\r\n    return tuple(do(\'symeig\', x, eigenvectors=True))\r\n\r\n\r\ndef torch_linalg_eigvalsh(x):\r\n    return do(\'symeig\', x, eigenvectors=False)[0]\r\n\r\n\r\n_FUNCS[\'torch\', \'astype\'] = torch_astype\r\n_FUNCS[\'torch\', \'to_numpy\'] = torch_to_numpy\r\n_FUNCS[\'torch\', \'transpose\'] = torch_transpose\r\n_FUNCS[\'torch\', \'count_nonzero\'] = torch_count_nonzero\r\n_FUNCS[\'torch\', \'get_dtype_name\'] = torch_get_dtype_name\r\n_FUNCS[\'torch\', \'linalg.solve\'] = torch_linalg_solve\r\n_FUNCS[\'torch\', \'linalg.lstsq\'] = torch_linalg_lstsq\r\n_FUNCS[\'torch\', \'linalg.eigh\'] = torch_linalg_eigh\r\n_FUNCS[\'torch\', \'linalg.eigvalsh\'] = torch_linalg_eigvalsh\r\n\r\n_FUNC_ALIASES[\'torch\', \'clip\'] = \'clamp\'\r\n_FUNC_ALIASES[\'torch\', \'power\'] = \'pow\'\r\n_FUNC_ALIASES[\'torch\', \'array\'] = \'tensor\'\r\n_FUNC_ALIASES[\'torch\', \'concatenate\'] = \'cat\'\r\n_FUNC_ALIASES[\'torch\', \'random.normal\'] = \'randn\'\r\n_FUNC_ALIASES[\'torch\', \'random.uniform\'] = \'rand\'\r\n\r\n_SUBMODULE_ALIASES[\'torch\', \'linalg.qr\'] = \'torch\'\r\n_SUBMODULE_ALIASES[\'torch\', \'linalg.svd\'] = \'torch\'\r\n_SUBMODULE_ALIASES[\'torch\', \'linalg.norm\'] = \'torch\'\r\n_SUBMODULE_ALIASES[\'torch\', \'random.normal\'] = \'torch\'\r\n_SUBMODULE_ALIASES[\'torch\', \'random.uniform\'] = \'torch\'\r\n\r\n_CUSTOM_WRAPPERS[\'torch\', \'linalg.svd\'] = svd_UsV_to_UsVH_wrapper\r\n_CUSTOM_WRAPPERS[\'torch\', \'linalg.qr\'] = qr_allow_fat\r\n_CUSTOM_WRAPPERS[\'torch\', \'random.normal\'] = scale_random_normal_manually\r\n_CUSTOM_WRAPPERS[\'torch\', \'random.uniform\'] = scale_random_uniform_manually\r\n_CUSTOM_WRAPPERS[\'torch\', \'stack\'] = make_translator([\r\n    (\'arrays\', (\'tensors\',)),\r\n    (\'axis\', (\'dim\', 0)),\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'concatenate\'] = make_translator([\r\n    (\'arrays\', (\'tensors\',)),\r\n    (\'axis\', (\'dim\', 0))\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'tril\'] = make_translator([\r\n    (\'m\', (\'input\',)),\r\n    (\'k\', (\'diagonal\', 0)),\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'triu\'] = make_translator([\r\n    (\'m\', (\'input\',)),\r\n    (\'k\', (\'diagonal\', 0)),\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'clip\'] = make_translator([\r\n    (\'a\', (\'input\',)),\r\n    (\'a_min\', (\'min\',)),\r\n    (\'a_max\', (\'max\',)),\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'ones\'] = make_translator([\r\n    (\'shape\', (\'size\',)),\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'zeros\'] = make_translator([\r\n    (\'shape\', (\'size\',)),\r\n])\r\n_CUSTOM_WRAPPERS[\'torch\', \'empty\'] = make_translator([\r\n    (\'shape\', (\'size\',)),\r\n])\r\n\r\n\r\n# --------------------------- register your own! ---------------------------- #\r\n\r\ndef register_function(backend, name, fn, wrap=False):\r\n    """"""Directly provide your own function.\r\n\r\n    Parameters\r\n    ----------\r\n    backend : str\r\n        The name of the backend to register the function for.\r\n    name : str\r\n        Name of the function, e.g. `\'sum\'` or `\'linalg.svd\'`.\r\n    fn : callable\r\n        The function to register.\r\n    wrap : bool, optional\r\n        Whether to wrap the old function like ``fn(old_fn)`` rather than\r\n        directly supply the entire new function.\r\n    """"""\r\n    if wrap:\r\n        old = get_lib_fn(backend, name)\r\n        _FUNCS[backend, name] = fn(old)\r\n    else:\r\n        _FUNCS[backend, name] = fn\r\n'"
tests/__init__.py,0,b''
tests/test_autoray.py,8,"b'import importlib\n\nimport pytest\n\nimport autoray as ar\n\n\n# find backends to tests\nBACKENDS = [\'numpy\']\nfor lib in [\'cupy\', \'dask\', \'tensorflow\', \'torch\', \'mars\', \'jax\']:\n    if importlib.util.find_spec(lib):\n        BACKENDS.append(lib)\n\n        if lib == \'jax\':\n            from jax.config import config\n            config.update(""jax_enable_x64"", True)\n\n\nJAX_RANDOM_KEY = None\n\n\ndef gen_rand(shape, backend, dtype=\'float64\'):\n    if backend == \'jax\':\n        from jax import random as jrandom\n\n        global JAX_RANDOM_KEY\n\n        if JAX_RANDOM_KEY is None:\n            JAX_RANDOM_KEY = jrandom.PRNGKey(42)\n        JAX_RANDOM_KEY, subkey = jrandom.split(JAX_RANDOM_KEY)\n\n        return jrandom.uniform(subkey, shape=shape, dtype=dtype)\n\n    x = ar.do(\'random.uniform\', size=shape, like=backend)\n    x = ar.astype(x, ar.to_backend_dtype(dtype, backend))\n    assert ar.get_dtype_name(x) == dtype\n    return x\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\n@pytest.mark.parametrize(\'fn\', [\'sqrt\', \'exp\', \'sum\'])\ndef test_basic(backend, fn):\n    x = gen_rand((2, 3, 4), backend)\n    y = ar.do(fn, x)\n    assert ar.infer_backend(x) == ar.infer_backend(y) == backend\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\n@pytest.mark.parametrize(\'fn,args\', [\n    (ar.conj, []),\n    (ar.transpose, []),\n    (ar.real, []),\n    (ar.imag, []),\n    (ar.reshape, [(5, 3)]),\n])\ndef test_attribute_prefs(backend, fn, args):\n    x = gen_rand((3, 5), backend)\n    y = fn(x, *args)\n    assert ar.infer_backend(x) == ar.infer_backend(y) == backend\n\n\ndef modified_gram_schmidt(X):\n\n    Q = []\n    for j in range(0, X.shape[0]):\n\n        q = X[j, :]\n        for i in range(0, j):\n            rij = ar.do(\'tensordot\', ar.do(\'conj\', Q[i]), q, 1)\n            q = q - rij * Q[i]\n\n        rjj = ar.do(\'linalg.norm\', q, 2)\n        Q.append(q / rjj)\n\n    return ar.do(\'stack\', Q, axis=0, like=X)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_mgs(backend):\n    x = gen_rand((3, 5), backend)\n    Ux = modified_gram_schmidt(x)\n    y = ar.do(\'sum\', Ux @ ar.dag(Ux))\n    assert ar.to_numpy(y) == pytest.approx(3)\n\n\ndef modified_gram_schmidt_np_mimic(X):\n    from autoray import numpy as np\n    print(np)\n\n    Q = []\n    for j in range(0, X.shape[0]):\n\n        q = X[j, :]\n        for i in range(0, j):\n            rij = np.tensordot(np.conj(Q[i]), q, 1)\n            q = q - rij * Q[i]\n\n        rjj = np.linalg.norm(q, 2)\n        Q.append(q / rjj)\n\n    return np.stack(Q, axis=0, like=X)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_mgs_np_mimic(backend):\n    x = gen_rand((3, 5), backend)\n    Ux = modified_gram_schmidt_np_mimic(x)\n    y = ar.do(\'sum\', Ux @ ar.dag(Ux))\n    assert ar.to_numpy(y) == pytest.approx(3)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_linalg_svd_square(backend):\n    x = gen_rand((5, 4), backend)\n    U, s, V = ar.do(\'linalg.svd\', x)\n    assert (\n        ar.infer_backend(x) ==\n        ar.infer_backend(U) ==\n        ar.infer_backend(s) ==\n        ar.infer_backend(V) ==\n        backend\n    )\n    y = U @ ar.do(\'diag\', s, like=x) @ V\n    diff = ar.do(\'sum\', abs(y - x))\n    assert ar.to_numpy(diff) < 1e-8\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_translator_random_uniform(backend):\n    from autoray import numpy as anp\n\n    x = anp.random.uniform(low=-10, size=(4, 5), like=backend)\n    assert (ar.to_numpy(x) > -10).all()\n    assert (ar.to_numpy(x) < 1.0).all()\n\n    # test default single scalar\n    x = anp.random.uniform(low=1000, high=2000, like=backend)\n    assert 1000 <= ar.to_numpy(x) < 2000\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_translator_random_normal(backend):\n    from autoray import numpy as anp\n\n    x = anp.random.normal(100.0, 0.1, size=(4, 5), like=backend)\n    assert (ar.to_numpy(x) > 90.0).all()\n    assert (ar.to_numpy(x) < 110.0).all()\n\n    if backend == \'tensorflow\':\n        x32 = ar.do(\'random.normal\', 100.0, 0.1, dtype=\'float32\',\n                    size=(4, 5), like=backend)\n        assert x32.dtype == \'float32\'\n        assert (ar.to_numpy(x32) > 90.0).all()\n        assert (ar.to_numpy(x32) < 110.0).all()\n\n    # test default single scalar\n    x = anp.random.normal(loc=1500, scale=10, like=backend)\n    assert 1000 <= ar.to_numpy(x) < 2000\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_tril(backend):\n    x = gen_rand((4, 4), backend)\n    xl = ar.do(\'tril\', x)\n    xln = ar.to_numpy(xl)\n    assert xln[0, 1] == 0.0\n    assert (xln > 0.0).sum() == 10\n    xl = ar.do(\'tril\', x, k=1)\n    xln = ar.to_numpy(xl)\n    assert xln[0, 1] != 0.0\n    assert xln[0, 2] == 0.0\n    assert (xln > 0.0).sum() == 13\n\n    if backend == \'tensorflow\':\n        with pytest.raises(ValueError):\n            ar.do(\'tril\', x, -1)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_triu(backend):\n    x = gen_rand((4, 4), backend)\n    xl = ar.do(\'triu\', x)\n    xln = ar.to_numpy(xl)\n    assert xln[1, 0] == 0.0\n    assert (xln > 0.0).sum() == 10\n    xl = ar.do(\'triu\', x, k=-1)\n    xln = ar.to_numpy(xl)\n    assert xln[1, 0] != 0.0\n    assert xln[2, 0] == 0.0\n    assert (xln > 0.0).sum() == 13\n\n    if backend == \'tensorflow\':\n        with pytest.raises(ValueError):\n            ar.do(\'triu\', x, 1)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\n@pytest.mark.parametrize(\'shape\', [(4, 3), (4, 4), (3, 4)])\ndef test_qr_thin_square_fat(backend, shape):\n    x = gen_rand(shape, backend)\n    Q, R = ar.do(\'linalg.qr\', x)\n    xn, Qn, Rn = map(ar.to_numpy, (x, Q, R))\n    assert ar.do(\'allclose\', xn, Qn @ Rn)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_count_nonzero(backend):\n    if backend == \'mars\':\n        import mars\n        if mars._version.version_info < (0, 4, 0, \'\'):\n            pytest.xfail(\'mars count_nonzero bug fixed in version 0.4.\')\n\n    x = ar.do(\'array\', [0, 1, 2, 0, 3], like=backend)\n    nz = ar.do(\'count_nonzero\', x)\n    assert ar.to_numpy(nz) == 3\n\n    x = ar.do(\'array\', [0., 1., 2., 0., 3.], like=backend)\n    nz = ar.do(\'count_nonzero\', x)\n    assert ar.to_numpy(nz) == 3\n\n    x = ar.do(\'array\', [False, True, True, False, True], like=backend)\n    nz = ar.do(\'count_nonzero\', x)\n    assert ar.to_numpy(nz) == 3\n\n\ndef test_pseudo_submodules():\n    x = gen_rand((2, 3), \'numpy\')\n    xT = ar.do(\'numpy.transpose\', x, like=\'autoray\')\n    assert xT.shape == (3, 2)\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\n@pytest.mark.parametrize(\'creation\', [\'ones\', \'zeros\'])\n@pytest.mark.parametrize(\'dtype\', [\'float32\', \'float64\',\n                                   \'complex64\', \'complex128\'])\ndef test_dtype_specials(backend, creation, dtype):\n    import numpy as np\n    x = ar.do(creation, shape=(2, 3), like=backend)\n\n    if backend == \'torch\' and \'complex\' in dtype:\n        pytest.xfail(""Pytorch doesn\'t support complex numbers yet..."")\n\n    x = ar.astype(x, dtype)\n    assert ar.get_dtype_name(x) == dtype\n    x = ar.to_numpy(x)\n    assert isinstance(x, np.ndarray)\n    assert ar.get_dtype_name(x) == dtype\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\n@pytest.mark.parametrize(\'real_dtype\', [\'float32\', \'float64\'])\ndef test_complex_creation(backend, real_dtype):\n    if backend == \'torch\':\n        pytest.xfail(""Pytorch doesn\'t support complex numbers yet..."")\n\n    x = ar.do(\n        \'complex\',\n        ar.astype(ar.do(\'random.normal\', size=(3, 4),\n                        like=backend), real_dtype),\n        ar.astype(ar.do(\'random.normal\', size=(3, 4),\n                        like=backend), real_dtype)\n    )\n    assert ar.get_dtype_name(x) == {\'float32\': \'complex64\',\n                                    \'float64\': \'complex128\'}[real_dtype]\n\n\n@pytest.mark.parametrize(\'backend\', BACKENDS)\ndef test_register_function(backend):\n    x = ar.do(\'ones\', shape=(2, 3), like=backend)\n\n    def direct_fn(x):\n        return 1\n\n    # first test we can provide the function directly\n    ar.register_function(backend, \'test_register\', direct_fn)\n    assert ar.do(\'test_register\', x) == 1\n\n    def wrap_fn(fn):\n\n        def new_fn(*args, **kwargs):\n            res = fn(*args, **kwargs)\n            return res + 1\n\n        return new_fn\n\n    # then check we can wrap the old (previous) function\n    ar.register_function(backend, \'test_register\', wrap_fn, wrap=True)\n    assert ar.do(\'test_register\', x) == 2\n'"
