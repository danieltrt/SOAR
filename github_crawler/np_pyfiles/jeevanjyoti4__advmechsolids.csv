file_path,api_count,code
polarUtilities.py,0,"b""import sympy as sp\n\nr, theta = sp.symbols('r, theta')\n\n#f = sp.Function('f')(r,theta)\n\n\ndef delr_delx():\n    return sp.cos(theta)\n    \ndef delr_dely():\n    return sp.sin(theta)\n\ndef deltheta_delx():\n    return -sp.sin(theta)/r\n\ndef deltheta_dely():\n    return sp.cos(theta)/r\n\n\n\ndef del_delx(f):\n    return delr_delx()*sp.diff(f,r,1) + deltheta_delx()*sp.diff(f,theta,1)\n\ndef del_dely(f):\n    return delr_dely()*sp.diff(f,r,1) + deltheta_dely()*sp.diff(f,theta,1)\n\ndef del2_delx2(f):\n    return del_delx(del_delx(f))\n\n\ndef del2_dely2(f):\n    return del_dely(del_dely(f))\n\n\ndef polarLaplacian(f):\n    return (del2_delx2(f)+del2_dely2(f)).simplify()\n\n\ndef polarbiharmonic(f):\n    return polarLaplacian(polarLaplacian(f))\n\n\ndef sigma_xx(f):\n    return del2_dely2(f)\n\ndef sigma_yy(f):\n    return del2_delx2(f)\n\ndef sigma_xy(f):\n    return -del_delx(del_dely(f))\n    \ndef sigma_rect(f):\n    return sp.Matrix([[sigma_xx(f), sigma_xy(f)],[sigma_xy(f), sigma_yy(f)]])\n    \n\nQ = sp.Matrix([[sp.cos(theta), sp.sin(theta)],[-sp.sin(theta), sp.cos(theta)]])\n\n\ndef sigma_polar(f):\n    return Q*sigma_rect(f)*(Q.T)\n\n\ndef sigma_rr(f):\n    return (sigma_polar(f)[0,0]).simplify().expand()\n\ndef sigma_tt(f):\n    return (sigma_polar(f)[1,1]).simplify().expand()\n\ndef sigma_rt(f):\n    return (sigma_polar(f)[0,1]).simplify().expand()\n\ndef sigma_tr(f):\n    return (sigma_polar(f)[1,0]).simplify().expand()\n"""
